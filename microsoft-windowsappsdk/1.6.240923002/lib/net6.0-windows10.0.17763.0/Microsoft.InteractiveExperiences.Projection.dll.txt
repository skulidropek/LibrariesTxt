[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfo : ValueType {
    public static IObjectReference CreateMarshaler(DisplayAdvancedColorInfo obj);
    public static ObjectReferenceValue CreateMarshaler2(DisplayAdvancedColorInfo obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DisplayAdvancedColorInfo FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DisplayAdvancedColorInfo obj);
    public static MarshalerArray<DisplayAdvancedColorInfo> CreateMarshalerArray(DisplayAdvancedColorInfo[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DisplayAdvancedColorInfo[] FromAbiArray(object box);
    public static void CopyAbiArray(DisplayAdvancedColorInfo[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DisplayAdvancedColorInfo[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DisplayAdvancedColorInfo> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfoRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Display.DisplayInformation : ValueType {
    public static IObjectReference CreateMarshaler(DisplayInformation obj);
    public static ObjectReferenceValue CreateMarshaler2(DisplayInformation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DisplayInformation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DisplayInformation obj);
    public static MarshalerArray<DisplayInformation> CreateMarshalerArray(DisplayInformation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DisplayInformation[] FromAbiArray(object box);
    public static void CopyAbiArray(DisplayInformation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DisplayInformation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DisplayInformation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Display.DisplayInformationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("B44F0F47-7065-5175-BA3E-714489C85A3E")]
internal interface ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfo {
}
internal static class ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfoMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsHdrMetadataFormatCurrentlySupported(IObjectReference _obj, DisplayHdrMetadataFormat format);
    internal static bool IsAdvancedColorKindAvailable(IObjectReference _obj, DisplayAdvancedColorKind kind);
    internal static Point get_BluePrimary(IObjectReference _obj);
    internal static DisplayAdvancedColorKind get_CurrentAdvancedColorKind(IObjectReference _obj);
    internal static Point get_GreenPrimary(IObjectReference _obj);
    internal static double get_MaxAverageFullFrameLuminanceInNits(IObjectReference _obj);
    internal static double get_MaxLuminanceInNits(IObjectReference _obj);
    internal static double get_MinLuminanceInNits(IObjectReference _obj);
    internal static Point get_RedPrimary(IObjectReference _obj);
    internal static double get_SdrWhiteLevelInNits(IObjectReference _obj);
    internal static Point get_WhitePoint(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F0D58D4F-84CE-5B27-B222-4F8F7DC0AAEB")]
internal interface ABI.Microsoft.Graphics.Display.IDisplayInformation {
}
internal static class ABI.Microsoft.Graphics.Display.IDisplayInformationMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _AdvancedColorInfoChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ColorProfileChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Destroyed_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _IsStereoEnabledChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> _AdvancedColorInfoChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> _ColorProfileChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> _Destroyed { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> _IsStereoEnabledChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncOperation`1<IRandomAccessStream> GetColorProfileAsync(IObjectReference _obj);
    internal static IRandomAccessStream GetColorProfile(IObjectReference _obj);
    internal static DisplayAdvancedColorInfo GetAdvancedColorInfo(IObjectReference _obj);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    internal static bool get_IsStereoEnabled(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> MakeAdvancedColorInfoChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> get__AdvancedColorInfoChanged();
    internal static EventSource`1<TypedEventHandler`2<DisplayInformation, object>> Get_AdvancedColorInfoChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> MakeColorProfileChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> get__ColorProfileChanged();
    internal static EventSource`1<TypedEventHandler`2<DisplayInformation, object>> Get_ColorProfileChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> MakeDestroyedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> get__Destroyed();
    internal static EventSource`1<TypedEventHandler`2<DisplayInformation, object>> Get_Destroyed2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> MakeIsStereoEnabledChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayInformation, object>>> get__IsStereoEnabledChanged();
    internal static EventSource`1<TypedEventHandler`2<DisplayInformation, object>> Get_IsStereoEnabledChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2DE85048-37FA-56C0-AC30-47E2044D7EA8")]
internal interface ABI.Microsoft.Graphics.Display.IDisplayInformationStatics {
}
internal static class ABI.Microsoft.Graphics.Display.IDisplayInformationStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DisplayInformation CreateForWindowId(IObjectReference _obj, WindowId windowId);
    internal static DisplayInformation CreateForDisplayId(IObjectReference _obj, DisplayId displayId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
[GuidAttribute("478CEC68-EA8E-52FC-87E2-C819DE000F92")]
public static class ABI.Microsoft.UI.ClosableNotifierHandler : object {
    public static IntPtr AbiToProjectionVftablePtr;
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    private static ClosableNotifierHandler();
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IObjectReference CreateMarshaler(ClosableNotifierHandler managedDelegate);
    public static ObjectReferenceValue CreateMarshaler2(ClosableNotifierHandler managedDelegate);
    public static IntPtr GetAbi(IObjectReference value);
    public static ClosableNotifierHandler FromAbi(IntPtr nativeDelegate);
    public static ClosableNotifierHandler CreateRcw(IntPtr ptr);
    public static IntPtr FromManaged(ClosableNotifierHandler managedDelegate);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeAbi(IntPtr abi);
    public static MarshalerArray<ClosableNotifierHandler> CreateMarshalerArray(ClosableNotifierHandler[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ClosableNotifierHandler[] FromAbiArray(object box);
    public static void CopyAbiArray(ClosableNotifierHandler[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ClosableNotifierHandler[] array);
    public static void DisposeMarshalerArray(MarshalerArray<ClosableNotifierHandler> array);
    public static void DisposeAbiArray(object box);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr);
}
internal class ABI.Microsoft.UI.ClosableNotifierHandlerWinRTTypeDetails : DelegateTypeDetails`1<ClosableNotifierHandler> {
    public virtual ComInterfaceEntry GetDelegateInterface();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.ColorHelper : ValueType {
    public static IObjectReference CreateMarshaler(ColorHelper obj);
    public static ObjectReferenceValue CreateMarshaler2(ColorHelper obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ColorHelper FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ColorHelper obj);
    public static MarshalerArray<ColorHelper> CreateMarshalerArray(ColorHelper[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ColorHelper[] FromAbiArray(object box);
    public static void CopyAbiArray(ColorHelper[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ColorHelper[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ColorHelper> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.ColorHelperRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Colors : ValueType {
    public static IObjectReference CreateMarshaler(Colors obj);
    public static ObjectReferenceValue CreateMarshaler2(Colors obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Colors FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Colors obj);
    public static MarshalerArray<Colors> CreateMarshalerArray(Colors[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Colors[] FromAbiArray(object box);
    public static void CopyAbiArray(Colors[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Colors[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Colors> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.ColorsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.AmbientLight : ValueType {
    public static IObjectReference CreateMarshaler(AmbientLight obj);
    public static ObjectReferenceValue CreateMarshaler2(AmbientLight obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AmbientLight FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AmbientLight obj);
    public static MarshalerArray<AmbientLight> CreateMarshalerArray(AmbientLight[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AmbientLight[] FromAbiArray(object box);
    public static void CopyAbiArray(AmbientLight[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AmbientLight[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AmbientLight> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.AmbientLightRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.AnimationController : ValueType {
    public static IObjectReference CreateMarshaler(AnimationController obj);
    public static ObjectReferenceValue CreateMarshaler2(AnimationController obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AnimationController FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AnimationController obj);
    public static MarshalerArray<AnimationController> CreateMarshalerArray(AnimationController[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AnimationController[] FromAbiArray(object box);
    public static void CopyAbiArray(AnimationController[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AnimationController[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AnimationController> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.AnimationControllerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.AnimationPropertyInfo : ValueType {
    public static IObjectReference CreateMarshaler(AnimationPropertyInfo obj);
    public static ObjectReferenceValue CreateMarshaler2(AnimationPropertyInfo obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AnimationPropertyInfo FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AnimationPropertyInfo obj);
    public static MarshalerArray<AnimationPropertyInfo> CreateMarshalerArray(AnimationPropertyInfo[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AnimationPropertyInfo[] FromAbiArray(object box);
    public static void CopyAbiArray(AnimationPropertyInfo[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AnimationPropertyInfo[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AnimationPropertyInfo> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.AnimationPropertyInfoRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.BackEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(BackEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(BackEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BackEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BackEasingFunction obj);
    public static MarshalerArray<BackEasingFunction> CreateMarshalerArray(BackEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BackEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(BackEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BackEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BackEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.BackEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.BooleanKeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(BooleanKeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(BooleanKeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BooleanKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BooleanKeyFrameAnimation obj);
    public static MarshalerArray<BooleanKeyFrameAnimation> CreateMarshalerArray(BooleanKeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BooleanKeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(BooleanKeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BooleanKeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BooleanKeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.BooleanKeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.BounceEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(BounceEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(BounceEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BounceEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BounceEasingFunction obj);
    public static MarshalerArray<BounceEasingFunction> CreateMarshalerArray(BounceEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BounceEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(BounceEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BounceEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BounceEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.BounceEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.BounceScalarNaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(BounceScalarNaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(BounceScalarNaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BounceScalarNaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BounceScalarNaturalMotionAnimation obj);
    public static MarshalerArray<BounceScalarNaturalMotionAnimation> CreateMarshalerArray(BounceScalarNaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BounceScalarNaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(BounceScalarNaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BounceScalarNaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BounceScalarNaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.BounceScalarNaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.BounceVector2NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(BounceVector2NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(BounceVector2NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BounceVector2NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BounceVector2NaturalMotionAnimation obj);
    public static MarshalerArray<BounceVector2NaturalMotionAnimation> CreateMarshalerArray(BounceVector2NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BounceVector2NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(BounceVector2NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BounceVector2NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BounceVector2NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.BounceVector2NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.BounceVector3NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(BounceVector3NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(BounceVector3NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BounceVector3NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BounceVector3NaturalMotionAnimation obj);
    public static MarshalerArray<BounceVector3NaturalMotionAnimation> CreateMarshalerArray(BounceVector3NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BounceVector3NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(BounceVector3NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BounceVector3NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BounceVector3NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.BounceVector3NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CircleEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(CircleEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(CircleEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CircleEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CircleEasingFunction obj);
    public static MarshalerArray<CircleEasingFunction> CreateMarshalerArray(CircleEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CircleEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(CircleEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CircleEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CircleEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CircleEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ColorKeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(ColorKeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(ColorKeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ColorKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ColorKeyFrameAnimation obj);
    public static MarshalerArray<ColorKeyFrameAnimation> CreateMarshalerArray(ColorKeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ColorKeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(ColorKeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ColorKeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ColorKeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ColorKeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(CompositionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionAnimation obj);
    public static MarshalerArray<CompositionAnimation> CreateMarshalerArray(CompositionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionAnimationGroup : ValueType {
    public static IObjectReference CreateMarshaler(CompositionAnimationGroup obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionAnimationGroup obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionAnimationGroup FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionAnimationGroup obj);
    public static MarshalerArray<CompositionAnimationGroup> CreateMarshalerArray(CompositionAnimationGroup[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionAnimationGroup[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionAnimationGroup[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionAnimationGroup[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionAnimationGroup> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionAnimationGroupRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionBackdropBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionBackdropBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionBackdropBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionBackdropBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionBackdropBrush obj);
    public static MarshalerArray<CompositionBackdropBrush> CreateMarshalerArray(CompositionBackdropBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionBackdropBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionBackdropBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionBackdropBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionBackdropBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionBackdropBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionBatchCompletedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CompositionBatchCompletedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionBatchCompletedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionBatchCompletedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionBatchCompletedEventArgs obj);
    public static MarshalerArray<CompositionBatchCompletedEventArgs> CreateMarshalerArray(CompositionBatchCompletedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionBatchCompletedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionBatchCompletedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionBatchCompletedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionBatchCompletedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionBatchCompletedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionBrush obj);
    public static MarshalerArray<CompositionBrush> CreateMarshalerArray(CompositionBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionCapabilities : ValueType {
    public static IObjectReference CreateMarshaler(CompositionCapabilities obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionCapabilities obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionCapabilities FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionCapabilities obj);
    public static MarshalerArray<CompositionCapabilities> CreateMarshalerArray(CompositionCapabilities[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionCapabilities[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionCapabilities[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionCapabilities[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionCapabilities> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionCapabilitiesRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionClip : ValueType {
    public static IObjectReference CreateMarshaler(CompositionClip obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionClip obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionClip FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionClip obj);
    public static MarshalerArray<CompositionClip> CreateMarshalerArray(CompositionClip[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionClip[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionClip[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionClip[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionClip> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionClipRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionColorBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionColorBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionColorBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionColorBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionColorBrush obj);
    public static MarshalerArray<CompositionColorBrush> CreateMarshalerArray(CompositionColorBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionColorBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionColorBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionColorBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionColorBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionColorBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionColorGradientStop : ValueType {
    public static IObjectReference CreateMarshaler(CompositionColorGradientStop obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionColorGradientStop obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionColorGradientStop FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionColorGradientStop obj);
    public static MarshalerArray<CompositionColorGradientStop> CreateMarshalerArray(CompositionColorGradientStop[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionColorGradientStop[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionColorGradientStop[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionColorGradientStop[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionColorGradientStop> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionColorGradientStopCollection : ValueType {
    public static IObjectReference CreateMarshaler(CompositionColorGradientStopCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionColorGradientStopCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionColorGradientStopCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionColorGradientStopCollection obj);
    public static MarshalerArray<CompositionColorGradientStopCollection> CreateMarshalerArray(CompositionColorGradientStopCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionColorGradientStopCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionColorGradientStopCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionColorGradientStopCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionColorGradientStopCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionColorGradientStopCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionColorGradientStopRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionCommitBatch : ValueType {
    public static IObjectReference CreateMarshaler(CompositionCommitBatch obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionCommitBatch obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionCommitBatch FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionCommitBatch obj);
    public static MarshalerArray<CompositionCommitBatch> CreateMarshalerArray(CompositionCommitBatch[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionCommitBatch[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionCommitBatch[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionCommitBatch[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionCommitBatch> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionCommitBatchRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionContainerShape : ValueType {
    public static IObjectReference CreateMarshaler(CompositionContainerShape obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionContainerShape obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionContainerShape FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionContainerShape obj);
    public static MarshalerArray<CompositionContainerShape> CreateMarshalerArray(CompositionContainerShape[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionContainerShape[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionContainerShape[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionContainerShape[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionContainerShape> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionContainerShapeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionDrawingSurface : ValueType {
    public static IObjectReference CreateMarshaler(CompositionDrawingSurface obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionDrawingSurface obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionDrawingSurface FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionDrawingSurface obj);
    public static MarshalerArray<CompositionDrawingSurface> CreateMarshalerArray(CompositionDrawingSurface[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionDrawingSurface[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionDrawingSurface[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionDrawingSurface[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionDrawingSurface> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionDrawingSurfaceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(CompositionEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionEasingFunction obj);
    public static MarshalerArray<CompositionEasingFunction> CreateMarshalerArray(CompositionEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionEffectBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionEffectBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionEffectBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionEffectBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionEffectBrush obj);
    public static MarshalerArray<CompositionEffectBrush> CreateMarshalerArray(CompositionEffectBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionEffectBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionEffectBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionEffectBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionEffectBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionEffectBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionEffectFactory : ValueType {
    public static IObjectReference CreateMarshaler(CompositionEffectFactory obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionEffectFactory obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionEffectFactory FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionEffectFactory obj);
    public static MarshalerArray<CompositionEffectFactory> CreateMarshalerArray(CompositionEffectFactory[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionEffectFactory[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionEffectFactory[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionEffectFactory[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionEffectFactory> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionEffectFactoryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionEffectSourceParameter : ValueType {
    public static IObjectReference CreateMarshaler(CompositionEffectSourceParameter obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionEffectSourceParameter obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionEffectSourceParameter FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionEffectSourceParameter obj);
    public static MarshalerArray<CompositionEffectSourceParameter> CreateMarshalerArray(CompositionEffectSourceParameter[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionEffectSourceParameter[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionEffectSourceParameter[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionEffectSourceParameter[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionEffectSourceParameter> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionEffectSourceParameterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionEllipseGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CompositionEllipseGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionEllipseGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionEllipseGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionEllipseGeometry obj);
    public static MarshalerArray<CompositionEllipseGeometry> CreateMarshalerArray(CompositionEllipseGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionEllipseGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionEllipseGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionEllipseGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionEllipseGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionEllipseGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionGeometricClip : ValueType {
    public static IObjectReference CreateMarshaler(CompositionGeometricClip obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionGeometricClip obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionGeometricClip FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionGeometricClip obj);
    public static MarshalerArray<CompositionGeometricClip> CreateMarshalerArray(CompositionGeometricClip[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionGeometricClip[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionGeometricClip[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionGeometricClip[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionGeometricClip> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionGeometricClipRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CompositionGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionGeometry obj);
    public static MarshalerArray<CompositionGeometry> CreateMarshalerArray(CompositionGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionGradientBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionGradientBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionGradientBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionGradientBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionGradientBrush obj);
    public static MarshalerArray<CompositionGradientBrush> CreateMarshalerArray(CompositionGradientBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionGradientBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionGradientBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionGradientBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionGradientBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionGradientBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionGraphicsDevice : ValueType {
    public static IObjectReference CreateMarshaler(CompositionGraphicsDevice obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionGraphicsDevice obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionGraphicsDevice FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionGraphicsDevice obj);
    public static MarshalerArray<CompositionGraphicsDevice> CreateMarshalerArray(CompositionGraphicsDevice[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionGraphicsDevice[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionGraphicsDevice[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionGraphicsDevice[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionGraphicsDevice> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionGraphicsDeviceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionLight : ValueType {
    public static IObjectReference CreateMarshaler(CompositionLight obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionLight obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionLight FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionLight obj);
    public static MarshalerArray<CompositionLight> CreateMarshalerArray(CompositionLight[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionLight[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionLight[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionLight[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionLight> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionLightRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionLinearGradientBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionLinearGradientBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionLinearGradientBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionLinearGradientBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionLinearGradientBrush obj);
    public static MarshalerArray<CompositionLinearGradientBrush> CreateMarshalerArray(CompositionLinearGradientBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionLinearGradientBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionLinearGradientBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionLinearGradientBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionLinearGradientBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionLinearGradientBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionLineGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CompositionLineGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionLineGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionLineGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionLineGeometry obj);
    public static MarshalerArray<CompositionLineGeometry> CreateMarshalerArray(CompositionLineGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionLineGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionLineGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionLineGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionLineGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionLineGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionMaskBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionMaskBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionMaskBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionMaskBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionMaskBrush obj);
    public static MarshalerArray<CompositionMaskBrush> CreateMarshalerArray(CompositionMaskBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionMaskBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionMaskBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionMaskBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionMaskBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionMaskBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionMipmapSurface : ValueType {
    public static IObjectReference CreateMarshaler(CompositionMipmapSurface obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionMipmapSurface obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionMipmapSurface FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionMipmapSurface obj);
    public static MarshalerArray<CompositionMipmapSurface> CreateMarshalerArray(CompositionMipmapSurface[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionMipmapSurface[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionMipmapSurface[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionMipmapSurface[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionMipmapSurface> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionMipmapSurfaceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionNineGridBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionNineGridBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionNineGridBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionNineGridBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionNineGridBrush obj);
    public static MarshalerArray<CompositionNineGridBrush> CreateMarshalerArray(CompositionNineGridBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionNineGridBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionNineGridBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionNineGridBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionNineGridBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionNineGridBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionObject : ValueType {
    public static IObjectReference CreateMarshaler(CompositionObject obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionObject obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionObject FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionObject obj);
    public static MarshalerArray<CompositionObject> CreateMarshalerArray(CompositionObject[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionObject[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionObject[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionObject[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionObject> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionObjectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionPath : ValueType {
    public static IObjectReference CreateMarshaler(CompositionPath obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionPath obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionPath FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionPath obj);
    public static MarshalerArray<CompositionPath> CreateMarshalerArray(CompositionPath[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionPath[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionPath[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionPath[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionPath> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionPathGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CompositionPathGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionPathGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionPathGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionPathGeometry obj);
    public static MarshalerArray<CompositionPathGeometry> CreateMarshalerArray(CompositionPathGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionPathGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionPathGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionPathGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionPathGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionPathGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionPathRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionProjectedShadow : ValueType {
    public static IObjectReference CreateMarshaler(CompositionProjectedShadow obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionProjectedShadow obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionProjectedShadow FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionProjectedShadow obj);
    public static MarshalerArray<CompositionProjectedShadow> CreateMarshalerArray(CompositionProjectedShadow[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionProjectedShadow[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionProjectedShadow[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionProjectedShadow[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionProjectedShadow> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionProjectedShadowCaster : ValueType {
    public static IObjectReference CreateMarshaler(CompositionProjectedShadowCaster obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionProjectedShadowCaster obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionProjectedShadowCaster FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionProjectedShadowCaster obj);
    public static MarshalerArray<CompositionProjectedShadowCaster> CreateMarshalerArray(CompositionProjectedShadowCaster[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionProjectedShadowCaster[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionProjectedShadowCaster[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionProjectedShadowCaster[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionProjectedShadowCaster> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection : ValueType {
    public static IObjectReference CreateMarshaler(CompositionProjectedShadowCasterCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionProjectedShadowCasterCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionProjectedShadowCasterCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionProjectedShadowCasterCollection obj);
    public static MarshalerArray<CompositionProjectedShadowCasterCollection> CreateMarshalerArray(CompositionProjectedShadowCasterCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionProjectedShadowCasterCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionProjectedShadowCasterCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionProjectedShadowCasterCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionProjectedShadowCasterCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionProjectedShadowCasterCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionProjectedShadowCasterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionProjectedShadowRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionProjectedShadowReceiver : ValueType {
    public static IObjectReference CreateMarshaler(CompositionProjectedShadowReceiver obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionProjectedShadowReceiver obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionProjectedShadowReceiver FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionProjectedShadowReceiver obj);
    public static MarshalerArray<CompositionProjectedShadowReceiver> CreateMarshalerArray(CompositionProjectedShadowReceiver[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionProjectedShadowReceiver[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionProjectedShadowReceiver[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionProjectedShadowReceiver[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionProjectedShadowReceiver> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionProjectedShadowReceiverRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection : ValueType {
    public static IObjectReference CreateMarshaler(CompositionProjectedShadowReceiverUnorderedCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionProjectedShadowReceiverUnorderedCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionProjectedShadowReceiverUnorderedCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionProjectedShadowReceiverUnorderedCollection obj);
    public static MarshalerArray<CompositionProjectedShadowReceiverUnorderedCollection> CreateMarshalerArray(CompositionProjectedShadowReceiverUnorderedCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionProjectedShadowReceiverUnorderedCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionProjectedShadowReceiverUnorderedCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionProjectedShadowReceiverUnorderedCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionProjectedShadowReceiverUnorderedCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionPropertySet : ValueType {
    public static IObjectReference CreateMarshaler(CompositionPropertySet obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionPropertySet obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionPropertySet FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionPropertySet obj);
    public static MarshalerArray<CompositionPropertySet> CreateMarshalerArray(CompositionPropertySet[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionPropertySet[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionPropertySet[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionPropertySet[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionPropertySet> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionPropertySetRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionRadialGradientBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionRadialGradientBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionRadialGradientBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionRadialGradientBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionRadialGradientBrush obj);
    public static MarshalerArray<CompositionRadialGradientBrush> CreateMarshalerArray(CompositionRadialGradientBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionRadialGradientBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionRadialGradientBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionRadialGradientBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionRadialGradientBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionRadialGradientBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionRectangleGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CompositionRectangleGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionRectangleGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionRectangleGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionRectangleGeometry obj);
    public static MarshalerArray<CompositionRectangleGeometry> CreateMarshalerArray(CompositionRectangleGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionRectangleGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionRectangleGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionRectangleGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionRectangleGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionRectangleGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionRoundedRectangleGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CompositionRoundedRectangleGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionRoundedRectangleGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionRoundedRectangleGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionRoundedRectangleGeometry obj);
    public static MarshalerArray<CompositionRoundedRectangleGeometry> CreateMarshalerArray(CompositionRoundedRectangleGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionRoundedRectangleGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionRoundedRectangleGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionRoundedRectangleGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionRoundedRectangleGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionRoundedRectangleGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionScopedBatch : ValueType {
    public static IObjectReference CreateMarshaler(CompositionScopedBatch obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionScopedBatch obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionScopedBatch FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionScopedBatch obj);
    public static MarshalerArray<CompositionScopedBatch> CreateMarshalerArray(CompositionScopedBatch[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionScopedBatch[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionScopedBatch[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionScopedBatch[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionScopedBatch> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionScopedBatchRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionShadow : ValueType {
    public static IObjectReference CreateMarshaler(CompositionShadow obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionShadow obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionShadow FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionShadow obj);
    public static MarshalerArray<CompositionShadow> CreateMarshalerArray(CompositionShadow[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionShadow[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionShadow[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionShadow[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionShadow> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionShadowRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionShape : ValueType {
    public static IObjectReference CreateMarshaler(CompositionShape obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionShape obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionShape FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionShape obj);
    public static MarshalerArray<CompositionShape> CreateMarshalerArray(CompositionShape[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionShape[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionShape[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionShape[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionShape> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionShapeCollection : ValueType {
    public static IObjectReference CreateMarshaler(CompositionShapeCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionShapeCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionShapeCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionShapeCollection obj);
    public static MarshalerArray<CompositionShapeCollection> CreateMarshalerArray(CompositionShapeCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionShapeCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionShapeCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionShapeCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionShapeCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionShapeCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionShapeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionSpriteShape : ValueType {
    public static IObjectReference CreateMarshaler(CompositionSpriteShape obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionSpriteShape obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionSpriteShape FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionSpriteShape obj);
    public static MarshalerArray<CompositionSpriteShape> CreateMarshalerArray(CompositionSpriteShape[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionSpriteShape[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionSpriteShape[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionSpriteShape[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionSpriteShape> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionSpriteShapeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionStrokeDashArray : ValueType {
    public static IObjectReference CreateMarshaler(CompositionStrokeDashArray obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionStrokeDashArray obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionStrokeDashArray FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionStrokeDashArray obj);
    public static MarshalerArray<CompositionStrokeDashArray> CreateMarshalerArray(CompositionStrokeDashArray[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionStrokeDashArray[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionStrokeDashArray[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionStrokeDashArray[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionStrokeDashArray> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionStrokeDashArrayRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionSurfaceBrush : ValueType {
    public static IObjectReference CreateMarshaler(CompositionSurfaceBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionSurfaceBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionSurfaceBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionSurfaceBrush obj);
    public static MarshalerArray<CompositionSurfaceBrush> CreateMarshalerArray(CompositionSurfaceBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionSurfaceBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionSurfaceBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionSurfaceBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionSurfaceBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionSurfaceBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionTransform : ValueType {
    public static IObjectReference CreateMarshaler(CompositionTransform obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionTransform obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionTransform FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionTransform obj);
    public static MarshalerArray<CompositionTransform> CreateMarshalerArray(CompositionTransform[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionTransform[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionTransform[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionTransform[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionTransform> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionTransformRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionViewBox : ValueType {
    public static IObjectReference CreateMarshaler(CompositionViewBox obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionViewBox obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionViewBox FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionViewBox obj);
    public static MarshalerArray<CompositionViewBox> CreateMarshalerArray(CompositionViewBox[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionViewBox[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionViewBox[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionViewBox[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionViewBox> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionViewBoxRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionVirtualDrawingSurface : ValueType {
    public static IObjectReference CreateMarshaler(CompositionVirtualDrawingSurface obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionVirtualDrawingSurface obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionVirtualDrawingSurface FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionVirtualDrawingSurface obj);
    public static MarshalerArray<CompositionVirtualDrawingSurface> CreateMarshalerArray(CompositionVirtualDrawingSurface[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionVirtualDrawingSurface[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionVirtualDrawingSurface[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionVirtualDrawingSurface[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionVirtualDrawingSurface> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionVirtualDrawingSurfaceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CompositionVisualSurface : ValueType {
    public static IObjectReference CreateMarshaler(CompositionVisualSurface obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionVisualSurface obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionVisualSurface FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionVisualSurface obj);
    public static MarshalerArray<CompositionVisualSurface> CreateMarshalerArray(CompositionVisualSurface[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionVisualSurface[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionVisualSurface[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionVisualSurface[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionVisualSurface> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositionVisualSurfaceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Compositor : ValueType {
    public static IObjectReference CreateMarshaler(Compositor obj);
    public static ObjectReferenceValue CreateMarshaler2(Compositor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Compositor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Compositor obj);
    public static MarshalerArray<Compositor> CreateMarshalerArray(Compositor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Compositor[] FromAbiArray(object box);
    public static void CopyAbiArray(Compositor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Compositor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Compositor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CompositorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ContainerVisual : ValueType {
    public static IObjectReference CreateMarshaler(ContainerVisual obj);
    public static ObjectReferenceValue CreateMarshaler2(ContainerVisual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContainerVisual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContainerVisual obj);
    public static MarshalerArray<ContainerVisual> CreateMarshalerArray(ContainerVisual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContainerVisual[] FromAbiArray(object box);
    public static void CopyAbiArray(ContainerVisual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContainerVisual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContainerVisual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ContainerVisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Core.CompositorController : ValueType {
    public static IObjectReference CreateMarshaler(CompositorController obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositorController obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositorController FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositorController obj);
    public static MarshalerArray<CompositorController> CreateMarshalerArray(CompositorController[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositorController[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositorController[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositorController[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositorController> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Core.CompositorControllerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("CC107CDC-558F-5D1A-96A5-A735AC04386B")]
internal interface ABI.Microsoft.UI.Composition.Core.ICompositorController {
}
internal static class ABI.Microsoft.UI.Composition.Core.ICompositorControllerMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CommitNeeded_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositorController, object>>> _CommitNeeded { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Commit(IObjectReference _obj);
    internal static IAsyncAction EnsurePreviousCommitCompletedAsync(IObjectReference _obj);
    internal static Compositor get_Compositor(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositorController, object>>> MakeCommitNeededTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositorController, object>>> get__CommitNeeded();
    internal static EventSource`1<TypedEventHandler`2<CompositorController, object>> Get_CommitNeeded2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.CubicBezierEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(CubicBezierEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(CubicBezierEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CubicBezierEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CubicBezierEasingFunction obj);
    public static MarshalerArray<CubicBezierEasingFunction> CreateMarshalerArray(CubicBezierEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CubicBezierEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(CubicBezierEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CubicBezierEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CubicBezierEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.CubicBezierEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps : ValueType {
    public static IObjectReference CreateMarshaler(CompositionDebugHeatMaps obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionDebugHeatMaps obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionDebugHeatMaps FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionDebugHeatMaps obj);
    public static MarshalerArray<CompositionDebugHeatMaps> CreateMarshalerArray(CompositionDebugHeatMaps[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionDebugHeatMaps[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionDebugHeatMaps[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionDebugHeatMaps[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionDebugHeatMaps> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMapsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings : ValueType {
    public static IObjectReference CreateMarshaler(CompositionDebugSettings obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionDebugSettings obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionDebugSettings FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionDebugSettings obj);
    public static MarshalerArray<CompositionDebugSettings> CreateMarshalerArray(CompositionDebugSettings[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionDebugSettings[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionDebugSettings[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionDebugSettings[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionDebugSettings> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettingsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("815016B8-F645-5C55-87B5-FE2167282B6F")]
internal interface ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps {
}
internal static class ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMapsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Hide(IObjectReference _obj, Visual subtree);
    internal static void ShowMemoryUsage(IObjectReference _obj, Visual subtree);
    internal static void ShowOverdraw(IObjectReference _obj, Visual subtree, CompositionDebugOverdrawContentKinds contentKinds);
    internal static void ShowRedraw(IObjectReference _obj, Visual subtree);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F4C0C0F6-7F5F-5014-A0D6-C8C7EEECACE6")]
internal interface ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings {
}
internal static class ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionDebugHeatMaps get_HeatMaps(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B56F8AAB-2B8C-51AA-B974-10E5C517F50E")]
internal interface ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStatics {
}
internal static class ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionDebugSettings TryGetSettings(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.DistantLight : ValueType {
    public static IObjectReference CreateMarshaler(DistantLight obj);
    public static ObjectReferenceValue CreateMarshaler2(DistantLight obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DistantLight FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DistantLight obj);
    public static MarshalerArray<DistantLight> CreateMarshalerArray(DistantLight[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DistantLight[] FromAbiArray(object box);
    public static void CopyAbiArray(DistantLight[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DistantLight[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DistantLight> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.DistantLightRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.DropShadow : ValueType {
    public static IObjectReference CreateMarshaler(DropShadow obj);
    public static ObjectReferenceValue CreateMarshaler2(DropShadow obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DropShadow FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DropShadow obj);
    public static MarshalerArray<DropShadow> CreateMarshalerArray(DropShadow[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DropShadow[] FromAbiArray(object box);
    public static void CopyAbiArray(DropShadow[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DropShadow[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DropShadow> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.DropShadowRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("EB1E7316-114C-5950-8480-20A29A3BB1EE")]
internal interface ABI.Microsoft.UI.Composition.Effects.ISceneLightingEffect {
}
[GuidAttribute("6B6496B2-468D-50D1-BBE9-593B8263AD80")]
internal interface ABI.Microsoft.UI.Composition.Effects.ISceneLightingEffect2 {
}
internal static class ABI.Microsoft.UI.Composition.Effects.ISceneLightingEffect2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneLightingEffectReflectanceModel get_ReflectanceModel(IObjectReference _obj);
    internal static void set_ReflectanceModel(IObjectReference _obj, SceneLightingEffectReflectanceModel value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Effects.ISceneLightingEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_AmbientAmount(IObjectReference _obj);
    internal static void set_AmbientAmount(IObjectReference _obj, float value);
    internal static float get_DiffuseAmount(IObjectReference _obj);
    internal static void set_DiffuseAmount(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_NormalMapSource(IObjectReference _obj);
    internal static void set_NormalMapSource(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_SpecularAmount(IObjectReference _obj);
    internal static void set_SpecularAmount(IObjectReference _obj, float value);
    internal static float get_SpecularShine(IObjectReference _obj);
    internal static void set_SpecularShine(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Effects.SceneLightingEffect : ValueType {
    public static IObjectReference CreateMarshaler(SceneLightingEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneLightingEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneLightingEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneLightingEffect obj);
    public static MarshalerArray<SceneLightingEffect> CreateMarshalerArray(SceneLightingEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneLightingEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneLightingEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneLightingEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneLightingEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Effects.SceneLightingEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ElasticEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(ElasticEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(ElasticEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ElasticEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ElasticEasingFunction obj);
    public static MarshalerArray<ElasticEasingFunction> CreateMarshalerArray(ElasticEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ElasticEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(ElasticEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ElasticEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ElasticEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ElasticEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ExponentialEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(ExponentialEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(ExponentialEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ExponentialEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ExponentialEasingFunction obj);
    public static MarshalerArray<ExponentialEasingFunction> CreateMarshalerArray(ExponentialEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ExponentialEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(ExponentialEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ExponentialEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ExponentialEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ExponentialEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ExpressionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(ExpressionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(ExpressionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ExpressionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ExpressionAnimation obj);
    public static MarshalerArray<ExpressionAnimation> CreateMarshalerArray(ExpressionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ExpressionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(ExpressionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ExpressionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ExpressionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ExpressionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("4540525E-B70D-5A14-BBFA-63BEF42313C7")]
internal interface ABI.Microsoft.UI.Composition.IAmbientLight {
}
[GuidAttribute("3356F963-040C-54D4-9DFC-B61C51AAADD1")]
internal interface ABI.Microsoft.UI.Composition.IAmbientLight2 {
}
internal static class ABI.Microsoft.UI.Composition.IAmbientLight2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Intensity(IObjectReference _obj);
    internal static void set_Intensity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IAmbientLightMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BD0F88A8-A415-5322-8C3D-1A6D9192754F")]
internal interface ABI.Microsoft.UI.Composition.IAnimationController {
}
internal static class ABI.Microsoft.UI.Composition.IAnimationControllerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Pause(IObjectReference _obj);
    internal static void Resume(IObjectReference _obj);
    internal static float get_PlaybackRate(IObjectReference _obj);
    internal static void set_PlaybackRate(IObjectReference _obj, float value);
    internal static float get_Progress(IObjectReference _obj);
    internal static void set_Progress(IObjectReference _obj, float value);
    internal static AnimationControllerProgressBehavior get_ProgressBehavior(IObjectReference _obj);
    internal static void set_ProgressBehavior(IObjectReference _obj, AnimationControllerProgressBehavior value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B63B0FB6-286B-57AF-B096-16066D43DC00")]
internal interface ABI.Microsoft.UI.Composition.IAnimationControllerStatics {
}
internal static class ABI.Microsoft.UI.Composition.IAnimationControllerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_MaxPlaybackRate(IObjectReference _obj);
    internal static float get_MinPlaybackRate(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("8F56119D-B96D-58D0-9916-D1C5E390F890")]
internal interface ABI.Microsoft.UI.Composition.IAnimationObject {
    public static IntPtr AbiToProjectionVftablePtr;
    private static IAnimationObject();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_PopulatePropertyInfo_0(IntPtr thisPtr, IntPtr propertyName, IntPtr propertyInfo);
    private sealed virtual override void global::Microsoft.UI.Composition.IAnimationObject.PopulatePropertyInfo(string propertyName, AnimationPropertyInfo propertyInfo);
}
public static class ABI.Microsoft.UI.Composition.IAnimationObjectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void PopulatePropertyInfo(IObjectReference _obj, string propertyName, AnimationPropertyInfo propertyInfo);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("3D721A2B-9CCD-57BD-B6C2-CE9E04AE3606")]
internal interface ABI.Microsoft.UI.Composition.IAnimationPropertyInfo {
}
[GuidAttribute("ED14FB09-DE28-540D-9311-80CFDCC97338")]
internal interface ABI.Microsoft.UI.Composition.IAnimationPropertyInfo2 {
}
internal static class ABI.Microsoft.UI.Composition.IAnimationPropertyInfo2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionObject GetResolvedCompositionObject(IObjectReference _obj);
    internal static string GetResolvedCompositionObjectProperty(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IAnimationPropertyInfoMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationPropertyAccessMode get_AccessMode(IObjectReference _obj);
    internal static void set_AccessMode(IObjectReference _obj, AnimationPropertyAccessMode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("27C75BAB-317A-5362-BF25-FFFBB98A51B9")]
internal interface ABI.Microsoft.UI.Composition.IBackEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.IBackEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Amplitude(IObjectReference _obj);
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7FE485E9-E874-5FF3-8DDC-826C3818BFC3")]
internal interface ABI.Microsoft.UI.Composition.IBooleanKeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IBooleanKeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FA11F3C0-697B-562F-AF46-C6AF666B6EC4")]
internal interface ABI.Microsoft.UI.Composition.IBounceEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.IBounceEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_Bounces(IObjectReference _obj);
    internal static float get_Bounciness(IObjectReference _obj);
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1C0C4B76-C4D6-5DD9-8DD6-DBE35C7B7E55")]
internal interface ABI.Microsoft.UI.Composition.IBounceScalarNaturalMotionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IBounceScalarNaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Acceleration(IObjectReference _obj);
    internal static void set_Acceleration(IObjectReference _obj, float value);
    internal static float get_Restitution(IObjectReference _obj);
    internal static void set_Restitution(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EC528D1F-22E2-573E-AB87-757071E50012")]
internal interface ABI.Microsoft.UI.Composition.IBounceVector2NaturalMotionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IBounceVector2NaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Acceleration(IObjectReference _obj);
    internal static void set_Acceleration(IObjectReference _obj, float value);
    internal static float get_Restitution(IObjectReference _obj);
    internal static void set_Restitution(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E3E2EE98-1211-586D-8A6D-FEA5EFC3957F")]
internal interface ABI.Microsoft.UI.Composition.IBounceVector3NaturalMotionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IBounceVector3NaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Acceleration(IObjectReference _obj);
    internal static void set_Acceleration(IObjectReference _obj, float value);
    internal static float get_Restitution(IObjectReference _obj);
    internal static void set_Restitution(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("414B172C-BF27-5EAD-93E0-35915322DB2C")]
internal interface ABI.Microsoft.UI.Composition.ICircleEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.ICircleEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F0237928-353C-5867-BE93-71547E989F44")]
internal interface ABI.Microsoft.UI.Composition.IColorKeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IColorKeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Color value);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Color value, CompositionEasingFunction easingFunction);
    internal static CompositionColorSpace get_InterpolationColorSpace(IObjectReference _obj);
    internal static void set_InterpolationColorSpace(IObjectReference _obj, CompositionColorSpace value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A829CCC8-6FDE-5B90-AD37-EFD307E1B631")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimation {
}
[GuidAttribute("0926EB58-8965-5C74-BDAC-852EBB5E8542")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimation2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionAnimation2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void SetBooleanParameter(IObjectReference _obj, string key, bool value);
    internal static string get_Target(IObjectReference _obj);
    internal static void set_Target(IObjectReference _obj, string value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("60063F53-4167-5914-A2F1-9EFCC2F86C76")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimation3 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionAnimation3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InitialValueExpressionCollection get_InitialValueExpressions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C4101447-DFE4-597F-B5BC-96443F5D18A1")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimation4 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionAnimation4Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void SetExpressionReferenceParameter(IObjectReference _obj, string parameterName, IAnimationObject source);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("A77C0E5A-F059-4E85-BCEF-C068694CEC78")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimationBase {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICompositionAnimationBase();
}
public static class ABI.Microsoft.UI.Composition.ICompositionAnimationBaseMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("2ED278CA-4CCA-5F7F-8D47-F930552A7769")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimationFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionAnimationFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A51CDCAC-B972-5AE7-81D0-9D91C71ECB7A")]
internal interface ABI.Microsoft.UI.Composition.ICompositionAnimationGroup {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionAnimationGroupMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Add(IObjectReference _obj, CompositionAnimation value);
    internal static void Remove(IObjectReference _obj, CompositionAnimation value);
    internal static void RemoveAll(IObjectReference _obj);
    internal static int get_Count(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ClearAllParameters(IObjectReference _obj);
    internal static void ClearParameter(IObjectReference _obj, string key);
    internal static void SetColorParameter(IObjectReference _obj, string key, Color value);
    internal static void SetMatrix3x2Parameter(IObjectReference _obj, string key, Matrix3x2 value);
    internal static void SetMatrix4x4Parameter(IObjectReference _obj, string key, Matrix4x4 value);
    internal static void SetQuaternionParameter(IObjectReference _obj, string key, Quaternion value);
    internal static void SetReferenceParameter(IObjectReference _obj, string key, CompositionObject compositionObject);
    internal static void SetScalarParameter(IObjectReference _obj, string key, float value);
    internal static void SetVector2Parameter(IObjectReference _obj, string key, Vector2 value);
    internal static void SetVector3Parameter(IObjectReference _obj, string key, Vector3 value);
    internal static void SetVector4Parameter(IObjectReference _obj, string key, Vector4 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("85260ED3-365B-5E70-B79A-F9F1D10FA4B5")]
internal interface ABI.Microsoft.UI.Composition.ICompositionApiInformationStatics {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionApiInformationStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ulong get_ApiVersion(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6C866BB3-172A-570C-82AC-BF9848D99A59")]
internal interface ABI.Microsoft.UI.Composition.ICompositionBackdropBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionBackdropBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("AC400334-4358-5FB0-BFC3-117FE581998F")]
internal interface ABI.Microsoft.UI.Composition.ICompositionBatchCompletedEventArgs {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionBatchCompletedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("483924E7-99A5-5377-968B-DEC6D40BBCCD")]
internal interface ABI.Microsoft.UI.Composition.ICompositionBrush {
}
[GuidAttribute("ABF2B354-7130-53D9-8324-365D7E02EDE7")]
internal interface ABI.Microsoft.UI.Composition.ICompositionBrushFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionBrushFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7689BF12-75C0-52EA-81CB-463ED1C16C45")]
internal interface ABI.Microsoft.UI.Composition.ICompositionCapabilities {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionCapabilitiesMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Changed_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositionCapabilities, object>>> _Changed { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool AreEffectsSupported(IObjectReference _obj);
    internal static bool AreEffectsFast(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositionCapabilities, object>>> MakeChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositionCapabilities, object>>> get__Changed();
    internal static EventSource`1<TypedEventHandler`2<CompositionCapabilities, object>> Get_Changed2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B66B55CB-B5A5-5BEE-8972-AE78233CB34C")]
internal interface ABI.Microsoft.UI.Composition.ICompositionClip {
}
[GuidAttribute("CDF6BF80-AFD7-57DC-8148-6CCBBB5D78BB")]
internal interface ABI.Microsoft.UI.Composition.ICompositionClip2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionClip2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_AnchorPoint(IObjectReference _obj);
    internal static void set_AnchorPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_CenterPoint(IObjectReference _obj);
    internal static void set_CenterPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static float get_RotationAngle(IObjectReference _obj);
    internal static void set_RotationAngle(IObjectReference _obj, float value);
    internal static float get_RotationAngleInDegrees(IObjectReference _obj);
    internal static void set_RotationAngleInDegrees(IObjectReference _obj, float value);
    internal static Vector2 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector2 value);
    internal static Matrix3x2 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("611DEC65-D302-52BC-92AB-A295BD141AE4")]
internal interface ABI.Microsoft.UI.Composition.ICompositionClipFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionClipFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionClipMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3F8FFB69-3E71-55A7-8E79-F27A214C56AE")]
internal interface ABI.Microsoft.UI.Composition.ICompositionColorBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionColorBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("868030D8-C5C0-5DD8-A765-E32CD3497AA9")]
internal interface ABI.Microsoft.UI.Composition.ICompositionColorGradientStop {
}
[GuidAttribute("4794CB29-CE9D-5837-9FC9-847DF3E197DE")]
internal interface ABI.Microsoft.UI.Composition.ICompositionColorGradientStopCollection {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionColorGradientStopCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionColorGradientStopMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static float get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C4550FA8-A7F2-5259-BF74-33B2F5240A28")]
internal interface ABI.Microsoft.UI.Composition.ICompositionCommitBatch {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionCommitBatchMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Completed_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>>> _Completed { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsActive(IObjectReference _obj);
    internal static bool get_IsEnded(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>>> MakeCompletedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>>> get__Completed();
    internal static EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>> Get_Completed2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("064AABD5-2DAB-52D3-824B-C72456540F29")]
internal interface ABI.Microsoft.UI.Composition.ICompositionContainerShape {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionContainerShapeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionShapeCollection get_Shapes(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("216CAB97-A2EE-5A29-AD6B-0BC2DF4A1504")]
internal interface ABI.Microsoft.UI.Composition.ICompositionDrawingSurface {
}
[GuidAttribute("6BE6F652-BEC8-5ADF-A6AF-5ACFC00A968E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionDrawingSurface2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionDrawingSurface2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Resize(IObjectReference _obj, SizeInt32 sizePixels);
    internal static void Scroll(IObjectReference _obj, PointInt32 offset);
    internal static void Scroll(IObjectReference _obj, PointInt32 offset, RectInt32 scrollRect);
    internal static void ScrollWithClip(IObjectReference _obj, PointInt32 offset, RectInt32 clipRect);
    internal static void ScrollWithClip(IObjectReference _obj, PointInt32 offset, RectInt32 clipRect, RectInt32 scrollRect);
    internal static SizeInt32 get_SizeInt32(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4791E19A-C83B-58B0-AC86-DFC58494F5F9")]
internal interface ABI.Microsoft.UI.Composition.ICompositionDrawingSurfaceFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionDrawingSurfaceFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionDrawingSurfaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DirectXAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static DirectXPixelFormat get_PixelFormat(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8E1ECD0D-57D8-5BC9-9BCD-E43D0DD733C4")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEasingFunction {
}
[GuidAttribute("7D7D32C3-574B-5620-9902-DB426851802F")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEasingFunctionFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEasingFunctionFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9D4B87FF-6DCA-5CE2-B69C-E52705B0FEF4")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEasingFunctionStatics {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEasingFunctionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CubicBezierEasingFunction CreateCubicBezierEasingFunction(IObjectReference _obj, Compositor owner, Vector2 controlPoint1, Vector2 controlPoint2);
    internal static LinearEasingFunction CreateLinearEasingFunction(IObjectReference _obj, Compositor owner);
    internal static StepEasingFunction CreateStepEasingFunction(IObjectReference _obj, Compositor owner);
    internal static StepEasingFunction CreateStepEasingFunction(IObjectReference _obj, Compositor owner, int stepCount);
    internal static BackEasingFunction CreateBackEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode, float amplitude);
    internal static BounceEasingFunction CreateBounceEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode, int bounces, float bounciness);
    internal static CircleEasingFunction CreateCircleEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode);
    internal static ElasticEasingFunction CreateElasticEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode, int oscillations, float springiness);
    internal static ExponentialEasingFunction CreateExponentialEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode, float exponent);
    internal static PowerEasingFunction CreatePowerEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode, float power);
    internal static SineEasingFunction CreateSineEasingFunction(IObjectReference _obj, Compositor owner, CompositionEasingFunctionMode mode);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("62E0BBAB-1F45-5A44-9DDF-F0C38A02ED85")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEffectBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEffectBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBrush GetSourceParameter(IObjectReference _obj, string name);
    internal static void SetSourceParameter(IObjectReference _obj, string name, CompositionBrush source);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C50F407A-0231-5ED2-B7A7-CA66D3E14B3B")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEffectFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEffectFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEffectBrush CreateBrush(IObjectReference _obj);
    internal static Exception get_ExtendedError(IObjectReference _obj);
    internal static CompositionEffectFactoryLoadStatus get_LoadStatus(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BECE3367-5704-59F7-BE8C-D6293AF9C95F")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEffectSourceParameter {
}
[GuidAttribute("26185954-4489-5D0E-AE4D-7BC4BBBC6161")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEffectSourceParameterFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEffectSourceParameterFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEffectSourceParameter Create(IObjectReference _obj, string name);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEffectSourceParameterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_Name(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F2A21042-7A57-58C1-8B47-8BC8B21D3AA0")]
internal interface ABI.Microsoft.UI.Composition.ICompositionEllipseGeometry {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionEllipseGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_Center(IObjectReference _obj);
    internal static void set_Center(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Radius(IObjectReference _obj);
    internal static void set_Radius(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E3C0A8C5-5297-5D69-8B91-F5330BB1CB27")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGeometricClip {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGeometricClipMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionGeometry get_Geometry(IObjectReference _obj);
    internal static void set_Geometry(IObjectReference _obj, CompositionGeometry value);
    internal static CompositionViewBox get_ViewBox(IObjectReference _obj);
    internal static void set_ViewBox(IObjectReference _obj, CompositionViewBox value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4E40BDB2-450B-5A81-9E9B-149417980CC4")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGeometry {
}
[GuidAttribute("B2FB802B-C691-5554-8312-9C6D358D6B9E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGeometryFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGeometryFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_TrimEnd(IObjectReference _obj);
    internal static void set_TrimEnd(IObjectReference _obj, float value);
    internal static float get_TrimOffset(IObjectReference _obj);
    internal static void set_TrimOffset(IObjectReference _obj, float value);
    internal static float get_TrimStart(IObjectReference _obj);
    internal static void set_TrimStart(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9165D1FB-C738-5F44-ADDC-309EE071D588")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGradientBrush {
}
[GuidAttribute("03E9EDF3-EE3D-58FC-8C0B-95E4B6060A94")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGradientBrush2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGradientBrush2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionMappingMode get_MappingMode(IObjectReference _obj);
    internal static void set_MappingMode(IObjectReference _obj, CompositionMappingMode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B043B155-4B40-590D-A0D9-F8C1A7E0C88F")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGradientBrushFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGradientBrushFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGradientBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_AnchorPoint(IObjectReference _obj);
    internal static void set_AnchorPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_CenterPoint(IObjectReference _obj);
    internal static void set_CenterPoint(IObjectReference _obj, Vector2 value);
    internal static CompositionColorGradientStopCollection get_ColorStops(IObjectReference _obj);
    internal static CompositionGradientExtendMode get_ExtendMode(IObjectReference _obj);
    internal static void set_ExtendMode(IObjectReference _obj, CompositionGradientExtendMode value);
    internal static CompositionColorSpace get_InterpolationSpace(IObjectReference _obj);
    internal static void set_InterpolationSpace(IObjectReference _obj, CompositionColorSpace value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static float get_RotationAngle(IObjectReference _obj);
    internal static void set_RotationAngle(IObjectReference _obj, float value);
    internal static float get_RotationAngleInDegrees(IObjectReference _obj);
    internal static void set_RotationAngleInDegrees(IObjectReference _obj, float value);
    internal static Vector2 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector2 value);
    internal static Matrix3x2 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3D47E3F5-F76C-5F1F-88C0-54A5F2A090D6")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice {
}
[GuidAttribute("FFD56707-1C7A-5DA0-AA1A-49CB935B5DCA")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionDrawingSurface CreateDrawingSurface2(IObjectReference _obj, SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    internal static CompositionVirtualDrawingSurface CreateVirtualDrawingSurface(IObjectReference _obj, SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FBBEF487-D5A4-5DB2-BF3E-9F488E659D11")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice3 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionMipmapSurface CreateMipmapSurface(IObjectReference _obj, SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    internal static void Trim(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2B295C04-7B2E-5B0E-9762-2992313B700C")]
internal interface ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice4 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice4Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncOperation`1<ICompositionSurface> CaptureAsync(IObjectReference _obj, Visual captureVisual, SizeInt32 size, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode, float sdrBoost);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionGraphicsDeviceMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RenderingDeviceReplaced_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs>>> _RenderingDeviceReplaced { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionDrawingSurface CreateDrawingSurface(IObjectReference _obj, Size sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs>>> MakeRenderingDeviceReplacedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs>>> get__RenderingDeviceReplaced();
    internal static EventSource`1<TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs>> Get_RenderingDeviceReplaced2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6D633E77-A6B8-5A2D-8235-E0C380C3B47B")]
internal interface ABI.Microsoft.UI.Composition.ICompositionLight {
}
[GuidAttribute("0BB940A4-05EF-5920-BAE1-918B36D44380")]
internal interface ABI.Microsoft.UI.Composition.ICompositionLight2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionLight2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static VisualUnorderedCollection get_ExclusionsFromTargets(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("95CE4859-DD55-5C38-A3EB-13D053CEBB1E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionLight3 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionLight3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsEnabled(IObjectReference _obj);
    internal static void set_IsEnabled(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CB29CAED-9245-51A6-BA56-ADDBAEFA54CC")]
internal interface ABI.Microsoft.UI.Composition.ICompositionLightFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionLightFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionLightMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static VisualUnorderedCollection get_Targets(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F726FB52-270C-58B1-A902-89576772DEDC")]
internal interface ABI.Microsoft.UI.Composition.ICompositionLinearGradientBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionLinearGradientBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_EndPoint(IObjectReference _obj);
    internal static void set_EndPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_StartPoint(IObjectReference _obj);
    internal static void set_StartPoint(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("489F9382-C186-5936-8946-C4F927E844AA")]
internal interface ABI.Microsoft.UI.Composition.ICompositionLineGeometry {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionLineGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_End(IObjectReference _obj);
    internal static void set_End(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Start(IObjectReference _obj);
    internal static void set_Start(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C9502786-65AA-5BE5-A679-C3B5DBFB0DC6")]
internal interface ABI.Microsoft.UI.Composition.ICompositionMaskBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionMaskBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBrush get_Mask(IObjectReference _obj);
    internal static void set_Mask(IObjectReference _obj, CompositionBrush value);
    internal static CompositionBrush get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, CompositionBrush value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("681F1E47-6E43-5B55-BE3A-E5C858A2D5FA")]
internal interface ABI.Microsoft.UI.Composition.ICompositionMipmapSurface {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionMipmapSurfaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionDrawingSurface GetDrawingSurfaceForLevel(IObjectReference _obj, UInt32 level);
    internal static DirectXAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static UInt32 get_LevelCount(IObjectReference _obj);
    internal static DirectXPixelFormat get_PixelFormat(IObjectReference _obj);
    internal static SizeInt32 get_SizeInt32(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C77A3D21-C7EE-517A-98F4-AD9A7202BC86")]
internal interface ABI.Microsoft.UI.Composition.ICompositionNineGridBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionNineGridBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void SetInsets(IObjectReference _obj, float inset);
    internal static void SetInsets(IObjectReference _obj, float left, float top, float right, float bottom);
    internal static void SetInsetScales(IObjectReference _obj, float scale);
    internal static void SetInsetScales(IObjectReference _obj, float left, float top, float right, float bottom);
    internal static float get_BottomInset(IObjectReference _obj);
    internal static void set_BottomInset(IObjectReference _obj, float value);
    internal static float get_BottomInsetScale(IObjectReference _obj);
    internal static void set_BottomInsetScale(IObjectReference _obj, float value);
    internal static bool get_IsCenterHollow(IObjectReference _obj);
    internal static void set_IsCenterHollow(IObjectReference _obj, bool value);
    internal static float get_LeftInset(IObjectReference _obj);
    internal static void set_LeftInset(IObjectReference _obj, float value);
    internal static float get_LeftInsetScale(IObjectReference _obj);
    internal static void set_LeftInsetScale(IObjectReference _obj, float value);
    internal static float get_RightInset(IObjectReference _obj);
    internal static void set_RightInset(IObjectReference _obj, float value);
    internal static float get_RightInsetScale(IObjectReference _obj);
    internal static void set_RightInsetScale(IObjectReference _obj, float value);
    internal static CompositionBrush get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, CompositionBrush value);
    internal static float get_TopInset(IObjectReference _obj);
    internal static void set_TopInset(IObjectReference _obj, float value);
    internal static float get_TopInsetScale(IObjectReference _obj);
    internal static void set_TopInsetScale(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0E583D49-FB5E-5481-A426-D3C41E059A5A")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObject {
}
[GuidAttribute("BCBBFEBF-799C-51CE-9C82-B6E49E7E62E1")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObject2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObject2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void StartAnimationGroup(IObjectReference _obj, ICompositionAnimationBase value);
    internal static void StopAnimationGroup(IObjectReference _obj, ICompositionAnimationBase value);
    internal static string get_Comment(IObjectReference _obj);
    internal static void set_Comment(IObjectReference _obj, string value);
    internal static ImplicitAnimationCollection get_ImplicitAnimations(IObjectReference _obj);
    internal static void set_ImplicitAnimations(IObjectReference _obj, ImplicitAnimationCollection value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D43C5CF1-47DF-52B8-B409-D5831503905E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObject3 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObject3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("029AD57C-5497-51F3-8B40-E4E235992C6F")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObject4 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObject4Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationController TryGetAnimationController(IObjectReference _obj, string propertyName);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("85FD26D1-BB99-5392-9DCE-A05CB81458A5")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObject5 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObject5Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void StartAnimation(IObjectReference _obj, string propertyName, CompositionAnimation animation, AnimationController animationController);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6133C5F9-CD3B-56B2-876F-EB849DB14911")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObjectFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObjectFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObjectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void StartAnimation(IObjectReference _obj, string propertyName, CompositionAnimation animation);
    internal static void StopAnimation(IObjectReference _obj, string propertyName);
    internal static Compositor get_Compositor(IObjectReference _obj);
    internal static CompositionPropertySet get_Properties(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A091356C-38AE-514C-9B58-AD5C8C7936AD")]
internal interface ABI.Microsoft.UI.Composition.ICompositionObjectStatics {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionObjectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void StartAnimationWithIAnimationObject(IObjectReference _obj, IAnimationObject target, string propertyName, CompositionAnimation animation);
    internal static void StartAnimationGroupWithIAnimationObject(IObjectReference _obj, IAnimationObject target, ICompositionAnimationBase animation);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("17C518C0-D7A2-54BE-AC7F-C408562A6A20")]
internal interface ABI.Microsoft.UI.Composition.ICompositionPath {
}
[GuidAttribute("87143312-D280-51D2-B75B-5D76EA86C285")]
internal interface ABI.Microsoft.UI.Composition.ICompositionPathFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionPathFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionPath Create(IObjectReference _obj, IGeometrySource2D source);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0F6E6B82-060B-571E-B849-AB8E0D723962")]
internal interface ABI.Microsoft.UI.Composition.ICompositionPathGeometry {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionPathGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionPath get_Path(IObjectReference _obj);
    internal static void set_Path(IObjectReference _obj, CompositionPath value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionPathMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D400AB10-8B92-5ABB-9E23-807974FC6961")]
internal interface ABI.Microsoft.UI.Composition.ICompositionProjectedShadow {
}
[GuidAttribute("15A9F2D0-6BAE-521B-90C7-C7500F2BF562")]
internal interface ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCaster {
}
[GuidAttribute("B120BFDC-533C-57A9-AE16-D43BA52472C4")]
internal interface ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollection {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertAbove(IObjectReference _obj, CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    internal static void InsertAtBottom(IObjectReference _obj, CompositionProjectedShadowCaster newCaster);
    internal static void InsertAtTop(IObjectReference _obj, CompositionProjectedShadowCaster newCaster);
    internal static void InsertBelow(IObjectReference _obj, CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    internal static void Remove(IObjectReference _obj, CompositionProjectedShadowCaster caster);
    internal static void RemoveAll(IObjectReference _obj);
    internal static int get_Count(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("43A98014-B88B-5B2A-B1E2-5E776AB77538")]
internal interface ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollectionStatics {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollectionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_MaxRespectedCasters(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBrush get_Brush(IObjectReference _obj);
    internal static void set_Brush(IObjectReference _obj, CompositionBrush value);
    internal static Visual get_CastingVisual(IObjectReference _obj);
    internal static void set_CastingVisual(IObjectReference _obj, Visual value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionProjectedShadowMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_BlurRadiusMultiplier(IObjectReference _obj);
    internal static void set_BlurRadiusMultiplier(IObjectReference _obj, float value);
    internal static CompositionProjectedShadowCasterCollection get_Casters(IObjectReference _obj);
    internal static CompositionLight get_LightSource(IObjectReference _obj);
    internal static void set_LightSource(IObjectReference _obj, CompositionLight value);
    internal static float get_MaxBlurRadius(IObjectReference _obj);
    internal static void set_MaxBlurRadius(IObjectReference _obj, float value);
    internal static float get_MinBlurRadius(IObjectReference _obj);
    internal static void set_MinBlurRadius(IObjectReference _obj, float value);
    internal static CompositionProjectedShadowReceiverUnorderedCollection get_Receivers(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("29FE12B0-F1A0-50E1-AF28-2E943BC819D6")]
internal interface ABI.Microsoft.UI.Composition.ICompositionProjectedShadowReceiver {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionProjectedShadowReceiverMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Visual get_ReceivingVisual(IObjectReference _obj);
    internal static void set_ReceivingVisual(IObjectReference _obj, Visual value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2D35F751-A1FA-5FFF-B156-6D8FCD8362ED")]
internal interface ABI.Microsoft.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Add(IObjectReference _obj, CompositionProjectedShadowReceiver value);
    internal static void Remove(IObjectReference _obj, CompositionProjectedShadowReceiver value);
    internal static void RemoveAll(IObjectReference _obj);
    internal static int get_Count(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("97F7A17B-97BE-5545-9F1C-0B9D44577F57")]
internal interface ABI.Microsoft.UI.Composition.ICompositionPropertySet {
}
[GuidAttribute("3DB6D621-3497-55E4-95BF-8AE5E7C34C33")]
internal interface ABI.Microsoft.UI.Composition.ICompositionPropertySet2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionPropertySet2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertBoolean(IObjectReference _obj, string propertyName, bool value);
    internal static CompositionGetValueStatus TryGetBoolean(IObjectReference _obj, string propertyName, Boolean& value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionPropertySetMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertColor(IObjectReference _obj, string propertyName, Color value);
    internal static void InsertMatrix3x2(IObjectReference _obj, string propertyName, Matrix3x2 value);
    internal static void InsertMatrix4x4(IObjectReference _obj, string propertyName, Matrix4x4 value);
    internal static void InsertQuaternion(IObjectReference _obj, string propertyName, Quaternion value);
    internal static void InsertScalar(IObjectReference _obj, string propertyName, float value);
    internal static void InsertVector2(IObjectReference _obj, string propertyName, Vector2 value);
    internal static void InsertVector3(IObjectReference _obj, string propertyName, Vector3 value);
    internal static void InsertVector4(IObjectReference _obj, string propertyName, Vector4 value);
    internal static CompositionGetValueStatus TryGetColor(IObjectReference _obj, string propertyName, Color& value);
    internal static CompositionGetValueStatus TryGetMatrix3x2(IObjectReference _obj, string propertyName, Matrix3x2& value);
    internal static CompositionGetValueStatus TryGetMatrix4x4(IObjectReference _obj, string propertyName, Matrix4x4& value);
    internal static CompositionGetValueStatus TryGetQuaternion(IObjectReference _obj, string propertyName, Quaternion& value);
    internal static CompositionGetValueStatus TryGetScalar(IObjectReference _obj, string propertyName, Single& value);
    internal static CompositionGetValueStatus TryGetVector2(IObjectReference _obj, string propertyName, Vector2& value);
    internal static CompositionGetValueStatus TryGetVector3(IObjectReference _obj, string propertyName, Vector3& value);
    internal static CompositionGetValueStatus TryGetVector4(IObjectReference _obj, string propertyName, Vector4& value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("17662F3F-D351-5435-B3B4-EC26CEFECCC5")]
internal interface ABI.Microsoft.UI.Composition.ICompositionRadialGradientBrush {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionRadialGradientBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_EllipseCenter(IObjectReference _obj);
    internal static void set_EllipseCenter(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_EllipseRadius(IObjectReference _obj);
    internal static void set_EllipseRadius(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_GradientOriginOffset(IObjectReference _obj);
    internal static void set_GradientOriginOffset(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BD551FCF-2C7F-5125-AC44-50A4F1D8FA76")]
internal interface ABI.Microsoft.UI.Composition.ICompositionRectangleGeometry {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionRectangleGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Size(IObjectReference _obj);
    internal static void set_Size(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("02EAFC87-8D1F-5445-A416-D81BAEE8A750")]
internal interface ABI.Microsoft.UI.Composition.ICompositionRoundedRectangleGeometry {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionRoundedRectangleGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_CornerRadius(IObjectReference _obj);
    internal static void set_CornerRadius(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Size(IObjectReference _obj);
    internal static void set_Size(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D31CA572-99CE-5969-B042-6C2D330A3859")]
internal interface ABI.Microsoft.UI.Composition.ICompositionScopedBatch {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionScopedBatchMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Completed_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>>> _Completed { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void End(IObjectReference _obj);
    internal static void Resume(IObjectReference _obj);
    internal static void Suspend(IObjectReference _obj);
    internal static bool get_IsActive(IObjectReference _obj);
    internal static bool get_IsEnded(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>>> MakeCompletedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>>> get__Completed();
    internal static EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>> Get_Completed2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("176B8BB5-4DAE-59B2-B9A0-2499B243267C")]
internal interface ABI.Microsoft.UI.Composition.ICompositionShadow {
}
[GuidAttribute("FF27546D-9750-54AE-AB8C-126CBE9158C3")]
internal interface ABI.Microsoft.UI.Composition.ICompositionShadowFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionShadowFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionShadowMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("ED75D4D8-437F-5640-9720-FAAE35CE5895")]
internal interface ABI.Microsoft.UI.Composition.ICompositionShape {
}
[GuidAttribute("7AA2B987-9CDD-5B6E-8AC1-E989D78B4811")]
internal interface ABI.Microsoft.UI.Composition.ICompositionShapeFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionShapeFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionShapeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_CenterPoint(IObjectReference _obj);
    internal static void set_CenterPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static float get_RotationAngle(IObjectReference _obj);
    internal static void set_RotationAngle(IObjectReference _obj, float value);
    internal static float get_RotationAngleInDegrees(IObjectReference _obj);
    internal static void set_RotationAngleInDegrees(IObjectReference _obj, float value);
    internal static Vector2 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector2 value);
    internal static Matrix3x2 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("982138F2-5781-509A-BA5D-112BCB0B98EF")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSpriteShape {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionSpriteShapeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBrush get_FillBrush(IObjectReference _obj);
    internal static void set_FillBrush(IObjectReference _obj, CompositionBrush value);
    internal static CompositionGeometry get_Geometry(IObjectReference _obj);
    internal static void set_Geometry(IObjectReference _obj, CompositionGeometry value);
    internal static bool get_IsStrokeNonScaling(IObjectReference _obj);
    internal static void set_IsStrokeNonScaling(IObjectReference _obj, bool value);
    internal static CompositionBrush get_StrokeBrush(IObjectReference _obj);
    internal static void set_StrokeBrush(IObjectReference _obj, CompositionBrush value);
    internal static CompositionStrokeDashArray get_StrokeDashArray(IObjectReference _obj);
    internal static CompositionStrokeCap get_StrokeDashCap(IObjectReference _obj);
    internal static void set_StrokeDashCap(IObjectReference _obj, CompositionStrokeCap value);
    internal static float get_StrokeDashOffset(IObjectReference _obj);
    internal static void set_StrokeDashOffset(IObjectReference _obj, float value);
    internal static CompositionStrokeCap get_StrokeEndCap(IObjectReference _obj);
    internal static void set_StrokeEndCap(IObjectReference _obj, CompositionStrokeCap value);
    internal static CompositionStrokeLineJoin get_StrokeLineJoin(IObjectReference _obj);
    internal static void set_StrokeLineJoin(IObjectReference _obj, CompositionStrokeLineJoin value);
    internal static float get_StrokeMiterLimit(IObjectReference _obj);
    internal static void set_StrokeMiterLimit(IObjectReference _obj, float value);
    internal static CompositionStrokeCap get_StrokeStartCap(IObjectReference _obj);
    internal static void set_StrokeStartCap(IObjectReference _obj, CompositionStrokeCap value);
    internal static float get_StrokeThickness(IObjectReference _obj);
    internal static void set_StrokeThickness(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("397DAFE4-B6C2-5BB9-951D-F5707DE8B7BC")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop {
    public static IntPtr AbiToProjectionVftablePtr;
    private CompositionBrush global::Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop.SystemBackdrop { get; private set; }
    private static ICompositionSupportsSystemBackdrop();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_SystemBackdrop_1(IntPtr thisPtr, IntPtr value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_SystemBackdrop_0(IntPtr thisPtr, IntPtr* value);
    private sealed virtual override CompositionBrush global::Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop.get_SystemBackdrop();
    private sealed virtual override void global::Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop.set_SystemBackdrop(CompositionBrush value);
}
public static class ABI.Microsoft.UI.Composition.ICompositionSupportsSystemBackdropMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static CompositionBrush get_SystemBackdrop(IObjectReference _obj);
    public static void set_SystemBackdrop(IObjectReference _obj, CompositionBrush value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("9EC612C3-A5D2-4F97-9DF3-6B49CE736215")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSurface {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICompositionSurface();
}
[GuidAttribute("616BB5A5-0A33-512D-B4B1-3D3734F04ACA")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush {
}
[GuidAttribute("9904B7E3-084B-58B5-9AE1-3A2040DD7A22")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_AnchorPoint(IObjectReference _obj);
    internal static void set_AnchorPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_CenterPoint(IObjectReference _obj);
    internal static void set_CenterPoint(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static float get_RotationAngle(IObjectReference _obj);
    internal static void set_RotationAngle(IObjectReference _obj, float value);
    internal static float get_RotationAngleInDegrees(IObjectReference _obj);
    internal static void set_RotationAngleInDegrees(IObjectReference _obj, float value);
    internal static Vector2 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector2 value);
    internal static Matrix3x2 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8AA74C78-680C-5791-AB07-92DB0F37E352")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush3 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_SnapToPixels(IObjectReference _obj);
    internal static void set_SnapToPixels(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionSurfaceBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBitmapInterpolationMode get_BitmapInterpolationMode(IObjectReference _obj);
    internal static void set_BitmapInterpolationMode(IObjectReference _obj, CompositionBitmapInterpolationMode value);
    internal static float get_HorizontalAlignmentRatio(IObjectReference _obj);
    internal static void set_HorizontalAlignmentRatio(IObjectReference _obj, float value);
    internal static CompositionStretch get_Stretch(IObjectReference _obj);
    internal static void set_Stretch(IObjectReference _obj, CompositionStretch value);
    internal static ICompositionSurface get_Surface(IObjectReference _obj);
    internal static void set_Surface(IObjectReference _obj, ICompositionSurface value);
    internal static float get_VerticalAlignmentRatio(IObjectReference _obj);
    internal static void set_VerticalAlignmentRatio(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("88AC5DF6-377F-5CF7-A02E-ED5074D30452")]
internal interface ABI.Microsoft.UI.Composition.ICompositionSurfaceFacade {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICompositionSurfaceFacade();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetRealSurface_0(IntPtr thisPtr, IntPtr* result);
    private sealed virtual override ICompositionSurface global::Microsoft.UI.Composition.ICompositionSurfaceFacade.GetRealSurface();
}
public static class ABI.Microsoft.UI.Composition.ICompositionSurfaceFacadeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static ICompositionSurface GetRealSurface(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
public static class ABI.Microsoft.UI.Composition.ICompositionSurfaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("670E1826-1932-51D0-BBB3-063B4CA94B56")]
internal interface ABI.Microsoft.UI.Composition.ICompositionTransform {
}
[GuidAttribute("78CC7BF2-CDC0-59D2-9C04-8D208DE7EF5E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionTransformFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionTransformFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionTransformMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("667E4071-ADDD-5DED-B6C0-09E03A14BE7E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionViewBox {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionViewBoxMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_HorizontalAlignmentRatio(IObjectReference _obj);
    internal static void set_HorizontalAlignmentRatio(IObjectReference _obj, float value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_Size(IObjectReference _obj);
    internal static void set_Size(IObjectReference _obj, Vector2 value);
    internal static CompositionStretch get_Stretch(IObjectReference _obj);
    internal static void set_Stretch(IObjectReference _obj, CompositionStretch value);
    internal static float get_VerticalAlignmentRatio(IObjectReference _obj);
    internal static void set_VerticalAlignmentRatio(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D741B99D-E248-5BA7-B728-8BEEA53FE28E")]
internal interface ABI.Microsoft.UI.Composition.ICompositionVirtualDrawingSurface {
}
[GuidAttribute("85895891-3F06-52E2-B5EA-D1FB595F6574")]
internal interface ABI.Microsoft.UI.Composition.ICompositionVirtualDrawingSurfaceFactory {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionVirtualDrawingSurfaceFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositionVirtualDrawingSurfaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Trim(IObjectReference _obj, RectInt32[] rects);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("49E3624B-4D2E-53E7-9E02-F64831681134")]
internal interface ABI.Microsoft.UI.Composition.ICompositionVisualSurface {
}
internal static class ABI.Microsoft.UI.Composition.ICompositionVisualSurfaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_SourceOffset(IObjectReference _obj);
    internal static void set_SourceOffset(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_SourceSize(IObjectReference _obj);
    internal static void set_SourceSize(IObjectReference _obj, Vector2 value);
    internal static Visual get_SourceVisual(IObjectReference _obj);
    internal static void set_SourceVisual(IObjectReference _obj, Visual value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("95213C13-C4CB-57DE-B267-D21AB901AE38")]
internal interface ABI.Microsoft.UI.Composition.ICompositor {
}
[GuidAttribute("A9FFEDAD-3982-576D-A38A-C888FF605819")]
internal interface ABI.Microsoft.UI.Composition.ICompositor2 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositor2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AmbientLight CreateAmbientLight(IObjectReference _obj);
    internal static CompositionAnimationGroup CreateAnimationGroup(IObjectReference _obj);
    internal static CompositionBackdropBrush CreateBackdropBrush(IObjectReference _obj);
    internal static DistantLight CreateDistantLight(IObjectReference _obj);
    internal static DropShadow CreateDropShadow(IObjectReference _obj);
    internal static ImplicitAnimationCollection CreateImplicitAnimationCollection(IObjectReference _obj);
    internal static LayerVisual CreateLayerVisual(IObjectReference _obj);
    internal static CompositionMaskBrush CreateMaskBrush(IObjectReference _obj);
    internal static CompositionNineGridBrush CreateNineGridBrush(IObjectReference _obj);
    internal static PointLight CreatePointLight(IObjectReference _obj);
    internal static SpotLight CreateSpotLight(IObjectReference _obj);
    internal static StepEasingFunction CreateStepEasingFunction(IObjectReference _obj);
    internal static StepEasingFunction CreateStepEasingFunction(IObjectReference _obj, int stepCount);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EE444BCA-735C-5CF2-B79D-A6DD46C16160")]
internal interface ABI.Microsoft.UI.Composition.ICompositor4 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositor4Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionColorGradientStop CreateColorGradientStop(IObjectReference _obj);
    internal static CompositionColorGradientStop CreateColorGradientStop(IObjectReference _obj, float offset, Color color);
    internal static CompositionLinearGradientBrush CreateLinearGradientBrush(IObjectReference _obj);
    internal static SpringScalarNaturalMotionAnimation CreateSpringScalarAnimation(IObjectReference _obj);
    internal static SpringVector2NaturalMotionAnimation CreateSpringVector2Animation(IObjectReference _obj);
    internal static SpringVector3NaturalMotionAnimation CreateSpringVector3Animation(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BB52D644-A030-5C19-B883-577DED739AE7")]
internal interface ABI.Microsoft.UI.Composition.ICompositor5 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositor5Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static BounceScalarNaturalMotionAnimation CreateBounceScalarAnimation(IObjectReference _obj);
    internal static BounceVector2NaturalMotionAnimation CreateBounceVector2Animation(IObjectReference _obj);
    internal static BounceVector3NaturalMotionAnimation CreateBounceVector3Animation(IObjectReference _obj);
    internal static CompositionContainerShape CreateContainerShape(IObjectReference _obj);
    internal static CompositionEllipseGeometry CreateEllipseGeometry(IObjectReference _obj);
    internal static CompositionLineGeometry CreateLineGeometry(IObjectReference _obj);
    internal static CompositionPathGeometry CreatePathGeometry(IObjectReference _obj);
    internal static CompositionPathGeometry CreatePathGeometry(IObjectReference _obj, CompositionPath path);
    internal static PathKeyFrameAnimation CreatePathKeyFrameAnimation(IObjectReference _obj);
    internal static CompositionRectangleGeometry CreateRectangleGeometry(IObjectReference _obj);
    internal static CompositionRoundedRectangleGeometry CreateRoundedRectangleGeometry(IObjectReference _obj);
    internal static ShapeVisual CreateShapeVisual(IObjectReference _obj);
    internal static CompositionSpriteShape CreateSpriteShape(IObjectReference _obj);
    internal static CompositionSpriteShape CreateSpriteShape(IObjectReference _obj, CompositionGeometry geometry);
    internal static CompositionViewBox CreateViewBox(IObjectReference _obj);
    internal static IAsyncAction RequestCommitAsync(IObjectReference _obj);
    internal static string get_Comment(IObjectReference _obj);
    internal static void set_Comment(IObjectReference _obj, string value);
    internal static float get_GlobalPlaybackRate(IObjectReference _obj);
    internal static void set_GlobalPlaybackRate(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5FD20200-C188-5737-B567-5E61741AF19C")]
internal interface ABI.Microsoft.UI.Composition.ICompositor6 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositor6Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionGeometricClip CreateGeometricClip(IObjectReference _obj);
    internal static CompositionGeometricClip CreateGeometricClip(IObjectReference _obj, CompositionGeometry geometry);
    internal static RedirectVisual CreateRedirectVisual(IObjectReference _obj);
    internal static RedirectVisual CreateRedirectVisual(IObjectReference _obj, Visual source);
    internal static BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5358B81B-4799-5E7C-906C-E3DF3B2E95EB")]
internal interface ABI.Microsoft.UI.Composition.ICompositor7 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositor7Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationPropertyInfo CreateAnimationPropertyInfo(IObjectReference _obj);
    internal static RectangleClip CreateRectangleClip(IObjectReference _obj);
    internal static RectangleClip CreateRectangleClip(IObjectReference _obj, float left, float top, float right, float bottom);
    internal static RectangleClip CreateRectangleClip(IObjectReference _obj, float left, float top, float right, float bottom, Vector2 topLeftRadius, Vector2 topRightRadius, Vector2 bottomRightRadius, Vector2 bottomLeftRadius);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("02F5C9EE-A3C0-577A-9D23-44024C8EACDA")]
internal interface ABI.Microsoft.UI.Composition.ICompositor8 {
}
internal static class ABI.Microsoft.UI.Composition.ICompositor8Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationController CreateAnimationController(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ICompositorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ColorKeyFrameAnimation CreateColorKeyFrameAnimation(IObjectReference _obj);
    internal static CompositionColorBrush CreateColorBrush(IObjectReference _obj);
    internal static CompositionColorBrush CreateColorBrush(IObjectReference _obj, Color color);
    internal static ContainerVisual CreateContainerVisual(IObjectReference _obj);
    internal static CubicBezierEasingFunction CreateCubicBezierEasingFunction(IObjectReference _obj, Vector2 controlPoint1, Vector2 controlPoint2);
    internal static CompositionEffectFactory CreateEffectFactory(IObjectReference _obj, IGraphicsEffect graphicsEffect);
    internal static CompositionEffectFactory CreateEffectFactory(IObjectReference _obj, IGraphicsEffect graphicsEffect, IEnumerable`1<string> animatableProperties);
    internal static ExpressionAnimation CreateExpressionAnimation(IObjectReference _obj);
    internal static ExpressionAnimation CreateExpressionAnimation(IObjectReference _obj, string expression);
    internal static InsetClip CreateInsetClip(IObjectReference _obj);
    internal static InsetClip CreateInsetClip(IObjectReference _obj, float leftInset, float topInset, float rightInset, float bottomInset);
    internal static LinearEasingFunction CreateLinearEasingFunction(IObjectReference _obj);
    internal static CompositionPropertySet CreatePropertySet(IObjectReference _obj);
    internal static QuaternionKeyFrameAnimation CreateQuaternionKeyFrameAnimation(IObjectReference _obj);
    internal static ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(IObjectReference _obj);
    internal static CompositionScopedBatch CreateScopedBatch(IObjectReference _obj, CompositionBatchTypes batchType);
    internal static SpriteVisual CreateSpriteVisual(IObjectReference _obj);
    internal static CompositionSurfaceBrush CreateSurfaceBrush(IObjectReference _obj);
    internal static CompositionSurfaceBrush CreateSurfaceBrush(IObjectReference _obj, ICompositionSurface surface);
    internal static Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(IObjectReference _obj);
    internal static Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation(IObjectReference _obj);
    internal static Vector4KeyFrameAnimation CreateVector4KeyFrameAnimation(IObjectReference _obj);
    internal static CompositionCommitBatch GetCommitBatch(IObjectReference _obj, CompositionBatchTypes batchType);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6BAA947A-F103-55C6-91AD-3D275BEA65C4")]
internal interface ABI.Microsoft.UI.Composition.ICompositorStatics {
}
internal static class ABI.Microsoft.UI.Composition.ICompositorStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_MaxGlobalPlaybackRate(IObjectReference _obj);
    internal static float get_MinGlobalPlaybackRate(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("60AB2BF2-B95C-5944-8B36-C9773B9F5256")]
internal interface ABI.Microsoft.UI.Composition.ICompositorWithProjectedShadow {
}
internal static class ABI.Microsoft.UI.Composition.ICompositorWithProjectedShadowMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionProjectedShadowCaster CreateProjectedShadowCaster(IObjectReference _obj);
    internal static CompositionProjectedShadow CreateProjectedShadow(IObjectReference _obj);
    internal static CompositionProjectedShadowReceiver CreateProjectedShadowReceiver(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FA4F8F7D-5CC7-5C9C-883B-FE878A2F3E30")]
internal interface ABI.Microsoft.UI.Composition.ICompositorWithRadialGradient {
}
internal static class ABI.Microsoft.UI.Composition.ICompositorWithRadialGradientMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionRadialGradientBrush CreateRadialGradientBrush(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5FCFE24A-690A-5378-ACEE-561E84BFB982")]
internal interface ABI.Microsoft.UI.Composition.ICompositorWithVisualSurface {
}
internal static class ABI.Microsoft.UI.Composition.ICompositorWithVisualSurfaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionVisualSurface CreateVisualSurface(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C70DBCE1-2C2F-5D8E-91A4-AAE1121E6186")]
internal interface ABI.Microsoft.UI.Composition.IContainerVisual {
}
[GuidAttribute("3FA45EEB-C6DD-5AFD-971D-EAAF6245E716")]
internal interface ABI.Microsoft.UI.Composition.IContainerVisualFactory {
}
internal static class ABI.Microsoft.UI.Composition.IContainerVisualFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IContainerVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static VisualCollection get_Children(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("35E7FCDE-F9CE-590A-8B88-64A82A6B4B48")]
internal interface ABI.Microsoft.UI.Composition.ICubicBezierEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.ICubicBezierEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_ControlPoint1(IObjectReference _obj);
    internal static Vector2 get_ControlPoint2(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("125EF556-56EE-5C60-B944-571928CA03F5")]
internal interface ABI.Microsoft.UI.Composition.IDistantLight {
}
[GuidAttribute("9F97BFEC-B6B9-51EE-8480-B546468C748F")]
internal interface ABI.Microsoft.UI.Composition.IDistantLight2 {
}
internal static class ABI.Microsoft.UI.Composition.IDistantLight2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Intensity(IObjectReference _obj);
    internal static void set_Intensity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IDistantLightMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static Visual get_CoordinateSpace(IObjectReference _obj);
    internal static void set_CoordinateSpace(IObjectReference _obj, Visual value);
    internal static Vector3 get_Direction(IObjectReference _obj);
    internal static void set_Direction(IObjectReference _obj, Vector3 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("977095D2-265F-5F58-9789-CB7F85E98C9E")]
internal interface ABI.Microsoft.UI.Composition.IDropShadow {
}
[GuidAttribute("CBC7C266-2D33-5711-B3B4-5699410BEF56")]
internal interface ABI.Microsoft.UI.Composition.IDropShadow2 {
}
internal static class ABI.Microsoft.UI.Composition.IDropShadow2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionDropShadowSourcePolicy get_SourcePolicy(IObjectReference _obj);
    internal static void set_SourcePolicy(IObjectReference _obj, CompositionDropShadowSourcePolicy value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IDropShadowMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_BlurRadius(IObjectReference _obj);
    internal static void set_BlurRadius(IObjectReference _obj, float value);
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static CompositionBrush get_Mask(IObjectReference _obj);
    internal static void set_Mask(IObjectReference _obj, CompositionBrush value);
    internal static Vector3 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector3 value);
    internal static float get_Opacity(IObjectReference _obj);
    internal static void set_Opacity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B952E12F-4A50-51A9-A11A-23855F4AAE07")]
internal interface ABI.Microsoft.UI.Composition.IElasticEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.IElasticEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    internal static int get_Oscillations(IObjectReference _obj);
    internal static float get_Springiness(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DF29ECC1-3FFC-565F-9D6C-533586908106")]
internal interface ABI.Microsoft.UI.Composition.IExponentialEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.IExponentialEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Exponent(IObjectReference _obj);
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7FFF5826-1992-56C0-9060-5ADE561A4F2D")]
internal interface ABI.Microsoft.UI.Composition.IExpressionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IExpressionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_Expression(IObjectReference _obj);
    internal static void set_Expression(IObjectReference _obj, string value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C5C0689E-F5AE-5BED-829B-C522CDA39717")]
internal interface ABI.Microsoft.UI.Composition.IImplicitAnimationCollection {
}
internal static class ABI.Microsoft.UI.Composition.IImplicitAnimationCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F9D99475-7B59-5B28-A1D2-B832DA6988C9")]
internal interface ABI.Microsoft.UI.Composition.IInsetClip {
}
internal static class ABI.Microsoft.UI.Composition.IInsetClipMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_BottomInset(IObjectReference _obj);
    internal static void set_BottomInset(IObjectReference _obj, float value);
    internal static float get_LeftInset(IObjectReference _obj);
    internal static void set_LeftInset(IObjectReference _obj, float value);
    internal static float get_RightInset(IObjectReference _obj);
    internal static void set_RightInset(IObjectReference _obj, float value);
    internal static float get_TopInset(IObjectReference _obj);
    internal static void set_TopInset(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5A8F57F0-F059-5B47-B308-C4C80FC71248")]
internal interface ABI.Microsoft.UI.Composition.IKeyFrameAnimation {
}
[GuidAttribute("414692E5-8A7E-58EA-83E1-25CE475D9300")]
internal interface ABI.Microsoft.UI.Composition.IKeyFrameAnimation2 {
}
internal static class ABI.Microsoft.UI.Composition.IKeyFrameAnimation2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationDirection get_Direction(IObjectReference _obj);
    internal static void set_Direction(IObjectReference _obj, AnimationDirection value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4F97E180-9BCB-5FC4-ABBE-43AA3BE327E7")]
internal interface ABI.Microsoft.UI.Composition.IKeyFrameAnimation3 {
}
internal static class ABI.Microsoft.UI.Composition.IKeyFrameAnimation3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationDelayBehavior get_DelayBehavior(IObjectReference _obj);
    internal static void set_DelayBehavior(IObjectReference _obj, AnimationDelayBehavior value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7CCCFC87-3BAF-5100-B5F8-2F779F954F19")]
internal interface ABI.Microsoft.UI.Composition.IKeyFrameAnimationFactory {
}
internal static class ABI.Microsoft.UI.Composition.IKeyFrameAnimationFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IKeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertExpressionKeyFrame(IObjectReference _obj, float normalizedProgressKey, string value);
    internal static void InsertExpressionKeyFrame(IObjectReference _obj, float normalizedProgressKey, string value, CompositionEasingFunction easingFunction);
    internal static TimeSpan get_DelayTime(IObjectReference _obj);
    internal static void set_DelayTime(IObjectReference _obj, TimeSpan value);
    internal static TimeSpan get_Duration(IObjectReference _obj);
    internal static void set_Duration(IObjectReference _obj, TimeSpan value);
    internal static AnimationIterationBehavior get_IterationBehavior(IObjectReference _obj);
    internal static void set_IterationBehavior(IObjectReference _obj, AnimationIterationBehavior value);
    internal static int get_IterationCount(IObjectReference _obj);
    internal static void set_IterationCount(IObjectReference _obj, int value);
    internal static int get_KeyFrameCount(IObjectReference _obj);
    internal static AnimationStopBehavior get_StopBehavior(IObjectReference _obj);
    internal static void set_StopBehavior(IObjectReference _obj, AnimationStopBehavior value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("64D05CA1-3BF6-5D4F-98A1-7500F2F23EBE")]
internal interface ABI.Microsoft.UI.Composition.ILayerVisual {
}
[GuidAttribute("9AB2E401-AF45-54DA-9991-DD31273155D2")]
internal interface ABI.Microsoft.UI.Composition.ILayerVisual2 {
}
internal static class ABI.Microsoft.UI.Composition.ILayerVisual2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionShadow get_Shadow(IObjectReference _obj);
    internal static void set_Shadow(IObjectReference _obj, CompositionShadow value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ILayerVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEffectBrush get_Effect(IObjectReference _obj);
    internal static void set_Effect(IObjectReference _obj, CompositionEffectBrush value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("79BFEEF6-70C7-50A6-BB3A-0E9636148695")]
internal interface ABI.Microsoft.UI.Composition.ILinearEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.ILinearEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ImplicitAnimationCollection : ValueType {
    public static IObjectReference CreateMarshaler(ImplicitAnimationCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(ImplicitAnimationCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ImplicitAnimationCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ImplicitAnimationCollection obj);
    public static MarshalerArray<ImplicitAnimationCollection> CreateMarshalerArray(ImplicitAnimationCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ImplicitAnimationCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(ImplicitAnimationCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ImplicitAnimationCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ImplicitAnimationCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ImplicitAnimationCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("2FF54EBB-A035-50BE-A73C-20014975EE31")]
internal interface ABI.Microsoft.UI.Composition.INaturalMotionAnimation {
}
[GuidAttribute("0411A259-2622-59E2-A59E-1E23D8F83A9F")]
internal interface ABI.Microsoft.UI.Composition.INaturalMotionAnimationFactory {
}
internal static class ABI.Microsoft.UI.Composition.INaturalMotionAnimationFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.INaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AnimationDelayBehavior get_DelayBehavior(IObjectReference _obj);
    internal static void set_DelayBehavior(IObjectReference _obj, AnimationDelayBehavior value);
    internal static TimeSpan get_DelayTime(IObjectReference _obj);
    internal static void set_DelayTime(IObjectReference _obj, TimeSpan value);
    internal static AnimationStopBehavior get_StopBehavior(IObjectReference _obj);
    internal static void set_StopBehavior(IObjectReference _obj, AnimationStopBehavior value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.InitialValueExpressionCollection : ValueType {
    public static IObjectReference CreateMarshaler(InitialValueExpressionCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(InitialValueExpressionCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InitialValueExpressionCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InitialValueExpressionCollection obj);
    public static MarshalerArray<InitialValueExpressionCollection> CreateMarshalerArray(InitialValueExpressionCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InitialValueExpressionCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(InitialValueExpressionCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InitialValueExpressionCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InitialValueExpressionCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.InitialValueExpressionCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.InsetClip : ValueType {
    public static IObjectReference CreateMarshaler(InsetClip obj);
    public static ObjectReferenceValue CreateMarshaler2(InsetClip obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InsetClip FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InsetClip obj);
    public static MarshalerArray<InsetClip> CreateMarshalerArray(InsetClip[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InsetClip[] FromAbiArray(object box);
    public static void CopyAbiArray(InsetClip[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InsetClip[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InsetClip> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.InsetClipRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.CompositionConditionalValue : ValueType {
    public static IObjectReference CreateMarshaler(CompositionConditionalValue obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionConditionalValue obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionConditionalValue FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionConditionalValue obj);
    public static MarshalerArray<CompositionConditionalValue> CreateMarshalerArray(CompositionConditionalValue[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionConditionalValue[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionConditionalValue[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionConditionalValue[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionConditionalValue> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.CompositionConditionalValueRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollection : ValueType {
    public static IObjectReference CreateMarshaler(CompositionInteractionSourceCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositionInteractionSourceCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositionInteractionSourceCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositionInteractionSourceCollection obj);
    public static MarshalerArray<CompositionInteractionSourceCollection> CreateMarshalerArray(CompositionInteractionSourceCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositionInteractionSourceCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositionInteractionSourceCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositionInteractionSourceCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositionInteractionSourceCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("3743DDA0-FBE2-5ECF-9E80-4638A011F707")]
internal interface ABI.Microsoft.UI.Composition.Interactions.ICompositionConditionalValue {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.ICompositionConditionalValueMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ExpressionAnimation get_Condition(IObjectReference _obj);
    internal static void set_Condition(IObjectReference _obj, ExpressionAnimation value);
    internal static ExpressionAnimation get_Value(IObjectReference _obj);
    internal static void set_Value(IObjectReference _obj, ExpressionAnimation value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DF133C1F-A185-536C-B54B-8F369212A581")]
internal interface ABI.Microsoft.UI.Composition.Interactions.ICompositionConditionalValueStatics {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.ICompositionConditionalValueStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionConditionalValue Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("711C72C0-C406-4A12-859B-B44F651AF046")]
internal interface ABI.Microsoft.UI.Composition.Interactions.ICompositionInteractionSource {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICompositionInteractionSource();
}
[GuidAttribute("9AA1B86B-B002-5E2E-BB2B-0E2C547445E1")]
internal interface ABI.Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollection {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Add(IObjectReference _obj, ICompositionInteractionSource value);
    internal static void Remove(IObjectReference _obj, ICompositionInteractionSource value);
    internal static void RemoveAll(IObjectReference _obj);
    internal static int get_Count(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
public static class ABI.Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("099E0124-DADF-5BC6-A895-90387657550F")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionSourceConfiguration {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionSourceConfigurationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionSourceRedirectionMode get_PositionXSourceMode(IObjectReference _obj);
    internal static void set_PositionXSourceMode(IObjectReference _obj, InteractionSourceRedirectionMode value);
    internal static InteractionSourceRedirectionMode get_PositionYSourceMode(IObjectReference _obj);
    internal static void set_PositionYSourceMode(IObjectReference _obj, InteractionSourceRedirectionMode value);
    internal static InteractionSourceRedirectionMode get_ScaleSourceMode(IObjectReference _obj);
    internal static void set_ScaleSourceMode(IObjectReference _obj, InteractionSourceRedirectionMode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("02D8EC1F-8F04-505E-BD1E-47B2A204DE51")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker {
}
[GuidAttribute("396D7FB1-2FAD-5508-8591-4FF0DC5A7484")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ConfigureCenterPointXInertiaModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    internal static void ConfigureCenterPointYInertiaModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("239752CF-266C-5ACB-ACC3-B3E3ECAF4D3F")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker3 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ConfigureVector2PositionInertiaModifiers(IObjectReference _obj, IEnumerable`1<InteractionTrackerVector2InertiaModifier> modifiers);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A9A9CE02-53C9-5690-A575-F340B7C2FDF2")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker4 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker4Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int TryUpdatePosition(IObjectReference _obj, Vector3 value, InteractionTrackerClampingOption option);
    internal static int TryUpdatePositionBy(IObjectReference _obj, Vector3 amount, InteractionTrackerClampingOption option);
    internal static bool get_IsInertiaFromImpulse(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DBFCD333-C3BF-5057-A45E-25EDF06EBD8F")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker5 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker5Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int TryUpdatePosition(IObjectReference _obj, Vector3 value, InteractionTrackerClampingOption option, InteractionTrackerPositionUpdateOption posUpdateOption);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7464035C-CFCE-56DA-9472-420F276BD0A5")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs {
}
[GuidAttribute("06B99FBC-D6A8-5AE3-88B8-E91621BECBD6")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsFromBinding(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_RequestId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("199094AB-15FD-539C-97B8-964A8196F777")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs {
}
[GuidAttribute("4EB213C0-931C-5164-8965-11C0186D3390")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsFromBinding(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_RequestId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4D3A0C6B-C508-5029-A47A-CBF64636F010")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifier {
}
[GuidAttribute("6DEE5B33-0B5A-57B1-8537-93D4FD038F9F")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierFactory {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("91F662C0-3141-5B5E-862F-CFC60BEE8CD6")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotion {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ExpressionAnimation get_Condition(IObjectReference _obj);
    internal static void set_Condition(IObjectReference _obj, ExpressionAnimation value);
    internal static ExpressionAnimation get_Motion(IObjectReference _obj);
    internal static void set_Motion(IObjectReference _obj, ExpressionAnimation value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B0185A4F-0059-52C6-A660-9AED0C44FF7D")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStatics {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionTrackerInertiaMotion Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8C7482E0-185D-56B1-B67F-FCA4FCD13CD2")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ExpressionAnimation get_Condition(IObjectReference _obj);
    internal static void set_Condition(IObjectReference _obj, ExpressionAnimation value);
    internal static ScalarNaturalMotionAnimation get_NaturalMotion(IObjectReference _obj);
    internal static void set_NaturalMotion(IObjectReference _obj, ScalarNaturalMotionAnimation value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("860EC143-F165-5298-ABF2-47369DD07F10")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStatics {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionTrackerInertiaNaturalMotion Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1A2B20CD-3371-53FF-A560-F4847B467D73")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ExpressionAnimation get_Condition(IObjectReference _obj);
    internal static void set_Condition(IObjectReference _obj, ExpressionAnimation value);
    internal static ExpressionAnimation get_RestingValue(IObjectReference _obj);
    internal static void set_RestingValue(IObjectReference _obj, ExpressionAnimation value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CF0F0414-7FDF-5284-AEEF-28B71B62AA4F")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStatics {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionTrackerInertiaRestingValue Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5B76C949-A4D0-5C9D-9292-7013AE9656C7")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs {
}
[GuidAttribute("C42D7E8F-7199-57A9-8AEC-8727552B13E6")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsInertiaFromImpulse(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CE726CA0-1C04-531B-9951-4AEC996952E4")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsFromBinding(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Nullable`1<Vector3> get_ModifiedRestingPosition(IObjectReference _obj);
    internal static Nullable`1<float> get_ModifiedRestingScale(IObjectReference _obj);
    internal static Vector3 get_NaturalRestingPosition(IObjectReference _obj);
    internal static float get_NaturalRestingScale(IObjectReference _obj);
    internal static Vector3 get_PositionVelocityInPixelsPerSecond(IObjectReference _obj);
    internal static int get_RequestId(IObjectReference _obj);
    internal static float get_ScaleVelocityInPercentPerSecond(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("70D29B84-0931-5F17-A8A1-82F8F8782532")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs {
}
[GuidAttribute("2F1FF38D-2F51-5CEB-8D09-BDA1519F9342")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsFromBinding(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_RequestId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void AdjustPositionXIfGreaterThanThreshold(IObjectReference _obj, float adjustment, float positionThreshold);
    internal static void AdjustPositionYIfGreaterThanThreshold(IObjectReference _obj, float adjustment, float positionThreshold);
    internal static void ConfigurePositionXInertiaModifiers(IObjectReference _obj, IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    internal static void ConfigurePositionYInertiaModifiers(IObjectReference _obj, IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    internal static void ConfigureScaleInertiaModifiers(IObjectReference _obj, IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    internal static int TryUpdatePosition(IObjectReference _obj, Vector3 value);
    internal static int TryUpdatePositionBy(IObjectReference _obj, Vector3 amount);
    internal static int TryUpdatePositionWithAnimation(IObjectReference _obj, CompositionAnimation animation);
    internal static int TryUpdatePositionWithAdditionalVelocity(IObjectReference _obj, Vector3 velocityInPixelsPerSecond);
    internal static int TryUpdateScale(IObjectReference _obj, float value, Vector3 centerPoint);
    internal static int TryUpdateScaleWithAnimation(IObjectReference _obj, CompositionAnimation animation, Vector3 centerPoint);
    internal static int TryUpdateScaleWithAdditionalVelocity(IObjectReference _obj, float velocityInPercentPerSecond, Vector3 centerPoint);
    internal static CompositionInteractionSourceCollection get_InteractionSources(IObjectReference _obj);
    internal static bool get_IsPositionRoundingSuggested(IObjectReference _obj);
    internal static Vector3 get_MaxPosition(IObjectReference _obj);
    internal static void set_MaxPosition(IObjectReference _obj, Vector3 value);
    internal static float get_MaxScale(IObjectReference _obj);
    internal static void set_MaxScale(IObjectReference _obj, float value);
    internal static Vector3 get_MinPosition(IObjectReference _obj);
    internal static void set_MinPosition(IObjectReference _obj, Vector3 value);
    internal static float get_MinScale(IObjectReference _obj);
    internal static void set_MinScale(IObjectReference _obj, float value);
    internal static Vector3 get_NaturalRestingPosition(IObjectReference _obj);
    internal static float get_NaturalRestingScale(IObjectReference _obj);
    internal static IInteractionTrackerOwner get_Owner(IObjectReference _obj);
    internal static Vector3 get_Position(IObjectReference _obj);
    internal static Nullable`1<Vector3> get_PositionInertiaDecayRate(IObjectReference _obj);
    internal static void set_PositionInertiaDecayRate(IObjectReference _obj, Nullable`1<Vector3> value);
    internal static Vector3 get_PositionVelocityInPixelsPerSecond(IObjectReference _obj);
    internal static float get_Scale(IObjectReference _obj);
    internal static Nullable`1<float> get_ScaleInertiaDecayRate(IObjectReference _obj);
    internal static void set_ScaleInertiaDecayRate(IObjectReference _obj, Nullable`1<float> value);
    internal static float get_ScaleVelocityInPercentPerSecond(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("8869779D-1D2A-5816-836A-68A910507D87")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner {
    public static IntPtr AbiToProjectionVftablePtr;
    private static IInteractionTrackerOwner();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_CustomAnimationStateEntered_0(IntPtr thisPtr, IntPtr sender, IntPtr args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_IdleStateEntered_1(IntPtr thisPtr, IntPtr sender, IntPtr args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_InertiaStateEntered_2(IntPtr thisPtr, IntPtr sender, IntPtr args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_InteractingStateEntered_3(IntPtr thisPtr, IntPtr sender, IntPtr args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_RequestIgnored_4(IntPtr thisPtr, IntPtr sender, IntPtr args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_ValuesChanged_5(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private sealed virtual override void global::Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner.CustomAnimationStateEntered(InteractionTracker sender, InteractionTrackerCustomAnimationStateEnteredArgs args);
    private sealed virtual override void global::Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner.IdleStateEntered(InteractionTracker sender, InteractionTrackerIdleStateEnteredArgs args);
    private sealed virtual override void global::Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner.InertiaStateEntered(InteractionTracker sender, InteractionTrackerInertiaStateEnteredArgs args);
    private sealed virtual override void global::Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner.InteractingStateEntered(InteractionTracker sender, InteractionTrackerInteractingStateEnteredArgs args);
    private sealed virtual override void global::Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner.RequestIgnored(InteractionTracker sender, InteractionTrackerRequestIgnoredArgs args);
    private sealed virtual override void global::Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner.ValuesChanged(InteractionTracker sender, InteractionTrackerValuesChangedArgs args);
}
public static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerOwnerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void CustomAnimationStateEntered(IObjectReference _obj, InteractionTracker sender, InteractionTrackerCustomAnimationStateEnteredArgs args);
    public static void IdleStateEntered(IObjectReference _obj, InteractionTracker sender, InteractionTrackerIdleStateEnteredArgs args);
    public static void InertiaStateEntered(IObjectReference _obj, InteractionTracker sender, InteractionTrackerInertiaStateEnteredArgs args);
    public static void InteractingStateEntered(IObjectReference _obj, InteractionTracker sender, InteractionTrackerInteractingStateEnteredArgs args);
    public static void RequestIgnored(IObjectReference _obj, InteractionTracker sender, InteractionTrackerRequestIgnoredArgs args);
    public static void ValuesChanged(IObjectReference _obj, InteractionTracker sender, InteractionTrackerValuesChangedArgs args);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("C276205E-F7A5-5BA2-AD45-D12C3C339149")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgs {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_RequestId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7AC9867A-E16E-56EF-9809-F6E404240F50")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics {
}
[GuidAttribute("25658E4C-B99F-5108-AAB7-1CC44F11508B")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void SetBindingMode(IObjectReference _obj, InteractionTracker boundTracker1, InteractionTracker boundTracker2, InteractionBindingAxisModes axisMode);
    internal static InteractionBindingAxisModes GetBindingMode(IObjectReference _obj, InteractionTracker boundTracker1, InteractionTracker boundTracker2);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionTracker Create(IObjectReference _obj, Compositor compositor);
    internal static InteractionTracker CreateWithOwner(IObjectReference _obj, Compositor compositor, IInteractionTrackerOwner owner);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9B495BED-1CF7-55C1-82B9-8022CBF3C766")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgs {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector3 get_Position(IObjectReference _obj);
    internal static int get_RequestId(IObjectReference _obj);
    internal static float get_Scale(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4B8ED310-CB61-5F0A-B99A-940CDD2C42B1")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifier {
}
[GuidAttribute("1B3FD240-BA66-5296-B801-62A2A3606613")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierFactory {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("097BA1A6-E077-52D1-86D3-38E3F6619DDF")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ExpressionAnimation get_Condition(IObjectReference _obj);
    internal static void set_Condition(IObjectReference _obj, ExpressionAnimation value);
    internal static Vector2NaturalMotionAnimation get_NaturalMotion(IObjectReference _obj);
    internal static void set_NaturalMotion(IObjectReference _obj, Vector2NaturalMotionAnimation value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CC24AB87-9131-5286-B3CE-1EF97E0974E6")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStatics {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionTrackerVector2InertiaNaturalMotion Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionSourceConfiguration : ValueType {
    public static IObjectReference CreateMarshaler(InteractionSourceConfiguration obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionSourceConfiguration obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionSourceConfiguration FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionSourceConfiguration obj);
    public static MarshalerArray<InteractionSourceConfiguration> CreateMarshalerArray(InteractionSourceConfiguration[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionSourceConfiguration[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionSourceConfiguration[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionSourceConfiguration[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionSourceConfiguration> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionSourceConfigurationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTracker : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTracker obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTracker obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTracker FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTracker obj);
    public static MarshalerArray<InteractionTracker> CreateMarshalerArray(InteractionTracker[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTracker[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTracker[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTracker[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTracker> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgs : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerCustomAnimationStateEnteredArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerCustomAnimationStateEnteredArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerCustomAnimationStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerCustomAnimationStateEnteredArgs obj);
    public static MarshalerArray<InteractionTrackerCustomAnimationStateEnteredArgs> CreateMarshalerArray(InteractionTrackerCustomAnimationStateEnteredArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerCustomAnimationStateEnteredArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerCustomAnimationStateEnteredArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerCustomAnimationStateEnteredArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerCustomAnimationStateEnteredArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgs : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerIdleStateEnteredArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerIdleStateEnteredArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerIdleStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerIdleStateEnteredArgs obj);
    public static MarshalerArray<InteractionTrackerIdleStateEnteredArgs> CreateMarshalerArray(InteractionTrackerIdleStateEnteredArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerIdleStateEnteredArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerIdleStateEnteredArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerIdleStateEnteredArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerIdleStateEnteredArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaModifier : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerInertiaModifier obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerInertiaModifier obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerInertiaModifier FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerInertiaModifier obj);
    public static MarshalerArray<InteractionTrackerInertiaModifier> CreateMarshalerArray(InteractionTrackerInertiaModifier[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerInertiaModifier[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerInertiaModifier[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerInertiaModifier[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerInertiaModifier> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaModifierRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaMotion : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerInertiaMotion obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerInertiaMotion obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerInertiaMotion FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerInertiaMotion obj);
    public static MarshalerArray<InteractionTrackerInertiaMotion> CreateMarshalerArray(InteractionTrackerInertiaMotion[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerInertiaMotion[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerInertiaMotion[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerInertiaMotion[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerInertiaMotion> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaMotionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerInertiaNaturalMotion obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerInertiaNaturalMotion obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerInertiaNaturalMotion FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerInertiaNaturalMotion obj);
    public static MarshalerArray<InteractionTrackerInertiaNaturalMotion> CreateMarshalerArray(InteractionTrackerInertiaNaturalMotion[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerInertiaNaturalMotion[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerInertiaNaturalMotion[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerInertiaNaturalMotion[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerInertiaNaturalMotion> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerInertiaRestingValue obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerInertiaRestingValue obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerInertiaRestingValue FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerInertiaRestingValue obj);
    public static MarshalerArray<InteractionTrackerInertiaRestingValue> CreateMarshalerArray(InteractionTrackerInertiaRestingValue[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerInertiaRestingValue[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerInertiaRestingValue[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerInertiaRestingValue[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerInertiaRestingValue> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaRestingValueRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgs : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerInertiaStateEnteredArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerInertiaStateEnteredArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerInertiaStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerInertiaStateEnteredArgs obj);
    public static MarshalerArray<InteractionTrackerInertiaStateEnteredArgs> CreateMarshalerArray(InteractionTrackerInertiaStateEnteredArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerInertiaStateEnteredArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerInertiaStateEnteredArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerInertiaStateEnteredArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerInertiaStateEnteredArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgs : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerInteractingStateEnteredArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerInteractingStateEnteredArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerInteractingStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerInteractingStateEnteredArgs obj);
    public static MarshalerArray<InteractionTrackerInteractingStateEnteredArgs> CreateMarshalerArray(InteractionTrackerInteractingStateEnteredArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerInteractingStateEnteredArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerInteractingStateEnteredArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerInteractingStateEnteredArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerInteractingStateEnteredArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgs : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerRequestIgnoredArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerRequestIgnoredArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerRequestIgnoredArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerRequestIgnoredArgs obj);
    public static MarshalerArray<InteractionTrackerRequestIgnoredArgs> CreateMarshalerArray(InteractionTrackerRequestIgnoredArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerRequestIgnoredArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerRequestIgnoredArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerRequestIgnoredArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerRequestIgnoredArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerValuesChangedArgs : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerValuesChangedArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerValuesChangedArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerValuesChangedArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerValuesChangedArgs obj);
    public static MarshalerArray<InteractionTrackerValuesChangedArgs> CreateMarshalerArray(InteractionTrackerValuesChangedArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerValuesChangedArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerValuesChangedArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerValuesChangedArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerValuesChangedArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerValuesChangedArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifier : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerVector2InertiaModifier obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerVector2InertiaModifier obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerVector2InertiaModifier FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerVector2InertiaModifier obj);
    public static MarshalerArray<InteractionTrackerVector2InertiaModifier> CreateMarshalerArray(InteractionTrackerVector2InertiaModifier[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerVector2InertiaModifier[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerVector2InertiaModifier[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerVector2InertiaModifier[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerVector2InertiaModifier> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifierRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion : ValueType {
    public static IObjectReference CreateMarshaler(InteractionTrackerVector2InertiaNaturalMotion obj);
    public static ObjectReferenceValue CreateMarshaler2(InteractionTrackerVector2InertiaNaturalMotion obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InteractionTrackerVector2InertiaNaturalMotion FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InteractionTrackerVector2InertiaNaturalMotion obj);
    public static MarshalerArray<InteractionTrackerVector2InertiaNaturalMotion> CreateMarshalerArray(InteractionTrackerVector2InertiaNaturalMotion[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InteractionTrackerVector2InertiaNaturalMotion[] FromAbiArray(object box);
    public static void CopyAbiArray(InteractionTrackerVector2InertiaNaturalMotion[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InteractionTrackerVector2InertiaNaturalMotion[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InteractionTrackerVector2InertiaNaturalMotion> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("EA595C95-B9CB-5CD4-BB9C-4934FF329063")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource {
}
[GuidAttribute("FF1132BA-DC0D-519E-BE49-BE301E52306A")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ConfigureCenterPointXModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    internal static void ConfigureCenterPointYModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    internal static void ConfigureDeltaPositionXModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    internal static void ConfigureDeltaPositionYModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    internal static void ConfigureDeltaScaleModifiers(IObjectReference _obj, IEnumerable`1<CompositionConditionalValue> conditionalValues);
    internal static Vector3 get_DeltaPosition(IObjectReference _obj);
    internal static float get_DeltaScale(IObjectReference _obj);
    internal static Vector3 get_Position(IObjectReference _obj);
    internal static Vector3 get_PositionVelocity(IObjectReference _obj);
    internal static float get_Scale(IObjectReference _obj);
    internal static float get_ScaleVelocity(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D523BD66-A05D-5417-8E07-84AE3CAF9752")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource3 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InteractionSourceConfiguration get_PointerWheelConfig(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void TryRedirectForManipulation(IObjectReference _obj, PointerPoint pointerPoint);
    internal static bool get_IsPositionXRailsEnabled(IObjectReference _obj);
    internal static void set_IsPositionXRailsEnabled(IObjectReference _obj, bool value);
    internal static bool get_IsPositionYRailsEnabled(IObjectReference _obj);
    internal static void set_IsPositionYRailsEnabled(IObjectReference _obj, bool value);
    internal static VisualInteractionSourceRedirectionMode get_ManipulationRedirectionMode(IObjectReference _obj);
    internal static void set_ManipulationRedirectionMode(IObjectReference _obj, VisualInteractionSourceRedirectionMode value);
    internal static InteractionChainingMode get_PositionXChainingMode(IObjectReference _obj);
    internal static void set_PositionXChainingMode(IObjectReference _obj, InteractionChainingMode value);
    internal static InteractionSourceMode get_PositionXSourceMode(IObjectReference _obj);
    internal static void set_PositionXSourceMode(IObjectReference _obj, InteractionSourceMode value);
    internal static InteractionChainingMode get_PositionYChainingMode(IObjectReference _obj);
    internal static void set_PositionYChainingMode(IObjectReference _obj, InteractionChainingMode value);
    internal static InteractionSourceMode get_PositionYSourceMode(IObjectReference _obj);
    internal static void set_PositionYSourceMode(IObjectReference _obj, InteractionSourceMode value);
    internal static InteractionChainingMode get_ScaleChainingMode(IObjectReference _obj);
    internal static void set_ScaleChainingMode(IObjectReference _obj, InteractionChainingMode value);
    internal static InteractionSourceMode get_ScaleSourceMode(IObjectReference _obj);
    internal static void set_ScaleSourceMode(IObjectReference _obj, InteractionSourceMode value);
    internal static Visual get_Source(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FEB73102-238C-52AA-8E03-B68D5ECC44B3")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceObjectFactory {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceObjectFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5FC9C763-E2E5-530E-87CD-B93118ADE8A3")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics {
}
[GuidAttribute("A6B494FE-12A1-5A73-B87E-4C4EF58EAC6C")]
internal interface ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics2 {
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static VisualInteractionSource CreateFromIVisualElement(IObjectReference _obj, IVisualElement source);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static VisualInteractionSource Create(IObjectReference _obj, Visual source);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Interactions.VisualInteractionSource : ValueType {
    public static IObjectReference CreateMarshaler(VisualInteractionSource obj);
    public static ObjectReferenceValue CreateMarshaler2(VisualInteractionSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static VisualInteractionSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(VisualInteractionSource obj);
    public static MarshalerArray<VisualInteractionSource> CreateMarshalerArray(VisualInteractionSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static VisualInteractionSource[] FromAbiArray(object box);
    public static void CopyAbiArray(VisualInteractionSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(VisualInteractionSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<VisualInteractionSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Interactions.VisualInteractionSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("2B692808-43DA-5118-B66D-904A3EC74FD9")]
internal interface ABI.Microsoft.UI.Composition.IPathKeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IPathKeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, CompositionPath path);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, CompositionPath path, CompositionEasingFunction easingFunction);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("ED5CC102-F0AC-59A8-8678-CE54146E7BE8")]
internal interface ABI.Microsoft.UI.Composition.IPointLight {
}
[GuidAttribute("DE466104-59D9-57D2-92B5-554D6D82EDF2")]
internal interface ABI.Microsoft.UI.Composition.IPointLight2 {
}
internal static class ABI.Microsoft.UI.Composition.IPointLight2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Intensity(IObjectReference _obj);
    internal static void set_Intensity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BE30E87A-8CBB-5A56-8D24-2CD865F383B3")]
internal interface ABI.Microsoft.UI.Composition.IPointLight3 {
}
internal static class ABI.Microsoft.UI.Composition.IPointLight3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_MaxAttenuationCutoff(IObjectReference _obj);
    internal static void set_MaxAttenuationCutoff(IObjectReference _obj, float value);
    internal static float get_MinAttenuationCutoff(IObjectReference _obj);
    internal static void set_MinAttenuationCutoff(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IPointLightMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static float get_ConstantAttenuation(IObjectReference _obj);
    internal static void set_ConstantAttenuation(IObjectReference _obj, float value);
    internal static Visual get_CoordinateSpace(IObjectReference _obj);
    internal static void set_CoordinateSpace(IObjectReference _obj, Visual value);
    internal static float get_LinearAttenuation(IObjectReference _obj);
    internal static void set_LinearAttenuation(IObjectReference _obj, float value);
    internal static Vector3 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector3 value);
    internal static float get_QuadraticAttenuation(IObjectReference _obj);
    internal static void set_QuadraticAttenuation(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0268A272-EA06-5FB0-8DEF-49726BCEE39B")]
internal interface ABI.Microsoft.UI.Composition.IPowerEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.IPowerEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    internal static float get_Power(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E72D1026-DA3B-5D56-858B-3A9AA3C57D70")]
internal interface ABI.Microsoft.UI.Composition.IQuaternionKeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IQuaternionKeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Quaternion value);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Quaternion value, CompositionEasingFunction easingFunction);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BC261502-2259-5C01-8616-556110A09657")]
internal interface ABI.Microsoft.UI.Composition.IRectangleClip {
}
internal static class ABI.Microsoft.UI.Composition.IRectangleClipMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Bottom(IObjectReference _obj);
    internal static void set_Bottom(IObjectReference _obj, float value);
    internal static Vector2 get_BottomLeftRadius(IObjectReference _obj);
    internal static void set_BottomLeftRadius(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_BottomRightRadius(IObjectReference _obj);
    internal static void set_BottomRightRadius(IObjectReference _obj, Vector2 value);
    internal static float get_Left(IObjectReference _obj);
    internal static void set_Left(IObjectReference _obj, float value);
    internal static float get_Right(IObjectReference _obj);
    internal static void set_Right(IObjectReference _obj, float value);
    internal static float get_Top(IObjectReference _obj);
    internal static void set_Top(IObjectReference _obj, float value);
    internal static Vector2 get_TopLeftRadius(IObjectReference _obj);
    internal static void set_TopLeftRadius(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_TopRightRadius(IObjectReference _obj);
    internal static void set_TopRightRadius(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6C10081A-CDE1-50D9-AC05-78D6845B656F")]
internal interface ABI.Microsoft.UI.Composition.IRedirectVisual {
}
internal static class ABI.Microsoft.UI.Composition.IRedirectVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Visual get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, Visual value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FE5B97C7-F656-56D6-A0CD-3E1227E4DD44")]
internal interface ABI.Microsoft.UI.Composition.IRenderingDeviceReplacedEventArgs {
}
internal static class ABI.Microsoft.UI.Composition.IRenderingDeviceReplacedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionGraphicsDevice get_GraphicsDevice(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5A5F8ABE-D129-5B25-8AFF-8180FD9BFB22")]
internal interface ABI.Microsoft.UI.Composition.IScalarKeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IScalarKeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, float value);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, float value, CompositionEasingFunction easingFunction);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("903224B0-2DBE-56EB-B9EA-33D2E3113181")]
internal interface ABI.Microsoft.UI.Composition.IScalarNaturalMotionAnimation {
}
[GuidAttribute("14F8A9AB-976C-5E6F-890B-9A74D07FA39F")]
internal interface ABI.Microsoft.UI.Composition.IScalarNaturalMotionAnimationFactory {
}
internal static class ABI.Microsoft.UI.Composition.IScalarNaturalMotionAnimationFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IScalarNaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Nullable`1<float> get_FinalValue(IObjectReference _obj);
    internal static void set_FinalValue(IObjectReference _obj, Nullable`1<float> value);
    internal static Nullable`1<float> get_InitialValue(IObjectReference _obj);
    internal static void set_InitialValue(IObjectReference _obj, Nullable`1<float> value);
    internal static float get_InitialVelocity(IObjectReference _obj);
    internal static void set_InitialVelocity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A911C80B-A5A5-5ACA-B8FF-C43F08F06143")]
internal interface ABI.Microsoft.UI.Composition.IShapeVisual {
}
internal static class ABI.Microsoft.UI.Composition.IShapeVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionShapeCollection get_Shapes(IObjectReference _obj);
    internal static CompositionViewBox get_ViewBox(IObjectReference _obj);
    internal static void set_ViewBox(IObjectReference _obj, CompositionViewBox value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7FCCB5F8-CB0E-5A01-A26B-98880FF49DC6")]
internal interface ABI.Microsoft.UI.Composition.ISineEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.ISineEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionEasingFunctionMode get_Mode(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5935496A-0586-5F77-BD03-D5A6BB9E8FA0")]
internal interface ABI.Microsoft.UI.Composition.ISpotLight {
}
[GuidAttribute("49DD3B50-EC5C-5B6C-BAA1-8504B13E3A67")]
internal interface ABI.Microsoft.UI.Composition.ISpotLight2 {
}
internal static class ABI.Microsoft.UI.Composition.ISpotLight2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_InnerConeIntensity(IObjectReference _obj);
    internal static void set_InnerConeIntensity(IObjectReference _obj, float value);
    internal static float get_OuterConeIntensity(IObjectReference _obj);
    internal static void set_OuterConeIntensity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C6919941-0D9F-58C8-91E2-ADEF6E5E70A4")]
internal interface ABI.Microsoft.UI.Composition.ISpotLight3 {
}
internal static class ABI.Microsoft.UI.Composition.ISpotLight3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_MaxAttenuationCutoff(IObjectReference _obj);
    internal static void set_MaxAttenuationCutoff(IObjectReference _obj, float value);
    internal static float get_MinAttenuationCutoff(IObjectReference _obj);
    internal static void set_MinAttenuationCutoff(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ISpotLightMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_ConstantAttenuation(IObjectReference _obj);
    internal static void set_ConstantAttenuation(IObjectReference _obj, float value);
    internal static Visual get_CoordinateSpace(IObjectReference _obj);
    internal static void set_CoordinateSpace(IObjectReference _obj, Visual value);
    internal static Vector3 get_Direction(IObjectReference _obj);
    internal static void set_Direction(IObjectReference _obj, Vector3 value);
    internal static float get_InnerConeAngle(IObjectReference _obj);
    internal static void set_InnerConeAngle(IObjectReference _obj, float value);
    internal static float get_InnerConeAngleInDegrees(IObjectReference _obj);
    internal static void set_InnerConeAngleInDegrees(IObjectReference _obj, float value);
    internal static Color get_InnerConeColor(IObjectReference _obj);
    internal static void set_InnerConeColor(IObjectReference _obj, Color value);
    internal static float get_LinearAttenuation(IObjectReference _obj);
    internal static void set_LinearAttenuation(IObjectReference _obj, float value);
    internal static Vector3 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector3 value);
    internal static float get_OuterConeAngle(IObjectReference _obj);
    internal static void set_OuterConeAngle(IObjectReference _obj, float value);
    internal static float get_OuterConeAngleInDegrees(IObjectReference _obj);
    internal static void set_OuterConeAngleInDegrees(IObjectReference _obj, float value);
    internal static Color get_OuterConeColor(IObjectReference _obj);
    internal static void set_OuterConeColor(IObjectReference _obj, Color value);
    internal static float get_QuadraticAttenuation(IObjectReference _obj);
    internal static void set_QuadraticAttenuation(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6F720AFD-D3D0-5E78-9C2E-83092F6EA45E")]
internal interface ABI.Microsoft.UI.Composition.ISpringScalarNaturalMotionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.ISpringScalarNaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_DampingRatio(IObjectReference _obj);
    internal static void set_DampingRatio(IObjectReference _obj, float value);
    internal static TimeSpan get_Period(IObjectReference _obj);
    internal static void set_Period(IObjectReference _obj, TimeSpan value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5B4580A4-2594-521E-B288-EAF2C2A16A66")]
internal interface ABI.Microsoft.UI.Composition.ISpringVector2NaturalMotionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.ISpringVector2NaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_DampingRatio(IObjectReference _obj);
    internal static void set_DampingRatio(IObjectReference _obj, float value);
    internal static TimeSpan get_Period(IObjectReference _obj);
    internal static void set_Period(IObjectReference _obj, TimeSpan value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("02D9E1C6-7434-5464-A1F6-D644CE1FC9A6")]
internal interface ABI.Microsoft.UI.Composition.ISpringVector3NaturalMotionAnimation {
}
internal static class ABI.Microsoft.UI.Composition.ISpringVector3NaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_DampingRatio(IObjectReference _obj);
    internal static void set_DampingRatio(IObjectReference _obj, float value);
    internal static TimeSpan get_Period(IObjectReference _obj);
    internal static void set_Period(IObjectReference _obj, TimeSpan value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7E964632-45E4-5761-806D-5B4022C14F26")]
internal interface ABI.Microsoft.UI.Composition.ISpriteVisual {
}
[GuidAttribute("3CB43662-9ECF-5128-850D-9EB8437774F0")]
internal interface ABI.Microsoft.UI.Composition.ISpriteVisual2 {
}
internal static class ABI.Microsoft.UI.Composition.ISpriteVisual2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionShadow get_Shadow(IObjectReference _obj);
    internal static void set_Shadow(IObjectReference _obj, CompositionShadow value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.ISpriteVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBrush get_Brush(IObjectReference _obj);
    internal static void set_Brush(IObjectReference _obj, CompositionBrush value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C7B1D4CF-C562-56B3-B4E6-B21326165F71")]
internal interface ABI.Microsoft.UI.Composition.IStepEasingFunction {
}
internal static class ABI.Microsoft.UI.Composition.IStepEasingFunctionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_FinalStep(IObjectReference _obj);
    internal static void set_FinalStep(IObjectReference _obj, int value);
    internal static int get_InitialStep(IObjectReference _obj);
    internal static void set_InitialStep(IObjectReference _obj, int value);
    internal static bool get_IsFinalStepSingleFrame(IObjectReference _obj);
    internal static void set_IsFinalStepSingleFrame(IObjectReference _obj, bool value);
    internal static bool get_IsInitialStepSingleFrame(IObjectReference _obj);
    internal static void set_IsInitialStepSingleFrame(IObjectReference _obj, bool value);
    internal static int get_StepCount(IObjectReference _obj);
    internal static void set_StepCount(IObjectReference _obj, int value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E9C5E3FD-43B7-526E-9DA0-4C3EA96DB27D")]
internal interface ABI.Microsoft.UI.Composition.IVector2KeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IVector2KeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Vector2 value);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Vector2 value, CompositionEasingFunction easingFunction);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E00E60CE-D1BE-5C24-885D-C1D0A749D109")]
internal interface ABI.Microsoft.UI.Composition.IVector2NaturalMotionAnimation {
}
[GuidAttribute("E39AEAD8-80F9-5F64-8644-E9E5646B796F")]
internal interface ABI.Microsoft.UI.Composition.IVector2NaturalMotionAnimationFactory {
}
internal static class ABI.Microsoft.UI.Composition.IVector2NaturalMotionAnimationFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IVector2NaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Nullable`1<Vector2> get_FinalValue(IObjectReference _obj);
    internal static void set_FinalValue(IObjectReference _obj, Nullable`1<Vector2> value);
    internal static Nullable`1<Vector2> get_InitialValue(IObjectReference _obj);
    internal static void set_InitialValue(IObjectReference _obj, Nullable`1<Vector2> value);
    internal static Vector2 get_InitialVelocity(IObjectReference _obj);
    internal static void set_InitialVelocity(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D7DA980E-2DDE-5DD1-A40C-D6868DD2449E")]
internal interface ABI.Microsoft.UI.Composition.IVector3KeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IVector3KeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Vector3 value);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Vector3 value, CompositionEasingFunction easingFunction);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("13FEEEF2-D2C0-5B72-AD67-983A19B9B783")]
internal interface ABI.Microsoft.UI.Composition.IVector3NaturalMotionAnimation {
}
[GuidAttribute("428241CB-BE9C-5C2A-939C-EC78AA60BB8A")]
internal interface ABI.Microsoft.UI.Composition.IVector3NaturalMotionAnimationFactory {
}
internal static class ABI.Microsoft.UI.Composition.IVector3NaturalMotionAnimationFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IVector3NaturalMotionAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Nullable`1<Vector3> get_FinalValue(IObjectReference _obj);
    internal static void set_FinalValue(IObjectReference _obj, Nullable`1<Vector3> value);
    internal static Nullable`1<Vector3> get_InitialValue(IObjectReference _obj);
    internal static void set_InitialValue(IObjectReference _obj, Nullable`1<Vector3> value);
    internal static Vector3 get_InitialVelocity(IObjectReference _obj);
    internal static void set_InitialVelocity(IObjectReference _obj, Vector3 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("16CEA3B9-C5E3-5F6F-B5C7-DA29A31CCFC7")]
internal interface ABI.Microsoft.UI.Composition.IVector4KeyFrameAnimation {
}
internal static class ABI.Microsoft.UI.Composition.IVector4KeyFrameAnimationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Vector4 value);
    internal static void InsertKeyFrame(IObjectReference _obj, float normalizedProgressKey, Vector4 value, CompositionEasingFunction easingFunction);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C0EEAB6C-C897-5AC6-A1C9-63ABD5055B9B")]
internal interface ABI.Microsoft.UI.Composition.IVisual {
}
[GuidAttribute("492A7995-0C5C-5993-A283-52E4DA3050EE")]
internal interface ABI.Microsoft.UI.Composition.IVisual2 {
}
internal static class ABI.Microsoft.UI.Composition.IVisual2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Visual get_ParentForTransform(IObjectReference _obj);
    internal static void set_ParentForTransform(IObjectReference _obj, Visual value);
    internal static Vector3 get_RelativeOffsetAdjustment(IObjectReference _obj);
    internal static void set_RelativeOffsetAdjustment(IObjectReference _obj, Vector3 value);
    internal static Vector2 get_RelativeSizeAdjustment(IObjectReference _obj);
    internal static void set_RelativeSizeAdjustment(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("972B70B0-950D-5656-A380-BD4A70775868")]
internal interface ABI.Microsoft.UI.Composition.IVisual3 {
}
internal static class ABI.Microsoft.UI.Composition.IVisual3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsHitTestVisible(IObjectReference _obj);
    internal static void set_IsHitTestVisible(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("27CB223F-C431-57AC-B61E-D6B7515D579F")]
internal interface ABI.Microsoft.UI.Composition.IVisual4 {
}
internal static class ABI.Microsoft.UI.Composition.IVisual4Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsPixelSnappingEnabled(IObjectReference _obj);
    internal static void set_IsPixelSnappingEnabled(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D002896D-67D8-5F69-AB70-581FA3BF370F")]
internal interface ABI.Microsoft.UI.Composition.IVisualCollection {
}
internal static class ABI.Microsoft.UI.Composition.IVisualCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InsertAbove(IObjectReference _obj, Visual newChild, Visual sibling);
    internal static void InsertAtBottom(IObjectReference _obj, Visual newChild);
    internal static void InsertAtTop(IObjectReference _obj, Visual newChild);
    internal static void InsertBelow(IObjectReference _obj, Visual newChild, Visual sibling);
    internal static void Remove(IObjectReference _obj, Visual child);
    internal static void RemoveAll(IObjectReference _obj);
    internal static int get_Count(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("2180F1F5-B5D8-4BF6-920A-12006E63EFEF")]
internal interface ABI.Microsoft.UI.Composition.IVisualElement {
    public static IntPtr AbiToProjectionVftablePtr;
    private static IVisualElement();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("BC950C8D-1DB0-53AA-9DEE-34271CD18CE6")]
internal interface ABI.Microsoft.UI.Composition.IVisualElement2 {
    public static IntPtr AbiToProjectionVftablePtr;
    private static IVisualElement2();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetVisualInternal_0(IntPtr thisPtr, IntPtr* result);
    private sealed virtual override Visual global::Microsoft.UI.Composition.IVisualElement2.GetVisualInternal();
}
public static class ABI.Microsoft.UI.Composition.IVisualElement2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static Visual GetVisualInternal(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
public static class ABI.Microsoft.UI.Composition.IVisualElementMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("77BB4668-83FA-5BB5-B78B-5E6FDC3D4038")]
internal interface ABI.Microsoft.UI.Composition.IVisualFactory {
}
internal static class ABI.Microsoft.UI.Composition.IVisualFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.IVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_AnchorPoint(IObjectReference _obj);
    internal static void set_AnchorPoint(IObjectReference _obj, Vector2 value);
    internal static CompositionBackfaceVisibility get_BackfaceVisibility(IObjectReference _obj);
    internal static void set_BackfaceVisibility(IObjectReference _obj, CompositionBackfaceVisibility value);
    internal static CompositionBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, CompositionBorderMode value);
    internal static Vector3 get_CenterPoint(IObjectReference _obj);
    internal static void set_CenterPoint(IObjectReference _obj, Vector3 value);
    internal static CompositionClip get_Clip(IObjectReference _obj);
    internal static void set_Clip(IObjectReference _obj, CompositionClip value);
    internal static CompositionCompositeMode get_CompositeMode(IObjectReference _obj);
    internal static void set_CompositeMode(IObjectReference _obj, CompositionCompositeMode value);
    internal static bool get_IsVisible(IObjectReference _obj);
    internal static void set_IsVisible(IObjectReference _obj, bool value);
    internal static Vector3 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector3 value);
    internal static float get_Opacity(IObjectReference _obj);
    internal static void set_Opacity(IObjectReference _obj, float value);
    internal static Quaternion get_Orientation(IObjectReference _obj);
    internal static void set_Orientation(IObjectReference _obj, Quaternion value);
    internal static ContainerVisual get_Parent(IObjectReference _obj);
    internal static float get_RotationAngle(IObjectReference _obj);
    internal static void set_RotationAngle(IObjectReference _obj, float value);
    internal static float get_RotationAngleInDegrees(IObjectReference _obj);
    internal static void set_RotationAngleInDegrees(IObjectReference _obj, float value);
    internal static Vector3 get_RotationAxis(IObjectReference _obj);
    internal static void set_RotationAxis(IObjectReference _obj, Vector3 value);
    internal static Vector3 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector3 value);
    internal static Vector2 get_Size(IObjectReference _obj);
    internal static void set_Size(IObjectReference _obj, Vector2 value);
    internal static Matrix4x4 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix4x4 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4A97216E-793E-54E3-96E8-F9DB790119CD")]
internal interface ABI.Microsoft.UI.Composition.IVisualUnorderedCollection {
}
internal static class ABI.Microsoft.UI.Composition.IVisualUnorderedCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Add(IObjectReference _obj, Visual newVisual);
    internal static void Remove(IObjectReference _obj, Visual visual);
    internal static void RemoveAll(IObjectReference _obj);
    internal static int get_Count(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.KeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(KeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(KeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(KeyFrameAnimation obj);
    public static MarshalerArray<KeyFrameAnimation> CreateMarshalerArray(KeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static KeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(KeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(KeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<KeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.KeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.LayerVisual : ValueType {
    public static IObjectReference CreateMarshaler(LayerVisual obj);
    public static ObjectReferenceValue CreateMarshaler2(LayerVisual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static LayerVisual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(LayerVisual obj);
    public static MarshalerArray<LayerVisual> CreateMarshalerArray(LayerVisual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static LayerVisual[] FromAbiArray(object box);
    public static void CopyAbiArray(LayerVisual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(LayerVisual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<LayerVisual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.LayerVisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.LinearEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(LinearEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(LinearEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static LinearEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(LinearEasingFunction obj);
    public static MarshalerArray<LinearEasingFunction> CreateMarshalerArray(LinearEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static LinearEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(LinearEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(LinearEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<LinearEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.LinearEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(NaturalMotionAnimation obj);
    public static MarshalerArray<NaturalMotionAnimation> CreateMarshalerArray(NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.PathKeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(PathKeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(PathKeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PathKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PathKeyFrameAnimation obj);
    public static MarshalerArray<PathKeyFrameAnimation> CreateMarshalerArray(PathKeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PathKeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(PathKeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PathKeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PathKeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.PathKeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.PointLight : ValueType {
    public static IObjectReference CreateMarshaler(PointLight obj);
    public static ObjectReferenceValue CreateMarshaler2(PointLight obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointLight FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointLight obj);
    public static MarshalerArray<PointLight> CreateMarshalerArray(PointLight[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointLight[] FromAbiArray(object box);
    public static void CopyAbiArray(PointLight[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointLight[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointLight> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.PointLightRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.PowerEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(PowerEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(PowerEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PowerEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PowerEasingFunction obj);
    public static MarshalerArray<PowerEasingFunction> CreateMarshalerArray(PowerEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PowerEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(PowerEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PowerEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PowerEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.PowerEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.QuaternionKeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(QuaternionKeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(QuaternionKeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static QuaternionKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(QuaternionKeyFrameAnimation obj);
    public static MarshalerArray<QuaternionKeyFrameAnimation> CreateMarshalerArray(QuaternionKeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static QuaternionKeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(QuaternionKeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(QuaternionKeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<QuaternionKeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.QuaternionKeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.RectangleClip : ValueType {
    public static IObjectReference CreateMarshaler(RectangleClip obj);
    public static ObjectReferenceValue CreateMarshaler2(RectangleClip obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RectangleClip FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RectangleClip obj);
    public static MarshalerArray<RectangleClip> CreateMarshalerArray(RectangleClip[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RectangleClip[] FromAbiArray(object box);
    public static void CopyAbiArray(RectangleClip[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RectangleClip[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RectangleClip> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.RectangleClipRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.RedirectVisual : ValueType {
    public static IObjectReference CreateMarshaler(RedirectVisual obj);
    public static ObjectReferenceValue CreateMarshaler2(RedirectVisual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RedirectVisual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RedirectVisual obj);
    public static MarshalerArray<RedirectVisual> CreateMarshalerArray(RedirectVisual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RedirectVisual[] FromAbiArray(object box);
    public static void CopyAbiArray(RedirectVisual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RedirectVisual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RedirectVisual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.RedirectVisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.RenderingDeviceReplacedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(RenderingDeviceReplacedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(RenderingDeviceReplacedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RenderingDeviceReplacedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RenderingDeviceReplacedEventArgs obj);
    public static MarshalerArray<RenderingDeviceReplacedEventArgs> CreateMarshalerArray(RenderingDeviceReplacedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RenderingDeviceReplacedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(RenderingDeviceReplacedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RenderingDeviceReplacedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RenderingDeviceReplacedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.RenderingDeviceReplacedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ScalarKeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(ScalarKeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(ScalarKeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ScalarKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ScalarKeyFrameAnimation obj);
    public static MarshalerArray<ScalarKeyFrameAnimation> CreateMarshalerArray(ScalarKeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ScalarKeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(ScalarKeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ScalarKeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ScalarKeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ScalarKeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ScalarNaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(ScalarNaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(ScalarNaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ScalarNaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ScalarNaturalMotionAnimation obj);
    public static MarshalerArray<ScalarNaturalMotionAnimation> CreateMarshalerArray(ScalarNaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ScalarNaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(ScalarNaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ScalarNaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ScalarNaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ScalarNaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("39FB48E0-216A-5608-9186-6BA9F98B5C67")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneBoundingBox {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneBoundingBoxMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector3 get_Center(IObjectReference _obj);
    internal static Vector3 get_Extents(IObjectReference _obj);
    internal static Vector3 get_Max(IObjectReference _obj);
    internal static Vector3 get_Min(IObjectReference _obj);
    internal static Vector3 get_Size(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F73361CB-8027-50E2-98EE-B2E3EA050A54")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneComponent {
}
[GuidAttribute("E4B21C71-87E2-5AEB-85BE-884E8302273E")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneComponentCollection {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneComponentCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("254088B0-BABF-503D-9A66-0D86AF5F7303")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneComponentFactory {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneComponentFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneComponentMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneComponentType get_ComponentType(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("042142A7-BF6B-57AD-BADC-F581F38EDB48")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMaterial {
}
[GuidAttribute("25747893-8748-5F60-969F-318FA0B735CA")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialFactory {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("446BDADE-719B-5DB4-B699-F226D0062A2E")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialInput {
}
[GuidAttribute("B4DABD1D-58C0-5710-928A-BC49B0735694")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialInputFactory {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialInputFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialInputMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5CF846AA-F53F-555E-A3AD-F5BC52CA32FB")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMesh {
}
[GuidAttribute("2360C457-EDAE-5660-BEDC-89096582ED70")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMap {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMapMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMeshMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void FillMeshAttribute(IObjectReference _obj, SceneAttributeSemantic semantic, DirectXPixelFormat format, MemoryBuffer memory);
    internal static SceneBoundingBox get_Bounds(IObjectReference _obj);
    internal static DirectXPrimitiveTopology get_PrimitiveTopology(IObjectReference _obj);
    internal static void set_PrimitiveTopology(IObjectReference _obj, DirectXPrimitiveTopology value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D2BE85A0-70A8-5C62-84D8-8BA55E4C64A9")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponent {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneMaterial get_Material(IObjectReference _obj);
    internal static void set_Material(IObjectReference _obj, SceneMaterial value);
    internal static SceneMesh get_Mesh(IObjectReference _obj);
    internal static void set_Mesh(IObjectReference _obj, SceneMesh value);
    internal static SceneMeshMaterialAttributeMap get_UVMappings(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C54F8C5A-A104-5CFA-89DC-13EDAA6E3D88")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentStatics {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneMeshRendererComponent Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("29C52125-964B-5315-80F9-3893713290F5")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMeshStatics {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMeshStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneMesh Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0A4AFCF4-7BAE-5702-9B85-8BC849F39987")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterial {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector4 get_BaseColorFactor(IObjectReference _obj);
    internal static void set_BaseColorFactor(IObjectReference _obj, Vector4 value);
    internal static SceneMaterialInput get_BaseColorInput(IObjectReference _obj);
    internal static void set_BaseColorInput(IObjectReference _obj, SceneMaterialInput value);
    internal static float get_MetallicFactor(IObjectReference _obj);
    internal static void set_MetallicFactor(IObjectReference _obj, float value);
    internal static SceneMaterialInput get_MetallicRoughnessInput(IObjectReference _obj);
    internal static void set_MetallicRoughnessInput(IObjectReference _obj, SceneMaterialInput value);
    internal static float get_RoughnessFactor(IObjectReference _obj);
    internal static void set_RoughnessFactor(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DFFD2043-AB3C-57A0-8E13-6F09725E970F")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialStatics {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneMetallicRoughnessMaterial Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3F05555F-0F67-576E-9D8A-93C1F250C29F")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneModelTransform {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneModelTransformMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Quaternion get_Orientation(IObjectReference _obj);
    internal static void set_Orientation(IObjectReference _obj, Quaternion value);
    internal static float get_RotationAngle(IObjectReference _obj);
    internal static void set_RotationAngle(IObjectReference _obj, float value);
    internal static float get_RotationAngleInDegrees(IObjectReference _obj);
    internal static void set_RotationAngleInDegrees(IObjectReference _obj, float value);
    internal static Vector3 get_RotationAxis(IObjectReference _obj);
    internal static void set_RotationAxis(IObjectReference _obj, Vector3 value);
    internal static Vector3 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector3 value);
    internal static Vector3 get_Translation(IObjectReference _obj);
    internal static void set_Translation(IObjectReference _obj, Vector3 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A1BCE140-79C2-59E6-9B68-63B1BAB0E2A6")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneNode {
}
[GuidAttribute("F219B68E-5666-5C6C-AA4E-08DB07FD6BCF")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneNodeCollection {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneNodeCollectionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneNodeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneComponent FindFirstComponentOfType(IObjectReference _obj, SceneComponentType value);
    internal static SceneNodeCollection get_Children(IObjectReference _obj);
    internal static SceneComponentCollection get_Components(IObjectReference _obj);
    internal static SceneNode get_Parent(IObjectReference _obj);
    internal static SceneModelTransform get_Transform(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("801C4394-4198-5DA1-AC39-6E8A44B5CE57")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneNodeStatics {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneNodeStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneNode Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4333E514-4FC7-521E-8BCA-11C51FBCAF1E")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneObject {
}
[GuidAttribute("EE797F7D-77DB-5C4C-B6F5-C1930FAD85C5")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneObjectFactory {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneObjectFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneObjectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("295D0725-56FE-5954-8057-3F4CA7515B36")]
internal interface ABI.Microsoft.UI.Composition.Scenes.IScenePbrMaterial {
}
[GuidAttribute("9E34D32A-E30C-51F5-84AC-6467950605CA")]
internal interface ABI.Microsoft.UI.Composition.Scenes.IScenePbrMaterialFactory {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.IScenePbrMaterialFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.IScenePbrMaterialMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_AlphaCutoff(IObjectReference _obj);
    internal static void set_AlphaCutoff(IObjectReference _obj, float value);
    internal static SceneAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static void set_AlphaMode(IObjectReference _obj, SceneAlphaMode value);
    internal static Vector3 get_EmissiveFactor(IObjectReference _obj);
    internal static void set_EmissiveFactor(IObjectReference _obj, Vector3 value);
    internal static SceneMaterialInput get_EmissiveInput(IObjectReference _obj);
    internal static void set_EmissiveInput(IObjectReference _obj, SceneMaterialInput value);
    internal static bool get_IsDoubleSided(IObjectReference _obj);
    internal static void set_IsDoubleSided(IObjectReference _obj, bool value);
    internal static SceneMaterialInput get_NormalInput(IObjectReference _obj);
    internal static void set_NormalInput(IObjectReference _obj, SceneMaterialInput value);
    internal static float get_NormalScale(IObjectReference _obj);
    internal static void set_NormalScale(IObjectReference _obj, float value);
    internal static SceneMaterialInput get_OcclusionInput(IObjectReference _obj);
    internal static void set_OcclusionInput(IObjectReference _obj, SceneMaterialInput value);
    internal static float get_OcclusionStrength(IObjectReference _obj);
    internal static void set_OcclusionStrength(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6BAB8030-89C1-5DBC-A48E-1805DDF9CDD1")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneRendererComponent {
}
[GuidAttribute("3CCAC1D6-6A0F-582E-BB1A-10EBC1E405CA")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneRendererComponentFactory {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneRendererComponentFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneRendererComponentMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B9854B4F-286C-50CD-A734-491A251D5FD3")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInput {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionBitmapInterpolationMode get_BitmapInterpolationMode(IObjectReference _obj);
    internal static void set_BitmapInterpolationMode(IObjectReference _obj, CompositionBitmapInterpolationMode value);
    internal static ICompositionSurface get_Surface(IObjectReference _obj);
    internal static void set_Surface(IObjectReference _obj, ICompositionSurface value);
    internal static SceneWrappingMode get_WrappingUMode(IObjectReference _obj);
    internal static void set_WrappingUMode(IObjectReference _obj, SceneWrappingMode value);
    internal static SceneWrappingMode get_WrappingVMode(IObjectReference _obj);
    internal static void set_WrappingVMode(IObjectReference _obj, SceneWrappingMode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8E1BA937-AD60-51BC-8256-CA62C4B2AE92")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputStatics {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneSurfaceMaterialInput Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0144D7AD-6A7D-59CB-A0F9-74A04E85352C")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneVisual {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneVisualMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneNode get_Root(IObjectReference _obj);
    internal static void set_Root(IObjectReference _obj, SceneNode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7B8DA6D1-5BD8-5095-9264-E5572653EA07")]
internal interface ABI.Microsoft.UI.Composition.Scenes.ISceneVisualStatics {
}
internal static class ABI.Microsoft.UI.Composition.Scenes.ISceneVisualStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static SceneVisual Create(IObjectReference _obj, Compositor compositor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneBoundingBox : ValueType {
    public static IObjectReference CreateMarshaler(SceneBoundingBox obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneBoundingBox obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneBoundingBox FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneBoundingBox obj);
    public static MarshalerArray<SceneBoundingBox> CreateMarshalerArray(SceneBoundingBox[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneBoundingBox[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneBoundingBox[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneBoundingBox[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneBoundingBox> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneBoundingBoxRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneComponent : ValueType {
    public static IObjectReference CreateMarshaler(SceneComponent obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneComponent obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneComponent FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneComponent obj);
    public static MarshalerArray<SceneComponent> CreateMarshalerArray(SceneComponent[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneComponent[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneComponent[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneComponent[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneComponent> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneComponentCollection : ValueType {
    public static IObjectReference CreateMarshaler(SceneComponentCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneComponentCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneComponentCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneComponentCollection obj);
    public static MarshalerArray<SceneComponentCollection> CreateMarshalerArray(SceneComponentCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneComponentCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneComponentCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneComponentCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneComponentCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneComponentCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneComponentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneMaterial : ValueType {
    public static IObjectReference CreateMarshaler(SceneMaterial obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneMaterial obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneMaterial FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneMaterial obj);
    public static MarshalerArray<SceneMaterial> CreateMarshalerArray(SceneMaterial[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneMaterial[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneMaterial[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneMaterial[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneMaterial> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneMaterialInput : ValueType {
    public static IObjectReference CreateMarshaler(SceneMaterialInput obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneMaterialInput obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneMaterialInput FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneMaterialInput obj);
    public static MarshalerArray<SceneMaterialInput> CreateMarshalerArray(SceneMaterialInput[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneMaterialInput[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneMaterialInput[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneMaterialInput[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneMaterialInput> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneMaterialInputRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneMaterialRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneMesh : ValueType {
    public static IObjectReference CreateMarshaler(SceneMesh obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneMesh obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneMesh FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneMesh obj);
    public static MarshalerArray<SceneMesh> CreateMarshalerArray(SceneMesh[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneMesh[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneMesh[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneMesh[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneMesh> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMap : ValueType {
    public static IObjectReference CreateMarshaler(SceneMeshMaterialAttributeMap obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneMeshMaterialAttributeMap obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneMeshMaterialAttributeMap FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneMeshMaterialAttributeMap obj);
    public static MarshalerArray<SceneMeshMaterialAttributeMap> CreateMarshalerArray(SceneMeshMaterialAttributeMap[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneMeshMaterialAttributeMap[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneMeshMaterialAttributeMap[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneMeshMaterialAttributeMap[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneMeshMaterialAttributeMap> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMapRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneMeshRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent : ValueType {
    public static IObjectReference CreateMarshaler(SceneMeshRendererComponent obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneMeshRendererComponent obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneMeshRendererComponent FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneMeshRendererComponent obj);
    public static MarshalerArray<SceneMeshRendererComponent> CreateMarshalerArray(SceneMeshRendererComponent[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneMeshRendererComponent[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneMeshRendererComponent[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneMeshRendererComponent[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneMeshRendererComponent> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneMeshRendererComponentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial : ValueType {
    public static IObjectReference CreateMarshaler(SceneMetallicRoughnessMaterial obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneMetallicRoughnessMaterial obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneMetallicRoughnessMaterial FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneMetallicRoughnessMaterial obj);
    public static MarshalerArray<SceneMetallicRoughnessMaterial> CreateMarshalerArray(SceneMetallicRoughnessMaterial[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneMetallicRoughnessMaterial[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneMetallicRoughnessMaterial[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneMetallicRoughnessMaterial[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneMetallicRoughnessMaterial> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterialRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneModelTransform : ValueType {
    public static IObjectReference CreateMarshaler(SceneModelTransform obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneModelTransform obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneModelTransform FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneModelTransform obj);
    public static MarshalerArray<SceneModelTransform> CreateMarshalerArray(SceneModelTransform[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneModelTransform[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneModelTransform[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneModelTransform[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneModelTransform> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneModelTransformRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneNode : ValueType {
    public static IObjectReference CreateMarshaler(SceneNode obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneNode obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneNode FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneNode obj);
    public static MarshalerArray<SceneNode> CreateMarshalerArray(SceneNode[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneNode[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneNode[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneNode[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneNode> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneNodeCollection : ValueType {
    public static IObjectReference CreateMarshaler(SceneNodeCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneNodeCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneNodeCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneNodeCollection obj);
    public static MarshalerArray<SceneNodeCollection> CreateMarshalerArray(SceneNodeCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneNodeCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneNodeCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneNodeCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneNodeCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneNodeCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneNodeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneObject : ValueType {
    public static IObjectReference CreateMarshaler(SceneObject obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneObject obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneObject FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneObject obj);
    public static MarshalerArray<SceneObject> CreateMarshalerArray(SceneObject[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneObject[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneObject[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneObject[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneObject> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneObjectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.ScenePbrMaterial : ValueType {
    public static IObjectReference CreateMarshaler(ScenePbrMaterial obj);
    public static ObjectReferenceValue CreateMarshaler2(ScenePbrMaterial obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ScenePbrMaterial FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ScenePbrMaterial obj);
    public static MarshalerArray<ScenePbrMaterial> CreateMarshalerArray(ScenePbrMaterial[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ScenePbrMaterial[] FromAbiArray(object box);
    public static void CopyAbiArray(ScenePbrMaterial[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ScenePbrMaterial[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ScenePbrMaterial> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.ScenePbrMaterialRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneRendererComponent : ValueType {
    public static IObjectReference CreateMarshaler(SceneRendererComponent obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneRendererComponent obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneRendererComponent FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneRendererComponent obj);
    public static MarshalerArray<SceneRendererComponent> CreateMarshalerArray(SceneRendererComponent[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneRendererComponent[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneRendererComponent[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneRendererComponent[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneRendererComponent> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneRendererComponentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput : ValueType {
    public static IObjectReference CreateMarshaler(SceneSurfaceMaterialInput obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneSurfaceMaterialInput obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneSurfaceMaterialInput FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneSurfaceMaterialInput obj);
    public static MarshalerArray<SceneSurfaceMaterialInput> CreateMarshalerArray(SceneSurfaceMaterialInput[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneSurfaceMaterialInput[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneSurfaceMaterialInput[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneSurfaceMaterialInput[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneSurfaceMaterialInput> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInputRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Scenes.SceneVisual : ValueType {
    public static IObjectReference CreateMarshaler(SceneVisual obj);
    public static ObjectReferenceValue CreateMarshaler2(SceneVisual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SceneVisual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SceneVisual obj);
    public static MarshalerArray<SceneVisual> CreateMarshalerArray(SceneVisual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SceneVisual[] FromAbiArray(object box);
    public static void CopyAbiArray(SceneVisual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SceneVisual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SceneVisual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Scenes.SceneVisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.ShapeVisual : ValueType {
    public static IObjectReference CreateMarshaler(ShapeVisual obj);
    public static ObjectReferenceValue CreateMarshaler2(ShapeVisual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ShapeVisual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ShapeVisual obj);
    public static MarshalerArray<ShapeVisual> CreateMarshalerArray(ShapeVisual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ShapeVisual[] FromAbiArray(object box);
    public static void CopyAbiArray(ShapeVisual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ShapeVisual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ShapeVisual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.ShapeVisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SineEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(SineEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(SineEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SineEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SineEasingFunction obj);
    public static MarshalerArray<SineEasingFunction> CreateMarshalerArray(SineEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SineEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(SineEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SineEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SineEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SineEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SpotLight : ValueType {
    public static IObjectReference CreateMarshaler(SpotLight obj);
    public static ObjectReferenceValue CreateMarshaler2(SpotLight obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpotLight FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpotLight obj);
    public static MarshalerArray<SpotLight> CreateMarshalerArray(SpotLight[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpotLight[] FromAbiArray(object box);
    public static void CopyAbiArray(SpotLight[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpotLight[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpotLight> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SpotLightRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SpringScalarNaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(SpringScalarNaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(SpringScalarNaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpringScalarNaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpringScalarNaturalMotionAnimation obj);
    public static MarshalerArray<SpringScalarNaturalMotionAnimation> CreateMarshalerArray(SpringScalarNaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpringScalarNaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(SpringScalarNaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpringScalarNaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpringScalarNaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SpringScalarNaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SpringVector2NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(SpringVector2NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(SpringVector2NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpringVector2NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpringVector2NaturalMotionAnimation obj);
    public static MarshalerArray<SpringVector2NaturalMotionAnimation> CreateMarshalerArray(SpringVector2NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpringVector2NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(SpringVector2NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpringVector2NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpringVector2NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SpringVector2NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SpringVector3NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(SpringVector3NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(SpringVector3NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpringVector3NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpringVector3NaturalMotionAnimation obj);
    public static MarshalerArray<SpringVector3NaturalMotionAnimation> CreateMarshalerArray(SpringVector3NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpringVector3NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(SpringVector3NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpringVector3NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpringVector3NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SpringVector3NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SpriteVisual : ValueType {
    public static IObjectReference CreateMarshaler(SpriteVisual obj);
    public static ObjectReferenceValue CreateMarshaler2(SpriteVisual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpriteVisual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpriteVisual obj);
    public static MarshalerArray<SpriteVisual> CreateMarshalerArray(SpriteVisual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpriteVisual[] FromAbiArray(object box);
    public static void CopyAbiArray(SpriteVisual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpriteVisual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpriteVisual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SpriteVisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.StepEasingFunction : ValueType {
    public static IObjectReference CreateMarshaler(StepEasingFunction obj);
    public static ObjectReferenceValue CreateMarshaler2(StepEasingFunction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static StepEasingFunction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(StepEasingFunction obj);
    public static MarshalerArray<StepEasingFunction> CreateMarshalerArray(StepEasingFunction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static StepEasingFunction[] FromAbiArray(object box);
    public static void CopyAbiArray(StepEasingFunction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(StepEasingFunction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<StepEasingFunction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.StepEasingFunctionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController : ValueType {
    public static IObjectReference CreateMarshaler(DesktopAcrylicController obj);
    public static ObjectReferenceValue CreateMarshaler2(DesktopAcrylicController obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DesktopAcrylicController FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DesktopAcrylicController obj);
    public static MarshalerArray<DesktopAcrylicController> CreateMarshalerArray(DesktopAcrylicController[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DesktopAcrylicController[] FromAbiArray(object box);
    public static void CopyAbiArray(DesktopAcrylicController[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DesktopAcrylicController[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DesktopAcrylicController> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicControllerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("7C20A6AF-8EB3-5F08-BDFC-6D35E35DFE45")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController {
}
[GuidAttribute("88E0A368-DFC7-5971-A50B-40DF5AA5F5C2")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController2 {
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ResetProperties(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("30D917E6-02D3-59CA-B440-BF9D2E7CC140")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController3 {
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DesktopAcrylicKind get_Kind(IObjectReference _obj);
    internal static void set_Kind(IObjectReference _obj, DesktopAcrylicKind value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicControllerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_FallbackColor(IObjectReference _obj);
    internal static void set_FallbackColor(IObjectReference _obj, Color value);
    internal static float get_LuminosityOpacity(IObjectReference _obj);
    internal static void set_LuminosityOpacity(IObjectReference _obj, float value);
    internal static Color get_TintColor(IObjectReference _obj);
    internal static void set_TintColor(IObjectReference _obj, Color value);
    internal static float get_TintOpacity(IObjectReference _obj);
    internal static void set_TintOpacity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A9E8F790-79EF-5416-9B67-6BCFE867C8B7")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicControllerStatics {
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicControllerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2DE996A9-0A2A-5889-A89C-1F84060A8CAB")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaController {
}
[GuidAttribute("F1ED4A52-D9CA-506E-9586-CAAEFD3AA971")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaController2 {
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaController2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ResetProperties(IObjectReference _obj);
    internal static MicaKind get_Kind(IObjectReference _obj);
    internal static void set_Kind(IObjectReference _obj, MicaKind value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaControllerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_FallbackColor(IObjectReference _obj);
    internal static void set_FallbackColor(IObjectReference _obj, Color value);
    internal static float get_LuminosityOpacity(IObjectReference _obj);
    internal static void set_LuminosityOpacity(IObjectReference _obj, float value);
    internal static Color get_TintColor(IObjectReference _obj);
    internal static void set_TintColor(IObjectReference _obj, Color value);
    internal static float get_TintOpacity(IObjectReference _obj);
    internal static void set_TintOpacity(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7D85D834-D514-5250-B7C4-0B7850D1EFDC")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaControllerStatics {
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaControllerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EBCCE1B9-0E0C-5431-AB0E-00F3F0669962")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropConfiguration {
}
internal static class ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropConfigurationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Nullable`1<Color> get_HighContrastBackgroundColor(IObjectReference _obj);
    internal static void set_HighContrastBackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static bool get_IsHighContrast(IObjectReference _obj);
    internal static void set_IsHighContrast(IObjectReference _obj, bool value);
    internal static bool get_IsInputActive(IObjectReference _obj);
    internal static void set_IsInputActive(IObjectReference _obj, bool value);
    internal static SystemBackdropTheme get_Theme(IObjectReference _obj);
    internal static void set_Theme(IObjectReference _obj, SystemBackdropTheme value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("5632D76C-0B74-5B52-AA33-80262068AEB2")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ISystemBackdropController();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_SetTarget_0(IntPtr thisPtr, WindowId windowId, IntPtr desktopWindowTarget, Byte* result);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_SetTarget_1(IntPtr thisPtr, IntPtr coreWindow, IntPtr compositionTarget, Byte* result);
    private sealed virtual override bool global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController.SetTarget(WindowId windowId, CompositionTarget desktopWindowTarget);
    private sealed virtual override bool global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController.SetTarget(CoreWindow coreWindow, CompositionTarget compositionTarget);
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static bool SetTarget(IObjectReference _obj, WindowId windowId, CompositionTarget desktopWindowTarget);
    public static bool SetTarget(IObjectReference _obj, CoreWindow coreWindow, CompositionTarget compositionTarget);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("9C56FE7C-98EB-5F89-AD97-DAD57FC30C8C")]
internal interface ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _StateChanged_tokenTables;
    private static ConditionalWeakTable`2<ISystemBackdropControllerWithTargets, EventRegistrationTokenTable`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> _StateChanged_TokenTables { get; }
    private SystemBackdropState global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.State { get; }
    private static ISystemBackdropControllerWithTargets();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_AddSystemBackdropTarget_1(IntPtr thisPtr, IntPtr systemBackdropTarget, Byte* result);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_RemoveAllSystemBackdropTargets_2(IntPtr thisPtr);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_RemoveSystemBackdropTarget_3(IntPtr thisPtr, IntPtr systemBackdropTarget, Byte* result);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_SetSystemBackdropConfiguration_4(IntPtr thisPtr, IntPtr configuration);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_State_0(IntPtr thisPtr, SystemBackdropState* value);
    private static ConditionalWeakTable`2<ISystemBackdropControllerWithTargets, EventRegistrationTokenTable`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> MakeStateChangedTable();
    private static ConditionalWeakTable`2<ISystemBackdropControllerWithTargets, EventRegistrationTokenTable`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> get__StateChanged_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_StateChanged_5(IntPtr thisPtr, IntPtr handler, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_StateChanged_6(IntPtr thisPtr, EventRegistrationToken token);
    private sealed virtual override bool global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.AddSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    private sealed virtual override void global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.RemoveAllSystemBackdropTargets();
    private sealed virtual override bool global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.RemoveSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    private sealed virtual override void global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.SetSystemBackdropConfiguration(SystemBackdropConfiguration configuration);
    private sealed virtual override SystemBackdropState global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.get_State();
    private sealed virtual override void global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.add_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    private sealed virtual override void global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets.remove_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    private sealed virtual override bool global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController.SetTarget(WindowId windowId, CompositionTarget desktopWindowTarget);
    private sealed virtual override bool global::Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController.SetTarget(CoreWindow coreWindow, CompositionTarget compositionTarget);
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargetsMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _StateChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> _StateChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static bool AddSystemBackdropTarget(IObjectReference _obj, ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public static void RemoveAllSystemBackdropTargets(IObjectReference _obj);
    public static bool RemoveSystemBackdropTarget(IObjectReference _obj, ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public static void SetSystemBackdropConfiguration(IObjectReference _obj, SystemBackdropConfiguration configuration);
    public static SystemBackdropState get_State(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> MakeStateChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> get__StateChanged();
    public static ValueTuple`2<Action`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>, Action`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>>> Get_StateChanged(IObjectReference _obj, object _thisObj);
    public static EventSource`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>> Get_StateChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SystemBackdrops.MicaController : ValueType {
    public static IObjectReference CreateMarshaler(MicaController obj);
    public static ObjectReferenceValue CreateMarshaler2(MicaController obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static MicaController FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(MicaController obj);
    public static MarshalerArray<MicaController> CreateMarshalerArray(MicaController[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static MicaController[] FromAbiArray(object box);
    public static void CopyAbiArray(MicaController[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(MicaController[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<MicaController> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SystemBackdrops.MicaControllerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration : ValueType {
    public static IObjectReference CreateMarshaler(SystemBackdropConfiguration obj);
    public static ObjectReferenceValue CreateMarshaler2(SystemBackdropConfiguration obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SystemBackdropConfiguration FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SystemBackdropConfiguration obj);
    public static MarshalerArray<SystemBackdropConfiguration> CreateMarshalerArray(SystemBackdropConfiguration[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SystemBackdropConfiguration[] FromAbiArray(object box);
    public static void CopyAbiArray(SystemBackdropConfiguration[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SystemBackdropConfiguration[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SystemBackdropConfiguration> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfigurationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Vector2KeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(Vector2KeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(Vector2KeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Vector2KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Vector2KeyFrameAnimation obj);
    public static MarshalerArray<Vector2KeyFrameAnimation> CreateMarshalerArray(Vector2KeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Vector2KeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(Vector2KeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Vector2KeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Vector2KeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Vector2KeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Vector2NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(Vector2NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(Vector2NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Vector2NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Vector2NaturalMotionAnimation obj);
    public static MarshalerArray<Vector2NaturalMotionAnimation> CreateMarshalerArray(Vector2NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Vector2NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(Vector2NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Vector2NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Vector2NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Vector2NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Vector3KeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(Vector3KeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(Vector3KeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Vector3KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Vector3KeyFrameAnimation obj);
    public static MarshalerArray<Vector3KeyFrameAnimation> CreateMarshalerArray(Vector3KeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Vector3KeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(Vector3KeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Vector3KeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Vector3KeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Vector3KeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Vector3NaturalMotionAnimation : ValueType {
    public static IObjectReference CreateMarshaler(Vector3NaturalMotionAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(Vector3NaturalMotionAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Vector3NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Vector3NaturalMotionAnimation obj);
    public static MarshalerArray<Vector3NaturalMotionAnimation> CreateMarshalerArray(Vector3NaturalMotionAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Vector3NaturalMotionAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(Vector3NaturalMotionAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Vector3NaturalMotionAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Vector3NaturalMotionAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Vector3NaturalMotionAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Vector4KeyFrameAnimation : ValueType {
    public static IObjectReference CreateMarshaler(Vector4KeyFrameAnimation obj);
    public static ObjectReferenceValue CreateMarshaler2(Vector4KeyFrameAnimation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Vector4KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Vector4KeyFrameAnimation obj);
    public static MarshalerArray<Vector4KeyFrameAnimation> CreateMarshalerArray(Vector4KeyFrameAnimation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Vector4KeyFrameAnimation[] FromAbiArray(object box);
    public static void CopyAbiArray(Vector4KeyFrameAnimation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Vector4KeyFrameAnimation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Vector4KeyFrameAnimation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.Vector4KeyFrameAnimationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.Visual : ValueType {
    public static IObjectReference CreateMarshaler(Visual obj);
    public static ObjectReferenceValue CreateMarshaler2(Visual obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Visual FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Visual obj);
    public static MarshalerArray<Visual> CreateMarshalerArray(Visual[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Visual[] FromAbiArray(object box);
    public static void CopyAbiArray(Visual[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Visual[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Visual> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.VisualCollection : ValueType {
    public static IObjectReference CreateMarshaler(VisualCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(VisualCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static VisualCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(VisualCollection obj);
    public static MarshalerArray<VisualCollection> CreateMarshalerArray(VisualCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static VisualCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(VisualCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(VisualCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<VisualCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.VisualCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.VisualRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Composition.VisualUnorderedCollection : ValueType {
    public static IObjectReference CreateMarshaler(VisualUnorderedCollection obj);
    public static ObjectReferenceValue CreateMarshaler2(VisualUnorderedCollection obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static VisualUnorderedCollection FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(VisualUnorderedCollection obj);
    public static MarshalerArray<VisualUnorderedCollection> CreateMarshalerArray(VisualUnorderedCollection[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static VisualUnorderedCollection[] FromAbiArray(object box);
    public static void CopyAbiArray(VisualUnorderedCollection[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(VisualUnorderedCollection[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<VisualUnorderedCollection> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Composition.VisualUnorderedCollectionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentCoordinateConverter : ValueType {
    public static IObjectReference CreateMarshaler(ContentCoordinateConverter obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentCoordinateConverter obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentCoordinateConverter FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentCoordinateConverter obj);
    public static MarshalerArray<ContentCoordinateConverter> CreateMarshalerArray(ContentCoordinateConverter[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentCoordinateConverter[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentCoordinateConverter[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentCoordinateConverter[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentCoordinateConverter> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentCoordinateConverterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentDeferral : ValueType {
    public static IObjectReference CreateMarshaler(ContentDeferral obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentDeferral obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentDeferral FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentDeferral obj);
    public static MarshalerArray<ContentDeferral> CreateMarshalerArray(ContentDeferral[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentDeferral[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentDeferral[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentDeferral[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentDeferral> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentDeferralRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ContentEnvironmentSettingChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentEnvironmentSettingChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentEnvironmentSettingChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentEnvironmentSettingChangedEventArgs obj);
    public static MarshalerArray<ContentEnvironmentSettingChangedEventArgs> CreateMarshalerArray(ContentEnvironmentSettingChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentEnvironmentSettingChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentEnvironmentSettingChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentEnvironmentSettingChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentEnvironmentSettingChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ContentEnvironmentStateChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentEnvironmentStateChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentEnvironmentStateChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentEnvironmentStateChangedEventArgs obj);
    public static MarshalerArray<ContentEnvironmentStateChangedEventArgs> CreateMarshalerArray(ContentEnvironmentStateChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentEnvironmentStateChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentEnvironmentStateChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentEnvironmentStateChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentEnvironmentStateChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentIsland : ValueType {
    public static IObjectReference CreateMarshaler(ContentIsland obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentIsland obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentIsland FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentIsland obj);
    public static MarshalerArray<ContentIsland> CreateMarshalerArray(ContentIsland[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentIsland[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentIsland[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentIsland[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentIsland> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ContentIslandAutomationProviderRequestedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentIslandAutomationProviderRequestedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentIslandAutomationProviderRequestedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentIslandAutomationProviderRequestedEventArgs obj);
    public static MarshalerArray<ContentIslandAutomationProviderRequestedEventArgs> CreateMarshalerArray(ContentIslandAutomationProviderRequestedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentIslandAutomationProviderRequestedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentIslandAutomationProviderRequestedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentIslandAutomationProviderRequestedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentIslandAutomationProviderRequestedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentIslandEnvironment : ValueType {
    public static IObjectReference CreateMarshaler(ContentIslandEnvironment obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentIslandEnvironment obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentIslandEnvironment FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentIslandEnvironment obj);
    public static MarshalerArray<ContentIslandEnvironment> CreateMarshalerArray(ContentIslandEnvironment[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentIslandEnvironment[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentIslandEnvironment[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentIslandEnvironment[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentIslandEnvironment> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentIslandEnvironmentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentIslandRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentIslandStateChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ContentIslandStateChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentIslandStateChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentIslandStateChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentIslandStateChangedEventArgs obj);
    public static MarshalerArray<ContentIslandStateChangedEventArgs> CreateMarshalerArray(ContentIslandStateChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentIslandStateChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentIslandStateChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentIslandStateChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentIslandStateChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentIslandStateChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentSite : ValueType {
    public static IObjectReference CreateMarshaler(ContentSite obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentSite obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentSite FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentSite obj);
    public static MarshalerArray<ContentSite> CreateMarshalerArray(ContentSite[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentSite[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentSite[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentSite[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentSite> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentSiteEnvironment : ValueType {
    public static IObjectReference CreateMarshaler(ContentSiteEnvironment obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentSiteEnvironment obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentSiteEnvironment FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentSiteEnvironment obj);
    public static MarshalerArray<ContentSiteEnvironment> CreateMarshalerArray(ContentSiteEnvironment[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentSiteEnvironment[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentSiteEnvironment[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentSiteEnvironment[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentSiteEnvironment> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentSiteEnvironmentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentSiteEnvironmentView : ValueType {
    public static IObjectReference CreateMarshaler(ContentSiteEnvironmentView obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentSiteEnvironmentView obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentSiteEnvironmentView FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentSiteEnvironmentView obj);
    public static MarshalerArray<ContentSiteEnvironmentView> CreateMarshalerArray(ContentSiteEnvironmentView[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentSiteEnvironmentView[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentSiteEnvironmentView[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentSiteEnvironmentView[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentSiteEnvironmentView> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentSiteEnvironmentViewRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentSiteRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentSiteRequestedStateChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ContentSiteRequestedStateChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentSiteRequestedStateChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentSiteRequestedStateChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentSiteRequestedStateChangedEventArgs obj);
    public static MarshalerArray<ContentSiteRequestedStateChangedEventArgs> CreateMarshalerArray(ContentSiteRequestedStateChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentSiteRequestedStateChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentSiteRequestedStateChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentSiteRequestedStateChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentSiteRequestedStateChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentSiteRequestedStateChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.ContentSiteView : ValueType {
    public static IObjectReference CreateMarshaler(ContentSiteView obj);
    public static ObjectReferenceValue CreateMarshaler2(ContentSiteView obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContentSiteView FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContentSiteView obj);
    public static MarshalerArray<ContentSiteView> CreateMarshalerArray(ContentSiteView[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContentSiteView[] FromAbiArray(object box);
    public static void CopyAbiArray(ContentSiteView[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContentSiteView[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContentSiteView> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.ContentSiteViewRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.DesktopChildSiteBridge : ValueType {
    public static IObjectReference CreateMarshaler(DesktopChildSiteBridge obj);
    public static ObjectReferenceValue CreateMarshaler2(DesktopChildSiteBridge obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DesktopChildSiteBridge FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DesktopChildSiteBridge obj);
    public static MarshalerArray<DesktopChildSiteBridge> CreateMarshalerArray(DesktopChildSiteBridge[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DesktopChildSiteBridge[] FromAbiArray(object box);
    public static void CopyAbiArray(DesktopChildSiteBridge[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DesktopChildSiteBridge[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DesktopChildSiteBridge> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.DesktopChildSiteBridgeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Content.DesktopSiteBridge : ValueType {
    public static IObjectReference CreateMarshaler(DesktopSiteBridge obj);
    public static ObjectReferenceValue CreateMarshaler2(DesktopSiteBridge obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DesktopSiteBridge FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DesktopSiteBridge obj);
    public static MarshalerArray<DesktopSiteBridge> CreateMarshalerArray(DesktopSiteBridge[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DesktopSiteBridge[] FromAbiArray(object box);
    public static void CopyAbiArray(DesktopSiteBridge[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DesktopSiteBridge[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DesktopSiteBridge> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Content.DesktopSiteBridgeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("10A11230-5EB4-5840-A346-570F4A49040F")]
internal interface ABI.Microsoft.UI.Content.IContentCoordinateConverter {
}
[GuidAttribute("A4B216EE-0E26-56BD-9209-A75CF9D80F27")]
internal interface ABI.Microsoft.UI.Content.IContentCoordinateConverterFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentCoordinateConverterFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentCoordinateConverterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PointInt32 ConvertLocalToScreen(IObjectReference _obj, Point localPoint);
    internal static PointInt32[] ConvertLocalToScreen(IObjectReference _obj, Point[] localPoints);
    internal static PointInt32[] ConvertLocalToScreen(IObjectReference _obj, Point[] localPoints, ContentCoordinateRoundingMode roundingMode);
    internal static RectInt32 ConvertLocalToScreen(IObjectReference _obj, Rect localRect);
    internal static Point ConvertScreenToLocal(IObjectReference _obj, PointInt32 screenPoint);
    internal static Point[] ConvertScreenToLocal(IObjectReference _obj, PointInt32[] screenPoints);
    internal static Rect ConvertScreenToLocal(IObjectReference _obj, RectInt32 screenRect);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F56374CE-B6DF-5B42-A58F-4E3BB039E3A9")]
internal interface ABI.Microsoft.UI.Content.IContentCoordinateConverterStatics {
}
internal static class ABI.Microsoft.UI.Content.IContentCoordinateConverterStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ContentCoordinateConverter CreateForWindowId(IObjectReference _obj, WindowId windowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("470529F5-CD93-599B-968E-F8A689BC3A07")]
internal interface ABI.Microsoft.UI.Content.IContentDeferral {
}
internal static class ABI.Microsoft.UI.Content.IContentDeferralMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Complete(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("76478051-FC80-5EEC-A3F3-62606ABE06B7")]
internal interface ABI.Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_SettingName(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8970FA4F-10BA-5F67-970B-8C72BC009B67")]
internal interface ABI.Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_DidAppWindowIdChange(IObjectReference _obj);
    internal static bool get_DidDisplayIdChange(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5B2504BA-361C-50AA-BD6E-4122C6D93889")]
internal interface ABI.Microsoft.UI.Content.IContentIsland {
}
[GuidAttribute("9FE24BED-2B9C-5137-887F-403C94841824")]
internal interface ABI.Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs {
}
internal static class ABI.Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static object get_AutomationProvider(IObjectReference _obj);
    internal static void set_AutomationProvider(IObjectReference _obj, object value);
    internal static bool get_Handled(IObjectReference _obj);
    internal static void set_Handled(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C334236D-DA88-566D-811D-74AEF2EBA978")]
internal interface ABI.Microsoft.UI.Content.IContentIslandEnvironment {
}
[GuidAttribute("47A782D6-B177-5C1E-BF87-90437DD809D0")]
internal interface ABI.Microsoft.UI.Content.IContentIslandEnvironmentFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentIslandEnvironmentFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentIslandEnvironmentMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _SettingChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _StateChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs>>> _SettingChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs>>> _StateChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static WindowId get_AppWindowId(IObjectReference _obj);
    internal static DisplayId get_DisplayId(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs>>> MakeSettingChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs>>> get__SettingChanged();
    internal static EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs>> Get_SettingChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs>>> MakeStateChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs>>> get__StateChanged();
    internal static EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs>> Get_StateChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("82383F52-E81A-5EC9-A954-BAC8A931BA7D")]
internal interface ABI.Microsoft.UI.Content.IContentIslandFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentIslandFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentIslandMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _AutomationProviderRequested_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _StateChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs>>> _AutomationProviderRequested { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs>>> _StateChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static object GetAutomationHostProvider(IObjectReference _obj);
    internal static ContentDeferral GetStateChangeDeferral(IObjectReference _obj);
    internal static void RequestSize(IObjectReference _obj, Vector2 size);
    internal static Vector2 get_ActualSize(IObjectReference _obj);
    internal static object get_AppData(IObjectReference _obj);
    internal static void set_AppData(IObjectReference _obj, object value);
    internal static ContentCoordinateConverter get_CoordinateConverter(IObjectReference _obj);
    internal static IPropertySet get_CustomProperties(IObjectReference _obj);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    internal static ContentIslandEnvironment get_Environment(IObjectReference _obj);
    internal static ulong get_Id(IObjectReference _obj);
    internal static bool get_IsConnected(IObjectReference _obj);
    internal static bool get_IsHitTestVisibleWhenTransparent(IObjectReference _obj);
    internal static void set_IsHitTestVisibleWhenTransparent(IObjectReference _obj, bool value);
    internal static bool get_IsIslandEnabled(IObjectReference _obj);
    internal static void set_IsIslandEnabled(IObjectReference _obj, bool value);
    internal static bool get_IsIslandVisible(IObjectReference _obj);
    internal static void set_IsIslandVisible(IObjectReference _obj, bool value);
    internal static bool get_IsSiteEnabled(IObjectReference _obj);
    internal static bool get_IsSiteVisible(IObjectReference _obj);
    internal static ContentLayoutDirection get_LayoutDirection(IObjectReference _obj);
    internal static float get_RasterizationScale(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs>>> MakeAutomationProviderRequestedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs>>> get__AutomationProviderRequested();
    internal static EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs>> Get_AutomationProviderRequested2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs>>> MakeStateChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs>>> get__StateChanged();
    internal static EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs>> Get_StateChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C828EEB2-0C62-5B40-9D48-77C06083C278")]
internal interface ABI.Microsoft.UI.Content.IContentIslandStateChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Content.IContentIslandStateChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_DidActualSizeChange(IObjectReference _obj);
    internal static bool get_DidLayoutDirectionChange(IObjectReference _obj);
    internal static bool get_DidRasterizationScaleChange(IObjectReference _obj);
    internal static bool get_DidSiteEnabledChange(IObjectReference _obj);
    internal static bool get_DidSiteVisibleChange(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7B9EB7CC-8C43-5E0A-AB23-AB48628FD223")]
internal interface ABI.Microsoft.UI.Content.IContentIslandStatics {
}
internal static class ABI.Microsoft.UI.Content.IContentIslandStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ContentIsland Create(IObjectReference _obj, Visual Root);
    internal static ContentIsland[] FindAllForCompositor(IObjectReference _obj, Compositor compositor);
    internal static ContentIsland[] FindAllForCurrentThread(IObjectReference _obj);
    internal static ContentIsland GetByVisual(IObjectReference _obj, Visual child);
    internal static ContentIsland GetFromId(IObjectReference _obj, ulong id);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("996C60C4-02B2-5EEF-93B0-DD6B1EC2FD7B")]
internal interface ABI.Microsoft.UI.Content.IContentSite {
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("FAAAB99E-A42B-549C-92DF-3B6D6E1E368B")]
internal interface ABI.Microsoft.UI.Content.IContentSiteBridge {
    public static IntPtr AbiToProjectionVftablePtr;
    private DispatcherQueue global::Microsoft.UI.Content.IContentSiteBridge.DispatcherQueue { get; }
    private Nullable`1<ContentLayoutDirection> global::Microsoft.UI.Content.IContentSiteBridge.LayoutDirectionOverride { get; private set; }
    private float global::Microsoft.UI.Content.IContentSiteBridge.OverrideScale { get; private set; }
    private static IContentSiteBridge();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_DispatcherQueue_0(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_LayoutDirectionOverride_2(IntPtr thisPtr, IntPtr value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_LayoutDirectionOverride_1(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_OverrideScale_4(IntPtr thisPtr, float value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_OverrideScale_3(IntPtr thisPtr, Single* value);
    private sealed virtual override DispatcherQueue global::Microsoft.UI.Content.IContentSiteBridge.get_DispatcherQueue();
    private sealed virtual override Nullable`1<ContentLayoutDirection> global::Microsoft.UI.Content.IContentSiteBridge.get_LayoutDirectionOverride();
    private sealed virtual override void global::Microsoft.UI.Content.IContentSiteBridge.set_LayoutDirectionOverride(Nullable`1<ContentLayoutDirection> value);
    private sealed virtual override float global::Microsoft.UI.Content.IContentSiteBridge.get_OverrideScale();
    private sealed virtual override void global::Microsoft.UI.Content.IContentSiteBridge.set_OverrideScale(float value);
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.UI.Content.IContentSiteBridgeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    public static Nullable`1<ContentLayoutDirection> get_LayoutDirectionOverride(IObjectReference _obj);
    public static void set_LayoutDirectionOverride(IObjectReference _obj, Nullable`1<ContentLayoutDirection> value);
    public static float get_OverrideScale(IObjectReference _obj);
    public static void set_OverrideScale(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("685D085D-BE53-55D1-AEC4-BA2273D5468B")]
internal interface ABI.Microsoft.UI.Content.IContentSiteEnvironment {
}
[GuidAttribute("0BEFA998-CB15-5F16-A4A5-C0ED1674E186")]
internal interface ABI.Microsoft.UI.Content.IContentSiteEnvironmentFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentSiteEnvironmentFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentSiteEnvironmentMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void NotifySettingChanged(IObjectReference _obj, string setting);
    internal static WindowId get_AppWindowId(IObjectReference _obj);
    internal static void set_AppWindowId(IObjectReference _obj, WindowId value);
    internal static DisplayId get_DisplayId(IObjectReference _obj);
    internal static void set_DisplayId(IObjectReference _obj, DisplayId value);
    internal static ContentSiteEnvironmentView get_View(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5B6FE420-0BB3-54DD-8589-786CF02E38F1")]
internal interface ABI.Microsoft.UI.Content.IContentSiteEnvironmentView {
}
[GuidAttribute("C901EDF2-F184-5A64-8D58-8CF8EFA8B678")]
internal interface ABI.Microsoft.UI.Content.IContentSiteEnvironmentViewFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentSiteEnvironmentViewFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentSiteEnvironmentViewMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static WindowId get_AppWindowId(IObjectReference _obj);
    internal static DisplayId get_DisplayId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("72FB98D5-B28A-57F1-91FA-24C014A342C1")]
internal interface ABI.Microsoft.UI.Content.IContentSiteFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentSiteFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentSiteMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RequestedStateChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs>>> _RequestedStateChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ContentDeferral GetIslandStateChangeDeferral(IObjectReference _obj);
    internal static Vector2 get_ActualSize(IObjectReference _obj);
    internal static void set_ActualSize(IObjectReference _obj, Vector2 value);
    internal static SizeInt32 get_ClientSize(IObjectReference _obj);
    internal static void set_ClientSize(IObjectReference _obj, SizeInt32 value);
    internal static ContentCoordinateConverter get_CoordinateConverter(IObjectReference _obj);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    internal static ContentSiteEnvironment get_Environment(IObjectReference _obj);
    internal static bool get_IsConnected(IObjectReference _obj);
    internal static bool get_IsSiteEnabled(IObjectReference _obj);
    internal static void set_IsSiteEnabled(IObjectReference _obj, bool value);
    internal static bool get_IsSiteVisible(IObjectReference _obj);
    internal static void set_IsSiteVisible(IObjectReference _obj, bool value);
    internal static ContentLayoutDirection get_LayoutDirection(IObjectReference _obj);
    internal static void set_LayoutDirection(IObjectReference _obj, ContentLayoutDirection value);
    internal static float get_OverrideScale(IObjectReference _obj);
    internal static void set_OverrideScale(IObjectReference _obj, float value);
    internal static float get_ParentScale(IObjectReference _obj);
    internal static void set_ParentScale(IObjectReference _obj, float value);
    internal static float get_RasterizationScale(IObjectReference _obj);
    internal static Vector2 get_RequestedSize(IObjectReference _obj);
    internal static bool get_ShouldApplyRasterizationScale(IObjectReference _obj);
    internal static void set_ShouldApplyRasterizationScale(IObjectReference _obj, bool value);
    internal static ContentSiteView get_View(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs>>> MakeRequestedStateChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs>>> get__RequestedStateChanged();
    internal static EventSource`1<TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs>> Get_RequestedStateChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1B55FD1D-7292-562B-B4A1-D4DE7972E684")]
internal interface ABI.Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_DidRequestedSizeChange(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2D5D8DD5-358E-5B05-993B-B2666D1786B3")]
internal interface ABI.Microsoft.UI.Content.IContentSiteView {
}
[GuidAttribute("9EFD72F0-63EF-5B6A-A50C-5685BD8100F1")]
internal interface ABI.Microsoft.UI.Content.IContentSiteViewFactory {
}
internal static class ABI.Microsoft.UI.Content.IContentSiteViewFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IContentSiteViewMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_ActualSize(IObjectReference _obj);
    internal static SizeInt32 get_ClientSize(IObjectReference _obj);
    internal static ContentCoordinateConverter get_CoordinateConverter(IObjectReference _obj);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    internal static ContentSiteEnvironmentView get_EnvironmentView(IObjectReference _obj);
    internal static bool get_IsConnected(IObjectReference _obj);
    internal static bool get_IsSiteEnabled(IObjectReference _obj);
    internal static bool get_IsSiteVisible(IObjectReference _obj);
    internal static ContentLayoutDirection get_LayoutDirection(IObjectReference _obj);
    internal static float get_OverrideScale(IObjectReference _obj);
    internal static float get_ParentScale(IObjectReference _obj);
    internal static float get_RasterizationScale(IObjectReference _obj);
    internal static Vector2 get_RequestedSize(IObjectReference _obj);
    internal static bool get_ShouldApplyRasterizationScale(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B2F2FF7B-1825-51B0-B80B-7599889C569F")]
internal interface ABI.Microsoft.UI.Content.IDesktopChildSiteBridge {
}
internal static class ABI.Microsoft.UI.Content.IDesktopChildSiteBridgeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ContentSizePolicy get_ResizePolicy(IObjectReference _obj);
    internal static void set_ResizePolicy(IObjectReference _obj, ContentSizePolicy value);
    internal static ContentSiteView get_SiteView(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("AB6B82DE-6A47-5DE3-A860-613C8DB679AB")]
internal interface ABI.Microsoft.UI.Content.IDesktopChildSiteBridgeStatics {
}
internal static class ABI.Microsoft.UI.Content.IDesktopChildSiteBridgeStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DesktopChildSiteBridge Create(IObjectReference _obj, Compositor compositor, WindowId parentWindowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F0AE8750-905C-50A2-8A12-4545C6245BB4")]
internal interface ABI.Microsoft.UI.Content.IDesktopSiteBridge {
}
[GuidAttribute("D94EE1FF-3AF1-54D0-9311-652B29C57C5B")]
internal interface ABI.Microsoft.UI.Content.IDesktopSiteBridgeFactory {
}
internal static class ABI.Microsoft.UI.Content.IDesktopSiteBridgeFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Content.IDesktopSiteBridgeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Connect(IObjectReference _obj, ContentIsland content);
    internal static void Disable(IObjectReference _obj);
    internal static void Enable(IObjectReference _obj);
    internal static void Hide(IObjectReference _obj);
    internal static void MoveAndResize(IObjectReference _obj, RectInt32 rect);
    internal static void MoveInZOrderAtBottom(IObjectReference _obj);
    internal static void MoveInZOrderAtTop(IObjectReference _obj);
    internal static void MoveInZOrderBelow(IObjectReference _obj, WindowId windowId);
    internal static void Show(IObjectReference _obj);
    internal static bool get_IsEnabled(IObjectReference _obj);
    internal static bool get_IsVisible(IObjectReference _obj);
    internal static WindowId get_WindowId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E0B38DAF-9CD4-50C5-83EE-C76E3CF34EBA")]
internal interface ABI.Microsoft.UI.Content.IDesktopSiteBridgeStatics {
}
internal static class ABI.Microsoft.UI.Content.IDesktopSiteBridgeStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Dispatching.DispatcherExitDeferral : ValueType {
    public static IObjectReference CreateMarshaler(DispatcherExitDeferral obj);
    public static ObjectReferenceValue CreateMarshaler2(DispatcherExitDeferral obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DispatcherExitDeferral FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DispatcherExitDeferral obj);
    public static MarshalerArray<DispatcherExitDeferral> CreateMarshalerArray(DispatcherExitDeferral[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DispatcherExitDeferral[] FromAbiArray(object box);
    public static void CopyAbiArray(DispatcherExitDeferral[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DispatcherExitDeferral[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DispatcherExitDeferral> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Dispatching.DispatcherExitDeferralRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Dispatching.DispatcherQueue : ValueType {
    public static IObjectReference CreateMarshaler(DispatcherQueue obj);
    public static ObjectReferenceValue CreateMarshaler2(DispatcherQueue obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DispatcherQueue FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DispatcherQueue obj);
    public static MarshalerArray<DispatcherQueue> CreateMarshalerArray(DispatcherQueue[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DispatcherQueue[] FromAbiArray(object box);
    public static void CopyAbiArray(DispatcherQueue[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DispatcherQueue[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DispatcherQueue> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Dispatching.DispatcherQueueController : ValueType {
    public static IObjectReference CreateMarshaler(DispatcherQueueController obj);
    public static ObjectReferenceValue CreateMarshaler2(DispatcherQueueController obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DispatcherQueueController FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DispatcherQueueController obj);
    public static MarshalerArray<DispatcherQueueController> CreateMarshalerArray(DispatcherQueueController[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DispatcherQueueController[] FromAbiArray(object box);
    public static void CopyAbiArray(DispatcherQueueController[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DispatcherQueueController[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DispatcherQueueController> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Dispatching.DispatcherQueueControllerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
[GuidAttribute("2E0872A9-4E29-5F14-B688-FB96D5F9D5F8")]
public static class ABI.Microsoft.UI.Dispatching.DispatcherQueueHandler : object {
    public static IntPtr AbiToProjectionVftablePtr;
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    private static DispatcherQueueHandler();
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IObjectReference CreateMarshaler(DispatcherQueueHandler managedDelegate);
    public static ObjectReferenceValue CreateMarshaler2(DispatcherQueueHandler managedDelegate);
    public static IntPtr GetAbi(IObjectReference value);
    public static DispatcherQueueHandler FromAbi(IntPtr nativeDelegate);
    public static DispatcherQueueHandler CreateRcw(IntPtr ptr);
    public static IntPtr FromManaged(DispatcherQueueHandler managedDelegate);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeAbi(IntPtr abi);
    public static MarshalerArray<DispatcherQueueHandler> CreateMarshalerArray(DispatcherQueueHandler[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DispatcherQueueHandler[] FromAbiArray(object box);
    public static void CopyAbiArray(DispatcherQueueHandler[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DispatcherQueueHandler[] array);
    public static void DisposeMarshalerArray(MarshalerArray<DispatcherQueueHandler> array);
    public static void DisposeAbiArray(object box);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr);
}
internal class ABI.Microsoft.UI.Dispatching.DispatcherQueueHandlerWinRTTypeDetails : DelegateTypeDetails`1<DispatcherQueueHandler> {
    public virtual ComInterfaceEntry GetDelegateInterface();
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Dispatching.DispatcherQueueRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(DispatcherQueueShutdownStartingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(DispatcherQueueShutdownStartingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DispatcherQueueShutdownStartingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DispatcherQueueShutdownStartingEventArgs obj);
    public static MarshalerArray<DispatcherQueueShutdownStartingEventArgs> CreateMarshalerArray(DispatcherQueueShutdownStartingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DispatcherQueueShutdownStartingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(DispatcherQueueShutdownStartingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DispatcherQueueShutdownStartingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DispatcherQueueShutdownStartingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Dispatching.DispatcherQueueTimer : ValueType {
    public static IObjectReference CreateMarshaler(DispatcherQueueTimer obj);
    public static ObjectReferenceValue CreateMarshaler2(DispatcherQueueTimer obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DispatcherQueueTimer FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DispatcherQueueTimer obj);
    public static MarshalerArray<DispatcherQueueTimer> CreateMarshalerArray(DispatcherQueueTimer[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DispatcherQueueTimer[] FromAbiArray(object box);
    public static void CopyAbiArray(DispatcherQueueTimer[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DispatcherQueueTimer[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DispatcherQueueTimer> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Dispatching.DispatcherQueueTimerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("910B5AAC-3310-563E-8418-F3005579729E")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferral {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferralMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Complete(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F6EBF8FA-BE1C-5BF6-A467-73DA28738AE8")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueue {
}
[GuidAttribute("0CF48751-F1AC-59B8-BA52-6CE7A1444D6F")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueue2 {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueue2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_HasThreadAccess(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("14A7A175-5C27-5A35-B079-21960CF764A8")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueue3 {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueue3Methods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _FrameworkShutdownCompleted_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _FrameworkShutdownStarting_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, object>>> _FrameworkShutdownCompleted { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>>> _FrameworkShutdownStarting { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void EnqueueEventLoopExit(IObjectReference _obj);
    internal static void EnsureSystemDispatcherQueue(IObjectReference _obj);
    internal static void RunEventLoop(IObjectReference _obj);
    internal static void RunEventLoop(IObjectReference _obj, DispatcherRunOptions options, DispatcherExitDeferral deferral);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, object>>> MakeFrameworkShutdownCompletedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, object>>> get__FrameworkShutdownCompleted();
    internal static EventSource`1<TypedEventHandler`2<DispatcherQueue, object>> Get_FrameworkShutdownCompleted2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>>> MakeFrameworkShutdownStartingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>>> get__FrameworkShutdownStarting();
    internal static EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>> Get_FrameworkShutdownStarting2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BCE8178D-2183-584C-9E5B-F9366F6AE484")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueueController {
}
[GuidAttribute("4C68EE2A-1CB1-5591-A3A2-9B590B8F8B9A")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueueController2 {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueController2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ShutdownQueue(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncAction ShutdownQueueAsync(IObjectReference _obj);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F18D6145-722B-593D-BCF2-A61E713F0037")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStatics {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DispatcherQueueController CreateOnDedicatedThread(IObjectReference _obj);
    internal static DispatcherQueueController CreateOnCurrentThread(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ShutdownCompleted_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ShutdownStarting_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, object>>> _ShutdownCompleted { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>>> _ShutdownStarting { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DispatcherQueueTimer CreateTimer(IObjectReference _obj);
    internal static bool TryEnqueue(IObjectReference _obj, DispatcherQueueHandler callback);
    internal static bool TryEnqueue(IObjectReference _obj, DispatcherQueuePriority priority, DispatcherQueueHandler callback);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, object>>> MakeShutdownCompletedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, object>>> get__ShutdownCompleted();
    internal static EventSource`1<TypedEventHandler`2<DispatcherQueue, object>> Get_ShutdownCompleted2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>>> MakeShutdownStartingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>>> get__ShutdownStarting();
    internal static EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>> Get_ShutdownStarting2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("32519BE5-072B-5660-A70E-8835C9B8157D")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Deferral GetDeferral(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CD3382EA-A455-5124-B63A-CA40D34CA23C")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueueStatics {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DispatcherQueue GetForCurrentThread(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("AD4D63FD-88FE-541F-AC11-BF2DC1ED2CE5")]
internal interface ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimer {
}
internal static class ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimerMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Tick_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueueTimer, object>>> _Tick { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Start(IObjectReference _obj);
    internal static void Stop(IObjectReference _obj);
    internal static TimeSpan get_Interval(IObjectReference _obj);
    internal static void set_Interval(IObjectReference _obj, TimeSpan value);
    internal static bool get_IsRepeating(IObjectReference _obj);
    internal static void set_IsRepeating(IObjectReference _obj, bool value);
    internal static bool get_IsRunning(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueueTimer, object>>> MakeTickTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DispatcherQueueTimer, object>>> get__Tick();
    internal static EventSource`1<TypedEventHandler`2<DispatcherQueueTimer, object>> Get_Tick2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("2989E93B-ED0F-5E79-90F2-EAC592FC6E6A")]
internal interface ABI.Microsoft.UI.IClosableNotifier {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Closed_tokenTables;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _FrameworkClosed_tokenTables;
    private static ConditionalWeakTable`2<IClosableNotifier, EventRegistrationTokenTable`1<ClosableNotifierHandler>> _Closed_TokenTables { get; }
    private static ConditionalWeakTable`2<IClosableNotifier, EventRegistrationTokenTable`1<ClosableNotifierHandler>> _FrameworkClosed_TokenTables { get; }
    private bool global::Microsoft.UI.IClosableNotifier.IsClosed { get; }
    private static IClosableNotifier();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_IsClosed_0(IntPtr thisPtr, Byte* value);
    private static ConditionalWeakTable`2<IClosableNotifier, EventRegistrationTokenTable`1<ClosableNotifierHandler>> MakeClosedTable();
    private static ConditionalWeakTable`2<IClosableNotifier, EventRegistrationTokenTable`1<ClosableNotifierHandler>> get__Closed_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_Closed_1(IntPtr thisPtr, IntPtr handler, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_Closed_2(IntPtr thisPtr, EventRegistrationToken token);
    private static ConditionalWeakTable`2<IClosableNotifier, EventRegistrationTokenTable`1<ClosableNotifierHandler>> MakeFrameworkClosedTable();
    private static ConditionalWeakTable`2<IClosableNotifier, EventRegistrationTokenTable`1<ClosableNotifierHandler>> get__FrameworkClosed_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_FrameworkClosed_3(IntPtr thisPtr, IntPtr handler, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_FrameworkClosed_4(IntPtr thisPtr, EventRegistrationToken token);
    private sealed virtual override bool global::Microsoft.UI.IClosableNotifier.get_IsClosed();
    private sealed virtual override void global::Microsoft.UI.IClosableNotifier.add_Closed(ClosableNotifierHandler value);
    private sealed virtual override void global::Microsoft.UI.IClosableNotifier.remove_Closed(ClosableNotifierHandler value);
    private sealed virtual override void global::Microsoft.UI.IClosableNotifier.add_FrameworkClosed(ClosableNotifierHandler value);
    private sealed virtual override void global::Microsoft.UI.IClosableNotifier.remove_FrameworkClosed(ClosableNotifierHandler value);
}
public static class ABI.Microsoft.UI.IClosableNotifierMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Closed_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _FrameworkClosed_;
    private static ConditionalWeakTable`2<object, EventSource`1<ClosableNotifierHandler>> _Closed { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<ClosableNotifierHandler>> _FrameworkClosed { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static bool get_IsClosed(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<ClosableNotifierHandler>> MakeClosedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<ClosableNotifierHandler>> get__Closed();
    public static ValueTuple`2<Action`1<ClosableNotifierHandler>, Action`1<ClosableNotifierHandler>> Get_Closed(IObjectReference _obj, object _thisObj);
    public static EventSource`1<ClosableNotifierHandler> Get_Closed2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<ClosableNotifierHandler>> MakeFrameworkClosedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<ClosableNotifierHandler>> get__FrameworkClosed();
    public static ValueTuple`2<Action`1<ClosableNotifierHandler>, Action`1<ClosableNotifierHandler>> Get_FrameworkClosed(IObjectReference _obj, object _thisObj);
    public static EventSource`1<ClosableNotifierHandler> Get_FrameworkClosed2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("3ADDDCCD-3949-585B-A566-CCB8350DD221")]
internal interface ABI.Microsoft.UI.IColorHelper {
}
internal static class ABI.Microsoft.UI.IColorHelperMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1D1D85A1-EB63-538A-84F0-019210BC406B")]
internal interface ABI.Microsoft.UI.IColorHelperStatics {
}
[GuidAttribute("982A2D93-0EC4-56B7-9C20-0B5C77949066")]
internal interface ABI.Microsoft.UI.IColorHelperStatics2 {
}
internal static class ABI.Microsoft.UI.IColorHelperStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string ToDisplayName(IObjectReference _obj, Color color);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.IColorHelperStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color FromArgb(IObjectReference _obj, byte a, byte r, byte g, byte b);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8CF15863-8411-5AFD-946C-328E04DA2F2F")]
internal interface ABI.Microsoft.UI.IColors {
}
internal static class ABI.Microsoft.UI.IColorsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8620A5B0-015A-57AC-A3F3-895D0B1269AE")]
internal interface ABI.Microsoft.UI.IColorsStatics {
}
internal static class ABI.Microsoft.UI.IColorsStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_AliceBlue(IObjectReference _obj);
    internal static Color get_AntiqueWhite(IObjectReference _obj);
    internal static Color get_Aqua(IObjectReference _obj);
    internal static Color get_Aquamarine(IObjectReference _obj);
    internal static Color get_Azure(IObjectReference _obj);
    internal static Color get_Beige(IObjectReference _obj);
    internal static Color get_Bisque(IObjectReference _obj);
    internal static Color get_Black(IObjectReference _obj);
    internal static Color get_BlanchedAlmond(IObjectReference _obj);
    internal static Color get_Blue(IObjectReference _obj);
    internal static Color get_BlueViolet(IObjectReference _obj);
    internal static Color get_Brown(IObjectReference _obj);
    internal static Color get_BurlyWood(IObjectReference _obj);
    internal static Color get_CadetBlue(IObjectReference _obj);
    internal static Color get_Chartreuse(IObjectReference _obj);
    internal static Color get_Chocolate(IObjectReference _obj);
    internal static Color get_Coral(IObjectReference _obj);
    internal static Color get_CornflowerBlue(IObjectReference _obj);
    internal static Color get_Cornsilk(IObjectReference _obj);
    internal static Color get_Crimson(IObjectReference _obj);
    internal static Color get_Cyan(IObjectReference _obj);
    internal static Color get_DarkBlue(IObjectReference _obj);
    internal static Color get_DarkCyan(IObjectReference _obj);
    internal static Color get_DarkGoldenrod(IObjectReference _obj);
    internal static Color get_DarkGray(IObjectReference _obj);
    internal static Color get_DarkGreen(IObjectReference _obj);
    internal static Color get_DarkKhaki(IObjectReference _obj);
    internal static Color get_DarkMagenta(IObjectReference _obj);
    internal static Color get_DarkOliveGreen(IObjectReference _obj);
    internal static Color get_DarkOrange(IObjectReference _obj);
    internal static Color get_DarkOrchid(IObjectReference _obj);
    internal static Color get_DarkRed(IObjectReference _obj);
    internal static Color get_DarkSalmon(IObjectReference _obj);
    internal static Color get_DarkSeaGreen(IObjectReference _obj);
    internal static Color get_DarkSlateBlue(IObjectReference _obj);
    internal static Color get_DarkSlateGray(IObjectReference _obj);
    internal static Color get_DarkTurquoise(IObjectReference _obj);
    internal static Color get_DarkViolet(IObjectReference _obj);
    internal static Color get_DeepPink(IObjectReference _obj);
    internal static Color get_DeepSkyBlue(IObjectReference _obj);
    internal static Color get_DimGray(IObjectReference _obj);
    internal static Color get_DodgerBlue(IObjectReference _obj);
    internal static Color get_Firebrick(IObjectReference _obj);
    internal static Color get_FloralWhite(IObjectReference _obj);
    internal static Color get_ForestGreen(IObjectReference _obj);
    internal static Color get_Fuchsia(IObjectReference _obj);
    internal static Color get_Gainsboro(IObjectReference _obj);
    internal static Color get_GhostWhite(IObjectReference _obj);
    internal static Color get_Gold(IObjectReference _obj);
    internal static Color get_Goldenrod(IObjectReference _obj);
    internal static Color get_Gray(IObjectReference _obj);
    internal static Color get_Green(IObjectReference _obj);
    internal static Color get_GreenYellow(IObjectReference _obj);
    internal static Color get_Honeydew(IObjectReference _obj);
    internal static Color get_HotPink(IObjectReference _obj);
    internal static Color get_IndianRed(IObjectReference _obj);
    internal static Color get_Indigo(IObjectReference _obj);
    internal static Color get_Ivory(IObjectReference _obj);
    internal static Color get_Khaki(IObjectReference _obj);
    internal static Color get_Lavender(IObjectReference _obj);
    internal static Color get_LavenderBlush(IObjectReference _obj);
    internal static Color get_LawnGreen(IObjectReference _obj);
    internal static Color get_LemonChiffon(IObjectReference _obj);
    internal static Color get_LightBlue(IObjectReference _obj);
    internal static Color get_LightCoral(IObjectReference _obj);
    internal static Color get_LightCyan(IObjectReference _obj);
    internal static Color get_LightGoldenrodYellow(IObjectReference _obj);
    internal static Color get_LightGray(IObjectReference _obj);
    internal static Color get_LightGreen(IObjectReference _obj);
    internal static Color get_LightPink(IObjectReference _obj);
    internal static Color get_LightSalmon(IObjectReference _obj);
    internal static Color get_LightSeaGreen(IObjectReference _obj);
    internal static Color get_LightSkyBlue(IObjectReference _obj);
    internal static Color get_LightSlateGray(IObjectReference _obj);
    internal static Color get_LightSteelBlue(IObjectReference _obj);
    internal static Color get_LightYellow(IObjectReference _obj);
    internal static Color get_Lime(IObjectReference _obj);
    internal static Color get_LimeGreen(IObjectReference _obj);
    internal static Color get_Linen(IObjectReference _obj);
    internal static Color get_Magenta(IObjectReference _obj);
    internal static Color get_Maroon(IObjectReference _obj);
    internal static Color get_MediumAquamarine(IObjectReference _obj);
    internal static Color get_MediumBlue(IObjectReference _obj);
    internal static Color get_MediumOrchid(IObjectReference _obj);
    internal static Color get_MediumPurple(IObjectReference _obj);
    internal static Color get_MediumSeaGreen(IObjectReference _obj);
    internal static Color get_MediumSlateBlue(IObjectReference _obj);
    internal static Color get_MediumSpringGreen(IObjectReference _obj);
    internal static Color get_MediumTurquoise(IObjectReference _obj);
    internal static Color get_MediumVioletRed(IObjectReference _obj);
    internal static Color get_MidnightBlue(IObjectReference _obj);
    internal static Color get_MintCream(IObjectReference _obj);
    internal static Color get_MistyRose(IObjectReference _obj);
    internal static Color get_Moccasin(IObjectReference _obj);
    internal static Color get_NavajoWhite(IObjectReference _obj);
    internal static Color get_Navy(IObjectReference _obj);
    internal static Color get_OldLace(IObjectReference _obj);
    internal static Color get_Olive(IObjectReference _obj);
    internal static Color get_OliveDrab(IObjectReference _obj);
    internal static Color get_Orange(IObjectReference _obj);
    internal static Color get_OrangeRed(IObjectReference _obj);
    internal static Color get_Orchid(IObjectReference _obj);
    internal static Color get_PaleGoldenrod(IObjectReference _obj);
    internal static Color get_PaleGreen(IObjectReference _obj);
    internal static Color get_PaleTurquoise(IObjectReference _obj);
    internal static Color get_PaleVioletRed(IObjectReference _obj);
    internal static Color get_PapayaWhip(IObjectReference _obj);
    internal static Color get_PeachPuff(IObjectReference _obj);
    internal static Color get_Peru(IObjectReference _obj);
    internal static Color get_Pink(IObjectReference _obj);
    internal static Color get_Plum(IObjectReference _obj);
    internal static Color get_PowderBlue(IObjectReference _obj);
    internal static Color get_Purple(IObjectReference _obj);
    internal static Color get_Red(IObjectReference _obj);
    internal static Color get_RosyBrown(IObjectReference _obj);
    internal static Color get_RoyalBlue(IObjectReference _obj);
    internal static Color get_SaddleBrown(IObjectReference _obj);
    internal static Color get_Salmon(IObjectReference _obj);
    internal static Color get_SandyBrown(IObjectReference _obj);
    internal static Color get_SeaGreen(IObjectReference _obj);
    internal static Color get_SeaShell(IObjectReference _obj);
    internal static Color get_Sienna(IObjectReference _obj);
    internal static Color get_Silver(IObjectReference _obj);
    internal static Color get_SkyBlue(IObjectReference _obj);
    internal static Color get_SlateBlue(IObjectReference _obj);
    internal static Color get_SlateGray(IObjectReference _obj);
    internal static Color get_Snow(IObjectReference _obj);
    internal static Color get_SpringGreen(IObjectReference _obj);
    internal static Color get_SteelBlue(IObjectReference _obj);
    internal static Color get_Tan(IObjectReference _obj);
    internal static Color get_Teal(IObjectReference _obj);
    internal static Color get_Thistle(IObjectReference _obj);
    internal static Color get_Tomato(IObjectReference _obj);
    internal static Color get_Transparent(IObjectReference _obj);
    internal static Color get_Turquoise(IObjectReference _obj);
    internal static Color get_Violet(IObjectReference _obj);
    internal static Color get_Wheat(IObjectReference _obj);
    internal static Color get_White(IObjectReference _obj);
    internal static Color get_WhiteSmoke(IObjectReference _obj);
    internal static Color get_Yellow(IObjectReference _obj);
    internal static Color get_YellowGreen(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.CharacterReceivedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CharacterReceivedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CharacterReceivedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CharacterReceivedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CharacterReceivedEventArgs obj);
    public static MarshalerArray<CharacterReceivedEventArgs> CreateMarshalerArray(CharacterReceivedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CharacterReceivedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CharacterReceivedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CharacterReceivedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CharacterReceivedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.CharacterReceivedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.ContextMenuKeyEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ContextMenuKeyEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ContextMenuKeyEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContextMenuKeyEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContextMenuKeyEventArgs obj);
    public static MarshalerArray<ContextMenuKeyEventArgs> CreateMarshalerArray(ContextMenuKeyEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContextMenuKeyEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ContextMenuKeyEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContextMenuKeyEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContextMenuKeyEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.ContextMenuKeyEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.CrossSlidingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CrossSlidingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CrossSlidingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CrossSlidingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CrossSlidingEventArgs obj);
    public static MarshalerArray<CrossSlidingEventArgs> CreateMarshalerArray(CrossSlidingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CrossSlidingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CrossSlidingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CrossSlidingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CrossSlidingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.CrossSlidingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.DragDrop.DragDropManager : ValueType {
    public static IObjectReference CreateMarshaler(DragDropManager obj);
    public static ObjectReferenceValue CreateMarshaler2(DragDropManager obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DragDropManager FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DragDropManager obj);
    public static MarshalerArray<DragDropManager> CreateMarshalerArray(DragDropManager[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DragDropManager[] FromAbiArray(object box);
    public static void CopyAbiArray(DragDropManager[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DragDropManager[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DragDropManager> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.DragDrop.DragDropManagerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.DragDrop.DragInfo : ValueType {
    public static IObjectReference CreateMarshaler(DragInfo obj);
    public static ObjectReferenceValue CreateMarshaler2(DragInfo obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DragInfo FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DragInfo obj);
    public static MarshalerArray<DragInfo> CreateMarshalerArray(DragInfo[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DragInfo[] FromAbiArray(object box);
    public static void CopyAbiArray(DragInfo[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DragInfo[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DragInfo> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.DragDrop.DragInfoRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.DragDrop.DragOperation : ValueType {
    public static IObjectReference CreateMarshaler(DragOperation obj);
    public static ObjectReferenceValue CreateMarshaler2(DragOperation obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DragOperation FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DragOperation obj);
    public static MarshalerArray<DragOperation> CreateMarshalerArray(DragOperation[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DragOperation[] FromAbiArray(object box);
    public static void CopyAbiArray(DragOperation[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DragOperation[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DragOperation> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.DragDrop.DragOperationRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.DragDrop.DragUIOverride : ValueType {
    public static IObjectReference CreateMarshaler(DragUIOverride obj);
    public static ObjectReferenceValue CreateMarshaler2(DragUIOverride obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DragUIOverride FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DragUIOverride obj);
    public static MarshalerArray<DragUIOverride> CreateMarshalerArray(DragUIOverride[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DragUIOverride[] FromAbiArray(object box);
    public static void CopyAbiArray(DragUIOverride[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DragUIOverride[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DragUIOverride> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.DragDrop.DragUIOverrideRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(DropOperationTargetRequestedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(DropOperationTargetRequestedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DropOperationTargetRequestedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DropOperationTargetRequestedEventArgs obj);
    public static MarshalerArray<DropOperationTargetRequestedEventArgs> CreateMarshalerArray(DropOperationTargetRequestedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DropOperationTargetRequestedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(DropOperationTargetRequestedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DropOperationTargetRequestedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DropOperationTargetRequestedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("4FEA9EFC-B073-5FBE-9C95-A4113EF6393F")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDragDropManager {
}
internal static class ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _TargetRequested_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs>>> _TargetRequested { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AreConcurrentOperationsEnabled(IObjectReference _obj);
    internal static void set_AreConcurrentOperationsEnabled(IObjectReference _obj, bool value);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs>>> MakeTargetRequestedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs>>> get__TargetRequested();
    internal static EventSource`1<TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs>> Get_TargetRequested2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5587C863-57D7-5D0F-8EA9-E5DCF06A0F83")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerStatics {
}
internal static class ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DragDropManager GetForIsland(IObjectReference _obj, ContentIsland content);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7507D891-62A8-5A79-A880-AC7353D001EC")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDragInfo {
}
internal static class ABI.Microsoft.UI.Input.DragDrop.IDragInfoMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DataPackageOperation get_AllowedOperations(IObjectReference _obj);
    internal static DataPackageView get_Data(IObjectReference _obj);
    internal static DragDropModifiers get_Modifiers(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EF122288-7984-53D3-8488-133DCD3DE793")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDragOperation {
}
internal static class ABI.Microsoft.UI.Input.DragDrop.IDragOperationMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void SetDragUIContentFromSoftwareBitmap(IObjectReference _obj, SoftwareBitmap bitmap);
    internal static void SetDragUIContentFromSoftwareBitmap(IObjectReference _obj, SoftwareBitmap bitmap, Point anchorPoint);
    internal static IAsyncOperation`1<DataPackageOperation> StartAsync(IObjectReference _obj, DragDropManager initialTarget, PointerPoint initialPointerPoint);
    internal static DataPackageOperation get_AllowedOperations(IObjectReference _obj);
    internal static void set_AllowedOperations(IObjectReference _obj, DataPackageOperation value);
    internal static DataPackage get_Data(IObjectReference _obj);
    internal static DragUIContentMode get_DragUIContentMode(IObjectReference _obj);
    internal static void set_DragUIContentMode(IObjectReference _obj, DragUIContentMode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8432FBAC-A17F-5A95-8F56-FB432280B54D")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDragUIOverride {
}
internal static class ABI.Microsoft.UI.Input.DragDrop.IDragUIOverrideMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Clear(IObjectReference _obj);
    internal static void SetContentFromSoftwareBitmap(IObjectReference _obj, SoftwareBitmap bitmap);
    internal static void SetContentFromSoftwareBitmap(IObjectReference _obj, SoftwareBitmap bitmap, Point anchorPoint);
    internal static string get_Caption(IObjectReference _obj);
    internal static void set_Caption(IObjectReference _obj, string value);
    internal static bool get_IsCaptionVisible(IObjectReference _obj);
    internal static void set_IsCaptionVisible(IObjectReference _obj, bool value);
    internal static bool get_IsContentVisible(IObjectReference _obj);
    internal static void set_IsContentVisible(IObjectReference _obj, bool value);
    internal static bool get_IsGlyphVisible(IObjectReference _obj);
    internal static void set_IsGlyphVisible(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("1C2707D9-0065-53C7-BBFB-50850378CAF3")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDropOperationTarget {
    public static IntPtr AbiToProjectionVftablePtr;
    private static IDropOperationTarget();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_DropAsync_0(IntPtr thisPtr, IntPtr dragInfo, IntPtr* operation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_EnterAsync_1(IntPtr thisPtr, IntPtr dragInfo, IntPtr dragUIOverride, IntPtr* operation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_LeaveAsync_2(IntPtr thisPtr, IntPtr dragInfo, IntPtr* operation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_OverAsync_3(IntPtr thisPtr, IntPtr dragInfo, IntPtr dragUIOverride, IntPtr* operation);
    private sealed virtual override IAsyncOperation`1<DataPackageOperation> global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.DropAsync(DragInfo dragInfo);
    private sealed virtual override IAsyncOperation`1<DataPackageOperation> global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.EnterAsync(DragInfo dragInfo, DragUIOverride dragUIOverride);
    private sealed virtual override IAsyncAction global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.LeaveAsync(DragInfo dragInfo);
    private sealed virtual override IAsyncOperation`1<DataPackageOperation> global::Microsoft.UI.Input.DragDrop.IDropOperationTarget.OverAsync(DragInfo dragInfo, DragUIOverride dragUIOverride);
}
public static class ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static IAsyncOperation`1<DataPackageOperation> DropAsync(IObjectReference _obj, DragInfo dragInfo);
    public static IAsyncOperation`1<DataPackageOperation> EnterAsync(IObjectReference _obj, DragInfo dragInfo, DragUIOverride dragUIOverride);
    public static IAsyncAction LeaveAsync(IObjectReference _obj, DragInfo dragInfo);
    public static IAsyncOperation`1<DataPackageOperation> OverAsync(IObjectReference _obj, DragInfo dragInfo, DragUIOverride dragUIOverride);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("F61C5B62-720E-59FF-AD0B-E77FC5B8A4A3")]
internal interface ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void SetTarget(IObjectReference _obj, IDropOperationTarget target);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.DraggingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(DraggingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(DraggingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DraggingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DraggingEventArgs obj);
    public static MarshalerArray<DraggingEventArgs> CreateMarshalerArray(DraggingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DraggingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(DraggingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DraggingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DraggingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.DraggingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.EnteredMoveSizeEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(EnteredMoveSizeEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(EnteredMoveSizeEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EnteredMoveSizeEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EnteredMoveSizeEventArgs obj);
    public static MarshalerArray<EnteredMoveSizeEventArgs> CreateMarshalerArray(EnteredMoveSizeEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EnteredMoveSizeEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(EnteredMoveSizeEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EnteredMoveSizeEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EnteredMoveSizeEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.EnteredMoveSizeEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.EnteringMoveSizeEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(EnteringMoveSizeEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(EnteringMoveSizeEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EnteringMoveSizeEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EnteringMoveSizeEventArgs obj);
    public static MarshalerArray<EnteringMoveSizeEventArgs> CreateMarshalerArray(EnteringMoveSizeEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EnteringMoveSizeEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(EnteringMoveSizeEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EnteringMoveSizeEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EnteringMoveSizeEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.EnteringMoveSizeEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.ExitedMoveSizeEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ExitedMoveSizeEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ExitedMoveSizeEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ExitedMoveSizeEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ExitedMoveSizeEventArgs obj);
    public static MarshalerArray<ExitedMoveSizeEventArgs> CreateMarshalerArray(ExitedMoveSizeEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ExitedMoveSizeEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ExitedMoveSizeEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ExitedMoveSizeEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ExitedMoveSizeEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.ExitedMoveSizeEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.FocusChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(FocusChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(FocusChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static FocusChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(FocusChangedEventArgs obj);
    public static MarshalerArray<FocusChangedEventArgs> CreateMarshalerArray(FocusChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static FocusChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(FocusChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(FocusChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<FocusChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.FocusChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.FocusNavigationRequest : ValueType {
    public static IObjectReference CreateMarshaler(FocusNavigationRequest obj);
    public static ObjectReferenceValue CreateMarshaler2(FocusNavigationRequest obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static FocusNavigationRequest FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(FocusNavigationRequest obj);
    public static MarshalerArray<FocusNavigationRequest> CreateMarshalerArray(FocusNavigationRequest[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static FocusNavigationRequest[] FromAbiArray(object box);
    public static void CopyAbiArray(FocusNavigationRequest[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(FocusNavigationRequest[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<FocusNavigationRequest> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.FocusNavigationRequestEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(FocusNavigationRequestEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(FocusNavigationRequestEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static FocusNavigationRequestEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(FocusNavigationRequestEventArgs obj);
    public static MarshalerArray<FocusNavigationRequestEventArgs> CreateMarshalerArray(FocusNavigationRequestEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static FocusNavigationRequestEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(FocusNavigationRequestEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(FocusNavigationRequestEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<FocusNavigationRequestEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.FocusNavigationRequestEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.FocusNavigationRequestRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.GestureRecognizer : ValueType {
    public static IObjectReference CreateMarshaler(GestureRecognizer obj);
    public static ObjectReferenceValue CreateMarshaler2(GestureRecognizer obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static GestureRecognizer FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(GestureRecognizer obj);
    public static MarshalerArray<GestureRecognizer> CreateMarshalerArray(GestureRecognizer[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static GestureRecognizer[] FromAbiArray(object box);
    public static void CopyAbiArray(GestureRecognizer[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(GestureRecognizer[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<GestureRecognizer> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.GestureRecognizerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.HoldingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(HoldingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(HoldingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static HoldingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(HoldingEventArgs obj);
    public static MarshalerArray<HoldingEventArgs> CreateMarshalerArray(HoldingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static HoldingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(HoldingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(HoldingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<HoldingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.HoldingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("36122718-9263-592B-8D87-8F86543FFC95")]
internal interface ABI.Microsoft.UI.Input.ICharacterReceivedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.ICharacterReceivedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_Handled(IObjectReference _obj);
    internal static void set_Handled(IObjectReference _obj, bool value);
    internal static UInt32 get_KeyCode(IObjectReference _obj);
    internal static PhysicalKeyStatus get_KeyStatus(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F6025762-9426-541A-B647-037ABDBECEFC")]
internal interface ABI.Microsoft.UI.Input.IContextMenuKeyEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IContextMenuKeyEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_Handled(IObjectReference _obj);
    internal static void set_Handled(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7679641F-BA9F-543C-A7C8-6229A98F89EF")]
internal interface ABI.Microsoft.UI.Input.ICrossSlidingEventArgs {
}
internal static class ABI.Microsoft.UI.Input.ICrossSlidingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CrossSlidingState get_CrossSlidingState(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3EFB1B75-3D3B-550E-963D-0828CA76128A")]
internal interface ABI.Microsoft.UI.Input.IDraggingEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IDraggingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DraggingState get_DraggingState(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("698D28FE-D325-59E0-9834-B10FC2F7BA67")]
internal interface ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj);
    internal static PointInt32 get_PointerScreenPoint(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("47C083B2-402B-51EC-8836-D48679FEA695")]
internal interface ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj);
    internal static WindowId get_MoveSizeWindowId(IObjectReference _obj);
    internal static void set_MoveSizeWindowId(IObjectReference _obj, WindowId value);
    internal static PointInt32 get_PointerScreenPoint(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DF12A46E-DAEE-5DAC-A678-D7D5E4D0893A")]
internal interface ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj);
    internal static PointInt32 get_PointerScreenPoint(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A039B115-DBDF-594C-9B86-DA6AA05C9FA2")]
internal interface ABI.Microsoft.UI.Input.IFocusChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IFocusChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_Handled(IObjectReference _obj);
    internal static void set_Handled(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6D84BB83-9C84-5112-85E9-8919ACF97262")]
internal interface ABI.Microsoft.UI.Input.IFocusNavigationRequest {
}
[GuidAttribute("35A63426-E271-59F9-A231-0D190314B415")]
internal interface ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static FocusNavigationRequest get_Request(IObjectReference _obj);
    internal static FocusNavigationResult get_Result(IObjectReference _obj);
    internal static void set_Result(IObjectReference _obj, FocusNavigationResult value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IFocusNavigationRequestMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Guid get_CorrelationId(IObjectReference _obj);
    internal static Nullable`1<Rect> get_HintRect(IObjectReference _obj);
    internal static FocusNavigationReason get_Reason(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8C4D2ED8-3A63-519E-A827-F57E263BD1FF")]
internal interface ABI.Microsoft.UI.Input.IFocusNavigationRequestStatics {
}
internal static class ABI.Microsoft.UI.Input.IFocusNavigationRequestStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static FocusNavigationRequest Create(IObjectReference _obj, FocusNavigationReason reason);
    internal static FocusNavigationRequest Create(IObjectReference _obj, FocusNavigationReason reason, Rect hintRect);
    internal static FocusNavigationRequest Create(IObjectReference _obj, FocusNavigationReason reason, Rect hintRect, Guid correlationId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CDA89AFC-6BD0-595C-BA37-545FCE5BF016")]
internal interface ABI.Microsoft.UI.Input.IGestureRecognizer {
}
internal static class ABI.Microsoft.UI.Input.IGestureRecognizerMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CrossSliding_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Dragging_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Holding_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ManipulationCompleted_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ManipulationInertiaStarting_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ManipulationStarted_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ManipulationUpdated_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RightTapped_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Tapped_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs>>> _CrossSliding { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, DraggingEventArgs>>> _Dragging { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, HoldingEventArgs>>> _Holding { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs>>> _ManipulationCompleted { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs>>> _ManipulationInertiaStarting { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs>>> _ManipulationStarted { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs>>> _ManipulationUpdated { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs>>> _RightTapped { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, TappedEventArgs>>> _Tapped { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool CanBeDoubleTap(IObjectReference _obj, PointerPoint value);
    internal static void CompleteGesture(IObjectReference _obj);
    internal static void ProcessDownEvent(IObjectReference _obj, PointerPoint value);
    internal static void ProcessMoveEvents(IObjectReference _obj, IList`1<PointerPoint> value);
    internal static void ProcessMouseWheelEvent(IObjectReference _obj, PointerPoint value, bool isShiftKeyDown, bool isControlKeyDown);
    internal static void ProcessInertia(IObjectReference _obj);
    internal static void ProcessUpEvent(IObjectReference _obj, PointerPoint value);
    internal static bool get_AutoProcessInertia(IObjectReference _obj);
    internal static void set_AutoProcessInertia(IObjectReference _obj, bool value);
    internal static bool get_CrossSlideExact(IObjectReference _obj);
    internal static void set_CrossSlideExact(IObjectReference _obj, bool value);
    internal static bool get_CrossSlideHorizontally(IObjectReference _obj);
    internal static void set_CrossSlideHorizontally(IObjectReference _obj, bool value);
    internal static CrossSlideThresholds get_CrossSlideThresholds(IObjectReference _obj);
    internal static void set_CrossSlideThresholds(IObjectReference _obj, CrossSlideThresholds value);
    internal static GestureSettings get_GestureSettings(IObjectReference _obj);
    internal static void set_GestureSettings(IObjectReference _obj, GestureSettings value);
    internal static float get_InertiaExpansion(IObjectReference _obj);
    internal static void set_InertiaExpansion(IObjectReference _obj, float value);
    internal static float get_InertiaExpansionDeceleration(IObjectReference _obj);
    internal static void set_InertiaExpansionDeceleration(IObjectReference _obj, float value);
    internal static float get_InertiaRotationAngle(IObjectReference _obj);
    internal static void set_InertiaRotationAngle(IObjectReference _obj, float value);
    internal static float get_InertiaRotationDeceleration(IObjectReference _obj);
    internal static void set_InertiaRotationDeceleration(IObjectReference _obj, float value);
    internal static float get_InertiaTranslationDeceleration(IObjectReference _obj);
    internal static void set_InertiaTranslationDeceleration(IObjectReference _obj, float value);
    internal static float get_InertiaTranslationDisplacement(IObjectReference _obj);
    internal static void set_InertiaTranslationDisplacement(IObjectReference _obj, float value);
    internal static bool get_IsActive(IObjectReference _obj);
    internal static bool get_IsInertial(IObjectReference _obj);
    internal static bool get_ManipulationExact(IObjectReference _obj);
    internal static void set_ManipulationExact(IObjectReference _obj, bool value);
    internal static MouseWheelParameters get_MouseWheelParameters(IObjectReference _obj);
    internal static Point get_PivotCenter(IObjectReference _obj);
    internal static void set_PivotCenter(IObjectReference _obj, Point value);
    internal static float get_PivotRadius(IObjectReference _obj);
    internal static void set_PivotRadius(IObjectReference _obj, float value);
    internal static bool get_ShowGestureFeedback(IObjectReference _obj);
    internal static void set_ShowGestureFeedback(IObjectReference _obj, bool value);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs>>> MakeCrossSlidingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs>>> get__CrossSliding();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs>> Get_CrossSliding2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, DraggingEventArgs>>> MakeDraggingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, DraggingEventArgs>>> get__Dragging();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, DraggingEventArgs>> Get_Dragging2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, HoldingEventArgs>>> MakeHoldingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, HoldingEventArgs>>> get__Holding();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, HoldingEventArgs>> Get_Holding2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs>>> MakeManipulationCompletedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs>>> get__ManipulationCompleted();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs>> Get_ManipulationCompleted2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs>>> MakeManipulationInertiaStartingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs>>> get__ManipulationInertiaStarting();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs>> Get_ManipulationInertiaStarting2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs>>> MakeManipulationStartedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs>>> get__ManipulationStarted();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs>> Get_ManipulationStarted2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs>>> MakeManipulationUpdatedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs>>> get__ManipulationUpdated();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs>> Get_ManipulationUpdated2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs>>> MakeRightTappedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs>>> get__RightTapped();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs>> Get_RightTapped2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, TappedEventArgs>>> MakeTappedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<GestureRecognizer, TappedEventArgs>>> get__Tapped();
    internal static EventSource`1<TypedEventHandler`2<GestureRecognizer, TappedEventArgs>> Get_Tapped2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8E449E85-D223-533C-B0B2-BF7C6D10C2DB")]
internal interface ABI.Microsoft.UI.Input.IHoldingEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IHoldingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static HoldingState get_HoldingState(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3B818627-6CE7-5E0D-A0F5-6684FD1AEC78")]
internal interface ABI.Microsoft.UI.Input.IInputActivationListener {
}
[GuidAttribute("7978526B-00B6-5303-8F7D-55BEF36DA786")]
internal interface ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputActivationListenerMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _InputActivationChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs>>> _InputActivationChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputActivationState get_State(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs>>> MakeInputActivationChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs>>> get__InputActivationChanged();
    internal static EventSource`1<TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs>> Get_InputActivationChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C4249843-F053-5C99-9D51-720ADE94224D")]
internal interface ABI.Microsoft.UI.Input.IInputActivationListenerStatics {
}
[GuidAttribute("7EA26120-9636-5292-A7B1-56544AC51A22")]
internal interface ABI.Microsoft.UI.Input.IInputActivationListenerStatics2 {
}
internal static class ABI.Microsoft.UI.Input.IInputActivationListenerStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputActivationListener GetForIsland(IObjectReference _obj, ContentIsland island);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputActivationListenerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputActivationListener GetForWindowId(IObjectReference _obj, WindowId windowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("359B15F9-19C2-5714-8432-75176826406B")]
internal interface ABI.Microsoft.UI.Input.IInputCursor {
}
[GuidAttribute("2F47647B-4BE0-53E9-BE7E-C38D5459DB6B")]
internal interface ABI.Microsoft.UI.Input.IInputCursorFactory {
}
internal static class ABI.Microsoft.UI.Input.IInputCursorFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputCursorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("92F6A552-099F-55FB-8C31-E450284C9643")]
internal interface ABI.Microsoft.UI.Input.IInputCursorStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputCursorStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputCursor CreateFromCoreCursor(IObjectReference _obj, CoreCursor cursor);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5486F042-7E1A-5DC8-8041-E47B609A5BA1")]
internal interface ABI.Microsoft.UI.Input.IInputCustomCursor {
}
[GuidAttribute("6F402882-66E0-57D3-89D0-AA5E2FF917BC")]
internal interface ABI.Microsoft.UI.Input.IInputCustomCursorFactory {
}
internal static class ABI.Microsoft.UI.Input.IInputCustomCursorFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputCustomCursorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F40EA93B-0ED7-5B3A-BFE2-14E2B5AD88A3")]
internal interface ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursor {
}
internal static class ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_ModuleName(IObjectReference _obj);
    internal static string get_ResourceName(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E8B6D5AA-898B-5E69-B01F-383A0943E3E4")]
internal interface ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputDesktopNamedResourceCursor Create(IObjectReference _obj, string resourceName);
    internal static InputDesktopNamedResourceCursor CreateFromModule(IObjectReference _obj, string moduleName, string resourceName);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1DF2777F-7C90-58FC-A7A3-D5736C6510FD")]
internal interface ABI.Microsoft.UI.Input.IInputDesktopResourceCursor {
}
internal static class ABI.Microsoft.UI.Input.IInputDesktopResourceCursorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_ModuleName(IObjectReference _obj);
    internal static UInt32 get_ResourceId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F440DC37-A0B6-56EB-BCEC-B024F2233D47")]
internal interface ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputDesktopResourceCursor Create(IObjectReference _obj, UInt32 resourceId);
    internal static InputDesktopResourceCursor CreateFromModule(IObjectReference _obj, string moduleName, UInt32 resourceId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8DFDC26C-8B8D-515D-8DDD-4685B3A540E9")]
internal interface ABI.Microsoft.UI.Input.IInputFocusController {
}
[GuidAttribute("5165077C-CD4B-501D-B386-B50682360185")]
internal interface ABI.Microsoft.UI.Input.IInputFocusController2 {
}
internal static class ABI.Microsoft.UI.Input.IInputFocusController2Methods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _NavigateFocusRequested_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs>>> _NavigateFocusRequested { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static FocusNavigationResult DepartFocus(IObjectReference _obj, FocusNavigationRequest request);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs>>> MakeNavigateFocusRequestedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs>>> get__NavigateFocusRequested();
    internal static EventSource`1<TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs>> Get_NavigateFocusRequested2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputFocusControllerMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _GotFocus_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _LostFocus_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>>> _GotFocus { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>>> _LostFocus { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool TrySetFocus(IObjectReference _obj);
    internal static bool get_HasFocus(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>>> MakeGotFocusTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>>> get__GotFocus();
    internal static EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>> Get_GotFocus2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>>> MakeLostFocusTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>>> get__LostFocus();
    internal static EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>> Get_LostFocus2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("AEB311DA-DA9B-5A1B-92F4-83DDDE933E00")]
internal interface ABI.Microsoft.UI.Input.IInputFocusControllerStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputFocusControllerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputFocusController GetForIsland(IObjectReference _obj, ContentIsland island);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("53C2A147-932C-5486-A9C6-F6C5A9C65956")]
internal interface ABI.Microsoft.UI.Input.IInputFocusNavigationHost {
}
internal static class ABI.Microsoft.UI.Input.IInputFocusNavigationHostMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _DepartFocusRequested_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs>>> _DepartFocusRequested { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static FocusNavigationResult NavigateFocus(IObjectReference _obj, FocusNavigationRequest request);
    internal static bool get_ContainsFocus(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs>>> MakeDepartFocusRequestedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs>>> get__DepartFocusRequested();
    internal static EventSource`1<TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs>> Get_DepartFocusRequested2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C9C62CD1-73DB-5AA9-B89D-143509DB8F37")]
internal interface ABI.Microsoft.UI.Input.IInputFocusNavigationHostStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputFocusNavigationHostStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputFocusNavigationHost GetForSiteBridge(IObjectReference _obj, IContentSiteBridge site);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("ED61B906-16AD-5DF7-A550-5E6F7D2229F7")]
internal interface ABI.Microsoft.UI.Input.IInputKeyboardSource {
}
[GuidAttribute("79D1C9B6-B3C9-5EC2-8A5B-707088787F78")]
internal interface ABI.Microsoft.UI.Input.IInputKeyboardSource2 {
}
internal static class ABI.Microsoft.UI.Input.IInputKeyboardSource2Methods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CharacterReceived_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ContextMenuKey_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _KeyDown_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _KeyUp_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _SystemKeyDown_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _SystemKeyUp_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs>>> _CharacterReceived { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs>>> _ContextMenuKey { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> _KeyDown { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> _KeyUp { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> _SystemKeyDown { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> _SystemKeyUp { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static VirtualKeyStates GetCurrentKeyState(IObjectReference _obj, VirtualKey virtualKey);
    internal static VirtualKeyStates GetKeyState(IObjectReference _obj, VirtualKey virtualKey);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs>>> MakeCharacterReceivedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs>>> get__CharacterReceived();
    internal static EventSource`1<TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs>> Get_CharacterReceived2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs>>> MakeContextMenuKeyTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs>>> get__ContextMenuKey();
    internal static EventSource`1<TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs>> Get_ContextMenuKey2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> MakeKeyDownTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> get__KeyDown();
    internal static EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>> Get_KeyDown2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> MakeKeyUpTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> get__KeyUp();
    internal static EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>> Get_KeyUp2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> MakeSystemKeyDownTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> get__SystemKeyDown();
    internal static EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>> Get_SystemKeyDown2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> MakeSystemKeyUpTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>>> get__SystemKeyUp();
    internal static EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>> Get_SystemKeyUp2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputKeyboardSourceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F4E1563D-8C2E-5BCD-B784-47ADEAA3CD7E")]
internal interface ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics {
}
[GuidAttribute("8857518C-2899-5F11-9B64-0AD83234824B")]
internal interface ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics2 {
}
internal static class ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputKeyboardSource GetForIsland(IObjectReference _obj, ContentIsland island);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputKeyboardSourceStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CoreVirtualKeyStates GetKeyStateForCurrentThread(IObjectReference _obj, VirtualKey virtualKey);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E8A39502-A860-502F-8C10-3646D43AECF1")]
internal interface ABI.Microsoft.UI.Input.IInputLightDismissAction {
}
internal static class ABI.Microsoft.UI.Input.IInputLightDismissActionMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Dismissed_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs>>> _Dismissed { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs>>> MakeDismissedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs>>> get__Dismissed();
    internal static EventSource`1<TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs>> Get_Dismissed2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("ED9B8DEF-6496-5169-984D-D44B4E690623")]
internal interface ABI.Microsoft.UI.Input.IInputLightDismissActionStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputLightDismissActionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputLightDismissAction GetForWindowId(IObjectReference _obj, WindowId windowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("078660EE-07CA-5808-B982-E6E899CF098C")]
internal interface ABI.Microsoft.UI.Input.IInputLightDismissEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IInputLightDismissEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("471732B4-3D07-5104-B192-EBACF71E86DF")]
internal interface ABI.Microsoft.UI.Input.IInputNonClientPointerSource {
}
[GuidAttribute("DD2B10C4-7DE6-5C1D-B438-06DDC994058F")]
internal interface ABI.Microsoft.UI.Input.IInputNonClientPointerSource2 {
}
internal static class ABI.Microsoft.UI.Input.IInputNonClientPointerSource2Methods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _EnteredMoveSize_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _EnteringMoveSize_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _ExitedMoveSize_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _WindowRectChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _WindowRectChanging_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs>>> _EnteredMoveSize { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs>>> _EnteringMoveSize { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs>>> _ExitedMoveSize { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs>>> _WindowRectChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs>>> _WindowRectChanging { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs>>> MakeEnteredMoveSizeTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs>>> get__EnteredMoveSize();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs>> Get_EnteredMoveSize2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs>>> MakeEnteringMoveSizeTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs>>> get__EnteringMoveSize();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs>> Get_EnteringMoveSize2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs>>> MakeExitedMoveSizeTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs>>> get__ExitedMoveSize();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs>> Get_ExitedMoveSize2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs>>> MakeWindowRectChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs>>> get__WindowRectChanged();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs>> Get_WindowRectChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs>>> MakeWindowRectChangingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs>>> get__WindowRectChanging();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs>> Get_WindowRectChanging2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputNonClientPointerSourceMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CaptionTapped_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerEntered_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerExited_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerMoved_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerPressed_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerReleased_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RegionsChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs>>> _CaptionTapped { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> _PointerEntered { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> _PointerExited { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> _PointerMoved { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> _PointerPressed { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> _PointerReleased { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs>>> _RegionsChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ClearAllRegionRects(IObjectReference _obj);
    internal static void ClearRegionRects(IObjectReference _obj, NonClientRegionKind region);
    internal static RectInt32[] GetRegionRects(IObjectReference _obj, NonClientRegionKind region);
    internal static void SetRegionRects(IObjectReference _obj, NonClientRegionKind region, RectInt32[] rects);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs>>> MakeCaptionTappedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs>>> get__CaptionTapped();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs>> Get_CaptionTapped2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> MakePointerEnteredTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> get__PointerEntered();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> Get_PointerEntered2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> MakePointerExitedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> get__PointerExited();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> Get_PointerExited2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> MakePointerMovedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> get__PointerMoved();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> Get_PointerMoved2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> MakePointerPressedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> get__PointerPressed();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> Get_PointerPressed2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> MakePointerReleasedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>>> get__PointerReleased();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> Get_PointerReleased2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs>>> MakeRegionsChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs>>> get__RegionsChanged();
    internal static EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs>> Get_RegionsChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7D0B775C-1903-5DC7-BD2F-7A4B31F0CFF2")]
internal interface ABI.Microsoft.UI.Input.IInputNonClientPointerSourceStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputNonClientPointerSourceStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputNonClientPointerSource GetForWindowId(IObjectReference _obj, WindowId windowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("42EDBC88-D386-544D-B1B8-68617FE68282")]
internal interface ABI.Microsoft.UI.Input.IInputObject {
}
[GuidAttribute("F7786BC2-B0B8-5961-9A57-AE199D452106")]
internal interface ABI.Microsoft.UI.Input.IInputObjectFactory {
}
internal static class ABI.Microsoft.UI.Input.IInputObjectFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Input.IInputObjectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6A6C2764-C3F4-5BE5-8447-C9A98766C240")]
internal interface ABI.Microsoft.UI.Input.IInputPointerSource {
}
internal static class ABI.Microsoft.UI.Input.IInputPointerSourceMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerCaptureLost_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerEntered_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerExited_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerMoved_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerPressed_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerReleased_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerRoutedAway_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerRoutedReleased_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerRoutedTo_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PointerWheelChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerCaptureLost { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerEntered { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerExited { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerMoved { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerPressed { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerReleased { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerRoutedAway { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerRoutedReleased { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerRoutedTo { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> _PointerWheelChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputCursor get_Cursor(IObjectReference _obj);
    internal static void set_Cursor(IObjectReference _obj, InputCursor value);
    internal static InputPointerSourceDeviceKinds get_DeviceKinds(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerCaptureLostTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerCaptureLost();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerCaptureLost2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerEnteredTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerEntered();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerEntered2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerExitedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerExited();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerExited2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerMovedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerMoved();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerMoved2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerPressedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerPressed();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerPressed2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerReleasedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerReleased();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerReleased2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerRoutedAwayTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerRoutedAway();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerRoutedAway2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerRoutedReleasedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerRoutedReleased();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerRoutedReleased2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerRoutedToTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerRoutedTo();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerRoutedTo2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> MakePointerWheelChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>>> get__PointerWheelChanged();
    internal static EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> Get_PointerWheelChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E8A19FD1-A914-533F-9B0F-6BF0065E6781")]
internal interface ABI.Microsoft.UI.Input.IInputPointerSourceStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputPointerSourceStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputPointerSource GetForIsland(IObjectReference _obj, ContentIsland island);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2F327FEB-B7E7-5E37-A0CC-37DCABE76588")]
internal interface ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSource {
}
internal static class ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("23D584D2-AF8C-5A8A-806F-2BA9C5B1A5EC")]
internal interface ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputPreTranslateKeyboardSource GetForIsland(IObjectReference _obj, ContentIsland island);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("59F538E7-C500-59AB-8B54-0BC6100FD49E")]
internal interface ABI.Microsoft.UI.Input.IInputSystemCursor {
}
internal static class ABI.Microsoft.UI.Input.IInputSystemCursorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputSystemCursorShape get_CursorShape(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D3860BB6-698A-5814-AEDD-C2FA8BBA5A02")]
internal interface ABI.Microsoft.UI.Input.IInputSystemCursorStatics {
}
internal static class ABI.Microsoft.UI.Input.IInputSystemCursorStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static InputSystemCursor Create(IObjectReference _obj, InputSystemCursorShape type);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("40D5BB74-977E-5194-8039-9F6C44427BBB")]
internal interface ABI.Microsoft.UI.Input.IKeyEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IKeyEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_Handled(IObjectReference _obj);
    internal static void set_Handled(IObjectReference _obj, bool value);
    internal static PhysicalKeyStatus get_KeyStatus(IObjectReference _obj);
    internal static ulong get_Timestamp(IObjectReference _obj);
    internal static VirtualKey get_VirtualKey(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0E0249D4-46E4-5559-AEE3-FA45CE2A7F56")]
internal interface ABI.Microsoft.UI.Input.IManipulationCompletedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IManipulationCompletedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ManipulationDelta get_Cumulative(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    internal static ManipulationVelocities get_Velocities(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("ACF9EF71-6E15-56AB-9260-F0D3CE5F66E8")]
internal interface ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ManipulationDelta get_Cumulative(IObjectReference _obj);
    internal static ManipulationDelta get_Delta(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    internal static ManipulationVelocities get_Velocities(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4A616613-EEF1-5F1B-A768-0775478D49D4")]
internal interface ABI.Microsoft.UI.Input.IManipulationStartedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IManipulationStartedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ManipulationDelta get_Cumulative(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("406E1961-0C98-5FC0-B3D8-116492EF0053")]
internal interface ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ManipulationDelta get_Cumulative(IObjectReference _obj);
    internal static ManipulationDelta get_Delta(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    internal static ManipulationVelocities get_Velocities(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6D98BE40-1D56-51D1-AA0D-F325439CD009")]
internal interface ABI.Microsoft.UI.Input.IMouseWheelParameters {
}
internal static class ABI.Microsoft.UI.Input.IMouseWheelParametersMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Point get_CharTranslation(IObjectReference _obj);
    internal static void set_CharTranslation(IObjectReference _obj, Point value);
    internal static float get_DeltaRotationAngle(IObjectReference _obj);
    internal static void set_DeltaRotationAngle(IObjectReference _obj, float value);
    internal static float get_DeltaScale(IObjectReference _obj);
    internal static void set_DeltaScale(IObjectReference _obj, float value);
    internal static Point get_PageTranslation(IObjectReference _obj);
    internal static void set_PageTranslation(IObjectReference _obj, Point value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3D173531-991F-5753-B7E0-14A121C3CD2D")]
internal interface ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Point get_Point(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A5B44AEC-B797-505A-A129-AE4E5271C73C")]
internal interface ABI.Microsoft.UI.Input.INonClientPointerEventArgs {
}
internal static class ABI.Microsoft.UI.Input.INonClientPointerEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsPointInRegion(IObjectReference _obj);
    internal static Point get_Point(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static NonClientRegionKind get_RegionKind(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FE97EE95-1824-51B2-B8EB-10FF0665CE23")]
internal interface ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static NonClientRegionKind[] get_ChangedRegions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputActivationListener : ValueType {
    public static IObjectReference CreateMarshaler(InputActivationListener obj);
    public static ObjectReferenceValue CreateMarshaler2(InputActivationListener obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputActivationListener FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputActivationListener obj);
    public static MarshalerArray<InputActivationListener> CreateMarshalerArray(InputActivationListener[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputActivationListener[] FromAbiArray(object box);
    public static void CopyAbiArray(InputActivationListener[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputActivationListener[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputActivationListener> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(InputActivationListenerActivationChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InputActivationListenerActivationChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputActivationListenerActivationChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputActivationListenerActivationChangedEventArgs obj);
    public static MarshalerArray<InputActivationListenerActivationChangedEventArgs> CreateMarshalerArray(InputActivationListenerActivationChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputActivationListenerActivationChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InputActivationListenerActivationChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputActivationListenerActivationChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputActivationListenerActivationChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputActivationListenerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputCursor : ValueType {
    public static IObjectReference CreateMarshaler(InputCursor obj);
    public static ObjectReferenceValue CreateMarshaler2(InputCursor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputCursor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputCursor obj);
    public static MarshalerArray<InputCursor> CreateMarshalerArray(InputCursor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputCursor[] FromAbiArray(object box);
    public static void CopyAbiArray(InputCursor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputCursor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputCursor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputCursorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputCustomCursor : ValueType {
    public static IObjectReference CreateMarshaler(InputCustomCursor obj);
    public static ObjectReferenceValue CreateMarshaler2(InputCustomCursor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputCustomCursor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputCustomCursor obj);
    public static MarshalerArray<InputCustomCursor> CreateMarshalerArray(InputCustomCursor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputCustomCursor[] FromAbiArray(object box);
    public static void CopyAbiArray(InputCustomCursor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputCustomCursor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputCustomCursor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputCustomCursorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor : ValueType {
    public static IObjectReference CreateMarshaler(InputDesktopNamedResourceCursor obj);
    public static ObjectReferenceValue CreateMarshaler2(InputDesktopNamedResourceCursor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputDesktopNamedResourceCursor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputDesktopNamedResourceCursor obj);
    public static MarshalerArray<InputDesktopNamedResourceCursor> CreateMarshalerArray(InputDesktopNamedResourceCursor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputDesktopNamedResourceCursor[] FromAbiArray(object box);
    public static void CopyAbiArray(InputDesktopNamedResourceCursor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputDesktopNamedResourceCursor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputDesktopNamedResourceCursor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputDesktopResourceCursor : ValueType {
    public static IObjectReference CreateMarshaler(InputDesktopResourceCursor obj);
    public static ObjectReferenceValue CreateMarshaler2(InputDesktopResourceCursor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputDesktopResourceCursor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputDesktopResourceCursor obj);
    public static MarshalerArray<InputDesktopResourceCursor> CreateMarshalerArray(InputDesktopResourceCursor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputDesktopResourceCursor[] FromAbiArray(object box);
    public static void CopyAbiArray(InputDesktopResourceCursor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputDesktopResourceCursor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputDesktopResourceCursor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputDesktopResourceCursorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputFocusController : ValueType {
    public static IObjectReference CreateMarshaler(InputFocusController obj);
    public static ObjectReferenceValue CreateMarshaler2(InputFocusController obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputFocusController FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputFocusController obj);
    public static MarshalerArray<InputFocusController> CreateMarshalerArray(InputFocusController[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputFocusController[] FromAbiArray(object box);
    public static void CopyAbiArray(InputFocusController[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputFocusController[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputFocusController> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputFocusControllerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputFocusNavigationHost : ValueType {
    public static IObjectReference CreateMarshaler(InputFocusNavigationHost obj);
    public static ObjectReferenceValue CreateMarshaler2(InputFocusNavigationHost obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputFocusNavigationHost FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputFocusNavigationHost obj);
    public static MarshalerArray<InputFocusNavigationHost> CreateMarshalerArray(InputFocusNavigationHost[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputFocusNavigationHost[] FromAbiArray(object box);
    public static void CopyAbiArray(InputFocusNavigationHost[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputFocusNavigationHost[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputFocusNavigationHost> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputFocusNavigationHostRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputKeyboardSource : ValueType {
    public static IObjectReference CreateMarshaler(InputKeyboardSource obj);
    public static ObjectReferenceValue CreateMarshaler2(InputKeyboardSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputKeyboardSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputKeyboardSource obj);
    public static MarshalerArray<InputKeyboardSource> CreateMarshalerArray(InputKeyboardSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputKeyboardSource[] FromAbiArray(object box);
    public static void CopyAbiArray(InputKeyboardSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputKeyboardSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputKeyboardSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputKeyboardSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputLightDismissAction : ValueType {
    public static IObjectReference CreateMarshaler(InputLightDismissAction obj);
    public static ObjectReferenceValue CreateMarshaler2(InputLightDismissAction obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputLightDismissAction FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputLightDismissAction obj);
    public static MarshalerArray<InputLightDismissAction> CreateMarshalerArray(InputLightDismissAction[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputLightDismissAction[] FromAbiArray(object box);
    public static void CopyAbiArray(InputLightDismissAction[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputLightDismissAction[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputLightDismissAction> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputLightDismissActionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputLightDismissEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(InputLightDismissEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(InputLightDismissEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputLightDismissEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputLightDismissEventArgs obj);
    public static MarshalerArray<InputLightDismissEventArgs> CreateMarshalerArray(InputLightDismissEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputLightDismissEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(InputLightDismissEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputLightDismissEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputLightDismissEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputLightDismissEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputNonClientPointerSource : ValueType {
    public static IObjectReference CreateMarshaler(InputNonClientPointerSource obj);
    public static ObjectReferenceValue CreateMarshaler2(InputNonClientPointerSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputNonClientPointerSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputNonClientPointerSource obj);
    public static MarshalerArray<InputNonClientPointerSource> CreateMarshalerArray(InputNonClientPointerSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputNonClientPointerSource[] FromAbiArray(object box);
    public static void CopyAbiArray(InputNonClientPointerSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputNonClientPointerSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputNonClientPointerSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputNonClientPointerSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputObject : ValueType {
    public static IObjectReference CreateMarshaler(InputObject obj);
    public static ObjectReferenceValue CreateMarshaler2(InputObject obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputObject FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputObject obj);
    public static MarshalerArray<InputObject> CreateMarshalerArray(InputObject[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputObject[] FromAbiArray(object box);
    public static void CopyAbiArray(InputObject[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputObject[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputObject> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputObjectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputPointerSource : ValueType {
    public static IObjectReference CreateMarshaler(InputPointerSource obj);
    public static ObjectReferenceValue CreateMarshaler2(InputPointerSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputPointerSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputPointerSource obj);
    public static MarshalerArray<InputPointerSource> CreateMarshalerArray(InputPointerSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputPointerSource[] FromAbiArray(object box);
    public static void CopyAbiArray(InputPointerSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputPointerSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputPointerSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputPointerSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSource : ValueType {
    public static IObjectReference CreateMarshaler(InputPreTranslateKeyboardSource obj);
    public static ObjectReferenceValue CreateMarshaler2(InputPreTranslateKeyboardSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputPreTranslateKeyboardSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputPreTranslateKeyboardSource obj);
    public static MarshalerArray<InputPreTranslateKeyboardSource> CreateMarshalerArray(InputPreTranslateKeyboardSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputPreTranslateKeyboardSource[] FromAbiArray(object box);
    public static void CopyAbiArray(InputPreTranslateKeyboardSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputPreTranslateKeyboardSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputPreTranslateKeyboardSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.InputSystemCursor : ValueType {
    public static IObjectReference CreateMarshaler(InputSystemCursor obj);
    public static ObjectReferenceValue CreateMarshaler2(InputSystemCursor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InputSystemCursor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InputSystemCursor obj);
    public static MarshalerArray<InputSystemCursor> CreateMarshalerArray(InputSystemCursor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InputSystemCursor[] FromAbiArray(object box);
    public static void CopyAbiArray(InputSystemCursor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InputSystemCursor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InputSystemCursor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.InputSystemCursorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("865B188C-2ED5-5DF8-829F-AC0701D5C51A")]
internal interface ABI.Microsoft.UI.Input.IPointerEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IPointerEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IList`1<PointerPoint> GetIntermediatePoints(IObjectReference _obj);
    internal static IList`1<PointerPoint> GetIntermediateTransformedPoints(IObjectReference _obj, IPointerPointTransform transform);
    internal static PointerPoint get_CurrentPoint(IObjectReference _obj);
    internal static bool get_Handled(IObjectReference _obj);
    internal static void set_Handled(IObjectReference _obj, bool value);
    internal static VirtualKeyModifiers get_KeyModifiers(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0D430EE6-252C-59A4-B2A2-D44264DC6A40")]
internal interface ABI.Microsoft.UI.Input.IPointerPoint {
}
internal static class ABI.Microsoft.UI.Input.IPointerPointMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PointerPoint GetTransformedPoint(IObjectReference _obj, IPointerPointTransform transform);
    internal static UInt32 get_FrameId(IObjectReference _obj);
    internal static bool get_IsInContact(IObjectReference _obj);
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static UInt32 get_PointerId(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    internal static PointerPointProperties get_Properties(IObjectReference _obj);
    internal static ulong get_Timestamp(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D760ED77-4B10-57A5-B3CC-D9BF3413E996")]
internal interface ABI.Microsoft.UI.Input.IPointerPointProperties {
}
internal static class ABI.Microsoft.UI.Input.IPointerPointPropertiesMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Rect get_ContactRect(IObjectReference _obj);
    internal static bool get_IsBarrelButtonPressed(IObjectReference _obj);
    internal static bool get_IsCanceled(IObjectReference _obj);
    internal static bool get_IsEraser(IObjectReference _obj);
    internal static bool get_IsHorizontalMouseWheel(IObjectReference _obj);
    internal static bool get_IsInRange(IObjectReference _obj);
    internal static bool get_IsInverted(IObjectReference _obj);
    internal static bool get_IsLeftButtonPressed(IObjectReference _obj);
    internal static bool get_IsMiddleButtonPressed(IObjectReference _obj);
    internal static bool get_IsPrimary(IObjectReference _obj);
    internal static bool get_IsRightButtonPressed(IObjectReference _obj);
    internal static bool get_IsXButton1Pressed(IObjectReference _obj);
    internal static bool get_IsXButton2Pressed(IObjectReference _obj);
    internal static int get_MouseWheelDelta(IObjectReference _obj);
    internal static float get_Orientation(IObjectReference _obj);
    internal static PointerUpdateKind get_PointerUpdateKind(IObjectReference _obj);
    internal static float get_Pressure(IObjectReference _obj);
    internal static bool get_TouchConfidence(IObjectReference _obj);
    internal static float get_Twist(IObjectReference _obj);
    internal static float get_XTilt(IObjectReference _obj);
    internal static float get_YTilt(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("DB4791BC-994D-54C7-92EF-66EA1DE9B43C")]
internal interface ABI.Microsoft.UI.Input.IPointerPointTransform {
    public static IntPtr AbiToProjectionVftablePtr;
    private IPointerPointTransform global::Microsoft.UI.Input.IPointerPointTransform.Inverse { get; }
    private static IPointerPointTransform();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_TryTransform_1(IntPtr thisPtr, Point inPoint, Point* outPoint, Byte* result);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_TryTransformBounds_2(IntPtr thisPtr, Rect inRect, Rect* outRect, Byte* result);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Inverse_0(IntPtr thisPtr, IntPtr* value);
    private sealed virtual override bool global::Microsoft.UI.Input.IPointerPointTransform.TryTransform(Point inPoint, Point& outPoint);
    private sealed virtual override bool global::Microsoft.UI.Input.IPointerPointTransform.TryTransformBounds(Rect inRect, Rect& outRect);
    private sealed virtual override IPointerPointTransform global::Microsoft.UI.Input.IPointerPointTransform.get_Inverse();
}
public static class ABI.Microsoft.UI.Input.IPointerPointTransformMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static bool TryTransform(IObjectReference _obj, Point inPoint, Point& outPoint);
    public static bool TryTransformBounds(IObjectReference _obj, Rect inRect, Rect& outRect);
    public static IPointerPointTransform get_Inverse(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("12C100EC-2100-565F-A60C-F1187F438828")]
internal interface ABI.Microsoft.UI.Input.IPointerPredictor {
}
internal static class ABI.Microsoft.UI.Input.IPointerPredictorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PointerPoint[] GetPredictedPoints(IObjectReference _obj, PointerPoint point);
    internal static TimeSpan get_PredictionTime(IObjectReference _obj);
    internal static void set_PredictionTime(IObjectReference _obj, TimeSpan value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("78A8EF30-3E5C-55CD-8F85-65AC09B1A987")]
internal interface ABI.Microsoft.UI.Input.IPointerPredictorStatics {
}
internal static class ABI.Microsoft.UI.Input.IPointerPredictorStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PointerPredictor CreateForInputPointerSource(IObjectReference _obj, InputPointerSource inputPointerSource);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8FF73B39-887E-50A4-8500-77953039DCB4")]
internal interface ABI.Microsoft.UI.Input.IRightTappedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IRightTappedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C3A01BB5-6076-5E0F-871A-9D94A6A8F82B")]
internal interface ABI.Microsoft.UI.Input.ITappedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.ITappedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PointerDeviceType get_PointerDeviceType(IObjectReference _obj);
    internal static Point get_Position(IObjectReference _obj);
    internal static UInt32 get_TapCount(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8A885D28-D2D9-5DDA-9848-CDF247771037")]
internal interface ABI.Microsoft.UI.Input.IWindowRectChangedEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IWindowRectChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj);
    internal static RectInt32 get_NewWindowRect(IObjectReference _obj);
    internal static RectInt32 get_OldWindowRect(IObjectReference _obj);
    internal static PointInt32 get_PointerScreenPoint(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DB13ED3C-DEBC-5855-8D70-5936FD813457")]
internal interface ABI.Microsoft.UI.Input.IWindowRectChangingEventArgs {
}
internal static class ABI.Microsoft.UI.Input.IWindowRectChangingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AllowRectChange(IObjectReference _obj);
    internal static void set_AllowRectChange(IObjectReference _obj, bool value);
    internal static MoveSizeOperation get_MoveSizeOperation(IObjectReference _obj);
    internal static RectInt32 get_NewWindowRect(IObjectReference _obj);
    internal static void set_NewWindowRect(IObjectReference _obj, RectInt32 value);
    internal static RectInt32 get_OldWindowRect(IObjectReference _obj);
    internal static PointInt32 get_PointerScreenPoint(IObjectReference _obj);
    internal static bool get_ShowWindow(IObjectReference _obj);
    internal static void set_ShowWindow(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.KeyEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(KeyEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(KeyEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static KeyEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(KeyEventArgs obj);
    public static MarshalerArray<KeyEventArgs> CreateMarshalerArray(KeyEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static KeyEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(KeyEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(KeyEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<KeyEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.KeyEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.ManipulationCompletedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ManipulationCompletedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ManipulationCompletedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ManipulationCompletedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ManipulationCompletedEventArgs obj);
    public static MarshalerArray<ManipulationCompletedEventArgs> CreateMarshalerArray(ManipulationCompletedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ManipulationCompletedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ManipulationCompletedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ManipulationCompletedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ManipulationCompletedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.ManipulationCompletedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.ManipulationInertiaStartingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ManipulationInertiaStartingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ManipulationInertiaStartingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ManipulationInertiaStartingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ManipulationInertiaStartingEventArgs obj);
    public static MarshalerArray<ManipulationInertiaStartingEventArgs> CreateMarshalerArray(ManipulationInertiaStartingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ManipulationInertiaStartingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ManipulationInertiaStartingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ManipulationInertiaStartingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ManipulationInertiaStartingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.ManipulationInertiaStartingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.ManipulationStartedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ManipulationStartedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ManipulationStartedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ManipulationStartedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ManipulationStartedEventArgs obj);
    public static MarshalerArray<ManipulationStartedEventArgs> CreateMarshalerArray(ManipulationStartedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ManipulationStartedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ManipulationStartedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ManipulationStartedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ManipulationStartedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.ManipulationStartedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.ManipulationUpdatedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(ManipulationUpdatedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(ManipulationUpdatedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ManipulationUpdatedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ManipulationUpdatedEventArgs obj);
    public static MarshalerArray<ManipulationUpdatedEventArgs> CreateMarshalerArray(ManipulationUpdatedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ManipulationUpdatedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(ManipulationUpdatedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ManipulationUpdatedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ManipulationUpdatedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.ManipulationUpdatedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.MouseWheelParameters : ValueType {
    public static IObjectReference CreateMarshaler(MouseWheelParameters obj);
    public static ObjectReferenceValue CreateMarshaler2(MouseWheelParameters obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static MouseWheelParameters FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(MouseWheelParameters obj);
    public static MarshalerArray<MouseWheelParameters> CreateMarshalerArray(MouseWheelParameters[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static MouseWheelParameters[] FromAbiArray(object box);
    public static void CopyAbiArray(MouseWheelParameters[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(MouseWheelParameters[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<MouseWheelParameters> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.MouseWheelParametersRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.NonClientCaptionTappedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(NonClientCaptionTappedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(NonClientCaptionTappedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static NonClientCaptionTappedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(NonClientCaptionTappedEventArgs obj);
    public static MarshalerArray<NonClientCaptionTappedEventArgs> CreateMarshalerArray(NonClientCaptionTappedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static NonClientCaptionTappedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(NonClientCaptionTappedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(NonClientCaptionTappedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<NonClientCaptionTappedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.NonClientCaptionTappedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.NonClientPointerEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(NonClientPointerEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(NonClientPointerEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static NonClientPointerEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(NonClientPointerEventArgs obj);
    public static MarshalerArray<NonClientPointerEventArgs> CreateMarshalerArray(NonClientPointerEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static NonClientPointerEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(NonClientPointerEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(NonClientPointerEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<NonClientPointerEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.NonClientPointerEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.NonClientRegionsChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(NonClientRegionsChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(NonClientRegionsChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static NonClientRegionsChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(NonClientRegionsChangedEventArgs obj);
    public static MarshalerArray<NonClientRegionsChangedEventArgs> CreateMarshalerArray(NonClientRegionsChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static NonClientRegionsChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(NonClientRegionsChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(NonClientRegionsChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<NonClientRegionsChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.NonClientRegionsChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.PhysicalKeyStatus : ValueType {
    public UInt32 RepeatCount;
    public UInt32 ScanCode;
    public byte IsExtendedKey;
    public byte IsMenuKeyDown;
    public byte WasKeyDown;
    public byte IsKeyReleased;
    public static Marshaler CreateMarshaler(PhysicalKeyStatus arg);
    public static PhysicalKeyStatus GetAbi(Marshaler m);
    public static PhysicalKeyStatus FromAbi(PhysicalKeyStatus arg);
    public static PhysicalKeyStatus FromManaged(PhysicalKeyStatus arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(PhysicalKeyStatus arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(PhysicalKeyStatus abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.PointerEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(PointerEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(PointerEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointerEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointerEventArgs obj);
    public static MarshalerArray<PointerEventArgs> CreateMarshalerArray(PointerEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointerEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(PointerEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointerEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointerEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.PointerEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.PointerPoint : ValueType {
    public static IObjectReference CreateMarshaler(PointerPoint obj);
    public static ObjectReferenceValue CreateMarshaler2(PointerPoint obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointerPoint FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointerPoint obj);
    public static MarshalerArray<PointerPoint> CreateMarshalerArray(PointerPoint[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointerPoint[] FromAbiArray(object box);
    public static void CopyAbiArray(PointerPoint[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointerPoint[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointerPoint> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.PointerPointProperties : ValueType {
    public static IObjectReference CreateMarshaler(PointerPointProperties obj);
    public static ObjectReferenceValue CreateMarshaler2(PointerPointProperties obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointerPointProperties FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointerPointProperties obj);
    public static MarshalerArray<PointerPointProperties> CreateMarshalerArray(PointerPointProperties[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointerPointProperties[] FromAbiArray(object box);
    public static void CopyAbiArray(PointerPointProperties[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointerPointProperties[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointerPointProperties> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.PointerPointPropertiesRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.PointerPointRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.PointerPredictor : ValueType {
    public static IObjectReference CreateMarshaler(PointerPredictor obj);
    public static ObjectReferenceValue CreateMarshaler2(PointerPredictor obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointerPredictor FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointerPredictor obj);
    public static MarshalerArray<PointerPredictor> CreateMarshalerArray(PointerPredictor[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointerPredictor[] FromAbiArray(object box);
    public static void CopyAbiArray(PointerPredictor[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointerPredictor[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointerPredictor> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.PointerPredictorRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.RightTappedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(RightTappedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(RightTappedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RightTappedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RightTappedEventArgs obj);
    public static MarshalerArray<RightTappedEventArgs> CreateMarshalerArray(RightTappedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RightTappedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(RightTappedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RightTappedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RightTappedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.RightTappedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.TappedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(TappedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(TappedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TappedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TappedEventArgs obj);
    public static MarshalerArray<TappedEventArgs> CreateMarshalerArray(TappedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TappedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(TappedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TappedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TappedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.TappedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.WindowRectChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(WindowRectChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(WindowRectChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static WindowRectChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(WindowRectChangedEventArgs obj);
    public static MarshalerArray<WindowRectChangedEventArgs> CreateMarshalerArray(WindowRectChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static WindowRectChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(WindowRectChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(WindowRectChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<WindowRectChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.WindowRectChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Input.WindowRectChangingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(WindowRectChangingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(WindowRectChangingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static WindowRectChangingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(WindowRectChangingEventArgs obj);
    public static MarshalerArray<WindowRectChangingEventArgs> CreateMarshalerArray(WindowRectChangingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static WindowRectChangingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(WindowRectChangingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(WindowRectChangingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<WindowRectChangingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Input.WindowRectChangingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("2228EE7E-6D15-563C-8F3C-E8783BA13846")]
internal interface ABI.Microsoft.UI.System.IThemeSettings {
}
internal static class ABI.Microsoft.UI.System.IThemeSettingsMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Changed_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ThemeSettings, object>>> _Changed { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_HighContrast(IObjectReference _obj);
    internal static string get_HighContrastScheme(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ThemeSettings, object>>> MakeChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ThemeSettings, object>>> get__Changed();
    internal static EventSource`1<TypedEventHandler`2<ThemeSettings, object>> Get_Changed2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1586907D-30DB-5F97-8FA1-8940C75DCCC0")]
internal interface ABI.Microsoft.UI.System.IThemeSettingsStatics {
}
internal static class ABI.Microsoft.UI.System.IThemeSettingsStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ThemeSettings CreateForWindowId(IObjectReference _obj, WindowId windowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.System.ThemeSettings : ValueType {
    public static IObjectReference CreateMarshaler(ThemeSettings obj);
    public static ObjectReferenceValue CreateMarshaler2(ThemeSettings obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ThemeSettings FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ThemeSettings obj);
    public static MarshalerArray<ThemeSettings> CreateMarshalerArray(ThemeSettings[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ThemeSettings[] FromAbiArray(object box);
    public static void CopyAbiArray(ThemeSettings[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ThemeSettings[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ThemeSettings> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.System.ThemeSettingsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.AppWindow : ValueType {
    public static IObjectReference CreateMarshaler(AppWindow obj);
    public static ObjectReferenceValue CreateMarshaler2(AppWindow obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AppWindow FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AppWindow obj);
    public static MarshalerArray<AppWindow> CreateMarshalerArray(AppWindow[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AppWindow[] FromAbiArray(object box);
    public static void CopyAbiArray(AppWindow[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AppWindow[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AppWindow> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.AppWindowChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(AppWindowChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(AppWindowChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AppWindowChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AppWindowChangedEventArgs obj);
    public static MarshalerArray<AppWindowChangedEventArgs> CreateMarshalerArray(AppWindowChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AppWindowChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(AppWindowChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AppWindowChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AppWindowChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.AppWindowChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.AppWindowClosingEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(AppWindowClosingEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(AppWindowClosingEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AppWindowClosingEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AppWindowClosingEventArgs obj);
    public static MarshalerArray<AppWindowClosingEventArgs> CreateMarshalerArray(AppWindowClosingEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AppWindowClosingEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(AppWindowClosingEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AppWindowClosingEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AppWindowClosingEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.AppWindowClosingEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.AppWindowPresenter : ValueType {
    public static IObjectReference CreateMarshaler(AppWindowPresenter obj);
    public static ObjectReferenceValue CreateMarshaler2(AppWindowPresenter obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AppWindowPresenter FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AppWindowPresenter obj);
    public static MarshalerArray<AppWindowPresenter> CreateMarshalerArray(AppWindowPresenter[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AppWindowPresenter[] FromAbiArray(object box);
    public static void CopyAbiArray(AppWindowPresenter[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AppWindowPresenter[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AppWindowPresenter> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.AppWindowPresenterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.AppWindowRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.AppWindowTitleBar : ValueType {
    public static IObjectReference CreateMarshaler(AppWindowTitleBar obj);
    public static ObjectReferenceValue CreateMarshaler2(AppWindowTitleBar obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AppWindowTitleBar FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AppWindowTitleBar obj);
    public static MarshalerArray<AppWindowTitleBar> CreateMarshalerArray(AppWindowTitleBar[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AppWindowTitleBar[] FromAbiArray(object box);
    public static void CopyAbiArray(AppWindowTitleBar[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AppWindowTitleBar[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AppWindowTitleBar> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.AppWindowTitleBarRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.CompactOverlayPresenter : ValueType {
    public static IObjectReference CreateMarshaler(CompactOverlayPresenter obj);
    public static ObjectReferenceValue CreateMarshaler2(CompactOverlayPresenter obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompactOverlayPresenter FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompactOverlayPresenter obj);
    public static MarshalerArray<CompactOverlayPresenter> CreateMarshalerArray(CompactOverlayPresenter[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompactOverlayPresenter[] FromAbiArray(object box);
    public static void CopyAbiArray(CompactOverlayPresenter[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompactOverlayPresenter[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompactOverlayPresenter> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.CompactOverlayPresenterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.DisplayArea : ValueType {
    public static IObjectReference CreateMarshaler(DisplayArea obj);
    public static ObjectReferenceValue CreateMarshaler2(DisplayArea obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DisplayArea FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DisplayArea obj);
    public static MarshalerArray<DisplayArea> CreateMarshalerArray(DisplayArea[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DisplayArea[] FromAbiArray(object box);
    public static void CopyAbiArray(DisplayArea[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DisplayArea[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DisplayArea> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.DisplayAreaRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.DisplayAreaWatcher : ValueType {
    public static IObjectReference CreateMarshaler(DisplayAreaWatcher obj);
    public static ObjectReferenceValue CreateMarshaler2(DisplayAreaWatcher obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DisplayAreaWatcher FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DisplayAreaWatcher obj);
    public static MarshalerArray<DisplayAreaWatcher> CreateMarshalerArray(DisplayAreaWatcher[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DisplayAreaWatcher[] FromAbiArray(object box);
    public static void CopyAbiArray(DisplayAreaWatcher[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DisplayAreaWatcher[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DisplayAreaWatcher> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.DisplayAreaWatcherRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.FullScreenPresenter : ValueType {
    public static IObjectReference CreateMarshaler(FullScreenPresenter obj);
    public static ObjectReferenceValue CreateMarshaler2(FullScreenPresenter obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static FullScreenPresenter FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(FullScreenPresenter obj);
    public static MarshalerArray<FullScreenPresenter> CreateMarshalerArray(FullScreenPresenter[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static FullScreenPresenter[] FromAbiArray(object box);
    public static void CopyAbiArray(FullScreenPresenter[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(FullScreenPresenter[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<FullScreenPresenter> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.FullScreenPresenterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("CFA788B3-643B-5C5E-AD4E-321D48A82ACD")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindow {
}
[GuidAttribute("6CD41292-794C-5CAC-8961-210D012C6EBC")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindow2 {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindow2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void MoveInZOrderAtBottom(IObjectReference _obj);
    internal static void MoveInZOrderAtTop(IObjectReference _obj);
    internal static void MoveInZOrderBelow(IObjectReference _obj, WindowId windowId);
    internal static void ResizeClient(IObjectReference _obj, SizeInt32 size);
    internal static void ShowOnceWithRequestedStartupState(IObjectReference _obj);
    internal static SizeInt32 get_ClientSize(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2F260CEA-193D-5DD6-A904-D7649A608D2F")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindow3 {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindow3Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void AssociateWithDispatcherQueue(IObjectReference _obj, DispatcherQueue dispatcherQueue);
    internal static DispatcherQueue get_DispatcherQueue(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs {
}
[GuidAttribute("A773AB4C-A5EC-50E8-98AC-247FE6CD4227")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2 {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_DidZOrderChange(IObjectReference _obj);
    internal static bool get_IsZOrderAtBottom(IObjectReference _obj);
    internal static bool get_IsZOrderAtTop(IObjectReference _obj);
    internal static WindowId get_ZOrderBelowWindowId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_DidPositionChange(IObjectReference _obj);
    internal static bool get_DidPresenterChange(IObjectReference _obj);
    internal static bool get_DidSizeChange(IObjectReference _obj);
    internal static bool get_DidVisibilityChange(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0E09D90B-2261-590B-9AD1-8504991D8754")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgs {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_Cancel(IObjectReference _obj);
    internal static void set_Cancel(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Changed_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Closing_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Destroying_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs>>> _Changed { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs>>> _Closing { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, object>>> _Destroying { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Destroy(IObjectReference _obj);
    internal static void Hide(IObjectReference _obj);
    internal static void Move(IObjectReference _obj, PointInt32 position);
    internal static void MoveAndResize(IObjectReference _obj, RectInt32 rect);
    internal static void MoveAndResize(IObjectReference _obj, RectInt32 rect, DisplayArea displayarea);
    internal static void Resize(IObjectReference _obj, SizeInt32 size);
    internal static void SetIcon(IObjectReference _obj, string iconPath);
    internal static void SetIcon(IObjectReference _obj, IconId iconId);
    internal static void SetPresenter(IObjectReference _obj, AppWindowPresenter appWindowPresenter);
    internal static void SetPresenter(IObjectReference _obj, AppWindowPresenterKind appWindowPresenterKind);
    internal static void Show(IObjectReference _obj);
    internal static void Show(IObjectReference _obj, bool activateWindow);
    internal static WindowId get_Id(IObjectReference _obj);
    internal static bool get_IsShownInSwitchers(IObjectReference _obj);
    internal static void set_IsShownInSwitchers(IObjectReference _obj, bool value);
    internal static bool get_IsVisible(IObjectReference _obj);
    internal static WindowId get_OwnerWindowId(IObjectReference _obj);
    internal static PointInt32 get_Position(IObjectReference _obj);
    internal static AppWindowPresenter get_Presenter(IObjectReference _obj);
    internal static SizeInt32 get_Size(IObjectReference _obj);
    internal static string get_Title(IObjectReference _obj);
    internal static void set_Title(IObjectReference _obj, string value);
    internal static AppWindowTitleBar get_TitleBar(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs>>> MakeChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs>>> get__Changed();
    internal static EventSource`1<TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs>> Get_Changed2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs>>> MakeClosingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs>>> get__Closing();
    internal static EventSource`1<TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs>> Get_Closing2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, object>>> MakeDestroyingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<AppWindow, object>>> get__Destroying();
    internal static EventSource`1<TypedEventHandler`2<AppWindow, object>> Get_Destroying2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BC3042C2-C6C6-5632-8989-FF0EC6D3B40D")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowPresenter {
}
[GuidAttribute("62082E3C-1368-5238-90D1-E932DC718A82")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowPresenterFactory {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowPresenterFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowPresenterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AppWindowPresenterKind get_Kind(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3C315C24-D540-5D72-B518-B226B83627CB")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowStatics {
}
[GuidAttribute("CABC23DB-4606-5D6E-89A5-06DE1D8BD3E2")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowStatics2 {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AppWindow Create(IObjectReference _obj, AppWindowPresenter appWindowPresenter, WindowId ownerWindowId, DispatcherQueue DispatcherQueue);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AppWindow Create(IObjectReference _obj);
    internal static AppWindow Create(IObjectReference _obj, AppWindowPresenter appWindowPresenter);
    internal static AppWindow Create(IObjectReference _obj, AppWindowPresenter appWindowPresenter, WindowId ownerWindowId);
    internal static AppWindow GetFromWindowId(IObjectReference _obj, WindowId windowId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5574EFA2-C91C-5700-A363-539C71A7AAF4")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowTitleBar {
}
[GuidAttribute("86FAED38-748A-5B4B-9CCF-3BA0496C9041")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2 {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static TitleBarHeightOption get_PreferredHeightOption(IObjectReference _obj);
    internal static void set_PreferredHeightOption(IObjectReference _obj, TitleBarHeightOption value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowTitleBarMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void ResetToDefault(IObjectReference _obj);
    internal static void SetDragRectangles(IObjectReference _obj, RectInt32[] value);
    internal static Nullable`1<Color> get_BackgroundColor(IObjectReference _obj);
    internal static void set_BackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonBackgroundColor(IObjectReference _obj);
    internal static void set_ButtonBackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonForegroundColor(IObjectReference _obj);
    internal static void set_ButtonForegroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonHoverBackgroundColor(IObjectReference _obj);
    internal static void set_ButtonHoverBackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonHoverForegroundColor(IObjectReference _obj);
    internal static void set_ButtonHoverForegroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonInactiveBackgroundColor(IObjectReference _obj);
    internal static void set_ButtonInactiveBackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonInactiveForegroundColor(IObjectReference _obj);
    internal static void set_ButtonInactiveForegroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonPressedBackgroundColor(IObjectReference _obj);
    internal static void set_ButtonPressedBackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_ButtonPressedForegroundColor(IObjectReference _obj);
    internal static void set_ButtonPressedForegroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static bool get_ExtendsContentIntoTitleBar(IObjectReference _obj);
    internal static void set_ExtendsContentIntoTitleBar(IObjectReference _obj, bool value);
    internal static Nullable`1<Color> get_ForegroundColor(IObjectReference _obj);
    internal static void set_ForegroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static int get_Height(IObjectReference _obj);
    internal static IconShowOptions get_IconShowOptions(IObjectReference _obj);
    internal static void set_IconShowOptions(IObjectReference _obj, IconShowOptions value);
    internal static Nullable`1<Color> get_InactiveBackgroundColor(IObjectReference _obj);
    internal static void set_InactiveBackgroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static Nullable`1<Color> get_InactiveForegroundColor(IObjectReference _obj);
    internal static void set_InactiveForegroundColor(IObjectReference _obj, Nullable`1<Color> value);
    internal static int get_LeftInset(IObjectReference _obj);
    internal static int get_RightInset(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9E1DA52E-8B15-54D6-A886-F7B9F9D930B2")]
internal interface ABI.Microsoft.UI.Windowing.IAppWindowTitleBarStatics {
}
internal static class ABI.Microsoft.UI.Windowing.IAppWindowTitleBarStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsCustomizationSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EFEB0812-6FC7-5B7D-BD92-CC8F9A6454C9")]
internal interface ABI.Microsoft.UI.Windowing.ICompactOverlayPresenter {
}
internal static class ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompactOverlaySize get_InitialSize(IObjectReference _obj);
    internal static void set_InitialSize(IObjectReference _obj, CompactOverlaySize value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EAB93186-4F6A-52F9-8C03-DA57A1522F6E")]
internal interface ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterStatics {
}
internal static class ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompactOverlayPresenter Create(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5C7E0537-B621-5579-BCAE-A84AA8746167")]
internal interface ABI.Microsoft.UI.Windowing.IDisplayArea {
}
internal static class ABI.Microsoft.UI.Windowing.IDisplayAreaMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DisplayId get_DisplayId(IObjectReference _obj);
    internal static bool get_IsPrimary(IObjectReference _obj);
    internal static RectInt32 get_OuterBounds(IObjectReference _obj);
    internal static RectInt32 get_WorkArea(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("02AB4926-211E-5D49-8E4B-2AF193DAED09")]
internal interface ABI.Microsoft.UI.Windowing.IDisplayAreaStatics {
}
[GuidAttribute("7207AD4B-890D-5DD7-BC18-78FFD9544D8F")]
internal interface ABI.Microsoft.UI.Windowing.IDisplayAreaStatics2 {
}
internal static class ABI.Microsoft.UI.Windowing.IDisplayAreaStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DisplayArea GetFromDisplayId(IObjectReference _obj, DisplayId displayId);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IDisplayAreaStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static DisplayAreaWatcher CreateWatcher(IObjectReference _obj);
    internal static IReadOnlyList`1<DisplayArea> FindAll(IObjectReference _obj);
    internal static DisplayArea GetFromWindowId(IObjectReference _obj, WindowId windowId, DisplayAreaFallback displayAreaFallback);
    internal static DisplayArea GetFromPoint(IObjectReference _obj, PointInt32 point, DisplayAreaFallback displayAreaFallback);
    internal static DisplayArea GetFromRect(IObjectReference _obj, RectInt32 rect, DisplayAreaFallback displayAreaFallback);
    internal static DisplayArea get_Primary(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("83F6562F-D3A0-548B-8E4F-A99BE3D95C9C")]
internal interface ABI.Microsoft.UI.Windowing.IDisplayAreaWatcher {
}
internal static class ABI.Microsoft.UI.Windowing.IDisplayAreaWatcherMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Added_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _EnumerationCompleted_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Removed_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Stopped_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Updated_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> _Added { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>>> _EnumerationCompleted { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> _Removed { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>>> _Stopped { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> _Updated { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Start(IObjectReference _obj);
    internal static void Stop(IObjectReference _obj);
    internal static DisplayAreaWatcherStatus get_Status(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> MakeAddedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> get__Added();
    internal static EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>> Get_Added2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>>> MakeEnumerationCompletedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>>> get__EnumerationCompleted();
    internal static EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>> Get_EnumerationCompleted2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> MakeRemovedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> get__Removed();
    internal static EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>> Get_Removed2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>>> MakeStoppedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>>> get__Stopped();
    internal static EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>> Get_Stopped2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> MakeUpdatedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>>> get__Updated();
    internal static EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>> Get_Updated2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593")]
internal interface ABI.Microsoft.UI.Windowing.IFullScreenPresenter {
}
internal static class ABI.Microsoft.UI.Windowing.IFullScreenPresenterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2EC0D2C1-E086-55BB-A3B2-44942E231C67")]
internal interface ABI.Microsoft.UI.Windowing.IFullScreenPresenterStatics {
}
internal static class ABI.Microsoft.UI.Windowing.IFullScreenPresenterStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static FullScreenPresenter Create(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("21693970-4F4C-5172-9E9D-682A2D174884")]
internal interface ABI.Microsoft.UI.Windowing.IOverlappedPresenter {
}
[GuidAttribute("5C6CCD93-4244-5CD2-B355-ED5EA34DF730")]
internal interface ABI.Microsoft.UI.Windowing.IOverlappedPresenter2 {
}
internal static class ABI.Microsoft.UI.Windowing.IOverlappedPresenter2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Minimize(IObjectReference _obj, bool activateWindow);
    internal static void Restore(IObjectReference _obj, bool activateWindow);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IOverlappedPresenterMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Maximize(IObjectReference _obj);
    internal static void Minimize(IObjectReference _obj);
    internal static void Restore(IObjectReference _obj);
    internal static void SetBorderAndTitleBar(IObjectReference _obj, bool hasBorder, bool hasTitleBar);
    internal static bool get_HasBorder(IObjectReference _obj);
    internal static bool get_HasTitleBar(IObjectReference _obj);
    internal static bool get_IsAlwaysOnTop(IObjectReference _obj);
    internal static void set_IsAlwaysOnTop(IObjectReference _obj, bool value);
    internal static bool get_IsMaximizable(IObjectReference _obj);
    internal static void set_IsMaximizable(IObjectReference _obj, bool value);
    internal static bool get_IsMinimizable(IObjectReference _obj);
    internal static void set_IsMinimizable(IObjectReference _obj, bool value);
    internal static bool get_IsModal(IObjectReference _obj);
    internal static void set_IsModal(IObjectReference _obj, bool value);
    internal static bool get_IsResizable(IObjectReference _obj);
    internal static void set_IsResizable(IObjectReference _obj, bool value);
    internal static OverlappedPresenterState get_State(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("997225E4-7B00-5AEE-A4BE-D4068D1999E2")]
internal interface ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics {
}
[GuidAttribute("ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39")]
internal interface ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics2 {
}
internal static class ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static OverlappedPresenterState get_RequestedStartupState(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.UI.Windowing.IOverlappedPresenterStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static OverlappedPresenter Create(IObjectReference _obj);
    internal static OverlappedPresenter CreateForContextMenu(IObjectReference _obj);
    internal static OverlappedPresenter CreateForDialog(IObjectReference _obj);
    internal static OverlappedPresenter CreateForToolWindow(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.UI.Windowing.OverlappedPresenter : ValueType {
    public static IObjectReference CreateMarshaler(OverlappedPresenter obj);
    public static ObjectReferenceValue CreateMarshaler2(OverlappedPresenter obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static OverlappedPresenter FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(OverlappedPresenter obj);
    public static MarshalerArray<OverlappedPresenter> CreateMarshalerArray(OverlappedPresenter[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static OverlappedPresenter[] FromAbiArray(object box);
    public static void CopyAbiArray(OverlappedPresenter[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(OverlappedPresenter[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<OverlappedPresenter> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.UI.Windowing.OverlappedPresenterRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ContractVersionAttribute("65542")]
public enum Microsoft.Foundation.WindowsAppSDKContract : Enum {
    public int value__;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.DirectX.DirectXAlphaMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.Graphics.DirectX.DirectXAlphaMode : Enum {
    public int value__;
    public static DirectXAlphaMode Unspecified;
    public static DirectXAlphaMode Premultiplied;
    public static DirectXAlphaMode Straight;
    public static DirectXAlphaMode Ignore;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.DirectX.DirectXColorSpace>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.Graphics.DirectX.DirectXColorSpace : Enum {
    public int value__;
    public static DirectXColorSpace RgbFullG22NoneP709;
    public static DirectXColorSpace RgbFullG10NoneP709;
    public static DirectXColorSpace RgbStudioG22NoneP709;
    public static DirectXColorSpace RgbStudioG22NoneP2020;
    public static DirectXColorSpace Reserved;
    public static DirectXColorSpace YccFullG22NoneP709X601;
    public static DirectXColorSpace YccStudioG22LeftP601;
    public static DirectXColorSpace YccFullG22LeftP601;
    public static DirectXColorSpace YccStudioG22LeftP709;
    public static DirectXColorSpace YccFullG22LeftP709;
    public static DirectXColorSpace YccStudioG22LeftP2020;
    public static DirectXColorSpace YccFullG22LeftP2020;
    public static DirectXColorSpace RgbFullG2084NoneP2020;
    public static DirectXColorSpace YccStudioG2084LeftP2020;
    public static DirectXColorSpace RgbStudioG2084NoneP2020;
    public static DirectXColorSpace YccStudioG22TopLeftP2020;
    public static DirectXColorSpace YccStudioG2084TopLeftP2020;
    public static DirectXColorSpace RgbFullG22NoneP2020;
    public static DirectXColorSpace YccStudioGHlgTopLeftP2020;
    public static DirectXColorSpace YccFullGHlgTopLeftP2020;
    public static DirectXColorSpace RgbStudioG24NoneP709;
    public static DirectXColorSpace RgbStudioG24NoneP2020;
    public static DirectXColorSpace YccStudioG24LeftP709;
    public static DirectXColorSpace YccStudioG24LeftP2020;
    public static DirectXColorSpace YccStudioG24TopLeftP2020;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.DirectX.DirectXPixelFormat>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.Graphics.DirectX.DirectXPixelFormat : Enum {
    public int value__;
    public static DirectXPixelFormat Unknown;
    public static DirectXPixelFormat R32G32B32A32Typeless;
    public static DirectXPixelFormat R32G32B32A32Float;
    public static DirectXPixelFormat R32G32B32A32UInt;
    public static DirectXPixelFormat R32G32B32A32Int;
    public static DirectXPixelFormat R32G32B32Typeless;
    public static DirectXPixelFormat R32G32B32Float;
    public static DirectXPixelFormat R32G32B32UInt;
    public static DirectXPixelFormat R32G32B32Int;
    public static DirectXPixelFormat R16G16B16A16Typeless;
    public static DirectXPixelFormat R16G16B16A16Float;
    public static DirectXPixelFormat R16G16B16A16UIntNormalized;
    public static DirectXPixelFormat R16G16B16A16UInt;
    public static DirectXPixelFormat R16G16B16A16IntNormalized;
    public static DirectXPixelFormat R16G16B16A16Int;
    public static DirectXPixelFormat R32G32Typeless;
    public static DirectXPixelFormat R32G32Float;
    public static DirectXPixelFormat R32G32UInt;
    public static DirectXPixelFormat R32G32Int;
    public static DirectXPixelFormat R32G8X24Typeless;
    public static DirectXPixelFormat D32FloatS8X24UInt;
    public static DirectXPixelFormat R32FloatX8X24Typeless;
    public static DirectXPixelFormat X32TypelessG8X24UInt;
    public static DirectXPixelFormat R10G10B10A2Typeless;
    public static DirectXPixelFormat R10G10B10A2UIntNormalized;
    public static DirectXPixelFormat R10G10B10A2UInt;
    public static DirectXPixelFormat R11G11B10Float;
    public static DirectXPixelFormat R8G8B8A8Typeless;
    public static DirectXPixelFormat R8G8B8A8UIntNormalized;
    public static DirectXPixelFormat R8G8B8A8UIntNormalizedSrgb;
    public static DirectXPixelFormat R8G8B8A8UInt;
    public static DirectXPixelFormat R8G8B8A8IntNormalized;
    public static DirectXPixelFormat R8G8B8A8Int;
    public static DirectXPixelFormat R16G16Typeless;
    public static DirectXPixelFormat R16G16Float;
    public static DirectXPixelFormat R16G16UIntNormalized;
    public static DirectXPixelFormat R16G16UInt;
    public static DirectXPixelFormat R16G16IntNormalized;
    public static DirectXPixelFormat R16G16Int;
    public static DirectXPixelFormat R32Typeless;
    public static DirectXPixelFormat D32Float;
    public static DirectXPixelFormat R32Float;
    public static DirectXPixelFormat R32UInt;
    public static DirectXPixelFormat R32Int;
    public static DirectXPixelFormat R24G8Typeless;
    public static DirectXPixelFormat D24UIntNormalizedS8UInt;
    public static DirectXPixelFormat R24UIntNormalizedX8Typeless;
    public static DirectXPixelFormat X24TypelessG8UInt;
    public static DirectXPixelFormat R8G8Typeless;
    public static DirectXPixelFormat R8G8UIntNormalized;
    public static DirectXPixelFormat R8G8UInt;
    public static DirectXPixelFormat R8G8IntNormalized;
    public static DirectXPixelFormat R8G8Int;
    public static DirectXPixelFormat R16Typeless;
    public static DirectXPixelFormat R16Float;
    public static DirectXPixelFormat D16UIntNormalized;
    public static DirectXPixelFormat R16UIntNormalized;
    public static DirectXPixelFormat R16UInt;
    public static DirectXPixelFormat R16IntNormalized;
    public static DirectXPixelFormat R16Int;
    public static DirectXPixelFormat R8Typeless;
    public static DirectXPixelFormat R8UIntNormalized;
    public static DirectXPixelFormat R8UInt;
    public static DirectXPixelFormat R8IntNormalized;
    public static DirectXPixelFormat R8Int;
    public static DirectXPixelFormat A8UIntNormalized;
    public static DirectXPixelFormat R1UIntNormalized;
    public static DirectXPixelFormat R9G9B9E5SharedExponent;
    public static DirectXPixelFormat R8G8B8G8UIntNormalized;
    public static DirectXPixelFormat G8R8G8B8UIntNormalized;
    public static DirectXPixelFormat BC1Typeless;
    public static DirectXPixelFormat BC1UIntNormalized;
    public static DirectXPixelFormat BC1UIntNormalizedSrgb;
    public static DirectXPixelFormat BC2Typeless;
    public static DirectXPixelFormat BC2UIntNormalized;
    public static DirectXPixelFormat BC2UIntNormalizedSrgb;
    public static DirectXPixelFormat BC3Typeless;
    public static DirectXPixelFormat BC3UIntNormalized;
    public static DirectXPixelFormat BC3UIntNormalizedSrgb;
    public static DirectXPixelFormat BC4Typeless;
    public static DirectXPixelFormat BC4UIntNormalized;
    public static DirectXPixelFormat BC4IntNormalized;
    public static DirectXPixelFormat BC5Typeless;
    public static DirectXPixelFormat BC5UIntNormalized;
    public static DirectXPixelFormat BC5IntNormalized;
    public static DirectXPixelFormat B5G6R5UIntNormalized;
    public static DirectXPixelFormat B5G5R5A1UIntNormalized;
    public static DirectXPixelFormat B8G8R8A8UIntNormalized;
    public static DirectXPixelFormat B8G8R8X8UIntNormalized;
    public static DirectXPixelFormat R10G10B10XRBiasA2UIntNormalized;
    public static DirectXPixelFormat B8G8R8A8Typeless;
    public static DirectXPixelFormat B8G8R8A8UIntNormalizedSrgb;
    public static DirectXPixelFormat B8G8R8X8Typeless;
    public static DirectXPixelFormat B8G8R8X8UIntNormalizedSrgb;
    public static DirectXPixelFormat BC6HTypeless;
    public static DirectXPixelFormat BC6H16UnsignedFloat;
    public static DirectXPixelFormat BC6H16Float;
    public static DirectXPixelFormat BC7Typeless;
    public static DirectXPixelFormat BC7UIntNormalized;
    public static DirectXPixelFormat BC7UIntNormalizedSrgb;
    public static DirectXPixelFormat Ayuv;
    public static DirectXPixelFormat Y410;
    public static DirectXPixelFormat Y416;
    public static DirectXPixelFormat NV12;
    public static DirectXPixelFormat P010;
    public static DirectXPixelFormat P016;
    public static DirectXPixelFormat Opaque420;
    public static DirectXPixelFormat Yuy2;
    public static DirectXPixelFormat Y210;
    public static DirectXPixelFormat Y216;
    public static DirectXPixelFormat NV11;
    public static DirectXPixelFormat AI44;
    public static DirectXPixelFormat IA44;
    public static DirectXPixelFormat P8;
    public static DirectXPixelFormat A8P8;
    public static DirectXPixelFormat B4G4R4A4UIntNormalized;
    public static DirectXPixelFormat P208;
    public static DirectXPixelFormat V208;
    public static DirectXPixelFormat V408;
    public static DirectXPixelFormat SamplerFeedbackMinMipOpaque;
    public static DirectXPixelFormat SamplerFeedbackMipRegionUsedOpaque;
    public static DirectXPixelFormat A4B4G4R4;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.DirectX.DirectXPrimitiveTopology>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.Graphics.DirectX.DirectXPrimitiveTopology : Enum {
    public int value__;
    public static DirectXPrimitiveTopology Undefined;
    public static DirectXPrimitiveTopology PointList;
    public static DirectXPrimitiveTopology LineList;
    public static DirectXPrimitiveTopology LineStrip;
    public static DirectXPrimitiveTopology TriangleList;
    public static DirectXPrimitiveTopology TriangleStrip;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Display.DisplayAdvancedColorInfo")]
[DisplayAdvancedColorInfoRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Display.IDisplayAdvancedColorInfo")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
public class Microsoft.Graphics.Display.DisplayAdvancedColorInfo : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Point BluePrimary { get; }
    public DisplayAdvancedColorKind CurrentAdvancedColorKind { get; }
    public Point GreenPrimary { get; }
    public double MaxAverageFullFrameLuminanceInNits { get; }
    public double MaxLuminanceInNits { get; }
    public double MinLuminanceInNits { get; }
    public Point RedPrimary { get; }
    public double SdrWhiteLevelInNits { get; }
    public Point WhitePoint { get; }
    internal DisplayAdvancedColorInfo(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Display_IDisplayAdvancedColorInfo();
    public static DisplayAdvancedColorInfo FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DisplayAdvancedColorInfo x, DisplayAdvancedColorInfo y);
    public static bool op_Inequality(DisplayAdvancedColorInfo x, DisplayAdvancedColorInfo y);
    public sealed virtual bool Equals(DisplayAdvancedColorInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool IsHdrMetadataFormatCurrentlySupported(DisplayHdrMetadataFormat format);
    public bool IsAdvancedColorKindAvailable(DisplayAdvancedColorKind kind);
    public Point get_BluePrimary();
    public DisplayAdvancedColorKind get_CurrentAdvancedColorKind();
    public Point get_GreenPrimary();
    public double get_MaxAverageFullFrameLuminanceInNits();
    public double get_MaxLuminanceInNits();
    public double get_MinLuminanceInNits();
    public Point get_RedPrimary();
    public double get_SdrWhiteLevelInNits();
    public Point get_WhitePoint();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Display.DisplayAdvancedColorKind>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
public enum Microsoft.Graphics.Display.DisplayAdvancedColorKind : Enum {
    public int value__;
    public static DisplayAdvancedColorKind StandardDynamicRange;
    public static DisplayAdvancedColorKind WideColorGamut;
    public static DisplayAdvancedColorKind HighDynamicRange;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Display.DisplayHdrMetadataFormat>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
public enum Microsoft.Graphics.Display.DisplayHdrMetadataFormat : Enum {
    public int value__;
    public static DisplayHdrMetadataFormat Hdr10;
    public static DisplayHdrMetadataFormat Hdr10Plus;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Display.DisplayInformation")]
[DisplayInformationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Display.IDisplayInformation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
public class Microsoft.Graphics.Display.DisplayInformation : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayInformation { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public bool IsStereoEnabled { get; }
    internal DisplayInformation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Display_IDisplayInformation();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Display_IDisplayInformationStatics();
    public static DisplayInformation CreateForWindowId(WindowId windowId);
    public static DisplayInformation CreateForDisplayId(DisplayId displayId);
    public static DisplayInformation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DisplayInformation x, DisplayInformation y);
    public static bool op_Inequality(DisplayInformation x, DisplayInformation y);
    public sealed virtual bool Equals(DisplayInformation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public IAsyncOperation`1<IRandomAccessStream> GetColorProfileAsync();
    public IRandomAccessStream GetColorProfile();
    public DisplayAdvancedColorInfo GetAdvancedColorInfo();
    public void add_AdvancedColorInfoChanged(TypedEventHandler`2<DisplayInformation, object> value);
    public void remove_AdvancedColorInfoChanged(TypedEventHandler`2<DisplayInformation, object> value);
    public void add_ColorProfileChanged(TypedEventHandler`2<DisplayInformation, object> value);
    public void remove_ColorProfileChanged(TypedEventHandler`2<DisplayInformation, object> value);
    public void add_Destroyed(TypedEventHandler`2<DisplayInformation, object> value);
    public void remove_Destroyed(TypedEventHandler`2<DisplayInformation, object> value);
    public void add_IsStereoEnabledChanged(TypedEventHandler`2<DisplayInformation, object> value);
    public void remove_IsStereoEnabledChanged(TypedEventHandler`2<DisplayInformation, object> value);
    public sealed virtual void Dispose();
    public DispatcherQueue get_DispatcherQueue();
    public bool get_IsStereoEnabled();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[GuidAttribute("B44F0F47-7065-5175-BA3E-714489C85A3E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Display.IDisplayAdvancedColorInfo")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
internal interface Microsoft.Graphics.Display.IDisplayAdvancedColorInfo {
    public Point BluePrimary { get; }
    public DisplayAdvancedColorKind CurrentAdvancedColorKind { get; }
    public Point GreenPrimary { get; }
    public double MaxAverageFullFrameLuminanceInNits { get; }
    public double MaxLuminanceInNits { get; }
    public double MinLuminanceInNits { get; }
    public Point RedPrimary { get; }
    public double SdrWhiteLevelInNits { get; }
    public Point WhitePoint { get; }
    public abstract virtual bool IsHdrMetadataFormatCurrentlySupported(DisplayHdrMetadataFormat format);
    public abstract virtual bool IsAdvancedColorKindAvailable(DisplayAdvancedColorKind kind);
    public abstract virtual Point get_BluePrimary();
    public abstract virtual DisplayAdvancedColorKind get_CurrentAdvancedColorKind();
    public abstract virtual Point get_GreenPrimary();
    public abstract virtual double get_MaxAverageFullFrameLuminanceInNits();
    public abstract virtual double get_MaxLuminanceInNits();
    public abstract virtual double get_MinLuminanceInNits();
    public abstract virtual Point get_RedPrimary();
    public abstract virtual double get_SdrWhiteLevelInNits();
    public abstract virtual Point get_WhitePoint();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[GuidAttribute("F0D58D4F-84CE-5B27-B222-4F8F7DC0AAEB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Display.IDisplayInformation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
internal interface Microsoft.Graphics.Display.IDisplayInformation {
    public DispatcherQueue DispatcherQueue { get; }
    public bool IsStereoEnabled { get; }
    public abstract virtual IAsyncOperation`1<IRandomAccessStream> GetColorProfileAsync();
    public abstract virtual IRandomAccessStream GetColorProfile();
    public abstract virtual DisplayAdvancedColorInfo GetAdvancedColorInfo();
    public abstract virtual DispatcherQueue get_DispatcherQueue();
    public abstract virtual bool get_IsStereoEnabled();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AdvancedColorInfoChanged(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AdvancedColorInfoChanged(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ColorProfileChanged(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ColorProfileChanged(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Destroyed(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Destroyed(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_IsStereoEnabledChanged(TypedEventHandler`2<DisplayInformation, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_IsStereoEnabledChanged(TypedEventHandler`2<DisplayInformation, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics")]
[GuidAttribute("2DE85048-37FA-56C0-AC30-47E2044D7EA8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Display.IDisplayInformationStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
internal interface Microsoft.Graphics.Display.IDisplayInformationStatics {
    public abstract virtual DisplayInformation CreateForWindowId(WindowId windowId);
    public abstract virtual DisplayInformation CreateForDisplayId(DisplayId displayId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.ClosableNotifierHandler")]
[WinRTExposedTypeAttribute("ABI.Microsoft.UI.ClosableNotifierHandlerWinRTTypeDetails")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.ClosableNotifierHandler : MulticastDelegate {
    public ClosableNotifierHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.ColorHelper")]
[ColorHelperRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.IColorHelper")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.ColorHelper : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IColorHelperStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IColorHelperStatics2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IColorHelper { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_IColorHelperStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_IColorHelperStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal ColorHelper(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_IColorHelper();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_IColorHelperStatics();
    public static Color FromArgb(byte a, byte r, byte g, byte b);
    private static IObjectReference get__objRef_global__Microsoft_UI_IColorHelperStatics2();
    public static string ToDisplayName(Color color);
    public static ColorHelper FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ColorHelper x, ColorHelper y);
    public static bool op_Inequality(ColorHelper x, ColorHelper y);
    public sealed virtual bool Equals(ColorHelper other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Colors")]
[ColorsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.IColors")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Colors : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IColorsStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IColors { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_IColorsStatics { get; }
    public static Color AliceBlue { get; }
    public static Color AntiqueWhite { get; }
    public static Color Aqua { get; }
    public static Color Aquamarine { get; }
    public static Color Azure { get; }
    public static Color Beige { get; }
    public static Color Bisque { get; }
    public static Color Black { get; }
    public static Color BlanchedAlmond { get; }
    public static Color Blue { get; }
    public static Color BlueViolet { get; }
    public static Color Brown { get; }
    public static Color BurlyWood { get; }
    public static Color CadetBlue { get; }
    public static Color Chartreuse { get; }
    public static Color Chocolate { get; }
    public static Color Coral { get; }
    public static Color CornflowerBlue { get; }
    public static Color Cornsilk { get; }
    public static Color Crimson { get; }
    public static Color Cyan { get; }
    public static Color DarkBlue { get; }
    public static Color DarkCyan { get; }
    public static Color DarkGoldenrod { get; }
    public static Color DarkGray { get; }
    public static Color DarkGreen { get; }
    public static Color DarkKhaki { get; }
    public static Color DarkMagenta { get; }
    public static Color DarkOliveGreen { get; }
    public static Color DarkOrange { get; }
    public static Color DarkOrchid { get; }
    public static Color DarkRed { get; }
    public static Color DarkSalmon { get; }
    public static Color DarkSeaGreen { get; }
    public static Color DarkSlateBlue { get; }
    public static Color DarkSlateGray { get; }
    public static Color DarkTurquoise { get; }
    public static Color DarkViolet { get; }
    public static Color DeepPink { get; }
    public static Color DeepSkyBlue { get; }
    public static Color DimGray { get; }
    public static Color DodgerBlue { get; }
    public static Color Firebrick { get; }
    public static Color FloralWhite { get; }
    public static Color ForestGreen { get; }
    public static Color Fuchsia { get; }
    public static Color Gainsboro { get; }
    public static Color GhostWhite { get; }
    public static Color Gold { get; }
    public static Color Goldenrod { get; }
    public static Color Gray { get; }
    public static Color Green { get; }
    public static Color GreenYellow { get; }
    public static Color Honeydew { get; }
    public static Color HotPink { get; }
    public static Color IndianRed { get; }
    public static Color Indigo { get; }
    public static Color Ivory { get; }
    public static Color Khaki { get; }
    public static Color Lavender { get; }
    public static Color LavenderBlush { get; }
    public static Color LawnGreen { get; }
    public static Color LemonChiffon { get; }
    public static Color LightBlue { get; }
    public static Color LightCoral { get; }
    public static Color LightCyan { get; }
    public static Color LightGoldenrodYellow { get; }
    public static Color LightGray { get; }
    public static Color LightGreen { get; }
    public static Color LightPink { get; }
    public static Color LightSalmon { get; }
    public static Color LightSeaGreen { get; }
    public static Color LightSkyBlue { get; }
    public static Color LightSlateGray { get; }
    public static Color LightSteelBlue { get; }
    public static Color LightYellow { get; }
    public static Color Lime { get; }
    public static Color LimeGreen { get; }
    public static Color Linen { get; }
    public static Color Magenta { get; }
    public static Color Maroon { get; }
    public static Color MediumAquamarine { get; }
    public static Color MediumBlue { get; }
    public static Color MediumOrchid { get; }
    public static Color MediumPurple { get; }
    public static Color MediumSeaGreen { get; }
    public static Color MediumSlateBlue { get; }
    public static Color MediumSpringGreen { get; }
    public static Color MediumTurquoise { get; }
    public static Color MediumVioletRed { get; }
    public static Color MidnightBlue { get; }
    public static Color MintCream { get; }
    public static Color MistyRose { get; }
    public static Color Moccasin { get; }
    public static Color NavajoWhite { get; }
    public static Color Navy { get; }
    public static Color OldLace { get; }
    public static Color Olive { get; }
    public static Color OliveDrab { get; }
    public static Color Orange { get; }
    public static Color OrangeRed { get; }
    public static Color Orchid { get; }
    public static Color PaleGoldenrod { get; }
    public static Color PaleGreen { get; }
    public static Color PaleTurquoise { get; }
    public static Color PaleVioletRed { get; }
    public static Color PapayaWhip { get; }
    public static Color PeachPuff { get; }
    public static Color Peru { get; }
    public static Color Pink { get; }
    public static Color Plum { get; }
    public static Color PowderBlue { get; }
    public static Color Purple { get; }
    public static Color Red { get; }
    public static Color RosyBrown { get; }
    public static Color RoyalBlue { get; }
    public static Color SaddleBrown { get; }
    public static Color Salmon { get; }
    public static Color SandyBrown { get; }
    public static Color SeaGreen { get; }
    public static Color SeaShell { get; }
    public static Color Sienna { get; }
    public static Color Silver { get; }
    public static Color SkyBlue { get; }
    public static Color SlateBlue { get; }
    public static Color SlateGray { get; }
    public static Color Snow { get; }
    public static Color SpringGreen { get; }
    public static Color SteelBlue { get; }
    public static Color Tan { get; }
    public static Color Teal { get; }
    public static Color Thistle { get; }
    public static Color Tomato { get; }
    public static Color Transparent { get; }
    public static Color Turquoise { get; }
    public static Color Violet { get; }
    public static Color Wheat { get; }
    public static Color White { get; }
    public static Color WhiteSmoke { get; }
    public static Color Yellow { get; }
    public static Color YellowGreen { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal Colors(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_IColors();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_IColorsStatics();
    public static Color get_AliceBlue();
    public static Color get_AntiqueWhite();
    public static Color get_Aqua();
    public static Color get_Aquamarine();
    public static Color get_Azure();
    public static Color get_Beige();
    public static Color get_Bisque();
    public static Color get_Black();
    public static Color get_BlanchedAlmond();
    public static Color get_Blue();
    public static Color get_BlueViolet();
    public static Color get_Brown();
    public static Color get_BurlyWood();
    public static Color get_CadetBlue();
    public static Color get_Chartreuse();
    public static Color get_Chocolate();
    public static Color get_Coral();
    public static Color get_CornflowerBlue();
    public static Color get_Cornsilk();
    public static Color get_Crimson();
    public static Color get_Cyan();
    public static Color get_DarkBlue();
    public static Color get_DarkCyan();
    public static Color get_DarkGoldenrod();
    public static Color get_DarkGray();
    public static Color get_DarkGreen();
    public static Color get_DarkKhaki();
    public static Color get_DarkMagenta();
    public static Color get_DarkOliveGreen();
    public static Color get_DarkOrange();
    public static Color get_DarkOrchid();
    public static Color get_DarkRed();
    public static Color get_DarkSalmon();
    public static Color get_DarkSeaGreen();
    public static Color get_DarkSlateBlue();
    public static Color get_DarkSlateGray();
    public static Color get_DarkTurquoise();
    public static Color get_DarkViolet();
    public static Color get_DeepPink();
    public static Color get_DeepSkyBlue();
    public static Color get_DimGray();
    public static Color get_DodgerBlue();
    public static Color get_Firebrick();
    public static Color get_FloralWhite();
    public static Color get_ForestGreen();
    public static Color get_Fuchsia();
    public static Color get_Gainsboro();
    public static Color get_GhostWhite();
    public static Color get_Gold();
    public static Color get_Goldenrod();
    public static Color get_Gray();
    public static Color get_Green();
    public static Color get_GreenYellow();
    public static Color get_Honeydew();
    public static Color get_HotPink();
    public static Color get_IndianRed();
    public static Color get_Indigo();
    public static Color get_Ivory();
    public static Color get_Khaki();
    public static Color get_Lavender();
    public static Color get_LavenderBlush();
    public static Color get_LawnGreen();
    public static Color get_LemonChiffon();
    public static Color get_LightBlue();
    public static Color get_LightCoral();
    public static Color get_LightCyan();
    public static Color get_LightGoldenrodYellow();
    public static Color get_LightGray();
    public static Color get_LightGreen();
    public static Color get_LightPink();
    public static Color get_LightSalmon();
    public static Color get_LightSeaGreen();
    public static Color get_LightSkyBlue();
    public static Color get_LightSlateGray();
    public static Color get_LightSteelBlue();
    public static Color get_LightYellow();
    public static Color get_Lime();
    public static Color get_LimeGreen();
    public static Color get_Linen();
    public static Color get_Magenta();
    public static Color get_Maroon();
    public static Color get_MediumAquamarine();
    public static Color get_MediumBlue();
    public static Color get_MediumOrchid();
    public static Color get_MediumPurple();
    public static Color get_MediumSeaGreen();
    public static Color get_MediumSlateBlue();
    public static Color get_MediumSpringGreen();
    public static Color get_MediumTurquoise();
    public static Color get_MediumVioletRed();
    public static Color get_MidnightBlue();
    public static Color get_MintCream();
    public static Color get_MistyRose();
    public static Color get_Moccasin();
    public static Color get_NavajoWhite();
    public static Color get_Navy();
    public static Color get_OldLace();
    public static Color get_Olive();
    public static Color get_OliveDrab();
    public static Color get_Orange();
    public static Color get_OrangeRed();
    public static Color get_Orchid();
    public static Color get_PaleGoldenrod();
    public static Color get_PaleGreen();
    public static Color get_PaleTurquoise();
    public static Color get_PaleVioletRed();
    public static Color get_PapayaWhip();
    public static Color get_PeachPuff();
    public static Color get_Peru();
    public static Color get_Pink();
    public static Color get_Plum();
    public static Color get_PowderBlue();
    public static Color get_Purple();
    public static Color get_Red();
    public static Color get_RosyBrown();
    public static Color get_RoyalBlue();
    public static Color get_SaddleBrown();
    public static Color get_Salmon();
    public static Color get_SandyBrown();
    public static Color get_SeaGreen();
    public static Color get_SeaShell();
    public static Color get_Sienna();
    public static Color get_Silver();
    public static Color get_SkyBlue();
    public static Color get_SlateBlue();
    public static Color get_SlateGray();
    public static Color get_Snow();
    public static Color get_SpringGreen();
    public static Color get_SteelBlue();
    public static Color get_Tan();
    public static Color get_Teal();
    public static Color get_Thistle();
    public static Color get_Tomato();
    public static Color get_Transparent();
    public static Color get_Turquoise();
    public static Color get_Violet();
    public static Color get_Wheat();
    public static Color get_White();
    public static Color get_WhiteSmoke();
    public static Color get_Yellow();
    public static Color get_YellowGreen();
    public static Colors FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Colors x, Colors y);
    public static bool op_Inequality(Colors x, Colors y);
    public sealed virtual bool Equals(Colors other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.AmbientLight")]
[AmbientLightRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IAmbientLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.AmbientLight : CompositionLight {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IAmbientLight2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IAmbientLight { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IAmbientLight2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color Color { get; public set; }
    public float Intensity { get; public set; }
    internal AmbientLight(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IAmbientLight();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IAmbientLight2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IAmbientLight2();
    public static AmbientLight FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AmbientLight x, AmbientLight y);
    public static bool op_Inequality(AmbientLight x, AmbientLight y);
    public sealed virtual bool Equals(AmbientLight other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Intensity();
    public void set_Intensity(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.AnimationController")]
[AnimationControllerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IAnimationController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.AnimationController : CompositionObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IAnimationControllerStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IAnimationController { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IAnimationControllerStatics { get; }
    public static float MaxPlaybackRate { get; }
    public static float MinPlaybackRate { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float PlaybackRate { get; public set; }
    public float Progress { get; public set; }
    public AnimationControllerProgressBehavior ProgressBehavior { get; public set; }
    internal AnimationController(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IAnimationController();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IAnimationControllerStatics();
    public static float get_MaxPlaybackRate();
    public static float get_MinPlaybackRate();
    public static AnimationController FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AnimationController x, AnimationController y);
    public static bool op_Inequality(AnimationController x, AnimationController y);
    public sealed virtual bool Equals(AnimationController other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Pause();
    public void Resume();
    public float get_PlaybackRate();
    public void set_PlaybackRate(float value);
    public float get_Progress();
    public void set_Progress(float value);
    public AnimationControllerProgressBehavior get_ProgressBehavior();
    public void set_ProgressBehavior(AnimationControllerProgressBehavior value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.AnimationControllerProgressBehavior>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.AnimationControllerProgressBehavior : Enum {
    public int value__;
    public static AnimationControllerProgressBehavior Default;
    public static AnimationControllerProgressBehavior IncludesDelayTime;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.AnimationDelayBehavior>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.AnimationDelayBehavior : Enum {
    public int value__;
    public static AnimationDelayBehavior SetInitialValueAfterDelay;
    public static AnimationDelayBehavior SetInitialValueBeforeDelay;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.AnimationDirection>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.AnimationDirection : Enum {
    public int value__;
    public static AnimationDirection Normal;
    public static AnimationDirection Reverse;
    public static AnimationDirection Alternate;
    public static AnimationDirection AlternateReverse;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.AnimationIterationBehavior>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.AnimationIterationBehavior : Enum {
    public int value__;
    public static AnimationIterationBehavior Count;
    public static AnimationIterationBehavior Forever;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.AnimationPropertyAccessMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.AnimationPropertyAccessMode : Enum {
    public int value__;
    public static AnimationPropertyAccessMode None;
    public static AnimationPropertyAccessMode ReadOnly;
    public static AnimationPropertyAccessMode WriteOnly;
    public static AnimationPropertyAccessMode ReadWrite;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.AnimationPropertyInfo")]
[AnimationPropertyInfoRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IAnimationPropertyInfo")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.AnimationPropertyInfo : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IAnimationPropertyInfo2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IAnimationPropertyInfo { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IAnimationPropertyInfo2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public AnimationPropertyAccessMode AccessMode { get; public set; }
    internal AnimationPropertyInfo(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IAnimationPropertyInfo();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IAnimationPropertyInfo2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IAnimationPropertyInfo2();
    public static AnimationPropertyInfo FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AnimationPropertyInfo x, AnimationPropertyInfo y);
    public static bool op_Inequality(AnimationPropertyInfo x, AnimationPropertyInfo y);
    public sealed virtual bool Equals(AnimationPropertyInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionObject GetResolvedCompositionObject();
    public string GetResolvedCompositionObjectProperty();
    public AnimationPropertyAccessMode get_AccessMode();
    public void set_AccessMode(AnimationPropertyAccessMode value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.AnimationStopBehavior>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.AnimationStopBehavior : Enum {
    public int value__;
    public static AnimationStopBehavior LeaveCurrentValue;
    public static AnimationStopBehavior SetToInitialValue;
    public static AnimationStopBehavior SetToFinalValue;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.BackEasingFunction")]
[BackEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IBackEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.BackEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IBackEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float Amplitude { get; }
    public CompositionEasingFunctionMode Mode { get; }
    internal BackEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IBackEasingFunction();
    public static BackEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BackEasingFunction x, BackEasingFunction y);
    public static bool op_Inequality(BackEasingFunction x, BackEasingFunction y);
    public sealed virtual bool Equals(BackEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_Amplitude();
    public CompositionEasingFunctionMode get_Mode();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.BooleanKeyFrameAnimation")]
[BooleanKeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IBooleanKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.BooleanKeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IBooleanKeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal BooleanKeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IBooleanKeyFrameAnimation();
    public static BooleanKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BooleanKeyFrameAnimation x, BooleanKeyFrameAnimation y);
    public static bool op_Inequality(BooleanKeyFrameAnimation x, BooleanKeyFrameAnimation y);
    public sealed virtual bool Equals(BooleanKeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, bool value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.BounceEasingFunction")]
[BounceEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IBounceEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.BounceEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IBounceEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Bounces { get; }
    public float Bounciness { get; }
    public CompositionEasingFunctionMode Mode { get; }
    internal BounceEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IBounceEasingFunction();
    public static BounceEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BounceEasingFunction x, BounceEasingFunction y);
    public static bool op_Inequality(BounceEasingFunction x, BounceEasingFunction y);
    public sealed virtual bool Equals(BounceEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public int get_Bounces();
    public float get_Bounciness();
    public CompositionEasingFunctionMode get_Mode();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.BounceScalarNaturalMotionAnimation")]
[BounceScalarNaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IBounceScalarNaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.BounceScalarNaturalMotionAnimation : ScalarNaturalMotionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IBounceScalarNaturalMotionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float Acceleration { get; public set; }
    public float Restitution { get; public set; }
    internal BounceScalarNaturalMotionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IBounceScalarNaturalMotionAnimation();
    public static BounceScalarNaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BounceScalarNaturalMotionAnimation x, BounceScalarNaturalMotionAnimation y);
    public static bool op_Inequality(BounceScalarNaturalMotionAnimation x, BounceScalarNaturalMotionAnimation y);
    public sealed virtual bool Equals(BounceScalarNaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_Acceleration();
    public void set_Acceleration(float value);
    public float get_Restitution();
    public void set_Restitution(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.BounceVector2NaturalMotionAnimation")]
[BounceVector2NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IBounceVector2NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.BounceVector2NaturalMotionAnimation : Vector2NaturalMotionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IBounceVector2NaturalMotionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float Acceleration { get; public set; }
    public float Restitution { get; public set; }
    internal BounceVector2NaturalMotionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IBounceVector2NaturalMotionAnimation();
    public static BounceVector2NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BounceVector2NaturalMotionAnimation x, BounceVector2NaturalMotionAnimation y);
    public static bool op_Inequality(BounceVector2NaturalMotionAnimation x, BounceVector2NaturalMotionAnimation y);
    public sealed virtual bool Equals(BounceVector2NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_Acceleration();
    public void set_Acceleration(float value);
    public float get_Restitution();
    public void set_Restitution(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.BounceVector3NaturalMotionAnimation")]
[BounceVector3NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IBounceVector3NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.BounceVector3NaturalMotionAnimation : Vector3NaturalMotionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IBounceVector3NaturalMotionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float Acceleration { get; public set; }
    public float Restitution { get; public set; }
    internal BounceVector3NaturalMotionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IBounceVector3NaturalMotionAnimation();
    public static BounceVector3NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BounceVector3NaturalMotionAnimation x, BounceVector3NaturalMotionAnimation y);
    public static bool op_Inequality(BounceVector3NaturalMotionAnimation x, BounceVector3NaturalMotionAnimation y);
    public sealed virtual bool Equals(BounceVector3NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_Acceleration();
    public void set_Acceleration(float value);
    public float get_Restitution();
    public void set_Restitution(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CircleEasingFunction")]
[CircleEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICircleEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CircleEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICircleEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionEasingFunctionMode Mode { get; }
    internal CircleEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICircleEasingFunction();
    public static CircleEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CircleEasingFunction x, CircleEasingFunction y);
    public static bool op_Inequality(CircleEasingFunction x, CircleEasingFunction y);
    public sealed virtual bool Equals(CircleEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionEasingFunctionMode get_Mode();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ColorKeyFrameAnimation")]
[ColorKeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IColorKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ColorKeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IColorKeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionColorSpace InterpolationColorSpace { get; public set; }
    internal ColorKeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IColorKeyFrameAnimation();
    public static ColorKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ColorKeyFrameAnimation x, ColorKeyFrameAnimation y);
    public static bool op_Inequality(ColorKeyFrameAnimation x, ColorKeyFrameAnimation y);
    public sealed virtual bool Equals(ColorKeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, Color value);
    public void InsertKeyFrame(float normalizedProgressKey, Color value, CompositionEasingFunction easingFunction);
    public CompositionColorSpace get_InterpolationColorSpace();
    public void set_InterpolationColorSpace(CompositionColorSpace value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionAnimation")]
[CompositionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionAnimation : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimation;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimation2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimation3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimation4;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimationFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimation { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimation2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimation3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimation4 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimationFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public InitialValueExpressionCollection InitialValueExpressions { get; }
    public string Target { get; public set; }
    protected internal CompositionAnimation(IObjectReference objRef);
    protected CompositionAnimation(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionAnimation();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimation();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionAnimation2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimation2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionAnimation3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimation3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionAnimation4();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimation4();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimationFactory();
    public static CompositionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionAnimation x, CompositionAnimation y);
    public static bool op_Inequality(CompositionAnimation x, CompositionAnimation y);
    public sealed virtual bool Equals(CompositionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void ClearAllParameters();
    public void ClearParameter(string key);
    public void SetColorParameter(string key, Color value);
    public void SetMatrix3x2Parameter(string key, Matrix3x2 value);
    public void SetMatrix4x4Parameter(string key, Matrix4x4 value);
    public void SetQuaternionParameter(string key, Quaternion value);
    public void SetReferenceParameter(string key, CompositionObject compositionObject);
    public void SetScalarParameter(string key, float value);
    public void SetVector2Parameter(string key, Vector2 value);
    public void SetVector3Parameter(string key, Vector3 value);
    public void SetVector4Parameter(string key, Vector4 value);
    public void SetBooleanParameter(string key, bool value);
    public void SetExpressionReferenceParameter(string parameterName, IAnimationObject source);
    public InitialValueExpressionCollection get_InitialValueExpressions();
    public string get_Target();
    public void set_Target(string value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionAnimationGroup")]
[CompositionAnimationGroupRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionAnimationGroup")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionAnimationGroup : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_CompositionAnimation_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimationGroup { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_CompositionAnimation_ { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    internal CompositionAnimationGroup(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimationGroup();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_CompositionAnimation_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_CompositionAnimation_();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionAnimationBase();
    public static CompositionAnimationGroup FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionAnimationGroup x, CompositionAnimationGroup y);
    public static bool op_Inequality(CompositionAnimationGroup x, CompositionAnimationGroup y);
    public sealed virtual bool Equals(CompositionAnimationGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Add(CompositionAnimation value);
    public void Remove(CompositionAnimation value);
    public void RemoveAll();
    public sealed virtual IEnumerator`1<CompositionAnimation> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public static class Microsoft.UI.Composition.CompositionApiInformation : object {
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionApiInformationStatics;
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionApiInformationStatics { get; }
    public static ulong ApiVersion { get; }
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionApiInformationStatics();
    public static ulong get_ApiVersion();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionBackdropBrush")]
[CompositionBackdropBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionBackdropBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionBackdropBrush : CompositionBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionBackdropBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal CompositionBackdropBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionBackdropBrush();
    public static CompositionBackdropBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionBackdropBrush x, CompositionBackdropBrush y);
    public static bool op_Inequality(CompositionBackdropBrush x, CompositionBackdropBrush y);
    public sealed virtual bool Equals(CompositionBackdropBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionBackfaceVisibility>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionBackfaceVisibility : Enum {
    public int value__;
    public static CompositionBackfaceVisibility Inherit;
    public static CompositionBackfaceVisibility Visible;
    public static CompositionBackfaceVisibility Hidden;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionBatchCompletedEventArgs")]
[CompositionBatchCompletedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionBatchCompletedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionBatchCompletedEventArgs : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionBatchCompletedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal CompositionBatchCompletedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionBatchCompletedEventArgs();
    public static CompositionBatchCompletedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionBatchCompletedEventArgs x, CompositionBatchCompletedEventArgs y);
    public static bool op_Inequality(CompositionBatchCompletedEventArgs x, CompositionBatchCompletedEventArgs y);
    public sealed virtual bool Equals(CompositionBatchCompletedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionBatchTypes>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionBatchTypes : Enum {
    public UInt32 value__;
    public static CompositionBatchTypes None;
    public static CompositionBatchTypes Animation;
    public static CompositionBatchTypes Effect;
    public static CompositionBatchTypes InfiniteAnimation;
    public static CompositionBatchTypes AllAnimations;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionBitmapInterpolationMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionBitmapInterpolationMode : Enum {
    public int value__;
    public static CompositionBitmapInterpolationMode NearestNeighbor;
    public static CompositionBitmapInterpolationMode Linear;
    public static CompositionBitmapInterpolationMode MagLinearMinLinearMipLinear;
    public static CompositionBitmapInterpolationMode MagLinearMinLinearMipNearest;
    public static CompositionBitmapInterpolationMode MagLinearMinNearestMipLinear;
    public static CompositionBitmapInterpolationMode MagLinearMinNearestMipNearest;
    public static CompositionBitmapInterpolationMode MagNearestMinLinearMipLinear;
    public static CompositionBitmapInterpolationMode MagNearestMinLinearMipNearest;
    public static CompositionBitmapInterpolationMode MagNearestMinNearestMipLinear;
    public static CompositionBitmapInterpolationMode MagNearestMinNearestMipNearest;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionBorderMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionBorderMode : Enum {
    public int value__;
    public static CompositionBorderMode Inherit;
    public static CompositionBorderMode Soft;
    public static CompositionBorderMode Hard;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionBrush")]
[CompositionBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionBrush : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionBrush;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionBrushFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionBrush { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionBrushFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal CompositionBrush(IObjectReference objRef);
    protected CompositionBrush(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionBrush();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionBrush();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionBrushFactory();
    public static CompositionBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionBrush x, CompositionBrush y);
    public static bool op_Inequality(CompositionBrush x, CompositionBrush y);
    public sealed virtual bool Equals(CompositionBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionCapabilities")]
[CompositionCapabilitiesRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionCapabilities")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionCapabilities : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_CompositionCapabilities;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionCapabilities { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_CompositionCapabilities { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal CompositionCapabilities(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionCapabilities();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_CompositionCapabilities();
    public static CompositionCapabilities FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionCapabilities x, CompositionCapabilities y);
    public static bool op_Inequality(CompositionCapabilities x, CompositionCapabilities y);
    public sealed virtual bool Equals(CompositionCapabilities other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool AreEffectsSupported();
    public bool AreEffectsFast();
    public void add_Changed(TypedEventHandler`2<CompositionCapabilities, object> value);
    public void remove_Changed(TypedEventHandler`2<CompositionCapabilities, object> value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionClip")]
[CompositionClipRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionClip : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionClip;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionClip2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionClipFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionClip { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionClip2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionClipFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 AnchorPoint { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    protected internal CompositionClip(IObjectReference objRef);
    protected CompositionClip(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionClip();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionClip();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionClip2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionClip2();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionClipFactory();
    public static CompositionClip FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionClip x, CompositionClip y);
    public static bool op_Inequality(CompositionClip x, CompositionClip y);
    public sealed virtual bool Equals(CompositionClip other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
    public Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionColorBrush")]
[CompositionColorBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionColorBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionColorBrush : CompositionBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionColorBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color Color { get; public set; }
    internal CompositionColorBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionColorBrush();
    public static CompositionColorBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionColorBrush x, CompositionColorBrush y);
    public static bool op_Inequality(CompositionColorBrush x, CompositionColorBrush y);
    public sealed virtual bool Equals(CompositionColorBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Color get_Color();
    public void set_Color(Color value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionColorGradientStop")]
[CompositionColorGradientStopRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionColorGradientStop")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionColorGradientStop : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionColorGradientStop { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color Color { get; public set; }
    public float Offset { get; public set; }
    internal CompositionColorGradientStop(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionColorGradientStop();
    public static CompositionColorGradientStop FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionColorGradientStop x, CompositionColorGradientStop y);
    public static bool op_Inequality(CompositionColorGradientStop x, CompositionColorGradientStop y);
    public sealed virtual bool Equals(CompositionColorGradientStop other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Offset();
    public void set_Offset(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[DefaultMemberAttribute("ListItem")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionColorGradientStopCollection")]
[CompositionColorGradientStopCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionColorGradientStopCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionColorGradientStopCollection : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_CompositionColorGradientStop_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IList_CompositionColorGradientStop_;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionColorGradientStopCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_CompositionColorGradientStop_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IList_CompositionColorGradientStop_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public CompositionColorGradientStop ListItem { get; public set; }
    internal CompositionColorGradientStopCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionColorGradientStopCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_CompositionColorGradientStop_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_CompositionColorGradientStop_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IList_CompositionColorGradientStop_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IList_CompositionColorGradientStop_();
    public static CompositionColorGradientStopCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionColorGradientStopCollection x, CompositionColorGradientStopCollection y);
    public static bool op_Inequality(CompositionColorGradientStopCollection x, CompositionColorGradientStopCollection y);
    public sealed virtual bool Equals(CompositionColorGradientStopCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual IEnumerator`1<CompositionColorGradientStop> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public CompositionColorGradientStop get_ListItem(int index);
    public void set_ListItem(int index, CompositionColorGradientStop value);
    public sealed virtual int IndexOf(CompositionColorGradientStop item);
    public sealed virtual void Insert(int index, CompositionColorGradientStop item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(CompositionColorGradientStop item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(CompositionColorGradientStop item);
    public sealed virtual void CopyTo(CompositionColorGradientStop[] array, int arrayIndex);
    public sealed virtual bool Remove(CompositionColorGradientStop item);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
    private sealed virtual override CompositionColorGradientStop System.Collections.Generic.IList<Microsoft.UI.Composition.CompositionColorGradientStop>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.UI.Composition.CompositionColorGradientStop>.set_Item(int index, CompositionColorGradientStop value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionColorSpace>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionColorSpace : Enum {
    public int value__;
    public static CompositionColorSpace Auto;
    public static CompositionColorSpace Hsl;
    public static CompositionColorSpace Rgb;
    public static CompositionColorSpace HslLinear;
    public static CompositionColorSpace RgbLinear;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionCommitBatch")]
[CompositionCommitBatchRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionCommitBatch")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionCommitBatch : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionCommitBatch { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public bool IsActive { get; }
    public bool IsEnded { get; }
    internal CompositionCommitBatch(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionCommitBatch();
    public static CompositionCommitBatch FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionCommitBatch x, CompositionCommitBatch y);
    public static bool op_Inequality(CompositionCommitBatch x, CompositionCommitBatch y);
    public sealed virtual bool Equals(CompositionCommitBatch other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void add_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    public void remove_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    public bool get_IsActive();
    public bool get_IsEnded();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionCompositeMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionCompositeMode : Enum {
    public int value__;
    public static CompositionCompositeMode Inherit;
    public static CompositionCompositeMode SourceOver;
    public static CompositionCompositeMode DestinationInvert;
    public static CompositionCompositeMode MinBlend;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionContainerShape")]
[CompositionContainerShapeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionContainerShape")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionContainerShape : CompositionShape {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionContainerShape { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionShapeCollection Shapes { get; }
    internal CompositionContainerShape(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionContainerShape();
    public static CompositionContainerShape FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionContainerShape x, CompositionContainerShape y);
    public static bool op_Inequality(CompositionContainerShape x, CompositionContainerShape y);
    public sealed virtual bool Equals(CompositionContainerShape other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionShapeCollection get_Shapes();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionDrawingSurface")]
[CompositionDrawingSurfaceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionDrawingSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionDrawingSurface : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionSurface;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurfaceFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSurface { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurfaceFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public DirectXAlphaMode AlphaMode { get; }
    public DirectXPixelFormat PixelFormat { get; }
    public Size Size { get; }
    public SizeInt32 SizeInt32 { get; }
    protected internal CompositionDrawingSurface(IObjectReference objRef);
    protected CompositionDrawingSurface(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurface2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionSurface();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSurface();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionDrawingSurfaceFactory();
    public static CompositionDrawingSurface FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionDrawingSurface x, CompositionDrawingSurface y);
    public static bool op_Inequality(CompositionDrawingSurface x, CompositionDrawingSurface y);
    public sealed virtual bool Equals(CompositionDrawingSurface other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Resize(SizeInt32 sizePixels);
    public void Scroll(PointInt32 offset);
    public void Scroll(PointInt32 offset, RectInt32 scrollRect);
    public void ScrollWithClip(PointInt32 offset, RectInt32 clipRect);
    public void ScrollWithClip(PointInt32 offset, RectInt32 clipRect, RectInt32 scrollRect);
    public DirectXAlphaMode get_AlphaMode();
    public DirectXPixelFormat get_PixelFormat();
    public Size get_Size();
    public SizeInt32 get_SizeInt32();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionDropShadowSourcePolicy>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionDropShadowSourcePolicy : Enum {
    public int value__;
    public static CompositionDropShadowSourcePolicy Default;
    public static CompositionDropShadowSourcePolicy InheritFromVisualContent;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionEasingFunction")]
[CompositionEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionEasingFunction : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionEasingFunction;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionEasingFunctionFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionEasingFunctionStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEasingFunction { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEasingFunctionFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEasingFunctionStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal CompositionEasingFunction(IObjectReference objRef);
    protected CompositionEasingFunction(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionEasingFunction();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEasingFunction();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEasingFunctionFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEasingFunctionStatics();
    public static CubicBezierEasingFunction CreateCubicBezierEasingFunction(Compositor owner, Vector2 controlPoint1, Vector2 controlPoint2);
    public static LinearEasingFunction CreateLinearEasingFunction(Compositor owner);
    public static StepEasingFunction CreateStepEasingFunction(Compositor owner);
    public static StepEasingFunction CreateStepEasingFunction(Compositor owner, int stepCount);
    public static BackEasingFunction CreateBackEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float amplitude);
    public static BounceEasingFunction CreateBounceEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, int bounces, float bounciness);
    public static CircleEasingFunction CreateCircleEasingFunction(Compositor owner, CompositionEasingFunctionMode mode);
    public static ElasticEasingFunction CreateElasticEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, int oscillations, float springiness);
    public static ExponentialEasingFunction CreateExponentialEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float exponent);
    public static PowerEasingFunction CreatePowerEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float power);
    public static SineEasingFunction CreateSineEasingFunction(Compositor owner, CompositionEasingFunctionMode mode);
    public static CompositionEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionEasingFunction x, CompositionEasingFunction y);
    public static bool op_Inequality(CompositionEasingFunction x, CompositionEasingFunction y);
    public sealed virtual bool Equals(CompositionEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionEasingFunctionMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionEasingFunctionMode : Enum {
    public int value__;
    public static CompositionEasingFunctionMode In;
    public static CompositionEasingFunctionMode Out;
    public static CompositionEasingFunctionMode InOut;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionEffectBrush")]
[CompositionEffectBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionEffectBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionEffectBrush : CompositionBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEffectBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal CompositionEffectBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEffectBrush();
    public static CompositionEffectBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionEffectBrush x, CompositionEffectBrush y);
    public static bool op_Inequality(CompositionEffectBrush x, CompositionEffectBrush y);
    public sealed virtual bool Equals(CompositionEffectBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionBrush GetSourceParameter(string name);
    public void SetSourceParameter(string name, CompositionBrush source);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionEffectFactory")]
[CompositionEffectFactoryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionEffectFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionEffectFactory : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEffectFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Exception ExtendedError { get; }
    public CompositionEffectFactoryLoadStatus LoadStatus { get; }
    internal CompositionEffectFactory(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEffectFactory();
    public static CompositionEffectFactory FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionEffectFactory x, CompositionEffectFactory y);
    public static bool op_Inequality(CompositionEffectFactory x, CompositionEffectFactory y);
    public sealed virtual bool Equals(CompositionEffectFactory other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionEffectBrush CreateBrush();
    public Exception get_ExtendedError();
    public CompositionEffectFactoryLoadStatus get_LoadStatus();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionEffectFactoryLoadStatus>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionEffectFactoryLoadStatus : Enum {
    public int value__;
    public static CompositionEffectFactoryLoadStatus Success;
    public static CompositionEffectFactoryLoadStatus EffectTooComplex;
    public static CompositionEffectFactoryLoadStatus Pending;
    public static CompositionEffectFactoryLoadStatus Other;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionEffectSourceParameter")]
[CompositionEffectSourceParameterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionEffectSourceParameter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionEffectSourceParameter : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionEffectSourceParameterFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEffectSourceParameter { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEffectSourceParameterFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Name { get; }
    public CompositionEffectSourceParameter(string name);
    internal CompositionEffectSourceParameter(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEffectSourceParameter();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEffectSourceParameterFactory();
    public static CompositionEffectSourceParameter FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionEffectSourceParameter x, CompositionEffectSourceParameter y);
    public static bool op_Inequality(CompositionEffectSourceParameter x, CompositionEffectSourceParameter y);
    public sealed virtual bool Equals(CompositionEffectSourceParameter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public string get_Name();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionEllipseGeometry")]
[CompositionEllipseGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionEllipseGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionEllipseGeometry : CompositionGeometry {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionEllipseGeometry { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 Center { get; public set; }
    public Vector2 Radius { get; public set; }
    internal CompositionEllipseGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionEllipseGeometry();
    public static CompositionEllipseGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionEllipseGeometry x, CompositionEllipseGeometry y);
    public static bool op_Inequality(CompositionEllipseGeometry x, CompositionEllipseGeometry y);
    public sealed virtual bool Equals(CompositionEllipseGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_Center();
    public void set_Center(Vector2 value);
    public Vector2 get_Radius();
    public void set_Radius(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionGeometricClip")]
[CompositionGeometricClipRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionGeometricClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionGeometricClip : CompositionClip {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGeometricClip { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionGeometry Geometry { get; public set; }
    public CompositionViewBox ViewBox { get; public set; }
    internal CompositionGeometricClip(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGeometricClip();
    public static CompositionGeometricClip FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionGeometricClip x, CompositionGeometricClip y);
    public static bool op_Inequality(CompositionGeometricClip x, CompositionGeometricClip y);
    public sealed virtual bool Equals(CompositionGeometricClip other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionGeometry get_Geometry();
    public void set_Geometry(CompositionGeometry value);
    public CompositionViewBox get_ViewBox();
    public void set_ViewBox(CompositionViewBox value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionGeometry")]
[CompositionGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionGeometry : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGeometry;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGeometryFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGeometry { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGeometryFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float TrimEnd { get; public set; }
    public float TrimOffset { get; public set; }
    public float TrimStart { get; public set; }
    protected internal CompositionGeometry(IObjectReference objRef);
    protected CompositionGeometry(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionGeometry();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGeometry();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGeometryFactory();
    public static CompositionGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionGeometry x, CompositionGeometry y);
    public static bool op_Inequality(CompositionGeometry x, CompositionGeometry y);
    public sealed virtual bool Equals(CompositionGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_TrimEnd();
    public void set_TrimEnd(float value);
    public float get_TrimOffset();
    public void set_TrimOffset(float value);
    public float get_TrimStart();
    public void set_TrimStart(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionGetValueStatus>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionGetValueStatus : Enum {
    public int value__;
    public static CompositionGetValueStatus Succeeded;
    public static CompositionGetValueStatus TypeMismatch;
    public static CompositionGetValueStatus NotFound;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionGradientBrush")]
[CompositionGradientBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionGradientBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionGradientBrush : CompositionBrush {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGradientBrushFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGradientBrushFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 AnchorPoint { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public CompositionColorGradientStopCollection ColorStops { get; }
    public CompositionGradientExtendMode ExtendMode { get; public set; }
    public CompositionColorSpace InterpolationSpace { get; public set; }
    public CompositionMappingMode MappingMode { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    protected internal CompositionGradientBrush(IObjectReference objRef);
    protected CompositionGradientBrush(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGradientBrush2();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGradientBrushFactory();
    public static CompositionGradientBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionGradientBrush x, CompositionGradientBrush y);
    public static bool op_Inequality(CompositionGradientBrush x, CompositionGradientBrush y);
    public sealed virtual bool Equals(CompositionGradientBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
    public Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public CompositionColorGradientStopCollection get_ColorStops();
    public CompositionGradientExtendMode get_ExtendMode();
    public void set_ExtendMode(CompositionGradientExtendMode value);
    public CompositionColorSpace get_InterpolationSpace();
    public void set_InterpolationSpace(CompositionColorSpace value);
    public CompositionMappingMode get_MappingMode();
    public void set_MappingMode(CompositionMappingMode value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionGradientExtendMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionGradientExtendMode : Enum {
    public int value__;
    public static CompositionGradientExtendMode Clamp;
    public static CompositionGradientExtendMode Wrap;
    public static CompositionGradientExtendMode Mirror;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionGraphicsDevice")]
[CompositionGraphicsDeviceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionGraphicsDevice")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionGraphicsDevice : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice4;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice4 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal CompositionGraphicsDevice(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice4();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionGraphicsDevice4();
    public static CompositionGraphicsDevice FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionGraphicsDevice x, CompositionGraphicsDevice y);
    public static bool op_Inequality(CompositionGraphicsDevice x, CompositionGraphicsDevice y);
    public sealed virtual bool Equals(CompositionGraphicsDevice other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionDrawingSurface CreateDrawingSurface(Size sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public void add_RenderingDeviceReplaced(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> value);
    public void remove_RenderingDeviceReplaced(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> value);
    public CompositionDrawingSurface CreateDrawingSurface2(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public CompositionVirtualDrawingSurface CreateVirtualDrawingSurface(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public CompositionMipmapSurface CreateMipmapSurface(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public void Trim();
    public IAsyncOperation`1<ICompositionSurface> CaptureAsync(Visual captureVisual, SizeInt32 size, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode, float sdrBoost);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionLight")]
[CompositionLightRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionLight : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionLight;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionLight2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionLight3;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionLightFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionLight { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionLight2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionLight3 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionLightFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public VisualUnorderedCollection ExclusionsFromTargets { get; }
    public bool IsEnabled { get; public set; }
    public VisualUnorderedCollection Targets { get; }
    protected internal CompositionLight(IObjectReference objRef);
    protected CompositionLight(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionLight();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionLight();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionLight2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionLight2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionLight3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionLight3();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionLightFactory();
    public static CompositionLight FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionLight x, CompositionLight y);
    public static bool op_Inequality(CompositionLight x, CompositionLight y);
    public sealed virtual bool Equals(CompositionLight other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public VisualUnorderedCollection get_ExclusionsFromTargets();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public VisualUnorderedCollection get_Targets();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionLinearGradientBrush")]
[CompositionLinearGradientBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionLinearGradientBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionLinearGradientBrush : CompositionGradientBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionLinearGradientBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 EndPoint { get; public set; }
    public Vector2 StartPoint { get; public set; }
    internal CompositionLinearGradientBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionLinearGradientBrush();
    public static CompositionLinearGradientBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionLinearGradientBrush x, CompositionLinearGradientBrush y);
    public static bool op_Inequality(CompositionLinearGradientBrush x, CompositionLinearGradientBrush y);
    public sealed virtual bool Equals(CompositionLinearGradientBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_EndPoint();
    public void set_EndPoint(Vector2 value);
    public Vector2 get_StartPoint();
    public void set_StartPoint(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionLineGeometry")]
[CompositionLineGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionLineGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionLineGeometry : CompositionGeometry {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionLineGeometry { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 End { get; public set; }
    public Vector2 Start { get; public set; }
    internal CompositionLineGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionLineGeometry();
    public static CompositionLineGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionLineGeometry x, CompositionLineGeometry y);
    public static bool op_Inequality(CompositionLineGeometry x, CompositionLineGeometry y);
    public sealed virtual bool Equals(CompositionLineGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_End();
    public void set_End(Vector2 value);
    public Vector2 get_Start();
    public void set_Start(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionMappingMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionMappingMode : Enum {
    public int value__;
    public static CompositionMappingMode Absolute;
    public static CompositionMappingMode Relative;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionMaskBrush")]
[CompositionMaskBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionMaskBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionMaskBrush : CompositionBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionMaskBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionBrush Mask { get; public set; }
    public CompositionBrush Source { get; public set; }
    internal CompositionMaskBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionMaskBrush();
    public static CompositionMaskBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionMaskBrush x, CompositionMaskBrush y);
    public static bool op_Inequality(CompositionMaskBrush x, CompositionMaskBrush y);
    public sealed virtual bool Equals(CompositionMaskBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionBrush get_Mask();
    public void set_Mask(CompositionBrush value);
    public CompositionBrush get_Source();
    public void set_Source(CompositionBrush value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionMipmapSurface")]
[CompositionMipmapSurfaceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionMipmapSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionMipmapSurface : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionSurface;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionMipmapSurface { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSurface { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public DirectXAlphaMode AlphaMode { get; }
    public UInt32 LevelCount { get; }
    public DirectXPixelFormat PixelFormat { get; }
    public SizeInt32 SizeInt32 { get; }
    internal CompositionMipmapSurface(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionMipmapSurface();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionSurface();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSurface();
    public static CompositionMipmapSurface FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionMipmapSurface x, CompositionMipmapSurface y);
    public static bool op_Inequality(CompositionMipmapSurface x, CompositionMipmapSurface y);
    public sealed virtual bool Equals(CompositionMipmapSurface other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionDrawingSurface GetDrawingSurfaceForLevel(UInt32 level);
    public DirectXAlphaMode get_AlphaMode();
    public UInt32 get_LevelCount();
    public DirectXPixelFormat get_PixelFormat();
    public SizeInt32 get_SizeInt32();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionNineGridBrush")]
[CompositionNineGridBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionNineGridBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionNineGridBrush : CompositionBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionNineGridBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float BottomInset { get; public set; }
    public float BottomInsetScale { get; public set; }
    public bool IsCenterHollow { get; public set; }
    public float LeftInset { get; public set; }
    public float LeftInsetScale { get; public set; }
    public float RightInset { get; public set; }
    public float RightInsetScale { get; public set; }
    public CompositionBrush Source { get; public set; }
    public float TopInset { get; public set; }
    public float TopInsetScale { get; public set; }
    internal CompositionNineGridBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionNineGridBrush();
    public static CompositionNineGridBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionNineGridBrush x, CompositionNineGridBrush y);
    public static bool op_Inequality(CompositionNineGridBrush x, CompositionNineGridBrush y);
    public sealed virtual bool Equals(CompositionNineGridBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void SetInsets(float inset);
    public void SetInsets(float left, float top, float right, float bottom);
    public void SetInsetScales(float scale);
    public void SetInsetScales(float left, float top, float right, float bottom);
    public float get_BottomInset();
    public void set_BottomInset(float value);
    public float get_BottomInsetScale();
    public void set_BottomInsetScale(float value);
    public bool get_IsCenterHollow();
    public void set_IsCenterHollow(bool value);
    public float get_LeftInset();
    public void set_LeftInset(float value);
    public float get_LeftInsetScale();
    public void set_LeftInsetScale(float value);
    public float get_RightInset();
    public void set_RightInset(float value);
    public float get_RightInsetScale();
    public void set_RightInsetScale(float value);
    public CompositionBrush get_Source();
    public void set_Source(CompositionBrush value);
    public float get_TopInset();
    public void set_TopInset(float value);
    public float get_TopInsetScale();
    public void set_TopInsetScale(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionObject")]
[CompositionObjectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionObject : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObject;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObject2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObject3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObject4;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObject5;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IAnimationObject;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObjectFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionObjectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObject { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObject2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObject3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObject4 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObject5 { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IAnimationObject { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObjectFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionObjectStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Comment { get; public set; }
    public Compositor Compositor { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ImplicitAnimationCollection ImplicitAnimations { get; public set; }
    public CompositionPropertySet Properties { get; }
    protected internal CompositionObject(IObjectReference objRef);
    protected CompositionObject(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionObject();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObject();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionObject2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObject2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionObject3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObject3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionObject4();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObject4();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionObject5();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObject5();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IAnimationObject();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IAnimationObject();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObjectFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionObjectStatics();
    public static void StartAnimationWithIAnimationObject(IAnimationObject target, string propertyName, CompositionAnimation animation);
    public static void StartAnimationGroupWithIAnimationObject(IAnimationObject target, ICompositionAnimationBase animation);
    public static CompositionObject FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionObject x, CompositionObject y);
    public static bool op_Inequality(CompositionObject x, CompositionObject y);
    public sealed virtual bool Equals(CompositionObject other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void StartAnimation(string propertyName, CompositionAnimation animation);
    public void StopAnimation(string propertyName);
    public void StartAnimationGroup(ICompositionAnimationBase value);
    public void StopAnimationGroup(ICompositionAnimationBase value);
    public AnimationController TryGetAnimationController(string propertyName);
    public void StartAnimation(string propertyName, CompositionAnimation animation, AnimationController animationController);
    public sealed virtual void Dispose();
    public sealed virtual void PopulatePropertyInfo(string propertyName, AnimationPropertyInfo propertyInfo);
    public string get_Comment();
    public void set_Comment(string value);
    public Compositor get_Compositor();
    public DispatcherQueue get_DispatcherQueue();
    public ImplicitAnimationCollection get_ImplicitAnimations();
    public void set_ImplicitAnimations(ImplicitAnimationCollection value);
    public CompositionPropertySet get_Properties();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionPath")]
[CompositionPathRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionPath")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionPath : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_IGeometrySource2D;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionPathFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionPath { get; }
    private IObjectReference _objRef_global__Windows_Graphics_IGeometrySource2D { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionPathFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CompositionPath(IGeometrySource2D source);
    internal CompositionPath(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionPath();
    private IObjectReference Make___objRef_global__Windows_Graphics_IGeometrySource2D();
    private IObjectReference get__objRef_global__Windows_Graphics_IGeometrySource2D();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionPathFactory();
    public static CompositionPath FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionPath x, CompositionPath y);
    public static bool op_Inequality(CompositionPath x, CompositionPath y);
    public sealed virtual bool Equals(CompositionPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionPathGeometry")]
[CompositionPathGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionPathGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionPathGeometry : CompositionGeometry {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionPathGeometry { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionPath Path { get; public set; }
    internal CompositionPathGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionPathGeometry();
    public static CompositionPathGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionPathGeometry x, CompositionPathGeometry y);
    public static bool op_Inequality(CompositionPathGeometry x, CompositionPathGeometry y);
    public sealed virtual bool Equals(CompositionPathGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionPath get_Path();
    public void set_Path(CompositionPath value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionProjectedShadow")]
[CompositionProjectedShadowRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionProjectedShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionProjectedShadow : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadow { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float BlurRadiusMultiplier { get; public set; }
    public CompositionProjectedShadowCasterCollection Casters { get; }
    public CompositionLight LightSource { get; public set; }
    public float MaxBlurRadius { get; public set; }
    public float MinBlurRadius { get; public set; }
    public CompositionProjectedShadowReceiverUnorderedCollection Receivers { get; }
    internal CompositionProjectedShadow(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadow();
    public static CompositionProjectedShadow FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionProjectedShadow x, CompositionProjectedShadow y);
    public static bool op_Inequality(CompositionProjectedShadow x, CompositionProjectedShadow y);
    public sealed virtual bool Equals(CompositionProjectedShadow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_BlurRadiusMultiplier();
    public void set_BlurRadiusMultiplier(float value);
    public CompositionProjectedShadowCasterCollection get_Casters();
    public CompositionLight get_LightSource();
    public void set_LightSource(CompositionLight value);
    public float get_MaxBlurRadius();
    public void set_MaxBlurRadius(float value);
    public float get_MinBlurRadius();
    public void set_MinBlurRadius(float value);
    public CompositionProjectedShadowReceiverUnorderedCollection get_Receivers();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionProjectedShadowCaster")]
[CompositionProjectedShadowCasterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionProjectedShadowCaster")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionProjectedShadowCaster : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCaster { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionBrush Brush { get; public set; }
    public Visual CastingVisual { get; public set; }
    internal CompositionProjectedShadowCaster(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCaster();
    public static CompositionProjectedShadowCaster FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionProjectedShadowCaster x, CompositionProjectedShadowCaster y);
    public static bool op_Inequality(CompositionProjectedShadowCaster x, CompositionProjectedShadowCaster y);
    public sealed virtual bool Equals(CompositionProjectedShadowCaster other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionBrush get_Brush();
    public void set_Brush(CompositionBrush value);
    public Visual get_CastingVisual();
    public void set_CastingVisual(Visual value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection")]
[CompositionProjectedShadowCasterCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionProjectedShadowCasterCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowCaster_;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCasterCollectionStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCasterCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowCaster_ { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCasterCollectionStatics { get; }
    public static int MaxRespectedCasters { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    internal CompositionProjectedShadowCasterCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCasterCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowCaster_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowCaster_();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowCasterCollectionStatics();
    public static int get_MaxRespectedCasters();
    public static CompositionProjectedShadowCasterCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionProjectedShadowCasterCollection x, CompositionProjectedShadowCasterCollection y);
    public static bool op_Inequality(CompositionProjectedShadowCasterCollection x, CompositionProjectedShadowCasterCollection y);
    public sealed virtual bool Equals(CompositionProjectedShadowCasterCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertAbove(CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    public void InsertAtBottom(CompositionProjectedShadowCaster newCaster);
    public void InsertAtTop(CompositionProjectedShadowCaster newCaster);
    public void InsertBelow(CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    public void Remove(CompositionProjectedShadowCaster caster);
    public void RemoveAll();
    public sealed virtual IEnumerator`1<CompositionProjectedShadowCaster> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionProjectedShadowReceiver")]
[CompositionProjectedShadowReceiverRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionProjectedShadowReceiver")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionProjectedShadowReceiver : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowReceiver { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Visual ReceivingVisual { get; public set; }
    internal CompositionProjectedShadowReceiver(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowReceiver();
    public static CompositionProjectedShadowReceiver FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionProjectedShadowReceiver x, CompositionProjectedShadowReceiver y);
    public static bool op_Inequality(CompositionProjectedShadowReceiver x, CompositionProjectedShadowReceiver y);
    public sealed virtual bool Equals(CompositionProjectedShadowReceiver other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Visual get_ReceivingVisual();
    public void set_ReceivingVisual(Visual value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection")]
[CompositionProjectedShadowReceiverUnorderedCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowReceiver_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowReceiverUnorderedCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowReceiver_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    internal CompositionProjectedShadowReceiverUnorderedCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionProjectedShadowReceiverUnorderedCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowReceiver_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_CompositionProjectedShadowReceiver_();
    public static CompositionProjectedShadowReceiverUnorderedCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionProjectedShadowReceiverUnorderedCollection x, CompositionProjectedShadowReceiverUnorderedCollection y);
    public static bool op_Inequality(CompositionProjectedShadowReceiverUnorderedCollection x, CompositionProjectedShadowReceiverUnorderedCollection y);
    public sealed virtual bool Equals(CompositionProjectedShadowReceiverUnorderedCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Add(CompositionProjectedShadowReceiver value);
    public void Remove(CompositionProjectedShadowReceiver value);
    public void RemoveAll();
    public sealed virtual IEnumerator`1<CompositionProjectedShadowReceiver> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionPropertySet")]
[CompositionPropertySetRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionPropertySet")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionPropertySet : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionPropertySet2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionPropertySet { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionPropertySet2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal CompositionPropertySet(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionPropertySet();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionPropertySet2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionPropertySet2();
    public static CompositionPropertySet FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionPropertySet x, CompositionPropertySet y);
    public static bool op_Inequality(CompositionPropertySet x, CompositionPropertySet y);
    public sealed virtual bool Equals(CompositionPropertySet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertColor(string propertyName, Color value);
    public void InsertMatrix3x2(string propertyName, Matrix3x2 value);
    public void InsertMatrix4x4(string propertyName, Matrix4x4 value);
    public void InsertQuaternion(string propertyName, Quaternion value);
    public void InsertScalar(string propertyName, float value);
    public void InsertVector2(string propertyName, Vector2 value);
    public void InsertVector3(string propertyName, Vector3 value);
    public void InsertVector4(string propertyName, Vector4 value);
    public CompositionGetValueStatus TryGetColor(string propertyName, Color& value);
    public CompositionGetValueStatus TryGetMatrix3x2(string propertyName, Matrix3x2& value);
    public CompositionGetValueStatus TryGetMatrix4x4(string propertyName, Matrix4x4& value);
    public CompositionGetValueStatus TryGetQuaternion(string propertyName, Quaternion& value);
    public CompositionGetValueStatus TryGetScalar(string propertyName, Single& value);
    public CompositionGetValueStatus TryGetVector2(string propertyName, Vector2& value);
    public CompositionGetValueStatus TryGetVector3(string propertyName, Vector3& value);
    public CompositionGetValueStatus TryGetVector4(string propertyName, Vector4& value);
    public void InsertBoolean(string propertyName, bool value);
    public CompositionGetValueStatus TryGetBoolean(string propertyName, Boolean& value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionRadialGradientBrush")]
[CompositionRadialGradientBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionRadialGradientBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionRadialGradientBrush : CompositionGradientBrush {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionRadialGradientBrush { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 EllipseCenter { get; public set; }
    public Vector2 EllipseRadius { get; public set; }
    public Vector2 GradientOriginOffset { get; public set; }
    internal CompositionRadialGradientBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionRadialGradientBrush();
    public static CompositionRadialGradientBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionRadialGradientBrush x, CompositionRadialGradientBrush y);
    public static bool op_Inequality(CompositionRadialGradientBrush x, CompositionRadialGradientBrush y);
    public sealed virtual bool Equals(CompositionRadialGradientBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_EllipseCenter();
    public void set_EllipseCenter(Vector2 value);
    public Vector2 get_EllipseRadius();
    public void set_EllipseRadius(Vector2 value);
    public Vector2 get_GradientOriginOffset();
    public void set_GradientOriginOffset(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionRectangleGeometry")]
[CompositionRectangleGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionRectangleGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionRectangleGeometry : CompositionGeometry {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionRectangleGeometry { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 Offset { get; public set; }
    public Vector2 Size { get; public set; }
    internal CompositionRectangleGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionRectangleGeometry();
    public static CompositionRectangleGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionRectangleGeometry x, CompositionRectangleGeometry y);
    public static bool op_Inequality(CompositionRectangleGeometry x, CompositionRectangleGeometry y);
    public sealed virtual bool Equals(CompositionRectangleGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionRoundedRectangleGeometry")]
[CompositionRoundedRectangleGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionRoundedRectangleGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionRoundedRectangleGeometry : CompositionGeometry {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionRoundedRectangleGeometry { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 CornerRadius { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 Size { get; public set; }
    internal CompositionRoundedRectangleGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionRoundedRectangleGeometry();
    public static CompositionRoundedRectangleGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionRoundedRectangleGeometry x, CompositionRoundedRectangleGeometry y);
    public static bool op_Inequality(CompositionRoundedRectangleGeometry x, CompositionRoundedRectangleGeometry y);
    public sealed virtual bool Equals(CompositionRoundedRectangleGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_CornerRadius();
    public void set_CornerRadius(Vector2 value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionScopedBatch")]
[CompositionScopedBatchRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionScopedBatch")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionScopedBatch : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionScopedBatch { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public bool IsActive { get; }
    public bool IsEnded { get; }
    internal CompositionScopedBatch(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionScopedBatch();
    public static CompositionScopedBatch FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionScopedBatch x, CompositionScopedBatch y);
    public static bool op_Inequality(CompositionScopedBatch x, CompositionScopedBatch y);
    public sealed virtual bool Equals(CompositionScopedBatch other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void End();
    public void Resume();
    public void Suspend();
    public void add_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    public void remove_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    public bool get_IsActive();
    public bool get_IsEnded();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionShadow")]
[CompositionShadowRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionShadow : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionShadow;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionShadowFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionShadow { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionShadowFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal CompositionShadow(IObjectReference objRef);
    protected CompositionShadow(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionShadow();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionShadow();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionShadowFactory();
    public static CompositionShadow FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionShadow x, CompositionShadow y);
    public static bool op_Inequality(CompositionShadow x, CompositionShadow y);
    public sealed virtual bool Equals(CompositionShadow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionShape")]
[CompositionShapeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionShape")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionShape : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionShape;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionShapeFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionShape { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionShapeFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 CenterPoint { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    protected internal CompositionShape(IObjectReference objRef);
    protected CompositionShape(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionShape();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionShape();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionShapeFactory();
    public static CompositionShape FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionShape x, CompositionShape y);
    public static bool op_Inequality(CompositionShape x, CompositionShape y);
    public sealed virtual bool Equals(CompositionShape other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[DefaultMemberAttribute("ListItem")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionShapeCollection")]
[CompositionShapeCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("System.Collections.Generic.IList`1<Microsoft.UI.Composition.CompositionShape>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionShapeCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IList_CompositionShape_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_CompositionShape_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IList_CompositionShape_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_CompositionShape_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public CompositionShape ListItem { get; public set; }
    internal CompositionShapeCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IList_CompositionShape_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IList_CompositionShape_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_CompositionShape_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_CompositionShape_();
    public static CompositionShapeCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionShapeCollection x, CompositionShapeCollection y);
    public static bool op_Inequality(CompositionShapeCollection x, CompositionShapeCollection y);
    public sealed virtual bool Equals(CompositionShapeCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public CompositionShape get_ListItem(int index);
    public void set_ListItem(int index, CompositionShape value);
    public sealed virtual int IndexOf(CompositionShape item);
    public sealed virtual void Insert(int index, CompositionShape item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(CompositionShape item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(CompositionShape item);
    public sealed virtual void CopyTo(CompositionShape[] array, int arrayIndex);
    public sealed virtual bool Remove(CompositionShape item);
    public sealed virtual IEnumerator`1<CompositionShape> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
    private sealed virtual override CompositionShape System.Collections.Generic.IList<Microsoft.UI.Composition.CompositionShape>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.UI.Composition.CompositionShape>.set_Item(int index, CompositionShape value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionSpriteShape")]
[CompositionSpriteShapeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionSpriteShape")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionSpriteShape : CompositionShape {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSpriteShape { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionBrush FillBrush { get; public set; }
    public CompositionGeometry Geometry { get; public set; }
    public bool IsStrokeNonScaling { get; public set; }
    public CompositionBrush StrokeBrush { get; public set; }
    public CompositionStrokeDashArray StrokeDashArray { get; }
    public CompositionStrokeCap StrokeDashCap { get; public set; }
    public float StrokeDashOffset { get; public set; }
    public CompositionStrokeCap StrokeEndCap { get; public set; }
    public CompositionStrokeLineJoin StrokeLineJoin { get; public set; }
    public float StrokeMiterLimit { get; public set; }
    public CompositionStrokeCap StrokeStartCap { get; public set; }
    public float StrokeThickness { get; public set; }
    internal CompositionSpriteShape(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSpriteShape();
    public static CompositionSpriteShape FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionSpriteShape x, CompositionSpriteShape y);
    public static bool op_Inequality(CompositionSpriteShape x, CompositionSpriteShape y);
    public sealed virtual bool Equals(CompositionSpriteShape other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionBrush get_FillBrush();
    public void set_FillBrush(CompositionBrush value);
    public CompositionGeometry get_Geometry();
    public void set_Geometry(CompositionGeometry value);
    public bool get_IsStrokeNonScaling();
    public void set_IsStrokeNonScaling(bool value);
    public CompositionBrush get_StrokeBrush();
    public void set_StrokeBrush(CompositionBrush value);
    public CompositionStrokeDashArray get_StrokeDashArray();
    public CompositionStrokeCap get_StrokeDashCap();
    public void set_StrokeDashCap(CompositionStrokeCap value);
    public float get_StrokeDashOffset();
    public void set_StrokeDashOffset(float value);
    public CompositionStrokeCap get_StrokeEndCap();
    public void set_StrokeEndCap(CompositionStrokeCap value);
    public CompositionStrokeLineJoin get_StrokeLineJoin();
    public void set_StrokeLineJoin(CompositionStrokeLineJoin value);
    public float get_StrokeMiterLimit();
    public void set_StrokeMiterLimit(float value);
    public CompositionStrokeCap get_StrokeStartCap();
    public void set_StrokeStartCap(CompositionStrokeCap value);
    public float get_StrokeThickness();
    public void set_StrokeThickness(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionStretch>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionStretch : Enum {
    public int value__;
    public static CompositionStretch None;
    public static CompositionStretch Fill;
    public static CompositionStretch Uniform;
    public static CompositionStretch UniformToFill;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionStrokeCap>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionStrokeCap : Enum {
    public int value__;
    public static CompositionStrokeCap Flat;
    public static CompositionStrokeCap Square;
    public static CompositionStrokeCap Round;
    public static CompositionStrokeCap Triangle;
}
[DefaultMemberAttribute("ListItem")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionStrokeDashArray")]
[CompositionStrokeDashArrayRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("System.Collections.Generic.IList`1<System.Single>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionStrokeDashArray : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IList_float_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_float_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IList_float_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_float_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public float ListItem { get; public set; }
    internal CompositionStrokeDashArray(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IList_float_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IList_float_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_float_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_float_();
    public static CompositionStrokeDashArray FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionStrokeDashArray x, CompositionStrokeDashArray y);
    public static bool op_Inequality(CompositionStrokeDashArray x, CompositionStrokeDashArray y);
    public sealed virtual bool Equals(CompositionStrokeDashArray other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public float get_ListItem(int index);
    public void set_ListItem(int index, float value);
    public sealed virtual int IndexOf(float item);
    public sealed virtual void Insert(int index, float item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(float item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(float item);
    public sealed virtual void CopyTo(Single[] array, int arrayIndex);
    public sealed virtual bool Remove(float item);
    public sealed virtual IEnumerator`1<float> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
    private sealed virtual override float System.Collections.Generic.IList<System.Single>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Single>.set_Item(int index, float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.CompositionStrokeLineJoin>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.CompositionStrokeLineJoin : Enum {
    public int value__;
    public static CompositionStrokeLineJoin Miter;
    public static CompositionStrokeLineJoin Bevel;
    public static CompositionStrokeLineJoin Round;
    public static CompositionStrokeLineJoin MiterOrBevel;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionSurfaceBrush")]
[CompositionSurfaceBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionSurfaceBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionSurfaceBrush : CompositionBrush {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush3;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush3 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 AnchorPoint { get; public set; }
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public float HorizontalAlignmentRatio { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public bool SnapToPixels { get; public set; }
    public CompositionStretch Stretch { get; public set; }
    public ICompositionSurface Surface { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public float VerticalAlignmentRatio { get; public set; }
    internal CompositionSurfaceBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSurfaceBrush3();
    public static CompositionSurfaceBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionSurfaceBrush x, CompositionSurfaceBrush y);
    public static bool op_Inequality(CompositionSurfaceBrush x, CompositionSurfaceBrush y);
    public sealed virtual bool Equals(CompositionSurfaceBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
    public CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public void set_BitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public float get_HorizontalAlignmentRatio();
    public void set_HorizontalAlignmentRatio(float value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public bool get_SnapToPixels();
    public void set_SnapToPixels(bool value);
    public CompositionStretch get_Stretch();
    public void set_Stretch(CompositionStretch value);
    public ICompositionSurface get_Surface();
    public void set_Surface(ICompositionSurface value);
    public Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    public float get_VerticalAlignmentRatio();
    public void set_VerticalAlignmentRatio(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionTransform")]
[CompositionTransformRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionTransform")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionTransform : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionTransform;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionTransformFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionTransform { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionTransformFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal CompositionTransform(IObjectReference objRef);
    protected CompositionTransform(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionTransform();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionTransform();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionTransformFactory();
    public static CompositionTransform FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionTransform x, CompositionTransform y);
    public static bool op_Inequality(CompositionTransform x, CompositionTransform y);
    public sealed virtual bool Equals(CompositionTransform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionViewBox")]
[CompositionViewBoxRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionViewBox")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionViewBox : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionViewBox { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float HorizontalAlignmentRatio { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 Size { get; public set; }
    public CompositionStretch Stretch { get; public set; }
    public float VerticalAlignmentRatio { get; public set; }
    internal CompositionViewBox(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionViewBox();
    public static CompositionViewBox FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionViewBox x, CompositionViewBox y);
    public static bool op_Inequality(CompositionViewBox x, CompositionViewBox y);
    public sealed virtual bool Equals(CompositionViewBox other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_HorizontalAlignmentRatio();
    public void set_HorizontalAlignmentRatio(float value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public CompositionStretch get_Stretch();
    public void set_Stretch(CompositionStretch value);
    public float get_VerticalAlignmentRatio();
    public void set_VerticalAlignmentRatio(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionVirtualDrawingSurface")]
[CompositionVirtualDrawingSurfaceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionVirtualDrawingSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionVirtualDrawingSurface : CompositionDrawingSurface {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurface;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurfaceFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurface { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurfaceFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal CompositionVirtualDrawingSurface(IObjectReference objRef);
    protected CompositionVirtualDrawingSurface(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurface();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurface();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionVirtualDrawingSurfaceFactory();
    public static CompositionVirtualDrawingSurface FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionVirtualDrawingSurface x, CompositionVirtualDrawingSurface y);
    public static bool op_Inequality(CompositionVirtualDrawingSurface x, CompositionVirtualDrawingSurface y);
    public sealed virtual bool Equals(CompositionVirtualDrawingSurface other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Trim(RectInt32[] rects);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CompositionVisualSurface")]
[CompositionVisualSurfaceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositionVisualSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CompositionVisualSurface : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionSurface;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionVisualSurface { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSurface { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 SourceOffset { get; public set; }
    public Vector2 SourceSize { get; public set; }
    public Visual SourceVisual { get; public set; }
    internal CompositionVisualSurface(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionVisualSurface();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionSurface();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSurface();
    public static CompositionVisualSurface FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionVisualSurface x, CompositionVisualSurface y);
    public static bool op_Inequality(CompositionVisualSurface x, CompositionVisualSurface y);
    public sealed virtual bool Equals(CompositionVisualSurface other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_SourceOffset();
    public void set_SourceOffset(Vector2 value);
    public Vector2 get_SourceSize();
    public void set_SourceSize(Vector2 value);
    public Visual get_SourceVisual();
    public void set_SourceVisual(Visual value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Compositor")]
[CompositorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICompositor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Compositor : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositor2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositor4;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositor5;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositor6;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositor7;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositorWithProjectedShadow;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositorWithRadialGradient;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositorWithVisualSurface;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositor8;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Compositor;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositorStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor4 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor5 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor6 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor7 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositorWithProjectedShadow { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositorWithRadialGradient { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositorWithVisualSurface { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositor8 { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Compositor { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositorStatics { get; }
    public static float MaxGlobalPlaybackRate { get; }
    public static float MinGlobalPlaybackRate { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Comment { get; public set; }
    public DispatcherQueue DispatcherQueue { get; }
    public float GlobalPlaybackRate { get; public set; }
    internal Compositor(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositor2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositor4();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor4();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositor5();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor5();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositor6();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor6();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositor7();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor7();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositorWithProjectedShadow();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositorWithProjectedShadow();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositorWithRadialGradient();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositorWithRadialGradient();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositorWithVisualSurface();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositorWithVisualSurface();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositor8();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositor8();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Compositor();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositorStatics();
    public static float get_MaxGlobalPlaybackRate();
    public static float get_MinGlobalPlaybackRate();
    public static Compositor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Compositor x, Compositor y);
    public static bool op_Inequality(Compositor x, Compositor y);
    public sealed virtual bool Equals(Compositor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ColorKeyFrameAnimation CreateColorKeyFrameAnimation();
    public CompositionColorBrush CreateColorBrush();
    public CompositionColorBrush CreateColorBrush(Color color);
    public ContainerVisual CreateContainerVisual();
    public CubicBezierEasingFunction CreateCubicBezierEasingFunction(Vector2 controlPoint1, Vector2 controlPoint2);
    public CompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect);
    public CompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect, IEnumerable`1<string> animatableProperties);
    public ExpressionAnimation CreateExpressionAnimation();
    public ExpressionAnimation CreateExpressionAnimation(string expression);
    public InsetClip CreateInsetClip();
    public InsetClip CreateInsetClip(float leftInset, float topInset, float rightInset, float bottomInset);
    public LinearEasingFunction CreateLinearEasingFunction();
    public CompositionPropertySet CreatePropertySet();
    public QuaternionKeyFrameAnimation CreateQuaternionKeyFrameAnimation();
    public ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation();
    public CompositionScopedBatch CreateScopedBatch(CompositionBatchTypes batchType);
    public SpriteVisual CreateSpriteVisual();
    public CompositionSurfaceBrush CreateSurfaceBrush();
    public CompositionSurfaceBrush CreateSurfaceBrush(ICompositionSurface surface);
    public Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation();
    public Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation();
    public Vector4KeyFrameAnimation CreateVector4KeyFrameAnimation();
    public CompositionCommitBatch GetCommitBatch(CompositionBatchTypes batchType);
    public AmbientLight CreateAmbientLight();
    public CompositionAnimationGroup CreateAnimationGroup();
    public CompositionBackdropBrush CreateBackdropBrush();
    public DistantLight CreateDistantLight();
    public DropShadow CreateDropShadow();
    public ImplicitAnimationCollection CreateImplicitAnimationCollection();
    public LayerVisual CreateLayerVisual();
    public CompositionMaskBrush CreateMaskBrush();
    public CompositionNineGridBrush CreateNineGridBrush();
    public PointLight CreatePointLight();
    public SpotLight CreateSpotLight();
    public StepEasingFunction CreateStepEasingFunction();
    public StepEasingFunction CreateStepEasingFunction(int stepCount);
    public CompositionColorGradientStop CreateColorGradientStop();
    public CompositionColorGradientStop CreateColorGradientStop(float offset, Color color);
    public CompositionLinearGradientBrush CreateLinearGradientBrush();
    public SpringScalarNaturalMotionAnimation CreateSpringScalarAnimation();
    public SpringVector2NaturalMotionAnimation CreateSpringVector2Animation();
    public SpringVector3NaturalMotionAnimation CreateSpringVector3Animation();
    public BounceScalarNaturalMotionAnimation CreateBounceScalarAnimation();
    public BounceVector2NaturalMotionAnimation CreateBounceVector2Animation();
    public BounceVector3NaturalMotionAnimation CreateBounceVector3Animation();
    public CompositionContainerShape CreateContainerShape();
    public CompositionEllipseGeometry CreateEllipseGeometry();
    public CompositionLineGeometry CreateLineGeometry();
    public CompositionPathGeometry CreatePathGeometry();
    public CompositionPathGeometry CreatePathGeometry(CompositionPath path);
    public PathKeyFrameAnimation CreatePathKeyFrameAnimation();
    public CompositionRectangleGeometry CreateRectangleGeometry();
    public CompositionRoundedRectangleGeometry CreateRoundedRectangleGeometry();
    public ShapeVisual CreateShapeVisual();
    public CompositionSpriteShape CreateSpriteShape();
    public CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry);
    public CompositionViewBox CreateViewBox();
    public IAsyncAction RequestCommitAsync();
    public CompositionGeometricClip CreateGeometricClip();
    public CompositionGeometricClip CreateGeometricClip(CompositionGeometry geometry);
    public RedirectVisual CreateRedirectVisual();
    public RedirectVisual CreateRedirectVisual(Visual source);
    public BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation();
    public AnimationPropertyInfo CreateAnimationPropertyInfo();
    public RectangleClip CreateRectangleClip();
    public RectangleClip CreateRectangleClip(float left, float top, float right, float bottom);
    public RectangleClip CreateRectangleClip(float left, float top, float right, float bottom, Vector2 topLeftRadius, Vector2 topRightRadius, Vector2 bottomRightRadius, Vector2 bottomLeftRadius);
    public CompositionProjectedShadowCaster CreateProjectedShadowCaster();
    public CompositionProjectedShadow CreateProjectedShadow();
    public CompositionProjectedShadowReceiver CreateProjectedShadowReceiver();
    public CompositionRadialGradientBrush CreateRadialGradientBrush();
    public CompositionVisualSurface CreateVisualSurface();
    public AnimationController CreateAnimationController();
    public sealed virtual void Dispose();
    public string get_Comment();
    public void set_Comment(string value);
    public DispatcherQueue get_DispatcherQueue();
    public float get_GlobalPlaybackRate();
    public void set_GlobalPlaybackRate(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ContainerVisual")]
[ContainerVisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IContainerVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ContainerVisual : Visual {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IContainerVisual;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IContainerVisualFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IContainerVisual { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IContainerVisualFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public VisualCollection Children { get; }
    protected internal ContainerVisual(IObjectReference objRef);
    protected ContainerVisual(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IContainerVisual();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IContainerVisual();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IContainerVisualFactory();
    public static ContainerVisual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContainerVisual x, ContainerVisual y);
    public static bool op_Inequality(ContainerVisual x, ContainerVisual y);
    public sealed virtual bool Equals(ContainerVisual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public VisualCollection get_Children();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Core.CompositorController")]
[CompositorControllerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Core.ICompositorController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Core.CompositorController : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Core_CompositorController;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Core_ICompositorController { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Core_CompositorController { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Compositor Compositor { get; }
    internal CompositorController(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Core_ICompositorController();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Core_CompositorController();
    public static CompositorController FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositorController x, CompositorController y);
    public static bool op_Inequality(CompositorController x, CompositorController y);
    public sealed virtual bool Equals(CompositorController other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Commit();
    public IAsyncAction EnsurePreviousCommitCompletedAsync();
    public void add_CommitNeeded(TypedEventHandler`2<CompositorController, object> value);
    public void remove_CommitNeeded(TypedEventHandler`2<CompositorController, object> value);
    public sealed virtual void Dispose();
    public Compositor get_Compositor();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CC107CDC-558F-5D1A-96A5-A735AC04386B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Core.ICompositorController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Core.ICompositorController {
    public Compositor Compositor { get; }
    public abstract virtual void Commit();
    public abstract virtual IAsyncAction EnsurePreviousCommitCompletedAsync();
    public abstract virtual Compositor get_Compositor();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommitNeeded(TypedEventHandler`2<CompositorController, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommitNeeded(TypedEventHandler`2<CompositorController, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.CubicBezierEasingFunction")]
[CubicBezierEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ICubicBezierEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.CubicBezierEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICubicBezierEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 ControlPoint1 { get; }
    public Vector2 ControlPoint2 { get; }
    internal CubicBezierEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICubicBezierEasingFunction();
    public static CubicBezierEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CubicBezierEasingFunction x, CubicBezierEasingFunction y);
    public static bool op_Inequality(CubicBezierEasingFunction x, CubicBezierEasingFunction y);
    public sealed virtual bool Equals(CubicBezierEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_ControlPoint1();
    public Vector2 get_ControlPoint2();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps")]
[CompositionDebugHeatMapsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Diagnostics.CompositionDebugHeatMaps : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal CompositionDebugHeatMaps(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugHeatMaps();
    public static CompositionDebugHeatMaps FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionDebugHeatMaps x, CompositionDebugHeatMaps y);
    public static bool op_Inequality(CompositionDebugHeatMaps x, CompositionDebugHeatMaps y);
    public sealed virtual bool Equals(CompositionDebugHeatMaps other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Hide(Visual subtree);
    public void ShowMemoryUsage(Visual subtree);
    public void ShowOverdraw(Visual subtree, CompositionDebugOverdrawContentKinds contentKinds);
    public void ShowRedraw(Visual subtree);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Diagnostics.CompositionDebugOverdrawContentKinds>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Diagnostics.CompositionDebugOverdrawContentKinds : Enum {
    public UInt32 value__;
    public static CompositionDebugOverdrawContentKinds None;
    public static CompositionDebugOverdrawContentKinds OffscreenRendered;
    public static CompositionDebugOverdrawContentKinds Colors;
    public static CompositionDebugOverdrawContentKinds Effects;
    public static CompositionDebugOverdrawContentKinds Shadows;
    public static CompositionDebugOverdrawContentKinds Lights;
    public static CompositionDebugOverdrawContentKinds Surfaces;
    public static CompositionDebugOverdrawContentKinds SwapChains;
    public static CompositionDebugOverdrawContentKinds All;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings")]
[CompositionDebugSettingsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Diagnostics.CompositionDebugSettings : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettings { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CompositionDebugHeatMaps HeatMaps { get; }
    internal CompositionDebugSettings(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettings();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Diagnostics_ICompositionDebugSettingsStatics();
    public static CompositionDebugSettings TryGetSettings(Compositor compositor);
    public static CompositionDebugSettings FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionDebugSettings x, CompositionDebugSettings y);
    public static bool op_Inequality(CompositionDebugSettings x, CompositionDebugSettings y);
    public sealed virtual bool Equals(CompositionDebugSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CompositionDebugHeatMaps get_HeatMaps();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("815016B8-F645-5C55-87B5-FE2167282B6F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Diagnostics.ICompositionDebugHeatMaps {
    public abstract virtual void Hide(Visual subtree);
    public abstract virtual void ShowMemoryUsage(Visual subtree);
    public abstract virtual void ShowOverdraw(Visual subtree, CompositionDebugOverdrawContentKinds contentKinds);
    public abstract virtual void ShowRedraw(Visual subtree);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F4C0C0F6-7F5F-5014-A0D6-C8C7EEECACE6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettings {
    public CompositionDebugHeatMaps HeatMaps { get; }
    public abstract virtual CompositionDebugHeatMaps get_HeatMaps();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B56F8AAB-2B8C-51AA-B974-10E5C517F50E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Diagnostics.ICompositionDebugSettingsStatics {
    public abstract virtual CompositionDebugSettings TryGetSettings(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.DistantLight")]
[DistantLightRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IDistantLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.DistantLight : CompositionLight {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IDistantLight2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IDistantLight { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IDistantLight2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color Color { get; public set; }
    public Visual CoordinateSpace { get; public set; }
    public Vector3 Direction { get; public set; }
    public float Intensity { get; public set; }
    internal DistantLight(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IDistantLight();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IDistantLight2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IDistantLight2();
    public static DistantLight FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DistantLight x, DistantLight y);
    public static bool op_Inequality(DistantLight x, DistantLight y);
    public sealed virtual bool Equals(DistantLight other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Color get_Color();
    public void set_Color(Color value);
    public Visual get_CoordinateSpace();
    public void set_CoordinateSpace(Visual value);
    public Vector3 get_Direction();
    public void set_Direction(Vector3 value);
    public float get_Intensity();
    public void set_Intensity(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.DropShadow")]
[DropShadowRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IDropShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.DropShadow : CompositionShadow {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IDropShadow2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IDropShadow { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IDropShadow2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float BlurRadius { get; public set; }
    public Color Color { get; public set; }
    public CompositionBrush Mask { get; public set; }
    public Vector3 Offset { get; public set; }
    public float Opacity { get; public set; }
    public CompositionDropShadowSourcePolicy SourcePolicy { get; public set; }
    internal DropShadow(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IDropShadow();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IDropShadow2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IDropShadow2();
    public static DropShadow FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DropShadow x, DropShadow y);
    public static bool op_Inequality(DropShadow x, DropShadow y);
    public sealed virtual bool Equals(DropShadow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_BlurRadius();
    public void set_BlurRadius(float value);
    public Color get_Color();
    public void set_Color(Color value);
    public CompositionBrush get_Mask();
    public void set_Mask(CompositionBrush value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public float get_Opacity();
    public void set_Opacity(float value);
    public CompositionDropShadowSourcePolicy get_SourcePolicy();
    public void set_SourcePolicy(CompositionDropShadowSourcePolicy value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EB1E7316-114C-5950-8480-20A29A3BB1EE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Effects.ISceneLightingEffect")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Effects.ISceneLightingEffect {
    public float AmbientAmount { get; public set; }
    public float DiffuseAmount { get; public set; }
    public IGraphicsEffectSource NormalMapSource { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularShine { get; public set; }
    public abstract virtual float get_AmbientAmount();
    public abstract virtual void set_AmbientAmount(float value);
    public abstract virtual float get_DiffuseAmount();
    public abstract virtual void set_DiffuseAmount(float value);
    public abstract virtual IGraphicsEffectSource get_NormalMapSource();
    public abstract virtual void set_NormalMapSource(IGraphicsEffectSource value);
    public abstract virtual float get_SpecularAmount();
    public abstract virtual void set_SpecularAmount(float value);
    public abstract virtual float get_SpecularShine();
    public abstract virtual void set_SpecularShine(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6B6496B2-468D-50D1-BBE9-593B8263AD80")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Effects.ISceneLightingEffect2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Effects.ISceneLightingEffect2 {
    public SceneLightingEffectReflectanceModel ReflectanceModel { get; public set; }
    public abstract virtual SceneLightingEffectReflectanceModel get_ReflectanceModel();
    public abstract virtual void set_ReflectanceModel(SceneLightingEffectReflectanceModel value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Effects.SceneLightingEffect")]
[SceneLightingEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Effects.ISceneLightingEffect")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Effects.SceneLightingEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Effects_ISceneLightingEffect2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Effects_SceneLightingEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Effects_ISceneLightingEffect { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Effects_ISceneLightingEffect2 { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Effects_SceneLightingEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float AmbientAmount { get; public set; }
    public float DiffuseAmount { get; public set; }
    [SupportedOSPlatformAttribute("Windows10.0.10240.0")]
public string Name { get; public set; }
    public IGraphicsEffectSource NormalMapSource { get; public set; }
    public SceneLightingEffectReflectanceModel ReflectanceModel { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularShine { get; public set; }
    internal SceneLightingEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Effects_ISceneLightingEffect();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Effects_ISceneLightingEffect2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Effects_ISceneLightingEffect2();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Effects_SceneLightingEffect();
    public static SceneLightingEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneLightingEffect x, SceneLightingEffect y);
    public static bool op_Inequality(SceneLightingEffect x, SceneLightingEffect y);
    public sealed virtual bool Equals(SceneLightingEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public float get_AmbientAmount();
    public void set_AmbientAmount(float value);
    public float get_DiffuseAmount();
    public void set_DiffuseAmount(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_NormalMapSource();
    public void set_NormalMapSource(IGraphicsEffectSource value);
    public SceneLightingEffectReflectanceModel get_ReflectanceModel();
    public void set_ReflectanceModel(SceneLightingEffectReflectanceModel value);
    public float get_SpecularAmount();
    public void set_SpecularAmount(float value);
    public float get_SpecularShine();
    public void set_SpecularShine(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Effects.SceneLightingEffectReflectanceModel>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Effects.SceneLightingEffectReflectanceModel : Enum {
    public int value__;
    public static SceneLightingEffectReflectanceModel BlinnPhong;
    public static SceneLightingEffectReflectanceModel PhysicallyBasedBlinnPhong;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ElasticEasingFunction")]
[ElasticEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IElasticEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ElasticEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IElasticEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionEasingFunctionMode Mode { get; }
    public int Oscillations { get; }
    public float Springiness { get; }
    internal ElasticEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IElasticEasingFunction();
    public static ElasticEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ElasticEasingFunction x, ElasticEasingFunction y);
    public static bool op_Inequality(ElasticEasingFunction x, ElasticEasingFunction y);
    public sealed virtual bool Equals(ElasticEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionEasingFunctionMode get_Mode();
    public int get_Oscillations();
    public float get_Springiness();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ExponentialEasingFunction")]
[ExponentialEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IExponentialEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ExponentialEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IExponentialEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float Exponent { get; }
    public CompositionEasingFunctionMode Mode { get; }
    internal ExponentialEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IExponentialEasingFunction();
    public static ExponentialEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ExponentialEasingFunction x, ExponentialEasingFunction y);
    public static bool op_Inequality(ExponentialEasingFunction x, ExponentialEasingFunction y);
    public sealed virtual bool Equals(ExponentialEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_Exponent();
    public CompositionEasingFunctionMode get_Mode();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ExpressionAnimation")]
[ExpressionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IExpressionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ExpressionAnimation : CompositionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IExpressionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public string Expression { get; public set; }
    internal ExpressionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IExpressionAnimation();
    public static ExpressionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ExpressionAnimation x, ExpressionAnimation y);
    public static bool op_Inequality(ExpressionAnimation x, ExpressionAnimation y);
    public sealed virtual bool Equals(ExpressionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public string get_Expression();
    public void set_Expression(string value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4540525E-B70D-5A14-BBFA-63BEF42313C7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAmbientLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IAmbientLight {
    public Color Color { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3356F963-040C-54D4-9DFC-B61C51AAADD1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAmbientLight2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IAmbientLight2 {
    public float Intensity { get; public set; }
    public abstract virtual float get_Intensity();
    public abstract virtual void set_Intensity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BD0F88A8-A415-5322-8C3D-1A6D9192754F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAnimationController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IAnimationController {
    public float PlaybackRate { get; public set; }
    public float Progress { get; public set; }
    public AnimationControllerProgressBehavior ProgressBehavior { get; public set; }
    public abstract virtual void Pause();
    public abstract virtual void Resume();
    public abstract virtual float get_PlaybackRate();
    public abstract virtual void set_PlaybackRate(float value);
    public abstract virtual float get_Progress();
    public abstract virtual void set_Progress(float value);
    public abstract virtual AnimationControllerProgressBehavior get_ProgressBehavior();
    public abstract virtual void set_ProgressBehavior(AnimationControllerProgressBehavior value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B63B0FB6-286B-57AF-B096-16066D43DC00")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAnimationControllerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IAnimationControllerStatics {
    public float MaxPlaybackRate { get; }
    public float MinPlaybackRate { get; }
    public abstract virtual float get_MaxPlaybackRate();
    public abstract virtual float get_MinPlaybackRate();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8F56119D-B96D-58D0-9916-D1C5E390F890")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAnimationObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.IAnimationObject {
    public abstract virtual void PopulatePropertyInfo(string propertyName, AnimationPropertyInfo propertyInfo);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3D721A2B-9CCD-57BD-B6C2-CE9E04AE3606")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAnimationPropertyInfo")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IAnimationPropertyInfo {
    public AnimationPropertyAccessMode AccessMode { get; public set; }
    public abstract virtual AnimationPropertyAccessMode get_AccessMode();
    public abstract virtual void set_AccessMode(AnimationPropertyAccessMode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ED14FB09-DE28-540D-9311-80CFDCC97338")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IAnimationPropertyInfo2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IAnimationPropertyInfo2 {
    public abstract virtual CompositionObject GetResolvedCompositionObject();
    public abstract virtual string GetResolvedCompositionObjectProperty();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("27C75BAB-317A-5362-BF25-FFFBB98A51B9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IBackEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IBackEasingFunction {
    public float Amplitude { get; }
    public CompositionEasingFunctionMode Mode { get; }
    public abstract virtual float get_Amplitude();
    public abstract virtual CompositionEasingFunctionMode get_Mode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7FE485E9-E874-5FF3-8DDC-826C3818BFC3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IBooleanKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IBooleanKeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FA11F3C0-697B-562F-AF46-C6AF666B6EC4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IBounceEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IBounceEasingFunction {
    public int Bounces { get; }
    public float Bounciness { get; }
    public CompositionEasingFunctionMode Mode { get; }
    public abstract virtual int get_Bounces();
    public abstract virtual float get_Bounciness();
    public abstract virtual CompositionEasingFunctionMode get_Mode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1C0C4B76-C4D6-5DD9-8DD6-DBE35C7B7E55")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IBounceScalarNaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IBounceScalarNaturalMotionAnimation {
    public float Acceleration { get; public set; }
    public float Restitution { get; public set; }
    public abstract virtual float get_Acceleration();
    public abstract virtual void set_Acceleration(float value);
    public abstract virtual float get_Restitution();
    public abstract virtual void set_Restitution(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EC528D1F-22E2-573E-AB87-757071E50012")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IBounceVector2NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IBounceVector2NaturalMotionAnimation {
    public float Acceleration { get; public set; }
    public float Restitution { get; public set; }
    public abstract virtual float get_Acceleration();
    public abstract virtual void set_Acceleration(float value);
    public abstract virtual float get_Restitution();
    public abstract virtual void set_Restitution(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E3E2EE98-1211-586D-8A6D-FEA5EFC3957F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IBounceVector3NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IBounceVector3NaturalMotionAnimation {
    public float Acceleration { get; public set; }
    public float Restitution { get; public set; }
    public abstract virtual float get_Acceleration();
    public abstract virtual void set_Acceleration(float value);
    public abstract virtual float get_Restitution();
    public abstract virtual void set_Restitution(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("414B172C-BF27-5EAD-93E0-35915322DB2C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICircleEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICircleEasingFunction {
    public CompositionEasingFunctionMode Mode { get; }
    public abstract virtual CompositionEasingFunctionMode get_Mode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F0237928-353C-5867-BE93-71547E989F44")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IColorKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IColorKeyFrameAnimation {
    public CompositionColorSpace InterpolationColorSpace { get; public set; }
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Color value);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Color value, CompositionEasingFunction easingFunction);
    public abstract virtual CompositionColorSpace get_InterpolationColorSpace();
    public abstract virtual void set_InterpolationColorSpace(CompositionColorSpace value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A829CCC8-6FDE-5B90-AD37-EFD307E1B631")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionAnimation {
    public abstract virtual void ClearAllParameters();
    public abstract virtual void ClearParameter(string key);
    public abstract virtual void SetColorParameter(string key, Color value);
    public abstract virtual void SetMatrix3x2Parameter(string key, Matrix3x2 value);
    public abstract virtual void SetMatrix4x4Parameter(string key, Matrix4x4 value);
    public abstract virtual void SetQuaternionParameter(string key, Quaternion value);
    public abstract virtual void SetReferenceParameter(string key, CompositionObject compositionObject);
    public abstract virtual void SetScalarParameter(string key, float value);
    public abstract virtual void SetVector2Parameter(string key, Vector2 value);
    public abstract virtual void SetVector3Parameter(string key, Vector3 value);
    public abstract virtual void SetVector4Parameter(string key, Vector4 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0926EB58-8965-5C74-BDAC-852EBB5E8542")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimation2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionAnimation2 {
    public string Target { get; public set; }
    public abstract virtual void SetBooleanParameter(string key, bool value);
    public abstract virtual string get_Target();
    public abstract virtual void set_Target(string value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("60063F53-4167-5914-A2F1-9EFCC2F86C76")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimation3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionAnimation3 {
    public InitialValueExpressionCollection InitialValueExpressions { get; }
    public abstract virtual InitialValueExpressionCollection get_InitialValueExpressions();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C4101447-DFE4-597F-B5BC-96443F5D18A1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimation4")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionAnimation4 {
    public abstract virtual void SetExpressionReferenceParameter(string parameterName, IAnimationObject source);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A77C0E5A-F059-4E85-BCEF-C068694CEC78")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimationBase")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.ICompositionAnimationBase {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2ED278CA-4CCA-5F7F-8D47-F930552A7769")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimationFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionAnimationFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A51CDCAC-B972-5AE7-81D0-9D91C71ECB7A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionAnimationGroup")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionAnimationGroup {
    public int Count { get; }
    public abstract virtual void Add(CompositionAnimation value);
    public abstract virtual void Remove(CompositionAnimation value);
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("85260ED3-365B-5E70-B79A-F9F1D10FA4B5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionApiInformationStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionApiInformationStatics {
    public ulong ApiVersion { get; }
    public abstract virtual ulong get_ApiVersion();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6C866BB3-172A-570C-82AC-BF9848D99A59")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionBackdropBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionBackdropBrush {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("AC400334-4358-5FB0-BFC3-117FE581998F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionBatchCompletedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionBatchCompletedEventArgs {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("483924E7-99A5-5377-968B-DEC6D40BBCCD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionBrush {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ABF2B354-7130-53D9-8324-365D7E02EDE7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionBrushFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionBrushFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7689BF12-75C0-52EA-81CB-463ED1C16C45")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionCapabilities")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionCapabilities {
    public abstract virtual bool AreEffectsSupported();
    public abstract virtual bool AreEffectsFast();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(TypedEventHandler`2<CompositionCapabilities, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(TypedEventHandler`2<CompositionCapabilities, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B66B55CB-B5A5-5BEE-8972-AE78233CB34C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionClip {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CDF6BF80-AFD7-57DC-8148-6CCBBB5D78BB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionClip2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionClip2 {
    public Vector2 AnchorPoint { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public abstract virtual Vector2 get_AnchorPoint();
    public abstract virtual void set_AnchorPoint(Vector2 value);
    public abstract virtual Vector2 get_CenterPoint();
    public abstract virtual void set_CenterPoint(Vector2 value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual float get_RotationAngle();
    public abstract virtual void set_RotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void set_RotationAngleInDegrees(float value);
    public abstract virtual Vector2 get_Scale();
    public abstract virtual void set_Scale(Vector2 value);
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("611DEC65-D302-52BC-92AB-A295BD141AE4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionClipFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionClipFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3F8FFB69-3E71-55A7-8E79-F27A214C56AE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionColorBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionColorBrush {
    public Color Color { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("868030D8-C5C0-5DD8-A765-E32CD3497AA9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionColorGradientStop")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionColorGradientStop {
    public Color Color { get; public set; }
    public float Offset { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual float get_Offset();
    public abstract virtual void set_Offset(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4794CB29-CE9D-5837-9FC9-847DF3E197DE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionColorGradientStopCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionColorGradientStopCollection {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C4550FA8-A7F2-5259-BF74-33B2F5240A28")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionCommitBatch")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionCommitBatch {
    public bool IsActive { get; }
    public bool IsEnded { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual bool get_IsEnded();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("064AABD5-2DAB-52D3-824B-C72456540F29")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionContainerShape")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionContainerShape {
    public CompositionShapeCollection Shapes { get; }
    public abstract virtual CompositionShapeCollection get_Shapes();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("216CAB97-A2EE-5A29-AD6B-0BC2DF4A1504")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionDrawingSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionDrawingSurface {
    public DirectXAlphaMode AlphaMode { get; }
    public DirectXPixelFormat PixelFormat { get; }
    public Size Size { get; }
    public abstract virtual DirectXAlphaMode get_AlphaMode();
    public abstract virtual DirectXPixelFormat get_PixelFormat();
    public abstract virtual Size get_Size();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6BE6F652-BEC8-5ADF-A6AF-5ACFC00A968E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionDrawingSurface2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionDrawingSurface2 {
    public SizeInt32 SizeInt32 { get; }
    public abstract virtual void Resize(SizeInt32 sizePixels);
    [OverloadAttribute("Scroll")]
public abstract virtual void Scroll(PointInt32 offset);
    [OverloadAttribute("ScrollRect")]
public abstract virtual void Scroll(PointInt32 offset, RectInt32 scrollRect);
    [OverloadAttribute("ScrollWithClip")]
public abstract virtual void ScrollWithClip(PointInt32 offset, RectInt32 clipRect);
    [OverloadAttribute("ScrollRectWithClip")]
public abstract virtual void ScrollWithClip(PointInt32 offset, RectInt32 clipRect, RectInt32 scrollRect);
    public abstract virtual SizeInt32 get_SizeInt32();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4791E19A-C83B-58B0-AC86-DFC58494F5F9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionDrawingSurfaceFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionDrawingSurfaceFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8E1ECD0D-57D8-5BC9-9BCD-E43D0DD733C4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEasingFunction {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7D7D32C3-574B-5620-9902-DB426851802F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEasingFunctionFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEasingFunctionFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9D4B87FF-6DCA-5CE2-B69C-E52705B0FEF4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEasingFunctionStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEasingFunctionStatics {
    public abstract virtual CubicBezierEasingFunction CreateCubicBezierEasingFunction(Compositor owner, Vector2 controlPoint1, Vector2 controlPoint2);
    public abstract virtual LinearEasingFunction CreateLinearEasingFunction(Compositor owner);
    [OverloadAttribute("CreateStepEasingFunction")]
public abstract virtual StepEasingFunction CreateStepEasingFunction(Compositor owner);
    [OverloadAttribute("CreateStepEasingFunctionWithStepCount")]
public abstract virtual StepEasingFunction CreateStepEasingFunction(Compositor owner, int stepCount);
    public abstract virtual BackEasingFunction CreateBackEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float amplitude);
    public abstract virtual BounceEasingFunction CreateBounceEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, int bounces, float bounciness);
    public abstract virtual CircleEasingFunction CreateCircleEasingFunction(Compositor owner, CompositionEasingFunctionMode mode);
    public abstract virtual ElasticEasingFunction CreateElasticEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, int oscillations, float springiness);
    public abstract virtual ExponentialEasingFunction CreateExponentialEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float exponent);
    public abstract virtual PowerEasingFunction CreatePowerEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float power);
    public abstract virtual SineEasingFunction CreateSineEasingFunction(Compositor owner, CompositionEasingFunctionMode mode);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("62E0BBAB-1F45-5A44-9DDF-F0C38A02ED85")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEffectBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEffectBrush {
    public abstract virtual CompositionBrush GetSourceParameter(string name);
    public abstract virtual void SetSourceParameter(string name, CompositionBrush source);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C50F407A-0231-5ED2-B7A7-CA66D3E14B3B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEffectFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEffectFactory {
    public Exception ExtendedError { get; }
    public CompositionEffectFactoryLoadStatus LoadStatus { get; }
    public abstract virtual CompositionEffectBrush CreateBrush();
    public abstract virtual Exception get_ExtendedError();
    public abstract virtual CompositionEffectFactoryLoadStatus get_LoadStatus();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BECE3367-5704-59F7-BE8C-D6293AF9C95F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEffectSourceParameter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEffectSourceParameter {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("26185954-4489-5D0E-AE4D-7BC4BBBC6161")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEffectSourceParameterFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEffectSourceParameterFactory {
    public abstract virtual CompositionEffectSourceParameter Create(string name);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F2A21042-7A57-58C1-8B47-8BC8B21D3AA0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionEllipseGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionEllipseGeometry {
    public Vector2 Center { get; public set; }
    public Vector2 Radius { get; public set; }
    public abstract virtual Vector2 get_Center();
    public abstract virtual void set_Center(Vector2 value);
    public abstract virtual Vector2 get_Radius();
    public abstract virtual void set_Radius(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E3C0A8C5-5297-5D69-8B91-F5330BB1CB27")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGeometricClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGeometricClip {
    public CompositionGeometry Geometry { get; public set; }
    public CompositionViewBox ViewBox { get; public set; }
    public abstract virtual CompositionGeometry get_Geometry();
    public abstract virtual void set_Geometry(CompositionGeometry value);
    public abstract virtual CompositionViewBox get_ViewBox();
    public abstract virtual void set_ViewBox(CompositionViewBox value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4E40BDB2-450B-5A81-9E9B-149417980CC4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGeometry {
    public float TrimEnd { get; public set; }
    public float TrimOffset { get; public set; }
    public float TrimStart { get; public set; }
    public abstract virtual float get_TrimEnd();
    public abstract virtual void set_TrimEnd(float value);
    public abstract virtual float get_TrimOffset();
    public abstract virtual void set_TrimOffset(float value);
    public abstract virtual float get_TrimStart();
    public abstract virtual void set_TrimStart(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B2FB802B-C691-5554-8312-9C6D358D6B9E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGeometryFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGeometryFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9165D1FB-C738-5F44-ADDC-309EE071D588")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGradientBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGradientBrush {
    public Vector2 AnchorPoint { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public CompositionColorGradientStopCollection ColorStops { get; }
    public CompositionGradientExtendMode ExtendMode { get; public set; }
    public CompositionColorSpace InterpolationSpace { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public abstract virtual Vector2 get_AnchorPoint();
    public abstract virtual void set_AnchorPoint(Vector2 value);
    public abstract virtual Vector2 get_CenterPoint();
    public abstract virtual void set_CenterPoint(Vector2 value);
    public abstract virtual CompositionColorGradientStopCollection get_ColorStops();
    public abstract virtual CompositionGradientExtendMode get_ExtendMode();
    public abstract virtual void set_ExtendMode(CompositionGradientExtendMode value);
    public abstract virtual CompositionColorSpace get_InterpolationSpace();
    public abstract virtual void set_InterpolationSpace(CompositionColorSpace value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual float get_RotationAngle();
    public abstract virtual void set_RotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void set_RotationAngleInDegrees(float value);
    public abstract virtual Vector2 get_Scale();
    public abstract virtual void set_Scale(Vector2 value);
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("03E9EDF3-EE3D-58FC-8C0B-95E4B6060A94")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGradientBrush2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGradientBrush2 {
    public CompositionMappingMode MappingMode { get; public set; }
    public abstract virtual CompositionMappingMode get_MappingMode();
    public abstract virtual void set_MappingMode(CompositionMappingMode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B043B155-4B40-590D-A0D9-F8C1A7E0C88F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGradientBrushFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGradientBrushFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3D47E3F5-F76C-5F1F-88C0-54A5F2A090D6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGraphicsDevice {
    public abstract virtual CompositionDrawingSurface CreateDrawingSurface(Size sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RenderingDeviceReplaced(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RenderingDeviceReplaced(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FFD56707-1C7A-5DA0-AA1A-49CB935B5DCA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGraphicsDevice2 {
    public abstract virtual CompositionDrawingSurface CreateDrawingSurface2(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public abstract virtual CompositionVirtualDrawingSurface CreateVirtualDrawingSurface(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FBBEF487-D5A4-5DB2-BF3E-9F488E659D11")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGraphicsDevice3 {
    public abstract virtual CompositionMipmapSurface CreateMipmapSurface(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    public abstract virtual void Trim();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2B295C04-7B2E-5B0E-9762-2992313B700C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionGraphicsDevice4")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionGraphicsDevice4 {
    public abstract virtual IAsyncOperation`1<ICompositionSurface> CaptureAsync(Visual captureVisual, SizeInt32 size, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode, float sdrBoost);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6D633E77-A6B8-5A2D-8235-E0C380C3B47B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionLight {
    public VisualUnorderedCollection Targets { get; }
    public abstract virtual VisualUnorderedCollection get_Targets();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0BB940A4-05EF-5920-BAE1-918B36D44380")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionLight2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionLight2 {
    public VisualUnorderedCollection ExclusionsFromTargets { get; }
    public abstract virtual VisualUnorderedCollection get_ExclusionsFromTargets();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("95CE4859-DD55-5C38-A3EB-13D053CEBB1E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionLight3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionLight3 {
    public bool IsEnabled { get; public set; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CB29CAED-9245-51A6-BA56-ADDBAEFA54CC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionLightFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionLightFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F726FB52-270C-58B1-A902-89576772DEDC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionLinearGradientBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionLinearGradientBrush {
    public Vector2 EndPoint { get; public set; }
    public Vector2 StartPoint { get; public set; }
    public abstract virtual Vector2 get_EndPoint();
    public abstract virtual void set_EndPoint(Vector2 value);
    public abstract virtual Vector2 get_StartPoint();
    public abstract virtual void set_StartPoint(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("489F9382-C186-5936-8946-C4F927E844AA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionLineGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionLineGeometry {
    public Vector2 End { get; public set; }
    public Vector2 Start { get; public set; }
    public abstract virtual Vector2 get_End();
    public abstract virtual void set_End(Vector2 value);
    public abstract virtual Vector2 get_Start();
    public abstract virtual void set_Start(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C9502786-65AA-5BE5-A679-C3B5DBFB0DC6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionMaskBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionMaskBrush {
    public CompositionBrush Mask { get; public set; }
    public CompositionBrush Source { get; public set; }
    public abstract virtual CompositionBrush get_Mask();
    public abstract virtual void set_Mask(CompositionBrush value);
    public abstract virtual CompositionBrush get_Source();
    public abstract virtual void set_Source(CompositionBrush value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("681F1E47-6E43-5B55-BE3A-E5C858A2D5FA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionMipmapSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionMipmapSurface {
    public DirectXAlphaMode AlphaMode { get; }
    public UInt32 LevelCount { get; }
    public DirectXPixelFormat PixelFormat { get; }
    public SizeInt32 SizeInt32 { get; }
    public abstract virtual CompositionDrawingSurface GetDrawingSurfaceForLevel(UInt32 level);
    public abstract virtual DirectXAlphaMode get_AlphaMode();
    public abstract virtual UInt32 get_LevelCount();
    public abstract virtual DirectXPixelFormat get_PixelFormat();
    public abstract virtual SizeInt32 get_SizeInt32();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C77A3D21-C7EE-517A-98F4-AD9A7202BC86")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionNineGridBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionNineGridBrush {
    public float BottomInset { get; public set; }
    public float BottomInsetScale { get; public set; }
    public bool IsCenterHollow { get; public set; }
    public float LeftInset { get; public set; }
    public float LeftInsetScale { get; public set; }
    public float RightInset { get; public set; }
    public float RightInsetScale { get; public set; }
    public CompositionBrush Source { get; public set; }
    public float TopInset { get; public set; }
    public float TopInsetScale { get; public set; }
    [OverloadAttribute("SetInsets")]
public abstract virtual void SetInsets(float inset);
    [OverloadAttribute("SetInsetsWithValues")]
public abstract virtual void SetInsets(float left, float top, float right, float bottom);
    [OverloadAttribute("SetInsetScales")]
public abstract virtual void SetInsetScales(float scale);
    [OverloadAttribute("SetInsetScalesWithValues")]
public abstract virtual void SetInsetScales(float left, float top, float right, float bottom);
    public abstract virtual float get_BottomInset();
    public abstract virtual void set_BottomInset(float value);
    public abstract virtual float get_BottomInsetScale();
    public abstract virtual void set_BottomInsetScale(float value);
    public abstract virtual bool get_IsCenterHollow();
    public abstract virtual void set_IsCenterHollow(bool value);
    public abstract virtual float get_LeftInset();
    public abstract virtual void set_LeftInset(float value);
    public abstract virtual float get_LeftInsetScale();
    public abstract virtual void set_LeftInsetScale(float value);
    public abstract virtual float get_RightInset();
    public abstract virtual void set_RightInset(float value);
    public abstract virtual float get_RightInsetScale();
    public abstract virtual void set_RightInsetScale(float value);
    public abstract virtual CompositionBrush get_Source();
    public abstract virtual void set_Source(CompositionBrush value);
    public abstract virtual float get_TopInset();
    public abstract virtual void set_TopInset(float value);
    public abstract virtual float get_TopInsetScale();
    public abstract virtual void set_TopInsetScale(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0E583D49-FB5E-5481-A426-D3C41E059A5A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionObject {
    public Compositor Compositor { get; }
    public CompositionPropertySet Properties { get; }
    public abstract virtual void StartAnimation(string propertyName, CompositionAnimation animation);
    public abstract virtual void StopAnimation(string propertyName);
    public abstract virtual Compositor get_Compositor();
    public abstract virtual CompositionPropertySet get_Properties();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BCBBFEBF-799C-51CE-9C82-B6E49E7E62E1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObject2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionObject2 {
    public string Comment { get; public set; }
    public ImplicitAnimationCollection ImplicitAnimations { get; public set; }
    public abstract virtual void StartAnimationGroup(ICompositionAnimationBase value);
    public abstract virtual void StopAnimationGroup(ICompositionAnimationBase value);
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public abstract virtual ImplicitAnimationCollection get_ImplicitAnimations();
    public abstract virtual void set_ImplicitAnimations(ImplicitAnimationCollection value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D43C5CF1-47DF-52B8-B409-D5831503905E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObject3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionObject3 {
    public DispatcherQueue DispatcherQueue { get; }
    public abstract virtual DispatcherQueue get_DispatcherQueue();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("029AD57C-5497-51F3-8B40-E4E235992C6F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObject4")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionObject4 {
    public abstract virtual AnimationController TryGetAnimationController(string propertyName);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("85FD26D1-BB99-5392-9DCE-A05CB81458A5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObject5")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Composition.ICompositionObject5 {
    [OverloadAttribute("StartAnimationWithController")]
public abstract virtual void StartAnimation(string propertyName, CompositionAnimation animation, AnimationController animationController);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6133C5F9-CD3B-56B2-876F-EB849DB14911")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObjectFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionObjectFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A091356C-38AE-514C-9B58-AD5C8C7936AD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionObjectStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionObjectStatics {
    public abstract virtual void StartAnimationWithIAnimationObject(IAnimationObject target, string propertyName, CompositionAnimation animation);
    public abstract virtual void StartAnimationGroupWithIAnimationObject(IAnimationObject target, ICompositionAnimationBase animation);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("17C518C0-D7A2-54BE-AC7F-C408562A6A20")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionPath")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionPath {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("87143312-D280-51D2-B75B-5D76EA86C285")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionPathFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionPathFactory {
    public abstract virtual CompositionPath Create(IGeometrySource2D source);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0F6E6B82-060B-571E-B849-AB8E0D723962")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionPathGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionPathGeometry {
    public CompositionPath Path { get; public set; }
    public abstract virtual CompositionPath get_Path();
    public abstract virtual void set_Path(CompositionPath value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D400AB10-8B92-5ABB-9E23-807974FC6961")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionProjectedShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionProjectedShadow {
    public float BlurRadiusMultiplier { get; public set; }
    public CompositionProjectedShadowCasterCollection Casters { get; }
    public CompositionLight LightSource { get; public set; }
    public float MaxBlurRadius { get; public set; }
    public float MinBlurRadius { get; public set; }
    public CompositionProjectedShadowReceiverUnorderedCollection Receivers { get; }
    public abstract virtual float get_BlurRadiusMultiplier();
    public abstract virtual void set_BlurRadiusMultiplier(float value);
    public abstract virtual CompositionProjectedShadowCasterCollection get_Casters();
    public abstract virtual CompositionLight get_LightSource();
    public abstract virtual void set_LightSource(CompositionLight value);
    public abstract virtual float get_MaxBlurRadius();
    public abstract virtual void set_MaxBlurRadius(float value);
    public abstract virtual float get_MinBlurRadius();
    public abstract virtual void set_MinBlurRadius(float value);
    public abstract virtual CompositionProjectedShadowReceiverUnorderedCollection get_Receivers();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("15A9F2D0-6BAE-521B-90C7-C7500F2BF562")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCaster")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionProjectedShadowCaster {
    public CompositionBrush Brush { get; public set; }
    public Visual CastingVisual { get; public set; }
    public abstract virtual CompositionBrush get_Brush();
    public abstract virtual void set_Brush(CompositionBrush value);
    public abstract virtual Visual get_CastingVisual();
    public abstract virtual void set_CastingVisual(Visual value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B120BFDC-533C-57A9-AE16-D43BA52472C4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollection {
    public int Count { get; }
    public abstract virtual void InsertAbove(CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    public abstract virtual void InsertAtBottom(CompositionProjectedShadowCaster newCaster);
    public abstract virtual void InsertAtTop(CompositionProjectedShadowCaster newCaster);
    public abstract virtual void InsertBelow(CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    public abstract virtual void Remove(CompositionProjectedShadowCaster caster);
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("43A98014-B88B-5B2A-B1E2-5E776AB77538")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollectionStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionProjectedShadowCasterCollectionStatics {
    public int MaxRespectedCasters { get; }
    public abstract virtual int get_MaxRespectedCasters();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("29FE12B0-F1A0-50E1-AF28-2E943BC819D6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionProjectedShadowReceiver")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionProjectedShadowReceiver {
    public Visual ReceivingVisual { get; public set; }
    public abstract virtual Visual get_ReceivingVisual();
    public abstract virtual void set_ReceivingVisual(Visual value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2D35F751-A1FA-5FFF-B156-6D8FCD8362ED")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionProjectedShadowReceiverUnorderedCollection {
    public int Count { get; }
    public abstract virtual void Add(CompositionProjectedShadowReceiver value);
    public abstract virtual void Remove(CompositionProjectedShadowReceiver value);
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("97F7A17B-97BE-5545-9F1C-0B9D44577F57")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionPropertySet")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionPropertySet {
    public abstract virtual void InsertColor(string propertyName, Color value);
    public abstract virtual void InsertMatrix3x2(string propertyName, Matrix3x2 value);
    public abstract virtual void InsertMatrix4x4(string propertyName, Matrix4x4 value);
    public abstract virtual void InsertQuaternion(string propertyName, Quaternion value);
    public abstract virtual void InsertScalar(string propertyName, float value);
    public abstract virtual void InsertVector2(string propertyName, Vector2 value);
    public abstract virtual void InsertVector3(string propertyName, Vector3 value);
    public abstract virtual void InsertVector4(string propertyName, Vector4 value);
    public abstract virtual CompositionGetValueStatus TryGetColor(string propertyName, Color& value);
    public abstract virtual CompositionGetValueStatus TryGetMatrix3x2(string propertyName, Matrix3x2& value);
    public abstract virtual CompositionGetValueStatus TryGetMatrix4x4(string propertyName, Matrix4x4& value);
    public abstract virtual CompositionGetValueStatus TryGetQuaternion(string propertyName, Quaternion& value);
    public abstract virtual CompositionGetValueStatus TryGetScalar(string propertyName, Single& value);
    public abstract virtual CompositionGetValueStatus TryGetVector2(string propertyName, Vector2& value);
    public abstract virtual CompositionGetValueStatus TryGetVector3(string propertyName, Vector3& value);
    public abstract virtual CompositionGetValueStatus TryGetVector4(string propertyName, Vector4& value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3DB6D621-3497-55E4-95BF-8AE5E7C34C33")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionPropertySet2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionPropertySet2 {
    public abstract virtual void InsertBoolean(string propertyName, bool value);
    public abstract virtual CompositionGetValueStatus TryGetBoolean(string propertyName, Boolean& value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("17662F3F-D351-5435-B3B4-EC26CEFECCC5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionRadialGradientBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionRadialGradientBrush {
    public Vector2 EllipseCenter { get; public set; }
    public Vector2 EllipseRadius { get; public set; }
    public Vector2 GradientOriginOffset { get; public set; }
    public abstract virtual Vector2 get_EllipseCenter();
    public abstract virtual void set_EllipseCenter(Vector2 value);
    public abstract virtual Vector2 get_EllipseRadius();
    public abstract virtual void set_EllipseRadius(Vector2 value);
    public abstract virtual Vector2 get_GradientOriginOffset();
    public abstract virtual void set_GradientOriginOffset(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BD551FCF-2C7F-5125-AC44-50A4F1D8FA76")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionRectangleGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionRectangleGeometry {
    public Vector2 Offset { get; public set; }
    public Vector2 Size { get; public set; }
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void set_Size(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("02EAFC87-8D1F-5445-A416-D81BAEE8A750")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionRoundedRectangleGeometry")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionRoundedRectangleGeometry {
    public Vector2 CornerRadius { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 Size { get; public set; }
    public abstract virtual Vector2 get_CornerRadius();
    public abstract virtual void set_CornerRadius(Vector2 value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void set_Size(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D31CA572-99CE-5969-B042-6C2D330A3859")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionScopedBatch")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionScopedBatch {
    public bool IsActive { get; }
    public bool IsEnded { get; }
    public abstract virtual void End();
    public abstract virtual void Resume();
    public abstract virtual void Suspend();
    public abstract virtual bool get_IsActive();
    public abstract virtual bool get_IsEnded();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("176B8BB5-4DAE-59B2-B9A0-2499B243267C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionShadow {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FF27546D-9750-54AE-AB8C-126CBE9158C3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionShadowFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionShadowFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ED75D4D8-437F-5640-9720-FAAE35CE5895")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionShape")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionShape {
    public Vector2 CenterPoint { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public abstract virtual Vector2 get_CenterPoint();
    public abstract virtual void set_CenterPoint(Vector2 value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual float get_RotationAngle();
    public abstract virtual void set_RotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void set_RotationAngleInDegrees(float value);
    public abstract virtual Vector2 get_Scale();
    public abstract virtual void set_Scale(Vector2 value);
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7AA2B987-9CDD-5B6E-8AC1-E989D78B4811")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionShapeFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionShapeFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("982138F2-5781-509A-BA5D-112BCB0B98EF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSpriteShape")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionSpriteShape {
    public CompositionBrush FillBrush { get; public set; }
    public CompositionGeometry Geometry { get; public set; }
    public bool IsStrokeNonScaling { get; public set; }
    public CompositionBrush StrokeBrush { get; public set; }
    public CompositionStrokeDashArray StrokeDashArray { get; }
    public CompositionStrokeCap StrokeDashCap { get; public set; }
    public float StrokeDashOffset { get; public set; }
    public CompositionStrokeCap StrokeEndCap { get; public set; }
    public CompositionStrokeLineJoin StrokeLineJoin { get; public set; }
    public float StrokeMiterLimit { get; public set; }
    public CompositionStrokeCap StrokeStartCap { get; public set; }
    public float StrokeThickness { get; public set; }
    public abstract virtual CompositionBrush get_FillBrush();
    public abstract virtual void set_FillBrush(CompositionBrush value);
    public abstract virtual CompositionGeometry get_Geometry();
    public abstract virtual void set_Geometry(CompositionGeometry value);
    public abstract virtual bool get_IsStrokeNonScaling();
    public abstract virtual void set_IsStrokeNonScaling(bool value);
    public abstract virtual CompositionBrush get_StrokeBrush();
    public abstract virtual void set_StrokeBrush(CompositionBrush value);
    public abstract virtual CompositionStrokeDashArray get_StrokeDashArray();
    public abstract virtual CompositionStrokeCap get_StrokeDashCap();
    public abstract virtual void set_StrokeDashCap(CompositionStrokeCap value);
    public abstract virtual float get_StrokeDashOffset();
    public abstract virtual void set_StrokeDashOffset(float value);
    public abstract virtual CompositionStrokeCap get_StrokeEndCap();
    public abstract virtual void set_StrokeEndCap(CompositionStrokeCap value);
    public abstract virtual CompositionStrokeLineJoin get_StrokeLineJoin();
    public abstract virtual void set_StrokeLineJoin(CompositionStrokeLineJoin value);
    public abstract virtual float get_StrokeMiterLimit();
    public abstract virtual void set_StrokeMiterLimit(float value);
    public abstract virtual CompositionStrokeCap get_StrokeStartCap();
    public abstract virtual void set_StrokeStartCap(CompositionStrokeCap value);
    public abstract virtual float get_StrokeThickness();
    public abstract virtual void set_StrokeThickness(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("397DAFE4-B6C2-5BB9-951D-F5707DE8B7BC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public interface Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop {
    public CompositionBrush SystemBackdrop { get; public set; }
    public abstract virtual CompositionBrush get_SystemBackdrop();
    public abstract virtual void set_SystemBackdrop(CompositionBrush value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9EC612C3-A5D2-4F97-9DF3-6B49CE736215")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.ICompositionSurface {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("616BB5A5-0A33-512D-B4B1-3D3734F04ACA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionSurfaceBrush {
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; public set; }
    public float HorizontalAlignmentRatio { get; public set; }
    public CompositionStretch Stretch { get; public set; }
    public ICompositionSurface Surface { get; public set; }
    public float VerticalAlignmentRatio { get; public set; }
    public abstract virtual CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public abstract virtual void set_BitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public abstract virtual float get_HorizontalAlignmentRatio();
    public abstract virtual void set_HorizontalAlignmentRatio(float value);
    public abstract virtual CompositionStretch get_Stretch();
    public abstract virtual void set_Stretch(CompositionStretch value);
    public abstract virtual ICompositionSurface get_Surface();
    public abstract virtual void set_Surface(ICompositionSurface value);
    public abstract virtual float get_VerticalAlignmentRatio();
    public abstract virtual void set_VerticalAlignmentRatio(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9904B7E3-084B-58B5-9AE1-3A2040DD7A22")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionSurfaceBrush2 {
    public Vector2 AnchorPoint { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public Vector2 Offset { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector2 Scale { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public abstract virtual Vector2 get_AnchorPoint();
    public abstract virtual void set_AnchorPoint(Vector2 value);
    public abstract virtual Vector2 get_CenterPoint();
    public abstract virtual void set_CenterPoint(Vector2 value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual float get_RotationAngle();
    public abstract virtual void set_RotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void set_RotationAngleInDegrees(float value);
    public abstract virtual Vector2 get_Scale();
    public abstract virtual void set_Scale(Vector2 value);
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8AA74C78-680C-5791-AB07-92DB0F37E352")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSurfaceBrush3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionSurfaceBrush3 {
    public bool SnapToPixels { get; public set; }
    public abstract virtual bool get_SnapToPixels();
    public abstract virtual void set_SnapToPixels(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("88AC5DF6-377F-5CF7-A02E-ED5074D30452")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionSurfaceFacade")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.ICompositionSurfaceFacade {
    public abstract virtual ICompositionSurface GetRealSurface();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("670E1826-1932-51D0-BBB3-063B4CA94B56")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionTransform")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionTransform {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("78CC7BF2-CDC0-59D2-9C04-8D208DE7EF5E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionTransformFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionTransformFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("667E4071-ADDD-5DED-B6C0-09E03A14BE7E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionViewBox")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionViewBox {
    public float HorizontalAlignmentRatio { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 Size { get; public set; }
    public CompositionStretch Stretch { get; public set; }
    public float VerticalAlignmentRatio { get; public set; }
    public abstract virtual float get_HorizontalAlignmentRatio();
    public abstract virtual void set_HorizontalAlignmentRatio(float value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void set_Size(Vector2 value);
    public abstract virtual CompositionStretch get_Stretch();
    public abstract virtual void set_Stretch(CompositionStretch value);
    public abstract virtual float get_VerticalAlignmentRatio();
    public abstract virtual void set_VerticalAlignmentRatio(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D741B99D-E248-5BA7-B728-8BEEA53FE28E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionVirtualDrawingSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionVirtualDrawingSurface {
    public abstract virtual void Trim(RectInt32[] rects);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("85895891-3F06-52E2-B5EA-D1FB595F6574")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionVirtualDrawingSurfaceFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionVirtualDrawingSurfaceFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("49E3624B-4D2E-53E7-9E02-F64831681134")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositionVisualSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositionVisualSurface {
    public Vector2 SourceOffset { get; public set; }
    public Vector2 SourceSize { get; public set; }
    public Visual SourceVisual { get; public set; }
    public abstract virtual Vector2 get_SourceOffset();
    public abstract virtual void set_SourceOffset(Vector2 value);
    public abstract virtual Vector2 get_SourceSize();
    public abstract virtual void set_SourceSize(Vector2 value);
    public abstract virtual Visual get_SourceVisual();
    public abstract virtual void set_SourceVisual(Visual value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("95213C13-C4CB-57DE-B267-D21AB901AE38")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositor {
    public abstract virtual ColorKeyFrameAnimation CreateColorKeyFrameAnimation();
    [OverloadAttribute("CreateColorBrush")]
public abstract virtual CompositionColorBrush CreateColorBrush();
    [OverloadAttribute("CreateColorBrushWithColor")]
public abstract virtual CompositionColorBrush CreateColorBrush(Color color);
    public abstract virtual ContainerVisual CreateContainerVisual();
    public abstract virtual CubicBezierEasingFunction CreateCubicBezierEasingFunction(Vector2 controlPoint1, Vector2 controlPoint2);
    [OverloadAttribute("CreateEffectFactory")]
public abstract virtual CompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect);
    [OverloadAttribute("CreateEffectFactoryWithProperties")]
public abstract virtual CompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect, IEnumerable`1<string> animatableProperties);
    [OverloadAttribute("CreateExpressionAnimation")]
public abstract virtual ExpressionAnimation CreateExpressionAnimation();
    [OverloadAttribute("CreateExpressionAnimationWithExpression")]
public abstract virtual ExpressionAnimation CreateExpressionAnimation(string expression);
    [OverloadAttribute("CreateInsetClip")]
public abstract virtual InsetClip CreateInsetClip();
    [OverloadAttribute("CreateInsetClipWithInsets")]
public abstract virtual InsetClip CreateInsetClip(float leftInset, float topInset, float rightInset, float bottomInset);
    public abstract virtual LinearEasingFunction CreateLinearEasingFunction();
    public abstract virtual CompositionPropertySet CreatePropertySet();
    public abstract virtual QuaternionKeyFrameAnimation CreateQuaternionKeyFrameAnimation();
    public abstract virtual ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation();
    public abstract virtual CompositionScopedBatch CreateScopedBatch(CompositionBatchTypes batchType);
    public abstract virtual SpriteVisual CreateSpriteVisual();
    [OverloadAttribute("CreateSurfaceBrush")]
public abstract virtual CompositionSurfaceBrush CreateSurfaceBrush();
    [OverloadAttribute("CreateSurfaceBrushWithSurface")]
public abstract virtual CompositionSurfaceBrush CreateSurfaceBrush(ICompositionSurface surface);
    public abstract virtual Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation();
    public abstract virtual Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation();
    public abstract virtual Vector4KeyFrameAnimation CreateVector4KeyFrameAnimation();
    public abstract virtual CompositionCommitBatch GetCommitBatch(CompositionBatchTypes batchType);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A9FFEDAD-3982-576D-A38A-C888FF605819")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositor2 {
    public abstract virtual AmbientLight CreateAmbientLight();
    public abstract virtual CompositionAnimationGroup CreateAnimationGroup();
    public abstract virtual CompositionBackdropBrush CreateBackdropBrush();
    public abstract virtual DistantLight CreateDistantLight();
    public abstract virtual DropShadow CreateDropShadow();
    public abstract virtual ImplicitAnimationCollection CreateImplicitAnimationCollection();
    public abstract virtual LayerVisual CreateLayerVisual();
    public abstract virtual CompositionMaskBrush CreateMaskBrush();
    public abstract virtual CompositionNineGridBrush CreateNineGridBrush();
    public abstract virtual PointLight CreatePointLight();
    public abstract virtual SpotLight CreateSpotLight();
    [OverloadAttribute("CreateStepEasingFunction")]
public abstract virtual StepEasingFunction CreateStepEasingFunction();
    [OverloadAttribute("CreateStepEasingFunctionWithStepCount")]
public abstract virtual StepEasingFunction CreateStepEasingFunction(int stepCount);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EE444BCA-735C-5CF2-B79D-A6DD46C16160")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor4")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositor4 {
    [OverloadAttribute("CreateColorGradientStop")]
public abstract virtual CompositionColorGradientStop CreateColorGradientStop();
    [OverloadAttribute("CreateColorGradientStopWithOffsetAndColor")]
public abstract virtual CompositionColorGradientStop CreateColorGradientStop(float offset, Color color);
    public abstract virtual CompositionLinearGradientBrush CreateLinearGradientBrush();
    public abstract virtual SpringScalarNaturalMotionAnimation CreateSpringScalarAnimation();
    public abstract virtual SpringVector2NaturalMotionAnimation CreateSpringVector2Animation();
    public abstract virtual SpringVector3NaturalMotionAnimation CreateSpringVector3Animation();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BB52D644-A030-5C19-B883-577DED739AE7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor5")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositor5 {
    public string Comment { get; public set; }
    public float GlobalPlaybackRate { get; public set; }
    public abstract virtual BounceScalarNaturalMotionAnimation CreateBounceScalarAnimation();
    public abstract virtual BounceVector2NaturalMotionAnimation CreateBounceVector2Animation();
    public abstract virtual BounceVector3NaturalMotionAnimation CreateBounceVector3Animation();
    public abstract virtual CompositionContainerShape CreateContainerShape();
    public abstract virtual CompositionEllipseGeometry CreateEllipseGeometry();
    public abstract virtual CompositionLineGeometry CreateLineGeometry();
    [OverloadAttribute("CreatePathGeometry")]
public abstract virtual CompositionPathGeometry CreatePathGeometry();
    [OverloadAttribute("CreatePathGeometryWithPath")]
public abstract virtual CompositionPathGeometry CreatePathGeometry(CompositionPath path);
    public abstract virtual PathKeyFrameAnimation CreatePathKeyFrameAnimation();
    public abstract virtual CompositionRectangleGeometry CreateRectangleGeometry();
    public abstract virtual CompositionRoundedRectangleGeometry CreateRoundedRectangleGeometry();
    public abstract virtual ShapeVisual CreateShapeVisual();
    [OverloadAttribute("CreateSpriteShape")]
public abstract virtual CompositionSpriteShape CreateSpriteShape();
    [OverloadAttribute("CreateSpriteShapeWithGeometry")]
public abstract virtual CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry);
    public abstract virtual CompositionViewBox CreateViewBox();
    public abstract virtual IAsyncAction RequestCommitAsync();
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public abstract virtual float get_GlobalPlaybackRate();
    public abstract virtual void set_GlobalPlaybackRate(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5FD20200-C188-5737-B567-5E61741AF19C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor6")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositor6 {
    [OverloadAttribute("CreateGeometricClip")]
public abstract virtual CompositionGeometricClip CreateGeometricClip();
    [OverloadAttribute("CreateGeometricClipWithGeometry")]
public abstract virtual CompositionGeometricClip CreateGeometricClip(CompositionGeometry geometry);
    [OverloadAttribute("CreateRedirectVisual")]
public abstract virtual RedirectVisual CreateRedirectVisual();
    [OverloadAttribute("CreateRedirectVisualWithSourceVisual")]
public abstract virtual RedirectVisual CreateRedirectVisual(Visual source);
    public abstract virtual BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5358B81B-4799-5E7C-906C-E3DF3B2E95EB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor7")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositor7 {
    public DispatcherQueue DispatcherQueue { get; }
    public abstract virtual AnimationPropertyInfo CreateAnimationPropertyInfo();
    [OverloadAttribute("CreateRectangleClip")]
public abstract virtual RectangleClip CreateRectangleClip();
    [OverloadAttribute("CreateRectangleClipWithSides")]
public abstract virtual RectangleClip CreateRectangleClip(float left, float top, float right, float bottom);
    [OverloadAttribute("CreateRectangleClipWithSidesAndRadius")]
public abstract virtual RectangleClip CreateRectangleClip(float left, float top, float right, float bottom, Vector2 topLeftRadius, Vector2 topRightRadius, Vector2 bottomRightRadius, Vector2 bottomLeftRadius);
    public abstract virtual DispatcherQueue get_DispatcherQueue();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("02F5C9EE-A3C0-577A-9D23-44024C8EACDA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositor8")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Composition.ICompositor8 {
    public abstract virtual AnimationController CreateAnimationController();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6BAA947A-F103-55C6-91AD-3D275BEA65C4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositorStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositorStatics {
    public float MaxGlobalPlaybackRate { get; }
    public float MinGlobalPlaybackRate { get; }
    public abstract virtual float get_MaxGlobalPlaybackRate();
    public abstract virtual float get_MinGlobalPlaybackRate();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("60AB2BF2-B95C-5944-8B36-C9773B9F5256")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositorWithProjectedShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositorWithProjectedShadow {
    public abstract virtual CompositionProjectedShadowCaster CreateProjectedShadowCaster();
    public abstract virtual CompositionProjectedShadow CreateProjectedShadow();
    public abstract virtual CompositionProjectedShadowReceiver CreateProjectedShadowReceiver();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FA4F8F7D-5CC7-5C9C-883B-FE878A2F3E30")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositorWithRadialGradient")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositorWithRadialGradient {
    public abstract virtual CompositionRadialGradientBrush CreateRadialGradientBrush();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5FCFE24A-690A-5378-ACEE-561E84BFB982")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICompositorWithVisualSurface")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICompositorWithVisualSurface {
    public abstract virtual CompositionVisualSurface CreateVisualSurface();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C70DBCE1-2C2F-5D8E-91A4-AAE1121E6186")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IContainerVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IContainerVisual {
    public VisualCollection Children { get; }
    public abstract virtual VisualCollection get_Children();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3FA45EEB-C6DD-5AFD-971D-EAAF6245E716")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IContainerVisualFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IContainerVisualFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("35E7FCDE-F9CE-590A-8B88-64A82A6B4B48")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ICubicBezierEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ICubicBezierEasingFunction {
    public Vector2 ControlPoint1 { get; }
    public Vector2 ControlPoint2 { get; }
    public abstract virtual Vector2 get_ControlPoint1();
    public abstract virtual Vector2 get_ControlPoint2();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("125EF556-56EE-5C60-B944-571928CA03F5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IDistantLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IDistantLight {
    public Color Color { get; public set; }
    public Visual CoordinateSpace { get; public set; }
    public Vector3 Direction { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Visual get_CoordinateSpace();
    public abstract virtual void set_CoordinateSpace(Visual value);
    public abstract virtual Vector3 get_Direction();
    public abstract virtual void set_Direction(Vector3 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9F97BFEC-B6B9-51EE-8480-B546468C748F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IDistantLight2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IDistantLight2 {
    public float Intensity { get; public set; }
    public abstract virtual float get_Intensity();
    public abstract virtual void set_Intensity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("977095D2-265F-5F58-9789-CB7F85E98C9E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IDropShadow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IDropShadow {
    public float BlurRadius { get; public set; }
    public Color Color { get; public set; }
    public CompositionBrush Mask { get; public set; }
    public Vector3 Offset { get; public set; }
    public float Opacity { get; public set; }
    public abstract virtual float get_BlurRadius();
    public abstract virtual void set_BlurRadius(float value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual CompositionBrush get_Mask();
    public abstract virtual void set_Mask(CompositionBrush value);
    public abstract virtual Vector3 get_Offset();
    public abstract virtual void set_Offset(Vector3 value);
    public abstract virtual float get_Opacity();
    public abstract virtual void set_Opacity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CBC7C266-2D33-5711-B3B4-5699410BEF56")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IDropShadow2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IDropShadow2 {
    public CompositionDropShadowSourcePolicy SourcePolicy { get; public set; }
    public abstract virtual CompositionDropShadowSourcePolicy get_SourcePolicy();
    public abstract virtual void set_SourcePolicy(CompositionDropShadowSourcePolicy value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B952E12F-4A50-51A9-A11A-23855F4AAE07")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IElasticEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IElasticEasingFunction {
    public CompositionEasingFunctionMode Mode { get; }
    public int Oscillations { get; }
    public float Springiness { get; }
    public abstract virtual CompositionEasingFunctionMode get_Mode();
    public abstract virtual int get_Oscillations();
    public abstract virtual float get_Springiness();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DF29ECC1-3FFC-565F-9D6C-533586908106")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IExponentialEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IExponentialEasingFunction {
    public float Exponent { get; }
    public CompositionEasingFunctionMode Mode { get; }
    public abstract virtual float get_Exponent();
    public abstract virtual CompositionEasingFunctionMode get_Mode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7FFF5826-1992-56C0-9060-5ADE561A4F2D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IExpressionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IExpressionAnimation {
    public string Expression { get; public set; }
    public abstract virtual string get_Expression();
    public abstract virtual void set_Expression(string value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C5C0689E-F5AE-5BED-829B-C522CDA39717")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IImplicitAnimationCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IImplicitAnimationCollection {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F9D99475-7B59-5B28-A1D2-B832DA6988C9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IInsetClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IInsetClip {
    public float BottomInset { get; public set; }
    public float LeftInset { get; public set; }
    public float RightInset { get; public set; }
    public float TopInset { get; public set; }
    public abstract virtual float get_BottomInset();
    public abstract virtual void set_BottomInset(float value);
    public abstract virtual float get_LeftInset();
    public abstract virtual void set_LeftInset(float value);
    public abstract virtual float get_RightInset();
    public abstract virtual void set_RightInset(float value);
    public abstract virtual float get_TopInset();
    public abstract virtual void set_TopInset(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5A8F57F0-F059-5B47-B308-C4C80FC71248")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IKeyFrameAnimation {
    public TimeSpan DelayTime { get; public set; }
    public TimeSpan Duration { get; public set; }
    public AnimationIterationBehavior IterationBehavior { get; public set; }
    public int IterationCount { get; public set; }
    public int KeyFrameCount { get; }
    public AnimationStopBehavior StopBehavior { get; public set; }
    [OverloadAttribute("InsertExpressionKeyFrame")]
public abstract virtual void InsertExpressionKeyFrame(float normalizedProgressKey, string value);
    [OverloadAttribute("InsertExpressionKeyFrameWithEasingFunction")]
public abstract virtual void InsertExpressionKeyFrame(float normalizedProgressKey, string value, CompositionEasingFunction easingFunction);
    public abstract virtual TimeSpan get_DelayTime();
    public abstract virtual void set_DelayTime(TimeSpan value);
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual void set_Duration(TimeSpan value);
    public abstract virtual AnimationIterationBehavior get_IterationBehavior();
    public abstract virtual void set_IterationBehavior(AnimationIterationBehavior value);
    public abstract virtual int get_IterationCount();
    public abstract virtual void set_IterationCount(int value);
    public abstract virtual int get_KeyFrameCount();
    public abstract virtual AnimationStopBehavior get_StopBehavior();
    public abstract virtual void set_StopBehavior(AnimationStopBehavior value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("414692E5-8A7E-58EA-83E1-25CE475D9300")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IKeyFrameAnimation2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IKeyFrameAnimation2 {
    public AnimationDirection Direction { get; public set; }
    public abstract virtual AnimationDirection get_Direction();
    public abstract virtual void set_Direction(AnimationDirection value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4F97E180-9BCB-5FC4-ABBE-43AA3BE327E7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IKeyFrameAnimation3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IKeyFrameAnimation3 {
    public AnimationDelayBehavior DelayBehavior { get; public set; }
    public abstract virtual AnimationDelayBehavior get_DelayBehavior();
    public abstract virtual void set_DelayBehavior(AnimationDelayBehavior value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7CCCFC87-3BAF-5100-B5F8-2F779F954F19")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IKeyFrameAnimationFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IKeyFrameAnimationFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("64D05CA1-3BF6-5D4F-98A1-7500F2F23EBE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ILayerVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ILayerVisual {
    public CompositionEffectBrush Effect { get; public set; }
    public abstract virtual CompositionEffectBrush get_Effect();
    public abstract virtual void set_Effect(CompositionEffectBrush value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9AB2E401-AF45-54DA-9991-DD31273155D2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ILayerVisual2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ILayerVisual2 {
    public CompositionShadow Shadow { get; public set; }
    public abstract virtual CompositionShadow get_Shadow();
    public abstract virtual void set_Shadow(CompositionShadow value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("79BFEEF6-70C7-50A6-BB3A-0E9636148695")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ILinearEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ILinearEasingFunction {
}
[DefaultMemberAttribute("Item")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ImplicitAnimationCollection")]
[ImplicitAnimationCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IImplicitAnimationCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ImplicitAnimationCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__ICompositionAnimationBase__;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IDictionary_string__ICompositionAnimationBase_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IImplicitAnimationCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__ICompositionAnimationBase__ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IDictionary_string__ICompositionAnimationBase_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<ICompositionAnimationBase> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICompositionAnimationBase Item { get; public set; }
    internal ImplicitAnimationCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IImplicitAnimationCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__ICompositionAnimationBase__();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__ICompositionAnimationBase__();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IDictionary_string__ICompositionAnimationBase_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IDictionary_string__ICompositionAnimationBase_();
    public static ImplicitAnimationCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ImplicitAnimationCollection x, ImplicitAnimationCollection y);
    public static bool op_Inequality(ImplicitAnimationCollection x, ImplicitAnimationCollection y);
    public sealed virtual bool Equals(ImplicitAnimationCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, ICompositionAnimationBase>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ICompositionAnimationBase> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICompositionAnimationBase get_Item(string key);
    public sealed virtual void set_Item(string key, ICompositionAnimationBase value);
    public sealed virtual void Add(string key, ICompositionAnimationBase value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, ICompositionAnimationBase& value);
    public sealed virtual void Add(KeyValuePair`2<string, ICompositionAnimationBase> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, ICompositionAnimationBase> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.UI.Composition.ICompositionAnimationBase>>.Remove(KeyValuePair`2<string, ICompositionAnimationBase> item);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2FF54EBB-A035-50BE-A73C-20014975EE31")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.INaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.INaturalMotionAnimation {
    public AnimationDelayBehavior DelayBehavior { get; public set; }
    public TimeSpan DelayTime { get; public set; }
    public AnimationStopBehavior StopBehavior { get; public set; }
    public abstract virtual AnimationDelayBehavior get_DelayBehavior();
    public abstract virtual void set_DelayBehavior(AnimationDelayBehavior value);
    public abstract virtual TimeSpan get_DelayTime();
    public abstract virtual void set_DelayTime(TimeSpan value);
    public abstract virtual AnimationStopBehavior get_StopBehavior();
    public abstract virtual void set_StopBehavior(AnimationStopBehavior value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0411A259-2622-59E2-A59E-1E23D8F83A9F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.INaturalMotionAnimationFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.INaturalMotionAnimationFactory {
}
[DefaultMemberAttribute("Item")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.InitialValueExpressionCollection")]
[InitialValueExpressionCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("System.Collections.Generic.IDictionary`2<System.String,System.String>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.InitialValueExpressionCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IDictionary_string__string_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IDictionary_string__string_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    internal InitialValueExpressionCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IDictionary_string__string_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IDictionary_string__string_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__string__();
    public static InitialValueExpressionCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InitialValueExpressionCollection x, InitialValueExpressionCollection y);
    public static bool op_Inequality(InitialValueExpressionCollection x, InitialValueExpressionCollection y);
    public sealed virtual bool Equals(InitialValueExpressionCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual void Add(string key, string value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, String& value);
    public sealed virtual void Add(KeyValuePair`2<string, string> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Remove(KeyValuePair`2<string, string> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.InsetClip")]
[InsetClipRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IInsetClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.InsetClip : CompositionClip {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IInsetClip { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float BottomInset { get; public set; }
    public float LeftInset { get; public set; }
    public float RightInset { get; public set; }
    public float TopInset { get; public set; }
    internal InsetClip(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IInsetClip();
    public static InsetClip FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InsetClip x, InsetClip y);
    public static bool op_Inequality(InsetClip x, InsetClip y);
    public sealed virtual bool Equals(InsetClip other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_BottomInset();
    public void set_BottomInset(float value);
    public float get_LeftInset();
    public void set_LeftInset(float value);
    public float get_RightInset();
    public void set_RightInset(float value);
    public float get_TopInset();
    public void set_TopInset(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.CompositionConditionalValue")]
[CompositionConditionalValueRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.ICompositionConditionalValue")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.CompositionConditionalValue : CompositionObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_ICompositionConditionalValueStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_ICompositionConditionalValue { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_ICompositionConditionalValueStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation Value { get; public set; }
    internal CompositionConditionalValue(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_ICompositionConditionalValue();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_ICompositionConditionalValueStatics();
    public static CompositionConditionalValue Create(Compositor compositor);
    public static CompositionConditionalValue FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionConditionalValue x, CompositionConditionalValue y);
    public static bool op_Inequality(CompositionConditionalValue x, CompositionConditionalValue y);
    public sealed virtual bool Equals(CompositionConditionalValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    public ExpressionAnimation get_Value();
    public void set_Value(ExpressionAnimation value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollection")]
[CompositionInteractionSourceCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.CompositionInteractionSourceCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_ICompositionInteractionSource_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_ICompositionInteractionSourceCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_ICompositionInteractionSource_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    internal CompositionInteractionSourceCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_ICompositionInteractionSourceCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_ICompositionInteractionSource_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_ICompositionInteractionSource_();
    public static CompositionInteractionSourceCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositionInteractionSourceCollection x, CompositionInteractionSourceCollection y);
    public static bool op_Inequality(CompositionInteractionSourceCollection x, CompositionInteractionSourceCollection y);
    public sealed virtual bool Equals(CompositionInteractionSourceCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Add(ICompositionInteractionSource value);
    public void Remove(ICompositionInteractionSource value);
    public void RemoveAll();
    public sealed virtual IEnumerator`1<ICompositionInteractionSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3743DDA0-FBE2-5ECF-9E80-4638A011F707")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.ICompositionConditionalValue")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.ICompositionConditionalValue {
    public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation Value { get; public set; }
    public abstract virtual ExpressionAnimation get_Condition();
    public abstract virtual void set_Condition(ExpressionAnimation value);
    public abstract virtual ExpressionAnimation get_Value();
    public abstract virtual void set_Value(ExpressionAnimation value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DF133C1F-A185-536C-B54B-8F369212A581")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.ICompositionConditionalValueStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.ICompositionConditionalValueStatics {
    public abstract virtual CompositionConditionalValue Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("711C72C0-C406-4A12-859B-B44F651AF046")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.ICompositionInteractionSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.Interactions.ICompositionInteractionSource {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9AA1B86B-B002-5E2E-BB2B-0E2C547445E1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.ICompositionInteractionSourceCollection {
    public int Count { get; }
    public abstract virtual void Add(ICompositionInteractionSource value);
    public abstract virtual void Remove(ICompositionInteractionSource value);
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("099E0124-DADF-5BC6-A895-90387657550F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionSourceConfiguration")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionSourceConfiguration {
    public InteractionSourceRedirectionMode PositionXSourceMode { get; public set; }
    public InteractionSourceRedirectionMode PositionYSourceMode { get; public set; }
    public InteractionSourceRedirectionMode ScaleSourceMode { get; public set; }
    public abstract virtual InteractionSourceRedirectionMode get_PositionXSourceMode();
    public abstract virtual void set_PositionXSourceMode(InteractionSourceRedirectionMode value);
    public abstract virtual InteractionSourceRedirectionMode get_PositionYSourceMode();
    public abstract virtual void set_PositionYSourceMode(InteractionSourceRedirectionMode value);
    public abstract virtual InteractionSourceRedirectionMode get_ScaleSourceMode();
    public abstract virtual void set_ScaleSourceMode(InteractionSourceRedirectionMode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("02D8EC1F-8F04-505E-BD1E-47B2A204DE51")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTracker {
    public CompositionInteractionSourceCollection InteractionSources { get; }
    public bool IsPositionRoundingSuggested { get; }
    public Vector3 MaxPosition { get; public set; }
    public float MaxScale { get; public set; }
    public Vector3 MinPosition { get; public set; }
    public float MinScale { get; public set; }
    public Vector3 NaturalRestingPosition { get; }
    public float NaturalRestingScale { get; }
    public IInteractionTrackerOwner Owner { get; }
    public Vector3 Position { get; }
    public Nullable`1<Vector3> PositionInertiaDecayRate { get; public set; }
    public Vector3 PositionVelocityInPixelsPerSecond { get; }
    public float Scale { get; }
    public Nullable`1<float> ScaleInertiaDecayRate { get; public set; }
    public float ScaleVelocityInPercentPerSecond { get; }
    public abstract virtual void AdjustPositionXIfGreaterThanThreshold(float adjustment, float positionThreshold);
    public abstract virtual void AdjustPositionYIfGreaterThanThreshold(float adjustment, float positionThreshold);
    public abstract virtual void ConfigurePositionXInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    public abstract virtual void ConfigurePositionYInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    public abstract virtual void ConfigureScaleInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    public abstract virtual int TryUpdatePosition(Vector3 value);
    public abstract virtual int TryUpdatePositionBy(Vector3 amount);
    public abstract virtual int TryUpdatePositionWithAnimation(CompositionAnimation animation);
    public abstract virtual int TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond);
    public abstract virtual int TryUpdateScale(float value, Vector3 centerPoint);
    public abstract virtual int TryUpdateScaleWithAnimation(CompositionAnimation animation, Vector3 centerPoint);
    public abstract virtual int TryUpdateScaleWithAdditionalVelocity(float velocityInPercentPerSecond, Vector3 centerPoint);
    public abstract virtual CompositionInteractionSourceCollection get_InteractionSources();
    public abstract virtual bool get_IsPositionRoundingSuggested();
    public abstract virtual Vector3 get_MaxPosition();
    public abstract virtual void set_MaxPosition(Vector3 value);
    public abstract virtual float get_MaxScale();
    public abstract virtual void set_MaxScale(float value);
    public abstract virtual Vector3 get_MinPosition();
    public abstract virtual void set_MinPosition(Vector3 value);
    public abstract virtual float get_MinScale();
    public abstract virtual void set_MinScale(float value);
    public abstract virtual Vector3 get_NaturalRestingPosition();
    public abstract virtual float get_NaturalRestingScale();
    public abstract virtual IInteractionTrackerOwner get_Owner();
    public abstract virtual Vector3 get_Position();
    public abstract virtual Nullable`1<Vector3> get_PositionInertiaDecayRate();
    public abstract virtual void set_PositionInertiaDecayRate(Nullable`1<Vector3> value);
    public abstract virtual Vector3 get_PositionVelocityInPixelsPerSecond();
    public abstract virtual float get_Scale();
    public abstract virtual Nullable`1<float> get_ScaleInertiaDecayRate();
    public abstract virtual void set_ScaleInertiaDecayRate(Nullable`1<float> value);
    public abstract virtual float get_ScaleVelocityInPercentPerSecond();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("396D7FB1-2FAD-5508-8591-4FF0DC5A7484")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTracker2 {
    public abstract virtual void ConfigureCenterPointXInertiaModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public abstract virtual void ConfigureCenterPointYInertiaModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("239752CF-266C-5ACB-ACC3-B3E3ECAF4D3F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTracker3 {
    public abstract virtual void ConfigureVector2PositionInertiaModifiers(IEnumerable`1<InteractionTrackerVector2InertiaModifier> modifiers);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A9A9CE02-53C9-5690-A575-F340B7C2FDF2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker4")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTracker4 {
    public bool IsInertiaFromImpulse { get; }
    [OverloadAttribute("TryUpdatePositionWithOption")]
public abstract virtual int TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option);
    [OverloadAttribute("TryUpdatePositionByWithOption")]
public abstract virtual int TryUpdatePositionBy(Vector3 amount, InteractionTrackerClampingOption option);
    public abstract virtual bool get_IsInertiaFromImpulse();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DBFCD333-C3BF-5057-A45E-25EDF06EBD8F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTracker5")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTracker5 {
    [OverloadAttribute("TryUpdatePositionWithOption")]
public abstract virtual int TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, InteractionTrackerPositionUpdateOption posUpdateOption);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7464035C-CFCE-56DA-9472-420F276BD0A5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs {
    public int RequestId { get; }
    public abstract virtual int get_RequestId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("06B99FBC-D6A8-5AE3-88B8-E91621BECBD6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs2 {
    public bool IsFromBinding { get; }
    public abstract virtual bool get_IsFromBinding();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("199094AB-15FD-539C-97B8-964A8196F777")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs {
    public int RequestId { get; }
    public abstract virtual int get_RequestId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4EB213C0-931C-5164-8965-11C0186D3390")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs2 {
    public bool IsFromBinding { get; }
    public abstract virtual bool get_IsFromBinding();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4D3A0C6B-C508-5029-A47A-CBF64636F010")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifier")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifier {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6DEE5B33-0B5A-57B1-8537-93D4FD038F9F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifierFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("91F662C0-3141-5B5E-862F-CFC60BEE8CD6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotion")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotion {
    public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation Motion { get; public set; }
    public abstract virtual ExpressionAnimation get_Condition();
    public abstract virtual void set_Condition(ExpressionAnimation value);
    public abstract virtual ExpressionAnimation get_Motion();
    public abstract virtual void set_Motion(ExpressionAnimation value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B0185A4F-0059-52C6-A660-9AED0C44FF7D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotionStatics {
    public abstract virtual InteractionTrackerInertiaMotion Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8C7482E0-185D-56B1-B67F-FCA4FCD13CD2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion {
    public ExpressionAnimation Condition { get; public set; }
    public ScalarNaturalMotionAnimation NaturalMotion { get; public set; }
    public abstract virtual ExpressionAnimation get_Condition();
    public abstract virtual void set_Condition(ExpressionAnimation value);
    public abstract virtual ScalarNaturalMotionAnimation get_NaturalMotion();
    public abstract virtual void set_NaturalMotion(ScalarNaturalMotionAnimation value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("860EC143-F165-5298-ABF2-47369DD07F10")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotionStatics {
    public abstract virtual InteractionTrackerInertiaNaturalMotion Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1A2B20CD-3371-53FF-A560-F4847B467D73")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue {
    public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation RestingValue { get; public set; }
    public abstract virtual ExpressionAnimation get_Condition();
    public abstract virtual void set_Condition(ExpressionAnimation value);
    public abstract virtual ExpressionAnimation get_RestingValue();
    public abstract virtual void set_RestingValue(ExpressionAnimation value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CF0F0414-7FDF-5284-AEEF-28B71B62AA4F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValueStatics {
    public abstract virtual InteractionTrackerInertiaRestingValue Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5B76C949-A4D0-5C9D-9292-7013AE9656C7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs {
    public Nullable`1<Vector3> ModifiedRestingPosition { get; }
    public Nullable`1<float> ModifiedRestingScale { get; }
    public Vector3 NaturalRestingPosition { get; }
    public float NaturalRestingScale { get; }
    public Vector3 PositionVelocityInPixelsPerSecond { get; }
    public int RequestId { get; }
    public float ScaleVelocityInPercentPerSecond { get; }
    public abstract virtual Nullable`1<Vector3> get_ModifiedRestingPosition();
    public abstract virtual Nullable`1<float> get_ModifiedRestingScale();
    public abstract virtual Vector3 get_NaturalRestingPosition();
    public abstract virtual float get_NaturalRestingScale();
    public abstract virtual Vector3 get_PositionVelocityInPixelsPerSecond();
    public abstract virtual int get_RequestId();
    public abstract virtual float get_ScaleVelocityInPercentPerSecond();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C42D7E8F-7199-57A9-8AEC-8727552B13E6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs2 {
    public bool IsInertiaFromImpulse { get; }
    public abstract virtual bool get_IsInertiaFromImpulse();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CE726CA0-1C04-531B-9951-4AEC996952E4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs3 {
    public bool IsFromBinding { get; }
    public abstract virtual bool get_IsFromBinding();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("70D29B84-0931-5F17-A8A1-82F8F8782532")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs {
    public int RequestId { get; }
    public abstract virtual int get_RequestId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2F1FF38D-2F51-5CEB-8D09-BDA1519F9342")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs2 {
    public bool IsFromBinding { get; }
    public abstract virtual bool get_IsFromBinding();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8869779D-1D2A-5816-836A-68A910507D87")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.Interactions.IInteractionTrackerOwner {
    public abstract virtual void CustomAnimationStateEntered(InteractionTracker sender, InteractionTrackerCustomAnimationStateEnteredArgs args);
    public abstract virtual void IdleStateEntered(InteractionTracker sender, InteractionTrackerIdleStateEnteredArgs args);
    public abstract virtual void InertiaStateEntered(InteractionTracker sender, InteractionTrackerInertiaStateEnteredArgs args);
    public abstract virtual void InteractingStateEntered(InteractionTracker sender, InteractionTrackerInteractingStateEnteredArgs args);
    public abstract virtual void RequestIgnored(InteractionTracker sender, InteractionTrackerRequestIgnoredArgs args);
    public abstract virtual void ValuesChanged(InteractionTracker sender, InteractionTrackerValuesChangedArgs args);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C276205E-F7A5-5BA2-AD45-D12C3C339149")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgs {
    public int RequestId { get; }
    public abstract virtual int get_RequestId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7AC9867A-E16E-56EF-9809-F6E404240F50")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics {
    public abstract virtual InteractionTracker Create(Compositor compositor);
    public abstract virtual InteractionTracker CreateWithOwner(Compositor compositor, IInteractionTrackerOwner owner);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("25658E4C-B99F-5108-AAB7-1CC44F11508B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerStatics2 {
    public abstract virtual void SetBindingMode(InteractionTracker boundTracker1, InteractionTracker boundTracker2, InteractionBindingAxisModes axisMode);
    public abstract virtual InteractionBindingAxisModes GetBindingMode(InteractionTracker boundTracker1, InteractionTracker boundTracker2);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9B495BED-1CF7-55C1-82B9-8022CBF3C766")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgs {
    public Vector3 Position { get; }
    public int RequestId { get; }
    public float Scale { get; }
    public abstract virtual Vector3 get_Position();
    public abstract virtual int get_RequestId();
    public abstract virtual float get_Scale();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4B8ED310-CB61-5F0A-B99A-940CDD2C42B1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifier")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifier {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1B3FD240-BA66-5296-B801-62A2A3606613")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifierFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("097BA1A6-E077-52D1-86D3-38E3F6619DDF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion {
    public ExpressionAnimation Condition { get; public set; }
    public Vector2NaturalMotionAnimation NaturalMotion { get; public set; }
    public abstract virtual ExpressionAnimation get_Condition();
    public abstract virtual void set_Condition(ExpressionAnimation value);
    public abstract virtual Vector2NaturalMotionAnimation get_NaturalMotion();
    public abstract virtual void set_NaturalMotion(Vector2NaturalMotionAnimation value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CC24AB87-9131-5286-B3CE-1EF97E0974E6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotionStatics {
    public abstract virtual InteractionTrackerVector2InertiaNaturalMotion Create(Compositor compositor);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.InteractionBindingAxisModes>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.InteractionBindingAxisModes : Enum {
    public UInt32 value__;
    public static InteractionBindingAxisModes None;
    public static InteractionBindingAxisModes PositionX;
    public static InteractionBindingAxisModes PositionY;
    public static InteractionBindingAxisModes Scale;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.InteractionChainingMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.InteractionChainingMode : Enum {
    public int value__;
    public static InteractionChainingMode Auto;
    public static InteractionChainingMode Always;
    public static InteractionChainingMode Never;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionSourceConfiguration")]
[InteractionSourceConfigurationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionSourceConfiguration")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionSourceConfiguration : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionSourceConfiguration { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public InteractionSourceRedirectionMode PositionXSourceMode { get; public set; }
    public InteractionSourceRedirectionMode PositionYSourceMode { get; public set; }
    public InteractionSourceRedirectionMode ScaleSourceMode { get; public set; }
    internal InteractionSourceConfiguration(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionSourceConfiguration();
    public static InteractionSourceConfiguration FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionSourceConfiguration x, InteractionSourceConfiguration y);
    public static bool op_Inequality(InteractionSourceConfiguration x, InteractionSourceConfiguration y);
    public sealed virtual bool Equals(InteractionSourceConfiguration other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public InteractionSourceRedirectionMode get_PositionXSourceMode();
    public void set_PositionXSourceMode(InteractionSourceRedirectionMode value);
    public InteractionSourceRedirectionMode get_PositionYSourceMode();
    public void set_PositionYSourceMode(InteractionSourceRedirectionMode value);
    public InteractionSourceRedirectionMode get_ScaleSourceMode();
    public void set_ScaleSourceMode(InteractionSourceRedirectionMode value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.InteractionSourceMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.InteractionSourceMode : Enum {
    public int value__;
    public static InteractionSourceMode Disabled;
    public static InteractionSourceMode EnabledWithInertia;
    public static InteractionSourceMode EnabledWithoutInertia;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.InteractionSourceRedirectionMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.InteractionSourceRedirectionMode : Enum {
    public int value__;
    public static InteractionSourceRedirectionMode Disabled;
    public static InteractionSourceRedirectionMode Enabled;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTracker")]
[InteractionTrackerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTracker")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTracker : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker4;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker5;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker4 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker5 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionInteractionSourceCollection InteractionSources { get; }
    public bool IsInertiaFromImpulse { get; }
    public bool IsPositionRoundingSuggested { get; }
    public Vector3 MaxPosition { get; public set; }
    public float MaxScale { get; public set; }
    public Vector3 MinPosition { get; public set; }
    public float MinScale { get; public set; }
    public Vector3 NaturalRestingPosition { get; }
    public float NaturalRestingScale { get; }
    public IInteractionTrackerOwner Owner { get; }
    public Vector3 Position { get; }
    public Nullable`1<Vector3> PositionInertiaDecayRate { get; public set; }
    public Vector3 PositionVelocityInPixelsPerSecond { get; }
    public float Scale { get; }
    public Nullable`1<float> ScaleInertiaDecayRate { get; public set; }
    public float ScaleVelocityInPercentPerSecond { get; }
    internal InteractionTracker(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker4();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker4();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker5();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTracker5();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics();
    public static InteractionTracker Create(Compositor compositor);
    public static InteractionTracker CreateWithOwner(Compositor compositor, IInteractionTrackerOwner owner);
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerStatics2();
    public static void SetBindingMode(InteractionTracker boundTracker1, InteractionTracker boundTracker2, InteractionBindingAxisModes axisMode);
    public static InteractionBindingAxisModes GetBindingMode(InteractionTracker boundTracker1, InteractionTracker boundTracker2);
    public static InteractionTracker FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTracker x, InteractionTracker y);
    public static bool op_Inequality(InteractionTracker x, InteractionTracker y);
    public sealed virtual bool Equals(InteractionTracker other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void AdjustPositionXIfGreaterThanThreshold(float adjustment, float positionThreshold);
    public void AdjustPositionYIfGreaterThanThreshold(float adjustment, float positionThreshold);
    public void ConfigurePositionXInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    public void ConfigurePositionYInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    public void ConfigureScaleInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    public int TryUpdatePosition(Vector3 value);
    public int TryUpdatePositionBy(Vector3 amount);
    public int TryUpdatePositionWithAnimation(CompositionAnimation animation);
    public int TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond);
    public int TryUpdateScale(float value, Vector3 centerPoint);
    public int TryUpdateScaleWithAnimation(CompositionAnimation animation, Vector3 centerPoint);
    public int TryUpdateScaleWithAdditionalVelocity(float velocityInPercentPerSecond, Vector3 centerPoint);
    public void ConfigureCenterPointXInertiaModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public void ConfigureCenterPointYInertiaModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public void ConfigureVector2PositionInertiaModifiers(IEnumerable`1<InteractionTrackerVector2InertiaModifier> modifiers);
    public int TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option);
    public int TryUpdatePositionBy(Vector3 amount, InteractionTrackerClampingOption option);
    public int TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, InteractionTrackerPositionUpdateOption posUpdateOption);
    public CompositionInteractionSourceCollection get_InteractionSources();
    public bool get_IsInertiaFromImpulse();
    public bool get_IsPositionRoundingSuggested();
    public Vector3 get_MaxPosition();
    public void set_MaxPosition(Vector3 value);
    public float get_MaxScale();
    public void set_MaxScale(float value);
    public Vector3 get_MinPosition();
    public void set_MinPosition(Vector3 value);
    public float get_MinScale();
    public void set_MinScale(float value);
    public Vector3 get_NaturalRestingPosition();
    public float get_NaturalRestingScale();
    public IInteractionTrackerOwner get_Owner();
    public Vector3 get_Position();
    public Nullable`1<Vector3> get_PositionInertiaDecayRate();
    public void set_PositionInertiaDecayRate(Nullable`1<Vector3> value);
    public Vector3 get_PositionVelocityInPixelsPerSecond();
    public float get_Scale();
    public Nullable`1<float> get_ScaleInertiaDecayRate();
    public void set_ScaleInertiaDecayRate(Nullable`1<float> value);
    public float get_ScaleVelocityInPercentPerSecond();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.InteractionTrackerClampingOption>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.InteractionTrackerClampingOption : Enum {
    public int value__;
    public static InteractionTrackerClampingOption Auto;
    public static InteractionTrackerClampingOption Disabled;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgs")]
[InteractionTrackerCustomAnimationStateEnteredArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerCustomAnimationStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgs : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsFromBinding { get; }
    public int RequestId { get; }
    internal InteractionTrackerCustomAnimationStateEnteredArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerCustomAnimationStateEnteredArgs2();
    public static InteractionTrackerCustomAnimationStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerCustomAnimationStateEnteredArgs x, InteractionTrackerCustomAnimationStateEnteredArgs y);
    public static bool op_Inequality(InteractionTrackerCustomAnimationStateEnteredArgs x, InteractionTrackerCustomAnimationStateEnteredArgs y);
    public sealed virtual bool Equals(InteractionTrackerCustomAnimationStateEnteredArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_IsFromBinding();
    public int get_RequestId();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgs")]
[InteractionTrackerIdleStateEnteredArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerIdleStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgs : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsFromBinding { get; }
    public int RequestId { get; }
    internal InteractionTrackerIdleStateEnteredArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerIdleStateEnteredArgs2();
    public static InteractionTrackerIdleStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerIdleStateEnteredArgs x, InteractionTrackerIdleStateEnteredArgs y);
    public static bool op_Inequality(InteractionTrackerIdleStateEnteredArgs x, InteractionTrackerIdleStateEnteredArgs y);
    public sealed virtual bool Equals(InteractionTrackerIdleStateEnteredArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_IsFromBinding();
    public int get_RequestId();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaModifier")]
[InteractionTrackerInertiaModifierRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaModifier")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaModifier : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifier;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifierFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifier { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifierFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal InteractionTrackerInertiaModifier(IObjectReference objRef);
    protected InteractionTrackerInertiaModifier(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifier();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifier();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaModifierFactory();
    public static InteractionTrackerInertiaModifier FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerInertiaModifier x, InteractionTrackerInertiaModifier y);
    public static bool op_Inequality(InteractionTrackerInertiaModifier x, InteractionTrackerInertiaModifier y);
    public sealed virtual bool Equals(InteractionTrackerInertiaModifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaMotion")]
[InteractionTrackerInertiaMotionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaMotion")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaMotion : InteractionTrackerInertiaModifier {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotionStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotion { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotionStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation Motion { get; public set; }
    internal InteractionTrackerInertiaMotion(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotion();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaMotionStatics();
    public static InteractionTrackerInertiaMotion Create(Compositor compositor);
    public static InteractionTrackerInertiaMotion FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerInertiaMotion x, InteractionTrackerInertiaMotion y);
    public static bool op_Inequality(InteractionTrackerInertiaMotion x, InteractionTrackerInertiaMotion y);
    public sealed virtual bool Equals(InteractionTrackerInertiaMotion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    public ExpressionAnimation get_Motion();
    public void set_Motion(ExpressionAnimation value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion")]
[InteractionTrackerInertiaNaturalMotionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaNaturalMotion")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion : InteractionTrackerInertiaModifier {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotionStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotion { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotionStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ExpressionAnimation Condition { get; public set; }
    public ScalarNaturalMotionAnimation NaturalMotion { get; public set; }
    internal InteractionTrackerInertiaNaturalMotion(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotion();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaNaturalMotionStatics();
    public static InteractionTrackerInertiaNaturalMotion Create(Compositor compositor);
    public static InteractionTrackerInertiaNaturalMotion FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerInertiaNaturalMotion x, InteractionTrackerInertiaNaturalMotion y);
    public static bool op_Inequality(InteractionTrackerInertiaNaturalMotion x, InteractionTrackerInertiaNaturalMotion y);
    public sealed virtual bool Equals(InteractionTrackerInertiaNaturalMotion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    public ScalarNaturalMotionAnimation get_NaturalMotion();
    public void set_NaturalMotion(ScalarNaturalMotionAnimation value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue")]
[InteractionTrackerInertiaRestingValueRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaRestingValue")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue : InteractionTrackerInertiaModifier {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValueStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValue { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValueStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation RestingValue { get; public set; }
    internal InteractionTrackerInertiaRestingValue(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValue();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaRestingValueStatics();
    public static InteractionTrackerInertiaRestingValue Create(Compositor compositor);
    public static InteractionTrackerInertiaRestingValue FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerInertiaRestingValue x, InteractionTrackerInertiaRestingValue y);
    public static bool op_Inequality(InteractionTrackerInertiaRestingValue x, InteractionTrackerInertiaRestingValue y);
    public sealed virtual bool Equals(InteractionTrackerInertiaRestingValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    public ExpressionAnimation get_RestingValue();
    public void set_RestingValue(ExpressionAnimation value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgs")]
[InteractionTrackerInertiaStateEnteredArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerInertiaStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgs : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs3;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs3 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsFromBinding { get; }
    public bool IsInertiaFromImpulse { get; }
    public Nullable`1<Vector3> ModifiedRestingPosition { get; }
    public Nullable`1<float> ModifiedRestingScale { get; }
    public Vector3 NaturalRestingPosition { get; }
    public float NaturalRestingScale { get; }
    public Vector3 PositionVelocityInPixelsPerSecond { get; }
    public int RequestId { get; }
    public float ScaleVelocityInPercentPerSecond { get; }
    internal InteractionTrackerInertiaStateEnteredArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInertiaStateEnteredArgs3();
    public static InteractionTrackerInertiaStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerInertiaStateEnteredArgs x, InteractionTrackerInertiaStateEnteredArgs y);
    public static bool op_Inequality(InteractionTrackerInertiaStateEnteredArgs x, InteractionTrackerInertiaStateEnteredArgs y);
    public sealed virtual bool Equals(InteractionTrackerInertiaStateEnteredArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_IsFromBinding();
    public bool get_IsInertiaFromImpulse();
    public Nullable`1<Vector3> get_ModifiedRestingPosition();
    public Nullable`1<float> get_ModifiedRestingScale();
    public Vector3 get_NaturalRestingPosition();
    public float get_NaturalRestingScale();
    public Vector3 get_PositionVelocityInPixelsPerSecond();
    public int get_RequestId();
    public float get_ScaleVelocityInPercentPerSecond();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgs")]
[InteractionTrackerInteractingStateEnteredArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerInteractingStateEnteredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgs : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsFromBinding { get; }
    public int RequestId { get; }
    internal InteractionTrackerInteractingStateEnteredArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerInteractingStateEnteredArgs2();
    public static InteractionTrackerInteractingStateEnteredArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerInteractingStateEnteredArgs x, InteractionTrackerInteractingStateEnteredArgs y);
    public static bool op_Inequality(InteractionTrackerInteractingStateEnteredArgs x, InteractionTrackerInteractingStateEnteredArgs y);
    public sealed virtual bool Equals(InteractionTrackerInteractingStateEnteredArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_IsFromBinding();
    public int get_RequestId();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.InteractionTrackerPositionUpdateOption>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.InteractionTrackerPositionUpdateOption : Enum {
    public int value__;
    public static InteractionTrackerPositionUpdateOption Default;
    public static InteractionTrackerPositionUpdateOption AllowActiveCustomScaleAnimation;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgs")]
[InteractionTrackerRequestIgnoredArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerRequestIgnoredArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerRequestIgnoredArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public int RequestId { get; }
    internal InteractionTrackerRequestIgnoredArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerRequestIgnoredArgs();
    public static InteractionTrackerRequestIgnoredArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerRequestIgnoredArgs x, InteractionTrackerRequestIgnoredArgs y);
    public static bool op_Inequality(InteractionTrackerRequestIgnoredArgs x, InteractionTrackerRequestIgnoredArgs y);
    public sealed virtual bool Equals(InteractionTrackerRequestIgnoredArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public int get_RequestId();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerValuesChangedArgs")]
[InteractionTrackerValuesChangedArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerValuesChangedArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerValuesChangedArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerValuesChangedArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Vector3 Position { get; }
    public int RequestId { get; }
    public float Scale { get; }
    internal InteractionTrackerValuesChangedArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerValuesChangedArgs();
    public static InteractionTrackerValuesChangedArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerValuesChangedArgs x, InteractionTrackerValuesChangedArgs y);
    public static bool op_Inequality(InteractionTrackerValuesChangedArgs x, InteractionTrackerValuesChangedArgs y);
    public sealed virtual bool Equals(InteractionTrackerValuesChangedArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Vector3 get_Position();
    public int get_RequestId();
    public float get_Scale();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifier")]
[InteractionTrackerVector2InertiaModifierRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaModifier")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifier : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifier;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifierFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifier { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifierFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal InteractionTrackerVector2InertiaModifier(IObjectReference objRef);
    protected InteractionTrackerVector2InertiaModifier(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifier();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifier();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaModifierFactory();
    public static InteractionTrackerVector2InertiaModifier FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerVector2InertiaModifier x, InteractionTrackerVector2InertiaModifier y);
    public static bool op_Inequality(InteractionTrackerVector2InertiaModifier x, InteractionTrackerVector2InertiaModifier y);
    public sealed virtual bool Equals(InteractionTrackerVector2InertiaModifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion")]
[InteractionTrackerVector2InertiaNaturalMotionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IInteractionTrackerVector2InertiaNaturalMotion")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion : InteractionTrackerVector2InertiaModifier {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotionStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotion { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotionStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ExpressionAnimation Condition { get; public set; }
    public Vector2NaturalMotionAnimation NaturalMotion { get; public set; }
    internal InteractionTrackerVector2InertiaNaturalMotion(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotion();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IInteractionTrackerVector2InertiaNaturalMotionStatics();
    public static InteractionTrackerVector2InertiaNaturalMotion Create(Compositor compositor);
    public static InteractionTrackerVector2InertiaNaturalMotion FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InteractionTrackerVector2InertiaNaturalMotion x, InteractionTrackerVector2InertiaNaturalMotion y);
    public static bool op_Inequality(InteractionTrackerVector2InertiaNaturalMotion x, InteractionTrackerVector2InertiaNaturalMotion y);
    public sealed virtual bool Equals(InteractionTrackerVector2InertiaNaturalMotion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    public Vector2NaturalMotionAnimation get_NaturalMotion();
    public void set_NaturalMotion(Vector2NaturalMotionAnimation value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EA595C95-B9CB-5CD4-BB9C-4934FF329063")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IVisualInteractionSource {
    public bool IsPositionXRailsEnabled { get; public set; }
    public bool IsPositionYRailsEnabled { get; public set; }
    public VisualInteractionSourceRedirectionMode ManipulationRedirectionMode { get; public set; }
    public InteractionChainingMode PositionXChainingMode { get; public set; }
    public InteractionSourceMode PositionXSourceMode { get; public set; }
    public InteractionChainingMode PositionYChainingMode { get; public set; }
    public InteractionSourceMode PositionYSourceMode { get; public set; }
    public InteractionChainingMode ScaleChainingMode { get; public set; }
    public InteractionSourceMode ScaleSourceMode { get; public set; }
    public Visual Source { get; }
    public abstract virtual void TryRedirectForManipulation(PointerPoint pointerPoint);
    public abstract virtual bool get_IsPositionXRailsEnabled();
    public abstract virtual void set_IsPositionXRailsEnabled(bool value);
    public abstract virtual bool get_IsPositionYRailsEnabled();
    public abstract virtual void set_IsPositionYRailsEnabled(bool value);
    public abstract virtual VisualInteractionSourceRedirectionMode get_ManipulationRedirectionMode();
    public abstract virtual void set_ManipulationRedirectionMode(VisualInteractionSourceRedirectionMode value);
    public abstract virtual InteractionChainingMode get_PositionXChainingMode();
    public abstract virtual void set_PositionXChainingMode(InteractionChainingMode value);
    public abstract virtual InteractionSourceMode get_PositionXSourceMode();
    public abstract virtual void set_PositionXSourceMode(InteractionSourceMode value);
    public abstract virtual InteractionChainingMode get_PositionYChainingMode();
    public abstract virtual void set_PositionYChainingMode(InteractionChainingMode value);
    public abstract virtual InteractionSourceMode get_PositionYSourceMode();
    public abstract virtual void set_PositionYSourceMode(InteractionSourceMode value);
    public abstract virtual InteractionChainingMode get_ScaleChainingMode();
    public abstract virtual void set_ScaleChainingMode(InteractionChainingMode value);
    public abstract virtual InteractionSourceMode get_ScaleSourceMode();
    public abstract virtual void set_ScaleSourceMode(InteractionSourceMode value);
    public abstract virtual Visual get_Source();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FF1132BA-DC0D-519E-BE49-BE301E52306A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IVisualInteractionSource2 {
    public Vector3 DeltaPosition { get; }
    public float DeltaScale { get; }
    public Vector3 Position { get; }
    public Vector3 PositionVelocity { get; }
    public float Scale { get; }
    public float ScaleVelocity { get; }
    public abstract virtual void ConfigureCenterPointXModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public abstract virtual void ConfigureCenterPointYModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public abstract virtual void ConfigureDeltaPositionXModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public abstract virtual void ConfigureDeltaPositionYModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public abstract virtual void ConfigureDeltaScaleModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public abstract virtual Vector3 get_DeltaPosition();
    public abstract virtual float get_DeltaScale();
    public abstract virtual Vector3 get_Position();
    public abstract virtual Vector3 get_PositionVelocity();
    public abstract virtual float get_Scale();
    public abstract virtual float get_ScaleVelocity();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D523BD66-A05D-5417-8E07-84AE3CAF9752")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSource3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IVisualInteractionSource3 {
    public InteractionSourceConfiguration PointerWheelConfig { get; }
    public abstract virtual InteractionSourceConfiguration get_PointerWheelConfig();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FEB73102-238C-52AA-8E03-B68D5ECC44B3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceObjectFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IVisualInteractionSourceObjectFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5FC9C763-E2E5-530E-87CD-B93118ADE8A3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics {
    public abstract virtual VisualInteractionSource Create(Visual source);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A6B494FE-12A1-5A73-B87E-4C4EF58EAC6C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Interactions.IVisualInteractionSourceStatics2 {
    public abstract virtual VisualInteractionSource CreateFromIVisualElement(IVisualElement source);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Interactions.VisualInteractionSource")]
[VisualInteractionSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Interactions.IVisualInteractionSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Interactions.VisualInteractionSource : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_ICompositionInteractionSource;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceObjectFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_ICompositionInteractionSource { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceObjectFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector3 DeltaPosition { get; }
    public float DeltaScale { get; }
    public bool IsPositionXRailsEnabled { get; public set; }
    public bool IsPositionYRailsEnabled { get; public set; }
    public VisualInteractionSourceRedirectionMode ManipulationRedirectionMode { get; public set; }
    public InteractionSourceConfiguration PointerWheelConfig { get; }
    public Vector3 Position { get; }
    public Vector3 PositionVelocity { get; }
    public InteractionChainingMode PositionXChainingMode { get; public set; }
    public InteractionSourceMode PositionXSourceMode { get; public set; }
    public InteractionChainingMode PositionYChainingMode { get; public set; }
    public InteractionSourceMode PositionYSourceMode { get; public set; }
    public float Scale { get; }
    public InteractionChainingMode ScaleChainingMode { get; public set; }
    public InteractionSourceMode ScaleSourceMode { get; public set; }
    public float ScaleVelocity { get; }
    public Visual Source { get; }
    protected internal VisualInteractionSource(IObjectReference objRef);
    protected VisualInteractionSource(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSource3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Interactions_ICompositionInteractionSource();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_ICompositionInteractionSource();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceObjectFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics();
    public static VisualInteractionSource Create(Visual source);
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Interactions_IVisualInteractionSourceStatics2();
    public static VisualInteractionSource CreateFromIVisualElement(IVisualElement source);
    public static VisualInteractionSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(VisualInteractionSource x, VisualInteractionSource y);
    public static bool op_Inequality(VisualInteractionSource x, VisualInteractionSource y);
    public sealed virtual bool Equals(VisualInteractionSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void TryRedirectForManipulation(PointerPoint pointerPoint);
    public void ConfigureCenterPointXModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public void ConfigureCenterPointYModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public void ConfigureDeltaPositionXModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public void ConfigureDeltaPositionYModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public void ConfigureDeltaScaleModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    public Vector3 get_DeltaPosition();
    public float get_DeltaScale();
    public bool get_IsPositionXRailsEnabled();
    public void set_IsPositionXRailsEnabled(bool value);
    public bool get_IsPositionYRailsEnabled();
    public void set_IsPositionYRailsEnabled(bool value);
    public VisualInteractionSourceRedirectionMode get_ManipulationRedirectionMode();
    public void set_ManipulationRedirectionMode(VisualInteractionSourceRedirectionMode value);
    public InteractionSourceConfiguration get_PointerWheelConfig();
    public Vector3 get_Position();
    public Vector3 get_PositionVelocity();
    public InteractionChainingMode get_PositionXChainingMode();
    public void set_PositionXChainingMode(InteractionChainingMode value);
    public InteractionSourceMode get_PositionXSourceMode();
    public void set_PositionXSourceMode(InteractionSourceMode value);
    public InteractionChainingMode get_PositionYChainingMode();
    public void set_PositionYChainingMode(InteractionChainingMode value);
    public InteractionSourceMode get_PositionYSourceMode();
    public void set_PositionYSourceMode(InteractionSourceMode value);
    public float get_Scale();
    public InteractionChainingMode get_ScaleChainingMode();
    public void set_ScaleChainingMode(InteractionChainingMode value);
    public InteractionSourceMode get_ScaleSourceMode();
    public void set_ScaleSourceMode(InteractionSourceMode value);
    public float get_ScaleVelocity();
    public Visual get_Source();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode : Enum {
    public int value__;
    public static VisualInteractionSourceRedirectionMode Off;
    public static VisualInteractionSourceRedirectionMode CapableTouchpadOnly;
    public static VisualInteractionSourceRedirectionMode PointerWheelOnly;
    public static VisualInteractionSourceRedirectionMode CapableTouchpadAndPointerWheel;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2B692808-43DA-5118-B66D-904A3EC74FD9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IPathKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IPathKeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, CompositionPath path);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, CompositionPath path, CompositionEasingFunction easingFunction);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ED5CC102-F0AC-59A8-8678-CE54146E7BE8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IPointLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IPointLight {
    public Color Color { get; public set; }
    public float ConstantAttenuation { get; public set; }
    public Visual CoordinateSpace { get; public set; }
    public float LinearAttenuation { get; public set; }
    public Vector3 Offset { get; public set; }
    public float QuadraticAttenuation { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual float get_ConstantAttenuation();
    public abstract virtual void set_ConstantAttenuation(float value);
    public abstract virtual Visual get_CoordinateSpace();
    public abstract virtual void set_CoordinateSpace(Visual value);
    public abstract virtual float get_LinearAttenuation();
    public abstract virtual void set_LinearAttenuation(float value);
    public abstract virtual Vector3 get_Offset();
    public abstract virtual void set_Offset(Vector3 value);
    public abstract virtual float get_QuadraticAttenuation();
    public abstract virtual void set_QuadraticAttenuation(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DE466104-59D9-57D2-92B5-554D6D82EDF2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IPointLight2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IPointLight2 {
    public float Intensity { get; public set; }
    public abstract virtual float get_Intensity();
    public abstract virtual void set_Intensity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BE30E87A-8CBB-5A56-8D24-2CD865F383B3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IPointLight3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IPointLight3 {
    public float MaxAttenuationCutoff { get; public set; }
    public float MinAttenuationCutoff { get; public set; }
    public abstract virtual float get_MaxAttenuationCutoff();
    public abstract virtual void set_MaxAttenuationCutoff(float value);
    public abstract virtual float get_MinAttenuationCutoff();
    public abstract virtual void set_MinAttenuationCutoff(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0268A272-EA06-5FB0-8DEF-49726BCEE39B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IPowerEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IPowerEasingFunction {
    public CompositionEasingFunctionMode Mode { get; }
    public float Power { get; }
    public abstract virtual CompositionEasingFunctionMode get_Mode();
    public abstract virtual float get_Power();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E72D1026-DA3B-5D56-858B-3A9AA3C57D70")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IQuaternionKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IQuaternionKeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Quaternion value);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Quaternion value, CompositionEasingFunction easingFunction);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BC261502-2259-5C01-8616-556110A09657")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IRectangleClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IRectangleClip {
    public float Bottom { get; public set; }
    public Vector2 BottomLeftRadius { get; public set; }
    public Vector2 BottomRightRadius { get; public set; }
    public float Left { get; public set; }
    public float Right { get; public set; }
    public float Top { get; public set; }
    public Vector2 TopLeftRadius { get; public set; }
    public Vector2 TopRightRadius { get; public set; }
    public abstract virtual float get_Bottom();
    public abstract virtual void set_Bottom(float value);
    public abstract virtual Vector2 get_BottomLeftRadius();
    public abstract virtual void set_BottomLeftRadius(Vector2 value);
    public abstract virtual Vector2 get_BottomRightRadius();
    public abstract virtual void set_BottomRightRadius(Vector2 value);
    public abstract virtual float get_Left();
    public abstract virtual void set_Left(float value);
    public abstract virtual float get_Right();
    public abstract virtual void set_Right(float value);
    public abstract virtual float get_Top();
    public abstract virtual void set_Top(float value);
    public abstract virtual Vector2 get_TopLeftRadius();
    public abstract virtual void set_TopLeftRadius(Vector2 value);
    public abstract virtual Vector2 get_TopRightRadius();
    public abstract virtual void set_TopRightRadius(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6C10081A-CDE1-50D9-AC05-78D6845B656F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IRedirectVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IRedirectVisual {
    public Visual Source { get; public set; }
    public abstract virtual Visual get_Source();
    public abstract virtual void set_Source(Visual value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FE5B97C7-F656-56D6-A0CD-3E1227E4DD44")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IRenderingDeviceReplacedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IRenderingDeviceReplacedEventArgs {
    public CompositionGraphicsDevice GraphicsDevice { get; }
    public abstract virtual CompositionGraphicsDevice get_GraphicsDevice();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5A5F8ABE-D129-5B25-8AFF-8180FD9BFB22")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IScalarKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IScalarKeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, float value);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, float value, CompositionEasingFunction easingFunction);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("903224B0-2DBE-56EB-B9EA-33D2E3113181")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IScalarNaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IScalarNaturalMotionAnimation {
    public Nullable`1<float> FinalValue { get; public set; }
    public Nullable`1<float> InitialValue { get; public set; }
    public float InitialVelocity { get; public set; }
    public abstract virtual Nullable`1<float> get_FinalValue();
    public abstract virtual void set_FinalValue(Nullable`1<float> value);
    public abstract virtual Nullable`1<float> get_InitialValue();
    public abstract virtual void set_InitialValue(Nullable`1<float> value);
    public abstract virtual float get_InitialVelocity();
    public abstract virtual void set_InitialVelocity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("14F8A9AB-976C-5E6F-890B-9A74D07FA39F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IScalarNaturalMotionAnimationFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IScalarNaturalMotionAnimationFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A911C80B-A5A5-5ACA-B8FF-C43F08F06143")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IShapeVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IShapeVisual {
    public CompositionShapeCollection Shapes { get; }
    public CompositionViewBox ViewBox { get; public set; }
    public abstract virtual CompositionShapeCollection get_Shapes();
    public abstract virtual CompositionViewBox get_ViewBox();
    public abstract virtual void set_ViewBox(CompositionViewBox value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7FCCB5F8-CB0E-5A01-A26B-98880FF49DC6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISineEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISineEasingFunction {
    public CompositionEasingFunctionMode Mode { get; }
    public abstract virtual CompositionEasingFunctionMode get_Mode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5935496A-0586-5F77-BD03-D5A6BB9E8FA0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpotLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpotLight {
    public float ConstantAttenuation { get; public set; }
    public Visual CoordinateSpace { get; public set; }
    public Vector3 Direction { get; public set; }
    public float InnerConeAngle { get; public set; }
    public float InnerConeAngleInDegrees { get; public set; }
    public Color InnerConeColor { get; public set; }
    public float LinearAttenuation { get; public set; }
    public Vector3 Offset { get; public set; }
    public float OuterConeAngle { get; public set; }
    public float OuterConeAngleInDegrees { get; public set; }
    public Color OuterConeColor { get; public set; }
    public float QuadraticAttenuation { get; public set; }
    public abstract virtual float get_ConstantAttenuation();
    public abstract virtual void set_ConstantAttenuation(float value);
    public abstract virtual Visual get_CoordinateSpace();
    public abstract virtual void set_CoordinateSpace(Visual value);
    public abstract virtual Vector3 get_Direction();
    public abstract virtual void set_Direction(Vector3 value);
    public abstract virtual float get_InnerConeAngle();
    public abstract virtual void set_InnerConeAngle(float value);
    public abstract virtual float get_InnerConeAngleInDegrees();
    public abstract virtual void set_InnerConeAngleInDegrees(float value);
    public abstract virtual Color get_InnerConeColor();
    public abstract virtual void set_InnerConeColor(Color value);
    public abstract virtual float get_LinearAttenuation();
    public abstract virtual void set_LinearAttenuation(float value);
    public abstract virtual Vector3 get_Offset();
    public abstract virtual void set_Offset(Vector3 value);
    public abstract virtual float get_OuterConeAngle();
    public abstract virtual void set_OuterConeAngle(float value);
    public abstract virtual float get_OuterConeAngleInDegrees();
    public abstract virtual void set_OuterConeAngleInDegrees(float value);
    public abstract virtual Color get_OuterConeColor();
    public abstract virtual void set_OuterConeColor(Color value);
    public abstract virtual float get_QuadraticAttenuation();
    public abstract virtual void set_QuadraticAttenuation(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("49DD3B50-EC5C-5B6C-BAA1-8504B13E3A67")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpotLight2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpotLight2 {
    public float InnerConeIntensity { get; public set; }
    public float OuterConeIntensity { get; public set; }
    public abstract virtual float get_InnerConeIntensity();
    public abstract virtual void set_InnerConeIntensity(float value);
    public abstract virtual float get_OuterConeIntensity();
    public abstract virtual void set_OuterConeIntensity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C6919941-0D9F-58C8-91E2-ADEF6E5E70A4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpotLight3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpotLight3 {
    public float MaxAttenuationCutoff { get; public set; }
    public float MinAttenuationCutoff { get; public set; }
    public abstract virtual float get_MaxAttenuationCutoff();
    public abstract virtual void set_MaxAttenuationCutoff(float value);
    public abstract virtual float get_MinAttenuationCutoff();
    public abstract virtual void set_MinAttenuationCutoff(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6F720AFD-D3D0-5E78-9C2E-83092F6EA45E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpringScalarNaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpringScalarNaturalMotionAnimation {
    public float DampingRatio { get; public set; }
    public TimeSpan Period { get; public set; }
    public abstract virtual float get_DampingRatio();
    public abstract virtual void set_DampingRatio(float value);
    public abstract virtual TimeSpan get_Period();
    public abstract virtual void set_Period(TimeSpan value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5B4580A4-2594-521E-B288-EAF2C2A16A66")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpringVector2NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpringVector2NaturalMotionAnimation {
    public float DampingRatio { get; public set; }
    public TimeSpan Period { get; public set; }
    public abstract virtual float get_DampingRatio();
    public abstract virtual void set_DampingRatio(float value);
    public abstract virtual TimeSpan get_Period();
    public abstract virtual void set_Period(TimeSpan value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("02D9E1C6-7434-5464-A1F6-D644CE1FC9A6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpringVector3NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpringVector3NaturalMotionAnimation {
    public float DampingRatio { get; public set; }
    public TimeSpan Period { get; public set; }
    public abstract virtual float get_DampingRatio();
    public abstract virtual void set_DampingRatio(float value);
    public abstract virtual TimeSpan get_Period();
    public abstract virtual void set_Period(TimeSpan value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7E964632-45E4-5761-806D-5B4022C14F26")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpriteVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpriteVisual {
    public CompositionBrush Brush { get; public set; }
    public abstract virtual CompositionBrush get_Brush();
    public abstract virtual void set_Brush(CompositionBrush value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3CB43662-9ECF-5128-850D-9EB8437774F0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ISpriteVisual2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.ISpriteVisual2 {
    public CompositionShadow Shadow { get; public set; }
    public abstract virtual CompositionShadow get_Shadow();
    public abstract virtual void set_Shadow(CompositionShadow value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C7B1D4CF-C562-56B3-B4E6-B21326165F71")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IStepEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IStepEasingFunction {
    public int FinalStep { get; public set; }
    public int InitialStep { get; public set; }
    public bool IsFinalStepSingleFrame { get; public set; }
    public bool IsInitialStepSingleFrame { get; public set; }
    public int StepCount { get; public set; }
    public abstract virtual int get_FinalStep();
    public abstract virtual void set_FinalStep(int value);
    public abstract virtual int get_InitialStep();
    public abstract virtual void set_InitialStep(int value);
    public abstract virtual bool get_IsFinalStepSingleFrame();
    public abstract virtual void set_IsFinalStepSingleFrame(bool value);
    public abstract virtual bool get_IsInitialStepSingleFrame();
    public abstract virtual void set_IsInitialStepSingleFrame(bool value);
    public abstract virtual int get_StepCount();
    public abstract virtual void set_StepCount(int value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E9C5E3FD-43B7-526E-9DA0-4C3EA96DB27D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector2KeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector2KeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Vector2 value);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Vector2 value, CompositionEasingFunction easingFunction);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E00E60CE-D1BE-5C24-885D-C1D0A749D109")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector2NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector2NaturalMotionAnimation {
    public Nullable`1<Vector2> FinalValue { get; public set; }
    public Nullable`1<Vector2> InitialValue { get; public set; }
    public Vector2 InitialVelocity { get; public set; }
    public abstract virtual Nullable`1<Vector2> get_FinalValue();
    public abstract virtual void set_FinalValue(Nullable`1<Vector2> value);
    public abstract virtual Nullable`1<Vector2> get_InitialValue();
    public abstract virtual void set_InitialValue(Nullable`1<Vector2> value);
    public abstract virtual Vector2 get_InitialVelocity();
    public abstract virtual void set_InitialVelocity(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E39AEAD8-80F9-5F64-8644-E9E5646B796F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector2NaturalMotionAnimationFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector2NaturalMotionAnimationFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D7DA980E-2DDE-5DD1-A40C-D6868DD2449E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector3KeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector3KeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Vector3 value);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Vector3 value, CompositionEasingFunction easingFunction);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("13FEEEF2-D2C0-5B72-AD67-983A19B9B783")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector3NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector3NaturalMotionAnimation {
    public Nullable`1<Vector3> FinalValue { get; public set; }
    public Nullable`1<Vector3> InitialValue { get; public set; }
    public Vector3 InitialVelocity { get; public set; }
    public abstract virtual Nullable`1<Vector3> get_FinalValue();
    public abstract virtual void set_FinalValue(Nullable`1<Vector3> value);
    public abstract virtual Nullable`1<Vector3> get_InitialValue();
    public abstract virtual void set_InitialValue(Nullable`1<Vector3> value);
    public abstract virtual Vector3 get_InitialVelocity();
    public abstract virtual void set_InitialVelocity(Vector3 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("428241CB-BE9C-5C2A-939C-EC78AA60BB8A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector3NaturalMotionAnimationFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector3NaturalMotionAnimationFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("16CEA3B9-C5E3-5F6F-B5C7-DA29A31CCFC7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVector4KeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVector4KeyFrameAnimation {
    [OverloadAttribute("InsertKeyFrame")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Vector4 value);
    [OverloadAttribute("InsertKeyFrameWithEasingFunction")]
public abstract virtual void InsertKeyFrame(float normalizedProgressKey, Vector4 value, CompositionEasingFunction easingFunction);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C0EEAB6C-C897-5AC6-A1C9-63ABD5055B9B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisual {
    public Vector2 AnchorPoint { get; public set; }
    public CompositionBackfaceVisibility BackfaceVisibility { get; public set; }
    public CompositionBorderMode BorderMode { get; public set; }
    public Vector3 CenterPoint { get; public set; }
    public CompositionClip Clip { get; public set; }
    public CompositionCompositeMode CompositeMode { get; public set; }
    public bool IsVisible { get; public set; }
    public Vector3 Offset { get; public set; }
    public float Opacity { get; public set; }
    public Quaternion Orientation { get; public set; }
    public ContainerVisual Parent { get; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector3 RotationAxis { get; public set; }
    public Vector3 Scale { get; public set; }
    public Vector2 Size { get; public set; }
    public Matrix4x4 TransformMatrix { get; public set; }
    public abstract virtual Vector2 get_AnchorPoint();
    public abstract virtual void set_AnchorPoint(Vector2 value);
    public abstract virtual CompositionBackfaceVisibility get_BackfaceVisibility();
    public abstract virtual void set_BackfaceVisibility(CompositionBackfaceVisibility value);
    public abstract virtual CompositionBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(CompositionBorderMode value);
    public abstract virtual Vector3 get_CenterPoint();
    public abstract virtual void set_CenterPoint(Vector3 value);
    public abstract virtual CompositionClip get_Clip();
    public abstract virtual void set_Clip(CompositionClip value);
    public abstract virtual CompositionCompositeMode get_CompositeMode();
    public abstract virtual void set_CompositeMode(CompositionCompositeMode value);
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual Vector3 get_Offset();
    public abstract virtual void set_Offset(Vector3 value);
    public abstract virtual float get_Opacity();
    public abstract virtual void set_Opacity(float value);
    public abstract virtual Quaternion get_Orientation();
    public abstract virtual void set_Orientation(Quaternion value);
    public abstract virtual ContainerVisual get_Parent();
    public abstract virtual float get_RotationAngle();
    public abstract virtual void set_RotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void set_RotationAngleInDegrees(float value);
    public abstract virtual Vector3 get_RotationAxis();
    public abstract virtual void set_RotationAxis(Vector3 value);
    public abstract virtual Vector3 get_Scale();
    public abstract virtual void set_Scale(Vector3 value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void set_Size(Vector2 value);
    public abstract virtual Matrix4x4 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix4x4 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("492A7995-0C5C-5993-A283-52E4DA3050EE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisual2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisual2 {
    public Visual ParentForTransform { get; public set; }
    public Vector3 RelativeOffsetAdjustment { get; public set; }
    public Vector2 RelativeSizeAdjustment { get; public set; }
    public abstract virtual Visual get_ParentForTransform();
    public abstract virtual void set_ParentForTransform(Visual value);
    public abstract virtual Vector3 get_RelativeOffsetAdjustment();
    public abstract virtual void set_RelativeOffsetAdjustment(Vector3 value);
    public abstract virtual Vector2 get_RelativeSizeAdjustment();
    public abstract virtual void set_RelativeSizeAdjustment(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("972B70B0-950D-5656-A380-BD4A70775868")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisual3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisual3 {
    public bool IsHitTestVisible { get; public set; }
    public abstract virtual bool get_IsHitTestVisible();
    public abstract virtual void set_IsHitTestVisible(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("27CB223F-C431-57AC-B61E-D6B7515D579F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisual4")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisual4 {
    public bool IsPixelSnappingEnabled { get; public set; }
    public abstract virtual bool get_IsPixelSnappingEnabled();
    public abstract virtual void set_IsPixelSnappingEnabled(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D002896D-67D8-5F69-AB70-581FA3BF370F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisualCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisualCollection {
    public int Count { get; }
    public abstract virtual void InsertAbove(Visual newChild, Visual sibling);
    public abstract virtual void InsertAtBottom(Visual newChild);
    public abstract virtual void InsertAtTop(Visual newChild);
    public abstract virtual void InsertBelow(Visual newChild, Visual sibling);
    public abstract virtual void Remove(Visual child);
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2180F1F5-B5D8-4BF6-920A-12006E63EFEF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisualElement")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.IVisualElement {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BC950C8D-1DB0-53AA-9DEE-34271CD18CE6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisualElement2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.IVisualElement2 {
    public abstract virtual Visual GetVisualInternal();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("77BB4668-83FA-5BB5-B78B-5E6FDC3D4038")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisualFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisualFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4A97216E-793E-54E3-96E8-F9DB790119CD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.IVisualUnorderedCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.IVisualUnorderedCollection {
    public int Count { get; }
    public abstract virtual void Add(Visual newVisual);
    public abstract virtual void Remove(Visual visual);
    public abstract virtual void RemoveAll();
    public abstract virtual int get_Count();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.KeyFrameAnimation")]
[KeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.KeyFrameAnimation : CompositionAnimation {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation3;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimationFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation3 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IKeyFrameAnimationFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public AnimationDelayBehavior DelayBehavior { get; public set; }
    public TimeSpan DelayTime { get; public set; }
    public AnimationDirection Direction { get; public set; }
    public TimeSpan Duration { get; public set; }
    public AnimationIterationBehavior IterationBehavior { get; public set; }
    public int IterationCount { get; public set; }
    public int KeyFrameCount { get; }
    public AnimationStopBehavior StopBehavior { get; public set; }
    protected internal KeyFrameAnimation(IObjectReference objRef);
    protected KeyFrameAnimation(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IKeyFrameAnimation3();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IKeyFrameAnimationFactory();
    public static KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(KeyFrameAnimation x, KeyFrameAnimation y);
    public static bool op_Inequality(KeyFrameAnimation x, KeyFrameAnimation y);
    public sealed virtual bool Equals(KeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertExpressionKeyFrame(float normalizedProgressKey, string value);
    public void InsertExpressionKeyFrame(float normalizedProgressKey, string value, CompositionEasingFunction easingFunction);
    public AnimationDelayBehavior get_DelayBehavior();
    public void set_DelayBehavior(AnimationDelayBehavior value);
    public TimeSpan get_DelayTime();
    public void set_DelayTime(TimeSpan value);
    public AnimationDirection get_Direction();
    public void set_Direction(AnimationDirection value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public AnimationIterationBehavior get_IterationBehavior();
    public void set_IterationBehavior(AnimationIterationBehavior value);
    public int get_IterationCount();
    public void set_IterationCount(int value);
    public int get_KeyFrameCount();
    public AnimationStopBehavior get_StopBehavior();
    public void set_StopBehavior(AnimationStopBehavior value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.LayerVisual")]
[LayerVisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ILayerVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.LayerVisual : ContainerVisual {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ILayerVisual2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ILayerVisual { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ILayerVisual2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionEffectBrush Effect { get; public set; }
    public CompositionShadow Shadow { get; public set; }
    internal LayerVisual(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ILayerVisual();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ILayerVisual2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ILayerVisual2();
    public static LayerVisual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(LayerVisual x, LayerVisual y);
    public static bool op_Inequality(LayerVisual x, LayerVisual y);
    public sealed virtual bool Equals(LayerVisual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionEffectBrush get_Effect();
    public void set_Effect(CompositionEffectBrush value);
    public CompositionShadow get_Shadow();
    public void set_Shadow(CompositionShadow value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.LinearEasingFunction")]
[LinearEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ILinearEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.LinearEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ILinearEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal LinearEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ILinearEasingFunction();
    public static LinearEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(LinearEasingFunction x, LinearEasingFunction y);
    public static bool op_Inequality(LinearEasingFunction x, LinearEasingFunction y);
    public sealed virtual bool Equals(LinearEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.NaturalMotionAnimation")]
[NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.INaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.NaturalMotionAnimation : CompositionAnimation {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_INaturalMotionAnimation;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_INaturalMotionAnimationFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_INaturalMotionAnimation { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_INaturalMotionAnimationFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public AnimationDelayBehavior DelayBehavior { get; public set; }
    public TimeSpan DelayTime { get; public set; }
    public AnimationStopBehavior StopBehavior { get; public set; }
    protected internal NaturalMotionAnimation(IObjectReference objRef);
    protected NaturalMotionAnimation(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_INaturalMotionAnimation();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_INaturalMotionAnimation();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_INaturalMotionAnimationFactory();
    public static NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(NaturalMotionAnimation x, NaturalMotionAnimation y);
    public static bool op_Inequality(NaturalMotionAnimation x, NaturalMotionAnimation y);
    public sealed virtual bool Equals(NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public AnimationDelayBehavior get_DelayBehavior();
    public void set_DelayBehavior(AnimationDelayBehavior value);
    public TimeSpan get_DelayTime();
    public void set_DelayTime(TimeSpan value);
    public AnimationStopBehavior get_StopBehavior();
    public void set_StopBehavior(AnimationStopBehavior value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.PathKeyFrameAnimation")]
[PathKeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IPathKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.PathKeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IPathKeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal PathKeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IPathKeyFrameAnimation();
    public static PathKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PathKeyFrameAnimation x, PathKeyFrameAnimation y);
    public static bool op_Inequality(PathKeyFrameAnimation x, PathKeyFrameAnimation y);
    public sealed virtual bool Equals(PathKeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, CompositionPath path);
    public void InsertKeyFrame(float normalizedProgressKey, CompositionPath path, CompositionEasingFunction easingFunction);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.PointLight")]
[PointLightRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IPointLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.PointLight : CompositionLight {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IPointLight2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IPointLight3;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IPointLight { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IPointLight2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IPointLight3 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color Color { get; public set; }
    public float ConstantAttenuation { get; public set; }
    public Visual CoordinateSpace { get; public set; }
    public float Intensity { get; public set; }
    public float LinearAttenuation { get; public set; }
    public float MaxAttenuationCutoff { get; public set; }
    public float MinAttenuationCutoff { get; public set; }
    public Vector3 Offset { get; public set; }
    public float QuadraticAttenuation { get; public set; }
    internal PointLight(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IPointLight();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IPointLight2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IPointLight2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IPointLight3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IPointLight3();
    public static PointLight FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointLight x, PointLight y);
    public static bool op_Inequality(PointLight x, PointLight y);
    public sealed virtual bool Equals(PointLight other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Color get_Color();
    public void set_Color(Color value);
    public float get_ConstantAttenuation();
    public void set_ConstantAttenuation(float value);
    public Visual get_CoordinateSpace();
    public void set_CoordinateSpace(Visual value);
    public float get_Intensity();
    public void set_Intensity(float value);
    public float get_LinearAttenuation();
    public void set_LinearAttenuation(float value);
    public float get_MaxAttenuationCutoff();
    public void set_MaxAttenuationCutoff(float value);
    public float get_MinAttenuationCutoff();
    public void set_MinAttenuationCutoff(float value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public float get_QuadraticAttenuation();
    public void set_QuadraticAttenuation(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.PowerEasingFunction")]
[PowerEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IPowerEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.PowerEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IPowerEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionEasingFunctionMode Mode { get; }
    public float Power { get; }
    internal PowerEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IPowerEasingFunction();
    public static PowerEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PowerEasingFunction x, PowerEasingFunction y);
    public static bool op_Inequality(PowerEasingFunction x, PowerEasingFunction y);
    public sealed virtual bool Equals(PowerEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionEasingFunctionMode get_Mode();
    public float get_Power();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.QuaternionKeyFrameAnimation")]
[QuaternionKeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IQuaternionKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.QuaternionKeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IQuaternionKeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal QuaternionKeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IQuaternionKeyFrameAnimation();
    public static QuaternionKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(QuaternionKeyFrameAnimation x, QuaternionKeyFrameAnimation y);
    public static bool op_Inequality(QuaternionKeyFrameAnimation x, QuaternionKeyFrameAnimation y);
    public sealed virtual bool Equals(QuaternionKeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, Quaternion value);
    public void InsertKeyFrame(float normalizedProgressKey, Quaternion value, CompositionEasingFunction easingFunction);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.RectangleClip")]
[RectangleClipRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IRectangleClip")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.RectangleClip : CompositionClip {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IRectangleClip { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float Bottom { get; public set; }
    public Vector2 BottomLeftRadius { get; public set; }
    public Vector2 BottomRightRadius { get; public set; }
    public float Left { get; public set; }
    public float Right { get; public set; }
    public float Top { get; public set; }
    public Vector2 TopLeftRadius { get; public set; }
    public Vector2 TopRightRadius { get; public set; }
    internal RectangleClip(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IRectangleClip();
    public static RectangleClip FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RectangleClip x, RectangleClip y);
    public static bool op_Inequality(RectangleClip x, RectangleClip y);
    public sealed virtual bool Equals(RectangleClip other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_Bottom();
    public void set_Bottom(float value);
    public Vector2 get_BottomLeftRadius();
    public void set_BottomLeftRadius(Vector2 value);
    public Vector2 get_BottomRightRadius();
    public void set_BottomRightRadius(Vector2 value);
    public float get_Left();
    public void set_Left(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Top();
    public void set_Top(float value);
    public Vector2 get_TopLeftRadius();
    public void set_TopLeftRadius(Vector2 value);
    public Vector2 get_TopRightRadius();
    public void set_TopRightRadius(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.RedirectVisual")]
[RedirectVisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IRedirectVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.RedirectVisual : ContainerVisual {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IRedirectVisual { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Visual Source { get; public set; }
    internal RedirectVisual(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IRedirectVisual();
    public static RedirectVisual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RedirectVisual x, RedirectVisual y);
    public static bool op_Inequality(RedirectVisual x, RedirectVisual y);
    public sealed virtual bool Equals(RedirectVisual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Visual get_Source();
    public void set_Source(Visual value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.RenderingDeviceReplacedEventArgs")]
[RenderingDeviceReplacedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IRenderingDeviceReplacedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.RenderingDeviceReplacedEventArgs : CompositionObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IRenderingDeviceReplacedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionGraphicsDevice GraphicsDevice { get; }
    internal RenderingDeviceReplacedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IRenderingDeviceReplacedEventArgs();
    public static RenderingDeviceReplacedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RenderingDeviceReplacedEventArgs x, RenderingDeviceReplacedEventArgs y);
    public static bool op_Inequality(RenderingDeviceReplacedEventArgs x, RenderingDeviceReplacedEventArgs y);
    public sealed virtual bool Equals(RenderingDeviceReplacedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionGraphicsDevice get_GraphicsDevice();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ScalarKeyFrameAnimation")]
[ScalarKeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IScalarKeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ScalarKeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IScalarKeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal ScalarKeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IScalarKeyFrameAnimation();
    public static ScalarKeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ScalarKeyFrameAnimation x, ScalarKeyFrameAnimation y);
    public static bool op_Inequality(ScalarKeyFrameAnimation x, ScalarKeyFrameAnimation y);
    public sealed virtual bool Equals(ScalarKeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, float value);
    public void InsertKeyFrame(float normalizedProgressKey, float value, CompositionEasingFunction easingFunction);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ScalarNaturalMotionAnimation")]
[ScalarNaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IScalarNaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ScalarNaturalMotionAnimation : NaturalMotionAnimation {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimation;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimationFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimation { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimationFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Nullable`1<float> FinalValue { get; public set; }
    public Nullable`1<float> InitialValue { get; public set; }
    public float InitialVelocity { get; public set; }
    protected internal ScalarNaturalMotionAnimation(IObjectReference objRef);
    protected ScalarNaturalMotionAnimation(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimation();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimation();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IScalarNaturalMotionAnimationFactory();
    public static ScalarNaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ScalarNaturalMotionAnimation x, ScalarNaturalMotionAnimation y);
    public static bool op_Inequality(ScalarNaturalMotionAnimation x, ScalarNaturalMotionAnimation y);
    public sealed virtual bool Equals(ScalarNaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Nullable`1<float> get_FinalValue();
    public void set_FinalValue(Nullable`1<float> value);
    public Nullable`1<float> get_InitialValue();
    public void set_InitialValue(Nullable`1<float> value);
    public float get_InitialVelocity();
    public void set_InitialVelocity(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("39FB48E0-216A-5608-9186-6BA9F98B5C67")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneBoundingBox")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneBoundingBox {
    public Vector3 Center { get; }
    public Vector3 Extents { get; }
    public Vector3 Max { get; }
    public Vector3 Min { get; }
    public Vector3 Size { get; }
    public abstract virtual Vector3 get_Center();
    public abstract virtual Vector3 get_Extents();
    public abstract virtual Vector3 get_Max();
    public abstract virtual Vector3 get_Min();
    public abstract virtual Vector3 get_Size();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F73361CB-8027-50E2-98EE-B2E3EA050A54")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneComponent")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneComponent {
    public SceneComponentType ComponentType { get; }
    public abstract virtual SceneComponentType get_ComponentType();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E4B21C71-87E2-5AEB-85BE-884E8302273E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneComponentCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneComponentCollection {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("254088B0-BABF-503D-9A66-0D86AF5F7303")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneComponentFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneComponentFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("042142A7-BF6B-57AD-BADC-F581F38EDB48")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMaterial")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMaterial {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("25747893-8748-5F60-969F-318FA0B735CA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMaterialFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("446BDADE-719B-5DB4-B699-F226D0062A2E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialInput")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMaterialInput {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B4DABD1D-58C0-5710-928A-BC49B0735694")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMaterialInputFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMaterialInputFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5CF846AA-F53F-555E-A3AD-F5BC52CA32FB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMesh")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMesh {
    public SceneBoundingBox Bounds { get; }
    public DirectXPrimitiveTopology PrimitiveTopology { get; public set; }
    public abstract virtual void FillMeshAttribute(SceneAttributeSemantic semantic, DirectXPixelFormat format, MemoryBuffer memory);
    public abstract virtual SceneBoundingBox get_Bounds();
    public abstract virtual DirectXPrimitiveTopology get_PrimitiveTopology();
    public abstract virtual void set_PrimitiveTopology(DirectXPrimitiveTopology value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2360C457-EDAE-5660-BEDC-89096582ED70")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMap")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMap {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D2BE85A0-70A8-5C62-84D8-8BA55E4C64A9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponent")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponent {
    public SceneMaterial Material { get; public set; }
    public SceneMesh Mesh { get; public set; }
    public SceneMeshMaterialAttributeMap UVMappings { get; }
    public abstract virtual SceneMaterial get_Material();
    public abstract virtual void set_Material(SceneMaterial value);
    public abstract virtual SceneMesh get_Mesh();
    public abstract virtual void set_Mesh(SceneMesh value);
    public abstract virtual SceneMeshMaterialAttributeMap get_UVMappings();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C54F8C5A-A104-5CFA-89DC-13EDAA6E3D88")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponentStatics {
    public abstract virtual SceneMeshRendererComponent Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("29C52125-964B-5315-80F9-3893713290F5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMeshStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMeshStatics {
    public abstract virtual SceneMesh Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0A4AFCF4-7BAE-5702-9B85-8BC849F39987")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterial")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterial {
    public Vector4 BaseColorFactor { get; public set; }
    public SceneMaterialInput BaseColorInput { get; public set; }
    public float MetallicFactor { get; public set; }
    public SceneMaterialInput MetallicRoughnessInput { get; public set; }
    public float RoughnessFactor { get; public set; }
    public abstract virtual Vector4 get_BaseColorFactor();
    public abstract virtual void set_BaseColorFactor(Vector4 value);
    public abstract virtual SceneMaterialInput get_BaseColorInput();
    public abstract virtual void set_BaseColorInput(SceneMaterialInput value);
    public abstract virtual float get_MetallicFactor();
    public abstract virtual void set_MetallicFactor(float value);
    public abstract virtual SceneMaterialInput get_MetallicRoughnessInput();
    public abstract virtual void set_MetallicRoughnessInput(SceneMaterialInput value);
    public abstract virtual float get_RoughnessFactor();
    public abstract virtual void set_RoughnessFactor(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DFFD2043-AB3C-57A0-8E13-6F09725E970F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterialStatics {
    public abstract virtual SceneMetallicRoughnessMaterial Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3F05555F-0F67-576E-9D8A-93C1F250C29F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneModelTransform")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneModelTransform {
    public Quaternion Orientation { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector3 RotationAxis { get; public set; }
    public Vector3 Scale { get; public set; }
    public Vector3 Translation { get; public set; }
    public abstract virtual Quaternion get_Orientation();
    public abstract virtual void set_Orientation(Quaternion value);
    public abstract virtual float get_RotationAngle();
    public abstract virtual void set_RotationAngle(float value);
    public abstract virtual float get_RotationAngleInDegrees();
    public abstract virtual void set_RotationAngleInDegrees(float value);
    public abstract virtual Vector3 get_RotationAxis();
    public abstract virtual void set_RotationAxis(Vector3 value);
    public abstract virtual Vector3 get_Scale();
    public abstract virtual void set_Scale(Vector3 value);
    public abstract virtual Vector3 get_Translation();
    public abstract virtual void set_Translation(Vector3 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A1BCE140-79C2-59E6-9B68-63B1BAB0E2A6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneNode")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneNode {
    public SceneNodeCollection Children { get; }
    public SceneComponentCollection Components { get; }
    public SceneNode Parent { get; }
    public SceneModelTransform Transform { get; }
    public abstract virtual SceneComponent FindFirstComponentOfType(SceneComponentType value);
    public abstract virtual SceneNodeCollection get_Children();
    public abstract virtual SceneComponentCollection get_Components();
    public abstract virtual SceneNode get_Parent();
    public abstract virtual SceneModelTransform get_Transform();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F219B68E-5666-5C6C-AA4E-08DB07FD6BCF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneNodeCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneNodeCollection {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("801C4394-4198-5DA1-AC39-6E8A44B5CE57")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneNodeStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneNodeStatics {
    public abstract virtual SceneNode Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4333E514-4FC7-521E-8BCA-11C51FBCAF1E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneObject {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EE797F7D-77DB-5C4C-B6F5-C1930FAD85C5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneObjectFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneObjectFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("295D0725-56FE-5954-8057-3F4CA7515B36")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.IScenePbrMaterial")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.IScenePbrMaterial {
    public float AlphaCutoff { get; public set; }
    public SceneAlphaMode AlphaMode { get; public set; }
    public Vector3 EmissiveFactor { get; public set; }
    public SceneMaterialInput EmissiveInput { get; public set; }
    public bool IsDoubleSided { get; public set; }
    public SceneMaterialInput NormalInput { get; public set; }
    public float NormalScale { get; public set; }
    public SceneMaterialInput OcclusionInput { get; public set; }
    public float OcclusionStrength { get; public set; }
    public abstract virtual float get_AlphaCutoff();
    public abstract virtual void set_AlphaCutoff(float value);
    public abstract virtual SceneAlphaMode get_AlphaMode();
    public abstract virtual void set_AlphaMode(SceneAlphaMode value);
    public abstract virtual Vector3 get_EmissiveFactor();
    public abstract virtual void set_EmissiveFactor(Vector3 value);
    public abstract virtual SceneMaterialInput get_EmissiveInput();
    public abstract virtual void set_EmissiveInput(SceneMaterialInput value);
    public abstract virtual bool get_IsDoubleSided();
    public abstract virtual void set_IsDoubleSided(bool value);
    public abstract virtual SceneMaterialInput get_NormalInput();
    public abstract virtual void set_NormalInput(SceneMaterialInput value);
    public abstract virtual float get_NormalScale();
    public abstract virtual void set_NormalScale(float value);
    public abstract virtual SceneMaterialInput get_OcclusionInput();
    public abstract virtual void set_OcclusionInput(SceneMaterialInput value);
    public abstract virtual float get_OcclusionStrength();
    public abstract virtual void set_OcclusionStrength(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9E34D32A-E30C-51F5-84AC-6467950605CA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.IScenePbrMaterialFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.IScenePbrMaterialFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6BAB8030-89C1-5DBC-A48E-1805DDF9CDD1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneRendererComponent")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneRendererComponent {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3CCAC1D6-6A0F-582E-BB1A-10EBC1E405CA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneRendererComponentFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneRendererComponentFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B9854B4F-286C-50CD-A734-491A251D5FD3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInput")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInput {
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; public set; }
    public ICompositionSurface Surface { get; public set; }
    public SceneWrappingMode WrappingUMode { get; public set; }
    public SceneWrappingMode WrappingVMode { get; public set; }
    public abstract virtual CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public abstract virtual void set_BitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public abstract virtual ICompositionSurface get_Surface();
    public abstract virtual void set_Surface(ICompositionSurface value);
    public abstract virtual SceneWrappingMode get_WrappingUMode();
    public abstract virtual void set_WrappingUMode(SceneWrappingMode value);
    public abstract virtual SceneWrappingMode get_WrappingVMode();
    public abstract virtual void set_WrappingVMode(SceneWrappingMode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8E1BA937-AD60-51BC-8256-CA62C4B2AE92")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInputStatics {
    public abstract virtual SceneSurfaceMaterialInput Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0144D7AD-6A7D-59CB-A0F9-74A04E85352C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneVisual {
    public SceneNode Root { get; public set; }
    public abstract virtual SceneNode get_Root();
    public abstract virtual void set_Root(SceneNode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7B8DA6D1-5BD8-5095-9264-E5572653EA07")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ISceneVisualStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.Scenes.ISceneVisualStatics {
    public abstract virtual SceneVisual Create(Compositor compositor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Scenes.SceneAlphaMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Scenes.SceneAlphaMode : Enum {
    public int value__;
    public static SceneAlphaMode Opaque;
    public static SceneAlphaMode AlphaTest;
    public static SceneAlphaMode Blend;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Scenes.SceneAttributeSemantic : Enum {
    public int value__;
    public static SceneAttributeSemantic Index;
    public static SceneAttributeSemantic Vertex;
    public static SceneAttributeSemantic Normal;
    public static SceneAttributeSemantic TexCoord0;
    public static SceneAttributeSemantic TexCoord1;
    public static SceneAttributeSemantic Color;
    public static SceneAttributeSemantic Tangent;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneBoundingBox")]
[SceneBoundingBoxRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneBoundingBox")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneBoundingBox : SceneObject {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneBoundingBox { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector3 Center { get; }
    public Vector3 Extents { get; }
    public Vector3 Max { get; }
    public Vector3 Min { get; }
    public Vector3 Size { get; }
    internal SceneBoundingBox(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneBoundingBox();
    public static SceneBoundingBox FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneBoundingBox x, SceneBoundingBox y);
    public static bool op_Inequality(SceneBoundingBox x, SceneBoundingBox y);
    public sealed virtual bool Equals(SceneBoundingBox other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector3 get_Center();
    public Vector3 get_Extents();
    public Vector3 get_Max();
    public Vector3 get_Min();
    public Vector3 get_Size();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneComponent")]
[SceneComponentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneComponent")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneComponent : SceneObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponent;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponent { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public SceneComponentType ComponentType { get; }
    protected internal SceneComponent(IObjectReference objRef);
    protected SceneComponent(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponent();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponent();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentFactory();
    public static SceneComponent FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneComponent x, SceneComponent y);
    public static bool op_Inequality(SceneComponent x, SceneComponent y);
    public sealed virtual bool Equals(SceneComponent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public SceneComponentType get_ComponentType();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[DefaultMemberAttribute("ListItem")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneComponentCollection")]
[SceneComponentCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("System.Collections.Generic.IList`1<Microsoft.UI.Composition.Scenes.SceneComponent>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneComponentCollection : SceneObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentCollection;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IList_SceneComponent_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_SceneComponent_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IList_SceneComponent_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_SceneComponent_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SceneComponent ListItem { get; public set; }
    internal SceneComponentCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentCollection();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneComponentCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IList_SceneComponent_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IList_SceneComponent_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_SceneComponent_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_SceneComponent_();
    public static SceneComponentCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneComponentCollection x, SceneComponentCollection y);
    public static bool op_Inequality(SceneComponentCollection x, SceneComponentCollection y);
    public sealed virtual bool Equals(SceneComponentCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public SceneComponent get_ListItem(int index);
    public void set_ListItem(int index, SceneComponent value);
    public sealed virtual int IndexOf(SceneComponent item);
    public sealed virtual void Insert(int index, SceneComponent item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(SceneComponent item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SceneComponent item);
    public sealed virtual void CopyTo(SceneComponent[] array, int arrayIndex);
    public sealed virtual bool Remove(SceneComponent item);
    public sealed virtual IEnumerator`1<SceneComponent> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
    private sealed virtual override SceneComponent System.Collections.Generic.IList<Microsoft.UI.Composition.Scenes.SceneComponent>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.UI.Composition.Scenes.SceneComponent>.set_Item(int index, SceneComponent value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Scenes.SceneComponentType>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Scenes.SceneComponentType : Enum {
    public int value__;
    public static SceneComponentType MeshRendererComponent;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneMaterial")]
[SceneMaterialRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneMaterial")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneMaterial : SceneObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterial;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterial { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal SceneMaterial(IObjectReference objRef);
    protected SceneMaterial(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterial();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterial();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialFactory();
    public static SceneMaterial FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneMaterial x, SceneMaterial y);
    public static bool op_Inequality(SceneMaterial x, SceneMaterial y);
    public sealed virtual bool Equals(SceneMaterial other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneMaterialInput")]
[SceneMaterialInputRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneMaterialInput")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneMaterialInput : SceneObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInput;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInputFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInput { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInputFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal SceneMaterialInput(IObjectReference objRef);
    protected SceneMaterialInput(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInput();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInput();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMaterialInputFactory();
    public static SceneMaterialInput FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneMaterialInput x, SceneMaterialInput y);
    public static bool op_Inequality(SceneMaterialInput x, SceneMaterialInput y);
    public sealed virtual bool Equals(SceneMaterialInput other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneMesh")]
[SceneMeshRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneMesh")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneMesh : SceneObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMesh { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public SceneBoundingBox Bounds { get; }
    public DirectXPrimitiveTopology PrimitiveTopology { get; public set; }
    internal SceneMesh(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMesh();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshStatics();
    public static SceneMesh Create(Compositor compositor);
    public static SceneMesh FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneMesh x, SceneMesh y);
    public static bool op_Inequality(SceneMesh x, SceneMesh y);
    public sealed virtual bool Equals(SceneMesh other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void FillMeshAttribute(SceneAttributeSemantic semantic, DirectXPixelFormat format, MemoryBuffer memory);
    public SceneBoundingBox get_Bounds();
    public DirectXPrimitiveTopology get_PrimitiveTopology();
    public void set_PrimitiveTopology(DirectXPrimitiveTopology value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[DefaultMemberAttribute("Item")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMap")]
[SceneMeshMaterialAttributeMapRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneMeshMaterialAttributeMap")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneMeshMaterialAttributeMap : SceneObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IDictionary_string__SceneAttributeSemantic_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__SceneAttributeSemantic__;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshMaterialAttributeMap { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IDictionary_string__SceneAttributeSemantic_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__SceneAttributeSemantic__ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<SceneAttributeSemantic> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SceneAttributeSemantic Item { get; public set; }
    internal SceneMeshMaterialAttributeMap(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshMaterialAttributeMap();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IDictionary_string__SceneAttributeSemantic_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IDictionary_string__SceneAttributeSemantic_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__SceneAttributeSemantic__();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_global__System_Collections_Generic_KeyValuePair_string__SceneAttributeSemantic__();
    public static SceneMeshMaterialAttributeMap FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneMeshMaterialAttributeMap x, SceneMeshMaterialAttributeMap y);
    public static bool op_Inequality(SceneMeshMaterialAttributeMap x, SceneMeshMaterialAttributeMap y);
    public sealed virtual bool Equals(SceneMeshMaterialAttributeMap other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<SceneAttributeSemantic> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual SceneAttributeSemantic get_Item(string key);
    public sealed virtual void set_Item(string key, SceneAttributeSemantic value);
    public sealed virtual void Add(string key, SceneAttributeSemantic value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, SceneAttributeSemantic& value);
    public sealed virtual void Add(KeyValuePair`2<string, SceneAttributeSemantic> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, SceneAttributeSemantic> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.UI.Composition.Scenes.SceneAttributeSemantic>>.Remove(KeyValuePair`2<string, SceneAttributeSemantic> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, SceneAttributeSemantic>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent")]
[SceneMeshRendererComponentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneMeshRendererComponent")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneMeshRendererComponent : SceneRendererComponent {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshRendererComponentStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshRendererComponent { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshRendererComponentStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public SceneMaterial Material { get; public set; }
    public SceneMesh Mesh { get; public set; }
    public SceneMeshMaterialAttributeMap UVMappings { get; }
    internal SceneMeshRendererComponent(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshRendererComponent();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMeshRendererComponentStatics();
    public static SceneMeshRendererComponent Create(Compositor compositor);
    public static SceneMeshRendererComponent FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneMeshRendererComponent x, SceneMeshRendererComponent y);
    public static bool op_Inequality(SceneMeshRendererComponent x, SceneMeshRendererComponent y);
    public sealed virtual bool Equals(SceneMeshRendererComponent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public SceneMaterial get_Material();
    public void set_Material(SceneMaterial value);
    public SceneMesh get_Mesh();
    public void set_Mesh(SceneMesh value);
    public SceneMeshMaterialAttributeMap get_UVMappings();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial")]
[SceneMetallicRoughnessMaterialRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneMetallicRoughnessMaterial")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneMetallicRoughnessMaterial : ScenePbrMaterial {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneMetallicRoughnessMaterialStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMetallicRoughnessMaterial { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneMetallicRoughnessMaterialStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector4 BaseColorFactor { get; public set; }
    public SceneMaterialInput BaseColorInput { get; public set; }
    public float MetallicFactor { get; public set; }
    public SceneMaterialInput MetallicRoughnessInput { get; public set; }
    public float RoughnessFactor { get; public set; }
    internal SceneMetallicRoughnessMaterial(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMetallicRoughnessMaterial();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneMetallicRoughnessMaterialStatics();
    public static SceneMetallicRoughnessMaterial Create(Compositor compositor);
    public static SceneMetallicRoughnessMaterial FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneMetallicRoughnessMaterial x, SceneMetallicRoughnessMaterial y);
    public static bool op_Inequality(SceneMetallicRoughnessMaterial x, SceneMetallicRoughnessMaterial y);
    public sealed virtual bool Equals(SceneMetallicRoughnessMaterial other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector4 get_BaseColorFactor();
    public void set_BaseColorFactor(Vector4 value);
    public SceneMaterialInput get_BaseColorInput();
    public void set_BaseColorInput(SceneMaterialInput value);
    public float get_MetallicFactor();
    public void set_MetallicFactor(float value);
    public SceneMaterialInput get_MetallicRoughnessInput();
    public void set_MetallicRoughnessInput(SceneMaterialInput value);
    public float get_RoughnessFactor();
    public void set_RoughnessFactor(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneModelTransform")]
[SceneModelTransformRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneModelTransform")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneModelTransform : CompositionTransform {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneModelTransform { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Quaternion Orientation { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector3 RotationAxis { get; public set; }
    public Vector3 Scale { get; public set; }
    public Vector3 Translation { get; public set; }
    internal SceneModelTransform(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneModelTransform();
    public static SceneModelTransform FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneModelTransform x, SceneModelTransform y);
    public static bool op_Inequality(SceneModelTransform x, SceneModelTransform y);
    public sealed virtual bool Equals(SceneModelTransform other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Quaternion get_Orientation();
    public void set_Orientation(Quaternion value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public Vector3 get_RotationAxis();
    public void set_RotationAxis(Vector3 value);
    public Vector3 get_Scale();
    public void set_Scale(Vector3 value);
    public Vector3 get_Translation();
    public void set_Translation(Vector3 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneNode")]
[SceneNodeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneNode")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneNode : SceneObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneNode { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public SceneNodeCollection Children { get; }
    public SceneComponentCollection Components { get; }
    public SceneNode Parent { get; }
    public SceneModelTransform Transform { get; }
    internal SceneNode(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneNode();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeStatics();
    public static SceneNode Create(Compositor compositor);
    public static SceneNode FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneNode x, SceneNode y);
    public static bool op_Inequality(SceneNode x, SceneNode y);
    public sealed virtual bool Equals(SceneNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public SceneComponent FindFirstComponentOfType(SceneComponentType value);
    public SceneNodeCollection get_Children();
    public SceneComponentCollection get_Components();
    public SceneNode get_Parent();
    public SceneModelTransform get_Transform();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[DefaultMemberAttribute("ListItem")]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneNodeCollection")]
[SceneNodeCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("System.Collections.Generic.IList`1<Microsoft.UI.Composition.Scenes.SceneNode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneNodeCollection : SceneObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeCollection;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IList_SceneNode_;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_SceneNode_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IList_SceneNode_ { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_SceneNode_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SceneNode ListItem { get; public set; }
    internal SceneNodeCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeCollection();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneNodeCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IList_SceneNode_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IList_SceneNode_();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_SceneNode_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_SceneNode_();
    public static SceneNodeCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneNodeCollection x, SceneNodeCollection y);
    public static bool op_Inequality(SceneNodeCollection x, SceneNodeCollection y);
    public sealed virtual bool Equals(SceneNodeCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public SceneNode get_ListItem(int index);
    public void set_ListItem(int index, SceneNode value);
    public sealed virtual int IndexOf(SceneNode item);
    public sealed virtual void Insert(int index, SceneNode item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(SceneNode item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SceneNode item);
    public sealed virtual void CopyTo(SceneNode[] array, int arrayIndex);
    public sealed virtual bool Remove(SceneNode item);
    public sealed virtual IEnumerator`1<SceneNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
    private sealed virtual override SceneNode System.Collections.Generic.IList<Microsoft.UI.Composition.Scenes.SceneNode>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.UI.Composition.Scenes.SceneNode>.set_Item(int index, SceneNode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneObject")]
[SceneObjectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneObject : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneObject;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneObjectFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneObject { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneObjectFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal SceneObject(IObjectReference objRef);
    protected SceneObject(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneObject();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneObject();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneObjectFactory();
    public static SceneObject FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneObject x, SceneObject y);
    public static bool op_Inequality(SceneObject x, SceneObject y);
    public sealed virtual bool Equals(SceneObject other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.ScenePbrMaterial")]
[ScenePbrMaterialRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.IScenePbrMaterial")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.ScenePbrMaterial : SceneMaterial {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterial;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterialFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterial { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterialFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float AlphaCutoff { get; public set; }
    public SceneAlphaMode AlphaMode { get; public set; }
    public Vector3 EmissiveFactor { get; public set; }
    public SceneMaterialInput EmissiveInput { get; public set; }
    public bool IsDoubleSided { get; public set; }
    public SceneMaterialInput NormalInput { get; public set; }
    public float NormalScale { get; public set; }
    public SceneMaterialInput OcclusionInput { get; public set; }
    public float OcclusionStrength { get; public set; }
    protected internal ScenePbrMaterial(IObjectReference objRef);
    protected ScenePbrMaterial(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterial();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterial();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_IScenePbrMaterialFactory();
    public static ScenePbrMaterial FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ScenePbrMaterial x, ScenePbrMaterial y);
    public static bool op_Inequality(ScenePbrMaterial x, ScenePbrMaterial y);
    public sealed virtual bool Equals(ScenePbrMaterial other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_AlphaCutoff();
    public void set_AlphaCutoff(float value);
    public SceneAlphaMode get_AlphaMode();
    public void set_AlphaMode(SceneAlphaMode value);
    public Vector3 get_EmissiveFactor();
    public void set_EmissiveFactor(Vector3 value);
    public SceneMaterialInput get_EmissiveInput();
    public void set_EmissiveInput(SceneMaterialInput value);
    public bool get_IsDoubleSided();
    public void set_IsDoubleSided(bool value);
    public SceneMaterialInput get_NormalInput();
    public void set_NormalInput(SceneMaterialInput value);
    public float get_NormalScale();
    public void set_NormalScale(float value);
    public SceneMaterialInput get_OcclusionInput();
    public void set_OcclusionInput(SceneMaterialInput value);
    public float get_OcclusionStrength();
    public void set_OcclusionStrength(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneRendererComponent")]
[SceneRendererComponentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneRendererComponent")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneRendererComponent : SceneComponent {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponent;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponentFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponent { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponentFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal SceneRendererComponent(IObjectReference objRef);
    protected SceneRendererComponent(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponent();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponent();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneRendererComponentFactory();
    public static SceneRendererComponent FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneRendererComponent x, SceneRendererComponent y);
    public static bool op_Inequality(SceneRendererComponent x, SceneRendererComponent y);
    public sealed virtual bool Equals(SceneRendererComponent other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput")]
[SceneSurfaceMaterialInputRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneSurfaceMaterialInput")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneSurfaceMaterialInput : SceneMaterialInput {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneSurfaceMaterialInputStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneSurfaceMaterialInput { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneSurfaceMaterialInputStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; public set; }
    public ICompositionSurface Surface { get; public set; }
    public SceneWrappingMode WrappingUMode { get; public set; }
    public SceneWrappingMode WrappingVMode { get; public set; }
    internal SceneSurfaceMaterialInput(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneSurfaceMaterialInput();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneSurfaceMaterialInputStatics();
    public static SceneSurfaceMaterialInput Create(Compositor compositor);
    public static SceneSurfaceMaterialInput FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneSurfaceMaterialInput x, SceneSurfaceMaterialInput y);
    public static bool op_Inequality(SceneSurfaceMaterialInput x, SceneSurfaceMaterialInput y);
    public sealed virtual bool Equals(SceneSurfaceMaterialInput other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public void set_BitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public ICompositionSurface get_Surface();
    public void set_Surface(ICompositionSurface value);
    public SceneWrappingMode get_WrappingUMode();
    public void set_WrappingUMode(SceneWrappingMode value);
    public SceneWrappingMode get_WrappingVMode();
    public void set_WrappingVMode(SceneWrappingMode value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Scenes.SceneVisual")]
[SceneVisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.Scenes.ISceneVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Scenes.SceneVisual : ContainerVisual {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_Scenes_ISceneVisualStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneVisual { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_Scenes_ISceneVisualStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public SceneNode Root { get; public set; }
    internal SceneVisual(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneVisual();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_Scenes_ISceneVisualStatics();
    public static SceneVisual Create(Compositor compositor);
    public static SceneVisual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SceneVisual x, SceneVisual y);
    public static bool op_Inequality(SceneVisual x, SceneVisual y);
    public sealed virtual bool Equals(SceneVisual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public SceneNode get_Root();
    public void set_Root(SceneNode value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.Scenes.SceneWrappingMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Composition.Scenes.SceneWrappingMode : Enum {
    public int value__;
    public static SceneWrappingMode ClampToEdge;
    public static SceneWrappingMode MirroredRepeat;
    public static SceneWrappingMode Repeat;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.ShapeVisual")]
[ShapeVisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IShapeVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.ShapeVisual : ContainerVisual {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IShapeVisual { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionShapeCollection Shapes { get; }
    public CompositionViewBox ViewBox { get; public set; }
    internal ShapeVisual(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IShapeVisual();
    public static ShapeVisual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ShapeVisual x, ShapeVisual y);
    public static bool op_Inequality(ShapeVisual x, ShapeVisual y);
    public sealed virtual bool Equals(ShapeVisual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionShapeCollection get_Shapes();
    public CompositionViewBox get_ViewBox();
    public void set_ViewBox(CompositionViewBox value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SineEasingFunction")]
[SineEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ISineEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SineEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISineEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionEasingFunctionMode Mode { get; }
    internal SineEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISineEasingFunction();
    public static SineEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SineEasingFunction x, SineEasingFunction y);
    public static bool op_Inequality(SineEasingFunction x, SineEasingFunction y);
    public sealed virtual bool Equals(SineEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionEasingFunctionMode get_Mode();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SpotLight")]
[SpotLightRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ISpotLight")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SpotLight : CompositionLight {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ISpotLight2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ISpotLight3;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpotLight { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpotLight2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpotLight3 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float ConstantAttenuation { get; public set; }
    public Visual CoordinateSpace { get; public set; }
    public Vector3 Direction { get; public set; }
    public float InnerConeAngle { get; public set; }
    public float InnerConeAngleInDegrees { get; public set; }
    public Color InnerConeColor { get; public set; }
    public float InnerConeIntensity { get; public set; }
    public float LinearAttenuation { get; public set; }
    public float MaxAttenuationCutoff { get; public set; }
    public float MinAttenuationCutoff { get; public set; }
    public Vector3 Offset { get; public set; }
    public float OuterConeAngle { get; public set; }
    public float OuterConeAngleInDegrees { get; public set; }
    public Color OuterConeColor { get; public set; }
    public float OuterConeIntensity { get; public set; }
    public float QuadraticAttenuation { get; public set; }
    internal SpotLight(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpotLight();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ISpotLight2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpotLight2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ISpotLight3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpotLight3();
    public static SpotLight FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpotLight x, SpotLight y);
    public static bool op_Inequality(SpotLight x, SpotLight y);
    public sealed virtual bool Equals(SpotLight other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_ConstantAttenuation();
    public void set_ConstantAttenuation(float value);
    public Visual get_CoordinateSpace();
    public void set_CoordinateSpace(Visual value);
    public Vector3 get_Direction();
    public void set_Direction(Vector3 value);
    public float get_InnerConeAngle();
    public void set_InnerConeAngle(float value);
    public float get_InnerConeAngleInDegrees();
    public void set_InnerConeAngleInDegrees(float value);
    public Color get_InnerConeColor();
    public void set_InnerConeColor(Color value);
    public float get_InnerConeIntensity();
    public void set_InnerConeIntensity(float value);
    public float get_LinearAttenuation();
    public void set_LinearAttenuation(float value);
    public float get_MaxAttenuationCutoff();
    public void set_MaxAttenuationCutoff(float value);
    public float get_MinAttenuationCutoff();
    public void set_MinAttenuationCutoff(float value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public float get_OuterConeAngle();
    public void set_OuterConeAngle(float value);
    public float get_OuterConeAngleInDegrees();
    public void set_OuterConeAngleInDegrees(float value);
    public Color get_OuterConeColor();
    public void set_OuterConeColor(Color value);
    public float get_OuterConeIntensity();
    public void set_OuterConeIntensity(float value);
    public float get_QuadraticAttenuation();
    public void set_QuadraticAttenuation(float value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SpringScalarNaturalMotionAnimation")]
[SpringScalarNaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ISpringScalarNaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SpringScalarNaturalMotionAnimation : ScalarNaturalMotionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpringScalarNaturalMotionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float DampingRatio { get; public set; }
    public TimeSpan Period { get; public set; }
    internal SpringScalarNaturalMotionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpringScalarNaturalMotionAnimation();
    public static SpringScalarNaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpringScalarNaturalMotionAnimation x, SpringScalarNaturalMotionAnimation y);
    public static bool op_Inequality(SpringScalarNaturalMotionAnimation x, SpringScalarNaturalMotionAnimation y);
    public sealed virtual bool Equals(SpringScalarNaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_DampingRatio();
    public void set_DampingRatio(float value);
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SpringVector2NaturalMotionAnimation")]
[SpringVector2NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ISpringVector2NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SpringVector2NaturalMotionAnimation : Vector2NaturalMotionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpringVector2NaturalMotionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float DampingRatio { get; public set; }
    public TimeSpan Period { get; public set; }
    internal SpringVector2NaturalMotionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpringVector2NaturalMotionAnimation();
    public static SpringVector2NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpringVector2NaturalMotionAnimation x, SpringVector2NaturalMotionAnimation y);
    public static bool op_Inequality(SpringVector2NaturalMotionAnimation x, SpringVector2NaturalMotionAnimation y);
    public sealed virtual bool Equals(SpringVector2NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_DampingRatio();
    public void set_DampingRatio(float value);
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SpringVector3NaturalMotionAnimation")]
[SpringVector3NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ISpringVector3NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SpringVector3NaturalMotionAnimation : Vector3NaturalMotionAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpringVector3NaturalMotionAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public float DampingRatio { get; public set; }
    public TimeSpan Period { get; public set; }
    internal SpringVector3NaturalMotionAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpringVector3NaturalMotionAnimation();
    public static SpringVector3NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpringVector3NaturalMotionAnimation x, SpringVector3NaturalMotionAnimation y);
    public static bool op_Inequality(SpringVector3NaturalMotionAnimation x, SpringVector3NaturalMotionAnimation y);
    public sealed virtual bool Equals(SpringVector3NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public float get_DampingRatio();
    public void set_DampingRatio(float value);
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SpriteVisual")]
[SpriteVisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.ISpriteVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SpriteVisual : ContainerVisual {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ISpriteVisual2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpriteVisual { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ISpriteVisual2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompositionBrush Brush { get; public set; }
    public CompositionShadow Shadow { get; public set; }
    internal SpriteVisual(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpriteVisual();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ISpriteVisual2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ISpriteVisual2();
    public static SpriteVisual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpriteVisual x, SpriteVisual y);
    public static bool op_Inequality(SpriteVisual x, SpriteVisual y);
    public sealed virtual bool Equals(SpriteVisual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompositionBrush get_Brush();
    public void set_Brush(CompositionBrush value);
    public CompositionShadow get_Shadow();
    public void set_Shadow(CompositionShadow value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.StepEasingFunction")]
[StepEasingFunctionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IStepEasingFunction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.StepEasingFunction : CompositionEasingFunction {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IStepEasingFunction { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int FinalStep { get; public set; }
    public int InitialStep { get; public set; }
    public bool IsFinalStepSingleFrame { get; public set; }
    public bool IsInitialStepSingleFrame { get; public set; }
    public int StepCount { get; public set; }
    internal StepEasingFunction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IStepEasingFunction();
    public static StepEasingFunction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(StepEasingFunction x, StepEasingFunction y);
    public static bool op_Inequality(StepEasingFunction x, StepEasingFunction y);
    public sealed virtual bool Equals(StepEasingFunction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public int get_FinalStep();
    public void set_FinalStep(int value);
    public int get_InitialStep();
    public void set_InitialStep(int value);
    public bool get_IsFinalStepSingleFrame();
    public void set_IsFinalStepSingleFrame(bool value);
    public bool get_IsInitialStepSingleFrame();
    public void set_IsInitialStepSingleFrame(bool value);
    public int get_StepCount();
    public void set_StepCount(int value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController")]
[DesktopAcrylicControllerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicController : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IClosableNotifier;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_DesktopAcrylicController;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicControllerStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IClosableNotifier { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_DesktopAcrylicController { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicControllerStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Color FallbackColor { get; public set; }
    public bool IsClosed { get; }
    public DesktopAcrylicKind Kind { get; public set; }
    public float LuminosityOpacity { get; public set; }
    public SystemBackdropState State { get; }
    public Color TintColor { get; public set; }
    public float TintOpacity { get; public set; }
    internal DesktopAcrylicController(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicController3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets();
    private IObjectReference Make___objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference get__objRef_global__Microsoft_UI_IClosableNotifier();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_DesktopAcrylicController();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IDesktopAcrylicControllerStatics();
    public static bool IsSupported();
    public static DesktopAcrylicController FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DesktopAcrylicController x, DesktopAcrylicController y);
    public static bool op_Inequality(DesktopAcrylicController x, DesktopAcrylicController y);
    public sealed virtual bool Equals(DesktopAcrylicController other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void ResetProperties();
    public sealed virtual bool SetTarget(WindowId windowId, CompositionTarget desktopWindowTarget);
    public sealed virtual bool SetTarget(CoreWindow coreWindow, CompositionTarget compositionTarget);
    public sealed virtual void Dispose();
    public sealed virtual bool AddSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public sealed virtual void RemoveAllSystemBackdropTargets();
    public sealed virtual bool RemoveSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public sealed virtual void SetSystemBackdropConfiguration(SystemBackdropConfiguration configuration);
    public sealed virtual void add_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    public sealed virtual void remove_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    public sealed virtual void add_Closed(ClosableNotifierHandler value);
    public sealed virtual void remove_Closed(ClosableNotifierHandler value);
    public sealed virtual void add_FrameworkClosed(ClosableNotifierHandler value);
    public sealed virtual void remove_FrameworkClosed(ClosableNotifierHandler value);
    public Color get_FallbackColor();
    public void set_FallbackColor(Color value);
    public sealed virtual bool get_IsClosed();
    public DesktopAcrylicKind get_Kind();
    public void set_Kind(DesktopAcrylicKind value);
    public float get_LuminosityOpacity();
    public void set_LuminosityOpacity(float value);
    public sealed virtual SystemBackdropState get_State();
    public Color get_TintColor();
    public void set_TintColor(Color value);
    public float get_TintOpacity();
    public void set_TintOpacity(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicKind>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Composition.SystemBackdrops.DesktopAcrylicKind : Enum {
    public int value__;
    public static DesktopAcrylicKind Default;
    public static DesktopAcrylicKind Base;
    public static DesktopAcrylicKind Thin;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7C20A6AF-8EB3-5F08-BDFC-6D35E35DFE45")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController {
    public Color FallbackColor { get; public set; }
    public float LuminosityOpacity { get; public set; }
    public Color TintColor { get; public set; }
    public float TintOpacity { get; public set; }
    public abstract virtual Color get_FallbackColor();
    public abstract virtual void set_FallbackColor(Color value);
    public abstract virtual float get_LuminosityOpacity();
    public abstract virtual void set_LuminosityOpacity(float value);
    public abstract virtual Color get_TintColor();
    public abstract virtual void set_TintColor(Color value);
    public abstract virtual float get_TintOpacity();
    public abstract virtual void set_TintOpacity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("88E0A368-DFC7-5971-A50B-40DF5AA5F5C2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController2 {
    public abstract virtual void ResetProperties();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("30D917E6-02D3-59CA-B440-BF9D2E7CC140")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicController3 {
    public DesktopAcrylicKind Kind { get; public set; }
    public abstract virtual DesktopAcrylicKind get_Kind();
    public abstract virtual void set_Kind(DesktopAcrylicKind value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A9E8F790-79EF-5416-9B67-6BCFE867C8B7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicControllerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IDesktopAcrylicControllerStatics {
    public abstract virtual bool IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2DE996A9-0A2A-5889-A89C-1F84060A8CAB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IMicaController {
    public Color FallbackColor { get; public set; }
    public float LuminosityOpacity { get; public set; }
    public Color TintColor { get; public set; }
    public float TintOpacity { get; public set; }
    public abstract virtual Color get_FallbackColor();
    public abstract virtual void set_FallbackColor(Color value);
    public abstract virtual float get_LuminosityOpacity();
    public abstract virtual void set_LuminosityOpacity(float value);
    public abstract virtual Color get_TintColor();
    public abstract virtual void set_TintColor(Color value);
    public abstract virtual float get_TintOpacity();
    public abstract virtual void set_TintOpacity(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F1ED4A52-D9CA-506E-9586-CAAEFD3AA971")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaController2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IMicaController2 {
    public MicaKind Kind { get; public set; }
    public abstract virtual void ResetProperties();
    public abstract virtual MicaKind get_Kind();
    public abstract virtual void set_Kind(MicaKind value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7D85D834-D514-5250-B7C4-0B7850D1EFDC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.IMicaControllerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Composition.SystemBackdrops.IMicaControllerStatics {
    public abstract virtual bool IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EBCCE1B9-0E0C-5431-AB0E-00F3F0669962")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropConfiguration")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropConfiguration {
    public Nullable`1<Color> HighContrastBackgroundColor { get; public set; }
    public bool IsHighContrast { get; public set; }
    public bool IsInputActive { get; public set; }
    public SystemBackdropTheme Theme { get; public set; }
    public abstract virtual Nullable`1<Color> get_HighContrastBackgroundColor();
    public abstract virtual void set_HighContrastBackgroundColor(Nullable`1<Color> value);
    public abstract virtual bool get_IsHighContrast();
    public abstract virtual void set_IsHighContrast(bool value);
    public abstract virtual bool get_IsInputActive();
    public abstract virtual void set_IsInputActive(bool value);
    public abstract virtual SystemBackdropTheme get_Theme();
    public abstract virtual void set_Theme(SystemBackdropTheme value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5632D76C-0B74-5B52-AA33-80262068AEB2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropController {
    [DefaultOverloadAttribute]
[OverloadAttribute("SetTargetWithWindowId")]
public abstract virtual bool SetTarget(WindowId windowId, CompositionTarget desktopWindowTarget);
    [OverloadAttribute("SetTargetWithCoreWindow")]
public abstract virtual bool SetTarget(CoreWindow coreWindow, CompositionTarget compositionTarget);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9C56FE7C-98EB-5F89-AD97-DAD57FC30C8C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public interface Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropControllerWithTargets {
    public SystemBackdropState State { get; }
    public abstract virtual bool AddSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public abstract virtual void RemoveAllSystemBackdropTargets();
    public abstract virtual bool RemoveSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public abstract virtual void SetSystemBackdropConfiguration(SystemBackdropConfiguration configuration);
    public abstract virtual SystemBackdropState get_State();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.MicaController")]
[MicaControllerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.SystemBackdrops.IMicaController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.SystemBackdrops.MicaController : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaController2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IClosableNotifier;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_MicaController;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaControllerStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaController { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaController2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IClosableNotifier { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_MicaController { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaControllerStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Color FallbackColor { get; public set; }
    public bool IsClosed { get; }
    public MicaKind Kind { get; public set; }
    public float LuminosityOpacity { get; public set; }
    public SystemBackdropState State { get; }
    public Color TintColor { get; public set; }
    public float TintOpacity { get; public set; }
    internal MicaController(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaController();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaController2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaController2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropController();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets();
    private IObjectReference Make___objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference get__objRef_global__Microsoft_UI_IClosableNotifier();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_MicaController();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_IMicaControllerStatics();
    public static bool IsSupported();
    public static MicaController FromAbi(IntPtr thisPtr);
    public static bool op_Equality(MicaController x, MicaController y);
    public static bool op_Inequality(MicaController x, MicaController y);
    public sealed virtual bool Equals(MicaController other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void ResetProperties();
    public sealed virtual bool SetTarget(WindowId windowId, CompositionTarget desktopWindowTarget);
    public sealed virtual bool SetTarget(CoreWindow coreWindow, CompositionTarget compositionTarget);
    public sealed virtual void Dispose();
    public sealed virtual bool AddSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public sealed virtual void RemoveAllSystemBackdropTargets();
    public sealed virtual bool RemoveSystemBackdropTarget(ICompositionSupportsSystemBackdrop systemBackdropTarget);
    public sealed virtual void SetSystemBackdropConfiguration(SystemBackdropConfiguration configuration);
    public sealed virtual void add_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    public sealed virtual void remove_StateChanged(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> value);
    public sealed virtual void add_Closed(ClosableNotifierHandler value);
    public sealed virtual void remove_Closed(ClosableNotifierHandler value);
    public sealed virtual void add_FrameworkClosed(ClosableNotifierHandler value);
    public sealed virtual void remove_FrameworkClosed(ClosableNotifierHandler value);
    public Color get_FallbackColor();
    public void set_FallbackColor(Color value);
    public sealed virtual bool get_IsClosed();
    public MicaKind get_Kind();
    public void set_Kind(MicaKind value);
    public float get_LuminosityOpacity();
    public void set_LuminosityOpacity(float value);
    public sealed virtual SystemBackdropState get_State();
    public Color get_TintColor();
    public void set_TintColor(Color value);
    public float get_TintOpacity();
    public void set_TintOpacity(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.SystemBackdrops.MicaKind>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public enum Microsoft.UI.Composition.SystemBackdrops.MicaKind : Enum {
    public int value__;
    public static MicaKind Base;
    public static MicaKind BaseAlt;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration")]
[SystemBackdropConfigurationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.SystemBackdrops.ISystemBackdropConfiguration")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public class Microsoft.UI.Composition.SystemBackdrops.SystemBackdropConfiguration : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_SystemBackdrops_SystemBackdropConfiguration;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_SystemBackdrops_SystemBackdropConfiguration { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<Color> HighContrastBackgroundColor { get; public set; }
    public bool IsHighContrast { get; public set; }
    public bool IsInputActive { get; public set; }
    public SystemBackdropTheme Theme { get; public set; }
    internal SystemBackdropConfiguration(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropConfiguration();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_SystemBackdrops_SystemBackdropConfiguration();
    public static SystemBackdropConfiguration FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SystemBackdropConfiguration x, SystemBackdropConfiguration y);
    public static bool op_Inequality(SystemBackdropConfiguration x, SystemBackdropConfiguration y);
    public sealed virtual bool Equals(SystemBackdropConfiguration other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Nullable`1<Color> get_HighContrastBackgroundColor();
    public void set_HighContrastBackgroundColor(Nullable`1<Color> value);
    public bool get_IsHighContrast();
    public void set_IsHighContrast(bool value);
    public bool get_IsInputActive();
    public void set_IsInputActive(bool value);
    public SystemBackdropTheme get_Theme();
    public void set_Theme(SystemBackdropTheme value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.SystemBackdrops.SystemBackdropState>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public enum Microsoft.UI.Composition.SystemBackdrops.SystemBackdropState : Enum {
    public int value__;
    public static SystemBackdropState Active;
    public static SystemBackdropState Fallback;
    public static SystemBackdropState HighContrast;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Composition.SystemBackdrops.SystemBackdropTheme>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public enum Microsoft.UI.Composition.SystemBackdrops.SystemBackdropTheme : Enum {
    public int value__;
    public static SystemBackdropTheme Default;
    public static SystemBackdropTheme Light;
    public static SystemBackdropTheme Dark;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Vector2KeyFrameAnimation")]
[Vector2KeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVector2KeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Vector2KeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVector2KeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal Vector2KeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector2KeyFrameAnimation();
    public static Vector2KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Vector2KeyFrameAnimation x, Vector2KeyFrameAnimation y);
    public static bool op_Inequality(Vector2KeyFrameAnimation x, Vector2KeyFrameAnimation y);
    public sealed virtual bool Equals(Vector2KeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, Vector2 value);
    public void InsertKeyFrame(float normalizedProgressKey, Vector2 value, CompositionEasingFunction easingFunction);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Vector2NaturalMotionAnimation")]
[Vector2NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVector2NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Vector2NaturalMotionAnimation : NaturalMotionAnimation {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimation;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimationFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimation { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimationFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Nullable`1<Vector2> FinalValue { get; public set; }
    public Nullable`1<Vector2> InitialValue { get; public set; }
    public Vector2 InitialVelocity { get; public set; }
    protected internal Vector2NaturalMotionAnimation(IObjectReference objRef);
    protected Vector2NaturalMotionAnimation(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimation();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimation();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector2NaturalMotionAnimationFactory();
    public static Vector2NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Vector2NaturalMotionAnimation x, Vector2NaturalMotionAnimation y);
    public static bool op_Inequality(Vector2NaturalMotionAnimation x, Vector2NaturalMotionAnimation y);
    public sealed virtual bool Equals(Vector2NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Nullable`1<Vector2> get_FinalValue();
    public void set_FinalValue(Nullable`1<Vector2> value);
    public Nullable`1<Vector2> get_InitialValue();
    public void set_InitialValue(Nullable`1<Vector2> value);
    public Vector2 get_InitialVelocity();
    public void set_InitialVelocity(Vector2 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Vector3KeyFrameAnimation")]
[Vector3KeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVector3KeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Vector3KeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVector3KeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal Vector3KeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector3KeyFrameAnimation();
    public static Vector3KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Vector3KeyFrameAnimation x, Vector3KeyFrameAnimation y);
    public static bool op_Inequality(Vector3KeyFrameAnimation x, Vector3KeyFrameAnimation y);
    public sealed virtual bool Equals(Vector3KeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, Vector3 value);
    public void InsertKeyFrame(float normalizedProgressKey, Vector3 value, CompositionEasingFunction easingFunction);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Vector3NaturalMotionAnimation")]
[Vector3NaturalMotionAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVector3NaturalMotionAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Vector3NaturalMotionAnimation : NaturalMotionAnimation {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimation;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimationFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimation { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimationFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Nullable`1<Vector3> FinalValue { get; public set; }
    public Nullable`1<Vector3> InitialValue { get; public set; }
    public Vector3 InitialVelocity { get; public set; }
    protected internal Vector3NaturalMotionAnimation(IObjectReference objRef);
    protected Vector3NaturalMotionAnimation(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimation();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimation();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector3NaturalMotionAnimationFactory();
    public static Vector3NaturalMotionAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Vector3NaturalMotionAnimation x, Vector3NaturalMotionAnimation y);
    public static bool op_Inequality(Vector3NaturalMotionAnimation x, Vector3NaturalMotionAnimation y);
    public sealed virtual bool Equals(Vector3NaturalMotionAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Nullable`1<Vector3> get_FinalValue();
    public void set_FinalValue(Nullable`1<Vector3> value);
    public Nullable`1<Vector3> get_InitialValue();
    public void set_InitialValue(Nullable`1<Vector3> value);
    public Vector3 get_InitialVelocity();
    public void set_InitialVelocity(Vector3 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Vector4KeyFrameAnimation")]
[Vector4KeyFrameAnimationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVector4KeyFrameAnimation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Vector4KeyFrameAnimation : KeyFrameAnimation {
    private IObjectReference _inner;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVector4KeyFrameAnimation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal Vector4KeyFrameAnimation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVector4KeyFrameAnimation();
    public static Vector4KeyFrameAnimation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Vector4KeyFrameAnimation x, Vector4KeyFrameAnimation y);
    public static bool op_Inequality(Vector4KeyFrameAnimation x, Vector4KeyFrameAnimation y);
    public sealed virtual bool Equals(Vector4KeyFrameAnimation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertKeyFrame(float normalizedProgressKey, Vector4 value);
    public void InsertKeyFrame(float normalizedProgressKey, Vector4 value, CompositionEasingFunction easingFunction);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.Visual")]
[VisualRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVisual")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.Visual : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVisual;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVisual2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVisual3;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVisual4;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_IVisualFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisual { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisual2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisual3 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisual4 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Composition_IVisualFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Vector2 AnchorPoint { get; public set; }
    public CompositionBackfaceVisibility BackfaceVisibility { get; public set; }
    public CompositionBorderMode BorderMode { get; public set; }
    public Vector3 CenterPoint { get; public set; }
    public CompositionClip Clip { get; public set; }
    public CompositionCompositeMode CompositeMode { get; public set; }
    public bool IsHitTestVisible { get; public set; }
    public bool IsPixelSnappingEnabled { get; public set; }
    public bool IsVisible { get; public set; }
    public Vector3 Offset { get; public set; }
    public float Opacity { get; public set; }
    public Quaternion Orientation { get; public set; }
    public ContainerVisual Parent { get; }
    public Visual ParentForTransform { get; public set; }
    public Vector3 RelativeOffsetAdjustment { get; public set; }
    public Vector2 RelativeSizeAdjustment { get; public set; }
    public float RotationAngle { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public Vector3 RotationAxis { get; public set; }
    public Vector3 Scale { get; public set; }
    public Vector2 Size { get; public set; }
    public Matrix4x4 TransformMatrix { get; public set; }
    protected internal Visual(IObjectReference objRef);
    protected Visual(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVisual();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisual();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVisual2();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisual2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVisual3();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisual3();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_IVisual4();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisual4();
    private static IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisualFactory();
    public static Visual FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Visual x, Visual y);
    public static bool op_Inequality(Visual x, Visual y);
    public sealed virtual bool Equals(Visual other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
    public CompositionBackfaceVisibility get_BackfaceVisibility();
    public void set_BackfaceVisibility(CompositionBackfaceVisibility value);
    public CompositionBorderMode get_BorderMode();
    public void set_BorderMode(CompositionBorderMode value);
    public Vector3 get_CenterPoint();
    public void set_CenterPoint(Vector3 value);
    public CompositionClip get_Clip();
    public void set_Clip(CompositionClip value);
    public CompositionCompositeMode get_CompositeMode();
    public void set_CompositeMode(CompositionCompositeMode value);
    public bool get_IsHitTestVisible();
    public void set_IsHitTestVisible(bool value);
    public bool get_IsPixelSnappingEnabled();
    public void set_IsPixelSnappingEnabled(bool value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public float get_Opacity();
    public void set_Opacity(float value);
    public Quaternion get_Orientation();
    public void set_Orientation(Quaternion value);
    public ContainerVisual get_Parent();
    public Visual get_ParentForTransform();
    public void set_ParentForTransform(Visual value);
    public Vector3 get_RelativeOffsetAdjustment();
    public void set_RelativeOffsetAdjustment(Vector3 value);
    public Vector2 get_RelativeSizeAdjustment();
    public void set_RelativeSizeAdjustment(Vector2 value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public Vector3 get_RotationAxis();
    public void set_RotationAxis(Vector3 value);
    public Vector3 get_Scale();
    public void set_Scale(Vector3 value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public Matrix4x4 get_TransformMatrix();
    public void set_TransformMatrix(Matrix4x4 value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.VisualCollection")]
[VisualCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVisualCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.VisualCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_Visual_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisualCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_Visual_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    internal VisualCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisualCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_Visual_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_Visual_();
    public static VisualCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(VisualCollection x, VisualCollection y);
    public static bool op_Inequality(VisualCollection x, VisualCollection y);
    public sealed virtual bool Equals(VisualCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void InsertAbove(Visual newChild, Visual sibling);
    public void InsertAtBottom(Visual newChild);
    public void InsertAtTop(Visual newChild);
    public void InsertBelow(Visual newChild, Visual sibling);
    public void Remove(Visual child);
    public void RemoveAll();
    public sealed virtual IEnumerator`1<Visual> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Composition.VisualUnorderedCollection")]
[VisualUnorderedCollectionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Composition.IVisualUnorderedCollection")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Composition.VisualUnorderedCollection : CompositionObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_Collections_Generic_IEnumerable_Visual_;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_IVisualUnorderedCollection { get; }
    private IObjectReference _objRef_global__System_Collections_Generic_IEnumerable_Visual_ { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public int Count { get; }
    internal VisualUnorderedCollection(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_IVisualUnorderedCollection();
    private IObjectReference Make___objRef_global__System_Collections_Generic_IEnumerable_Visual_();
    private IObjectReference get__objRef_global__System_Collections_Generic_IEnumerable_Visual_();
    public static VisualUnorderedCollection FromAbi(IntPtr thisPtr);
    public static bool op_Equality(VisualUnorderedCollection x, VisualUnorderedCollection y);
    public static bool op_Inequality(VisualUnorderedCollection x, VisualUnorderedCollection y);
    public sealed virtual bool Equals(VisualUnorderedCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Add(Visual newVisual);
    public void Remove(Visual visual);
    public void RemoveAll();
    public sealed virtual IEnumerator`1<Visual> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentCoordinateConverter")]
[ContentCoordinateConverterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentCoordinateConverter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentCoordinateConverter : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentCoordinateConverter;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentCoordinateConverterFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentCoordinateConverterStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentCoordinateConverter { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentCoordinateConverterFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentCoordinateConverterStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    protected internal ContentCoordinateConverter(IObjectReference objRef);
    protected ContentCoordinateConverter(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentCoordinateConverter();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentCoordinateConverter();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentCoordinateConverterFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentCoordinateConverterStatics();
    public static ContentCoordinateConverter CreateForWindowId(WindowId windowId);
    public static ContentCoordinateConverter FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentCoordinateConverter x, ContentCoordinateConverter y);
    public static bool op_Inequality(ContentCoordinateConverter x, ContentCoordinateConverter y);
    public sealed virtual bool Equals(ContentCoordinateConverter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PointInt32 ConvertLocalToScreen(Point localPoint);
    public PointInt32[] ConvertLocalToScreen(Point[] localPoints);
    public PointInt32[] ConvertLocalToScreen(Point[] localPoints, ContentCoordinateRoundingMode roundingMode);
    public RectInt32 ConvertLocalToScreen(Rect localRect);
    public Point ConvertScreenToLocal(PointInt32 screenPoint);
    public Point[] ConvertScreenToLocal(PointInt32[] screenPoints);
    public Rect ConvertScreenToLocal(RectInt32 screenRect);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Content.ContentCoordinateRoundingMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Content.ContentCoordinateRoundingMode : Enum {
    public int value__;
    public static ContentCoordinateRoundingMode Auto;
    public static ContentCoordinateRoundingMode Floor;
    public static ContentCoordinateRoundingMode Round;
    public static ContentCoordinateRoundingMode Ceiling;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentDeferral")]
[ContentDeferralRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentDeferral")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentDeferral : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentDeferral { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal ContentDeferral(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentDeferral();
    public static ContentDeferral FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentDeferral x, ContentDeferral y);
    public static bool op_Inequality(ContentDeferral x, ContentDeferral y);
    public sealed virtual bool Equals(ContentDeferral other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Complete();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs")]
[ContentEnvironmentSettingChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentEnvironmentSettingChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string SettingName { get; }
    internal ContentEnvironmentSettingChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentEnvironmentSettingChangedEventArgs();
    public static ContentEnvironmentSettingChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentEnvironmentSettingChangedEventArgs x, ContentEnvironmentSettingChangedEventArgs y);
    public static bool op_Inequality(ContentEnvironmentSettingChangedEventArgs x, ContentEnvironmentSettingChangedEventArgs y);
    public sealed virtual bool Equals(ContentEnvironmentSettingChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public string get_SettingName();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs")]
[ContentEnvironmentStateChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentEnvironmentStateChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool DidAppWindowIdChange { get; }
    public bool DidDisplayIdChange { get; }
    internal ContentEnvironmentStateChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentEnvironmentStateChangedEventArgs();
    public static ContentEnvironmentStateChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentEnvironmentStateChangedEventArgs x, ContentEnvironmentStateChangedEventArgs y);
    public static bool op_Inequality(ContentEnvironmentStateChangedEventArgs x, ContentEnvironmentStateChangedEventArgs y);
    public sealed virtual bool Equals(ContentEnvironmentStateChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_DidAppWindowIdChange();
    public bool get_DidDisplayIdChange();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentIsland")]
[ContentIslandRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentIsland")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentIsland : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentIsland;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IClosableNotifier;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Composition_ICompositionSupportsSystemBackdrop;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentIslandFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentIslandStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentIsland { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IClosableNotifier { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Composition_ICompositionSupportsSystemBackdrop { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentIslandFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentIslandStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Vector2 ActualSize { get; }
    public object AppData { get; public set; }
    public ContentCoordinateConverter CoordinateConverter { get; }
    public IPropertySet CustomProperties { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ContentIslandEnvironment Environment { get; }
    public ulong Id { get; }
    public bool IsClosed { get; }
    public bool IsConnected { get; }
    public bool IsHitTestVisibleWhenTransparent { get; public set; }
    public bool IsIslandEnabled { get; public set; }
    public bool IsIslandVisible { get; public set; }
    public bool IsSiteEnabled { get; }
    public bool IsSiteVisible { get; }
    public ContentLayoutDirection LayoutDirection { get; }
    public float RasterizationScale { get; }
    public CompositionBrush SystemBackdrop { get; public set; }
    protected internal ContentIsland(IObjectReference objRef);
    protected ContentIsland(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentIsland();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIsland();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference get__objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference Make___objRef_global__Microsoft_UI_Composition_ICompositionSupportsSystemBackdrop();
    private IObjectReference get__objRef_global__Microsoft_UI_Composition_ICompositionSupportsSystemBackdrop();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIslandFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIslandStatics();
    public static ContentIsland Create(Visual Root);
    public static ContentIsland[] FindAllForCompositor(Compositor compositor);
    public static ContentIsland[] FindAllForCurrentThread();
    public static ContentIsland GetByVisual(Visual child);
    public static ContentIsland GetFromId(ulong id);
    public static ContentIsland FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentIsland x, ContentIsland y);
    public static bool op_Inequality(ContentIsland x, ContentIsland y);
    public sealed virtual bool Equals(ContentIsland other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public object GetAutomationHostProvider();
    public ContentDeferral GetStateChangeDeferral();
    public void RequestSize(Vector2 size);
    public void add_AutomationProviderRequested(TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs> value);
    public void remove_AutomationProviderRequested(TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs> value);
    public void add_StateChanged(TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs> value);
    public void remove_StateChanged(TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs> value);
    public sealed virtual void Dispose();
    public sealed virtual void add_Closed(ClosableNotifierHandler value);
    public sealed virtual void remove_Closed(ClosableNotifierHandler value);
    public sealed virtual void add_FrameworkClosed(ClosableNotifierHandler value);
    public sealed virtual void remove_FrameworkClosed(ClosableNotifierHandler value);
    public Vector2 get_ActualSize();
    public object get_AppData();
    public void set_AppData(object value);
    public ContentCoordinateConverter get_CoordinateConverter();
    public IPropertySet get_CustomProperties();
    public DispatcherQueue get_DispatcherQueue();
    public ContentIslandEnvironment get_Environment();
    public ulong get_Id();
    public sealed virtual bool get_IsClosed();
    public bool get_IsConnected();
    public bool get_IsHitTestVisibleWhenTransparent();
    public void set_IsHitTestVisibleWhenTransparent(bool value);
    public bool get_IsIslandEnabled();
    public void set_IsIslandEnabled(bool value);
    public bool get_IsIslandVisible();
    public void set_IsIslandVisible(bool value);
    public bool get_IsSiteEnabled();
    public bool get_IsSiteVisible();
    public ContentLayoutDirection get_LayoutDirection();
    public float get_RasterizationScale();
    public sealed virtual CompositionBrush get_SystemBackdrop();
    public sealed virtual void set_SystemBackdrop(CompositionBrush value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs")]
[ContentIslandAutomationProviderRequestedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentIslandAutomationProviderRequestedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public object AutomationProvider { get; public set; }
    public bool Handled { get; public set; }
    internal ContentIslandAutomationProviderRequestedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIslandAutomationProviderRequestedEventArgs();
    public static ContentIslandAutomationProviderRequestedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentIslandAutomationProviderRequestedEventArgs x, ContentIslandAutomationProviderRequestedEventArgs y);
    public static bool op_Inequality(ContentIslandAutomationProviderRequestedEventArgs x, ContentIslandAutomationProviderRequestedEventArgs y);
    public sealed virtual bool Equals(ContentIslandAutomationProviderRequestedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public object get_AutomationProvider();
    public void set_AutomationProvider(object value);
    public bool get_Handled();
    public void set_Handled(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentIslandEnvironment")]
[ContentIslandEnvironmentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentIslandEnvironment")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentIslandEnvironment : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentIslandEnvironment;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentIslandEnvironmentFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentIslandEnvironment { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentIslandEnvironmentFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public WindowId AppWindowId { get; }
    public DisplayId DisplayId { get; }
    protected internal ContentIslandEnvironment(IObjectReference objRef);
    protected ContentIslandEnvironment(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentIslandEnvironment();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIslandEnvironment();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIslandEnvironmentFactory();
    public static ContentIslandEnvironment FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentIslandEnvironment x, ContentIslandEnvironment y);
    public static bool op_Inequality(ContentIslandEnvironment x, ContentIslandEnvironment y);
    public sealed virtual bool Equals(ContentIslandEnvironment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void add_SettingChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs> value);
    public void remove_SettingChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs> value);
    public void add_StateChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs> value);
    public void remove_StateChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs> value);
    public WindowId get_AppWindowId();
    public DisplayId get_DisplayId();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentIslandStateChangedEventArgs")]
[ContentIslandStateChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentIslandStateChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentIslandStateChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentIslandStateChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool DidActualSizeChange { get; }
    public bool DidLayoutDirectionChange { get; }
    public bool DidRasterizationScaleChange { get; }
    public bool DidSiteEnabledChange { get; }
    public bool DidSiteVisibleChange { get; }
    internal ContentIslandStateChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentIslandStateChangedEventArgs();
    public static ContentIslandStateChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentIslandStateChangedEventArgs x, ContentIslandStateChangedEventArgs y);
    public static bool op_Inequality(ContentIslandStateChangedEventArgs x, ContentIslandStateChangedEventArgs y);
    public sealed virtual bool Equals(ContentIslandStateChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_DidActualSizeChange();
    public bool get_DidLayoutDirectionChange();
    public bool get_DidRasterizationScaleChange();
    public bool get_DidSiteEnabledChange();
    public bool get_DidSiteVisibleChange();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Content.ContentLayoutDirection>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Content.ContentLayoutDirection : Enum {
    public int value__;
    public static ContentLayoutDirection LeftToRight;
    public static ContentLayoutDirection RightToLeft;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentSite")]
[ContentSiteRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentSite")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentSite : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSite;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IClosableNotifier;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentSite { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IClosableNotifier { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Vector2 ActualSize { get; public set; }
    public SizeInt32 ClientSize { get; public set; }
    public ContentCoordinateConverter CoordinateConverter { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ContentSiteEnvironment Environment { get; }
    public bool IsClosed { get; }
    public bool IsConnected { get; }
    public bool IsSiteEnabled { get; public set; }
    public bool IsSiteVisible { get; public set; }
    public ContentLayoutDirection LayoutDirection { get; public set; }
    public float OverrideScale { get; public set; }
    public float ParentScale { get; public set; }
    public float RasterizationScale { get; }
    public Vector2 RequestedSize { get; }
    public bool ShouldApplyRasterizationScale { get; public set; }
    public ContentSiteView View { get; }
    protected internal ContentSite(IObjectReference objRef);
    protected ContentSite(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentSite();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSite();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference get__objRef_global__Microsoft_UI_IClosableNotifier();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteFactory();
    public static ContentSite FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentSite x, ContentSite y);
    public static bool op_Inequality(ContentSite x, ContentSite y);
    public sealed virtual bool Equals(ContentSite other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ContentDeferral GetIslandStateChangeDeferral();
    public void add_RequestedStateChanged(TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs> value);
    public void remove_RequestedStateChanged(TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs> value);
    public sealed virtual void Dispose();
    public sealed virtual void add_Closed(ClosableNotifierHandler value);
    public sealed virtual void remove_Closed(ClosableNotifierHandler value);
    public sealed virtual void add_FrameworkClosed(ClosableNotifierHandler value);
    public sealed virtual void remove_FrameworkClosed(ClosableNotifierHandler value);
    public Vector2 get_ActualSize();
    public void set_ActualSize(Vector2 value);
    public SizeInt32 get_ClientSize();
    public void set_ClientSize(SizeInt32 value);
    public ContentCoordinateConverter get_CoordinateConverter();
    public DispatcherQueue get_DispatcherQueue();
    public ContentSiteEnvironment get_Environment();
    public sealed virtual bool get_IsClosed();
    public bool get_IsConnected();
    public bool get_IsSiteEnabled();
    public void set_IsSiteEnabled(bool value);
    public bool get_IsSiteVisible();
    public void set_IsSiteVisible(bool value);
    public ContentLayoutDirection get_LayoutDirection();
    public void set_LayoutDirection(ContentLayoutDirection value);
    public float get_OverrideScale();
    public void set_OverrideScale(float value);
    public float get_ParentScale();
    public void set_ParentScale(float value);
    public float get_RasterizationScale();
    public Vector2 get_RequestedSize();
    public bool get_ShouldApplyRasterizationScale();
    public void set_ShouldApplyRasterizationScale(bool value);
    public ContentSiteView get_View();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentSiteEnvironment")]
[ContentSiteEnvironmentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentSiteEnvironment")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentSiteEnvironment : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteEnvironment;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteEnvironment { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public WindowId AppWindowId { get; public set; }
    public DisplayId DisplayId { get; public set; }
    public ContentSiteEnvironmentView View { get; }
    protected internal ContentSiteEnvironment(IObjectReference objRef);
    protected ContentSiteEnvironment(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentSiteEnvironment();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteEnvironment();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentFactory();
    public static ContentSiteEnvironment FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentSiteEnvironment x, ContentSiteEnvironment y);
    public static bool op_Inequality(ContentSiteEnvironment x, ContentSiteEnvironment y);
    public sealed virtual bool Equals(ContentSiteEnvironment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void NotifySettingChanged(string setting);
    public WindowId get_AppWindowId();
    public void set_AppWindowId(WindowId value);
    public DisplayId get_DisplayId();
    public void set_DisplayId(DisplayId value);
    public ContentSiteEnvironmentView get_View();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentSiteEnvironmentView")]
[ContentSiteEnvironmentViewRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentSiteEnvironmentView")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentSiteEnvironmentView : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentView;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentViewFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentView { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentViewFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public WindowId AppWindowId { get; }
    public DisplayId DisplayId { get; }
    protected internal ContentSiteEnvironmentView(IObjectReference objRef);
    protected ContentSiteEnvironmentView(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentView();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentView();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteEnvironmentViewFactory();
    public static ContentSiteEnvironmentView FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentSiteEnvironmentView x, ContentSiteEnvironmentView y);
    public static bool op_Inequality(ContentSiteEnvironmentView x, ContentSiteEnvironmentView y);
    public sealed virtual bool Equals(ContentSiteEnvironmentView other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public WindowId get_AppWindowId();
    public DisplayId get_DisplayId();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentSiteRequestedStateChangedEventArgs")]
[ContentSiteRequestedStateChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentSiteRequestedStateChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteRequestedStateChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool DidRequestedSizeChange { get; }
    internal ContentSiteRequestedStateChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteRequestedStateChangedEventArgs();
    public static ContentSiteRequestedStateChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentSiteRequestedStateChangedEventArgs x, ContentSiteRequestedStateChangedEventArgs y);
    public static bool op_Inequality(ContentSiteRequestedStateChangedEventArgs x, ContentSiteRequestedStateChangedEventArgs y);
    public sealed virtual bool Equals(ContentSiteRequestedStateChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_DidRequestedSizeChange();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.ContentSiteView")]
[ContentSiteViewRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IContentSiteView")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.ContentSiteView : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteView;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteViewFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteView { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteViewFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Vector2 ActualSize { get; }
    public SizeInt32 ClientSize { get; }
    public ContentCoordinateConverter CoordinateConverter { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ContentSiteEnvironmentView EnvironmentView { get; }
    public bool IsConnected { get; }
    public bool IsSiteEnabled { get; }
    public bool IsSiteVisible { get; }
    public ContentLayoutDirection LayoutDirection { get; }
    public float OverrideScale { get; }
    public float ParentScale { get; }
    public float RasterizationScale { get; }
    public Vector2 RequestedSize { get; }
    public bool ShouldApplyRasterizationScale { get; }
    protected internal ContentSiteView(IObjectReference objRef);
    protected ContentSiteView(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentSiteView();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteView();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteViewFactory();
    public static ContentSiteView FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContentSiteView x, ContentSiteView y);
    public static bool op_Inequality(ContentSiteView x, ContentSiteView y);
    public sealed virtual bool Equals(ContentSiteView other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Vector2 get_ActualSize();
    public SizeInt32 get_ClientSize();
    public ContentCoordinateConverter get_CoordinateConverter();
    public DispatcherQueue get_DispatcherQueue();
    public ContentSiteEnvironmentView get_EnvironmentView();
    public bool get_IsConnected();
    public bool get_IsSiteEnabled();
    public bool get_IsSiteVisible();
    public ContentLayoutDirection get_LayoutDirection();
    public float get_OverrideScale();
    public float get_ParentScale();
    public float get_RasterizationScale();
    public Vector2 get_RequestedSize();
    public bool get_ShouldApplyRasterizationScale();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Content.ContentSizePolicy>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Content.ContentSizePolicy : Enum {
    public int value__;
    public static ContentSizePolicy None;
    public static ContentSizePolicy ResizeContentToParentWindow;
    public static ContentSizePolicy ResizeParentWindowToContent;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.DesktopChildSiteBridge")]
[DesktopChildSiteBridgeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IDesktopChildSiteBridge")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.DesktopChildSiteBridge : DesktopSiteBridge {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IDesktopChildSiteBridgeStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IDesktopChildSiteBridge { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IDesktopChildSiteBridgeStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public ContentSizePolicy ResizePolicy { get; public set; }
    public ContentSiteView SiteView { get; }
    internal DesktopChildSiteBridge(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IDesktopChildSiteBridge();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IDesktopChildSiteBridgeStatics();
    public static DesktopChildSiteBridge Create(Compositor compositor, WindowId parentWindowId);
    public static DesktopChildSiteBridge FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DesktopChildSiteBridge x, DesktopChildSiteBridge y);
    public static bool op_Inequality(DesktopChildSiteBridge x, DesktopChildSiteBridge y);
    public sealed virtual bool Equals(DesktopChildSiteBridge other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public ContentSizePolicy get_ResizePolicy();
    public void set_ResizePolicy(ContentSizePolicy value);
    public ContentSiteView get_SiteView();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.DesktopSiteBridge")]
[DesktopSiteBridgeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Content.IDesktopSiteBridge")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Content.DesktopSiteBridge : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IDesktopSiteBridge;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_IClosableNotifier;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IContentSiteBridge;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IDesktopSiteBridgeFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Content_IDesktopSiteBridgeStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IDesktopSiteBridge { get; }
    private IObjectReference _objRef_global__Microsoft_UI_IClosableNotifier { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Content_IContentSiteBridge { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IDesktopSiteBridgeFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Content_IDesktopSiteBridgeStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public bool IsClosed { get; }
    public bool IsEnabled { get; }
    public bool IsVisible { get; }
    public Nullable`1<ContentLayoutDirection> LayoutDirectionOverride { get; public set; }
    public float OverrideScale { get; public set; }
    public WindowId WindowId { get; }
    protected internal DesktopSiteBridge(IObjectReference objRef);
    protected DesktopSiteBridge(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IDesktopSiteBridge();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IDesktopSiteBridge();
    private IObjectReference Make___objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference get__objRef_global__Microsoft_UI_IClosableNotifier();
    private IObjectReference Make___objRef_global__Microsoft_UI_Content_IContentSiteBridge();
    private IObjectReference get__objRef_global__Microsoft_UI_Content_IContentSiteBridge();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IDesktopSiteBridgeFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Content_IDesktopSiteBridgeStatics();
    public static bool IsSupported();
    public static DesktopSiteBridge FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DesktopSiteBridge x, DesktopSiteBridge y);
    public static bool op_Inequality(DesktopSiteBridge x, DesktopSiteBridge y);
    public sealed virtual bool Equals(DesktopSiteBridge other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Connect(ContentIsland content);
    public void Disable();
    public void Enable();
    public void Hide();
    public void MoveAndResize(RectInt32 rect);
    public void MoveInZOrderAtBottom();
    public void MoveInZOrderAtTop();
    public void MoveInZOrderBelow(WindowId windowId);
    public void Show();
    public sealed virtual void add_Closed(ClosableNotifierHandler value);
    public sealed virtual void remove_Closed(ClosableNotifierHandler value);
    public sealed virtual void add_FrameworkClosed(ClosableNotifierHandler value);
    public sealed virtual void remove_FrameworkClosed(ClosableNotifierHandler value);
    public sealed virtual void Dispose();
    public sealed virtual DispatcherQueue get_DispatcherQueue();
    public sealed virtual bool get_IsClosed();
    public bool get_IsEnabled();
    public bool get_IsVisible();
    public sealed virtual Nullable`1<ContentLayoutDirection> get_LayoutDirectionOverride();
    public sealed virtual void set_LayoutDirectionOverride(Nullable`1<ContentLayoutDirection> value);
    public sealed virtual float get_OverrideScale();
    public sealed virtual void set_OverrideScale(float value);
    public WindowId get_WindowId();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("10A11230-5EB4-5840-A346-570F4A49040F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentCoordinateConverter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentCoordinateConverter {
    [DefaultOverloadAttribute]
[OverloadAttribute("ConvertLocalToScreenWithPoint")]
public abstract virtual PointInt32 ConvertLocalToScreen(Point localPoint);
    [OverloadAttribute("ConvertLocalToScreenWithPoints")]
public abstract virtual PointInt32[] ConvertLocalToScreen(Point[] localPoints);
    [OverloadAttribute("ConvertLocalToScreenWithPointsAndRoundingMode")]
public abstract virtual PointInt32[] ConvertLocalToScreen(Point[] localPoints, ContentCoordinateRoundingMode roundingMode);
    [OverloadAttribute("ConvertLocalToScreenWithRect")]
public abstract virtual RectInt32 ConvertLocalToScreen(Rect localRect);
    [DefaultOverloadAttribute]
[OverloadAttribute("ConvertScreenToLocalWithPoint")]
public abstract virtual Point ConvertScreenToLocal(PointInt32 screenPoint);
    [OverloadAttribute("ConvertScreenToLocalWithPoints")]
public abstract virtual Point[] ConvertScreenToLocal(PointInt32[] screenPoints);
    [OverloadAttribute("ConvertScreenToLocalWithRect")]
public abstract virtual Rect ConvertScreenToLocal(RectInt32 screenRect);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A4B216EE-0E26-56BD-9209-A75CF9D80F27")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentCoordinateConverterFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentCoordinateConverterFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F56374CE-B6DF-5B42-A58F-4E3BB039E3A9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentCoordinateConverterStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentCoordinateConverterStatics {
    public abstract virtual ContentCoordinateConverter CreateForWindowId(WindowId windowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("470529F5-CD93-599B-968E-F8A689BC3A07")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentDeferral")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentDeferral {
    public abstract virtual void Complete();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("76478051-FC80-5EEC-A3F3-62606ABE06B7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgs {
    public string SettingName { get; }
    public abstract virtual string get_SettingName();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8970FA4F-10BA-5F67-970B-8C72BC009B67")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs {
    public bool DidAppWindowIdChange { get; }
    public bool DidDisplayIdChange { get; }
    public abstract virtual bool get_DidAppWindowIdChange();
    public abstract virtual bool get_DidDisplayIdChange();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5B2504BA-361C-50AA-BD6E-4122C6D93889")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIsland")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIsland {
    public Vector2 ActualSize { get; }
    public object AppData { get; public set; }
    public ContentCoordinateConverter CoordinateConverter { get; }
    public IPropertySet CustomProperties { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ContentIslandEnvironment Environment { get; }
    public ulong Id { get; }
    public bool IsConnected { get; }
    public bool IsHitTestVisibleWhenTransparent { get; public set; }
    public bool IsIslandEnabled { get; public set; }
    public bool IsIslandVisible { get; public set; }
    public bool IsSiteEnabled { get; }
    public bool IsSiteVisible { get; }
    public ContentLayoutDirection LayoutDirection { get; }
    public float RasterizationScale { get; }
    public abstract virtual object GetAutomationHostProvider();
    public abstract virtual ContentDeferral GetStateChangeDeferral();
    public abstract virtual void RequestSize(Vector2 size);
    public abstract virtual Vector2 get_ActualSize();
    public abstract virtual object get_AppData();
    public abstract virtual void set_AppData(object value);
    public abstract virtual ContentCoordinateConverter get_CoordinateConverter();
    public abstract virtual IPropertySet get_CustomProperties();
    public abstract virtual DispatcherQueue get_DispatcherQueue();
    public abstract virtual ContentIslandEnvironment get_Environment();
    public abstract virtual ulong get_Id();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsHitTestVisibleWhenTransparent();
    public abstract virtual void set_IsHitTestVisibleWhenTransparent(bool value);
    public abstract virtual bool get_IsIslandEnabled();
    public abstract virtual void set_IsIslandEnabled(bool value);
    public abstract virtual bool get_IsIslandVisible();
    public abstract virtual void set_IsIslandVisible(bool value);
    public abstract virtual bool get_IsSiteEnabled();
    public abstract virtual bool get_IsSiteVisible();
    public abstract virtual ContentLayoutDirection get_LayoutDirection();
    public abstract virtual float get_RasterizationScale();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AutomationProviderRequested(TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AutomationProviderRequested(TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9FE24BED-2B9C-5137-887F-403C94841824")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs {
    public object AutomationProvider { get; public set; }
    public bool Handled { get; public set; }
    public abstract virtual object get_AutomationProvider();
    public abstract virtual void set_AutomationProvider(object value);
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C334236D-DA88-566D-811D-74AEF2EBA978")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIslandEnvironment")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIslandEnvironment {
    public WindowId AppWindowId { get; }
    public DisplayId DisplayId { get; }
    public abstract virtual WindowId get_AppWindowId();
    public abstract virtual DisplayId get_DisplayId();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SettingChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SettingChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("47A782D6-B177-5C1E-BF87-90437DD809D0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIslandEnvironmentFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIslandEnvironmentFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("82383F52-E81A-5EC9-A954-BAC8A931BA7D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIslandFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIslandFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C828EEB2-0C62-5B40-9D48-77C06083C278")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIslandStateChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIslandStateChangedEventArgs {
    public bool DidActualSizeChange { get; }
    public bool DidLayoutDirectionChange { get; }
    public bool DidRasterizationScaleChange { get; }
    public bool DidSiteEnabledChange { get; }
    public bool DidSiteVisibleChange { get; }
    public abstract virtual bool get_DidActualSizeChange();
    public abstract virtual bool get_DidLayoutDirectionChange();
    public abstract virtual bool get_DidRasterizationScaleChange();
    public abstract virtual bool get_DidSiteEnabledChange();
    public abstract virtual bool get_DidSiteVisibleChange();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7B9EB7CC-8C43-5E0A-AB23-AB48628FD223")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentIslandStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentIslandStatics {
    public abstract virtual ContentIsland Create(Visual Root);
    public abstract virtual ContentIsland[] FindAllForCompositor(Compositor compositor);
    public abstract virtual ContentIsland[] FindAllForCurrentThread();
    public abstract virtual ContentIsland GetByVisual(Visual child);
    public abstract virtual ContentIsland GetFromId(ulong id);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("996C60C4-02B2-5EEF-93B0-DD6B1EC2FD7B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSite")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSite {
    public Vector2 ActualSize { get; public set; }
    public SizeInt32 ClientSize { get; public set; }
    public ContentCoordinateConverter CoordinateConverter { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ContentSiteEnvironment Environment { get; }
    public bool IsConnected { get; }
    public bool IsSiteEnabled { get; public set; }
    public bool IsSiteVisible { get; public set; }
    public ContentLayoutDirection LayoutDirection { get; public set; }
    public float OverrideScale { get; public set; }
    public float ParentScale { get; public set; }
    public float RasterizationScale { get; }
    public Vector2 RequestedSize { get; }
    public bool ShouldApplyRasterizationScale { get; public set; }
    public ContentSiteView View { get; }
    public abstract virtual ContentDeferral GetIslandStateChangeDeferral();
    public abstract virtual Vector2 get_ActualSize();
    public abstract virtual void set_ActualSize(Vector2 value);
    public abstract virtual SizeInt32 get_ClientSize();
    public abstract virtual void set_ClientSize(SizeInt32 value);
    public abstract virtual ContentCoordinateConverter get_CoordinateConverter();
    public abstract virtual DispatcherQueue get_DispatcherQueue();
    public abstract virtual ContentSiteEnvironment get_Environment();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsSiteEnabled();
    public abstract virtual void set_IsSiteEnabled(bool value);
    public abstract virtual bool get_IsSiteVisible();
    public abstract virtual void set_IsSiteVisible(bool value);
    public abstract virtual ContentLayoutDirection get_LayoutDirection();
    public abstract virtual void set_LayoutDirection(ContentLayoutDirection value);
    public abstract virtual float get_OverrideScale();
    public abstract virtual void set_OverrideScale(float value);
    public abstract virtual float get_ParentScale();
    public abstract virtual void set_ParentScale(float value);
    public abstract virtual float get_RasterizationScale();
    public abstract virtual Vector2 get_RequestedSize();
    public abstract virtual bool get_ShouldApplyRasterizationScale();
    public abstract virtual void set_ShouldApplyRasterizationScale(bool value);
    public abstract virtual ContentSiteView get_View();
    [CompilerGeneratedAttribute]
public abstract virtual void add_RequestedStateChanged(TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RequestedStateChanged(TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FAAAB99E-A42B-549C-92DF-3B6D6E1E368B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteBridge")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public interface Microsoft.UI.Content.IContentSiteBridge {
    public DispatcherQueue DispatcherQueue { get; }
    public Nullable`1<ContentLayoutDirection> LayoutDirectionOverride { get; public set; }
    public float OverrideScale { get; public set; }
    public abstract virtual DispatcherQueue get_DispatcherQueue();
    public abstract virtual Nullable`1<ContentLayoutDirection> get_LayoutDirectionOverride();
    public abstract virtual void set_LayoutDirectionOverride(Nullable`1<ContentLayoutDirection> value);
    public abstract virtual float get_OverrideScale();
    public abstract virtual void set_OverrideScale(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("685D085D-BE53-55D1-AEC4-BA2273D5468B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteEnvironment")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteEnvironment {
    public WindowId AppWindowId { get; public set; }
    public DisplayId DisplayId { get; public set; }
    public ContentSiteEnvironmentView View { get; }
    public abstract virtual void NotifySettingChanged(string setting);
    public abstract virtual WindowId get_AppWindowId();
    public abstract virtual void set_AppWindowId(WindowId value);
    public abstract virtual DisplayId get_DisplayId();
    public abstract virtual void set_DisplayId(DisplayId value);
    public abstract virtual ContentSiteEnvironmentView get_View();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0BEFA998-CB15-5F16-A4A5-C0ED1674E186")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteEnvironmentFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteEnvironmentFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5B6FE420-0BB3-54DD-8589-786CF02E38F1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteEnvironmentView")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteEnvironmentView {
    public WindowId AppWindowId { get; }
    public DisplayId DisplayId { get; }
    public abstract virtual WindowId get_AppWindowId();
    public abstract virtual DisplayId get_DisplayId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C901EDF2-F184-5A64-8D58-8CF8EFA8B678")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteEnvironmentViewFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteEnvironmentViewFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("72FB98D5-B28A-57F1-91FA-24C014A342C1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1B55FD1D-7292-562B-B4A1-D4DE7972E684")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgs {
    public bool DidRequestedSizeChange { get; }
    public abstract virtual bool get_DidRequestedSizeChange();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2D5D8DD5-358E-5B05-993B-B2666D1786B3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteView")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteView {
    public Vector2 ActualSize { get; }
    public SizeInt32 ClientSize { get; }
    public ContentCoordinateConverter CoordinateConverter { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public ContentSiteEnvironmentView EnvironmentView { get; }
    public bool IsConnected { get; }
    public bool IsSiteEnabled { get; }
    public bool IsSiteVisible { get; }
    public ContentLayoutDirection LayoutDirection { get; }
    public float OverrideScale { get; }
    public float ParentScale { get; }
    public float RasterizationScale { get; }
    public Vector2 RequestedSize { get; }
    public bool ShouldApplyRasterizationScale { get; }
    public abstract virtual Vector2 get_ActualSize();
    public abstract virtual SizeInt32 get_ClientSize();
    public abstract virtual ContentCoordinateConverter get_CoordinateConverter();
    public abstract virtual DispatcherQueue get_DispatcherQueue();
    public abstract virtual ContentSiteEnvironmentView get_EnvironmentView();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsSiteEnabled();
    public abstract virtual bool get_IsSiteVisible();
    public abstract virtual ContentLayoutDirection get_LayoutDirection();
    public abstract virtual float get_OverrideScale();
    public abstract virtual float get_ParentScale();
    public abstract virtual float get_RasterizationScale();
    public abstract virtual Vector2 get_RequestedSize();
    public abstract virtual bool get_ShouldApplyRasterizationScale();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9EFD72F0-63EF-5B6A-A50C-5685BD8100F1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IContentSiteViewFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IContentSiteViewFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("B2F2FF7B-1825-51B0-B80B-7599889C569F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IDesktopChildSiteBridge")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IDesktopChildSiteBridge {
    public ContentSizePolicy ResizePolicy { get; public set; }
    public ContentSiteView SiteView { get; }
    public abstract virtual ContentSizePolicy get_ResizePolicy();
    public abstract virtual void set_ResizePolicy(ContentSizePolicy value);
    public abstract virtual ContentSiteView get_SiteView();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("AB6B82DE-6A47-5DE3-A860-613C8DB679AB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IDesktopChildSiteBridgeStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IDesktopChildSiteBridgeStatics {
    public abstract virtual DesktopChildSiteBridge Create(Compositor compositor, WindowId parentWindowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F0AE8750-905C-50A2-8A12-4545C6245BB4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IDesktopSiteBridge")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IDesktopSiteBridge {
    public bool IsEnabled { get; }
    public bool IsVisible { get; }
    public WindowId WindowId { get; }
    public abstract virtual void Connect(ContentIsland content);
    public abstract virtual void Disable();
    public abstract virtual void Enable();
    public abstract virtual void Hide();
    public abstract virtual void MoveAndResize(RectInt32 rect);
    public abstract virtual void MoveInZOrderAtBottom();
    public abstract virtual void MoveInZOrderAtTop();
    public abstract virtual void MoveInZOrderBelow(WindowId windowId);
    public abstract virtual void Show();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual bool get_IsVisible();
    public abstract virtual WindowId get_WindowId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D94EE1FF-3AF1-54D0-9311-652B29C57C5B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IDesktopSiteBridgeFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IDesktopSiteBridgeFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E0B38DAF-9CD4-50C5-83EE-C76E3CF34EBA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Content.IDesktopSiteBridgeStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Content.IDesktopSiteBridgeStatics {
    public abstract virtual bool IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherExitDeferral")]
[DispatcherExitDeferralRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Dispatching.IDispatcherExitDeferral")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Dispatching.DispatcherExitDeferral : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherExitDeferral { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal DispatcherExitDeferral(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherExitDeferral();
    private static IObjectReference get__objRef_global__Microsoft_UI_Dispatching_DispatcherExitDeferral();
    public static DispatcherExitDeferral FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DispatcherExitDeferral x, DispatcherExitDeferral y);
    public static bool op_Inequality(DispatcherExitDeferral x, DispatcherExitDeferral y);
    public sealed virtual bool Equals(DispatcherExitDeferral other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Complete();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherQueue")]
[DispatcherQueueRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Dispatching.IDispatcherQueue")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Dispatching.DispatcherQueue : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool HasThreadAccess { get; }
    internal DispatcherQueue(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue();
    private IObjectReference Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueue3();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueStatics();
    public static DispatcherQueue GetForCurrentThread();
    public static DispatcherQueue FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DispatcherQueue x, DispatcherQueue y);
    public static bool op_Inequality(DispatcherQueue x, DispatcherQueue y);
    public sealed virtual bool Equals(DispatcherQueue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public DispatcherQueueTimer CreateTimer();
    public bool TryEnqueue(DispatcherQueueHandler callback);
    public bool TryEnqueue(DispatcherQueuePriority priority, DispatcherQueueHandler callback);
    public void add_ShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    public void remove_ShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    public void add_ShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
    public void remove_ShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
    public void EnqueueEventLoopExit();
    public void EnsureSystemDispatcherQueue();
    public void RunEventLoop();
    public void RunEventLoop(DispatcherRunOptions options, DispatcherExitDeferral deferral);
    public void add_FrameworkShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    public void remove_FrameworkShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    public void add_FrameworkShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
    public void remove_FrameworkShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
    public bool get_HasThreadAccess();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherQueueController")]
[DispatcherQueueControllerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Dispatching.IDispatcherQueueController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Dispatching.DispatcherQueueController : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DispatcherQueue DispatcherQueue { get; }
    internal DispatcherQueueController(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController();
    private IObjectReference Make___objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueController2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueControllerStatics();
    public static DispatcherQueueController CreateOnDedicatedThread();
    public static DispatcherQueueController CreateOnCurrentThread();
    public static DispatcherQueueController FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DispatcherQueueController x, DispatcherQueueController y);
    public static bool op_Inequality(DispatcherQueueController x, DispatcherQueueController y);
    public sealed virtual bool Equals(DispatcherQueueController other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public IAsyncAction ShutdownQueueAsync();
    public void ShutdownQueue();
    public DispatcherQueue get_DispatcherQueue();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherQueueHandler")]
[WinRTExposedTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherQueueHandlerWinRTTypeDetails")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Dispatching.DispatcherQueueHandler : MulticastDelegate {
    public DispatcherQueueHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Dispatching.DispatcherQueuePriority>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Dispatching.DispatcherQueuePriority : Enum {
    public int value__;
    public static DispatcherQueuePriority Low;
    public static DispatcherQueuePriority Normal;
    public static DispatcherQueuePriority High;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs")]
[DispatcherQueueShutdownStartingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Dispatching.DispatcherQueueShutdownStartingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueShutdownStartingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal DispatcherQueueShutdownStartingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueShutdownStartingEventArgs();
    public static DispatcherQueueShutdownStartingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DispatcherQueueShutdownStartingEventArgs x, DispatcherQueueShutdownStartingEventArgs y);
    public static bool op_Inequality(DispatcherQueueShutdownStartingEventArgs x, DispatcherQueueShutdownStartingEventArgs y);
    public sealed virtual bool Equals(DispatcherQueueShutdownStartingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Deferral GetDeferral();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
public class Microsoft.UI.Dispatching.DispatcherQueueSynchronizationContext : SynchronizationContext {
    private DispatcherQueue m_dispatcherQueue;
    public DispatcherQueueSynchronizationContext(DispatcherQueue dispatcherQueue);
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    public virtual SynchronizationContext CreateCopy();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.DispatcherQueueTimer")]
[DispatcherQueueTimerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Dispatching.IDispatcherQueueTimer")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Dispatching.DispatcherQueueTimer : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public TimeSpan Interval { get; public set; }
    public bool IsRepeating { get; public set; }
    public bool IsRunning { get; }
    internal DispatcherQueueTimer(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Dispatching_IDispatcherQueueTimer();
    public static DispatcherQueueTimer FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DispatcherQueueTimer x, DispatcherQueueTimer y);
    public static bool op_Inequality(DispatcherQueueTimer x, DispatcherQueueTimer y);
    public sealed virtual bool Equals(DispatcherQueueTimer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Start();
    public void Stop();
    public void add_Tick(TypedEventHandler`2<DispatcherQueueTimer, object> value);
    public void remove_Tick(TypedEventHandler`2<DispatcherQueueTimer, object> value);
    public TimeSpan get_Interval();
    public void set_Interval(TimeSpan value);
    public bool get_IsRepeating();
    public void set_IsRepeating(bool value);
    public bool get_IsRunning();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Dispatching.DispatcherRunOptions>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Dispatching.DispatcherRunOptions : Enum {
    public UInt32 value__;
    public static DispatcherRunOptions None;
    public static DispatcherRunOptions ContinueOnQuit;
    public static DispatcherRunOptions QuitOnlyLocalLoop;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("910B5AAC-3310-563E-8418-F3005579729E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherExitDeferral")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Dispatching.IDispatcherExitDeferral {
    public abstract virtual void Complete();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F6EBF8FA-BE1C-5BF6-A467-73DA28738AE8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueue")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueue {
    public abstract virtual DispatcherQueueTimer CreateTimer();
    [OverloadAttribute("TryEnqueue")]
public abstract virtual bool TryEnqueue(DispatcherQueueHandler callback);
    [OverloadAttribute("TryEnqueueWithPriority")]
public abstract virtual bool TryEnqueue(DispatcherQueuePriority priority, DispatcherQueueHandler callback);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0CF48751-F1AC-59B8-BA52-6CE7A1444D6F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueue2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueue2 {
    public bool HasThreadAccess { get; }
    public abstract virtual bool get_HasThreadAccess();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("14A7A175-5C27-5A35-B079-21960CF764A8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueue3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueue3 {
    public abstract virtual void EnqueueEventLoopExit();
    public abstract virtual void EnsureSystemDispatcherQueue();
    [OverloadAttribute("RunEventLoop")]
public abstract virtual void RunEventLoop();
    [OverloadAttribute("RunEventLoopWithOptions")]
public abstract virtual void RunEventLoop(DispatcherRunOptions options, DispatcherExitDeferral deferral);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameworkShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameworkShutdownCompleted(TypedEventHandler`2<DispatcherQueue, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameworkShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameworkShutdownStarting(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BCE8178D-2183-584C-9E5B-F9366F6AE484")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueueController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueueController {
    public DispatcherQueue DispatcherQueue { get; }
    public abstract virtual IAsyncAction ShutdownQueueAsync();
    public abstract virtual DispatcherQueue get_DispatcherQueue();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4C68EE2A-1CB1-5591-A3A2-9B590B8F8B9A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueueController2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueueController2 {
    public abstract virtual void ShutdownQueue();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F18D6145-722B-593D-BCF2-A61E713F0037")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueueControllerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueueControllerStatics {
    public abstract virtual DispatcherQueueController CreateOnDedicatedThread();
    public abstract virtual DispatcherQueueController CreateOnCurrentThread();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("32519BE5-072B-5660-A70E-8835C9B8157D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueueShutdownStartingEventArgs {
    public abstract virtual Deferral GetDeferral();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CD3382EA-A455-5124-B63A-CA40D34CA23C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueueStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueueStatics {
    public abstract virtual DispatcherQueue GetForCurrentThread();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("AD4D63FD-88FE-541F-AC11-BF2DC1ED2CE5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Dispatching.IDispatcherQueueTimer")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Dispatching.IDispatcherQueueTimer {
    public TimeSpan Interval { get; public set; }
    public bool IsRepeating { get; public set; }
    public bool IsRunning { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual TimeSpan get_Interval();
    public abstract virtual void set_Interval(TimeSpan value);
    public abstract virtual bool get_IsRepeating();
    public abstract virtual void set_IsRepeating(bool value);
    public abstract virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tick(TypedEventHandler`2<DispatcherQueueTimer, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tick(TypedEventHandler`2<DispatcherQueueTimer, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.DisplayId;u8)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.DisplayId,Microsoft.UI.DisplayId>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.DisplayId : ValueType {
    public ulong Value;
    public DisplayId(ulong _Value);
    public static bool op_Equality(DisplayId x, DisplayId y);
    public static bool op_Inequality(DisplayId x, DisplayId y);
    public sealed virtual bool Equals(DisplayId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2989E93B-ED0F-5E79-90F2-EAC592FC6E6A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.IClosableNotifier")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public interface Microsoft.UI.IClosableNotifier {
    public bool IsClosed { get; }
    public abstract virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(ClosableNotifierHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(ClosableNotifierHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameworkClosed(ClosableNotifierHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameworkClosed(ClosableNotifierHandler value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3ADDDCCD-3949-585B-A566-CCB8350DD221")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.IColorHelper")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.IColorHelper {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1D1D85A1-EB63-538A-84F0-019210BC406B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.IColorHelperStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.IColorHelperStatics {
    public abstract virtual Color FromArgb(byte a, byte r, byte g, byte b);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("982A2D93-0EC4-56B7-9C20-0B5C77949066")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.IColorHelperStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.IColorHelperStatics2 {
    public abstract virtual string ToDisplayName(Color color);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8CF15863-8411-5AFD-946C-328E04DA2F2F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.IColors")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.IColors {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8620A5B0-015A-57AC-A3F3-895D0B1269AE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.IColorsStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.IColorsStatics {
    public Color AliceBlue { get; }
    public Color AntiqueWhite { get; }
    public Color Aqua { get; }
    public Color Aquamarine { get; }
    public Color Azure { get; }
    public Color Beige { get; }
    public Color Bisque { get; }
    public Color Black { get; }
    public Color BlanchedAlmond { get; }
    public Color Blue { get; }
    public Color BlueViolet { get; }
    public Color Brown { get; }
    public Color BurlyWood { get; }
    public Color CadetBlue { get; }
    public Color Chartreuse { get; }
    public Color Chocolate { get; }
    public Color Coral { get; }
    public Color CornflowerBlue { get; }
    public Color Cornsilk { get; }
    public Color Crimson { get; }
    public Color Cyan { get; }
    public Color DarkBlue { get; }
    public Color DarkCyan { get; }
    public Color DarkGoldenrod { get; }
    public Color DarkGray { get; }
    public Color DarkGreen { get; }
    public Color DarkKhaki { get; }
    public Color DarkMagenta { get; }
    public Color DarkOliveGreen { get; }
    public Color DarkOrange { get; }
    public Color DarkOrchid { get; }
    public Color DarkRed { get; }
    public Color DarkSalmon { get; }
    public Color DarkSeaGreen { get; }
    public Color DarkSlateBlue { get; }
    public Color DarkSlateGray { get; }
    public Color DarkTurquoise { get; }
    public Color DarkViolet { get; }
    public Color DeepPink { get; }
    public Color DeepSkyBlue { get; }
    public Color DimGray { get; }
    public Color DodgerBlue { get; }
    public Color Firebrick { get; }
    public Color FloralWhite { get; }
    public Color ForestGreen { get; }
    public Color Fuchsia { get; }
    public Color Gainsboro { get; }
    public Color GhostWhite { get; }
    public Color Gold { get; }
    public Color Goldenrod { get; }
    public Color Gray { get; }
    public Color Green { get; }
    public Color GreenYellow { get; }
    public Color Honeydew { get; }
    public Color HotPink { get; }
    public Color IndianRed { get; }
    public Color Indigo { get; }
    public Color Ivory { get; }
    public Color Khaki { get; }
    public Color Lavender { get; }
    public Color LavenderBlush { get; }
    public Color LawnGreen { get; }
    public Color LemonChiffon { get; }
    public Color LightBlue { get; }
    public Color LightCoral { get; }
    public Color LightCyan { get; }
    public Color LightGoldenrodYellow { get; }
    public Color LightGray { get; }
    public Color LightGreen { get; }
    public Color LightPink { get; }
    public Color LightSalmon { get; }
    public Color LightSeaGreen { get; }
    public Color LightSkyBlue { get; }
    public Color LightSlateGray { get; }
    public Color LightSteelBlue { get; }
    public Color LightYellow { get; }
    public Color Lime { get; }
    public Color LimeGreen { get; }
    public Color Linen { get; }
    public Color Magenta { get; }
    public Color Maroon { get; }
    public Color MediumAquamarine { get; }
    public Color MediumBlue { get; }
    public Color MediumOrchid { get; }
    public Color MediumPurple { get; }
    public Color MediumSeaGreen { get; }
    public Color MediumSlateBlue { get; }
    public Color MediumSpringGreen { get; }
    public Color MediumTurquoise { get; }
    public Color MediumVioletRed { get; }
    public Color MidnightBlue { get; }
    public Color MintCream { get; }
    public Color MistyRose { get; }
    public Color Moccasin { get; }
    public Color NavajoWhite { get; }
    public Color Navy { get; }
    public Color OldLace { get; }
    public Color Olive { get; }
    public Color OliveDrab { get; }
    public Color Orange { get; }
    public Color OrangeRed { get; }
    public Color Orchid { get; }
    public Color PaleGoldenrod { get; }
    public Color PaleGreen { get; }
    public Color PaleTurquoise { get; }
    public Color PaleVioletRed { get; }
    public Color PapayaWhip { get; }
    public Color PeachPuff { get; }
    public Color Peru { get; }
    public Color Pink { get; }
    public Color Plum { get; }
    public Color PowderBlue { get; }
    public Color Purple { get; }
    public Color Red { get; }
    public Color RosyBrown { get; }
    public Color RoyalBlue { get; }
    public Color SaddleBrown { get; }
    public Color Salmon { get; }
    public Color SandyBrown { get; }
    public Color SeaGreen { get; }
    public Color SeaShell { get; }
    public Color Sienna { get; }
    public Color Silver { get; }
    public Color SkyBlue { get; }
    public Color SlateBlue { get; }
    public Color SlateGray { get; }
    public Color Snow { get; }
    public Color SpringGreen { get; }
    public Color SteelBlue { get; }
    public Color Tan { get; }
    public Color Teal { get; }
    public Color Thistle { get; }
    public Color Tomato { get; }
    public Color Transparent { get; }
    public Color Turquoise { get; }
    public Color Violet { get; }
    public Color Wheat { get; }
    public Color White { get; }
    public Color WhiteSmoke { get; }
    public Color Yellow { get; }
    public Color YellowGreen { get; }
    public abstract virtual Color get_AliceBlue();
    public abstract virtual Color get_AntiqueWhite();
    public abstract virtual Color get_Aqua();
    public abstract virtual Color get_Aquamarine();
    public abstract virtual Color get_Azure();
    public abstract virtual Color get_Beige();
    public abstract virtual Color get_Bisque();
    public abstract virtual Color get_Black();
    public abstract virtual Color get_BlanchedAlmond();
    public abstract virtual Color get_Blue();
    public abstract virtual Color get_BlueViolet();
    public abstract virtual Color get_Brown();
    public abstract virtual Color get_BurlyWood();
    public abstract virtual Color get_CadetBlue();
    public abstract virtual Color get_Chartreuse();
    public abstract virtual Color get_Chocolate();
    public abstract virtual Color get_Coral();
    public abstract virtual Color get_CornflowerBlue();
    public abstract virtual Color get_Cornsilk();
    public abstract virtual Color get_Crimson();
    public abstract virtual Color get_Cyan();
    public abstract virtual Color get_DarkBlue();
    public abstract virtual Color get_DarkCyan();
    public abstract virtual Color get_DarkGoldenrod();
    public abstract virtual Color get_DarkGray();
    public abstract virtual Color get_DarkGreen();
    public abstract virtual Color get_DarkKhaki();
    public abstract virtual Color get_DarkMagenta();
    public abstract virtual Color get_DarkOliveGreen();
    public abstract virtual Color get_DarkOrange();
    public abstract virtual Color get_DarkOrchid();
    public abstract virtual Color get_DarkRed();
    public abstract virtual Color get_DarkSalmon();
    public abstract virtual Color get_DarkSeaGreen();
    public abstract virtual Color get_DarkSlateBlue();
    public abstract virtual Color get_DarkSlateGray();
    public abstract virtual Color get_DarkTurquoise();
    public abstract virtual Color get_DarkViolet();
    public abstract virtual Color get_DeepPink();
    public abstract virtual Color get_DeepSkyBlue();
    public abstract virtual Color get_DimGray();
    public abstract virtual Color get_DodgerBlue();
    public abstract virtual Color get_Firebrick();
    public abstract virtual Color get_FloralWhite();
    public abstract virtual Color get_ForestGreen();
    public abstract virtual Color get_Fuchsia();
    public abstract virtual Color get_Gainsboro();
    public abstract virtual Color get_GhostWhite();
    public abstract virtual Color get_Gold();
    public abstract virtual Color get_Goldenrod();
    public abstract virtual Color get_Gray();
    public abstract virtual Color get_Green();
    public abstract virtual Color get_GreenYellow();
    public abstract virtual Color get_Honeydew();
    public abstract virtual Color get_HotPink();
    public abstract virtual Color get_IndianRed();
    public abstract virtual Color get_Indigo();
    public abstract virtual Color get_Ivory();
    public abstract virtual Color get_Khaki();
    public abstract virtual Color get_Lavender();
    public abstract virtual Color get_LavenderBlush();
    public abstract virtual Color get_LawnGreen();
    public abstract virtual Color get_LemonChiffon();
    public abstract virtual Color get_LightBlue();
    public abstract virtual Color get_LightCoral();
    public abstract virtual Color get_LightCyan();
    public abstract virtual Color get_LightGoldenrodYellow();
    public abstract virtual Color get_LightGray();
    public abstract virtual Color get_LightGreen();
    public abstract virtual Color get_LightPink();
    public abstract virtual Color get_LightSalmon();
    public abstract virtual Color get_LightSeaGreen();
    public abstract virtual Color get_LightSkyBlue();
    public abstract virtual Color get_LightSlateGray();
    public abstract virtual Color get_LightSteelBlue();
    public abstract virtual Color get_LightYellow();
    public abstract virtual Color get_Lime();
    public abstract virtual Color get_LimeGreen();
    public abstract virtual Color get_Linen();
    public abstract virtual Color get_Magenta();
    public abstract virtual Color get_Maroon();
    public abstract virtual Color get_MediumAquamarine();
    public abstract virtual Color get_MediumBlue();
    public abstract virtual Color get_MediumOrchid();
    public abstract virtual Color get_MediumPurple();
    public abstract virtual Color get_MediumSeaGreen();
    public abstract virtual Color get_MediumSlateBlue();
    public abstract virtual Color get_MediumSpringGreen();
    public abstract virtual Color get_MediumTurquoise();
    public abstract virtual Color get_MediumVioletRed();
    public abstract virtual Color get_MidnightBlue();
    public abstract virtual Color get_MintCream();
    public abstract virtual Color get_MistyRose();
    public abstract virtual Color get_Moccasin();
    public abstract virtual Color get_NavajoWhite();
    public abstract virtual Color get_Navy();
    public abstract virtual Color get_OldLace();
    public abstract virtual Color get_Olive();
    public abstract virtual Color get_OliveDrab();
    public abstract virtual Color get_Orange();
    public abstract virtual Color get_OrangeRed();
    public abstract virtual Color get_Orchid();
    public abstract virtual Color get_PaleGoldenrod();
    public abstract virtual Color get_PaleGreen();
    public abstract virtual Color get_PaleTurquoise();
    public abstract virtual Color get_PaleVioletRed();
    public abstract virtual Color get_PapayaWhip();
    public abstract virtual Color get_PeachPuff();
    public abstract virtual Color get_Peru();
    public abstract virtual Color get_Pink();
    public abstract virtual Color get_Plum();
    public abstract virtual Color get_PowderBlue();
    public abstract virtual Color get_Purple();
    public abstract virtual Color get_Red();
    public abstract virtual Color get_RosyBrown();
    public abstract virtual Color get_RoyalBlue();
    public abstract virtual Color get_SaddleBrown();
    public abstract virtual Color get_Salmon();
    public abstract virtual Color get_SandyBrown();
    public abstract virtual Color get_SeaGreen();
    public abstract virtual Color get_SeaShell();
    public abstract virtual Color get_Sienna();
    public abstract virtual Color get_Silver();
    public abstract virtual Color get_SkyBlue();
    public abstract virtual Color get_SlateBlue();
    public abstract virtual Color get_SlateGray();
    public abstract virtual Color get_Snow();
    public abstract virtual Color get_SpringGreen();
    public abstract virtual Color get_SteelBlue();
    public abstract virtual Color get_Tan();
    public abstract virtual Color get_Teal();
    public abstract virtual Color get_Thistle();
    public abstract virtual Color get_Tomato();
    public abstract virtual Color get_Transparent();
    public abstract virtual Color get_Turquoise();
    public abstract virtual Color get_Violet();
    public abstract virtual Color get_Wheat();
    public abstract virtual Color get_White();
    public abstract virtual Color get_WhiteSmoke();
    public abstract virtual Color get_Yellow();
    public abstract virtual Color get_YellowGreen();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.IconId;u8)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.IconId,Microsoft.UI.IconId>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.IconId : ValueType {
    public ulong Value;
    public IconId(ulong _Value);
    public static bool op_Equality(IconId x, IconId y);
    public static bool op_Inequality(IconId x, IconId y);
    public sealed virtual bool Equals(IconId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.CharacterReceivedEventArgs")]
[CharacterReceivedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.ICharacterReceivedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.CharacterReceivedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool Handled { get; public set; }
    public UInt32 KeyCode { get; }
    public PhysicalKeyStatus KeyStatus { get; }
    internal CharacterReceivedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_ICharacterReceivedEventArgs();
    public static CharacterReceivedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CharacterReceivedEventArgs x, CharacterReceivedEventArgs y);
    public static bool op_Inequality(CharacterReceivedEventArgs x, CharacterReceivedEventArgs y);
    public sealed virtual bool Equals(CharacterReceivedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_Handled();
    public void set_Handled(bool value);
    public UInt32 get_KeyCode();
    public PhysicalKeyStatus get_KeyStatus();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ContextMenuKeyEventArgs")]
[ContextMenuKeyEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IContextMenuKeyEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.ContextMenuKeyEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IContextMenuKeyEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool Handled { get; public set; }
    internal ContextMenuKeyEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IContextMenuKeyEventArgs();
    public static ContextMenuKeyEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContextMenuKeyEventArgs x, ContextMenuKeyEventArgs y);
    public static bool op_Inequality(ContextMenuKeyEventArgs x, ContextMenuKeyEventArgs y);
    public sealed virtual bool Equals(ContextMenuKeyEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_Handled();
    public void set_Handled(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.Input.CrossSlideThresholds;f4;f4;f4;f4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.Input.CrossSlideThresholds,Microsoft.UI.Input.CrossSlideThresholds>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.CrossSlideThresholds : ValueType {
    public float SelectionStart;
    public float SpeedBumpStart;
    public float SpeedBumpEnd;
    public float RearrangeStart;
    public CrossSlideThresholds(float _SelectionStart, float _SpeedBumpStart, float _SpeedBumpEnd, float _RearrangeStart);
    public static bool op_Equality(CrossSlideThresholds x, CrossSlideThresholds y);
    public static bool op_Inequality(CrossSlideThresholds x, CrossSlideThresholds y);
    public sealed virtual bool Equals(CrossSlideThresholds other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.CrossSlidingEventArgs")]
[CrossSlidingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.ICrossSlidingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.CrossSlidingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_ICrossSlidingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CrossSlidingState CrossSlidingState { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    internal CrossSlidingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_ICrossSlidingEventArgs();
    public static CrossSlidingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CrossSlidingEventArgs x, CrossSlidingEventArgs y);
    public static bool op_Inequality(CrossSlidingEventArgs x, CrossSlidingEventArgs y);
    public sealed virtual bool Equals(CrossSlidingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CrossSlidingState get_CrossSlidingState();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.CrossSlidingState>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.CrossSlidingState : Enum {
    public int value__;
    public static CrossSlidingState Started;
    public static CrossSlidingState Dragging;
    public static CrossSlidingState Selecting;
    public static CrossSlidingState SelectSpeedBumping;
    public static CrossSlidingState SpeedBumping;
    public static CrossSlidingState Rearranging;
    public static CrossSlidingState Completed;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.DragDropManager")]
[DragDropManagerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.DragDrop.IDragDropManager")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.DragDrop.DragDropManager : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AreConcurrentOperationsEnabled { get; public set; }
    internal DragDropManager(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManager();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_IDragDropManagerStatics();
    public static DragDropManager GetForIsland(ContentIsland content);
    public static DragDropManager FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DragDropManager x, DragDropManager y);
    public static bool op_Inequality(DragDropManager x, DragDropManager y);
    public sealed virtual bool Equals(DragDropManager other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void add_TargetRequested(TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs> value);
    public void remove_TargetRequested(TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs> value);
    public sealed virtual void Dispose();
    public bool get_AreConcurrentOperationsEnabled();
    public void set_AreConcurrentOperationsEnabled(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.DragDrop.DragDropModifiers>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Input.DragDrop.DragDropModifiers : Enum {
    public UInt32 value__;
    public static DragDropModifiers None;
    public static DragDropModifiers Shift;
    public static DragDropModifiers Control;
    public static DragDropModifiers Alt;
    public static DragDropModifiers LeftButton;
    public static DragDropModifiers MiddleButton;
    public static DragDropModifiers RightButton;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.DragInfo")]
[DragInfoRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.DragDrop.IDragInfo")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.DragDrop.DragInfo : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DataPackageOperation AllowedOperations { get; }
    public DataPackageView Data { get; }
    public DragDropModifiers Modifiers { get; }
    public Point Position { get; }
    internal DragInfo(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_IDragInfo();
    public static DragInfo FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DragInfo x, DragInfo y);
    public static bool op_Inequality(DragInfo x, DragInfo y);
    public sealed virtual bool Equals(DragInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public DataPackageOperation get_AllowedOperations();
    public DataPackageView get_Data();
    public DragDropModifiers get_Modifiers();
    public Point get_Position();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.DragOperation")]
[DragOperationRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.DragDrop.IDragOperation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.DragDrop.DragOperation : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_DragDrop_DragOperation;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_DragOperation { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DataPackageOperation AllowedOperations { get; public set; }
    public DataPackage Data { get; }
    public DragUIContentMode DragUIContentMode { get; public set; }
    internal DragOperation(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_IDragOperation();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_DragOperation();
    public static DragOperation FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DragOperation x, DragOperation y);
    public static bool op_Inequality(DragOperation x, DragOperation y);
    public sealed virtual bool Equals(DragOperation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void SetDragUIContentFromSoftwareBitmap(SoftwareBitmap bitmap);
    public void SetDragUIContentFromSoftwareBitmap(SoftwareBitmap bitmap, Point anchorPoint);
    public IAsyncOperation`1<DataPackageOperation> StartAsync(DragDropManager initialTarget, PointerPoint initialPointerPoint);
    public sealed virtual void Dispose();
    public DataPackageOperation get_AllowedOperations();
    public void set_AllowedOperations(DataPackageOperation value);
    public DataPackage get_Data();
    public DragUIContentMode get_DragUIContentMode();
    public void set_DragUIContentMode(DragUIContentMode value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.DragDrop.DragUIContentMode>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Input.DragDrop.DragUIContentMode : Enum {
    public int value__;
    public static DragUIContentMode Auto;
    public static DragUIContentMode Deferred;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.DragUIOverride")]
[DragUIOverrideRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.DragDrop.IDragUIOverride")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.DragDrop.DragUIOverride : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Caption { get; public set; }
    public bool IsCaptionVisible { get; public set; }
    public bool IsContentVisible { get; public set; }
    public bool IsGlyphVisible { get; public set; }
    internal DragUIOverride(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_IDragUIOverride();
    public static DragUIOverride FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DragUIOverride x, DragUIOverride y);
    public static bool op_Inequality(DragUIOverride x, DragUIOverride y);
    public sealed virtual bool Equals(DragUIOverride other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Clear();
    public void SetContentFromSoftwareBitmap(SoftwareBitmap bitmap);
    public void SetContentFromSoftwareBitmap(SoftwareBitmap bitmap, Point anchorPoint);
    public string get_Caption();
    public void set_Caption(string value);
    public bool get_IsCaptionVisible();
    public void set_IsCaptionVisible(bool value);
    public bool get_IsContentVisible();
    public void set_IsContentVisible(bool value);
    public bool get_IsGlyphVisible();
    public void set_IsGlyphVisible(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs")]
[DropOperationTargetRequestedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.DragDrop.DropOperationTargetRequestedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_DragDrop_IDropOperationTargetRequestedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal DropOperationTargetRequestedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_DragDrop_IDropOperationTargetRequestedEventArgs();
    public static DropOperationTargetRequestedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DropOperationTargetRequestedEventArgs x, DropOperationTargetRequestedEventArgs y);
    public static bool op_Inequality(DropOperationTargetRequestedEventArgs x, DropOperationTargetRequestedEventArgs y);
    public sealed virtual bool Equals(DropOperationTargetRequestedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void SetTarget(IDropOperationTarget target);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4FEA9EFC-B073-5FBE-9C95-A4113EF6393F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDragDropManager")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.DragDrop.IDragDropManager {
    public bool AreConcurrentOperationsEnabled { get; public set; }
    public abstract virtual bool get_AreConcurrentOperationsEnabled();
    public abstract virtual void set_AreConcurrentOperationsEnabled(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetRequested(TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetRequested(TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5587C863-57D7-5D0F-8EA9-E5DCF06A0F83")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDragDropManagerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.DragDrop.IDragDropManagerStatics {
    public abstract virtual DragDropManager GetForIsland(ContentIsland content);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7507D891-62A8-5A79-A880-AC7353D001EC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDragInfo")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.DragDrop.IDragInfo {
    public DataPackageOperation AllowedOperations { get; }
    public DataPackageView Data { get; }
    public DragDropModifiers Modifiers { get; }
    public Point Position { get; }
    public abstract virtual DataPackageOperation get_AllowedOperations();
    public abstract virtual DataPackageView get_Data();
    public abstract virtual DragDropModifiers get_Modifiers();
    public abstract virtual Point get_Position();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EF122288-7984-53D3-8488-133DCD3DE793")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDragOperation")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.DragDrop.IDragOperation {
    public DataPackageOperation AllowedOperations { get; public set; }
    public DataPackage Data { get; }
    public DragUIContentMode DragUIContentMode { get; public set; }
    [OverloadAttribute("SetDragUIContentFromSoftwareBitmap")]
public abstract virtual void SetDragUIContentFromSoftwareBitmap(SoftwareBitmap bitmap);
    [OverloadAttribute("SetDragUIContentFromSoftwareBitmap2")]
public abstract virtual void SetDragUIContentFromSoftwareBitmap(SoftwareBitmap bitmap, Point anchorPoint);
    public abstract virtual IAsyncOperation`1<DataPackageOperation> StartAsync(DragDropManager initialTarget, PointerPoint initialPointerPoint);
    public abstract virtual DataPackageOperation get_AllowedOperations();
    public abstract virtual void set_AllowedOperations(DataPackageOperation value);
    public abstract virtual DataPackage get_Data();
    public abstract virtual DragUIContentMode get_DragUIContentMode();
    public abstract virtual void set_DragUIContentMode(DragUIContentMode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8432FBAC-A17F-5A95-8F56-FB432280B54D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDragUIOverride")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.DragDrop.IDragUIOverride {
    public string Caption { get; public set; }
    public bool IsCaptionVisible { get; public set; }
    public bool IsContentVisible { get; public set; }
    public bool IsGlyphVisible { get; public set; }
    public abstract virtual void Clear();
    [OverloadAttribute("SetContentFromSoftwareBitmap")]
public abstract virtual void SetContentFromSoftwareBitmap(SoftwareBitmap bitmap);
    [OverloadAttribute("SetContentFromSoftwareBitmap2")]
public abstract virtual void SetContentFromSoftwareBitmap(SoftwareBitmap bitmap, Point anchorPoint);
    public abstract virtual string get_Caption();
    public abstract virtual void set_Caption(string value);
    public abstract virtual bool get_IsCaptionVisible();
    public abstract virtual void set_IsCaptionVisible(bool value);
    public abstract virtual bool get_IsContentVisible();
    public abstract virtual void set_IsContentVisible(bool value);
    public abstract virtual bool get_IsGlyphVisible();
    public abstract virtual void set_IsGlyphVisible(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1C2707D9-0065-53C7-BBFB-50850378CAF3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDropOperationTarget")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public interface Microsoft.UI.Input.DragDrop.IDropOperationTarget {
    public abstract virtual IAsyncOperation`1<DataPackageOperation> DropAsync(DragInfo dragInfo);
    public abstract virtual IAsyncOperation`1<DataPackageOperation> EnterAsync(DragInfo dragInfo, DragUIOverride dragUIOverride);
    public abstract virtual IAsyncAction LeaveAsync(DragInfo dragInfo);
    public abstract virtual IAsyncOperation`1<DataPackageOperation> OverAsync(DragInfo dragInfo, DragUIOverride dragUIOverride);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F61C5B62-720E-59FF-AD0B-E77FC5B8A4A3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.DragDrop.IDropOperationTargetRequestedEventArgs {
    public abstract virtual void SetTarget(IDropOperationTarget target);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.DraggingEventArgs")]
[DraggingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IDraggingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.DraggingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IDraggingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DraggingState DraggingState { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    internal DraggingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IDraggingEventArgs();
    public static DraggingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DraggingEventArgs x, DraggingEventArgs y);
    public static bool op_Inequality(DraggingEventArgs x, DraggingEventArgs y);
    public sealed virtual bool Equals(DraggingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public DraggingState get_DraggingState();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.DraggingState>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.DraggingState : Enum {
    public int value__;
    public static DraggingState Started;
    public static DraggingState Continuing;
    public static DraggingState Completed;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.EnteredMoveSizeEventArgs")]
[EnteredMoveSizeEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IEnteredMoveSizeEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
public class Microsoft.UI.Input.EnteredMoveSizeEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IEnteredMoveSizeEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public MoveSizeOperation MoveSizeOperation { get; }
    public PointInt32 PointerScreenPoint { get; }
    internal EnteredMoveSizeEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IEnteredMoveSizeEventArgs();
    public static EnteredMoveSizeEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EnteredMoveSizeEventArgs x, EnteredMoveSizeEventArgs y);
    public static bool op_Inequality(EnteredMoveSizeEventArgs x, EnteredMoveSizeEventArgs y);
    public sealed virtual bool Equals(EnteredMoveSizeEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public MoveSizeOperation get_MoveSizeOperation();
    public PointInt32 get_PointerScreenPoint();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.EnteringMoveSizeEventArgs")]
[EnteringMoveSizeEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IEnteringMoveSizeEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
public class Microsoft.UI.Input.EnteringMoveSizeEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public MoveSizeOperation MoveSizeOperation { get; }
    public WindowId MoveSizeWindowId { get; public set; }
    public PointInt32 PointerScreenPoint { get; }
    internal EnteringMoveSizeEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IEnteringMoveSizeEventArgs();
    public static EnteringMoveSizeEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EnteringMoveSizeEventArgs x, EnteringMoveSizeEventArgs y);
    public static bool op_Inequality(EnteringMoveSizeEventArgs x, EnteringMoveSizeEventArgs y);
    public sealed virtual bool Equals(EnteringMoveSizeEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public MoveSizeOperation get_MoveSizeOperation();
    public WindowId get_MoveSizeWindowId();
    public void set_MoveSizeWindowId(WindowId value);
    public PointInt32 get_PointerScreenPoint();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ExitedMoveSizeEventArgs")]
[ExitedMoveSizeEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IExitedMoveSizeEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
public class Microsoft.UI.Input.ExitedMoveSizeEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IExitedMoveSizeEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public MoveSizeOperation MoveSizeOperation { get; }
    public PointInt32 PointerScreenPoint { get; }
    internal ExitedMoveSizeEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IExitedMoveSizeEventArgs();
    public static ExitedMoveSizeEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ExitedMoveSizeEventArgs x, ExitedMoveSizeEventArgs y);
    public static bool op_Inequality(ExitedMoveSizeEventArgs x, ExitedMoveSizeEventArgs y);
    public sealed virtual bool Equals(ExitedMoveSizeEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public MoveSizeOperation get_MoveSizeOperation();
    public PointInt32 get_PointerScreenPoint();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.FocusChangedEventArgs")]
[FocusChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IFocusChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.FocusChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IFocusChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool Handled { get; public set; }
    internal FocusChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IFocusChangedEventArgs();
    public static FocusChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(FocusChangedEventArgs x, FocusChangedEventArgs y);
    public static bool op_Inequality(FocusChangedEventArgs x, FocusChangedEventArgs y);
    public sealed virtual bool Equals(FocusChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_Handled();
    public void set_Handled(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.FocusNavigationReason>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
public enum Microsoft.UI.Input.FocusNavigationReason : Enum {
    public int value__;
    public static FocusNavigationReason Programmatic;
    public static FocusNavigationReason Restore;
    public static FocusNavigationReason First;
    public static FocusNavigationReason Last;
    public static FocusNavigationReason Left;
    public static FocusNavigationReason Up;
    public static FocusNavigationReason Right;
    public static FocusNavigationReason Down;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.FocusNavigationRequest")]
[FocusNavigationRequestRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IFocusNavigationRequest")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
public class Microsoft.UI.Input.FocusNavigationRequest : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IFocusNavigationRequest { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Guid CorrelationId { get; }
    public Nullable`1<Rect> HintRect { get; }
    public FocusNavigationReason Reason { get; }
    internal FocusNavigationRequest(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IFocusNavigationRequest();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IFocusNavigationRequestStatics();
    public static FocusNavigationRequest Create(FocusNavigationReason reason);
    public static FocusNavigationRequest Create(FocusNavigationReason reason, Rect hintRect);
    public static FocusNavigationRequest Create(FocusNavigationReason reason, Rect hintRect, Guid correlationId);
    public static FocusNavigationRequest FromAbi(IntPtr thisPtr);
    public static bool op_Equality(FocusNavigationRequest x, FocusNavigationRequest y);
    public static bool op_Inequality(FocusNavigationRequest x, FocusNavigationRequest y);
    public sealed virtual bool Equals(FocusNavigationRequest other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Guid get_CorrelationId();
    public Nullable`1<Rect> get_HintRect();
    public FocusNavigationReason get_Reason();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.FocusNavigationRequestEventArgs")]
[FocusNavigationRequestEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IFocusNavigationRequestEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
public class Microsoft.UI.Input.FocusNavigationRequestEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IFocusNavigationRequestEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public FocusNavigationRequest Request { get; }
    public FocusNavigationResult Result { get; public set; }
    internal FocusNavigationRequestEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IFocusNavigationRequestEventArgs();
    public static FocusNavigationRequestEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(FocusNavigationRequestEventArgs x, FocusNavigationRequestEventArgs y);
    public static bool op_Inequality(FocusNavigationRequestEventArgs x, FocusNavigationRequestEventArgs y);
    public sealed virtual bool Equals(FocusNavigationRequestEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public FocusNavigationRequest get_Request();
    public FocusNavigationResult get_Result();
    public void set_Result(FocusNavigationResult value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.FocusNavigationResult>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
public enum Microsoft.UI.Input.FocusNavigationResult : Enum {
    public int value__;
    public static FocusNavigationResult NotMoved;
    public static FocusNavigationResult Moved;
    public static FocusNavigationResult NoFocusableElements;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.GestureRecognizer")]
[GestureRecognizerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IGestureRecognizer")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.GestureRecognizer : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_GestureRecognizer;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IGestureRecognizer { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_GestureRecognizer { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AutoProcessInertia { get; public set; }
    public bool CrossSlideExact { get; public set; }
    public bool CrossSlideHorizontally { get; public set; }
    public CrossSlideThresholds CrossSlideThresholds { get; public set; }
    public GestureSettings GestureSettings { get; public set; }
    public float InertiaExpansion { get; public set; }
    public float InertiaExpansionDeceleration { get; public set; }
    public float InertiaRotationAngle { get; public set; }
    public float InertiaRotationDeceleration { get; public set; }
    public float InertiaTranslationDeceleration { get; public set; }
    public float InertiaTranslationDisplacement { get; public set; }
    public bool IsActive { get; }
    public bool IsInertial { get; }
    public bool ManipulationExact { get; public set; }
    public MouseWheelParameters MouseWheelParameters { get; }
    public Point PivotCenter { get; public set; }
    public float PivotRadius { get; public set; }
    public bool ShowGestureFeedback { get; public set; }
    internal GestureRecognizer(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IGestureRecognizer();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_GestureRecognizer();
    public static GestureRecognizer FromAbi(IntPtr thisPtr);
    public static bool op_Equality(GestureRecognizer x, GestureRecognizer y);
    public static bool op_Inequality(GestureRecognizer x, GestureRecognizer y);
    public sealed virtual bool Equals(GestureRecognizer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool CanBeDoubleTap(PointerPoint value);
    public void CompleteGesture();
    public void ProcessDownEvent(PointerPoint value);
    public void ProcessMoveEvents(IList`1<PointerPoint> value);
    public void ProcessMouseWheelEvent(PointerPoint value, bool isShiftKeyDown, bool isControlKeyDown);
    public void ProcessInertia();
    public void ProcessUpEvent(PointerPoint value);
    public void add_CrossSliding(TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs> value);
    public void remove_CrossSliding(TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs> value);
    public void add_Dragging(TypedEventHandler`2<GestureRecognizer, DraggingEventArgs> value);
    public void remove_Dragging(TypedEventHandler`2<GestureRecognizer, DraggingEventArgs> value);
    public void add_Holding(TypedEventHandler`2<GestureRecognizer, HoldingEventArgs> value);
    public void remove_Holding(TypedEventHandler`2<GestureRecognizer, HoldingEventArgs> value);
    public void add_ManipulationCompleted(TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs> value);
    public void remove_ManipulationCompleted(TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs> value);
    public void add_ManipulationInertiaStarting(TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs> value);
    public void remove_ManipulationInertiaStarting(TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs> value);
    public void add_ManipulationStarted(TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs> value);
    public void remove_ManipulationStarted(TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs> value);
    public void add_ManipulationUpdated(TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs> value);
    public void remove_ManipulationUpdated(TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs> value);
    public void add_RightTapped(TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs> value);
    public void remove_RightTapped(TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs> value);
    public void add_Tapped(TypedEventHandler`2<GestureRecognizer, TappedEventArgs> value);
    public void remove_Tapped(TypedEventHandler`2<GestureRecognizer, TappedEventArgs> value);
    public bool get_AutoProcessInertia();
    public void set_AutoProcessInertia(bool value);
    public bool get_CrossSlideExact();
    public void set_CrossSlideExact(bool value);
    public bool get_CrossSlideHorizontally();
    public void set_CrossSlideHorizontally(bool value);
    public CrossSlideThresholds get_CrossSlideThresholds();
    public void set_CrossSlideThresholds(CrossSlideThresholds value);
    public GestureSettings get_GestureSettings();
    public void set_GestureSettings(GestureSettings value);
    public float get_InertiaExpansion();
    public void set_InertiaExpansion(float value);
    public float get_InertiaExpansionDeceleration();
    public void set_InertiaExpansionDeceleration(float value);
    public float get_InertiaRotationAngle();
    public void set_InertiaRotationAngle(float value);
    public float get_InertiaRotationDeceleration();
    public void set_InertiaRotationDeceleration(float value);
    public float get_InertiaTranslationDeceleration();
    public void set_InertiaTranslationDeceleration(float value);
    public float get_InertiaTranslationDisplacement();
    public void set_InertiaTranslationDisplacement(float value);
    public bool get_IsActive();
    public bool get_IsInertial();
    public bool get_ManipulationExact();
    public void set_ManipulationExact(bool value);
    public MouseWheelParameters get_MouseWheelParameters();
    public Point get_PivotCenter();
    public void set_PivotCenter(Point value);
    public float get_PivotRadius();
    public void set_PivotRadius(float value);
    public bool get_ShowGestureFeedback();
    public void set_ShowGestureFeedback(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.GestureSettings>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.GestureSettings : Enum {
    public UInt32 value__;
    public static GestureSettings None;
    public static GestureSettings Tap;
    public static GestureSettings DoubleTap;
    public static GestureSettings Hold;
    public static GestureSettings HoldWithMouse;
    public static GestureSettings RightTap;
    public static GestureSettings Drag;
    public static GestureSettings ManipulationTranslateX;
    public static GestureSettings ManipulationTranslateY;
    public static GestureSettings ManipulationTranslateRailsX;
    public static GestureSettings ManipulationTranslateRailsY;
    public static GestureSettings ManipulationRotate;
    public static GestureSettings ManipulationScale;
    public static GestureSettings ManipulationTranslateInertia;
    public static GestureSettings ManipulationRotateInertia;
    public static GestureSettings ManipulationScaleInertia;
    public static GestureSettings CrossSlide;
    public static GestureSettings ManipulationMultipleFingerPanning;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.HoldingEventArgs")]
[HoldingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IHoldingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.HoldingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IHoldingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public HoldingState HoldingState { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    internal HoldingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IHoldingEventArgs();
    public static HoldingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(HoldingEventArgs x, HoldingEventArgs y);
    public static bool op_Inequality(HoldingEventArgs x, HoldingEventArgs y);
    public sealed virtual bool Equals(HoldingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public HoldingState get_HoldingState();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.HoldingState>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.HoldingState : Enum {
    public int value__;
    public static HoldingState Started;
    public static HoldingState Completed;
    public static HoldingState Canceled;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("36122718-9263-592B-8D87-8F86543FFC95")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ICharacterReceivedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.ICharacterReceivedEventArgs {
    public bool Handled { get; public set; }
    public UInt32 KeyCode { get; }
    public PhysicalKeyStatus KeyStatus { get; }
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
    public abstract virtual UInt32 get_KeyCode();
    public abstract virtual PhysicalKeyStatus get_KeyStatus();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F6025762-9426-541A-B647-037ABDBECEFC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IContextMenuKeyEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IContextMenuKeyEventArgs {
    public bool Handled { get; public set; }
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7679641F-BA9F-543C-A7C8-6229A98F89EF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ICrossSlidingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.ICrossSlidingEventArgs {
    public CrossSlidingState CrossSlidingState { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public abstract virtual CrossSlidingState get_CrossSlidingState();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3EFB1B75-3D3B-550E-963D-0828CA76128A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IDraggingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IDraggingEventArgs {
    public DraggingState DraggingState { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public abstract virtual DraggingState get_DraggingState();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("698D28FE-D325-59E0-9834-B10FC2F7BA67")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IEnteredMoveSizeEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.Input.IEnteredMoveSizeEventArgs {
    public MoveSizeOperation MoveSizeOperation { get; }
    public PointInt32 PointerScreenPoint { get; }
    public abstract virtual MoveSizeOperation get_MoveSizeOperation();
    public abstract virtual PointInt32 get_PointerScreenPoint();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("47C083B2-402B-51EC-8836-D48679FEA695")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IEnteringMoveSizeEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.Input.IEnteringMoveSizeEventArgs {
    public MoveSizeOperation MoveSizeOperation { get; }
    public WindowId MoveSizeWindowId { get; public set; }
    public PointInt32 PointerScreenPoint { get; }
    public abstract virtual MoveSizeOperation get_MoveSizeOperation();
    public abstract virtual WindowId get_MoveSizeWindowId();
    public abstract virtual void set_MoveSizeWindowId(WindowId value);
    public abstract virtual PointInt32 get_PointerScreenPoint();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DF12A46E-DAEE-5DAC-A678-D7D5E4D0893A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IExitedMoveSizeEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.Input.IExitedMoveSizeEventArgs {
    public MoveSizeOperation MoveSizeOperation { get; }
    public PointInt32 PointerScreenPoint { get; }
    public abstract virtual MoveSizeOperation get_MoveSizeOperation();
    public abstract virtual PointInt32 get_PointerScreenPoint();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A039B115-DBDF-594C-9B86-DA6AA05C9FA2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IFocusChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IFocusChangedEventArgs {
    public bool Handled { get; public set; }
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6D84BB83-9C84-5112-85E9-8919ACF97262")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IFocusNavigationRequest")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
internal interface Microsoft.UI.Input.IFocusNavigationRequest {
    public Guid CorrelationId { get; }
    public Nullable`1<Rect> HintRect { get; }
    public FocusNavigationReason Reason { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual Nullable`1<Rect> get_HintRect();
    public abstract virtual FocusNavigationReason get_Reason();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("35A63426-E271-59F9-A231-0D190314B415")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IFocusNavigationRequestEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
internal interface Microsoft.UI.Input.IFocusNavigationRequestEventArgs {
    public FocusNavigationRequest Request { get; }
    public FocusNavigationResult Result { get; public set; }
    public abstract virtual FocusNavigationRequest get_Request();
    public abstract virtual FocusNavigationResult get_Result();
    public abstract virtual void set_Result(FocusNavigationResult value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8C4D2ED8-3A63-519E-A827-F57E263BD1FF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IFocusNavigationRequestStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
internal interface Microsoft.UI.Input.IFocusNavigationRequestStatics {
    [OverloadAttribute("Create")]
public abstract virtual FocusNavigationRequest Create(FocusNavigationReason reason);
    [OverloadAttribute("CreateWithHintRect")]
public abstract virtual FocusNavigationRequest Create(FocusNavigationReason reason, Rect hintRect);
    [OverloadAttribute("CreateWithHintRectAndId")]
public abstract virtual FocusNavigationRequest Create(FocusNavigationReason reason, Rect hintRect, Guid correlationId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CDA89AFC-6BD0-595C-BA37-545FCE5BF016")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IGestureRecognizer")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IGestureRecognizer {
    public bool AutoProcessInertia { get; public set; }
    public bool CrossSlideExact { get; public set; }
    public bool CrossSlideHorizontally { get; public set; }
    public CrossSlideThresholds CrossSlideThresholds { get; public set; }
    public GestureSettings GestureSettings { get; public set; }
    public float InertiaExpansion { get; public set; }
    public float InertiaExpansionDeceleration { get; public set; }
    public float InertiaRotationAngle { get; public set; }
    public float InertiaRotationDeceleration { get; public set; }
    public float InertiaTranslationDeceleration { get; public set; }
    public float InertiaTranslationDisplacement { get; public set; }
    public bool IsActive { get; }
    public bool IsInertial { get; }
    public bool ManipulationExact { get; public set; }
    public MouseWheelParameters MouseWheelParameters { get; }
    public Point PivotCenter { get; public set; }
    public float PivotRadius { get; public set; }
    public bool ShowGestureFeedback { get; public set; }
    public abstract virtual bool CanBeDoubleTap(PointerPoint value);
    public abstract virtual void CompleteGesture();
    public abstract virtual void ProcessDownEvent(PointerPoint value);
    public abstract virtual void ProcessMoveEvents(IList`1<PointerPoint> value);
    public abstract virtual void ProcessMouseWheelEvent(PointerPoint value, bool isShiftKeyDown, bool isControlKeyDown);
    public abstract virtual void ProcessInertia();
    public abstract virtual void ProcessUpEvent(PointerPoint value);
    public abstract virtual bool get_AutoProcessInertia();
    public abstract virtual void set_AutoProcessInertia(bool value);
    public abstract virtual bool get_CrossSlideExact();
    public abstract virtual void set_CrossSlideExact(bool value);
    public abstract virtual bool get_CrossSlideHorizontally();
    public abstract virtual void set_CrossSlideHorizontally(bool value);
    public abstract virtual CrossSlideThresholds get_CrossSlideThresholds();
    public abstract virtual void set_CrossSlideThresholds(CrossSlideThresholds value);
    public abstract virtual GestureSettings get_GestureSettings();
    public abstract virtual void set_GestureSettings(GestureSettings value);
    public abstract virtual float get_InertiaExpansion();
    public abstract virtual void set_InertiaExpansion(float value);
    public abstract virtual float get_InertiaExpansionDeceleration();
    public abstract virtual void set_InertiaExpansionDeceleration(float value);
    public abstract virtual float get_InertiaRotationAngle();
    public abstract virtual void set_InertiaRotationAngle(float value);
    public abstract virtual float get_InertiaRotationDeceleration();
    public abstract virtual void set_InertiaRotationDeceleration(float value);
    public abstract virtual float get_InertiaTranslationDeceleration();
    public abstract virtual void set_InertiaTranslationDeceleration(float value);
    public abstract virtual float get_InertiaTranslationDisplacement();
    public abstract virtual void set_InertiaTranslationDisplacement(float value);
    public abstract virtual bool get_IsActive();
    public abstract virtual bool get_IsInertial();
    public abstract virtual bool get_ManipulationExact();
    public abstract virtual void set_ManipulationExact(bool value);
    public abstract virtual MouseWheelParameters get_MouseWheelParameters();
    public abstract virtual Point get_PivotCenter();
    public abstract virtual void set_PivotCenter(Point value);
    public abstract virtual float get_PivotRadius();
    public abstract virtual void set_PivotRadius(float value);
    public abstract virtual bool get_ShowGestureFeedback();
    public abstract virtual void set_ShowGestureFeedback(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CrossSliding(TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CrossSliding(TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dragging(TypedEventHandler`2<GestureRecognizer, DraggingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dragging(TypedEventHandler`2<GestureRecognizer, DraggingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Holding(TypedEventHandler`2<GestureRecognizer, HoldingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Holding(TypedEventHandler`2<GestureRecognizer, HoldingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ManipulationCompleted(TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ManipulationCompleted(TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ManipulationInertiaStarting(TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ManipulationInertiaStarting(TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ManipulationStarted(TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ManipulationStarted(TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ManipulationUpdated(TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ManipulationUpdated(TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RightTapped(TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RightTapped(TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tapped(TypedEventHandler`2<GestureRecognizer, TappedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tapped(TypedEventHandler`2<GestureRecognizer, TappedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8E449E85-D223-533C-B0B2-BF7C6D10C2DB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IHoldingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IHoldingEventArgs {
    public HoldingState HoldingState { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public abstract virtual HoldingState get_HoldingState();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3B818627-6CE7-5E0D-A0F5-6684FD1AEC78")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputActivationListener")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputActivationListener {
    public InputActivationState State { get; }
    public abstract virtual InputActivationState get_State();
    [CompilerGeneratedAttribute]
public abstract virtual void add_InputActivationChanged(TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InputActivationChanged(TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7978526B-00B6-5303-8F7D-55BEF36DA786")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C4249843-F053-5C99-9D51-720ADE94224D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputActivationListenerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputActivationListenerStatics {
    public abstract virtual InputActivationListener GetForWindowId(WindowId windowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7EA26120-9636-5292-A7B1-56544AC51A22")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputActivationListenerStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputActivationListenerStatics2 {
    public abstract virtual InputActivationListener GetForIsland(ContentIsland island);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("359B15F9-19C2-5714-8432-75176826406B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputCursor {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2F47647B-4BE0-53E9-BE7E-C38D5459DB6B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputCursorFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputCursorFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("92F6A552-099F-55FB-8C31-E450284C9643")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputCursorStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputCursorStatics {
    public abstract virtual InputCursor CreateFromCoreCursor(CoreCursor cursor);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5486F042-7E1A-5DC8-8041-E47B609A5BA1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputCustomCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputCustomCursor {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6F402882-66E0-57D3-89D0-AA5E2FF917BC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputCustomCursorFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputCustomCursorFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F40EA93B-0ED7-5B3A-BFE2-14E2B5AD88A3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputDesktopNamedResourceCursor {
    public string ModuleName { get; }
    public string ResourceName { get; }
    public abstract virtual string get_ModuleName();
    public abstract virtual string get_ResourceName();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E8B6D5AA-898B-5E69-B01F-383A0943E3E4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputDesktopNamedResourceCursorStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Input.IInputDesktopNamedResourceCursorStatics {
    public abstract virtual InputDesktopNamedResourceCursor Create(string resourceName);
    public abstract virtual InputDesktopNamedResourceCursor CreateFromModule(string moduleName, string resourceName);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1DF2777F-7C90-58FC-A7A3-D5736C6510FD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputDesktopResourceCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputDesktopResourceCursor {
    public string ModuleName { get; }
    public UInt32 ResourceId { get; }
    public abstract virtual string get_ModuleName();
    public abstract virtual UInt32 get_ResourceId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F440DC37-A0B6-56EB-BCEC-B024F2233D47")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputDesktopResourceCursorStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputDesktopResourceCursorStatics {
    public abstract virtual InputDesktopResourceCursor Create(UInt32 resourceId);
    public abstract virtual InputDesktopResourceCursor CreateFromModule(string moduleName, UInt32 resourceId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8DFDC26C-8B8D-515D-8DDD-4685B3A540E9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputFocusController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputFocusController {
    public bool HasFocus { get; }
    public abstract virtual bool TrySetFocus();
    public abstract virtual bool get_HasFocus();
    [CompilerGeneratedAttribute]
public abstract virtual void add_GotFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GotFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LostFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LostFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5165077C-CD4B-501D-B386-B50682360185")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputFocusController2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
internal interface Microsoft.UI.Input.IInputFocusController2 {
    public abstract virtual FocusNavigationResult DepartFocus(FocusNavigationRequest request);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigateFocusRequested(TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigateFocusRequested(TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("AEB311DA-DA9B-5A1B-92F4-83DDDE933E00")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputFocusControllerStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputFocusControllerStatics {
    public abstract virtual InputFocusController GetForIsland(ContentIsland island);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("53C2A147-932C-5486-A9C6-F6C5A9C65956")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputFocusNavigationHost")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
internal interface Microsoft.UI.Input.IInputFocusNavigationHost {
    public bool ContainsFocus { get; }
    public abstract virtual FocusNavigationResult NavigateFocus(FocusNavigationRequest request);
    public abstract virtual bool get_ContainsFocus();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DepartFocusRequested(TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DepartFocusRequested(TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C9C62CD1-73DB-5AA9-B89D-143509DB8F37")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputFocusNavigationHostStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
internal interface Microsoft.UI.Input.IInputFocusNavigationHostStatics {
    public abstract virtual InputFocusNavigationHost GetForSiteBridge(IContentSiteBridge site);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ED61B906-16AD-5DF7-A550-5E6F7D2229F7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputKeyboardSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputKeyboardSource {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("79D1C9B6-B3C9-5EC2-8A5B-707088787F78")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputKeyboardSource2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputKeyboardSource2 {
    public abstract virtual VirtualKeyStates GetCurrentKeyState(VirtualKey virtualKey);
    public abstract virtual VirtualKeyStates GetKeyState(VirtualKey virtualKey);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CharacterReceived(TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CharacterReceived(TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContextMenuKey(TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContextMenuKey(TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SystemKeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SystemKeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SystemKeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SystemKeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F4E1563D-8C2E-5BCD-B784-47ADEAA3CD7E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputKeyboardSourceStatics {
    public abstract virtual CoreVirtualKeyStates GetKeyStateForCurrentThread(VirtualKey virtualKey);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8857518C-2899-5F11-9B64-0AD83234824B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputKeyboardSourceStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputKeyboardSourceStatics2 {
    public abstract virtual InputKeyboardSource GetForIsland(ContentIsland island);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E8A39502-A860-502F-8C10-3646D43AECF1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputLightDismissAction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputLightDismissAction {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dismissed(TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dismissed(TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ED9B8DEF-6496-5169-984D-D44B4E690623")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputLightDismissActionStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputLightDismissActionStatics {
    public abstract virtual InputLightDismissAction GetForWindowId(WindowId windowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("078660EE-07CA-5808-B982-E6E899CF098C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputLightDismissEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputLightDismissEventArgs {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("471732B4-3D07-5104-B192-EBACF71E86DF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputNonClientPointerSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputNonClientPointerSource {
    public DispatcherQueue DispatcherQueue { get; }
    public abstract virtual void ClearAllRegionRects();
    public abstract virtual void ClearRegionRects(NonClientRegionKind region);
    public abstract virtual RectInt32[] GetRegionRects(NonClientRegionKind region);
    public abstract virtual void SetRegionRects(NonClientRegionKind region, RectInt32[] rects);
    public abstract virtual DispatcherQueue get_DispatcherQueue();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CaptionTapped(TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CaptionTapped(TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerEntered(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerEntered(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerExited(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerExited(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerMoved(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerMoved(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerPressed(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerPressed(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerReleased(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerReleased(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegionsChanged(TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegionsChanged(TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DD2B10C4-7DE6-5C1D-B438-06DDC994058F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputNonClientPointerSource2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.Input.IInputNonClientPointerSource2 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_EnteredMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EnteredMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EnteringMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EnteringMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExitedMoveSize(TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExitedMoveSize(TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowRectChanged(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowRectChanged(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowRectChanging(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowRectChanging(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7D0B775C-1903-5DC7-BD2F-7A4B31F0CFF2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputNonClientPointerSourceStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputNonClientPointerSourceStatics {
    public abstract virtual InputNonClientPointerSource GetForWindowId(WindowId windowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("42EDBC88-D386-544D-B1B8-68617FE68282")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputObject {
    public DispatcherQueue DispatcherQueue { get; }
    public abstract virtual DispatcherQueue get_DispatcherQueue();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("F7786BC2-B0B8-5961-9A57-AE199D452106")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputObjectFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputObjectFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6A6C2764-C3F4-5BE5-8447-C9A98766C240")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputPointerSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputPointerSource {
    public InputCursor Cursor { get; public set; }
    public InputPointerSourceDeviceKinds DeviceKinds { get; }
    public abstract virtual InputCursor get_Cursor();
    public abstract virtual void set_Cursor(InputCursor value);
    public abstract virtual InputPointerSourceDeviceKinds get_DeviceKinds();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerCaptureLost(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerCaptureLost(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerEntered(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerEntered(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerExited(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerExited(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerMoved(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerMoved(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerPressed(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerPressed(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerRoutedAway(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerRoutedAway(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerRoutedReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerRoutedReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerRoutedTo(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerRoutedTo(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PointerWheelChanged(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PointerWheelChanged(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("E8A19FD1-A914-533F-9B0F-6BF0065E6781")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputPointerSourceStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputPointerSourceStatics {
    public abstract virtual InputPointerSource GetForIsland(ContentIsland island);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2F327FEB-B7E7-5E37-A0CC-37DCABE76588")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputPreTranslateKeyboardSource {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("23D584D2-AF8C-5A8A-806F-2BA9C5B1A5EC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IInputPreTranslateKeyboardSourceStatics {
    public abstract virtual InputPreTranslateKeyboardSource GetForIsland(ContentIsland island);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("59F538E7-C500-59AB-8B54-0BC6100FD49E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputSystemCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputSystemCursor {
    public InputSystemCursorShape CursorShape { get; }
    public abstract virtual InputSystemCursorShape get_CursorShape();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D3860BB6-698A-5814-AEDD-C2FA8BBA5A02")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IInputSystemCursorStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IInputSystemCursorStatics {
    public abstract virtual InputSystemCursor Create(InputSystemCursorShape type);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("40D5BB74-977E-5194-8039-9F6C44427BBB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IKeyEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.IKeyEventArgs {
    public bool Handled { get; public set; }
    public PhysicalKeyStatus KeyStatus { get; }
    public ulong Timestamp { get; }
    public VirtualKey VirtualKey { get; }
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
    public abstract virtual PhysicalKeyStatus get_KeyStatus();
    public abstract virtual ulong get_Timestamp();
    public abstract virtual VirtualKey get_VirtualKey();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0E0249D4-46E4-5559-AEE3-FA45CE2A7F56")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IManipulationCompletedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IManipulationCompletedEventArgs {
    public ManipulationDelta Cumulative { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public ManipulationVelocities Velocities { get; }
    public abstract virtual ManipulationDelta get_Cumulative();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
    public abstract virtual ManipulationVelocities get_Velocities();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ACF9EF71-6E15-56AB-9260-F0D3CE5F66E8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IManipulationInertiaStartingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IManipulationInertiaStartingEventArgs {
    public ManipulationDelta Cumulative { get; }
    public ManipulationDelta Delta { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public ManipulationVelocities Velocities { get; }
    public abstract virtual ManipulationDelta get_Cumulative();
    public abstract virtual ManipulationDelta get_Delta();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
    public abstract virtual ManipulationVelocities get_Velocities();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("4A616613-EEF1-5F1B-A768-0775478D49D4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IManipulationStartedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IManipulationStartedEventArgs {
    public ManipulationDelta Cumulative { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public abstract virtual ManipulationDelta get_Cumulative();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("406E1961-0C98-5FC0-B3D8-116492EF0053")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IManipulationUpdatedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IManipulationUpdatedEventArgs {
    public ManipulationDelta Cumulative { get; }
    public ManipulationDelta Delta { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public ManipulationVelocities Velocities { get; }
    public abstract virtual ManipulationDelta get_Cumulative();
    public abstract virtual ManipulationDelta get_Delta();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
    public abstract virtual ManipulationVelocities get_Velocities();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6D98BE40-1D56-51D1-AA0D-F325439CD009")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IMouseWheelParameters")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IMouseWheelParameters {
    public Point CharTranslation { get; public set; }
    public float DeltaRotationAngle { get; public set; }
    public float DeltaScale { get; public set; }
    public Point PageTranslation { get; public set; }
    public abstract virtual Point get_CharTranslation();
    public abstract virtual void set_CharTranslation(Point value);
    public abstract virtual float get_DeltaRotationAngle();
    public abstract virtual void set_DeltaRotationAngle(float value);
    public abstract virtual float get_DeltaScale();
    public abstract virtual void set_DeltaScale(float value);
    public abstract virtual Point get_PageTranslation();
    public abstract virtual void set_PageTranslation(Point value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3D173531-991F-5753-B7E0-14A121C3CD2D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.INonClientCaptionTappedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.INonClientCaptionTappedEventArgs {
    public Point Point { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public abstract virtual Point get_Point();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A5B44AEC-B797-505A-A129-AE4E5271C73C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.INonClientPointerEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.INonClientPointerEventArgs {
    public bool IsPointInRegion { get; }
    public Point Point { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public NonClientRegionKind RegionKind { get; }
    public abstract virtual bool get_IsPointInRegion();
    public abstract virtual Point get_Point();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual NonClientRegionKind get_RegionKind();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FE97EE95-1824-51B2-B8EB-10FF0665CE23")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.INonClientRegionsChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Input.INonClientRegionsChangedEventArgs {
    public NonClientRegionKind[] ChangedRegions { get; }
    public abstract virtual NonClientRegionKind[] get_ChangedRegions();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputActivationListener")]
[InputActivationListenerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputActivationListener")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public class Microsoft.UI.Input.InputActivationListener : InputObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListener { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public InputActivationState State { get; }
    internal InputActivationListener(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputActivationListener();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics();
    public static InputActivationListener GetForWindowId(WindowId windowId);
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputActivationListenerStatics2();
    public static InputActivationListener GetForIsland(ContentIsland island);
    public static InputActivationListener FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputActivationListener x, InputActivationListener y);
    public static bool op_Inequality(InputActivationListener x, InputActivationListener y);
    public sealed virtual bool Equals(InputActivationListener other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void add_InputActivationChanged(TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs> value);
    public void remove_InputActivationChanged(TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs> value);
    public InputActivationState get_State();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs")]
[InputActivationListenerActivationChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputActivationListenerActivationChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public class Microsoft.UI.Input.InputActivationListenerActivationChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputActivationListenerActivationChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal InputActivationListenerActivationChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputActivationListenerActivationChangedEventArgs();
    public static InputActivationListenerActivationChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputActivationListenerActivationChangedEventArgs x, InputActivationListenerActivationChangedEventArgs y);
    public static bool op_Inequality(InputActivationListenerActivationChangedEventArgs x, InputActivationListenerActivationChangedEventArgs y);
    public sealed virtual bool Equals(InputActivationListenerActivationChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.InputActivationState>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public enum Microsoft.UI.Input.InputActivationState : Enum {
    public int value__;
    public static InputActivationState None;
    public static InputActivationState Deactivated;
    public static InputActivationState Activated;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputCursor")]
[InputCursorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputCursor : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputCursor;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputCursorFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputCursorStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputCursor { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputCursorFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputCursorStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    protected internal InputCursor(IObjectReference objRef);
    protected InputCursor(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputCursor();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputCursor();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputCursorFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputCursorStatics();
    public static InputCursor CreateFromCoreCursor(CoreCursor cursor);
    public static InputCursor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputCursor x, InputCursor y);
    public static bool op_Inequality(InputCursor x, InputCursor y);
    public sealed virtual bool Equals(InputCursor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputCustomCursor")]
[InputCustomCursorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputCustomCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public class Microsoft.UI.Input.InputCustomCursor : InputCursor {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputCustomCursor;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputCustomCursor { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    protected internal InputCustomCursor(IObjectReference objRef);
    protected InputCustomCursor(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputCustomCursor();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputCustomCursor();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputCustomCursorFactory();
    public static InputCustomCursor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputCustomCursor x, InputCustomCursor y);
    public static bool op_Inequality(InputCustomCursor x, InputCustomCursor y);
    public sealed virtual bool Equals(InputCustomCursor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputDesktopNamedResourceCursor")]
[InputDesktopNamedResourceCursorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputDesktopNamedResourceCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public class Microsoft.UI.Input.InputDesktopNamedResourceCursor : InputCursor {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursor { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public string ModuleName { get; }
    public string ResourceName { get; }
    internal InputDesktopNamedResourceCursor(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursor();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputDesktopNamedResourceCursorStatics();
    public static InputDesktopNamedResourceCursor Create(string resourceName);
    public static InputDesktopNamedResourceCursor CreateFromModule(string moduleName, string resourceName);
    public static InputDesktopNamedResourceCursor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputDesktopNamedResourceCursor x, InputDesktopNamedResourceCursor y);
    public static bool op_Inequality(InputDesktopNamedResourceCursor x, InputDesktopNamedResourceCursor y);
    public sealed virtual bool Equals(InputDesktopNamedResourceCursor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public string get_ModuleName();
    public string get_ResourceName();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputDesktopResourceCursor")]
[InputDesktopResourceCursorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputDesktopResourceCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputDesktopResourceCursor : InputCursor {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursor { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public string ModuleName { get; }
    public UInt32 ResourceId { get; }
    internal InputDesktopResourceCursor(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursor();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputDesktopResourceCursorStatics();
    public static InputDesktopResourceCursor Create(UInt32 resourceId);
    public static InputDesktopResourceCursor CreateFromModule(string moduleName, UInt32 resourceId);
    public static InputDesktopResourceCursor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputDesktopResourceCursor x, InputDesktopResourceCursor y);
    public static bool op_Inequality(InputDesktopResourceCursor x, InputDesktopResourceCursor y);
    public sealed virtual bool Equals(InputDesktopResourceCursor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public string get_ModuleName();
    public UInt32 get_ResourceId();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputFocusController")]
[InputFocusControllerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputFocusController")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.InputFocusController : InputObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputFocusController2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusController { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusController2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public bool HasFocus { get; }
    internal InputFocusController(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputFocusController();
    private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputFocusController2();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputFocusController2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputFocusControllerStatics();
    public static InputFocusController GetForIsland(ContentIsland island);
    public static InputFocusController FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputFocusController x, InputFocusController y);
    public static bool op_Inequality(InputFocusController x, InputFocusController y);
    public sealed virtual bool Equals(InputFocusController other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public bool TrySetFocus();
    public void add_GotFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    public void remove_GotFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    public void add_LostFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    public void remove_LostFocus(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> value);
    public FocusNavigationResult DepartFocus(FocusNavigationRequest request);
    public void add_NavigateFocusRequested(TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs> value);
    public void remove_NavigateFocusRequested(TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs> value);
    public bool get_HasFocus();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputFocusNavigationHost")]
[InputFocusNavigationHostRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputFocusNavigationHost")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65541")]
public class Microsoft.UI.Input.InputFocusNavigationHost : InputObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public bool ContainsFocus { get; }
    internal InputFocusNavigationHost(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputFocusNavigationHost();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputFocusNavigationHostStatics();
    public static InputFocusNavigationHost GetForSiteBridge(IContentSiteBridge site);
    public static InputFocusNavigationHost FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputFocusNavigationHost x, InputFocusNavigationHost y);
    public static bool op_Inequality(InputFocusNavigationHost x, InputFocusNavigationHost y);
    public sealed virtual bool Equals(InputFocusNavigationHost other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public FocusNavigationResult NavigateFocus(FocusNavigationRequest request);
    public void add_DepartFocusRequested(TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs> value);
    public void remove_DepartFocusRequested(TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs> value);
    public bool get_ContainsFocus();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputKeyboardSource")]
[InputKeyboardSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputKeyboardSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputKeyboardSource : InputObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSource { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSource2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal InputKeyboardSource(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputKeyboardSource();
    private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputKeyboardSource2();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputKeyboardSource2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics();
    public static CoreVirtualKeyStates GetKeyStateForCurrentThread(VirtualKey virtualKey);
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputKeyboardSourceStatics2();
    public static InputKeyboardSource GetForIsland(ContentIsland island);
    public static InputKeyboardSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputKeyboardSource x, InputKeyboardSource y);
    public static bool op_Inequality(InputKeyboardSource x, InputKeyboardSource y);
    public sealed virtual bool Equals(InputKeyboardSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public VirtualKeyStates GetCurrentKeyState(VirtualKey virtualKey);
    public VirtualKeyStates GetKeyState(VirtualKey virtualKey);
    public void add_CharacterReceived(TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs> value);
    public void remove_CharacterReceived(TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs> value);
    public void add_ContextMenuKey(TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs> value);
    public void remove_ContextMenuKey(TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs> value);
    public void add_KeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void remove_KeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void add_KeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void remove_KeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void add_SystemKeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void remove_SystemKeyDown(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void add_SystemKeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    public void remove_SystemKeyUp(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputLightDismissAction")]
[InputLightDismissActionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputLightDismissAction")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputLightDismissAction : InputObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissAction { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal InputLightDismissAction(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputLightDismissAction();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputLightDismissActionStatics();
    public static InputLightDismissAction GetForWindowId(WindowId windowId);
    public static InputLightDismissAction FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputLightDismissAction x, InputLightDismissAction y);
    public static bool op_Inequality(InputLightDismissAction x, InputLightDismissAction y);
    public sealed virtual bool Equals(InputLightDismissAction other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void add_Dismissed(TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs> value);
    public void remove_Dismissed(TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs> value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputLightDismissEventArgs")]
[InputLightDismissEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputLightDismissEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputLightDismissEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputLightDismissEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal InputLightDismissEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputLightDismissEventArgs();
    public static InputLightDismissEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputLightDismissEventArgs x, InputLightDismissEventArgs y);
    public static bool op_Inequality(InputLightDismissEventArgs x, InputLightDismissEventArgs y);
    public sealed virtual bool Equals(InputLightDismissEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputNonClientPointerSource")]
[InputNonClientPointerSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputNonClientPointerSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.InputNonClientPointerSource : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DispatcherQueue DispatcherQueue { get; }
    internal InputNonClientPointerSource(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource();
    private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputNonClientPointerSource2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputNonClientPointerSourceStatics();
    public static InputNonClientPointerSource GetForWindowId(WindowId windowId);
    public static InputNonClientPointerSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputNonClientPointerSource x, InputNonClientPointerSource y);
    public static bool op_Inequality(InputNonClientPointerSource x, InputNonClientPointerSource y);
    public sealed virtual bool Equals(InputNonClientPointerSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void ClearAllRegionRects();
    public void ClearRegionRects(NonClientRegionKind region);
    public RectInt32[] GetRegionRects(NonClientRegionKind region);
    public void SetRegionRects(NonClientRegionKind region, RectInt32[] rects);
    public void add_CaptionTapped(TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> value);
    public void remove_CaptionTapped(TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> value);
    public void add_PointerEntered(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void remove_PointerEntered(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void add_PointerExited(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void remove_PointerExited(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void add_PointerMoved(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void remove_PointerMoved(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void add_PointerPressed(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void remove_PointerPressed(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void add_PointerReleased(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void remove_PointerReleased(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> value);
    public void add_RegionsChanged(TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> value);
    public void remove_RegionsChanged(TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> value);
    public void add_EnteredMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs> value);
    public void remove_EnteredMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs> value);
    public void add_EnteringMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs> value);
    public void remove_EnteringMoveSize(TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs> value);
    public void add_ExitedMoveSize(TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs> value);
    public void remove_ExitedMoveSize(TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs> value);
    public void add_WindowRectChanged(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs> value);
    public void remove_WindowRectChanged(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs> value);
    public void add_WindowRectChanging(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs> value);
    public void remove_WindowRectChanging(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs> value);
    public DispatcherQueue get_DispatcherQueue();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputObject")]
[InputObjectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputObject")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputObject : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputObject;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputObjectFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputObject { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputObjectFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DispatcherQueue DispatcherQueue { get; }
    protected internal InputObject(IObjectReference objRef);
    protected InputObject(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Input_IInputObject();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputObject();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputObjectFactory();
    public static InputObject FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputObject x, InputObject y);
    public static bool op_Inequality(InputObject x, InputObject y);
    public sealed virtual bool Equals(InputObject other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public DispatcherQueue get_DispatcherQueue();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputPointerSource")]
[InputPointerSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputPointerSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputPointerSource : InputObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputPointerSource { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public InputCursor Cursor { get; public set; }
    public InputPointerSourceDeviceKinds DeviceKinds { get; }
    internal InputPointerSource(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputPointerSource();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputPointerSourceStatics();
    public static InputPointerSource GetForIsland(ContentIsland island);
    public static InputPointerSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputPointerSource x, InputPointerSource y);
    public static bool op_Inequality(InputPointerSource x, InputPointerSource y);
    public sealed virtual bool Equals(InputPointerSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void add_PointerCaptureLost(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerCaptureLost(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerEntered(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerEntered(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerExited(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerExited(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerMoved(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerMoved(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerPressed(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerPressed(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerRoutedAway(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerRoutedAway(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerRoutedReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerRoutedReleased(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerRoutedTo(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerRoutedTo(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void add_PointerWheelChanged(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public void remove_PointerWheelChanged(TypedEventHandler`2<InputPointerSource, PointerEventArgs> value);
    public InputCursor get_Cursor();
    public void set_Cursor(InputCursor value);
    public InputPointerSourceDeviceKinds get_DeviceKinds();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.InputPointerSourceDeviceKinds>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.InputPointerSourceDeviceKinds : Enum {
    public UInt32 value__;
    public static InputPointerSourceDeviceKinds None;
    public static InputPointerSourceDeviceKinds Touch;
    public static InputPointerSourceDeviceKinds Pen;
    public static InputPointerSourceDeviceKinds Mouse;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputPreTranslateKeyboardSource")]
[InputPreTranslateKeyboardSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputPreTranslateKeyboardSource")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.InputPreTranslateKeyboardSource : InputObject {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSource { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal InputPreTranslateKeyboardSource(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSource();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputPreTranslateKeyboardSourceStatics();
    public static InputPreTranslateKeyboardSource GetForIsland(ContentIsland island);
    public static InputPreTranslateKeyboardSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputPreTranslateKeyboardSource x, InputPreTranslateKeyboardSource y);
    public static bool op_Inequality(InputPreTranslateKeyboardSource x, InputPreTranslateKeyboardSource y);
    public sealed virtual bool Equals(InputPreTranslateKeyboardSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.InputSystemCursor")]
[InputSystemCursorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IInputSystemCursor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.InputSystemCursor : InputCursor {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IInputSystemCursor { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public InputSystemCursorShape CursorShape { get; }
    internal InputSystemCursor(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IInputSystemCursor();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IInputSystemCursorStatics();
    public static InputSystemCursor Create(InputSystemCursorShape type);
    public static InputSystemCursor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InputSystemCursor x, InputSystemCursor y);
    public static bool op_Inequality(InputSystemCursor x, InputSystemCursor y);
    public sealed virtual bool Equals(InputSystemCursor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public InputSystemCursorShape get_CursorShape();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.InputSystemCursorShape>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.InputSystemCursorShape : Enum {
    public int value__;
    public static InputSystemCursorShape Arrow;
    public static InputSystemCursorShape Cross;
    public static InputSystemCursorShape Hand;
    public static InputSystemCursorShape Help;
    public static InputSystemCursorShape IBeam;
    public static InputSystemCursorShape SizeAll;
    public static InputSystemCursorShape SizeNortheastSouthwest;
    public static InputSystemCursorShape SizeNorthSouth;
    public static InputSystemCursorShape SizeNorthwestSoutheast;
    public static InputSystemCursorShape SizeWestEast;
    public static InputSystemCursorShape UniversalNo;
    public static InputSystemCursorShape UpArrow;
    public static InputSystemCursorShape Wait;
    public static InputSystemCursorShape Pin;
    public static InputSystemCursorShape Person;
    public static InputSystemCursorShape AppStarting;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("865B188C-2ED5-5DF8-829F-AC0701D5C51A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IPointerEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IPointerEventArgs {
    public PointerPoint CurrentPoint { get; }
    public bool Handled { get; public set; }
    public VirtualKeyModifiers KeyModifiers { get; }
    public abstract virtual IList`1<PointerPoint> GetIntermediatePoints();
    public abstract virtual IList`1<PointerPoint> GetIntermediateTransformedPoints(IPointerPointTransform transform);
    public abstract virtual PointerPoint get_CurrentPoint();
    public abstract virtual bool get_Handled();
    public abstract virtual void set_Handled(bool value);
    public abstract virtual VirtualKeyModifiers get_KeyModifiers();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0D430EE6-252C-59A4-B2A2-D44264DC6A40")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IPointerPoint")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IPointerPoint {
    public UInt32 FrameId { get; }
    public bool IsInContact { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public UInt32 PointerId { get; }
    public Point Position { get; }
    public PointerPointProperties Properties { get; }
    public ulong Timestamp { get; }
    public abstract virtual PointerPoint GetTransformedPoint(IPointerPointTransform transform);
    public abstract virtual UInt32 get_FrameId();
    public abstract virtual bool get_IsInContact();
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual UInt32 get_PointerId();
    public abstract virtual Point get_Position();
    public abstract virtual PointerPointProperties get_Properties();
    public abstract virtual ulong get_Timestamp();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("D760ED77-4B10-57A5-B3CC-D9BF3413E996")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IPointerPointProperties")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IPointerPointProperties {
    public Rect ContactRect { get; }
    public bool IsBarrelButtonPressed { get; }
    public bool IsCanceled { get; }
    public bool IsEraser { get; }
    public bool IsHorizontalMouseWheel { get; }
    public bool IsInRange { get; }
    public bool IsInverted { get; }
    public bool IsLeftButtonPressed { get; }
    public bool IsMiddleButtonPressed { get; }
    public bool IsPrimary { get; }
    public bool IsRightButtonPressed { get; }
    public bool IsXButton1Pressed { get; }
    public bool IsXButton2Pressed { get; }
    public int MouseWheelDelta { get; }
    public float Orientation { get; }
    public PointerUpdateKind PointerUpdateKind { get; }
    public float Pressure { get; }
    public bool TouchConfidence { get; }
    public float Twist { get; }
    public float XTilt { get; }
    public float YTilt { get; }
    public abstract virtual Rect get_ContactRect();
    public abstract virtual bool get_IsBarrelButtonPressed();
    public abstract virtual bool get_IsCanceled();
    public abstract virtual bool get_IsEraser();
    public abstract virtual bool get_IsHorizontalMouseWheel();
    public abstract virtual bool get_IsInRange();
    public abstract virtual bool get_IsInverted();
    public abstract virtual bool get_IsLeftButtonPressed();
    public abstract virtual bool get_IsMiddleButtonPressed();
    public abstract virtual bool get_IsPrimary();
    public abstract virtual bool get_IsRightButtonPressed();
    public abstract virtual bool get_IsXButton1Pressed();
    public abstract virtual bool get_IsXButton2Pressed();
    public abstract virtual int get_MouseWheelDelta();
    public abstract virtual float get_Orientation();
    public abstract virtual PointerUpdateKind get_PointerUpdateKind();
    public abstract virtual float get_Pressure();
    public abstract virtual bool get_TouchConfidence();
    public abstract virtual float get_Twist();
    public abstract virtual float get_XTilt();
    public abstract virtual float get_YTilt();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DB4791BC-994D-54C7-92EF-66EA1DE9B43C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IPointerPointTransform")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public interface Microsoft.UI.Input.IPointerPointTransform {
    public IPointerPointTransform Inverse { get; }
    public abstract virtual bool TryTransform(Point inPoint, Point& outPoint);
    public abstract virtual bool TryTransformBounds(Rect inRect, Rect& outRect);
    public abstract virtual IPointerPointTransform get_Inverse();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("12C100EC-2100-565F-A60C-F1187F438828")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IPointerPredictor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IPointerPredictor {
    public TimeSpan PredictionTime { get; public set; }
    public abstract virtual PointerPoint[] GetPredictedPoints(PointerPoint point);
    public abstract virtual TimeSpan get_PredictionTime();
    public abstract virtual void set_PredictionTime(TimeSpan value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("78A8EF30-3E5C-55CD-8F85-65AC09B1A987")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IPointerPredictorStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IPointerPredictorStatics {
    public abstract virtual PointerPredictor CreateForInputPointerSource(InputPointerSource inputPointerSource);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8FF73B39-887E-50A4-8500-77953039DCB4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IRightTappedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.IRightTappedEventArgs {
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("C3A01BB5-6076-5E0F-871A-9D94A6A8F82B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ITappedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Input.ITappedEventArgs {
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public UInt32 TapCount { get; }
    public abstract virtual PointerDeviceType get_PointerDeviceType();
    public abstract virtual Point get_Position();
    public abstract virtual UInt32 get_TapCount();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("8A885D28-D2D9-5DDA-9848-CDF247771037")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IWindowRectChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.Input.IWindowRectChangedEventArgs {
    public MoveSizeOperation MoveSizeOperation { get; }
    public RectInt32 NewWindowRect { get; }
    public RectInt32 OldWindowRect { get; }
    public PointInt32 PointerScreenPoint { get; }
    public abstract virtual MoveSizeOperation get_MoveSizeOperation();
    public abstract virtual RectInt32 get_NewWindowRect();
    public abstract virtual RectInt32 get_OldWindowRect();
    public abstract virtual PointInt32 get_PointerScreenPoint();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("DB13ED3C-DEBC-5855-8D70-5936FD813457")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.IWindowRectChangingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
internal interface Microsoft.UI.Input.IWindowRectChangingEventArgs {
    public bool AllowRectChange { get; public set; }
    public MoveSizeOperation MoveSizeOperation { get; }
    public RectInt32 NewWindowRect { get; public set; }
    public RectInt32 OldWindowRect { get; }
    public PointInt32 PointerScreenPoint { get; }
    public bool ShowWindow { get; public set; }
    public abstract virtual bool get_AllowRectChange();
    public abstract virtual void set_AllowRectChange(bool value);
    public abstract virtual MoveSizeOperation get_MoveSizeOperation();
    public abstract virtual RectInt32 get_NewWindowRect();
    public abstract virtual void set_NewWindowRect(RectInt32 value);
    public abstract virtual RectInt32 get_OldWindowRect();
    public abstract virtual PointInt32 get_PointerScreenPoint();
    public abstract virtual bool get_ShowWindow();
    public abstract virtual void set_ShowWindow(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.KeyEventArgs")]
[KeyEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IKeyEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.KeyEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IKeyEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool Handled { get; public set; }
    public PhysicalKeyStatus KeyStatus { get; }
    public ulong Timestamp { get; }
    public VirtualKey VirtualKey { get; }
    internal KeyEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IKeyEventArgs();
    public static KeyEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(KeyEventArgs x, KeyEventArgs y);
    public static bool op_Inequality(KeyEventArgs x, KeyEventArgs y);
    public sealed virtual bool Equals(KeyEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_Handled();
    public void set_Handled(bool value);
    public PhysicalKeyStatus get_KeyStatus();
    public ulong get_Timestamp();
    public VirtualKey get_VirtualKey();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ManipulationCompletedEventArgs")]
[ManipulationCompletedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IManipulationCompletedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.ManipulationCompletedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public ManipulationDelta Cumulative { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public ManipulationVelocities Velocities { get; }
    internal ManipulationCompletedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IManipulationCompletedEventArgs();
    public static ManipulationCompletedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ManipulationCompletedEventArgs x, ManipulationCompletedEventArgs y);
    public static bool op_Inequality(ManipulationCompletedEventArgs x, ManipulationCompletedEventArgs y);
    public sealed virtual bool Equals(ManipulationCompletedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ManipulationDelta get_Cumulative();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    public ManipulationVelocities get_Velocities();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.Input.ManipulationDelta;struct(Windows.Foundation.Point;f4;f4);f4;f4;f4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.Input.ManipulationDelta,Microsoft.UI.Input.ManipulationDelta>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.ManipulationDelta : ValueType {
    public Point Translation;
    public float Scale;
    public float Rotation;
    public float Expansion;
    public ManipulationDelta(Point _Translation, float _Scale, float _Rotation, float _Expansion);
    public static bool op_Equality(ManipulationDelta x, ManipulationDelta y);
    public static bool op_Inequality(ManipulationDelta x, ManipulationDelta y);
    public sealed virtual bool Equals(ManipulationDelta other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ManipulationInertiaStartingEventArgs")]
[ManipulationInertiaStartingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IManipulationInertiaStartingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.ManipulationInertiaStartingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public ManipulationDelta Cumulative { get; }
    public ManipulationDelta Delta { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public ManipulationVelocities Velocities { get; }
    internal ManipulationInertiaStartingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IManipulationInertiaStartingEventArgs();
    public static ManipulationInertiaStartingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ManipulationInertiaStartingEventArgs x, ManipulationInertiaStartingEventArgs y);
    public static bool op_Inequality(ManipulationInertiaStartingEventArgs x, ManipulationInertiaStartingEventArgs y);
    public sealed virtual bool Equals(ManipulationInertiaStartingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ManipulationDelta get_Cumulative();
    public ManipulationDelta get_Delta();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    public ManipulationVelocities get_Velocities();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ManipulationStartedEventArgs")]
[ManipulationStartedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IManipulationStartedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.ManipulationStartedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationStartedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public ManipulationDelta Cumulative { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    internal ManipulationStartedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IManipulationStartedEventArgs();
    public static ManipulationStartedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ManipulationStartedEventArgs x, ManipulationStartedEventArgs y);
    public static bool op_Inequality(ManipulationStartedEventArgs x, ManipulationStartedEventArgs y);
    public sealed virtual bool Equals(ManipulationStartedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ManipulationDelta get_Cumulative();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.ManipulationUpdatedEventArgs")]
[ManipulationUpdatedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IManipulationUpdatedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.ManipulationUpdatedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public ManipulationDelta Cumulative { get; }
    public ManipulationDelta Delta { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public ManipulationVelocities Velocities { get; }
    internal ManipulationUpdatedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IManipulationUpdatedEventArgs();
    public static ManipulationUpdatedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ManipulationUpdatedEventArgs x, ManipulationUpdatedEventArgs y);
    public static bool op_Inequality(ManipulationUpdatedEventArgs x, ManipulationUpdatedEventArgs y);
    public sealed virtual bool Equals(ManipulationUpdatedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ManipulationDelta get_Cumulative();
    public ManipulationDelta get_Delta();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    public ManipulationVelocities get_Velocities();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.Input.ManipulationVelocities;struct(Windows.Foundation.Point;f4;f4);f4;f4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.Input.ManipulationVelocities,Microsoft.UI.Input.ManipulationVelocities>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.ManipulationVelocities : ValueType {
    public Point Linear;
    public float Angular;
    public float Expansion;
    public ManipulationVelocities(Point _Linear, float _Angular, float _Expansion);
    public static bool op_Equality(ManipulationVelocities x, ManipulationVelocities y);
    public static bool op_Inequality(ManipulationVelocities x, ManipulationVelocities y);
    public sealed virtual bool Equals(ManipulationVelocities other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.MouseWheelParameters")]
[MouseWheelParametersRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IMouseWheelParameters")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.MouseWheelParameters : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IMouseWheelParameters { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Point CharTranslation { get; public set; }
    public float DeltaRotationAngle { get; public set; }
    public float DeltaScale { get; public set; }
    public Point PageTranslation { get; public set; }
    internal MouseWheelParameters(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IMouseWheelParameters();
    public static MouseWheelParameters FromAbi(IntPtr thisPtr);
    public static bool op_Equality(MouseWheelParameters x, MouseWheelParameters y);
    public static bool op_Inequality(MouseWheelParameters x, MouseWheelParameters y);
    public sealed virtual bool Equals(MouseWheelParameters other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Point get_CharTranslation();
    public void set_CharTranslation(Point value);
    public float get_DeltaRotationAngle();
    public void set_DeltaRotationAngle(float value);
    public float get_DeltaScale();
    public void set_DeltaScale(float value);
    public Point get_PageTranslation();
    public void set_PageTranslation(Point value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.MoveSizeOperation>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
public enum Microsoft.UI.Input.MoveSizeOperation : Enum {
    public int value__;
    public static MoveSizeOperation Move;
    public static MoveSizeOperation SizeBottom;
    public static MoveSizeOperation SizeBottomLeft;
    public static MoveSizeOperation SizeBottomRight;
    public static MoveSizeOperation SizeLeft;
    public static MoveSizeOperation SizeRight;
    public static MoveSizeOperation SizeTop;
    public static MoveSizeOperation SizeTopLeft;
    public static MoveSizeOperation SizeTopRight;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.NonClientCaptionTappedEventArgs")]
[NonClientCaptionTappedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.INonClientCaptionTappedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.NonClientCaptionTappedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_INonClientCaptionTappedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Point Point { get; }
    public PointerDeviceType PointerDeviceType { get; }
    internal NonClientCaptionTappedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_INonClientCaptionTappedEventArgs();
    public static NonClientCaptionTappedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(NonClientCaptionTappedEventArgs x, NonClientCaptionTappedEventArgs y);
    public static bool op_Inequality(NonClientCaptionTappedEventArgs x, NonClientCaptionTappedEventArgs y);
    public sealed virtual bool Equals(NonClientCaptionTappedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Point get_Point();
    public PointerDeviceType get_PointerDeviceType();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.NonClientPointerEventArgs")]
[NonClientPointerEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.INonClientPointerEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.NonClientPointerEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsPointInRegion { get; }
    public Point Point { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public NonClientRegionKind RegionKind { get; }
    internal NonClientPointerEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_INonClientPointerEventArgs();
    public static NonClientPointerEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(NonClientPointerEventArgs x, NonClientPointerEventArgs y);
    public static bool op_Inequality(NonClientPointerEventArgs x, NonClientPointerEventArgs y);
    public sealed virtual bool Equals(NonClientPointerEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_IsPointInRegion();
    public Point get_Point();
    public PointerDeviceType get_PointerDeviceType();
    public NonClientRegionKind get_RegionKind();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.NonClientRegionKind>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Input.NonClientRegionKind : Enum {
    public int value__;
    public static NonClientRegionKind Close;
    public static NonClientRegionKind Maximize;
    public static NonClientRegionKind Minimize;
    public static NonClientRegionKind Icon;
    public static NonClientRegionKind Caption;
    public static NonClientRegionKind TopBorder;
    public static NonClientRegionKind LeftBorder;
    public static NonClientRegionKind BottomBorder;
    public static NonClientRegionKind RightBorder;
    public static NonClientRegionKind Passthrough;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.NonClientRegionsChangedEventArgs")]
[NonClientRegionsChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.INonClientRegionsChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.NonClientRegionsChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_INonClientRegionsChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public NonClientRegionKind[] ChangedRegions { get; }
    internal NonClientRegionsChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_INonClientRegionsChangedEventArgs();
    public static NonClientRegionsChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(NonClientRegionsChangedEventArgs x, NonClientRegionsChangedEventArgs y);
    public static bool op_Inequality(NonClientRegionsChangedEventArgs x, NonClientRegionsChangedEventArgs y);
    public sealed virtual bool Equals(NonClientRegionsChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public NonClientRegionKind[] get_ChangedRegions();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.Input.PhysicalKeyStatus;u4;u4;b1;b1;b1;b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.PhysicalKeyStatus")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.Input.PhysicalKeyStatus,ABI.Microsoft.UI.Input.PhysicalKeyStatus>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.Input.PhysicalKeyStatus : ValueType {
    public UInt32 RepeatCount;
    public UInt32 ScanCode;
    public bool IsExtendedKey;
    public bool IsMenuKeyDown;
    public bool WasKeyDown;
    public bool IsKeyReleased;
    public PhysicalKeyStatus(UInt32 _RepeatCount, UInt32 _ScanCode, bool _IsExtendedKey, bool _IsMenuKeyDown, bool _WasKeyDown, bool _IsKeyReleased);
    public static bool op_Equality(PhysicalKeyStatus x, PhysicalKeyStatus y);
    public static bool op_Inequality(PhysicalKeyStatus x, PhysicalKeyStatus y);
    public sealed virtual bool Equals(PhysicalKeyStatus other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.PointerDeviceType>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.PointerDeviceType : Enum {
    public int value__;
    public static PointerDeviceType Touch;
    public static PointerDeviceType Pen;
    public static PointerDeviceType Mouse;
    public static PointerDeviceType Touchpad;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.PointerEventArgs")]
[PointerEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IPointerEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.PointerEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public PointerPoint CurrentPoint { get; }
    public bool Handled { get; public set; }
    public VirtualKeyModifiers KeyModifiers { get; }
    internal PointerEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IPointerEventArgs();
    public static PointerEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointerEventArgs x, PointerEventArgs y);
    public static bool op_Inequality(PointerEventArgs x, PointerEventArgs y);
    public sealed virtual bool Equals(PointerEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public IList`1<PointerPoint> GetIntermediatePoints();
    public IList`1<PointerPoint> GetIntermediateTransformedPoints(IPointerPointTransform transform);
    public PointerPoint get_CurrentPoint();
    public bool get_Handled();
    public void set_Handled(bool value);
    public VirtualKeyModifiers get_KeyModifiers();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.PointerPoint")]
[PointerPointRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IPointerPoint")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.PointerPoint : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPoint { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public UInt32 FrameId { get; }
    public bool IsInContact { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public UInt32 PointerId { get; }
    public Point Position { get; }
    public PointerPointProperties Properties { get; }
    public ulong Timestamp { get; }
    internal PointerPoint(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IPointerPoint();
    public static PointerPoint FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointerPoint x, PointerPoint y);
    public static bool op_Inequality(PointerPoint x, PointerPoint y);
    public sealed virtual bool Equals(PointerPoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PointerPoint GetTransformedPoint(IPointerPointTransform transform);
    public UInt32 get_FrameId();
    public bool get_IsInContact();
    public PointerDeviceType get_PointerDeviceType();
    public UInt32 get_PointerId();
    public Point get_Position();
    public PointerPointProperties get_Properties();
    public ulong get_Timestamp();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.PointerPointProperties")]
[PointerPointPropertiesRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IPointerPointProperties")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.PointerPointProperties : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPointProperties { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Rect ContactRect { get; }
    public bool IsBarrelButtonPressed { get; }
    public bool IsCanceled { get; }
    public bool IsEraser { get; }
    public bool IsHorizontalMouseWheel { get; }
    public bool IsInRange { get; }
    public bool IsInverted { get; }
    public bool IsLeftButtonPressed { get; }
    public bool IsMiddleButtonPressed { get; }
    public bool IsPrimary { get; }
    public bool IsRightButtonPressed { get; }
    public bool IsXButton1Pressed { get; }
    public bool IsXButton2Pressed { get; }
    public int MouseWheelDelta { get; }
    public float Orientation { get; }
    public PointerUpdateKind PointerUpdateKind { get; }
    public float Pressure { get; }
    public bool TouchConfidence { get; }
    public float Twist { get; }
    public float XTilt { get; }
    public float YTilt { get; }
    internal PointerPointProperties(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IPointerPointProperties();
    public static PointerPointProperties FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointerPointProperties x, PointerPointProperties y);
    public static bool op_Inequality(PointerPointProperties x, PointerPointProperties y);
    public sealed virtual bool Equals(PointerPointProperties other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Rect get_ContactRect();
    public bool get_IsBarrelButtonPressed();
    public bool get_IsCanceled();
    public bool get_IsEraser();
    public bool get_IsHorizontalMouseWheel();
    public bool get_IsInRange();
    public bool get_IsInverted();
    public bool get_IsLeftButtonPressed();
    public bool get_IsMiddleButtonPressed();
    public bool get_IsPrimary();
    public bool get_IsRightButtonPressed();
    public bool get_IsXButton1Pressed();
    public bool get_IsXButton2Pressed();
    public int get_MouseWheelDelta();
    public float get_Orientation();
    public PointerUpdateKind get_PointerUpdateKind();
    public float get_Pressure();
    public bool get_TouchConfidence();
    public float get_Twist();
    public float get_XTilt();
    public float get_YTilt();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.PointerPredictor")]
[PointerPredictorRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IPointerPredictor")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.PointerPredictor : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Input_IPointerPredictorStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPredictor { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Input_IPointerPredictorStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public TimeSpan PredictionTime { get; public set; }
    internal PointerPredictor(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IPointerPredictor();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Input_IPointerPredictorStatics();
    public static PointerPredictor CreateForInputPointerSource(InputPointerSource inputPointerSource);
    public static PointerPredictor FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointerPredictor x, PointerPredictor y);
    public static bool op_Inequality(PointerPredictor x, PointerPredictor y);
    public sealed virtual bool Equals(PointerPredictor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PointerPoint[] GetPredictedPoints(PointerPoint point);
    public sealed virtual void Dispose();
    public TimeSpan get_PredictionTime();
    public void set_PredictionTime(TimeSpan value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.PointerUpdateKind>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Input.PointerUpdateKind : Enum {
    public int value__;
    public static PointerUpdateKind Other;
    public static PointerUpdateKind LeftButtonPressed;
    public static PointerUpdateKind LeftButtonReleased;
    public static PointerUpdateKind RightButtonPressed;
    public static PointerUpdateKind RightButtonReleased;
    public static PointerUpdateKind MiddleButtonPressed;
    public static PointerUpdateKind MiddleButtonReleased;
    public static PointerUpdateKind XButton1Pressed;
    public static PointerUpdateKind XButton1Released;
    public static PointerUpdateKind XButton2Pressed;
    public static PointerUpdateKind XButton2Released;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.RightTappedEventArgs")]
[RightTappedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IRightTappedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.RightTappedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IRightTappedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    internal RightTappedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IRightTappedEventArgs();
    public static RightTappedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RightTappedEventArgs x, RightTappedEventArgs y);
    public static bool op_Inequality(RightTappedEventArgs x, RightTappedEventArgs y);
    public sealed virtual bool Equals(RightTappedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.TappedEventArgs")]
[TappedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.ITappedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Input.TappedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_ITappedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public PointerDeviceType PointerDeviceType { get; }
    public Point Position { get; }
    public UInt32 TapCount { get; }
    internal TappedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_ITappedEventArgs();
    public static TappedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TappedEventArgs x, TappedEventArgs y);
    public static bool op_Inequality(TappedEventArgs x, TappedEventArgs y);
    public sealed virtual bool Equals(TappedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PointerDeviceType get_PointerDeviceType();
    public Point get_Position();
    public UInt32 get_TapCount();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Input.VirtualKeyStates>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public enum Microsoft.UI.Input.VirtualKeyStates : Enum {
    public UInt32 value__;
    public static VirtualKeyStates None;
    public static VirtualKeyStates Down;
    public static VirtualKeyStates Locked;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.WindowRectChangedEventArgs")]
[WindowRectChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IWindowRectChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
public class Microsoft.UI.Input.WindowRectChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public MoveSizeOperation MoveSizeOperation { get; }
    public RectInt32 NewWindowRect { get; }
    public RectInt32 OldWindowRect { get; }
    public PointInt32 PointerScreenPoint { get; }
    internal WindowRectChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IWindowRectChangedEventArgs();
    public static WindowRectChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(WindowRectChangedEventArgs x, WindowRectChangedEventArgs y);
    public static bool op_Inequality(WindowRectChangedEventArgs x, WindowRectChangedEventArgs y);
    public sealed virtual bool Equals(WindowRectChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public MoveSizeOperation get_MoveSizeOperation();
    public RectInt32 get_NewWindowRect();
    public RectInt32 get_OldWindowRect();
    public PointInt32 get_PointerScreenPoint();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Input.WindowRectChangingEventArgs")]
[WindowRectChangingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Input.IWindowRectChangingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65542")]
public class Microsoft.UI.Input.WindowRectChangingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AllowRectChange { get; public set; }
    public MoveSizeOperation MoveSizeOperation { get; }
    public RectInt32 NewWindowRect { get; public set; }
    public RectInt32 OldWindowRect { get; }
    public PointInt32 PointerScreenPoint { get; }
    public bool ShowWindow { get; public set; }
    internal WindowRectChangingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Input_IWindowRectChangingEventArgs();
    public static WindowRectChangingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(WindowRectChangingEventArgs x, WindowRectChangingEventArgs y);
    public static bool op_Inequality(WindowRectChangingEventArgs x, WindowRectChangingEventArgs y);
    public sealed virtual bool Equals(WindowRectChangingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_AllowRectChange();
    public void set_AllowRectChange(bool value);
    public MoveSizeOperation get_MoveSizeOperation();
    public RectInt32 get_NewWindowRect();
    public void set_NewWindowRect(RectInt32 value);
    public RectInt32 get_OldWindowRect();
    public PointInt32 get_PointerScreenPoint();
    public bool get_ShowWindow();
    public void set_ShowWindow(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2228EE7E-6D15-563C-8F3C-E8783BA13846")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.System.IThemeSettings")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.System.IThemeSettings {
    public bool HighContrast { get; }
    public string HighContrastScheme { get; }
    public abstract virtual bool get_HighContrast();
    public abstract virtual string get_HighContrastScheme();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(TypedEventHandler`2<ThemeSettings, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(TypedEventHandler`2<ThemeSettings, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("1586907D-30DB-5F97-8FA1-8940C75DCCC0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.System.IThemeSettingsStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.System.IThemeSettingsStatics {
    public abstract virtual ThemeSettings CreateForWindowId(WindowId windowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.System.ThemeSettings")]
[ThemeSettingsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.System.IThemeSettings")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
public class Microsoft.UI.System.ThemeSettings : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_System_IThemeSettingsStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_System_IThemeSettings { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_System_IThemeSettingsStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool HighContrast { get; }
    public string HighContrastScheme { get; }
    internal ThemeSettings(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_System_IThemeSettings();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_System_IThemeSettingsStatics();
    public static ThemeSettings CreateForWindowId(WindowId windowId);
    public static ThemeSettings FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ThemeSettings x, ThemeSettings y);
    public static bool op_Inequality(ThemeSettings x, ThemeSettings y);
    public sealed virtual bool Equals(ThemeSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void add_Changed(TypedEventHandler`2<ThemeSettings, object> value);
    public void remove_Changed(TypedEventHandler`2<ThemeSettings, object> value);
    public bool get_HighContrast();
    public string get_HighContrastScheme();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
public class Microsoft.UI.Win32Interop : object {
    private static int Windowing_GetWindowIdFromWindow(IntPtr hwnd, WindowId& windowId);
    private static int Windowing_GetWindowFromWindowId(WindowId windowId, IntPtr& hwnd);
    private static int Windowing_GetDisplayIdFromMonitor(IntPtr hmonitor, DisplayId& displayId);
    private static int Windowing_GetMonitorFromDisplayId(DisplayId displayId, IntPtr& hmonitor);
    private static int Windowing_GetIconIdFromIcon(IntPtr hicon, IconId& iconId);
    private static int Windowing_GetIconFromIconId(IconId iconId, IntPtr& hicon);
    public static WindowId GetWindowIdFromWindow(IntPtr hwnd);
    public static IntPtr GetWindowFromWindowId(WindowId windowId);
    public static DisplayId GetDisplayIdFromMonitor(IntPtr hmonitor);
    public static IntPtr GetMonitorFromDisplayId(DisplayId displayId);
    public static IconId GetIconIdFromIcon(IntPtr hicon);
    public static IntPtr GetIconFromIconId(IconId iconId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI", "struct(Microsoft.UI.WindowId;u8)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.UI.WindowId,Microsoft.UI.WindowId>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.WindowId : ValueType {
    public ulong Value;
    public WindowId(ulong _Value);
    public static bool op_Equality(WindowId x, WindowId y);
    public static bool op_Inequality(WindowId x, WindowId y);
    public sealed virtual bool Equals(WindowId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.AppWindow")]
[AppWindowRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IAppWindow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.AppWindow : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindow2;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindow3;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow2 { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindow3 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public SizeInt32 ClientSize { get; }
    public DispatcherQueue DispatcherQueue { get; }
    public WindowId Id { get; }
    public bool IsShownInSwitchers { get; public set; }
    public bool IsVisible { get; }
    public WindowId OwnerWindowId { get; }
    public PointInt32 Position { get; }
    public AppWindowPresenter Presenter { get; }
    public SizeInt32 Size { get; }
    public string Title { get; public set; }
    public AppWindowTitleBar TitleBar { get; }
    internal AppWindow(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindow();
    private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindow2();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindow2();
    private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindow3();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindow3();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowStatics();
    public static AppWindow Create();
    public static AppWindow Create(AppWindowPresenter appWindowPresenter);
    public static AppWindow Create(AppWindowPresenter appWindowPresenter, WindowId ownerWindowId);
    public static AppWindow GetFromWindowId(WindowId windowId);
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowStatics2();
    public static AppWindow Create(AppWindowPresenter appWindowPresenter, WindowId ownerWindowId, DispatcherQueue DispatcherQueue);
    public static AppWindow FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AppWindow x, AppWindow y);
    public static bool op_Inequality(AppWindow x, AppWindow y);
    public sealed virtual bool Equals(AppWindow other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Destroy();
    public void Hide();
    public void Move(PointInt32 position);
    public void MoveAndResize(RectInt32 rect);
    public void MoveAndResize(RectInt32 rect, DisplayArea displayarea);
    public void Resize(SizeInt32 size);
    public void SetIcon(string iconPath);
    public void SetIcon(IconId iconId);
    public void SetPresenter(AppWindowPresenter appWindowPresenter);
    public void SetPresenter(AppWindowPresenterKind appWindowPresenterKind);
    public void Show();
    public void Show(bool activateWindow);
    public void add_Changed(TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs> value);
    public void remove_Changed(TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs> value);
    public void add_Closing(TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs> value);
    public void remove_Closing(TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs> value);
    public void add_Destroying(TypedEventHandler`2<AppWindow, object> value);
    public void remove_Destroying(TypedEventHandler`2<AppWindow, object> value);
    public void MoveInZOrderAtBottom();
    public void MoveInZOrderAtTop();
    public void MoveInZOrderBelow(WindowId windowId);
    public void ResizeClient(SizeInt32 size);
    public void ShowOnceWithRequestedStartupState();
    public void AssociateWithDispatcherQueue(DispatcherQueue dispatcherQueue);
    public SizeInt32 get_ClientSize();
    public DispatcherQueue get_DispatcherQueue();
    public WindowId get_Id();
    public bool get_IsShownInSwitchers();
    public void set_IsShownInSwitchers(bool value);
    public bool get_IsVisible();
    public WindowId get_OwnerWindowId();
    public PointInt32 get_Position();
    public AppWindowPresenter get_Presenter();
    public SizeInt32 get_Size();
    public string get_Title();
    public void set_Title(string value);
    public AppWindowTitleBar get_TitleBar();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.AppWindowChangedEventArgs")]
[AppWindowChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IAppWindowChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.AppWindowChangedEventArgs : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool DidPositionChange { get; }
    public bool DidPresenterChange { get; }
    public bool DidSizeChange { get; }
    public bool DidVisibilityChange { get; }
    public bool DidZOrderChange { get; }
    public bool IsZOrderAtBottom { get; }
    public bool IsZOrderAtTop { get; }
    public WindowId ZOrderBelowWindowId { get; }
    internal AppWindowChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs();
    private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowChangedEventArgs2();
    public static AppWindowChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AppWindowChangedEventArgs x, AppWindowChangedEventArgs y);
    public static bool op_Inequality(AppWindowChangedEventArgs x, AppWindowChangedEventArgs y);
    public sealed virtual bool Equals(AppWindowChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_DidPositionChange();
    public bool get_DidPresenterChange();
    public bool get_DidSizeChange();
    public bool get_DidVisibilityChange();
    public bool get_DidZOrderChange();
    public bool get_IsZOrderAtBottom();
    public bool get_IsZOrderAtTop();
    public WindowId get_ZOrderBelowWindowId();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.AppWindowClosingEventArgs")]
[AppWindowClosingEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IAppWindowClosingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.AppWindowClosingEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowClosingEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool Cancel { get; public set; }
    internal AppWindowClosingEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowClosingEventArgs();
    public static AppWindowClosingEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AppWindowClosingEventArgs x, AppWindowClosingEventArgs y);
    public static bool op_Inequality(AppWindowClosingEventArgs x, AppWindowClosingEventArgs y);
    public sealed virtual bool Equals(AppWindowClosingEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_Cancel();
    public void set_Cancel(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.AppWindowPresenter")]
[AppWindowPresenterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IAppWindowPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.AppWindowPresenter : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public AppWindowPresenterKind Kind { get; }
    protected internal AppWindowPresenter(IObjectReference objRef);
    protected AppWindowPresenter(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowPresenter();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowPresenterFactory();
    public static AppWindowPresenter FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AppWindowPresenter x, AppWindowPresenter y);
    public static bool op_Inequality(AppWindowPresenter x, AppWindowPresenter y);
    public sealed virtual bool Equals(AppWindowPresenter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public AppWindowPresenterKind get_Kind();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.AppWindowPresenterKind>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Windowing.AppWindowPresenterKind : Enum {
    public int value__;
    public static AppWindowPresenterKind Default;
    public static AppWindowPresenterKind CompactOverlay;
    public static AppWindowPresenterKind FullScreen;
    public static AppWindowPresenterKind Overlapped;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.AppWindowTitleBar")]
[AppWindowTitleBarRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IAppWindowTitleBar")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.AppWindowTitleBar : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<Color> BackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonForegroundColor { get; public set; }
    public Nullable`1<Color> ButtonHoverBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonHoverForegroundColor { get; public set; }
    public Nullable`1<Color> ButtonInactiveBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonInactiveForegroundColor { get; public set; }
    public Nullable`1<Color> ButtonPressedBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonPressedForegroundColor { get; public set; }
    public bool ExtendsContentIntoTitleBar { get; public set; }
    public Nullable`1<Color> ForegroundColor { get; public set; }
    public int Height { get; }
    public IconShowOptions IconShowOptions { get; public set; }
    public Nullable`1<Color> InactiveBackgroundColor { get; public set; }
    public Nullable`1<Color> InactiveForegroundColor { get; public set; }
    public int LeftInset { get; }
    public TitleBarHeightOption PreferredHeightOption { get; public set; }
    public int RightInset { get; }
    internal AppWindowTitleBar(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar();
    private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBar2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IAppWindowTitleBarStatics();
    public static bool IsCustomizationSupported();
    public static AppWindowTitleBar FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AppWindowTitleBar x, AppWindowTitleBar y);
    public static bool op_Inequality(AppWindowTitleBar x, AppWindowTitleBar y);
    public sealed virtual bool Equals(AppWindowTitleBar other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void ResetToDefault();
    public void SetDragRectangles(RectInt32[] value);
    public Nullable`1<Color> get_BackgroundColor();
    public void set_BackgroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonBackgroundColor();
    public void set_ButtonBackgroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonForegroundColor();
    public void set_ButtonForegroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonHoverBackgroundColor();
    public void set_ButtonHoverBackgroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonHoverForegroundColor();
    public void set_ButtonHoverForegroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonInactiveBackgroundColor();
    public void set_ButtonInactiveBackgroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonInactiveForegroundColor();
    public void set_ButtonInactiveForegroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonPressedBackgroundColor();
    public void set_ButtonPressedBackgroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_ButtonPressedForegroundColor();
    public void set_ButtonPressedForegroundColor(Nullable`1<Color> value);
    public bool get_ExtendsContentIntoTitleBar();
    public void set_ExtendsContentIntoTitleBar(bool value);
    public Nullable`1<Color> get_ForegroundColor();
    public void set_ForegroundColor(Nullable`1<Color> value);
    public int get_Height();
    public IconShowOptions get_IconShowOptions();
    public void set_IconShowOptions(IconShowOptions value);
    public Nullable`1<Color> get_InactiveBackgroundColor();
    public void set_InactiveBackgroundColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_InactiveForegroundColor();
    public void set_InactiveForegroundColor(Nullable`1<Color> value);
    public int get_LeftInset();
    public TitleBarHeightOption get_PreferredHeightOption();
    public void set_PreferredHeightOption(TitleBarHeightOption value);
    public int get_RightInset();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.CompactOverlayPresenter")]
[CompactOverlayPresenterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.ICompactOverlayPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.CompactOverlayPresenter : AppWindowPresenter {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenter { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CompactOverlaySize InitialSize { get; public set; }
    internal CompactOverlayPresenter(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenter();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_ICompactOverlayPresenterStatics();
    public static CompactOverlayPresenter Create();
    public static CompactOverlayPresenter FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompactOverlayPresenter x, CompactOverlayPresenter y);
    public static bool op_Inequality(CompactOverlayPresenter x, CompactOverlayPresenter y);
    public sealed virtual bool Equals(CompactOverlayPresenter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CompactOverlaySize get_InitialSize();
    public void set_InitialSize(CompactOverlaySize value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.CompactOverlaySize>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Windowing.CompactOverlaySize : Enum {
    public int value__;
    public static CompactOverlaySize Small;
    public static CompactOverlaySize Medium;
    public static CompactOverlaySize Large;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.DisplayArea")]
[DisplayAreaRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IDisplayArea")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.DisplayArea : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayArea { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2 { get; }
    public static DisplayArea Primary { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DisplayId DisplayId { get; }
    public bool IsPrimary { get; }
    public RectInt32 OuterBounds { get; }
    public RectInt32 WorkArea { get; }
    internal DisplayArea(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IDisplayArea();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics();
    public static DisplayAreaWatcher CreateWatcher();
    public static IReadOnlyList`1<DisplayArea> FindAll();
    public static DisplayArea GetFromWindowId(WindowId windowId, DisplayAreaFallback displayAreaFallback);
    public static DisplayArea GetFromPoint(PointInt32 point, DisplayAreaFallback displayAreaFallback);
    public static DisplayArea GetFromRect(RectInt32 rect, DisplayAreaFallback displayAreaFallback);
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IDisplayAreaStatics2();
    public static DisplayArea GetFromDisplayId(DisplayId displayId);
    public static DisplayArea get_Primary();
    public static DisplayArea FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DisplayArea x, DisplayArea y);
    public static bool op_Inequality(DisplayArea x, DisplayArea y);
    public sealed virtual bool Equals(DisplayArea other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public DisplayId get_DisplayId();
    public bool get_IsPrimary();
    public RectInt32 get_OuterBounds();
    public RectInt32 get_WorkArea();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.DisplayAreaFallback>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Windowing.DisplayAreaFallback : Enum {
    public int value__;
    public static DisplayAreaFallback None;
    public static DisplayAreaFallback Primary;
    public static DisplayAreaFallback Nearest;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.DisplayAreaWatcher")]
[DisplayAreaWatcherRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IDisplayAreaWatcher")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.DisplayAreaWatcher : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public DisplayAreaWatcherStatus Status { get; }
    internal DisplayAreaWatcher(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IDisplayAreaWatcher();
    public static DisplayAreaWatcher FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DisplayAreaWatcher x, DisplayAreaWatcher y);
    public static bool op_Inequality(DisplayAreaWatcher x, DisplayAreaWatcher y);
    public sealed virtual bool Equals(DisplayAreaWatcher other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Start();
    public void Stop();
    public void add_Added(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    public void remove_Added(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    public void add_EnumerationCompleted(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    public void remove_EnumerationCompleted(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    public void add_Removed(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    public void remove_Removed(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    public void add_Stopped(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    public void remove_Stopped(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    public void add_Updated(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    public void remove_Updated(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    public DisplayAreaWatcherStatus get_Status();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.DisplayAreaWatcherStatus>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Windowing.DisplayAreaWatcherStatus : Enum {
    public int value__;
    public static DisplayAreaWatcherStatus Created;
    public static DisplayAreaWatcherStatus Started;
    public static DisplayAreaWatcherStatus EnumerationCompleted;
    public static DisplayAreaWatcherStatus Stopping;
    public static DisplayAreaWatcherStatus Stopped;
    public static DisplayAreaWatcherStatus Aborted;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.FullScreenPresenter")]
[FullScreenPresenterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IFullScreenPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.FullScreenPresenter : AppWindowPresenter {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IFullScreenPresenter { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    internal FullScreenPresenter(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IFullScreenPresenter();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IFullScreenPresenterStatics();
    public static FullScreenPresenter Create();
    public static FullScreenPresenter FromAbi(IntPtr thisPtr);
    public static bool op_Equality(FullScreenPresenter x, FullScreenPresenter y);
    public static bool op_Inequality(FullScreenPresenter x, FullScreenPresenter y);
    public sealed virtual bool Equals(FullScreenPresenter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CFA788B3-643B-5C5E-AD4E-321D48A82ACD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindow")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindow {
    public WindowId Id { get; }
    public bool IsShownInSwitchers { get; public set; }
    public bool IsVisible { get; }
    public WindowId OwnerWindowId { get; }
    public PointInt32 Position { get; }
    public AppWindowPresenter Presenter { get; }
    public SizeInt32 Size { get; }
    public string Title { get; public set; }
    public AppWindowTitleBar TitleBar { get; }
    public abstract virtual void Destroy();
    public abstract virtual void Hide();
    public abstract virtual void Move(PointInt32 position);
    [OverloadAttribute("MoveAndResize")]
public abstract virtual void MoveAndResize(RectInt32 rect);
    [OverloadAttribute("MoveAndResizeRelativeToDisplayArea")]
public abstract virtual void MoveAndResize(RectInt32 rect, DisplayArea displayarea);
    public abstract virtual void Resize(SizeInt32 size);
    [DefaultOverloadAttribute]
[OverloadAttribute("SetIcon")]
public abstract virtual void SetIcon(string iconPath);
    [OverloadAttribute("SetIconWithIconId")]
public abstract virtual void SetIcon(IconId iconId);
    [DefaultOverloadAttribute]
[OverloadAttribute("SetPresenter")]
public abstract virtual void SetPresenter(AppWindowPresenter appWindowPresenter);
    [OverloadAttribute("SetPresenterByKind")]
public abstract virtual void SetPresenter(AppWindowPresenterKind appWindowPresenterKind);
    [OverloadAttribute("Show")]
public abstract virtual void Show();
    [OverloadAttribute("ShowWithActivation")]
public abstract virtual void Show(bool activateWindow);
    public abstract virtual WindowId get_Id();
    public abstract virtual bool get_IsShownInSwitchers();
    public abstract virtual void set_IsShownInSwitchers(bool value);
    public abstract virtual bool get_IsVisible();
    public abstract virtual WindowId get_OwnerWindowId();
    public abstract virtual PointInt32 get_Position();
    public abstract virtual AppWindowPresenter get_Presenter();
    public abstract virtual SizeInt32 get_Size();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual AppWindowTitleBar get_TitleBar();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Destroying(TypedEventHandler`2<AppWindow, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Destroying(TypedEventHandler`2<AppWindow, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("6CD41292-794C-5CAC-8961-210D012C6EBC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindow2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Windowing.IAppWindow2 {
    public SizeInt32 ClientSize { get; }
    public abstract virtual void MoveInZOrderAtBottom();
    public abstract virtual void MoveInZOrderAtTop();
    public abstract virtual void MoveInZOrderBelow(WindowId windowId);
    public abstract virtual void ResizeClient(SizeInt32 size);
    public abstract virtual void ShowOnceWithRequestedStartupState();
    public abstract virtual SizeInt32 get_ClientSize();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2F260CEA-193D-5DD6-A904-D7649A608D2F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindow3")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Windowing.IAppWindow3 {
    public DispatcherQueue DispatcherQueue { get; }
    public abstract virtual void AssociateWithDispatcherQueue(DispatcherQueue dispatcherQueue);
    public abstract virtual DispatcherQueue get_DispatcherQueue();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2182BC5D-FDAC-5C3E-BF37-7D8D684E9D1D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowChangedEventArgs {
    public bool DidPositionChange { get; }
    public bool DidPresenterChange { get; }
    public bool DidSizeChange { get; }
    public bool DidVisibilityChange { get; }
    public abstract virtual bool get_DidPositionChange();
    public abstract virtual bool get_DidPresenterChange();
    public abstract virtual bool get_DidSizeChange();
    public abstract virtual bool get_DidVisibilityChange();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("A773AB4C-A5EC-50E8-98AC-247FE6CD4227")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowChangedEventArgs2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Windowing.IAppWindowChangedEventArgs2 {
    public bool DidZOrderChange { get; }
    public bool IsZOrderAtBottom { get; }
    public bool IsZOrderAtTop { get; }
    public WindowId ZOrderBelowWindowId { get; }
    public abstract virtual bool get_DidZOrderChange();
    public abstract virtual bool get_IsZOrderAtBottom();
    public abstract virtual bool get_IsZOrderAtTop();
    public abstract virtual WindowId get_ZOrderBelowWindowId();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("0E09D90B-2261-590B-9AD1-8504991D8754")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowClosingEventArgs")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowClosingEventArgs {
    public bool Cancel { get; public set; }
    public abstract virtual bool get_Cancel();
    public abstract virtual void set_Cancel(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("BC3042C2-C6C6-5632-8989-FF0EC6D3B40D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowPresenter {
    public AppWindowPresenterKind Kind { get; }
    public abstract virtual AppWindowPresenterKind get_Kind();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("62082E3C-1368-5238-90D1-E932DC718A82")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowPresenterFactory")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowPresenterFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("3C315C24-D540-5D72-B518-B226B83627CB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowStatics {
    [OverloadAttribute("Create")]
public abstract virtual AppWindow Create();
    [OverloadAttribute("CreateWithPresenter")]
public abstract virtual AppWindow Create(AppWindowPresenter appWindowPresenter);
    [OverloadAttribute("CreateWithPresenterAndOwner")]
public abstract virtual AppWindow Create(AppWindowPresenter appWindowPresenter, WindowId ownerWindowId);
    public abstract virtual AppWindow GetFromWindowId(WindowId windowId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("CABC23DB-4606-5D6E-89A5-06DE1D8BD3E2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65540")]
internal interface Microsoft.UI.Windowing.IAppWindowStatics2 {
    [OverloadAttribute("CreateWithDispatcherQueue")]
public abstract virtual AppWindow Create(AppWindowPresenter appWindowPresenter, WindowId ownerWindowId, DispatcherQueue DispatcherQueue);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5574EFA2-C91C-5700-A363-539C71A7AAF4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowTitleBar")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowTitleBar {
    public Nullable`1<Color> BackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonForegroundColor { get; public set; }
    public Nullable`1<Color> ButtonHoverBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonHoverForegroundColor { get; public set; }
    public Nullable`1<Color> ButtonInactiveBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonInactiveForegroundColor { get; public set; }
    public Nullable`1<Color> ButtonPressedBackgroundColor { get; public set; }
    public Nullable`1<Color> ButtonPressedForegroundColor { get; public set; }
    public bool ExtendsContentIntoTitleBar { get; public set; }
    public Nullable`1<Color> ForegroundColor { get; public set; }
    public int Height { get; }
    public IconShowOptions IconShowOptions { get; public set; }
    public Nullable`1<Color> InactiveBackgroundColor { get; public set; }
    public Nullable`1<Color> InactiveForegroundColor { get; public set; }
    public int LeftInset { get; }
    public int RightInset { get; }
    public abstract virtual void ResetToDefault();
    public abstract virtual void SetDragRectangles(RectInt32[] value);
    public abstract virtual Nullable`1<Color> get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonBackgroundColor();
    public abstract virtual void set_ButtonBackgroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonForegroundColor();
    public abstract virtual void set_ButtonForegroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonHoverBackgroundColor();
    public abstract virtual void set_ButtonHoverBackgroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonHoverForegroundColor();
    public abstract virtual void set_ButtonHoverForegroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonInactiveBackgroundColor();
    public abstract virtual void set_ButtonInactiveBackgroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonInactiveForegroundColor();
    public abstract virtual void set_ButtonInactiveForegroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonPressedBackgroundColor();
    public abstract virtual void set_ButtonPressedBackgroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_ButtonPressedForegroundColor();
    public abstract virtual void set_ButtonPressedForegroundColor(Nullable`1<Color> value);
    public abstract virtual bool get_ExtendsContentIntoTitleBar();
    public abstract virtual void set_ExtendsContentIntoTitleBar(bool value);
    public abstract virtual Nullable`1<Color> get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(Nullable`1<Color> value);
    public abstract virtual int get_Height();
    public abstract virtual IconShowOptions get_IconShowOptions();
    public abstract virtual void set_IconShowOptions(IconShowOptions value);
    public abstract virtual Nullable`1<Color> get_InactiveBackgroundColor();
    public abstract virtual void set_InactiveBackgroundColor(Nullable`1<Color> value);
    public abstract virtual Nullable`1<Color> get_InactiveForegroundColor();
    public abstract virtual void set_InactiveForegroundColor(Nullable`1<Color> value);
    public abstract virtual int get_LeftInset();
    public abstract virtual int get_RightInset();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("86FAED38-748A-5B4B-9CCF-3BA0496C9041")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowTitleBar2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Windowing.IAppWindowTitleBar2 {
    public TitleBarHeightOption PreferredHeightOption { get; public set; }
    public abstract virtual TitleBarHeightOption get_PreferredHeightOption();
    public abstract virtual void set_PreferredHeightOption(TitleBarHeightOption value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("9E1DA52E-8B15-54D6-A886-F7B9F9D930B2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IAppWindowTitleBarStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IAppWindowTitleBarStatics {
    public abstract virtual bool IsCustomizationSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EFEB0812-6FC7-5B7D-BD92-CC8F9A6454C9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.ICompactOverlayPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.ICompactOverlayPresenter {
    public CompactOverlaySize InitialSize { get; public set; }
    public abstract virtual CompactOverlaySize get_InitialSize();
    public abstract virtual void set_InitialSize(CompactOverlaySize value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("EAB93186-4F6A-52F9-8C03-DA57A1522F6E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.ICompactOverlayPresenterStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.ICompactOverlayPresenterStatics {
    public abstract virtual CompactOverlayPresenter Create();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.IconShowOptions>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Windowing.IconShowOptions : Enum {
    public int value__;
    public static IconShowOptions ShowIconAndSystemMenu;
    public static IconShowOptions HideIconAndSystemMenu;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5C7E0537-B621-5579-BCAE-A84AA8746167")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IDisplayArea")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IDisplayArea {
    public DisplayId DisplayId { get; }
    public bool IsPrimary { get; }
    public RectInt32 OuterBounds { get; }
    public RectInt32 WorkArea { get; }
    public abstract virtual DisplayId get_DisplayId();
    public abstract virtual bool get_IsPrimary();
    public abstract virtual RectInt32 get_OuterBounds();
    public abstract virtual RectInt32 get_WorkArea();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("02AB4926-211E-5D49-8E4B-2AF193DAED09")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IDisplayAreaStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IDisplayAreaStatics {
    public DisplayArea Primary { get; }
    public abstract virtual DisplayAreaWatcher CreateWatcher();
    public abstract virtual IReadOnlyList`1<DisplayArea> FindAll();
    public abstract virtual DisplayArea GetFromWindowId(WindowId windowId, DisplayAreaFallback displayAreaFallback);
    public abstract virtual DisplayArea GetFromPoint(PointInt32 point, DisplayAreaFallback displayAreaFallback);
    public abstract virtual DisplayArea GetFromRect(RectInt32 rect, DisplayAreaFallback displayAreaFallback);
    public abstract virtual DisplayArea get_Primary();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("7207AD4B-890D-5DD7-BC18-78FFD9544D8F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IDisplayAreaStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65538")]
internal interface Microsoft.UI.Windowing.IDisplayAreaStatics2 {
    public abstract virtual DisplayArea GetFromDisplayId(DisplayId displayId);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("83F6562F-D3A0-548B-8E4F-A99BE3D95C9C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IDisplayAreaWatcher")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IDisplayAreaWatcher {
    public DisplayAreaWatcherStatus Status { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual DisplayAreaWatcherStatus get_Status();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Added(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Added(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EnumerationCompleted(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EnumerationCompleted(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Removed(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Removed(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Stopped(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Stopped(TypedEventHandler`2<DisplayAreaWatcher, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Updated(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Updated(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("FA9141FD-B8DD-5DA1-8B2B-7CDADB76F593")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IFullScreenPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IFullScreenPresenter {
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("2EC0D2C1-E086-55BB-A3B2-44942E231C67")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IFullScreenPresenterStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IFullScreenPresenterStatics {
    public abstract virtual FullScreenPresenter Create();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("21693970-4F4C-5172-9E9D-682A2D174884")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IOverlappedPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IOverlappedPresenter {
    public bool HasBorder { get; }
    public bool HasTitleBar { get; }
    public bool IsAlwaysOnTop { get; public set; }
    public bool IsMaximizable { get; public set; }
    public bool IsMinimizable { get; public set; }
    public bool IsModal { get; public set; }
    public bool IsResizable { get; public set; }
    public OverlappedPresenterState State { get; }
    public abstract virtual void Maximize();
    public abstract virtual void Minimize();
    public abstract virtual void Restore();
    public abstract virtual void SetBorderAndTitleBar(bool hasBorder, bool hasTitleBar);
    public abstract virtual bool get_HasBorder();
    public abstract virtual bool get_HasTitleBar();
    public abstract virtual bool get_IsAlwaysOnTop();
    public abstract virtual void set_IsAlwaysOnTop(bool value);
    public abstract virtual bool get_IsMaximizable();
    public abstract virtual void set_IsMaximizable(bool value);
    public abstract virtual bool get_IsMinimizable();
    public abstract virtual void set_IsMinimizable(bool value);
    public abstract virtual bool get_IsModal();
    public abstract virtual void set_IsModal(bool value);
    public abstract virtual bool get_IsResizable();
    public abstract virtual void set_IsResizable(bool value);
    public abstract virtual OverlappedPresenterState get_State();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("5C6CCD93-4244-5CD2-B355-ED5EA34DF730")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IOverlappedPresenter2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Windowing.IOverlappedPresenter2 {
    [OverloadAttribute("MinimizeWithActivation")]
public abstract virtual void Minimize(bool activateWindow);
    [OverloadAttribute("RestoreWithActivation")]
public abstract virtual void Restore(bool activateWindow);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("997225E4-7B00-5AEE-A4BE-D4068D1999E2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
internal interface Microsoft.UI.Windowing.IOverlappedPresenterStatics {
    public abstract virtual OverlappedPresenter Create();
    public abstract virtual OverlappedPresenter CreateForContextMenu();
    public abstract virtual OverlappedPresenter CreateForDialog();
    public abstract virtual OverlappedPresenter CreateForToolWindow();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[GuidAttribute("ED5C4F92-32F4-5D15-80D0-B2A5EFA04D39")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.IOverlappedPresenterStatics2")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
internal interface Microsoft.UI.Windowing.IOverlappedPresenterStatics2 {
    public OverlappedPresenterState RequestedStartupState { get; }
    public abstract virtual OverlappedPresenterState get_RequestedStartupState();
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.UI.Windowing.OverlappedPresenter")]
[OverlappedPresenterRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.UI.Windowing.IOverlappedPresenter")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public class Microsoft.UI.Windowing.OverlappedPresenter : AppWindowPresenter {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter { get; }
    private IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2 { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2 { get; }
    public static OverlappedPresenterState RequestedStartupState { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public bool HasBorder { get; }
    public bool HasTitleBar { get; }
    public bool IsAlwaysOnTop { get; public set; }
    public bool IsMaximizable { get; public set; }
    public bool IsMinimizable { get; public set; }
    public bool IsModal { get; public set; }
    public bool IsResizable { get; public set; }
    public OverlappedPresenterState State { get; }
    internal OverlappedPresenter(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter();
    private IObjectReference Make___objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2();
    private IObjectReference get__objRef_global__Microsoft_UI_Windowing_IOverlappedPresenter2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics();
    public static OverlappedPresenter Create();
    public static OverlappedPresenter CreateForContextMenu();
    public static OverlappedPresenter CreateForDialog();
    public static OverlappedPresenter CreateForToolWindow();
    private static IObjectReference get__objRef_global__Microsoft_UI_Windowing_IOverlappedPresenterStatics2();
    public static OverlappedPresenterState get_RequestedStartupState();
    public static OverlappedPresenter FromAbi(IntPtr thisPtr);
    public static bool op_Equality(OverlappedPresenter x, OverlappedPresenter y);
    public static bool op_Inequality(OverlappedPresenter x, OverlappedPresenter y);
    public sealed virtual bool Equals(OverlappedPresenter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Maximize();
    public void Minimize();
    public void Restore();
    public void SetBorderAndTitleBar(bool hasBorder, bool hasTitleBar);
    public void Minimize(bool activateWindow);
    public void Restore(bool activateWindow);
    public bool get_HasBorder();
    public bool get_HasTitleBar();
    public bool get_IsAlwaysOnTop();
    public void set_IsAlwaysOnTop(bool value);
    public bool get_IsMaximizable();
    public void set_IsMaximizable(bool value);
    public bool get_IsMinimizable();
    public void set_IsMinimizable(bool value);
    public bool get_IsModal();
    public void set_IsModal(bool value);
    public bool get_IsResizable();
    public void set_IsResizable(bool value);
    public OverlappedPresenterState get_State();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.OverlappedPresenterState>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65536")]
public enum Microsoft.UI.Windowing.OverlappedPresenterState : Enum {
    public int value__;
    public static OverlappedPresenterState Maximized;
    public static OverlappedPresenterState Minimized;
    public static OverlappedPresenterState Restored;
}
[WindowsRuntimeTypeAttribute("Microsoft.UI")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.UI.Windowing.TitleBarHeightOption>")]
[ContractVersionAttribute("Microsoft.Foundation.WindowsAppSDKContract", "65537")]
public enum Microsoft.UI.Windowing.TitleBarHeightOption : Enum {
    public int value__;
    public static TitleBarHeightOption Standard;
    public static TitleBarHeightOption Tall;
    public static TitleBarHeightOption Collapsed;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class WinRT._EventSource_global__Microsoft_UI_ClosableNotifierHandler : EventSource`1<ClosableNotifierHandler> {
    internal _EventSource_global__Microsoft_UI_ClosableNotifierHandler(IObjectReference obj, method addHandler, method removeHandler, int index);
    protected virtual ObjectReferenceValue CreateMarshaler(ClosableNotifierHandler handler);
    protected virtual EventSourceState`1<ClosableNotifierHandler> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_ : EventSource`1<TypedEventHandler`2<DisplayInformation, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Display_DisplayInformation__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DisplayInformation, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DisplayInformation, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_CompositionCapabilities__object_ : EventSource`1<TypedEventHandler`2<CompositionCapabilities, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_CompositionCapabilities__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_CompositionCapabilities__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CompositionCapabilities, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CompositionCapabilities, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_CompositionGraphicsDevice__global__Microsoft_UI_Composition_RenderingDeviceReplacedEventArgs_ : EventSource`1<TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_CompositionGraphicsDevice__global__Microsoft_UI_Composition_RenderingDeviceReplacedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_CompositionGraphicsDevice__global__Microsoft_UI_Composition_RenderingDeviceReplacedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_Core_CompositorController__object_ : EventSource`1<TypedEventHandler`2<CompositorController, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_Core_CompositorController__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_Core_CompositorController__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CompositorController, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CompositorController, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets__object_ : EventSource`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ISystemBackdropControllerWithTargets, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ISystemBackdropControllerWithTargets, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIsland__global__Microsoft_UI_Content_ContentIslandAutomationProviderRequestedEventArgs_ : EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIsland__global__Microsoft_UI_Content_ContentIslandAutomationProviderRequestedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIsland__global__Microsoft_UI_Content_ContentIslandAutomationProviderRequestedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ContentIsland, ContentIslandAutomationProviderRequestedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIsland__global__Microsoft_UI_Content_ContentIslandStateChangedEventArgs_ : EventSource`1<TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIsland__global__Microsoft_UI_Content_ContentIslandStateChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIsland__global__Microsoft_UI_Content_ContentIslandStateChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ContentIsland, ContentIslandStateChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIslandEnvironment__global__Microsoft_UI_Content_ContentEnvironmentSettingChangedEventArgs_ : EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIslandEnvironment__global__Microsoft_UI_Content_ContentEnvironmentSettingChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIslandEnvironment__global__Microsoft_UI_Content_ContentEnvironmentSettingChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentSettingChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIslandEnvironment__global__Microsoft_UI_Content_ContentEnvironmentStateChangedEventArgs_ : EventSource`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIslandEnvironment__global__Microsoft_UI_Content_ContentEnvironmentStateChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentIslandEnvironment__global__Microsoft_UI_Content_ContentEnvironmentStateChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ContentIslandEnvironment, ContentEnvironmentStateChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentSite__global__Microsoft_UI_Content_ContentSiteRequestedStateChangedEventArgs_ : EventSource`1<TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentSite__global__Microsoft_UI_Content_ContentSiteRequestedStateChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Content_ContentSite__global__Microsoft_UI_Content_ContentSiteRequestedStateChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ContentSite, ContentSiteRequestedStateChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__global__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs_ : EventSource`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__global__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__global__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DispatcherQueue, DispatcherQueueShutdownStartingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__object_ : EventSource`1<TypedEventHandler`2<DispatcherQueue, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueue__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DispatcherQueue, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DispatcherQueue, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueueTimer__object_ : EventSource`1<TypedEventHandler`2<DispatcherQueueTimer, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueueTimer__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Dispatching_DispatcherQueueTimer__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DispatcherQueueTimer, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DispatcherQueueTimer, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_DragDrop_DragDropManager__global__Microsoft_UI_Input_DragDrop_DropOperationTargetRequestedEventArgs_ : EventSource`1<TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_DragDrop_DragDropManager__global__Microsoft_UI_Input_DragDrop_DropOperationTargetRequestedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_DragDrop_DragDropManager__global__Microsoft_UI_Input_DragDrop_DropOperationTargetRequestedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DragDropManager, DropOperationTargetRequestedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_CrossSlidingEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_CrossSlidingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_CrossSlidingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, CrossSlidingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_DraggingEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, DraggingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_DraggingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_DraggingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, DraggingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, DraggingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_HoldingEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, HoldingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_HoldingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_HoldingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, HoldingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, HoldingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationCompletedEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationCompletedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationCompletedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, ManipulationCompletedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationInertiaStartingEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationInertiaStartingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationInertiaStartingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, ManipulationInertiaStartingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationStartedEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationStartedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationStartedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, ManipulationStartedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationUpdatedEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationUpdatedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_ManipulationUpdatedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, ManipulationUpdatedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_RightTappedEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_RightTappedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_RightTappedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, RightTappedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_TappedEventArgs_ : EventSource`1<TypedEventHandler`2<GestureRecognizer, TappedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_TappedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_GestureRecognizer__global__Microsoft_UI_Input_TappedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<GestureRecognizer, TappedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<GestureRecognizer, TappedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputActivationListener__global__Microsoft_UI_Input_InputActivationListenerActivationChangedEventArgs_ : EventSource`1<TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputActivationListener__global__Microsoft_UI_Input_InputActivationListenerActivationChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputActivationListener__global__Microsoft_UI_Input_InputActivationListenerActivationChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputActivationListener, InputActivationListenerActivationChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusChangedEventArgs_ : EventSource`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputFocusController, FocusChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputFocusController, FocusChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_ : EventSource`1<TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusController__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputFocusController, FocusNavigationRequestEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusNavigationHost__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_ : EventSource`1<TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusNavigationHost__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputFocusNavigationHost__global__Microsoft_UI_Input_FocusNavigationRequestEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputFocusNavigationHost, FocusNavigationRequestEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_CharacterReceivedEventArgs_ : EventSource`1<TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_CharacterReceivedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_CharacterReceivedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputKeyboardSource, CharacterReceivedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_ContextMenuKeyEventArgs_ : EventSource`1<TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_ContextMenuKeyEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_ContextMenuKeyEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputKeyboardSource, ContextMenuKeyEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_ : EventSource`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputKeyboardSource__global__Microsoft_UI_Input_KeyEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputKeyboardSource, KeyEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputKeyboardSource, KeyEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputLightDismissAction__global__Microsoft_UI_Input_InputLightDismissEventArgs_ : EventSource`1<TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputLightDismissAction__global__Microsoft_UI_Input_InputLightDismissEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputLightDismissAction__global__Microsoft_UI_Input_InputLightDismissEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputLightDismissAction, InputLightDismissEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteredMoveSizeEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteredMoveSizeEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteredMoveSizeEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, EnteredMoveSizeEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteringMoveSizeEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteringMoveSizeEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_EnteringMoveSizeEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, EnteringMoveSizeEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_ExitedMoveSizeEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_ExitedMoveSizeEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_ExitedMoveSizeEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, ExitedMoveSizeEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientCaptionTappedEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientCaptionTappedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientCaptionTappedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientCaptionTappedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientPointerEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientPointerEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientRegionsChangedEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientRegionsChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_NonClientRegionsChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, NonClientRegionsChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangedEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangingEventArgs_ : EventSource`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputNonClientPointerSource__global__Microsoft_UI_Input_WindowRectChangingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputNonClientPointerSource, WindowRectChangingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_ : EventSource`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Input_InputPointerSource__global__Microsoft_UI_Input_PointerEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<InputPointerSource, PointerEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<InputPointerSource, PointerEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_System_ThemeSettings__object_ : EventSource`1<TypedEventHandler`2<ThemeSettings, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_System_ThemeSettings__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_System_ThemeSettings__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ThemeSettings, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ThemeSettings, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowChangedEventArgs_ : EventSource`1<TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<AppWindow, AppWindowChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowClosingEventArgs_ : EventSource`1<TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowClosingEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__global__Microsoft_UI_Windowing_AppWindowClosingEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<AppWindow, AppWindowClosingEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__object_ : EventSource`1<TypedEventHandler`2<AppWindow, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_AppWindow__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<AppWindow, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<AppWindow, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__global__Microsoft_UI_Windowing_DisplayArea_ : EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__global__Microsoft_UI_Windowing_DisplayArea_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__global__Microsoft_UI_Windowing_DisplayArea_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DisplayAreaWatcher, DisplayArea> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DisplayAreaWatcher, DisplayArea>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__object_ : EventSource`1<TypedEventHandler`2<DisplayAreaWatcher, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_UI_Windowing_DisplayAreaWatcher__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<DisplayAreaWatcher, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<DisplayAreaWatcher, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Composition_CompositionBatchCompletedEventArgs_ : EventSource`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Composition_CompositionBatchCompletedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_object__global__Microsoft_UI_Composition_CompositionBatchCompletedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<object, CompositionBatchCompletedEventArgs>> CreateEventSourceState();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_UI_Composition_ICompositionSurface : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_UI_Composition_ICompositionSurface();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Windows_Storage_Streams_IRandomAccessStream : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Windows_Storage_Streams_IRandomAccessStream();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Float : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Float();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<float> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionAnimation : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionAnimation();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<CompositionAnimation> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionColorGradientStop : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionColorGradientStop();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<CompositionColorGradientStop> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionProjectedShadowCaster : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionProjectedShadowCaster();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<CompositionProjectedShadowCaster> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionProjectedShadowReceiver : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionProjectedShadowReceiver();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<CompositionProjectedShadowReceiver> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionShape : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_CompositionShape();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<CompositionShape> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Interactions_ICompositionInteractionSource : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Interactions_ICompositionInteractionSource();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<ICompositionInteractionSource> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Scenes_SceneComponent : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Scenes_SceneComponent();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<SceneComponent> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Scenes_SceneNode : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Scenes_SceneNode();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<SceneNode> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Visual : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Composition_Visual();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<Visual> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Input_PointerPoint : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Input_PointerPoint();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<PointerPoint> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Windowing_DisplayArea : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_UI_Windowing_DisplayArea();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<DisplayArea> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_ICompositionAnimationBase_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_ICompositionAnimationBase_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, ICompositionAnimationBase>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, SceneAttributeSemantic>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, string>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Float : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Float();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, Single[] items);
    private static float get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionAnimation : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionAnimation();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, CompositionAnimation[] items);
    private static CompositionAnimation get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionColorGradientStop : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionColorGradientStop();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, CompositionColorGradientStop[] items);
    private static CompositionColorGradientStop get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionProjectedShadowCaster : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionProjectedShadowCaster();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, CompositionProjectedShadowCaster[] items);
    private static CompositionProjectedShadowCaster get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionProjectedShadowReceiver : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionProjectedShadowReceiver();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, CompositionProjectedShadowReceiver[] items);
    private static CompositionProjectedShadowReceiver get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionShape : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_CompositionShape();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, CompositionShape[] items);
    private static CompositionShape get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Interactions_ICompositionInteractionSource : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Interactions_ICompositionInteractionSource();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, ICompositionInteractionSource[] items);
    private static ICompositionInteractionSource get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Scenes_SceneComponent : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Scenes_SceneComponent();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, SceneComponent[] items);
    private static SceneComponent get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Scenes_SceneNode : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Scenes_SceneNode();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, SceneNode[] items);
    private static SceneNode get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Visual : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Composition_Visual();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, Visual[] items);
    private static Visual get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Input_PointerPoint : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Input_PointerPoint();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, PointerPoint[] items);
    private static PointerPoint get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Windowing_DisplayArea : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_UI_Windowing_DisplayArea();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, DisplayArea[] items);
    private static DisplayArea get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_ICompositionAnimationBase_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_ICompositionAnimationBase_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, ICompositionAnimationBase> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, SceneAttributeSemantic> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, string> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_ICompositionAnimationBase : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_ICompositionAnimationBase();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static ICompositionAnimationBase get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static SceneAttributeSemantic get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static string get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__Microsoft_UI_Composition_ICompositionAnimationBase : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMap_2_String__Microsoft_UI_Composition_ICompositionAnimationBase();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static ICompositionAnimationBase Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static IReadOnlyDictionary`2<string, ICompositionAnimationBase> GetView(IObjectReference _obj);
    private static bool Insert(IObjectReference _obj, string key, ICompositionAnimationBase value);
    private static void Remove(IObjectReference _obj, string key);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMap_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static SceneAttributeSemantic Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static IReadOnlyDictionary`2<string, SceneAttributeSemantic> GetView(IObjectReference _obj);
    private static bool Insert(IObjectReference _obj, string key, SceneAttributeSemantic value);
    private static void Remove(IObjectReference _obj, string key);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMap_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static IReadOnlyDictionary`2<string, string> GetView(IObjectReference _obj);
    private static bool Insert(IObjectReference _obj, string key, string value);
    private static void Remove(IObjectReference _obj, string key);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__Microsoft_UI_Composition_ICompositionAnimationBase : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__Microsoft_UI_Composition_ICompositionAnimationBase();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static ICompositionAnimationBase Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__Microsoft_UI_Composition_Scenes_SceneAttributeSemantic();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static SceneAttributeSemantic Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Float : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Float();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static float GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<float> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, float value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, float value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, float value);
    private static void Append(IObjectReference _obj, float value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, Single[] items);
    private static void ReplaceAll(IObjectReference _obj, Single[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_CompositionColorGradientStop : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_CompositionColorGradientStop();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CompositionColorGradientStop GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<CompositionColorGradientStop> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, CompositionColorGradientStop value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, CompositionColorGradientStop value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, CompositionColorGradientStop value);
    private static void Append(IObjectReference _obj, CompositionColorGradientStop value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, CompositionColorGradientStop[] items);
    private static void ReplaceAll(IObjectReference _obj, CompositionColorGradientStop[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_CompositionShape : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_CompositionShape();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CompositionShape GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<CompositionShape> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, CompositionShape value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, CompositionShape value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, CompositionShape value);
    private static void Append(IObjectReference _obj, CompositionShape value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, CompositionShape[] items);
    private static void ReplaceAll(IObjectReference _obj, CompositionShape[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_Scenes_SceneComponent : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_Scenes_SceneComponent();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static SceneComponent GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<SceneComponent> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, SceneComponent value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, SceneComponent value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, SceneComponent value);
    private static void Append(IObjectReference _obj, SceneComponent value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, SceneComponent[] items);
    private static void ReplaceAll(IObjectReference _obj, SceneComponent[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_Scenes_SceneNode : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_UI_Composition_Scenes_SceneNode();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static SceneNode GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<SceneNode> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, SceneNode value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, SceneNode value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, SceneNode value);
    private static void Append(IObjectReference _obj, SceneNode value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, SceneNode[] items);
    private static void ReplaceAll(IObjectReference _obj, SceneNode[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_UI_Input_PointerPoint();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PointerPoint GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<PointerPoint> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, PointerPoint value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, PointerPoint value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, PointerPoint value);
    private static void Append(IObjectReference _obj, PointerPoint value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PointerPoint[] items);
    private static void ReplaceAll(IObjectReference _obj, PointerPoint[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Float : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Float();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static float GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, float value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, Single[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_CompositionColorGradientStop : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_CompositionColorGradientStop();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CompositionColorGradientStop GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, CompositionColorGradientStop value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, CompositionColorGradientStop[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_CompositionShape : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_CompositionShape();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CompositionShape GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, CompositionShape value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, CompositionShape[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_Scenes_SceneComponent : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_Scenes_SceneComponent();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static SceneComponent GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, SceneComponent value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, SceneComponent[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_Scenes_SceneNode : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Composition_Scenes_SceneNode();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static SceneNode GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, SceneNode value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, SceneNode[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Input_PointerPoint : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Input_PointerPoint();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PointerPoint GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, PointerPoint value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PointerPoint[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Windowing_DisplayArea : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_UI_Windowing_DisplayArea();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static DisplayArea GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, DisplayArea value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, DisplayArea[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Composition_ICompositionSurface : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Microsoft_UI_Composition_ICompositionSurface();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static ICompositionSurface GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<ICompositionSurface> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<ICompositionSurface> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Windows_ApplicationModel_DataTransfer_DataPackageOperation();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static DataPackageOperation GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<DataPackageOperation> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<DataPackageOperation> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IRandomAccessStream : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IRandomAccessStream();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IRandomAccessStream GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<IRandomAccessStream> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<IRandomAccessStream> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Display_DisplayInformation__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Display_DisplayInformation__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DisplayInformation sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_CompositionCapabilities__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_CompositionCapabilities__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CompositionCapabilities sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_CompositionGraphicsDevice__Microsoft_UI_Composition_RenderingDeviceReplacedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_CompositionGraphicsDevice__Microsoft_UI_Composition_RenderingDeviceReplacedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CompositionGraphicsDevice sender, RenderingDeviceReplacedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_Core_CompositorController__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_Core_CompositorController__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CompositorController sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Composition_SystemBackdrops_ISystemBackdropControllerWithTargets__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ISystemBackdropControllerWithTargets sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIsland__Microsoft_UI_Content_ContentIslandAutomationProviderRequestedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIsland__Microsoft_UI_Content_ContentIslandAutomationProviderRequestedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ContentIsland sender, ContentIslandAutomationProviderRequestedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIsland__Microsoft_UI_Content_ContentIslandStateChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIsland__Microsoft_UI_Content_ContentIslandStateChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ContentIsland sender, ContentIslandStateChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIslandEnvironment__Microsoft_UI_Content_ContentEnvironmentSettingChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIslandEnvironment__Microsoft_UI_Content_ContentEnvironmentSettingChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ContentIslandEnvironment sender, ContentEnvironmentSettingChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIslandEnvironment__Microsoft_UI_Content_ContentEnvironmentStateChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentIslandEnvironment__Microsoft_UI_Content_ContentEnvironmentStateChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ContentIslandEnvironment sender, ContentEnvironmentStateChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentSite__Microsoft_UI_Content_ContentSiteRequestedStateChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Content_ContentSite__Microsoft_UI_Content_ContentSiteRequestedStateChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ContentSite sender, ContentSiteRequestedStateChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Dispatching_DispatcherQueue__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Dispatching_DispatcherQueue__Microsoft_UI_Dispatching_DispatcherQueueShutdownStartingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DispatcherQueue sender, DispatcherQueueShutdownStartingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Dispatching_DispatcherQueue__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Dispatching_DispatcherQueue__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DispatcherQueue sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Dispatching_DispatcherQueueTimer__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Dispatching_DispatcherQueueTimer__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DispatcherQueueTimer sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_DragDrop_DragDropManager__Microsoft_UI_Input_DragDrop_DropOperationTargetRequestedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_DragDrop_DragDropManager__Microsoft_UI_Input_DragDrop_DropOperationTargetRequestedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DragDropManager sender, DropOperationTargetRequestedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_CrossSlidingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_CrossSlidingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, CrossSlidingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_DraggingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_DraggingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, DraggingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_HoldingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_HoldingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, HoldingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationCompletedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationCompletedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, ManipulationCompletedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationInertiaStartingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationInertiaStartingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, ManipulationInertiaStartingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationStartedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationStartedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, ManipulationStartedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationUpdatedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_ManipulationUpdatedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, ManipulationUpdatedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_RightTappedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_RightTappedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, RightTappedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_TappedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_GestureRecognizer__Microsoft_UI_Input_TappedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, GestureRecognizer sender, TappedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputActivationListener__Microsoft_UI_Input_InputActivationListenerActivationChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputActivationListener__Microsoft_UI_Input_InputActivationListenerActivationChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputActivationListener sender, InputActivationListenerActivationChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputFocusController__Microsoft_UI_Input_FocusChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputFocusController__Microsoft_UI_Input_FocusChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputFocusController sender, FocusChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputFocusController__Microsoft_UI_Input_FocusNavigationRequestEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputFocusController__Microsoft_UI_Input_FocusNavigationRequestEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputFocusController sender, FocusNavigationRequestEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputFocusNavigationHost__Microsoft_UI_Input_FocusNavigationRequestEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputFocusNavigationHost__Microsoft_UI_Input_FocusNavigationRequestEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputFocusNavigationHost sender, FocusNavigationRequestEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputKeyboardSource__Microsoft_UI_Input_CharacterReceivedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputKeyboardSource__Microsoft_UI_Input_CharacterReceivedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputKeyboardSource sender, CharacterReceivedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputKeyboardSource__Microsoft_UI_Input_ContextMenuKeyEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputKeyboardSource__Microsoft_UI_Input_ContextMenuKeyEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputKeyboardSource sender, ContextMenuKeyEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputKeyboardSource__Microsoft_UI_Input_KeyEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputKeyboardSource__Microsoft_UI_Input_KeyEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputKeyboardSource sender, KeyEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputLightDismissAction__Microsoft_UI_Input_InputLightDismissEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputLightDismissAction__Microsoft_UI_Input_InputLightDismissEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputLightDismissAction sender, InputLightDismissEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_EnteredMoveSizeEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_EnteredMoveSizeEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, EnteredMoveSizeEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_EnteringMoveSizeEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_EnteringMoveSizeEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, EnteringMoveSizeEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_ExitedMoveSizeEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_ExitedMoveSizeEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, ExitedMoveSizeEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_NonClientCaptionTappedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_NonClientCaptionTappedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, NonClientCaptionTappedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_NonClientPointerEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_NonClientPointerEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, NonClientPointerEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_NonClientRegionsChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_NonClientRegionsChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, NonClientRegionsChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_WindowRectChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_WindowRectChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, WindowRectChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_WindowRectChangingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputNonClientPointerSource__Microsoft_UI_Input_WindowRectChangingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputNonClientPointerSource sender, WindowRectChangingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputPointerSource__Microsoft_UI_Input_PointerEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Input_InputPointerSource__Microsoft_UI_Input_PointerEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, InputPointerSource sender, PointerEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_System_ThemeSettings__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_System_ThemeSettings__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ThemeSettings sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_AppWindow__Microsoft_UI_Windowing_AppWindowChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_AppWindow__Microsoft_UI_Windowing_AppWindowChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, AppWindow sender, AppWindowChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_AppWindow__Microsoft_UI_Windowing_AppWindowClosingEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_AppWindow__Microsoft_UI_Windowing_AppWindowClosingEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, AppWindow sender, AppWindowClosingEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_AppWindow__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_AppWindow__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, AppWindow sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_DisplayAreaWatcher__Microsoft_UI_Windowing_DisplayArea : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_DisplayAreaWatcher__Microsoft_UI_Windowing_DisplayArea();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DisplayAreaWatcher sender, DisplayArea args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_DisplayAreaWatcher__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_UI_Windowing_DisplayAreaWatcher__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, DisplayAreaWatcher sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_object__Microsoft_UI_Composition_CompositionBatchCompletedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_object__Microsoft_UI_Composition_CompositionBatchCompletedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, object sender, CompositionBatchCompletedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.ProjectionInitializer : object {
    [ModuleInitializerAttribute]
public static void InitalizeProjection();
}
internal static class WinRT.ProjectionTypesInitializer : object {
    internal static Dictionary`2<string, string> TypeNameToBaseTypeNameMapping;
    private static ProjectionTypesInitializer();
    [ModuleInitializerAttribute]
internal static void InitalizeProjectionTypes();
}
