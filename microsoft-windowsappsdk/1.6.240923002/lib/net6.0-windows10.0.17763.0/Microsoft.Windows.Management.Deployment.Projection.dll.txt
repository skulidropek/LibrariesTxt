[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions : ValueType {
    public static IObjectReference CreateMarshaler(AddPackageOptions obj);
    public static ObjectReferenceValue CreateMarshaler2(AddPackageOptions obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AddPackageOptions FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AddPackageOptions obj);
    public static MarshalerArray<AddPackageOptions> CreateMarshalerArray(AddPackageOptions[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AddPackageOptions[] FromAbiArray(object box);
    public static void CopyAbiArray(AddPackageOptions[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AddPackageOptions[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AddPackageOptions> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.AddPackageOptionsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptions : ValueType {
    public static IObjectReference CreateMarshaler(EnsureReadyOptions obj);
    public static ObjectReferenceValue CreateMarshaler2(EnsureReadyOptions obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EnsureReadyOptions FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EnsureReadyOptions obj);
    public static MarshalerArray<EnsureReadyOptions> CreateMarshalerArray(EnsureReadyOptions[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EnsureReadyOptions[] FromAbiArray(object box);
    public static void CopyAbiArray(EnsureReadyOptions[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EnsureReadyOptions[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EnsureReadyOptions> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptionsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("E3DB7F39-F9D0-5884-BDEF-6153B54574A3")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptions {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AllowUnsigned(IObjectReference _obj);
    internal static void set_AllowUnsigned(IObjectReference _obj, bool value);
    internal static bool get_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj);
    internal static void set_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj, bool value);
    internal static IList`1<Uri> get_DependencyPackageUris(IObjectReference _obj);
    internal static bool get_DeveloperMode(IObjectReference _obj);
    internal static void set_DeveloperMode(IObjectReference _obj, bool value);
    internal static IDictionary`2<Uri, string> get_ExpectedDigests(IObjectReference _obj);
    internal static Uri get_ExternalLocationUri(IObjectReference _obj);
    internal static void set_ExternalLocationUri(IObjectReference _obj, Uri value);
    internal static bool get_ForceAppShutdown(IObjectReference _obj);
    internal static void set_ForceAppShutdown(IObjectReference _obj, bool value);
    internal static bool get_ForceTargetAppShutdown(IObjectReference _obj);
    internal static void set_ForceTargetAppShutdown(IObjectReference _obj, bool value);
    internal static bool get_ForceUpdateFromAnyVersion(IObjectReference _obj);
    internal static void set_ForceUpdateFromAnyVersion(IObjectReference _obj, bool value);
    internal static bool get_InstallAllResources(IObjectReference _obj);
    internal static void set_InstallAllResources(IObjectReference _obj, bool value);
    internal static bool get_IsExpectedDigestsSupported(IObjectReference _obj);
    internal static bool get_IsLimitToExistingPackagesSupported(IObjectReference _obj);
    internal static bool get_LimitToExistingPackages(IObjectReference _obj);
    internal static void set_LimitToExistingPackages(IObjectReference _obj, bool value);
    internal static IList`1<string> get_OptionalPackageFamilyNames(IObjectReference _obj);
    internal static IList`1<Uri> get_OptionalPackageUris(IObjectReference _obj);
    internal static IList`1<Uri> get_RelatedPackageUris(IObjectReference _obj);
    internal static bool get_RequiredContentGroupOnly(IObjectReference _obj);
    internal static void set_RequiredContentGroupOnly(IObjectReference _obj, bool value);
    internal static bool get_RetainFilesOnFailure(IObjectReference _obj);
    internal static void set_RetainFilesOnFailure(IObjectReference _obj, bool value);
    internal static bool get_StageInPlace(IObjectReference _obj);
    internal static void set_StageInPlace(IObjectReference _obj, bool value);
    internal static StubPackageOption get_StubPackageOption(IObjectReference _obj);
    internal static void set_StubPackageOption(IObjectReference _obj, StubPackageOption value);
    internal static PackageVolume get_TargetVolume(IObjectReference _obj);
    internal static void set_TargetVolume(IObjectReference _obj, PackageVolume value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("20102D03-EC44-5C2B-8FD6-1104DC99755D")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions {
}
[GuidAttribute("EEFA9259-B13A-50A3-919E-AE116D83C0DA")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2 {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_RegisterNewerIfAvailable(IObjectReference _obj);
    internal static void set_RegisterNewerIfAvailable(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static AddPackageOptions get_AddPackageOptions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F41717D8-5AB2-57AC-83CD-D0C48CC784CD")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager {
}
[GuidAttribute("6FC6D0F3-F9DD-5C14-9D3F-077165EDDF98")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2 {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailable(IObjectReference _obj, string package);
    internal static PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailableByUri(IObjectReference _obj, Uri packageUri);
    internal static PackageReadyOrNewerAvailableStatus IsPackageSetReadyOrNewerAvailable(IObjectReference _obj, PackageSet packageSet);
    internal static bool IsPackageProvisioned(IObjectReference _obj, string package);
    internal static bool IsPackageProvisionedByUri(IObjectReference _obj, Uri packageUri);
    internal static bool IsPackageSetProvisioned(IObjectReference _obj, PackageSet packageSet);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsPackageReady(IObjectReference _obj, string package);
    internal static bool IsPackageReadyByUri(IObjectReference _obj, Uri packageUri);
    internal static bool IsPackageSetReady(IObjectReference _obj, PackageSet packageSet);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyAsync(IObjectReference _obj, string package, EnsureReadyOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyByUriAsync(IObjectReference _obj, Uri packageUri, EnsureReadyOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageSetReadyAsync(IObjectReference _obj, PackageSet packageSet, EnsureReadyOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageAsync(IObjectReference _obj, string package, AddPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageByUriAsync(IObjectReference _obj, Uri packageUri, AddPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageSetAsync(IObjectReference _obj, PackageSet packageSet, AddPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageAsync(IObjectReference _obj, string package, StagePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageByUriAsync(IObjectReference _obj, Uri packageUri, StagePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageSetAsync(IObjectReference _obj, PackageSet packageSet, StagePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageAsync(IObjectReference _obj, string package, RegisterPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageByUriAsync(IObjectReference _obj, Uri packageUri, RegisterPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageSetAsync(IObjectReference _obj, PackageSet packageSet, RegisterPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageAsync(IObjectReference _obj, string package, RemovePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFullNameAsync(IObjectReference _obj, string packageFullName, RemovePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFamilyNameAsync(IObjectReference _obj, string packageFamilyName, RemovePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByUriAsync(IObjectReference _obj, Uri packageUri, RemovePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageSetAsync(IObjectReference _obj, PackageSet packageSet, RemovePackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageAsync(IObjectReference _obj, string package);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageByUriAsync(IObjectReference _obj, Uri packageUri);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageSetAsync(IObjectReference _obj, PackageSet packageSet);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageAsync(IObjectReference _obj, string package);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageByUriAsync(IObjectReference _obj, Uri packageUri);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageSetAsync(IObjectReference _obj, PackageSet packageSet);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageAsync(IObjectReference _obj, string package, ProvisionPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageByUriAsync(IObjectReference _obj, Uri packageUri, ProvisionPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageSetAsync(IObjectReference _obj, PackageSet packageSet, ProvisionPackageOptions options);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageAsync(IObjectReference _obj, string package);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageByUriAsync(IObjectReference _obj, Uri packageUri);
    internal static IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageSetAsync(IObjectReference _obj, PackageSet packageSet);
    internal static bool IsPackageRegistrationPending(IObjectReference _obj, string packageFamilyName);
    internal static bool IsPackageRegistrationPendingForUser(IObjectReference _obj, string userSecurityId, string packageFamilyName);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics {
}
[GuidAttribute("0EC31486-00B5-5937-8CD4-759260FDC4A2")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2 {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsPackageDeploymentFeatureSupported(IObjectReference _obj, PackageDeploymentFeature feature);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PackageDeploymentManager GetDefault(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D6B99601-18C2-599E-8BD1-40A9310AD263")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResult {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResultMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Guid get_ActivityId(IObjectReference _obj);
    internal static Exception get_Error(IObjectReference _obj);
    internal static string get_ErrorText(IObjectReference _obj);
    internal static Exception get_ExtendedError(IObjectReference _obj);
    internal static PackageDeploymentStatus get_Status(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6BF0FD29-6C2A-58D1-AF0C-ABD2EAC45E29")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManager {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PackageSetRuntimeDisposition AddPackageSet(IObjectReference _obj, PackageSet packageSet);
    internal static PackageSetRuntimeDisposition AddPackageSet(IObjectReference _obj, PackageSet packageSet, CreatePackageDependencyOptions createOptions, AddPackageDependencyOptions addOptions);
    internal static void RemovePackageSet(IObjectReference _obj, PackageSetRuntimeDisposition packageSetRuntimeDisposition);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("790947DE-01D4-5858-AA69-9C9390FB7D3E")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PackageRuntimeManager GetDefault(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("229FDF93-8529-5F8D-988C-AF8A39AD46F7")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageSet {
}
[GuidAttribute("8F254E15-C371-550F-B4E8-3F0BB1AE375F")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageSetItem {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_Id(IObjectReference _obj);
    internal static void set_Id(IObjectReference _obj, string value);
    internal static PackageVersion get_MinVersion(IObjectReference _obj);
    internal static void set_MinVersion(IObjectReference _obj, PackageVersion value);
    internal static string get_PackageFamilyName(IObjectReference _obj);
    internal static void set_PackageFamilyName(IObjectReference _obj, string value);
    internal static Uri get_PackageUri(IObjectReference _obj);
    internal static void set_PackageUri(IObjectReference _obj, Uri value);
    internal static PackageDependencyProcessorArchitectures get_ProcessorArchitectureFilter(IObjectReference _obj);
    internal static void set_ProcessorArchitectureFilter(IObjectReference _obj, PackageDependencyProcessorArchitectures value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDispositionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PackageDependencyContextId get_PackageDependencyContextId(IObjectReference _obj);
    internal static string get_PackageDependencyId(IObjectReference _obj);
    internal static string get_PackageFullName(IObjectReference _obj);
    internal static string get_PackageSetItemId(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageSetMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_Id(IObjectReference _obj);
    internal static void set_Id(IObjectReference _obj, string value);
    internal static IList`1<PackageSetItem> get_Items(IObjectReference _obj);
    internal static Uri get_PackageUri(IObjectReference _obj);
    internal static void set_PackageUri(IObjectReference _obj, Uri value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDispositionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_PackageSetId(IObjectReference _obj);
    internal static void set_PackageSetId(IObjectReference _obj, string value);
    internal static IList`1<PackageSetItemRuntimeDisposition> get_PackageSetItemRuntimeDispositions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9C9710F4-795A-58B3-93F4-C991C4329C49")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageVolume {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsRepairNeeded(IObjectReference _obj);
    internal static void Repair(IObjectReference _obj);
    internal static bool get_IsAppxInstallSupported(IObjectReference _obj);
    internal static bool get_IsFullTrustPackageSupported(IObjectReference _obj);
    internal static bool get_IsSystemVolume(IObjectReference _obj);
    internal static string get_MountPoint(IObjectReference _obj);
    internal static string get_Name(IObjectReference _obj);
    internal static string get_PackageStorePath(IObjectReference _obj);
    internal static bool get_SupportsHardLinks(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4C731835-8BC0-5313-9B56-8A4100EAEA01")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStatics {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IList`1<PackageVolume> FindPackageVolumes(IObjectReference _obj);
    internal static PackageVolume FindPackageVolumeByPath(IObjectReference _obj, string packageStorePath);
    internal static PackageVolume FindPackageVolumeByName(IObjectReference _obj, string name);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("415E300F-D1E3-581E-A114-76D277B06136")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptions {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsOptionalPackageFamilyNamesSupported(IObjectReference _obj);
    internal static bool get_IsProjectionOrderPackageFamilyNamesSupported(IObjectReference _obj);
    internal static IList`1<string> get_OptionalPackageFamilyNames(IObjectReference _obj);
    internal static IList`1<string> get_ProjectionOrderPackageFamilyNames(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("83068623-2046-505F-8425-55226C0F84CC")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptions {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AllowUnsigned(IObjectReference _obj);
    internal static void set_AllowUnsigned(IObjectReference _obj, bool value);
    internal static PackageVolume get_AppDataVolume(IObjectReference _obj);
    internal static void set_AppDataVolume(IObjectReference _obj, PackageVolume value);
    internal static bool get_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj);
    internal static void set_DeferRegistrationWhenPackagesAreInUse(IObjectReference _obj, bool value);
    internal static IList`1<string> get_DependencyPackageFamilyNames(IObjectReference _obj);
    internal static IList`1<Uri> get_DependencyPackageUris(IObjectReference _obj);
    internal static bool get_DeveloperMode(IObjectReference _obj);
    internal static void set_DeveloperMode(IObjectReference _obj, bool value);
    internal static IDictionary`2<Uri, string> get_ExpectedDigests(IObjectReference _obj);
    internal static Uri get_ExternalLocationUri(IObjectReference _obj);
    internal static void set_ExternalLocationUri(IObjectReference _obj, Uri value);
    internal static bool get_ForceAppShutdown(IObjectReference _obj);
    internal static void set_ForceAppShutdown(IObjectReference _obj, bool value);
    internal static bool get_ForceTargetAppShutdown(IObjectReference _obj);
    internal static void set_ForceTargetAppShutdown(IObjectReference _obj, bool value);
    internal static bool get_ForceUpdateFromAnyVersion(IObjectReference _obj);
    internal static void set_ForceUpdateFromAnyVersion(IObjectReference _obj, bool value);
    internal static bool get_InstallAllResources(IObjectReference _obj);
    internal static void set_InstallAllResources(IObjectReference _obj, bool value);
    internal static bool get_IsExpectedDigestsSupported(IObjectReference _obj);
    internal static IList`1<string> get_OptionalPackageFamilyNames(IObjectReference _obj);
    internal static bool get_StageInPlace(IObjectReference _obj);
    internal static void set_StageInPlace(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E7C90595-9A44-5046-8EBF-41ED326B200E")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptions {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_FailIfNotFound(IObjectReference _obj);
    internal static void set_FailIfNotFound(IObjectReference _obj, bool value);
    internal static bool get_PreserveApplicationData(IObjectReference _obj);
    internal static void set_PreserveApplicationData(IObjectReference _obj, bool value);
    internal static bool get_PreserveRoamableApplicationData(IObjectReference _obj);
    internal static void set_PreserveRoamableApplicationData(IObjectReference _obj, bool value);
    internal static bool get_RemoveForAllUsers(IObjectReference _obj);
    internal static void set_RemoveForAllUsers(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E")]
internal interface ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptions {
}
internal static class ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AllowUnsigned(IObjectReference _obj);
    internal static void set_AllowUnsigned(IObjectReference _obj, bool value);
    internal static IList`1<Uri> get_DependencyPackageUris(IObjectReference _obj);
    internal static bool get_DeveloperMode(IObjectReference _obj);
    internal static void set_DeveloperMode(IObjectReference _obj, bool value);
    internal static IDictionary`2<Uri, string> get_ExpectedDigests(IObjectReference _obj);
    internal static Uri get_ExternalLocationUri(IObjectReference _obj);
    internal static void set_ExternalLocationUri(IObjectReference _obj, Uri value);
    internal static bool get_ForceUpdateFromAnyVersion(IObjectReference _obj);
    internal static void set_ForceUpdateFromAnyVersion(IObjectReference _obj, bool value);
    internal static bool get_InstallAllResources(IObjectReference _obj);
    internal static void set_InstallAllResources(IObjectReference _obj, bool value);
    internal static bool get_IsExpectedDigestsSupported(IObjectReference _obj);
    internal static IList`1<string> get_OptionalPackageFamilyNames(IObjectReference _obj);
    internal static IList`1<Uri> get_OptionalPackageUris(IObjectReference _obj);
    internal static IList`1<Uri> get_RelatedPackageUris(IObjectReference _obj);
    internal static bool get_RequiredContentGroupOnly(IObjectReference _obj);
    internal static void set_RequiredContentGroupOnly(IObjectReference _obj, bool value);
    internal static bool get_StageInPlace(IObjectReference _obj);
    internal static void set_StageInPlace(IObjectReference _obj, bool value);
    internal static StubPackageOption get_StubPackageOption(IObjectReference _obj);
    internal static void set_StubPackageOption(IObjectReference _obj, StubPackageOption value);
    internal static PackageVolume get_TargetVolume(IObjectReference _obj);
    internal static void set_TargetVolume(IObjectReference _obj, PackageVolume value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManager : ValueType {
    public static IObjectReference CreateMarshaler(PackageDeploymentManager obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageDeploymentManager obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageDeploymentManager FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageDeploymentManager obj);
    public static MarshalerArray<PackageDeploymentManager> CreateMarshalerArray(PackageDeploymentManager[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageDeploymentManager[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageDeploymentManager[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageDeploymentManager[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageDeploymentManager> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManagerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentResult : ValueType {
    public static IObjectReference CreateMarshaler(PackageDeploymentResult obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageDeploymentResult obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageDeploymentResult FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageDeploymentResult obj);
    public static MarshalerArray<PackageDeploymentResult> CreateMarshalerArray(PackageDeploymentResult[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageDeploymentResult[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageDeploymentResult[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageDeploymentResult[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageDeploymentResult> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentResultRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManager : ValueType {
    public static IObjectReference CreateMarshaler(PackageRuntimeManager obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageRuntimeManager obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageRuntimeManager FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageRuntimeManager obj);
    public static MarshalerArray<PackageRuntimeManager> CreateMarshalerArray(PackageRuntimeManager[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageRuntimeManager[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageRuntimeManager[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageRuntimeManager[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageRuntimeManager> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManagerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageSet : ValueType {
    public static IObjectReference CreateMarshaler(PackageSet obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageSet obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageSet FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageSet obj);
    public static MarshalerArray<PackageSet> CreateMarshalerArray(PackageSet[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageSet[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageSet[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageSet[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageSet> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageSetItem : ValueType {
    public static IObjectReference CreateMarshaler(PackageSetItem obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageSetItem obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageSetItem FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageSetItem obj);
    public static MarshalerArray<PackageSetItem> CreateMarshalerArray(PackageSetItem[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageSetItem[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageSetItem[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageSetItem[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageSetItem> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition : ValueType {
    public static IObjectReference CreateMarshaler(PackageSetItemRuntimeDisposition obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageSetItemRuntimeDisposition obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageSetItemRuntimeDisposition FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageSetItemRuntimeDisposition obj);
    public static MarshalerArray<PackageSetItemRuntimeDisposition> CreateMarshalerArray(PackageSetItemRuntimeDisposition[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageSetItemRuntimeDisposition[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageSetItemRuntimeDisposition[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageSetItemRuntimeDisposition[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageSetItemRuntimeDisposition> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDispositionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageSetRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition : ValueType {
    public static IObjectReference CreateMarshaler(PackageSetRuntimeDisposition obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageSetRuntimeDisposition obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageSetRuntimeDisposition FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageSetRuntimeDisposition obj);
    public static MarshalerArray<PackageSetRuntimeDisposition> CreateMarshalerArray(PackageSetRuntimeDisposition[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageSetRuntimeDisposition[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageSetRuntimeDisposition[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageSetRuntimeDisposition[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageSetRuntimeDisposition> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDispositionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.PackageVolume : ValueType {
    public static IObjectReference CreateMarshaler(PackageVolume obj);
    public static ObjectReferenceValue CreateMarshaler2(PackageVolume obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PackageVolume FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PackageVolume obj);
    public static MarshalerArray<PackageVolume> CreateMarshalerArray(PackageVolume[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PackageVolume[] FromAbiArray(object box);
    public static void CopyAbiArray(PackageVolume[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PackageVolume[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PackageVolume> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.PackageVolumeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptions : ValueType {
    public static IObjectReference CreateMarshaler(ProvisionPackageOptions obj);
    public static ObjectReferenceValue CreateMarshaler2(ProvisionPackageOptions obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ProvisionPackageOptions FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ProvisionPackageOptions obj);
    public static MarshalerArray<ProvisionPackageOptions> CreateMarshalerArray(ProvisionPackageOptions[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ProvisionPackageOptions[] FromAbiArray(object box);
    public static void CopyAbiArray(ProvisionPackageOptions[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ProvisionPackageOptions[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ProvisionPackageOptions> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptionsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptions : ValueType {
    public static IObjectReference CreateMarshaler(RegisterPackageOptions obj);
    public static ObjectReferenceValue CreateMarshaler2(RegisterPackageOptions obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RegisterPackageOptions FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RegisterPackageOptions obj);
    public static MarshalerArray<RegisterPackageOptions> CreateMarshalerArray(RegisterPackageOptions[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RegisterPackageOptions[] FromAbiArray(object box);
    public static void CopyAbiArray(RegisterPackageOptions[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RegisterPackageOptions[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RegisterPackageOptions> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptionsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions : ValueType {
    public static IObjectReference CreateMarshaler(RemovePackageOptions obj);
    public static ObjectReferenceValue CreateMarshaler2(RemovePackageOptions obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RemovePackageOptions FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RemovePackageOptions obj);
    public static MarshalerArray<RemovePackageOptions> CreateMarshalerArray(RemovePackageOptions[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RemovePackageOptions[] FromAbiArray(object box);
    public static void CopyAbiArray(RemovePackageOptions[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RemovePackageOptions[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RemovePackageOptions> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptionsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Management.Deployment.StagePackageOptions : ValueType {
    public static IObjectReference CreateMarshaler(StagePackageOptions obj);
    public static ObjectReferenceValue CreateMarshaler2(StagePackageOptions obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static StagePackageOptions FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(StagePackageOptions obj);
    public static MarshalerArray<StagePackageOptions> CreateMarshalerArray(StagePackageOptions[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static StagePackageOptions[] FromAbiArray(object box);
    public static void CopyAbiArray(StagePackageOptions[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(StagePackageOptions[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<StagePackageOptions> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Management.Deployment.StagePackageOptionsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.AddPackageOptions")]
[AddPackageOptionsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IAddPackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.AddPackageOptions : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AllowUnsigned { get; public set; }
    public bool DeferRegistrationWhenPackagesAreInUse { get; public set; }
    public IList`1<Uri> DependencyPackageUris { get; }
    public bool DeveloperMode { get; public set; }
    public IDictionary`2<Uri, string> ExpectedDigests { get; }
    public Uri ExternalLocationUri { get; public set; }
    public bool ForceAppShutdown { get; public set; }
    public bool ForceTargetAppShutdown { get; public set; }
    public bool ForceUpdateFromAnyVersion { get; public set; }
    public bool InstallAllResources { get; public set; }
    public bool IsExpectedDigestsSupported { get; }
    public bool IsLimitToExistingPackagesSupported { get; }
    public bool LimitToExistingPackages { get; public set; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public IList`1<Uri> OptionalPackageUris { get; }
    public IList`1<Uri> RelatedPackageUris { get; }
    public bool RequiredContentGroupOnly { get; public set; }
    public bool RetainFilesOnFailure { get; public set; }
    public bool StageInPlace { get; public set; }
    public StubPackageOption StubPackageOption { get; public set; }
    public PackageVolume TargetVolume { get; public set; }
    internal AddPackageOptions(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IAddPackageOptions();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_AddPackageOptions();
    public static AddPackageOptions FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AddPackageOptions x, AddPackageOptions y);
    public static bool op_Inequality(AddPackageOptions x, AddPackageOptions y);
    public sealed virtual bool Equals(AddPackageOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_AllowUnsigned();
    public void set_AllowUnsigned(bool value);
    public bool get_DeferRegistrationWhenPackagesAreInUse();
    public void set_DeferRegistrationWhenPackagesAreInUse(bool value);
    public IList`1<Uri> get_DependencyPackageUris();
    public bool get_DeveloperMode();
    public void set_DeveloperMode(bool value);
    public IDictionary`2<Uri, string> get_ExpectedDigests();
    public Uri get_ExternalLocationUri();
    public void set_ExternalLocationUri(Uri value);
    public bool get_ForceAppShutdown();
    public void set_ForceAppShutdown(bool value);
    public bool get_ForceTargetAppShutdown();
    public void set_ForceTargetAppShutdown(bool value);
    public bool get_ForceUpdateFromAnyVersion();
    public void set_ForceUpdateFromAnyVersion(bool value);
    public bool get_InstallAllResources();
    public void set_InstallAllResources(bool value);
    public bool get_IsExpectedDigestsSupported();
    public bool get_IsLimitToExistingPackagesSupported();
    public bool get_LimitToExistingPackages();
    public void set_LimitToExistingPackages(bool value);
    public IList`1<string> get_OptionalPackageFamilyNames();
    public IList`1<Uri> get_OptionalPackageUris();
    public IList`1<Uri> get_RelatedPackageUris();
    public bool get_RequiredContentGroupOnly();
    public void set_RequiredContentGroupOnly(bool value);
    public bool get_RetainFilesOnFailure();
    public void set_RetainFilesOnFailure(bool value);
    public bool get_StageInPlace();
    public void set_StageInPlace(bool value);
    public StubPackageOption get_StubPackageOption();
    public void set_StubPackageOption(StubPackageOption value);
    public PackageVolume get_TargetVolume();
    public void set_TargetVolume(PackageVolume value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.EnsureReadyOptions")]
[EnsureReadyOptionsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IEnsureReadyOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.EnsureReadyOptions : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2 { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public AddPackageOptions AddPackageOptions { get; }
    public bool RegisterNewerIfAvailable { get; public set; }
    internal EnsureReadyOptions(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions();
    private IObjectReference Make___objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IEnsureReadyOptions2();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_EnsureReadyOptions();
    public static EnsureReadyOptions FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EnsureReadyOptions x, EnsureReadyOptions y);
    public static bool op_Inequality(EnsureReadyOptions x, EnsureReadyOptions y);
    public sealed virtual bool Equals(EnsureReadyOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public AddPackageOptions get_AddPackageOptions();
    public bool get_RegisterNewerIfAvailable();
    public void set_RegisterNewerIfAvailable(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("E3DB7F39-F9D0-5884-BDEF-6153B54574A3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IAddPackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IAddPackageOptions {
    public bool AllowUnsigned { get; public set; }
    public bool DeferRegistrationWhenPackagesAreInUse { get; public set; }
    public IList`1<Uri> DependencyPackageUris { get; }
    public bool DeveloperMode { get; public set; }
    public IDictionary`2<Uri, string> ExpectedDigests { get; }
    public Uri ExternalLocationUri { get; public set; }
    public bool ForceAppShutdown { get; public set; }
    public bool ForceTargetAppShutdown { get; public set; }
    public bool ForceUpdateFromAnyVersion { get; public set; }
    public bool InstallAllResources { get; public set; }
    public bool IsExpectedDigestsSupported { get; }
    public bool IsLimitToExistingPackagesSupported { get; }
    public bool LimitToExistingPackages { get; public set; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public IList`1<Uri> OptionalPackageUris { get; }
    public IList`1<Uri> RelatedPackageUris { get; }
    public bool RequiredContentGroupOnly { get; public set; }
    public bool RetainFilesOnFailure { get; public set; }
    public bool StageInPlace { get; public set; }
    public StubPackageOption StubPackageOption { get; public set; }
    public PackageVolume TargetVolume { get; public set; }
    public abstract virtual bool get_AllowUnsigned();
    public abstract virtual void set_AllowUnsigned(bool value);
    public abstract virtual bool get_DeferRegistrationWhenPackagesAreInUse();
    public abstract virtual void set_DeferRegistrationWhenPackagesAreInUse(bool value);
    public abstract virtual IList`1<Uri> get_DependencyPackageUris();
    public abstract virtual bool get_DeveloperMode();
    public abstract virtual void set_DeveloperMode(bool value);
    public abstract virtual IDictionary`2<Uri, string> get_ExpectedDigests();
    public abstract virtual Uri get_ExternalLocationUri();
    public abstract virtual void set_ExternalLocationUri(Uri value);
    public abstract virtual bool get_ForceAppShutdown();
    public abstract virtual void set_ForceAppShutdown(bool value);
    public abstract virtual bool get_ForceTargetAppShutdown();
    public abstract virtual void set_ForceTargetAppShutdown(bool value);
    public abstract virtual bool get_ForceUpdateFromAnyVersion();
    public abstract virtual void set_ForceUpdateFromAnyVersion(bool value);
    public abstract virtual bool get_InstallAllResources();
    public abstract virtual void set_InstallAllResources(bool value);
    public abstract virtual bool get_IsExpectedDigestsSupported();
    public abstract virtual bool get_IsLimitToExistingPackagesSupported();
    public abstract virtual bool get_LimitToExistingPackages();
    public abstract virtual void set_LimitToExistingPackages(bool value);
    public abstract virtual IList`1<string> get_OptionalPackageFamilyNames();
    public abstract virtual IList`1<Uri> get_OptionalPackageUris();
    public abstract virtual IList`1<Uri> get_RelatedPackageUris();
    public abstract virtual bool get_RequiredContentGroupOnly();
    public abstract virtual void set_RequiredContentGroupOnly(bool value);
    public abstract virtual bool get_RetainFilesOnFailure();
    public abstract virtual void set_RetainFilesOnFailure(bool value);
    public abstract virtual bool get_StageInPlace();
    public abstract virtual void set_StageInPlace(bool value);
    public abstract virtual StubPackageOption get_StubPackageOption();
    public abstract virtual void set_StubPackageOption(StubPackageOption value);
    public abstract virtual PackageVolume get_TargetVolume();
    public abstract virtual void set_TargetVolume(PackageVolume value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("20102D03-EC44-5C2B-8FD6-1104DC99755D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IEnsureReadyOptions {
    public AddPackageOptions AddPackageOptions { get; }
    public abstract virtual AddPackageOptions get_AddPackageOptions();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("EEFA9259-B13A-50A3-919E-AE116D83C0DA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "131072")]
internal interface Microsoft.Windows.Management.Deployment.IEnsureReadyOptions2 {
    public bool RegisterNewerIfAvailable { get; public set; }
    public abstract virtual bool get_RegisterNewerIfAvailable();
    public abstract virtual void set_RegisterNewerIfAvailable(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("F41717D8-5AB2-57AC-83CD-D0C48CC784CD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageDeploymentManager {
    public abstract virtual bool IsPackageReady(string package);
    public abstract virtual bool IsPackageReadyByUri(Uri packageUri);
    public abstract virtual bool IsPackageSetReady(PackageSet packageSet);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyAsync(string package, EnsureReadyOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyByUriAsync(Uri packageUri, EnsureReadyOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageSetReadyAsync(PackageSet packageSet, EnsureReadyOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageAsync(string package, AddPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageByUriAsync(Uri packageUri, AddPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageSetAsync(PackageSet packageSet, AddPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageAsync(string package, StagePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageByUriAsync(Uri packageUri, StagePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageSetAsync(PackageSet packageSet, StagePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageAsync(string package, RegisterPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageByUriAsync(Uri packageUri, RegisterPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageSetAsync(PackageSet packageSet, RegisterPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageAsync(string package, RemovePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFullNameAsync(string packageFullName, RemovePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFamilyNameAsync(string packageFamilyName, RemovePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByUriAsync(Uri packageUri, RemovePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageSetAsync(PackageSet packageSet, RemovePackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageAsync(string package);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageByUriAsync(Uri packageUri);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageSetAsync(PackageSet packageSet);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageAsync(string package);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageByUriAsync(Uri packageUri);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageSetAsync(PackageSet packageSet);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageAsync(string package, ProvisionPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageByUriAsync(Uri packageUri, ProvisionPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageSetAsync(PackageSet packageSet, ProvisionPackageOptions options);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageAsync(string package);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageByUriAsync(Uri packageUri);
    public abstract virtual IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageSetAsync(PackageSet packageSet);
    public abstract virtual bool IsPackageRegistrationPending(string packageFamilyName);
    public abstract virtual bool IsPackageRegistrationPendingForUser(string userSecurityId, string packageFamilyName);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("6FC6D0F3-F9DD-5C14-9D3F-077165EDDF98")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "131072")]
internal interface Microsoft.Windows.Management.Deployment.IPackageDeploymentManager2 {
    public abstract virtual PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailable(string package);
    public abstract virtual PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailableByUri(Uri packageUri);
    public abstract virtual PackageReadyOrNewerAvailableStatus IsPackageSetReadyOrNewerAvailable(PackageSet packageSet);
    public abstract virtual bool IsPackageProvisioned(string package);
    public abstract virtual bool IsPackageProvisionedByUri(Uri packageUri);
    public abstract virtual bool IsPackageSetProvisioned(PackageSet packageSet);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics {
    public abstract virtual PackageDeploymentManager GetDefault();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("0EC31486-00B5-5937-8CD4-759260FDC4A2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "131072")]
internal interface Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics2 {
    public abstract virtual bool IsPackageDeploymentFeatureSupported(PackageDeploymentFeature feature);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("D6B99601-18C2-599E-8BD1-40A9310AD263")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageDeploymentResult")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageDeploymentResult {
    public Guid ActivityId { get; }
    public Exception Error { get; }
    public string ErrorText { get; }
    public Exception ExtendedError { get; }
    public PackageDeploymentStatus Status { get; }
    public abstract virtual Guid get_ActivityId();
    public abstract virtual Exception get_Error();
    public abstract virtual string get_ErrorText();
    public abstract virtual Exception get_ExtendedError();
    public abstract virtual PackageDeploymentStatus get_Status();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("6BF0FD29-6C2A-58D1-AF0C-ABD2EAC45E29")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManager")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageRuntimeManager {
    [OverloadAttribute("AddPackageSet")]
public abstract virtual PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet);
    [OverloadAttribute("AddPackageSetWithOptions")]
public abstract virtual PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet, CreatePackageDependencyOptions createOptions, AddPackageDependencyOptions addOptions);
    public abstract virtual void RemovePackageSet(PackageSetRuntimeDisposition packageSetRuntimeDisposition);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("790947DE-01D4-5858-AA69-9C9390FB7D3E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics {
    public abstract virtual PackageRuntimeManager GetDefault();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("229FDF93-8529-5F8D-988C-AF8A39AD46F7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageSet")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageSet {
    public string Id { get; public set; }
    public IList`1<PackageSetItem> Items { get; }
    public Uri PackageUri { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual IList`1<PackageSetItem> get_Items();
    public abstract virtual Uri get_PackageUri();
    public abstract virtual void set_PackageUri(Uri value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("8F254E15-C371-550F-B4E8-3F0BB1AE375F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageSetItem")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageSetItem {
    public string Id { get; public set; }
    public PackageVersion MinVersion { get; public set; }
    public string PackageFamilyName { get; public set; }
    public Uri PackageUri { get; public set; }
    public PackageDependencyProcessorArchitectures ProcessorArchitectureFilter { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual PackageVersion get_MinVersion();
    public abstract virtual void set_MinVersion(PackageVersion value);
    public abstract virtual string get_PackageFamilyName();
    public abstract virtual void set_PackageFamilyName(string value);
    public abstract virtual Uri get_PackageUri();
    public abstract virtual void set_PackageUri(Uri value);
    public abstract virtual PackageDependencyProcessorArchitectures get_ProcessorArchitectureFilter();
    public abstract virtual void set_ProcessorArchitectureFilter(PackageDependencyProcessorArchitectures value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition {
    public PackageDependencyContextId PackageDependencyContextId { get; }
    public string PackageDependencyId { get; }
    public string PackageFullName { get; }
    public string PackageSetItemId { get; }
    public abstract virtual PackageDependencyContextId get_PackageDependencyContextId();
    public abstract virtual string get_PackageDependencyId();
    public abstract virtual string get_PackageFullName();
    public abstract virtual string get_PackageSetItemId();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition {
    public string PackageSetId { get; public set; }
    public IList`1<PackageSetItemRuntimeDisposition> PackageSetItemRuntimeDispositions { get; }
    public abstract virtual string get_PackageSetId();
    public abstract virtual void set_PackageSetId(string value);
    public abstract virtual IList`1<PackageSetItemRuntimeDisposition> get_PackageSetItemRuntimeDispositions();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("9C9710F4-795A-58B3-93F4-C991C4329C49")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageVolume")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageVolume {
    public bool IsAppxInstallSupported { get; }
    public bool IsFullTrustPackageSupported { get; }
    public bool IsSystemVolume { get; }
    public string MountPoint { get; }
    public string Name { get; }
    public string PackageStorePath { get; }
    public bool SupportsHardLinks { get; }
    public abstract virtual bool IsRepairNeeded();
    public abstract virtual void Repair();
    public abstract virtual bool get_IsAppxInstallSupported();
    public abstract virtual bool get_IsFullTrustPackageSupported();
    public abstract virtual bool get_IsSystemVolume();
    public abstract virtual string get_MountPoint();
    public abstract virtual string get_Name();
    public abstract virtual string get_PackageStorePath();
    public abstract virtual bool get_SupportsHardLinks();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("4C731835-8BC0-5313-9B56-8A4100EAEA01")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IPackageVolumeStatics")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IPackageVolumeStatics {
    public abstract virtual IList`1<PackageVolume> FindPackageVolumes();
    public abstract virtual PackageVolume FindPackageVolumeByPath(string packageStorePath);
    public abstract virtual PackageVolume FindPackageVolumeByName(string name);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("415E300F-D1E3-581E-A114-76D277B06136")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IProvisionPackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IProvisionPackageOptions {
    public bool IsOptionalPackageFamilyNamesSupported { get; }
    public bool IsProjectionOrderPackageFamilyNamesSupported { get; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public IList`1<string> ProjectionOrderPackageFamilyNames { get; }
    public abstract virtual bool get_IsOptionalPackageFamilyNamesSupported();
    public abstract virtual bool get_IsProjectionOrderPackageFamilyNamesSupported();
    public abstract virtual IList`1<string> get_OptionalPackageFamilyNames();
    public abstract virtual IList`1<string> get_ProjectionOrderPackageFamilyNames();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("83068623-2046-505F-8425-55226C0F84CC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IRegisterPackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IRegisterPackageOptions {
    public bool AllowUnsigned { get; public set; }
    public PackageVolume AppDataVolume { get; public set; }
    public bool DeferRegistrationWhenPackagesAreInUse { get; public set; }
    public IList`1<string> DependencyPackageFamilyNames { get; }
    public IList`1<Uri> DependencyPackageUris { get; }
    public bool DeveloperMode { get; public set; }
    public IDictionary`2<Uri, string> ExpectedDigests { get; }
    public Uri ExternalLocationUri { get; public set; }
    public bool ForceAppShutdown { get; public set; }
    public bool ForceTargetAppShutdown { get; public set; }
    public bool ForceUpdateFromAnyVersion { get; public set; }
    public bool InstallAllResources { get; public set; }
    public bool IsExpectedDigestsSupported { get; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public bool StageInPlace { get; public set; }
    public abstract virtual bool get_AllowUnsigned();
    public abstract virtual void set_AllowUnsigned(bool value);
    public abstract virtual PackageVolume get_AppDataVolume();
    public abstract virtual void set_AppDataVolume(PackageVolume value);
    public abstract virtual bool get_DeferRegistrationWhenPackagesAreInUse();
    public abstract virtual void set_DeferRegistrationWhenPackagesAreInUse(bool value);
    public abstract virtual IList`1<string> get_DependencyPackageFamilyNames();
    public abstract virtual IList`1<Uri> get_DependencyPackageUris();
    public abstract virtual bool get_DeveloperMode();
    public abstract virtual void set_DeveloperMode(bool value);
    public abstract virtual IDictionary`2<Uri, string> get_ExpectedDigests();
    public abstract virtual Uri get_ExternalLocationUri();
    public abstract virtual void set_ExternalLocationUri(Uri value);
    public abstract virtual bool get_ForceAppShutdown();
    public abstract virtual void set_ForceAppShutdown(bool value);
    public abstract virtual bool get_ForceTargetAppShutdown();
    public abstract virtual void set_ForceTargetAppShutdown(bool value);
    public abstract virtual bool get_ForceUpdateFromAnyVersion();
    public abstract virtual void set_ForceUpdateFromAnyVersion(bool value);
    public abstract virtual bool get_InstallAllResources();
    public abstract virtual void set_InstallAllResources(bool value);
    public abstract virtual bool get_IsExpectedDigestsSupported();
    public abstract virtual IList`1<string> get_OptionalPackageFamilyNames();
    public abstract virtual bool get_StageInPlace();
    public abstract virtual void set_StageInPlace(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("E7C90595-9A44-5046-8EBF-41ED326B200E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IRemovePackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IRemovePackageOptions {
    public bool FailIfNotFound { get; public set; }
    public bool PreserveApplicationData { get; public set; }
    public bool PreserveRoamableApplicationData { get; public set; }
    public bool RemoveForAllUsers { get; public set; }
    public abstract virtual bool get_FailIfNotFound();
    public abstract virtual void set_FailIfNotFound(bool value);
    public abstract virtual bool get_PreserveApplicationData();
    public abstract virtual void set_PreserveApplicationData(bool value);
    public abstract virtual bool get_PreserveRoamableApplicationData();
    public abstract virtual void set_PreserveRoamableApplicationData(bool value);
    public abstract virtual bool get_RemoveForAllUsers();
    public abstract virtual void set_RemoveForAllUsers(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[GuidAttribute("9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.IStagePackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
internal interface Microsoft.Windows.Management.Deployment.IStagePackageOptions {
    public bool AllowUnsigned { get; public set; }
    public IList`1<Uri> DependencyPackageUris { get; }
    public bool DeveloperMode { get; public set; }
    public IDictionary`2<Uri, string> ExpectedDigests { get; }
    public Uri ExternalLocationUri { get; public set; }
    public bool ForceUpdateFromAnyVersion { get; public set; }
    public bool InstallAllResources { get; public set; }
    public bool IsExpectedDigestsSupported { get; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public IList`1<Uri> OptionalPackageUris { get; }
    public IList`1<Uri> RelatedPackageUris { get; }
    public bool RequiredContentGroupOnly { get; public set; }
    public bool StageInPlace { get; public set; }
    public StubPackageOption StubPackageOption { get; public set; }
    public PackageVolume TargetVolume { get; public set; }
    public abstract virtual bool get_AllowUnsigned();
    public abstract virtual void set_AllowUnsigned(bool value);
    public abstract virtual IList`1<Uri> get_DependencyPackageUris();
    public abstract virtual bool get_DeveloperMode();
    public abstract virtual void set_DeveloperMode(bool value);
    public abstract virtual IDictionary`2<Uri, string> get_ExpectedDigests();
    public abstract virtual Uri get_ExternalLocationUri();
    public abstract virtual void set_ExternalLocationUri(Uri value);
    public abstract virtual bool get_ForceUpdateFromAnyVersion();
    public abstract virtual void set_ForceUpdateFromAnyVersion(bool value);
    public abstract virtual bool get_InstallAllResources();
    public abstract virtual void set_InstallAllResources(bool value);
    public abstract virtual bool get_IsExpectedDigestsSupported();
    public abstract virtual IList`1<string> get_OptionalPackageFamilyNames();
    public abstract virtual IList`1<Uri> get_OptionalPackageUris();
    public abstract virtual IList`1<Uri> get_RelatedPackageUris();
    public abstract virtual bool get_RequiredContentGroupOnly();
    public abstract virtual void set_RequiredContentGroupOnly(bool value);
    public abstract virtual bool get_StageInPlace();
    public abstract virtual void set_StageInPlace(bool value);
    public abstract virtual StubPackageOption get_StubPackageOption();
    public abstract virtual void set_StubPackageOption(StubPackageOption value);
    public abstract virtual PackageVolume get_TargetVolume();
    public abstract virtual void set_TargetVolume(PackageVolume value);
}
[ContractVersionAttribute("131072")]
public enum Microsoft.Windows.Management.Deployment.PackageDeploymentContract : Enum {
    public int value__;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Management.Deployment.PackageDeploymentFeature>")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "131072")]
public enum Microsoft.Windows.Management.Deployment.PackageDeploymentFeature : Enum {
    public int value__;
    public static PackageDeploymentFeature PackageUriScheme_ms_uup;
    public static PackageDeploymentFeature IsPackageReadyOrNewerAvailable;
    public static PackageDeploymentFeature RemovePackageByUri;
    public static PackageDeploymentFeature ResetPackage;
    public static PackageDeploymentFeature RepairPackage;
    public static PackageDeploymentFeature ProvisionPackage_Framework;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentManager")]
[PackageDeploymentManagerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageDeploymentManager")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageDeploymentManager : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2 { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2 { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal PackageDeploymentManager(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager();
    private IObjectReference Make___objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManager2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics();
    public static PackageDeploymentManager GetDefault();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics2();
    public static bool IsPackageDeploymentFeatureSupported(PackageDeploymentFeature feature);
    public static PackageDeploymentManager FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageDeploymentManager x, PackageDeploymentManager y);
    public static bool op_Inequality(PackageDeploymentManager x, PackageDeploymentManager y);
    public sealed virtual bool Equals(PackageDeploymentManager other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool IsPackageReady(string package);
    public bool IsPackageReadyByUri(Uri packageUri);
    public bool IsPackageSetReady(PackageSet packageSet);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyAsync(string package, EnsureReadyOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageReadyByUriAsync(Uri packageUri, EnsureReadyOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> EnsurePackageSetReadyAsync(PackageSet packageSet, EnsureReadyOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageAsync(string package, AddPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageByUriAsync(Uri packageUri, AddPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> AddPackageSetAsync(PackageSet packageSet, AddPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageAsync(string package, StagePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageByUriAsync(Uri packageUri, StagePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> StagePackageSetAsync(PackageSet packageSet, StagePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageAsync(string package, RegisterPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageByUriAsync(Uri packageUri, RegisterPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RegisterPackageSetAsync(PackageSet packageSet, RegisterPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageAsync(string package, RemovePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFullNameAsync(string packageFullName, RemovePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByFamilyNameAsync(string packageFamilyName, RemovePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageByUriAsync(Uri packageUri, RemovePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RemovePackageSetAsync(PackageSet packageSet, RemovePackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageAsync(string package);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageByUriAsync(Uri packageUri);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ResetPackageSetAsync(PackageSet packageSet);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageAsync(string package);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageByUriAsync(Uri packageUri);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> RepairPackageSetAsync(PackageSet packageSet);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageAsync(string package, ProvisionPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageByUriAsync(Uri packageUri, ProvisionPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> ProvisionPackageSetAsync(PackageSet packageSet, ProvisionPackageOptions options);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageAsync(string package);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageByUriAsync(Uri packageUri);
    public IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> DeprovisionPackageSetAsync(PackageSet packageSet);
    public bool IsPackageRegistrationPending(string packageFamilyName);
    public bool IsPackageRegistrationPendingForUser(string userSecurityId, string packageFamilyName);
    public PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailable(string package);
    public PackageReadyOrNewerAvailableStatus IsPackageReadyOrNewerAvailableByUri(Uri packageUri);
    public PackageReadyOrNewerAvailableStatus IsPackageSetReadyOrNewerAvailable(PackageSet packageSet);
    public bool IsPackageProvisioned(string package);
    public bool IsPackageProvisionedByUri(Uri packageUri);
    public bool IsPackageSetProvisioned(PackageSet packageSet);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment", "struct(Microsoft.Windows.Management.Deployment.PackageDeploymentProgress;enum(Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus;i4);f8)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Windows.Management.Deployment.PackageDeploymentProgress,Microsoft.Windows.Management.Deployment.PackageDeploymentProgress>")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageDeploymentProgress : ValueType {
    public PackageDeploymentProgressStatus Status;
    public double Progress;
    public PackageDeploymentProgress(PackageDeploymentProgressStatus _Status, double _Progress);
    public static bool op_Equality(PackageDeploymentProgress x, PackageDeploymentProgress y);
    public static bool op_Inequality(PackageDeploymentProgress x, PackageDeploymentProgress y);
    public sealed virtual bool Equals(PackageDeploymentProgress other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus>")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public enum Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus : Enum {
    public int value__;
    public static PackageDeploymentProgressStatus Queued;
    public static PackageDeploymentProgressStatus InProgress;
    public static PackageDeploymentProgressStatus CompletedSuccess;
    public static PackageDeploymentProgressStatus CompletedFailure;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageDeploymentResult")]
[PackageDeploymentResultRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageDeploymentResult")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageDeploymentResult : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Guid ActivityId { get; }
    public Exception Error { get; }
    public string ErrorText { get; }
    public Exception ExtendedError { get; }
    public PackageDeploymentStatus Status { get; }
    internal PackageDeploymentResult(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageDeploymentResult();
    public static PackageDeploymentResult FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageDeploymentResult x, PackageDeploymentResult y);
    public static bool op_Inequality(PackageDeploymentResult x, PackageDeploymentResult y);
    public sealed virtual bool Equals(PackageDeploymentResult other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Guid get_ActivityId();
    public Exception get_Error();
    public string get_ErrorText();
    public Exception get_ExtendedError();
    public PackageDeploymentStatus get_Status();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Management.Deployment.PackageDeploymentStatus>")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public enum Microsoft.Windows.Management.Deployment.PackageDeploymentStatus : Enum {
    public int value__;
    public static PackageDeploymentStatus InProgress;
    public static PackageDeploymentStatus CompletedSuccess;
    public static PackageDeploymentStatus CompletedFailure;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus>")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "131072")]
public enum Microsoft.Windows.Management.Deployment.PackageReadyOrNewerAvailableStatus : Enum {
    public int value__;
    public static PackageReadyOrNewerAvailableStatus NotReady;
    public static PackageReadyOrNewerAvailableStatus Ready;
    public static PackageReadyOrNewerAvailableStatus NewerAvailable;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageRuntimeManager")]
[PackageRuntimeManagerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageRuntimeManager")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageRuntimeManager : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManager { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal PackageRuntimeManager(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManager();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics();
    public static PackageRuntimeManager GetDefault();
    public static PackageRuntimeManager FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageRuntimeManager x, PackageRuntimeManager y);
    public static bool op_Inequality(PackageRuntimeManager x, PackageRuntimeManager y);
    public sealed virtual bool Equals(PackageRuntimeManager other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet);
    public PackageSetRuntimeDisposition AddPackageSet(PackageSet packageSet, CreatePackageDependencyOptions createOptions, AddPackageDependencyOptions addOptions);
    public void RemovePackageSet(PackageSetRuntimeDisposition packageSetRuntimeDisposition);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageSet")]
[PackageSetRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageSet")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageSet : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSet;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSet { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Id { get; public set; }
    public IList`1<PackageSetItem> Items { get; }
    public Uri PackageUri { get; public set; }
    internal PackageSet(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageSet();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_PackageSet();
    public static PackageSet FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageSet x, PackageSet y);
    public static bool op_Inequality(PackageSet x, PackageSet y);
    public sealed virtual bool Equals(PackageSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public string get_Id();
    public void set_Id(string value);
    public IList`1<PackageSetItem> get_Items();
    public Uri get_PackageUri();
    public void set_PackageUri(Uri value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageSetItem")]
[PackageSetItemRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageSetItem")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageSetItem : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Id { get; public set; }
    public PackageVersion MinVersion { get; public set; }
    public string PackageFamilyName { get; public set; }
    public Uri PackageUri { get; public set; }
    public PackageDependencyProcessorArchitectures ProcessorArchitectureFilter { get; public set; }
    internal PackageSetItem(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItem();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItem();
    public static PackageSetItem FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageSetItem x, PackageSetItem y);
    public static bool op_Inequality(PackageSetItem x, PackageSetItem y);
    public sealed virtual bool Equals(PackageSetItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public string get_Id();
    public void set_Id(string value);
    public PackageVersion get_MinVersion();
    public void set_MinVersion(PackageVersion value);
    public string get_PackageFamilyName();
    public void set_PackageFamilyName(string value);
    public Uri get_PackageUri();
    public void set_PackageUri(Uri value);
    public PackageDependencyProcessorArchitectures get_ProcessorArchitectureFilter();
    public void set_ProcessorArchitectureFilter(PackageDependencyProcessorArchitectures value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition")]
[PackageSetItemRuntimeDispositionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public PackageDependencyContextId PackageDependencyContextId { get; }
    public string PackageDependencyId { get; }
    public string PackageFullName { get; }
    public string PackageSetItemId { get; }
    internal PackageSetItemRuntimeDisposition(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition();
    public static PackageSetItemRuntimeDisposition FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageSetItemRuntimeDisposition x, PackageSetItemRuntimeDisposition y);
    public static bool op_Inequality(PackageSetItemRuntimeDisposition x, PackageSetItemRuntimeDisposition y);
    public sealed virtual bool Equals(PackageSetItemRuntimeDisposition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public PackageDependencyContextId get_PackageDependencyContextId();
    public string get_PackageDependencyId();
    public string get_PackageFullName();
    public string get_PackageSetItemId();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition")]
[PackageSetRuntimeDispositionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string PackageSetId { get; public set; }
    public IList`1<PackageSetItemRuntimeDisposition> PackageSetItemRuntimeDispositions { get; }
    internal PackageSetRuntimeDisposition(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_PackageSetRuntimeDisposition();
    public static PackageSetRuntimeDisposition FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageSetRuntimeDisposition x, PackageSetRuntimeDisposition y);
    public static bool op_Inequality(PackageSetRuntimeDisposition x, PackageSetRuntimeDisposition y);
    public sealed virtual bool Equals(PackageSetRuntimeDisposition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public string get_PackageSetId();
    public void set_PackageSetId(string value);
    public IList`1<PackageSetItemRuntimeDisposition> get_PackageSetItemRuntimeDispositions();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.PackageVolume")]
[PackageVolumeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IPackageVolume")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.PackageVolume : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsAppxInstallSupported { get; }
    public bool IsFullTrustPackageSupported { get; }
    public bool IsSystemVolume { get; }
    public string MountPoint { get; }
    public string Name { get; }
    public string PackageStorePath { get; }
    public bool SupportsHardLinks { get; }
    internal PackageVolume(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolume();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IPackageVolumeStatics();
    public static IList`1<PackageVolume> FindPackageVolumes();
    public static PackageVolume FindPackageVolumeByPath(string packageStorePath);
    public static PackageVolume FindPackageVolumeByName(string name);
    public static PackageVolume FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PackageVolume x, PackageVolume y);
    public static bool op_Inequality(PackageVolume x, PackageVolume y);
    public sealed virtual bool Equals(PackageVolume other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool IsRepairNeeded();
    public void Repair();
    public bool get_IsAppxInstallSupported();
    public bool get_IsFullTrustPackageSupported();
    public bool get_IsSystemVolume();
    public string get_MountPoint();
    public string get_Name();
    public string get_PackageStorePath();
    public bool get_SupportsHardLinks();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.ProvisionPackageOptions")]
[ProvisionPackageOptionsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IProvisionPackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.ProvisionPackageOptions : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsOptionalPackageFamilyNamesSupported { get; }
    public bool IsProjectionOrderPackageFamilyNamesSupported { get; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public IList`1<string> ProjectionOrderPackageFamilyNames { get; }
    internal ProvisionPackageOptions(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IProvisionPackageOptions();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_ProvisionPackageOptions();
    public static ProvisionPackageOptions FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ProvisionPackageOptions x, ProvisionPackageOptions y);
    public static bool op_Inequality(ProvisionPackageOptions x, ProvisionPackageOptions y);
    public sealed virtual bool Equals(ProvisionPackageOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_IsOptionalPackageFamilyNamesSupported();
    public bool get_IsProjectionOrderPackageFamilyNamesSupported();
    public IList`1<string> get_OptionalPackageFamilyNames();
    public IList`1<string> get_ProjectionOrderPackageFamilyNames();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.RegisterPackageOptions")]
[RegisterPackageOptionsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IRegisterPackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.RegisterPackageOptions : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AllowUnsigned { get; public set; }
    public PackageVolume AppDataVolume { get; public set; }
    public bool DeferRegistrationWhenPackagesAreInUse { get; public set; }
    public IList`1<string> DependencyPackageFamilyNames { get; }
    public IList`1<Uri> DependencyPackageUris { get; }
    public bool DeveloperMode { get; public set; }
    public IDictionary`2<Uri, string> ExpectedDigests { get; }
    public Uri ExternalLocationUri { get; public set; }
    public bool ForceAppShutdown { get; public set; }
    public bool ForceTargetAppShutdown { get; public set; }
    public bool ForceUpdateFromAnyVersion { get; public set; }
    public bool InstallAllResources { get; public set; }
    public bool IsExpectedDigestsSupported { get; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public bool StageInPlace { get; public set; }
    internal RegisterPackageOptions(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IRegisterPackageOptions();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_RegisterPackageOptions();
    public static RegisterPackageOptions FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RegisterPackageOptions x, RegisterPackageOptions y);
    public static bool op_Inequality(RegisterPackageOptions x, RegisterPackageOptions y);
    public sealed virtual bool Equals(RegisterPackageOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_AllowUnsigned();
    public void set_AllowUnsigned(bool value);
    public PackageVolume get_AppDataVolume();
    public void set_AppDataVolume(PackageVolume value);
    public bool get_DeferRegistrationWhenPackagesAreInUse();
    public void set_DeferRegistrationWhenPackagesAreInUse(bool value);
    public IList`1<string> get_DependencyPackageFamilyNames();
    public IList`1<Uri> get_DependencyPackageUris();
    public bool get_DeveloperMode();
    public void set_DeveloperMode(bool value);
    public IDictionary`2<Uri, string> get_ExpectedDigests();
    public Uri get_ExternalLocationUri();
    public void set_ExternalLocationUri(Uri value);
    public bool get_ForceAppShutdown();
    public void set_ForceAppShutdown(bool value);
    public bool get_ForceTargetAppShutdown();
    public void set_ForceTargetAppShutdown(bool value);
    public bool get_ForceUpdateFromAnyVersion();
    public void set_ForceUpdateFromAnyVersion(bool value);
    public bool get_InstallAllResources();
    public void set_InstallAllResources(bool value);
    public bool get_IsExpectedDigestsSupported();
    public IList`1<string> get_OptionalPackageFamilyNames();
    public bool get_StageInPlace();
    public void set_StageInPlace(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.RemovePackageOptions")]
[RemovePackageOptionsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IRemovePackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.RemovePackageOptions : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool FailIfNotFound { get; public set; }
    public bool PreserveApplicationData { get; public set; }
    public bool PreserveRoamableApplicationData { get; public set; }
    public bool RemoveForAllUsers { get; public set; }
    internal RemovePackageOptions(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IRemovePackageOptions();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_RemovePackageOptions();
    public static RemovePackageOptions FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RemovePackageOptions x, RemovePackageOptions y);
    public static bool op_Inequality(RemovePackageOptions x, RemovePackageOptions y);
    public sealed virtual bool Equals(RemovePackageOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_FailIfNotFound();
    public void set_FailIfNotFound(bool value);
    public bool get_PreserveApplicationData();
    public void set_PreserveApplicationData(bool value);
    public bool get_PreserveRoamableApplicationData();
    public void set_PreserveRoamableApplicationData(bool value);
    public bool get_RemoveForAllUsers();
    public void set_RemoveForAllUsers(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Management.Deployment.StagePackageOptions")]
[StagePackageOptionsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Management.Deployment.IStagePackageOptions")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public class Microsoft.Windows.Management.Deployment.StagePackageOptions : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AllowUnsigned { get; public set; }
    public IList`1<Uri> DependencyPackageUris { get; }
    public bool DeveloperMode { get; public set; }
    public IDictionary`2<Uri, string> ExpectedDigests { get; }
    public Uri ExternalLocationUri { get; public set; }
    public bool ForceUpdateFromAnyVersion { get; public set; }
    public bool InstallAllResources { get; public set; }
    public bool IsExpectedDigestsSupported { get; }
    public IList`1<string> OptionalPackageFamilyNames { get; }
    public IList`1<Uri> OptionalPackageUris { get; }
    public IList`1<Uri> RelatedPackageUris { get; }
    public bool RequiredContentGroupOnly { get; public set; }
    public bool StageInPlace { get; public set; }
    public StubPackageOption StubPackageOption { get; public set; }
    public PackageVolume TargetVolume { get; public set; }
    internal StagePackageOptions(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_IStagePackageOptions();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Management_Deployment_StagePackageOptions();
    public static StagePackageOptions FromAbi(IntPtr thisPtr);
    public static bool op_Equality(StagePackageOptions x, StagePackageOptions y);
    public static bool op_Inequality(StagePackageOptions x, StagePackageOptions y);
    public sealed virtual bool Equals(StagePackageOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool get_AllowUnsigned();
    public void set_AllowUnsigned(bool value);
    public IList`1<Uri> get_DependencyPackageUris();
    public bool get_DeveloperMode();
    public void set_DeveloperMode(bool value);
    public IDictionary`2<Uri, string> get_ExpectedDigests();
    public Uri get_ExternalLocationUri();
    public void set_ExternalLocationUri(Uri value);
    public bool get_ForceUpdateFromAnyVersion();
    public void set_ForceUpdateFromAnyVersion(bool value);
    public bool get_InstallAllResources();
    public void set_InstallAllResources(bool value);
    public bool get_IsExpectedDigestsSupported();
    public IList`1<string> get_OptionalPackageFamilyNames();
    public IList`1<Uri> get_OptionalPackageUris();
    public IList`1<Uri> get_RelatedPackageUris();
    public bool get_RequiredContentGroupOnly();
    public void set_RequiredContentGroupOnly(bool value);
    public bool get_StageInPlace();
    public void set_StageInPlace(bool value);
    public StubPackageOption get_StubPackageOption();
    public void set_StubPackageOption(StubPackageOption value);
    public PackageVolume get_TargetVolume();
    public void set_TargetVolume(PackageVolume value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Management.Deployment")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Management.Deployment.StubPackageOption>")]
[ContractVersionAttribute("Microsoft.Windows.Management.Deployment.PackageDeploymentContract", "65536")]
public enum Microsoft.Windows.Management.Deployment.StubPackageOption : Enum {
    public int value__;
    public static StubPackageOption Default;
    public static StubPackageOption InstallFull;
    public static StubPackageOption InstallStub;
    public static StubPackageOption UsePreference;
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationProgressHandler_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationProgressHandler_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, IAsyncOperationWithProgress`2<PackageDeploymentResult, PackageDeploymentProgress> asyncInfo, PackageDeploymentProgress progressInfo);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, PackageDeploymentProgress progressInfo);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationWithProgressCompletedHandler_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationWithProgressCompletedHandler_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_Windows_Management_Deployment_PackageSetItem : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_Windows_Management_Deployment_PackageSetItem();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<PackageSetItem> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<PackageSetItemRuntimeDisposition> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_Windows_Management_Deployment_PackageVolume : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_Windows_Management_Deployment_PackageVolume();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<PackageVolume> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<string> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Windows_Foundation_Uri__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Windows_Foundation_Uri__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<Uri, string>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Uri : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Uri();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<Uri> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_Windows_Management_Deployment_PackageSetItem : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_Windows_Management_Deployment_PackageSetItem();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, PackageSetItem[] items);
    private static PackageSetItem get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, PackageSetItemRuntimeDisposition[] items);
    private static PackageSetItemRuntimeDisposition get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_Windows_Management_Deployment_PackageVolume : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_Windows_Management_Deployment_PackageVolume();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, PackageVolume[] items);
    private static PackageVolume get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, String[] items);
    private static string get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Windows_Foundation_Uri__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Windows_Foundation_Uri__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<Uri, string> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Uri : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Uri();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, Uri[] items);
    private static Uri get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_Windows_Foundation_Uri__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_Windows_Foundation_Uri__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static Uri get_Key(IObjectReference _obj);
    private static string get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_Windows_Foundation_Uri__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMap_2_Windows_Foundation_Uri__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string Lookup(IObjectReference _obj, Uri key);
    private static bool HasKey(IObjectReference _obj, Uri key);
    private static IReadOnlyDictionary`2<Uri, string> GetView(IObjectReference _obj);
    private static bool Insert(IObjectReference _obj, Uri key, string value);
    private static void Remove(IObjectReference _obj, Uri key);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_Windows_Foundation_Uri__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_Windows_Foundation_Uri__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string Lookup(IObjectReference _obj, Uri key);
    private static bool HasKey(IObjectReference _obj, Uri key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageSetItem : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageSetItem();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageSetItem GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<PackageSetItem> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, PackageSetItem value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, PackageSetItem value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, PackageSetItem value);
    private static void Append(IObjectReference _obj, PackageSetItem value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PackageSetItem[] items);
    private static void ReplaceAll(IObjectReference _obj, PackageSetItem[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageSetItemRuntimeDisposition GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<PackageSetItemRuntimeDisposition> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, PackageSetItemRuntimeDisposition value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, PackageSetItemRuntimeDisposition value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, PackageSetItemRuntimeDisposition value);
    private static void Append(IObjectReference _obj, PackageSetItemRuntimeDisposition value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PackageSetItemRuntimeDisposition[] items);
    private static void ReplaceAll(IObjectReference _obj, PackageSetItemRuntimeDisposition[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageVolume : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Microsoft_Windows_Management_Deployment_PackageVolume();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageVolume GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<PackageVolume> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, PackageVolume value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, PackageVolume value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, PackageVolume value);
    private static void Append(IObjectReference _obj, PackageVolume value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PackageVolume[] items);
    private static void ReplaceAll(IObjectReference _obj, PackageVolume[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<string> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, string value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, string value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, string value);
    private static void Append(IObjectReference _obj, string value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, String[] items);
    private static void ReplaceAll(IObjectReference _obj, String[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Windows_Foundation_Uri();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static Uri GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<Uri> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, Uri value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, Uri value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, Uri value);
    private static void Append(IObjectReference _obj, Uri value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, Uri[] items);
    private static void ReplaceAll(IObjectReference _obj, Uri[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Management_Deployment_PackageSetItem : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Management_Deployment_PackageSetItem();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageSetItem GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, PackageSetItem value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PackageSetItem[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Management_Deployment_PackageSetItemRuntimeDisposition();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageSetItemRuntimeDisposition GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, PackageSetItemRuntimeDisposition value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PackageSetItemRuntimeDisposition[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Management_Deployment_PackageVolume : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_Windows_Management_Deployment_PackageVolume();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageVolume GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, PackageVolume value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, PackageVolume[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, string value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, String[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Uri : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Uri();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static Uri GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, Uri value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, Uri[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperationWithProgress_2_Microsoft_Windows_Management_Deployment_PackageDeploymentResult__Microsoft_Windows_Management_Deployment_PackageDeploymentProgress();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static PackageDeploymentResult GetResults(IObjectReference _obj);
    private static AsyncOperationProgressHandler`2<PackageDeploymentResult, PackageDeploymentProgress> get_Progress(IObjectReference _obj);
    private static void put_Progress(IObjectReference _obj, AsyncOperationProgressHandler`2<PackageDeploymentResult, PackageDeploymentProgress> value);
    private static AsyncOperationWithProgressCompletedHandler`2<PackageDeploymentResult, PackageDeploymentProgress> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationWithProgressCompletedHandler`2<PackageDeploymentResult, PackageDeploymentProgress> value);
    private static bool Init();
}
internal static class WinRT.ProjectionInitializer : object {
    [ModuleInitializerAttribute]
public static void InitalizeProjection();
}
