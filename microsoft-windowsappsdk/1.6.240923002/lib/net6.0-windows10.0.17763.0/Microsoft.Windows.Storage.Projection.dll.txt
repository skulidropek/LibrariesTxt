[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Storage.ApplicationData : ValueType {
    public static IObjectReference CreateMarshaler(ApplicationData obj);
    public static ObjectReferenceValue CreateMarshaler2(ApplicationData obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ApplicationData FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ApplicationData obj);
    public static MarshalerArray<ApplicationData> CreateMarshalerArray(ApplicationData[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ApplicationData[] FromAbiArray(object box);
    public static void CopyAbiArray(ApplicationData[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ApplicationData[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ApplicationData> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.Storage.ApplicationDataContainer : ValueType {
    public static IObjectReference CreateMarshaler(ApplicationDataContainer obj);
    public static ObjectReferenceValue CreateMarshaler2(ApplicationDataContainer obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ApplicationDataContainer FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ApplicationDataContainer obj);
    public static MarshalerArray<ApplicationDataContainer> CreateMarshalerArray(ApplicationDataContainer[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ApplicationDataContainer[] FromAbiArray(object box);
    public static void CopyAbiArray(ApplicationDataContainer[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ApplicationDataContainer[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ApplicationDataContainer> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Storage.ApplicationDataContainerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.Storage.ApplicationDataRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("FC073CE2-2F7B-5214-95FA-530A3F9D1EA5")]
internal interface ABI.Microsoft.Windows.Storage.IApplicationData {
}
[GuidAttribute("D1FA9C23-2E59-55D8-BD86-88C2FDC9E7C9")]
internal interface ABI.Microsoft.Windows.Storage.IApplicationDataContainer {
}
internal static class ABI.Microsoft.Windows.Storage.IApplicationDataContainerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ApplicationDataContainer CreateContainer(IObjectReference _obj, string name, ApplicationDataCreateDisposition disposition);
    internal static void DeleteContainer(IObjectReference _obj, string name);
    internal static IDictionary`2<string, ApplicationDataContainer> get_Containers(IObjectReference _obj);
    internal static ApplicationDataLocality get_Locality(IObjectReference _obj);
    internal static string get_Name(IObjectReference _obj);
    internal static IPropertySet get_Values(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.Storage.IApplicationDataMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncAction ClearAsync(IObjectReference _obj, ApplicationDataLocality locality);
    internal static IAsyncAction ClearPublisherCacheFolderAsync(IObjectReference _obj, string folderName);
    internal static string GetPublisherCachePath(IObjectReference _obj, string folderName);
    internal static StorageFolder GetPublisherCacheFolder(IObjectReference _obj, string folderName);
    internal static bool get_IsMachinePathSupported(IObjectReference _obj);
    internal static StorageFolder get_LocalCacheFolder(IObjectReference _obj);
    internal static string get_LocalCachePath(IObjectReference _obj);
    internal static StorageFolder get_LocalFolder(IObjectReference _obj);
    internal static string get_LocalPath(IObjectReference _obj);
    internal static ApplicationDataContainer get_LocalSettings(IObjectReference _obj);
    internal static StorageFolder get_MachineFolder(IObjectReference _obj);
    internal static string get_MachinePath(IObjectReference _obj);
    internal static StorageFolder get_SharedLocalFolder(IObjectReference _obj);
    internal static string get_SharedLocalPath(IObjectReference _obj);
    internal static StorageFolder get_TemporaryFolder(IObjectReference _obj);
    internal static string get_TemporaryPath(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6A8B41F8-5560-56FB-86B0-D59E897D4D95")]
internal interface ABI.Microsoft.Windows.Storage.IApplicationDataStatics {
}
internal static class ABI.Microsoft.Windows.Storage.IApplicationDataStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ApplicationData GetDefault(IObjectReference _obj);
    internal static ApplicationData GetForUser(IObjectReference _obj, User user);
    internal static ApplicationData GetForPackageFamily(IObjectReference _obj, string packageFamilyName);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Storage.ApplicationData")]
[ApplicationDataRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Storage.IApplicationData")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
public class Microsoft.Windows.Storage.ApplicationData : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Storage_IApplicationData { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool IsMachinePathSupported { get; }
    public StorageFolder LocalCacheFolder { get; }
    public string LocalCachePath { get; }
    public StorageFolder LocalFolder { get; }
    public string LocalPath { get; }
    public ApplicationDataContainer LocalSettings { get; }
    public StorageFolder MachineFolder { get; }
    public string MachinePath { get; }
    public StorageFolder SharedLocalFolder { get; }
    public string SharedLocalPath { get; }
    public StorageFolder TemporaryFolder { get; }
    public string TemporaryPath { get; }
    internal ApplicationData(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Storage_IApplicationData();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Windows_Storage_IApplicationDataStatics();
    public static ApplicationData GetDefault();
    public static ApplicationData GetForUser(User user);
    public static ApplicationData GetForPackageFamily(string packageFamilyName);
    public static ApplicationData FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ApplicationData x, ApplicationData y);
    public static bool op_Inequality(ApplicationData x, ApplicationData y);
    public sealed virtual bool Equals(ApplicationData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public IAsyncAction ClearAsync(ApplicationDataLocality locality);
    public IAsyncAction ClearPublisherCacheFolderAsync(string folderName);
    public string GetPublisherCachePath(string folderName);
    public StorageFolder GetPublisherCacheFolder(string folderName);
    public sealed virtual void Dispose();
    public bool get_IsMachinePathSupported();
    public StorageFolder get_LocalCacheFolder();
    public string get_LocalCachePath();
    public StorageFolder get_LocalFolder();
    public string get_LocalPath();
    public ApplicationDataContainer get_LocalSettings();
    public StorageFolder get_MachineFolder();
    public string get_MachinePath();
    public StorageFolder get_SharedLocalFolder();
    public string get_SharedLocalPath();
    public StorageFolder get_TemporaryFolder();
    public string get_TemporaryPath();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Storage.ApplicationDataContainer")]
[ApplicationDataContainerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.Storage.IApplicationDataContainer")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
public class Microsoft.Windows.Storage.ApplicationDataContainer : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public IDictionary`2<string, ApplicationDataContainer> Containers { get; }
    public ApplicationDataLocality Locality { get; }
    public string Name { get; }
    public IPropertySet Values { get; }
    internal ApplicationDataContainer(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_Storage_IApplicationDataContainer();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static ApplicationDataContainer FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ApplicationDataContainer x, ApplicationDataContainer y);
    public static bool op_Inequality(ApplicationDataContainer x, ApplicationDataContainer y);
    public sealed virtual bool Equals(ApplicationDataContainer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public ApplicationDataContainer CreateContainer(string name, ApplicationDataCreateDisposition disposition);
    public void DeleteContainer(string name);
    public sealed virtual void Dispose();
    public IDictionary`2<string, ApplicationDataContainer> get_Containers();
    public ApplicationDataLocality get_Locality();
    public string get_Name();
    public IPropertySet get_Values();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[ContractVersionAttribute("131072")]
public enum Microsoft.Windows.Storage.ApplicationDataContract : Enum {
    public int value__;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Storage.ApplicationDataCreateDisposition>")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
public enum Microsoft.Windows.Storage.ApplicationDataCreateDisposition : Enum {
    public int value__;
    public static ApplicationDataCreateDisposition Always;
    public static ApplicationDataCreateDisposition Existing;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.Storage.ApplicationDataLocality>")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
public enum Microsoft.Windows.Storage.ApplicationDataLocality : Enum {
    public int value__;
    public static ApplicationDataLocality Local;
    public static ApplicationDataLocality LocalCache;
    public static ApplicationDataLocality SharedLocal;
    public static ApplicationDataLocality Temporary;
    public static ApplicationDataLocality Machine;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[GuidAttribute("FC073CE2-2F7B-5214-95FA-530A3F9D1EA5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Storage.IApplicationData")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
internal interface Microsoft.Windows.Storage.IApplicationData {
    public bool IsMachinePathSupported { get; }
    public StorageFolder LocalCacheFolder { get; }
    public string LocalCachePath { get; }
    public StorageFolder LocalFolder { get; }
    public string LocalPath { get; }
    public ApplicationDataContainer LocalSettings { get; }
    public StorageFolder MachineFolder { get; }
    public string MachinePath { get; }
    public StorageFolder SharedLocalFolder { get; }
    public string SharedLocalPath { get; }
    public StorageFolder TemporaryFolder { get; }
    public string TemporaryPath { get; }
    public abstract virtual IAsyncAction ClearAsync(ApplicationDataLocality locality);
    public abstract virtual IAsyncAction ClearPublisherCacheFolderAsync(string folderName);
    public abstract virtual string GetPublisherCachePath(string folderName);
    public abstract virtual StorageFolder GetPublisherCacheFolder(string folderName);
    public abstract virtual bool get_IsMachinePathSupported();
    public abstract virtual StorageFolder get_LocalCacheFolder();
    public abstract virtual string get_LocalCachePath();
    public abstract virtual StorageFolder get_LocalFolder();
    public abstract virtual string get_LocalPath();
    public abstract virtual ApplicationDataContainer get_LocalSettings();
    public abstract virtual StorageFolder get_MachineFolder();
    public abstract virtual string get_MachinePath();
    public abstract virtual StorageFolder get_SharedLocalFolder();
    public abstract virtual string get_SharedLocalPath();
    public abstract virtual StorageFolder get_TemporaryFolder();
    public abstract virtual string get_TemporaryPath();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[GuidAttribute("D1FA9C23-2E59-55D8-BD86-88C2FDC9E7C9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Storage.IApplicationDataContainer")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
internal interface Microsoft.Windows.Storage.IApplicationDataContainer {
    public IDictionary`2<string, ApplicationDataContainer> Containers { get; }
    public ApplicationDataLocality Locality { get; }
    public string Name { get; }
    public IPropertySet Values { get; }
    public abstract virtual ApplicationDataContainer CreateContainer(string name, ApplicationDataCreateDisposition disposition);
    public abstract virtual void DeleteContainer(string name);
    public abstract virtual IDictionary`2<string, ApplicationDataContainer> get_Containers();
    public abstract virtual ApplicationDataLocality get_Locality();
    public abstract virtual string get_Name();
    public abstract virtual IPropertySet get_Values();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.Storage")]
[GuidAttribute("6A8B41F8-5560-56FB-86B0-D59E897D4D95")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.Storage.IApplicationDataStatics")]
[ContractVersionAttribute("Microsoft.Windows.Storage.ApplicationDataContract", "65536")]
internal interface Microsoft.Windows.Storage.IApplicationDataStatics {
    public abstract virtual ApplicationData GetDefault();
    public abstract virtual ApplicationData GetForUser(User user);
    public abstract virtual ApplicationData GetForPackageFamily(string packageFamilyName);
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_Windows_Storage_ApplicationDataContainer_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_Windows_Storage_ApplicationDataContainer_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, ApplicationDataContainer>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_Windows_Storage_ApplicationDataContainer_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_Windows_Storage_ApplicationDataContainer_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, ApplicationDataContainer> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_Windows_Storage_ApplicationDataContainer : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__Microsoft_Windows_Storage_ApplicationDataContainer();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static ApplicationDataContainer get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__Microsoft_Windows_Storage_ApplicationDataContainer : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMap_2_String__Microsoft_Windows_Storage_ApplicationDataContainer();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static ApplicationDataContainer Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static IReadOnlyDictionary`2<string, ApplicationDataContainer> GetView(IObjectReference _obj);
    private static bool Insert(IObjectReference _obj, string key, ApplicationDataContainer value);
    private static void Remove(IObjectReference _obj, string key);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__Microsoft_Windows_Storage_ApplicationDataContainer : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__Microsoft_Windows_Storage_ApplicationDataContainer();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static ApplicationDataContainer Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.ProjectionInitializer : object {
    [ModuleInitializerAttribute]
public static void InitalizeProjection();
}
