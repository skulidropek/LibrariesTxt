[GuidAttribute("FA3554CC-BE1C-534C-BFF8-72DF78E9F4A4")]
internal interface ABI.Microsoft.Windows.System.Power.IPowerManagerStatics {
}
[GuidAttribute("61F3CC25-65B4-5DEF-9C9B-990CEF3B0833")]
internal interface ABI.Microsoft.Windows.System.Power.IPowerManagerStatics2 {
}
internal static class ABI.Microsoft.Windows.System.Power.IPowerManagerStatics2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectivePowerMode get_EffectivePowerMode2(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.System.Power.IPowerManagerStaticsMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _BatteryStatusChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _DisplayStatusChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _EffectivePowerModeChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _EnergySaverStatusChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PowerSourceKindChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PowerSupplyStatusChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RemainingChargePercentChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RemainingDischargeTimeChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _SystemIdleStatusChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _SystemSuspendStatusChanged_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _UserPresenceStatusChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _BatteryStatusChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _DisplayStatusChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _EffectivePowerModeChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _EnergySaverStatusChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _PowerSourceKindChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _PowerSupplyStatusChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _RemainingChargePercentChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _RemainingDischargeTimeChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _SystemIdleStatusChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _SystemSuspendStatusChanged { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> _UserPresenceStatusChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static BatteryStatus get_BatteryStatus(IObjectReference _obj);
    internal static DisplayStatus get_DisplayStatus(IObjectReference _obj);
    internal static IAsyncOperation`1<EffectivePowerMode> get_EffectivePowerMode(IObjectReference _obj);
    internal static EnergySaverStatus get_EnergySaverStatus(IObjectReference _obj);
    internal static PowerSourceKind get_PowerSourceKind(IObjectReference _obj);
    internal static PowerSupplyStatus get_PowerSupplyStatus(IObjectReference _obj);
    internal static int get_RemainingChargePercent(IObjectReference _obj);
    internal static TimeSpan get_RemainingDischargeTime(IObjectReference _obj);
    internal static SystemSuspendStatus get_SystemSuspendStatus(IObjectReference _obj);
    internal static UserPresenceStatus get_UserPresenceStatus(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeBatteryStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__BatteryStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_BatteryStatusChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeDisplayStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__DisplayStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_DisplayStatusChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeEffectivePowerModeChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__EffectivePowerModeChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_EffectivePowerModeChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeEnergySaverStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__EnergySaverStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_EnergySaverStatusChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakePowerSourceKindChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__PowerSourceKindChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_PowerSourceKindChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakePowerSupplyStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__PowerSupplyStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_PowerSupplyStatusChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeRemainingChargePercentChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__RemainingChargePercentChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_RemainingChargePercentChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeRemainingDischargeTimeChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__RemainingDischargeTimeChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_RemainingDischargeTimeChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeSystemIdleStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__SystemIdleStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_SystemIdleStatusChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeSystemSuspendStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__SystemSuspendStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_SystemSuspendStatusChanged2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> MakeUserPresenceStatusChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<EventHandler`1<object>>> get__UserPresenceStatusChanged();
    internal static EventSource`1<EventHandler`1<object>> Get_UserPresenceStatusChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.BatteryStatus>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.BatteryStatus : Enum {
    public int value__;
    public static BatteryStatus NotPresent;
    public static BatteryStatus Discharging;
    public static BatteryStatus Idle;
    public static BatteryStatus Charging;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.DisplayStatus>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.DisplayStatus : Enum {
    public int value__;
    public static DisplayStatus Off;
    public static DisplayStatus On;
    public static DisplayStatus Dimmed;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.EffectivePowerMode>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.EffectivePowerMode : Enum {
    public int value__;
    public static EffectivePowerMode BatterySaver;
    public static EffectivePowerMode BetterBattery;
    public static EffectivePowerMode Balanced;
    public static EffectivePowerMode HighPerformance;
    public static EffectivePowerMode MaxPerformance;
    public static EffectivePowerMode GameMode;
    public static EffectivePowerMode MixedReality;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.EnergySaverStatus>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.EnergySaverStatus : Enum {
    public int value__;
    public static EnergySaverStatus Uninitialized;
    public static EnergySaverStatus Disabled;
    public static EnergySaverStatus Off;
    public static EnergySaverStatus On;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[GuidAttribute("FA3554CC-BE1C-534C-BFF8-72DF78E9F4A4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.System.Power.IPowerManagerStatics")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
internal interface Microsoft.Windows.System.Power.IPowerManagerStatics {
    public BatteryStatus BatteryStatus { get; }
    public DisplayStatus DisplayStatus { get; }
    public IAsyncOperation`1<EffectivePowerMode> EffectivePowerMode { get; }
    public EnergySaverStatus EnergySaverStatus { get; }
    public PowerSourceKind PowerSourceKind { get; }
    public PowerSupplyStatus PowerSupplyStatus { get; }
    public int RemainingChargePercent { get; }
    public TimeSpan RemainingDischargeTime { get; }
    public SystemSuspendStatus SystemSuspendStatus { get; }
    public UserPresenceStatus UserPresenceStatus { get; }
    public abstract virtual BatteryStatus get_BatteryStatus();
    public abstract virtual DisplayStatus get_DisplayStatus();
    public abstract virtual IAsyncOperation`1<EffectivePowerMode> get_EffectivePowerMode();
    public abstract virtual EnergySaverStatus get_EnergySaverStatus();
    public abstract virtual PowerSourceKind get_PowerSourceKind();
    public abstract virtual PowerSupplyStatus get_PowerSupplyStatus();
    public abstract virtual int get_RemainingChargePercent();
    public abstract virtual TimeSpan get_RemainingDischargeTime();
    public abstract virtual SystemSuspendStatus get_SystemSuspendStatus();
    public abstract virtual UserPresenceStatus get_UserPresenceStatus();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BatteryStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BatteryStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisplayStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisplayStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EffectivePowerModeChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EffectivePowerModeChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EnergySaverStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EnergySaverStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PowerSourceKindChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PowerSourceKindChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PowerSupplyStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PowerSupplyStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemainingChargePercentChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemainingChargePercentChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemainingDischargeTimeChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemainingDischargeTimeChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SystemIdleStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SystemIdleStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SystemSuspendStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SystemSuspendStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_UserPresenceStatusChanged(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UserPresenceStatusChanged(EventHandler`1<object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[GuidAttribute("61F3CC25-65B4-5DEF-9C9B-990CEF3B0833")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.System.Power.IPowerManagerStatics2")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "131072")]
internal interface Microsoft.Windows.System.Power.IPowerManagerStatics2 {
    public EffectivePowerMode EffectivePowerMode2 { get; }
    public abstract virtual EffectivePowerMode get_EffectivePowerMode2();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public static class Microsoft.Windows.System.Power.PowerManager : object {
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2;
    private static IObjectReference _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2 { get; }
    public static BatteryStatus BatteryStatus { get; }
    public static DisplayStatus DisplayStatus { get; }
    public static IAsyncOperation`1<EffectivePowerMode> EffectivePowerMode { get; }
    public static EffectivePowerMode EffectivePowerMode2 { get; }
    public static EnergySaverStatus EnergySaverStatus { get; }
    public static PowerSourceKind PowerSourceKind { get; }
    public static PowerSupplyStatus PowerSupplyStatus { get; }
    public static int RemainingChargePercent { get; }
    public static TimeSpan RemainingDischargeTime { get; }
    public static SystemSuspendStatus SystemSuspendStatus { get; }
    public static UserPresenceStatus UserPresenceStatus { get; }
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics();
    public static void add_BatteryStatusChanged(EventHandler`1<object> value);
    public static void remove_BatteryStatusChanged(EventHandler`1<object> value);
    public static void add_DisplayStatusChanged(EventHandler`1<object> value);
    public static void remove_DisplayStatusChanged(EventHandler`1<object> value);
    public static void add_EffectivePowerModeChanged(EventHandler`1<object> value);
    public static void remove_EffectivePowerModeChanged(EventHandler`1<object> value);
    public static void add_EnergySaverStatusChanged(EventHandler`1<object> value);
    public static void remove_EnergySaverStatusChanged(EventHandler`1<object> value);
    public static void add_PowerSourceKindChanged(EventHandler`1<object> value);
    public static void remove_PowerSourceKindChanged(EventHandler`1<object> value);
    public static void add_PowerSupplyStatusChanged(EventHandler`1<object> value);
    public static void remove_PowerSupplyStatusChanged(EventHandler`1<object> value);
    public static void add_RemainingChargePercentChanged(EventHandler`1<object> value);
    public static void remove_RemainingChargePercentChanged(EventHandler`1<object> value);
    public static void add_RemainingDischargeTimeChanged(EventHandler`1<object> value);
    public static void remove_RemainingDischargeTimeChanged(EventHandler`1<object> value);
    public static void add_SystemIdleStatusChanged(EventHandler`1<object> value);
    public static void remove_SystemIdleStatusChanged(EventHandler`1<object> value);
    public static void add_SystemSuspendStatusChanged(EventHandler`1<object> value);
    public static void remove_SystemSuspendStatusChanged(EventHandler`1<object> value);
    public static void add_UserPresenceStatusChanged(EventHandler`1<object> value);
    public static void remove_UserPresenceStatusChanged(EventHandler`1<object> value);
    private static IObjectReference get__objRef_global__Microsoft_Windows_System_Power_IPowerManagerStatics2();
    public static BatteryStatus get_BatteryStatus();
    public static DisplayStatus get_DisplayStatus();
    public static IAsyncOperation`1<EffectivePowerMode> get_EffectivePowerMode();
    public static EffectivePowerMode get_EffectivePowerMode2();
    public static EnergySaverStatus get_EnergySaverStatus();
    public static PowerSourceKind get_PowerSourceKind();
    public static PowerSupplyStatus get_PowerSupplyStatus();
    public static int get_RemainingChargePercent();
    public static TimeSpan get_RemainingDischargeTime();
    public static SystemSuspendStatus get_SystemSuspendStatus();
    public static UserPresenceStatus get_UserPresenceStatus();
}
[ContractVersionAttribute("131072")]
public enum Microsoft.Windows.System.Power.PowerNotificationsContract : Enum {
    public int value__;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.PowerSourceKind>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.PowerSourceKind : Enum {
    public int value__;
    public static PowerSourceKind AC;
    public static PowerSourceKind DC;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.PowerSupplyStatus>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.PowerSupplyStatus : Enum {
    public int value__;
    public static PowerSupplyStatus NotPresent;
    public static PowerSupplyStatus Inadequate;
    public static PowerSupplyStatus Adequate;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.SystemSuspendStatus>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.SystemSuspendStatus : Enum {
    public int value__;
    public static SystemSuspendStatus Uninitialized;
    public static SystemSuspendStatus Entering;
    public static SystemSuspendStatus AutoResume;
    public static SystemSuspendStatus ManualResume;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System.Power")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Windows.System.Power.UserPresenceStatus>")]
[ContractVersionAttribute("Microsoft.Windows.System.Power.PowerNotificationsContract", "65536")]
public enum Microsoft.Windows.System.Power.UserPresenceStatus : Enum {
    public int value__;
    public static UserPresenceStatus Present;
    public static UserPresenceStatus Absent;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Windows_System_Power_EffectivePowerMode : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Windows_System_Power_EffectivePowerMode();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_EventHandler_1_object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_EventHandler_1_object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, object sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_System_Power_EffectivePowerMode : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Microsoft_Windows_System_Power_EffectivePowerMode();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static EffectivePowerMode GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<EffectivePowerMode> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<EffectivePowerMode> value);
    private static bool Init();
}
internal static class WinRT.ProjectionInitializer : object {
    [ModuleInitializerAttribute]
public static void InitalizeProjection();
}
