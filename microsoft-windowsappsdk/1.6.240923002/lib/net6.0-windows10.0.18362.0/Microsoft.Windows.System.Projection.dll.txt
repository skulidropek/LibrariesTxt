[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Windows.System.EnvironmentManager : ValueType {
    public static IObjectReference CreateMarshaler(EnvironmentManager obj);
    public static ObjectReferenceValue CreateMarshaler2(EnvironmentManager obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EnvironmentManager FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EnvironmentManager obj);
    public static MarshalerArray<EnvironmentManager> CreateMarshalerArray(EnvironmentManager[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EnvironmentManager[] FromAbiArray(object box);
    public static void CopyAbiArray(EnvironmentManager[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EnvironmentManager[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EnvironmentManager> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Windows.System.EnvironmentManagerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("D1B239BB-7013-5176-B02A-63477410D986")]
internal interface ABI.Microsoft.Windows.System.IEnvironmentManager {
}
[GuidAttribute("CFC0AD51-02B7-57FF-8CA7-E015251737CB")]
internal interface ABI.Microsoft.Windows.System.IEnvironmentManager2 {
}
internal static class ABI.Microsoft.Windows.System.IEnvironmentManager2Methods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AreChangesTracked(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Windows.System.IEnvironmentManagerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IReadOnlyDictionary`2<string, string> GetEnvironmentVariables(IObjectReference _obj);
    internal static string GetEnvironmentVariable(IObjectReference _obj, string name);
    internal static void SetEnvironmentVariable(IObjectReference _obj, string name, string value);
    internal static void AppendToPath(IObjectReference _obj, string path);
    internal static void RemoveFromPath(IObjectReference _obj, string path);
    internal static void AddExecutableFileExtension(IObjectReference _obj, string pathExt);
    internal static void RemoveExecutableFileExtension(IObjectReference _obj, string pathExt);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("407B1522-6156-5398-93FD-D6411C35E7B1")]
internal interface ABI.Microsoft.Windows.System.IEnvironmentManagerStatics {
}
internal static class ABI.Microsoft.Windows.System.IEnvironmentManagerStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EnvironmentManager GetForProcess(IObjectReference _obj);
    internal static EnvironmentManager GetForUser(IObjectReference _obj);
    internal static EnvironmentManager GetForMachine(IObjectReference _obj);
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.System.EnvironmentManager")]
[EnvironmentManagerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Windows.System.IEnvironmentManager")]
[ContractVersionAttribute("Microsoft.Windows.System.EnvironmentManagerContract", "65536")]
public class Microsoft.Windows.System.EnvironmentManager : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_System_IEnvironmentManager2;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Windows_System_IEnvironmentManagerStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_System_IEnvironmentManager { get; }
    private IObjectReference _objRef_global__Microsoft_Windows_System_IEnvironmentManager2 { get; }
    private static IObjectReference _objRef_global__Microsoft_Windows_System_IEnvironmentManagerStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AreChangesTracked { get; }
    internal EnvironmentManager(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Windows_System_IEnvironmentManager();
    private IObjectReference Make___objRef_global__Microsoft_Windows_System_IEnvironmentManager2();
    private IObjectReference get__objRef_global__Microsoft_Windows_System_IEnvironmentManager2();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Windows_System_IEnvironmentManagerStatics();
    public static EnvironmentManager GetForProcess();
    public static EnvironmentManager GetForUser();
    public static EnvironmentManager GetForMachine();
    public static bool get_IsSupported();
    public static EnvironmentManager FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EnvironmentManager x, EnvironmentManager y);
    public static bool op_Inequality(EnvironmentManager x, EnvironmentManager y);
    public sealed virtual bool Equals(EnvironmentManager other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public IReadOnlyDictionary`2<string, string> GetEnvironmentVariables();
    public string GetEnvironmentVariable(string name);
    public void SetEnvironmentVariable(string name, string value);
    public void AppendToPath(string path);
    public void RemoveFromPath(string path);
    public void AddExecutableFileExtension(string pathExt);
    public void RemoveExecutableFileExtension(string pathExt);
    public bool get_AreChangesTracked();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[ContractVersionAttribute("131072")]
public enum Microsoft.Windows.System.EnvironmentManagerContract : Enum {
    public int value__;
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System")]
[GuidAttribute("D1B239BB-7013-5176-B02A-63477410D986")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.System.IEnvironmentManager")]
[ContractVersionAttribute("Microsoft.Windows.System.EnvironmentManagerContract", "65536")]
internal interface Microsoft.Windows.System.IEnvironmentManager {
    public abstract virtual IReadOnlyDictionary`2<string, string> GetEnvironmentVariables();
    public abstract virtual string GetEnvironmentVariable(string name);
    public abstract virtual void SetEnvironmentVariable(string name, string value);
    public abstract virtual void AppendToPath(string path);
    public abstract virtual void RemoveFromPath(string path);
    public abstract virtual void AddExecutableFileExtension(string pathExt);
    public abstract virtual void RemoveExecutableFileExtension(string pathExt);
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System")]
[GuidAttribute("CFC0AD51-02B7-57FF-8CA7-E015251737CB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.System.IEnvironmentManager2")]
[ContractVersionAttribute("Microsoft.Windows.System.EnvironmentManagerContract", "131072")]
internal interface Microsoft.Windows.System.IEnvironmentManager2 {
    public bool AreChangesTracked { get; }
    public abstract virtual bool get_AreChangesTracked();
}
[WindowsRuntimeTypeAttribute("Microsoft.Windows.System")]
[GuidAttribute("407B1522-6156-5398-93FD-D6411C35E7B1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Windows.System.IEnvironmentManagerStatics")]
[ContractVersionAttribute("Microsoft.Windows.System.EnvironmentManagerContract", "65536")]
internal interface Microsoft.Windows.System.IEnvironmentManagerStatics {
    public bool IsSupported { get; }
    public abstract virtual EnvironmentManager GetForProcess();
    public abstract virtual EnvironmentManager GetForUser();
    public abstract virtual EnvironmentManager GetForMachine();
    public abstract virtual bool get_IsSupported();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, string>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, string> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static string get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.ProjectionInitializer : object {
    [ModuleInitializerAttribute]
public static void InitalizeProjection();
}
