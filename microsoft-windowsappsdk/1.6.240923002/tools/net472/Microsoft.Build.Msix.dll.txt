internal class Microsoft.Build.Msix.ApiIndexedResourceCandidate : object {
    private IndexedResourceCandidate indexedResourceCandidate;
    private string Microsoft.Build.Msix.IIndexedResourceCandidate.UriAbsolutePath { get; }
    private IndexedResourceQualifier[] Microsoft.Build.Msix.IIndexedResourceCandidate.Qualifiers { get; }
    internal ApiIndexedResourceCandidate(IndexedResourceCandidate indexedResourceCandidate);
    private sealed virtual override string Microsoft.Build.Msix.IIndexedResourceCandidate.get_UriAbsolutePath();
    private sealed virtual override IndexedResourceQualifier[] Microsoft.Build.Msix.IIndexedResourceCandidate.get_Qualifiers();
}
internal class Microsoft.Build.Msix.ApiResourceIndexer : object {
    private ResourceIndexer resourceIndexer;
    internal ApiResourceIndexer(ResourceIndexer resourceIndexer);
    private sealed virtual override IIndexedResourceCandidate Microsoft.Build.Msix.IResourceIndexer.IndexFilePath(string filePath);
}
internal class Microsoft.Build.Msix.ApiResourceIndexMap : ResourceIndexMap {
    private string projectDir;
    private IResourceIndexer resourceIndexer;
    public ApiResourceIndexMap(string projectDir);
    public virtual Resource Map(string targetPath);
}
public class Microsoft.Build.Msix.AppInstaller.WinAppSdkCreateAppInstallerPublishMeta : Task {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <AppInstallerMetaSearchDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AppInstallerPublishMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [RequiredAttribute]
public string AppInstallerMetaSearchDirectory { get; public set; }
    [RequiredAttribute]
public bool IsBundle { get; public set; }
    [RequiredAttribute]
public string AppVersion { get; public set; }
    [OutputAttribute]
public ITaskItem AppInstallerPublishMeta { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppInstallerMetaSearchDirectory();
    [CompilerGeneratedAttribute]
public void set_AppInstallerMetaSearchDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_IsBundle();
    [CompilerGeneratedAttribute]
public void set_IsBundle(bool value);
    [CompilerGeneratedAttribute]
public string get_AppVersion();
    [CompilerGeneratedAttribute]
public void set_AppVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AppInstallerPublishMeta();
    [CompilerGeneratedAttribute]
public void set_AppInstallerPublishMeta(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    public virtual bool Execute();
    private void ExecuteImplementation();
    private string GetLogoFilePath(AppInstallerInfo appInstallerInfo);
    [CompilerGeneratedAttribute]
private bool <ExecuteImplementation>b__22_1(AppInstallerInfo a);
}
public class Microsoft.Build.Msix.AppInstaller.WinAppSdkGenerateAppInstallerFile : Task {
    private AppxPackagingTaskHelper taskHelper;
    private static XNamespace UapNamespace;
    private static string AppInstallerFileExtension;
    private static string AppInstallerProjectUsesLegacyBuildProperties;
    private static string Hourly;
    private static string Daily;
    private static string Weekly;
    private static string OnApplicationRun;
    private static string ProjectContainsAppInstallerTemplate;
    private static int OneHour;
    private static int NumberOfHoursInADay;
    private static int NumberOfHoursInAWeek;
    private Uri appInstallerFileInstallationUri;
    private string appInstallerFileName;
    private XNamespace appInstallerNamespace;
    private string appInstallerTemplateFileName;
    private string appxIdentityName;
    private string appxIdentityVersion;
    private string appxIdentityPublisher;
    private string appxDisplayPublisher;
    private string appxDescription;
    private string appxDisplayName;
    private string appxLogo;
    private string backgroundColor;
    private string appxMinVersion;
    private string appxProcessorArchitecture;
    private List`1<string> fileWrites;
    [CompilerGeneratedAttribute]
private string <AppInstallerCheckForUpdateFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppInstallerUpdateFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AppInstallerTemplateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppInstallerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxBundlePlatforms>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxPackageDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleArtifactsDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FinalAppxManifestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkSdkPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HoursBetweenUpdateChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProduceAppxBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFileDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxPackagingComponentManifestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AppInstallerFileWrites>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppInstallerFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppInstallerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    public string AppInstallerCheckForUpdateFrequency { get; public set; }
    public string AppInstallerUpdateFrequency { get; public set; }
    public ITaskItem AppInstallerTemplateFile { get; public set; }
    [RequiredAttribute]
public string AppInstallerUri { get; public set; }
    public string AppxBundlePlatforms { get; public set; }
    [RequiredAttribute]
public string AppxPackageDir { get; public set; }
    [RequiredAttribute]
public string AppxUri { get; public set; }
    [RequiredAttribute]
public string BundleArtifactsDir { get; public set; }
    [RequiredAttribute]
public string FinalAppxManifestFile { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkSdkPackages { get; public set; }
    public string HoursBetweenUpdateChecks { get; public set; }
    [RequiredAttribute]
public bool ProduceAppxBundle { get; public set; }
    [RequiredAttribute]
public string ProjectFileDir { get; public set; }
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [RequiredAttribute]
public string AppxPackagingComponentManifestPath { get; public set; }
    [RequiredAttribute]
public string ResourceRoot { get; public set; }
    [OutputAttribute]
public ITaskItem[] AppInstallerFileWrites { get; public set; }
    [OutputAttribute]
public string AppInstallerFilePath { get; public set; }
    [OutputAttribute]
public string AppInstallerVersion { get; public set; }
    public string VSTelemetrySession { get; public set; }
    private string AppInstallerFileInstallationUri { get; }
    private string MainPackageRelativePath { get; }
    internal string MainPackageUri { get; }
    private static WinAppSdkGenerateAppInstallerFile();
    [CompilerGeneratedAttribute]
public string get_AppInstallerCheckForUpdateFrequency();
    [CompilerGeneratedAttribute]
public void set_AppInstallerCheckForUpdateFrequency(string value);
    [CompilerGeneratedAttribute]
public string get_AppInstallerUpdateFrequency();
    [CompilerGeneratedAttribute]
public void set_AppInstallerUpdateFrequency(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AppInstallerTemplateFile();
    [CompilerGeneratedAttribute]
public void set_AppInstallerTemplateFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_AppInstallerUri();
    [CompilerGeneratedAttribute]
public void set_AppInstallerUri(string value);
    [CompilerGeneratedAttribute]
public string get_AppxBundlePlatforms();
    [CompilerGeneratedAttribute]
public void set_AppxBundlePlatforms(string value);
    [CompilerGeneratedAttribute]
public string get_AppxPackageDir();
    [CompilerGeneratedAttribute]
public void set_AppxPackageDir(string value);
    [CompilerGeneratedAttribute]
public string get_AppxUri();
    [CompilerGeneratedAttribute]
public void set_AppxUri(string value);
    [CompilerGeneratedAttribute]
public string get_BundleArtifactsDir();
    [CompilerGeneratedAttribute]
public void set_BundleArtifactsDir(string value);
    [CompilerGeneratedAttribute]
public string get_FinalAppxManifestFile();
    [CompilerGeneratedAttribute]
public void set_FinalAppxManifestFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkSdkPackages();
    [CompilerGeneratedAttribute]
public void set_FrameworkSdkPackages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_HoursBetweenUpdateChecks();
    [CompilerGeneratedAttribute]
public void set_HoursBetweenUpdateChecks(string value);
    [CompilerGeneratedAttribute]
public bool get_ProduceAppxBundle();
    [CompilerGeneratedAttribute]
public void set_ProduceAppxBundle(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectFileDir();
    [CompilerGeneratedAttribute]
public void set_ProjectFileDir(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_AppxPackagingComponentManifestPath();
    [CompilerGeneratedAttribute]
public void set_AppxPackagingComponentManifestPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceRoot();
    [CompilerGeneratedAttribute]
public void set_ResourceRoot(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AppInstallerFileWrites();
    [CompilerGeneratedAttribute]
public void set_AppInstallerFileWrites(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AppInstallerFilePath();
    [CompilerGeneratedAttribute]
public void set_AppInstallerFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_AppInstallerVersion();
    [CompilerGeneratedAttribute]
public void set_AppInstallerVersion(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    private string get_AppInstallerFileInstallationUri();
    private string get_MainPackageRelativePath();
    internal string get_MainPackageUri();
    public virtual bool Execute();
    private void ExecuteImplementation();
    private void AddDependenciesIfNecessary(XElement element);
    private void AddOnLaunchUpdateCheck(XElement appInstaller);
    private int CalculateHoursBetweenUpdateChecks();
    private void AddPackageDependencies(XElement dependenciesRoot);
    private string GetProperlyCasedProcessArchitecture(string processorArchitecture);
    internal static string GetExactPathName(string path);
    private XmlWriterSettings ConfigureXmlWriterSettings();
    private void CreateAppInstallerFile(string uri, bool addOnLaunchUpdateCheck);
    private void CreateIntermediateAppInstallerFile(string appInstallerFile);
    private void PostGenerateAppInstallerFileTelemetryFault(Exception e);
    private void ReadAppxManifestFile();
    private XElement ReplaceElement(XElement parent, XElement currentElement, XName newName);
    private void SaveAndWriteFile(XDocument root);
    internal static Uri UriCombine(string baseUri, string relativeUri);
}
public class Microsoft.Build.Msix.AppInstaller.WinAppSdkGenerateLandingPage : Task {
    private static string defaultInjectKeyStart;
    private static string defaultInjectKeyEnd;
    private AppxPackagingTaskHelper taskHelper;
    private static string htmlStartInjection;
    private static string htmlEndInjection;
    private static string cssStartInjection;
    private static string cssEndInjection;
    private static string buttonMapValue;
    private static string buttonMapPattern;
    private static string seperatorPattern;
    [CompilerGeneratedAttribute]
private string <OutputFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredOS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublisherName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportedArchitectures>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TileColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StyleFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalLinksMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LandingPagePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    internal Regex htmlInlineStartRegex;
    internal Regex htmlInlineEndRegex;
    internal Regex cssInlineStartRegex;
    internal Regex cssInlineEndRegex;
    internal Regex buttonMapRegex;
    internal Regex buttonValueRegex;
    [RequiredAttribute]
public string OutputFolder { get; public set; }
    [RequiredAttribute]
public string AppName { get; public set; }
    public string AppDescription { get; public set; }
    [RequiredAttribute]
public string Version { get; public set; }
    [RequiredAttribute]
public string RequiredOS { get; public set; }
    [RequiredAttribute]
public string PublisherName { get; public set; }
    [RequiredAttribute]
public string SupportedArchitectures { get; public set; }
    [RequiredAttribute]
public string ButtonMap { get; public set; }
    public string TileColor { get; public set; }
    public string OutputFileName { get; public set; }
    [RequiredAttribute]
public string ResourceRoot { get; public set; }
    public string ImageFile { get; public set; }
    public string TemplateFile { get; public set; }
    public string StyleFile { get; public set; }
    public string AdditionalLinksMap { get; public set; }
    [OutputAttribute]
public string LandingPagePath { get; public set; }
    public string VSTelemetrySession { get; public set; }
    private static WinAppSdkGenerateLandingPage();
    [CompilerGeneratedAttribute]
public string get_OutputFolder();
    [CompilerGeneratedAttribute]
public void set_OutputFolder(string value);
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_AppDescription();
    [CompilerGeneratedAttribute]
public void set_AppDescription(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_RequiredOS();
    [CompilerGeneratedAttribute]
public void set_RequiredOS(string value);
    [CompilerGeneratedAttribute]
public string get_PublisherName();
    [CompilerGeneratedAttribute]
public void set_PublisherName(string value);
    [CompilerGeneratedAttribute]
public string get_SupportedArchitectures();
    [CompilerGeneratedAttribute]
public void set_SupportedArchitectures(string value);
    [CompilerGeneratedAttribute]
public string get_ButtonMap();
    [CompilerGeneratedAttribute]
public void set_ButtonMap(string value);
    [CompilerGeneratedAttribute]
public string get_TileColor();
    [CompilerGeneratedAttribute]
public void set_TileColor(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFileName();
    [CompilerGeneratedAttribute]
public void set_OutputFileName(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceRoot();
    [CompilerGeneratedAttribute]
public void set_ResourceRoot(string value);
    [CompilerGeneratedAttribute]
public string get_ImageFile();
    [CompilerGeneratedAttribute]
public void set_ImageFile(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateFile();
    [CompilerGeneratedAttribute]
public void set_TemplateFile(string value);
    [CompilerGeneratedAttribute]
public string get_StyleFile();
    [CompilerGeneratedAttribute]
public void set_StyleFile(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalLinksMap();
    [CompilerGeneratedAttribute]
public void set_AdditionalLinksMap(string value);
    [CompilerGeneratedAttribute]
public string get_LandingPagePath();
    [CompilerGeneratedAttribute]
public void set_LandingPagePath(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    public virtual bool Execute();
    private void ExecuteImplementation();
    internal bool ValidateMap(string input, string mapName);
    private void ResolvePaths();
    private InjectParams BuildInjectParams();
    private string ParseKeyValueMap(string downloadMap, Func`3<string, string, string> formatterFunc);
    private string ReadInStyleFiles(string styleFiles, InjectParams injectParams);
    internal string ReadAndInject(string file, InjectParams injectParams, Regex inlineStart, Regex inlineEnd);
    internal string Base64EncodeImgFile(string imageFilePath);
    private void BuildOutputfile(InjectParams injectParams);
    private FileStream CreateOutputFileStream(string outputFolder, string outputFileName);
    internal string Encode(string urlString);
    [CompilerGeneratedAttribute]
private string <BuildInjectParams>b__88_0(string arch, string href);
    [CompilerGeneratedAttribute]
private string <BuildInjectParams>b__88_1(string linkText, string href);
}
public class Microsoft.Build.Msix.AppxManifest.WinAppSdkGenerateAppxManifest : Task {
    private static string IdentityElementName;
    private static string PublisherAttributeName;
    private static string ApplicationElementName;
    private static string ExtensionElementName;
    private static string ExecutableAttributeName;
    private static string ExecutableReplaceValue;
    private static string EntryPointAttributeName;
    private static string EntryPointReplaceValue;
    private static string DependenciesElementName;
    private static string MainPackageDependencyElementName;
    private static string DependencyElementName;
    private static string DriverDependencyElementName;
    private static string NameAttributeName;
    private static string TargetDeviceFamilyElementName;
    private static string MinVersionAttributeName;
    private static string MaxVersionTestedAttributeName;
    private static string VersionPartKey;
    private static string ProcessorArchitecture;
    private static string ResourceCollectionElementName;
    private static string ResourceElementName;
    private static string LanguageAttributeName;
    private static string ExtensionCollectionElementName;
    private static string PrerequisitesElementName;
    private static string MaxMajorVersionTestedAttributeName;
    private static string CapabilitiesElementName;
    private static string IgnorableNamespacesAttributeName;
    private static string PropertiesCollectionElementName;
    private static string SparsePackageTypeName;
    private XDocument document;
    private XNamespace xmlNamespace;
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <ApplicationExecutableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PackageSigningEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSigningChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformMinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WinmdCacheEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WinmdCacheDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsPackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AppxManifestInput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkSdkReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NonFrameworkSdkReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxManifestOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultResourceLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QualifiersPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedWinmdInprocImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <WinmdFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SDKWinmdFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataNamespaceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TargetDeviceFamilies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestrictedCapabilitiesNamespaceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uap10NamespaceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DesktopNamespaceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityPublisher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    public string ApplicationExecutableName { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public string CertificateFile { get; public set; }
    public bool PackageSigningEnabled { get; public set; }
    public bool EnableSigningChecks { get; public set; }
    public string TargetPlatformMinVersion { get; public set; }
    public string TargetPlatformVersion { get; public set; }
    public string VSTelemetrySession { get; public set; }
    public bool WinmdCacheEnabled { get; public set; }
    public string WinmdCacheDir { get; public set; }
    public ITaskItem[] ManifestMetadata { get; public set; }
    public string EntryPoint { get; public set; }
    [RequiredAttribute]
public string WindowsPackageType { get; public set; }
    [RequiredAttribute]
public ITaskItem AppxManifestInput { get; public set; }
    public string PackageArchitecture { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkSdkReferences { get; public set; }
    [RequiredAttribute]
public ITaskItem[] NonFrameworkSdkReferences { get; public set; }
    [RequiredAttribute]
public string AppxManifestOutput { get; public set; }
    [RequiredAttribute]
public string DefaultResourceLanguage { get; public set; }
    [RequiredAttribute]
public string QualifiersPath { get; public set; }
    [RequiredAttribute]
public string ManagedWinmdInprocImplementation { get; public set; }
    [RequiredAttribute]
public ITaskItem[] WinmdFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SDKWinmdFiles { get; public set; }
    [RequiredAttribute]
public string MetadataNamespaceUri { get; public set; }
    [RequiredAttribute]
public ITaskItem[] TargetDeviceFamilies { get; public set; }
    [RequiredAttribute]
public string RestrictedCapabilitiesNamespaceUri { get; public set; }
    [RequiredAttribute]
public string Uap10NamespaceUri { get; public set; }
    [RequiredAttribute]
public string DesktopNamespaceUri { get; public set; }
    [OutputAttribute]
public string Identity { get; public set; }
    [OutputAttribute]
public string IdentityPublisher { get; public set; }
    [OutputAttribute]
public string ApplicationId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationExecutableName();
    [CompilerGeneratedAttribute]
public void set_ApplicationExecutableName(string value);
    [CompilerGeneratedAttribute]
public string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public void set_CertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public string get_CertificateFile();
    [CompilerGeneratedAttribute]
public void set_CertificateFile(string value);
    [CompilerGeneratedAttribute]
public bool get_PackageSigningEnabled();
    [CompilerGeneratedAttribute]
public void set_PackageSigningEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSigningChecks();
    [CompilerGeneratedAttribute]
public void set_EnableSigningChecks(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformMinVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformMinVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public bool get_WinmdCacheEnabled();
    [CompilerGeneratedAttribute]
public void set_WinmdCacheEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_WinmdCacheDir();
    [CompilerGeneratedAttribute]
public void set_WinmdCacheDir(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestMetadata();
    [CompilerGeneratedAttribute]
public void set_ManifestMetadata(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public string get_WindowsPackageType();
    [CompilerGeneratedAttribute]
public void set_WindowsPackageType(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AppxManifestInput();
    [CompilerGeneratedAttribute]
public void set_AppxManifestInput(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_PackageArchitecture();
    [CompilerGeneratedAttribute]
public void set_PackageArchitecture(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkSdkReferences();
    [CompilerGeneratedAttribute]
public void set_FrameworkSdkReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NonFrameworkSdkReferences();
    [CompilerGeneratedAttribute]
public void set_NonFrameworkSdkReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_AppxManifestOutput();
    [CompilerGeneratedAttribute]
public void set_AppxManifestOutput(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultResourceLanguage();
    [CompilerGeneratedAttribute]
public void set_DefaultResourceLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_QualifiersPath();
    [CompilerGeneratedAttribute]
public void set_QualifiersPath(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedWinmdInprocImplementation();
    [CompilerGeneratedAttribute]
public void set_ManagedWinmdInprocImplementation(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_WinmdFiles();
    [CompilerGeneratedAttribute]
public void set_WinmdFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SDKWinmdFiles();
    [CompilerGeneratedAttribute]
public void set_SDKWinmdFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_MetadataNamespaceUri();
    [CompilerGeneratedAttribute]
public void set_MetadataNamespaceUri(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TargetDeviceFamilies();
    [CompilerGeneratedAttribute]
public void set_TargetDeviceFamilies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_RestrictedCapabilitiesNamespaceUri();
    [CompilerGeneratedAttribute]
public void set_RestrictedCapabilitiesNamespaceUri(string value);
    [CompilerGeneratedAttribute]
public string get_Uap10NamespaceUri();
    [CompilerGeneratedAttribute]
public void set_Uap10NamespaceUri(string value);
    [CompilerGeneratedAttribute]
public string get_DesktopNamespaceUri();
    [CompilerGeneratedAttribute]
public void set_DesktopNamespaceUri(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityPublisher();
    [CompilerGeneratedAttribute]
public void set_IdentityPublisher(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
public void set_ApplicationId(string value);
    public virtual bool Execute();
    private void ExecuteImplementation();
    private bool ManifestFileExists();
    private void LoadDocument();
    private void LoadDataFromCertificateIfPossible();
    private void UpdateLanguages();
    private XElement GetLanguageElement(string lang);
    private void UpdateProcessorArchitecture(XElement identity);
    private bool ProcessDocument();
    private void UpdateManifestForSparsePackage();
    private void UpdateApplicationElementForSparsePackage(XNamespace uap10Namespace);
    private void AddAllowExternalContent(XNamespace uap10Namespace);
    private void UpdateDependencies();
    private void AddUnvirtualizedResourceCapability();
    private void AddCapability(XNamespace xmlNamespace, string value);
    private void UpdateEntryPoint(string entryPoint);
    private void AddNamespaceIfNeeded(string prefix, string uri);
    private void AddMetadata();
    private void UpdateExecutableName(IEnumerable`1<XAttribute> executableAttributes, string executableName);
    private void CreateDependencyElementIfNeeded(XElement dependenciesElement, ITaskItem resolvedSdkReference);
    private void SaveDocument();
    private void UpdateWinmdRegistration();
    private void UpdateTargetDeviceFamily(XElement dependencies);
    [CompilerGeneratedAttribute]
private string <Execute>b__155_0();
}
public class Microsoft.Build.Msix.AppxManifest.WinAppSdkGetFrameworkSdkPackages : Task {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkSdkReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkSdkPackages>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkSdkReferences { get; public set; }
    [RequiredAttribute]
public string TargetPlatformIdentifier { get; public set; }
    [OutputAttribute]
public ITaskItem[] FrameworkSdkPackages { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkSdkReferences();
    [CompilerGeneratedAttribute]
public void set_FrameworkSdkReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformIdentifier(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkSdkPackages();
    [CompilerGeneratedAttribute]
public void set_FrameworkSdkPackages(ITaskItem[] value);
    public virtual bool Execute();
    private void ExtractFrameworkSdkPackages();
}
public class Microsoft.Build.Msix.AppxManifest.WinAppSdkRemoveDuplicateSDKReferences : Task {
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Filtered>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Inputs { get; public set; }
    [OutputAttribute]
public ITaskItem[] Filtered { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Filtered();
    [CompilerGeneratedAttribute]
public void set_Filtered(ITaskItem[] value);
    public virtual bool Execute();
    private void ExecuteImplementation();
}
public class Microsoft.Build.Msix.AppxManifest.WinAppSdkValidateAppxManifestItems : Task {
    private static string IdentityElementName;
    private static string NameAttributeName;
    private static string VersionAttributeName;
    private AppxPackagingTaskHelper taskHelper;
    private string appxManifest;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AppxManifestItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CustomAppxManifestItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityVersion>k__BackingField;
    public ITaskItem[] AppxManifestItems { get; public set; }
    public ITaskItem[] CustomAppxManifestItems { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [OutputAttribute]
public string IdentityName { get; public set; }
    [OutputAttribute]
public string IdentityVersion { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AppxManifestItems();
    [CompilerGeneratedAttribute]
public void set_AppxManifestItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CustomAppxManifestItems();
    [CompilerGeneratedAttribute]
public void set_CustomAppxManifestItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityName();
    [CompilerGeneratedAttribute]
public void set_IdentityName(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityVersion();
    [CompilerGeneratedAttribute]
public void set_IdentityVersion(string value);
    public virtual bool Execute();
    private void ExecuteImplementation();
    private string BuildListOfItems(ITaskItem[] appxManifestItems, ITaskItem[] customAppxManifestItems);
    [CompilerGeneratedAttribute]
private string <Execute>b__25_0();
}
internal class Microsoft.Build.Msix.AppxManifest.WinmdVisitor : MetadataVisitor {
    internal static string SdkManifestFileName;
    private static string DefaultThreadingModel;
    private static string ActivatableAttributeName;
    private static string ComposableAttributeName;
    private static string StaticAttributeName;
    private static string ThreadingAttributeName;
    private static string ExclusiveToAttributeName;
    private AppxPackagingTaskHelper taskHelper;
    private MetadataTraverser traverser;
    private String[] otherWinmdFiles;
    private string rootNamespace;
    private List`1<string> typeNames;
    private List`1<string> namespaceNames;
    private string fullPath;
    private WinMdCache cache;
    private string fileName;
    private string fileNameWithoutExtension;
    private string implementationFile;
    private bool harvestRegistrationInformation;
    private string managedWinmdInprocImplementation;
    private Dictionary`2<string, string> typeToImplementation;
    private IDictionary`2<string, InprocServer> inprocServers;
    private EventHandler`1<KeyValuePair`2<string, string>> namespaceVisited;
    private WinmdVisitor(AppxPackagingTaskHelper taskHelper, ITaskItem winmdItem, WinMdCacheOptions cacheOptions);
    private WinmdVisitor(AppxPackagingTaskHelper taskHelper, ITaskItem winmdItem, string implementationFile, WinMdCacheOptions cacheOptions);
    public static IEnumerable`1<InprocServer> Process(AppxPackagingTaskHelper taskHelper, ITaskItem[] winmdFiles, ITaskItem[] nonFrameworkSdkReferences, ITaskItem[] sdkWinmdFiles, string managedWinmdInprocImplementation, bool harvestRegistrationInformation, WinMdCacheOptions cacheOptions);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void SetOtherWinmdFiles(IEnumerable`1<WinmdVisitor> allWinmdFiles);
    public void Traverse(DefaultHost host, bool swallowTraversalException);
    private void TraverseFromCache();
    private void TraverseAssembly(IAssembly assembly, bool swallowTraversalException);
    public virtual void Visit(IAssembly assembly);
    public virtual void Visit(INamespaceTypeDefinition typeDef);
    public virtual void Visit(IPropertyDefinition propDef);
    private void AddInProcServersFromCache();
    private void ValidateNamespacesAreLongest(object sender, KeyValuePair`2<string, string> visitedNamespace);
    private static IEnumerable`1<InprocServer> ProcessInternal(AppxPackagingTaskHelper taskHelper, ITaskItem[] winmdFiles, ITaskItem[] nonFrameworkSdkReferences, ITaskItem[] sdkWinmdFiles, string managedWinmdInprocImplementation, bool harvestRegistrationInformation, bool loadMscorlibIntoHost, WinMdCacheOptions cacheOptions);
    private static ITaskItem GetBestWinmdItem(IGrouping`2<string, ITaskItem> grouping);
    [IteratorStateMachineAttribute("Microsoft.Build.Msix.AppxManifest.WinmdVisitor/<ReadSdkManifestForWinmds>d__39")]
private static IEnumerable`1<WinmdVisitor> ReadSdkManifestForWinmds(AppxPackagingTaskHelper taskHelper, ITaskItem sdkReference, ITaskItem[] sdkWinmdFiles, WinMdCacheOptions cacheOptions);
    private void ValidateInterfacesOnType(INamespaceTypeDefinition typeDef);
    private bool WinmdIsCandidateForHarvesting();
    private void HarvestRegistrationInformation(INamespaceTypeDefinition typeDef, string fullTypeName);
    private void GetImplementationFile(IAssembly assembly);
    private IAssembly LoadAssembly(DefaultHost host);
    private void Traverse(IAssembly assembly, bool swallowTraversalException);
    private void CheckForTypeNameColisions();
    private void CheckForNamespaceNameColisions();
    private static void ResolveCoreAssemblySymbolicIdentityPropertyForHost(DefaultHost host);
    [CompilerGeneratedAttribute]
private bool <SetOtherWinmdFiles>b__28_1(string file);
    [CompilerGeneratedAttribute]
private void <TraverseAssembly>b__31_0(object sender, KeyValuePair`2<string, string> kvp);
}
internal class Microsoft.Build.Msix.AppxPackageFile : object {
    [CompilerGeneratedAttribute]
private Version <PackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackagePath>k__BackingField;
    internal Version PackageVersion { get; private set; }
    internal string PackagePath { get; private set; }
    internal AppxPackageFile(string packagePath, string appxPackagingComponentManifestPath);
    [CompilerGeneratedAttribute]
internal Version get_PackageVersion();
    [CompilerGeneratedAttribute]
private void set_PackageVersion(Version value);
    [CompilerGeneratedAttribute]
internal string get_PackagePath();
    [CompilerGeneratedAttribute]
private void set_PackagePath(string value);
    private void ReadAppxPackageFile(string appxPackagingComponentManifestPath);
    private static void Teardown(Object[] objects);
}
internal class Microsoft.Build.Msix.AppxPackagingTaskHelper : object {
    internal static int AppxInvalidManifestComErrorCode;
    internal static int OpcFacilityCode;
    private TaskLoggingHelper logger;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) canceled;
    private Action execute;
    private Func`2<Exception, bool> exceptionHandler;
    private Action cleanup;
    private Func`1<string> manifestFileNameGetter;
    private List`1<PackagingTaskError> errorsLogged;
    private List`1<string> warningsLogged;
    private bool preventLoggingDuplicateErrorsAndWarnings;
    internal string vsTelemetrySession;
    private LockFinder lockFinder;
    internal bool Canceled { get; }
    internal bool Failed { get; }
    internal bool PreventLoggingDuplicateErrorsAndWarnings { get; internal set; }
    internal AppxPackagingTaskHelper(TaskLoggingHelper logger, Action execute, Func`2<Exception, bool> exceptionHandler, Action cleanup, Func`1<string> manifestFileNameGetter, string vsTelemetrySession);
    internal bool get_Canceled();
    internal bool get_Failed();
    internal bool get_PreventLoggingDuplicateErrorsAndWarnings();
    internal void set_PreventLoggingDuplicateErrorsAndWarnings(bool value);
    public void LogError(string message, string callerMemberName, int callerLineNumber, Object[] messageArgs);
    public void LogError(string fileName, int lineNumber, int columnNumber, string message, string callerMemberName, int callerLineNumber, Object[] messageArgs);
    public sealed virtual void LogError(string message, Tuple`2<string, int> callerInfo, Object[] messageArgs);
    public sealed virtual void LogError(string fileName, int lineNumber, int columnNumber, string message, Tuple`2<string, int> callerInfo, Object[] messageArgs);
    public sealed virtual void LogWarning(string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string fileName, int lineNumber, int columnNumber, string message, Object[] messageArgs);
    public sealed virtual void LogMessage(string message, Object[] messageArgs);
    public sealed virtual void LogMessage(MessageImportance messageImportance, string message, Object[] messageArgs);
    public void LogVerbose(string message, Object[] messageArgs);
    internal static string ReadElementAttributeValue(XElement element, string attributeName);
    internal bool DoesFileExist(string fileName);
    internal bool EnsureThatDirectoryExists(string fileName);
    private void PostTelemetryFault(Exception e);
    internal bool Execute(string file);
    internal bool LogPotentialFileLockWarnings(Exception e, string fileName);
    private void LogFileLockErrors(string fileName);
    private void LogFileLockMessages(string fileName, Action`2<string, string> logFunction);
    internal void LogGenerateLandingPageReadOrInjectError(Exception e);
    internal void LogGenerateAppInstallerFileTelemetryFault(Exception e);
    internal void Cancel();
    internal void DeleteFile(string fileName);
    internal void CreateZipFile(string zipFileName, IEnumerable`1<ITaskItem> filesToAdd, string projectName, CompressionLevel compressionLevel);
    internal void LogWindowsPropsLoadingError(WindowsProps windowsProps, string targetPlatformIdentifier, string targetPlatformVersion);
    private void LogGenericTaskFailure(Exception e);
    [CompilerGeneratedAttribute]
private void <LogPotentialFileLockWarnings>b__35_0(string processName, string processTitle);
    [CompilerGeneratedAttribute]
private void <LogFileLockErrors>b__36_0(string processName, string processTitle);
}
[ExtensionAttribute]
public static class Microsoft.Build.Msix.AssemblyExtensions : object {
    [ExtensionAttribute]
internal static bool IsManagedWinmd(IAssembly winmd);
}
internal class Microsoft.Build.Msix.BuildMessage : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Code { get; private set; }
    public string Message { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    public static BuildMessage Split(string fullMessage);
}
internal static class Microsoft.Build.Msix.COM : object {
    public static int S_OK;
    public static int S_FALSE;
    public static int E_FAIL;
    public static int E_ABORT;
    public static int E_FILE_NOT_FOUND;
    [SecurityCriticalAttribute]
public static string GetErrorMessage(int hr);
    [SecurityCriticalAttribute]
public static bool Failed(int hr);
}
internal class Microsoft.Build.Msix.ComponentManifestActivationContext : object {
    private IntPtr handle;
    private IntPtr cookie;
    public ComponentManifestActivationContext(string componentManifest);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
    private void DeactivateAndReleaseContext();
}
public enum Microsoft.Build.Msix.Contrast : Enum {
    public int value__;
    public static Contrast Unset;
    public static Contrast Standard;
    public static Contrast High;
    public static Contrast Black;
    public static Contrast White;
}
internal class Microsoft.Build.Msix.Crypto.CertificateLoader : object {
    private static string StoreAssociationFileName;
    private static string VsGeneratedStoreCertificatePostFix;
    private static int InvalidPasswordError;
    private AppxPackagingTaskHelper taskHelper;
    private bool logWarningsAsErrors;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateFile>k__BackingField;
    internal X509Certificate2 Certificate { get; internal set; }
    internal string ResolvedThumbprint { get; internal set; }
    internal string CertificateFile { get; internal set; }
    internal CertificateLoader(AppxPackagingTaskHelper taskHelper, bool logWarningsAsErrors);
    [CompilerGeneratedAttribute]
internal X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
internal void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedThumbprint();
    [CompilerGeneratedAttribute]
internal void set_ResolvedThumbprint(string value);
    [CompilerGeneratedAttribute]
internal string get_CertificateFile();
    [CompilerGeneratedAttribute]
internal void set_CertificateFile(string value);
    internal bool Load(string certificateFile, string certificateThumbprint, bool enableSigningChecks);
    private void LogWarningOrError(string errorCode, Object[] args);
    private bool IsVsGeneratedStoreCertificate(string storeAssociationFilePath, string certPublisherId, string certificateFileName);
}
internal class Microsoft.Build.Msix.Crypto.CertificateManager : object {
    private static string IdKpCodeSigning;
    private static string KpLifetimeSigning;
    [CompilerGeneratedAttribute]
private StoreName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSigningChecks>k__BackingField;
    protected StoreName Name { get; protected set; }
    protected StoreLocation Location { get; protected set; }
    protected bool EnableSigningChecks { get; protected set; }
    public CertificateManager(StoreName name, StoreLocation location);
    [CompilerGeneratedAttribute]
protected StoreName get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(StoreName value);
    [CompilerGeneratedAttribute]
protected StoreLocation get_Location();
    [CompilerGeneratedAttribute]
protected void set_Location(StoreLocation value);
    [CompilerGeneratedAttribute]
protected bool get_EnableSigningChecks();
    [CompilerGeneratedAttribute]
protected void set_EnableSigningChecks(bool value);
    public X509Certificate2 LookupCertificate(string thumbprint);
    public X509Certificate2 LoadCertificateFile(string certificateFile, SecureString password);
    public X509Certificate2 TryLoadCertificateFile(string certificateFile, SecureString password);
    public X509Certificate2Collection GetValidSigningCertificates();
    public virtual X509Certificate2 ImportCertificateFromFile(string certificateFile, SecureString password);
    public virtual X509Certificate2 ImportCertificate(X509Certificate2 certificate);
    public virtual void DisplayCertificate(X509Certificate2 certificate, IntPtr parentWindowHandle);
    public virtual X509Certificate2 SelectFromCollection(string title, string message);
    internal static SigningCertificateStatus GetSigningCertificateStatus(X509Certificate2 cert, bool enableSigningChecks);
}
internal class Microsoft.Build.Msix.Crypto.CryptoHelper : object {
    private static UInt32 DefaultKeyLength;
    private SafeArrayHandle extensionsArrayHandle;
    private SafeHGlobalHandle encodedData;
    private SafeArrayHandle enhancedKeyUsageUsageIdentifierArrayHandle;
    private SafeHGlobalHandle enhancedKeyUsageEncodedDataHandle;
    private SafeCoTaskMemStringHandle enhancedKeyUsageOidHandle;
    private SafeCoTaskMemStringHandle basicConstraintOidHandle;
    [CompilerGeneratedAttribute]
private string <CertificateSubjectDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <KeyLength>k__BackingField;
    public string CertificateSubjectDistinguishedName { get; private set; }
    public UInt32 KeyLength { get; public set; }
    private CryptoHelper(string certificateSubjectDistinguishedName);
    [CompilerGeneratedAttribute]
public string get_CertificateSubjectDistinguishedName();
    [CompilerGeneratedAttribute]
private void set_CertificateSubjectDistinguishedName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_KeyLength();
    [CompilerGeneratedAttribute]
public void set_KeyLength(UInt32 value);
    internal static Byte[] CreateX509CertificateBlob(string subjectDistinguishedName, UInt32 keyLength, SecureString password);
    internal static string EncodeDistinguishedNameComponent(string component);
    internal static string CreateSubjectFromPublisherName(string publisherName);
    internal static string CanonicalizeSubject(string subjectDistinguishedName);
    private static void CertStrToName(string subjectDistinguishedName, SafeCryptMemAllocHandle& cryptMemHandle, CRYPT_DATA_BLOB& certNameBlob);
    private static string CertNameToStr(CRYPT_DATA_BLOB& certNameBlob);
    private static string GetManagedString(SecureString str);
    private static void DisposeSafeHandle(T& safeHandle);
    private static void FreeGCHandle(GCHandle blobHandle);
    private Byte[] CreateX509CertificateBlob(SecureString password);
    private CERT_EXTENSIONS GetSigningCertificateExtensions();
    private CERT_EXTENSION GetBasicConstraintExtension(bool ca, bool hasPathLenConstraint, UInt32 pathLenConstraint);
    private CERT_EXTENSION GetEnhancedKeyUsageExtension();
    public sealed virtual void Dispose();
}
internal static class Microsoft.Build.Msix.Crypto.NativeMethods : object {
    public static UInt32 AT_SIGNATURE;
    public static UInt32 CRYPT_EXPORTABLE;
    public static UInt32 CRYPT_NEWKEYSET;
    public static UInt32 CRYPT_DELETEKEYSET;
    public static UInt32 PROV_RSA_FULL;
    public static int X509_ASN_ENCODING;
    public static int PKCS_7_ASN_ENCODING;
    public static int CERT_X500_NAME_STR;
    public static int CERT_NAME_STR_REVERSE_FLAG;
    public static UInt32 EXPORT_PRIVATE_KEYS;
    public static UInt32 PKCS12_INCLUDE_EXTENDED_PROPERTIES;
    public static UInt32 CRYPT_ENCODE_ALLOC_FLAG;
    public static string szOID_RSA_SHA256RSA;
    public static string IdKpCodeSigning;
    public static string szOID_BASIC_CONSTRAINTS2;
    public static string szOID_ENHANCED_KEY_USAGE;
    public static UInt32 CERT_STORE_CREATE_NEW_FLAG;
    public static UInt32 CERT_CLOSE_STORE_FORCE_FLAG;
    public static UInt32 CERT_STORE_ADD_NEW;
    public static IntPtr CERT_STORE_PROV_MEMORY;
    private static NativeMethods();
    public static bool CryptAcquireContext(SafeCryptProviderContextHandle& hProv, string pszContainer, string pszProvider, UInt32 dwProvType, UInt32 dwFlags);
    public static bool CryptReleaseContext(IntPtr hProv, UInt32 dwFlags);
    public static bool CryptGenKey(SafeCryptProviderContextHandle hProv, UInt32 Algid, UInt32 dwFlags, SafeCryptKeyHandle& phKey);
    public static bool CryptDestroyKey(IntPtr hKey);
    public static SafeCryptMemAllocHandle CryptMemAlloc(UInt32 cbSize);
    public static void CryptMemFree(IntPtr pv);
    public static bool CertStrToName(UInt32 dwCertEncodingType, string pszX500, UInt32 dwStrType, IntPtr pvReserved, IntPtr pbEncoded, UInt32& pcbEncoded, IntPtr ppszError);
    public static UInt32 CertNameToStr(UInt32 dwCertEncodingType, CRYPT_DATA_BLOB& pName, UInt32 dwStrType, StringBuilder psz, UInt32 csz);
    public static SafeCertContextHandle CertCreateSelfSignCertificate(SafeCryptProviderContextHandle hProv, IntPtr pSubjectIssuerBlob, UInt32 dwFlags, IntPtr pKeyProvInfo, IntPtr pSignatureAlgorithm, IntPtr pStartTime, IntPtr pEndTime, CERT_EXTENSIONS& pExtensions);
    public static bool CryptEncodeObjectEx(UInt32 dwCertEncodingType, string lpszStructType, CERT_BASIC_CONSTRAINTS2_INFO& pvStructInfo, UInt32 dwFlags, IntPtr pEncodePara, SafeHGlobalHandle& pvEncoded, UInt32& pcbEncoded);
    public static bool CryptEncodeObjectEx(UInt32 dwCertEncodingType, string lpszStructType, CTL_USAGE& pvStructInfo, UInt32 dwFlags, IntPtr pEncodePara, SafeHGlobalHandle& pvEncoded, UInt32& pcbEncoded);
    public static bool CertFreeCertificateContext(IntPtr pCertContext);
    public static SafeCertStoreHandle CertOpenStore(IntPtr lpszStoreProvider, UInt32 dwMsgAndCertEncodingType, IntPtr hCryptProv, UInt32 dwFlags, IntPtr pvPara);
    public static bool CertCloseStore(IntPtr hCertStore, UInt32 dwFlags);
    public static bool CertAddCertificateContextToStore(IntPtr hCertStore, IntPtr pCertContext, UInt32 dwAddDisposition, IntPtr ppStoreContext);
    public static bool PFXExportCertStoreEx(IntPtr hStore, IntPtr pPFX, string password, IntPtr pvReserved, UInt32 dwFlags);
    public static int GetActiveWindow();
}
internal class Microsoft.Build.Msix.Crypto.SafeArrayHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private int length;
    private Type elementType;
    internal static SafeArrayHandle InvalidHandle { get; }
    private SafeArrayHandle(IntPtr handle, int length, Type elementType);
    internal static SafeArrayHandle get_InvalidHandle();
    internal static SafeArrayHandle FromArray(T[] arr);
    internal static SafeArrayHandle FromArray(String[] arr);
    private static void CleanupStructArray(IntPtr& parr, int len, Type elementType);
    private static void CleanupStringArray(IntPtr& parr, int len);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeCertContextHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCertContextHandle InvalidHandle { get; }
    internal SafeCertContextHandle(IntPtr handle);
    internal static SafeCertContextHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeCertStoreHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCertStoreHandle InvalidHandle { get; }
    internal SafeCertStoreHandle(IntPtr handle);
    internal static SafeCertStoreHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeCoTaskMemStringHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private bool unicode;
    internal static SafeHGlobalHandle InvalidHandle { get; }
    internal SafeCoTaskMemStringHandle(string str, bool unicode);
    internal static SafeHGlobalHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeCryptKeyHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCryptKeyHandle InvalidHandle { get; }
    internal SafeCryptKeyHandle(IntPtr handle);
    internal static SafeCryptKeyHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeCryptMemAllocHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCryptMemAllocHandle InvalidHandle { get; }
    internal SafeCryptMemAllocHandle(IntPtr handle);
    internal static SafeCryptMemAllocHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeCryptProviderContextHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCryptProviderContextHandle InvalidHandle { get; }
    internal SafeCryptProviderContextHandle(IntPtr handle);
    internal static SafeCryptProviderContextHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Build.Msix.Crypto.SafeHGlobalHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeHGlobalHandle InvalidHandle { get; }
    internal SafeHGlobalHandle(IntPtr handle);
    internal static SafeHGlobalHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
public abstract class Microsoft.Build.Msix.Crypto.SignAppxPackageBase : Task {
    private static int CertificateKeyLength;
    private CertificateLoader certificateLoader;
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <CertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSigningChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExportCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SigningTimestampServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashAlgorithmId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignAppxPackageExeFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempCertificateFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxPackagePublicKeyFile>k__BackingField;
    public string CertificateThumbprint { get; public set; }
    public string CertificateFile { get; public set; }
    public bool EnableSigningChecks { get; public set; }
    public bool ExportCertificate { get; public set; }
    public string SigningTimestampServerUrl { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string HashAlgorithmId { get; public set; }
    [RequiredAttribute]
public string SignAppxPackageExeFullPath { get; public set; }
    [RequiredAttribute]
public string TempCertificateFilePath { get; public set; }
    [OutputAttribute]
public string AppxPackagePublicKeyFile { get; public set; }
    [OutputAttribute]
public string ResolvedThumbprint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public void set_CertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public string get_CertificateFile();
    [CompilerGeneratedAttribute]
public void set_CertificateFile(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableSigningChecks();
    [CompilerGeneratedAttribute]
public void set_EnableSigningChecks(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExportCertificate();
    [CompilerGeneratedAttribute]
public void set_ExportCertificate(bool value);
    [CompilerGeneratedAttribute]
public string get_SigningTimestampServerUrl();
    [CompilerGeneratedAttribute]
public void set_SigningTimestampServerUrl(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_HashAlgorithmId();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithmId(string value);
    [CompilerGeneratedAttribute]
public string get_SignAppxPackageExeFullPath();
    [CompilerGeneratedAttribute]
public void set_SignAppxPackageExeFullPath(string value);
    [CompilerGeneratedAttribute]
public string get_TempCertificateFilePath();
    [CompilerGeneratedAttribute]
public void set_TempCertificateFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_AppxPackagePublicKeyFile();
    [CompilerGeneratedAttribute]
public void set_AppxPackagePublicKeyFile(string value);
    public string get_ResolvedThumbprint();
    public void set_ResolvedThumbprint(string value);
    public virtual bool Execute();
    protected abstract virtual void ExecuteImplementation();
    protected bool PrepareCertificateLoader();
    protected bool ProcessAppxPackage(string path, String& fullPath);
    protected void ExportPublicKey(string keyPath);
    protected bool SignFile(string certFilePath, string certificateThumbprint, string timestampUrl, string path);
    private void ExportPublicKey(X509Certificate2 certificate, string path);
    private string GetCommandLineParameters(string certFilePath, string certThumbprint, string timestampUrl, string path);
}
public class Microsoft.Build.Msix.Crypto.WinAppSdkSignAppxPackage : SignAppxPackageBase {
    [CompilerGeneratedAttribute]
private ITaskItem <AppxPackageToSign>k__BackingField;
    [RequiredAttribute]
public ITaskItem AppxPackageToSign { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem get_AppxPackageToSign();
    [CompilerGeneratedAttribute]
public void set_AppxPackageToSign(ITaskItem value);
    protected virtual void ExecuteImplementation();
}
internal enum Microsoft.Build.Msix.Deployment.APPX_CAPABILITIES : Enum {
    public int value__;
    public static APPX_CAPABILITIES APPX_CAPABILITY_DEFAULT_WINDOWS_CREDENTIALS;
    public static APPX_CAPABILITIES APPX_CAPABILITY_DOCUMENTS_LIBRARY;
    public static APPX_CAPABILITIES APPX_CAPABILITY_INTERNET_CLIENT;
    public static APPX_CAPABILITIES APPX_CAPABILITY_INTERNET_CLIENT_SERVER;
    public static APPX_CAPABILITIES APPX_CAPABILITY_MUSIC_LIBRARY;
    public static APPX_CAPABILITIES APPX_CAPABILITY_PICTURES_LIBRARY;
    public static APPX_CAPABILITIES APPX_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER;
    public static APPX_CAPABILITIES APPX_CAPABILITY_REMOVABLE_STORAGE;
    public static APPX_CAPABILITIES APPX_CAPABILITY_SHARED_USER_CERTIFICATES;
    public static APPX_CAPABILITIES APPX_CAPABILITY_VIDEOS_LIBRARY;
}
internal enum Microsoft.Build.Msix.Deployment.APPX_CAPABILITY_CLASS_TYPE : Enum {
    public int value__;
    public static APPX_CAPABILITY_CLASS_TYPE APPX_CAPABILITY_CLASS_DEFAULT;
    public static APPX_CAPABILITY_CLASS_TYPE APPX_CAPABILITY_CLASS_GENERAL;
    public static APPX_CAPABILITY_CLASS_TYPE APPX_CAPABILITY_CLASS_RESTRICTED;
    public static APPX_CAPABILITY_CLASS_TYPE APPX_CAPABILITY_CLASS_WINDOWS;
    public static APPX_CAPABILITY_CLASS_TYPE APPX_CAPABILITY_CLASS_ALL;
}
internal enum Microsoft.Build.Msix.Deployment.APPX_COMPRESSION_OPTION : Enum {
    public int value__;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_NONE;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_NORMAL;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_MAXIMUM;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_FAST;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_SUPERFAST;
}
internal enum Microsoft.Build.Msix.Deployment.APPX_FOOTPRINT_FILE_TYPE : Enum {
    public int value__;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_MANIFEST;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_BLOCKMAP;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_SIGNATURE;
}
internal enum Microsoft.Build.Msix.Deployment.APPX_PACKAGE_ARCHITECTURE : Enum {
    public int value__;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_ARM;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_ARM64;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_NEUTRAL;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_X64;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_X86;
}
[TypeLibTypeAttribute("2")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("5842A140-FF9F-4166-8F5C-62F5B7B0C781")]
internal class Microsoft.Build.Msix.Deployment.AppxFactory : object {
    public virtual IAppxPackageWriter CreatePackageWriter(IStream outputStream, PackageSettings& settings);
    public virtual IAppxPackageReader CreatePackageReader(IStream inputStream);
    public virtual IAppxManifestReader CreateManifestReader(IStream inputStream);
    public virtual IAppxBlockMapReader CreateBlockMapReader(IStream inputStream);
    public virtual IAppxBlockMapReader CreateValidatedBlockMapReader(IStream blockMapStream, string signatureFileName);
}
internal static class Microsoft.Build.Msix.Deployment.AppxInteropHelpers : object {
    internal static void SHCreateStreamOnFile(string fileName, StgmConstants mode, IStream& stream);
    public static IAppxManifestReader3 GetAppxManifestReader3(string appxFilePath);
    public static IAppxPackageReader GetAppxPackageReader(string appxFilePath);
    public static IAppxManifestReader3 GetAppxManifestReaderFromManifestPath(string manifestPath);
    private static void Teardown(Object[] objects);
}
internal enum Microsoft.Build.Msix.Deployment.CompressionOption : Enum {
    public int value__;
    public static CompressionOption None;
    public static CompressionOption Normal;
    public static CompressionOption Maximum;
    public static CompressionOption Fast;
    public static CompressionOption SuperFast;
}
internal enum Microsoft.Build.Msix.Deployment.DX_FEATURE_LEVEL : Enum {
    public int value__;
    public static DX_FEATURE_LEVEL DX_FEATURE_LEVEL_UNSPECIFIED;
    public static DX_FEATURE_LEVEL DX_FEATURE_LEVEL_9;
    public static DX_FEATURE_LEVEL DX_FEATURE_LEVEL_10;
    public static DX_FEATURE_LEVEL DX_FEATURE_LEVEL_11;
}
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("75CF3930-3244-4FE0-A8C8-E0BCB270B889")]
internal interface Microsoft.Build.Msix.Deployment.IAppxBlockMapBlock {
    public abstract virtual IntPtr GetHash(UInt32& bufferSize);
    public abstract virtual UInt32 GetCompressedSize();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6B429B5B-36EF-479E-B9EB-0C1482B49E16")]
internal interface Microsoft.Build.Msix.Deployment.IAppxBlockMapBlocksEnumerator {
    public abstract virtual IAppxBlockMapBlock GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("277672AC-4F63-42C1-8ABC-BEAE3600EB59")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxBlockMapFile {
    public abstract virtual IAppxBlockMapBlocksEnumerator GetBlocks();
    public abstract virtual UInt32 GetLocalFileHeaderSize();
    public abstract virtual string GetName();
    public abstract virtual ulong GetUncompressedSize();
    public abstract virtual int ValidateFileHash(IStream fileStream);
}
[GuidAttribute("02B856A2-4262-4070-BACB-1A8CBBC42305")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxBlockMapFilesEnumerator {
    public abstract virtual IAppxBlockMapFile GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("5EFEC991-BCA3-42D1-9EC2-E92D609EC22A")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxBlockMapReader {
    public abstract virtual IAppxBlockMapFile GetFile(string fileName);
    public abstract virtual IAppxBlockMapFilesEnumerator GetFiles();
    public abstract virtual IUri GetHashMethod();
    public abstract virtual IStream GetStream();
}
[GuidAttribute("BEB94909-E451-438B-B5A7-D79E767B75D8")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxFactory {
    public abstract virtual IAppxPackageWriter CreatePackageWriter(IStream outputStream, PackageSettings& settings);
    public abstract virtual IAppxPackageReader CreatePackageReader(IStream inputStream);
    public abstract virtual IAppxManifestReader CreateManifestReader(IStream inputStream);
    public abstract virtual IAppxBlockMapReader CreateBlockMapReader(IStream inputStream);
    public abstract virtual IAppxBlockMapReader CreateValidatedBlockMapReader(IStream blockMapStream, string signatureFileName);
}
[GuidAttribute("91DF827B-94FD-468F-827B-57F41B2F6F2E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxFile {
    public abstract virtual APPX_COMPRESSION_OPTION GetCompressionOption();
    public abstract virtual string GetContentType();
    public abstract virtual string GetName();
    public abstract virtual ulong GetSize();
    public abstract virtual IStream GetStream();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F007EEAF-9831-411C-9847-917CDC62D1FE")]
internal interface Microsoft.Build.Msix.Deployment.IAppxFilesEnumerator {
    public abstract virtual IAppxFile GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("5DA89BF4-3773-46BE-B650-7E744863B7E8")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestApplication {
    public abstract virtual string GetStringValue(string name);
    public abstract virtual string GetAppUserModelId();
}
[GuidAttribute("9EB8A55A-F04B-4D0D-808D-686185D4847A")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestApplicationsEnumerator {
    public abstract virtual IAppxManifestApplication GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("11D22258-F470-42C1-B291-8361C5437E41")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestCapabilitiesEnumerator {
    public abstract virtual string GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("30204541-427B-4A1C-BACF-655BF463A540")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestDeviceCapabilitiesEnumerator {
    public abstract virtual string GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("B43BBCF9-65A6-42DD-BAC0-8C6741E7F5A4")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestPackageDependenciesEnumerator {
    public abstract virtual IAppxManifestPackageDependency GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E4946B59-733E-43F0-A724-3BDE4C1285A0")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestPackageDependency {
    public abstract virtual string GetName();
    public abstract virtual string GetPublisher();
    public abstract virtual ulong GetMinVersion();
}
[GuidAttribute("283CE2D7-7153-4A91-9649-7A0F7240945F")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestPackageId {
    public abstract virtual string GetName();
    public abstract virtual APPX_PACKAGE_ARCHITECTURE GetArchitecture();
    public abstract virtual string GetPublisher();
    public abstract virtual ulong GetVersion();
    public abstract virtual string GetResourceId();
    public abstract virtual int ComparePublisher(string other);
    public abstract virtual string GetPackageFullName();
    public abstract virtual string GetPackageFamilyName();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("03FAF64D-F26F-4B2C-AAF7-8FE7789B8BCA")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestProperties {
    public abstract virtual int GetBoolValue(string name);
    public abstract virtual string GetStringValue(string name);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3B53A497-3C5C-48D1-9EA3-BB7EAC8CD7D4")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestQualifiedResource {
    public abstract virtual string GetLanguage();
    public abstract virtual UInt32 GetScale();
    public abstract virtual DX_FEATURE_LEVEL GetDXFeatureLevel();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8EF6ADFE-3762-4A8F-9373-2FC5D444C8D2")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestQualifiedResourcesEnumerator {
    public abstract virtual IAppxManifestQualifiedResource GetCurrent();
    public abstract virtual int GetHasCurrent();
    public abstract virtual int MoveNext();
}
[GuidAttribute("4e1bd148-55a0-4480-a3d1-15544710637c")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestReader {
    public abstract virtual IAppxManifestPackageId GetPackageId();
    public abstract virtual IAppxManifestProperties GetProperties();
    public abstract virtual IAppxManifestPackageDependenciesEnumerator GetPackageDependencies();
    public abstract virtual APPX_CAPABILITIES GetCapabilities();
    public abstract virtual IAppxManifestResourcesEnumerator GetResources();
    public abstract virtual IAppxManifestDeviceCapabilitiesEnumerator GetDeviceCapabilities();
    public abstract virtual ulong GetPrerequisite(string name);
    public abstract virtual IAppxManifestApplicationsEnumerator GetApplications();
    public abstract virtual IStream GetStream();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D06F67BC-B31D-4EBA-A8AF-638E73E77B4D")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestReader2 {
    public abstract virtual IAppxManifestPackageId GetPackageId();
    public abstract virtual IAppxManifestProperties GetProperties();
    public abstract virtual IAppxManifestPackageDependenciesEnumerator GetPackageDependencies();
    public abstract virtual APPX_CAPABILITIES GetCapabilities();
    public abstract virtual IAppxManifestResourcesEnumerator GetResources();
    public abstract virtual IAppxManifestDeviceCapabilitiesEnumerator GetDeviceCapabilities();
    public abstract virtual ulong GetPrerequisite(string name);
    public abstract virtual IAppxManifestApplicationsEnumerator GetApplications();
    public abstract virtual IStream GetStream();
    public abstract virtual IAppxManifestQualifiedResourcesEnumerator GetQualifiedResources();
}
[GuidAttribute("C43825AB-69B7-400A-9709-CC37F5A72D24")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestReader3 {
    public abstract virtual IAppxManifestPackageId GetPackageId();
    public abstract virtual IAppxManifestProperties GetProperties();
    public abstract virtual IAppxManifestPackageDependenciesEnumerator GetPackageDependencies();
    public abstract virtual APPX_CAPABILITIES GetCapabilities();
    public abstract virtual IAppxManifestResourcesEnumerator GetResources();
    public abstract virtual IAppxManifestDeviceCapabilitiesEnumerator GetDeviceCapabilities();
    public abstract virtual ulong GetPrerequisite(string name);
    public abstract virtual IAppxManifestApplicationsEnumerator GetApplications();
    public abstract virtual IStream GetStream();
    public abstract virtual IAppxManifestQualifiedResourcesEnumerator GetQualifiedResources();
    public abstract virtual IAppxManifestCapabilitiesEnumerator GetCapabilitiesByCapabilityClass(APPX_CAPABILITY_CLASS_TYPE capabilityClass);
    public abstract virtual IAppxManifestTargetPlatformsEnumerator GetTargetPlatforms();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DE4DFBBD-881A-48BB-858C-D6F2BAEAE6ED")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestResourcesEnumerator {
    public abstract virtual string GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("9091B09B-C8D5-4F31-8687-A338259FAEFB")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestTargetPlatform {
    public abstract virtual string GetName();
    public abstract virtual ulong GetMinVersion();
    public abstract virtual ulong GetMaxVersionTested();
}
[GuidAttribute("36537F36-27A4-4788-88C0-733819575017")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxManifestTargetPlatformsEnumerator {
    public abstract virtual IAppxManifestTargetPlatform GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B5C49650-99BC-481C-9A34-3D53A4106708")]
internal interface Microsoft.Build.Msix.Deployment.IAppxPackageReader {
    public abstract virtual IAppxBlockMapReader GetBlockMap();
    public abstract virtual IAppxFile GetFootprintFile(APPX_FOOTPRINT_FILE_TYPE type);
    public abstract virtual IAppxFile GetPayloadFile(string fileName);
    public abstract virtual IAppxFilesEnumerator GetPayloadFiles();
    public abstract virtual IAppxManifestReader GetManifest();
}
[GuidAttribute("9099E33B-246F-41E4-881A-008EB613F858")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Build.Msix.Deployment.IAppxPackageWriter {
    public abstract virtual void AddPayloadFile(string fileName, string contentType, CompressionOption CompressionOption, IStream inputStream);
    public abstract virtual void Close(IStream manifest);
}
internal static class Microsoft.Build.Msix.Deployment.IID : object {
    internal static string IUri;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A39EE748-6A27-4817-A6F2-13914BEF5890")]
internal interface Microsoft.Build.Msix.Deployment.IUri {
    public abstract virtual void GetPropertyBSTR(Uri_PROPERTY uriProp, String& pbstrProperty, UInt32 dwFlags);
    public abstract virtual void GetPropertyLength(Uri_PROPERTY uriProp, UInt32& pcchProperty, UInt32 dwFlags);
    public abstract virtual void GetPropertyDWORD(Uri_PROPERTY uriProp, UInt32& pdwProperty, UInt32 dwFlags);
    public abstract virtual void HasProperty(Uri_PROPERTY uriProp, Int32& pfHasProperty);
    public abstract virtual void GetAbsoluteUri(String& pbstrAbsoluteUri);
    public abstract virtual void GetAuthority(String& pbstrAuthority);
    public abstract virtual void GetDisplayUri(String& pbstrDisplayString);
    public abstract virtual void GetDomain(String& pbstrDomain);
    public abstract virtual void GetExtension(String& pbstrExtension);
    public abstract virtual void GetFragment(String& pbstrFragment);
    public abstract virtual void GetHost(String& pbstrHost);
    public abstract virtual void GetPassword(String& pbstrPassword);
    public abstract virtual void GetPath(String& pbstrPath);
    public abstract virtual void GetPathAndQuery(String& pbstrPathAndQuery);
    public abstract virtual void GetQuery(String& pbstrQuery);
    public abstract virtual void GetRawUri(String& pbstrRawUri);
    public abstract virtual void GetSchemeName(String& pbstrSchemeName);
    public abstract virtual void GetUserInfo(String& pbstrUserInfo);
    public abstract virtual void GetUserName(String& pbstrUserName);
    public abstract virtual void GetHostType(UInt32& pdwHostType);
    public abstract virtual void GetPort(UInt32& pdwPort);
    public abstract virtual void GetScheme(UInt32& pdwScheme);
    public abstract virtual void GetZone(UInt32& pdwZone);
    public abstract virtual void GetProperties(UInt32& pdwFlags);
    public abstract virtual void IsEqual(IUri pUri, Int32& pfEqual);
}
internal class Microsoft.Build.Msix.Deployment.PackageSettings : ValueType {
    public bool forceZip32;
    public IUri hashMethod;
}
[FlagsAttribute]
internal enum Microsoft.Build.Msix.Deployment.StgmConstants : Enum {
    public int value__;
    public static StgmConstants STGM_READ;
    public static StgmConstants STGM_WRITE;
    public static StgmConstants STGM_READWRITE;
    public static StgmConstants STGM_SHARE_DENY_NONE;
    public static StgmConstants STGM_SHARE_DENY_READ;
    public static StgmConstants STGM_SHARE_DENY_WRITE;
    public static StgmConstants STGM_SHARE_EXCLUSIVE;
    public static StgmConstants STGM_PRIORITY;
    public static StgmConstants STGM_CREATE;
    public static StgmConstants STGM_CONVERT;
    public static StgmConstants STGM_FAILIFTHERE;
    public static StgmConstants STGM_DIRECT;
    public static StgmConstants STGM_TRANSACTED;
    public static StgmConstants STGM_NOSCRATCH;
    public static StgmConstants STGM_NOSNAPSHOT;
    public static StgmConstants STGM_SIMPLE;
    public static StgmConstants STGM_DIRECT_SWMR;
    public static StgmConstants STGM_DELETEONRELEASE;
}
internal enum Microsoft.Build.Msix.Deployment.Uri_PROPERTY : Enum {
    public int value__;
    public static Uri_PROPERTY Uri_PROPERTY_ABSOLUTE_URI;
    public static Uri_PROPERTY Uri_PROPERTY_AUTHORITY;
    public static Uri_PROPERTY Uri_PROPERTY_DISPLAY_URI;
    public static Uri_PROPERTY Uri_PROPERTY_DOMAIN;
    public static Uri_PROPERTY Uri_PROPERTY_DWORD_LAST;
    public static Uri_PROPERTY Uri_PROPERTY_DWORD_START;
    public static Uri_PROPERTY Uri_PROPERTY_EXTENSION;
    public static Uri_PROPERTY Uri_PROPERTY_FRAGMENT;
    public static Uri_PROPERTY Uri_PROPERTY_HOST;
    public static Uri_PROPERTY Uri_PROPERTY_HOST_TYPE;
    public static Uri_PROPERTY Uri_PROPERTY_PASSWORD;
    public static Uri_PROPERTY Uri_PROPERTY_PATH;
    public static Uri_PROPERTY Uri_PROPERTY_PATH_AND_QUERY;
    public static Uri_PROPERTY Uri_PROPERTY_PORT;
    public static Uri_PROPERTY Uri_PROPERTY_QUERY;
    public static Uri_PROPERTY Uri_PROPERTY_RAW_URI;
    public static Uri_PROPERTY Uri_PROPERTY_SCHEME;
    public static Uri_PROPERTY Uri_PROPERTY_SCHEME_NAME;
    public static Uri_PROPERTY Uri_PROPERTY_STRING_LAST;
    public static Uri_PROPERTY Uri_PROPERTY_STRING_START;
    public static Uri_PROPERTY Uri_PROPERTY_USER_INFO;
    public static Uri_PROPERTY Uri_PROPERTY_USER_NAME;
    public static Uri_PROPERTY Uri_PROPERTY_ZONE;
}
internal class Microsoft.Build.Msix.DumpResourceIndexMap : ResourceIndexMap {
    private Dictionary`2<string, string> targetPathToResourceNameMap;
    private Dictionary`2<string, string> targetPathToQualifiersMap;
    public DumpResourceIndexMap(ITaskItem[] indexedPayloadFiles);
    public virtual Resource Map(string targetPath);
    public bool HasCandidateFor(string resourceName);
}
[ExtensionAttribute]
internal static class Microsoft.Build.Msix.ExceptionExtensions : object {
    private static int COR_E_THREADINTERRUPTED;
    private static int COR_E_XmlSchema;
    private static int COR_E_EXCEPTION;
    private static int CORSEC_E_XMLSYNTAX;
    [ExtensionAttribute]
[SecurityCriticalAttribute]
internal static bool IsCriticalException(Exception e);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
internal static bool IsNotCritical(Exception e);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
internal static void RethrowIfCritical(Exception e);
    [ExtensionAttribute]
internal static void Rethrow(Exception e);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static string GetAggregateErrorMessage(Exception ex);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static string GetAggregateErrorMessageWithStackTrace(Exception ex);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
private static string GetAggregateErrorMessage(Exception ex, bool appendStackTrace);
    [SecurityCriticalAttribute]
private static bool UseDiagnosticFormatting();
    [ExtensionAttribute]
internal static bool IsIoRelatedException(Exception e);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
internal static bool IsXmlException(Exception e);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
internal static int GetHR(Exception ex);
    [ExtensionAttribute]
internal static Exception GetInnerExceptionIfRootException(Exception ex);
    [ExtensionAttribute]
internal static string GetDescription(Exception e);
    [ExtensionAttribute]
internal static int GetFacilityCode(COMException comException);
    [ExtensionAttribute]
internal static LineAndColumn GetXmlLineAndColumn(Exception e);
}
internal class Microsoft.Build.Msix.FrameworkIdentityParser : FrameworkIdentityParserBase {
    internal string Publisher { get; }
    protected internal FrameworkIdentityParser(AppxPackagingTaskHelper taskHelper);
    internal string get_Publisher();
    protected internal virtual bool Parse(string frameworkIdentity);
}
internal abstract class Microsoft.Build.Msix.FrameworkIdentityParserBase : object {
    protected AppxPackagingTaskHelper taskHelper;
    protected Dictionary`2<string, string> properties;
    protected internal string Name { get; }
    protected internal string MinVersion { get; }
    protected internal FrameworkIdentityParserBase(AppxPackagingTaskHelper taskHelper);
    protected internal abstract virtual bool Parse(string frameworkIdentity);
    protected internal string get_Name();
    protected internal string get_MinVersion();
    protected internal string GetProperty(string propertyName);
    protected bool SetPropertyValue(string propertyName, string propertyValue, string duplicateErrorFormatString, string fullFrameworkIdentity);
}
internal interface Microsoft.Build.Msix.IAppxPackagingLogger {
    public abstract virtual void LogError(string message, Tuple`2<string, int> callerInfo, Object[] messageArgs);
    public abstract virtual void LogError(string fileName, int lineNumber, int columnNumber, string message, Tuple`2<string, int> callerInfo, Object[] messageArgs);
    public abstract virtual void LogWarning(string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string fileName, int lineNumber, int columnNumber, string message, Object[] messageArgs);
    public abstract virtual void LogMessage(string message, Object[] messageArgs);
    public abstract virtual void LogMessage(MessageImportance messageImportance, string message, Object[] messageArgs);
}
public interface Microsoft.Build.Msix.IIndexedResourceCandidate {
    public string UriAbsolutePath { get; }
    public IndexedResourceQualifier[] Qualifiers { get; }
    public abstract virtual string get_UriAbsolutePath();
    public abstract virtual IndexedResourceQualifier[] get_Qualifiers();
}
public class Microsoft.Build.Msix.IndexedResourceQualifier : ValueType {
    public string Name;
    public string Value;
}
public class Microsoft.Build.Msix.InprocServer : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TypeToThreadingModel>k__BackingField;
    public string Path { get; public set; }
    public Dictionary`2<string, string> TypeToThreadingModel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TypeToThreadingModel();
    [CompilerGeneratedAttribute]
public void set_TypeToThreadingModel(Dictionary`2<string, string> value);
    public void AddOrUpdateExtensionElement(XElement extensionCollectionElement);
    private static bool IsInProcessServerForLibrary(XElement extensionElement, string path);
    private static bool ActivatableClassIsInExtensionCollection(string className, XElement extensionCollectionElement);
    private static XElement CreateActivatableClassElement(XNamespace xmlNamespace, string className, string threadingModel);
}
public interface Microsoft.Build.Msix.IResourceIndexer {
    public abstract virtual IIndexedResourceCandidate IndexFilePath(string filePath);
}
public enum Microsoft.Build.Msix.Layout : Enum {
    public int value__;
    public static Layout Unset;
    public static Layout LTR;
    public static Layout RTL;
    public static Layout TTBLTR;
    public static Layout TTBRTL;
}
internal class Microsoft.Build.Msix.LockFinder : object {
    private static int RmRebootReasonNone;
    private static int CCH_RM_MAX_APP_NAME;
    private static int CCH_RM_MAX_SVC_NAME;
    private string vsTelemetrySession;
    internal LockFinder(string vsTelemetrySession);
    internal List`1<Process> FindProcessesLockingTheFile(string fileName);
    private void PostFault(string description, int result);
    private void PostFault(string description, Exception e);
    private static int RmRegisterResources(UInt32 pSessionHandle, UInt32 nFiles, String[] rgsFilenames, UInt32 nApplications, RM_UNIQUE_PROCESS[] rgApplications, UInt32 nServices, String[] rgsServiceNames);
    private static int RmStartSession(UInt32& pSessionHandle, int dwSessionFlags, string strSessionKey);
    private static int RmEndSession(UInt32 pSessionHandle);
    private static int RmGetList(UInt32 dwSessionHandle, UInt32& pnProcInfoNeeded, UInt32& pnProcInfo, RM_PROCESS_INFO[] rgAffectedApps, UInt32& lpdwRebootReasons);
}
public class Microsoft.Build.Msix.MakeAppx.WinAppSdkGetAppxBundlePlatforms : Task {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Platforms>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <Last>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string Input { get; public set; }
    [OutputAttribute]
public ITaskItem[] Platforms { get; public set; }
    [OutputAttribute]
public ITaskItem Last { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Platforms();
    [CompilerGeneratedAttribute]
public void set_Platforms(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_Last();
    [CompilerGeneratedAttribute]
public void set_Last(ITaskItem value);
    public virtual bool Execute();
    private void ExecuteImplementation();
}
public class Microsoft.Build.Msix.MakeAppx.WinAppSdkMakeAppx : ToolTask {
    private static int MakeAppxErrorCodeGroupPosition;
    private static int MakeAppxErrorMessageGroupPosition;
    private static string MakeAppxErrorRegex;
    private static int SuccessExitCode;
    protected bool IsMakeAppxErrorPosted;
    [CompilerGeneratedAttribute]
private TelemetryOperation <TelemetryOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private AppxPackagingTaskHelper <TaskHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUploadPackageOrComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MakeAppxExeFullPath>k__BackingField;
    protected TelemetryOperation TelemetryOperation { get; private set; }
    internal AppxPackagingTaskHelper TaskHelper { get; private set; }
    public bool IsUploadPackageOrComponent { get; public set; }
    public string Parameters { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string MakeAppxExeFullPath { get; public set; }
    protected string ToolName { get; }
    protected string ToolNameWithoutExtension { get; }
    [CompilerGeneratedAttribute]
protected TelemetryOperation get_TelemetryOperation();
    [CompilerGeneratedAttribute]
private void set_TelemetryOperation(TelemetryOperation value);
    [CompilerGeneratedAttribute]
internal AppxPackagingTaskHelper get_TaskHelper();
    [CompilerGeneratedAttribute]
private void set_TaskHelper(AppxPackagingTaskHelper value);
    [CompilerGeneratedAttribute]
public bool get_IsUploadPackageOrComponent();
    [CompilerGeneratedAttribute]
public void set_IsUploadPackageOrComponent(bool value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_MakeAppxExeFullPath();
    [CompilerGeneratedAttribute]
public void set_MakeAppxExeFullPath(string value);
    protected virtual string get_ToolName();
    protected string get_ToolNameWithoutExtension();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    public virtual bool Execute();
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    private void SetTelemetryOperationIfMakeAppxError(string singleLine);
}
public class Microsoft.Build.Msix.MakeAppx.WinAppSdkMakeAppxPack : WinAppSdkMakeAppxWithOutput {
    private static string PackageMap;
    [CompilerGeneratedAttribute]
private string <AppxContentGroupMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppxStreamableMainPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppxStreamableResourcePackages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResourcePack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateResourcesReferencedByManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashAlgorithmId>k__BackingField;
    public string AppxContentGroupMap { get; public set; }
    public bool AppxStreamableMainPackage { get; public set; }
    public bool AppxStreamableResourcePackages { get; public set; }
    public bool ResourcePack { get; public set; }
    public bool ValidateResourcesReferencedByManifest { get; public set; }
    public string AppxManifest { get; public set; }
    public string FileMap { get; public set; }
    public string ContentDirectory { get; public set; }
    [RequiredAttribute]
public string HashAlgorithmId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppxContentGroupMap();
    [CompilerGeneratedAttribute]
public void set_AppxContentGroupMap(string value);
    [CompilerGeneratedAttribute]
public bool get_AppxStreamableMainPackage();
    [CompilerGeneratedAttribute]
public void set_AppxStreamableMainPackage(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppxStreamableResourcePackages();
    [CompilerGeneratedAttribute]
public void set_AppxStreamableResourcePackages(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResourcePack();
    [CompilerGeneratedAttribute]
public void set_ResourcePack(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateResourcesReferencedByManifest();
    [CompilerGeneratedAttribute]
public void set_ValidateResourcesReferencedByManifest(bool value);
    [CompilerGeneratedAttribute]
public string get_AppxManifest();
    [CompilerGeneratedAttribute]
public void set_AppxManifest(string value);
    [CompilerGeneratedAttribute]
public string get_FileMap();
    [CompilerGeneratedAttribute]
public void set_FileMap(string value);
    [CompilerGeneratedAttribute]
public string get_ContentDirectory();
    [CompilerGeneratedAttribute]
public void set_ContentDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_HashAlgorithmId();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithmId(string value);
    protected virtual string GenerateCommandLineCommands();
    private void AppendCgmSwitchIfNecessary(CommandLineBuilder builder);
    private void AppendCgmSwitch(CommandLineBuilder builder);
}
public abstract class Microsoft.Build.Msix.MakeAppx.WinAppSdkMakeAppxWithOutput : WinAppSdkMakeAppx {
    private static string OutputType;
    [CompilerGeneratedAttribute]
private bool <EncryptAppxPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public bool EncryptAppxPackage { get; public set; }
    [RequiredAttribute]
public string Output { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EncryptAppxPackage();
    [CompilerGeneratedAttribute]
public void set_EncryptAppxPackage(bool value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
}
internal static class Microsoft.Build.Msix.Metadata : object {
    internal static string AppxLocation;
    internal static string Architecture;
    internal static string DescriptionID;
    internal static string DisplayName;
    internal static string ExcludeFromResourceIndex;
    internal static string ExpectedTargetSizes;
    internal static string ExpectedScaleDimensions;
    internal static string Extension;
    internal static string FileName;
    internal static string FrameworkIdentity;
    internal static string FullPath;
    internal static string Id;
    internal static string Identity;
    internal static string ImageRuntime;
    internal static string Implementation;
    internal static string MaximumFileSize;
    internal static string MaxMajorVersionTested;
    internal static string MaxOSVersionTested;
    internal static string MinOSVersion;
    internal static string MoreInfo;
    internal static string MSBuildSourceProjectFile;
    internal static string Name;
    internal static string NamespaceAlias;
    internal static string NamespaceUri;
    internal static string NeutralResourceLanguage;
    internal static string NTVersion;
    internal static string OSDescription;
    internal static string OSVersion;
    internal static string OutputGroup;
    internal static string ProjectName;
    internal static string Publisher;
    internal static string Qualifiers;
    internal static string ResolvedSDKReference;
    internal static string ResourceIndexName;
    internal static string ResourceName;
    internal static string SDKRootPath;
    internal static string SimpleName;
    internal static string TargetedSDKArchitecture;
    internal static string TargetedSDKConfiguration;
    internal static string TargetPath;
    internal static string TargetPlatformIdentifier;
    internal static string TargetPlatformVersion;
    internal static string TargetPlatformMinVersion;
    internal static string Value;
    internal static string Version;
}
public class Microsoft.Build.Msix.MetadataCache.WinMdCache : object {
    private WinMdCacheOptions options;
    private static string CurAssemblyVersion;
    private string fullPath;
    private AppxPackagingTaskHelper taskHelper;
    private WinMdCacheEntry cachedFile;
    private string cacheFileFullPath;
    [CompilerGeneratedAttribute]
private WinMdCacheState <CacheStatus>k__BackingField;
    internal WinMdCacheState CacheStatus { get; internal set; }
    internal Dictionary`2<string, InprocServer> CachedServers { get; }
    internal Dictionary`2<string, string> Namespaces { get; }
    internal string RootNamespace { get; internal set; }
    internal WinMdCache(string fullPath, AppxPackagingTaskHelper taskHelper, WinMdCacheOptions options);
    private static WinMdCache();
    [CompilerGeneratedAttribute]
internal WinMdCacheState get_CacheStatus();
    [CompilerGeneratedAttribute]
internal void set_CacheStatus(WinMdCacheState value);
    internal Dictionary`2<string, InprocServer> get_CachedServers();
    internal Dictionary`2<string, string> get_Namespaces();
    internal string get_RootNamespace();
    internal void set_RootNamespace(string value);
    protected void InitializeCacheDirectory();
    protected void ReadInExistingCacheFile();
    internal void InitializeNewCacheFile();
    internal string BuildCachedFileName();
    internal string BuildCachedFileName(string filename, DateTime lastMod);
    internal void Save();
    public void AddInProcServer(string path, string fullTypeName, string threadingValue);
    public void AddNamespace(KeyValuePair`2<string, string> kvp);
    private static string GetCurLastModified();
    private void ResolveValidityAndLogStatus();
}
public class Microsoft.Build.Msix.MetadataCache.WinMdCacheEntry : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, InprocServer> <InProcServers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    public string FullPath { get; public set; }
    public Dictionary`2<string, InprocServer> InProcServers { get; public set; }
    public Dictionary`2<string, string> Namespaces { get; public set; }
    public string RootNamespace { get; public set; }
    public string AssemblyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, InprocServer> get_InProcServers();
    [CompilerGeneratedAttribute]
public void set_InProcServers(Dictionary`2<string, InprocServer> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Namespaces();
    [CompilerGeneratedAttribute]
public void set_Namespaces(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
}
internal class Microsoft.Build.Msix.MetadataCache.WinMdCacheOptions : object {
    public bool Enabled;
    public string CacheDir;
}
[FlagsAttribute]
internal enum Microsoft.Build.Msix.MetadataCache.WinMdCacheState : Enum {
    public int value__;
    public static WinMdCacheState Cached;
    public static WinMdCacheState NewEntry;
    public static WinMdCacheState CacheDirectoryDoesNotExist;
    public static WinMdCacheState CacheFileDoesNotExist;
    public static WinMdCacheState CacheFileParseError;
    public static WinMdCacheState CacheFileOutdated;
    public static WinMdCacheState WriteError;
    public static WinMdCacheState WinMdFileDoesNotExist;
    public static WinMdCacheState CacheDisabled;
}
internal static class Microsoft.Build.Msix.MrmSupportLibrary : object {
    public static string GetLocation(string fallbackMrmSupportLibraryPath);
    public static void Load(string mrmSupportLibraryPath);
    internal static IntPtr LoadLibraryW(string libraryFileName);
}
internal class Microsoft.Build.Msix.MrmSupportLibraryIndexedResource : object {
    private Action`1<Action> dispatchToUiThreadCallback;
    private IntPtr resourceUriPtr;
    private UInt32 qualifiersCount;
    private IntPtr qualifiersPtr;
    private string uri;
    private IndexedResourceQualifier[] qualifiers;
    private string Microsoft.Build.Msix.IIndexedResourceCandidate.UriAbsolutePath { get; }
    private IndexedResourceQualifier[] Microsoft.Build.Msix.IIndexedResourceCandidate.Qualifiers { get; }
    public MrmSupportLibraryIndexedResource(IntPtr resourceIndexer, string filePath, Action`1<Action> dispatchToUiThreadCallback);
    private sealed virtual override string Microsoft.Build.Msix.IIndexedResourceCandidate.get_UriAbsolutePath();
    private sealed virtual override IndexedResourceQualifier[] Microsoft.Build.Msix.IIndexedResourceCandidate.get_Qualifiers();
    private sealed virtual override void System.IDisposable.Dispose();
    private static int IndexFilePath(IntPtr resourceIndexer, string filePath, IntPtr& resourceUriPtr, UInt32& qualifierCount, IntPtr& qualifiersPtr);
    private static void DestroyIndexedResults(IntPtr resourceUriPtr, UInt32 qualifierCount, IntPtr qualifiersPtr);
    [CompilerGeneratedAttribute]
private void <System.IDisposable.Dispose>b__11_0();
}
internal class Microsoft.Build.Msix.MrmSupportLibraryResourceIndexer : object {
    private Action`1<Action> dispatchToUiThreadCallback;
    private IntPtr resourceIndexerPtr;
    public MrmSupportLibraryResourceIndexer(string projectRoot, Action`1<Action> dispatchToUiThreadCallback);
    private sealed virtual override IIndexedResourceCandidate Microsoft.Build.Msix.IResourceIndexer.IndexFilePath(string filePath);
    private sealed virtual override void System.IDisposable.Dispose();
    private static int CreateResourceIndexer(string projectRoot, string extensionDllPath, IntPtr& resourceIndexerHandle);
    private static void DestroyResourceIndexer(IntPtr resourceIndexer);
    [CompilerGeneratedAttribute]
private void <System.IDisposable.Dispose>b__4_0();
}
internal class Microsoft.Build.Msix.MrmSupportLibraryResourceIndexMap : ResourceIndexMap {
    private string projectDir;
    private IResourceIndexer resourceIndexer;
    public MrmSupportLibraryResourceIndexMap(string mrmSupportLibraryPath, string projectDir);
    public virtual Resource Map(string targetPath);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal static class Microsoft.Build.Msix.MRTPathUtils : object {
    internal static int DefaultScale;
    internal static string ScaleQualifier;
    internal static string TargetSizeQualifier;
    internal static string Unplated;
    internal static string AlternateFormQualifierKey;
    internal static string AlternateFormQualifier;
    internal static string LanguageReadQualifier;
    internal static string ContrastQualifier;
    internal static string LocationQualifier;
    internal static string LayoutReadQualifier;
    internal static string LayoutWriteQualifier;
    internal static char QualifierDelimiter;
    internal static string QualifierDelimiterString;
    internal static string QualifierFormat;
    internal static string QualifierPrefixFormat;
    internal static string ScaleQualifierPrefix;
    internal static string ScaleQualifierFormat;
    internal static string DirectorySeparatorString;
    private static MRTPathUtils();
    public static IResourceIndexer CreateResourceIndexer(string mrmSupportLibraryPath, string projectRoot, Action`1<Action> dispatchToUIThreadCallback);
    public static IResourceIndexer CreateResourceIndexer(string mrmSupportLibraryPath, string projectRoot);
    private static IResourceIndexer CreateApiResourceIndexer(string projectRoot);
    public static string GetLogicalName(string resourceUri);
    public static string TryLookupQualifier(IIndexedResourceCandidate candidate, string qualifierName);
    public static string TryGetQualifiedName(string basePath, string logicalPath, int scale, int targetSize, string language, Contrast contrast, string location, Layout layout, bool isUnplated);
    public static string AddQualifierToFilename(IResourceIndexer indexer, string basePath, string path, string qualifierName, object qualifierValue);
    public static string TryReplaceQualifier(string basePath, string path, string oldQualifierName, string newQualifierName, string newQualifierValue);
    public static string TryRemoveQualifier(string basePath, string path, string qualifierName);
    public static string GetQualifierFullValue(IndexedResourceQualifier indexedResourceQualifier);
    private static void MaybeAppendQualifier(StringBuilder& token, string qualifierName, object qualifierValue);
    private static string TryReplaceQualifierInToken(string token, string oldQualifierName, string newQualifierName, string newQualifierValue);
    private static string TryReplaceQualifierInFilename(string filename, string oldQualifierName, string newQualifierName, string newQualifierValue);
    private static string TryReplaceQualifierInDirectory(string relativePath, string oldQualifierName, string newQualifierName, string newQualifierValue);
    private static string TryRemoveQualifierInToken(string token, string qualifierName);
    private static string TryRemoveQualifierInFilename(string filename, string qualifierName);
    private static string TryRemoveQualifierInDirectory(string relativePath, string qualifierName);
}
internal static class Microsoft.Build.Msix.NativeMethods : object {
    [SecurityCriticalAttribute]
internal static string GetEnvironmentVariable(string name);
    private static int GetEnvironmentVariable(string lpName, StringBuilder lpBuffer, int nSize);
}
internal static class Microsoft.Build.Msix.OutputGroups : object {
    internal static string ContentFilesProjectOutputGroup;
    internal static string ExpandedPriFilesOutputGroup;
    internal static string BuiltProjectOutputGroup;
    internal static string PublishItemsOutputGroupOutput;
}
internal static class Microsoft.Build.Msix.PathUtils : object {
    internal static int MaxPath;
    public static string MaybeAppendSeparator(string path, bool addToEmpty);
    public static string MaybeRemoveSeparator(string path);
    public static bool PathContains(string basePath, string auxPath);
    public static string GetRelativeFilePath(string basePath, string filePath);
    public static string GetRelativeDirectoryPath(string basePath, string dirPath);
    public static string FixImageExtension(string path);
    public static bool HasImageExtension(string path);
    public static string TryGetImageExtension(string path);
    public static bool Equals(string path1, string path2);
    public static bool EqualsWithStrictExtension(string path1, string path2);
    public static Uri TryGetUriFromPath(string path, bool throwing);
    public static string TryUnescapeUriPath(string data);
    internal static string GetNativeFilter(string filter);
    internal static bool HasReservedDeviceName(string fileName);
}
internal class Microsoft.Build.Msix.PayloadTaskItemEqualityComparer : object {
    private static string SharedInstanceKeyPrefix;
    private static RegisteredTaskObjectLifetime SharedInstanceLifetime;
    private FileInfoCache cache;
    public static PayloadTaskItemEqualityComparer GetSharedInstance(string platform, IBuildEngine4 buildEngine);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<Microsoft.Build.Framework.ITaskItem>.Equals(ITaskItem taskItem1, ITaskItem taskItem2);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<Microsoft.Build.Framework.ITaskItem>.GetHashCode(ITaskItem payloadTaskItem);
}
internal static class Microsoft.Build.Msix.Pri.IntermediateFileHelper : object {
    internal static void CreateIntermediateAndFinalFile(string finalFilePath, string intermediateExtension, Action`1<string> writerAction);
    private static bool FilesAreSame(string filePath1, string filePath2);
}
public class Microsoft.Build.Msix.Pri.WinAppSdkCreatePriConfigXmlForFullIndex : WinAppSdkCreatePriConfigXmlTask {
    [CompilerGeneratedAttribute]
private string <EmbedFileResfilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceResFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourcesResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PriResfilesPath>k__BackingField;
    public string EmbedFileResfilePath { get; public set; }
    public ITaskItem[] AdditionalResourceResFiles { get; public set; }
    [RequiredAttribute]
public string LayoutResfilesPath { get; public set; }
    [RequiredAttribute]
public string ResourcesResfilesPath { get; public set; }
    [RequiredAttribute]
public string PriResfilesPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EmbedFileResfilePath();
    [CompilerGeneratedAttribute]
public void set_EmbedFileResfilePath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceResFiles();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceResFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_LayoutResfilesPath();
    [CompilerGeneratedAttribute]
public void set_LayoutResfilesPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResourcesResfilesPath();
    [CompilerGeneratedAttribute]
public void set_ResourcesResfilesPath(string value);
    [CompilerGeneratedAttribute]
public string get_PriResfilesPath();
    [CompilerGeneratedAttribute]
public void set_PriResfilesPath(string value);
    [IteratorStateMachineAttribute("Microsoft.Build.Msix.Pri.WinAppSdkCreatePriConfigXmlForFullIndex/<GetIndexElements>d__20")]
protected virtual IEnumerable`1<XElement> GetIndexElements();
}
public abstract class Microsoft.Build.Msix.Pri.WinAppSdkCreatePriConfigXmlTask : Task {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <PriInitialPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PriConfigXmlPackagingSnippetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PriConfigXmlDefaultSnippetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertDotsToSlashes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PriConfigXmlPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultResourceLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultResourceQualifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    public string PriInitialPath { get; public set; }
    public string VSTelemetrySession { get; public set; }
    public string PriConfigXmlPackagingSnippetPath { get; public set; }
    public string PriConfigXmlDefaultSnippetPath { get; public set; }
    public bool ConvertDotsToSlashes { get; public set; }
    [RequiredAttribute]
public string PriConfigXmlPath { get; public set; }
    [RequiredAttribute]
public string DefaultResourceLanguage { get; public set; }
    [RequiredAttribute]
public string DefaultResourceQualifiers { get; public set; }
    [RequiredAttribute]
public string IntermediateExtension { get; public set; }
    [RequiredAttribute]
public string TargetPlatformIdentifier { get; public set; }
    [RequiredAttribute]
public string TargetPlatformVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PriInitialPath();
    [CompilerGeneratedAttribute]
public void set_PriInitialPath(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_PriConfigXmlPackagingSnippetPath();
    [CompilerGeneratedAttribute]
public void set_PriConfigXmlPackagingSnippetPath(string value);
    [CompilerGeneratedAttribute]
public string get_PriConfigXmlDefaultSnippetPath();
    [CompilerGeneratedAttribute]
public void set_PriConfigXmlDefaultSnippetPath(string value);
    [CompilerGeneratedAttribute]
public bool get_ConvertDotsToSlashes();
    [CompilerGeneratedAttribute]
public void set_ConvertDotsToSlashes(bool value);
    [CompilerGeneratedAttribute]
public string get_PriConfigXmlPath();
    [CompilerGeneratedAttribute]
public void set_PriConfigXmlPath(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultResourceLanguage();
    [CompilerGeneratedAttribute]
public void set_DefaultResourceLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultResourceQualifiers();
    [CompilerGeneratedAttribute]
public void set_DefaultResourceQualifiers(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateExtension();
    [CompilerGeneratedAttribute]
public void set_IntermediateExtension(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    public virtual bool Execute();
    protected virtual IEnumerable`1<XElement> GetPackagingElementChildren();
    protected abstract virtual IEnumerable`1<XElement> GetIndexElements();
    protected XElement CreateIndexElement(string root, string startIndexAt, XElement[] indexerConfigElements);
    protected XElement CreateResFilesIndexerConfigElement();
    protected XElement CreateEmbedFilesIndexerConfigElement();
    protected XElement CreateReswIndexerConfigElement();
    protected XElement CreateResjsonIndexerConfigElement();
    protected XElement CreatePriIndexerConfigElement();
    private void ExecuteImplementation();
    private XElement GetElement(Func`1<XElement> getCalculatedElementFunction, string customSnippetPath);
    private XElement GetCustomElement(string snippetPath);
    private XElement GetPackagingElement();
    private XElement GetDefaultElement();
    private void CreateOutputFile(string filePath);
    private XDocument CreateXml();
}
public class Microsoft.Build.Msix.Pri.WinAppSdkExpandPriContent : ToolTask {
    private AppxPackagingTaskHelper taskHelper;
    private List`1<ITaskItem> expandedPayload;
    private ITaskItem currentPriFileItem;
    private List`1<ITaskItem> intermediateFileWrites;
    [CompilerGeneratedAttribute]
private string <MakePriExtensionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeXamlFromLibraryLayoutsWhenXbfIsPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalMakepriExeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MakePriExeFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <IntermediateFileWrites>k__BackingField;
    protected Encoding StandardOutputEncoding { get; }
    protected Encoding StandardErrorEncoding { get; }
    protected string ToolName { get; }
    public string MakePriExtensionPath { get; public set; }
    public bool ExcludeXamlFromLibraryLayoutsWhenXbfIsPresent { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Inputs { get; public set; }
    [RequiredAttribute]
public string IntermediateDirectory { get; public set; }
    public string AdditionalMakepriExeParameters { get; public set; }
    [RequiredAttribute]
public string MakePriExeFullPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] Expanded { get; public set; }
    [OutputAttribute]
public ITaskItem[] IntermediateFileWrites { get; public set; }
    protected virtual Encoding get_StandardOutputEncoding();
    protected virtual Encoding get_StandardErrorEncoding();
    protected virtual string get_ToolName();
    [CompilerGeneratedAttribute]
public string get_MakePriExtensionPath();
    [CompilerGeneratedAttribute]
public void set_MakePriExtensionPath(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeXamlFromLibraryLayoutsWhenXbfIsPresent();
    [CompilerGeneratedAttribute]
public void set_ExcludeXamlFromLibraryLayoutsWhenXbfIsPresent(bool value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateDirectory();
    [CompilerGeneratedAttribute]
public void set_IntermediateDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalMakepriExeParameters();
    [CompilerGeneratedAttribute]
public void set_AdditionalMakepriExeParameters(string value);
    [CompilerGeneratedAttribute]
public string get_MakePriExeFullPath();
    [CompilerGeneratedAttribute]
public void set_MakePriExeFullPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_IntermediateFileWrites();
    [CompilerGeneratedAttribute]
public void set_IntermediateFileWrites(ITaskItem[] value);
    public virtual bool Execute();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    private void ExecuteImplementation();
    private void ProcessPriFile(ITaskItem priFileItem);
    private bool ShouldBeIncluded(XElement candidate, IEnumerable`1<string> candidatePaths, string priFileFolder);
    private ITaskItem CreateResourceTaskItem(ITaskItem priFileItem, XElement candidate);
    private string GetPriXmlFileName(ITaskItem priFileItem);
}
public class Microsoft.Build.Msix.Pri.WinAppSdkGeneratePriConfigurationFiles : Task {
    private AppxPackagingTaskHelper taskHelper;
    private List`1<ITaskItem> additionalResourceResFiles;
    [CompilerGeneratedAttribute]
private string <EmbedFileResfilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <EmbedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <UnprocessedResourceFiles_OtherLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnfilteredLayoutResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilteredLayoutResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludedLayoutResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourcesResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PriResfilesPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LayoutFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PRIResourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PriFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalResourceResFiles>k__BackingField;
    public string EmbedFileResfilePath { get; public set; }
    public ITaskItem[] EmbedFiles { get; public set; }
    public ITaskItem[] UnprocessedResourceFiles_OtherLanguages { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string UnfilteredLayoutResfilesPath { get; public set; }
    [RequiredAttribute]
public string FilteredLayoutResfilesPath { get; public set; }
    [RequiredAttribute]
public string ExcludedLayoutResfilesPath { get; public set; }
    [RequiredAttribute]
public string ResourcesResfilesPath { get; public set; }
    [RequiredAttribute]
public string PriResfilesPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] LayoutFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] PRIResourceFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] PriFiles { get; public set; }
    [RequiredAttribute]
public string IntermediateExtension { get; public set; }
    [OutputAttribute]
public ITaskItem[] AdditionalResourceResFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EmbedFileResfilePath();
    [CompilerGeneratedAttribute]
public void set_EmbedFileResfilePath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_EmbedFiles();
    [CompilerGeneratedAttribute]
public void set_EmbedFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UnprocessedResourceFiles_OtherLanguages();
    [CompilerGeneratedAttribute]
public void set_UnprocessedResourceFiles_OtherLanguages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_UnfilteredLayoutResfilesPath();
    [CompilerGeneratedAttribute]
public void set_UnfilteredLayoutResfilesPath(string value);
    [CompilerGeneratedAttribute]
public string get_FilteredLayoutResfilesPath();
    [CompilerGeneratedAttribute]
public void set_FilteredLayoutResfilesPath(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludedLayoutResfilesPath();
    [CompilerGeneratedAttribute]
public void set_ExcludedLayoutResfilesPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResourcesResfilesPath();
    [CompilerGeneratedAttribute]
public void set_ResourcesResfilesPath(string value);
    [CompilerGeneratedAttribute]
public string get_PriResfilesPath();
    [CompilerGeneratedAttribute]
public void set_PriResfilesPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LayoutFiles();
    [CompilerGeneratedAttribute]
public void set_LayoutFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PRIResourceFiles();
    [CompilerGeneratedAttribute]
public void set_PRIResourceFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PriFiles();
    [CompilerGeneratedAttribute]
public void set_PriFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateExtension();
    [CompilerGeneratedAttribute]
public void set_IntermediateExtension(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalResourceResFiles();
    [CompilerGeneratedAttribute]
public void set_AdditionalResourceResFiles(ITaskItem[] value);
    public virtual bool Execute();
    public sealed virtual void Cancel();
    private void ExecuteImplementation();
    private void CreateIntermediateAndFinalFile(string finalFilePath, Action`1<string> writerAction);
    private void CreateUnfilteredLayoutResfiles(string filePath);
    private void CreateFilteredLayoutResfiles(string filePath);
    private void CreateExcludedLayoutResfiles(string filePath);
    private static bool IsExcluded(ITaskItem layoutFile);
    private void CreateLayoutResfiles(string filePath, Func`2<ITaskItem, bool> shouldBeIncluded);
    private void CreateResourcesResfiles(string filePath);
    private void CreatePriResfiles(string filePath);
    private void CreateEmbedFileResfile(string filePath);
    private void CreateAdditionalResourceResFiles();
}
public class Microsoft.Build.Msix.Pri.WinAppSdkGenerateProjectPriFile : ToolTask {
    internal static string MakePriFileName;
    private AppxPackagingTaskHelper taskHelper;
    private List`1<string> output;
    private string outputDirectory;
    private int namedResourcesCount;
    private int resourceCandidatesCount;
    [CompilerGeneratedAttribute]
private String[] <IndexFilesForQualifiersCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappingFileFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertReverseMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MakePriExtensionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QualifiersPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedFilesListPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalMakepriExeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MultipleQualifiersPerDimensionFoundPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MakePriExeFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PriConfigXmlPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPriIndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxBundleAutoResourcePackageQualifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFileName>k__BackingField;
    protected string ToolName { get; }
    protected Encoding StandardOutputEncoding { get; }
    protected Encoding StandardErrorEncoding { get; }
    public String[] IndexFilesForQualifiersCollection { get; public set; }
    public string MappingFileFormat { get; public set; }
    public bool InsertReverseMap { get; public set; }
    public string MakePriExtensionPath { get; public set; }
    public string QualifiersPath { get; public set; }
    public string GeneratedFilesListPath { get; public set; }
    public string AdditionalMakepriExeParameters { get; public set; }
    public string MultipleQualifiersPerDimensionFoundPath { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string MakePriExeFullPath { get; public set; }
    [RequiredAttribute]
public string PriConfigXmlPath { get; public set; }
    [RequiredAttribute]
public string ProjectPriIndexName { get; public set; }
    [RequiredAttribute]
public string AppxBundleAutoResourcePackageQualifiers { get; public set; }
    [RequiredAttribute]
public string IntermediateExtension { get; public set; }
    [RequiredAttribute]
public string ProjectDirectory { get; public set; }
    [RequiredAttribute]
public string OutputFileName { get; public set; }
    protected virtual string get_ToolName();
    protected virtual Encoding get_StandardOutputEncoding();
    protected virtual Encoding get_StandardErrorEncoding();
    protected virtual string GenerateFullPathToTool();
    [CompilerGeneratedAttribute]
public String[] get_IndexFilesForQualifiersCollection();
    [CompilerGeneratedAttribute]
public void set_IndexFilesForQualifiersCollection(String[] value);
    [CompilerGeneratedAttribute]
public string get_MappingFileFormat();
    [CompilerGeneratedAttribute]
public void set_MappingFileFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_InsertReverseMap();
    [CompilerGeneratedAttribute]
public void set_InsertReverseMap(bool value);
    [CompilerGeneratedAttribute]
public string get_MakePriExtensionPath();
    [CompilerGeneratedAttribute]
public void set_MakePriExtensionPath(string value);
    [CompilerGeneratedAttribute]
public string get_QualifiersPath();
    [CompilerGeneratedAttribute]
public void set_QualifiersPath(string value);
    [CompilerGeneratedAttribute]
public string get_GeneratedFilesListPath();
    [CompilerGeneratedAttribute]
public void set_GeneratedFilesListPath(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalMakepriExeParameters();
    [CompilerGeneratedAttribute]
public void set_AdditionalMakepriExeParameters(string value);
    [CompilerGeneratedAttribute]
public string get_MultipleQualifiersPerDimensionFoundPath();
    [CompilerGeneratedAttribute]
public void set_MultipleQualifiersPerDimensionFoundPath(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_MakePriExeFullPath();
    [CompilerGeneratedAttribute]
public void set_MakePriExeFullPath(string value);
    [CompilerGeneratedAttribute]
public string get_PriConfigXmlPath();
    [CompilerGeneratedAttribute]
public void set_PriConfigXmlPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPriIndexName();
    [CompilerGeneratedAttribute]
public void set_ProjectPriIndexName(string value);
    [CompilerGeneratedAttribute]
public string get_AppxBundleAutoResourcePackageQualifiers();
    [CompilerGeneratedAttribute]
public void set_AppxBundleAutoResourcePackageQualifiers(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateExtension();
    [CompilerGeneratedAttribute]
public void set_IntermediateExtension(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFileName();
    [CompilerGeneratedAttribute]
public void set_OutputFileName(string value);
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    protected virtual string GenerateCommandLineCommands();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    protected virtual bool ValidateParameters();
    private void ParseOutput();
    private void UpdateGeneratedFilesList(List`1<string> generatedFiles);
    private void UpdateQualifiers(List`1<QualiferEntry> qualifiersPerIndexPass, List`1<QualiferEntry> qualifiersPerResourceFile);
    private void UpdateMultipleQualifiersPerSplitDimensionFound(List`1<QualiferEntry> qualifiersPerIndexPass);
    [CompilerGeneratedAttribute]
private bool <UpdateQualifiers>b__84_0(QualiferEntry q);
    [CompilerGeneratedAttribute]
private bool <UpdateQualifiers>b__84_1(QualiferEntry q);
}
public class Microsoft.Build.Msix.Pri.WinAppSdkGetDefaultResourceLanguage : Task {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <DefaultLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <SourceAppxManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultResourceLanguage>k__BackingField;
    public string DefaultLanguage { get; public set; }
    public ITaskItem SourceAppxManifest { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [OutputAttribute]
public string DefaultResourceLanguage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultLanguage();
    [CompilerGeneratedAttribute]
public void set_DefaultLanguage(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_SourceAppxManifest();
    [CompilerGeneratedAttribute]
public void set_SourceAppxManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultResourceLanguage();
    [CompilerGeneratedAttribute]
public void set_DefaultResourceLanguage(string value);
    public virtual bool Execute();
    private void CalculateDefaultResourceLanguage();
    private bool Validate(string value);
}
public class Microsoft.Build.Msix.Pri.WinAppSdkRemoveDuplicatePriFiles : Task {
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Filtered>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Inputs { get; public set; }
    [RequiredAttribute]
public string Platform { get; public set; }
    [OutputAttribute]
public ITaskItem[] Filtered { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Filtered();
    [CompilerGeneratedAttribute]
public void set_Filtered(ITaskItem[] value);
    public virtual bool Execute();
    private void ExecuteImplementation();
}
public class Microsoft.Build.Msix.Recipe.WinAppSdkExpandPayloadDirectories : Task {
    private AppxPackagingTaskHelper taskHelper;
    private HashSet`1<string> targetDirsToExclude;
    private HashSet`1<string> targetFilesToExclude;
    private List`1<ITaskItem> payloadItems;
    [CompilerGeneratedAttribute]
private String[] <TargetDirsToExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetFilesToExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Expanded>k__BackingField;
    public String[] TargetDirsToExclude { get; public set; }
    public String[] TargetFilesToExclude { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Inputs { get; public set; }
    [OutputAttribute]
public ITaskItem[] Expanded { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_TargetDirsToExclude();
    [CompilerGeneratedAttribute]
public void set_TargetDirsToExclude(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TargetFilesToExclude();
    [CompilerGeneratedAttribute]
public void set_TargetFilesToExclude(String[] value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(ITaskItem[] value);
    public virtual bool Execute();
    public sealed virtual void Cancel();
    private void ExecuteImplementation();
    private void ProcessInputItem(ITaskItem inputTaskItem);
    private void ExpandDirectory(ITaskItem inputTaskItem);
    private void CopyItemToExpanded(ITaskItem inputTaskItem);
    private bool ItemShouldBeExcluded(ITaskItem taskItem);
    private void AddToExpanded(ITaskItem taskItem);
}
public class Microsoft.Build.Msix.Recipe.WinAppSdkGenerateAppxPackageRecipe : Task {
    private String[] reservedFileNames;
    private String[] systemBinaries;
    private List`1<string> reRegistrationTriggeringFiles;
    private AppxPackagingTaskHelper taskHelper;
    private XDocument manifest;
    private XmlNamespaceManager namespaceManager;
    private ResourceIndexMap resourceIndexMap;
    [CompilerGeneratedAttribute]
private string <AppxBundleManifestXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxContentGroupMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestFileNameQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalReRegisterAppIfChangedTargetPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OptionalProjectRecipeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowsSdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <IndexedPayloadFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MrmSupportLibraryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAppxManifestItemPackageContentValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteDeploymentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageRegistrationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveNonLayoutFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeployOptionalPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PlatformVersionDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseResourceIndexerApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxManifestXml>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <SourceAppxManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PayloadFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkSdkPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <RecipeFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SystemBinaries>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReservedFileNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AppxManifestSchemas>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManifestImageFileNameQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    public string AppxBundleManifestXml { get; public set; }
    public string AppxContentGroupMap { get; public set; }
    public ITaskItem[] ManifestFileNameQueries { get; public set; }
    public ITaskItem[] AdditionalReRegisterAppIfChangedTargetPaths { get; public set; }
    public ITaskItem[] OptionalProjectRecipeFiles { get; public set; }
    public string WindowsSdkPath { get; public set; }
    public string LayoutDir { get; public set; }
    public ITaskItem[] IndexedPayloadFiles { get; public set; }
    public string MrmSupportLibraryPath { get; public set; }
    public bool DisableAppxManifestItemPackageContentValidation { get; public set; }
    public string RemoteDeploymentType { get; public set; }
    public string PackageRegistrationPath { get; public set; }
    public bool RemoveNonLayoutFiles { get; public set; }
    public bool DeployOptionalPackages { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] PlatformVersionDescriptions { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [RequiredAttribute]
public bool UseResourceIndexerApi { get; public set; }
    [RequiredAttribute]
public string AppxManifestXml { get; public set; }
    [RequiredAttribute]
public ITaskItem SourceAppxManifest { get; public set; }
    [RequiredAttribute]
public string SolutionConfiguration { get; public set; }
    [RequiredAttribute]
public ITaskItem[] PayloadFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkSdkPackages { get; public set; }
    [RequiredAttribute]
public ITaskItem RecipeFile { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SystemBinaries { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ReservedFileNames { get; public set; }
    [RequiredAttribute]
public ITaskItem[] AppxManifestSchemas { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ManifestImageFileNameQueries { get; public set; }
    [RequiredAttribute]
public string PackageArchitecture { get; public set; }
    [RequiredAttribute]
public string ProjectDir { get; public set; }
    [RequiredAttribute]
public string TargetPlatformIdentifier { get; public set; }
    [RequiredAttribute]
public string TargetPlatformVersion { get; public set; }
    private ITaskItem TargetPlatformVersionDescription { get; }
    private string MinTargetOsDescription { get; }
    private string MinTargetOsVersion { get; }
    [CompilerGeneratedAttribute]
public string get_AppxBundleManifestXml();
    [CompilerGeneratedAttribute]
public void set_AppxBundleManifestXml(string value);
    [CompilerGeneratedAttribute]
public string get_AppxContentGroupMap();
    [CompilerGeneratedAttribute]
public void set_AppxContentGroupMap(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestFileNameQueries();
    [CompilerGeneratedAttribute]
public void set_ManifestFileNameQueries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalReRegisterAppIfChangedTargetPaths();
    [CompilerGeneratedAttribute]
public void set_AdditionalReRegisterAppIfChangedTargetPaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OptionalProjectRecipeFiles();
    [CompilerGeneratedAttribute]
public void set_OptionalProjectRecipeFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_WindowsSdkPath();
    [CompilerGeneratedAttribute]
public void set_WindowsSdkPath(string value);
    [CompilerGeneratedAttribute]
public string get_LayoutDir();
    [CompilerGeneratedAttribute]
public void set_LayoutDir(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_IndexedPayloadFiles();
    [CompilerGeneratedAttribute]
public void set_IndexedPayloadFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_MrmSupportLibraryPath();
    [CompilerGeneratedAttribute]
public void set_MrmSupportLibraryPath(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableAppxManifestItemPackageContentValidation();
    [CompilerGeneratedAttribute]
public void set_DisableAppxManifestItemPackageContentValidation(bool value);
    [CompilerGeneratedAttribute]
public string get_RemoteDeploymentType();
    [CompilerGeneratedAttribute]
public void set_RemoteDeploymentType(string value);
    [CompilerGeneratedAttribute]
public string get_PackageRegistrationPath();
    [CompilerGeneratedAttribute]
public void set_PackageRegistrationPath(string value);
    [CompilerGeneratedAttribute]
public bool get_RemoveNonLayoutFiles();
    [CompilerGeneratedAttribute]
public void set_RemoveNonLayoutFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeployOptionalPackages();
    [CompilerGeneratedAttribute]
public void set_DeployOptionalPackages(bool value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PlatformVersionDescriptions();
    [CompilerGeneratedAttribute]
public void set_PlatformVersionDescriptions(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_UseResourceIndexerApi();
    [CompilerGeneratedAttribute]
public void set_UseResourceIndexerApi(bool value);
    [CompilerGeneratedAttribute]
public string get_AppxManifestXml();
    [CompilerGeneratedAttribute]
public void set_AppxManifestXml(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_SourceAppxManifest();
    [CompilerGeneratedAttribute]
public void set_SourceAppxManifest(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_SolutionConfiguration();
    [CompilerGeneratedAttribute]
public void set_SolutionConfiguration(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PayloadFiles();
    [CompilerGeneratedAttribute]
public void set_PayloadFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkSdkPackages();
    [CompilerGeneratedAttribute]
public void set_FrameworkSdkPackages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_RecipeFile();
    [CompilerGeneratedAttribute]
public void set_RecipeFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SystemBinaries();
    [CompilerGeneratedAttribute]
public void set_SystemBinaries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReservedFileNames();
    [CompilerGeneratedAttribute]
public void set_ReservedFileNames(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AppxManifestSchemas();
    [CompilerGeneratedAttribute]
public void set_AppxManifestSchemas(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManifestImageFileNameQueries();
    [CompilerGeneratedAttribute]
public void set_ManifestImageFileNameQueries(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PackageArchitecture();
    [CompilerGeneratedAttribute]
public void set_PackageArchitecture(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    public virtual bool Execute();
    public sealed virtual void Cancel();
    private ITaskItem get_TargetPlatformVersionDescription();
    private string get_MinTargetOsDescription();
    private string get_MinTargetOsVersion();
    private void ExecuteImplementation();
    private void WriteRecipeText();
    private void WritePropertyGroup(TextWriter writer);
    private void WriteAppxManifestElement(TextWriter writer);
    private void WriteAppxBundleManifestElement(TextWriter writer);
    private void WriteAppxContentGroupMapElement(TextWriter writer);
    private void WritePackagedFileElement(TextWriter writer, ITaskItem source);
    private static void WriteResolvedSdkReferenceElement(TextWriter writer, ITaskItem package);
    private static void WriteOptionalProjectRecipeElement(TextWriter writer, ITaskItem project);
    private static string GetVersionMetadata(ITaskItem package);
    private string MainPackageDependency();
    private bool IsFullTrustEntryPoint();
    private bool HasFullTrustCapability();
    private bool IsFullTrust();
    private string GetPackageIdentityName();
    private string GetPackageIdentityPublisher();
    private string GetResourceName(string resourceCandidatePath);
    private void ValidatePackageContent();
    internal void LoadManifest();
    private IEnumerable`1<string> FilesReferencedByManifest(ITaskItem[] queries);
    [CompilerGeneratedAttribute]
private bool <get_TargetPlatformVersionDescription>b__139_0(ITaskItem pvd);
    [CompilerGeneratedAttribute]
private bool <get_TargetPlatformVersionDescription>b__139_1(ITaskItem pvd);
    [CompilerGeneratedAttribute]
private bool <ValidatePackageContent>b__161_2(string fileName);
}
public class Microsoft.Build.Msix.Recipe.WinAppSdkGenerateProjectArchitecturesFile : Task {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectArchitectures>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectArchitecturesFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] ProjectArchitectures { get; public set; }
    [RequiredAttribute]
public string ProjectArchitecturesFilePath { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectArchitectures();
    [CompilerGeneratedAttribute]
public void set_ProjectArchitectures(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectArchitecturesFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectArchitecturesFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    public virtual bool Execute();
    private static string GetLine(ITaskItem arch);
    private void GenerateFile();
}
public class Microsoft.Build.Msix.Recipe.WinAppSdkGetPackageArchitecture : Task {
    private static string InvalidPackageArchitecture;
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RecursiveProjectArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageArchitecture>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string Platform { get; public set; }
    [RequiredAttribute]
public string ProjectArchitecture { get; public set; }
    [RequiredAttribute]
public ITaskItem[] RecursiveProjectArchitecture { get; public set; }
    [OutputAttribute]
public string PackageArchitecture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectArchitecture();
    [CompilerGeneratedAttribute]
public void set_ProjectArchitecture(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RecursiveProjectArchitecture();
    [CompilerGeneratedAttribute]
public void set_RecursiveProjectArchitecture(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PackageArchitecture();
    [CompilerGeneratedAttribute]
public void set_PackageArchitecture(string value);
    public virtual bool Execute();
    private void CalculatePackageArchitecture();
    private bool ArchitectureIsMismatched(ITaskItem taskItem);
    [CompilerGeneratedAttribute]
private bool <CalculatePackageArchitecture>b__23_0(ITaskItem ti);
}
public class Microsoft.Build.Msix.Recipe.WinAppSdkRemovePayloadDuplicates : Task {
    private List`1<ITaskItem> payloadItems;
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private bool <HasSharedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Filtered>k__BackingField;
    public bool HasSharedItems { get; public set; }
    public string MSBuildProjectDirectory { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Inputs { get; public set; }
    [RequiredAttribute]
public string Platform { get; public set; }
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [OutputAttribute]
public ITaskItem[] Filtered { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasSharedItems();
    [CompilerGeneratedAttribute]
public void set_HasSharedItems(bool value);
    [CompilerGeneratedAttribute]
public string get_MSBuildProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_MSBuildProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Filtered();
    [CompilerGeneratedAttribute]
public void set_Filtered(ITaskItem[] value);
    public virtual bool Execute();
    private void ExecuteImplementation();
    private bool TargetPathCollisionsFound();
    [CompilerGeneratedAttribute]
private bool <TargetPathCollisionsFound>b__32_1(ITaskItem item);
    [CompilerGeneratedAttribute]
private bool <TargetPathCollisionsFound>b__32_2(ITaskItem item);
}
internal abstract class Microsoft.Build.Msix.ResourceIndexMap : object {
    public abstract virtual Resource Map(string targetPath);
    public static ResourceIndexMap Create(string mrmSupportLibraryPath, bool useResourceIndexerApi, string projectDir, ITaskItem[] indexedPayloadFiles);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
}
public static class Microsoft.Build.Msix.SdkUtilities : object {
    [CompilerGeneratedAttribute]
private static string <WindowsSdkPlatformIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private static Version <MinPossibleVersionForRs1>k__BackingField;
    public static string WindowsSdkPlatformIdentifier { get; }
    public static Version MinPossibleVersionForRs1 { get; }
    private static SdkUtilities();
    [CompilerGeneratedAttribute]
public static string get_WindowsSdkPlatformIdentifier();
    [CompilerGeneratedAttribute]
public static Version get_MinPossibleVersionForRs1();
    public static IList`1<TargetPlatformSDK> GetPlatformSdks(Version minTargetPlatformVersion, Version maxTargetPlatformVersion);
    public static bool IsAnyMatchingPlatformSdkInstalled(Version minTargetPlatformVersion, Version maxTargetPlatformVersion);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Build.Msix.Strings.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddingFile { get; }
    internal static string AddingPayloadFile { get; }
    internal static string AppInstallerGetTheApp { get; }
    internal static string AppxBundlePlatformsDuplicates { get; }
    internal static string AppxBundlePlatformsNeutralMismatch { get; }
    internal static string AppxManifestMetadataNotAnExecutableFile { get; }
    internal static string AppxManifestMissingRequiredElement { get; }
    internal static string CertificateExpired { get; }
    internal static string CertificateFileCannotBeImported { get; }
    internal static string CertificateFileNotFound { get; }
    internal static string CertificateNotFoundInStore { get; }
    internal static string CertificateNotValidForSigning { get; }
    internal static string CheckingFastlinkPdb { get; }
    internal static string ComValidationError { get; }
    internal static string CouldNotDeleteFile { get; }
    internal static string CryptographicExceptionThrown { get; }
    internal static string DuplicatePayload { get; }
    internal static string ErrorWhileSigning { get; }
    internal static string FailedToCopyPdb { get; }
    internal static string FailedUnFastLinkingSymbolsDueToMissingTool { get; }
    internal static string FileNotFound { get; }
    internal static string FileProduced { get; }
    internal static string FolderCannotBeCreated { get; }
    internal static string FrameworkIdentityParserMalformedFrameworkIdentity { get; }
    internal static string FrameworkIdentityParserTooManyKeys { get; }
    internal static string FrameworkIdentityParserTooManyPublisherKeys { get; }
    internal static string FrameworkIdentityParserTooManyVersionKeys { get; }
    internal static string FrameworkIdentityParserWrongNumberOfPartsUAP { get; }
    internal static string FrameworkSdkPackage { get; }
    internal static string FrameworkSdkReference { get; }
    internal static string GeneratedManifestComment { get; }
    internal static string GenericPackagingComError { get; }
    internal static string GenericTaskFailure { get; }
    internal static string GenericTaskFailureInnerException { get; }
    internal static string HeadAndSharedDuplicateContent { get; }
    internal static string InstallFor { get; }
    internal static string InvalidDefaultLanguage { get; }
    internal static string InvalidMapFormat { get; }
    internal static string InvalidSdkReferenceLocation { get; }
    internal static string LandingAdditionalLinksHeader { get; }
    internal static string LandingApplicationInformation { get; }
    internal static string LandingArchitectureRowTitle { get; }
    internal static string LandingInvalidUri { get; }
    internal static string LandingOsRowTitle { get; }
    internal static string LandingPubisherRowTitle { get; }
    internal static string LandingPublisherCertText { get; }
    internal static string LandingVersionRowTitle { get; }
    internal static string ManifestReferencesNonPayloadFile { get; }
    internal static string MissingDesignTimeFolders { get; }
    internal static string MissingElement { get; }
    internal static string MissingIdentityElement { get; }
    internal static string MissingInputsForCertificateLoader { get; }
    internal static string MissingManifest { get; }
    internal static string MissingNameAttribute { get; }
    internal static string MissingSdkRoot { get; }
    internal static string MissingVersionAttribute { get; }
    internal static string MissingWindowsPropsFileFolder { get; }
    internal static string MissingWindowsPropsProperty { get; }
    internal static string MixedPlatformsAreNotSupported { get; }
    internal static string MultipleCertificatesWithSameThumbprint { get; }
    internal static string NotWellFormedXml { get; }
    internal static string PackagingBuildHelpTopic { get; }
    internal static string PathTooLongError { get; }
    internal static string PayloadFileMissing { get; }
    internal static string PayloadFileNameIsReserved { get; }
    internal static string PriConfigFileNameMissing { get; }
    internal static string ProcessLockingFile { get; }
    internal static string RemovingPayloadFile { get; }
    internal static string StrippingPrivateSymbolsDeprecated { get; }
    internal static string TargetPlatformVersionDescriptionNotFound { get; }
    internal static string TooManyManifests { get; }
    internal static string TroubleshootInstallation { get; }
    internal static string UnFastlinkingSymbols { get; }
    internal static string UnsupportedPlatformValue { get; }
    internal static string WarningWhileSigning { get; }
    internal static string WindowsPropsFileGenericLoadError { get; }
    internal static string WindowsPropsFileIsNotValidProjectFile { get; }
    internal static string WindowsPropsFileIsNotValidXml { get; }
    internal static string WindowsSdkMoreInfo { get; }
    internal static string WinMdCache_Disabled { get; }
    internal static string WinMdCache_ErrorOnDirCreate { get; }
    internal static string WinMdCache_FailedToParse { get; }
    internal static string WinMdCache_InvalidCacheEntry { get; }
    internal static string WinMdCache_InvalidCacheEntryWithFile { get; }
    internal static string WinMdCache_NewCacheWritten { get; }
    internal static string WinMdCache_ValidCacheEntry { get; }
    internal static string WinMdCache_WriteFailed { get; }
    internal static string WinmdContainsNamespacesDifferingInCaseOnly { get; }
    internal static string WinmdContainsTypeInWindowsNamespace { get; }
    internal static string WinmdContainsTypeNotInRootNamespace { get; }
    internal static string WinmdContainsTypesDifferingInCaseOnly { get; }
    internal static string WinmdDuplicateType { get; }
    internal static string WinmdFailedToLoad { get; }
    internal static string WinmdFileNameDoesNotMatchAssemblyName { get; }
    internal static string WinmdFileNameDoesNotMatchModuleName { get; }
    internal static string WinmdFoundMultipleWinmdsMatchingReferenceInSdkManifest { get; }
    internal static string WinmdOnlyInprocSupported { get; }
    internal static string WinmdPropertyWithoutGetter { get; }
    internal static string WinmdUnsupportedThreadingModel { get; }
    internal static string WinmdWithoutImplementation { get; }
    internal static string WinmdWrongTypeLocation { get; }
    internal static string WinmdWrongUsageOfExclusiveInterface { get; }
    internal static string WinSdkFileNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddingFile();
    internal static string get_AddingPayloadFile();
    internal static string get_AppInstallerGetTheApp();
    internal static string get_AppxBundlePlatformsDuplicates();
    internal static string get_AppxBundlePlatformsNeutralMismatch();
    internal static string get_AppxManifestMetadataNotAnExecutableFile();
    internal static string get_AppxManifestMissingRequiredElement();
    internal static string get_CertificateExpired();
    internal static string get_CertificateFileCannotBeImported();
    internal static string get_CertificateFileNotFound();
    internal static string get_CertificateNotFoundInStore();
    internal static string get_CertificateNotValidForSigning();
    internal static string get_CheckingFastlinkPdb();
    internal static string get_ComValidationError();
    internal static string get_CouldNotDeleteFile();
    internal static string get_CryptographicExceptionThrown();
    internal static string get_DuplicatePayload();
    internal static string get_ErrorWhileSigning();
    internal static string get_FailedToCopyPdb();
    internal static string get_FailedUnFastLinkingSymbolsDueToMissingTool();
    internal static string get_FileNotFound();
    internal static string get_FileProduced();
    internal static string get_FolderCannotBeCreated();
    internal static string get_FrameworkIdentityParserMalformedFrameworkIdentity();
    internal static string get_FrameworkIdentityParserTooManyKeys();
    internal static string get_FrameworkIdentityParserTooManyPublisherKeys();
    internal static string get_FrameworkIdentityParserTooManyVersionKeys();
    internal static string get_FrameworkIdentityParserWrongNumberOfPartsUAP();
    internal static string get_FrameworkSdkPackage();
    internal static string get_FrameworkSdkReference();
    internal static string get_GeneratedManifestComment();
    internal static string get_GenericPackagingComError();
    internal static string get_GenericTaskFailure();
    internal static string get_GenericTaskFailureInnerException();
    internal static string get_HeadAndSharedDuplicateContent();
    internal static string get_InstallFor();
    internal static string get_InvalidDefaultLanguage();
    internal static string get_InvalidMapFormat();
    internal static string get_InvalidSdkReferenceLocation();
    internal static string get_LandingAdditionalLinksHeader();
    internal static string get_LandingApplicationInformation();
    internal static string get_LandingArchitectureRowTitle();
    internal static string get_LandingInvalidUri();
    internal static string get_LandingOsRowTitle();
    internal static string get_LandingPubisherRowTitle();
    internal static string get_LandingPublisherCertText();
    internal static string get_LandingVersionRowTitle();
    internal static string get_ManifestReferencesNonPayloadFile();
    internal static string get_MissingDesignTimeFolders();
    internal static string get_MissingElement();
    internal static string get_MissingIdentityElement();
    internal static string get_MissingInputsForCertificateLoader();
    internal static string get_MissingManifest();
    internal static string get_MissingNameAttribute();
    internal static string get_MissingSdkRoot();
    internal static string get_MissingVersionAttribute();
    internal static string get_MissingWindowsPropsFileFolder();
    internal static string get_MissingWindowsPropsProperty();
    internal static string get_MixedPlatformsAreNotSupported();
    internal static string get_MultipleCertificatesWithSameThumbprint();
    internal static string get_NotWellFormedXml();
    internal static string get_PackagingBuildHelpTopic();
    internal static string get_PathTooLongError();
    internal static string get_PayloadFileMissing();
    internal static string get_PayloadFileNameIsReserved();
    internal static string get_PriConfigFileNameMissing();
    internal static string get_ProcessLockingFile();
    internal static string get_RemovingPayloadFile();
    internal static string get_StrippingPrivateSymbolsDeprecated();
    internal static string get_TargetPlatformVersionDescriptionNotFound();
    internal static string get_TooManyManifests();
    internal static string get_TroubleshootInstallation();
    internal static string get_UnFastlinkingSymbols();
    internal static string get_UnsupportedPlatformValue();
    internal static string get_WarningWhileSigning();
    internal static string get_WindowsPropsFileGenericLoadError();
    internal static string get_WindowsPropsFileIsNotValidProjectFile();
    internal static string get_WindowsPropsFileIsNotValidXml();
    internal static string get_WindowsSdkMoreInfo();
    internal static string get_WinMdCache_Disabled();
    internal static string get_WinMdCache_ErrorOnDirCreate();
    internal static string get_WinMdCache_FailedToParse();
    internal static string get_WinMdCache_InvalidCacheEntry();
    internal static string get_WinMdCache_InvalidCacheEntryWithFile();
    internal static string get_WinMdCache_NewCacheWritten();
    internal static string get_WinMdCache_ValidCacheEntry();
    internal static string get_WinMdCache_WriteFailed();
    internal static string get_WinmdContainsNamespacesDifferingInCaseOnly();
    internal static string get_WinmdContainsTypeInWindowsNamespace();
    internal static string get_WinmdContainsTypeNotInRootNamespace();
    internal static string get_WinmdContainsTypesDifferingInCaseOnly();
    internal static string get_WinmdDuplicateType();
    internal static string get_WinmdFailedToLoad();
    internal static string get_WinmdFileNameDoesNotMatchAssemblyName();
    internal static string get_WinmdFileNameDoesNotMatchModuleName();
    internal static string get_WinmdFoundMultipleWinmdsMatchingReferenceInSdkManifest();
    internal static string get_WinmdOnlyInprocSupported();
    internal static string get_WinmdPropertyWithoutGetter();
    internal static string get_WinmdUnsupportedThreadingModel();
    internal static string get_WinmdWithoutImplementation();
    internal static string get_WinmdWrongTypeLocation();
    internal static string get_WinmdWrongUsageOfExclusiveInterface();
    internal static string get_WinSdkFileNotFound();
}
public class Microsoft.Build.Msix.Symbols.WinAppSdkCheckFastlinkPdb : ToolTask {
    private AppxPackagingTaskHelper taskHelper;
    private Int32[] nonTerminalErrors;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFastlinkPdb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MsPdbCmfExeFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <InputPdb>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    public bool IsFastlinkPdb { get; private set; }
    [RequiredAttribute]
public string MsPdbCmfExeFullPath { get; public set; }
    [RequiredAttribute]
public ITaskItem InputPdb { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFastlinkPdb();
    [CompilerGeneratedAttribute]
private void set_IsFastlinkPdb(bool value);
    [CompilerGeneratedAttribute]
public string get_MsPdbCmfExeFullPath();
    [CompilerGeneratedAttribute]
public void set_MsPdbCmfExeFullPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_InputPdb();
    [CompilerGeneratedAttribute]
public void set_InputPdb(ITaskItem value);
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    protected virtual bool ValidateParameters();
    public virtual bool Execute();
    protected virtual bool HandleTaskExecutionErrors();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
}
public class Microsoft.Build.Msix.Symbols.WinAppSdkGenerateAppxSymbolPackage : Task {
    private AppxPackagingTaskHelper taskHelper;
    private List`1<ITaskItem> outputPdbs;
    [CompilerGeneratedAttribute]
private bool <ReconstituteFastlinkPdbs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StripPrivateSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MsPdbCmfExeFullpath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <InputPdbs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateSymbolRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppxSymbolPackageOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputPdbs>k__BackingField;
    public bool ReconstituteFastlinkPdbs { get; public set; }
    public string StripPrivateSymbols { get; public set; }
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string MsPdbCmfExeFullpath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] InputPdbs { get; public set; }
    [RequiredAttribute]
public string IntermediateSymbolRoot { get; public set; }
    [RequiredAttribute]
public string AppxSymbolPackageOutput { get; public set; }
    [RequiredAttribute]
public string ProjectName { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputPdbs { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ReconstituteFastlinkPdbs();
    [CompilerGeneratedAttribute]
public void set_ReconstituteFastlinkPdbs(bool value);
    [CompilerGeneratedAttribute]
public string get_StripPrivateSymbols();
    [CompilerGeneratedAttribute]
public void set_StripPrivateSymbols(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_MsPdbCmfExeFullpath();
    [CompilerGeneratedAttribute]
public void set_MsPdbCmfExeFullpath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_InputPdbs();
    [CompilerGeneratedAttribute]
public void set_InputPdbs(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_IntermediateSymbolRoot();
    [CompilerGeneratedAttribute]
public void set_IntermediateSymbolRoot(string value);
    [CompilerGeneratedAttribute]
public string get_AppxSymbolPackageOutput();
    [CompilerGeneratedAttribute]
public void set_AppxSymbolPackageOutput(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputPdbs();
    [CompilerGeneratedAttribute]
public void set_OutputPdbs(ITaskItem[] value);
    public virtual bool Execute();
    public void Cancel();
    private void ExecuteImplementation();
    private void Cleanup();
    private bool CopyPrivateSymbols();
    private bool CopyPdb(ITaskItem pdbItem, ITaskItem outputPdbPath, bool reconstituteFastlinkPdbs);
    private bool CheckFastlinkPdb(ITaskItem taskItem, Boolean& isFastlinkPdb);
    private bool CallUnFastLinkTask(ITaskItem taskItem);
}
public class Microsoft.Build.Msix.Symbols.WinAppSdkUnFastlinkSymbols : ToolTask {
    private AppxPackagingTaskHelper taskHelper;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MsPdbCmfExeFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <InputPdb>k__BackingField;
    public string VSTelemetrySession { get; public set; }
    [RequiredAttribute]
public string MsPdbCmfExeFullPath { get; public set; }
    [RequiredAttribute]
public ITaskItem InputPdb { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_MsPdbCmfExeFullPath();
    [CompilerGeneratedAttribute]
public void set_MsPdbCmfExeFullPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_InputPdb();
    [CompilerGeneratedAttribute]
public void set_InputPdb(ITaskItem value);
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual string GenerateCommandLineCommands();
    protected virtual bool ValidateParameters();
}
internal static class Microsoft.Build.Msix.TargetPlatformIdentifier : object {
    private static string UAP;
    public static string Windows;
    public static string WindowsPhone;
    public static string WindowsPhoneApp;
    public static bool IsPhone(string targetPlatformIdentifier);
    public static bool IsUAP(string targetPlatformIdentifier);
    public static bool UsePhoneIdentityForPackageIdentity(string targetPlatformIdentifier);
    public static bool UseSdkManifestValidation(string targetPlatformIdentifier);
    public static bool UseM2V2ScaleResources(string targetPlatformIdentifier);
    public static bool UseM3ScaleResources(string targetPlatformIdentifier);
    public static bool RequireLockScreenNotificationsForCertainBackgroundTasks(string targetPlatformIdentifier);
    public static bool RequiresPrerequisitesElement(string targetPlatformIdentifier);
    public static bool RequiresTargetDeviceFamilyElement(string targetPlatformIdentifier);
}
[ExtensionAttribute]
internal static class Microsoft.Build.Msix.Telemetry : object {
    private static ConcurrentDictionary`2<string, TelemetrySession> Sessions;
    public static string EventPrefix;
    public static string Separator;
    public static string PropertyPrefix;
    private static Telemetry();
    public static TelemetrySession GetTelemetrySession(string vsTelemetrySession);
    [ExtensionAttribute]
public static void SetTaskLibraryVersion(TelemetryScope`1<T> scope);
    private static TelemetrySession CreateTelemetrySession(string vsTelemetrySession);
}
public class Microsoft.Build.Msix.TelemetryOperation : object {
    private TelemetryScope`1<OperationEvent> scope;
    [CompilerGeneratedAttribute]
private TelemetryResult <Result>k__BackingField;
    public TelemetryResult Result { get; public set; }
    public TelemetryOperation(string vsTelemetrySession, string eventNameSuffix);
    [CompilerGeneratedAttribute]
public TelemetryResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TelemetryResult value);
    public void Set(string name, object value);
    private sealed virtual override void System.IDisposable.Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.Build.Msix.ULongExtensions : object {
    [ExtensionAttribute]
public static Version ToVersion(ulong rawVersion);
}
internal static class Microsoft.Build.Msix.Verify : object {
    public static void ArgumentIsNotNull(T argument, string argumentName);
    public static void ArgumentIsNotEmpty(string argument, string argumentName);
    public static void ArgumentIsNotWhitespace(string argument, string argumentName);
}
public class Microsoft.Build.Msix.WindowsTools.WinAppSdkGetSdkFileFullPath : Task {
    private static string ExecutablePathPropertyPrefixWindows;
    private static string ExecutablePathPropertySuffix32;
    private static string ExecutablePathPropertySuffix64;
    private AppxPackagingTaskHelper taskHelper;
    private string actualArchitecture;
    [CompilerGeneratedAttribute]
private string <TargetPlatformSdkRootOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SDKIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SDKVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformMinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTelemetrySession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualFullFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualFileArchitecture>k__BackingField;
    public string TargetPlatformSdkRootOverride { get; public set; }
    public string SDKIdentifier { get; public set; }
    public string SDKVersion { get; public set; }
    public string TargetPlatformMinVersion { get; public set; }
    public string VSTelemetrySession { get; public set; }
    public string TargetPlatformIdentifier { get; public set; }
    [RequiredAttribute]
public string FileName { get; public set; }
    [RequiredAttribute]
public string TargetPlatformVersion { get; public set; }
    [OutputAttribute]
public string ActualFullFilePath { get; public set; }
    [OutputAttribute]
public string ActualFileArchitecture { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetPlatformSdkRootOverride();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformSdkRootOverride(string value);
    [CompilerGeneratedAttribute]
public string get_SDKIdentifier();
    [CompilerGeneratedAttribute]
public void set_SDKIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_SDKVersion();
    [CompilerGeneratedAttribute]
public void set_SDKVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformMinVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformMinVersion(string value);
    [CompilerGeneratedAttribute]
public string get_VSTelemetrySession();
    [CompilerGeneratedAttribute]
public void set_VSTelemetrySession(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPlatformVersion();
    [CompilerGeneratedAttribute]
public void set_TargetPlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ActualFullFilePath();
    [CompilerGeneratedAttribute]
public void set_ActualFullFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_ActualFileArchitecture();
    [CompilerGeneratedAttribute]
public void set_ActualFileArchitecture(string value);
    public virtual bool Execute();
    private void ExecuteImplementation();
    private string GetPathToTool();
    private string GetExecutablePathProperty(string architecture);
}
internal class Microsoft.Build.Msix.WindowsTools.WindowsProps : object {
    private Dictionary`2<string, string> properties;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsPropsStatus <Status>k__BackingField;
    internal string FilePath { get; private set; }
    internal WindowsPropsStatus Status { get; private set; }
    internal WindowsProps(Dictionary`2<string, string> properties, string filePath);
    internal WindowsProps(WindowsPropsStatus status, string filePath);
    [CompilerGeneratedAttribute]
internal string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
internal WindowsPropsStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(WindowsPropsStatus value);
    internal string GetPropertyValue(string propertyName);
}
internal static class Microsoft.Build.Msix.WindowsTools.WindowsPropsCache : object {
    private static Dictionary`2<string, WindowsProps> propertiesCache;
    private static WindowsPropsCache();
    public static WindowsProps Load(string sdkRootOverride, string sdkIdentifier, string sdkVersion, string targetPlatformIdentifier, string targetPlatformMinVersion, string targetPlatformVersion);
}
public static class Microsoft.Build.Msix.WindowsTools.WindowsPropsLoader : object {
    private static string DesktopFileName;
    private static string UapFileName;
    internal static string SdkDirProperty;
    internal static string DesktopSdkDirProperty;
    internal static WindowsProps Load(string sdkRootOverride, string sdkIdentifier, string sdkVersion, string targetPlatformIdentifier, string targetPlatformMinVersion, string targetPlatformVersion);
    private static void AdjustProperty(Project project, string propertyName, Dictionary`2<string, string> globalProps);
    private static string GetFileName(string targetPlatformIdentifier);
}
internal enum Microsoft.Build.Msix.WindowsTools.WindowsPropsStatus : Enum {
    public int value__;
    public static WindowsPropsStatus OK;
    public static WindowsPropsStatus MissingSdkRoot;
    public static WindowsPropsStatus MissingDesignTimeFolders;
    public static WindowsPropsStatus MissingWindowsPropsFileFolder;
    public static WindowsPropsStatus MissingWindowsPropsFile;
    public static WindowsPropsStatus WindowsPropsFileIsNotValidXml;
    public static WindowsPropsStatus WindowsPropsFileIsNotValidProjectFile;
    public static WindowsPropsStatus UnknownError;
}
internal static class Microsoft.Build.Msix.XNamespaces : object {
    internal static XNamespace Schema2010;
    internal static XNamespace Schema2013;
    internal static XNamespace Schema2014;
    internal static XNamespace PhoneSchema2014;
    internal static XNamespace StoreDataSchema2010;
    internal static XNamespace UAPWindows10Schema;
    internal static XNamespace UAPWindows10Schema3;
    internal static XNamespace UAPWindows10Schema4;
    internal static XNamespace FoundationWindows10Schema;
    private static XNamespaces();
}
