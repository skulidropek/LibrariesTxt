public abstract class Microsoft.Win32.CommonDialog : object {
    public object Tag { get; public set; }
    public object get_Tag();
    public void set_Tag(object value);
    protected virtual void CheckPermissionsToShowDialog();
    protected virtual IntPtr HookProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual void Reset();
    protected abstract virtual bool RunDialog(IntPtr hwndOwner);
    public virtual Nullable`1<bool> ShowDialog();
    public Nullable`1<bool> ShowDialog(Window owner);
}
public abstract class Microsoft.Win32.CommonItemDialog : CommonDialog {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ClientGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHiddenItems>k__BackingField;
    public bool AddToRecent { get; public set; }
    public Nullable`1<Guid> ClientGuid { get; public set; }
    public IList`1<FileDialogCustomPlace> CustomPlaces { get; public set; }
    public string DefaultDirectory { get; public set; }
    public bool DereferenceLinks { get; public set; }
    public string InitialDirectory { get; public set; }
    public string RootDirectory { get; public set; }
    public bool ShowHiddenItems { get; public set; }
    public string Title { get; public set; }
    public bool ValidateNames { get; public set; }
    public bool get_AddToRecent();
    public void set_AddToRecent(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ClientGuid();
    [CompilerGeneratedAttribute]
public void set_ClientGuid(Nullable`1<Guid> value);
    public IList`1<FileDialogCustomPlace> get_CustomPlaces();
    public void set_CustomPlaces(IList`1<FileDialogCustomPlace> value);
    public string get_DefaultDirectory();
    public void set_DefaultDirectory(string value);
    public bool get_DereferenceLinks();
    public void set_DereferenceLinks(bool value);
    public string get_InitialDirectory();
    public void set_InitialDirectory(string value);
    public string get_RootDirectory();
    public void set_RootDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowHiddenItems();
    [CompilerGeneratedAttribute]
public void set_ShowHiddenItems(bool value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_ValidateNames();
    public void set_ValidateNames(bool value);
    protected virtual void OnItemOk(CancelEventArgs e);
    protected virtual bool RunDialog(IntPtr hwndOwner);
    public virtual void Reset();
    public virtual string ToString();
}
public abstract class Microsoft.Win32.FileDialog : CommonItemDialog {
    public bool AddExtension { get; public set; }
    public bool CheckFileExists { get; public set; }
    public bool CheckPathExists { get; public set; }
    public string DefaultExt { get; public set; }
    public string FileName { get; public set; }
    public String[] FileNames { get; }
    public string Filter { get; public set; }
    public int FilterIndex { get; public set; }
    public bool RestoreDirectory { get; public set; }
    public string SafeFileName { get; }
    public String[] SafeFileNames { get; }
    public bool get_AddExtension();
    public void set_AddExtension(bool value);
    public bool get_CheckFileExists();
    public void set_CheckFileExists(bool value);
    public bool get_CheckPathExists();
    public void set_CheckPathExists(bool value);
    public string get_DefaultExt();
    public void set_DefaultExt(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public String[] get_FileNames();
    public void add_FileOk(CancelEventHandler value);
    public void remove_FileOk(CancelEventHandler value);
    public string get_Filter();
    public void set_Filter(string value);
    public int get_FilterIndex();
    public void set_FilterIndex(int value);
    protected virtual void OnItemOk(CancelEventArgs e);
    public virtual void Reset();
    public bool get_RestoreDirectory();
    public void set_RestoreDirectory(bool value);
    public string get_SafeFileName();
    public String[] get_SafeFileNames();
    public virtual string ToString();
}
public class Microsoft.Win32.FileDialogCustomPlace : object {
    public Guid KnownFolder { get; }
    public string Path { get; }
    public FileDialogCustomPlace(Guid knownFolder);
    public FileDialogCustomPlace(string path);
    public Guid get_KnownFolder();
    public string get_Path();
}
public static class Microsoft.Win32.FileDialogCustomPlaces : object {
    public static FileDialogCustomPlace Contacts { get; }
    public static FileDialogCustomPlace Cookies { get; }
    public static FileDialogCustomPlace Desktop { get; }
    public static FileDialogCustomPlace Documents { get; }
    public static FileDialogCustomPlace Favorites { get; }
    public static FileDialogCustomPlace LocalApplicationData { get; }
    public static FileDialogCustomPlace Music { get; }
    public static FileDialogCustomPlace Pictures { get; }
    public static FileDialogCustomPlace ProgramFiles { get; }
    public static FileDialogCustomPlace ProgramFilesCommon { get; }
    public static FileDialogCustomPlace Programs { get; }
    public static FileDialogCustomPlace RoamingApplicationData { get; }
    public static FileDialogCustomPlace SendTo { get; }
    public static FileDialogCustomPlace StartMenu { get; }
    public static FileDialogCustomPlace Startup { get; }
    public static FileDialogCustomPlace System { get; }
    public static FileDialogCustomPlace Templates { get; }
    public static FileDialogCustomPlace get_Contacts();
    public static FileDialogCustomPlace get_Cookies();
    public static FileDialogCustomPlace get_Desktop();
    public static FileDialogCustomPlace get_Documents();
    public static FileDialogCustomPlace get_Favorites();
    public static FileDialogCustomPlace get_LocalApplicationData();
    public static FileDialogCustomPlace get_Music();
    public static FileDialogCustomPlace get_Pictures();
    public static FileDialogCustomPlace get_ProgramFiles();
    public static FileDialogCustomPlace get_ProgramFilesCommon();
    public static FileDialogCustomPlace get_Programs();
    public static FileDialogCustomPlace get_RoamingApplicationData();
    public static FileDialogCustomPlace get_SendTo();
    public static FileDialogCustomPlace get_StartMenu();
    public static FileDialogCustomPlace get_Startup();
    public static FileDialogCustomPlace get_System();
    public static FileDialogCustomPlace get_Templates();
}
public class Microsoft.Win32.OpenFileDialog : FileDialog {
    [CompilerGeneratedAttribute]
private bool <ForcePreviewPane>k__BackingField;
    public bool ForcePreviewPane { get; public set; }
    public bool Multiselect { get; public set; }
    public bool ReadOnlyChecked { get; public set; }
    public bool ShowReadOnly { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForcePreviewPane();
    [CompilerGeneratedAttribute]
public void set_ForcePreviewPane(bool value);
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    public Stream OpenFile();
    public Stream[] OpenFiles();
    public bool get_ReadOnlyChecked();
    public void set_ReadOnlyChecked(bool value);
    public virtual void Reset();
    public bool get_ShowReadOnly();
    public void set_ShowReadOnly(bool value);
}
public class Microsoft.Win32.OpenFolderDialog : CommonItemDialog {
    public string FolderName { get; public set; }
    public String[] FolderNames { get; }
    public bool Multiselect { get; public set; }
    public string SafeFolderName { get; }
    public String[] SafeFolderNames { get; }
    public string get_FolderName();
    public void set_FolderName(string value);
    public String[] get_FolderNames();
    public void add_FolderOk(CancelEventHandler value);
    public void remove_FolderOk(CancelEventHandler value);
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    protected virtual void OnItemOk(CancelEventArgs e);
    public virtual void Reset();
    public string get_SafeFolderName();
    public String[] get_SafeFolderNames();
    public virtual string ToString();
}
public class Microsoft.Win32.SaveFileDialog : FileDialog {
    public bool CreatePrompt { get; public set; }
    public bool CreateTestFile { get; public set; }
    public bool OverwritePrompt { get; public set; }
    public bool get_CreatePrompt();
    public void set_CreatePrompt(bool value);
    public bool get_CreateTestFile();
    public void set_CreateTestFile(bool value);
    public bool get_OverwritePrompt();
    public void set_OverwritePrompt(bool value);
    public Stream OpenFile();
    public virtual void Reset();
}
internal static class MS.Internal.PresentationFramework.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class MS.Internal.PresentationFramework.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
public static class System.ComponentModel.DesignerProperties : object {
    public static DependencyProperty IsInDesignModeProperty;
    [DesignerSerializationVisibilityAttribute("0")]
public static bool GetIsInDesignMode(DependencyObject element);
    public static void SetIsInDesignMode(DependencyObject element, bool value);
}
public class System.Windows.Annotations.Annotation : object {
    public Collection`1<AnnotationResource> Anchors { get; }
    public XmlQualifiedName AnnotationType { get; }
    public Collection`1<string> Authors { get; }
    public Collection`1<AnnotationResource> Cargos { get; }
    public DateTime CreationTime { get; }
    public Guid Id { get; }
    public DateTime LastModificationTime { get; }
    public Annotation(XmlQualifiedName annotationType);
    public Annotation(XmlQualifiedName annotationType, Guid id, DateTime creationTime, DateTime lastModificationTime);
    public Collection`1<AnnotationResource> get_Anchors();
    public XmlQualifiedName get_AnnotationType();
    public Collection`1<string> get_Authors();
    public Collection`1<AnnotationResource> get_Cargos();
    public DateTime get_CreationTime();
    public Guid get_Id();
    public DateTime get_LastModificationTime();
    public void add_AnchorChanged(AnnotationResourceChangedEventHandler value);
    public void remove_AnchorChanged(AnnotationResourceChangedEventHandler value);
    public void add_AuthorChanged(AnnotationAuthorChangedEventHandler value);
    public void remove_AuthorChanged(AnnotationAuthorChangedEventHandler value);
    public void add_CargoChanged(AnnotationResourceChangedEventHandler value);
    public void remove_CargoChanged(AnnotationResourceChangedEventHandler value);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public enum System.Windows.Annotations.AnnotationAction : Enum {
    public int value__;
    public static AnnotationAction Added;
    public static AnnotationAction Removed;
    public static AnnotationAction Modified;
}
public class System.Windows.Annotations.AnnotationAuthorChangedEventArgs : EventArgs {
    public AnnotationAction Action { get; }
    public Annotation Annotation { get; }
    public object Author { get; }
    public AnnotationAuthorChangedEventArgs(Annotation annotation, AnnotationAction action, object author);
    public AnnotationAction get_Action();
    public Annotation get_Annotation();
    public object get_Author();
}
public class System.Windows.Annotations.AnnotationAuthorChangedEventHandler : MulticastDelegate {
    public AnnotationAuthorChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AnnotationAuthorChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AnnotationAuthorChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Annotations.AnnotationDocumentPaginator : DocumentPaginator {
    public bool IsPageCountValid { get; }
    public int PageCount { get; }
    public Size PageSize { get; public set; }
    public IDocumentPaginatorSource Source { get; }
    public AnnotationDocumentPaginator(DocumentPaginator originalPaginator, Stream annotationStore);
    public AnnotationDocumentPaginator(DocumentPaginator originalPaginator, Stream annotationStore, FlowDirection flowDirection);
    public AnnotationDocumentPaginator(DocumentPaginator originalPaginator, AnnotationStore annotationStore);
    public AnnotationDocumentPaginator(DocumentPaginator originalPaginator, AnnotationStore annotationStore, FlowDirection flowDirection);
    public virtual bool get_IsPageCountValid();
    public virtual int get_PageCount();
    public virtual Size get_PageSize();
    public virtual void set_PageSize(Size value);
    public virtual IDocumentPaginatorSource get_Source();
    public virtual void CancelAsync(object userState);
    public virtual void ComputePageCount();
    public virtual void ComputePageCountAsync(object userState);
    public virtual DocumentPage GetPage(int pageNumber);
    public virtual void GetPageAsync(int pageNumber, object userState);
}
public static class System.Windows.Annotations.AnnotationHelper : object {
    public static void ClearHighlightsForSelection(AnnotationService service);
    public static Annotation CreateHighlightForSelection(AnnotationService service, string author, Brush highlightBrush);
    public static Annotation CreateInkStickyNoteForSelection(AnnotationService service, string author);
    public static Annotation CreateTextStickyNoteForSelection(AnnotationService service, string author);
    public static void DeleteInkStickyNotesForSelection(AnnotationService service);
    public static void DeleteTextStickyNotesForSelection(AnnotationService service);
    public static IAnchorInfo GetAnchorInfo(AnnotationService service, Annotation annotation);
}
public class System.Windows.Annotations.AnnotationResource : object {
    public Collection`1<ContentLocatorBase> ContentLocators { get; }
    public Collection`1<XmlElement> Contents { get; }
    public Guid Id { get; }
    public string Name { get; public set; }
    public AnnotationResource(Guid id);
    public AnnotationResource(string name);
    public Collection`1<ContentLocatorBase> get_ContentLocators();
    public Collection`1<XmlElement> get_Contents();
    public Guid get_Id();
    public string get_Name();
    public void set_Name(string value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public class System.Windows.Annotations.AnnotationResourceChangedEventArgs : EventArgs {
    public AnnotationAction Action { get; }
    public Annotation Annotation { get; }
    public AnnotationResource Resource { get; }
    public AnnotationResourceChangedEventArgs(Annotation annotation, AnnotationAction action, AnnotationResource resource);
    public AnnotationAction get_Action();
    public Annotation get_Annotation();
    public AnnotationResource get_Resource();
}
public class System.Windows.Annotations.AnnotationResourceChangedEventHandler : MulticastDelegate {
    public AnnotationResourceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AnnotationResourceChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AnnotationResourceChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Annotations.AnnotationService : DispatcherObject {
    public static RoutedUICommand ClearHighlightsCommand;
    public static RoutedUICommand CreateHighlightCommand;
    public static RoutedUICommand CreateInkStickyNoteCommand;
    public static RoutedUICommand CreateTextStickyNoteCommand;
    public static RoutedUICommand DeleteAnnotationsCommand;
    public static RoutedUICommand DeleteStickyNotesCommand;
    public bool IsEnabled { get; }
    public AnnotationStore Store { get; }
    public AnnotationService(FlowDocumentReader viewer);
    public AnnotationService(FlowDocumentScrollViewer viewer);
    public AnnotationService(DocumentViewerBase viewer);
    public bool get_IsEnabled();
    public AnnotationStore get_Store();
    public void Disable();
    public void Enable(AnnotationStore annotationStore);
    public static AnnotationService GetService(FlowDocumentReader reader);
    public static AnnotationService GetService(FlowDocumentScrollViewer viewer);
    public static AnnotationService GetService(DocumentViewerBase viewer);
}
public class System.Windows.Annotations.ContentLocator : ContentLocatorBase {
    public Collection`1<ContentLocatorPart> Parts { get; }
    public Collection`1<ContentLocatorPart> get_Parts();
    public virtual object Clone();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public bool StartsWith(ContentLocator locator);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public abstract class System.Windows.Annotations.ContentLocatorBase : object {
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual object Clone();
}
public class System.Windows.Annotations.ContentLocatorGroup : ContentLocatorBase {
    public Collection`1<ContentLocator> Locators { get; }
    public Collection`1<ContentLocator> get_Locators();
    public virtual object Clone();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public class System.Windows.Annotations.ContentLocatorPart : object {
    public IDictionary`2<string, string> NameValuePairs { get; }
    public XmlQualifiedName PartType { get; }
    public ContentLocatorPart(XmlQualifiedName partType);
    public IDictionary`2<string, string> get_NameValuePairs();
    public XmlQualifiedName get_PartType();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    public object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface System.Windows.Annotations.IAnchorInfo {
    public AnnotationResource Anchor { get; }
    public Annotation Annotation { get; }
    public object ResolvedAnchor { get; }
    public abstract virtual AnnotationResource get_Anchor();
    public abstract virtual Annotation get_Annotation();
    public abstract virtual object get_ResolvedAnchor();
}
public abstract class System.Windows.Annotations.Storage.AnnotationStore : object {
    public bool AutoFlush { get; public set; }
    protected bool IsDisposed { get; }
    protected object SyncRoot { get; }
    public abstract virtual bool get_AutoFlush();
    public abstract virtual void set_AutoFlush(bool value);
    protected bool get_IsDisposed();
    protected object get_SyncRoot();
    public void add_AnchorChanged(AnnotationResourceChangedEventHandler value);
    public void remove_AnchorChanged(AnnotationResourceChangedEventHandler value);
    public void add_AuthorChanged(AnnotationAuthorChangedEventHandler value);
    public void remove_AuthorChanged(AnnotationAuthorChangedEventHandler value);
    public void add_CargoChanged(AnnotationResourceChangedEventHandler value);
    public void remove_CargoChanged(AnnotationResourceChangedEventHandler value);
    public void add_StoreContentChanged(StoreContentChangedEventHandler value);
    public void remove_StoreContentChanged(StoreContentChangedEventHandler value);
    public abstract virtual void AddAnnotation(Annotation newAnnotation);
    public abstract virtual Annotation DeleteAnnotation(Guid annotationId);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public abstract virtual void Flush();
    public abstract virtual Annotation GetAnnotation(Guid annotationId);
    public abstract virtual IList`1<Annotation> GetAnnotations();
    public abstract virtual IList`1<Annotation> GetAnnotations(ContentLocator anchorLocator);
    protected virtual void OnAnchorChanged(AnnotationResourceChangedEventArgs args);
    protected virtual void OnAuthorChanged(AnnotationAuthorChangedEventArgs args);
    protected virtual void OnCargoChanged(AnnotationResourceChangedEventArgs args);
    protected virtual void OnStoreContentChanged(StoreContentChangedEventArgs e);
}
public enum System.Windows.Annotations.Storage.StoreContentAction : Enum {
    public int value__;
    public static StoreContentAction Added;
    public static StoreContentAction Deleted;
}
public class System.Windows.Annotations.Storage.StoreContentChangedEventArgs : EventArgs {
    public StoreContentAction Action { get; }
    public Annotation Annotation { get; }
    public StoreContentChangedEventArgs(StoreContentAction action, Annotation annotation);
    public StoreContentAction get_Action();
    public Annotation get_Annotation();
}
public class System.Windows.Annotations.Storage.StoreContentChangedEventHandler : MulticastDelegate {
    public StoreContentChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StoreContentChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StoreContentChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Annotations.Storage.XmlStreamStore : AnnotationStore {
    public bool AutoFlush { get; public set; }
    public IList`1<Uri> IgnoredNamespaces { get; }
    public static IList`1<Uri> WellKnownNamespaces { get; }
    public XmlStreamStore(Stream stream);
    public XmlStreamStore(Stream stream, IDictionary`2<Uri, IList`1<Uri>> knownNamespaces);
    public virtual bool get_AutoFlush();
    public virtual void set_AutoFlush(bool value);
    public IList`1<Uri> get_IgnoredNamespaces();
    public static IList`1<Uri> get_WellKnownNamespaces();
    public virtual void AddAnnotation(Annotation newAnnotation);
    public virtual Annotation DeleteAnnotation(Guid annotationId);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Annotation GetAnnotation(Guid annotationId);
    public virtual IList`1<Annotation> GetAnnotations();
    public virtual IList`1<Annotation> GetAnnotations(ContentLocator anchorLocator);
    public static IList`1<Uri> GetWellKnownCompatibleNamespaces(Uri name);
    protected virtual void OnStoreContentChanged(StoreContentChangedEventArgs e);
}
public class System.Windows.Annotations.TextAnchor : object {
    public ContentPosition BoundingEnd { get; }
    public ContentPosition BoundingStart { get; }
    public ContentPosition get_BoundingEnd();
    public ContentPosition get_BoundingStart();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Windows.Application : DispatcherObject {
    public static Application Current { get; }
    public Window MainWindow { get; public set; }
    public IDictionary Properties { get; }
    public static Assembly ResourceAssembly { get; public set; }
    [AmbientAttribute]
public ResourceDictionary Resources { get; public set; }
    public ShutdownMode ShutdownMode { get; public set; }
    public Uri StartupUri { get; public set; }
    public WindowCollection Windows { get; }
    public static Application get_Current();
    public Window get_MainWindow();
    public void set_MainWindow(Window value);
    public IDictionary get_Properties();
    public static Assembly get_ResourceAssembly();
    public static void set_ResourceAssembly(Assembly value);
    public ResourceDictionary get_Resources();
    public void set_Resources(ResourceDictionary value);
    public ShutdownMode get_ShutdownMode();
    public void set_ShutdownMode(ShutdownMode value);
    public Uri get_StartupUri();
    public void set_StartupUri(Uri value);
    public WindowCollection get_Windows();
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public void add_Deactivated(EventHandler value);
    public void remove_Deactivated(EventHandler value);
    public void add_DispatcherUnhandledException(DispatcherUnhandledExceptionEventHandler value);
    public void remove_DispatcherUnhandledException(DispatcherUnhandledExceptionEventHandler value);
    public void add_Exit(ExitEventHandler value);
    public void remove_Exit(ExitEventHandler value);
    public void add_FragmentNavigation(FragmentNavigationEventHandler value);
    public void remove_FragmentNavigation(FragmentNavigationEventHandler value);
    public void add_LoadCompleted(LoadCompletedEventHandler value);
    public void remove_LoadCompleted(LoadCompletedEventHandler value);
    public void add_Navigated(NavigatedEventHandler value);
    public void remove_Navigated(NavigatedEventHandler value);
    public void add_Navigating(NavigatingCancelEventHandler value);
    public void remove_Navigating(NavigatingCancelEventHandler value);
    public void add_NavigationFailed(NavigationFailedEventHandler value);
    public void remove_NavigationFailed(NavigationFailedEventHandler value);
    public void add_NavigationProgress(NavigationProgressEventHandler value);
    public void remove_NavigationProgress(NavigationProgressEventHandler value);
    public void add_NavigationStopped(NavigationStoppedEventHandler value);
    public void remove_NavigationStopped(NavigationStoppedEventHandler value);
    public void add_SessionEnding(SessionEndingCancelEventHandler value);
    public void remove_SessionEnding(SessionEndingCancelEventHandler value);
    public void add_Startup(StartupEventHandler value);
    public void remove_Startup(StartupEventHandler value);
    public object FindResource(object resourceKey);
    public static StreamResourceInfo GetContentStream(Uri uriContent);
    public static string GetCookie(Uri uri);
    public static StreamResourceInfo GetRemoteStream(Uri uriRemote);
    public static StreamResourceInfo GetResourceStream(Uri uriResource);
    public static void LoadComponent(object component, Uri resourceLocator);
    public static object LoadComponent(Uri resourceLocator);
    protected virtual void OnActivated(EventArgs e);
    protected virtual void OnDeactivated(EventArgs e);
    protected virtual void OnExit(ExitEventArgs e);
    protected virtual void OnFragmentNavigation(FragmentNavigationEventArgs e);
    protected virtual void OnLoadCompleted(NavigationEventArgs e);
    protected virtual void OnNavigated(NavigationEventArgs e);
    protected virtual void OnNavigating(NavigatingCancelEventArgs e);
    protected virtual void OnNavigationFailed(NavigationFailedEventArgs e);
    protected virtual void OnNavigationProgress(NavigationProgressEventArgs e);
    protected virtual void OnNavigationStopped(NavigationEventArgs e);
    protected virtual void OnSessionEnding(SessionEndingCancelEventArgs e);
    protected virtual void OnStartup(StartupEventArgs e);
    public int Run();
    public int Run(Window window);
    public static void SetCookie(Uri uri, string value);
    public void Shutdown();
    public void Shutdown(int exitCode);
    private sealed virtual override bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName);
    public object TryFindResource(object resourceKey);
}
[AttributeUsageAttribute("64")]
public class System.Windows.AttachedPropertyBrowsableForChildrenAttribute : AttachedPropertyBrowsableAttribute {
    public bool IncludeDescendants { get; public set; }
    public bool get_IncludeDescendants();
    public void set_IncludeDescendants(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual bool IsBrowsable(DependencyObject d, DependencyProperty dp);
}
public class System.Windows.Automation.Peers.ButtonAutomationPeer : ButtonBaseAutomationPeer {
    public ButtonAutomationPeer(Button owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
public abstract class System.Windows.Automation.Peers.ButtonBaseAutomationPeer : FrameworkElementAutomationPeer {
    protected ButtonBaseAutomationPeer(ButtonBase owner);
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.CalendarAutomationPeer : FrameworkElementAutomationPeer {
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    public CalendarAutomationPeer(Calendar owner);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override int System.Windows.Automation.Provider.IMultipleViewProvider.get_CurrentView();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual void SetFocusCore();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IItemContainerProvider.FindItemByProperty(IRawElementProviderSimple startAfterProvider, int propertyId, object value);
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews();
    private sealed virtual override string System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(int viewId);
    private sealed virtual override void System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(int viewId);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetRowHeaders();
}
public class System.Windows.Automation.Peers.CalendarButtonAutomationPeer : FrameworkElementAutomationPeer {
    public CalendarButtonAutomationPeer(Button owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetLocalizedControlTypeCore();
}
public class System.Windows.Automation.Peers.CheckBoxAutomationPeer : ToggleButtonAutomationPeer {
    public CheckBoxAutomationPeer(CheckBox owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.ComboBoxAutomationPeer : SelectorAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    public ComboBoxAutomationPeer(ComboBox owner);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface pattern);
    protected virtual void SetFocusCore();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string val);
}
public abstract class System.Windows.Automation.Peers.ContentTextAutomationPeer : FrameworkContentElementAutomationPeer {
    protected ContentTextAutomationPeer(FrameworkContentElement owner);
    public virtual void RaiseActiveTextPositionChangedEvent(TextPointer rangeStart, TextPointer rangeEnd);
}
public class System.Windows.Automation.Peers.ContextMenuAutomationPeer : FrameworkElementAutomationPeer {
    public ContextMenuAutomationPeer(ContextMenu owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.DataGridAutomationPeer : ItemsControlAutomationPeer {
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    public DataGridAutomationPeer(DataGrid owner);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetRowHeaders();
}
public class System.Windows.Automation.Peers.DataGridCellAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridCellAutomationPeer(DataGridCell owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.DataGridCellItemAutomationPeer : AutomationPeer {
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    public DataGridCellItemAutomationPeer(object item, DataGridColumn dataGridColumn);
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    protected virtual AutomationHeadingLevel GetHeadingLevelCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual AutomationLiveSetting GetLiveSettingCore();
    protected virtual string GetLocalizedControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual AutomationOrientation GetOrientationCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual int GetPositionInSetCore();
    protected virtual int GetSizeOfSetCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsDialogCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string value);
    private sealed virtual override void System.Windows.Automation.Provider.IVirtualizedItemProvider.Realize();
}
public class System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer : ButtonBaseAutomationPeer {
    public DataGridColumnHeaderAutomationPeer(DataGridColumnHeader owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.DataGridColumnHeaderItemAutomationPeer : ItemAutomationPeer {
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    public DataGridColumnHeaderItemAutomationPeer(object item, DataGridColumn column, DataGridColumnHeadersPresenterAutomationPeer peer);
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsContentElementCore();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
    private sealed virtual override void System.Windows.Automation.Provider.IVirtualizedItemProvider.Realize();
}
public class System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer : ItemsControlAutomationPeer {
    public DataGridColumnHeadersPresenterAutomationPeer(DataGridColumnHeadersPresenter owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object column);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IItemContainerProvider.FindItemByProperty(IRawElementProviderSimple startAfter, int propertyId, object value);
}
public class System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridDetailsPresenterAutomationPeer(DataGridDetailsPresenter owner);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.DataGridItemAutomationPeer : ItemAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public DataGridItemAutomationPeer(object item, DataGridAutomationPeer dataGridPeer);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationPeer GetPeerFromPointCore(Point point);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IItemContainerProvider.FindItemByProperty(IRawElementProviderSimple startAfter, int propertyId, object value);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
}
public class System.Windows.Automation.Peers.DataGridRowAutomationPeer : FrameworkElementAutomationPeer {
    public DataGridRowAutomationPeer(DataGridRow owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer : ButtonBaseAutomationPeer {
    public DataGridRowHeaderAutomationPeer(DataGridRowHeader owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.DatePickerAutomationPeer : FrameworkElementAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    public DatePickerAutomationPeer(DatePicker owner);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetLocalizedControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual void SetFocusCore();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string value);
}
public class System.Windows.Automation.Peers.DateTimeAutomationPeer : AutomationPeer {
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    protected virtual AutomationHeadingLevel GetHeadingLevelCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual AutomationLiveSetting GetLiveSettingCore();
    protected virtual string GetLocalizedControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual AutomationOrientation GetOrientationCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual int GetPositionInSetCore();
    protected virtual int GetSizeOfSetCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsDialogCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems();
    private sealed virtual override void System.Windows.Automation.Provider.IVirtualizedItemProvider.Realize();
}
public class System.Windows.Automation.Peers.DocumentAutomationPeer : ContentTextAutomationPeer {
    public DocumentAutomationPeer(FrameworkContentElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsControlElementCore();
    protected virtual bool IsOffscreenCore();
}
public class System.Windows.Automation.Peers.DocumentPageViewAutomationPeer : FrameworkElementAutomationPeer {
    public DocumentPageViewAutomationPeer(DocumentPageView owner);
    protected virtual string GetAutomationIdCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
public class System.Windows.Automation.Peers.DocumentViewerAutomationPeer : DocumentViewerBaseAutomationPeer {
    public DocumentViewerAutomationPeer(DocumentViewer owner);
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.DocumentViewerBaseAutomationPeer : FrameworkElementAutomationPeer {
    public DocumentViewerBaseAutomationPeer(DocumentViewerBase owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.ExpanderAutomationPeer : FrameworkElementAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public ExpanderAutomationPeer(Expander owner);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface pattern);
    protected virtual bool HasKeyboardFocusCore();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
}
public class System.Windows.Automation.Peers.FixedPageAutomationPeer : FrameworkElementAutomationPeer {
    public FixedPageAutomationPeer(FixedPage owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.FlowDocumentPageViewerAutomationPeer : DocumentViewerBaseAutomationPeer {
    public FlowDocumentPageViewerAutomationPeer(FlowDocumentPageViewer owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.FlowDocumentReaderAutomationPeer : FrameworkElementAutomationPeer {
    private int System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView { get; }
    public FlowDocumentReaderAutomationPeer(FlowDocumentReader owner);
    private sealed virtual override int System.Windows.Automation.Provider.IMultipleViewProvider.get_CurrentView();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews();
    private sealed virtual override string System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(int viewId);
    private sealed virtual override void System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(int viewId);
}
public class System.Windows.Automation.Peers.FlowDocumentScrollViewerAutomationPeer : FrameworkElementAutomationPeer {
    public FlowDocumentScrollViewerAutomationPeer(FlowDocumentScrollViewer owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.FrameAutomationPeer : FrameworkElementAutomationPeer {
    public FrameAutomationPeer(Frame owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.FrameworkContentElementAutomationPeer : ContentElementAutomationPeer {
    public FrameworkContentElementAutomationPeer(FrameworkContentElement owner);
    protected virtual string GetAutomationIdCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationPeer GetLabeledByCore();
}
public class System.Windows.Automation.Peers.FrameworkElementAutomationPeer : UIElementAutomationPeer {
    public FrameworkElementAutomationPeer(FrameworkElement owner);
    protected virtual string GetAutomationIdCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.GridSplitterAutomationPeer : ThumbAutomationPeer {
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    public GridSplitterAutomationPeer(GridSplitter owner);
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
}
public class System.Windows.Automation.Peers.GridViewAutomationPeer : object {
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    public GridViewAutomationPeer(GridView owner, ListView listview);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    private sealed virtual override ItemAutomationPeer System.Windows.Automation.Peers.IViewAutomationPeer.CreateItemAutomationPeer(object item);
    private sealed virtual override AutomationControlType System.Windows.Automation.Peers.IViewAutomationPeer.GetAutomationControlType();
    private sealed virtual override List`1<AutomationPeer> System.Windows.Automation.Peers.IViewAutomationPeer.GetChildren(List`1<AutomationPeer> children);
    private sealed virtual override object System.Windows.Automation.Peers.IViewAutomationPeer.GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Peers.IViewAutomationPeer.ItemsChanged(NotifyCollectionChangedEventArgs e);
    private sealed virtual override void System.Windows.Automation.Peers.IViewAutomationPeer.ViewDetached();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetRowHeaders();
}
public class System.Windows.Automation.Peers.GridViewCellAutomationPeer : FrameworkElementAutomationPeer {
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsControlElementCore();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems();
}
public class System.Windows.Automation.Peers.GridViewColumnHeaderAutomationPeer : FrameworkElementAutomationPeer {
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    public GridViewColumnHeaderAutomationPeer(GridViewColumnHeader owner);
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsContentElementCore();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
}
public class System.Windows.Automation.Peers.GridViewHeaderRowPresenterAutomationPeer : FrameworkElementAutomationPeer {
    public GridViewHeaderRowPresenterAutomationPeer(GridViewHeaderRowPresenter owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.GridViewItemAutomationPeer : ListBoxItemAutomationPeer {
    public GridViewItemAutomationPeer(object owner, ListViewAutomationPeer listviewAP);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.GroupBoxAutomationPeer : FrameworkElementAutomationPeer {
    public GroupBoxAutomationPeer(GroupBox owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.GroupItemAutomationPeer : FrameworkElementAutomationPeer {
    public GroupItemAutomationPeer(GroupItem owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual int GetPositionInSetCore();
    protected virtual int GetSizeOfSetCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual void SetFocusCore();
}
public class System.Windows.Automation.Peers.HyperlinkAutomationPeer : TextElementAutomationPeer {
    public HyperlinkAutomationPeer(Hyperlink owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsControlElementCore();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
public class System.Windows.Automation.Peers.ImageAutomationPeer : FrameworkElementAutomationPeer {
    public ImageAutomationPeer(Image owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.InkCanvasAutomationPeer : FrameworkElementAutomationPeer {
    public InkCanvasAutomationPeer(InkCanvas owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.InkPresenterAutomationPeer : FrameworkElementAutomationPeer {
    public InkPresenterAutomationPeer(InkPresenter owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public abstract class System.Windows.Automation.Peers.ItemAutomationPeer : AutomationPeer {
    public object Item { get; }
    public ItemsControlAutomationPeer ItemsControlAutomationPeer { get; }
    protected ItemAutomationPeer(object item, ItemsControlAutomationPeer itemsControlAutomationPeer);
    public object get_Item();
    public ItemsControlAutomationPeer get_ItemsControlAutomationPeer();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual Point GetClickablePointCore();
    protected virtual AutomationHeadingLevel GetHeadingLevelCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual AutomationLiveSetting GetLiveSettingCore();
    protected virtual string GetNameCore();
    protected virtual AutomationOrientation GetOrientationCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual int GetPositionInSetCore();
    protected virtual int GetSizeOfSetCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsDialogCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    private sealed virtual override void System.Windows.Automation.Provider.IVirtualizedItemProvider.Realize();
}
public abstract class System.Windows.Automation.Peers.ItemsControlAutomationPeer : FrameworkElementAutomationPeer {
    protected bool IsVirtualized { get; }
    protected ItemsControlAutomationPeer(ItemsControl owner);
    protected virtual bool get_IsVirtualized();
    protected abstract virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected internal virtual ItemAutomationPeer FindOrCreateItemAutomationPeer(object item);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IItemContainerProvider.FindItemByProperty(IRawElementProviderSimple startAfter, int propertyId, object value);
}
public interface System.Windows.Automation.Peers.IViewAutomationPeer {
    public abstract virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    public abstract virtual AutomationControlType GetAutomationControlType();
    public abstract virtual List`1<AutomationPeer> GetChildren(List`1<AutomationPeer> children);
    public abstract virtual object GetPattern(PatternInterface patternInterface);
    public abstract virtual void ItemsChanged(NotifyCollectionChangedEventArgs e);
    public abstract virtual void ViewDetached();
}
public class System.Windows.Automation.Peers.LabelAutomationPeer : FrameworkElementAutomationPeer {
    public LabelAutomationPeer(Label owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.ListBoxAutomationPeer : SelectorAutomationPeer {
    public ListBoxAutomationPeer(ListBox owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.ListBoxItemAutomationPeer : SelectorItemAutomationPeer {
    public ListBoxItemAutomationPeer(object owner, SelectorAutomationPeer selectorAutomationPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
}
public class System.Windows.Automation.Peers.ListBoxItemWrapperAutomationPeer : FrameworkElementAutomationPeer {
    public ListBoxItemWrapperAutomationPeer(ListBoxItem owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.ListViewAutomationPeer : ListBoxAutomationPeer {
    protected internal IViewAutomationPeer ViewAutomationPeer { get; protected internal set; }
    public ListViewAutomationPeer(ListView owner);
    protected internal IViewAutomationPeer get_ViewAutomationPeer();
    protected internal void set_ViewAutomationPeer(IViewAutomationPeer value);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.MediaElementAutomationPeer : FrameworkElementAutomationPeer {
    public MediaElementAutomationPeer(MediaElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.MenuAutomationPeer : FrameworkElementAutomationPeer {
    public MenuAutomationPeer(Menu owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.MenuItemAutomationPeer : FrameworkElementAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    public MenuItemAutomationPeer(MenuItem owner);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual int GetPositionInSetCore();
    protected virtual int GetSizeOfSetCore();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
}
public class System.Windows.Automation.Peers.NavigationWindowAutomationPeer : WindowAutomationPeer {
    public NavigationWindowAutomationPeer(NavigationWindow owner);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.PasswordBoxAutomationPeer : TextAutomationPeer {
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    public PasswordBoxAutomationPeer(PasswordBox owner);
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsPasswordCore();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string value);
}
public class System.Windows.Automation.Peers.ProgressBarAutomationPeer : RangeBaseAutomationPeer {
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    public ProgressBarAutomationPeer(ProgressBar owner);
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
}
public class System.Windows.Automation.Peers.RadioButtonAutomationPeer : ToggleButtonAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public RadioButtonAutomationPeer(RadioButton owner);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
}
public class System.Windows.Automation.Peers.RangeBaseAutomationPeer : FrameworkElementAutomationPeer {
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    public RangeBaseAutomationPeer(RangeBase owner);
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
}
public class System.Windows.Automation.Peers.RepeatButtonAutomationPeer : ButtonBaseAutomationPeer {
    public RepeatButtonAutomationPeer(RepeatButton owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
public class System.Windows.Automation.Peers.RichTextBoxAutomationPeer : TextAutomationPeer {
    public RichTextBoxAutomationPeer(RichTextBox owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.ScrollBarAutomationPeer : RangeBaseAutomationPeer {
    public ScrollBarAutomationPeer(ScrollBar owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.ScrollViewerAutomationPeer : FrameworkElementAutomationPeer {
    private bool System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize { get; }
    public ScrollViewerAutomationPeer(ScrollViewer owner);
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_HorizontallyScrollable();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalViewSize();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_VerticallyScrollable();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalViewSize();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsControlElementCore();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(double horizontalPercent, double verticalPercent);
}
public abstract class System.Windows.Automation.Peers.SelectorAutomationPeer : ItemsControlAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    protected SelectorAutomationPeer(Selector owner);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
}
public abstract class System.Windows.Automation.Peers.SelectorItemAutomationPeer : ItemAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    protected SelectorItemAutomationPeer(object owner, SelectorAutomationPeer selectorAutomationPeer);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
}
public class System.Windows.Automation.Peers.SeparatorAutomationPeer : FrameworkElementAutomationPeer {
    public SeparatorAutomationPeer(Separator owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.SliderAutomationPeer : RangeBaseAutomationPeer {
    public SliderAutomationPeer(Slider owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
}
public class System.Windows.Automation.Peers.StatusBarAutomationPeer : FrameworkElementAutomationPeer {
    public StatusBarAutomationPeer(StatusBar owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.StatusBarItemAutomationPeer : FrameworkElementAutomationPeer {
    public StatusBarItemAutomationPeer(StatusBarItem owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.TabControlAutomationPeer : SelectorAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public TabControlAutomationPeer(TabControl owner);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
}
public class System.Windows.Automation.Peers.TabItemAutomationPeer : SelectorItemAutomationPeer {
    public TabItemAutomationPeer(object owner, TabControlAutomationPeer tabControlAutomationPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
}
public class System.Windows.Automation.Peers.TabItemWrapperAutomationPeer : FrameworkElementAutomationPeer {
    public TabItemWrapperAutomationPeer(TabItem owner);
}
public class System.Windows.Automation.Peers.TableAutomationPeer : TextElementAutomationPeer {
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    public TableAutomationPeer(Table owner);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsControlElementCore();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
}
public class System.Windows.Automation.Peers.TableCellAutomationPeer : TextElementAutomationPeer {
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    public TableCellAutomationPeer(TableCell owner);
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetLocalizedControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual bool IsControlElementCore();
}
public abstract class System.Windows.Automation.Peers.TextAutomationPeer : FrameworkElementAutomationPeer {
    protected TextAutomationPeer(FrameworkElement owner);
    protected virtual string GetNameCore();
    public virtual void RaiseActiveTextPositionChangedEvent(TextPointer rangeStart, TextPointer rangeEnd);
}
public class System.Windows.Automation.Peers.TextBlockAutomationPeer : FrameworkElementAutomationPeer {
    public TextBlockAutomationPeer(TextBlock owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsControlElementCore();
}
public class System.Windows.Automation.Peers.TextBoxAutomationPeer : TextAutomationPeer {
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    public TextBoxAutomationPeer(TextBox owner);
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string value);
}
public class System.Windows.Automation.Peers.TextElementAutomationPeer : ContentTextAutomationPeer {
    public TextElementAutomationPeer(TextElement owner);
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual Point GetClickablePointCore();
    protected virtual bool IsOffscreenCore();
}
public class System.Windows.Automation.Peers.ThumbAutomationPeer : FrameworkElementAutomationPeer {
    public ThumbAutomationPeer(Thumb owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.ToggleButtonAutomationPeer : ButtonBaseAutomationPeer {
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    public ToggleButtonAutomationPeer(ToggleButton owner);
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
}
public class System.Windows.Automation.Peers.ToolBarAutomationPeer : FrameworkElementAutomationPeer {
    public ToolBarAutomationPeer(ToolBar owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.ToolTipAutomationPeer : FrameworkElementAutomationPeer {
    public ToolTipAutomationPeer(ToolTip owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.TreeViewAutomationPeer : ItemsControlAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public TreeViewAutomationPeer(TreeView owner);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
}
public class System.Windows.Automation.Peers.TreeViewDataItemAutomationPeer : ItemAutomationPeer {
    public TreeViewDataItemAutomationPeer ParentDataItemAutomationPeer { get; }
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public TreeViewDataItemAutomationPeer(object item, ItemsControlAutomationPeer itemsControlAutomationPeer, TreeViewDataItemAutomationPeer parentDataItemAutomationPeer);
    public TreeViewDataItemAutomationPeer get_ParentDataItemAutomationPeer();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
}
public class System.Windows.Automation.Peers.TreeViewItemAutomationPeer : ItemsControlAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public TreeViewItemAutomationPeer(TreeViewItem owner);
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected internal virtual ItemAutomationPeer FindOrCreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
}
public class System.Windows.Automation.Peers.UserControlAutomationPeer : FrameworkElementAutomationPeer {
    public UserControlAutomationPeer(UserControl owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.Viewport3DAutomationPeer : FrameworkElementAutomationPeer {
    public Viewport3DAutomationPeer(Viewport3D owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.WindowAutomationPeer : FrameworkElementAutomationPeer {
    public WindowAutomationPeer(Window owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Baml2006.Baml2006Reader : XamlReader {
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    private bool System.Xaml.IXamlLineInfo.HasLineInfo { get; }
    private int System.Xaml.IXamlLineInfo.LineNumber { get; }
    private int System.Xaml.IXamlLineInfo.LinePosition { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public Baml2006Reader(Stream stream);
    public Baml2006Reader(Stream stream, XamlReaderSettings xamlReaderSettings);
    public Baml2006Reader(string fileName);
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    private sealed virtual override bool System.Xaml.IXamlLineInfo.get_HasLineInfo();
    private sealed virtual override int System.Xaml.IXamlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xaml.IXamlLineInfo.get_LinePosition();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
}
public enum System.Windows.BaseValueSource : Enum {
    public int value__;
    public static BaseValueSource Unknown;
    public static BaseValueSource Default;
    public static BaseValueSource Inherited;
    public static BaseValueSource DefaultStyle;
    public static BaseValueSource DefaultStyleTrigger;
    public static BaseValueSource Style;
    public static BaseValueSource TemplateTrigger;
    public static BaseValueSource StyleTrigger;
    public static BaseValueSource ImplicitStyleReference;
    public static BaseValueSource ParentTemplate;
    public static BaseValueSource ParentTemplateTrigger;
    public static BaseValueSource Local;
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Media.Imaging.ColorConvertedBitmap")]
public class System.Windows.ColorConvertedBitmapExtension : MarkupExtension {
    public ColorConvertedBitmapExtension(object image);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public enum System.Windows.ColumnSpaceDistribution : Enum {
    public int value__;
    public static ColumnSpaceDistribution Left;
    public static ColumnSpaceDistribution Right;
    public static ColumnSpaceDistribution Between;
}
[TypeConverterAttribute("System.Windows.Markup.ComponentResourceKeyConverter")]
public class System.Windows.ComponentResourceKey : ResourceKey {
    public Assembly Assembly { get; }
    public object ResourceId { get; public set; }
    public Type TypeInTargetAssembly { get; public set; }
    public ComponentResourceKey(Type typeInTargetAssembly, object resourceId);
    public virtual Assembly get_Assembly();
    public object get_ResourceId();
    public void set_ResourceId(object value);
    public Type get_TypeInTargetAssembly();
    public void set_TypeInTargetAssembly(Type value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[XamlSetMarkupExtensionAttribute("ReceiveMarkupExtension")]
[XamlSetTypeConverterAttribute("ReceiveTypeConverter")]
public class System.Windows.Condition : object {
    [DefaultValueAttribute("")]
public BindingBase Binding { get; public set; }
    [DefaultValueAttribute("")]
[AmbientAttribute]
public DependencyProperty Property { get; public set; }
    [DefaultValueAttribute("")]
public string SourceName { get; public set; }
    [TypeConverterAttribute("System.Windows.Markup.SetterTriggerConditionValueConverter")]
public object Value { get; public set; }
    public Condition(BindingBase binding, object conditionValue);
    public Condition(DependencyProperty conditionProperty, object conditionValue);
    public Condition(DependencyProperty conditionProperty, object conditionValue, string sourceName);
    public BindingBase get_Binding();
    public void set_Binding(BindingBase value);
    public DependencyProperty get_Property();
    public void set_Property(DependencyProperty value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public object get_Value();
    public void set_Value(object value);
    public static void ReceiveMarkupExtension(object targetObject, XamlSetMarkupExtensionEventArgs eventArgs);
    public static void ReceiveTypeConverter(object targetObject, XamlSetTypeConverterEventArgs eventArgs);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
public class System.Windows.ConditionCollection : Collection`1<Condition> {
    public bool IsSealed { get; }
    public bool get_IsSealed();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, Condition item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Condition item);
}
[ContentPropertyAttribute("Text")]
public class System.Windows.Controls.AccessText : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BaselineOffsetProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStretchProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty TextDecorationsProperty;
    public static DependencyProperty TextEffectsProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty TextTrimmingProperty;
    public static DependencyProperty TextWrappingProperty;
    public char AccessKey { get; }
    public Brush Background { get; public set; }
    public double BaselineOffset { get; public set; }
    [LocalizabilityAttribute("14")]
public FontFamily FontFamily { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    [DefaultValueAttribute("")]
public string Text { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextDecorationCollection TextDecorations { get; public set; }
    public TextEffectCollection TextEffects { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    protected int VisualChildrenCount { get; }
    public char get_AccessKey();
    public Brush get_Background();
    public void set_Background(Brush value);
    public double get_BaselineOffset();
    public void set_BaselineOffset(double value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public string get_Text();
    public void set_Text(string value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public TextEffectCollection get_TextEffects();
    public void set_TextEffects(TextEffectCollection value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    protected virtual int get_VisualChildrenCount();
    protected sealed virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Visual GetVisualChild(int index);
    protected sealed virtual Size MeasureOverride(Size constraint);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Controls.AddingNewItemEventArgs : EventArgs {
    public object NewItem { get; public set; }
    public object get_NewItem();
    public void set_NewItem(object value);
}
[ContentPropertyAttribute("Child")]
public class System.Windows.Controls.AdornedElementPlaceholder : FrameworkElement {
    public UIElement AdornedElement { get; }
    [DefaultValueAttribute("")]
public UIElement Child { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    public UIElement get_AdornedElement();
    public virtual UIElement get_Child();
    public virtual void set_Child(UIElement value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnInitialized(EventArgs e);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[ContentPropertyAttribute("Values")]
public class System.Windows.Controls.AlternationConverter : object {
    public IList Values { get; }
    public IList get_Values();
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
}
[LocalizabilityAttribute("17")]
public class System.Windows.Controls.BooleanToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Windows.Controls.Border : Decorator {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty PaddingProperty;
    public Brush Background { get; public set; }
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public Thickness Padding { get; public set; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext dc);
}
public class System.Windows.Controls.BorderGapMaskConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Windows.Controls.Button : ButtonBase {
    public static DependencyProperty IsCancelProperty;
    public static DependencyProperty IsDefaultedProperty;
    public static DependencyProperty IsDefaultProperty;
    public bool IsCancel { get; public set; }
    public bool IsDefault { get; public set; }
    public bool IsDefaulted { get; }
    public bool get_IsCancel();
    public void set_IsCancel(bool value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public bool get_IsDefaulted();
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Calendar : Control {
    public static DependencyProperty CalendarButtonStyleProperty;
    public static DependencyProperty CalendarDayButtonStyleProperty;
    public static DependencyProperty CalendarItemStyleProperty;
    public static DependencyProperty DisplayDateEndProperty;
    public static DependencyProperty DisplayDateProperty;
    public static DependencyProperty DisplayDateStartProperty;
    public static DependencyProperty DisplayModeProperty;
    public static DependencyProperty FirstDayOfWeekProperty;
    public static DependencyProperty IsTodayHighlightedProperty;
    public static DependencyProperty SelectedDateProperty;
    public static RoutedEvent SelectedDatesChangedEvent;
    public static DependencyProperty SelectionModeProperty;
    public CalendarBlackoutDatesCollection BlackoutDates { get; }
    public Style CalendarButtonStyle { get; public set; }
    public Style CalendarDayButtonStyle { get; public set; }
    public Style CalendarItemStyle { get; public set; }
    public DateTime DisplayDate { get; public set; }
    public Nullable`1<DateTime> DisplayDateEnd { get; public set; }
    public Nullable`1<DateTime> DisplayDateStart { get; public set; }
    public CalendarMode DisplayMode { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public bool IsTodayHighlighted { get; public set; }
    public Nullable`1<DateTime> SelectedDate { get; public set; }
    public SelectedDatesCollection SelectedDates { get; }
    public CalendarSelectionMode SelectionMode { get; public set; }
    public CalendarBlackoutDatesCollection get_BlackoutDates();
    public Style get_CalendarButtonStyle();
    public void set_CalendarButtonStyle(Style value);
    public Style get_CalendarDayButtonStyle();
    public void set_CalendarDayButtonStyle(Style value);
    public Style get_CalendarItemStyle();
    public void set_CalendarItemStyle(Style value);
    public DateTime get_DisplayDate();
    public void set_DisplayDate(DateTime value);
    public Nullable`1<DateTime> get_DisplayDateEnd();
    public void set_DisplayDateEnd(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_DisplayDateStart();
    public void set_DisplayDateStart(Nullable`1<DateTime> value);
    public CalendarMode get_DisplayMode();
    public void set_DisplayMode(CalendarMode value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public bool get_IsTodayHighlighted();
    public void set_IsTodayHighlighted(bool value);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    public SelectedDatesCollection get_SelectedDates();
    public CalendarSelectionMode get_SelectionMode();
    public void set_SelectionMode(CalendarSelectionMode value);
    public void add_DisplayDateChanged(EventHandler`1<CalendarDateChangedEventArgs> value);
    public void remove_DisplayDateChanged(EventHandler`1<CalendarDateChangedEventArgs> value);
    public void add_DisplayModeChanged(EventHandler`1<CalendarModeChangedEventArgs> value);
    public void remove_DisplayModeChanged(EventHandler`1<CalendarModeChangedEventArgs> value);
    public void add_SelectedDatesChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void remove_SelectedDatesChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void add_SelectionModeChanged(EventHandler`1<EventArgs> value);
    public void remove_SelectionModeChanged(EventHandler`1<EventArgs> value);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDisplayDateChanged(CalendarDateChangedEventArgs e);
    protected virtual void OnDisplayModeChanged(CalendarModeChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnSelectedDatesChanged(SelectionChangedEventArgs e);
    protected virtual void OnSelectionModeChanged(EventArgs e);
    public virtual string ToString();
}
public class System.Windows.Controls.CalendarBlackoutDatesCollection : ObservableCollection`1<CalendarDateRange> {
    public CalendarBlackoutDatesCollection(Calendar owner);
    public void AddDatesInPast();
    protected virtual void ClearItems();
    public bool Contains(DateTime date);
    public bool Contains(DateTime start, DateTime end);
    public bool ContainsAny(CalendarDateRange range);
    protected virtual void InsertItem(int index, CalendarDateRange item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, CalendarDateRange item);
}
public class System.Windows.Controls.CalendarDateChangedEventArgs : RoutedEventArgs {
    public Nullable`1<DateTime> AddedDate { get; }
    public Nullable`1<DateTime> RemovedDate { get; }
    public Nullable`1<DateTime> get_AddedDate();
    public Nullable`1<DateTime> get_RemovedDate();
}
public class System.Windows.Controls.CalendarDateRange : object {
    public DateTime End { get; public set; }
    public DateTime Start { get; public set; }
    public CalendarDateRange(DateTime day);
    public CalendarDateRange(DateTime start, DateTime end);
    public DateTime get_End();
    public void set_End(DateTime value);
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public enum System.Windows.Controls.CalendarMode : Enum {
    public int value__;
    public static CalendarMode Month;
    public static CalendarMode Year;
    public static CalendarMode Decade;
}
public class System.Windows.Controls.CalendarModeChangedEventArgs : RoutedEventArgs {
    public CalendarMode NewMode { get; }
    public CalendarMode OldMode { get; }
    public CalendarModeChangedEventArgs(CalendarMode oldMode, CalendarMode newMode);
    public CalendarMode get_NewMode();
    public CalendarMode get_OldMode();
}
public enum System.Windows.Controls.CalendarSelectionMode : Enum {
    public int value__;
    public static CalendarSelectionMode SingleDate;
    public static CalendarSelectionMode SingleRange;
    public static CalendarSelectionMode MultipleRange;
    public static CalendarSelectionMode None;
}
public class System.Windows.Controls.Canvas : Panel {
    public static DependencyProperty BottomProperty;
    public static DependencyProperty LeftProperty;
    public static DependencyProperty RightProperty;
    public static DependencyProperty TopProperty;
    protected virtual Size ArrangeOverride(Size arrangeSize);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetBottom(UIElement element);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetLeft(UIElement element);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetRight(UIElement element);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetTop(UIElement element);
    protected virtual Size MeasureOverride(Size constraint);
    public static void SetBottom(UIElement element, double length);
    public static void SetLeft(UIElement element, double length);
    public static void SetRight(UIElement element, double length);
    public static void SetTop(UIElement element, double length);
}
public enum System.Windows.Controls.CharacterCasing : Enum {
    public int value__;
    public static CharacterCasing Normal;
    public static CharacterCasing Lower;
    public static CharacterCasing Upper;
}
[DefaultEventAttribute("CheckStateChanged")]
[LocalizabilityAttribute("5")]
public class System.Windows.Controls.CheckBox : ToggleButton {
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
}
public class System.Windows.Controls.CleanUpVirtualizedItemEventArgs : RoutedEventArgs {
    public bool Cancel { get; public set; }
    public UIElement UIElement { get; }
    public object Value { get; }
    public CleanUpVirtualizedItemEventArgs(object value, UIElement element);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public UIElement get_UIElement();
    public object get_Value();
}
public class System.Windows.Controls.CleanUpVirtualizedItemEventHandler : MulticastDelegate {
    public CleanUpVirtualizedItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CleanUpVirtualizedItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CleanUpVirtualizedItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.ClickMode : Enum {
    public int value__;
    public static ClickMode Release;
    public static ClickMode Press;
    public static ClickMode Hover;
}
public class System.Windows.Controls.ColumnDefinition : DefinitionBase {
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public static DependencyProperty MaxWidthProperty;
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public static DependencyProperty MinWidthProperty;
    public static DependencyProperty WidthProperty;
    public double ActualWidth { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MaxWidth { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MinWidth { get; public set; }
    public double Offset { get; }
    public GridLength Width { get; public set; }
    public double get_ActualWidth();
    public double get_MaxWidth();
    public void set_MaxWidth(double value);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    public double get_Offset();
    public GridLength get_Width();
    public void set_Width(GridLength value);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Controls.ColumnDefinitionCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public ColumnDefinition Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual ColumnDefinition get_Item(int index);
    public sealed virtual void set_Item(int index, ColumnDefinition value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(ColumnDefinition value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ColumnDefinition value);
    public sealed virtual void CopyTo(ColumnDefinition[] array, int index);
    public sealed virtual int IndexOf(ColumnDefinition value);
    public sealed virtual void Insert(int index, ColumnDefinition value);
    public sealed virtual bool Remove(ColumnDefinition value);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    private sealed virtual override IEnumerator`1<ColumnDefinition> System.Collections.Generic.IEnumerable<System.Windows.Controls.ColumnDefinition>.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[LocalizabilityAttribute("6")]
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.ComboBox : Selector {
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty MaxDropDownHeightProperty;
    public static DependencyProperty SelectionBoxItemProperty;
    public static DependencyProperty SelectionBoxItemStringFormatProperty;
    public static DependencyProperty SelectionBoxItemTemplateProperty;
    public static DependencyProperty ShouldPreserveUserEnteredPrefixProperty;
    public static DependencyProperty StaysOpenOnEditProperty;
    public static DependencyProperty TextProperty;
    protected internal bool HandlesScrolling { get; }
    protected internal bool HasEffectiveKeyboardFocus { get; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
public bool IsDropDownOpen { get; public set; }
    public bool IsEditable { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsSelectionBoxHighlighted { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double MaxDropDownHeight { get; public set; }
    public object SelectionBoxItem { get; }
    public string SelectionBoxItemStringFormat { get; }
    public DataTemplate SelectionBoxItemTemplate { get; }
    public bool ShouldPreserveUserEnteredPrefix { get; public set; }
    public bool StaysOpenOnEdit { get; public set; }
    public string Text { get; public set; }
    protected internal virtual bool get_HandlesScrolling();
    protected internal virtual bool get_HasEffectiveKeyboardFocus();
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsSelectionBoxHighlighted();
    public double get_MaxDropDownHeight();
    public void set_MaxDropDownHeight(double value);
    public object get_SelectionBoxItem();
    public string get_SelectionBoxItemStringFormat();
    public DataTemplate get_SelectionBoxItemTemplate();
    public bool get_ShouldPreserveUserEnteredPrefix();
    public void set_ShouldPreserveUserEnteredPrefix(bool value);
    public bool get_StaysOpenOnEdit();
    public void set_StaysOpenOnEdit(bool value);
    public string get_Text();
    public void set_Text(string value);
    public void add_DropDownClosed(EventHandler value);
    public void remove_DropDownClosed(EventHandler value);
    public void add_DropDownOpened(EventHandler value);
    public void remove_DropDownOpened(EventHandler value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDropDownClosed(EventArgs e);
    protected virtual void OnDropDownOpened(EventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
[LocalizabilityAttribute("6")]
public class System.Windows.Controls.ComboBoxItem : ListBoxItem {
    public static DependencyProperty IsHighlightedProperty;
    public bool IsHighlighted { get; protected set; }
    public bool get_IsHighlighted();
    protected void set_IsHighlighted(bool value);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
}
[DefaultPropertyAttribute("Content")]
[LocalizabilityAttribute("0")]
[ContentPropertyAttribute("Content")]
public class System.Windows.Controls.ContentControl : Control {
    public static DependencyProperty ContentProperty;
    public static DependencyProperty ContentStringFormatProperty;
    public static DependencyProperty ContentTemplateProperty;
    public static DependencyProperty ContentTemplateSelectorProperty;
    public static DependencyProperty HasContentProperty;
    [BindableAttribute("True")]
public object Content { get; public set; }
    [BindableAttribute("True")]
public string ContentStringFormat { get; public set; }
    [BindableAttribute("True")]
public DataTemplate ContentTemplate { get; public set; }
    [BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector ContentTemplateSelector { get; public set; }
    [BrowsableAttribute("False")]
[ReadOnlyAttribute("True")]
public bool HasContent { get; }
    protected internal IEnumerator LogicalChildren { get; }
    public object get_Content();
    public void set_Content(object value);
    public string get_ContentStringFormat();
    public void set_ContentStringFormat(string value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public DataTemplateSelector get_ContentTemplateSelector();
    public void set_ContentTemplateSelector(DataTemplateSelector value);
    public bool get_HasContent();
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual void AddChild(object value);
    protected virtual void AddText(string text);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual void OnContentStringFormatChanged(string oldContentStringFormat, string newContentStringFormat);
    protected virtual void OnContentTemplateChanged(DataTemplate oldContentTemplate, DataTemplate newContentTemplate);
    protected virtual void OnContentTemplateSelectorChanged(DataTemplateSelector oldContentTemplateSelector, DataTemplateSelector newContentTemplateSelector);
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeContent();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.ContentPresenter : FrameworkElement {
    public static DependencyProperty ContentProperty;
    public static DependencyProperty ContentSourceProperty;
    public static DependencyProperty ContentStringFormatProperty;
    public static DependencyProperty ContentTemplateProperty;
    public static DependencyProperty ContentTemplateSelectorProperty;
    public static DependencyProperty RecognizesAccessKeyProperty;
    public object Content { get; public set; }
    public string ContentSource { get; public set; }
    [BindableAttribute("True")]
public string ContentStringFormat { get; public set; }
    public DataTemplate ContentTemplate { get; public set; }
    public DataTemplateSelector ContentTemplateSelector { get; public set; }
    public bool RecognizesAccessKey { get; public set; }
    public object get_Content();
    public void set_Content(object value);
    public string get_ContentSource();
    public void set_ContentSource(string value);
    public string get_ContentStringFormat();
    public void set_ContentStringFormat(string value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public DataTemplateSelector get_ContentTemplateSelector();
    public void set_ContentTemplateSelector(DataTemplateSelector value);
    public bool get_RecognizesAccessKey();
    public void set_RecognizesAccessKey(bool value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual DataTemplate ChooseTemplate();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnContentStringFormatChanged(string oldContentStringFormat, string newContentStringFormat);
    protected virtual void OnContentTemplateChanged(DataTemplate oldContentTemplate, DataTemplate newContentTemplate);
    protected virtual void OnContentTemplateSelectorChanged(DataTemplateSelector oldContentTemplateSelector, DataTemplateSelector newContentTemplateSelector);
    protected virtual void OnTemplateChanged(DataTemplate oldTemplate, DataTemplate newTemplate);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeContentTemplateSelector();
}
[DefaultEventAttribute("Opened")]
public class System.Windows.Controls.ContextMenu : MenuBase {
    public static RoutedEvent ClosedEvent;
    public static DependencyProperty CustomPopupPlacementCallbackProperty;
    public static DependencyProperty HasDropShadowProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty IsOpenProperty;
    public static RoutedEvent OpenedEvent;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty PlacementRectangleProperty;
    public static DependencyProperty PlacementTargetProperty;
    public static DependencyProperty StaysOpenProperty;
    public static DependencyProperty VerticalOffsetProperty;
    [BindableAttribute("False")]
[CategoryAttribute("Layout")]
public CustomPopupPlacementCallback CustomPopupPlacementCallback { get; public set; }
    protected internal bool HandlesScrolling { get; }
    public bool HasDropShadow { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double HorizontalOffset { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsOpen { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public PlacementMode Placement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public Rect PlacementRectangle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[DesignerSerializationVisibilityAttribute("0")]
public UIElement PlacementTarget { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool StaysOpen { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double VerticalOffset { get; public set; }
    public CustomPopupPlacementCallback get_CustomPopupPlacementCallback();
    public void set_CustomPopupPlacementCallback(CustomPopupPlacementCallback value);
    protected internal virtual bool get_HandlesScrolling();
    public bool get_HasDropShadow();
    public void set_HasDropShadow(bool value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public PlacementMode get_Placement();
    public void set_Placement(PlacementMode value);
    public Rect get_PlacementRectangle();
    public void set_PlacementRectangle(Rect value);
    public UIElement get_PlacementTarget();
    public void set_PlacementTarget(UIElement value);
    public bool get_StaysOpen();
    public void set_StaysOpen(bool value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public void add_Closed(RoutedEventHandler value);
    public void remove_Closed(RoutedEventHandler value);
    public void add_Opened(RoutedEventHandler value);
    public void remove_Opened(RoutedEventHandler value);
    protected virtual void OnClosed(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnOpened(RoutedEventArgs e);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
public class System.Windows.Controls.ContextMenuEventArgs : RoutedEventArgs {
    public double CursorLeft { get; }
    public double CursorTop { get; }
    public double get_CursorLeft();
    public double get_CursorTop();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.ContextMenuEventHandler : MulticastDelegate {
    public ContextMenuEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ContextMenuEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ContextMenuEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class System.Windows.Controls.ContextMenuService : object {
    public static RoutedEvent ContextMenuClosingEvent;
    public static RoutedEvent ContextMenuOpeningEvent;
    public static DependencyProperty ContextMenuProperty;
    public static DependencyProperty HasDropShadowProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty IsEnabledProperty;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty PlacementRectangleProperty;
    public static DependencyProperty PlacementTargetProperty;
    public static DependencyProperty ShowOnDisabledProperty;
    public static DependencyProperty VerticalOffsetProperty;
    public static void AddContextMenuClosingHandler(DependencyObject element, ContextMenuEventHandler handler);
    public static void AddContextMenuOpeningHandler(DependencyObject element, ContextMenuEventHandler handler);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static ContextMenu GetContextMenu(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetHasDropShadow(DependencyObject element);
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static double GetHorizontalOffset(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetIsEnabled(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static PlacementMode GetPlacement(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static Rect GetPlacementRectangle(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static UIElement GetPlacementTarget(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetShowOnDisabled(DependencyObject element);
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static double GetVerticalOffset(DependencyObject element);
    public static void RemoveContextMenuClosingHandler(DependencyObject element, ContextMenuEventHandler handler);
    public static void RemoveContextMenuOpeningHandler(DependencyObject element, ContextMenuEventHandler handler);
    public static void SetContextMenu(DependencyObject element, ContextMenu value);
    public static void SetHasDropShadow(DependencyObject element, bool value);
    public static void SetHorizontalOffset(DependencyObject element, double value);
    public static void SetIsEnabled(DependencyObject element, bool value);
    public static void SetPlacement(DependencyObject element, PlacementMode value);
    public static void SetPlacementRectangle(DependencyObject element, Rect value);
    public static void SetPlacementTarget(DependencyObject element, UIElement value);
    public static void SetShowOnDisabled(DependencyObject element, bool value);
    public static void SetVerticalOffset(DependencyObject element, double value);
}
public class System.Windows.Controls.Control : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStretchProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty HorizontalContentAlignmentProperty;
    public static DependencyProperty IsTabStopProperty;
    public static RoutedEvent MouseDoubleClickEvent;
    public static DependencyProperty PaddingProperty;
    public static RoutedEvent PreviewMouseDoubleClickEvent;
    public static DependencyProperty TabIndexProperty;
    public static DependencyProperty TemplateProperty;
    public static DependencyProperty VerticalContentAlignmentProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public Brush Background { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public Brush BorderBrush { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public Thickness BorderThickness { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[LocalizabilityAttribute("14")]
public FontFamily FontFamily { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public FontStretch FontStretch { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public FontStyle FontStyle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public FontWeight FontWeight { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public Brush Foreground { get; public set; }
    protected internal bool HandlesScrolling { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public HorizontalAlignment HorizontalContentAlignment { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool IsTabStop { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public Thickness Padding { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int TabIndex { get; public set; }
    public ControlTemplate Template { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public VerticalAlignment VerticalContentAlignment { get; public set; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    protected internal virtual bool get_HandlesScrolling();
    public HorizontalAlignment get_HorizontalContentAlignment();
    public void set_HorizontalContentAlignment(HorizontalAlignment value);
    public bool get_IsTabStop();
    public void set_IsTabStop(bool value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public ControlTemplate get_Template();
    public void set_Template(ControlTemplate value);
    public VerticalAlignment get_VerticalContentAlignment();
    public void set_VerticalContentAlignment(VerticalAlignment value);
    public void add_MouseDoubleClick(MouseButtonEventHandler value);
    public void remove_MouseDoubleClick(MouseButtonEventHandler value);
    public void add_PreviewMouseDoubleClick(MouseButtonEventHandler value);
    public void remove_PreviewMouseDoubleClick(MouseButtonEventHandler value);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseDoubleClick(MouseButtonEventArgs e);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    public virtual string ToString();
}
[LocalizabilityAttribute("0")]
[DictionaryKeyPropertyAttribute("TargetType")]
public class System.Windows.Controls.ControlTemplate : FrameworkTemplate {
    [DefaultValueAttribute("")]
[AmbientAttribute]
public Type TargetType { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[DependsOnAttribute("Template")]
[DependsOnAttribute("VisualTree")]
public TriggerCollection Triggers { get; }
    public ControlTemplate(Type targetType);
    public Type get_TargetType();
    public void set_TargetType(Type value);
    public TriggerCollection get_Triggers();
    protected virtual void ValidateTemplatedParent(FrameworkElement templatedParent);
}
public class System.Windows.Controls.DataErrorValidationRule : ValidationRule {
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo);
}
public class System.Windows.Controls.DataGrid : MultiSelector {
    public static DependencyProperty AlternatingRowBackgroundProperty;
    public static DependencyProperty AreRowDetailsFrozenProperty;
    public static DependencyProperty AutoGenerateColumnsProperty;
    public static RoutedCommand BeginEditCommand;
    public static RoutedCommand CancelEditCommand;
    public static DependencyProperty CanUserAddRowsProperty;
    public static DependencyProperty CanUserDeleteRowsProperty;
    public static DependencyProperty CanUserReorderColumnsProperty;
    public static DependencyProperty CanUserResizeColumnsProperty;
    public static DependencyProperty CanUserResizeRowsProperty;
    public static DependencyProperty CanUserSortColumnsProperty;
    public static DependencyProperty CellsPanelHorizontalOffsetProperty;
    public static DependencyProperty CellStyleProperty;
    public static DependencyProperty ClipboardCopyModeProperty;
    public static DependencyProperty ColumnHeaderHeightProperty;
    public static DependencyProperty ColumnHeaderStyleProperty;
    public static DependencyProperty ColumnWidthProperty;
    public static RoutedCommand CommitEditCommand;
    public static DependencyProperty CurrentCellProperty;
    public static DependencyProperty CurrentColumnProperty;
    public static DependencyProperty CurrentItemProperty;
    public static DependencyProperty DragIndicatorStyleProperty;
    public static DependencyProperty DropLocationIndicatorStyleProperty;
    public static DependencyProperty EnableColumnVirtualizationProperty;
    public static DependencyProperty EnableRowVirtualizationProperty;
    public static DependencyProperty FrozenColumnCountProperty;
    public static DependencyProperty GridLinesVisibilityProperty;
    public static DependencyProperty HeadersVisibilityProperty;
    public static DependencyProperty HorizontalGridLinesBrushProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty MaxColumnWidthProperty;
    public static DependencyProperty MinColumnWidthProperty;
    public static DependencyProperty MinRowHeightProperty;
    public static DependencyProperty NewItemMarginProperty;
    public static DependencyProperty NonFrozenColumnsViewportHorizontalOffsetProperty;
    public static DependencyProperty RowBackgroundProperty;
    public static DependencyProperty RowDetailsTemplateProperty;
    public static DependencyProperty RowDetailsTemplateSelectorProperty;
    public static DependencyProperty RowDetailsVisibilityModeProperty;
    public static DependencyProperty RowHeaderActualWidthProperty;
    public static DependencyProperty RowHeaderStyleProperty;
    public static DependencyProperty RowHeaderTemplateProperty;
    public static DependencyProperty RowHeaderTemplateSelectorProperty;
    public static DependencyProperty RowHeaderWidthProperty;
    public static DependencyProperty RowHeightProperty;
    public static DependencyProperty RowStyleProperty;
    public static DependencyProperty RowStyleSelectorProperty;
    public static DependencyProperty RowValidationErrorTemplateProperty;
    public static DependencyProperty SelectionModeProperty;
    public static DependencyProperty SelectionUnitProperty;
    public static DependencyProperty VerticalGridLinesBrushProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public Brush AlternatingRowBackground { get; public set; }
    public bool AreRowDetailsFrozen { get; public set; }
    public bool AutoGenerateColumns { get; public set; }
    public bool CanUserAddRows { get; public set; }
    public bool CanUserDeleteRows { get; public set; }
    public bool CanUserReorderColumns { get; public set; }
    public bool CanUserResizeColumns { get; public set; }
    public bool CanUserResizeRows { get; public set; }
    public bool CanUserSortColumns { get; public set; }
    public double CellsPanelHorizontalOffset { get; }
    public Style CellStyle { get; public set; }
    public DataGridClipboardCopyMode ClipboardCopyMode { get; public set; }
    public double ColumnHeaderHeight { get; public set; }
    public Style ColumnHeaderStyle { get; public set; }
    public ObservableCollection`1<DataGridColumn> Columns { get; }
    public DataGridLength ColumnWidth { get; public set; }
    public DataGridCellInfo CurrentCell { get; public set; }
    public DataGridColumn CurrentColumn { get; public set; }
    public object CurrentItem { get; public set; }
    public static RoutedUICommand DeleteCommand { get; }
    public Style DragIndicatorStyle { get; public set; }
    public Style DropLocationIndicatorStyle { get; public set; }
    public bool EnableColumnVirtualization { get; public set; }
    public bool EnableRowVirtualization { get; public set; }
    public static ComponentResourceKey FocusBorderBrushKey { get; }
    public int FrozenColumnCount { get; public set; }
    public DataGridGridLinesVisibility GridLinesVisibility { get; public set; }
    protected internal bool HandlesScrolling { get; }
    public DataGridHeadersVisibility HeadersVisibility { get; public set; }
    public static IValueConverter HeadersVisibilityConverter { get; }
    public Brush HorizontalGridLinesBrush { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public bool IsReadOnly { get; public set; }
    public double MaxColumnWidth { get; public set; }
    public double MinColumnWidth { get; public set; }
    public double MinRowHeight { get; public set; }
    public Thickness NewItemMargin { get; }
    public double NonFrozenColumnsViewportHorizontalOffset { get; }
    public Brush RowBackground { get; public set; }
    public static IValueConverter RowDetailsScrollingConverter { get; }
    public DataTemplate RowDetailsTemplate { get; public set; }
    public DataTemplateSelector RowDetailsTemplateSelector { get; public set; }
    public DataGridRowDetailsVisibilityMode RowDetailsVisibilityMode { get; public set; }
    public double RowHeaderActualWidth { get; }
    public Style RowHeaderStyle { get; public set; }
    public DataTemplate RowHeaderTemplate { get; public set; }
    public DataTemplateSelector RowHeaderTemplateSelector { get; public set; }
    public double RowHeaderWidth { get; public set; }
    public double RowHeight { get; public set; }
    public Style RowStyle { get; public set; }
    public StyleSelector RowStyleSelector { get; public set; }
    public ControlTemplate RowValidationErrorTemplate { get; public set; }
    public ObservableCollection`1<ValidationRule> RowValidationRules { get; }
    public static RoutedUICommand SelectAllCommand { get; }
    public IList`1<DataGridCellInfo> SelectedCells { get; }
    public DataGridSelectionMode SelectionMode { get; public set; }
    public DataGridSelectionUnit SelectionUnit { get; public set; }
    public Brush VerticalGridLinesBrush { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public Brush get_AlternatingRowBackground();
    public void set_AlternatingRowBackground(Brush value);
    public bool get_AreRowDetailsFrozen();
    public void set_AreRowDetailsFrozen(bool value);
    public bool get_AutoGenerateColumns();
    public void set_AutoGenerateColumns(bool value);
    public bool get_CanUserAddRows();
    public void set_CanUserAddRows(bool value);
    public bool get_CanUserDeleteRows();
    public void set_CanUserDeleteRows(bool value);
    public bool get_CanUserReorderColumns();
    public void set_CanUserReorderColumns(bool value);
    public bool get_CanUserResizeColumns();
    public void set_CanUserResizeColumns(bool value);
    public bool get_CanUserResizeRows();
    public void set_CanUserResizeRows(bool value);
    public bool get_CanUserSortColumns();
    public void set_CanUserSortColumns(bool value);
    public double get_CellsPanelHorizontalOffset();
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    public DataGridClipboardCopyMode get_ClipboardCopyMode();
    public void set_ClipboardCopyMode(DataGridClipboardCopyMode value);
    public double get_ColumnHeaderHeight();
    public void set_ColumnHeaderHeight(double value);
    public Style get_ColumnHeaderStyle();
    public void set_ColumnHeaderStyle(Style value);
    public ObservableCollection`1<DataGridColumn> get_Columns();
    public DataGridLength get_ColumnWidth();
    public void set_ColumnWidth(DataGridLength value);
    public DataGridCellInfo get_CurrentCell();
    public void set_CurrentCell(DataGridCellInfo value);
    public DataGridColumn get_CurrentColumn();
    public void set_CurrentColumn(DataGridColumn value);
    public object get_CurrentItem();
    public void set_CurrentItem(object value);
    public static RoutedUICommand get_DeleteCommand();
    public Style get_DragIndicatorStyle();
    public void set_DragIndicatorStyle(Style value);
    public Style get_DropLocationIndicatorStyle();
    public void set_DropLocationIndicatorStyle(Style value);
    public bool get_EnableColumnVirtualization();
    public void set_EnableColumnVirtualization(bool value);
    public bool get_EnableRowVirtualization();
    public void set_EnableRowVirtualization(bool value);
    public static ComponentResourceKey get_FocusBorderBrushKey();
    public int get_FrozenColumnCount();
    public void set_FrozenColumnCount(int value);
    public DataGridGridLinesVisibility get_GridLinesVisibility();
    public void set_GridLinesVisibility(DataGridGridLinesVisibility value);
    protected internal virtual bool get_HandlesScrolling();
    public DataGridHeadersVisibility get_HeadersVisibility();
    public void set_HeadersVisibility(DataGridHeadersVisibility value);
    public static IValueConverter get_HeadersVisibilityConverter();
    public Brush get_HorizontalGridLinesBrush();
    public void set_HorizontalGridLinesBrush(Brush value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public double get_MaxColumnWidth();
    public void set_MaxColumnWidth(double value);
    public double get_MinColumnWidth();
    public void set_MinColumnWidth(double value);
    public double get_MinRowHeight();
    public void set_MinRowHeight(double value);
    public Thickness get_NewItemMargin();
    public double get_NonFrozenColumnsViewportHorizontalOffset();
    public Brush get_RowBackground();
    public void set_RowBackground(Brush value);
    public static IValueConverter get_RowDetailsScrollingConverter();
    public DataTemplate get_RowDetailsTemplate();
    public void set_RowDetailsTemplate(DataTemplate value);
    public DataTemplateSelector get_RowDetailsTemplateSelector();
    public void set_RowDetailsTemplateSelector(DataTemplateSelector value);
    public DataGridRowDetailsVisibilityMode get_RowDetailsVisibilityMode();
    public void set_RowDetailsVisibilityMode(DataGridRowDetailsVisibilityMode value);
    public double get_RowHeaderActualWidth();
    public Style get_RowHeaderStyle();
    public void set_RowHeaderStyle(Style value);
    public DataTemplate get_RowHeaderTemplate();
    public void set_RowHeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_RowHeaderTemplateSelector();
    public void set_RowHeaderTemplateSelector(DataTemplateSelector value);
    public double get_RowHeaderWidth();
    public void set_RowHeaderWidth(double value);
    public double get_RowHeight();
    public void set_RowHeight(double value);
    public Style get_RowStyle();
    public void set_RowStyle(Style value);
    public StyleSelector get_RowStyleSelector();
    public void set_RowStyleSelector(StyleSelector value);
    public ControlTemplate get_RowValidationErrorTemplate();
    public void set_RowValidationErrorTemplate(ControlTemplate value);
    public ObservableCollection`1<ValidationRule> get_RowValidationRules();
    public static RoutedUICommand get_SelectAllCommand();
    public IList`1<DataGridCellInfo> get_SelectedCells();
    public DataGridSelectionMode get_SelectionMode();
    public void set_SelectionMode(DataGridSelectionMode value);
    public DataGridSelectionUnit get_SelectionUnit();
    public void set_SelectionUnit(DataGridSelectionUnit value);
    public Brush get_VerticalGridLinesBrush();
    public void set_VerticalGridLinesBrush(Brush value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public void add_AddingNewItem(EventHandler`1<AddingNewItemEventArgs> value);
    public void remove_AddingNewItem(EventHandler`1<AddingNewItemEventArgs> value);
    public void add_AutoGeneratedColumns(EventHandler value);
    public void remove_AutoGeneratedColumns(EventHandler value);
    public void add_AutoGeneratingColumn(EventHandler`1<DataGridAutoGeneratingColumnEventArgs> value);
    public void remove_AutoGeneratingColumn(EventHandler`1<DataGridAutoGeneratingColumnEventArgs> value);
    public void add_BeginningEdit(EventHandler`1<DataGridBeginningEditEventArgs> value);
    public void remove_BeginningEdit(EventHandler`1<DataGridBeginningEditEventArgs> value);
    public void add_CellEditEnding(EventHandler`1<DataGridCellEditEndingEventArgs> value);
    public void remove_CellEditEnding(EventHandler`1<DataGridCellEditEndingEventArgs> value);
    public void add_ColumnDisplayIndexChanged(EventHandler`1<DataGridColumnEventArgs> value);
    public void remove_ColumnDisplayIndexChanged(EventHandler`1<DataGridColumnEventArgs> value);
    public void add_ColumnHeaderDragCompleted(EventHandler`1<DragCompletedEventArgs> value);
    public void remove_ColumnHeaderDragCompleted(EventHandler`1<DragCompletedEventArgs> value);
    public void add_ColumnHeaderDragDelta(EventHandler`1<DragDeltaEventArgs> value);
    public void remove_ColumnHeaderDragDelta(EventHandler`1<DragDeltaEventArgs> value);
    public void add_ColumnHeaderDragStarted(EventHandler`1<DragStartedEventArgs> value);
    public void remove_ColumnHeaderDragStarted(EventHandler`1<DragStartedEventArgs> value);
    public void add_ColumnReordered(EventHandler`1<DataGridColumnEventArgs> value);
    public void remove_ColumnReordered(EventHandler`1<DataGridColumnEventArgs> value);
    public void add_ColumnReordering(EventHandler`1<DataGridColumnReorderingEventArgs> value);
    public void remove_ColumnReordering(EventHandler`1<DataGridColumnReorderingEventArgs> value);
    public void add_CopyingRowClipboardContent(EventHandler`1<DataGridRowClipboardEventArgs> value);
    public void remove_CopyingRowClipboardContent(EventHandler`1<DataGridRowClipboardEventArgs> value);
    public void add_CurrentCellChanged(EventHandler`1<EventArgs> value);
    public void remove_CurrentCellChanged(EventHandler`1<EventArgs> value);
    public void add_InitializingNewItem(InitializingNewItemEventHandler value);
    public void remove_InitializingNewItem(InitializingNewItemEventHandler value);
    public void add_LoadingRow(EventHandler`1<DataGridRowEventArgs> value);
    public void remove_LoadingRow(EventHandler`1<DataGridRowEventArgs> value);
    public void add_LoadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public void remove_LoadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public void add_PreparingCellForEdit(EventHandler`1<DataGridPreparingCellForEditEventArgs> value);
    public void remove_PreparingCellForEdit(EventHandler`1<DataGridPreparingCellForEditEventArgs> value);
    public void add_RowDetailsVisibilityChanged(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public void remove_RowDetailsVisibilityChanged(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public void add_RowEditEnding(EventHandler`1<DataGridRowEditEndingEventArgs> value);
    public void remove_RowEditEnding(EventHandler`1<DataGridRowEditEndingEventArgs> value);
    public void add_SelectedCellsChanged(SelectedCellsChangedEventHandler value);
    public void remove_SelectedCellsChanged(SelectedCellsChangedEventHandler value);
    public void add_Sorting(DataGridSortingEventHandler value);
    public void remove_Sorting(DataGridSortingEventHandler value);
    public void add_UnloadingRow(EventHandler`1<DataGridRowEventArgs> value);
    public void remove_UnloadingRow(EventHandler`1<DataGridRowEventArgs> value);
    public void add_UnloadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public void remove_UnloadingRowDetails(EventHandler`1<DataGridRowDetailsEventArgs> value);
    public bool BeginEdit();
    public bool BeginEdit(RoutedEventArgs editingEventArgs);
    public bool CancelEdit();
    public bool CancelEdit(DataGridEditingUnit editingUnit);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public void ClearDetailsVisibilityForItem(object item);
    public DataGridColumn ColumnFromDisplayIndex(int displayIndex);
    public bool CommitEdit();
    public bool CommitEdit(DataGridEditingUnit editingUnit, bool exitEditingMode);
    public static Collection`1<DataGridColumn> GenerateColumns(IItemProperties itemProperties);
    protected virtual DependencyObject GetContainerForItemOverride();
    public Visibility GetDetailsVisibilityForItem(object item);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnAddingNewItem(AddingNewItemEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnAutoGeneratedColumns(EventArgs e);
    protected virtual void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e);
    protected virtual void OnBeginningEdit(DataGridBeginningEditEventArgs e);
    protected virtual void OnCanExecuteBeginEdit(CanExecuteRoutedEventArgs e);
    protected virtual void OnCanExecuteCancelEdit(CanExecuteRoutedEventArgs e);
    protected virtual void OnCanExecuteCommitEdit(CanExecuteRoutedEventArgs e);
    protected virtual void OnCanExecuteCopy(CanExecuteRoutedEventArgs args);
    protected virtual void OnCanExecuteDelete(CanExecuteRoutedEventArgs e);
    protected virtual void OnCellEditEnding(DataGridCellEditEndingEventArgs e);
    protected internal virtual void OnColumnDisplayIndexChanged(DataGridColumnEventArgs e);
    protected internal virtual void OnColumnHeaderDragCompleted(DragCompletedEventArgs e);
    protected internal virtual void OnColumnHeaderDragDelta(DragDeltaEventArgs e);
    protected internal virtual void OnColumnHeaderDragStarted(DragStartedEventArgs e);
    protected internal virtual void OnColumnReordered(DataGridColumnEventArgs e);
    protected internal virtual void OnColumnReordering(DataGridColumnReorderingEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnCopyingRowClipboardContent(DataGridRowClipboardEventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnCurrentCellChanged(EventArgs e);
    protected virtual void OnExecutedBeginEdit(ExecutedRoutedEventArgs e);
    protected virtual void OnExecutedCancelEdit(ExecutedRoutedEventArgs e);
    protected virtual void OnExecutedCommitEdit(ExecutedRoutedEventArgs e);
    protected virtual void OnExecutedCopy(ExecutedRoutedEventArgs args);
    protected virtual void OnExecutedDelete(ExecutedRoutedEventArgs e);
    protected virtual void OnInitializingNewItem(InitializingNewItemEventArgs e);
    protected virtual void OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnLoadingRow(DataGridRowEventArgs e);
    protected virtual void OnLoadingRowDetails(DataGridRowDetailsEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected internal virtual void OnPreparingCellForEdit(DataGridPreparingCellForEditEventArgs e);
    protected internal virtual void OnRowDetailsVisibilityChanged(DataGridRowDetailsEventArgs e);
    protected virtual void OnRowEditEnding(DataGridRowEditEndingEventArgs e);
    protected virtual void OnSelectedCellsChanged(SelectedCellsChangedEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void OnSorting(DataGridSortingEventArgs eventArgs);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void OnUnloadingRow(DataGridRowEventArgs e);
    protected virtual void OnUnloadingRowDetails(DataGridRowDetailsEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public void ScrollIntoView(object item);
    public void ScrollIntoView(object item, DataGridColumn column);
    public void SelectAllCells();
    public void SetDetailsVisibilityForItem(object item, Visibility detailsVisibility);
    public void UnselectAllCells();
}
public class System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public DataGridColumn Column { get; public set; }
    public object PropertyDescriptor { get; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public DataGridAutoGeneratingColumnEventArgs(string propertyName, Type propertyType, DataGridColumn column);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public DataGridColumn get_Column();
    public void set_Column(DataGridColumn value);
    public object get_PropertyDescriptor();
    public string get_PropertyName();
    public Type get_PropertyType();
}
public class System.Windows.Controls.DataGridBeginningEditEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public DataGridColumn Column { get; }
    public RoutedEventArgs EditingEventArgs { get; }
    public DataGridRow Row { get; }
    public DataGridBeginningEditEventArgs(DataGridColumn column, DataGridRow row, RoutedEventArgs editingEventArgs);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public DataGridColumn get_Column();
    public RoutedEventArgs get_EditingEventArgs();
    public DataGridRow get_Row();
}
public abstract class System.Windows.Controls.DataGridBoundColumn : DataGridColumn {
    public static DependencyProperty EditingElementStyleProperty;
    public static DependencyProperty ElementStyleProperty;
    public BindingBase Binding { get; public set; }
    public BindingBase ClipboardContentBinding { get; public set; }
    public Style EditingElementStyle { get; public set; }
    public Style ElementStyle { get; public set; }
    public virtual BindingBase get_Binding();
    public virtual void set_Binding(BindingBase value);
    public virtual BindingBase get_ClipboardContentBinding();
    public virtual void set_ClipboardContentBinding(BindingBase value);
    public Style get_EditingElementStyle();
    public void set_EditingElementStyle(Style value);
    public Style get_ElementStyle();
    public void set_ElementStyle(Style value);
    protected virtual void OnBindingChanged(BindingBase oldBinding, BindingBase newBinding);
    protected virtual bool OnCoerceIsReadOnly(bool baseValue);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public class System.Windows.Controls.DataGridCell : ContentControl {
    public static DependencyProperty ColumnProperty;
    public static DependencyProperty IsEditingProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty IsSelectedProperty;
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnselectedEvent;
    public DataGridColumn Column { get; }
    public bool IsEditing { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsSelected { get; public set; }
    public DataGridColumn get_Column();
    public bool get_IsEditing();
    public void set_IsEditing(bool value);
    public bool get_IsReadOnly();
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    public void add_Unselected(RoutedEventHandler value);
    public void remove_Unselected(RoutedEventHandler value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnColumnChanged(DataGridColumn oldColumn, DataGridColumn newColumn);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnIsEditingChanged(bool isEditing);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
}
public class System.Windows.Controls.DataGridCellClipboardEventArgs : EventArgs {
    public DataGridColumn Column { get; }
    public object Content { get; public set; }
    public object Item { get; }
    public DataGridCellClipboardEventArgs(object item, DataGridColumn column, object content);
    public DataGridColumn get_Column();
    public object get_Content();
    public void set_Content(object value);
    public object get_Item();
}
public class System.Windows.Controls.DataGridCellEditEndingEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public DataGridColumn Column { get; }
    public DataGridEditAction EditAction { get; }
    public FrameworkElement EditingElement { get; }
    public DataGridRow Row { get; }
    public DataGridCellEditEndingEventArgs(DataGridColumn column, DataGridRow row, FrameworkElement editingElement, DataGridEditAction editAction);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public DataGridColumn get_Column();
    public DataGridEditAction get_EditAction();
    public FrameworkElement get_EditingElement();
    public DataGridRow get_Row();
}
public class System.Windows.Controls.DataGridCellInfo : ValueType {
    public DataGridColumn Column { get; }
    public bool IsValid { get; }
    public object Item { get; }
    public DataGridCellInfo(object item, DataGridColumn column);
    public DataGridCellInfo(DataGridCell cell);
    public DataGridColumn get_Column();
    public bool get_IsValid();
    public object get_Item();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DataGridCellInfo cell1, DataGridCellInfo cell2);
    public static bool op_Inequality(DataGridCellInfo cell1, DataGridCellInfo cell2);
}
public class System.Windows.Controls.DataGridCellsPanel : VirtualizingPanel {
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected internal virtual void BringIndexIntoView(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnClearChildren();
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    protected virtual void OnItemsChanged(object sender, ItemsChangedEventArgs args);
}
public class System.Windows.Controls.DataGridCheckBoxColumn : DataGridBoundColumn {
    public static DependencyProperty IsThreeStateProperty;
    public static Style DefaultEditingElementStyle { get; }
    public static Style DefaultElementStyle { get; }
    public bool IsThreeState { get; public set; }
    public static Style get_DefaultEditingElementStyle();
    public static Style get_DefaultElementStyle();
    public bool get_IsThreeState();
    public void set_IsThreeState(bool value);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public class System.Windows.Controls.DataGridClipboardCellContent : ValueType {
    public DataGridColumn Column { get; }
    public object Content { get; }
    public object Item { get; }
    public DataGridClipboardCellContent(object item, DataGridColumn column, object content);
    public DataGridColumn get_Column();
    public object get_Content();
    public object get_Item();
    public virtual bool Equals(object data);
    public virtual int GetHashCode();
    public static bool op_Equality(DataGridClipboardCellContent clipboardCellContent1, DataGridClipboardCellContent clipboardCellContent2);
    public static bool op_Inequality(DataGridClipboardCellContent clipboardCellContent1, DataGridClipboardCellContent clipboardCellContent2);
}
public enum System.Windows.Controls.DataGridClipboardCopyMode : Enum {
    public int value__;
    public static DataGridClipboardCopyMode None;
    public static DataGridClipboardCopyMode ExcludeHeader;
    public static DataGridClipboardCopyMode IncludeHeader;
}
public abstract class System.Windows.Controls.DataGridColumn : DependencyObject {
    public static DependencyProperty ActualWidthProperty;
    public static DependencyProperty CanUserReorderProperty;
    public static DependencyProperty CanUserResizeProperty;
    public static DependencyProperty CanUserSortProperty;
    public static DependencyProperty CellStyleProperty;
    public static DependencyProperty DisplayIndexProperty;
    public static DependencyProperty DragIndicatorStyleProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty HeaderStyleProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    public static DependencyProperty IsAutoGeneratedProperty;
    public static DependencyProperty IsFrozenProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty MaxWidthProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty SortDirectionProperty;
    public static DependencyProperty SortMemberPathProperty;
    public static DependencyProperty VisibilityProperty;
    public static DependencyProperty WidthProperty;
    public double ActualWidth { get; }
    public bool CanUserReorder { get; public set; }
    public bool CanUserResize { get; public set; }
    public bool CanUserSort { get; public set; }
    public Style CellStyle { get; public set; }
    public BindingBase ClipboardContentBinding { get; public set; }
    protected internal DataGrid DataGridOwner { get; }
    public int DisplayIndex { get; public set; }
    public Style DragIndicatorStyle { get; public set; }
    public object Header { get; public set; }
    public string HeaderStringFormat { get; public set; }
    public Style HeaderStyle { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    public bool IsAutoGenerated { get; }
    public bool IsFrozen { get; }
    public bool IsReadOnly { get; public set; }
    public double MaxWidth { get; public set; }
    public double MinWidth { get; public set; }
    public Nullable`1<ListSortDirection> SortDirection { get; public set; }
    public string SortMemberPath { get; public set; }
    public Visibility Visibility { get; public set; }
    public DataGridLength Width { get; public set; }
    public double get_ActualWidth();
    public bool get_CanUserReorder();
    public void set_CanUserReorder(bool value);
    public bool get_CanUserResize();
    public void set_CanUserResize(bool value);
    public bool get_CanUserSort();
    public void set_CanUserSort(bool value);
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    public virtual BindingBase get_ClipboardContentBinding();
    public virtual void set_ClipboardContentBinding(BindingBase value);
    protected internal DataGrid get_DataGridOwner();
    public int get_DisplayIndex();
    public void set_DisplayIndex(int value);
    public Style get_DragIndicatorStyle();
    public void set_DragIndicatorStyle(Style value);
    public object get_Header();
    public void set_Header(object value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public bool get_IsAutoGenerated();
    public bool get_IsFrozen();
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public double get_MaxWidth();
    public void set_MaxWidth(double value);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    public Nullable`1<ListSortDirection> get_SortDirection();
    public void set_SortDirection(Nullable`1<ListSortDirection> value);
    public string get_SortMemberPath();
    public void set_SortMemberPath(string value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public DataGridLength get_Width();
    public void set_Width(DataGridLength value);
    public void add_CopyingCellClipboardContent(EventHandler`1<DataGridCellClipboardEventArgs> value);
    public void remove_CopyingCellClipboardContent(EventHandler`1<DataGridCellClipboardEventArgs> value);
    public void add_PastingCellClipboardContent(EventHandler`1<DataGridCellClipboardEventArgs> value);
    public void remove_PastingCellClipboardContent(EventHandler`1<DataGridCellClipboardEventArgs> value);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual bool CommitCellEdit(FrameworkElement editingElement);
    protected abstract virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected abstract virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    public FrameworkElement GetCellContent(object dataItem);
    public FrameworkElement GetCellContent(DataGridRow dataGridRow);
    protected void NotifyPropertyChanged(string propertyName);
    protected virtual bool OnCoerceIsReadOnly(bool baseValue);
    public virtual object OnCopyingCellClipboardContent(object item);
    public virtual void OnPastingCellClipboardContent(object item, object cellContent);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public class System.Windows.Controls.DataGridColumnEventArgs : EventArgs {
    public DataGridColumn Column { get; }
    public DataGridColumnEventArgs(DataGridColumn column);
    public DataGridColumn get_Column();
}
public class System.Windows.Controls.DataGridColumnReorderingEventArgs : DataGridColumnEventArgs {
    public bool Cancel { get; public set; }
    public Control DragIndicator { get; public set; }
    public Control DropLocationIndicator { get; public set; }
    public DataGridColumnReorderingEventArgs(DataGridColumn dataGridColumn);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public Control get_DragIndicator();
    public void set_DragIndicator(Control value);
    public Control get_DropLocationIndicator();
    public void set_DropLocationIndicator(Control value);
}
public class System.Windows.Controls.DataGridComboBoxColumn : DataGridColumn {
    public static DependencyProperty DisplayMemberPathProperty;
    public static DependencyProperty EditingElementStyleProperty;
    public static DependencyProperty ElementStyleProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty SelectedValuePathProperty;
    public BindingBase ClipboardContentBinding { get; public set; }
    public static Style DefaultEditingElementStyle { get; }
    public static Style DefaultElementStyle { get; }
    public string DisplayMemberPath { get; public set; }
    public Style EditingElementStyle { get; public set; }
    public Style ElementStyle { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public BindingBase SelectedItemBinding { get; public set; }
    public BindingBase SelectedValueBinding { get; public set; }
    public string SelectedValuePath { get; public set; }
    public BindingBase TextBinding { get; public set; }
    public static ComponentResourceKey TextBlockComboBoxStyleKey { get; }
    public virtual BindingBase get_ClipboardContentBinding();
    public virtual void set_ClipboardContentBinding(BindingBase value);
    public static Style get_DefaultEditingElementStyle();
    public static Style get_DefaultElementStyle();
    public string get_DisplayMemberPath();
    public void set_DisplayMemberPath(string value);
    public Style get_EditingElementStyle();
    public void set_EditingElementStyle(Style value);
    public Style get_ElementStyle();
    public void set_ElementStyle(Style value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public virtual BindingBase get_SelectedItemBinding();
    public virtual void set_SelectedItemBinding(BindingBase value);
    public virtual BindingBase get_SelectedValueBinding();
    public virtual void set_SelectedValueBinding(BindingBase value);
    public string get_SelectedValuePath();
    public void set_SelectedValuePath(string value);
    public virtual BindingBase get_TextBinding();
    public virtual void set_TextBinding(BindingBase value);
    public static ComponentResourceKey get_TextBlockComboBoxStyleKey();
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual bool CommitCellEdit(FrameworkElement editingElement);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual bool OnCoerceIsReadOnly(bool baseValue);
    protected virtual void OnSelectedItemBindingChanged(BindingBase oldBinding, BindingBase newBinding);
    protected virtual void OnSelectedValueBindingChanged(BindingBase oldBinding, BindingBase newBinding);
    protected virtual void OnTextBindingChanged(BindingBase oldBinding, BindingBase newBinding);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public enum System.Windows.Controls.DataGridEditAction : Enum {
    public int value__;
    public static DataGridEditAction Cancel;
    public static DataGridEditAction Commit;
}
public enum System.Windows.Controls.DataGridEditingUnit : Enum {
    public int value__;
    public static DataGridEditingUnit Cell;
    public static DataGridEditingUnit Row;
}
public enum System.Windows.Controls.DataGridGridLinesVisibility : Enum {
    public int value__;
    public static DataGridGridLinesVisibility All;
    public static DataGridGridLinesVisibility Horizontal;
    public static DataGridGridLinesVisibility None;
    public static DataGridGridLinesVisibility Vertical;
}
[FlagsAttribute]
public enum System.Windows.Controls.DataGridHeadersVisibility : Enum {
    public int value__;
    public static DataGridHeadersVisibility None;
    public static DataGridHeadersVisibility Column;
    public static DataGridHeadersVisibility Row;
    public static DataGridHeadersVisibility All;
}
public class System.Windows.Controls.DataGridHyperlinkColumn : DataGridBoundColumn {
    public static DependencyProperty TargetNameProperty;
    public BindingBase ContentBinding { get; public set; }
    public static Style DefaultEditingElementStyle { get; }
    public static Style DefaultElementStyle { get; }
    public string TargetName { get; public set; }
    public BindingBase get_ContentBinding();
    public void set_ContentBinding(BindingBase value);
    public static Style get_DefaultEditingElementStyle();
    public static Style get_DefaultElementStyle();
    public string get_TargetName();
    public void set_TargetName(string value);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual bool CommitCellEdit(FrameworkElement editingElement);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual void OnContentBindingChanged(BindingBase oldBinding, BindingBase newBinding);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
[TypeConverterAttribute("System.Windows.Controls.DataGridLengthConverter")]
public class System.Windows.Controls.DataGridLength : ValueType {
    public static DataGridLength Auto { get; }
    public double DesiredValue { get; }
    public double DisplayValue { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsSizeToCells { get; }
    public bool IsSizeToHeader { get; }
    public bool IsStar { get; }
    public static DataGridLength SizeToCells { get; }
    public static DataGridLength SizeToHeader { get; }
    public DataGridLengthUnitType UnitType { get; }
    public double Value { get; }
    public DataGridLength(double pixels);
    public DataGridLength(double value, DataGridLengthUnitType type);
    public DataGridLength(double value, DataGridLengthUnitType type, double desiredValue, double displayValue);
    public static DataGridLength get_Auto();
    public double get_DesiredValue();
    public double get_DisplayValue();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsSizeToCells();
    public bool get_IsSizeToHeader();
    public bool get_IsStar();
    public static DataGridLength get_SizeToCells();
    public static DataGridLength get_SizeToHeader();
    public DataGridLengthUnitType get_UnitType();
    public double get_Value();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DataGridLength other);
    public virtual int GetHashCode();
    public static bool op_Equality(DataGridLength gl1, DataGridLength gl2);
    public static DataGridLength op_Implicit(double value);
    public static bool op_Inequality(DataGridLength gl1, DataGridLength gl2);
    public virtual string ToString();
}
public class System.Windows.Controls.DataGridLengthConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Windows.Controls.DataGridLengthUnitType : Enum {
    public int value__;
    public static DataGridLengthUnitType Auto;
    public static DataGridLengthUnitType Pixel;
    public static DataGridLengthUnitType SizeToCells;
    public static DataGridLengthUnitType SizeToHeader;
    public static DataGridLengthUnitType Star;
}
public class System.Windows.Controls.DataGridPreparingCellForEditEventArgs : EventArgs {
    public DataGridColumn Column { get; }
    public FrameworkElement EditingElement { get; }
    public RoutedEventArgs EditingEventArgs { get; }
    public DataGridRow Row { get; }
    public DataGridPreparingCellForEditEventArgs(DataGridColumn column, DataGridRow row, RoutedEventArgs editingEventArgs, FrameworkElement editingElement);
    public DataGridColumn get_Column();
    public FrameworkElement get_EditingElement();
    public RoutedEventArgs get_EditingEventArgs();
    public DataGridRow get_Row();
}
public class System.Windows.Controls.DataGridRow : Control {
    public static DependencyProperty AlternationIndexProperty;
    public static DependencyProperty DetailsTemplateProperty;
    public static DependencyProperty DetailsTemplateSelectorProperty;
    public static DependencyProperty DetailsVisibilityProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderStyleProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    public static DependencyProperty IsEditingProperty;
    public static DependencyProperty IsNewItemProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty ItemProperty;
    public static DependencyProperty ItemsPanelProperty;
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnselectedEvent;
    public static DependencyProperty ValidationErrorTemplateProperty;
    public int AlternationIndex { get; }
    public DataTemplate DetailsTemplate { get; public set; }
    public DataTemplateSelector DetailsTemplateSelector { get; public set; }
    public Visibility DetailsVisibility { get; public set; }
    public object Header { get; public set; }
    public Style HeaderStyle { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    public bool IsEditing { get; }
    public bool IsNewItem { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSelected { get; public set; }
    public object Item { get; public set; }
    public ItemsPanelTemplate ItemsPanel { get; public set; }
    public ControlTemplate ValidationErrorTemplate { get; public set; }
    public int get_AlternationIndex();
    public DataTemplate get_DetailsTemplate();
    public void set_DetailsTemplate(DataTemplate value);
    public DataTemplateSelector get_DetailsTemplateSelector();
    public void set_DetailsTemplateSelector(DataTemplateSelector value);
    public Visibility get_DetailsVisibility();
    public void set_DetailsVisibility(Visibility value);
    public object get_Header();
    public void set_Header(object value);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public bool get_IsEditing();
    public bool get_IsNewItem();
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public object get_Item();
    public void set_Item(object value);
    public ItemsPanelTemplate get_ItemsPanel();
    public void set_ItemsPanel(ItemsPanelTemplate value);
    public ControlTemplate get_ValidationErrorTemplate();
    public void set_ValidationErrorTemplate(ControlTemplate value);
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    public void add_Unselected(RoutedEventHandler value);
    public void remove_Unselected(RoutedEventHandler value);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    public int GetIndex();
    public static DataGridRow GetRowContainingElement(FrameworkElement element);
    protected internal virtual void OnColumnsChanged(ObservableCollection`1<DataGridColumn> columns, NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    protected virtual void OnItemChanged(object oldItem, object newItem);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual void OnUnselected(RoutedEventArgs e);
}
public class System.Windows.Controls.DataGridRowClipboardEventArgs : EventArgs {
    public List`1<DataGridClipboardCellContent> ClipboardRowContent { get; }
    public int EndColumnDisplayIndex { get; }
    public bool IsColumnHeadersRow { get; }
    public object Item { get; }
    public int StartColumnDisplayIndex { get; }
    public DataGridRowClipboardEventArgs(object item, int startColumnDisplayIndex, int endColumnDisplayIndex, bool isColumnHeadersRow);
    public List`1<DataGridClipboardCellContent> get_ClipboardRowContent();
    public int get_EndColumnDisplayIndex();
    public bool get_IsColumnHeadersRow();
    public object get_Item();
    public int get_StartColumnDisplayIndex();
    public string FormatClipboardCellValues(string format);
}
public class System.Windows.Controls.DataGridRowDetailsEventArgs : EventArgs {
    public FrameworkElement DetailsElement { get; }
    public DataGridRow Row { get; }
    public DataGridRowDetailsEventArgs(DataGridRow row, FrameworkElement detailsElement);
    public FrameworkElement get_DetailsElement();
    public DataGridRow get_Row();
}
public enum System.Windows.Controls.DataGridRowDetailsVisibilityMode : Enum {
    public int value__;
    public static DataGridRowDetailsVisibilityMode Collapsed;
    public static DataGridRowDetailsVisibilityMode Visible;
    public static DataGridRowDetailsVisibilityMode VisibleWhenSelected;
}
public class System.Windows.Controls.DataGridRowEditEndingEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public DataGridEditAction EditAction { get; }
    public DataGridRow Row { get; }
    public DataGridRowEditEndingEventArgs(DataGridRow row, DataGridEditAction editAction);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public DataGridEditAction get_EditAction();
    public DataGridRow get_Row();
}
public class System.Windows.Controls.DataGridRowEventArgs : EventArgs {
    public DataGridRow Row { get; }
    public DataGridRowEventArgs(DataGridRow row);
    public DataGridRow get_Row();
}
public enum System.Windows.Controls.DataGridSelectionMode : Enum {
    public int value__;
    public static DataGridSelectionMode Single;
    public static DataGridSelectionMode Extended;
}
public enum System.Windows.Controls.DataGridSelectionUnit : Enum {
    public int value__;
    public static DataGridSelectionUnit Cell;
    public static DataGridSelectionUnit FullRow;
    public static DataGridSelectionUnit CellOrRowHeader;
}
public class System.Windows.Controls.DataGridSortingEventArgs : DataGridColumnEventArgs {
    public bool Handled { get; public set; }
    public DataGridSortingEventArgs(DataGridColumn column);
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class System.Windows.Controls.DataGridSortingEventHandler : MulticastDelegate {
    public DataGridSortingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridSortingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridSortingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.DataGridTemplateColumn : DataGridColumn {
    public static DependencyProperty CellEditingTemplateProperty;
    public static DependencyProperty CellEditingTemplateSelectorProperty;
    public static DependencyProperty CellTemplateProperty;
    public static DependencyProperty CellTemplateSelectorProperty;
    public DataTemplate CellEditingTemplate { get; public set; }
    public DataTemplateSelector CellEditingTemplateSelector { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    public DataTemplateSelector CellTemplateSelector { get; public set; }
    public DataTemplate get_CellEditingTemplate();
    public void set_CellEditingTemplate(DataTemplate value);
    public DataTemplateSelector get_CellEditingTemplateSelector();
    public void set_CellEditingTemplateSelector(DataTemplateSelector value);
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    public DataTemplateSelector get_CellTemplateSelector();
    public void set_CellTemplateSelector(DataTemplateSelector value);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public class System.Windows.Controls.DataGridTextColumn : DataGridBoundColumn {
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static Style DefaultEditingElementStyle { get; }
    public static Style DefaultElementStyle { get; }
    public FontFamily FontFamily { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    public static Style get_DefaultEditingElementStyle();
    public static Style get_DefaultElementStyle();
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    protected virtual void CancelCellEdit(FrameworkElement editingElement, object uneditedValue);
    protected virtual bool CommitCellEdit(FrameworkElement editingElement);
    protected virtual FrameworkElement GenerateEditingElement(DataGridCell cell, object dataItem);
    protected virtual FrameworkElement GenerateElement(DataGridCell cell, object dataItem);
    protected virtual object PrepareCellForEdit(FrameworkElement editingElement, RoutedEventArgs editingEventArgs);
    protected internal virtual void RefreshCellContent(FrameworkElement element, string propertyName);
}
public class System.Windows.Controls.DataTemplateSelector : object {
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.DatePicker : Control {
    public static DependencyProperty CalendarStyleProperty;
    public static DependencyProperty DisplayDateEndProperty;
    public static DependencyProperty DisplayDateProperty;
    public static DependencyProperty DisplayDateStartProperty;
    public static DependencyProperty FirstDayOfWeekProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty IsTodayHighlightedProperty;
    public static RoutedEvent SelectedDateChangedEvent;
    public static DependencyProperty SelectedDateFormatProperty;
    public static DependencyProperty SelectedDateProperty;
    public static DependencyProperty TextProperty;
    public CalendarBlackoutDatesCollection BlackoutDates { get; }
    public Style CalendarStyle { get; public set; }
    public DateTime DisplayDate { get; public set; }
    public Nullable`1<DateTime> DisplayDateEnd { get; public set; }
    public Nullable`1<DateTime> DisplayDateStart { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    protected internal bool HasEffectiveKeyboardFocus { get; }
    public bool IsDropDownOpen { get; public set; }
    public bool IsTodayHighlighted { get; public set; }
    public Nullable`1<DateTime> SelectedDate { get; public set; }
    public DatePickerFormat SelectedDateFormat { get; public set; }
    public string Text { get; public set; }
    public CalendarBlackoutDatesCollection get_BlackoutDates();
    public Style get_CalendarStyle();
    public void set_CalendarStyle(Style value);
    public DateTime get_DisplayDate();
    public void set_DisplayDate(DateTime value);
    public Nullable`1<DateTime> get_DisplayDateEnd();
    public void set_DisplayDateEnd(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_DisplayDateStart();
    public void set_DisplayDateStart(Nullable`1<DateTime> value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    protected internal virtual bool get_HasEffectiveKeyboardFocus();
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_IsTodayHighlighted();
    public void set_IsTodayHighlighted(bool value);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    public DatePickerFormat get_SelectedDateFormat();
    public void set_SelectedDateFormat(DatePickerFormat value);
    public string get_Text();
    public void set_Text(string value);
    public void add_CalendarClosed(RoutedEventHandler value);
    public void remove_CalendarClosed(RoutedEventHandler value);
    public void add_CalendarOpened(RoutedEventHandler value);
    public void remove_CalendarOpened(RoutedEventHandler value);
    public void add_DateValidationError(EventHandler`1<DatePickerDateValidationErrorEventArgs> value);
    public void remove_DateValidationError(EventHandler`1<DatePickerDateValidationErrorEventArgs> value);
    public void add_SelectedDateChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void remove_SelectedDateChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public virtual void OnApplyTemplate();
    protected virtual void OnCalendarClosed(RoutedEventArgs e);
    protected virtual void OnCalendarOpened(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDateValidationError(DatePickerDateValidationErrorEventArgs e);
    protected virtual void OnSelectedDateChanged(SelectionChangedEventArgs e);
    public virtual string ToString();
}
public class System.Windows.Controls.DatePickerDateValidationErrorEventArgs : EventArgs {
    public Exception Exception { get; }
    public string Text { get; }
    public bool ThrowException { get; public set; }
    public DatePickerDateValidationErrorEventArgs(Exception exception, string text);
    public Exception get_Exception();
    public string get_Text();
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
}
public enum System.Windows.Controls.DatePickerFormat : Enum {
    public int value__;
    public static DatePickerFormat Long;
    public static DatePickerFormat Short;
}
[LocalizabilityAttribute("16")]
[ContentPropertyAttribute("Child")]
public class System.Windows.Controls.Decorator : FrameworkElement {
    [DefaultValueAttribute("")]
public UIElement Child { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    public virtual UIElement get_Child();
    public virtual void set_Child(UIElement value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[LocalizabilityAttribute("16")]
public abstract class System.Windows.Controls.DefinitionBase : FrameworkContentElement {
    public static DependencyProperty SharedSizeGroupProperty;
    public string SharedSizeGroup { get; public set; }
    public string get_SharedSizeGroup();
    public void set_SharedSizeGroup(string value);
}
public enum System.Windows.Controls.Dock : Enum {
    public int value__;
    public static Dock Left;
    public static Dock Top;
    public static Dock Right;
    public static Dock Bottom;
}
public class System.Windows.Controls.DockPanel : Panel {
    public static DependencyProperty DockProperty;
    public static DependencyProperty LastChildFillProperty;
    public bool LastChildFill { get; public set; }
    public bool get_LastChildFill();
    public void set_LastChildFill(bool value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static Dock GetDock(UIElement element);
    protected virtual Size MeasureOverride(Size constraint);
    public static void SetDock(UIElement element, Dock dock);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.DocumentViewer : DocumentViewerBase {
    public static DependencyProperty CanDecreaseZoomProperty;
    public static DependencyProperty CanIncreaseZoomProperty;
    public static DependencyProperty CanMoveDownProperty;
    public static DependencyProperty CanMoveLeftProperty;
    public static DependencyProperty CanMoveRightProperty;
    public static DependencyProperty CanMoveUpProperty;
    public static DependencyProperty ExtentHeightProperty;
    public static DependencyProperty ExtentWidthProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty HorizontalPageSpacingProperty;
    public static DependencyProperty MaxPagesAcrossProperty;
    public static DependencyProperty ShowPageBordersProperty;
    public static DependencyProperty VerticalOffsetProperty;
    public static DependencyProperty VerticalPageSpacingProperty;
    public static DependencyProperty ViewportHeightProperty;
    public static DependencyProperty ViewportWidthProperty;
    public static DependencyProperty ZoomProperty;
    public bool CanDecreaseZoom { get; }
    public bool CanIncreaseZoom { get; }
    public bool CanMoveDown { get; }
    public bool CanMoveLeft { get; }
    public bool CanMoveRight { get; }
    public bool CanMoveUp { get; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public static RoutedUICommand FitToHeightCommand { get; }
    public static RoutedUICommand FitToMaxPagesAcrossCommand { get; }
    public static RoutedUICommand FitToWidthCommand { get; }
    public double HorizontalOffset { get; public set; }
    public double HorizontalPageSpacing { get; public set; }
    public int MaxPagesAcross { get; public set; }
    public bool ShowPageBorders { get; public set; }
    public double VerticalOffset { get; public set; }
    public double VerticalPageSpacing { get; public set; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    public static RoutedUICommand ViewThumbnailsCommand { get; }
    public double Zoom { get; public set; }
    public bool get_CanDecreaseZoom();
    public bool get_CanIncreaseZoom();
    public bool get_CanMoveDown();
    public bool get_CanMoveLeft();
    public bool get_CanMoveRight();
    public bool get_CanMoveUp();
    public double get_ExtentHeight();
    public double get_ExtentWidth();
    public static RoutedUICommand get_FitToHeightCommand();
    public static RoutedUICommand get_FitToMaxPagesAcrossCommand();
    public static RoutedUICommand get_FitToWidthCommand();
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public double get_HorizontalPageSpacing();
    public void set_HorizontalPageSpacing(double value);
    public int get_MaxPagesAcross();
    public void set_MaxPagesAcross(int value);
    public bool get_ShowPageBorders();
    public void set_ShowPageBorders(bool value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public double get_VerticalPageSpacing();
    public void set_VerticalPageSpacing(double value);
    public double get_ViewportHeight();
    public double get_ViewportWidth();
    public static RoutedUICommand get_ViewThumbnailsCommand();
    public double get_Zoom();
    public void set_Zoom(double value);
    public void DecreaseZoom();
    public void Find();
    public void FitToHeight();
    public void FitToMaxPagesAcross();
    public void FitToMaxPagesAcross(int pagesAcross);
    public void FitToWidth();
    protected virtual ReadOnlyCollection`1<DocumentPageView> GetPageViewsCollection(Boolean& changed);
    public void IncreaseZoom();
    public void MoveDown();
    public void MoveLeft();
    public void MoveRight();
    public void MoveUp();
    public virtual void OnApplyTemplate();
    protected virtual void OnBringIntoView(DependencyObject element, Rect rect, int pageNumber);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDecreaseZoomCommand();
    protected virtual void OnDocumentChanged();
    protected virtual void OnFindCommand();
    protected virtual void OnFirstPageCommand();
    protected virtual void OnFitToHeightCommand();
    protected virtual void OnFitToMaxPagesAcrossCommand();
    protected virtual void OnFitToMaxPagesAcrossCommand(int pagesAcross);
    protected virtual void OnFitToWidthCommand();
    protected virtual void OnGoToPageCommand(int pageNumber);
    protected virtual void OnIncreaseZoomCommand();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnLastPageCommand();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMoveDownCommand();
    protected virtual void OnMoveLeftCommand();
    protected virtual void OnMoveRightCommand();
    protected virtual void OnMoveUpCommand();
    protected virtual void OnNextPageCommand();
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviousPageCommand();
    protected virtual void OnScrollPageDownCommand();
    protected virtual void OnScrollPageLeftCommand();
    protected virtual void OnScrollPageRightCommand();
    protected virtual void OnScrollPageUpCommand();
    protected virtual void OnViewThumbnailsCommand();
    public void ScrollPageDown();
    public void ScrollPageLeft();
    public void ScrollPageRight();
    public void ScrollPageUp();
    public void ViewThumbnails();
}
public class System.Windows.Controls.ExceptionValidationRule : ValidationRule {
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo);
}
public enum System.Windows.Controls.ExpandDirection : Enum {
    public int value__;
    public static ExpandDirection Down;
    public static ExpandDirection Up;
    public static ExpandDirection Left;
    public static ExpandDirection Right;
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.Expander : HeaderedContentControl {
    public static RoutedEvent CollapsedEvent;
    public static DependencyProperty ExpandDirectionProperty;
    public static RoutedEvent ExpandedEvent;
    public static DependencyProperty IsExpandedProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public ExpandDirection ExpandDirection { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsExpanded { get; public set; }
    public ExpandDirection get_ExpandDirection();
    public void set_ExpandDirection(ExpandDirection value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public void add_Collapsed(RoutedEventHandler value);
    public void remove_Collapsed(RoutedEventHandler value);
    public void add_Expanded(RoutedEventHandler value);
    public void remove_Expanded(RoutedEventHandler value);
    public virtual void OnApplyTemplate();
    protected virtual void OnCollapsed();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnExpanded();
}
[TemplatePartAttribute]
public class System.Windows.Controls.FlowDocumentPageViewer : DocumentViewerBase {
    public static DependencyProperty CanDecreaseZoomProperty;
    protected static DependencyPropertyKey CanDecreaseZoomPropertyKey;
    public static DependencyProperty CanIncreaseZoomProperty;
    protected static DependencyPropertyKey CanIncreaseZoomPropertyKey;
    public static DependencyProperty IsInactiveSelectionHighlightEnabledProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static DependencyProperty MaxZoomProperty;
    public static DependencyProperty MinZoomProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static DependencyProperty SelectionOpacityProperty;
    public static DependencyProperty ZoomIncrementProperty;
    public static DependencyProperty ZoomProperty;
    public bool CanDecreaseZoom { get; }
    public bool CanIncreaseZoom { get; }
    public bool IsInactiveSelectionHighlightEnabled { get; public set; }
    public bool IsSelectionActive { get; }
    public double MaxZoom { get; public set; }
    public double MinZoom { get; public set; }
    public TextSelection Selection { get; }
    public Brush SelectionBrush { get; public set; }
    public double SelectionOpacity { get; public set; }
    public double Zoom { get; public set; }
    public double ZoomIncrement { get; public set; }
    public virtual bool get_CanDecreaseZoom();
    public virtual bool get_CanIncreaseZoom();
    public bool get_IsInactiveSelectionHighlightEnabled();
    public void set_IsInactiveSelectionHighlightEnabled(bool value);
    public bool get_IsSelectionActive();
    public double get_MaxZoom();
    public void set_MaxZoom(double value);
    public double get_MinZoom();
    public void set_MinZoom(double value);
    public TextSelection get_Selection();
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public double get_SelectionOpacity();
    public void set_SelectionOpacity(double value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public double get_ZoomIncrement();
    public void set_ZoomIncrement(double value);
    public void DecreaseZoom();
    public void Find();
    public void IncreaseZoom();
    public virtual void OnApplyTemplate();
    protected virtual void OnCancelPrintCommand();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDecreaseZoomCommand();
    protected virtual void OnDocumentChanged();
    protected virtual void OnFindCommand();
    protected virtual void OnFirstPageCommand();
    protected virtual void OnGoToPageCommand(int pageNumber);
    protected virtual void OnIncreaseZoomCommand();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnLastPageCommand();
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnNextPageCommand();
    protected virtual void OnPageViewsChanged();
    protected virtual void OnPreviousPageCommand();
    protected virtual void OnPrintCommand();
    protected virtual void OnPrintCompleted();
}
[ContentPropertyAttribute("Document")]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.FlowDocumentReader : Control {
    public static DependencyProperty CanDecreaseZoomProperty;
    public static DependencyProperty CanGoToNextPageProperty;
    public static DependencyProperty CanGoToPreviousPageProperty;
    public static DependencyProperty CanIncreaseZoomProperty;
    public static DependencyProperty DocumentProperty;
    public static DependencyProperty IsFindEnabledProperty;
    public static DependencyProperty IsInactiveSelectionHighlightEnabledProperty;
    public static DependencyProperty IsPageViewEnabledProperty;
    public static DependencyProperty IsPrintEnabledProperty;
    public static DependencyProperty IsScrollViewEnabledProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static DependencyProperty IsTwoPageViewEnabledProperty;
    public static DependencyProperty MaxZoomProperty;
    public static DependencyProperty MinZoomProperty;
    public static DependencyProperty PageCountProperty;
    public static DependencyProperty PageNumberProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static DependencyProperty SelectionOpacityProperty;
    public static RoutedUICommand SwitchViewingModeCommand;
    public static DependencyProperty ViewingModeProperty;
    public static DependencyProperty ZoomIncrementProperty;
    public static DependencyProperty ZoomProperty;
    public bool CanDecreaseZoom { get; }
    public bool CanGoToNextPage { get; }
    public bool CanGoToPreviousPage { get; }
    public bool CanIncreaseZoom { get; }
    public FlowDocument Document { get; public set; }
    public bool IsFindEnabled { get; public set; }
    public bool IsInactiveSelectionHighlightEnabled { get; public set; }
    public bool IsPageViewEnabled { get; public set; }
    public bool IsPrintEnabled { get; public set; }
    public bool IsScrollViewEnabled { get; public set; }
    public bool IsSelectionActive { get; }
    public bool IsTwoPageViewEnabled { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public double MaxZoom { get; public set; }
    public double MinZoom { get; public set; }
    public int PageCount { get; }
    public int PageNumber { get; }
    public TextSelection Selection { get; }
    public Brush SelectionBrush { get; public set; }
    public double SelectionOpacity { get; public set; }
    public FlowDocumentReaderViewingMode ViewingMode { get; public set; }
    public double Zoom { get; public set; }
    public double ZoomIncrement { get; public set; }
    public bool get_CanDecreaseZoom();
    public bool get_CanGoToNextPage();
    public bool get_CanGoToPreviousPage();
    public bool get_CanIncreaseZoom();
    public FlowDocument get_Document();
    public void set_Document(FlowDocument value);
    public bool get_IsFindEnabled();
    public void set_IsFindEnabled(bool value);
    public bool get_IsInactiveSelectionHighlightEnabled();
    public void set_IsInactiveSelectionHighlightEnabled(bool value);
    public bool get_IsPageViewEnabled();
    public void set_IsPageViewEnabled(bool value);
    public bool get_IsPrintEnabled();
    public void set_IsPrintEnabled(bool value);
    public bool get_IsScrollViewEnabled();
    public void set_IsScrollViewEnabled(bool value);
    public bool get_IsSelectionActive();
    public bool get_IsTwoPageViewEnabled();
    public void set_IsTwoPageViewEnabled(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public double get_MaxZoom();
    public void set_MaxZoom(double value);
    public double get_MinZoom();
    public void set_MinZoom(double value);
    public int get_PageCount();
    public int get_PageNumber();
    public TextSelection get_Selection();
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public double get_SelectionOpacity();
    public void set_SelectionOpacity(double value);
    public FlowDocumentReaderViewingMode get_ViewingMode();
    public void set_ViewingMode(FlowDocumentReaderViewingMode value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public double get_ZoomIncrement();
    public void set_ZoomIncrement(double value);
    public void CancelPrint();
    public bool CanGoToPage(int pageNumber);
    public void DecreaseZoom();
    public void Find();
    public void IncreaseZoom();
    public virtual void OnApplyTemplate();
    protected virtual void OnCancelPrintCommand();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDecreaseZoomCommand();
    protected virtual void OnDpiChanged(DpiScale oldDpiScaleInfo, DpiScale newDpiScaleInfo);
    protected virtual void OnFindCommand();
    protected virtual void OnIncreaseZoomCommand();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPrintCommand();
    protected virtual void OnPrintCompleted();
    protected virtual void OnSwitchViewingModeCommand(FlowDocumentReaderViewingMode viewingMode);
    public void Print();
    public void SwitchViewingMode(FlowDocumentReaderViewingMode viewingMode);
    protected virtual void SwitchViewingModeCore(FlowDocumentReaderViewingMode viewingMode);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public enum System.Windows.Controls.FlowDocumentReaderViewingMode : Enum {
    public int value__;
    public static FlowDocumentReaderViewingMode Page;
    public static FlowDocumentReaderViewingMode TwoPage;
    public static FlowDocumentReaderViewingMode Scroll;
}
[ContentPropertyAttribute("Document")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.FlowDocumentScrollViewer : Control {
    public static DependencyProperty CanDecreaseZoomProperty;
    public static DependencyProperty CanIncreaseZoomProperty;
    public static DependencyProperty DocumentProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty IsInactiveSelectionHighlightEnabledProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static DependencyProperty IsSelectionEnabledProperty;
    public static DependencyProperty IsToolBarVisibleProperty;
    public static DependencyProperty MaxZoomProperty;
    public static DependencyProperty MinZoomProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static DependencyProperty SelectionOpacityProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public static DependencyProperty ZoomIncrementProperty;
    public static DependencyProperty ZoomProperty;
    public bool CanDecreaseZoom { get; }
    public bool CanIncreaseZoom { get; }
    public FlowDocument Document { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public bool IsInactiveSelectionHighlightEnabled { get; public set; }
    public bool IsSelectionActive { get; }
    public bool IsSelectionEnabled { get; public set; }
    public bool IsToolBarVisible { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public double MaxZoom { get; public set; }
    public double MinZoom { get; public set; }
    public TextSelection Selection { get; }
    public Brush SelectionBrush { get; public set; }
    public double SelectionOpacity { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public double Zoom { get; public set; }
    public double ZoomIncrement { get; public set; }
    public bool get_CanDecreaseZoom();
    public bool get_CanIncreaseZoom();
    public FlowDocument get_Document();
    public void set_Document(FlowDocument value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public bool get_IsInactiveSelectionHighlightEnabled();
    public void set_IsInactiveSelectionHighlightEnabled(bool value);
    public bool get_IsSelectionActive();
    public bool get_IsSelectionEnabled();
    public void set_IsSelectionEnabled(bool value);
    public bool get_IsToolBarVisible();
    public void set_IsToolBarVisible(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public double get_MaxZoom();
    public void set_MaxZoom(double value);
    public double get_MinZoom();
    public void set_MinZoom(double value);
    public TextSelection get_Selection();
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public double get_SelectionOpacity();
    public void set_SelectionOpacity(double value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public double get_ZoomIncrement();
    public void set_ZoomIncrement(double value);
    public void CancelPrint();
    public void DecreaseZoom();
    public void Find();
    public void IncreaseZoom();
    public virtual void OnApplyTemplate();
    protected virtual void OnCancelPrintCommand();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDecreaseZoomCommand();
    protected virtual void OnFindCommand();
    protected virtual void OnIncreaseZoomCommand();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPrintCommand();
    protected virtual void OnPrintCompleted();
    public void Print();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[DefaultEventAttribute("Navigated")]
[DefaultPropertyAttribute("Source")]
[LocalizabilityAttribute("16")]
[ContentPropertyAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Frame : ContentControl {
    public static DependencyProperty BackStackProperty;
    public static DependencyProperty CanGoBackProperty;
    public static DependencyProperty CanGoForwardProperty;
    public static DependencyProperty ForwardStackProperty;
    public static DependencyProperty JournalOwnershipProperty;
    public static DependencyProperty NavigationUIVisibilityProperty;
    public static DependencyProperty SandboxExternalContentProperty;
    public static DependencyProperty SourceProperty;
    public IEnumerable BackStack { get; }
    protected Uri BaseUri { get; protected set; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public Uri CurrentSource { get; }
    public IEnumerable ForwardStack { get; }
    public JournalOwnership JournalOwnership { get; public set; }
    public NavigationService NavigationService { get; }
    public NavigationUIVisibility NavigationUIVisibility { get; public set; }
    public bool SandboxExternalContent { get; public set; }
    [BindableAttribute("True")]
public Uri Source { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public IEnumerable get_BackStack();
    protected virtual Uri get_BaseUri();
    protected virtual void set_BaseUri(Uri value);
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    public Uri get_CurrentSource();
    public IEnumerable get_ForwardStack();
    public JournalOwnership get_JournalOwnership();
    public void set_JournalOwnership(JournalOwnership value);
    public NavigationService get_NavigationService();
    public NavigationUIVisibility get_NavigationUIVisibility();
    public void set_NavigationUIVisibility(NavigationUIVisibility value);
    public bool get_SandboxExternalContent();
    public void set_SandboxExternalContent(bool value);
    public Uri get_Source();
    public void set_Source(Uri value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public void add_ContentRendered(EventHandler value);
    public void remove_ContentRendered(EventHandler value);
    public void add_FragmentNavigation(FragmentNavigationEventHandler value);
    public void remove_FragmentNavigation(FragmentNavigationEventHandler value);
    public void add_LoadCompleted(LoadCompletedEventHandler value);
    public void remove_LoadCompleted(LoadCompletedEventHandler value);
    public void add_Navigated(NavigatedEventHandler value);
    public void remove_Navigated(NavigatedEventHandler value);
    public void add_Navigating(NavigatingCancelEventHandler value);
    public void remove_Navigating(NavigatingCancelEventHandler value);
    public void add_NavigationFailed(NavigationFailedEventHandler value);
    public void remove_NavigationFailed(NavigationFailedEventHandler value);
    public void add_NavigationProgress(NavigationProgressEventHandler value);
    public void remove_NavigationProgress(NavigationProgressEventHandler value);
    public void add_NavigationStopped(NavigationStoppedEventHandler value);
    public void remove_NavigationStopped(NavigationStoppedEventHandler value);
    public void AddBackEntry(CustomContentState state);
    protected virtual void AddChild(object value);
    protected virtual void AddText(string text);
    public void GoBack();
    public void GoForward();
    public bool Navigate(object content);
    public bool Navigate(object content, object extraData);
    public bool Navigate(Uri source);
    public bool Navigate(Uri source, object extraData);
    public virtual void OnApplyTemplate();
    protected virtual void OnContentRendered(EventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void Refresh();
    public JournalEntry RemoveBackEntry();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeContent();
    public void StopLoading();
}
public class System.Windows.Controls.Grid : Panel {
    public static DependencyProperty ColumnProperty;
    public static DependencyProperty ColumnSpanProperty;
    public static DependencyProperty IsSharedSizeScopeProperty;
    public static DependencyProperty RowProperty;
    public static DependencyProperty RowSpanProperty;
    public static DependencyProperty ShowGridLinesProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public ColumnDefinitionCollection ColumnDefinitions { get; }
    protected internal IEnumerator LogicalChildren { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RowDefinitionCollection RowDefinitions { get; }
    public bool ShowGridLines { get; public set; }
    protected int VisualChildrenCount { get; }
    public ColumnDefinitionCollection get_ColumnDefinitions();
    protected internal virtual IEnumerator get_LogicalChildren();
    public RowDefinitionCollection get_RowDefinitions();
    public bool get_ShowGridLines();
    public void set_ShowGridLines(bool value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static int GetColumn(UIElement element);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static int GetColumnSpan(UIElement element);
    public static bool GetIsSharedSizeScope(UIElement element);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static int GetRow(UIElement element);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static int GetRowSpan(UIElement element);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected internal virtual void OnVisualChildrenChanged(DependencyObject visualAdded, DependencyObject visualRemoved);
    public static void SetColumn(UIElement element, int value);
    public static void SetColumnSpan(UIElement element, int value);
    public static void SetIsSharedSizeScope(UIElement element, bool value);
    public static void SetRow(UIElement element, int value);
    public static void SetRowSpan(UIElement element, int value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeColumnDefinitions();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeRowDefinitions();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public enum System.Windows.Controls.GridResizeBehavior : Enum {
    public int value__;
    public static GridResizeBehavior BasedOnAlignment;
    public static GridResizeBehavior CurrentAndNext;
    public static GridResizeBehavior PreviousAndCurrent;
    public static GridResizeBehavior PreviousAndNext;
}
public enum System.Windows.Controls.GridResizeDirection : Enum {
    public int value__;
    public static GridResizeDirection Auto;
    public static GridResizeDirection Columns;
    public static GridResizeDirection Rows;
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.GridSplitter : Thumb {
    public static DependencyProperty DragIncrementProperty;
    public static DependencyProperty KeyboardIncrementProperty;
    public static DependencyProperty PreviewStyleProperty;
    public static DependencyProperty ResizeBehaviorProperty;
    public static DependencyProperty ResizeDirectionProperty;
    public static DependencyProperty ShowsPreviewProperty;
    public double DragIncrement { get; public set; }
    public double KeyboardIncrement { get; public set; }
    public Style PreviewStyle { get; public set; }
    public GridResizeBehavior ResizeBehavior { get; public set; }
    public GridResizeDirection ResizeDirection { get; public set; }
    public bool ShowsPreview { get; public set; }
    public double get_DragIncrement();
    public void set_DragIncrement(double value);
    public double get_KeyboardIncrement();
    public void set_KeyboardIncrement(double value);
    public Style get_PreviewStyle();
    public void set_PreviewStyle(Style value);
    public GridResizeBehavior get_ResizeBehavior();
    public void set_ResizeBehavior(GridResizeBehavior value);
    public GridResizeDirection get_ResizeDirection();
    public void set_ResizeDirection(GridResizeDirection value);
    public bool get_ShowsPreview();
    public void set_ShowsPreview(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected internal virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
}
[ContentPropertyAttribute("Columns")]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.GridView : ViewBase {
    public static DependencyProperty AllowsColumnReorderProperty;
    public static DependencyProperty ColumnCollectionProperty;
    public static DependencyProperty ColumnHeaderContainerStyleProperty;
    public static DependencyProperty ColumnHeaderContextMenuProperty;
    public static DependencyProperty ColumnHeaderStringFormatProperty;
    public static DependencyProperty ColumnHeaderTemplateProperty;
    public static DependencyProperty ColumnHeaderTemplateSelectorProperty;
    public static DependencyProperty ColumnHeaderToolTipProperty;
    public bool AllowsColumnReorder { get; public set; }
    public Style ColumnHeaderContainerStyle { get; public set; }
    public ContextMenu ColumnHeaderContextMenu { get; public set; }
    public string ColumnHeaderStringFormat { get; public set; }
    public DataTemplate ColumnHeaderTemplate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector ColumnHeaderTemplateSelector { get; public set; }
    public object ColumnHeaderToolTip { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public GridViewColumnCollection Columns { get; }
    protected internal object DefaultStyleKey { get; }
    public static ResourceKey GridViewItemContainerStyleKey { get; }
    public static ResourceKey GridViewScrollViewerStyleKey { get; }
    public static ResourceKey GridViewStyleKey { get; }
    protected internal object ItemContainerDefaultStyleKey { get; }
    public bool get_AllowsColumnReorder();
    public void set_AllowsColumnReorder(bool value);
    public Style get_ColumnHeaderContainerStyle();
    public void set_ColumnHeaderContainerStyle(Style value);
    public ContextMenu get_ColumnHeaderContextMenu();
    public void set_ColumnHeaderContextMenu(ContextMenu value);
    public string get_ColumnHeaderStringFormat();
    public void set_ColumnHeaderStringFormat(string value);
    public DataTemplate get_ColumnHeaderTemplate();
    public void set_ColumnHeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_ColumnHeaderTemplateSelector();
    public void set_ColumnHeaderTemplateSelector(DataTemplateSelector value);
    public object get_ColumnHeaderToolTip();
    public void set_ColumnHeaderToolTip(object value);
    public GridViewColumnCollection get_Columns();
    protected internal virtual object get_DefaultStyleKey();
    public static ResourceKey get_GridViewItemContainerStyleKey();
    public static ResourceKey get_GridViewScrollViewerStyleKey();
    public static ResourceKey get_GridViewStyleKey();
    protected internal virtual object get_ItemContainerDefaultStyleKey();
    protected virtual void AddChild(object column);
    protected virtual void AddText(string text);
    protected internal virtual void ClearItem(ListViewItem item);
    protected internal virtual IViewAutomationPeer GetAutomationPeer(ListView parent);
    public static GridViewColumnCollection GetColumnCollection(DependencyObject element);
    protected internal virtual void PrepareItem(ListViewItem item);
    public static void SetColumnCollection(DependencyObject element, GridViewColumnCollection collection);
    [EditorBrowsableAttribute("1")]
public static bool ShouldSerializeColumnCollection(DependencyObject obj);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object column);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
    public virtual string ToString();
}
[LocalizabilityAttribute("0")]
[ContentPropertyAttribute("Header")]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.GridViewColumn : DependencyObject {
    public static DependencyProperty CellTemplateProperty;
    public static DependencyProperty CellTemplateSelectorProperty;
    public static DependencyProperty HeaderContainerStyleProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    public static DependencyProperty WidthProperty;
    public double ActualWidth { get; }
    public DataTemplate CellTemplate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector CellTemplateSelector { get; public set; }
    public BindingBase DisplayMemberBinding { get; public set; }
    public object Header { get; public set; }
    public Style HeaderContainerStyle { get; public set; }
    public string HeaderStringFormat { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double Width { get; public set; }
    public double get_ActualWidth();
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    public DataTemplateSelector get_CellTemplateSelector();
    public void set_CellTemplateSelector(DataTemplateSelector value);
    public BindingBase get_DisplayMemberBinding();
    public void set_DisplayMemberBinding(BindingBase value);
    public object get_Header();
    public void set_Header(object value);
    public Style get_HeaderContainerStyle();
    public void set_HeaderContainerStyle(Style value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public double get_Width();
    public void set_Width(double value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    public virtual string ToString();
}
public class System.Windows.Controls.GridViewColumnCollection : ObservableCollection`1<GridViewColumn> {
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, GridViewColumn column);
    protected virtual void MoveItem(int oldIndex, int newIndex);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, GridViewColumn column);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.GridViewColumnHeader : ButtonBase {
    public static DependencyProperty ColumnProperty;
    public static DependencyProperty RoleProperty;
    public GridViewColumn Column { get; }
    [CategoryAttribute("Behavior")]
public GridViewColumnHeaderRole Role { get; }
    public GridViewColumn get_Column();
    public GridViewColumnHeaderRole get_Role();
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected internal virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected internal virtual bool ShouldSerializeProperty(DependencyProperty dp);
}
public enum System.Windows.Controls.GridViewColumnHeaderRole : Enum {
    public int value__;
    public static GridViewColumnHeaderRole Normal;
    public static GridViewColumnHeaderRole Floating;
    public static GridViewColumnHeaderRole Padding;
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.GridViewHeaderRowPresenter : GridViewRowPresenterBase {
    public static DependencyProperty AllowsColumnReorderProperty;
    public static DependencyProperty ColumnHeaderContainerStyleProperty;
    public static DependencyProperty ColumnHeaderContextMenuProperty;
    public static DependencyProperty ColumnHeaderStringFormatProperty;
    public static DependencyProperty ColumnHeaderTemplateProperty;
    public static DependencyProperty ColumnHeaderTemplateSelectorProperty;
    public static DependencyProperty ColumnHeaderToolTipProperty;
    public bool AllowsColumnReorder { get; public set; }
    public Style ColumnHeaderContainerStyle { get; public set; }
    public ContextMenu ColumnHeaderContextMenu { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string ColumnHeaderStringFormat { get; public set; }
    public DataTemplate ColumnHeaderTemplate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector ColumnHeaderTemplateSelector { get; public set; }
    public object ColumnHeaderToolTip { get; public set; }
    public bool get_AllowsColumnReorder();
    public void set_AllowsColumnReorder(bool value);
    public Style get_ColumnHeaderContainerStyle();
    public void set_ColumnHeaderContainerStyle(Style value);
    public ContextMenu get_ColumnHeaderContextMenu();
    public void set_ColumnHeaderContextMenu(ContextMenu value);
    public string get_ColumnHeaderStringFormat();
    public void set_ColumnHeaderStringFormat(string value);
    public DataTemplate get_ColumnHeaderTemplate();
    public void set_ColumnHeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_ColumnHeaderTemplateSelector();
    public void set_ColumnHeaderTemplateSelector(DataTemplateSelector value);
    public object get_ColumnHeaderToolTip();
    public void set_ColumnHeaderToolTip(object value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
}
public class System.Windows.Controls.GridViewRowPresenter : GridViewRowPresenterBase {
    public static DependencyProperty ContentProperty;
    public object Content { get; public set; }
    public object get_Content();
    public void set_Content(object value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    public virtual string ToString();
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.GroupBox : HeaderedContentControl {
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class System.Windows.Controls.GroupItem : ContentControl {
    private HierarchicalVirtualizationConstraints System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.Constraints { get; private set; }
    private HierarchicalVirtualizationHeaderDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.HeaderDesiredSizes { get; }
    private bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.InBackgroundLayout { get; private set; }
    private HierarchicalVirtualizationItemDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.ItemDesiredSizes { get; private set; }
    private Panel System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.ItemsHost { get; }
    private bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.MustDisableVirtualization { get; private set; }
    private sealed virtual override HierarchicalVirtualizationConstraints System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_Constraints();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_Constraints(HierarchicalVirtualizationConstraints value);
    private sealed virtual override HierarchicalVirtualizationHeaderDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_HeaderDesiredSizes();
    private sealed virtual override bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_InBackgroundLayout();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_InBackgroundLayout(bool value);
    private sealed virtual override HierarchicalVirtualizationItemDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_ItemDesiredSizes();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_ItemDesiredSizes(HierarchicalVirtualizationItemDesiredSizes value);
    private sealed virtual override Panel System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_ItemsHost();
    private sealed virtual override bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_MustDisableVirtualization();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_MustDisableVirtualization(bool value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.Clear();
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.ClearItemValue(object item, DependencyProperty dp);
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.ClearValue(DependencyProperty dp);
    private sealed virtual override object System.Windows.Controls.Primitives.IContainItemStorage.ReadItemValue(object item, DependencyProperty dp);
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.StoreItemValue(object item, DependencyProperty dp, object value);
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.GroupStyle : object {
    public static ItemsPanelTemplate DefaultGroupPanel;
    [DefaultValueAttribute("0")]
public int AlternationCount { get; public set; }
    [DefaultValueAttribute("")]
public Style ContainerStyle { get; public set; }
    [DefaultValueAttribute("")]
public StyleSelector ContainerStyleSelector { get; public set; }
    public static GroupStyle Default { get; }
    [DefaultValueAttribute("")]
public string HeaderStringFormat { get; public set; }
    [DefaultValueAttribute("")]
public DataTemplate HeaderTemplate { get; public set; }
    [DefaultValueAttribute("")]
public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    [DefaultValueAttribute("False")]
public bool HidesIfEmpty { get; public set; }
    public ItemsPanelTemplate Panel { get; public set; }
    public int get_AlternationCount();
    public void set_AlternationCount(int value);
    public Style get_ContainerStyle();
    public void set_ContainerStyle(Style value);
    public StyleSelector get_ContainerStyleSelector();
    public void set_ContainerStyleSelector(StyleSelector value);
    public static GroupStyle get_Default();
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public bool get_HidesIfEmpty();
    public void set_HidesIfEmpty(bool value);
    public ItemsPanelTemplate get_Panel();
    public void set_Panel(ItemsPanelTemplate value);
    protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
}
public class System.Windows.Controls.GroupStyleSelector : MulticastDelegate {
    public GroupStyleSelector(object object, IntPtr method);
    public virtual GroupStyle Invoke(CollectionViewGroup group, int level);
    public virtual IAsyncResult BeginInvoke(CollectionViewGroup group, int level, AsyncCallback callback, object object);
    public virtual GroupStyle EndInvoke(IAsyncResult result);
}
[LocalizabilityAttribute("1")]
public class System.Windows.Controls.HeaderedContentControl : ContentControl {
    public static DependencyProperty HasHeaderProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
public bool HasHeader { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
[LocalizabilityAttribute("3")]
public object Header { get; public set; }
    [BindableAttribute("True")]
public string HeaderStringFormat { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public DataTemplate HeaderTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public bool get_HasHeader();
    public object get_Header();
    public void set_Header(object value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    protected virtual void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat);
    protected virtual void OnHeaderTemplateChanged(DataTemplate oldHeaderTemplate, DataTemplate newHeaderTemplate);
    protected virtual void OnHeaderTemplateSelectorChanged(DataTemplateSelector oldHeaderTemplateSelector, DataTemplateSelector newHeaderTemplateSelector);
    public virtual string ToString();
}
[DefaultPropertyAttribute("Header")]
[LocalizabilityAttribute("8")]
public class System.Windows.Controls.HeaderedItemsControl : ItemsControl {
    public static DependencyProperty HasHeaderProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
public bool HasHeader { get; }
    [BindableAttribute("True")]
public object Header { get; public set; }
    [BindableAttribute("True")]
public string HeaderStringFormat { get; public set; }
    [BindableAttribute("True")]
public DataTemplate HeaderTemplate { get; public set; }
    [BindableAttribute("True")]
public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public bool get_HasHeader();
    public object get_Header();
    public void set_Header(object value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    protected virtual void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat);
    protected virtual void OnHeaderTemplateChanged(DataTemplate oldHeaderTemplate, DataTemplate newHeaderTemplate);
    protected virtual void OnHeaderTemplateSelectorChanged(DataTemplateSelector oldHeaderTemplateSelector, DataTemplateSelector newHeaderTemplateSelector);
    public virtual string ToString();
}
public class System.Windows.Controls.HierarchicalVirtualizationConstraints : ValueType {
    public VirtualizationCacheLength CacheLength { get; }
    public VirtualizationCacheLengthUnit CacheLengthUnit { get; }
    public Rect Viewport { get; }
    public HierarchicalVirtualizationConstraints(VirtualizationCacheLength cacheLength, VirtualizationCacheLengthUnit cacheLengthUnit, Rect viewport);
    public VirtualizationCacheLength get_CacheLength();
    public VirtualizationCacheLengthUnit get_CacheLengthUnit();
    public Rect get_Viewport();
    public virtual bool Equals(object oCompare);
    public bool Equals(HierarchicalVirtualizationConstraints comparisonConstraints);
    public virtual int GetHashCode();
    public static bool op_Equality(HierarchicalVirtualizationConstraints constraints1, HierarchicalVirtualizationConstraints constraints2);
    public static bool op_Inequality(HierarchicalVirtualizationConstraints constraints1, HierarchicalVirtualizationConstraints constraints2);
}
public class System.Windows.Controls.HierarchicalVirtualizationHeaderDesiredSizes : ValueType {
    public Size LogicalSize { get; }
    public Size PixelSize { get; }
    public HierarchicalVirtualizationHeaderDesiredSizes(Size logicalSize, Size pixelSize);
    public Size get_LogicalSize();
    public Size get_PixelSize();
    public virtual bool Equals(object oCompare);
    public bool Equals(HierarchicalVirtualizationHeaderDesiredSizes comparisonHeaderSizes);
    public virtual int GetHashCode();
    public static bool op_Equality(HierarchicalVirtualizationHeaderDesiredSizes headerDesiredSizes1, HierarchicalVirtualizationHeaderDesiredSizes headerDesiredSizes2);
    public static bool op_Inequality(HierarchicalVirtualizationHeaderDesiredSizes headerDesiredSizes1, HierarchicalVirtualizationHeaderDesiredSizes headerDesiredSizes2);
}
public class System.Windows.Controls.HierarchicalVirtualizationItemDesiredSizes : ValueType {
    public Size LogicalSize { get; }
    public Size LogicalSizeAfterViewport { get; }
    public Size LogicalSizeBeforeViewport { get; }
    public Size LogicalSizeInViewport { get; }
    public Size PixelSize { get; }
    public Size PixelSizeAfterViewport { get; }
    public Size PixelSizeBeforeViewport { get; }
    public Size PixelSizeInViewport { get; }
    public HierarchicalVirtualizationItemDesiredSizes(Size logicalSize, Size logicalSizeInViewport, Size logicalSizeBeforeViewport, Size logicalSizeAfterViewport, Size pixelSize, Size pixelSizeInViewport, Size pixelSizeBeforeViewport, Size pixelSizeAfterViewport);
    public Size get_LogicalSize();
    public Size get_LogicalSizeAfterViewport();
    public Size get_LogicalSizeBeforeViewport();
    public Size get_LogicalSizeInViewport();
    public Size get_PixelSize();
    public Size get_PixelSizeAfterViewport();
    public Size get_PixelSizeBeforeViewport();
    public Size get_PixelSizeInViewport();
    public virtual bool Equals(object oCompare);
    public bool Equals(HierarchicalVirtualizationItemDesiredSizes comparisonItemSizes);
    public virtual int GetHashCode();
    public static bool op_Equality(HierarchicalVirtualizationItemDesiredSizes itemDesiredSizes1, HierarchicalVirtualizationItemDesiredSizes itemDesiredSizes2);
    public static bool op_Inequality(HierarchicalVirtualizationItemDesiredSizes itemDesiredSizes1, HierarchicalVirtualizationItemDesiredSizes itemDesiredSizes2);
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.Image : FrameworkElement {
    public static RoutedEvent DpiChangedEvent;
    public static RoutedEvent ImageFailedEvent;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty StretchDirectionProperty;
    public static DependencyProperty StretchProperty;
    protected Uri BaseUri { get; protected set; }
    public ImageSource Source { get; public set; }
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    protected virtual Uri get_BaseUri();
    protected virtual void set_BaseUri(Uri value);
    public ImageSource get_Source();
    public void set_Source(ImageSource value);
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public void add_DpiChanged(DpiChangedEventHandler value);
    public void remove_DpiChanged(DpiChangedEventHandler value);
    public void add_ImageFailed(EventHandler`1<ExceptionRoutedEventArgs> value);
    public void remove_ImageFailed(EventHandler`1<ExceptionRoutedEventArgs> value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDpiChanged(DpiScale oldDpi, DpiScale newDpi);
    protected virtual void OnRender(DrawingContext dc);
}
public class System.Windows.Controls.InitializingNewItemEventArgs : EventArgs {
    public object NewItem { get; }
    public InitializingNewItemEventArgs(object newItem);
    public object get_NewItem();
}
public class System.Windows.Controls.InitializingNewItemEventHandler : MulticastDelegate {
    public InitializingNewItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InitializingNewItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InitializingNewItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ContentPropertyAttribute("Children")]
public class System.Windows.Controls.InkCanvas : FrameworkElement {
    public static RoutedEvent ActiveEditingModeChangedEvent;
    public static DependencyProperty ActiveEditingModeProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BottomProperty;
    public static DependencyProperty DefaultDrawingAttributesProperty;
    public static RoutedEvent EditingModeChangedEvent;
    public static RoutedEvent EditingModeInvertedChangedEvent;
    public static DependencyProperty EditingModeInvertedProperty;
    public static DependencyProperty EditingModeProperty;
    public static RoutedEvent GestureEvent;
    public static DependencyProperty LeftProperty;
    public static DependencyProperty RightProperty;
    public static RoutedEvent StrokeCollectedEvent;
    public static RoutedEvent StrokeErasedEvent;
    public static DependencyProperty StrokesProperty;
    public static DependencyProperty TopProperty;
    public InkCanvasEditingMode ActiveEditingMode { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public Brush Background { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public UIElementCollection Children { get; }
    public DrawingAttributes DefaultDrawingAttributes { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public StylusPointDescription DefaultStylusPointDescription { get; public set; }
    protected DynamicRenderer DynamicRenderer { get; protected set; }
    public InkCanvasEditingMode EditingMode { get; public set; }
    public InkCanvasEditingMode EditingModeInverted { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public StylusShape EraserShape { get; public set; }
    protected InkPresenter InkPresenter { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool IsGestureRecognizerAvailable { get; }
    protected internal IEnumerator LogicalChildren { get; }
    public bool MoveEnabled { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public IEnumerable`1<InkCanvasClipboardFormat> PreferredPasteFormats { get; public set; }
    public bool ResizeEnabled { get; public set; }
    public StrokeCollection Strokes { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool UseCustomCursor { get; public set; }
    protected int VisualChildrenCount { get; }
    public InkCanvasEditingMode get_ActiveEditingMode();
    public Brush get_Background();
    public void set_Background(Brush value);
    public UIElementCollection get_Children();
    public DrawingAttributes get_DefaultDrawingAttributes();
    public void set_DefaultDrawingAttributes(DrawingAttributes value);
    public StylusPointDescription get_DefaultStylusPointDescription();
    public void set_DefaultStylusPointDescription(StylusPointDescription value);
    protected DynamicRenderer get_DynamicRenderer();
    protected void set_DynamicRenderer(DynamicRenderer value);
    public InkCanvasEditingMode get_EditingMode();
    public void set_EditingMode(InkCanvasEditingMode value);
    public InkCanvasEditingMode get_EditingModeInverted();
    public void set_EditingModeInverted(InkCanvasEditingMode value);
    public StylusShape get_EraserShape();
    public void set_EraserShape(StylusShape value);
    protected InkPresenter get_InkPresenter();
    public bool get_IsGestureRecognizerAvailable();
    protected internal virtual IEnumerator get_LogicalChildren();
    public bool get_MoveEnabled();
    public void set_MoveEnabled(bool value);
    public IEnumerable`1<InkCanvasClipboardFormat> get_PreferredPasteFormats();
    public void set_PreferredPasteFormats(IEnumerable`1<InkCanvasClipboardFormat> value);
    public bool get_ResizeEnabled();
    public void set_ResizeEnabled(bool value);
    public StrokeCollection get_Strokes();
    public void set_Strokes(StrokeCollection value);
    public bool get_UseCustomCursor();
    public void set_UseCustomCursor(bool value);
    protected virtual int get_VisualChildrenCount();
    public void add_ActiveEditingModeChanged(RoutedEventHandler value);
    public void remove_ActiveEditingModeChanged(RoutedEventHandler value);
    public void add_DefaultDrawingAttributesReplaced(DrawingAttributesReplacedEventHandler value);
    public void remove_DefaultDrawingAttributesReplaced(DrawingAttributesReplacedEventHandler value);
    public void add_EditingModeChanged(RoutedEventHandler value);
    public void remove_EditingModeChanged(RoutedEventHandler value);
    public void add_EditingModeInvertedChanged(RoutedEventHandler value);
    public void remove_EditingModeInvertedChanged(RoutedEventHandler value);
    public void add_Gesture(InkCanvasGestureEventHandler value);
    public void remove_Gesture(InkCanvasGestureEventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_SelectionChanging(InkCanvasSelectionChangingEventHandler value);
    public void remove_SelectionChanging(InkCanvasSelectionChangingEventHandler value);
    public void add_SelectionMoved(EventHandler value);
    public void remove_SelectionMoved(EventHandler value);
    public void add_SelectionMoving(InkCanvasSelectionEditingEventHandler value);
    public void remove_SelectionMoving(InkCanvasSelectionEditingEventHandler value);
    public void add_SelectionResized(EventHandler value);
    public void remove_SelectionResized(EventHandler value);
    public void add_SelectionResizing(InkCanvasSelectionEditingEventHandler value);
    public void remove_SelectionResizing(InkCanvasSelectionEditingEventHandler value);
    public void add_StrokeCollected(InkCanvasStrokeCollectedEventHandler value);
    public void remove_StrokeCollected(InkCanvasStrokeCollectedEventHandler value);
    public void add_StrokeErased(RoutedEventHandler value);
    public void remove_StrokeErased(RoutedEventHandler value);
    public void add_StrokeErasing(InkCanvasStrokeErasingEventHandler value);
    public void remove_StrokeErasing(InkCanvasStrokeErasingEventHandler value);
    public void add_StrokesReplaced(InkCanvasStrokesReplacedEventHandler value);
    public void remove_StrokesReplaced(InkCanvasStrokesReplacedEventHandler value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public bool CanPaste();
    public void CopySelection();
    public void CutSelection();
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetBottom(UIElement element);
    public ReadOnlyCollection`1<ApplicationGesture> GetEnabledGestures();
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetLeft(UIElement element);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetRight(UIElement element);
    public ReadOnlyCollection`1<UIElement> GetSelectedElements();
    public StrokeCollection GetSelectedStrokes();
    public Rect GetSelectionBounds();
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetTop(UIElement element);
    protected virtual Visual GetVisualChild(int index);
    protected virtual HitTestResult HitTestCore(PointHitTestParameters hitTestParams);
    public InkCanvasSelectionHitResult HitTestSelection(Point point);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnActiveEditingModeChanged(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDefaultDrawingAttributesReplaced(DrawingAttributesReplacedEventArgs e);
    protected virtual void OnEditingModeChanged(RoutedEventArgs e);
    protected virtual void OnEditingModeInvertedChanged(RoutedEventArgs e);
    protected virtual void OnGesture(InkCanvasGestureEventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectionChanged(EventArgs e);
    protected virtual void OnSelectionChanging(InkCanvasSelectionChangingEventArgs e);
    protected virtual void OnSelectionMoved(EventArgs e);
    protected virtual void OnSelectionMoving(InkCanvasSelectionEditingEventArgs e);
    protected virtual void OnSelectionResized(EventArgs e);
    protected virtual void OnSelectionResizing(InkCanvasSelectionEditingEventArgs e);
    protected virtual void OnStrokeCollected(InkCanvasStrokeCollectedEventArgs e);
    protected virtual void OnStrokeErased(RoutedEventArgs e);
    protected virtual void OnStrokeErasing(InkCanvasStrokeErasingEventArgs e);
    protected virtual void OnStrokesReplaced(InkCanvasStrokesReplacedEventArgs e);
    public void Paste();
    public void Paste(Point point);
    public void Select(IEnumerable`1<UIElement> selectedElements);
    public void Select(StrokeCollection selectedStrokes);
    public void Select(StrokeCollection selectedStrokes, IEnumerable`1<UIElement> selectedElements);
    public static void SetBottom(UIElement element, double length);
    public void SetEnabledGestures(IEnumerable`1<ApplicationGesture> applicationGestures);
    public static void SetLeft(UIElement element, double length);
    public static void SetRight(UIElement element, double length);
    public static void SetTop(UIElement element, double length);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string textData);
}
public enum System.Windows.Controls.InkCanvasClipboardFormat : Enum {
    public int value__;
    public static InkCanvasClipboardFormat InkSerializedFormat;
    public static InkCanvasClipboardFormat Text;
    public static InkCanvasClipboardFormat Xaml;
}
public enum System.Windows.Controls.InkCanvasEditingMode : Enum {
    public int value__;
    public static InkCanvasEditingMode None;
    public static InkCanvasEditingMode Ink;
    public static InkCanvasEditingMode GestureOnly;
    public static InkCanvasEditingMode InkAndGesture;
    public static InkCanvasEditingMode Select;
    public static InkCanvasEditingMode EraseByPoint;
    public static InkCanvasEditingMode EraseByStroke;
}
public class System.Windows.Controls.InkCanvasGestureEventArgs : RoutedEventArgs {
    public bool Cancel { get; public set; }
    public StrokeCollection Strokes { get; }
    public InkCanvasGestureEventArgs(StrokeCollection strokes, IEnumerable`1<GestureRecognitionResult> gestureRecognitionResults);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public StrokeCollection get_Strokes();
    public ReadOnlyCollection`1<GestureRecognitionResult> GetGestureRecognitionResults();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.InkCanvasGestureEventHandler : MulticastDelegate {
    public InkCanvasGestureEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InkCanvasGestureEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InkCanvasGestureEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.InkCanvasSelectionChangingEventArgs : CancelEventArgs {
    public ReadOnlyCollection`1<UIElement> GetSelectedElements();
    public StrokeCollection GetSelectedStrokes();
    public void SetSelectedElements(IEnumerable`1<UIElement> selectedElements);
    public void SetSelectedStrokes(StrokeCollection selectedStrokes);
}
public class System.Windows.Controls.InkCanvasSelectionChangingEventHandler : MulticastDelegate {
    public InkCanvasSelectionChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InkCanvasSelectionChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InkCanvasSelectionChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.InkCanvasSelectionEditingEventArgs : CancelEventArgs {
    public Rect NewRectangle { get; public set; }
    public Rect OldRectangle { get; }
    public Rect get_NewRectangle();
    public void set_NewRectangle(Rect value);
    public Rect get_OldRectangle();
}
public class System.Windows.Controls.InkCanvasSelectionEditingEventHandler : MulticastDelegate {
    public InkCanvasSelectionEditingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InkCanvasSelectionEditingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InkCanvasSelectionEditingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.InkCanvasSelectionHitResult : Enum {
    public int value__;
    public static InkCanvasSelectionHitResult None;
    public static InkCanvasSelectionHitResult TopLeft;
    public static InkCanvasSelectionHitResult Top;
    public static InkCanvasSelectionHitResult TopRight;
    public static InkCanvasSelectionHitResult Right;
    public static InkCanvasSelectionHitResult BottomRight;
    public static InkCanvasSelectionHitResult Bottom;
    public static InkCanvasSelectionHitResult BottomLeft;
    public static InkCanvasSelectionHitResult Left;
    public static InkCanvasSelectionHitResult Selection;
}
public class System.Windows.Controls.InkCanvasStrokeCollectedEventArgs : RoutedEventArgs {
    public Stroke Stroke { get; }
    public InkCanvasStrokeCollectedEventArgs(Stroke stroke);
    public Stroke get_Stroke();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.InkCanvasStrokeCollectedEventHandler : MulticastDelegate {
    public InkCanvasStrokeCollectedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InkCanvasStrokeCollectedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InkCanvasStrokeCollectedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.InkCanvasStrokeErasingEventArgs : CancelEventArgs {
    public Stroke Stroke { get; }
    public Stroke get_Stroke();
}
public class System.Windows.Controls.InkCanvasStrokeErasingEventHandler : MulticastDelegate {
    public InkCanvasStrokeErasingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InkCanvasStrokeErasingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InkCanvasStrokeErasingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.InkCanvasStrokesReplacedEventArgs : EventArgs {
    public StrokeCollection NewStrokes { get; }
    public StrokeCollection PreviousStrokes { get; }
    public StrokeCollection get_NewStrokes();
    public StrokeCollection get_PreviousStrokes();
}
public class System.Windows.Controls.InkCanvasStrokesReplacedEventHandler : MulticastDelegate {
    public InkCanvasStrokesReplacedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InkCanvasStrokesReplacedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InkCanvasStrokesReplacedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.InkPresenter : Decorator {
    public static DependencyProperty StrokesProperty;
    public StrokeCollection Strokes { get; public set; }
    protected int VisualChildrenCount { get; }
    public StrokeCollection get_Strokes();
    public void set_Strokes(StrokeCollection value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public void AttachVisuals(Visual visual, DrawingAttributes drawingAttributes);
    public void DetachVisuals(Visual visual);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DefaultMemberAttribute("Item")]
[LocalizabilityAttribute("16")]
public class System.Windows.Controls.ItemCollection : CollectionView {
    public bool CanChangeLiveFiltering { get; }
    public bool CanChangeLiveGrouping { get; }
    public bool CanChangeLiveSorting { get; }
    public bool CanFilter { get; }
    public bool CanGroup { get; }
    public bool CanSort { get; }
    public int Count { get; }
    public object CurrentItem { get; }
    public int CurrentPosition { get; }
    public Predicate`1<object> Filter { get; public set; }
    public ObservableCollection`1<GroupDescription> GroupDescriptions { get; }
    public ReadOnlyObservableCollection`1<object> Groups { get; }
    public bool IsCurrentAfterLast { get; }
    public bool IsCurrentBeforeFirst { get; }
    public bool IsEmpty { get; }
    public Nullable`1<bool> IsLiveFiltering { get; public set; }
    public Nullable`1<bool> IsLiveGrouping { get; public set; }
    public Nullable`1<bool> IsLiveSorting { get; public set; }
    public object Item { get; public set; }
    public ObservableCollection`1<string> LiveFilteringProperties { get; }
    public ObservableCollection`1<string> LiveGroupingProperties { get; }
    public ObservableCollection`1<string> LiveSortingProperties { get; }
    public bool NeedsRefresh { get; }
    public SortDescriptionCollection SortDescriptions { get; }
    public IEnumerable SourceCollection { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.ComponentModel.IEditableCollectionView.CanAddNew { get; }
    private bool System.ComponentModel.IEditableCollectionView.CanCancelEdit { get; }
    private bool System.ComponentModel.IEditableCollectionView.CanRemove { get; }
    private object System.ComponentModel.IEditableCollectionView.CurrentAddItem { get; }
    private object System.ComponentModel.IEditableCollectionView.CurrentEditItem { get; }
    private bool System.ComponentModel.IEditableCollectionView.IsAddingNew { get; }
    private bool System.ComponentModel.IEditableCollectionView.IsEditingItem { get; }
    private NewItemPlaceholderPosition System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition { get; private set; }
    private bool System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem { get; }
    private ReadOnlyCollection`1<ItemPropertyInfo> System.ComponentModel.IItemProperties.ItemProperties { get; }
    public sealed virtual bool get_CanChangeLiveFiltering();
    public sealed virtual bool get_CanChangeLiveGrouping();
    public sealed virtual bool get_CanChangeLiveSorting();
    public virtual bool get_CanFilter();
    public virtual bool get_CanGroup();
    public virtual bool get_CanSort();
    public virtual int get_Count();
    public virtual object get_CurrentItem();
    public virtual int get_CurrentPosition();
    public virtual Predicate`1<object> get_Filter();
    public virtual void set_Filter(Predicate`1<object> value);
    public virtual ObservableCollection`1<GroupDescription> get_GroupDescriptions();
    public virtual ReadOnlyObservableCollection`1<object> get_Groups();
    public virtual bool get_IsCurrentAfterLast();
    public virtual bool get_IsCurrentBeforeFirst();
    public virtual bool get_IsEmpty();
    public sealed virtual Nullable`1<bool> get_IsLiveFiltering();
    public sealed virtual void set_IsLiveFiltering(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsLiveGrouping();
    public sealed virtual void set_IsLiveGrouping(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsLiveSorting();
    public sealed virtual void set_IsLiveSorting(Nullable`1<bool> value);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual ObservableCollection`1<string> get_LiveFilteringProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveGroupingProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveSortingProperties();
    public virtual bool get_NeedsRefresh();
    public virtual SortDescriptionCollection get_SortDescriptions();
    public virtual IEnumerable get_SourceCollection();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.ComponentModel.IEditableCollectionView.get_CanAddNew();
    private sealed virtual override bool System.ComponentModel.IEditableCollectionView.get_CanCancelEdit();
    private sealed virtual override bool System.ComponentModel.IEditableCollectionView.get_CanRemove();
    private sealed virtual override object System.ComponentModel.IEditableCollectionView.get_CurrentAddItem();
    private sealed virtual override object System.ComponentModel.IEditableCollectionView.get_CurrentEditItem();
    private sealed virtual override bool System.ComponentModel.IEditableCollectionView.get_IsAddingNew();
    private sealed virtual override bool System.ComponentModel.IEditableCollectionView.get_IsEditingItem();
    private sealed virtual override NewItemPlaceholderPosition System.ComponentModel.IEditableCollectionView.get_NewItemPlaceholderPosition();
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.set_NewItemPlaceholderPosition(NewItemPlaceholderPosition value);
    private sealed virtual override bool System.ComponentModel.IEditableCollectionViewAddNewItem.get_CanAddNewItem();
    private sealed virtual override ReadOnlyCollection`1<ItemPropertyInfo> System.ComponentModel.IItemProperties.get_ItemProperties();
    public sealed virtual int Add(object newItem);
    public sealed virtual void Clear();
    public virtual bool Contains(object containItem);
    public sealed virtual void CopyTo(Array array, int index);
    public virtual IDisposable DeferRefresh();
    protected virtual IEnumerator GetEnumerator();
    public virtual object GetItemAt(int index);
    public virtual int IndexOf(object item);
    public sealed virtual void Insert(int insertIndex, object insertItem);
    public virtual bool MoveCurrentTo(object item);
    public virtual bool MoveCurrentToFirst();
    public virtual bool MoveCurrentToLast();
    public virtual bool MoveCurrentToNext();
    public virtual bool MoveCurrentToPosition(int position);
    public virtual bool MoveCurrentToPrevious();
    public virtual bool PassesFilter(object item);
    protected virtual void RefreshOverride();
    public sealed virtual void Remove(object removeItem);
    public sealed virtual void RemoveAt(int removeIndex);
    private sealed virtual override object System.ComponentModel.IEditableCollectionView.AddNew();
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.CancelEdit();
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.CancelNew();
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.CommitEdit();
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.CommitNew();
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.EditItem(object item);
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.Remove(object item);
    private sealed virtual override void System.ComponentModel.IEditableCollectionView.RemoveAt(int index);
    private sealed virtual override object System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(object newItem);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
public class System.Windows.Controls.ItemContainerGenerator : object {
    public ReadOnlyCollection`1<object> Items { get; }
    public GeneratorStatus Status { get; }
    public ReadOnlyCollection`1<object> get_Items();
    public GeneratorStatus get_Status();
    public void add_ItemsChanged(ItemsChangedEventHandler value);
    public void remove_ItemsChanged(ItemsChangedEventHandler value);
    public void add_StatusChanged(EventHandler value);
    public void remove_StatusChanged(EventHandler value);
    public DependencyObject ContainerFromIndex(int index);
    public DependencyObject ContainerFromItem(object item);
    public IDisposable GenerateBatches();
    public int IndexFromContainer(DependencyObject container);
    public int IndexFromContainer(DependencyObject container, bool returnLocalIndex);
    public object ItemFromContainer(DependencyObject container);
    private sealed virtual override DependencyObject System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext();
    private sealed virtual override DependencyObject System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(Boolean& isNewlyRealized);
    private sealed virtual override GeneratorPosition System.Windows.Controls.Primitives.IItemContainerGenerator.GeneratorPositionFromIndex(int itemIndex);
    private sealed virtual override ItemContainerGenerator System.Windows.Controls.Primitives.IItemContainerGenerator.GetItemContainerGeneratorForPanel(Panel panel);
    private sealed virtual override int System.Windows.Controls.Primitives.IItemContainerGenerator.IndexFromGeneratorPosition(GeneratorPosition position);
    private sealed virtual override void System.Windows.Controls.Primitives.IItemContainerGenerator.PrepareItemContainer(DependencyObject container);
    private sealed virtual override void System.Windows.Controls.Primitives.IItemContainerGenerator.Remove(GeneratorPosition position, int count);
    private sealed virtual override void System.Windows.Controls.Primitives.IItemContainerGenerator.RemoveAll();
    private sealed virtual override IDisposable System.Windows.Controls.Primitives.IItemContainerGenerator.StartAt(GeneratorPosition position, GeneratorDirection direction);
    private sealed virtual override IDisposable System.Windows.Controls.Primitives.IItemContainerGenerator.StartAt(GeneratorPosition position, GeneratorDirection direction, bool allowStartAtRealizedItem);
    private sealed virtual override void System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator.Recycle(GeneratorPosition position, int count);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
[DictionaryKeyPropertyAttribute("ItemContainerTemplateKey")]
public class System.Windows.Controls.ItemContainerTemplate : DataTemplate {
    public object ItemContainerTemplateKey { get; }
    public object get_ItemContainerTemplateKey();
}
public class System.Windows.Controls.ItemContainerTemplateKey : TemplateKey {
    public ItemContainerTemplateKey(object dataType);
}
public abstract class System.Windows.Controls.ItemContainerTemplateSelector : object {
    public virtual DataTemplate SelectTemplate(object item, ItemsControl parentItemsControl);
}
[DefaultEventAttribute("OnItemsChanged")]
[DefaultPropertyAttribute("Items")]
[LocalizabilityAttribute("0")]
[ContentPropertyAttribute("Items")]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.ItemsControl : Control {
    public static DependencyProperty AlternationCountProperty;
    public static DependencyProperty AlternationIndexProperty;
    public static DependencyProperty DisplayMemberPathProperty;
    public static DependencyProperty GroupStyleSelectorProperty;
    public static DependencyProperty HasItemsProperty;
    public static DependencyProperty IsGroupingProperty;
    public static DependencyProperty IsTextSearchCaseSensitiveProperty;
    public static DependencyProperty IsTextSearchEnabledProperty;
    public static DependencyProperty ItemBindingGroupProperty;
    public static DependencyProperty ItemContainerStyleProperty;
    public static DependencyProperty ItemContainerStyleSelectorProperty;
    public static DependencyProperty ItemsPanelProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty ItemStringFormatProperty;
    public static DependencyProperty ItemTemplateProperty;
    public static DependencyProperty ItemTemplateSelectorProperty;
    [BindableAttribute("True")]
public int AlternationCount { get; public set; }
    [BindableAttribute("True")]
public string DisplayMemberPath { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ObservableCollection`1<GroupStyle> GroupStyle { get; }
    [BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public GroupStyleSelector GroupStyleSelector { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
public bool HasItems { get; }
    [BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsGrouping { get; }
    public bool IsTextSearchCaseSensitive { get; public set; }
    public bool IsTextSearchEnabled { get; public set; }
    [BindableAttribute("True")]
public BindingGroup ItemBindingGroup { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public ItemContainerGenerator ItemContainerGenerator { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public Style ItemContainerStyle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
[DesignerSerializationVisibilityAttribute("0")]
public StyleSelector ItemContainerStyleSelector { get; public set; }
    [BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public ItemCollection Items { get; }
    [BindableAttribute("False")]
public ItemsPanelTemplate ItemsPanel { get; public set; }
    [BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public IEnumerable ItemsSource { get; public set; }
    [BindableAttribute("True")]
public string ItemStringFormat { get; public set; }
    [BindableAttribute("True")]
public DataTemplate ItemTemplate { get; public set; }
    [BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector ItemTemplateSelector { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public int get_AlternationCount();
    public void set_AlternationCount(int value);
    public string get_DisplayMemberPath();
    public void set_DisplayMemberPath(string value);
    public ObservableCollection`1<GroupStyle> get_GroupStyle();
    public GroupStyleSelector get_GroupStyleSelector();
    public void set_GroupStyleSelector(GroupStyleSelector value);
    public bool get_HasItems();
    public bool get_IsGrouping();
    public bool get_IsTextSearchCaseSensitive();
    public void set_IsTextSearchCaseSensitive(bool value);
    public bool get_IsTextSearchEnabled();
    public void set_IsTextSearchEnabled(bool value);
    public BindingGroup get_ItemBindingGroup();
    public void set_ItemBindingGroup(BindingGroup value);
    public ItemContainerGenerator get_ItemContainerGenerator();
    public Style get_ItemContainerStyle();
    public void set_ItemContainerStyle(Style value);
    public StyleSelector get_ItemContainerStyleSelector();
    public void set_ItemContainerStyleSelector(StyleSelector value);
    public ItemCollection get_Items();
    public ItemsPanelTemplate get_ItemsPanel();
    public void set_ItemsPanel(ItemsPanelTemplate value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public string get_ItemStringFormat();
    public void set_ItemStringFormat(string value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual void AddChild(object value);
    protected virtual void AddText(string text);
    public virtual void BeginInit();
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public static DependencyObject ContainerFromElement(ItemsControl itemsControl, DependencyObject element);
    public DependencyObject ContainerFromElement(DependencyObject element);
    public virtual void EndInit();
    public static int GetAlternationIndex(DependencyObject element);
    protected virtual DependencyObject GetContainerForItemOverride();
    public static ItemsControl GetItemsOwner(DependencyObject element);
    public bool IsItemItsOwnContainer(object item);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    public static ItemsControl ItemsControlFromItemContainer(DependencyObject container);
    protected virtual void OnAlternationCountChanged(int oldAlternationCount, int newAlternationCount);
    protected virtual void OnDisplayMemberPathChanged(string oldDisplayMemberPath, string newDisplayMemberPath);
    protected virtual void OnGroupStyleSelectorChanged(GroupStyleSelector oldGroupStyleSelector, GroupStyleSelector newGroupStyleSelector);
    protected virtual void OnItemBindingGroupChanged(BindingGroup oldItemBindingGroup, BindingGroup newItemBindingGroup);
    protected virtual void OnItemContainerStyleChanged(Style oldItemContainerStyle, Style newItemContainerStyle);
    protected virtual void OnItemContainerStyleSelectorChanged(StyleSelector oldItemContainerStyleSelector, StyleSelector newItemContainerStyleSelector);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnItemsPanelChanged(ItemsPanelTemplate oldItemsPanel, ItemsPanelTemplate newItemsPanel);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnItemStringFormatChanged(string oldItemStringFormat, string newItemStringFormat);
    protected virtual void OnItemTemplateChanged(DataTemplate oldItemTemplate, DataTemplate newItemTemplate);
    protected virtual void OnItemTemplateSelectorChanged(DataTemplateSelector oldItemTemplateSelector, DataTemplateSelector newItemTemplateSelector);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeGroupStyle();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeItems();
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.Clear();
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.ClearItemValue(object item, DependencyProperty dp);
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.ClearValue(DependencyProperty dp);
    private sealed virtual override object System.Windows.Controls.Primitives.IContainItemStorage.ReadItemValue(object item, DependencyProperty dp);
    private sealed virtual override void System.Windows.Controls.Primitives.IContainItemStorage.StoreItemValue(object item, DependencyProperty dp, object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
    public virtual string ToString();
}
public class System.Windows.Controls.ItemsPanelTemplate : FrameworkTemplate {
    public ItemsPanelTemplate(FrameworkElementFactory root);
    protected virtual void ValidateTemplatedParent(FrameworkElement templatedParent);
}
[LocalizabilityAttribute("17")]
public class System.Windows.Controls.ItemsPresenter : FrameworkElement {
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ItemsPanelTemplate oldTemplate, ItemsPanelTemplate newTemplate);
}
[LocalizabilityAttribute("3")]
public class System.Windows.Controls.Label : ContentControl {
    public static DependencyProperty TargetProperty;
    [TypeConverterAttribute("System.Windows.Markup.NameReferenceConverter")]
public UIElement Target { get; public set; }
    public UIElement get_Target();
    public void set_Target(UIElement value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[LocalizabilityAttribute("7")]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.ListBox : Selector {
    public static DependencyProperty SelectedItemsProperty;
    public static DependencyProperty SelectionModeProperty;
    protected object AnchorItem { get; protected set; }
    protected internal bool HandlesScrolling { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public IList SelectedItems { get; }
    public SelectionMode SelectionMode { get; public set; }
    protected object get_AnchorItem();
    protected void set_AnchorItem(object value);
    protected internal virtual bool get_HandlesScrolling();
    public IList get_SelectedItems();
    public SelectionMode get_SelectionMode();
    public void set_SelectionMode(SelectionMode value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public void ScrollIntoView(object item);
    public void SelectAll();
    protected bool SetSelectedItems(IEnumerable selectedItems);
    public void UnselectAll();
}
[DefaultEventAttribute("Selected")]
public class System.Windows.Controls.ListBoxItem : ContentControl {
    public static DependencyProperty IsSelectedProperty;
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnselectedEvent;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSelected { get; public set; }
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    public void add_Unselected(RoutedEventHandler value);
    public void remove_Unselected(RoutedEventHandler value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseRightButtonDown(MouseButtonEventArgs e);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.ListView : ListBox {
    public static DependencyProperty ViewProperty;
    public ViewBase View { get; public set; }
    public ViewBase get_View();
    public void set_View(ViewBase value);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
public class System.Windows.Controls.ListViewItem : ListBoxItem {
}
[LocalizabilityAttribute("17")]
public class System.Windows.Controls.MediaElement : FrameworkElement {
    public static DependencyProperty BalanceProperty;
    public static RoutedEvent BufferingEndedEvent;
    public static RoutedEvent BufferingStartedEvent;
    public static DependencyProperty IsMutedProperty;
    public static DependencyProperty LoadedBehaviorProperty;
    public static RoutedEvent MediaEndedEvent;
    public static RoutedEvent MediaFailedEvent;
    public static RoutedEvent MediaOpenedEvent;
    public static RoutedEvent ScriptCommandEvent;
    public static DependencyProperty ScrubbingEnabledProperty;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty StretchDirectionProperty;
    public static DependencyProperty StretchProperty;
    public static DependencyProperty UnloadedBehaviorProperty;
    public static DependencyProperty VolumeProperty;
    public double Balance { get; public set; }
    public double BufferingProgress { get; }
    public bool CanPause { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public MediaClock Clock { get; public set; }
    public double DownloadProgress { get; }
    public bool HasAudio { get; }
    public bool HasVideo { get; }
    public bool IsBuffering { get; }
    public bool IsMuted { get; public set; }
    public MediaState LoadedBehavior { get; public set; }
    public Duration NaturalDuration { get; }
    public int NaturalVideoHeight { get; }
    public int NaturalVideoWidth { get; }
    public TimeSpan Position { get; public set; }
    public bool ScrubbingEnabled { get; public set; }
    public Uri Source { get; public set; }
    public double SpeedRatio { get; public set; }
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public MediaState UnloadedBehavior { get; public set; }
    public double Volume { get; public set; }
    public double get_Balance();
    public void set_Balance(double value);
    public double get_BufferingProgress();
    public bool get_CanPause();
    public MediaClock get_Clock();
    public void set_Clock(MediaClock value);
    public double get_DownloadProgress();
    public bool get_HasAudio();
    public bool get_HasVideo();
    public bool get_IsBuffering();
    public bool get_IsMuted();
    public void set_IsMuted(bool value);
    public MediaState get_LoadedBehavior();
    public void set_LoadedBehavior(MediaState value);
    public Duration get_NaturalDuration();
    public int get_NaturalVideoHeight();
    public int get_NaturalVideoWidth();
    public TimeSpan get_Position();
    public void set_Position(TimeSpan value);
    public bool get_ScrubbingEnabled();
    public void set_ScrubbingEnabled(bool value);
    public Uri get_Source();
    public void set_Source(Uri value);
    public double get_SpeedRatio();
    public void set_SpeedRatio(double value);
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public MediaState get_UnloadedBehavior();
    public void set_UnloadedBehavior(MediaState value);
    public double get_Volume();
    public void set_Volume(double value);
    public void add_BufferingEnded(RoutedEventHandler value);
    public void remove_BufferingEnded(RoutedEventHandler value);
    public void add_BufferingStarted(RoutedEventHandler value);
    public void remove_BufferingStarted(RoutedEventHandler value);
    public void add_MediaEnded(RoutedEventHandler value);
    public void remove_MediaEnded(RoutedEventHandler value);
    public void add_MediaFailed(EventHandler`1<ExceptionRoutedEventArgs> value);
    public void remove_MediaFailed(EventHandler`1<ExceptionRoutedEventArgs> value);
    public void add_MediaOpened(RoutedEventHandler value);
    public void remove_MediaOpened(RoutedEventHandler value);
    public void add_ScriptCommand(EventHandler`1<MediaScriptCommandRoutedEventArgs> value);
    public void remove_ScriptCommand(EventHandler`1<MediaScriptCommandRoutedEventArgs> value);
    protected virtual Size ArrangeOverride(Size finalSize);
    public void Close();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnRender(DrawingContext drawingContext);
    public void Pause();
    public void Play();
    public void Stop();
}
public enum System.Windows.Controls.MediaState : Enum {
    public int value__;
    public static MediaState Manual;
    public static MediaState Play;
    public static MediaState Close;
    public static MediaState Pause;
    public static MediaState Stop;
}
public class System.Windows.Controls.Menu : MenuBase {
    public static DependencyProperty IsMainMenuProperty;
    public bool IsMainMenu { get; public set; }
    public bool get_IsMainMenu();
    public void set_IsMainMenu(bool value);
    protected virtual void HandleMouseButton(MouseButtonEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
[DefaultEventAttribute("Click")]
[LocalizabilityAttribute("8")]
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.MenuItem : HeaderedItemsControl {
    public static RoutedEvent CheckedEvent;
    public static RoutedEvent ClickEvent;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty InputGestureTextProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty IsHighlightedProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty IsSubmenuOpenProperty;
    public static DependencyProperty IsSuspendingPopupAnimationProperty;
    public static DependencyProperty ItemContainerTemplateSelectorProperty;
    public static DependencyProperty RoleProperty;
    public static DependencyProperty StaysOpenOnClickProperty;
    public static RoutedEvent SubmenuClosedEvent;
    public static RoutedEvent SubmenuOpenedEvent;
    public static RoutedEvent UncheckedEvent;
    public static DependencyProperty UsesItemContainerTemplateProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
[LocalizabilityAttribute("17")]
public ICommand Command { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
[LocalizabilityAttribute("17")]
public object CommandParameter { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
public IInputElement CommandTarget { get; public set; }
    protected internal bool HandlesScrolling { get; }
    [BindableAttribute("True")]
public object Icon { get; public set; }
    [BindableAttribute("True")]
public string InputGestureText { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool IsCheckable { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsChecked { get; public set; }
    protected bool IsEnabledCore { get; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
public bool IsHighlighted { get; protected set; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
public bool IsPressed { get; protected set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsSubmenuOpen { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool IsSuspendingPopupAnimation { get; }
    public ItemContainerTemplateSelector ItemContainerTemplateSelector { get; public set; }
    [CategoryAttribute("Behavior")]
public MenuItemRole Role { get; }
    public static ResourceKey SeparatorStyleKey { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool StaysOpenOnClick { get; public set; }
    public static ResourceKey SubmenuHeaderTemplateKey { get; }
    public static ResourceKey SubmenuItemTemplateKey { get; }
    public static ResourceKey TopLevelHeaderTemplateKey { get; }
    public static ResourceKey TopLevelItemTemplateKey { get; }
    public bool UsesItemContainerTemplate { get; public set; }
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    protected internal virtual bool get_HandlesScrolling();
    public object get_Icon();
    public void set_Icon(object value);
    public string get_InputGestureText();
    public void set_InputGestureText(string value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    protected virtual bool get_IsEnabledCore();
    public bool get_IsHighlighted();
    protected void set_IsHighlighted(bool value);
    public bool get_IsPressed();
    protected void set_IsPressed(bool value);
    public bool get_IsSubmenuOpen();
    public void set_IsSubmenuOpen(bool value);
    public bool get_IsSuspendingPopupAnimation();
    public ItemContainerTemplateSelector get_ItemContainerTemplateSelector();
    public void set_ItemContainerTemplateSelector(ItemContainerTemplateSelector value);
    public MenuItemRole get_Role();
    public static ResourceKey get_SeparatorStyleKey();
    public bool get_StaysOpenOnClick();
    public void set_StaysOpenOnClick(bool value);
    public static ResourceKey get_SubmenuHeaderTemplateKey();
    public static ResourceKey get_SubmenuItemTemplateKey();
    public static ResourceKey get_TopLevelHeaderTemplateKey();
    public static ResourceKey get_TopLevelItemTemplateKey();
    public bool get_UsesItemContainerTemplate();
    public void set_UsesItemContainerTemplate(bool value);
    public void add_Checked(RoutedEventHandler value);
    public void remove_Checked(RoutedEventHandler value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public void add_SubmenuClosed(RoutedEventHandler value);
    public void remove_SubmenuClosed(RoutedEventHandler value);
    public void add_SubmenuOpened(RoutedEventHandler value);
    public void remove_SubmenuOpened(RoutedEventHandler value);
    public void add_Unchecked(RoutedEventHandler value);
    public void remove_Unchecked(RoutedEventHandler value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnChecked(RoutedEventArgs e);
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseRightButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseRightButtonUp(MouseButtonEventArgs e);
    protected virtual void OnSubmenuClosed(RoutedEventArgs e);
    protected virtual void OnSubmenuOpened(RoutedEventArgs e);
    protected virtual void OnUnchecked(RoutedEventArgs e);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
}
public enum System.Windows.Controls.MenuItemRole : Enum {
    public int value__;
    public static MenuItemRole TopLevelItem;
    public static MenuItemRole TopLevelHeader;
    public static MenuItemRole SubmenuItem;
    public static MenuItemRole SubmenuHeader;
}
public class System.Windows.Controls.MenuScrollingVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Windows.Controls.NotifyDataErrorValidationRule : ValidationRule {
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo);
}
[LocalizabilityAttribute("0")]
public enum System.Windows.Controls.Orientation : Enum {
    public int value__;
    public static Orientation Horizontal;
    public static Orientation Vertical;
}
public enum System.Windows.Controls.OverflowMode : Enum {
    public int value__;
    public static OverflowMode AsNeeded;
    public static OverflowMode Always;
    public static OverflowMode Never;
}
[ContentPropertyAttribute("Content")]
public class System.Windows.Controls.Page : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty ContentProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty KeepAliveProperty;
    public static DependencyProperty TemplateProperty;
    public static DependencyProperty TitleProperty;
    [CategoryAttribute("Appearance")]
public Brush Background { get; public set; }
    public object Content { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[LocalizabilityAttribute("14")]
public FontFamily FontFamily { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public Brush Foreground { get; public set; }
    public bool KeepAlive { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public NavigationService NavigationService { get; }
    public bool ShowsNavigationUI { get; public set; }
    public ControlTemplate Template { get; public set; }
    public string Title { get; public set; }
    public double WindowHeight { get; public set; }
    [LocalizabilityAttribute("2")]
public string WindowTitle { get; public set; }
    public double WindowWidth { get; public set; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public object get_Content();
    public void set_Content(object value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public NavigationService get_NavigationService();
    public bool get_ShowsNavigationUI();
    public void set_ShowsNavigationUI(bool value);
    public ControlTemplate get_Template();
    public void set_Template(ControlTemplate value);
    public string get_Title();
    public void set_Title(string value);
    public double get_WindowHeight();
    public void set_WindowHeight(double value);
    public string get_WindowTitle();
    public void set_WindowTitle(string value);
    public double get_WindowWidth();
    public void set_WindowWidth(double value);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected internal sealed virtual void OnVisualParentChanged(DependencyObject oldParent);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeShowsNavigationUI();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeTitle();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeWindowHeight();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeWindowTitle();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeWindowWidth();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object obj);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string str);
}
public class System.Windows.Controls.PageRange : ValueType {
    public int PageFrom { get; public set; }
    public int PageTo { get; public set; }
    public PageRange(int page);
    public PageRange(int pageFrom, int pageTo);
    public int get_PageFrom();
    public void set_PageFrom(int value);
    public int get_PageTo();
    public void set_PageTo(int value);
    public virtual bool Equals(object obj);
    public bool Equals(PageRange pageRange);
    public virtual int GetHashCode();
    public static bool op_Equality(PageRange pr1, PageRange pr2);
    public static bool op_Inequality(PageRange pr1, PageRange pr2);
    public virtual string ToString();
}
public enum System.Windows.Controls.PageRangeSelection : Enum {
    public int value__;
    public static PageRangeSelection AllPages;
    public static PageRangeSelection UserPages;
    public static PageRangeSelection CurrentPage;
    public static PageRangeSelection SelectedPages;
}
[LocalizabilityAttribute("16")]
[ContentPropertyAttribute("Children")]
public abstract class System.Windows.Controls.Panel : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty IsItemsHostProperty;
    public static DependencyProperty ZIndexProperty;
    public Brush Background { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public UIElementCollection Children { get; }
    protected internal bool HasLogicalOrientation { get; }
    public bool HasLogicalOrientationPublic { get; }
    protected internal UIElementCollection InternalChildren { get; }
    [BindableAttribute("False")]
[CategoryAttribute("Behavior")]
public bool IsItemsHost { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    protected internal Orientation LogicalOrientation { get; }
    public Orientation LogicalOrientationPublic { get; }
    protected int VisualChildrenCount { get; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public UIElementCollection get_Children();
    protected internal virtual bool get_HasLogicalOrientation();
    public bool get_HasLogicalOrientationPublic();
    protected internal UIElementCollection get_InternalChildren();
    public bool get_IsItemsHost();
    public void set_IsItemsHost(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected internal virtual Orientation get_LogicalOrientation();
    public Orientation get_LogicalOrientationPublic();
    protected virtual int get_VisualChildrenCount();
    protected virtual UIElementCollection CreateUIElementCollection(FrameworkElement logicalParent);
    protected virtual Visual GetVisualChild(int index);
    public static int GetZIndex(UIElement element);
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    protected virtual void OnRender(DrawingContext dc);
    protected internal virtual void OnVisualChildrenChanged(DependencyObject visualAdded, DependencyObject visualRemoved);
    public static void SetZIndex(UIElement element, int value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeChildren();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public enum System.Windows.Controls.PanningMode : Enum {
    public int value__;
    public static PanningMode None;
    public static PanningMode HorizontalOnly;
    public static PanningMode VerticalOnly;
    public static PanningMode Both;
    public static PanningMode HorizontalFirst;
    public static PanningMode VerticalFirst;
}
[TemplatePartAttribute]
public class System.Windows.Controls.PasswordBox : Control {
    public static DependencyProperty CaretBrushProperty;
    public static DependencyProperty IsInactiveSelectionHighlightEnabledProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static DependencyProperty MaxLengthProperty;
    public static RoutedEvent PasswordChangedEvent;
    public static DependencyProperty PasswordCharProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static DependencyProperty SelectionOpacityProperty;
    public static DependencyProperty SelectionTextBrushProperty;
    public Brush CaretBrush { get; public set; }
    public bool IsInactiveSelectionHighlightEnabled { get; public set; }
    public bool IsSelectionActive { get; }
    [DefaultValueAttribute("0")]
public int MaxLength { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public string Password { get; public set; }
    public char PasswordChar { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public SecureString SecurePassword { get; }
    public Brush SelectionBrush { get; public set; }
    public double SelectionOpacity { get; public set; }
    public Brush SelectionTextBrush { get; public set; }
    public Brush get_CaretBrush();
    public void set_CaretBrush(Brush value);
    public bool get_IsInactiveSelectionHighlightEnabled();
    public void set_IsInactiveSelectionHighlightEnabled(bool value);
    public bool get_IsSelectionActive();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_Password();
    public void set_Password(string value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public SecureString get_SecurePassword();
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public double get_SelectionOpacity();
    public void set_SelectionOpacity(double value);
    public Brush get_SelectionTextBrush();
    public void set_SelectionTextBrush(Brush value);
    public void add_PasswordChanged(RoutedEventHandler value);
    public void remove_PasswordChanged(RoutedEventHandler value);
    public void Clear();
    public virtual void OnApplyTemplate();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs e);
    protected virtual void OnQueryCursor(QueryCursorEventArgs e);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    public void Paste();
    public void SelectAll();
}
public enum System.Windows.Controls.Primitives.AutoToolTipPlacement : Enum {
    public int value__;
    public static AutoToolTipPlacement None;
    public static AutoToolTipPlacement TopLeft;
    public static AutoToolTipPlacement BottomRight;
}
public class System.Windows.Controls.Primitives.BulletDecorator : Decorator {
    public static DependencyProperty BackgroundProperty;
    public Brush Background { get; public set; }
    public UIElement Bullet { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public UIElement get_Bullet();
    public void set_Bullet(UIElement value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext dc);
}
[DefaultEventAttribute("Click")]
[LocalizabilityAttribute("4")]
public abstract class System.Windows.Controls.Primitives.ButtonBase : ContentControl {
    public static RoutedEvent ClickEvent;
    public static DependencyProperty ClickModeProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty IsPressedProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public ClickMode ClickMode { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
[LocalizabilityAttribute("17")]
public ICommand Command { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
[LocalizabilityAttribute("17")]
public object CommandParameter { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
[ReadOnlyAttribute("True")]
public bool IsPressed { get; protected set; }
    public ClickMode get_ClickMode();
    public void set_ClickMode(ClickMode value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    protected virtual bool get_IsEnabledCore();
    public bool get_IsPressed();
    protected void set_IsPressed(bool value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    protected virtual void OnClick();
    protected virtual void OnIsPressedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected internal virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
}
public class System.Windows.Controls.Primitives.CalendarButton : Button {
    public static DependencyProperty HasSelectedDaysProperty;
    public static DependencyProperty IsInactiveProperty;
    public bool HasSelectedDays { get; }
    public bool IsInactive { get; }
    public bool get_HasSelectedDays();
    public bool get_IsInactive();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class System.Windows.Controls.Primitives.CalendarDayButton : Button {
    public static DependencyProperty IsBlackedOutProperty;
    public static DependencyProperty IsHighlightedProperty;
    public static DependencyProperty IsInactiveProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsTodayProperty;
    public bool IsBlackedOut { get; }
    public bool IsHighlighted { get; }
    public bool IsInactive { get; }
    public bool IsSelected { get; }
    public bool IsToday { get; }
    public bool get_IsBlackedOut();
    public bool get_IsHighlighted();
    public bool get_IsInactive();
    public bool get_IsSelected();
    public bool get_IsToday();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Primitives.CalendarItem : Control {
    public static ComponentResourceKey DayTitleTemplateResourceKey { get; }
    public static ComponentResourceKey get_DayTitleTemplateResourceKey();
    public virtual void OnApplyTemplate();
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
}
public class System.Windows.Controls.Primitives.CustomPopupPlacement : ValueType {
    public Point Point { get; public set; }
    public PopupPrimaryAxis PrimaryAxis { get; public set; }
    public CustomPopupPlacement(Point point, PopupPrimaryAxis primaryAxis);
    public Point get_Point();
    public void set_Point(Point value);
    public PopupPrimaryAxis get_PrimaryAxis();
    public void set_PrimaryAxis(PopupPrimaryAxis value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(CustomPopupPlacement placement1, CustomPopupPlacement placement2);
    public static bool op_Inequality(CustomPopupPlacement placement1, CustomPopupPlacement placement2);
}
public class System.Windows.Controls.Primitives.CustomPopupPlacementCallback : MulticastDelegate {
    public CustomPopupPlacementCallback(object object, IntPtr method);
    public virtual CustomPopupPlacement[] Invoke(Size popupSize, Size targetSize, Point offset);
    public virtual IAsyncResult BeginInvoke(Size popupSize, Size targetSize, Point offset, AsyncCallback callback, object object);
    public virtual CustomPopupPlacement[] EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.Primitives.DataGridCellsPresenter : ItemsControl {
    public object Item { get; }
    public object get_Item();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual Size MeasureOverride(Size availableSize);
    public virtual void OnApplyTemplate();
    protected internal virtual void OnColumnsChanged(ObservableCollection`1<DataGridColumn> columns, NotifyCollectionChangedEventArgs e);
    protected virtual void OnItemChanged(object oldItem, object newItem);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Primitives.DataGridColumnHeader : ButtonBase {
    public static DependencyProperty CanUserSortProperty;
    public static DependencyProperty DisplayIndexProperty;
    public static DependencyProperty IsFrozenProperty;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    public static DependencyProperty SortDirectionProperty;
    public bool CanUserSort { get; }
    public DataGridColumn Column { get; }
    public static ComponentResourceKey ColumnFloatingHeaderStyleKey { get; }
    public static ComponentResourceKey ColumnHeaderDropSeparatorStyleKey { get; }
    public int DisplayIndex { get; }
    public bool IsFrozen { get; }
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    public Nullable`1<ListSortDirection> SortDirection { get; }
    public bool get_CanUserSort();
    public DataGridColumn get_Column();
    public static ComponentResourceKey get_ColumnFloatingHeaderStyleKey();
    public static ComponentResourceKey get_ColumnHeaderDropSeparatorStyleKey();
    public int get_DisplayIndex();
    public bool get_IsFrozen();
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    public Nullable`1<ListSortDirection> get_SortDirection();
    public virtual void OnApplyTemplate();
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter : ItemsControl {
    protected int VisualChildrenCount { get; }
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual Size MeasureOverride(Size availableSize);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
public class System.Windows.Controls.Primitives.DataGridDetailsPresenter : ContentPresenter {
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnRender(DrawingContext drawingContext);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Primitives.DataGridRowHeader : ButtonBase {
    public static DependencyProperty IsRowSelectedProperty;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsRowSelected { get; }
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    public bool get_IsRowSelected();
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    protected virtual Size MeasureOverride(Size availableSize);
    public virtual void OnApplyTemplate();
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class System.Windows.Controls.Primitives.DataGridRowsPresenter : VirtualizingStackPanel {
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnCleanUpVirtualizedItem(CleanUpVirtualizedItemEventArgs e);
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    protected virtual void OnViewportSizeChanged(Size oldViewportSize, Size newViewportSize);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Primitives.DatePickerTextBox : TextBox {
    public virtual void OnApplyTemplate();
    protected virtual void OnGotFocus(RoutedEventArgs e);
}
public class System.Windows.Controls.Primitives.DocumentPageView : FrameworkElement {
    public static DependencyProperty PageNumberProperty;
    public static DependencyProperty StretchDirectionProperty;
    public static DependencyProperty StretchProperty;
    public DocumentPage DocumentPage { get; }
    public DocumentPaginator DocumentPaginator { get; public set; }
    protected bool IsDisposed { get; }
    public int PageNumber { get; public set; }
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    protected int VisualChildrenCount { get; }
    public DocumentPage get_DocumentPage();
    public DocumentPaginator get_DocumentPaginator();
    public void set_DocumentPaginator(DocumentPaginator value);
    protected bool get_IsDisposed();
    public int get_PageNumber();
    public void set_PageNumber(int value);
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    protected virtual int get_VisualChildrenCount();
    public void add_PageConnected(EventHandler value);
    public void remove_PageConnected(EventHandler value);
    public void add_PageDisconnected(EventHandler value);
    public void remove_PageDisconnected(EventHandler value);
    protected sealed virtual Size ArrangeOverride(Size finalSize);
    protected void Dispose();
    protected object GetService(Type serviceType);
    protected virtual Visual GetVisualChild(int index);
    protected sealed virtual Size MeasureOverride(Size availableSize);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDpiChanged(DpiScale oldDpiScaleInfo, DpiScale newDpiScaleInfo);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
[ContentPropertyAttribute("Document")]
public abstract class System.Windows.Controls.Primitives.DocumentViewerBase : Control {
    public static DependencyProperty CanGoToNextPageProperty;
    protected static DependencyPropertyKey CanGoToNextPagePropertyKey;
    public static DependencyProperty CanGoToPreviousPageProperty;
    protected static DependencyPropertyKey CanGoToPreviousPagePropertyKey;
    public static DependencyProperty DocumentProperty;
    public static DependencyProperty IsMasterPageProperty;
    public static DependencyProperty MasterPageNumberProperty;
    protected static DependencyPropertyKey MasterPageNumberPropertyKey;
    public static DependencyProperty PageCountProperty;
    protected static DependencyPropertyKey PageCountPropertyKey;
    public bool CanGoToNextPage { get; }
    public bool CanGoToPreviousPage { get; }
    public IDocumentPaginatorSource Document { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public int MasterPageNumber { get; }
    public int PageCount { get; }
    [CLSCompliantAttribute("False")]
public ReadOnlyCollection`1<DocumentPageView> PageViews { get; }
    public virtual bool get_CanGoToNextPage();
    public virtual bool get_CanGoToPreviousPage();
    public IDocumentPaginatorSource get_Document();
    public void set_Document(IDocumentPaginatorSource value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public virtual int get_MasterPageNumber();
    public int get_PageCount();
    public ReadOnlyCollection`1<DocumentPageView> get_PageViews();
    public void add_PageViewsChanged(EventHandler value);
    public void remove_PageViewsChanged(EventHandler value);
    public void CancelPrint();
    public virtual bool CanGoToPage(int pageNumber);
    public void FirstPage();
    public static bool GetIsMasterPage(DependencyObject element);
    protected DocumentPageView GetMasterPageView();
    protected virtual ReadOnlyCollection`1<DocumentPageView> GetPageViewsCollection(Boolean& changed);
    public void GoToPage(int pageNumber);
    protected void InvalidatePageViews();
    public void LastPage();
    public void NextPage();
    public virtual void OnApplyTemplate();
    protected virtual void OnBringIntoView(DependencyObject element, Rect rect, int pageNumber);
    protected virtual void OnCancelPrintCommand();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDocumentChanged();
    protected virtual void OnDpiChanged(DpiScale oldDpiScaleInfo, DpiScale newDpiScaleInfo);
    protected virtual void OnFirstPageCommand();
    protected virtual void OnGoToPageCommand(int pageNumber);
    protected virtual void OnLastPageCommand();
    protected virtual void OnMasterPageNumberChanged();
    protected virtual void OnNextPageCommand();
    protected virtual void OnPageViewsChanged();
    protected virtual void OnPreviousPageCommand();
    protected virtual void OnPrintCommand();
    public void PreviousPage();
    public void Print();
    public static void SetIsMasterPage(DependencyObject element, bool value);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Controls.Primitives.DragCompletedEventArgs : RoutedEventArgs {
    public bool Canceled { get; }
    public double HorizontalChange { get; }
    public double VerticalChange { get; }
    public DragCompletedEventArgs(double horizontalChange, double verticalChange, bool canceled);
    public bool get_Canceled();
    public double get_HorizontalChange();
    public double get_VerticalChange();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Primitives.DragCompletedEventHandler : MulticastDelegate {
    public DragCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DragCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DragCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.Primitives.DragDeltaEventArgs : RoutedEventArgs {
    public double HorizontalChange { get; }
    public double VerticalChange { get; }
    public DragDeltaEventArgs(double horizontalChange, double verticalChange);
    public double get_HorizontalChange();
    public double get_VerticalChange();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Primitives.DragDeltaEventHandler : MulticastDelegate {
    public DragDeltaEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DragDeltaEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DragDeltaEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.Primitives.DragStartedEventArgs : RoutedEventArgs {
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public DragStartedEventArgs(double horizontalOffset, double verticalOffset);
    public double get_HorizontalOffset();
    public double get_VerticalOffset();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Primitives.DragStartedEventHandler : MulticastDelegate {
    public DragStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DragStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DragStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.Primitives.GeneratorDirection : Enum {
    public int value__;
    public static GeneratorDirection Forward;
    public static GeneratorDirection Backward;
}
public class System.Windows.Controls.Primitives.GeneratorPosition : ValueType {
    public int Index { get; public set; }
    public int Offset { get; public set; }
    public GeneratorPosition(int index, int offset);
    public int get_Index();
    public void set_Index(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(GeneratorPosition gp1, GeneratorPosition gp2);
    public static bool op_Inequality(GeneratorPosition gp1, GeneratorPosition gp2);
    public virtual string ToString();
}
public enum System.Windows.Controls.Primitives.GeneratorStatus : Enum {
    public int value__;
    public static GeneratorStatus NotStarted;
    public static GeneratorStatus GeneratingContainers;
    public static GeneratorStatus ContainersGenerated;
    public static GeneratorStatus Error;
}
public abstract class System.Windows.Controls.Primitives.GridViewRowPresenterBase : FrameworkElement {
    public static DependencyProperty ColumnsProperty;
    public GridViewColumnCollection Columns { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    public GridViewColumnCollection get_Columns();
    public void set_Columns(GridViewColumnCollection value);
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    protected virtual Visual GetVisualChild(int index);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs args);
    public virtual string ToString();
}
public interface System.Windows.Controls.Primitives.IContainItemStorage {
    public abstract virtual void Clear();
    public abstract virtual void ClearItemValue(object item, DependencyProperty dp);
    public abstract virtual void ClearValue(DependencyProperty dp);
    public abstract virtual object ReadItemValue(object item, DependencyProperty dp);
    public abstract virtual void StoreItemValue(object item, DependencyProperty dp, object value);
}
public interface System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo {
    public HierarchicalVirtualizationConstraints Constraints { get; public set; }
    public HierarchicalVirtualizationHeaderDesiredSizes HeaderDesiredSizes { get; }
    public bool InBackgroundLayout { get; public set; }
    public HierarchicalVirtualizationItemDesiredSizes ItemDesiredSizes { get; public set; }
    public Panel ItemsHost { get; }
    public bool MustDisableVirtualization { get; public set; }
    public abstract virtual HierarchicalVirtualizationConstraints get_Constraints();
    public abstract virtual void set_Constraints(HierarchicalVirtualizationConstraints value);
    public abstract virtual HierarchicalVirtualizationHeaderDesiredSizes get_HeaderDesiredSizes();
    public abstract virtual bool get_InBackgroundLayout();
    public abstract virtual void set_InBackgroundLayout(bool value);
    public abstract virtual HierarchicalVirtualizationItemDesiredSizes get_ItemDesiredSizes();
    public abstract virtual void set_ItemDesiredSizes(HierarchicalVirtualizationItemDesiredSizes value);
    public abstract virtual Panel get_ItemsHost();
    public abstract virtual bool get_MustDisableVirtualization();
    public abstract virtual void set_MustDisableVirtualization(bool value);
}
public interface System.Windows.Controls.Primitives.IItemContainerGenerator {
    public abstract virtual DependencyObject GenerateNext();
    public abstract virtual DependencyObject GenerateNext(Boolean& isNewlyRealized);
    public abstract virtual GeneratorPosition GeneratorPositionFromIndex(int itemIndex);
    public abstract virtual ItemContainerGenerator GetItemContainerGeneratorForPanel(Panel panel);
    public abstract virtual int IndexFromGeneratorPosition(GeneratorPosition position);
    public abstract virtual void PrepareItemContainer(DependencyObject container);
    public abstract virtual void Remove(GeneratorPosition position, int count);
    public abstract virtual void RemoveAll();
    public abstract virtual IDisposable StartAt(GeneratorPosition position, GeneratorDirection direction);
    public abstract virtual IDisposable StartAt(GeneratorPosition position, GeneratorDirection direction, bool allowStartAtRealizedItem);
}
public interface System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator {
    public abstract virtual void Recycle(GeneratorPosition position, int count);
}
public interface System.Windows.Controls.Primitives.IScrollInfo {
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public ScrollViewer ScrollOwner { get; public set; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    public abstract virtual bool get_CanHorizontallyScroll();
    public abstract virtual void set_CanHorizontallyScroll(bool value);
    public abstract virtual bool get_CanVerticallyScroll();
    public abstract virtual void set_CanVerticallyScroll(bool value);
    public abstract virtual double get_ExtentHeight();
    public abstract virtual double get_ExtentWidth();
    public abstract virtual double get_HorizontalOffset();
    public abstract virtual ScrollViewer get_ScrollOwner();
    public abstract virtual void set_ScrollOwner(ScrollViewer value);
    public abstract virtual double get_VerticalOffset();
    public abstract virtual double get_ViewportHeight();
    public abstract virtual double get_ViewportWidth();
    public abstract virtual void LineDown();
    public abstract virtual void LineLeft();
    public abstract virtual void LineRight();
    public abstract virtual void LineUp();
    public abstract virtual Rect MakeVisible(Visual visual, Rect rectangle);
    public abstract virtual void MouseWheelDown();
    public abstract virtual void MouseWheelLeft();
    public abstract virtual void MouseWheelRight();
    public abstract virtual void MouseWheelUp();
    public abstract virtual void PageDown();
    public abstract virtual void PageLeft();
    public abstract virtual void PageRight();
    public abstract virtual void PageUp();
    public abstract virtual void SetHorizontalOffset(double offset);
    public abstract virtual void SetVerticalOffset(double offset);
}
public class System.Windows.Controls.Primitives.ItemsChangedEventArgs : EventArgs {
    public NotifyCollectionChangedAction Action { get; }
    public int ItemCount { get; }
    public int ItemUICount { get; }
    public GeneratorPosition OldPosition { get; }
    public GeneratorPosition Position { get; }
    public NotifyCollectionChangedAction get_Action();
    public int get_ItemCount();
    public int get_ItemUICount();
    public GeneratorPosition get_OldPosition();
    public GeneratorPosition get_Position();
}
public class System.Windows.Controls.Primitives.ItemsChangedEventHandler : MulticastDelegate {
    public ItemsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class System.Windows.Controls.Primitives.LayoutInformation : object {
    public static Geometry GetLayoutClip(FrameworkElement element);
    public static UIElement GetLayoutExceptionElement(Dispatcher dispatcher);
    public static Rect GetLayoutSlot(FrameworkElement element);
}
[LocalizabilityAttribute("8")]
[StyleTypedPropertyAttribute]
public abstract class System.Windows.Controls.Primitives.MenuBase : ItemsControl {
    public static DependencyProperty ItemContainerTemplateSelectorProperty;
    public static DependencyProperty UsesItemContainerTemplateProperty;
    public ItemContainerTemplateSelector ItemContainerTemplateSelector { get; public set; }
    public bool UsesItemContainerTemplate { get; public set; }
    public ItemContainerTemplateSelector get_ItemContainerTemplateSelector();
    public void set_ItemContainerTemplateSelector(ItemContainerTemplateSelector value);
    public bool get_UsesItemContainerTemplate();
    public void set_UsesItemContainerTemplate(bool value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void HandleMouseButton(MouseButtonEventArgs e);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
}
public abstract class System.Windows.Controls.Primitives.MultiSelector : Selector {
    protected bool CanSelectMultipleItems { get; protected set; }
    protected bool IsUpdatingSelectedItems { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public IList SelectedItems { get; }
    protected bool get_CanSelectMultipleItems();
    protected void set_CanSelectMultipleItems(bool value);
    protected bool get_IsUpdatingSelectedItems();
    public IList get_SelectedItems();
    protected void BeginUpdateSelectedItems();
    protected void EndUpdateSelectedItems();
    public void SelectAll();
    public void UnselectAll();
}
[LocalizabilityAttribute("0")]
public enum System.Windows.Controls.Primitives.PlacementMode : Enum {
    public int value__;
    public static PlacementMode Absolute;
    public static PlacementMode Relative;
    public static PlacementMode Bottom;
    public static PlacementMode Center;
    public static PlacementMode Right;
    public static PlacementMode AbsolutePoint;
    public static PlacementMode RelativePoint;
    public static PlacementMode Mouse;
    public static PlacementMode MousePoint;
    public static PlacementMode Left;
    public static PlacementMode Top;
    public static PlacementMode Custom;
}
[DefaultEventAttribute("Opened")]
[DefaultPropertyAttribute("Child")]
[LocalizabilityAttribute("0")]
[ContentPropertyAttribute("Child")]
public class System.Windows.Controls.Primitives.Popup : FrameworkElement {
    public static DependencyProperty AllowsTransparencyProperty;
    public static DependencyProperty ChildProperty;
    public static DependencyProperty CustomPopupPlacementCallbackProperty;
    public static DependencyProperty HasDropShadowProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty IsOpenProperty;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty PlacementRectangleProperty;
    public static DependencyProperty PlacementTargetProperty;
    public static DependencyProperty PopupAnimationProperty;
    public static DependencyProperty StaysOpenProperty;
    public static DependencyProperty VerticalOffsetProperty;
    public bool AllowsTransparency { get; public set; }
    [BindableAttribute("True")]
public UIElement Child { get; public set; }
    [BindableAttribute("False")]
[CategoryAttribute("Layout")]
public CustomPopupPlacementCallback CustomPopupPlacementCallback { get; public set; }
    public bool HasDropShadow { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double HorizontalOffset { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsOpen { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public PlacementMode Placement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public Rect PlacementRectangle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[DesignerSerializationVisibilityAttribute("0")]
public UIElement PlacementTarget { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public PopupAnimation PopupAnimation { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool StaysOpen { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double VerticalOffset { get; public set; }
    public bool get_AllowsTransparency();
    public void set_AllowsTransparency(bool value);
    public UIElement get_Child();
    public void set_Child(UIElement value);
    public CustomPopupPlacementCallback get_CustomPopupPlacementCallback();
    public void set_CustomPopupPlacementCallback(CustomPopupPlacementCallback value);
    public bool get_HasDropShadow();
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public PlacementMode get_Placement();
    public void set_Placement(PlacementMode value);
    public Rect get_PlacementRectangle();
    public void set_PlacementRectangle(Rect value);
    public UIElement get_PlacementTarget();
    public void set_PlacementTarget(UIElement value);
    public PopupAnimation get_PopupAnimation();
    public void set_PopupAnimation(PopupAnimation value);
    public bool get_StaysOpen();
    public void set_StaysOpen(bool value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public void add_Opened(EventHandler value);
    public void remove_Opened(EventHandler value);
    public static void CreateRootPopup(Popup popup, UIElement child);
    protected internal virtual DependencyObject GetUIParentCore();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseRightButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseRightButtonUp(MouseButtonEventArgs e);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public enum System.Windows.Controls.Primitives.PopupAnimation : Enum {
    public int value__;
    public static PopupAnimation None;
    public static PopupAnimation Fade;
    public static PopupAnimation Slide;
    public static PopupAnimation Scroll;
}
public enum System.Windows.Controls.Primitives.PopupPrimaryAxis : Enum {
    public int value__;
    public static PopupPrimaryAxis None;
    public static PopupPrimaryAxis Horizontal;
    public static PopupPrimaryAxis Vertical;
}
[DefaultEventAttribute("ValueChanged")]
[DefaultPropertyAttribute("Value")]
public abstract class System.Windows.Controls.Primitives.RangeBase : Control {
    public static DependencyProperty LargeChangeProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty SmallChangeProperty;
    public static RoutedEvent ValueChangedEvent;
    public static DependencyProperty ValueProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public double LargeChange { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public double Maximum { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public double Minimum { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public double SmallChange { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public double Value { get; public set; }
    public double get_LargeChange();
    public void set_LargeChange(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_SmallChange();
    public void set_SmallChange(double value);
    public double get_Value();
    public void set_Value(double value);
    public void add_ValueChanged(RoutedPropertyChangedEventHandler`1<double> value);
    public void remove_ValueChanged(RoutedPropertyChangedEventHandler`1<double> value);
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnValueChanged(double oldValue, double newValue);
    public virtual string ToString();
}
public class System.Windows.Controls.Primitives.RepeatButton : ButtonBase {
    public static DependencyProperty DelayProperty;
    public static DependencyProperty IntervalProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int Delay { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int Interval { get; public set; }
    public int get_Delay();
    public void set_Delay(int value);
    public int get_Interval();
    public void set_Interval(int value);
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
}
public class System.Windows.Controls.Primitives.ResizeGrip : Control {
}
[LocalizabilityAttribute("17")]
[TemplatePartAttribute]
public class System.Windows.Controls.Primitives.ScrollBar : RangeBase {
    public static RoutedCommand DeferScrollToHorizontalOffsetCommand;
    public static RoutedCommand DeferScrollToVerticalOffsetCommand;
    public static RoutedCommand LineDownCommand;
    public static RoutedCommand LineLeftCommand;
    public static RoutedCommand LineRightCommand;
    public static RoutedCommand LineUpCommand;
    public static DependencyProperty OrientationProperty;
    public static RoutedCommand PageDownCommand;
    public static RoutedCommand PageLeftCommand;
    public static RoutedCommand PageRightCommand;
    public static RoutedCommand PageUpCommand;
    public static RoutedEvent ScrollEvent;
    public static RoutedCommand ScrollHereCommand;
    public static RoutedCommand ScrollToBottomCommand;
    public static RoutedCommand ScrollToEndCommand;
    public static RoutedCommand ScrollToHomeCommand;
    public static RoutedCommand ScrollToHorizontalOffsetCommand;
    public static RoutedCommand ScrollToLeftEndCommand;
    public static RoutedCommand ScrollToRightEndCommand;
    public static RoutedCommand ScrollToTopCommand;
    public static RoutedCommand ScrollToVerticalOffsetCommand;
    public static DependencyProperty ViewportSizeProperty;
    protected bool IsEnabledCore { get; }
    public Orientation Orientation { get; public set; }
    public Track Track { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double ViewportSize { get; public set; }
    protected virtual bool get_IsEnabledCore();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Track get_Track();
    public double get_ViewportSize();
    public void set_ViewportSize(double value);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public virtual void OnApplyTemplate();
    protected virtual void OnContextMenuClosing(ContextMenuEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseRightButtonUp(MouseButtonEventArgs e);
}
public class System.Windows.Controls.Primitives.ScrollEventArgs : RoutedEventArgs {
    public double NewValue { get; }
    public ScrollEventType ScrollEventType { get; }
    public ScrollEventArgs(ScrollEventType scrollEventType, double newValue);
    public double get_NewValue();
    public ScrollEventType get_ScrollEventType();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Primitives.ScrollEventHandler : MulticastDelegate {
    public ScrollEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScrollEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScrollEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.Primitives.ScrollEventType : Enum {
    public int value__;
    public static ScrollEventType EndScroll;
    public static ScrollEventType First;
    public static ScrollEventType LargeDecrement;
    public static ScrollEventType LargeIncrement;
    public static ScrollEventType Last;
    public static ScrollEventType SmallDecrement;
    public static ScrollEventType SmallIncrement;
    public static ScrollEventType ThumbPosition;
    public static ScrollEventType ThumbTrack;
}
public class System.Windows.Controls.Primitives.SelectiveScrollingGrid : Grid {
    public static DependencyProperty SelectiveScrollingOrientationProperty;
    public static SelectiveScrollingOrientation GetSelectiveScrollingOrientation(DependencyObject obj);
    public static void SetSelectiveScrollingOrientation(DependencyObject obj, SelectiveScrollingOrientation value);
}
[DefaultEventAttribute("SelectionChanged")]
[DefaultPropertyAttribute("SelectedIndex")]
[LocalizabilityAttribute("0")]
public abstract class System.Windows.Controls.Primitives.Selector : ItemsControl {
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static DependencyProperty IsSynchronizedWithCurrentItemProperty;
    public static RoutedEvent SelectedEvent;
    public static DependencyProperty SelectedIndexProperty;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedValuePathProperty;
    public static DependencyProperty SelectedValueProperty;
    public static RoutedEvent SelectionChangedEvent;
    public static RoutedEvent UnselectedEvent;
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
[TypeConverterAttribute("System.Windows.NullableBoolConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[LocalizabilityAttribute("17")]
public Nullable`1<bool> IsSynchronizedWithCurrentItem { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizabilityAttribute("17")]
public int SelectedIndex { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public object SelectedItem { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizabilityAttribute("17")]
public object SelectedValue { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[LocalizabilityAttribute("17")]
public string SelectedValuePath { get; public set; }
    public Nullable`1<bool> get_IsSynchronizedWithCurrentItem();
    public void set_IsSynchronizedWithCurrentItem(Nullable`1<bool> value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public object get_SelectedValue();
    public void set_SelectedValue(object value);
    public string get_SelectedValuePath();
    public void set_SelectedValuePath(string value);
    public void add_SelectionChanged(SelectionChangedEventHandler value);
    public void remove_SelectionChanged(SelectionChangedEventHandler value);
    public static void AddSelectedHandler(DependencyObject element, RoutedEventHandler handler);
    public static void AddUnselectedHandler(DependencyObject element, RoutedEventHandler handler);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static bool GetIsSelected(DependencyObject element);
    public static bool GetIsSelectionActive(DependencyObject element);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public static void RemoveSelectedHandler(DependencyObject element, RoutedEventHandler handler);
    public static void RemoveUnselectedHandler(DependencyObject element, RoutedEventHandler handler);
    public static void SetIsSelected(DependencyObject element, bool isSelected);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Primitives.StatusBar : ItemsControl {
    public static DependencyProperty ItemContainerTemplateSelectorProperty;
    public static DependencyProperty UsesItemContainerTemplateProperty;
    public ItemContainerTemplateSelector ItemContainerTemplateSelector { get; public set; }
    public static ResourceKey SeparatorStyleKey { get; }
    public bool UsesItemContainerTemplate { get; public set; }
    public ItemContainerTemplateSelector get_ItemContainerTemplateSelector();
    public void set_ItemContainerTemplateSelector(ItemContainerTemplateSelector value);
    public static ResourceKey get_SeparatorStyleKey();
    public bool get_UsesItemContainerTemplate();
    public void set_UsesItemContainerTemplate(bool value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
}
[LocalizabilityAttribute("15")]
public class System.Windows.Controls.Primitives.StatusBarItem : ContentControl {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class System.Windows.Controls.Primitives.TabPanel : Panel {
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    protected virtual Size MeasureOverride(Size constraint);
}
[LocalizabilityAttribute("1")]
[TemplatePartAttribute]
public abstract class System.Windows.Controls.Primitives.TextBoxBase : Control {
    public static DependencyProperty AcceptsReturnProperty;
    public static DependencyProperty AcceptsTabProperty;
    public static DependencyProperty AutoWordSelectionProperty;
    public static DependencyProperty CaretBrushProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty IsInactiveSelectionHighlightEnabledProperty;
    public static DependencyProperty IsReadOnlyCaretVisibleProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static DependencyProperty IsUndoEnabledProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static RoutedEvent SelectionChangedEvent;
    public static DependencyProperty SelectionOpacityProperty;
    public static DependencyProperty SelectionTextBrushProperty;
    public static RoutedEvent TextChangedEvent;
    public static DependencyProperty UndoLimitProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public bool AcceptsReturn { get; public set; }
    public bool AcceptsTab { get; public set; }
    public bool AutoWordSelection { get; public set; }
    public bool CanRedo { get; }
    public bool CanUndo { get; }
    public Brush CaretBrush { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public bool IsInactiveSelectionHighlightEnabled { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool IsReadOnlyCaretVisible { get; public set; }
    public bool IsSelectionActive { get; }
    public bool IsUndoEnabled { get; public set; }
    public Brush SelectionBrush { get; public set; }
    public double SelectionOpacity { get; public set; }
    public Brush SelectionTextBrush { get; public set; }
    public SpellCheck SpellCheck { get; }
    public int UndoLimit { get; public set; }
    public double VerticalOffset { get; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_AutoWordSelection();
    public void set_AutoWordSelection(bool value);
    public bool get_CanRedo();
    public bool get_CanUndo();
    public Brush get_CaretBrush();
    public void set_CaretBrush(Brush value);
    public double get_ExtentHeight();
    public double get_ExtentWidth();
    public double get_HorizontalOffset();
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public bool get_IsInactiveSelectionHighlightEnabled();
    public void set_IsInactiveSelectionHighlightEnabled(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsReadOnlyCaretVisible();
    public void set_IsReadOnlyCaretVisible(bool value);
    public bool get_IsSelectionActive();
    public bool get_IsUndoEnabled();
    public void set_IsUndoEnabled(bool value);
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public double get_SelectionOpacity();
    public void set_SelectionOpacity(double value);
    public Brush get_SelectionTextBrush();
    public void set_SelectionTextBrush(Brush value);
    public SpellCheck get_SpellCheck();
    public int get_UndoLimit();
    public void set_UndoLimit(int value);
    public double get_VerticalOffset();
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public double get_ViewportHeight();
    public double get_ViewportWidth();
    public void add_SelectionChanged(RoutedEventHandler value);
    public void remove_SelectionChanged(RoutedEventHandler value);
    public void add_TextChanged(TextChangedEventHandler value);
    public void remove_TextChanged(TextChangedEventHandler value);
    public void AppendText(string textData);
    public void BeginChange();
    public void Copy();
    public void Cut();
    public IDisposable DeclareChangeBlock();
    public void EndChange();
    public void LineDown();
    public void LineLeft();
    public void LineRight();
    public void LineUp();
    public void LockCurrentUndoUnit();
    public virtual void OnApplyTemplate();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs e);
    protected virtual void OnQueryCursor(QueryCursorEventArgs e);
    protected virtual void OnSelectionChanged(RoutedEventArgs e);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual void OnTextChanged(TextChangedEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    public void PageDown();
    public void PageLeft();
    public void PageRight();
    public void PageUp();
    public void Paste();
    public bool Redo();
    public void ScrollToEnd();
    public void ScrollToHome();
    public void ScrollToHorizontalOffset(double offset);
    public void ScrollToVerticalOffset(double offset);
    public void SelectAll();
    public bool Undo();
}
[DefaultEventAttribute("DragDelta")]
[LocalizabilityAttribute("17")]
public class System.Windows.Controls.Primitives.Thumb : Control {
    public static RoutedEvent DragCompletedEvent;
    public static RoutedEvent DragDeltaEvent;
    public static RoutedEvent DragStartedEvent;
    public static DependencyProperty IsDraggingProperty;
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
public bool IsDragging { get; protected set; }
    public bool get_IsDragging();
    protected void set_IsDragging(bool value);
    public void add_DragCompleted(DragCompletedEventHandler value);
    public void remove_DragCompleted(DragCompletedEventHandler value);
    public void add_DragDelta(DragDeltaEventHandler value);
    public void remove_DragDelta(DragDeltaEventHandler value);
    public void add_DragStarted(DragStartedEventHandler value);
    public void remove_DragStarted(DragStartedEventHandler value);
    public void CancelDrag();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDraggingChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.Primitives.TickBar : FrameworkElement {
    public static DependencyProperty FillProperty;
    public static DependencyProperty IsDirectionReversedProperty;
    public static DependencyProperty IsSelectionRangeEnabledProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty ReservedSpaceProperty;
    public static DependencyProperty SelectionEndProperty;
    public static DependencyProperty SelectionStartProperty;
    public static DependencyProperty TickFrequencyProperty;
    public static DependencyProperty TicksProperty;
    public Brush Fill { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsDirectionReversed { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSelectionRangeEnabled { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double Maximum { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double Minimum { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public TickBarPlacement Placement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double ReservedSpace { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double SelectionEnd { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double SelectionStart { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double TickFrequency { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public DoubleCollection Ticks { get; public set; }
    public Brush get_Fill();
    public void set_Fill(Brush value);
    public bool get_IsDirectionReversed();
    public void set_IsDirectionReversed(bool value);
    public bool get_IsSelectionRangeEnabled();
    public void set_IsSelectionRangeEnabled(bool value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public TickBarPlacement get_Placement();
    public void set_Placement(TickBarPlacement value);
    public double get_ReservedSpace();
    public void set_ReservedSpace(double value);
    public double get_SelectionEnd();
    public void set_SelectionEnd(double value);
    public double get_SelectionStart();
    public void set_SelectionStart(double value);
    public double get_TickFrequency();
    public void set_TickFrequency(double value);
    public DoubleCollection get_Ticks();
    public void set_Ticks(DoubleCollection value);
    protected virtual void OnRender(DrawingContext dc);
}
public enum System.Windows.Controls.Primitives.TickBarPlacement : Enum {
    public int value__;
    public static TickBarPlacement Left;
    public static TickBarPlacement Top;
    public static TickBarPlacement Right;
    public static TickBarPlacement Bottom;
}
public enum System.Windows.Controls.Primitives.TickPlacement : Enum {
    public int value__;
    public static TickPlacement None;
    public static TickPlacement TopLeft;
    public static TickPlacement BottomRight;
    public static TickPlacement Both;
}
[DefaultEventAttribute("Checked")]
public class System.Windows.Controls.Primitives.ToggleButton : ButtonBase {
    public static RoutedEvent CheckedEvent;
    public static RoutedEvent IndeterminateEvent;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty IsThreeStateProperty;
    public static RoutedEvent UncheckedEvent;
    [CategoryAttribute("Appearance")]
[TypeConverterAttribute("System.Windows.NullableBoolConverter")]
[LocalizabilityAttribute("0")]
public Nullable`1<bool> IsChecked { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool IsThreeState { get; public set; }
    public Nullable`1<bool> get_IsChecked();
    public void set_IsChecked(Nullable`1<bool> value);
    public bool get_IsThreeState();
    public void set_IsThreeState(bool value);
    public void add_Checked(RoutedEventHandler value);
    public void remove_Checked(RoutedEventHandler value);
    public void add_Indeterminate(RoutedEventHandler value);
    public void remove_Indeterminate(RoutedEventHandler value);
    public void add_Unchecked(RoutedEventHandler value);
    public void remove_Unchecked(RoutedEventHandler value);
    protected virtual void OnChecked(RoutedEventArgs e);
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnIndeterminate(RoutedEventArgs e);
    protected internal virtual void OnToggle();
    protected virtual void OnUnchecked(RoutedEventArgs e);
    public virtual string ToString();
}
public class System.Windows.Controls.Primitives.ToolBarOverflowPanel : Panel {
    public static DependencyProperty WrapWidthProperty;
    public double WrapWidth { get; public set; }
    public double get_WrapWidth();
    public void set_WrapWidth(double value);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual UIElementCollection CreateUIElementCollection(FrameworkElement logicalParent);
    protected virtual Size MeasureOverride(Size constraint);
}
public class System.Windows.Controls.Primitives.ToolBarPanel : StackPanel {
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.Primitives.Track : FrameworkElement {
    public static DependencyProperty IsDirectionReversedProperty;
    public static DependencyProperty MaximumProperty;
    public static DependencyProperty MinimumProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty ViewportSizeProperty;
    public RepeatButton DecreaseRepeatButton { get; public set; }
    public RepeatButton IncreaseRepeatButton { get; public set; }
    public bool IsDirectionReversed { get; public set; }
    public double Maximum { get; public set; }
    public double Minimum { get; public set; }
    public Orientation Orientation { get; public set; }
    public Thumb Thumb { get; public set; }
    public double Value { get; public set; }
    public double ViewportSize { get; public set; }
    protected int VisualChildrenCount { get; }
    public RepeatButton get_DecreaseRepeatButton();
    public void set_DecreaseRepeatButton(RepeatButton value);
    public RepeatButton get_IncreaseRepeatButton();
    public void set_IncreaseRepeatButton(RepeatButton value);
    public bool get_IsDirectionReversed();
    public void set_IsDirectionReversed(bool value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Thumb get_Thumb();
    public void set_Thumb(Thumb value);
    public double get_Value();
    public void set_Value(double value);
    public double get_ViewportSize();
    public void set_ViewportSize(double value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size availableSize);
    public virtual double ValueFromDistance(double horizontal, double vertical);
    public virtual double ValueFromPoint(Point pt);
}
public class System.Windows.Controls.Primitives.UniformGrid : Panel {
    public static DependencyProperty ColumnsProperty;
    public static DependencyProperty FirstColumnProperty;
    public static DependencyProperty RowsProperty;
    public int Columns { get; public set; }
    public int FirstColumn { get; public set; }
    public int Rows { get; public set; }
    public int get_Columns();
    public void set_Columns(int value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    public int get_Rows();
    public void set_Rows(int value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
}
public class System.Windows.Controls.PrintDialog : object {
    public bool CurrentPageEnabled { get; public set; }
    public UInt32 MaxPage { get; public set; }
    public UInt32 MinPage { get; public set; }
    public PageRange PageRange { get; public set; }
    public PageRangeSelection PageRangeSelection { get; public set; }
    public double PrintableAreaHeight { get; }
    public double PrintableAreaWidth { get; }
    public PrintQueue PrintQueue { get; public set; }
    public PrintTicket PrintTicket { get; public set; }
    public bool SelectedPagesEnabled { get; public set; }
    public bool UserPageRangeEnabled { get; public set; }
    public bool get_CurrentPageEnabled();
    public void set_CurrentPageEnabled(bool value);
    public UInt32 get_MaxPage();
    public void set_MaxPage(UInt32 value);
    public UInt32 get_MinPage();
    public void set_MinPage(UInt32 value);
    public PageRange get_PageRange();
    public void set_PageRange(PageRange value);
    public PageRangeSelection get_PageRangeSelection();
    public void set_PageRangeSelection(PageRangeSelection value);
    public double get_PrintableAreaHeight();
    public double get_PrintableAreaWidth();
    public PrintQueue get_PrintQueue();
    public void set_PrintQueue(PrintQueue value);
    public PrintTicket get_PrintTicket();
    public void set_PrintTicket(PrintTicket value);
    public bool get_SelectedPagesEnabled();
    public void set_SelectedPagesEnabled(bool value);
    public bool get_UserPageRangeEnabled();
    public void set_UserPageRangeEnabled(bool value);
    public void PrintDocument(DocumentPaginator documentPaginator, string description);
    public void PrintVisual(Visual visual, string description);
    public Nullable`1<bool> ShowDialog();
}
public class System.Windows.Controls.PrintDialogException : Exception {
    protected PrintDialogException(SerializationInfo info, StreamingContext context);
    public PrintDialogException(string message);
    public PrintDialogException(string message, Exception innerException);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.ProgressBar : RangeBase {
    public static DependencyProperty IsIndeterminateProperty;
    public static DependencyProperty OrientationProperty;
    public bool IsIndeterminate { get; public set; }
    public Orientation Orientation { get; public set; }
    public bool get_IsIndeterminate();
    public void set_IsIndeterminate(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnValueChanged(double oldValue, double newValue);
}
[LocalizabilityAttribute("9")]
public class System.Windows.Controls.RadioButton : ToggleButton {
    public static DependencyProperty GroupNameProperty;
    [DefaultValueAttribute("")]
[LocalizabilityAttribute("17")]
public string GroupName { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    protected virtual void OnChecked(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected internal virtual void OnToggle();
}
[LocalizabilityAttribute("15")]
[ContentPropertyAttribute("Document")]
public class System.Windows.Controls.RichTextBox : TextBoxBase {
    public static DependencyProperty IsDocumentEnabledProperty;
    [DesignerSerializationVisibilityAttribute("0")]
public TextPointer CaretPosition { get; public set; }
    public FlowDocument Document { get; public set; }
    public bool IsDocumentEnabled { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public TextSelection Selection { get; }
    public RichTextBox(FlowDocument document);
    public TextPointer get_CaretPosition();
    public void set_CaretPosition(TextPointer value);
    public FlowDocument get_Document();
    public void set_Document(FlowDocument value);
    public bool get_IsDocumentEnabled();
    public void set_IsDocumentEnabled(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public TextSelection get_Selection();
    public TextPointer GetNextSpellingErrorPosition(TextPointer position, LogicalDirection direction);
    public TextPointer GetPositionFromPoint(Point point, bool snapToText);
    public SpellingError GetSpellingError(TextPointer position);
    public TextRange GetSpellingErrorRange(TextPointer position);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDpiChanged(DpiScale oldDpiScaleInfo, DpiScale newDpiScaleInfo);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeDocument();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Controls.RowDefinition : DefinitionBase {
    public static DependencyProperty HeightProperty;
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public static DependencyProperty MaxHeightProperty;
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public static DependencyProperty MinHeightProperty;
    public double ActualHeight { get; }
    public GridLength Height { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MaxHeight { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MinHeight { get; public set; }
    public double Offset { get; }
    public double get_ActualHeight();
    public GridLength get_Height();
    public void set_Height(GridLength value);
    public double get_MaxHeight();
    public void set_MaxHeight(double value);
    public double get_MinHeight();
    public void set_MinHeight(double value);
    public double get_Offset();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Controls.RowDefinitionCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public RowDefinition Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual RowDefinition get_Item(int index);
    public sealed virtual void set_Item(int index, RowDefinition value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(RowDefinition value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(RowDefinition value);
    public sealed virtual void CopyTo(RowDefinition[] array, int index);
    public sealed virtual int IndexOf(RowDefinition value);
    public sealed virtual void Insert(int index, RowDefinition value);
    public sealed virtual bool Remove(RowDefinition value);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    private sealed virtual override IEnumerator`1<RowDefinition> System.Collections.Generic.IEnumerable<System.Windows.Controls.RowDefinition>.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
public enum System.Windows.Controls.ScrollBarVisibility : Enum {
    public int value__;
    public static ScrollBarVisibility Disabled;
    public static ScrollBarVisibility Auto;
    public static ScrollBarVisibility Hidden;
    public static ScrollBarVisibility Visible;
}
public class System.Windows.Controls.ScrollChangedEventArgs : RoutedEventArgs {
    public double ExtentHeight { get; }
    public double ExtentHeightChange { get; }
    public double ExtentWidth { get; }
    public double ExtentWidthChange { get; }
    public double HorizontalChange { get; }
    public double HorizontalOffset { get; }
    public double VerticalChange { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportHeightChange { get; }
    public double ViewportWidth { get; }
    public double ViewportWidthChange { get; }
    public double get_ExtentHeight();
    public double get_ExtentHeightChange();
    public double get_ExtentWidth();
    public double get_ExtentWidthChange();
    public double get_HorizontalChange();
    public double get_HorizontalOffset();
    public double get_VerticalChange();
    public double get_VerticalOffset();
    public double get_ViewportHeight();
    public double get_ViewportHeightChange();
    public double get_ViewportWidth();
    public double get_ViewportWidthChange();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.ScrollChangedEventHandler : MulticastDelegate {
    public ScrollChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScrollChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScrollChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.ScrollContentPresenter : ContentPresenter {
    public static DependencyProperty CanContentScrollProperty;
    public AdornerLayer AdornerLayer { get; }
    public bool CanContentScroll { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double HorizontalOffset { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public ScrollViewer ScrollOwner { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    protected int VisualChildrenCount { get; }
    public AdornerLayer get_AdornerLayer();
    public bool get_CanContentScroll();
    public void set_CanContentScroll(bool value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_ViewportWidth();
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    protected virtual Visual GetVisualChild(int index);
    public sealed virtual void LineDown();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void LineUp();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    protected virtual Size MeasureOverride(Size constraint);
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public virtual void OnApplyTemplate();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
}
public enum System.Windows.Controls.ScrollUnit : Enum {
    public int value__;
    public static ScrollUnit Pixel;
    public static ScrollUnit Item;
}
[DefaultEventAttribute("ScrollChangedEvent")]
[LocalizabilityAttribute("16")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.ScrollViewer : ContentControl {
    public static DependencyProperty CanContentScrollProperty;
    public static DependencyProperty ComputedHorizontalScrollBarVisibilityProperty;
    public static DependencyProperty ComputedVerticalScrollBarVisibilityProperty;
    public static DependencyProperty ContentHorizontalOffsetProperty;
    public static DependencyProperty ContentVerticalOffsetProperty;
    public static DependencyProperty ExtentHeightProperty;
    public static DependencyProperty ExtentWidthProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty IsDeferredScrollingEnabledProperty;
    public static DependencyProperty PanningDecelerationProperty;
    public static DependencyProperty PanningModeProperty;
    public static DependencyProperty PanningRatioProperty;
    public static DependencyProperty ScrollableHeightProperty;
    public static DependencyProperty ScrollableWidthProperty;
    public static RoutedEvent ScrollChangedEvent;
    public static DependencyProperty VerticalOffsetProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public static DependencyProperty ViewportHeightProperty;
    public static DependencyProperty ViewportWidthProperty;
    public bool CanContentScroll { get; public set; }
    public Visibility ComputedHorizontalScrollBarVisibility { get; }
    public Visibility ComputedVerticalScrollBarVisibility { get; }
    public double ContentHorizontalOffset { get; }
    public double ContentVerticalOffset { get; }
    [CategoryAttribute("Layout")]
public double ExtentHeight { get; }
    [CategoryAttribute("Layout")]
public double ExtentWidth { get; }
    protected internal bool HandlesScrolling { get; }
    public double HorizontalOffset { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public bool IsDeferredScrollingEnabled { get; public set; }
    public double PanningDeceleration { get; public set; }
    public PanningMode PanningMode { get; public set; }
    public double PanningRatio { get; public set; }
    public double ScrollableHeight { get; }
    public double ScrollableWidth { get; }
    protected internal IScrollInfo ScrollInfo { get; protected internal set; }
    public double VerticalOffset { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    [CategoryAttribute("Layout")]
public double ViewportHeight { get; }
    [CategoryAttribute("Layout")]
public double ViewportWidth { get; }
    public bool get_CanContentScroll();
    public void set_CanContentScroll(bool value);
    public Visibility get_ComputedHorizontalScrollBarVisibility();
    public Visibility get_ComputedVerticalScrollBarVisibility();
    public double get_ContentHorizontalOffset();
    public double get_ContentVerticalOffset();
    public double get_ExtentHeight();
    public double get_ExtentWidth();
    protected internal virtual bool get_HandlesScrolling();
    public double get_HorizontalOffset();
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public bool get_IsDeferredScrollingEnabled();
    public void set_IsDeferredScrollingEnabled(bool value);
    public double get_PanningDeceleration();
    public void set_PanningDeceleration(double value);
    public PanningMode get_PanningMode();
    public void set_PanningMode(PanningMode value);
    public double get_PanningRatio();
    public void set_PanningRatio(double value);
    public double get_ScrollableHeight();
    public double get_ScrollableWidth();
    protected internal IScrollInfo get_ScrollInfo();
    protected internal void set_ScrollInfo(IScrollInfo value);
    public double get_VerticalOffset();
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public double get_ViewportHeight();
    public double get_ViewportWidth();
    public void add_ScrollChanged(ScrollChangedEventHandler value);
    public void remove_ScrollChanged(ScrollChangedEventHandler value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public static bool GetCanContentScroll(DependencyObject element);
    public static ScrollBarVisibility GetHorizontalScrollBarVisibility(DependencyObject element);
    public static bool GetIsDeferredScrollingEnabled(DependencyObject element);
    public static double GetPanningDeceleration(DependencyObject element);
    public static PanningMode GetPanningMode(DependencyObject element);
    public static double GetPanningRatio(DependencyObject element);
    public static ScrollBarVisibility GetVerticalScrollBarVisibility(DependencyObject element);
    protected virtual HitTestResult HitTestCore(PointHitTestParameters hitTestParameters);
    public void InvalidateScrollInfo();
    public void LineDown();
    public void LineLeft();
    public void LineRight();
    public void LineUp();
    protected virtual Size MeasureOverride(Size constraint);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnManipulationCompleted(ManipulationCompletedEventArgs e);
    protected virtual void OnManipulationDelta(ManipulationDeltaEventArgs e);
    protected virtual void OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs e);
    protected virtual void OnManipulationStarting(ManipulationStartingEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnScrollChanged(ScrollChangedEventArgs e);
    protected virtual void OnStylusSystemGesture(StylusSystemGestureEventArgs e);
    public void PageDown();
    public void PageLeft();
    public void PageRight();
    public void PageUp();
    public void ScrollToBottom();
    public void ScrollToEnd();
    public void ScrollToHome();
    public void ScrollToHorizontalOffset(double offset);
    public void ScrollToLeftEnd();
    public void ScrollToRightEnd();
    public void ScrollToTop();
    public void ScrollToVerticalOffset(double offset);
    public static void SetCanContentScroll(DependencyObject element, bool canContentScroll);
    public static void SetHorizontalScrollBarVisibility(DependencyObject element, ScrollBarVisibility horizontalScrollBarVisibility);
    public static void SetIsDeferredScrollingEnabled(DependencyObject element, bool value);
    public static void SetPanningDeceleration(DependencyObject element, double value);
    public static void SetPanningMode(DependencyObject element, PanningMode panningMode);
    public static void SetPanningRatio(DependencyObject element, double value);
    public static void SetVerticalScrollBarVisibility(DependencyObject element, ScrollBarVisibility verticalScrollBarVisibility);
}
public class System.Windows.Controls.SelectedCellsChangedEventArgs : EventArgs {
    public IList`1<DataGridCellInfo> AddedCells { get; }
    public IList`1<DataGridCellInfo> RemovedCells { get; }
    public SelectedCellsChangedEventArgs(List`1<DataGridCellInfo> addedCells, List`1<DataGridCellInfo> removedCells);
    public SelectedCellsChangedEventArgs(ReadOnlyCollection`1<DataGridCellInfo> addedCells, ReadOnlyCollection`1<DataGridCellInfo> removedCells);
    public IList`1<DataGridCellInfo> get_AddedCells();
    public IList`1<DataGridCellInfo> get_RemovedCells();
}
public class System.Windows.Controls.SelectedCellsChangedEventHandler : MulticastDelegate {
    public SelectedCellsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SelectedCellsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SelectedCellsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.SelectedDatesCollection : ObservableCollection`1<DateTime> {
    public SelectedDatesCollection(Calendar owner);
    public void AddRange(DateTime start, DateTime end);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, DateTime item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, DateTime item);
}
public class System.Windows.Controls.SelectionChangedEventArgs : RoutedEventArgs {
    public IList AddedItems { get; }
    public IList RemovedItems { get; }
    public SelectionChangedEventArgs(RoutedEvent id, IList removedItems, IList addedItems);
    public IList get_AddedItems();
    public IList get_RemovedItems();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.SelectionChangedEventHandler : MulticastDelegate {
    public SelectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SelectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SelectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.SelectionMode : Enum {
    public int value__;
    public static SelectionMode Single;
    public static SelectionMode Multiple;
    public static SelectionMode Extended;
}
public enum System.Windows.Controls.SelectiveScrollingOrientation : Enum {
    public int value__;
    public static SelectiveScrollingOrientation None;
    public static SelectiveScrollingOrientation Horizontal;
    public static SelectiveScrollingOrientation Vertical;
    public static SelectiveScrollingOrientation Both;
}
[LocalizabilityAttribute("0")]
public class System.Windows.Controls.Separator : Control {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DefaultEventAttribute("ValueChanged")]
[DefaultPropertyAttribute("Value")]
[LocalizabilityAttribute("16")]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Slider : RangeBase {
    public static DependencyProperty AutoToolTipPlacementProperty;
    public static DependencyProperty AutoToolTipPrecisionProperty;
    public static DependencyProperty DelayProperty;
    public static DependencyProperty IntervalProperty;
    public static DependencyProperty IsDirectionReversedProperty;
    public static DependencyProperty IsMoveToPointEnabledProperty;
    public static DependencyProperty IsSelectionRangeEnabledProperty;
    public static DependencyProperty IsSnapToTickEnabledProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty SelectionEndProperty;
    public static DependencyProperty SelectionStartProperty;
    public static DependencyProperty TickFrequencyProperty;
    public static DependencyProperty TickPlacementProperty;
    public static DependencyProperty TicksProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public AutoToolTipPlacement AutoToolTipPlacement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public int AutoToolTipPrecision { get; public set; }
    public static RoutedCommand DecreaseLarge { get; }
    public static RoutedCommand DecreaseSmall { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int Delay { get; public set; }
    public static RoutedCommand IncreaseLarge { get; }
    public static RoutedCommand IncreaseSmall { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int Interval { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsDirectionReversed { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool IsMoveToPointEnabled { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSelectionRangeEnabled { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool IsSnapToTickEnabled { get; public set; }
    public static RoutedCommand MaximizeValue { get; }
    public static RoutedCommand MinimizeValue { get; }
    public Orientation Orientation { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double SelectionEnd { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double SelectionStart { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public double TickFrequency { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public TickPlacement TickPlacement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public DoubleCollection Ticks { get; public set; }
    public AutoToolTipPlacement get_AutoToolTipPlacement();
    public void set_AutoToolTipPlacement(AutoToolTipPlacement value);
    public int get_AutoToolTipPrecision();
    public void set_AutoToolTipPrecision(int value);
    public static RoutedCommand get_DecreaseLarge();
    public static RoutedCommand get_DecreaseSmall();
    public int get_Delay();
    public void set_Delay(int value);
    public static RoutedCommand get_IncreaseLarge();
    public static RoutedCommand get_IncreaseSmall();
    public int get_Interval();
    public void set_Interval(int value);
    public bool get_IsDirectionReversed();
    public void set_IsDirectionReversed(bool value);
    public bool get_IsMoveToPointEnabled();
    public void set_IsMoveToPointEnabled(bool value);
    public bool get_IsSelectionRangeEnabled();
    public void set_IsSelectionRangeEnabled(bool value);
    public bool get_IsSnapToTickEnabled();
    public void set_IsSnapToTickEnabled(bool value);
    public static RoutedCommand get_MaximizeValue();
    public static RoutedCommand get_MinimizeValue();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public double get_SelectionEnd();
    public void set_SelectionEnd(double value);
    public double get_SelectionStart();
    public void set_SelectionStart(double value);
    public double get_TickFrequency();
    public void set_TickFrequency(double value);
    public TickPlacement get_TickPlacement();
    public void set_TickPlacement(TickPlacement value);
    public DoubleCollection get_Ticks();
    public void set_Ticks(DoubleCollection value);
    protected virtual Size ArrangeOverride(Size finalSize);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDecreaseLarge();
    protected virtual void OnDecreaseSmall();
    protected virtual void OnIncreaseLarge();
    protected virtual void OnIncreaseSmall();
    protected virtual void OnMaximizeValue();
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnMinimizeValue();
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnThumbDragCompleted(DragCompletedEventArgs e);
    protected virtual void OnThumbDragDelta(DragDeltaEventArgs e);
    protected virtual void OnThumbDragStarted(DragStartedEventArgs e);
    protected virtual void OnValueChanged(double oldValue, double newValue);
}
public class System.Windows.Controls.SoundPlayerAction : TriggerAction {
    public static DependencyProperty SourceProperty;
    public Uri Source { get; public set; }
    public Uri get_Source();
    public void set_Source(Uri value);
    public sealed virtual void Dispose();
}
public class System.Windows.Controls.SpellCheck : object {
    public static DependencyProperty CustomDictionariesProperty;
    public static DependencyProperty IsEnabledProperty;
    public static DependencyProperty SpellingReformProperty;
    public IList CustomDictionaries { get; }
    public bool IsEnabled { get; public set; }
    public SpellingReform SpellingReform { get; public set; }
    public IList get_CustomDictionaries();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public SpellingReform get_SpellingReform();
    public void set_SpellingReform(SpellingReform value);
    public static IList GetCustomDictionaries(TextBoxBase textBoxBase);
    public static bool GetIsEnabled(TextBoxBase textBoxBase);
    public static void SetIsEnabled(TextBoxBase textBoxBase, bool value);
    public static void SetSpellingReform(TextBoxBase textBoxBase, SpellingReform value);
}
public class System.Windows.Controls.SpellingError : object {
    public IEnumerable`1<string> Suggestions { get; }
    public IEnumerable`1<string> get_Suggestions();
    public void Correct(string correctedText);
    public void IgnoreAll();
}
public enum System.Windows.Controls.SpellingReform : Enum {
    public int value__;
    public static SpellingReform PreAndPostreform;
    public static SpellingReform Prereform;
    public static SpellingReform Postreform;
}
public class System.Windows.Controls.StackPanel : Panel {
    public static DependencyProperty OrientationProperty;
    [DefaultValueAttribute("False")]
public bool CanHorizontallyScroll { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanVerticallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    protected internal bool HasLogicalOrientation { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double HorizontalOffset { get; }
    protected internal Orientation LogicalOrientation { get; }
    public Orientation Orientation { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public ScrollViewer ScrollOwner { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ExtentWidth();
    protected internal virtual bool get_HasLogicalOrientation();
    public sealed virtual double get_HorizontalOffset();
    protected internal virtual Orientation get_LogicalOrientation();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_ViewportWidth();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public sealed virtual void LineDown();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void LineUp();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    protected virtual Size MeasureOverride(Size constraint);
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.StickyNoteControl : Control {
    public static DependencyProperty AuthorProperty;
    public static DependencyProperty CaptionFontFamilyProperty;
    public static DependencyProperty CaptionFontSizeProperty;
    public static DependencyProperty CaptionFontStretchProperty;
    public static DependencyProperty CaptionFontStyleProperty;
    public static DependencyProperty CaptionFontWeightProperty;
    public static RoutedCommand DeleteNoteCommand;
    public static RoutedCommand InkCommand;
    public static XmlQualifiedName InkSchemaName;
    public static DependencyProperty IsActiveProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsMouseOverAnchorProperty;
    public static DependencyProperty PenWidthProperty;
    public static DependencyProperty StickyNoteTypeProperty;
    public static XmlQualifiedName TextSchemaName;
    public IAnchorInfo AnchorInfo { get; }
    public string Author { get; }
    public FontFamily CaptionFontFamily { get; public set; }
    public double CaptionFontSize { get; public set; }
    public FontStretch CaptionFontStretch { get; public set; }
    public FontStyle CaptionFontStyle { get; public set; }
    public FontWeight CaptionFontWeight { get; public set; }
    public bool IsActive { get; }
    public bool IsExpanded { get; public set; }
    public bool IsMouseOverAnchor { get; }
    public double PenWidth { get; public set; }
    public StickyNoteType StickyNoteType { get; }
    public IAnchorInfo get_AnchorInfo();
    public string get_Author();
    public FontFamily get_CaptionFontFamily();
    public void set_CaptionFontFamily(FontFamily value);
    public double get_CaptionFontSize();
    public void set_CaptionFontSize(double value);
    public FontStretch get_CaptionFontStretch();
    public void set_CaptionFontStretch(FontStretch value);
    public FontStyle get_CaptionFontStyle();
    public void set_CaptionFontStyle(FontStyle value);
    public FontWeight get_CaptionFontWeight();
    public void set_CaptionFontWeight(FontWeight value);
    public bool get_IsActive();
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_IsMouseOverAnchor();
    public double get_PenWidth();
    public void set_PenWidth(double value);
    public StickyNoteType get_StickyNoteType();
    public virtual void OnApplyTemplate();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs args);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
}
public enum System.Windows.Controls.StickyNoteType : Enum {
    public int value__;
    public static StickyNoteType Text;
    public static StickyNoteType Ink;
}
public enum System.Windows.Controls.StretchDirection : Enum {
    public int value__;
    public static StretchDirection UpOnly;
    public static StretchDirection DownOnly;
    public static StretchDirection Both;
}
public class System.Windows.Controls.StyleSelector : object {
    public virtual Style SelectStyle(object item, DependencyObject container);
}
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.TabControl : Selector {
    public static DependencyProperty ContentStringFormatProperty;
    public static DependencyProperty ContentTemplateProperty;
    public static DependencyProperty ContentTemplateSelectorProperty;
    public static DependencyProperty SelectedContentProperty;
    public static DependencyProperty SelectedContentStringFormatProperty;
    public static DependencyProperty SelectedContentTemplateProperty;
    public static DependencyProperty SelectedContentTemplateSelectorProperty;
    public static DependencyProperty TabStripPlacementProperty;
    public string ContentStringFormat { get; public set; }
    public DataTemplate ContentTemplate { get; public set; }
    public DataTemplateSelector ContentTemplateSelector { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public object SelectedContent { get; }
    public string SelectedContentStringFormat { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public DataTemplate SelectedContentTemplate { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public DataTemplateSelector SelectedContentTemplateSelector { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public Dock TabStripPlacement { get; public set; }
    public string get_ContentStringFormat();
    public void set_ContentStringFormat(string value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public DataTemplateSelector get_ContentTemplateSelector();
    public void set_ContentTemplateSelector(DataTemplateSelector value);
    public object get_SelectedContent();
    public string get_SelectedContentStringFormat();
    public DataTemplate get_SelectedContentTemplate();
    public DataTemplateSelector get_SelectedContentTemplateSelector();
    public Dock get_TabStripPlacement();
    public void set_TabStripPlacement(Dock value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
}
[DefaultEventAttribute("IsSelectedChanged")]
public class System.Windows.Controls.TabItem : HeaderedContentControl {
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty TabStripPlacementProperty;
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool IsSelected { get; public set; }
    public Dock TabStripPlacement { get; }
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Dock get_TabStripPlacement();
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual void OnContentTemplateChanged(DataTemplate oldContentTemplate, DataTemplate newContentTemplate);
    protected virtual void OnContentTemplateSelectorChanged(DataTemplateSelector oldContentTemplateSelector, DataTemplateSelector newContentTemplateSelector);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
}
[LocalizabilityAttribute("1")]
[ContentPropertyAttribute("Inlines")]
public class System.Windows.Controls.TextBlock : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BaselineOffsetProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStretchProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty IsHyphenationEnabledProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty TextDecorationsProperty;
    public static DependencyProperty TextEffectsProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty TextTrimmingProperty;
    public static DependencyProperty TextWrappingProperty;
    public Brush Background { get; public set; }
    public double BaselineOffset { get; public set; }
    public LineBreakCondition BreakAfter { get; }
    public LineBreakCondition BreakBefore { get; }
    public TextPointer ContentEnd { get; }
    public TextPointer ContentStart { get; }
    [LocalizabilityAttribute("14")]
public FontFamily FontFamily { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    protected IEnumerator`1<IInputElement> HostedElementsCore { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public InlineCollection Inlines { get; }
    public bool IsHyphenationEnabled { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public Thickness Padding { get; public set; }
    private IEnumerator`1<IInputElement> System.Windows.IContentHost.HostedElements { get; }
    [LocalizabilityAttribute("1")]
public string Text { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextDecorationCollection TextDecorations { get; public set; }
    public TextEffectCollection TextEffects { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public Typography Typography { get; }
    protected int VisualChildrenCount { get; }
    public TextBlock(Inline inline);
    public Brush get_Background();
    public void set_Background(Brush value);
    public double get_BaselineOffset();
    public void set_BaselineOffset(double value);
    public LineBreakCondition get_BreakAfter();
    public LineBreakCondition get_BreakBefore();
    public TextPointer get_ContentEnd();
    public TextPointer get_ContentStart();
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    protected virtual IEnumerator`1<IInputElement> get_HostedElementsCore();
    public InlineCollection get_Inlines();
    public bool get_IsHyphenationEnabled();
    public void set_IsHyphenationEnabled(bool value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    private sealed virtual override IEnumerator`1<IInputElement> System.Windows.IContentHost.get_HostedElements();
    public string get_Text();
    public void set_Text(string value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public TextEffectCollection get_TextEffects();
    public void set_TextEffects(TextEffectCollection value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public Typography get_Typography();
    protected virtual int get_VisualChildrenCount();
    protected sealed virtual Size ArrangeOverride(Size arrangeSize);
    public static double GetBaselineOffset(DependencyObject element);
    public static FontFamily GetFontFamily(DependencyObject element);
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
public static double GetFontSize(DependencyObject element);
    public static FontStretch GetFontStretch(DependencyObject element);
    public static FontStyle GetFontStyle(DependencyObject element);
    public static FontWeight GetFontWeight(DependencyObject element);
    public static Brush GetForeground(DependencyObject element);
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public static double GetLineHeight(DependencyObject element);
    public static LineStackingStrategy GetLineStackingStrategy(DependencyObject element);
    public TextPointer GetPositionFromPoint(Point point, bool snapToText);
    protected virtual ReadOnlyCollection`1<Rect> GetRectanglesCore(ContentElement child);
    public static TextAlignment GetTextAlignment(DependencyObject element);
    protected virtual Visual GetVisualChild(int index);
    protected sealed virtual HitTestResult HitTestCore(PointHitTestParameters hitTestParameters);
    protected virtual IInputElement InputHitTestCore(Point point);
    protected sealed virtual Size MeasureOverride(Size constraint);
    protected virtual void OnChildDesiredSizeChangedCore(UIElement child);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected sealed virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected sealed virtual void OnRender(DrawingContext ctx);
    public static void SetBaselineOffset(DependencyObject element, double value);
    public static void SetFontFamily(DependencyObject element, FontFamily value);
    public static void SetFontSize(DependencyObject element, double value);
    public static void SetFontStretch(DependencyObject element, FontStretch value);
    public static void SetFontStyle(DependencyObject element, FontStyle value);
    public static void SetFontWeight(DependencyObject element, FontWeight value);
    public static void SetForeground(DependencyObject element, Brush value);
    public static void SetLineHeight(DependencyObject element, double value);
    public static void SetLineStackingStrategy(DependencyObject element, LineStackingStrategy value);
    public static void SetTextAlignment(DependencyObject element, TextAlignment value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeBaselineOffset();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeInlines(XamlDesignerSerializationManager manager);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeText();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override ReadOnlyCollection`1<Rect> System.Windows.IContentHost.GetRectangles(ContentElement child);
    private sealed virtual override IInputElement System.Windows.IContentHost.InputHitTest(Point point);
    private sealed virtual override void System.Windows.IContentHost.OnChildDesiredSizeChanged(UIElement child);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[LocalizabilityAttribute("1")]
[ContentPropertyAttribute("Text")]
public class System.Windows.Controls.TextBox : TextBoxBase {
    public static DependencyProperty CharacterCasingProperty;
    public static DependencyProperty MaxLengthProperty;
    public static DependencyProperty MaxLinesProperty;
    public static DependencyProperty MinLinesProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty TextDecorationsProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty TextWrappingProperty;
    [DesignerSerializationVisibilityAttribute("0")]
public int CaretIndex { get; public set; }
    public CharacterCasing CharacterCasing { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public int LineCount { get; }
    protected internal IEnumerator LogicalChildren { get; }
    [DefaultValueAttribute("0")]
[LocalizabilityAttribute("0")]
public int MaxLength { get; public set; }
    [DefaultValueAttribute("2147483647")]
public int MaxLines { get; public set; }
    [DefaultValueAttribute("1")]
public int MinLines { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string SelectedText { get; public set; }
    [DefaultValueAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int SelectionLength { get; public set; }
    [DefaultValueAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int SelectionStart { get; public set; }
    [DefaultValueAttribute("")]
[LocalizabilityAttribute("1")]
public string Text { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextDecorationCollection TextDecorations { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public Typography Typography { get; }
    public int get_CaretIndex();
    public void set_CaretIndex(int value);
    public CharacterCasing get_CharacterCasing();
    public void set_CharacterCasing(CharacterCasing value);
    public int get_LineCount();
    protected internal virtual IEnumerator get_LogicalChildren();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public int get_MaxLines();
    public void set_MaxLines(int value);
    public int get_MinLines();
    public void set_MinLines(int value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public string get_Text();
    public void set_Text(string value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public Typography get_Typography();
    public void Clear();
    public int GetCharacterIndexFromLineIndex(int lineIndex);
    public int GetCharacterIndexFromPoint(Point point, bool snapToText);
    public int GetFirstVisibleLineIndex();
    public int GetLastVisibleLineIndex();
    public int GetLineIndexFromCharacterIndex(int charIndex);
    public int GetLineLength(int lineIndex);
    public string GetLineText(int lineIndex);
    public int GetNextSpellingErrorCharacterIndex(int charIndex, LogicalDirection direction);
    public Rect GetRectFromCharacterIndex(int charIndex);
    public Rect GetRectFromCharacterIndex(int charIndex, bool trailingEdge);
    public SpellingError GetSpellingError(int charIndex);
    public int GetSpellingErrorLength(int charIndex);
    public int GetSpellingErrorStart(int charIndex);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    public void ScrollToLine(int lineIndex);
    public void Select(int start, int length);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeText(XamlDesignerSerializationManager manager);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Controls.TextChange : object {
    public int AddedLength { get; }
    public int Offset { get; }
    public int RemovedLength { get; }
    public int get_AddedLength();
    public int get_Offset();
    public int get_RemovedLength();
}
public class System.Windows.Controls.TextChangedEventArgs : RoutedEventArgs {
    public ICollection`1<TextChange> Changes { get; }
    public UndoAction UndoAction { get; }
    public TextChangedEventArgs(RoutedEvent id, UndoAction action);
    public TextChangedEventArgs(RoutedEvent id, UndoAction action, ICollection`1<TextChange> changes);
    public ICollection`1<TextChange> get_Changes();
    public UndoAction get_UndoAction();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.TextChangedEventHandler : MulticastDelegate {
    public TextChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TextChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TextChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Controls.TextSearch : DependencyObject {
    public static DependencyProperty TextPathProperty;
    public static DependencyProperty TextProperty;
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static string GetText(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static string GetTextPath(DependencyObject element);
    public static void SetText(DependencyObject element, string text);
    public static void SetTextPath(DependencyObject element, string path);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.ToolBar : HeaderedItemsControl {
    public static DependencyProperty BandIndexProperty;
    public static DependencyProperty BandProperty;
    public static DependencyProperty HasOverflowItemsProperty;
    public static DependencyProperty IsOverflowItemProperty;
    public static DependencyProperty IsOverflowOpenProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty OverflowModeProperty;
    public int Band { get; public set; }
    public int BandIndex { get; public set; }
    public static ResourceKey ButtonStyleKey { get; }
    public static ResourceKey CheckBoxStyleKey { get; }
    public static ResourceKey ComboBoxStyleKey { get; }
    public bool HasOverflowItems { get; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsOverflowOpen { get; public set; }
    public static ResourceKey MenuStyleKey { get; }
    public Orientation Orientation { get; }
    public static ResourceKey RadioButtonStyleKey { get; }
    public static ResourceKey SeparatorStyleKey { get; }
    public static ResourceKey TextBoxStyleKey { get; }
    public static ResourceKey ToggleButtonStyleKey { get; }
    public int get_Band();
    public void set_Band(int value);
    public int get_BandIndex();
    public void set_BandIndex(int value);
    public static ResourceKey get_ButtonStyleKey();
    public static ResourceKey get_CheckBoxStyleKey();
    public static ResourceKey get_ComboBoxStyleKey();
    public bool get_HasOverflowItems();
    public bool get_IsOverflowOpen();
    public void set_IsOverflowOpen(bool value);
    public static ResourceKey get_MenuStyleKey();
    public Orientation get_Orientation();
    public static ResourceKey get_RadioButtonStyleKey();
    public static ResourceKey get_SeparatorStyleKey();
    public static ResourceKey get_TextBoxStyleKey();
    public static ResourceKey get_ToggleButtonStyleKey();
    public static bool GetIsOverflowItem(DependencyObject element);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static OverflowMode GetOverflowMode(DependencyObject element);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public static void SetOverflowMode(DependencyObject element, OverflowMode mode);
}
[ContentPropertyAttribute("ToolBars")]
public class System.Windows.Controls.ToolBarTray : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty IsLockedProperty;
    public static DependencyProperty OrientationProperty;
    public Brush Background { get; public set; }
    public bool IsLocked { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public Orientation Orientation { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public Collection`1<ToolBar> ToolBars { get; }
    protected int VisualChildrenCount { get; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Collection`1<ToolBar> get_ToolBars();
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public static bool GetIsLocked(DependencyObject element);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext dc);
    public static void SetIsLocked(DependencyObject element, bool value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[DefaultEventAttribute("Opened")]
[LocalizabilityAttribute("10")]
public class System.Windows.Controls.ToolTip : ContentControl {
    public static RoutedEvent ClosedEvent;
    public static DependencyProperty CustomPopupPlacementCallbackProperty;
    public static DependencyProperty HasDropShadowProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty IsOpenProperty;
    public static RoutedEvent OpenedEvent;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty PlacementRectangleProperty;
    public static DependencyProperty PlacementTargetProperty;
    public static DependencyProperty ShowsToolTipOnKeyboardFocusProperty;
    public static DependencyProperty StaysOpenProperty;
    public static DependencyProperty VerticalOffsetProperty;
    [BindableAttribute("False")]
[CategoryAttribute("Layout")]
public CustomPopupPlacementCallback CustomPopupPlacementCallback { get; public set; }
    public bool HasDropShadow { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double HorizontalOffset { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsOpen { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public PlacementMode Placement { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
public Rect PlacementRectangle { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[DesignerSerializationVisibilityAttribute("0")]
public UIElement PlacementTarget { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public Nullable`1<bool> ShowsToolTipOnKeyboardFocus { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public bool StaysOpen { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Layout")]
[TypeConverterAttribute("System.Windows.LengthConverter")]
public double VerticalOffset { get; public set; }
    public CustomPopupPlacementCallback get_CustomPopupPlacementCallback();
    public void set_CustomPopupPlacementCallback(CustomPopupPlacementCallback value);
    public bool get_HasDropShadow();
    public void set_HasDropShadow(bool value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public PlacementMode get_Placement();
    public void set_Placement(PlacementMode value);
    public Rect get_PlacementRectangle();
    public void set_PlacementRectangle(Rect value);
    public UIElement get_PlacementTarget();
    public void set_PlacementTarget(UIElement value);
    public Nullable`1<bool> get_ShowsToolTipOnKeyboardFocus();
    public void set_ShowsToolTipOnKeyboardFocus(Nullable`1<bool> value);
    public bool get_StaysOpen();
    public void set_StaysOpen(bool value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public void add_Closed(RoutedEventHandler value);
    public void remove_Closed(RoutedEventHandler value);
    public void add_Opened(RoutedEventHandler value);
    public void remove_Opened(RoutedEventHandler value);
    protected virtual void OnClosed(RoutedEventArgs e);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnOpened(RoutedEventArgs e);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
}
public class System.Windows.Controls.ToolTipEventArgs : RoutedEventArgs {
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.ToolTipEventHandler : MulticastDelegate {
    public ToolTipEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolTipEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolTipEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class System.Windows.Controls.ToolTipService : object {
    public static DependencyProperty BetweenShowDelayProperty;
    public static DependencyProperty HasDropShadowProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty InitialShowDelayProperty;
    public static DependencyProperty IsEnabledProperty;
    public static DependencyProperty IsOpenProperty;
    public static DependencyProperty PlacementProperty;
    public static DependencyProperty PlacementRectangleProperty;
    public static DependencyProperty PlacementTargetProperty;
    public static DependencyProperty ShowDurationProperty;
    public static DependencyProperty ShowOnDisabledProperty;
    public static DependencyProperty ShowsToolTipOnKeyboardFocusProperty;
    public static RoutedEvent ToolTipClosingEvent;
    public static RoutedEvent ToolTipOpeningEvent;
    public static DependencyProperty ToolTipProperty;
    public static DependencyProperty VerticalOffsetProperty;
    public static void AddToolTipClosingHandler(DependencyObject element, ToolTipEventHandler handler);
    public static void AddToolTipOpeningHandler(DependencyObject element, ToolTipEventHandler handler);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetBetweenShowDelay(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetHasDropShadow(DependencyObject element);
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static double GetHorizontalOffset(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetInitialShowDelay(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetIsEnabled(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetIsOpen(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static PlacementMode GetPlacement(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static Rect GetPlacementRectangle(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static UIElement GetPlacementTarget(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetShowDuration(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetShowOnDisabled(DependencyObject element);
    public static Nullable`1<bool> GetShowsToolTipOnKeyboardFocus(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static object GetToolTip(DependencyObject element);
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static double GetVerticalOffset(DependencyObject element);
    public static void RemoveToolTipClosingHandler(DependencyObject element, ToolTipEventHandler handler);
    public static void RemoveToolTipOpeningHandler(DependencyObject element, ToolTipEventHandler handler);
    public static void SetBetweenShowDelay(DependencyObject element, int value);
    public static void SetHasDropShadow(DependencyObject element, bool value);
    public static void SetHorizontalOffset(DependencyObject element, double value);
    public static void SetInitialShowDelay(DependencyObject element, int value);
    public static void SetIsEnabled(DependencyObject element, bool value);
    public static void SetPlacement(DependencyObject element, PlacementMode value);
    public static void SetPlacementRectangle(DependencyObject element, Rect value);
    public static void SetPlacementTarget(DependencyObject element, UIElement value);
    public static void SetShowDuration(DependencyObject element, int value);
    public static void SetShowOnDisabled(DependencyObject element, bool value);
    public static void SetShowsToolTipOnKeyboardFocus(DependencyObject element, Nullable`1<bool> value);
    public static void SetToolTip(DependencyObject element, object value);
    public static void SetVerticalOffset(DependencyObject element, double value);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.TreeView : ItemsControl {
    public static RoutedEvent SelectedItemChangedEvent;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedValuePathProperty;
    public static DependencyProperty SelectedValueProperty;
    protected internal bool HandlesScrolling { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
[ReadOnlyAttribute("True")]
public object SelectedItem { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[DesignerSerializationVisibilityAttribute("0")]
[ReadOnlyAttribute("True")]
public object SelectedValue { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public string SelectedValuePath { get; public set; }
    protected internal virtual bool get_HandlesScrolling();
    public object get_SelectedItem();
    public object get_SelectedValue();
    public string get_SelectedValuePath();
    public void set_SelectedValuePath(string value);
    public void add_SelectedItemChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public void remove_SelectedItemChanged(RoutedPropertyChangedEventHandler`1<object> value);
    protected virtual bool ExpandSubtree(TreeViewItem container);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnSelectedItemChanged(RoutedPropertyChangedEventArgs`1<object> e);
}
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.TreeViewItem : HeaderedItemsControl {
    public static RoutedEvent CollapsedEvent;
    public static RoutedEvent ExpandedEvent;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsSelectionActiveProperty;
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnselectedEvent;
    public bool IsExpanded { get; public set; }
    public bool IsSelected { get; public set; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Appearance")]
[ReadOnlyAttribute("True")]
public bool IsSelectionActive { get; }
    private HierarchicalVirtualizationConstraints System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.Constraints { get; private set; }
    private HierarchicalVirtualizationHeaderDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.HeaderDesiredSizes { get; }
    private bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.InBackgroundLayout { get; private set; }
    private HierarchicalVirtualizationItemDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.ItemDesiredSizes { get; private set; }
    private Panel System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.ItemsHost { get; }
    private bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.MustDisableVirtualization { get; private set; }
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsSelectionActive();
    private sealed virtual override HierarchicalVirtualizationConstraints System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_Constraints();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_Constraints(HierarchicalVirtualizationConstraints value);
    private sealed virtual override HierarchicalVirtualizationHeaderDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_HeaderDesiredSizes();
    private sealed virtual override bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_InBackgroundLayout();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_InBackgroundLayout(bool value);
    private sealed virtual override HierarchicalVirtualizationItemDesiredSizes System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_ItemDesiredSizes();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_ItemDesiredSizes(HierarchicalVirtualizationItemDesiredSizes value);
    private sealed virtual override Panel System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_ItemsHost();
    private sealed virtual override bool System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.get_MustDisableVirtualization();
    private sealed virtual override void System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo.set_MustDisableVirtualization(bool value);
    public void add_Collapsed(RoutedEventHandler value);
    public void remove_Collapsed(RoutedEventHandler value);
    public void add_Expanded(RoutedEventHandler value);
    public void remove_Expanded(RoutedEventHandler value);
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    public void add_Unselected(RoutedEventHandler value);
    public void remove_Unselected(RoutedEventHandler value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    public void ExpandSubtree();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void OnCollapsed(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnExpanded(RoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Controls.UIElementCollection : object {
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public UIElement Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public UIElementCollection(UIElement visualParent, FrameworkElement logicalParent);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual UIElement get_Item(int index);
    public virtual void set_Item(int index, UIElement value);
    public virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual int Add(UIElement element);
    public virtual void Clear();
    protected void ClearLogicalParent(UIElement element);
    public virtual bool Contains(UIElement element);
    public virtual void CopyTo(Array array, int index);
    public virtual void CopyTo(UIElement[] array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(UIElement element);
    public virtual void Insert(int index, UIElement element);
    public virtual void Remove(UIElement element);
    public virtual void RemoveAt(int index);
    public virtual void RemoveRange(int index, int count);
    protected void SetLogicalParent(UIElement element);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
public enum System.Windows.Controls.UndoAction : Enum {
    public int value__;
    public static UndoAction None;
    public static UndoAction Merge;
    public static UndoAction Undo;
    public static UndoAction Redo;
    public static UndoAction Clear;
    public static UndoAction Create;
}
public class System.Windows.Controls.UserControl : ContentControl {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public static class System.Windows.Controls.Validation : object {
    public static RoutedEvent ErrorEvent;
    public static DependencyProperty ErrorsProperty;
    public static DependencyProperty ErrorTemplateProperty;
    public static DependencyProperty HasErrorProperty;
    public static DependencyProperty ValidationAdornerSiteForProperty;
    public static DependencyProperty ValidationAdornerSiteProperty;
    public static void AddErrorHandler(DependencyObject element, EventHandler`1<ValidationErrorEventArgs> handler);
    public static void ClearInvalid(BindingExpressionBase bindingExpression);
    public static ReadOnlyObservableCollection`1<ValidationError> GetErrors(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static ControlTemplate GetErrorTemplate(DependencyObject element);
    public static bool GetHasError(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static DependencyObject GetValidationAdornerSite(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static DependencyObject GetValidationAdornerSiteFor(DependencyObject element);
    public static void MarkInvalid(BindingExpressionBase bindingExpression, ValidationError validationError);
    public static void RemoveErrorHandler(DependencyObject element, EventHandler`1<ValidationErrorEventArgs> handler);
    public static void SetErrorTemplate(DependencyObject element, ControlTemplate value);
    public static void SetValidationAdornerSite(DependencyObject element, DependencyObject value);
    public static void SetValidationAdornerSiteFor(DependencyObject element, DependencyObject value);
}
public class System.Windows.Controls.ValidationError : object {
    public object BindingInError { get; }
    public object ErrorContent { get; public set; }
    public Exception Exception { get; public set; }
    public ValidationRule RuleInError { get; public set; }
    public ValidationError(ValidationRule ruleInError, object bindingInError);
    public ValidationError(ValidationRule ruleInError, object bindingInError, object errorContent, Exception exception);
    public object get_BindingInError();
    public object get_ErrorContent();
    public void set_ErrorContent(object value);
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public ValidationRule get_RuleInError();
    public void set_RuleInError(ValidationRule value);
}
public enum System.Windows.Controls.ValidationErrorEventAction : Enum {
    public int value__;
    public static ValidationErrorEventAction Added;
    public static ValidationErrorEventAction Removed;
}
public class System.Windows.Controls.ValidationErrorEventArgs : RoutedEventArgs {
    public ValidationErrorEventAction Action { get; }
    public ValidationError Error { get; }
    public ValidationErrorEventAction get_Action();
    public ValidationError get_Error();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.ValidationResult : object {
    public object ErrorContent { get; }
    public bool IsValid { get; }
    public static ValidationResult ValidResult { get; }
    public ValidationResult(bool isValid, object errorContent);
    public object get_ErrorContent();
    public bool get_IsValid();
    public static ValidationResult get_ValidResult();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ValidationResult left, ValidationResult right);
    public static bool op_Inequality(ValidationResult left, ValidationResult right);
}
public abstract class System.Windows.Controls.ValidationRule : object {
    public bool ValidatesOnTargetUpdated { get; public set; }
    public ValidationStep ValidationStep { get; public set; }
    protected ValidationRule(ValidationStep validationStep, bool validatesOnTargetUpdated);
    public bool get_ValidatesOnTargetUpdated();
    public void set_ValidatesOnTargetUpdated(bool value);
    public ValidationStep get_ValidationStep();
    public void set_ValidationStep(ValidationStep value);
    public abstract virtual ValidationResult Validate(object value, CultureInfo cultureInfo);
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo, BindingExpressionBase owner);
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo, BindingGroup owner);
}
public enum System.Windows.Controls.ValidationStep : Enum {
    public int value__;
    public static ValidationStep RawProposedValue;
    public static ValidationStep ConvertedProposedValue;
    public static ValidationStep UpdatedValue;
    public static ValidationStep CommittedValue;
}
public abstract class System.Windows.Controls.ViewBase : DependencyObject {
    protected internal object DefaultStyleKey { get; }
    protected internal object ItemContainerDefaultStyleKey { get; }
    protected internal virtual object get_DefaultStyleKey();
    protected internal virtual object get_ItemContainerDefaultStyleKey();
    protected internal virtual void ClearItem(ListViewItem item);
    protected internal virtual IViewAutomationPeer GetAutomationPeer(ListView parent);
    protected internal virtual void PrepareItem(ListViewItem item);
}
public class System.Windows.Controls.Viewbox : Decorator {
    public static DependencyProperty StretchDirectionProperty;
    public static DependencyProperty StretchProperty;
    public UIElement Child { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    protected int VisualChildrenCount { get; }
    public virtual UIElement get_Child();
    public virtual void set_Child(UIElement value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
}
[LocalizabilityAttribute("17")]
[ContentPropertyAttribute("Children")]
public class System.Windows.Controls.Viewport3D : FrameworkElement {
    public static DependencyProperty CameraProperty;
    public static DependencyProperty ChildrenProperty;
    public Camera Camera { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public Visual3DCollection Children { get; }
    protected int VisualChildrenCount { get; }
    public Camera get_Camera();
    public void set_Camera(Camera value);
    public Visual3DCollection get_Children();
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[TypeConverterAttribute("System.Windows.Controls.VirtualizationCacheLengthConverter")]
public class System.Windows.Controls.VirtualizationCacheLength : ValueType {
    public double CacheAfterViewport { get; }
    public double CacheBeforeViewport { get; }
    public VirtualizationCacheLength(double cacheBeforeAndAfterViewport);
    public VirtualizationCacheLength(double cacheBeforeViewport, double cacheAfterViewport);
    public double get_CacheAfterViewport();
    public double get_CacheBeforeViewport();
    public virtual bool Equals(object oCompare);
    public sealed virtual bool Equals(VirtualizationCacheLength cacheLength);
    public virtual int GetHashCode();
    public static bool op_Equality(VirtualizationCacheLength cl1, VirtualizationCacheLength cl2);
    public static bool op_Inequality(VirtualizationCacheLength cl1, VirtualizationCacheLength cl2);
    public virtual string ToString();
}
public class System.Windows.Controls.VirtualizationCacheLengthConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public enum System.Windows.Controls.VirtualizationCacheLengthUnit : Enum {
    public int value__;
    public static VirtualizationCacheLengthUnit Pixel;
    public static VirtualizationCacheLengthUnit Item;
    public static VirtualizationCacheLengthUnit Page;
}
public enum System.Windows.Controls.VirtualizationMode : Enum {
    public int value__;
    public static VirtualizationMode Standard;
    public static VirtualizationMode Recycling;
}
public abstract class System.Windows.Controls.VirtualizingPanel : Panel {
    public static DependencyProperty CacheLengthProperty;
    public static DependencyProperty CacheLengthUnitProperty;
    public static DependencyProperty IsContainerVirtualizableProperty;
    public static DependencyProperty IsVirtualizingProperty;
    public static DependencyProperty IsVirtualizingWhenGroupingProperty;
    public static DependencyProperty ScrollUnitProperty;
    public static DependencyProperty VirtualizationModeProperty;
    public bool CanHierarchicallyScrollAndVirtualize { get; }
    protected bool CanHierarchicallyScrollAndVirtualizeCore { get; }
    public IItemContainerGenerator ItemContainerGenerator { get; }
    public bool get_CanHierarchicallyScrollAndVirtualize();
    protected virtual bool get_CanHierarchicallyScrollAndVirtualizeCore();
    public IItemContainerGenerator get_ItemContainerGenerator();
    protected void AddInternalChild(UIElement child);
    protected internal virtual void BringIndexIntoView(int index);
    public void BringIndexIntoViewPublic(int index);
    public static VirtualizationCacheLength GetCacheLength(DependencyObject element);
    public static VirtualizationCacheLengthUnit GetCacheLengthUnit(DependencyObject element);
    public static bool GetIsContainerVirtualizable(DependencyObject element);
    public static bool GetIsVirtualizing(DependencyObject element);
    public static bool GetIsVirtualizingWhenGrouping(DependencyObject element);
    public double GetItemOffset(UIElement child);
    protected virtual double GetItemOffsetCore(UIElement child);
    public static ScrollUnit GetScrollUnit(DependencyObject element);
    public static VirtualizationMode GetVirtualizationMode(DependencyObject element);
    protected void InsertInternalChild(int index, UIElement child);
    protected virtual void OnClearChildren();
    protected virtual void OnItemsChanged(object sender, ItemsChangedEventArgs args);
    protected void RemoveInternalChildRange(int index, int range);
    public static void SetCacheLength(DependencyObject element, VirtualizationCacheLength value);
    public static void SetCacheLengthUnit(DependencyObject element, VirtualizationCacheLengthUnit value);
    public static void SetIsContainerVirtualizable(DependencyObject element, bool value);
    public static void SetIsVirtualizing(DependencyObject element, bool value);
    public static void SetIsVirtualizingWhenGrouping(DependencyObject element, bool value);
    public static void SetScrollUnit(DependencyObject element, ScrollUnit value);
    public static void SetVirtualizationMode(DependencyObject element, VirtualizationMode value);
    public bool ShouldItemsChangeAffectLayout(bool areItemChangesLocal, ItemsChangedEventArgs args);
    protected virtual bool ShouldItemsChangeAffectLayoutCore(bool areItemChangesLocal, ItemsChangedEventArgs args);
}
public class System.Windows.Controls.VirtualizingStackPanel : VirtualizingPanel {
    public static RoutedEvent CleanUpVirtualizedItemEvent;
    public static DependencyProperty IsVirtualizingProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty VirtualizationModeProperty;
    protected bool CanHierarchicallyScrollAndVirtualizeCore { get; }
    [DefaultValueAttribute("False")]
public bool CanHorizontallyScroll { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanVerticallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    protected internal bool HasLogicalOrientation { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double HorizontalOffset { get; }
    protected internal Orientation LogicalOrientation { get; }
    public Orientation Orientation { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public ScrollViewer ScrollOwner { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    protected virtual bool get_CanHierarchicallyScrollAndVirtualizeCore();
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ExtentWidth();
    protected internal virtual bool get_HasLogicalOrientation();
    public sealed virtual double get_HorizontalOffset();
    protected internal virtual Orientation get_LogicalOrientation();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_ViewportWidth();
    public static void AddCleanUpVirtualizedItemHandler(DependencyObject element, CleanUpVirtualizedItemEventHandler handler);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected internal virtual void BringIndexIntoView(int index);
    protected virtual double GetItemOffsetCore(UIElement child);
    public virtual void LineDown();
    public virtual void LineLeft();
    public virtual void LineRight();
    public virtual void LineUp();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    protected virtual Size MeasureOverride(Size constraint);
    public virtual void MouseWheelDown();
    public virtual void MouseWheelLeft();
    public virtual void MouseWheelRight();
    public virtual void MouseWheelUp();
    protected virtual void OnCleanUpVirtualizedItem(CleanUpVirtualizedItemEventArgs e);
    protected virtual void OnClearChildren();
    protected virtual void OnItemsChanged(object sender, ItemsChangedEventArgs args);
    protected virtual void OnViewportOffsetChanged(Vector oldViewportOffset, Vector newViewportOffset);
    protected virtual void OnViewportSizeChanged(Size oldViewportSize, Size newViewportSize);
    public virtual void PageDown();
    public virtual void PageLeft();
    public virtual void PageRight();
    public virtual void PageUp();
    public static void RemoveCleanUpVirtualizedItemHandler(DependencyObject element, CleanUpVirtualizedItemEventHandler handler);
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
    protected virtual bool ShouldItemsChangeAffectLayoutCore(bool areItemChangesLocal, ItemsChangedEventArgs args);
}
public class System.Windows.Controls.WebBrowser : ActiveXHost {
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public object Document { get; }
    public object ObjectForScripting { get; public set; }
    public Uri Source { get; public set; }
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    public object get_Document();
    public object get_ObjectForScripting();
    public void set_ObjectForScripting(object value);
    public Uri get_Source();
    public void set_Source(Uri value);
    public void add_LoadCompleted(LoadCompletedEventHandler value);
    public void remove_LoadCompleted(LoadCompletedEventHandler value);
    public void add_Navigated(NavigatedEventHandler value);
    public void remove_Navigated(NavigatedEventHandler value);
    public void add_Navigating(NavigatingCancelEventHandler value);
    public void remove_Navigating(NavigatingCancelEventHandler value);
    public void GoBack();
    public void GoForward();
    public object InvokeScript(string scriptName);
    public object InvokeScript(string scriptName, Object[] args);
    public void Navigate(string source);
    public void Navigate(string source, string targetFrameName, Byte[] postData, string additionalHeaders);
    public void Navigate(Uri source);
    public void Navigate(Uri source, string targetFrameName, Byte[] postData, string additionalHeaders);
    public void NavigateToStream(Stream stream);
    public void NavigateToString(string text);
    public void Refresh();
    public void Refresh(bool noCache);
    protected virtual bool TabIntoCore(TraversalRequest request);
    protected virtual bool TranslateAcceleratorCore(MSG& msg, ModifierKeys modifiers);
}
public class System.Windows.Controls.WrapPanel : Panel {
    public static DependencyProperty ItemHeightProperty;
    public static DependencyProperty ItemWidthProperty;
    public static DependencyProperty OrientationProperty;
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double ItemHeight { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double ItemWidth { get; public set; }
    public Orientation Orientation { get; public set; }
    public double get_ItemHeight();
    public void set_ItemHeight(double value);
    public double get_ItemWidth();
    public void set_ItemWidth(double value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size constraint);
}
[TypeConverterAttribute("System.Windows.CornerRadiusConverter")]
public class System.Windows.CornerRadius : ValueType {
    public double BottomLeft { get; public set; }
    public double BottomRight { get; public set; }
    public double TopLeft { get; public set; }
    public double TopRight { get; public set; }
    public CornerRadius(double uniformRadius);
    public CornerRadius(double topLeft, double topRight, double bottomRight, double bottomLeft);
    public double get_BottomLeft();
    public void set_BottomLeft(double value);
    public double get_BottomRight();
    public void set_BottomRight(double value);
    public double get_TopLeft();
    public void set_TopLeft(double value);
    public double get_TopRight();
    public void set_TopRight(double value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CornerRadius cornerRadius);
    public virtual int GetHashCode();
    public static bool op_Equality(CornerRadius cr1, CornerRadius cr2);
    public static bool op_Inequality(CornerRadius cr1, CornerRadius cr2);
    public virtual string ToString();
}
public class System.Windows.CornerRadiusConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public class System.Windows.Data.Binding : BindingBase {
    public static object DoNothing;
    public static string IndexerName;
    public static RoutedEvent SourceUpdatedEvent;
    public static RoutedEvent TargetUpdatedEvent;
    public static DependencyProperty XmlNamespaceManagerProperty;
    [DefaultValueAttribute("")]
public object AsyncState { get; public set; }
    [DefaultValueAttribute("False")]
public bool BindsDirectlyToSource { get; public set; }
    [DefaultValueAttribute("")]
public IValueConverter Converter { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.CultureInfoIetfLanguageTagConverter")]
public CultureInfo ConverterCulture { get; public set; }
    [DefaultValueAttribute("")]
public object ConverterParameter { get; public set; }
    [DefaultValueAttribute("")]
public string ElementName { get; public set; }
    [DefaultValueAttribute("False")]
public bool IsAsync { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public BindingMode Mode { get; public set; }
    [DefaultValueAttribute("False")]
public bool NotifyOnSourceUpdated { get; public set; }
    [DefaultValueAttribute("False")]
public bool NotifyOnTargetUpdated { get; public set; }
    [DefaultValueAttribute("False")]
public bool NotifyOnValidationError { get; public set; }
    public PropertyPath Path { get; public set; }
    [DefaultValueAttribute("")]
public RelativeSource RelativeSource { get; public set; }
    public object Source { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateSourceTrigger UpdateSourceTrigger { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidatesOnDataErrors { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidatesOnExceptions { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidatesOnNotifyDataErrors { get; public set; }
    public Collection`1<ValidationRule> ValidationRules { get; }
    [DefaultValueAttribute("")]
public string XPath { get; public set; }
    public Binding(string path);
    public object get_AsyncState();
    public void set_AsyncState(object value);
    public bool get_BindsDirectlyToSource();
    public void set_BindsDirectlyToSource(bool value);
    public IValueConverter get_Converter();
    public void set_Converter(IValueConverter value);
    public CultureInfo get_ConverterCulture();
    public void set_ConverterCulture(CultureInfo value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public bool get_IsAsync();
    public void set_IsAsync(bool value);
    public BindingMode get_Mode();
    public void set_Mode(BindingMode value);
    public bool get_NotifyOnSourceUpdated();
    public void set_NotifyOnSourceUpdated(bool value);
    public bool get_NotifyOnTargetUpdated();
    public void set_NotifyOnTargetUpdated(bool value);
    public bool get_NotifyOnValidationError();
    public void set_NotifyOnValidationError(bool value);
    public PropertyPath get_Path();
    public void set_Path(PropertyPath value);
    public RelativeSource get_RelativeSource();
    public void set_RelativeSource(RelativeSource value);
    public object get_Source();
    public void set_Source(object value);
    public UpdateSourceExceptionFilterCallback get_UpdateSourceExceptionFilter();
    public void set_UpdateSourceExceptionFilter(UpdateSourceExceptionFilterCallback value);
    public UpdateSourceTrigger get_UpdateSourceTrigger();
    public void set_UpdateSourceTrigger(UpdateSourceTrigger value);
    public bool get_ValidatesOnDataErrors();
    public void set_ValidatesOnDataErrors(bool value);
    public bool get_ValidatesOnExceptions();
    public void set_ValidatesOnExceptions(bool value);
    public bool get_ValidatesOnNotifyDataErrors();
    public void set_ValidatesOnNotifyDataErrors(bool value);
    public Collection`1<ValidationRule> get_ValidationRules();
    public string get_XPath();
    public void set_XPath(string value);
    public static void AddSourceUpdatedHandler(DependencyObject element, EventHandler`1<DataTransferEventArgs> handler);
    public static void AddTargetUpdatedHandler(DependencyObject element, EventHandler`1<DataTransferEventArgs> handler);
    public static XmlNamespaceManager GetXmlNamespaceManager(DependencyObject target);
    public static void RemoveSourceUpdatedHandler(DependencyObject element, EventHandler`1<DataTransferEventArgs> handler);
    public static void RemoveTargetUpdatedHandler(DependencyObject element, EventHandler`1<DataTransferEventArgs> handler);
    public static void SetXmlNamespaceManager(DependencyObject target, XmlNamespaceManager value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializePath();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeSource();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeValidationRules();
}
[LocalizabilityAttribute("0")]
[MarkupExtensionReturnTypeAttribute("System.Object")]
public abstract class System.Windows.Data.BindingBase : MarkupExtension {
    [DefaultValueAttribute("")]
public string BindingGroupName { get; public set; }
    [DefaultValueAttribute("0")]
public int Delay { get; public set; }
    public object FallbackValue { get; public set; }
    [DefaultValueAttribute("")]
public string StringFormat { get; public set; }
    public object TargetNullValue { get; public set; }
    public string get_BindingGroupName();
    public void set_BindingGroupName(string value);
    public int get_Delay();
    public void set_Delay(int value);
    public object get_FallbackValue();
    public void set_FallbackValue(object value);
    public string get_StringFormat();
    public void set_StringFormat(string value);
    public object get_TargetNullValue();
    public void set_TargetNullValue(object value);
    public sealed virtual object ProvideValue(IServiceProvider serviceProvider);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeFallbackValue();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeTargetNullValue();
}
public class System.Windows.Data.BindingExpression : BindingExpressionBase {
    public object DataItem { get; }
    public Binding ParentBinding { get; }
    public object ResolvedSource { get; }
    public string ResolvedSourcePropertyName { get; }
    public object get_DataItem();
    public Binding get_ParentBinding();
    public object get_ResolvedSource();
    public string get_ResolvedSourcePropertyName();
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    public virtual void UpdateSource();
    public virtual void UpdateTarget();
}
public abstract class System.Windows.Data.BindingExpressionBase : Expression {
    public BindingGroup BindingGroup { get; }
    public bool HasError { get; }
    public bool HasValidationError { get; }
    public bool IsDirty { get; }
    public BindingBase ParentBindingBase { get; }
    public BindingStatus Status { get; }
    public DependencyObject Target { get; }
    public DependencyProperty TargetProperty { get; }
    public ValidationError ValidationError { get; }
    public ReadOnlyCollection`1<ValidationError> ValidationErrors { get; }
    public BindingGroup get_BindingGroup();
    public virtual bool get_HasError();
    public virtual bool get_HasValidationError();
    public bool get_IsDirty();
    public BindingBase get_ParentBindingBase();
    public BindingStatus get_Status();
    public DependencyObject get_Target();
    public DependencyProperty get_TargetProperty();
    public virtual ValidationError get_ValidationError();
    public virtual ReadOnlyCollection`1<ValidationError> get_ValidationErrors();
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    public virtual void UpdateSource();
    public virtual void UpdateTarget();
    public bool ValidateWithoutUpdate();
}
public class System.Windows.Data.BindingGroup : DependencyObject {
    public Collection`1<BindingExpressionBase> BindingExpressions { get; }
    public bool CanRestoreValues { get; }
    public bool HasValidationError { get; }
    public bool IsDirty { get; }
    public IList Items { get; }
    public string Name { get; public set; }
    public bool NotifyOnValidationError { get; public set; }
    public DependencyObject Owner { get; }
    public bool SharesProposedValues { get; public set; }
    public bool ValidatesOnNotifyDataError { get; public set; }
    public ReadOnlyCollection`1<ValidationError> ValidationErrors { get; }
    public Collection`1<ValidationRule> ValidationRules { get; }
    public Collection`1<BindingExpressionBase> get_BindingExpressions();
    public bool get_CanRestoreValues();
    public bool get_HasValidationError();
    public bool get_IsDirty();
    public IList get_Items();
    public string get_Name();
    public void set_Name(string value);
    public bool get_NotifyOnValidationError();
    public void set_NotifyOnValidationError(bool value);
    public DependencyObject get_Owner();
    public bool get_SharesProposedValues();
    public void set_SharesProposedValues(bool value);
    public bool get_ValidatesOnNotifyDataError();
    public void set_ValidatesOnNotifyDataError(bool value);
    public ReadOnlyCollection`1<ValidationError> get_ValidationErrors();
    public Collection`1<ValidationRule> get_ValidationRules();
    public void BeginEdit();
    public void CancelEdit();
    public bool CommitEdit();
    public object GetValue(object item, string propertyName);
    public bool TryGetValue(object item, string propertyName, Object& value);
    public bool UpdateSources();
    public bool ValidateWithoutUpdate();
}
public class System.Windows.Data.BindingListCollectionView : CollectionView {
    public bool CanAddNew { get; }
    public bool CanCancelEdit { get; }
    public bool CanChangeLiveFiltering { get; }
    public bool CanChangeLiveGrouping { get; }
    public bool CanChangeLiveSorting { get; }
    public bool CanCustomFilter { get; }
    public bool CanFilter { get; }
    public bool CanGroup { get; }
    public bool CanRemove { get; }
    public bool CanSort { get; }
    public int Count { get; }
    public object CurrentAddItem { get; }
    public object CurrentEditItem { get; }
    public string CustomFilter { get; public set; }
    [DefaultValueAttribute("")]
public GroupDescriptionSelectorCallback GroupBySelector { get; public set; }
    public ObservableCollection`1<GroupDescription> GroupDescriptions { get; }
    public ReadOnlyObservableCollection`1<object> Groups { get; }
    public bool IsAddingNew { get; }
    public bool IsDataInGroupOrder { get; public set; }
    public bool IsEditingItem { get; }
    public bool IsEmpty { get; }
    public Nullable`1<bool> IsLiveFiltering { get; public set; }
    public Nullable`1<bool> IsLiveGrouping { get; public set; }
    public Nullable`1<bool> IsLiveSorting { get; public set; }
    public ReadOnlyCollection`1<ItemPropertyInfo> ItemProperties { get; }
    public ObservableCollection`1<string> LiveFilteringProperties { get; }
    public ObservableCollection`1<string> LiveGroupingProperties { get; }
    public ObservableCollection`1<string> LiveSortingProperties { get; }
    public NewItemPlaceholderPosition NewItemPlaceholderPosition { get; public set; }
    public SortDescriptionCollection SortDescriptions { get; }
    public BindingListCollectionView(IBindingList list);
    public sealed virtual bool get_CanAddNew();
    public sealed virtual bool get_CanCancelEdit();
    public sealed virtual bool get_CanChangeLiveFiltering();
    public sealed virtual bool get_CanChangeLiveGrouping();
    public sealed virtual bool get_CanChangeLiveSorting();
    public bool get_CanCustomFilter();
    public virtual bool get_CanFilter();
    public virtual bool get_CanGroup();
    public sealed virtual bool get_CanRemove();
    public virtual bool get_CanSort();
    public virtual int get_Count();
    public sealed virtual object get_CurrentAddItem();
    public sealed virtual object get_CurrentEditItem();
    public string get_CustomFilter();
    public void set_CustomFilter(string value);
    public GroupDescriptionSelectorCallback get_GroupBySelector();
    public void set_GroupBySelector(GroupDescriptionSelectorCallback value);
    public virtual ObservableCollection`1<GroupDescription> get_GroupDescriptions();
    public virtual ReadOnlyObservableCollection`1<object> get_Groups();
    public sealed virtual bool get_IsAddingNew();
    public bool get_IsDataInGroupOrder();
    public void set_IsDataInGroupOrder(bool value);
    public sealed virtual bool get_IsEditingItem();
    public virtual bool get_IsEmpty();
    public sealed virtual Nullable`1<bool> get_IsLiveFiltering();
    public sealed virtual void set_IsLiveFiltering(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsLiveGrouping();
    public sealed virtual void set_IsLiveGrouping(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsLiveSorting();
    public sealed virtual void set_IsLiveSorting(Nullable`1<bool> value);
    public sealed virtual ReadOnlyCollection`1<ItemPropertyInfo> get_ItemProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveFilteringProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveGroupingProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveSortingProperties();
    public sealed virtual NewItemPlaceholderPosition get_NewItemPlaceholderPosition();
    public sealed virtual void set_NewItemPlaceholderPosition(NewItemPlaceholderPosition value);
    public virtual SortDescriptionCollection get_SortDescriptions();
    public sealed virtual object AddNew();
    public sealed virtual void CancelEdit();
    public sealed virtual void CancelNew();
    public sealed virtual void CommitEdit();
    public sealed virtual void CommitNew();
    public virtual bool Contains(object item);
    public virtual void DetachFromSourceCollection();
    public sealed virtual void EditItem(object item);
    protected virtual IEnumerator GetEnumerator();
    public virtual object GetItemAt(int index);
    public virtual int IndexOf(object item);
    public virtual bool MoveCurrentToPosition(int position);
    protected virtual void OnAllowsCrossThreadChangesChanged();
    [ObsoleteAttribute("Replaced by OnAllowsCrossThreadChangesChanged")]
protected virtual void OnBeginChangeLogging(NotifyCollectionChangedEventArgs args);
    public virtual bool PassesFilter(object item);
    protected virtual void ProcessCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected virtual void RefreshOverride();
    public sealed virtual void Remove(object item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override int System.Collections.IComparer.Compare(object o1, object o2);
}
public enum System.Windows.Data.BindingMode : Enum {
    public int value__;
    public static BindingMode TwoWay;
    public static BindingMode OneWay;
    public static BindingMode OneTime;
    public static BindingMode OneWayToSource;
    public static BindingMode Default;
}
public static class System.Windows.Data.BindingOperations : object {
    public static object DisconnectedSource { get; }
    public static object get_DisconnectedSource();
    public static void add_CollectionRegistering(EventHandler`1<CollectionRegisteringEventArgs> value);
    public static void remove_CollectionRegistering(EventHandler`1<CollectionRegisteringEventArgs> value);
    public static void add_CollectionViewRegistering(EventHandler`1<CollectionViewRegisteringEventArgs> value);
    public static void remove_CollectionViewRegistering(EventHandler`1<CollectionViewRegisteringEventArgs> value);
    public static void AccessCollection(IEnumerable collection, Action accessMethod, bool writeAccess);
    public static void ClearAllBindings(DependencyObject target);
    public static void ClearBinding(DependencyObject target, DependencyProperty dp);
    public static void DisableCollectionSynchronization(IEnumerable collection);
    public static void EnableCollectionSynchronization(IEnumerable collection, object lockObject);
    public static void EnableCollectionSynchronization(IEnumerable collection, object context, CollectionSynchronizationCallback synchronizationCallback);
    public static Binding GetBinding(DependencyObject target, DependencyProperty dp);
    public static BindingBase GetBindingBase(DependencyObject target, DependencyProperty dp);
    public static BindingExpression GetBindingExpression(DependencyObject target, DependencyProperty dp);
    public static BindingExpressionBase GetBindingExpressionBase(DependencyObject target, DependencyProperty dp);
    public static MultiBinding GetMultiBinding(DependencyObject target, DependencyProperty dp);
    public static MultiBindingExpression GetMultiBindingExpression(DependencyObject target, DependencyProperty dp);
    public static PriorityBinding GetPriorityBinding(DependencyObject target, DependencyProperty dp);
    public static PriorityBindingExpression GetPriorityBindingExpression(DependencyObject target, DependencyProperty dp);
    public static ReadOnlyCollection`1<BindingGroup> GetSourceUpdatingBindingGroups(DependencyObject root);
    public static ReadOnlyCollection`1<BindingExpressionBase> GetSourceUpdatingBindings(DependencyObject root);
    public static bool IsDataBound(DependencyObject target, DependencyProperty dp);
    public static BindingExpressionBase SetBinding(DependencyObject target, DependencyProperty dp, BindingBase binding);
}
public enum System.Windows.Data.BindingStatus : Enum {
    public int value__;
    public static BindingStatus Unattached;
    public static BindingStatus Inactive;
    public static BindingStatus Active;
    public static BindingStatus Detached;
    public static BindingStatus AsyncRequestPending;
    public static BindingStatus PathError;
    public static BindingStatus UpdateTargetError;
    public static BindingStatus UpdateSourceError;
}
public class System.Windows.Data.CollectionContainer : DependencyObject {
    public static DependencyProperty CollectionProperty;
    public IEnumerable Collection { get; public set; }
    public IEnumerable get_Collection();
    public void set_Collection(IEnumerable value);
    protected virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnContainedCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeCollection();
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
public class System.Windows.Data.CollectionRegisteringEventArgs : EventArgs {
    public IEnumerable Collection { get; }
    public object Parent { get; }
    public IEnumerable get_Collection();
    public object get_Parent();
}
public class System.Windows.Data.CollectionSynchronizationCallback : MulticastDelegate {
    public CollectionSynchronizationCallback(object object, IntPtr method);
    public virtual void Invoke(IEnumerable collection, object context, Action accessMethod, bool writeAccess);
    public virtual IAsyncResult BeginInvoke(IEnumerable collection, object context, Action accessMethod, bool writeAccess, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Data.CollectionView : DispatcherObject {
    protected bool AllowsCrossThreadChanges { get; }
    public bool CanFilter { get; }
    public bool CanGroup { get; }
    public bool CanSort { get; }
    public IComparer Comparer { get; }
    public int Count { get; }
    [TypeConverterAttribute("System.Windows.CultureInfoIetfLanguageTagConverter")]
public CultureInfo Culture { get; public set; }
    public object CurrentItem { get; }
    public int CurrentPosition { get; }
    public Predicate`1<object> Filter { get; public set; }
    public ObservableCollection`1<GroupDescription> GroupDescriptions { get; }
    public ReadOnlyObservableCollection`1<object> Groups { get; }
    public bool IsCurrentAfterLast { get; }
    public bool IsCurrentBeforeFirst { get; }
    protected bool IsCurrentInSync { get; }
    protected bool IsDynamic { get; }
    public bool IsEmpty { get; }
    public bool IsInUse { get; }
    protected bool IsRefreshDeferred { get; }
    public bool NeedsRefresh { get; }
    public static object NewItemPlaceholder { get; }
    public SortDescriptionCollection SortDescriptions { get; }
    public IEnumerable SourceCollection { get; }
    protected bool UpdatedOutsideDispatcher { get; }
    public CollectionView(IEnumerable collection);
    protected bool get_AllowsCrossThreadChanges();
    public virtual bool get_CanFilter();
    public virtual bool get_CanGroup();
    public virtual bool get_CanSort();
    public virtual IComparer get_Comparer();
    public virtual int get_Count();
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual object get_CurrentItem();
    public virtual int get_CurrentPosition();
    public virtual Predicate`1<object> get_Filter();
    public virtual void set_Filter(Predicate`1<object> value);
    public virtual ObservableCollection`1<GroupDescription> get_GroupDescriptions();
    public virtual ReadOnlyObservableCollection`1<object> get_Groups();
    public virtual bool get_IsCurrentAfterLast();
    public virtual bool get_IsCurrentBeforeFirst();
    protected bool get_IsCurrentInSync();
    protected bool get_IsDynamic();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsInUse();
    protected bool get_IsRefreshDeferred();
    public virtual bool get_NeedsRefresh();
    public static object get_NewItemPlaceholder();
    public virtual SortDescriptionCollection get_SortDescriptions();
    public virtual IEnumerable get_SourceCollection();
    protected bool get_UpdatedOutsideDispatcher();
    protected virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual void add_CurrentChanged(EventHandler value);
    public virtual void remove_CurrentChanged(EventHandler value);
    public virtual void add_CurrentChanging(CurrentChangingEventHandler value);
    public virtual void remove_CurrentChanging(CurrentChangingEventHandler value);
    protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [ObsoleteAttribute("Replaced by ClearPendingChanges")]
protected void ClearChangeLog();
    protected void ClearPendingChanges();
    public virtual bool Contains(object item);
    public virtual IDisposable DeferRefresh();
    public virtual void DetachFromSourceCollection();
    protected virtual IEnumerator GetEnumerator();
    public virtual object GetItemAt(int index);
    public virtual int IndexOf(object item);
    public virtual bool MoveCurrentTo(object item);
    public virtual bool MoveCurrentToFirst();
    public virtual bool MoveCurrentToLast();
    public virtual bool MoveCurrentToNext();
    public virtual bool MoveCurrentToPosition(int position);
    public virtual bool MoveCurrentToPrevious();
    protected bool OKToChangeCurrent();
    protected virtual void OnAllowsCrossThreadChangesChanged();
    [ObsoleteAttribute("Replaced by OnAllowsCrossThreadChangesChanged")]
protected virtual void OnBeginChangeLogging(NotifyCollectionChangedEventArgs args);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    protected virtual void OnCurrentChanged();
    protected void OnCurrentChanging();
    protected virtual void OnCurrentChanging(CurrentChangingEventArgs args);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    public virtual bool PassesFilter(object item);
    protected virtual void ProcessCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected void ProcessPendingChanges();
    public virtual void Refresh();
    protected void RefreshOrDefer();
    protected virtual void RefreshOverride();
    protected void SetCurrent(object newItem, int newPosition);
    protected void SetCurrent(object newItem, int newPosition, int count);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Windows.Data.CollectionViewGroup : object {
    public bool IsBottomLevel { get; }
    public int ItemCount { get; }
    public ReadOnlyObservableCollection`1<object> Items { get; }
    public object Name { get; }
    protected int ProtectedItemCount { get; protected set; }
    protected ObservableCollection`1<object> ProtectedItems { get; }
    protected CollectionViewGroup(object name);
    public abstract virtual bool get_IsBottomLevel();
    public int get_ItemCount();
    public ReadOnlyObservableCollection`1<object> get_Items();
    public object get_Name();
    protected int get_ProtectedItemCount();
    protected void set_ProtectedItemCount(int value);
    protected ObservableCollection`1<object> get_ProtectedItems();
    protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
}
public class System.Windows.Data.CollectionViewRegisteringEventArgs : EventArgs {
    public CollectionView CollectionView { get; }
    public CollectionView get_CollectionView();
}
public class System.Windows.Data.CollectionViewSource : DependencyObject {
    public static DependencyProperty CanChangeLiveFilteringProperty;
    public static DependencyProperty CanChangeLiveGroupingProperty;
    public static DependencyProperty CanChangeLiveSortingProperty;
    public static DependencyProperty CollectionViewTypeProperty;
    public static DependencyProperty IsLiveFilteringProperty;
    public static DependencyProperty IsLiveFilteringRequestedProperty;
    public static DependencyProperty IsLiveGroupingProperty;
    public static DependencyProperty IsLiveGroupingRequestedProperty;
    public static DependencyProperty IsLiveSortingProperty;
    public static DependencyProperty IsLiveSortingRequestedProperty;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty ViewProperty;
    [ReadOnlyAttribute("True")]
public bool CanChangeLiveFiltering { get; }
    [ReadOnlyAttribute("True")]
public bool CanChangeLiveGrouping { get; }
    [ReadOnlyAttribute("True")]
public bool CanChangeLiveSorting { get; }
    public Type CollectionViewType { get; public set; }
    [TypeConverterAttribute("System.Windows.CultureInfoIetfLanguageTagConverter")]
public CultureInfo Culture { get; public set; }
    public ObservableCollection`1<GroupDescription> GroupDescriptions { get; }
    [ReadOnlyAttribute("True")]
public Nullable`1<bool> IsLiveFiltering { get; }
    public bool IsLiveFilteringRequested { get; public set; }
    [ReadOnlyAttribute("True")]
public Nullable`1<bool> IsLiveGrouping { get; }
    public bool IsLiveGroupingRequested { get; public set; }
    [ReadOnlyAttribute("True")]
public Nullable`1<bool> IsLiveSorting { get; }
    public bool IsLiveSortingRequested { get; public set; }
    public ObservableCollection`1<string> LiveFilteringProperties { get; }
    public ObservableCollection`1<string> LiveGroupingProperties { get; }
    public ObservableCollection`1<string> LiveSortingProperties { get; }
    public SortDescriptionCollection SortDescriptions { get; }
    public object Source { get; public set; }
    [ReadOnlyAttribute("True")]
public ICollectionView View { get; }
    public bool get_CanChangeLiveFiltering();
    public bool get_CanChangeLiveGrouping();
    public bool get_CanChangeLiveSorting();
    public Type get_CollectionViewType();
    public void set_CollectionViewType(Type value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public ObservableCollection`1<GroupDescription> get_GroupDescriptions();
    public Nullable`1<bool> get_IsLiveFiltering();
    public bool get_IsLiveFilteringRequested();
    public void set_IsLiveFilteringRequested(bool value);
    public Nullable`1<bool> get_IsLiveGrouping();
    public bool get_IsLiveGroupingRequested();
    public void set_IsLiveGroupingRequested(bool value);
    public Nullable`1<bool> get_IsLiveSorting();
    public bool get_IsLiveSortingRequested();
    public void set_IsLiveSortingRequested(bool value);
    public ObservableCollection`1<string> get_LiveFilteringProperties();
    public ObservableCollection`1<string> get_LiveGroupingProperties();
    public ObservableCollection`1<string> get_LiveSortingProperties();
    public SortDescriptionCollection get_SortDescriptions();
    public object get_Source();
    public void set_Source(object value);
    public ICollectionView get_View();
    public void add_Filter(FilterEventHandler value);
    public void remove_Filter(FilterEventHandler value);
    public IDisposable DeferRefresh();
    public static ICollectionView GetDefaultView(object source);
    public static bool IsDefaultView(ICollectionView view);
    protected virtual void OnCollectionViewTypeChanged(Type oldCollectionViewType, Type newCollectionViewType);
    protected virtual void OnSourceChanged(object oldSource, object newSource);
    protected virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
[DefaultMemberAttribute("Item")]
[LocalizabilityAttribute("16")]
public class System.Windows.Data.CompositeCollection : object {
    public int Count { get; }
    public object Item { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public CompositeCollection(int capacity);
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(int itemIndex);
    public sealed virtual void set_Item(int itemIndex, object value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    protected void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual int Add(object newItem);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object containItem);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int IndexOf(object indexItem);
    public sealed virtual void Insert(int insertIndex, object insertItem);
    protected virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    public sealed virtual void Remove(object removeItem);
    public sealed virtual void RemoveAt(int removeIndex);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override ICollectionView System.ComponentModel.ICollectionViewFactory.CreateView();
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
public class System.Windows.Data.DataChangedEventManager : WeakEventManager {
    public static void AddHandler(DataSourceProvider source, EventHandler`1<EventArgs> handler);
    public static void AddListener(DataSourceProvider source, IWeakEventListener listener);
    protected virtual ListenerList NewListenerList();
    public static void RemoveHandler(DataSourceProvider source, EventHandler`1<EventArgs> handler);
    public static void RemoveListener(DataSourceProvider source, IWeakEventListener listener);
    protected virtual void StartListening(object source);
    protected virtual void StopListening(object source);
}
public class System.Windows.Data.DataTransferEventArgs : RoutedEventArgs {
    public DependencyProperty Property { get; }
    public DependencyObject TargetObject { get; }
    public DependencyProperty get_Property();
    public DependencyObject get_TargetObject();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Data.FilterEventArgs : EventArgs {
    public bool Accepted { get; public set; }
    public object Item { get; }
    public bool get_Accepted();
    public void set_Accepted(bool value);
    public object get_Item();
}
public class System.Windows.Data.FilterEventHandler : MulticastDelegate {
    public FilterEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FilterEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FilterEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Data.GroupDescriptionSelectorCallback : MulticastDelegate {
    public GroupDescriptionSelectorCallback(object object, IntPtr method);
    public virtual GroupDescription Invoke(CollectionViewGroup group, int level);
    public virtual IAsyncResult BeginInvoke(CollectionViewGroup group, int level, AsyncCallback callback, object object);
    public virtual GroupDescription EndInvoke(IAsyncResult result);
}
public interface System.Windows.Data.IMultiValueConverter {
    public abstract virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public interface System.Windows.Data.IValueConverter {
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Windows.Data.ListCollectionView : CollectionView {
    protected IComparer ActiveComparer { get; protected set; }
    protected Predicate`1<object> ActiveFilter { get; protected set; }
    public bool CanAddNew { get; }
    public bool CanAddNewItem { get; }
    public bool CanCancelEdit { get; }
    public bool CanChangeLiveFiltering { get; }
    public bool CanChangeLiveGrouping { get; }
    public bool CanChangeLiveSorting { get; }
    public bool CanFilter { get; }
    public bool CanGroup { get; }
    public bool CanRemove { get; }
    public bool CanSort { get; }
    public int Count { get; }
    public object CurrentAddItem { get; }
    public object CurrentEditItem { get; }
    public IComparer CustomSort { get; public set; }
    public Predicate`1<object> Filter { get; public set; }
    [DefaultValueAttribute("")]
public GroupDescriptionSelectorCallback GroupBySelector { get; public set; }
    public ObservableCollection`1<GroupDescription> GroupDescriptions { get; }
    public ReadOnlyObservableCollection`1<object> Groups { get; }
    protected int InternalCount { get; }
    protected IList InternalList { get; }
    public bool IsAddingNew { get; }
    public bool IsDataInGroupOrder { get; public set; }
    public bool IsEditingItem { get; }
    public bool IsEmpty { get; }
    protected bool IsGrouping { get; }
    public Nullable`1<bool> IsLiveFiltering { get; public set; }
    public Nullable`1<bool> IsLiveGrouping { get; public set; }
    public Nullable`1<bool> IsLiveSorting { get; public set; }
    public ReadOnlyCollection`1<ItemPropertyInfo> ItemProperties { get; }
    public ObservableCollection`1<string> LiveFilteringProperties { get; }
    public ObservableCollection`1<string> LiveGroupingProperties { get; }
    public ObservableCollection`1<string> LiveSortingProperties { get; }
    public NewItemPlaceholderPosition NewItemPlaceholderPosition { get; public set; }
    public SortDescriptionCollection SortDescriptions { get; }
    protected bool UsesLocalArray { get; }
    public ListCollectionView(IList list);
    protected IComparer get_ActiveComparer();
    protected void set_ActiveComparer(IComparer value);
    protected Predicate`1<object> get_ActiveFilter();
    protected void set_ActiveFilter(Predicate`1<object> value);
    public sealed virtual bool get_CanAddNew();
    public sealed virtual bool get_CanAddNewItem();
    public sealed virtual bool get_CanCancelEdit();
    public sealed virtual bool get_CanChangeLiveFiltering();
    public sealed virtual bool get_CanChangeLiveGrouping();
    public sealed virtual bool get_CanChangeLiveSorting();
    public virtual bool get_CanFilter();
    public virtual bool get_CanGroup();
    public sealed virtual bool get_CanRemove();
    public virtual bool get_CanSort();
    public virtual int get_Count();
    public sealed virtual object get_CurrentAddItem();
    public sealed virtual object get_CurrentEditItem();
    public IComparer get_CustomSort();
    public void set_CustomSort(IComparer value);
    public virtual Predicate`1<object> get_Filter();
    public virtual void set_Filter(Predicate`1<object> value);
    public virtual GroupDescriptionSelectorCallback get_GroupBySelector();
    public virtual void set_GroupBySelector(GroupDescriptionSelectorCallback value);
    public virtual ObservableCollection`1<GroupDescription> get_GroupDescriptions();
    public virtual ReadOnlyObservableCollection`1<object> get_Groups();
    protected int get_InternalCount();
    protected IList get_InternalList();
    public sealed virtual bool get_IsAddingNew();
    public bool get_IsDataInGroupOrder();
    public void set_IsDataInGroupOrder(bool value);
    public sealed virtual bool get_IsEditingItem();
    public virtual bool get_IsEmpty();
    protected bool get_IsGrouping();
    public sealed virtual Nullable`1<bool> get_IsLiveFiltering();
    public sealed virtual void set_IsLiveFiltering(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsLiveGrouping();
    public sealed virtual void set_IsLiveGrouping(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsLiveSorting();
    public sealed virtual void set_IsLiveSorting(Nullable`1<bool> value);
    public sealed virtual ReadOnlyCollection`1<ItemPropertyInfo> get_ItemProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveFilteringProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveGroupingProperties();
    public sealed virtual ObservableCollection`1<string> get_LiveSortingProperties();
    public sealed virtual NewItemPlaceholderPosition get_NewItemPlaceholderPosition();
    public sealed virtual void set_NewItemPlaceholderPosition(NewItemPlaceholderPosition value);
    public virtual SortDescriptionCollection get_SortDescriptions();
    protected bool get_UsesLocalArray();
    public sealed virtual object AddNew();
    public sealed virtual object AddNewItem(object newItem);
    public sealed virtual void CancelEdit();
    public sealed virtual void CancelNew();
    public sealed virtual void CommitEdit();
    public sealed virtual void CommitNew();
    protected virtual int Compare(object o1, object o2);
    public virtual bool Contains(object item);
    public sealed virtual void EditItem(object item);
    protected virtual IEnumerator GetEnumerator();
    public virtual object GetItemAt(int index);
    public virtual int IndexOf(object item);
    protected bool InternalContains(object item);
    protected IEnumerator InternalGetEnumerator();
    protected int InternalIndexOf(object item);
    protected object InternalItemAt(int index);
    public virtual bool MoveCurrentToPosition(int position);
    protected virtual void OnAllowsCrossThreadChangesChanged();
    [ObsoleteAttribute("Replaced by OnAllowsCrossThreadChangesChanged")]
protected virtual void OnBeginChangeLogging(NotifyCollectionChangedEventArgs args);
    public virtual bool PassesFilter(object item);
    protected virtual void ProcessCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected virtual void RefreshOverride();
    public sealed virtual void Remove(object item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override int System.Collections.IComparer.Compare(object o1, object o2);
}
[ContentPropertyAttribute("Bindings")]
public class System.Windows.Data.MultiBinding : BindingBase {
    [DesignerSerializationVisibilityAttribute("2")]
public Collection`1<BindingBase> Bindings { get; }
    [DefaultValueAttribute("")]
public IMultiValueConverter Converter { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.CultureInfoIetfLanguageTagConverter")]
public CultureInfo ConverterCulture { get; public set; }
    [DefaultValueAttribute("")]
public object ConverterParameter { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public BindingMode Mode { get; public set; }
    [DefaultValueAttribute("False")]
public bool NotifyOnSourceUpdated { get; public set; }
    [DefaultValueAttribute("False")]
public bool NotifyOnTargetUpdated { get; public set; }
    [DefaultValueAttribute("False")]
public bool NotifyOnValidationError { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateSourceTrigger UpdateSourceTrigger { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidatesOnDataErrors { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValidatesOnExceptions { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidatesOnNotifyDataErrors { get; public set; }
    public Collection`1<ValidationRule> ValidationRules { get; }
    public Collection`1<BindingBase> get_Bindings();
    public IMultiValueConverter get_Converter();
    public void set_Converter(IMultiValueConverter value);
    public CultureInfo get_ConverterCulture();
    public void set_ConverterCulture(CultureInfo value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public BindingMode get_Mode();
    public void set_Mode(BindingMode value);
    public bool get_NotifyOnSourceUpdated();
    public void set_NotifyOnSourceUpdated(bool value);
    public bool get_NotifyOnTargetUpdated();
    public void set_NotifyOnTargetUpdated(bool value);
    public bool get_NotifyOnValidationError();
    public void set_NotifyOnValidationError(bool value);
    public UpdateSourceExceptionFilterCallback get_UpdateSourceExceptionFilter();
    public void set_UpdateSourceExceptionFilter(UpdateSourceExceptionFilterCallback value);
    public UpdateSourceTrigger get_UpdateSourceTrigger();
    public void set_UpdateSourceTrigger(UpdateSourceTrigger value);
    public bool get_ValidatesOnDataErrors();
    public void set_ValidatesOnDataErrors(bool value);
    public bool get_ValidatesOnExceptions();
    public void set_ValidatesOnExceptions(bool value);
    public bool get_ValidatesOnNotifyDataErrors();
    public void set_ValidatesOnNotifyDataErrors(bool value);
    public Collection`1<ValidationRule> get_ValidationRules();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeBindings();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeValidationRules();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Data.MultiBindingExpression : BindingExpressionBase {
    public ReadOnlyCollection`1<BindingExpressionBase> BindingExpressions { get; }
    public bool HasError { get; }
    public bool HasValidationError { get; }
    public MultiBinding ParentMultiBinding { get; }
    public ValidationError ValidationError { get; }
    public ReadOnlyCollection`1<BindingExpressionBase> get_BindingExpressions();
    public virtual bool get_HasError();
    public virtual bool get_HasValidationError();
    public MultiBinding get_ParentMultiBinding();
    public virtual ValidationError get_ValidationError();
    public virtual void UpdateSource();
    public virtual void UpdateTarget();
}
[LocalizabilityAttribute("17")]
public class System.Windows.Data.ObjectDataProvider : DataSourceProvider {
    public IList ConstructorParameters { get; }
    [DefaultValueAttribute("False")]
public bool IsAsynchronous { get; public set; }
    [DefaultValueAttribute("")]
public string MethodName { get; public set; }
    public IList MethodParameters { get; }
    public object ObjectInstance { get; public set; }
    public Type ObjectType { get; public set; }
    public IList get_ConstructorParameters();
    public bool get_IsAsynchronous();
    public void set_IsAsynchronous(bool value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public IList get_MethodParameters();
    public object get_ObjectInstance();
    public void set_ObjectInstance(object value);
    public Type get_ObjectType();
    public void set_ObjectType(Type value);
    protected virtual void BeginQuery();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeConstructorParameters();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeMethodParameters();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeObjectInstance();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeObjectType();
}
[ContentPropertyAttribute("Bindings")]
public class System.Windows.Data.PriorityBinding : BindingBase {
    [DesignerSerializationVisibilityAttribute("2")]
public Collection`1<BindingBase> Bindings { get; }
    public Collection`1<BindingBase> get_Bindings();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeBindings();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Data.PriorityBindingExpression : BindingExpressionBase {
    public BindingExpressionBase ActiveBindingExpression { get; }
    public ReadOnlyCollection`1<BindingExpressionBase> BindingExpressions { get; }
    public bool HasValidationError { get; }
    public PriorityBinding ParentPriorityBinding { get; }
    public BindingExpressionBase get_ActiveBindingExpression();
    public ReadOnlyCollection`1<BindingExpressionBase> get_BindingExpressions();
    public virtual bool get_HasValidationError();
    public PriorityBinding get_ParentPriorityBinding();
    public virtual void UpdateSource();
    public virtual void UpdateTarget();
}
public class System.Windows.Data.PropertyGroupDescription : GroupDescription {
    public static IComparer CompareNameAscending { get; }
    public static IComparer CompareNameDescending { get; }
    [DefaultValueAttribute("")]
public IValueConverter Converter { get; public set; }
    [DefaultValueAttribute("")]
public string PropertyName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StringComparison StringComparison { get; public set; }
    public PropertyGroupDescription(string propertyName);
    public PropertyGroupDescription(string propertyName, IValueConverter converter);
    public PropertyGroupDescription(string propertyName, IValueConverter converter, StringComparison stringComparison);
    public static IComparer get_CompareNameAscending();
    public static IComparer get_CompareNameDescending();
    public IValueConverter get_Converter();
    public void set_Converter(IValueConverter value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public StringComparison get_StringComparison();
    public void set_StringComparison(StringComparison value);
    public virtual object GroupNameFromItem(object item, int level, CultureInfo culture);
    public virtual bool NamesMatch(object groupName, object itemName);
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Data.RelativeSource")]
public class System.Windows.Data.RelativeSource : MarkupExtension {
    public int AncestorLevel { get; public set; }
    public Type AncestorType { get; public set; }
    [ConstructorArgumentAttribute("mode")]
public RelativeSourceMode Mode { get; public set; }
    public static RelativeSource PreviousData { get; }
    public static RelativeSource Self { get; }
    public static RelativeSource TemplatedParent { get; }
    public RelativeSource(RelativeSourceMode mode);
    public RelativeSource(RelativeSourceMode mode, Type ancestorType, int ancestorLevel);
    public int get_AncestorLevel();
    public void set_AncestorLevel(int value);
    public Type get_AncestorType();
    public void set_AncestorType(Type value);
    public RelativeSourceMode get_Mode();
    public void set_Mode(RelativeSourceMode value);
    public static RelativeSource get_PreviousData();
    public static RelativeSource get_Self();
    public static RelativeSource get_TemplatedParent();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeAncestorLevel();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeAncestorType();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
public enum System.Windows.Data.RelativeSourceMode : Enum {
    public int value__;
    public static RelativeSourceMode PreviousData;
    public static RelativeSourceMode TemplatedParent;
    public static RelativeSourceMode Self;
    public static RelativeSourceMode FindAncestor;
}
public class System.Windows.Data.UpdateSourceExceptionFilterCallback : MulticastDelegate {
    public UpdateSourceExceptionFilterCallback(object object, IntPtr method);
    public virtual object Invoke(object bindExpression, Exception exception);
    public virtual IAsyncResult BeginInvoke(object bindExpression, Exception exception, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public enum System.Windows.Data.UpdateSourceTrigger : Enum {
    public int value__;
    public static UpdateSourceTrigger Default;
    public static UpdateSourceTrigger PropertyChanged;
    public static UpdateSourceTrigger LostFocus;
    public static UpdateSourceTrigger Explicit;
}
[AttributeUsageAttribute("4")]
public class System.Windows.Data.ValueConversionAttribute : Attribute {
    public Type ParameterType { get; public set; }
    public Type SourceType { get; }
    public Type TargetType { get; }
    public object TypeId { get; }
    public ValueConversionAttribute(Type sourceType, Type targetType);
    public Type get_ParameterType();
    public void set_ParameterType(Type value);
    public Type get_SourceType();
    public Type get_TargetType();
    public virtual object get_TypeId();
    public virtual int GetHashCode();
}
public class System.Windows.Data.ValueUnavailableException : SystemException {
    protected ValueUnavailableException(SerializationInfo info, StreamingContext context);
    public ValueUnavailableException(string message);
    public ValueUnavailableException(string message, Exception innerException);
}
[LocalizabilityAttribute("0")]
[ContentPropertyAttribute("XmlSerializer")]
public class System.Windows.Data.XmlDataProvider : DataSourceProvider {
    protected Uri BaseUri { get; protected set; }
    [DesignerSerializationVisibilityAttribute("0")]
public XmlDocument Document { get; public set; }
    [DefaultValueAttribute("True")]
public bool IsAsynchronous { get; public set; }
    public Uri Source { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    [DefaultValueAttribute("")]
public XmlNamespaceManager XmlNamespaceManager { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[EditorBrowsableAttribute("1")]
public IXmlSerializable XmlSerializer { get; }
    [DesignerSerializationOptionsAttribute("1")]
public string XPath { get; public set; }
    protected virtual Uri get_BaseUri();
    protected virtual void set_BaseUri(Uri value);
    public XmlDocument get_Document();
    public void set_Document(XmlDocument value);
    public bool get_IsAsynchronous();
    public void set_IsAsynchronous(bool value);
    public Uri get_Source();
    public void set_Source(Uri value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public XmlNamespaceManager get_XmlNamespaceManager();
    public void set_XmlNamespaceManager(XmlNamespaceManager value);
    public IXmlSerializable get_XmlSerializer();
    public string get_XPath();
    public void set_XPath(string value);
    protected virtual void BeginQuery();
    protected virtual void EndInit();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeSource();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeXmlSerializer();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeXPath();
}
public class System.Windows.Data.XmlNamespaceMapping : object {
    public string Prefix { get; public set; }
    public Uri Uri { get; public set; }
    public XmlNamespaceMapping(string prefix, Uri uri);
    public string get_Prefix();
    public void set_Prefix(string value);
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XmlNamespaceMapping mappingA, XmlNamespaceMapping mappingB);
    public static bool op_Inequality(XmlNamespaceMapping mappingA, XmlNamespaceMapping mappingB);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
[LocalizabilityAttribute("17")]
public class System.Windows.Data.XmlNamespaceMappingCollection : XmlNamespaceManager {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(XmlNamespaceMapping mapping);
    protected virtual void AddChild(object value);
    protected virtual void AddText(string text);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(XmlNamespaceMapping mapping);
    public sealed virtual void CopyTo(XmlNamespaceMapping[] array, int arrayIndex);
    public virtual IEnumerator GetEnumerator();
    protected IEnumerator`1<XmlNamespaceMapping> ProtectedGetEnumerator();
    public sealed virtual bool Remove(XmlNamespaceMapping mapping);
    private sealed virtual override IEnumerator`1<XmlNamespaceMapping> System.Collections.Generic.IEnumerable<System.Windows.Data.XmlNamespaceMapping>.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[DictionaryKeyPropertyAttribute("DataTemplateKey")]
public class System.Windows.DataTemplate : FrameworkTemplate {
    public object DataTemplateKey { get; }
    [DefaultValueAttribute("")]
[AmbientAttribute]
public object DataType { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[DependsOnAttribute("Template")]
[DependsOnAttribute("VisualTree")]
public TriggerCollection Triggers { get; }
    public DataTemplate(object dataType);
    public object get_DataTemplateKey();
    public object get_DataType();
    public void set_DataType(object value);
    public TriggerCollection get_Triggers();
    protected virtual void ValidateTemplatedParent(FrameworkElement templatedParent);
}
public class System.Windows.DataTemplateKey : TemplateKey {
    public DataTemplateKey(object dataType);
}
[ContentPropertyAttribute("Setters")]
[XamlSetMarkupExtensionAttribute("ReceiveMarkupExtension")]
public class System.Windows.DataTrigger : TriggerBase {
    [LocalizabilityAttribute("0")]
public BindingBase Binding { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public SetterBaseCollection Setters { get; }
    [LocalizabilityAttribute("0")]
[DependsOnAttribute("Binding")]
public object Value { get; public set; }
    public BindingBase get_Binding();
    public void set_Binding(BindingBase value);
    public SetterBaseCollection get_Setters();
    public object get_Value();
    public void set_Value(object value);
    public static void ReceiveMarkupExtension(object targetObject, XamlSetMarkupExtensionEventArgs eventArgs);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[TypeConverterAttribute("System.Windows.DeferrableContentConverter")]
public class System.Windows.DeferrableContent : object {
}
public class System.Windows.DeferrableContentConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public static class System.Windows.DependencyPropertyHelper : object {
    public static ValueSource GetValueSource(DependencyObject dependencyObject, DependencyProperty dependencyProperty);
    public static bool IsTemplatedValueDynamic(DependencyObject elementInTemplate, DependencyProperty dependencyProperty);
}
public static class System.Windows.Diagnostics.BindingDiagnostics : object {
    public static void add_BindingFailed(EventHandler`1<BindingFailedEventArgs> value);
    public static void remove_BindingFailed(EventHandler`1<BindingFailedEventArgs> value);
}
public class System.Windows.Diagnostics.BindingFailedEventArgs : object {
    public TraceEventType EventType { get; }
    public int Code { get; }
    public string Message { get; }
    public BindingExpressionBase Binding { get; }
    public Object[] Parameters { get; }
    public TraceEventType get_EventType();
    public int get_Code();
    public string get_Message();
    public BindingExpressionBase get_Binding();
    public Object[] get_Parameters();
}
public static class System.Windows.Diagnostics.ResourceDictionaryDiagnostics : object {
    public static IEnumerable`1<ResourceDictionaryInfo> GenericResourceDictionaries { get; }
    public static IEnumerable`1<ResourceDictionaryInfo> ThemedResourceDictionaries { get; }
    public static IEnumerable`1<ResourceDictionaryInfo> get_GenericResourceDictionaries();
    public static IEnumerable`1<ResourceDictionaryInfo> get_ThemedResourceDictionaries();
    public static void add_GenericResourceDictionaryLoaded(EventHandler`1<ResourceDictionaryLoadedEventArgs> value);
    public static void remove_GenericResourceDictionaryLoaded(EventHandler`1<ResourceDictionaryLoadedEventArgs> value);
    public static void add_StaticResourceResolved(EventHandler`1<StaticResourceResolvedEventArgs> value);
    public static void remove_StaticResourceResolved(EventHandler`1<StaticResourceResolvedEventArgs> value);
    public static void add_ThemedResourceDictionaryLoaded(EventHandler`1<ResourceDictionaryLoadedEventArgs> value);
    public static void remove_ThemedResourceDictionaryLoaded(EventHandler`1<ResourceDictionaryLoadedEventArgs> value);
    public static void add_ThemedResourceDictionaryUnloaded(EventHandler`1<ResourceDictionaryUnloadedEventArgs> value);
    public static void remove_ThemedResourceDictionaryUnloaded(EventHandler`1<ResourceDictionaryUnloadedEventArgs> value);
    public static IEnumerable`1<Application> GetApplicationOwners(ResourceDictionary dictionary);
    public static IEnumerable`1<FrameworkContentElement> GetFrameworkContentElementOwners(ResourceDictionary dictionary);
    public static IEnumerable`1<FrameworkElement> GetFrameworkElementOwners(ResourceDictionary dictionary);
    public static IEnumerable`1<ResourceDictionary> GetResourceDictionariesForSource(Uri uri);
}
public class System.Windows.Diagnostics.ResourceDictionaryInfo : object {
    public Assembly Assembly { get; }
    public ResourceDictionary ResourceDictionary { get; }
    public Assembly ResourceDictionaryAssembly { get; }
    public Uri SourceUri { get; }
    public Assembly get_Assembly();
    public ResourceDictionary get_ResourceDictionary();
    public Assembly get_ResourceDictionaryAssembly();
    public Uri get_SourceUri();
}
public class System.Windows.Diagnostics.ResourceDictionaryLoadedEventArgs : EventArgs {
    public ResourceDictionaryInfo ResourceDictionaryInfo { get; }
    public ResourceDictionaryInfo get_ResourceDictionaryInfo();
}
public class System.Windows.Diagnostics.ResourceDictionaryUnloadedEventArgs : EventArgs {
    public ResourceDictionaryInfo ResourceDictionaryInfo { get; }
    public ResourceDictionaryInfo get_ResourceDictionaryInfo();
}
public class System.Windows.Diagnostics.StaticResourceResolvedEventArgs : EventArgs {
    public ResourceDictionary ResourceDictionary { get; }
    public object ResourceKey { get; }
    public object TargetObject { get; }
    public object TargetProperty { get; }
    public ResourceDictionary get_ResourceDictionary();
    public object get_ResourceKey();
    public object get_TargetObject();
    public object get_TargetProperty();
}
public class System.Windows.DialogResultConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public abstract class System.Windows.Documents.Adorner : FrameworkElement {
    public UIElement AdornedElement { get; }
    public bool IsClipEnabled { get; public set; }
    protected Adorner(UIElement adornedElement);
    public UIElement get_AdornedElement();
    public bool get_IsClipEnabled();
    public void set_IsClipEnabled(bool value);
    public virtual GeneralTransform GetDesiredTransform(GeneralTransform transform);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    protected virtual Size MeasureOverride(Size constraint);
}
public class System.Windows.Documents.AdornerDecorator : Decorator {
    public AdornerLayer AdornerLayer { get; }
    public UIElement Child { get; public set; }
    protected int VisualChildrenCount { get; }
    public AdornerLayer get_AdornerLayer();
    public virtual UIElement get_Child();
    public virtual void set_Child(UIElement value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
}
public class System.Windows.Documents.AdornerLayer : FrameworkElement {
    protected internal IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    protected internal virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    public void Add(Adorner adorner);
    public AdornerHitTestResult AdornerHitTest(Point point);
    protected virtual Size ArrangeOverride(Size finalSize);
    public static AdornerLayer GetAdornerLayer(Visual visual);
    public Adorner[] GetAdorners(UIElement element);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    public void Remove(Adorner adorner);
    public void Update();
    public void Update(UIElement element);
}
[ContentPropertyAttribute("Blocks")]
public abstract class System.Windows.Documents.AnchoredBlock : Inline {
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty MarginProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public BlockCollection Blocks { get; }
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    public Thickness Margin { get; public set; }
    public Thickness Padding { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    protected AnchoredBlock(Block block, TextPointer insertionPosition);
    public BlockCollection get_Blocks();
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    public Thickness get_Margin();
    public void set_Margin(Thickness value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeBlocks(XamlDesignerSerializationManager manager);
}
public abstract class System.Windows.Documents.Block : TextElement {
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty BreakColumnBeforeProperty;
    public static DependencyProperty BreakPageBeforeProperty;
    public static DependencyProperty ClearFloatersProperty;
    public static DependencyProperty FlowDirectionProperty;
    public static DependencyProperty IsHyphenationEnabledProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty MarginProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public bool BreakColumnBefore { get; public set; }
    public bool BreakPageBefore { get; public set; }
    public WrapDirection ClearFloaters { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    public bool IsHyphenationEnabled { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    public Thickness Margin { get; public set; }
    public Block NextBlock { get; }
    public Thickness Padding { get; public set; }
    public Block PreviousBlock { get; }
    public BlockCollection SiblingBlocks { get; }
    public TextAlignment TextAlignment { get; public set; }
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public bool get_BreakColumnBefore();
    public void set_BreakColumnBefore(bool value);
    public bool get_BreakPageBefore();
    public void set_BreakPageBefore(bool value);
    public WrapDirection get_ClearFloaters();
    public void set_ClearFloaters(WrapDirection value);
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public bool get_IsHyphenationEnabled();
    public void set_IsHyphenationEnabled(bool value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    public Thickness get_Margin();
    public void set_Margin(Thickness value);
    public Block get_NextBlock();
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public Block get_PreviousBlock();
    public BlockCollection get_SiblingBlocks();
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public static bool GetIsHyphenationEnabled(DependencyObject element);
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public static double GetLineHeight(DependencyObject element);
    public static LineStackingStrategy GetLineStackingStrategy(DependencyObject element);
    public static TextAlignment GetTextAlignment(DependencyObject element);
    public static void SetIsHyphenationEnabled(DependencyObject element, bool value);
    public static void SetLineHeight(DependencyObject element, double value);
    public static void SetLineStackingStrategy(DependencyObject element, LineStackingStrategy value);
    public static void SetTextAlignment(DependencyObject element, TextAlignment value);
}
public class System.Windows.Documents.BlockCollection : TextElementCollection`1<Block> {
    public Block FirstBlock { get; }
    public Block LastBlock { get; }
    public Block get_FirstBlock();
    public Block get_LastBlock();
}
[ContentPropertyAttribute("Child")]
public class System.Windows.Documents.BlockUIContainer : Block {
    public UIElement Child { get; public set; }
    public BlockUIContainer(UIElement uiElement);
    public UIElement get_Child();
    public void set_Child(UIElement value);
}
public class System.Windows.Documents.Bold : Span {
    public Bold(Inline childInline);
    public Bold(Inline childInline, TextPointer insertionPosition);
    public Bold(TextPointer start, TextPointer end);
}
[UsableDuringInitializationAttribute("False")]
public class System.Windows.Documents.DocumentReference : FrameworkElement {
    public static DependencyProperty SourceProperty;
    public Uri Source { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public Uri get_Source();
    public void set_Source(Uri value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public FixedDocument GetDocument(bool forceReload);
    public void SetDocument(FixedDocument doc);
}
[DefaultMemberAttribute("Item")]
[CLSCompliantAttribute("False")]
public class System.Windows.Documents.DocumentReferenceCollection : object {
    public int Count { get; }
    public DocumentReference Item { get; }
    public int get_Count();
    public DocumentReference get_Item(int index);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void Add(DocumentReference item);
    public void CopyTo(DocumentReference[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<DocumentReference> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Windows.Documents.DocumentStructures.BlockElement : object {
}
public class System.Windows.Documents.DocumentStructures.FigureStructure : SemanticBasicElement {
    public void Add(NamedElement element);
    private sealed virtual override IEnumerator`1<NamedElement> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.NamedElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.ListItemStructure : SemanticBasicElement {
    public string Marker { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    public void Add(BlockElement element);
    private sealed virtual override IEnumerator`1<BlockElement> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.BlockElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.ListStructure : SemanticBasicElement {
    public void Add(ListItemStructure listItem);
    private sealed virtual override IEnumerator`1<ListItemStructure> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.ListItemStructure>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.NamedElement : BlockElement {
    public string NameReference { get; public set; }
    public string get_NameReference();
    public void set_NameReference(string value);
}
public class System.Windows.Documents.DocumentStructures.ParagraphStructure : SemanticBasicElement {
    public void Add(NamedElement element);
    private sealed virtual override IEnumerator`1<NamedElement> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.NamedElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.SectionStructure : SemanticBasicElement {
    public void Add(BlockElement element);
    private sealed virtual override IEnumerator`1<BlockElement> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.BlockElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.SemanticBasicElement : BlockElement {
}
public class System.Windows.Documents.DocumentStructures.StoryBreak : BlockElement {
}
[ContentPropertyAttribute("BlockElementList")]
public class System.Windows.Documents.DocumentStructures.StoryFragment : object {
    public string FragmentName { get; public set; }
    public string FragmentType { get; public set; }
    public string StoryName { get; public set; }
    public string get_FragmentName();
    public void set_FragmentName(string value);
    public string get_FragmentType();
    public void set_FragmentType(string value);
    public string get_StoryName();
    public void set_StoryName(string value);
    public void Add(BlockElement element);
    private sealed virtual override IEnumerator`1<BlockElement> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.BlockElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[ContentPropertyAttribute("StoryFragmentList")]
public class System.Windows.Documents.DocumentStructures.StoryFragments : object {
    public void Add(StoryFragment storyFragment);
    private sealed virtual override IEnumerator`1<StoryFragment> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.StoryFragment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.TableCellStructure : SemanticBasicElement {
    public int ColumnSpan { get; public set; }
    public int RowSpan { get; public set; }
    public int get_ColumnSpan();
    public void set_ColumnSpan(int value);
    public int get_RowSpan();
    public void set_RowSpan(int value);
    public void Add(BlockElement element);
    private sealed virtual override IEnumerator`1<BlockElement> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.BlockElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.TableRowGroupStructure : SemanticBasicElement {
    public void Add(TableRowStructure tableRow);
    private sealed virtual override IEnumerator`1<TableRowStructure> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.TableRowStructure>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.TableRowStructure : SemanticBasicElement {
    public void Add(TableCellStructure tableCell);
    private sealed virtual override IEnumerator`1<TableCellStructure> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.TableCellStructure>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.DocumentStructures.TableStructure : SemanticBasicElement {
    public void Add(TableRowGroupStructure tableRowGroup);
    private sealed virtual override IEnumerator`1<TableRowGroupStructure> System.Collections.Generic.IEnumerable<System.Windows.Documents.DocumentStructures.TableRowGroupStructure>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public static class System.Windows.Documents.EditingCommands : object {
    public static RoutedUICommand AlignCenter { get; }
    public static RoutedUICommand AlignJustify { get; }
    public static RoutedUICommand AlignLeft { get; }
    public static RoutedUICommand AlignRight { get; }
    public static RoutedUICommand Backspace { get; }
    public static RoutedUICommand CorrectSpellingError { get; }
    public static RoutedUICommand DecreaseFontSize { get; }
    public static RoutedUICommand DecreaseIndentation { get; }
    public static RoutedUICommand Delete { get; }
    public static RoutedUICommand DeleteNextWord { get; }
    public static RoutedUICommand DeletePreviousWord { get; }
    public static RoutedUICommand EnterLineBreak { get; }
    public static RoutedUICommand EnterParagraphBreak { get; }
    public static RoutedUICommand IgnoreSpellingError { get; }
    public static RoutedUICommand IncreaseFontSize { get; }
    public static RoutedUICommand IncreaseIndentation { get; }
    public static RoutedUICommand MoveDownByLine { get; }
    public static RoutedUICommand MoveDownByPage { get; }
    public static RoutedUICommand MoveDownByParagraph { get; }
    public static RoutedUICommand MoveLeftByCharacter { get; }
    public static RoutedUICommand MoveLeftByWord { get; }
    public static RoutedUICommand MoveRightByCharacter { get; }
    public static RoutedUICommand MoveRightByWord { get; }
    public static RoutedUICommand MoveToDocumentEnd { get; }
    public static RoutedUICommand MoveToDocumentStart { get; }
    public static RoutedUICommand MoveToLineEnd { get; }
    public static RoutedUICommand MoveToLineStart { get; }
    public static RoutedUICommand MoveUpByLine { get; }
    public static RoutedUICommand MoveUpByPage { get; }
    public static RoutedUICommand MoveUpByParagraph { get; }
    public static RoutedUICommand SelectDownByLine { get; }
    public static RoutedUICommand SelectDownByPage { get; }
    public static RoutedUICommand SelectDownByParagraph { get; }
    public static RoutedUICommand SelectLeftByCharacter { get; }
    public static RoutedUICommand SelectLeftByWord { get; }
    public static RoutedUICommand SelectRightByCharacter { get; }
    public static RoutedUICommand SelectRightByWord { get; }
    public static RoutedUICommand SelectToDocumentEnd { get; }
    public static RoutedUICommand SelectToDocumentStart { get; }
    public static RoutedUICommand SelectToLineEnd { get; }
    public static RoutedUICommand SelectToLineStart { get; }
    public static RoutedUICommand SelectUpByLine { get; }
    public static RoutedUICommand SelectUpByPage { get; }
    public static RoutedUICommand SelectUpByParagraph { get; }
    public static RoutedUICommand TabBackward { get; }
    public static RoutedUICommand TabForward { get; }
    public static RoutedUICommand ToggleBold { get; }
    public static RoutedUICommand ToggleBullets { get; }
    public static RoutedUICommand ToggleInsert { get; }
    public static RoutedUICommand ToggleItalic { get; }
    public static RoutedUICommand ToggleNumbering { get; }
    public static RoutedUICommand ToggleSubscript { get; }
    public static RoutedUICommand ToggleSuperscript { get; }
    public static RoutedUICommand ToggleUnderline { get; }
    public static RoutedUICommand get_AlignCenter();
    public static RoutedUICommand get_AlignJustify();
    public static RoutedUICommand get_AlignLeft();
    public static RoutedUICommand get_AlignRight();
    public static RoutedUICommand get_Backspace();
    public static RoutedUICommand get_CorrectSpellingError();
    public static RoutedUICommand get_DecreaseFontSize();
    public static RoutedUICommand get_DecreaseIndentation();
    public static RoutedUICommand get_Delete();
    public static RoutedUICommand get_DeleteNextWord();
    public static RoutedUICommand get_DeletePreviousWord();
    public static RoutedUICommand get_EnterLineBreak();
    public static RoutedUICommand get_EnterParagraphBreak();
    public static RoutedUICommand get_IgnoreSpellingError();
    public static RoutedUICommand get_IncreaseFontSize();
    public static RoutedUICommand get_IncreaseIndentation();
    public static RoutedUICommand get_MoveDownByLine();
    public static RoutedUICommand get_MoveDownByPage();
    public static RoutedUICommand get_MoveDownByParagraph();
    public static RoutedUICommand get_MoveLeftByCharacter();
    public static RoutedUICommand get_MoveLeftByWord();
    public static RoutedUICommand get_MoveRightByCharacter();
    public static RoutedUICommand get_MoveRightByWord();
    public static RoutedUICommand get_MoveToDocumentEnd();
    public static RoutedUICommand get_MoveToDocumentStart();
    public static RoutedUICommand get_MoveToLineEnd();
    public static RoutedUICommand get_MoveToLineStart();
    public static RoutedUICommand get_MoveUpByLine();
    public static RoutedUICommand get_MoveUpByPage();
    public static RoutedUICommand get_MoveUpByParagraph();
    public static RoutedUICommand get_SelectDownByLine();
    public static RoutedUICommand get_SelectDownByPage();
    public static RoutedUICommand get_SelectDownByParagraph();
    public static RoutedUICommand get_SelectLeftByCharacter();
    public static RoutedUICommand get_SelectLeftByWord();
    public static RoutedUICommand get_SelectRightByCharacter();
    public static RoutedUICommand get_SelectRightByWord();
    public static RoutedUICommand get_SelectToDocumentEnd();
    public static RoutedUICommand get_SelectToDocumentStart();
    public static RoutedUICommand get_SelectToLineEnd();
    public static RoutedUICommand get_SelectToLineStart();
    public static RoutedUICommand get_SelectUpByLine();
    public static RoutedUICommand get_SelectUpByPage();
    public static RoutedUICommand get_SelectUpByParagraph();
    public static RoutedUICommand get_TabBackward();
    public static RoutedUICommand get_TabForward();
    public static RoutedUICommand get_ToggleBold();
    public static RoutedUICommand get_ToggleBullets();
    public static RoutedUICommand get_ToggleInsert();
    public static RoutedUICommand get_ToggleItalic();
    public static RoutedUICommand get_ToggleNumbering();
    public static RoutedUICommand get_ToggleSubscript();
    public static RoutedUICommand get_ToggleSuperscript();
    public static RoutedUICommand get_ToggleUnderline();
}
public class System.Windows.Documents.Figure : AnchoredBlock {
    public static DependencyProperty CanDelayPlacementProperty;
    public static DependencyProperty HeightProperty;
    public static DependencyProperty HorizontalAnchorProperty;
    public static DependencyProperty HorizontalOffsetProperty;
    public static DependencyProperty VerticalAnchorProperty;
    public static DependencyProperty VerticalOffsetProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty WrapDirectionProperty;
    public bool CanDelayPlacement { get; public set; }
    public FigureLength Height { get; public set; }
    public FigureHorizontalAnchor HorizontalAnchor { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double HorizontalOffset { get; public set; }
    public FigureVerticalAnchor VerticalAnchor { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double VerticalOffset { get; public set; }
    public FigureLength Width { get; public set; }
    public WrapDirection WrapDirection { get; public set; }
    public Figure(Block childBlock);
    public Figure(Block childBlock, TextPointer insertionPosition);
    public bool get_CanDelayPlacement();
    public void set_CanDelayPlacement(bool value);
    public FigureLength get_Height();
    public void set_Height(FigureLength value);
    public FigureHorizontalAnchor get_HorizontalAnchor();
    public void set_HorizontalAnchor(FigureHorizontalAnchor value);
    public double get_HorizontalOffset();
    public void set_HorizontalOffset(double value);
    public FigureVerticalAnchor get_VerticalAnchor();
    public void set_VerticalAnchor(FigureVerticalAnchor value);
    public double get_VerticalOffset();
    public void set_VerticalOffset(double value);
    public FigureLength get_Width();
    public void set_Width(FigureLength value);
    public WrapDirection get_WrapDirection();
    public void set_WrapDirection(WrapDirection value);
}
[ContentPropertyAttribute("Pages")]
public class System.Windows.Documents.FixedDocument : FrameworkContentElement {
    public static DependencyProperty PrintTicketProperty;
    public DocumentPaginator DocumentPaginator { get; }
    protected internal IEnumerator LogicalChildren { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public PageContentCollection Pages { get; }
    public object PrintTicket { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public sealed virtual DocumentPaginator get_DocumentPaginator();
    protected internal virtual IEnumerator get_LogicalChildren();
    public PageContentCollection get_Pages();
    public object get_PrintTicket();
    public void set_PrintTicket(object value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[ContentPropertyAttribute("References")]
public class System.Windows.Documents.FixedDocumentSequence : FrameworkContentElement {
    public static DependencyProperty PrintTicketProperty;
    public DocumentPaginator DocumentPaginator { get; }
    protected internal IEnumerator LogicalChildren { get; }
    public object PrintTicket { get; public set; }
    [CLSCompliantAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public DocumentReferenceCollection References { get; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public sealed virtual DocumentPaginator get_DocumentPaginator();
    protected internal virtual IEnumerator get_LogicalChildren();
    public object get_PrintTicket();
    public void set_PrintTicket(object value);
    public DocumentReferenceCollection get_References();
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[ContentPropertyAttribute("Children")]
public class System.Windows.Documents.FixedPage : FrameworkElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BleedBoxProperty;
    public static DependencyProperty BottomProperty;
    public static DependencyProperty ContentBoxProperty;
    public static DependencyProperty LeftProperty;
    public static DependencyProperty NavigateUriProperty;
    public static DependencyProperty PrintTicketProperty;
    public static DependencyProperty RightProperty;
    public static DependencyProperty TopProperty;
    public Brush Background { get; public set; }
    public Rect BleedBox { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public UIElementCollection Children { get; }
    public Rect ContentBox { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public object PrintTicket { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    protected int VisualChildrenCount { get; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public Rect get_BleedBox();
    public void set_BleedBox(Rect value);
    public UIElementCollection get_Children();
    public Rect get_ContentBox();
    public void set_ContentBox(Rect value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public object get_PrintTicket();
    public void set_PrintTicket(object value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetBottom(UIElement element);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetLeft(UIElement element);
    [AttachedPropertyBrowsableForChildrenAttribute]
public static Uri GetNavigateUri(UIElement element);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetRight(UIElement element);
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[AttachedPropertyBrowsableForChildrenAttribute]
public static double GetTop(UIElement element);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnRender(DrawingContext dc);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
    public static void SetBottom(UIElement element, double length);
    public static void SetLeft(UIElement element, double length);
    public static void SetNavigateUri(UIElement element, Uri uri);
    public static void SetRight(UIElement element, double length);
    public static void SetTop(UIElement element, double length);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.Floater : AnchoredBlock {
    public static DependencyProperty HorizontalAlignmentProperty;
    public static DependencyProperty WidthProperty;
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double Width { get; public set; }
    public Floater(Block childBlock);
    public Floater(Block childBlock, TextPointer insertionPosition);
    public HorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(HorizontalAlignment value);
    public double get_Width();
    public void set_Width(double value);
}
[LocalizabilityAttribute("15")]
[ContentPropertyAttribute("Blocks")]
public class System.Windows.Documents.FlowDocument : FrameworkContentElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty ColumnGapProperty;
    public static DependencyProperty ColumnRuleBrushProperty;
    public static DependencyProperty ColumnRuleWidthProperty;
    public static DependencyProperty ColumnWidthProperty;
    public static DependencyProperty FlowDirectionProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStretchProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty IsColumnWidthFlexibleProperty;
    public static DependencyProperty IsHyphenationEnabledProperty;
    public static DependencyProperty IsOptimalParagraphEnabledProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty MaxPageHeightProperty;
    public static DependencyProperty MaxPageWidthProperty;
    public static DependencyProperty MinPageHeightProperty;
    public static DependencyProperty MinPageWidthProperty;
    public static DependencyProperty PageHeightProperty;
    public static DependencyProperty PagePaddingProperty;
    public static DependencyProperty PageWidthProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty TextEffectsProperty;
    public Brush Background { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public BlockCollection Blocks { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double ColumnGap { get; public set; }
    public Brush ColumnRuleBrush { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double ColumnRuleWidth { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double ColumnWidth { get; public set; }
    public TextPointer ContentEnd { get; }
    public TextPointer ContentStart { get; }
    public FlowDirection FlowDirection { get; public set; }
    [LocalizabilityAttribute("14")]
public FontFamily FontFamily { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    public bool IsColumnWidthFlexible { get; public set; }
    protected bool IsEnabledCore { get; }
    public bool IsHyphenationEnabled { get; public set; }
    public bool IsOptimalParagraphEnabled { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MaxPageHeight { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MaxPageWidth { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MinPageHeight { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MinPageWidth { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double PageHeight { get; public set; }
    public Thickness PagePadding { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double PageWidth { get; public set; }
    private DocumentPaginator System.Windows.Documents.IDocumentPaginatorSource.DocumentPaginator { get; }
    public TextAlignment TextAlignment { get; public set; }
    public TextEffectCollection TextEffects { get; public set; }
    public Typography Typography { get; }
    public FlowDocument(Block block);
    public Brush get_Background();
    public void set_Background(Brush value);
    public BlockCollection get_Blocks();
    public double get_ColumnGap();
    public void set_ColumnGap(double value);
    public Brush get_ColumnRuleBrush();
    public void set_ColumnRuleBrush(Brush value);
    public double get_ColumnRuleWidth();
    public void set_ColumnRuleWidth(double value);
    public double get_ColumnWidth();
    public void set_ColumnWidth(double value);
    public TextPointer get_ContentEnd();
    public TextPointer get_ContentStart();
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public bool get_IsColumnWidthFlexible();
    public void set_IsColumnWidthFlexible(bool value);
    protected virtual bool get_IsEnabledCore();
    public bool get_IsHyphenationEnabled();
    public void set_IsHyphenationEnabled(bool value);
    public bool get_IsOptimalParagraphEnabled();
    public void set_IsOptimalParagraphEnabled(bool value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public double get_MaxPageHeight();
    public void set_MaxPageHeight(double value);
    public double get_MaxPageWidth();
    public void set_MaxPageWidth(double value);
    public double get_MinPageHeight();
    public void set_MinPageHeight(double value);
    public double get_MinPageWidth();
    public void set_MinPageWidth(double value);
    public double get_PageHeight();
    public void set_PageHeight(double value);
    public Thickness get_PagePadding();
    public void set_PagePadding(Thickness value);
    public double get_PageWidth();
    public void set_PageWidth(double value);
    private sealed virtual override DocumentPaginator System.Windows.Documents.IDocumentPaginatorSource.get_DocumentPaginator();
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextEffectCollection get_TextEffects();
    public void set_TextEffects(TextEffectCollection value);
    public Typography get_Typography();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected sealed virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    public void SetDpi(DpiScale dpiInfo);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.FrameworkRichTextComposition : FrameworkTextComposition {
    public TextPointer CompositionEnd { get; }
    public TextPointer CompositionStart { get; }
    public TextPointer ResultEnd { get; }
    public TextPointer ResultStart { get; }
    public TextPointer get_CompositionEnd();
    public TextPointer get_CompositionStart();
    public TextPointer get_ResultEnd();
    public TextPointer get_ResultStart();
}
public class System.Windows.Documents.FrameworkTextComposition : TextComposition {
    public int CompositionLength { get; }
    public int CompositionOffset { get; }
    public int ResultLength { get; }
    public int ResultOffset { get; }
    public int get_CompositionLength();
    public int get_CompositionOffset();
    public int get_ResultLength();
    public int get_ResultOffset();
    public virtual void Complete();
}
public class System.Windows.Documents.GetPageRootCompletedEventArgs : AsyncCompletedEventArgs {
    public FixedPage Result { get; }
    public FixedPage get_Result();
}
public class System.Windows.Documents.GetPageRootCompletedEventHandler : MulticastDelegate {
    public GetPageRootCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetPageRootCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetPageRootCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Documents.Glyphs : FrameworkElement {
    public static DependencyProperty BidiLevelProperty;
    public static DependencyProperty CaretStopsProperty;
    public static DependencyProperty DeviceFontNameProperty;
    public static DependencyProperty FillProperty;
    public static DependencyProperty FontRenderingEmSizeProperty;
    public static DependencyProperty FontUriProperty;
    public static DependencyProperty IndicesProperty;
    public static DependencyProperty IsSidewaysProperty;
    public static DependencyProperty OriginXProperty;
    public static DependencyProperty OriginYProperty;
    public static DependencyProperty StyleSimulationsProperty;
    public static DependencyProperty UnicodeStringProperty;
    public int BidiLevel { get; public set; }
    public string CaretStops { get; public set; }
    public string DeviceFontName { get; public set; }
    public Brush Fill { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public double FontRenderingEmSize { get; public set; }
    public Uri FontUri { get; public set; }
    public string Indices { get; public set; }
    public bool IsSideways { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public double OriginX { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public double OriginY { get; public set; }
    public StyleSimulations StyleSimulations { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public string UnicodeString { get; public set; }
    public int get_BidiLevel();
    public void set_BidiLevel(int value);
    public string get_CaretStops();
    public void set_CaretStops(string value);
    public string get_DeviceFontName();
    public void set_DeviceFontName(string value);
    public Brush get_Fill();
    public void set_Fill(Brush value);
    public double get_FontRenderingEmSize();
    public void set_FontRenderingEmSize(double value);
    public Uri get_FontUri();
    public void set_FontUri(Uri value);
    public string get_Indices();
    public void set_Indices(string value);
    public bool get_IsSideways();
    public void set_IsSideways(bool value);
    public double get_OriginX();
    public void set_OriginX(double value);
    public double get_OriginY();
    public void set_OriginY(double value);
    public StyleSimulations get_StyleSimulations();
    public void set_StyleSimulations(StyleSimulations value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public string get_UnicodeString();
    public void set_UnicodeString(string value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext context);
    public GlyphRun ToGlyphRun();
}
[TextElementEditingBehaviorAttribute]
public class System.Windows.Documents.Hyperlink : Span {
    public static RoutedEvent ClickEvent;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty NavigateUriProperty;
    public static RoutedEvent RequestNavigateEvent;
    public static DependencyProperty TargetNameProperty;
    protected Uri BaseUri { get; protected set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
[LocalizabilityAttribute("17")]
public ICommand Command { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
[LocalizabilityAttribute("17")]
public object CommandParameter { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Action")]
public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    [BindableAttribute("True")]
[LocalizabilityAttribute("11")]
public Uri NavigateUri { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    [BindableAttribute("True")]
[LocalizabilityAttribute("0")]
public string TargetName { get; public set; }
    public Hyperlink(Inline childInline);
    public Hyperlink(Inline childInline, TextPointer insertionPosition);
    public Hyperlink(TextPointer start, TextPointer end);
    protected virtual Uri get_BaseUri();
    protected virtual void set_BaseUri(Uri value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    protected virtual bool get_IsEnabledCore();
    public Uri get_NavigateUri();
    public void set_NavigateUri(Uri value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public string get_TargetName();
    public void set_TargetName(string value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public void add_RequestNavigate(RequestNavigateEventHandler value);
    public void remove_RequestNavigate(RequestNavigateEventHandler value);
    public void DoClick();
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected internal virtual void OnKeyDown(KeyEventArgs e);
    protected internal virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected internal virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
}
[TextElementEditingBehaviorAttribute]
public abstract class System.Windows.Documents.Inline : TextElement {
    public static DependencyProperty BaselineAlignmentProperty;
    public static DependencyProperty FlowDirectionProperty;
    public static DependencyProperty TextDecorationsProperty;
    public BaselineAlignment BaselineAlignment { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    public Inline NextInline { get; }
    public Inline PreviousInline { get; }
    public InlineCollection SiblingInlines { get; }
    public TextDecorationCollection TextDecorations { get; public set; }
    public BaselineAlignment get_BaselineAlignment();
    public void set_BaselineAlignment(BaselineAlignment value);
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public Inline get_NextInline();
    public Inline get_PreviousInline();
    public InlineCollection get_SiblingInlines();
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
}
[ContentWrapperAttribute("System.Windows.Documents.InlineUIContainer")]
[ContentWrapperAttribute("System.Windows.Documents.Run")]
[WhitespaceSignificantCollectionAttribute]
public class System.Windows.Documents.InlineCollection : TextElementCollection`1<Inline> {
    public Inline FirstInline { get; }
    public Inline LastInline { get; }
    public Inline get_FirstInline();
    public Inline get_LastInline();
    public void Add(string text);
    public void Add(UIElement uiElement);
}
[TextElementEditingBehaviorAttribute]
[ContentPropertyAttribute("Child")]
public class System.Windows.Documents.InlineUIContainer : Inline {
    public UIElement Child { get; public set; }
    public InlineUIContainer(UIElement childUIElement);
    public InlineUIContainer(UIElement childUIElement, TextPointer insertionPosition);
    public UIElement get_Child();
    public void set_Child(UIElement value);
}
public class System.Windows.Documents.Italic : Span {
    public Italic(Inline childInline);
    public Italic(Inline childInline, TextPointer insertionPosition);
    public Italic(TextPointer start, TextPointer end);
}
[TrimSurroundingWhitespaceAttribute]
public class System.Windows.Documents.LineBreak : Inline {
    public LineBreak(TextPointer insertionPosition);
}
public class System.Windows.Documents.LinkTarget : object {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Documents.LinkTargetCollection : CollectionBase {
    public LinkTarget Item { get; public set; }
    public LinkTarget get_Item(int index);
    public void set_Item(int index, LinkTarget value);
    public int Add(LinkTarget value);
    public bool Contains(LinkTarget value);
    public void CopyTo(LinkTarget[] array, int index);
    public int IndexOf(LinkTarget value);
    public void Insert(int index, LinkTarget value);
    public void Remove(LinkTarget value);
}
[ContentPropertyAttribute("ListItems")]
public class System.Windows.Documents.List : Block {
    public static DependencyProperty MarkerOffsetProperty;
    public static DependencyProperty MarkerStyleProperty;
    public static DependencyProperty StartIndexProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public ListItemCollection ListItems { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double MarkerOffset { get; public set; }
    public TextMarkerStyle MarkerStyle { get; public set; }
    public int StartIndex { get; public set; }
    public List(ListItem listItem);
    public ListItemCollection get_ListItems();
    public double get_MarkerOffset();
    public void set_MarkerOffset(double value);
    public TextMarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(TextMarkerStyle value);
    public int get_StartIndex();
    public void set_StartIndex(int value);
}
[ContentPropertyAttribute("Blocks")]
public class System.Windows.Documents.ListItem : TextElement {
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty FlowDirectionProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty MarginProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public BlockCollection Blocks { get; }
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    public List List { get; }
    public Thickness Margin { get; public set; }
    public ListItem NextListItem { get; }
    public Thickness Padding { get; public set; }
    public ListItem PreviousListItem { get; }
    public ListItemCollection SiblingListItems { get; }
    public TextAlignment TextAlignment { get; public set; }
    public ListItem(Paragraph paragraph);
    public BlockCollection get_Blocks();
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    public List get_List();
    public Thickness get_Margin();
    public void set_Margin(Thickness value);
    public ListItem get_NextListItem();
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public ListItem get_PreviousListItem();
    public ListItemCollection get_SiblingListItems();
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeBlocks(XamlDesignerSerializationManager manager);
}
public class System.Windows.Documents.ListItemCollection : TextElementCollection`1<ListItem> {
    public ListItem FirstListItem { get; }
    public ListItem LastListItem { get; }
    public ListItem get_FirstListItem();
    public ListItem get_LastListItem();
}
public enum System.Windows.Documents.LogicalDirection : Enum {
    public int value__;
    public static LogicalDirection Backward;
    public static LogicalDirection Forward;
}
[ContentPropertyAttribute("Child")]
public class System.Windows.Documents.PageContent : FrameworkElement {
    public static DependencyProperty SourceProperty;
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
public FixedPage Child { get; public set; }
    public LinkTargetCollection LinkTargets { get; }
    protected internal IEnumerator LogicalChildren { get; }
    public Uri Source { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public FixedPage get_Child();
    public void set_Child(FixedPage value);
    public LinkTargetCollection get_LinkTargets();
    protected internal virtual IEnumerator get_LogicalChildren();
    public Uri get_Source();
    public void set_Source(Uri value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public void add_GetPageRootCompleted(GetPageRootCompletedEventHandler value);
    public void remove_GetPageRootCompleted(GetPageRootCompletedEventHandler value);
    public FixedPage GetPageRoot(bool forceReload);
    public void GetPageRootAsync(bool forceReload);
    public void GetPageRootAsyncCancel();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeChild(XamlDesignerSerializationManager manager);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Documents.PageContentCollection : object {
    public int Count { get; }
    public PageContent Item { get; }
    public int get_Count();
    public PageContent get_Item(int pageIndex);
    public int Add(PageContent newPageContent);
    public sealed virtual IEnumerator`1<PageContent> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ContentPropertyAttribute("Inlines")]
public class System.Windows.Documents.Paragraph : Block {
    public static DependencyProperty KeepTogetherProperty;
    public static DependencyProperty KeepWithNextProperty;
    public static DependencyProperty MinOrphanLinesProperty;
    public static DependencyProperty MinWidowLinesProperty;
    public static DependencyProperty TextDecorationsProperty;
    public static DependencyProperty TextIndentProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public InlineCollection Inlines { get; }
    public bool KeepTogether { get; public set; }
    public bool KeepWithNext { get; public set; }
    public int MinOrphanLines { get; public set; }
    public int MinWidowLines { get; public set; }
    public TextDecorationCollection TextDecorations { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double TextIndent { get; public set; }
    public Paragraph(Inline inline);
    public InlineCollection get_Inlines();
    public bool get_KeepTogether();
    public void set_KeepTogether(bool value);
    public bool get_KeepWithNext();
    public void set_KeepWithNext(bool value);
    public int get_MinOrphanLines();
    public void set_MinOrphanLines(int value);
    public int get_MinWidowLines();
    public void set_MinWidowLines(int value);
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public double get_TextIndent();
    public void set_TextIndent(double value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeInlines(XamlDesignerSerializationManager manager);
}
[ContentPropertyAttribute("Text")]
public class System.Windows.Documents.Run : Inline {
    public static DependencyProperty TextProperty;
    public string Text { get; public set; }
    public Run(string text);
    public Run(string text, TextPointer insertionPosition);
    public string get_Text();
    public void set_Text(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeText(XamlDesignerSerializationManager manager);
}
[ContentPropertyAttribute("Blocks")]
public class System.Windows.Documents.Section : Block {
    [DesignerSerializationVisibilityAttribute("2")]
public BlockCollection Blocks { get; }
    [DefaultValueAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasTrailingParagraphBreakOnPaste { get; public set; }
    public Section(Block block);
    public BlockCollection get_Blocks();
    public bool get_HasTrailingParagraphBreakOnPaste();
    public void set_HasTrailingParagraphBreakOnPaste(bool value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeBlocks(XamlDesignerSerializationManager manager);
}
public interface System.Windows.Documents.Serialization.ISerializerFactory {
    public string DefaultFileExtension { get; }
    public string DisplayName { get; }
    public string ManufacturerName { get; }
    public Uri ManufacturerWebsite { get; }
    public abstract virtual string get_DefaultFileExtension();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_ManufacturerName();
    public abstract virtual Uri get_ManufacturerWebsite();
    public abstract virtual SerializerWriter CreateSerializerWriter(Stream stream);
}
public class System.Windows.Documents.Serialization.SerializerDescriptor : object {
    public string AssemblyName { get; }
    public string AssemblyPath { get; }
    public Version AssemblyVersion { get; }
    public string DefaultFileExtension { get; }
    public string DisplayName { get; }
    public string FactoryInterfaceName { get; }
    public bool IsLoadable { get; }
    public string ManufacturerName { get; }
    public Uri ManufacturerWebsite { get; }
    public Version WinFXVersion { get; }
    public string get_AssemblyName();
    public string get_AssemblyPath();
    public Version get_AssemblyVersion();
    public string get_DefaultFileExtension();
    public string get_DisplayName();
    public string get_FactoryInterfaceName();
    public bool get_IsLoadable();
    public string get_ManufacturerName();
    public Uri get_ManufacturerWebsite();
    public Version get_WinFXVersion();
    public static SerializerDescriptor CreateFromFactoryInstance(ISerializerFactory factoryInstance);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Windows.Documents.Serialization.SerializerProvider : object {
    public ReadOnlyCollection`1<SerializerDescriptor> InstalledSerializers { get; }
    public ReadOnlyCollection`1<SerializerDescriptor> get_InstalledSerializers();
    public SerializerWriter CreateSerializerWriter(SerializerDescriptor serializerDescriptor, Stream stream);
    public static void RegisterSerializer(SerializerDescriptor serializerDescriptor, bool overwrite);
    public static void UnregisterSerializer(SerializerDescriptor serializerDescriptor);
}
public abstract class System.Windows.Documents.Serialization.SerializerWriter : object {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WritingCancelled(WritingCancelledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WritingCancelled(WritingCancelledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WritingCompleted(WritingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WritingCompleted(WritingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WritingProgressChanged(WritingProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WritingProgressChanged(WritingProgressChangedEventHandler value);
    public abstract virtual void CancelAsync();
    public abstract virtual SerializerWriterCollator CreateVisualsCollator();
    public abstract virtual SerializerWriterCollator CreateVisualsCollator(PrintTicket documentSequencePT, PrintTicket documentPT);
    public abstract virtual void Write(DocumentPaginator documentPaginator);
    public abstract virtual void Write(DocumentPaginator documentPaginator, PrintTicket printTicket);
    public abstract virtual void Write(FixedDocument fixedDocument);
    public abstract virtual void Write(FixedDocument fixedDocument, PrintTicket printTicket);
    public abstract virtual void Write(FixedDocumentSequence fixedDocumentSequence);
    public abstract virtual void Write(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public abstract virtual void Write(FixedPage fixedPage);
    public abstract virtual void Write(FixedPage fixedPage, PrintTicket printTicket);
    public abstract virtual void Write(Visual visual);
    public abstract virtual void Write(Visual visual, PrintTicket printTicket);
    public abstract virtual void WriteAsync(DocumentPaginator documentPaginator);
    public abstract virtual void WriteAsync(DocumentPaginator documentPaginator, object userState);
    public abstract virtual void WriteAsync(DocumentPaginator documentPaginator, PrintTicket printTicket);
    public abstract virtual void WriteAsync(DocumentPaginator documentPaginator, PrintTicket printTicket, object userState);
    public abstract virtual void WriteAsync(FixedDocument fixedDocument);
    public abstract virtual void WriteAsync(FixedDocument fixedDocument, object userState);
    public abstract virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket);
    public abstract virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket, object userState);
    public abstract virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence);
    public abstract virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, object userState);
    public abstract virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public abstract virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket, object userState);
    public abstract virtual void WriteAsync(FixedPage fixedPage);
    public abstract virtual void WriteAsync(FixedPage fixedPage, object userState);
    public abstract virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket);
    public abstract virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket, object userState);
    public abstract virtual void WriteAsync(Visual visual);
    public abstract virtual void WriteAsync(Visual visual, object userState);
    public abstract virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public abstract virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userState);
}
public abstract class System.Windows.Documents.Serialization.SerializerWriterCollator : object {
    public abstract virtual void BeginBatchWrite();
    public abstract virtual void Cancel();
    public abstract virtual void CancelAsync();
    public abstract virtual void EndBatchWrite();
    public abstract virtual void Write(Visual visual);
    public abstract virtual void Write(Visual visual, PrintTicket printTicket);
    public abstract virtual void WriteAsync(Visual visual);
    public abstract virtual void WriteAsync(Visual visual, object userState);
    public abstract virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public abstract virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userState);
}
public class System.Windows.Documents.Serialization.WritingCancelledEventArgs : EventArgs {
    public Exception Error { get; }
    public WritingCancelledEventArgs(Exception exception);
    public Exception get_Error();
}
public class System.Windows.Documents.Serialization.WritingCancelledEventHandler : MulticastDelegate {
    public WritingCancelledEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WritingCancelledEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WritingCancelledEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Documents.Serialization.WritingCompletedEventArgs : AsyncCompletedEventArgs {
    public WritingCompletedEventArgs(bool cancelled, object state, Exception exception);
}
public class System.Windows.Documents.Serialization.WritingCompletedEventHandler : MulticastDelegate {
    public WritingCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WritingCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WritingCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs : EventArgs {
    public PrintTicket CurrentPrintTicket { get; public set; }
    public PrintTicketLevel CurrentPrintTicketLevel { get; }
    public int Sequence { get; }
    public WritingPrintTicketRequiredEventArgs(PrintTicketLevel printTicketLevel, int sequence);
    public PrintTicket get_CurrentPrintTicket();
    public void set_CurrentPrintTicket(PrintTicket value);
    public PrintTicketLevel get_CurrentPrintTicketLevel();
    public int get_Sequence();
}
public class System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler : MulticastDelegate {
    public WritingPrintTicketRequiredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WritingPrintTicketRequiredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WritingPrintTicketRequiredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Documents.Serialization.WritingProgressChangedEventArgs : ProgressChangedEventArgs {
    public int Number { get; }
    public WritingProgressChangeLevel WritingLevel { get; }
    public WritingProgressChangedEventArgs(WritingProgressChangeLevel writingLevel, int number, int progressPercentage, object state);
    public int get_Number();
    public WritingProgressChangeLevel get_WritingLevel();
}
public class System.Windows.Documents.Serialization.WritingProgressChangedEventHandler : MulticastDelegate {
    public WritingProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WritingProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WritingProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Documents.Serialization.WritingProgressChangeLevel : Enum {
    public int value__;
    public static WritingProgressChangeLevel None;
    public static WritingProgressChangeLevel FixedDocumentSequenceWritingProgress;
    public static WritingProgressChangeLevel FixedDocumentWritingProgress;
    public static WritingProgressChangeLevel FixedPageWritingProgress;
}
[ContentPropertyAttribute("Inlines")]
public class System.Windows.Documents.Span : Inline {
    [DesignerSerializationVisibilityAttribute("2")]
public InlineCollection Inlines { get; }
    public Span(Inline childInline);
    public Span(Inline childInline, TextPointer insertionPosition);
    public Span(TextPointer start, TextPointer end);
    public InlineCollection get_Inlines();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeInlines(XamlDesignerSerializationManager manager);
}
[ContentPropertyAttribute("RowGroups")]
public class System.Windows.Documents.Table : Block {
    public static DependencyProperty CellSpacingProperty;
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double CellSpacing { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public TableColumnCollection Columns { get; }
    protected internal IEnumerator LogicalChildren { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public TableRowGroupCollection RowGroups { get; }
    public double get_CellSpacing();
    public void set_CellSpacing(double value);
    public TableColumnCollection get_Columns();
    protected internal virtual IEnumerator get_LogicalChildren();
    public TableRowGroupCollection get_RowGroups();
    public virtual void BeginInit();
    public virtual void EndInit();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeColumns();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[ContentPropertyAttribute("Blocks")]
public class System.Windows.Documents.TableCell : TextElement {
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty ColumnSpanProperty;
    public static DependencyProperty FlowDirectionProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty RowSpanProperty;
    public static DependencyProperty TextAlignmentProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public BlockCollection Blocks { get; }
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public int ColumnSpan { get; public set; }
    public FlowDirection FlowDirection { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    public Thickness Padding { get; public set; }
    public int RowSpan { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TableCell(Block blockItem);
    public BlockCollection get_Blocks();
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public int get_ColumnSpan();
    public void set_ColumnSpan(int value);
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public int get_RowSpan();
    public void set_RowSpan(int value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Documents.TableCellCollection : object {
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public TableCell Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual TableCell get_Item(int index);
    public sealed virtual void set_Item(int index, TableCell value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(TableCell item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TableCell item);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void CopyTo(TableCell[] array, int index);
    public sealed virtual int IndexOf(TableCell item);
    public sealed virtual void Insert(int index, TableCell item);
    public sealed virtual bool Remove(TableCell item);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    private sealed virtual override IEnumerator`1<TableCell> System.Collections.Generic.IEnumerable<System.Windows.Documents.TableCell>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void TrimToSize();
}
public class System.Windows.Documents.TableColumn : FrameworkContentElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty WidthProperty;
    public Brush Background { get; public set; }
    public GridLength Width { get; public set; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public GridLength get_Width();
    public void set_Width(GridLength value);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Documents.TableColumnCollection : object {
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public TableColumn Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual TableColumn get_Item(int index);
    public sealed virtual void set_Item(int index, TableColumn value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(TableColumn item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TableColumn item);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void CopyTo(TableColumn[] array, int index);
    public sealed virtual int IndexOf(TableColumn item);
    public sealed virtual void Insert(int index, TableColumn item);
    public sealed virtual bool Remove(TableColumn item);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    private sealed virtual override IEnumerator`1<TableColumn> System.Collections.Generic.IEnumerable<System.Windows.Documents.TableColumn>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void TrimToSize();
}
[ContentPropertyAttribute("Cells")]
public class System.Windows.Documents.TableRow : TextElement {
    [DesignerSerializationVisibilityAttribute("2")]
public TableCellCollection Cells { get; }
    public TableCellCollection get_Cells();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeCells();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Documents.TableRowCollection : object {
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public TableRow Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual TableRow get_Item(int index);
    public sealed virtual void set_Item(int index, TableRow value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(TableRow item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TableRow item);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void CopyTo(TableRow[] array, int index);
    public sealed virtual int IndexOf(TableRow item);
    public sealed virtual void Insert(int index, TableRow item);
    public sealed virtual bool Remove(TableRow item);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    private sealed virtual override IEnumerator`1<TableRow> System.Collections.Generic.IEnumerable<System.Windows.Documents.TableRow>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void TrimToSize();
}
[ContentPropertyAttribute("Rows")]
public class System.Windows.Documents.TableRowGroup : TextElement {
    [DesignerSerializationVisibilityAttribute("2")]
public TableRowCollection Rows { get; }
    public TableRowCollection get_Rows();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeRows();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Documents.TableRowGroupCollection : object {
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public TableRowGroup Item { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual TableRowGroup get_Item(int index);
    public sealed virtual void set_Item(int index, TableRowGroup value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(TableRowGroup item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TableRowGroup item);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual void CopyTo(TableRowGroup[] array, int index);
    public sealed virtual int IndexOf(TableRowGroup item);
    public sealed virtual void Insert(int index, TableRowGroup item);
    public sealed virtual bool Remove(TableRowGroup item);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    private sealed virtual override IEnumerator`1<TableRowGroup> System.Collections.Generic.IEnumerable<System.Windows.Documents.TableRowGroup>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public void TrimToSize();
}
public static class System.Windows.Documents.TextEffectResolver : object {
    public static TextEffectTarget[] Resolve(TextPointer startPosition, TextPointer endPosition, TextEffect effect);
}
public class System.Windows.Documents.TextEffectTarget : object {
    public DependencyObject Element { get; }
    public bool IsEnabled { get; }
    public TextEffect TextEffect { get; }
    public DependencyObject get_Element();
    public bool get_IsEnabled();
    public TextEffect get_TextEffect();
    public void Disable();
    public void Enable();
}
public abstract class System.Windows.Documents.TextElement : FrameworkContentElement {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStretchProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty TextEffectsProperty;
    public Brush Background { get; public set; }
    public TextPointer ContentEnd { get; }
    public TextPointer ContentStart { get; }
    public TextPointer ElementEnd { get; }
    public TextPointer ElementStart { get; }
    [LocalizabilityAttribute("14")]
public FontFamily FontFamily { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute("0")]
public double FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public TextEffectCollection TextEffects { get; public set; }
    public Typography Typography { get; }
    public Brush get_Background();
    public void set_Background(Brush value);
    public TextPointer get_ContentEnd();
    public TextPointer get_ContentStart();
    public TextPointer get_ElementEnd();
    public TextPointer get_ElementStart();
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public TextEffectCollection get_TextEffects();
    public void set_TextEffects(TextEffectCollection value);
    public Typography get_Typography();
    public static FontFamily GetFontFamily(DependencyObject element);
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
public static double GetFontSize(DependencyObject element);
    public static FontStretch GetFontStretch(DependencyObject element);
    public static FontStyle GetFontStyle(DependencyObject element);
    public static FontWeight GetFontWeight(DependencyObject element);
    public static Brush GetForeground(DependencyObject element);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    public static void SetFontFamily(DependencyObject element, FontFamily value);
    public static void SetFontSize(DependencyObject element, double value);
    public static void SetFontStretch(DependencyObject element, FontStretch value);
    public static void SetFontStyle(DependencyObject element, FontStyle value);
    public static void SetFontWeight(DependencyObject element, FontWeight value);
    public static void SetForeground(DependencyObject element, Brush value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.Documents.TextElementCollection`1 : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(TextElementType item);
    public void AddRange(IEnumerable range);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TextElementType item);
    public sealed virtual void CopyTo(TextElementType[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<TextElementType> GetEnumerator();
    public void InsertAfter(TextElementType previousSibling, TextElementType newItem);
    public void InsertBefore(TextElementType nextSibling, TextElementType newItem);
    public sealed virtual bool Remove(TextElementType item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Documents.TextElementEditingBehaviorAttribute : Attribute {
    public bool IsMergeable { get; public set; }
    public bool IsTypographicOnly { get; public set; }
    public bool get_IsMergeable();
    public void set_IsMergeable(bool value);
    public bool get_IsTypographicOnly();
    public void set_IsTypographicOnly(bool value);
}
public class System.Windows.Documents.TextPointer : ContentPosition {
    public TextPointer DocumentEnd { get; }
    public TextPointer DocumentStart { get; }
    public bool HasValidLayout { get; }
    public bool IsAtInsertionPosition { get; }
    public bool IsAtLineStartPosition { get; }
    public LogicalDirection LogicalDirection { get; }
    public Paragraph Paragraph { get; }
    public DependencyObject Parent { get; }
    public TextPointer get_DocumentEnd();
    public TextPointer get_DocumentStart();
    public bool get_HasValidLayout();
    public bool get_IsAtInsertionPosition();
    public bool get_IsAtLineStartPosition();
    public LogicalDirection get_LogicalDirection();
    public Paragraph get_Paragraph();
    public DependencyObject get_Parent();
    public int CompareTo(TextPointer position);
    public int DeleteTextInRun(int count);
    public DependencyObject GetAdjacentElement(LogicalDirection direction);
    public Rect GetCharacterRect(LogicalDirection direction);
    public TextPointer GetInsertionPosition(LogicalDirection direction);
    public TextPointer GetLineStartPosition(int count);
    public TextPointer GetLineStartPosition(int count, Int32& actualCount);
    public TextPointer GetNextContextPosition(LogicalDirection direction);
    public TextPointer GetNextInsertionPosition(LogicalDirection direction);
    public int GetOffsetToPosition(TextPointer position);
    public TextPointerContext GetPointerContext(LogicalDirection direction);
    public TextPointer GetPositionAtOffset(int offset);
    public TextPointer GetPositionAtOffset(int offset, LogicalDirection direction);
    public string GetTextInRun(LogicalDirection direction);
    public int GetTextInRun(LogicalDirection direction, Char[] textBuffer, int startIndex, int count);
    public int GetTextRunLength(LogicalDirection direction);
    public TextPointer InsertLineBreak();
    public TextPointer InsertParagraphBreak();
    public void InsertTextInRun(string textData);
    public bool IsInSameDocument(TextPointer textPosition);
    public virtual string ToString();
}
public enum System.Windows.Documents.TextPointerContext : Enum {
    public int value__;
    public static TextPointerContext None;
    public static TextPointerContext Text;
    public static TextPointerContext EmbeddedElement;
    public static TextPointerContext ElementStart;
    public static TextPointerContext ElementEnd;
}
public class System.Windows.Documents.TextRange : object {
    public TextPointer End { get; }
    public bool IsEmpty { get; }
    public TextPointer Start { get; }
    public string Text { get; public set; }
    public TextRange(TextPointer position1, TextPointer position2);
    public TextPointer get_End();
    public bool get_IsEmpty();
    public TextPointer get_Start();
    public string get_Text();
    public void set_Text(string value);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    public void ApplyPropertyValue(DependencyProperty formattingProperty, object value);
    public bool CanLoad(string dataFormat);
    public bool CanSave(string dataFormat);
    public void ClearAllProperties();
    public bool Contains(TextPointer textPointer);
    public object GetPropertyValue(DependencyProperty formattingProperty);
    public void Load(Stream stream, string dataFormat);
    public void Save(Stream stream, string dataFormat);
    public void Save(Stream stream, string dataFormat, bool preserveTextElements);
    public void Select(TextPointer position1, TextPointer position2);
}
public class System.Windows.Documents.TextSelection : TextRange {
}
public class System.Windows.Documents.Typography : object {
    public static DependencyProperty AnnotationAlternatesProperty;
    public static DependencyProperty CapitalSpacingProperty;
    public static DependencyProperty CapitalsProperty;
    public static DependencyProperty CaseSensitiveFormsProperty;
    public static DependencyProperty ContextualAlternatesProperty;
    public static DependencyProperty ContextualLigaturesProperty;
    public static DependencyProperty ContextualSwashesProperty;
    public static DependencyProperty DiscretionaryLigaturesProperty;
    public static DependencyProperty EastAsianExpertFormsProperty;
    public static DependencyProperty EastAsianLanguageProperty;
    public static DependencyProperty EastAsianWidthsProperty;
    public static DependencyProperty FractionProperty;
    public static DependencyProperty HistoricalFormsProperty;
    public static DependencyProperty HistoricalLigaturesProperty;
    public static DependencyProperty KerningProperty;
    public static DependencyProperty MathematicalGreekProperty;
    public static DependencyProperty NumeralAlignmentProperty;
    public static DependencyProperty NumeralStyleProperty;
    public static DependencyProperty SlashedZeroProperty;
    public static DependencyProperty StandardLigaturesProperty;
    public static DependencyProperty StandardSwashesProperty;
    public static DependencyProperty StylisticAlternatesProperty;
    public static DependencyProperty StylisticSet10Property;
    public static DependencyProperty StylisticSet11Property;
    public static DependencyProperty StylisticSet12Property;
    public static DependencyProperty StylisticSet13Property;
    public static DependencyProperty StylisticSet14Property;
    public static DependencyProperty StylisticSet15Property;
    public static DependencyProperty StylisticSet16Property;
    public static DependencyProperty StylisticSet17Property;
    public static DependencyProperty StylisticSet18Property;
    public static DependencyProperty StylisticSet19Property;
    public static DependencyProperty StylisticSet1Property;
    public static DependencyProperty StylisticSet20Property;
    public static DependencyProperty StylisticSet2Property;
    public static DependencyProperty StylisticSet3Property;
    public static DependencyProperty StylisticSet4Property;
    public static DependencyProperty StylisticSet5Property;
    public static DependencyProperty StylisticSet6Property;
    public static DependencyProperty StylisticSet7Property;
    public static DependencyProperty StylisticSet8Property;
    public static DependencyProperty StylisticSet9Property;
    public static DependencyProperty VariantsProperty;
    public int AnnotationAlternates { get; public set; }
    public FontCapitals Capitals { get; public set; }
    public bool CapitalSpacing { get; public set; }
    public bool CaseSensitiveForms { get; public set; }
    public bool ContextualAlternates { get; public set; }
    public bool ContextualLigatures { get; public set; }
    public int ContextualSwashes { get; public set; }
    public bool DiscretionaryLigatures { get; public set; }
    public bool EastAsianExpertForms { get; public set; }
    public FontEastAsianLanguage EastAsianLanguage { get; public set; }
    public FontEastAsianWidths EastAsianWidths { get; public set; }
    public FontFraction Fraction { get; public set; }
    public bool HistoricalForms { get; public set; }
    public bool HistoricalLigatures { get; public set; }
    public bool Kerning { get; public set; }
    public bool MathematicalGreek { get; public set; }
    public FontNumeralAlignment NumeralAlignment { get; public set; }
    public FontNumeralStyle NumeralStyle { get; public set; }
    public bool SlashedZero { get; public set; }
    public bool StandardLigatures { get; public set; }
    public int StandardSwashes { get; public set; }
    public int StylisticAlternates { get; public set; }
    public bool StylisticSet1 { get; public set; }
    public bool StylisticSet10 { get; public set; }
    public bool StylisticSet11 { get; public set; }
    public bool StylisticSet12 { get; public set; }
    public bool StylisticSet13 { get; public set; }
    public bool StylisticSet14 { get; public set; }
    public bool StylisticSet15 { get; public set; }
    public bool StylisticSet16 { get; public set; }
    public bool StylisticSet17 { get; public set; }
    public bool StylisticSet18 { get; public set; }
    public bool StylisticSet19 { get; public set; }
    public bool StylisticSet2 { get; public set; }
    public bool StylisticSet20 { get; public set; }
    public bool StylisticSet3 { get; public set; }
    public bool StylisticSet4 { get; public set; }
    public bool StylisticSet5 { get; public set; }
    public bool StylisticSet6 { get; public set; }
    public bool StylisticSet7 { get; public set; }
    public bool StylisticSet8 { get; public set; }
    public bool StylisticSet9 { get; public set; }
    public FontVariants Variants { get; public set; }
    public int get_AnnotationAlternates();
    public void set_AnnotationAlternates(int value);
    public FontCapitals get_Capitals();
    public void set_Capitals(FontCapitals value);
    public bool get_CapitalSpacing();
    public void set_CapitalSpacing(bool value);
    public bool get_CaseSensitiveForms();
    public void set_CaseSensitiveForms(bool value);
    public bool get_ContextualAlternates();
    public void set_ContextualAlternates(bool value);
    public bool get_ContextualLigatures();
    public void set_ContextualLigatures(bool value);
    public int get_ContextualSwashes();
    public void set_ContextualSwashes(int value);
    public bool get_DiscretionaryLigatures();
    public void set_DiscretionaryLigatures(bool value);
    public bool get_EastAsianExpertForms();
    public void set_EastAsianExpertForms(bool value);
    public FontEastAsianLanguage get_EastAsianLanguage();
    public void set_EastAsianLanguage(FontEastAsianLanguage value);
    public FontEastAsianWidths get_EastAsianWidths();
    public void set_EastAsianWidths(FontEastAsianWidths value);
    public FontFraction get_Fraction();
    public void set_Fraction(FontFraction value);
    public bool get_HistoricalForms();
    public void set_HistoricalForms(bool value);
    public bool get_HistoricalLigatures();
    public void set_HistoricalLigatures(bool value);
    public bool get_Kerning();
    public void set_Kerning(bool value);
    public bool get_MathematicalGreek();
    public void set_MathematicalGreek(bool value);
    public FontNumeralAlignment get_NumeralAlignment();
    public void set_NumeralAlignment(FontNumeralAlignment value);
    public FontNumeralStyle get_NumeralStyle();
    public void set_NumeralStyle(FontNumeralStyle value);
    public bool get_SlashedZero();
    public void set_SlashedZero(bool value);
    public bool get_StandardLigatures();
    public void set_StandardLigatures(bool value);
    public int get_StandardSwashes();
    public void set_StandardSwashes(int value);
    public int get_StylisticAlternates();
    public void set_StylisticAlternates(int value);
    public bool get_StylisticSet1();
    public void set_StylisticSet1(bool value);
    public bool get_StylisticSet10();
    public void set_StylisticSet10(bool value);
    public bool get_StylisticSet11();
    public void set_StylisticSet11(bool value);
    public bool get_StylisticSet12();
    public void set_StylisticSet12(bool value);
    public bool get_StylisticSet13();
    public void set_StylisticSet13(bool value);
    public bool get_StylisticSet14();
    public void set_StylisticSet14(bool value);
    public bool get_StylisticSet15();
    public void set_StylisticSet15(bool value);
    public bool get_StylisticSet16();
    public void set_StylisticSet16(bool value);
    public bool get_StylisticSet17();
    public void set_StylisticSet17(bool value);
    public bool get_StylisticSet18();
    public void set_StylisticSet18(bool value);
    public bool get_StylisticSet19();
    public void set_StylisticSet19(bool value);
    public bool get_StylisticSet2();
    public void set_StylisticSet2(bool value);
    public bool get_StylisticSet20();
    public void set_StylisticSet20(bool value);
    public bool get_StylisticSet3();
    public void set_StylisticSet3(bool value);
    public bool get_StylisticSet4();
    public void set_StylisticSet4(bool value);
    public bool get_StylisticSet5();
    public void set_StylisticSet5(bool value);
    public bool get_StylisticSet6();
    public void set_StylisticSet6(bool value);
    public bool get_StylisticSet7();
    public void set_StylisticSet7(bool value);
    public bool get_StylisticSet8();
    public void set_StylisticSet8(bool value);
    public bool get_StylisticSet9();
    public void set_StylisticSet9(bool value);
    public FontVariants get_Variants();
    public void set_Variants(FontVariants value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetAnnotationAlternates(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontCapitals GetCapitals(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetCapitalSpacing(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetCaseSensitiveForms(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetContextualAlternates(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetContextualLigatures(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetContextualSwashes(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetDiscretionaryLigatures(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetEastAsianExpertForms(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontEastAsianLanguage GetEastAsianLanguage(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontEastAsianWidths GetEastAsianWidths(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontFraction GetFraction(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetHistoricalForms(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetHistoricalLigatures(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetKerning(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetMathematicalGreek(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontNumeralAlignment GetNumeralAlignment(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontNumeralStyle GetNumeralStyle(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetSlashedZero(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStandardLigatures(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetStandardSwashes(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetStylisticAlternates(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet1(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet10(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet11(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet12(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet13(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet14(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet15(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet16(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet17(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet18(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet19(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet2(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet20(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet3(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet4(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet5(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet6(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet7(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet8(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetStylisticSet9(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static FontVariants GetVariants(DependencyObject element);
    public static void SetAnnotationAlternates(DependencyObject element, int value);
    public static void SetCapitals(DependencyObject element, FontCapitals value);
    public static void SetCapitalSpacing(DependencyObject element, bool value);
    public static void SetCaseSensitiveForms(DependencyObject element, bool value);
    public static void SetContextualAlternates(DependencyObject element, bool value);
    public static void SetContextualLigatures(DependencyObject element, bool value);
    public static void SetContextualSwashes(DependencyObject element, int value);
    public static void SetDiscretionaryLigatures(DependencyObject element, bool value);
    public static void SetEastAsianExpertForms(DependencyObject element, bool value);
    public static void SetEastAsianLanguage(DependencyObject element, FontEastAsianLanguage value);
    public static void SetEastAsianWidths(DependencyObject element, FontEastAsianWidths value);
    public static void SetFraction(DependencyObject element, FontFraction value);
    public static void SetHistoricalForms(DependencyObject element, bool value);
    public static void SetHistoricalLigatures(DependencyObject element, bool value);
    public static void SetKerning(DependencyObject element, bool value);
    public static void SetMathematicalGreek(DependencyObject element, bool value);
    public static void SetNumeralAlignment(DependencyObject element, FontNumeralAlignment value);
    public static void SetNumeralStyle(DependencyObject element, FontNumeralStyle value);
    public static void SetSlashedZero(DependencyObject element, bool value);
    public static void SetStandardLigatures(DependencyObject element, bool value);
    public static void SetStandardSwashes(DependencyObject element, int value);
    public static void SetStylisticAlternates(DependencyObject element, int value);
    public static void SetStylisticSet1(DependencyObject element, bool value);
    public static void SetStylisticSet10(DependencyObject element, bool value);
    public static void SetStylisticSet11(DependencyObject element, bool value);
    public static void SetStylisticSet12(DependencyObject element, bool value);
    public static void SetStylisticSet13(DependencyObject element, bool value);
    public static void SetStylisticSet14(DependencyObject element, bool value);
    public static void SetStylisticSet15(DependencyObject element, bool value);
    public static void SetStylisticSet16(DependencyObject element, bool value);
    public static void SetStylisticSet17(DependencyObject element, bool value);
    public static void SetStylisticSet18(DependencyObject element, bool value);
    public static void SetStylisticSet19(DependencyObject element, bool value);
    public static void SetStylisticSet2(DependencyObject element, bool value);
    public static void SetStylisticSet20(DependencyObject element, bool value);
    public static void SetStylisticSet3(DependencyObject element, bool value);
    public static void SetStylisticSet4(DependencyObject element, bool value);
    public static void SetStylisticSet5(DependencyObject element, bool value);
    public static void SetStylisticSet6(DependencyObject element, bool value);
    public static void SetStylisticSet7(DependencyObject element, bool value);
    public static void SetStylisticSet8(DependencyObject element, bool value);
    public static void SetStylisticSet9(DependencyObject element, bool value);
    public static void SetVariants(DependencyObject element, FontVariants value);
}
public class System.Windows.Documents.Underline : Span {
    public Underline(Inline childInline);
    public Underline(Inline childInline, TextPointer insertionPosition);
    public Underline(TextPointer start, TextPointer end);
}
public class System.Windows.Documents.ZoomPercentageConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[TypeConverterAttribute("System.Windows.DynamicResourceExtensionConverter")]
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.DynamicResourceExtension : MarkupExtension {
    [ConstructorArgumentAttribute("resourceKey")]
public object ResourceKey { get; public set; }
    public DynamicResourceExtension(object resourceKey);
    public object get_ResourceKey();
    public void set_ResourceKey(object value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Windows.DynamicResourceExtensionConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.EventSetter : SetterBase {
    public RoutedEvent Event { get; public set; }
    [EditorBrowsableAttribute("1")]
public bool HandledEventsToo { get; public set; }
    [TypeConverterAttribute("System.Windows.Markup.EventSetterHandlerConverter")]
public Delegate Handler { get; public set; }
    public EventSetter(RoutedEvent routedEvent, Delegate handler);
    public RoutedEvent get_Event();
    public void set_Event(RoutedEvent value);
    public bool get_HandledEventsToo();
    public void set_HandledEventsToo(bool value);
    public Delegate get_Handler();
    public void set_Handler(Delegate value);
}
[ContentPropertyAttribute("Actions")]
public class System.Windows.EventTrigger : TriggerBase {
    [DesignerSerializationVisibilityAttribute("2")]
public TriggerActionCollection Actions { get; }
    public RoutedEvent RoutedEvent { get; public set; }
    [DefaultValueAttribute("")]
public string SourceName { get; public set; }
    public EventTrigger(RoutedEvent routedEvent);
    public TriggerActionCollection get_Actions();
    public RoutedEvent get_RoutedEvent();
    public void set_RoutedEvent(RoutedEvent value);
    public string get_SourceName();
    public void set_SourceName(string value);
    protected virtual void AddChild(object value);
    protected virtual void AddText(string text);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeActions();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public class System.Windows.ExceptionRoutedEventArgs : RoutedEventArgs {
    public Exception ErrorException { get; }
    public Exception get_ErrorException();
}
public class System.Windows.ExitEventArgs : EventArgs {
    public int ApplicationExitCode { get; public set; }
    public int get_ApplicationExitCode();
    public void set_ApplicationExitCode(int value);
}
public class System.Windows.ExitEventHandler : MulticastDelegate {
    public ExitEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ExitEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ExitEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.FigureHorizontalAnchor : Enum {
    public int value__;
    public static FigureHorizontalAnchor PageLeft;
    public static FigureHorizontalAnchor PageCenter;
    public static FigureHorizontalAnchor PageRight;
    public static FigureHorizontalAnchor ContentLeft;
    public static FigureHorizontalAnchor ContentCenter;
    public static FigureHorizontalAnchor ContentRight;
    public static FigureHorizontalAnchor ColumnLeft;
    public static FigureHorizontalAnchor ColumnCenter;
    public static FigureHorizontalAnchor ColumnRight;
}
[TypeConverterAttribute("System.Windows.FigureLengthConverter")]
public class System.Windows.FigureLength : ValueType {
    public FigureUnitType FigureUnitType { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsColumn { get; }
    public bool IsContent { get; }
    public bool IsPage { get; }
    public double Value { get; }
    public FigureLength(double pixels);
    public FigureLength(double value, FigureUnitType type);
    public FigureUnitType get_FigureUnitType();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsColumn();
    public bool get_IsContent();
    public bool get_IsPage();
    public double get_Value();
    public virtual bool Equals(object oCompare);
    public sealed virtual bool Equals(FigureLength figureLength);
    public virtual int GetHashCode();
    public static bool op_Equality(FigureLength fl1, FigureLength fl2);
    public static bool op_Inequality(FigureLength fl1, FigureLength fl2);
    public virtual string ToString();
}
public class System.Windows.FigureLengthConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public enum System.Windows.FigureUnitType : Enum {
    public int value__;
    public static FigureUnitType Auto;
    public static FigureUnitType Pixel;
    public static FigureUnitType Column;
    public static FigureUnitType Content;
    public static FigureUnitType Page;
}
public enum System.Windows.FigureVerticalAnchor : Enum {
    public int value__;
    public static FigureVerticalAnchor PageTop;
    public static FigureVerticalAnchor PageCenter;
    public static FigureVerticalAnchor PageBottom;
    public static FigureVerticalAnchor ContentTop;
    public static FigureVerticalAnchor ContentCenter;
    public static FigureVerticalAnchor ContentBottom;
    public static FigureVerticalAnchor ParagraphTop;
}
public class System.Windows.FontSizeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public static class System.Windows.FrameworkCompatibilityPreferences : object {
    public static bool AreInactiveSelectionHighlightBrushKeysSupported { get; public set; }
    public static bool KeepTextBoxDisplaySynchronizedWithTextProperty { get; public set; }
    public static bool ShouldThrowOnCopyOrCutFailure { get; public set; }
    public static bool get_AreInactiveSelectionHighlightBrushKeysSupported();
    public static void set_AreInactiveSelectionHighlightBrushKeysSupported(bool value);
    public static bool get_KeepTextBoxDisplaySynchronizedWithTextProperty();
    public static void set_KeepTextBoxDisplaySynchronizedWithTextProperty(bool value);
    public static bool get_ShouldThrowOnCopyOrCutFailure();
    public static void set_ShouldThrowOnCopyOrCutFailure(bool value);
}
[RuntimeNamePropertyAttribute("Name")]
[UsableDuringInitializationAttribute("True")]
[XmlLangPropertyAttribute("Language")]
[StyleTypedPropertyAttribute]
public class System.Windows.FrameworkContentElement : ContentElement {
    public static DependencyProperty BindingGroupProperty;
    public static RoutedEvent ContextMenuClosingEvent;
    public static RoutedEvent ContextMenuOpeningEvent;
    public static DependencyProperty ContextMenuProperty;
    public static DependencyProperty CursorProperty;
    public static DependencyProperty DataContextProperty;
    protected internal static DependencyProperty DefaultStyleKeyProperty;
    public static DependencyProperty FocusVisualStyleProperty;
    public static DependencyProperty ForceCursorProperty;
    public static DependencyProperty InputScopeProperty;
    public static DependencyProperty LanguageProperty;
    public static RoutedEvent LoadedEvent;
    public static DependencyProperty NameProperty;
    public static DependencyProperty OverridesDefaultStyleProperty;
    public static DependencyProperty StyleProperty;
    public static DependencyProperty TagProperty;
    public static RoutedEvent ToolTipClosingEvent;
    public static RoutedEvent ToolTipOpeningEvent;
    public static DependencyProperty ToolTipProperty;
    public static RoutedEvent UnloadedEvent;
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizabilityAttribute("17")]
public BindingGroup BindingGroup { get; public set; }
    public ContextMenu ContextMenu { get; public set; }
    public Cursor Cursor { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizabilityAttribute("17")]
public object DataContext { get; public set; }
    protected internal object DefaultStyleKey { get; protected internal set; }
    public Style FocusVisualStyle { get; public set; }
    public bool ForceCursor { get; public set; }
    public InputScope InputScope { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool IsInitialized { get; }
    public bool IsLoaded { get; }
    public XmlLanguage Language { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    [MergablePropertyAttribute("False")]
[LocalizabilityAttribute("17")]
public string Name { get; public set; }
    public bool OverridesDefaultStyle { get; public set; }
    public DependencyObject Parent { get; }
    [AmbientAttribute]
public ResourceDictionary Resources { get; public set; }
    public Style Style { get; public set; }
    public object Tag { get; public set; }
    public DependencyObject TemplatedParent { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
public object ToolTip { get; public set; }
    public BindingGroup get_BindingGroup();
    public void set_BindingGroup(BindingGroup value);
    public ContextMenu get_ContextMenu();
    public void set_ContextMenu(ContextMenu value);
    public Cursor get_Cursor();
    public void set_Cursor(Cursor value);
    public object get_DataContext();
    public void set_DataContext(object value);
    protected internal object get_DefaultStyleKey();
    protected internal void set_DefaultStyleKey(object value);
    public Style get_FocusVisualStyle();
    public void set_FocusVisualStyle(Style value);
    public bool get_ForceCursor();
    public void set_ForceCursor(bool value);
    public InputScope get_InputScope();
    public void set_InputScope(InputScope value);
    public bool get_IsInitialized();
    public bool get_IsLoaded();
    public XmlLanguage get_Language();
    public void set_Language(XmlLanguage value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_OverridesDefaultStyle();
    public void set_OverridesDefaultStyle(bool value);
    public DependencyObject get_Parent();
    public ResourceDictionary get_Resources();
    public void set_Resources(ResourceDictionary value);
    public Style get_Style();
    public void set_Style(Style value);
    public object get_Tag();
    public void set_Tag(object value);
    public DependencyObject get_TemplatedParent();
    public object get_ToolTip();
    public void set_ToolTip(object value);
    public void add_ContextMenuClosing(ContextMenuEventHandler value);
    public void remove_ContextMenuClosing(ContextMenuEventHandler value);
    public void add_ContextMenuOpening(ContextMenuEventHandler value);
    public void remove_ContextMenuOpening(ContextMenuEventHandler value);
    public void add_DataContextChanged(DependencyPropertyChangedEventHandler value);
    public void remove_DataContextChanged(DependencyPropertyChangedEventHandler value);
    public void add_Initialized(EventHandler value);
    public void remove_Initialized(EventHandler value);
    public void add_Loaded(RoutedEventHandler value);
    public void remove_Loaded(RoutedEventHandler value);
    public void add_SourceUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void remove_SourceUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void add_TargetUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void remove_TargetUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void add_ToolTipClosing(ToolTipEventHandler value);
    public void remove_ToolTipClosing(ToolTipEventHandler value);
    public void add_ToolTipOpening(ToolTipEventHandler value);
    public void remove_ToolTipOpening(ToolTipEventHandler value);
    public void add_Unloaded(RoutedEventHandler value);
    public void remove_Unloaded(RoutedEventHandler value);
    protected internal void AddLogicalChild(object child);
    public virtual void BeginInit();
    public void BeginStoryboard(Storyboard storyboard);
    public void BeginStoryboard(Storyboard storyboard, HandoffBehavior handoffBehavior);
    public void BeginStoryboard(Storyboard storyboard, HandoffBehavior handoffBehavior, bool isControllable);
    public void BringIntoView();
    public virtual void EndInit();
    public object FindName(string name);
    public object FindResource(object resourceKey);
    public BindingExpression GetBindingExpression(DependencyProperty dp);
    protected internal virtual DependencyObject GetUIParentCore();
    public sealed virtual bool MoveFocus(TraversalRequest request);
    protected virtual void OnContextMenuClosing(ContextMenuEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected internal virtual void OnStyleChanged(Style oldStyle, Style newStyle);
    protected virtual void OnToolTipClosing(ToolTipEventArgs e);
    protected virtual void OnToolTipOpening(ToolTipEventArgs e);
    public sealed virtual DependencyObject PredictFocus(FocusNavigationDirection direction);
    public void RegisterName(string name, object scopedElement);
    protected internal void RemoveLogicalChild(object child);
    public BindingExpression SetBinding(DependencyProperty dp, string path);
    public BindingExpressionBase SetBinding(DependencyProperty dp, BindingBase binding);
    public void SetResourceReference(DependencyProperty dp, object name);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeResources();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeStyle();
    private sealed virtual override bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName);
    public object TryFindResource(object resourceKey);
    public void UnregisterName(string name);
    public void UpdateDefaultStyle();
}
[RuntimeNamePropertyAttribute("Name")]
[UsableDuringInitializationAttribute("True")]
[XmlLangPropertyAttribute("Language")]
[StyleTypedPropertyAttribute]
public class System.Windows.FrameworkElement : UIElement {
    public static DependencyProperty ActualHeightProperty;
    public static DependencyProperty ActualWidthProperty;
    public static DependencyProperty BindingGroupProperty;
    public static RoutedEvent ContextMenuClosingEvent;
    public static RoutedEvent ContextMenuOpeningEvent;
    public static DependencyProperty ContextMenuProperty;
    public static DependencyProperty CursorProperty;
    public static DependencyProperty DataContextProperty;
    protected internal static DependencyProperty DefaultStyleKeyProperty;
    public static DependencyProperty FlowDirectionProperty;
    public static DependencyProperty FocusVisualStyleProperty;
    public static DependencyProperty ForceCursorProperty;
    public static DependencyProperty HeightProperty;
    public static DependencyProperty HorizontalAlignmentProperty;
    public static DependencyProperty InputScopeProperty;
    public static DependencyProperty LanguageProperty;
    public static DependencyProperty LayoutTransformProperty;
    public static RoutedEvent LoadedEvent;
    public static DependencyProperty MarginProperty;
    public static DependencyProperty MaxHeightProperty;
    public static DependencyProperty MaxWidthProperty;
    public static DependencyProperty MinHeightProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty NameProperty;
    public static DependencyProperty OverridesDefaultStyleProperty;
    public static RoutedEvent RequestBringIntoViewEvent;
    public static RoutedEvent SizeChangedEvent;
    public static DependencyProperty StyleProperty;
    public static DependencyProperty TagProperty;
    public static RoutedEvent ToolTipClosingEvent;
    public static RoutedEvent ToolTipOpeningEvent;
    public static DependencyProperty ToolTipProperty;
    public static RoutedEvent UnloadedEvent;
    public static DependencyProperty UseLayoutRoundingProperty;
    public static DependencyProperty VerticalAlignmentProperty;
    public static DependencyProperty WidthProperty;
    public double ActualHeight { get; }
    public double ActualWidth { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizabilityAttribute("17")]
public BindingGroup BindingGroup { get; public set; }
    public ContextMenu ContextMenu { get; public set; }
    public Cursor Cursor { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizabilityAttribute("17")]
public object DataContext { get; public set; }
    protected internal object DefaultStyleKey { get; protected internal set; }
    [LocalizabilityAttribute("0")]
public FlowDirection FlowDirection { get; public set; }
    public Style FocusVisualStyle { get; public set; }
    public bool ForceCursor { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double Height { get; public set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    protected internal InheritanceBehavior InheritanceBehavior { get; protected internal set; }
    public InputScope InputScope { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool IsInitialized { get; }
    public bool IsLoaded { get; }
    public XmlLanguage Language { get; public set; }
    public Transform LayoutTransform { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public Thickness Margin { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double MaxHeight { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double MaxWidth { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double MinHeight { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double MinWidth { get; public set; }
    [MergablePropertyAttribute("False")]
[LocalizabilityAttribute("17")]
[DesignerSerializationOptionsAttribute("1")]
public string Name { get; public set; }
    public bool OverridesDefaultStyle { get; public set; }
    public DependencyObject Parent { get; }
    [AmbientAttribute]
public ResourceDictionary Resources { get; public set; }
    public Style Style { get; public set; }
    [LocalizabilityAttribute("17")]
public object Tag { get; public set; }
    public DependencyObject TemplatedParent { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Appearance")]
[LocalizabilityAttribute("10")]
public object ToolTip { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public TriggerCollection Triggers { get; }
    public bool UseLayoutRounding { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    protected int VisualChildrenCount { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
[LocalizabilityAttribute("0")]
public double Width { get; public set; }
    public double get_ActualHeight();
    public double get_ActualWidth();
    public BindingGroup get_BindingGroup();
    public void set_BindingGroup(BindingGroup value);
    public ContextMenu get_ContextMenu();
    public void set_ContextMenu(ContextMenu value);
    public Cursor get_Cursor();
    public void set_Cursor(Cursor value);
    public object get_DataContext();
    public void set_DataContext(object value);
    protected internal object get_DefaultStyleKey();
    protected internal void set_DefaultStyleKey(object value);
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public Style get_FocusVisualStyle();
    public void set_FocusVisualStyle(Style value);
    public bool get_ForceCursor();
    public void set_ForceCursor(bool value);
    public double get_Height();
    public void set_Height(double value);
    public HorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(HorizontalAlignment value);
    protected internal InheritanceBehavior get_InheritanceBehavior();
    protected internal void set_InheritanceBehavior(InheritanceBehavior value);
    public InputScope get_InputScope();
    public void set_InputScope(InputScope value);
    public bool get_IsInitialized();
    public bool get_IsLoaded();
    public XmlLanguage get_Language();
    public void set_Language(XmlLanguage value);
    public Transform get_LayoutTransform();
    public void set_LayoutTransform(Transform value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public Thickness get_Margin();
    public void set_Margin(Thickness value);
    public double get_MaxHeight();
    public void set_MaxHeight(double value);
    public double get_MaxWidth();
    public void set_MaxWidth(double value);
    public double get_MinHeight();
    public void set_MinHeight(double value);
    public double get_MinWidth();
    public void set_MinWidth(double value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_OverridesDefaultStyle();
    public void set_OverridesDefaultStyle(bool value);
    public DependencyObject get_Parent();
    public ResourceDictionary get_Resources();
    public void set_Resources(ResourceDictionary value);
    public Style get_Style();
    public void set_Style(Style value);
    public object get_Tag();
    public void set_Tag(object value);
    public DependencyObject get_TemplatedParent();
    public object get_ToolTip();
    public void set_ToolTip(object value);
    public TriggerCollection get_Triggers();
    public bool get_UseLayoutRounding();
    public void set_UseLayoutRounding(bool value);
    public VerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(VerticalAlignment value);
    protected virtual int get_VisualChildrenCount();
    public double get_Width();
    public void set_Width(double value);
    public void add_ContextMenuClosing(ContextMenuEventHandler value);
    public void remove_ContextMenuClosing(ContextMenuEventHandler value);
    public void add_ContextMenuOpening(ContextMenuEventHandler value);
    public void remove_ContextMenuOpening(ContextMenuEventHandler value);
    public void add_DataContextChanged(DependencyPropertyChangedEventHandler value);
    public void remove_DataContextChanged(DependencyPropertyChangedEventHandler value);
    public void add_Initialized(EventHandler value);
    public void remove_Initialized(EventHandler value);
    public void add_Loaded(RoutedEventHandler value);
    public void remove_Loaded(RoutedEventHandler value);
    public void add_RequestBringIntoView(RequestBringIntoViewEventHandler value);
    public void remove_RequestBringIntoView(RequestBringIntoViewEventHandler value);
    public void add_SizeChanged(SizeChangedEventHandler value);
    public void remove_SizeChanged(SizeChangedEventHandler value);
    public void add_SourceUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void remove_SourceUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void add_TargetUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void remove_TargetUpdated(EventHandler`1<DataTransferEventArgs> value);
    public void add_ToolTipClosing(ToolTipEventHandler value);
    public void remove_ToolTipClosing(ToolTipEventHandler value);
    public void add_ToolTipOpening(ToolTipEventHandler value);
    public void remove_ToolTipOpening(ToolTipEventHandler value);
    public void add_Unloaded(RoutedEventHandler value);
    public void remove_Unloaded(RoutedEventHandler value);
    protected internal void AddLogicalChild(object child);
    public bool ApplyTemplate();
    protected sealed virtual void ArrangeCore(Rect finalRect);
    protected virtual Size ArrangeOverride(Size finalSize);
    public virtual void BeginInit();
    public void BeginStoryboard(Storyboard storyboard);
    public void BeginStoryboard(Storyboard storyboard, HandoffBehavior handoffBehavior);
    public void BeginStoryboard(Storyboard storyboard, HandoffBehavior handoffBehavior, bool isControllable);
    public void BringIntoView();
    public void BringIntoView(Rect targetRectangle);
    public virtual void EndInit();
    public object FindName(string name);
    public object FindResource(object resourceKey);
    public BindingExpression GetBindingExpression(DependencyProperty dp);
    public static FlowDirection GetFlowDirection(DependencyObject element);
    protected virtual Geometry GetLayoutClip(Size layoutSlotSize);
    protected internal DependencyObject GetTemplateChild(string childName);
    protected internal virtual DependencyObject GetUIParentCore();
    protected virtual Visual GetVisualChild(int index);
    protected sealed virtual Size MeasureCore(Size availableSize);
    protected virtual Size MeasureOverride(Size availableSize);
    public sealed virtual bool MoveFocus(TraversalRequest request);
    public virtual void OnApplyTemplate();
    protected virtual void OnContextMenuClosing(ContextMenuEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected internal virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected internal virtual void OnStyleChanged(Style oldStyle, Style newStyle);
    protected virtual void OnToolTipClosing(ToolTipEventArgs e);
    protected virtual void OnToolTipOpening(ToolTipEventArgs e);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected internal virtual void ParentLayoutInvalidated(UIElement child);
    public sealed virtual DependencyObject PredictFocus(FocusNavigationDirection direction);
    public void RegisterName(string name, object scopedElement);
    protected internal void RemoveLogicalChild(object child);
    public BindingExpression SetBinding(DependencyProperty dp, string path);
    public BindingExpressionBase SetBinding(DependencyProperty dp, BindingBase binding);
    public static void SetFlowDirection(DependencyObject element, FlowDirection value);
    public void SetResourceReference(DependencyProperty dp, object name);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeResources();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeStyle();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeTriggers();
    private sealed virtual override bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName);
    public object TryFindResource(object resourceKey);
    public void UnregisterName(string name);
    public void UpdateDefaultStyle();
}
[LocalizabilityAttribute("17")]
public class System.Windows.FrameworkElementFactory : object {
    public FrameworkElementFactory FirstChild { get; }
    public bool IsSealed { get; }
    public string Name { get; public set; }
    public FrameworkElementFactory NextSibling { get; }
    public FrameworkElementFactory Parent { get; }
    public string Text { get; public set; }
    public Type Type { get; public set; }
    public FrameworkElementFactory(string text);
    public FrameworkElementFactory(Type type);
    public FrameworkElementFactory(Type type, string name);
    public FrameworkElementFactory get_FirstChild();
    public bool get_IsSealed();
    public string get_Name();
    public void set_Name(string value);
    public FrameworkElementFactory get_NextSibling();
    public FrameworkElementFactory get_Parent();
    public string get_Text();
    public void set_Text(string value);
    public Type get_Type();
    public void set_Type(Type value);
    public void AddHandler(RoutedEvent routedEvent, Delegate handler);
    public void AddHandler(RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    public void AppendChild(FrameworkElementFactory child);
    public void RemoveHandler(RoutedEvent routedEvent, Delegate handler);
    public void SetBinding(DependencyProperty dp, BindingBase binding);
    public void SetResourceReference(DependencyProperty dp, object name);
    public void SetValue(DependencyProperty dp, object value);
}
public class System.Windows.FrameworkPropertyMetadata : UIPropertyMetadata {
    public bool AffectsArrange { get; public set; }
    public bool AffectsMeasure { get; public set; }
    public bool AffectsParentArrange { get; public set; }
    public bool AffectsParentMeasure { get; public set; }
    public bool AffectsRender { get; public set; }
    public bool BindsTwoWayByDefault { get; public set; }
    public UpdateSourceTrigger DefaultUpdateSourceTrigger { get; public set; }
    public bool Inherits { get; public set; }
    public bool IsDataBindingAllowed { get; }
    public bool IsNotDataBindable { get; public set; }
    public bool Journal { get; public set; }
    public bool OverridesInheritanceBehavior { get; public set; }
    public bool SubPropertiesDoNotAffectRender { get; public set; }
    public FrameworkPropertyMetadata(object defaultValue);
    public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags);
    public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback);
    public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback);
    public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);
    public FrameworkPropertyMetadata(object defaultValue, FrameworkPropertyMetadataOptions flags, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, UpdateSourceTrigger defaultUpdateSourceTrigger);
    public FrameworkPropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback);
    public FrameworkPropertyMetadata(object defaultValue, PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback);
    public FrameworkPropertyMetadata(PropertyChangedCallback propertyChangedCallback);
    public FrameworkPropertyMetadata(PropertyChangedCallback propertyChangedCallback, CoerceValueCallback coerceValueCallback);
    public bool get_AffectsArrange();
    public void set_AffectsArrange(bool value);
    public bool get_AffectsMeasure();
    public void set_AffectsMeasure(bool value);
    public bool get_AffectsParentArrange();
    public void set_AffectsParentArrange(bool value);
    public bool get_AffectsParentMeasure();
    public void set_AffectsParentMeasure(bool value);
    public bool get_AffectsRender();
    public void set_AffectsRender(bool value);
    public bool get_BindsTwoWayByDefault();
    public void set_BindsTwoWayByDefault(bool value);
    public UpdateSourceTrigger get_DefaultUpdateSourceTrigger();
    public void set_DefaultUpdateSourceTrigger(UpdateSourceTrigger value);
    public bool get_Inherits();
    public void set_Inherits(bool value);
    public bool get_IsDataBindingAllowed();
    public bool get_IsNotDataBindable();
    public void set_IsNotDataBindable(bool value);
    public bool get_Journal();
    public void set_Journal(bool value);
    public bool get_OverridesInheritanceBehavior();
    public void set_OverridesInheritanceBehavior(bool value);
    public bool get_SubPropertiesDoNotAffectRender();
    public void set_SubPropertiesDoNotAffectRender(bool value);
    protected virtual void Merge(PropertyMetadata baseMetadata, DependencyProperty dp);
    protected virtual void OnApply(DependencyProperty dp, Type targetType);
}
[FlagsAttribute]
public enum System.Windows.FrameworkPropertyMetadataOptions : Enum {
    public int value__;
    public static FrameworkPropertyMetadataOptions None;
    public static FrameworkPropertyMetadataOptions AffectsMeasure;
    public static FrameworkPropertyMetadataOptions AffectsArrange;
    public static FrameworkPropertyMetadataOptions AffectsParentMeasure;
    public static FrameworkPropertyMetadataOptions AffectsParentArrange;
    public static FrameworkPropertyMetadataOptions AffectsRender;
    public static FrameworkPropertyMetadataOptions Inherits;
    public static FrameworkPropertyMetadataOptions OverridesInheritanceBehavior;
    public static FrameworkPropertyMetadataOptions NotDataBindable;
    public static FrameworkPropertyMetadataOptions BindsTwoWayByDefault;
    public static FrameworkPropertyMetadataOptions Journal;
    public static FrameworkPropertyMetadataOptions SubPropertiesDoNotAffectRender;
}
[LocalizabilityAttribute("17")]
[ContentPropertyAttribute("VisualTree")]
public abstract class System.Windows.FrameworkTemplate : DispatcherObject {
    public bool HasContent { get; }
    public bool IsSealed { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[AmbientAttribute]
public ResourceDictionary Resources { get; public set; }
    [DefaultValueAttribute("")]
[AmbientAttribute]
public TemplateContent Template { get; public set; }
    public FrameworkElementFactory VisualTree { get; public set; }
    public bool get_HasContent();
    public bool get_IsSealed();
    public ResourceDictionary get_Resources();
    public void set_Resources(ResourceDictionary value);
    public TemplateContent get_Template();
    public void set_Template(TemplateContent value);
    public FrameworkElementFactory get_VisualTree();
    public void set_VisualTree(FrameworkElementFactory value);
    public object FindName(string name, FrameworkElement templatedParent);
    public DependencyObject LoadContent();
    public sealed virtual void RegisterName(string name, object scopedElement);
    public void Seal();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeResources(XamlDesignerSerializationManager manager);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeVisualTree();
    private sealed virtual override object System.Windows.Markup.INameScope.FindName(string name);
    private sealed virtual override bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName);
    public sealed virtual void UnregisterName(string name);
    protected virtual void ValidateTemplatedParent(FrameworkElement templatedParent);
}
[TypeConverterAttribute("System.Windows.GridLengthConverter")]
public class System.Windows.GridLength : ValueType {
    public static GridLength Auto { get; }
    public GridUnitType GridUnitType { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public double Value { get; }
    public GridLength(double pixels);
    public GridLength(double value, GridUnitType type);
    public static GridLength get_Auto();
    public GridUnitType get_GridUnitType();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public double get_Value();
    public virtual bool Equals(object oCompare);
    public sealed virtual bool Equals(GridLength gridLength);
    public virtual int GetHashCode();
    public static bool op_Equality(GridLength gl1, GridLength gl2);
    public static bool op_Inequality(GridLength gl1, GridLength gl2);
    public virtual string ToString();
}
public class System.Windows.GridLengthConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public enum System.Windows.GridUnitType : Enum {
    public int value__;
    public static GridUnitType Auto;
    public static GridUnitType Pixel;
    public static GridUnitType Star;
}
public class System.Windows.HierarchicalDataTemplate : DataTemplate {
    public int AlternationCount { get; public set; }
    public BindingGroup ItemBindingGroup { get; public set; }
    public Style ItemContainerStyle { get; public set; }
    public StyleSelector ItemContainerStyleSelector { get; public set; }
    public BindingBase ItemsSource { get; public set; }
    public string ItemStringFormat { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public HierarchicalDataTemplate(object dataType);
    public int get_AlternationCount();
    public void set_AlternationCount(int value);
    public BindingGroup get_ItemBindingGroup();
    public void set_ItemBindingGroup(BindingGroup value);
    public Style get_ItemContainerStyle();
    public void set_ItemContainerStyle(Style value);
    public StyleSelector get_ItemContainerStyleSelector();
    public void set_ItemContainerStyleSelector(StyleSelector value);
    public BindingBase get_ItemsSource();
    public void set_ItemsSource(BindingBase value);
    public string get_ItemStringFormat();
    public void set_ItemStringFormat(string value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
}
[LocalizabilityAttribute("0")]
public enum System.Windows.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Stretch;
}
public interface System.Windows.IFrameworkInputElement {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public enum System.Windows.InheritanceBehavior : Enum {
    public int value__;
    public static InheritanceBehavior Default;
    public static InheritanceBehavior SkipToAppNow;
    public static InheritanceBehavior SkipToAppNext;
    public static InheritanceBehavior SkipToThemeNow;
    public static InheritanceBehavior SkipToThemeNext;
    public static InheritanceBehavior SkipAllNow;
    public static InheritanceBehavior SkipAllNext;
}
public class System.Windows.Input.CommandConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object source);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Input.KeyboardNavigation : object {
    public static DependencyProperty AcceptsReturnProperty;
    [LocalizabilityAttribute("17")]
public static DependencyProperty ControlTabNavigationProperty;
    [LocalizabilityAttribute("17")]
public static DependencyProperty DirectionalNavigationProperty;
    public static DependencyProperty IsTabStopProperty;
    public static DependencyProperty TabIndexProperty;
    [LocalizabilityAttribute("17")]
public static DependencyProperty TabNavigationProperty;
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetAcceptsReturn(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static KeyboardNavigationMode GetControlTabNavigation(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static KeyboardNavigationMode GetDirectionalNavigation(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetIsTabStop(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static int GetTabIndex(DependencyObject element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static KeyboardNavigationMode GetTabNavigation(DependencyObject element);
    public static void SetAcceptsReturn(DependencyObject element, bool enabled);
    public static void SetControlTabNavigation(DependencyObject element, KeyboardNavigationMode mode);
    public static void SetDirectionalNavigation(DependencyObject element, KeyboardNavigationMode mode);
    public static void SetIsTabStop(DependencyObject element, bool isTabStop);
    public static void SetTabIndex(DependencyObject element, int index);
    public static void SetTabNavigation(DependencyObject element, KeyboardNavigationMode mode);
}
public enum System.Windows.Input.KeyboardNavigationMode : Enum {
    public int value__;
    public static KeyboardNavigationMode Continue;
    public static KeyboardNavigationMode Once;
    public static KeyboardNavigationMode Cycle;
    public static KeyboardNavigationMode None;
    public static KeyboardNavigationMode Contained;
    public static KeyboardNavigationMode Local;
}
public class System.Windows.Interop.ActiveXHost : HwndHost {
    protected bool IsDisposed { get; }
    protected bool get_IsDisposed();
    protected virtual HandleRef BuildWindowCore(HandleRef hwndParent);
    protected virtual void DestroyWindowCore(HandleRef hwnd);
    protected virtual void Dispose(bool disposing);
    protected virtual Size MeasureOverride(Size swConstraint);
    protected virtual void OnAccessKey(AccessKeyEventArgs args);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWindowPositionChanged(Rect bounds);
}
public static class System.Windows.Interop.BrowserInteropHelper : object {
    public static object ClientSite { get; }
    [DynamicAttribute]
public static object HostScript { get; }
    public static bool IsBrowserHosted { get; }
    public static Uri Source { get; }
    public static object get_ClientSite();
    public static object get_HostScript();
    public static bool get_IsBrowserHosted();
    public static Uri get_Source();
}
public class System.Windows.Interop.DynamicScriptObject : DynamicObject {
    public virtual string ToString();
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
}
public abstract class System.Windows.Interop.HwndHost : FrameworkElement {
    public static RoutedEvent DpiChangedEvent;
    public IntPtr Handle { get; }
    private IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite { get; private set; }
    public sealed virtual IntPtr get_Handle();
    private sealed virtual override IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.get_KeyboardInputSite();
    private sealed virtual override void System.Windows.Interop.IKeyboardInputSink.set_KeyboardInputSite(IKeyboardInputSite value);
    public void add_DpiChanged(DpiChangedEventHandler value);
    public void remove_DpiChanged(DpiChangedEventHandler value);
    public void add_MessageHook(HwndSourceHook value);
    public void remove_MessageHook(HwndSourceHook value);
    protected abstract virtual HandleRef BuildWindowCore(HandleRef hwndParent);
    protected abstract virtual void DestroyWindowCore(HandleRef hwnd);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    protected virtual bool HasFocusWithinCore();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDpiChanged(DpiScale oldDpi, DpiScale newDpi);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual bool OnMnemonicCore(MSG& msg, ModifierKeys modifiers);
    protected virtual void OnWindowPositionChanged(Rect rcBoundingBox);
    protected virtual IKeyboardInputSite RegisterKeyboardInputSinkCore(IKeyboardInputSink sink);
    private sealed virtual override bool System.Windows.Interop.IKeyboardInputSink.HasFocusWithin();
    private sealed virtual override bool System.Windows.Interop.IKeyboardInputSink.OnMnemonic(MSG& msg, ModifierKeys modifiers);
    private sealed virtual override IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(IKeyboardInputSink sink);
    private sealed virtual override bool System.Windows.Interop.IKeyboardInputSink.TabInto(TraversalRequest request);
    private sealed virtual override bool System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(MSG& msg, ModifierKeys modifiers);
    private sealed virtual override bool System.Windows.Interop.IKeyboardInputSink.TranslateChar(MSG& msg, ModifierKeys modifiers);
    protected virtual bool TabIntoCore(TraversalRequest request);
    protected virtual bool TranslateAcceleratorCore(MSG& msg, ModifierKeys modifiers);
    protected virtual bool TranslateCharCore(MSG& msg, ModifierKeys modifiers);
    public void UpdateWindowPos();
    protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
}
public interface System.Windows.Interop.IErrorPage {
    public Uri DeploymentPath { get; public set; }
    public bool ErrorFlag { get; public set; }
    public string ErrorText { get; public set; }
    public string ErrorTitle { get; public set; }
    public DispatcherOperationCallback GetWinFxCallback { get; public set; }
    public string LogFilePath { get; public set; }
    public DispatcherOperationCallback RefreshCallback { get; public set; }
    public Uri SupportUri { get; public set; }
    public abstract virtual Uri get_DeploymentPath();
    public abstract virtual void set_DeploymentPath(Uri value);
    public abstract virtual bool get_ErrorFlag();
    public abstract virtual void set_ErrorFlag(bool value);
    public abstract virtual string get_ErrorText();
    public abstract virtual void set_ErrorText(string value);
    public abstract virtual string get_ErrorTitle();
    public abstract virtual void set_ErrorTitle(string value);
    public abstract virtual DispatcherOperationCallback get_GetWinFxCallback();
    public abstract virtual void set_GetWinFxCallback(DispatcherOperationCallback value);
    public abstract virtual string get_LogFilePath();
    public abstract virtual void set_LogFilePath(string value);
    public abstract virtual DispatcherOperationCallback get_RefreshCallback();
    public abstract virtual void set_RefreshCallback(DispatcherOperationCallback value);
    public abstract virtual Uri get_SupportUri();
    public abstract virtual void set_SupportUri(Uri value);
}
public interface System.Windows.Interop.IProgressPage {
    public string ApplicationName { get; public set; }
    public Uri DeploymentPath { get; public set; }
    public string PublisherName { get; public set; }
    public DispatcherOperationCallback RefreshCallback { get; public set; }
    public DispatcherOperationCallback StopCallback { get; public set; }
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual Uri get_DeploymentPath();
    public abstract virtual void set_DeploymentPath(Uri value);
    public abstract virtual string get_PublisherName();
    public abstract virtual void set_PublisherName(string value);
    public abstract virtual DispatcherOperationCallback get_RefreshCallback();
    public abstract virtual void set_RefreshCallback(DispatcherOperationCallback value);
    public abstract virtual DispatcherOperationCallback get_StopCallback();
    public abstract virtual void set_StopCallback(DispatcherOperationCallback value);
    public abstract virtual void UpdateProgress(long bytesDownloaded, long bytesTotal);
}
public class System.Windows.Interop.WindowInteropHelper : object {
    public IntPtr Handle { get; }
    public IntPtr Owner { get; public set; }
    public WindowInteropHelper(Window window);
    public IntPtr get_Handle();
    public IntPtr get_Owner();
    public void set_Owner(IntPtr value);
    public IntPtr EnsureHandle();
}
public class System.Windows.LengthConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public enum System.Windows.LineStackingStrategy : Enum {
    public int value__;
    public static LineStackingStrategy BlockLineHeight;
    public static LineStackingStrategy MaxHeight;
}
public static class System.Windows.Localization : object {
    public static DependencyProperty AttributesProperty;
    public static DependencyProperty CommentsProperty;
    [AttachedPropertyBrowsableForTypeAttribute("System.Object")]
public static string GetAttributes(object element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Object")]
public static string GetComments(object element);
    public static void SetAttributes(object element, string attributes);
    public static void SetComments(object element, string comments);
}
public static class System.Windows.LogicalTreeHelper : object {
    public static void BringIntoView(DependencyObject current);
    public static DependencyObject FindLogicalNode(DependencyObject logicalTreeNode, string elementName);
    public static IEnumerable GetChildren(DependencyObject current);
    public static IEnumerable GetChildren(FrameworkContentElement current);
    public static IEnumerable GetChildren(FrameworkElement current);
    public static DependencyObject GetParent(DependencyObject current);
}
public class System.Windows.LostFocusEventManager : WeakEventManager {
    public static void AddHandler(DependencyObject source, EventHandler`1<RoutedEventArgs> handler);
    public static void AddListener(DependencyObject source, IWeakEventListener listener);
    protected virtual ListenerList NewListenerList();
    public static void RemoveHandler(DependencyObject source, EventHandler`1<RoutedEventArgs> handler);
    public static void RemoveListener(DependencyObject source, IWeakEventListener listener);
    protected virtual void StartListening(object source);
    protected virtual void StopListening(object source);
}
public class System.Windows.Markup.ComponentResourceKeyConverter : ExpressionConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Markup.DependencyPropertyConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object source);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Markup.EventSetterHandlerConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public interface System.Windows.Markup.IStyleConnector {
    public abstract virtual void Connect(int connectionId, object target);
}
public abstract class System.Windows.Markup.Localizer.BamlLocalizabilityResolver : object {
    public abstract virtual ElementLocalizability GetElementLocalizability(string assembly, string className);
    public abstract virtual LocalizabilityAttribute GetPropertyLocalizability(string assembly, string className, string property);
    public abstract virtual string ResolveAssemblyFromClass(string className);
    public abstract virtual string ResolveFormattingTagToClass(string formattingTag);
}
public class System.Windows.Markup.Localizer.BamlLocalizableResource : object {
    public LocalizationCategory Category { get; public set; }
    public string Comments { get; public set; }
    public string Content { get; public set; }
    public bool Modifiable { get; public set; }
    public bool Readable { get; public set; }
    public BamlLocalizableResource(string content, string comments, LocalizationCategory category, bool modifiable, bool readable);
    public LocalizationCategory get_Category();
    public void set_Category(LocalizationCategory value);
    public string get_Comments();
    public void set_Comments(string value);
    public string get_Content();
    public void set_Content(string value);
    public bool get_Modifiable();
    public void set_Modifiable(bool value);
    public bool get_Readable();
    public void set_Readable(bool value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class System.Windows.Markup.Localizer.BamlLocalizableResourceKey : object {
    public string AssemblyName { get; }
    public string ClassName { get; }
    public string PropertyName { get; }
    public string Uid { get; }
    public BamlLocalizableResourceKey(string uid, string className, string propertyName);
    public string get_AssemblyName();
    public string get_ClassName();
    public string get_PropertyName();
    public string get_Uid();
    public virtual bool Equals(object other);
    public bool Equals(BamlLocalizableResourceKey other);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Markup.Localizer.BamlLocalizationDictionary : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public BamlLocalizableResource Item { get; public set; }
    public ICollection Keys { get; }
    public BamlLocalizableResourceKey RootElementKey { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    public ICollection Values { get; }
    public int get_Count();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public BamlLocalizableResource get_Item(BamlLocalizableResourceKey key);
    public void set_Item(BamlLocalizableResourceKey key, BamlLocalizableResource value);
    public sealed virtual ICollection get_Keys();
    public BamlLocalizableResourceKey get_RootElementKey();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    public sealed virtual ICollection get_Values();
    public void Add(BamlLocalizableResourceKey key, BamlLocalizableResource value);
    public sealed virtual void Clear();
    public bool Contains(BamlLocalizableResourceKey key);
    public void CopyTo(DictionaryEntry[] array, int arrayIndex);
    public BamlLocalizationDictionaryEnumerator GetEnumerator();
    public void Remove(BamlLocalizableResourceKey key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Windows.Markup.Localizer.BamlLocalizationDictionaryEnumerator : object {
    public DictionaryEntry Current { get; }
    public DictionaryEntry Entry { get; }
    public BamlLocalizableResourceKey Key { get; }
    private object System.Collections.IDictionaryEnumerator.Key { get; }
    private object System.Collections.IDictionaryEnumerator.Value { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public BamlLocalizableResource Value { get; }
    public DictionaryEntry get_Current();
    public sealed virtual DictionaryEntry get_Entry();
    public BamlLocalizableResourceKey get_Key();
    private sealed virtual override object System.Collections.IDictionaryEnumerator.get_Key();
    private sealed virtual override object System.Collections.IDictionaryEnumerator.get_Value();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public BamlLocalizableResource get_Value();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Windows.Markup.Localizer.BamlLocalizer : object {
    public BamlLocalizer(Stream source);
    public BamlLocalizer(Stream source, BamlLocalizabilityResolver resolver);
    public BamlLocalizer(Stream source, BamlLocalizabilityResolver resolver, TextReader comments);
    public void add_ErrorNotify(BamlLocalizerErrorNotifyEventHandler value);
    public void remove_ErrorNotify(BamlLocalizerErrorNotifyEventHandler value);
    public BamlLocalizationDictionary ExtractResources();
    protected virtual void OnErrorNotify(BamlLocalizerErrorNotifyEventArgs e);
    public void UpdateBaml(Stream target, BamlLocalizationDictionary updates);
}
public enum System.Windows.Markup.Localizer.BamlLocalizerError : Enum {
    public int value__;
    public static BamlLocalizerError DuplicateUid;
    public static BamlLocalizerError DuplicateElement;
    public static BamlLocalizerError IncompleteElementPlaceholder;
    public static BamlLocalizerError InvalidCommentingXml;
    public static BamlLocalizerError InvalidLocalizationAttributes;
    public static BamlLocalizerError InvalidLocalizationComments;
    public static BamlLocalizerError InvalidUid;
    public static BamlLocalizerError MismatchedElements;
    public static BamlLocalizerError SubstitutionAsPlaintext;
    public static BamlLocalizerError UidMissingOnChildElement;
    public static BamlLocalizerError UnknownFormattingTag;
}
public class System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventArgs : EventArgs {
    public BamlLocalizerError Error { get; }
    public BamlLocalizableResourceKey Key { get; }
    public BamlLocalizerError get_Error();
    public BamlLocalizableResourceKey get_Key();
}
public class System.Windows.Markup.Localizer.BamlLocalizerErrorNotifyEventHandler : MulticastDelegate {
    public BamlLocalizerErrorNotifyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BamlLocalizerErrorNotifyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BamlLocalizerErrorNotifyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Markup.Localizer.ElementLocalizability : object {
    public LocalizabilityAttribute Attribute { get; public set; }
    public string FormattingTag { get; public set; }
    public ElementLocalizability(string formattingTag, LocalizabilityAttribute attribute);
    public LocalizabilityAttribute get_Attribute();
    public void set_Attribute(LocalizabilityAttribute value);
    public string get_FormattingTag();
    public void set_FormattingTag(string value);
}
public class System.Windows.Markup.NamespaceMapEntry : object {
    public string AssemblyName { get; public set; }
    public string ClrNamespace { get; public set; }
    public string XmlNamespace { get; public set; }
    public NamespaceMapEntry(string xmlNamespace, string assemblyName, string clrNamespace);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ClrNamespace();
    public void set_ClrNamespace(string value);
    public string get_XmlNamespace();
    public void set_XmlNamespace(string value);
}
public class System.Windows.Markup.ParserContext : object {
    public Uri BaseUri { get; public set; }
    public XamlTypeMapper XamlTypeMapper { get; public set; }
    public string XmlLang { get; public set; }
    public XmlnsDictionary XmlnsDictionary { get; }
    public string XmlSpace { get; public set; }
    public ParserContext(XmlParserContext xmlParserContext);
    public sealed virtual Uri get_BaseUri();
    public sealed virtual void set_BaseUri(Uri value);
    public XamlTypeMapper get_XamlTypeMapper();
    public void set_XamlTypeMapper(XamlTypeMapper value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public XmlnsDictionary get_XmlnsDictionary();
    public string get_XmlSpace();
    public void set_XmlSpace(string value);
    public static XmlParserContext op_Implicit(ParserContext parserContext);
    public static XmlParserContext ToXmlParserContext(ParserContext parserContext);
}
public class System.Windows.Markup.Primitives.MarkupWriter : object {
    public sealed virtual void Dispose();
    public static MarkupObject GetMarkupObjectFor(object instance);
    public static MarkupObject GetMarkupObjectFor(object instance, XamlDesignerSerializationManager manager);
}
public class System.Windows.Markup.ResourceReferenceExpressionConverter : ExpressionConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Markup.RoutedEventConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public class System.Windows.Markup.SetterTriggerConditionValueConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object source);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Markup.TemplateKeyConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object source);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Markup.XamlDesignerSerializationManager : ServiceProviders {
    public XamlWriterMode XamlWriterMode { get; public set; }
    public XamlDesignerSerializationManager(XmlWriter xmlWriter);
    public XamlWriterMode get_XamlWriterMode();
    public void set_XamlWriterMode(XamlWriterMode value);
}
public abstract class System.Windows.Markup.XamlInstanceCreator : object {
    public abstract virtual object CreateObject();
}
public class System.Windows.Markup.XamlParseException : SystemException {
    public Uri BaseUri { get; }
    public object KeyContext { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string NameContext { get; }
    public string UidContext { get; }
    protected XamlParseException(SerializationInfo info, StreamingContext context);
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
    public XamlParseException(string message, int lineNumber, int linePosition);
    public XamlParseException(string message, int lineNumber, int linePosition, Exception innerException);
    public Uri get_BaseUri();
    public object get_KeyContext();
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_NameContext();
    public string get_UidContext();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Markup.XamlReader : object {
    public void add_LoadCompleted(AsyncCompletedEventHandler value);
    public void remove_LoadCompleted(AsyncCompletedEventHandler value);
    public void CancelAsync();
    public static XamlSchemaContext GetWpfSchemaContext();
    public static object Load(Stream stream);
    public static object Load(Stream stream, bool useRestrictiveXamlReader);
    public static object Load(Stream stream, ParserContext parserContext);
    public static object Load(Stream stream, ParserContext parserContext, bool useRestrictiveXamlReader);
    public static object Load(XamlReader reader);
    public static object Load(XmlReader reader);
    public static object Load(XmlReader reader, bool useRestrictiveXamlReader);
    public object LoadAsync(Stream stream);
    public object LoadAsync(Stream stream, bool useRestrictiveXamlReader);
    public object LoadAsync(Stream stream, ParserContext parserContext);
    public object LoadAsync(Stream stream, ParserContext parserContext, bool useRestrictiveXamlReader);
    public object LoadAsync(XmlReader reader);
    public object LoadAsync(XmlReader reader, bool useRestrictiveXamlReader);
    public static object Parse(string xamlText);
    public static object Parse(string xamlText, bool useRestrictiveXamlReader);
    public static object Parse(string xamlText, ParserContext parserContext);
    public static object Parse(string xamlText, ParserContext parserContext, bool useRestrictiveXamlReader);
}
public class System.Windows.Markup.XamlTypeMapper : object {
    public static XamlTypeMapper DefaultMapper { get; }
    public XamlTypeMapper(String[] assemblyNames);
    public XamlTypeMapper(String[] assemblyNames, NamespaceMapEntry[] namespaceMaps);
    public static XamlTypeMapper get_DefaultMapper();
    public void AddMappingProcessingInstruction(string xmlNamespace, string clrNamespace, string assemblyName);
    protected virtual bool AllowInternalType(Type type);
    public Type GetType(string xmlNamespace, string localName);
    public void SetAssemblyPath(string assemblyName, string assemblyPath);
}
public static class System.Windows.Markup.XamlWriter : object {
    public static string Save(object obj);
    public static void Save(object obj, Stream stream);
    public static void Save(object obj, TextWriter writer);
    public static void Save(object obj, XamlDesignerSerializationManager manager);
    public static void Save(object obj, XmlWriter xmlWriter);
}
public enum System.Windows.Markup.XamlWriterMode : Enum {
    public int value__;
    public static XamlWriterMode Expression;
    public static XamlWriterMode Value;
}
public enum System.Windows.Markup.XamlWriterState : Enum {
    public int value__;
    public static XamlWriterState Starting;
    public static XamlWriterState Finished;
}
public class System.Windows.Markup.XmlAttributeProperties : object {
    [BrowsableAttribute("False")]
public static DependencyProperty XmlNamespaceMapsProperty;
    [BrowsableAttribute("False")]
public static DependencyProperty XmlnsDefinitionProperty;
    [BrowsableAttribute("False")]
public static DependencyProperty XmlnsDictionaryProperty;
    [BrowsableAttribute("False")]
[LocalizabilityAttribute("17")]
public static DependencyProperty XmlSpaceProperty;
    [DesignerSerializationVisibilityAttribute("0")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static string GetXmlNamespaceMaps(DependencyObject dependencyObject);
    [DesignerSerializationVisibilityAttribute("0")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
[DesignerSerializationOptionsAttribute("1")]
public static string GetXmlnsDefinition(DependencyObject dependencyObject);
    [DesignerSerializationVisibilityAttribute("0")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static XmlnsDictionary GetXmlnsDictionary(DependencyObject dependencyObject);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
[DesignerSerializationOptionsAttribute("1")]
public static string GetXmlSpace(DependencyObject dependencyObject);
    public static void SetXmlNamespaceMaps(DependencyObject dependencyObject, string value);
    public static void SetXmlnsDefinition(DependencyObject dependencyObject, string value);
    public static void SetXmlnsDictionary(DependencyObject dependencyObject, XmlnsDictionary value);
    public static void SetXmlSpace(DependencyObject dependencyObject, string value);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Markup.XmlnsDictionary : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object Item { get; public set; }
    public string Item { get; public set; }
    public ICollection Keys { get; }
    public bool Sealed { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    public XmlnsDictionary(XmlnsDictionary xmlnsDictionary);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_Item(object prefix);
    public sealed virtual void set_Item(object prefix, object value);
    public string get_Item(string prefix);
    public void set_Item(string prefix, string value);
    public sealed virtual ICollection get_Keys();
    public bool get_Sealed();
    public sealed virtual object get_SyncRoot();
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object prefix, object xmlNamespace);
    public void Add(string prefix, string xmlNamespace);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DictionaryEntry[] array, int index);
    public string DefaultNamespace();
    protected IDictionaryEnumerator GetDictionaryEnumerator();
    protected IEnumerator GetEnumerator();
    public sealed virtual string GetNamespace(string prefix);
    public sealed virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
    public string LookupNamespace(string prefix);
    public string LookupPrefix(string xmlNamespace);
    public void PopScope();
    public void PushScope();
    public sealed virtual void Remove(object prefix);
    public void Remove(string prefix);
    public void Seal();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Windows.Media.AdornerHitTestResult : PointHitTestResult {
    public Adorner Adorner { get; }
    public Adorner get_Adorner();
}
[ContentPropertyAttribute("Storyboard")]
[RuntimeNamePropertyAttribute("Name")]
public class System.Windows.Media.Animation.BeginStoryboard : TriggerAction {
    public static DependencyProperty StoryboardProperty;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public HandoffBehavior HandoffBehavior { get; public set; }
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
public Storyboard Storyboard { get; public set; }
    public HandoffBehavior get_HandoffBehavior();
    public void set_HandoffBehavior(HandoffBehavior value);
    public string get_Name();
    public void set_Name(string value);
    public Storyboard get_Storyboard();
    public void set_Storyboard(Storyboard value);
}
public abstract class System.Windows.Media.Animation.ControllableStoryboardAction : TriggerAction {
    [DefaultValueAttribute("")]
public string BeginStoryboardName { get; public set; }
    public string get_BeginStoryboardName();
    public void set_BeginStoryboardName(string value);
}
public class System.Windows.Media.Animation.DiscreteThicknessKeyFrame : ThicknessKeyFrame {
    public DiscreteThicknessKeyFrame(Thickness value);
    public DiscreteThicknessKeyFrame(Thickness value, KeyTime keyTime);
    protected virtual Freezable CreateInstanceCore();
    protected virtual Thickness InterpolateValueCore(Thickness baseValue, double keyFrameProgress);
}
public class System.Windows.Media.Animation.EasingThicknessKeyFrame : ThicknessKeyFrame {
    public static DependencyProperty EasingFunctionProperty;
    public IEasingFunction EasingFunction { get; public set; }
    public EasingThicknessKeyFrame(Thickness value);
    public EasingThicknessKeyFrame(Thickness value, KeyTime keyTime);
    public EasingThicknessKeyFrame(Thickness value, KeyTime keyTime, IEasingFunction easingFunction);
    public IEasingFunction get_EasingFunction();
    public void set_EasingFunction(IEasingFunction value);
    protected virtual Freezable CreateInstanceCore();
    protected virtual Thickness InterpolateValueCore(Thickness baseValue, double keyFrameProgress);
}
public class System.Windows.Media.Animation.LinearThicknessKeyFrame : ThicknessKeyFrame {
    public LinearThicknessKeyFrame(Thickness value);
    public LinearThicknessKeyFrame(Thickness value, KeyTime keyTime);
    protected virtual Freezable CreateInstanceCore();
    protected virtual Thickness InterpolateValueCore(Thickness baseValue, double keyFrameProgress);
}
public class System.Windows.Media.Animation.PauseStoryboard : ControllableStoryboardAction {
}
public class System.Windows.Media.Animation.RemoveStoryboard : ControllableStoryboardAction {
}
public class System.Windows.Media.Animation.ResumeStoryboard : ControllableStoryboardAction {
}
public class System.Windows.Media.Animation.SeekStoryboard : ControllableStoryboardAction {
    public TimeSpan Offset { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TimeSeekOrigin Origin { get; public set; }
    public TimeSpan get_Offset();
    public void set_Offset(TimeSpan value);
    public TimeSeekOrigin get_Origin();
    public void set_Origin(TimeSeekOrigin value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeOffset();
}
public class System.Windows.Media.Animation.SetStoryboardSpeedRatio : ControllableStoryboardAction {
    [DefaultValueAttribute("1")]
public double SpeedRatio { get; public set; }
    public double get_SpeedRatio();
    public void set_SpeedRatio(double value);
}
public class System.Windows.Media.Animation.SkipStoryboardToFill : ControllableStoryboardAction {
}
public class System.Windows.Media.Animation.SplineThicknessKeyFrame : ThicknessKeyFrame {
    public static DependencyProperty KeySplineProperty;
    public KeySpline KeySpline { get; public set; }
    public SplineThicknessKeyFrame(Thickness value);
    public SplineThicknessKeyFrame(Thickness value, KeyTime keyTime);
    public SplineThicknessKeyFrame(Thickness value, KeyTime keyTime, KeySpline keySpline);
    public KeySpline get_KeySpline();
    public void set_KeySpline(KeySpline value);
    protected virtual Freezable CreateInstanceCore();
    protected virtual Thickness InterpolateValueCore(Thickness baseValue, double keyFrameProgress);
}
public class System.Windows.Media.Animation.StopStoryboard : ControllableStoryboardAction {
}
public class System.Windows.Media.Animation.Storyboard : ParallelTimeline {
    public static DependencyProperty TargetNameProperty;
    public static DependencyProperty TargetProperty;
    public static DependencyProperty TargetPropertyProperty;
    public void Begin();
    public void Begin(FrameworkContentElement containingObject);
    public void Begin(FrameworkContentElement containingObject, bool isControllable);
    public void Begin(FrameworkContentElement containingObject, HandoffBehavior handoffBehavior);
    public void Begin(FrameworkContentElement containingObject, HandoffBehavior handoffBehavior, bool isControllable);
    public void Begin(FrameworkElement containingObject);
    public void Begin(FrameworkElement containingObject, bool isControllable);
    public void Begin(FrameworkElement containingObject, FrameworkTemplate frameworkTemplate);
    public void Begin(FrameworkElement containingObject, FrameworkTemplate frameworkTemplate, bool isControllable);
    public void Begin(FrameworkElement containingObject, FrameworkTemplate frameworkTemplate, HandoffBehavior handoffBehavior);
    public void Begin(FrameworkElement containingObject, FrameworkTemplate frameworkTemplate, HandoffBehavior handoffBehavior, bool isControllable);
    public void Begin(FrameworkElement containingObject, HandoffBehavior handoffBehavior);
    public void Begin(FrameworkElement containingObject, HandoffBehavior handoffBehavior, bool isControllable);
    public Storyboard Clone();
    protected virtual Freezable CreateInstanceCore();
    public double GetCurrentGlobalSpeed();
    public Nullable`1<double> GetCurrentGlobalSpeed(FrameworkContentElement containingObject);
    public Nullable`1<double> GetCurrentGlobalSpeed(FrameworkElement containingObject);
    public int GetCurrentIteration();
    public Nullable`1<int> GetCurrentIteration(FrameworkContentElement containingObject);
    public Nullable`1<int> GetCurrentIteration(FrameworkElement containingObject);
    public double GetCurrentProgress();
    public Nullable`1<double> GetCurrentProgress(FrameworkContentElement containingObject);
    public Nullable`1<double> GetCurrentProgress(FrameworkElement containingObject);
    public ClockState GetCurrentState();
    public ClockState GetCurrentState(FrameworkContentElement containingObject);
    public ClockState GetCurrentState(FrameworkElement containingObject);
    public TimeSpan GetCurrentTime();
    public Nullable`1<TimeSpan> GetCurrentTime(FrameworkContentElement containingObject);
    public Nullable`1<TimeSpan> GetCurrentTime(FrameworkElement containingObject);
    public bool GetIsPaused();
    public bool GetIsPaused(FrameworkContentElement containingObject);
    public bool GetIsPaused(FrameworkElement containingObject);
    [DesignerSerializationVisibilityAttribute("0")]
public static DependencyObject GetTarget(DependencyObject element);
    public static string GetTargetName(DependencyObject element);
    public static PropertyPath GetTargetProperty(DependencyObject element);
    public void Pause();
    public void Pause(FrameworkContentElement containingObject);
    public void Pause(FrameworkElement containingObject);
    public void Remove();
    public void Remove(FrameworkContentElement containingObject);
    public void Remove(FrameworkElement containingObject);
    public void Resume();
    public void Resume(FrameworkContentElement containingObject);
    public void Resume(FrameworkElement containingObject);
    public void Seek(TimeSpan offset);
    public void Seek(TimeSpan offset, TimeSeekOrigin origin);
    public void Seek(FrameworkContentElement containingObject, TimeSpan offset, TimeSeekOrigin origin);
    public void Seek(FrameworkElement containingObject, TimeSpan offset, TimeSeekOrigin origin);
    public void SeekAlignedToLastTick(TimeSpan offset);
    public void SeekAlignedToLastTick(TimeSpan offset, TimeSeekOrigin origin);
    public void SeekAlignedToLastTick(FrameworkContentElement containingObject, TimeSpan offset, TimeSeekOrigin origin);
    public void SeekAlignedToLastTick(FrameworkElement containingObject, TimeSpan offset, TimeSeekOrigin origin);
    public void SetSpeedRatio(double speedRatio);
    public void SetSpeedRatio(FrameworkContentElement containingObject, double speedRatio);
    public void SetSpeedRatio(FrameworkElement containingObject, double speedRatio);
    public static void SetTarget(DependencyObject element, DependencyObject value);
    public static void SetTargetName(DependencyObject element, string name);
    public static void SetTargetProperty(DependencyObject element, PropertyPath path);
    public void SkipToFill();
    public void SkipToFill(FrameworkContentElement containingObject);
    public void SkipToFill(FrameworkElement containingObject);
    public void Stop();
    public void Stop(FrameworkContentElement containingObject);
    public void Stop(FrameworkElement containingObject);
}
public class System.Windows.Media.Animation.ThicknessAnimation : ThicknessAnimationBase {
    public static DependencyProperty ByProperty;
    public static DependencyProperty EasingFunctionProperty;
    public static DependencyProperty FromProperty;
    public static DependencyProperty ToProperty;
    public Nullable`1<Thickness> By { get; public set; }
    public IEasingFunction EasingFunction { get; public set; }
    public Nullable`1<Thickness> From { get; public set; }
    public bool IsAdditive { get; public set; }
    public bool IsCumulative { get; public set; }
    public Nullable`1<Thickness> To { get; public set; }
    public ThicknessAnimation(Thickness toValue, Duration duration);
    public ThicknessAnimation(Thickness toValue, Duration duration, FillBehavior fillBehavior);
    public ThicknessAnimation(Thickness fromValue, Thickness toValue, Duration duration);
    public ThicknessAnimation(Thickness fromValue, Thickness toValue, Duration duration, FillBehavior fillBehavior);
    public Nullable`1<Thickness> get_By();
    public void set_By(Nullable`1<Thickness> value);
    public IEasingFunction get_EasingFunction();
    public void set_EasingFunction(IEasingFunction value);
    public Nullable`1<Thickness> get_From();
    public void set_From(Nullable`1<Thickness> value);
    public bool get_IsAdditive();
    public void set_IsAdditive(bool value);
    public bool get_IsCumulative();
    public void set_IsCumulative(bool value);
    public Nullable`1<Thickness> get_To();
    public void set_To(Nullable`1<Thickness> value);
    public ThicknessAnimation Clone();
    protected virtual Freezable CreateInstanceCore();
    protected virtual Thickness GetCurrentValueCore(Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock);
}
public abstract class System.Windows.Media.Animation.ThicknessAnimationBase : AnimationTimeline {
    public Type TargetPropertyType { get; }
    public sealed virtual Type get_TargetPropertyType();
    public ThicknessAnimationBase Clone();
    public sealed virtual object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock);
    public Thickness GetCurrentValue(Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock);
    protected abstract virtual Thickness GetCurrentValueCore(Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock);
}
[ContentPropertyAttribute("KeyFrames")]
public class System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames : ThicknessAnimationBase {
    public bool IsAdditive { get; public set; }
    public bool IsCumulative { get; public set; }
    public ThicknessKeyFrameCollection KeyFrames { get; public set; }
    private IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get; private set; }
    public bool get_IsAdditive();
    public void set_IsAdditive(bool value);
    public bool get_IsCumulative();
    public void set_IsCumulative(bool value);
    public ThicknessKeyFrameCollection get_KeyFrames();
    public void set_KeyFrames(ThicknessKeyFrameCollection value);
    private sealed virtual override IList System.Windows.Media.Animation.IKeyFrameAnimation.get_KeyFrames();
    private sealed virtual override void System.Windows.Media.Animation.IKeyFrameAnimation.set_KeyFrames(IList value);
    [EditorBrowsableAttribute("2")]
protected virtual void AddChild(object child);
    [EditorBrowsableAttribute("2")]
protected virtual void AddText(string childText);
    public ThicknessAnimationUsingKeyFrames Clone();
    protected virtual void CloneCore(Freezable sourceFreezable);
    public ThicknessAnimationUsingKeyFrames CloneCurrentValue();
    protected virtual void CloneCurrentValueCore(Freezable sourceFreezable);
    protected virtual Freezable CreateInstanceCore();
    protected virtual bool FreezeCore(bool isChecking);
    protected virtual void GetAsFrozenCore(Freezable source);
    protected virtual void GetCurrentValueAsFrozenCore(Freezable source);
    protected sealed virtual Thickness GetCurrentValueCore(Thickness defaultOriginValue, Thickness defaultDestinationValue, AnimationClock animationClock);
    protected sealed virtual Duration GetNaturalDurationCore(Clock clock);
    protected virtual void OnChanged();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeKeyFrames();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object child);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string childText);
}
public abstract class System.Windows.Media.Animation.ThicknessKeyFrame : Freezable {
    public static DependencyProperty KeyTimeProperty;
    public static DependencyProperty ValueProperty;
    public KeyTime KeyTime { get; public set; }
    private object System.Windows.Media.Animation.IKeyFrame.Value { get; private set; }
    public Thickness Value { get; public set; }
    protected ThicknessKeyFrame(Thickness value);
    protected ThicknessKeyFrame(Thickness value, KeyTime keyTime);
    public sealed virtual KeyTime get_KeyTime();
    public sealed virtual void set_KeyTime(KeyTime value);
    private sealed virtual override object System.Windows.Media.Animation.IKeyFrame.get_Value();
    private sealed virtual override void System.Windows.Media.Animation.IKeyFrame.set_Value(object value);
    public Thickness get_Value();
    public void set_Value(Thickness value);
    public Thickness InterpolateValue(Thickness baseValue, double keyFrameProgress);
    protected abstract virtual Thickness InterpolateValueCore(Thickness baseValue, double keyFrameProgress);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Media.Animation.ThicknessKeyFrameCollection : Freezable {
    public int Count { get; }
    public static ThicknessKeyFrameCollection Empty { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public ThicknessKeyFrame Item { get; public set; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public static ThicknessKeyFrameCollection get_Empty();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public ThicknessKeyFrame get_Item(int index);
    public void set_Item(int index, ThicknessKeyFrame value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(ThicknessKeyFrame keyFrame);
    public sealed virtual void Clear();
    public ThicknessKeyFrameCollection Clone();
    protected virtual void CloneCore(Freezable sourceFreezable);
    protected virtual void CloneCurrentValueCore(Freezable sourceFreezable);
    public bool Contains(ThicknessKeyFrame keyFrame);
    public void CopyTo(ThicknessKeyFrame[] array, int index);
    protected virtual Freezable CreateInstanceCore();
    protected virtual bool FreezeCore(bool isChecking);
    protected virtual void GetAsFrozenCore(Freezable sourceFreezable);
    protected virtual void GetCurrentValueAsFrozenCore(Freezable sourceFreezable);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(ThicknessKeyFrame keyFrame);
    public void Insert(int index, ThicknessKeyFrame keyFrame);
    public void Remove(ThicknessKeyFrame keyFrame);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object keyFrame);
    private sealed virtual override bool System.Collections.IList.Contains(object keyFrame);
    private sealed virtual override int System.Collections.IList.IndexOf(object keyFrame);
    private sealed virtual override void System.Collections.IList.Insert(int index, object keyFrame);
    private sealed virtual override void System.Collections.IList.Remove(object keyFrame);
}
public static class System.Windows.Media.TextOptions : object {
    public static DependencyProperty TextFormattingModeProperty;
    public static DependencyProperty TextHintingModeProperty;
    public static DependencyProperty TextRenderingModeProperty;
    public static TextFormattingMode GetTextFormattingMode(DependencyObject element);
    public static TextHintingMode GetTextHintingMode(DependencyObject element);
    public static TextRenderingMode GetTextRenderingMode(DependencyObject element);
    public static void SetTextFormattingMode(DependencyObject element, TextFormattingMode value);
    public static void SetTextHintingMode(DependencyObject element, TextHintingMode value);
    public static void SetTextRenderingMode(DependencyObject element, TextRenderingMode value);
}
public class System.Windows.MediaScriptCommandRoutedEventArgs : RoutedEventArgs {
    public string ParameterType { get; }
    public string ParameterValue { get; }
    public string get_ParameterType();
    public string get_ParameterValue();
}
public class System.Windows.MessageBox : object {
    public static MessageBoxResult Show(string messageBoxText);
    public static MessageBoxResult Show(string messageBoxText, string caption);
    public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button);
    public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon);
    public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult);
    public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult, MessageBoxOptions options);
    public static MessageBoxResult Show(Window owner, string messageBoxText);
    public static MessageBoxResult Show(Window owner, string messageBoxText, string caption);
    public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button);
    public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon);
    public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult);
    public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult, MessageBoxOptions options);
}
public enum System.Windows.MessageBoxButton : Enum {
    public int value__;
    public static MessageBoxButton OK;
    public static MessageBoxButton OKCancel;
    public static MessageBoxButton YesNoCancel;
    public static MessageBoxButton YesNo;
}
public enum System.Windows.MessageBoxImage : Enum {
    public int value__;
    public static MessageBoxImage None;
    public static MessageBoxImage Error;
    public static MessageBoxImage Hand;
    public static MessageBoxImage Stop;
    public static MessageBoxImage Question;
    public static MessageBoxImage Exclamation;
    public static MessageBoxImage Warning;
    public static MessageBoxImage Asterisk;
    public static MessageBoxImage Information;
}
[FlagsAttribute]
public enum System.Windows.MessageBoxOptions : Enum {
    public int value__;
    public static MessageBoxOptions None;
    public static MessageBoxOptions DefaultDesktopOnly;
    public static MessageBoxOptions RightAlign;
    public static MessageBoxOptions RtlReading;
    public static MessageBoxOptions ServiceNotification;
}
public enum System.Windows.MessageBoxResult : Enum {
    public int value__;
    public static MessageBoxResult None;
    public static MessageBoxResult OK;
    public static MessageBoxResult Cancel;
    public static MessageBoxResult Yes;
    public static MessageBoxResult No;
}
[ContentPropertyAttribute("Setters")]
public class System.Windows.MultiDataTrigger : TriggerBase {
    [DesignerSerializationVisibilityAttribute("2")]
public ConditionCollection Conditions { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public SetterBaseCollection Setters { get; }
    public ConditionCollection get_Conditions();
    public SetterBaseCollection get_Setters();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
[ContentPropertyAttribute("Setters")]
public class System.Windows.MultiTrigger : TriggerBase {
    [DesignerSerializationVisibilityAttribute("2")]
public ConditionCollection Conditions { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public SetterBaseCollection Setters { get; }
    public ConditionCollection get_Conditions();
    public SetterBaseCollection get_Setters();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public abstract class System.Windows.Navigation.CustomContentState : object {
    public string JournalEntryName { get; }
    public virtual string get_JournalEntryName();
    public abstract virtual void Replay(NavigationService navigationService, NavigationMode mode);
}
public class System.Windows.Navigation.FragmentNavigationEventArgs : EventArgs {
    public string Fragment { get; }
    public bool Handled { get; public set; }
    public object Navigator { get; }
    public string get_Fragment();
    public bool get_Handled();
    public void set_Handled(bool value);
    public object get_Navigator();
}
public class System.Windows.Navigation.FragmentNavigationEventHandler : MulticastDelegate {
    public FragmentNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FragmentNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FragmentNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.Windows.Navigation.IProvideCustomContentState {
    public abstract virtual CustomContentState GetContentState();
}
public class System.Windows.Navigation.JournalEntry : DependencyObject {
    public static DependencyProperty KeepAliveProperty;
    public static DependencyProperty NameProperty;
    public CustomContentState CustomContentState { get; }
    public string Name { get; public set; }
    public Uri Source { get; public set; }
    protected JournalEntry(SerializationInfo info, StreamingContext context);
    public CustomContentState get_CustomContentState();
    public string get_Name();
    public void set_Name(string value);
    public Uri get_Source();
    public void set_Source(Uri value);
    public static bool GetKeepAlive(DependencyObject dependencyObject);
    public static string GetName(DependencyObject dependencyObject);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static void SetKeepAlive(DependencyObject dependencyObject, bool keepAlive);
    public static void SetName(DependencyObject dependencyObject, string name);
}
public class System.Windows.Navigation.JournalEntryListConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum System.Windows.Navigation.JournalEntryPosition : Enum {
    public int value__;
    public static JournalEntryPosition Back;
    public static JournalEntryPosition Current;
    public static JournalEntryPosition Forward;
}
public class System.Windows.Navigation.JournalEntryUnifiedViewConverter : object {
    public static DependencyProperty JournalEntryPositionProperty;
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public static JournalEntryPosition GetJournalEntryPosition(DependencyObject element);
    public static void SetJournalEntryPosition(DependencyObject element, JournalEntryPosition position);
}
public enum System.Windows.Navigation.JournalOwnership : Enum {
    public int value__;
    public static JournalOwnership Automatic;
    public static JournalOwnership OwnsJournal;
    public static JournalOwnership UsesParentJournal;
}
public class System.Windows.Navigation.LoadCompletedEventHandler : MulticastDelegate {
    public LoadCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Navigation.NavigatedEventHandler : MulticastDelegate {
    public NavigatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Navigation.NavigatingCancelEventArgs : CancelEventArgs {
    public object Content { get; }
    public CustomContentState ContentStateToSave { get; public set; }
    public object ExtraData { get; }
    public bool IsNavigationInitiator { get; }
    public NavigationMode NavigationMode { get; }
    public object Navigator { get; }
    public CustomContentState TargetContentState { get; }
    public Uri Uri { get; }
    public WebRequest WebRequest { get; }
    public object get_Content();
    public CustomContentState get_ContentStateToSave();
    public void set_ContentStateToSave(CustomContentState value);
    public object get_ExtraData();
    public bool get_IsNavigationInitiator();
    public NavigationMode get_NavigationMode();
    public object get_Navigator();
    public CustomContentState get_TargetContentState();
    public Uri get_Uri();
    public WebRequest get_WebRequest();
}
public class System.Windows.Navigation.NavigatingCancelEventHandler : MulticastDelegate {
    public NavigatingCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigatingCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigatingCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Navigation.NavigationEventArgs : EventArgs {
    public object Content { get; }
    public object ExtraData { get; }
    public bool IsNavigationInitiator { get; }
    public object Navigator { get; }
    public Uri Uri { get; }
    public WebResponse WebResponse { get; }
    public object get_Content();
    public object get_ExtraData();
    public bool get_IsNavigationInitiator();
    public object get_Navigator();
    public Uri get_Uri();
    public WebResponse get_WebResponse();
}
public class System.Windows.Navigation.NavigationFailedEventArgs : EventArgs {
    public Exception Exception { get; }
    public object ExtraData { get; }
    public bool Handled { get; public set; }
    public object Navigator { get; }
    public Uri Uri { get; }
    public WebRequest WebRequest { get; }
    public WebResponse WebResponse { get; }
    public Exception get_Exception();
    public object get_ExtraData();
    public bool get_Handled();
    public void set_Handled(bool value);
    public object get_Navigator();
    public Uri get_Uri();
    public WebRequest get_WebRequest();
    public WebResponse get_WebResponse();
}
public class System.Windows.Navigation.NavigationFailedEventHandler : MulticastDelegate {
    public NavigationFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigationFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigationFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Navigation.NavigationMode : Enum {
    public byte value__;
    public static NavigationMode New;
    public static NavigationMode Back;
    public static NavigationMode Forward;
    public static NavigationMode Refresh;
}
public class System.Windows.Navigation.NavigationProgressEventArgs : EventArgs {
    public long BytesRead { get; }
    public long MaxBytes { get; }
    public object Navigator { get; }
    public Uri Uri { get; }
    public long get_BytesRead();
    public long get_MaxBytes();
    public object get_Navigator();
    public Uri get_Uri();
}
public class System.Windows.Navigation.NavigationProgressEventHandler : MulticastDelegate {
    public NavigationProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigationProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigationProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Navigation.NavigationService : object {
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public object Content { get; public set; }
    public Uri CurrentSource { get; }
    public Uri Source { get; public set; }
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    public object get_Content();
    public void set_Content(object value);
    public Uri get_CurrentSource();
    public Uri get_Source();
    public void set_Source(Uri value);
    public void add_FragmentNavigation(FragmentNavigationEventHandler value);
    public void remove_FragmentNavigation(FragmentNavigationEventHandler value);
    public void add_LoadCompleted(LoadCompletedEventHandler value);
    public void remove_LoadCompleted(LoadCompletedEventHandler value);
    public void add_Navigated(NavigatedEventHandler value);
    public void remove_Navigated(NavigatedEventHandler value);
    public void add_Navigating(NavigatingCancelEventHandler value);
    public void remove_Navigating(NavigatingCancelEventHandler value);
    public void add_NavigationFailed(NavigationFailedEventHandler value);
    public void remove_NavigationFailed(NavigationFailedEventHandler value);
    public void add_NavigationProgress(NavigationProgressEventHandler value);
    public void remove_NavigationProgress(NavigationProgressEventHandler value);
    public void add_NavigationStopped(NavigationStoppedEventHandler value);
    public void remove_NavigationStopped(NavigationStoppedEventHandler value);
    public void AddBackEntry(CustomContentState state);
    public static NavigationService GetNavigationService(DependencyObject dependencyObject);
    public void GoBack();
    public void GoForward();
    public bool Navigate(object root);
    public bool Navigate(object root, object navigationState);
    public bool Navigate(Uri source);
    public bool Navigate(Uri source, object navigationState);
    public bool Navigate(Uri source, object navigationState, bool sandboxExternalContent);
    public void Refresh();
    public JournalEntry RemoveBackEntry();
    public void StopLoading();
}
public class System.Windows.Navigation.NavigationStoppedEventHandler : MulticastDelegate {
    public NavigationStoppedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Navigation.NavigationUIVisibility : Enum {
    public int value__;
    public static NavigationUIVisibility Automatic;
    public static NavigationUIVisibility Visible;
    public static NavigationUIVisibility Hidden;
}
[ContentPropertyAttribute]
[TemplatePartAttribute]
public class System.Windows.Navigation.NavigationWindow : Window {
    public static DependencyProperty BackStackProperty;
    public static DependencyProperty CanGoBackProperty;
    public static DependencyProperty CanGoForwardProperty;
    public static DependencyProperty ForwardStackProperty;
    public static DependencyProperty SandboxExternalContentProperty;
    public static DependencyProperty ShowsNavigationUIProperty;
    public static DependencyProperty SourceProperty;
    public IEnumerable BackStack { get; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public Uri CurrentSource { get; }
    public IEnumerable ForwardStack { get; }
    public NavigationService NavigationService { get; }
    public bool SandboxExternalContent { get; public set; }
    public bool ShowsNavigationUI { get; public set; }
    [DefaultValueAttribute("")]
public Uri Source { get; public set; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public IEnumerable get_BackStack();
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    public Uri get_CurrentSource();
    public IEnumerable get_ForwardStack();
    public NavigationService get_NavigationService();
    public bool get_SandboxExternalContent();
    public void set_SandboxExternalContent(bool value);
    public bool get_ShowsNavigationUI();
    public void set_ShowsNavigationUI(bool value);
    public Uri get_Source();
    public void set_Source(Uri value);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public void add_FragmentNavigation(FragmentNavigationEventHandler value);
    public void remove_FragmentNavigation(FragmentNavigationEventHandler value);
    public void add_LoadCompleted(LoadCompletedEventHandler value);
    public void remove_LoadCompleted(LoadCompletedEventHandler value);
    public void add_Navigated(NavigatedEventHandler value);
    public void remove_Navigated(NavigatedEventHandler value);
    public void add_Navigating(NavigatingCancelEventHandler value);
    public void remove_Navigating(NavigatingCancelEventHandler value);
    public void add_NavigationFailed(NavigationFailedEventHandler value);
    public void remove_NavigationFailed(NavigationFailedEventHandler value);
    public void add_NavigationProgress(NavigationProgressEventHandler value);
    public void remove_NavigationProgress(NavigationProgressEventHandler value);
    public void add_NavigationStopped(NavigationStoppedEventHandler value);
    public void remove_NavigationStopped(NavigationStoppedEventHandler value);
    public void AddBackEntry(CustomContentState state);
    protected virtual void AddChild(object value);
    protected virtual void AddText(string text);
    public void GoBack();
    public void GoForward();
    public bool Navigate(object content);
    public bool Navigate(object content, object extraData);
    public bool Navigate(Uri source);
    public bool Navigate(Uri source, object extraData);
    public virtual void OnApplyTemplate();
    protected virtual void OnClosed(EventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void Refresh();
    public JournalEntry RemoveBackEntry();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeContent();
    public void StopLoading();
}
public class System.Windows.Navigation.PageFunction`1 : PageFunctionBase {
    public void add_Return(ReturnEventHandler`1<T> value);
    public void remove_Return(ReturnEventHandler`1<T> value);
    protected virtual void OnReturn(ReturnEventArgs`1<T> e);
}
public abstract class System.Windows.Navigation.PageFunctionBase : Page {
    public bool RemoveFromJournal { get; public set; }
    public bool get_RemoveFromJournal();
    public void set_RemoveFromJournal(bool value);
    protected virtual void Start();
}
public class System.Windows.Navigation.RequestNavigateEventArgs : RoutedEventArgs {
    public string Target { get; }
    public Uri Uri { get; }
    public RequestNavigateEventArgs(Uri uri, string target);
    public string get_Target();
    public Uri get_Uri();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Navigation.RequestNavigateEventHandler : MulticastDelegate {
    public RequestNavigateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RequestNavigateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RequestNavigateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Navigation.ReturnEventArgs`1 : EventArgs {
    public T Result { get; public set; }
    public ReturnEventArgs`1(T result);
    public T get_Result();
    public void set_Result(T value);
}
public class System.Windows.Navigation.ReturnEventHandler`1 : MulticastDelegate {
    public ReturnEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, ReturnEventArgs`1<T> e);
    public virtual IAsyncResult BeginInvoke(object sender, ReturnEventArgs`1<T> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.NullableBoolConverter : NullableConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum System.Windows.PowerLineStatus : Enum {
    public int value__;
    public static PowerLineStatus Offline;
    public static PowerLineStatus Online;
    public static PowerLineStatus Unknown;
}
[TypeConverterAttribute("System.Windows.PropertyPathConverter")]
public class System.Windows.PropertyPath : object {
    public string Path { get; public set; }
    public Collection`1<object> PathParameters { get; }
    public PropertyPath(object parameter);
    public PropertyPath(string path, Object[] pathParameters);
    public string get_Path();
    public void set_Path(string value);
    public Collection`1<object> get_PathParameters();
}
public class System.Windows.PropertyPathConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
public enum System.Windows.ReasonSessionEnding : Enum {
    public byte value__;
    public static ReasonSessionEnding Logoff;
    public static ReasonSessionEnding Shutdown;
}
public class System.Windows.RequestBringIntoViewEventArgs : RoutedEventArgs {
    public DependencyObject TargetObject { get; }
    public Rect TargetRect { get; }
    public DependencyObject get_TargetObject();
    public Rect get_TargetRect();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.RequestBringIntoViewEventHandler : MulticastDelegate {
    public RequestBringIntoViewEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RequestBringIntoViewEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RequestBringIntoViewEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[LocalizabilityAttribute("0")]
public enum System.Windows.ResizeMode : Enum {
    public int value__;
    public static ResizeMode NoResize;
    public static ResizeMode CanMinimize;
    public static ResizeMode CanResize;
    public static ResizeMode CanResizeWithGrip;
}
[DefaultMemberAttribute("Item")]
[LocalizabilityAttribute("16")]
[AmbientAttribute]
[UsableDuringInitializationAttribute("True")]
public class System.Windows.ResourceDictionary : object {
    public int Count { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public DeferrableContent DeferrableContent { get; public set; }
    [DefaultValueAttribute("False")]
public bool InvalidatesImplicitDataTemplateResources { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    public Collection`1<ResourceDictionary> MergedDictionaries { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public Uri Source { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    public ICollection Values { get; }
    public sealed virtual int get_Count();
    public DeferrableContent get_DeferrableContent();
    public void set_DeferrableContent(DeferrableContent value);
    public bool get_InvalidatesImplicitDataTemplateResources();
    public void set_InvalidatesImplicitDataTemplateResources(bool value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection get_Keys();
    public Collection`1<ResourceDictionary> get_MergedDictionaries();
    public Uri get_Source();
    public void set_Source(Uri value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void BeginInit();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public void CopyTo(DictionaryEntry[] array, int arrayIndex);
    public sealed virtual void EndInit();
    public sealed virtual object FindName(string name);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    protected virtual void OnGettingValue(object key, Object& value, Boolean& canCache);
    public sealed virtual void RegisterName(string name, object scopedElement);
    public sealed virtual void Remove(object key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void UnregisterName(string name);
}
public enum System.Windows.ResourceDictionaryLocation : Enum {
    public int value__;
    public static ResourceDictionaryLocation None;
    public static ResourceDictionaryLocation SourceAssembly;
    public static ResourceDictionaryLocation ExternalAssembly;
}
[MarkupExtensionReturnTypeAttribute("System.Windows.ResourceKey")]
public abstract class System.Windows.ResourceKey : MarkupExtension {
    public Assembly Assembly { get; }
    public abstract virtual Assembly get_Assembly();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Windows.ResourceReferenceKeyNotFoundException : InvalidOperationException {
    public object Key { get; }
    protected ResourceReferenceKeyNotFoundException(SerializationInfo info, StreamingContext context);
    public ResourceReferenceKeyNotFoundException(string message, object resourceKey);
    public object get_Key();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Resources.ContentTypes : object {
    public static string XamlContentType;
}
public class System.Windows.Resources.StreamResourceInfo : object {
    public string ContentType { get; }
    public Stream Stream { get; }
    public StreamResourceInfo(Stream stream, string contentType);
    public string get_ContentType();
    public Stream get_Stream();
}
public class System.Windows.RoutedPropertyChangedEventArgs`1 : RoutedEventArgs {
    public T NewValue { get; }
    public T OldValue { get; }
    public RoutedPropertyChangedEventArgs`1(T oldValue, T newValue);
    public RoutedPropertyChangedEventArgs`1(T oldValue, T newValue, RoutedEvent routedEvent);
    public T get_NewValue();
    public T get_OldValue();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.RoutedPropertyChangedEventHandler`1 : MulticastDelegate {
    public RoutedPropertyChangedEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, RoutedPropertyChangedEventArgs`1<T> e);
    public virtual IAsyncResult BeginInvoke(object sender, RoutedPropertyChangedEventArgs`1<T> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.SessionEndingCancelEventArgs : CancelEventArgs {
    public ReasonSessionEnding ReasonSessionEnding { get; }
    public ReasonSessionEnding get_ReasonSessionEnding();
}
public class System.Windows.SessionEndingCancelEventHandler : MulticastDelegate {
    public SessionEndingCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SessionEndingCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SessionEndingCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[XamlSetMarkupExtensionAttribute("ReceiveMarkupExtension")]
[XamlSetTypeConverterAttribute("ReceiveTypeConverter")]
public class System.Windows.Setter : SetterBase {
    [DefaultValueAttribute("")]
[LocalizabilityAttribute("0")]
[AmbientAttribute]
public DependencyProperty Property { get; public set; }
    [DefaultValueAttribute("")]
[AmbientAttribute]
public string TargetName { get; public set; }
    [TypeConverterAttribute("System.Windows.Markup.SetterTriggerConditionValueConverter")]
[LocalizabilityAttribute("0")]
[DependsOnAttribute("Property")]
[DependsOnAttribute("TargetName")]
public object Value { get; public set; }
    public Setter(DependencyProperty property, object value);
    public Setter(DependencyProperty property, object value, string targetName);
    public DependencyProperty get_Property();
    public void set_Property(DependencyProperty value);
    public string get_TargetName();
    public void set_TargetName(string value);
    public object get_Value();
    public void set_Value(object value);
    public static void ReceiveMarkupExtension(object targetObject, XamlSetMarkupExtensionEventArgs eventArgs);
    public static void ReceiveTypeConverter(object targetObject, XamlSetTypeConverterEventArgs eventArgs);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
[LocalizabilityAttribute("16")]
public abstract class System.Windows.SetterBase : object {
    public bool IsSealed { get; }
    public bool get_IsSealed();
    protected void CheckSealed();
}
public class System.Windows.SetterBaseCollection : Collection`1<SetterBase> {
    public bool IsSealed { get; }
    public bool get_IsSealed();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, SetterBase item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, SetterBase item);
}
public class System.Windows.Shapes.Ellipse : Shape {
    protected Geometry DefiningGeometry { get; }
    public Transform GeometryTransform { get; }
    public Geometry RenderedGeometry { get; }
    protected virtual Geometry get_DefiningGeometry();
    public virtual Transform get_GeometryTransform();
    public virtual Geometry get_RenderedGeometry();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext drawingContext);
}
public class System.Windows.Shapes.Line : Shape {
    public static DependencyProperty X1Property;
    public static DependencyProperty X2Property;
    public static DependencyProperty Y1Property;
    public static DependencyProperty Y2Property;
    protected Geometry DefiningGeometry { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double X1 { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double X2 { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double Y1 { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double Y2 { get; public set; }
    protected virtual Geometry get_DefiningGeometry();
    public double get_X1();
    public void set_X1(double value);
    public double get_X2();
    public void set_X2(double value);
    public double get_Y1();
    public void set_Y1(double value);
    public double get_Y2();
    public void set_Y2(double value);
}
public class System.Windows.Shapes.Path : Shape {
    public static DependencyProperty DataProperty;
    public Geometry Data { get; public set; }
    protected Geometry DefiningGeometry { get; }
    public Geometry get_Data();
    public void set_Data(Geometry value);
    protected virtual Geometry get_DefiningGeometry();
}
public class System.Windows.Shapes.Polygon : Shape {
    public static DependencyProperty FillRuleProperty;
    public static DependencyProperty PointsProperty;
    protected Geometry DefiningGeometry { get; }
    public FillRule FillRule { get; public set; }
    public PointCollection Points { get; public set; }
    protected virtual Geometry get_DefiningGeometry();
    public FillRule get_FillRule();
    public void set_FillRule(FillRule value);
    public PointCollection get_Points();
    public void set_Points(PointCollection value);
}
public class System.Windows.Shapes.Polyline : Shape {
    public static DependencyProperty FillRuleProperty;
    public static DependencyProperty PointsProperty;
    protected Geometry DefiningGeometry { get; }
    public FillRule FillRule { get; public set; }
    public PointCollection Points { get; public set; }
    protected virtual Geometry get_DefiningGeometry();
    public FillRule get_FillRule();
    public void set_FillRule(FillRule value);
    public PointCollection get_Points();
    public void set_Points(PointCollection value);
}
public class System.Windows.Shapes.Rectangle : Shape {
    public static DependencyProperty RadiusXProperty;
    public static DependencyProperty RadiusYProperty;
    protected Geometry DefiningGeometry { get; }
    public Transform GeometryTransform { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double RadiusX { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double RadiusY { get; public set; }
    public Geometry RenderedGeometry { get; }
    protected virtual Geometry get_DefiningGeometry();
    public virtual Transform get_GeometryTransform();
    public double get_RadiusX();
    public void set_RadiusX(double value);
    public double get_RadiusY();
    public void set_RadiusY(double value);
    public virtual Geometry get_RenderedGeometry();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext drawingContext);
}
[LocalizabilityAttribute("0")]
public abstract class System.Windows.Shapes.Shape : FrameworkElement {
    public static DependencyProperty FillProperty;
    public static DependencyProperty StretchProperty;
    public static DependencyProperty StrokeDashArrayProperty;
    public static DependencyProperty StrokeDashCapProperty;
    public static DependencyProperty StrokeDashOffsetProperty;
    public static DependencyProperty StrokeEndLineCapProperty;
    public static DependencyProperty StrokeLineJoinProperty;
    public static DependencyProperty StrokeMiterLimitProperty;
    public static DependencyProperty StrokeProperty;
    public static DependencyProperty StrokeStartLineCapProperty;
    public static DependencyProperty StrokeThicknessProperty;
    protected Geometry DefiningGeometry { get; }
    public Brush Fill { get; public set; }
    public Transform GeometryTransform { get; }
    public Geometry RenderedGeometry { get; }
    public Stretch Stretch { get; public set; }
    public Brush Stroke { get; public set; }
    public DoubleCollection StrokeDashArray { get; public set; }
    public PenLineCap StrokeDashCap { get; public set; }
    public double StrokeDashOffset { get; public set; }
    public PenLineCap StrokeEndLineCap { get; public set; }
    public PenLineJoin StrokeLineJoin { get; public set; }
    public double StrokeMiterLimit { get; public set; }
    public PenLineCap StrokeStartLineCap { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double StrokeThickness { get; public set; }
    protected abstract virtual Geometry get_DefiningGeometry();
    public Brush get_Fill();
    public void set_Fill(Brush value);
    public virtual Transform get_GeometryTransform();
    public virtual Geometry get_RenderedGeometry();
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public Brush get_Stroke();
    public void set_Stroke(Brush value);
    public DoubleCollection get_StrokeDashArray();
    public void set_StrokeDashArray(DoubleCollection value);
    public PenLineCap get_StrokeDashCap();
    public void set_StrokeDashCap(PenLineCap value);
    public double get_StrokeDashOffset();
    public void set_StrokeDashOffset(double value);
    public PenLineCap get_StrokeEndLineCap();
    public void set_StrokeEndLineCap(PenLineCap value);
    public PenLineJoin get_StrokeLineJoin();
    public void set_StrokeLineJoin(PenLineJoin value);
    public double get_StrokeMiterLimit();
    public void set_StrokeMiterLimit(double value);
    public PenLineCap get_StrokeStartLineCap();
    public void set_StrokeStartLineCap(PenLineCap value);
    public double get_StrokeThickness();
    public void set_StrokeThickness(double value);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnRender(DrawingContext drawingContext);
}
public abstract class System.Windows.Shell.JumpItem : object {
    public string CustomCategory { get; public set; }
    public string get_CustomCategory();
    public void set_CustomCategory(string value);
}
public enum System.Windows.Shell.JumpItemRejectionReason : Enum {
    public int value__;
    public static JumpItemRejectionReason None;
    public static JumpItemRejectionReason InvalidItem;
    public static JumpItemRejectionReason NoRegisteredHandler;
    public static JumpItemRejectionReason RemovedByUser;
}
public class System.Windows.Shell.JumpItemsRejectedEventArgs : EventArgs {
    public IList`1<JumpItem> RejectedItems { get; }
    public IList`1<JumpItemRejectionReason> RejectionReasons { get; }
    public JumpItemsRejectedEventArgs(IList`1<JumpItem> rejectedItems, IList`1<JumpItemRejectionReason> reasons);
    public IList`1<JumpItem> get_RejectedItems();
    public IList`1<JumpItemRejectionReason> get_RejectionReasons();
}
public class System.Windows.Shell.JumpItemsRemovedEventArgs : EventArgs {
    public IList`1<JumpItem> RemovedItems { get; }
    public JumpItemsRemovedEventArgs(IList`1<JumpItem> removedItems);
    public IList`1<JumpItem> get_RemovedItems();
}
[ContentPropertyAttribute("JumpItems")]
public class System.Windows.Shell.JumpList : object {
    public List`1<JumpItem> JumpItems { get; }
    public bool ShowFrequentCategory { get; public set; }
    public bool ShowRecentCategory { get; public set; }
    public JumpList(IEnumerable`1<JumpItem> items, bool showFrequent, bool showRecent);
    public List`1<JumpItem> get_JumpItems();
    public bool get_ShowFrequentCategory();
    public void set_ShowFrequentCategory(bool value);
    public bool get_ShowRecentCategory();
    public void set_ShowRecentCategory(bool value);
    public void add_JumpItemsRejected(EventHandler`1<JumpItemsRejectedEventArgs> value);
    public void remove_JumpItemsRejected(EventHandler`1<JumpItemsRejectedEventArgs> value);
    public void add_JumpItemsRemovedByUser(EventHandler`1<JumpItemsRemovedEventArgs> value);
    public void remove_JumpItemsRemovedByUser(EventHandler`1<JumpItemsRemovedEventArgs> value);
    public static void AddToRecentCategory(string itemPath);
    public static void AddToRecentCategory(JumpPath jumpPath);
    public static void AddToRecentCategory(JumpTask jumpTask);
    public void Apply();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public static JumpList GetJumpList(Application application);
    public static void SetJumpList(Application application, JumpList value);
}
public class System.Windows.Shell.JumpPath : JumpItem {
    public string Path { get; public set; }
    public string get_Path();
    public void set_Path(string value);
}
public class System.Windows.Shell.JumpTask : JumpItem {
    public string ApplicationPath { get; public set; }
    public string Arguments { get; public set; }
    public string Description { get; public set; }
    public int IconResourceIndex { get; public set; }
    public string IconResourcePath { get; public set; }
    public string Title { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string get_ApplicationPath();
    public void set_ApplicationPath(string value);
    public string get_Arguments();
    public void set_Arguments(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_IconResourceIndex();
    public void set_IconResourceIndex(int value);
    public string get_IconResourcePath();
    public void set_IconResourcePath(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_WorkingDirectory();
    public void set_WorkingDirectory(string value);
}
[FlagsAttribute]
public enum System.Windows.Shell.NonClientFrameEdges : Enum {
    public int value__;
    public static NonClientFrameEdges None;
    public static NonClientFrameEdges Left;
    public static NonClientFrameEdges Top;
    public static NonClientFrameEdges Right;
    public static NonClientFrameEdges Bottom;
}
public enum System.Windows.Shell.ResizeGripDirection : Enum {
    public int value__;
    public static ResizeGripDirection None;
    public static ResizeGripDirection TopLeft;
    public static ResizeGripDirection Top;
    public static ResizeGripDirection TopRight;
    public static ResizeGripDirection Right;
    public static ResizeGripDirection BottomRight;
    public static ResizeGripDirection Bottom;
    public static ResizeGripDirection BottomLeft;
    public static ResizeGripDirection Left;
}
public class System.Windows.Shell.TaskbarItemInfo : Freezable {
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty OverlayProperty;
    public static DependencyProperty ProgressStateProperty;
    public static DependencyProperty ProgressValueProperty;
    public static DependencyProperty ThumbButtonInfosProperty;
    public static DependencyProperty ThumbnailClipMarginProperty;
    public string Description { get; public set; }
    public ImageSource Overlay { get; public set; }
    public TaskbarItemProgressState ProgressState { get; public set; }
    public double ProgressValue { get; public set; }
    public ThumbButtonInfoCollection ThumbButtonInfos { get; public set; }
    public Thickness ThumbnailClipMargin { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public ImageSource get_Overlay();
    public void set_Overlay(ImageSource value);
    public TaskbarItemProgressState get_ProgressState();
    public void set_ProgressState(TaskbarItemProgressState value);
    public double get_ProgressValue();
    public void set_ProgressValue(double value);
    public ThumbButtonInfoCollection get_ThumbButtonInfos();
    public void set_ThumbButtonInfos(ThumbButtonInfoCollection value);
    public Thickness get_ThumbnailClipMargin();
    public void set_ThumbnailClipMargin(Thickness value);
    protected virtual Freezable CreateInstanceCore();
}
public enum System.Windows.Shell.TaskbarItemProgressState : Enum {
    public int value__;
    public static TaskbarItemProgressState None;
    public static TaskbarItemProgressState Indeterminate;
    public static TaskbarItemProgressState Normal;
    public static TaskbarItemProgressState Error;
    public static TaskbarItemProgressState Paused;
}
public class System.Windows.Shell.ThumbButtonInfo : Freezable {
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty DismissWhenClickedProperty;
    public static DependencyProperty ImageSourceProperty;
    public static DependencyProperty IsBackgroundVisibleProperty;
    public static DependencyProperty IsEnabledProperty;
    public static DependencyProperty IsInteractiveProperty;
    public static DependencyProperty VisibilityProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    public string Description { get; public set; }
    public bool DismissWhenClicked { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public bool IsBackgroundVisible { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsInteractive { get; public set; }
    public Visibility Visibility { get; public set; }
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_DismissWhenClicked();
    public void set_DismissWhenClicked(bool value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public bool get_IsBackgroundVisible();
    public void set_IsBackgroundVisible(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsInteractive();
    public void set_IsInteractive(bool value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    protected virtual Freezable CreateInstanceCore();
}
public class System.Windows.Shell.ThumbButtonInfoCollection : FreezableCollection`1<ThumbButtonInfo> {
    protected virtual Freezable CreateInstanceCore();
}
public class System.Windows.Shell.WindowChrome : Freezable {
    public static DependencyProperty CaptionHeightProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty GlassFrameThicknessProperty;
    public static DependencyProperty IsHitTestVisibleInChromeProperty;
    public static DependencyProperty NonClientFrameEdgesProperty;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty ResizeGripDirectionProperty;
    public static DependencyProperty UseAeroCaptionButtonsProperty;
    public static DependencyProperty WindowChromeProperty;
    public double CaptionHeight { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public static Thickness GlassFrameCompleteThickness { get; }
    public Thickness GlassFrameThickness { get; public set; }
    public NonClientFrameEdges NonClientFrameEdges { get; public set; }
    public Thickness ResizeBorderThickness { get; public set; }
    public bool UseAeroCaptionButtons { get; public set; }
    public double get_CaptionHeight();
    public void set_CaptionHeight(double value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public static Thickness get_GlassFrameCompleteThickness();
    public Thickness get_GlassFrameThickness();
    public void set_GlassFrameThickness(Thickness value);
    public NonClientFrameEdges get_NonClientFrameEdges();
    public void set_NonClientFrameEdges(NonClientFrameEdges value);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    public bool get_UseAeroCaptionButtons();
    public void set_UseAeroCaptionButtons(bool value);
    protected virtual Freezable CreateInstanceCore();
    public static bool GetIsHitTestVisibleInChrome(IInputElement inputElement);
    public static ResizeGripDirection GetResizeGripDirection(IInputElement inputElement);
    public static WindowChrome GetWindowChrome(Window window);
    public static void SetIsHitTestVisibleInChrome(IInputElement inputElement, bool hitTestVisible);
    public static void SetResizeGripDirection(IInputElement inputElement, ResizeGripDirection direction);
    public static void SetWindowChrome(Window window, WindowChrome chrome);
}
public enum System.Windows.ShutdownMode : Enum {
    public byte value__;
    public static ShutdownMode OnLastWindowClose;
    public static ShutdownMode OnMainWindowClose;
    public static ShutdownMode OnExplicitShutdown;
}
public class System.Windows.SizeChangedEventArgs : RoutedEventArgs {
    public bool HeightChanged { get; }
    public Size NewSize { get; }
    public Size PreviousSize { get; }
    public bool WidthChanged { get; }
    public bool get_HeightChanged();
    public Size get_NewSize();
    public Size get_PreviousSize();
    public bool get_WidthChanged();
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.SizeChangedEventHandler : MulticastDelegate {
    public SizeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SizeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SizeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.StartupEventArgs : EventArgs {
    public String[] Args { get; }
    public String[] get_Args();
}
public class System.Windows.StartupEventHandler : MulticastDelegate {
    public StartupEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StartupEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StartupEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[LocalizabilityAttribute("17")]
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.StaticResourceExtension : MarkupExtension {
    [ConstructorArgumentAttribute("resourceKey")]
public object ResourceKey { get; public set; }
    public StaticResourceExtension(object resourceKey);
    public object get_ResourceKey();
    public void set_ResourceKey(object value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[LocalizabilityAttribute("16")]
[ContentPropertyAttribute("Setters")]
[DictionaryKeyPropertyAttribute("TargetType")]
public class System.Windows.Style : DispatcherObject {
    [DefaultValueAttribute("")]
[AmbientAttribute]
public Style BasedOn { get; public set; }
    public bool IsSealed { get; }
    [AmbientAttribute]
public ResourceDictionary Resources { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public SetterBaseCollection Setters { get; }
    [LocalizabilityAttribute("17")]
[AmbientAttribute]
public Type TargetType { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public TriggerCollection Triggers { get; }
    public Style(Type targetType);
    public Style(Type targetType, Style basedOn);
    public Style get_BasedOn();
    public void set_BasedOn(Style value);
    public bool get_IsSealed();
    public ResourceDictionary get_Resources();
    public void set_Resources(ResourceDictionary value);
    public SetterBaseCollection get_Setters();
    public Type get_TargetType();
    public void set_TargetType(Type value);
    public TriggerCollection get_Triggers();
    public virtual int GetHashCode();
    public sealed virtual void RegisterName(string name, object scopedElement);
    public void Seal();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
    private sealed virtual override object System.Windows.Markup.INameScope.FindName(string name);
    private sealed virtual override bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName);
    public sealed virtual void UnregisterName(string name);
}
[AttributeUsageAttribute("4")]
public class System.Windows.StyleTypedPropertyAttribute : Attribute {
    public string Property { get; public set; }
    public Type StyleTargetType { get; public set; }
    public string get_Property();
    public void set_Property(string value);
    public Type get_StyleTargetType();
    public void set_StyleTargetType(Type value);
}
public static class System.Windows.SystemColors : object {
    public static SolidColorBrush ActiveBorderBrush { get; }
    public static ResourceKey ActiveBorderBrushKey { get; }
    public static Color ActiveBorderColor { get; }
    public static ResourceKey ActiveBorderColorKey { get; }
    public static SolidColorBrush ActiveCaptionBrush { get; }
    public static ResourceKey ActiveCaptionBrushKey { get; }
    public static Color ActiveCaptionColor { get; }
    public static ResourceKey ActiveCaptionColorKey { get; }
    public static SolidColorBrush ActiveCaptionTextBrush { get; }
    public static ResourceKey ActiveCaptionTextBrushKey { get; }
    public static Color ActiveCaptionTextColor { get; }
    public static ResourceKey ActiveCaptionTextColorKey { get; }
    public static SolidColorBrush AppWorkspaceBrush { get; }
    public static ResourceKey AppWorkspaceBrushKey { get; }
    public static Color AppWorkspaceColor { get; }
    public static ResourceKey AppWorkspaceColorKey { get; }
    public static SolidColorBrush ControlBrush { get; }
    public static ResourceKey ControlBrushKey { get; }
    public static Color ControlColor { get; }
    public static ResourceKey ControlColorKey { get; }
    public static SolidColorBrush ControlDarkBrush { get; }
    public static ResourceKey ControlDarkBrushKey { get; }
    public static Color ControlDarkColor { get; }
    public static ResourceKey ControlDarkColorKey { get; }
    public static SolidColorBrush ControlDarkDarkBrush { get; }
    public static ResourceKey ControlDarkDarkBrushKey { get; }
    public static Color ControlDarkDarkColor { get; }
    public static ResourceKey ControlDarkDarkColorKey { get; }
    public static SolidColorBrush ControlLightBrush { get; }
    public static ResourceKey ControlLightBrushKey { get; }
    public static Color ControlLightColor { get; }
    public static ResourceKey ControlLightColorKey { get; }
    public static SolidColorBrush ControlLightLightBrush { get; }
    public static ResourceKey ControlLightLightBrushKey { get; }
    public static Color ControlLightLightColor { get; }
    public static ResourceKey ControlLightLightColorKey { get; }
    public static SolidColorBrush ControlTextBrush { get; }
    public static ResourceKey ControlTextBrushKey { get; }
    public static Color ControlTextColor { get; }
    public static ResourceKey ControlTextColorKey { get; }
    public static SolidColorBrush DesktopBrush { get; }
    public static ResourceKey DesktopBrushKey { get; }
    public static Color DesktopColor { get; }
    public static ResourceKey DesktopColorKey { get; }
    public static SolidColorBrush GradientActiveCaptionBrush { get; }
    public static ResourceKey GradientActiveCaptionBrushKey { get; }
    public static Color GradientActiveCaptionColor { get; }
    public static ResourceKey GradientActiveCaptionColorKey { get; }
    public static SolidColorBrush GradientInactiveCaptionBrush { get; }
    public static ResourceKey GradientInactiveCaptionBrushKey { get; }
    public static Color GradientInactiveCaptionColor { get; }
    public static ResourceKey GradientInactiveCaptionColorKey { get; }
    public static SolidColorBrush GrayTextBrush { get; }
    public static ResourceKey GrayTextBrushKey { get; }
    public static Color GrayTextColor { get; }
    public static ResourceKey GrayTextColorKey { get; }
    public static SolidColorBrush HighlightBrush { get; }
    public static ResourceKey HighlightBrushKey { get; }
    public static Color HighlightColor { get; }
    public static ResourceKey HighlightColorKey { get; }
    public static SolidColorBrush HighlightTextBrush { get; }
    public static ResourceKey HighlightTextBrushKey { get; }
    public static Color HighlightTextColor { get; }
    public static ResourceKey HighlightTextColorKey { get; }
    public static SolidColorBrush HotTrackBrush { get; }
    public static ResourceKey HotTrackBrushKey { get; }
    public static Color HotTrackColor { get; }
    public static ResourceKey HotTrackColorKey { get; }
    public static SolidColorBrush InactiveBorderBrush { get; }
    public static ResourceKey InactiveBorderBrushKey { get; }
    public static Color InactiveBorderColor { get; }
    public static ResourceKey InactiveBorderColorKey { get; }
    public static SolidColorBrush InactiveCaptionBrush { get; }
    public static ResourceKey InactiveCaptionBrushKey { get; }
    public static Color InactiveCaptionColor { get; }
    public static ResourceKey InactiveCaptionColorKey { get; }
    public static SolidColorBrush InactiveCaptionTextBrush { get; }
    public static ResourceKey InactiveCaptionTextBrushKey { get; }
    public static Color InactiveCaptionTextColor { get; }
    public static ResourceKey InactiveCaptionTextColorKey { get; }
    public static SolidColorBrush InactiveSelectionHighlightBrush { get; }
    public static ResourceKey InactiveSelectionHighlightBrushKey { get; }
    public static SolidColorBrush InactiveSelectionHighlightTextBrush { get; }
    public static ResourceKey InactiveSelectionHighlightTextBrushKey { get; }
    public static SolidColorBrush InfoBrush { get; }
    public static ResourceKey InfoBrushKey { get; }
    public static Color InfoColor { get; }
    public static ResourceKey InfoColorKey { get; }
    public static SolidColorBrush InfoTextBrush { get; }
    public static ResourceKey InfoTextBrushKey { get; }
    public static Color InfoTextColor { get; }
    public static ResourceKey InfoTextColorKey { get; }
    public static SolidColorBrush MenuBarBrush { get; }
    public static ResourceKey MenuBarBrushKey { get; }
    public static Color MenuBarColor { get; }
    public static ResourceKey MenuBarColorKey { get; }
    public static SolidColorBrush MenuBrush { get; }
    public static ResourceKey MenuBrushKey { get; }
    public static Color MenuColor { get; }
    public static ResourceKey MenuColorKey { get; }
    public static SolidColorBrush MenuHighlightBrush { get; }
    public static ResourceKey MenuHighlightBrushKey { get; }
    public static Color MenuHighlightColor { get; }
    public static ResourceKey MenuHighlightColorKey { get; }
    public static SolidColorBrush MenuTextBrush { get; }
    public static ResourceKey MenuTextBrushKey { get; }
    public static Color MenuTextColor { get; }
    public static ResourceKey MenuTextColorKey { get; }
    public static SolidColorBrush ScrollBarBrush { get; }
    public static ResourceKey ScrollBarBrushKey { get; }
    public static Color ScrollBarColor { get; }
    public static ResourceKey ScrollBarColorKey { get; }
    public static SolidColorBrush WindowBrush { get; }
    public static ResourceKey WindowBrushKey { get; }
    public static Color WindowColor { get; }
    public static ResourceKey WindowColorKey { get; }
    public static SolidColorBrush WindowFrameBrush { get; }
    public static ResourceKey WindowFrameBrushKey { get; }
    public static Color WindowFrameColor { get; }
    public static ResourceKey WindowFrameColorKey { get; }
    public static SolidColorBrush WindowTextBrush { get; }
    public static ResourceKey WindowTextBrushKey { get; }
    public static Color WindowTextColor { get; }
    public static ResourceKey WindowTextColorKey { get; }
    public static SolidColorBrush get_ActiveBorderBrush();
    public static ResourceKey get_ActiveBorderBrushKey();
    public static Color get_ActiveBorderColor();
    public static ResourceKey get_ActiveBorderColorKey();
    public static SolidColorBrush get_ActiveCaptionBrush();
    public static ResourceKey get_ActiveCaptionBrushKey();
    public static Color get_ActiveCaptionColor();
    public static ResourceKey get_ActiveCaptionColorKey();
    public static SolidColorBrush get_ActiveCaptionTextBrush();
    public static ResourceKey get_ActiveCaptionTextBrushKey();
    public static Color get_ActiveCaptionTextColor();
    public static ResourceKey get_ActiveCaptionTextColorKey();
    public static SolidColorBrush get_AppWorkspaceBrush();
    public static ResourceKey get_AppWorkspaceBrushKey();
    public static Color get_AppWorkspaceColor();
    public static ResourceKey get_AppWorkspaceColorKey();
    public static SolidColorBrush get_ControlBrush();
    public static ResourceKey get_ControlBrushKey();
    public static Color get_ControlColor();
    public static ResourceKey get_ControlColorKey();
    public static SolidColorBrush get_ControlDarkBrush();
    public static ResourceKey get_ControlDarkBrushKey();
    public static Color get_ControlDarkColor();
    public static ResourceKey get_ControlDarkColorKey();
    public static SolidColorBrush get_ControlDarkDarkBrush();
    public static ResourceKey get_ControlDarkDarkBrushKey();
    public static Color get_ControlDarkDarkColor();
    public static ResourceKey get_ControlDarkDarkColorKey();
    public static SolidColorBrush get_ControlLightBrush();
    public static ResourceKey get_ControlLightBrushKey();
    public static Color get_ControlLightColor();
    public static ResourceKey get_ControlLightColorKey();
    public static SolidColorBrush get_ControlLightLightBrush();
    public static ResourceKey get_ControlLightLightBrushKey();
    public static Color get_ControlLightLightColor();
    public static ResourceKey get_ControlLightLightColorKey();
    public static SolidColorBrush get_ControlTextBrush();
    public static ResourceKey get_ControlTextBrushKey();
    public static Color get_ControlTextColor();
    public static ResourceKey get_ControlTextColorKey();
    public static SolidColorBrush get_DesktopBrush();
    public static ResourceKey get_DesktopBrushKey();
    public static Color get_DesktopColor();
    public static ResourceKey get_DesktopColorKey();
    public static SolidColorBrush get_GradientActiveCaptionBrush();
    public static ResourceKey get_GradientActiveCaptionBrushKey();
    public static Color get_GradientActiveCaptionColor();
    public static ResourceKey get_GradientActiveCaptionColorKey();
    public static SolidColorBrush get_GradientInactiveCaptionBrush();
    public static ResourceKey get_GradientInactiveCaptionBrushKey();
    public static Color get_GradientInactiveCaptionColor();
    public static ResourceKey get_GradientInactiveCaptionColorKey();
    public static SolidColorBrush get_GrayTextBrush();
    public static ResourceKey get_GrayTextBrushKey();
    public static Color get_GrayTextColor();
    public static ResourceKey get_GrayTextColorKey();
    public static SolidColorBrush get_HighlightBrush();
    public static ResourceKey get_HighlightBrushKey();
    public static Color get_HighlightColor();
    public static ResourceKey get_HighlightColorKey();
    public static SolidColorBrush get_HighlightTextBrush();
    public static ResourceKey get_HighlightTextBrushKey();
    public static Color get_HighlightTextColor();
    public static ResourceKey get_HighlightTextColorKey();
    public static SolidColorBrush get_HotTrackBrush();
    public static ResourceKey get_HotTrackBrushKey();
    public static Color get_HotTrackColor();
    public static ResourceKey get_HotTrackColorKey();
    public static SolidColorBrush get_InactiveBorderBrush();
    public static ResourceKey get_InactiveBorderBrushKey();
    public static Color get_InactiveBorderColor();
    public static ResourceKey get_InactiveBorderColorKey();
    public static SolidColorBrush get_InactiveCaptionBrush();
    public static ResourceKey get_InactiveCaptionBrushKey();
    public static Color get_InactiveCaptionColor();
    public static ResourceKey get_InactiveCaptionColorKey();
    public static SolidColorBrush get_InactiveCaptionTextBrush();
    public static ResourceKey get_InactiveCaptionTextBrushKey();
    public static Color get_InactiveCaptionTextColor();
    public static ResourceKey get_InactiveCaptionTextColorKey();
    public static SolidColorBrush get_InactiveSelectionHighlightBrush();
    public static ResourceKey get_InactiveSelectionHighlightBrushKey();
    public static SolidColorBrush get_InactiveSelectionHighlightTextBrush();
    public static ResourceKey get_InactiveSelectionHighlightTextBrushKey();
    public static SolidColorBrush get_InfoBrush();
    public static ResourceKey get_InfoBrushKey();
    public static Color get_InfoColor();
    public static ResourceKey get_InfoColorKey();
    public static SolidColorBrush get_InfoTextBrush();
    public static ResourceKey get_InfoTextBrushKey();
    public static Color get_InfoTextColor();
    public static ResourceKey get_InfoTextColorKey();
    public static SolidColorBrush get_MenuBarBrush();
    public static ResourceKey get_MenuBarBrushKey();
    public static Color get_MenuBarColor();
    public static ResourceKey get_MenuBarColorKey();
    public static SolidColorBrush get_MenuBrush();
    public static ResourceKey get_MenuBrushKey();
    public static Color get_MenuColor();
    public static ResourceKey get_MenuColorKey();
    public static SolidColorBrush get_MenuHighlightBrush();
    public static ResourceKey get_MenuHighlightBrushKey();
    public static Color get_MenuHighlightColor();
    public static ResourceKey get_MenuHighlightColorKey();
    public static SolidColorBrush get_MenuTextBrush();
    public static ResourceKey get_MenuTextBrushKey();
    public static Color get_MenuTextColor();
    public static ResourceKey get_MenuTextColorKey();
    public static SolidColorBrush get_ScrollBarBrush();
    public static ResourceKey get_ScrollBarBrushKey();
    public static Color get_ScrollBarColor();
    public static ResourceKey get_ScrollBarColorKey();
    public static SolidColorBrush get_WindowBrush();
    public static ResourceKey get_WindowBrushKey();
    public static Color get_WindowColor();
    public static ResourceKey get_WindowColorKey();
    public static SolidColorBrush get_WindowFrameBrush();
    public static ResourceKey get_WindowFrameBrushKey();
    public static Color get_WindowFrameColor();
    public static ResourceKey get_WindowFrameColorKey();
    public static SolidColorBrush get_WindowTextBrush();
    public static ResourceKey get_WindowTextBrushKey();
    public static Color get_WindowTextColor();
    public static ResourceKey get_WindowTextColorKey();
}
public static class System.Windows.SystemCommands : object {
    public static RoutedCommand CloseWindowCommand { get; }
    public static RoutedCommand MaximizeWindowCommand { get; }
    public static RoutedCommand MinimizeWindowCommand { get; }
    public static RoutedCommand RestoreWindowCommand { get; }
    public static RoutedCommand ShowSystemMenuCommand { get; }
    public static RoutedCommand get_CloseWindowCommand();
    public static RoutedCommand get_MaximizeWindowCommand();
    public static RoutedCommand get_MinimizeWindowCommand();
    public static RoutedCommand get_RestoreWindowCommand();
    public static RoutedCommand get_ShowSystemMenuCommand();
    public static void CloseWindow(Window window);
    public static void MaximizeWindow(Window window);
    public static void MinimizeWindow(Window window);
    public static void RestoreWindow(Window window);
    public static void ShowSystemMenu(Window window, Point screenLocation);
}
public static class System.Windows.SystemFonts : object {
    public static FontFamily CaptionFontFamily { get; }
    public static ResourceKey CaptionFontFamilyKey { get; }
    public static double CaptionFontSize { get; }
    public static ResourceKey CaptionFontSizeKey { get; }
    public static FontStyle CaptionFontStyle { get; }
    public static ResourceKey CaptionFontStyleKey { get; }
    public static TextDecorationCollection CaptionFontTextDecorations { get; }
    public static ResourceKey CaptionFontTextDecorationsKey { get; }
    public static FontWeight CaptionFontWeight { get; }
    public static ResourceKey CaptionFontWeightKey { get; }
    public static FontFamily IconFontFamily { get; }
    public static ResourceKey IconFontFamilyKey { get; }
    public static double IconFontSize { get; }
    public static ResourceKey IconFontSizeKey { get; }
    public static FontStyle IconFontStyle { get; }
    public static ResourceKey IconFontStyleKey { get; }
    public static TextDecorationCollection IconFontTextDecorations { get; }
    public static ResourceKey IconFontTextDecorationsKey { get; }
    public static FontWeight IconFontWeight { get; }
    public static ResourceKey IconFontWeightKey { get; }
    public static FontFamily MenuFontFamily { get; }
    public static ResourceKey MenuFontFamilyKey { get; }
    public static double MenuFontSize { get; }
    public static ResourceKey MenuFontSizeKey { get; }
    public static FontStyle MenuFontStyle { get; }
    public static ResourceKey MenuFontStyleKey { get; }
    public static TextDecorationCollection MenuFontTextDecorations { get; }
    public static ResourceKey MenuFontTextDecorationsKey { get; }
    public static FontWeight MenuFontWeight { get; }
    public static ResourceKey MenuFontWeightKey { get; }
    public static FontFamily MessageFontFamily { get; }
    public static ResourceKey MessageFontFamilyKey { get; }
    public static double MessageFontSize { get; }
    public static ResourceKey MessageFontSizeKey { get; }
    public static FontStyle MessageFontStyle { get; }
    public static ResourceKey MessageFontStyleKey { get; }
    public static TextDecorationCollection MessageFontTextDecorations { get; }
    public static ResourceKey MessageFontTextDecorationsKey { get; }
    public static FontWeight MessageFontWeight { get; }
    public static ResourceKey MessageFontWeightKey { get; }
    public static FontFamily SmallCaptionFontFamily { get; }
    public static ResourceKey SmallCaptionFontFamilyKey { get; }
    public static double SmallCaptionFontSize { get; }
    public static ResourceKey SmallCaptionFontSizeKey { get; }
    public static FontStyle SmallCaptionFontStyle { get; }
    public static ResourceKey SmallCaptionFontStyleKey { get; }
    public static TextDecorationCollection SmallCaptionFontTextDecorations { get; }
    public static ResourceKey SmallCaptionFontTextDecorationsKey { get; }
    public static FontWeight SmallCaptionFontWeight { get; }
    public static ResourceKey SmallCaptionFontWeightKey { get; }
    public static FontFamily StatusFontFamily { get; }
    public static ResourceKey StatusFontFamilyKey { get; }
    public static double StatusFontSize { get; }
    public static ResourceKey StatusFontSizeKey { get; }
    public static FontStyle StatusFontStyle { get; }
    public static ResourceKey StatusFontStyleKey { get; }
    public static TextDecorationCollection StatusFontTextDecorations { get; }
    public static ResourceKey StatusFontTextDecorationsKey { get; }
    public static FontWeight StatusFontWeight { get; }
    public static ResourceKey StatusFontWeightKey { get; }
    public static FontFamily get_CaptionFontFamily();
    public static ResourceKey get_CaptionFontFamilyKey();
    public static double get_CaptionFontSize();
    public static ResourceKey get_CaptionFontSizeKey();
    public static FontStyle get_CaptionFontStyle();
    public static ResourceKey get_CaptionFontStyleKey();
    public static TextDecorationCollection get_CaptionFontTextDecorations();
    public static ResourceKey get_CaptionFontTextDecorationsKey();
    public static FontWeight get_CaptionFontWeight();
    public static ResourceKey get_CaptionFontWeightKey();
    public static FontFamily get_IconFontFamily();
    public static ResourceKey get_IconFontFamilyKey();
    public static double get_IconFontSize();
    public static ResourceKey get_IconFontSizeKey();
    public static FontStyle get_IconFontStyle();
    public static ResourceKey get_IconFontStyleKey();
    public static TextDecorationCollection get_IconFontTextDecorations();
    public static ResourceKey get_IconFontTextDecorationsKey();
    public static FontWeight get_IconFontWeight();
    public static ResourceKey get_IconFontWeightKey();
    public static FontFamily get_MenuFontFamily();
    public static ResourceKey get_MenuFontFamilyKey();
    public static double get_MenuFontSize();
    public static ResourceKey get_MenuFontSizeKey();
    public static FontStyle get_MenuFontStyle();
    public static ResourceKey get_MenuFontStyleKey();
    public static TextDecorationCollection get_MenuFontTextDecorations();
    public static ResourceKey get_MenuFontTextDecorationsKey();
    public static FontWeight get_MenuFontWeight();
    public static ResourceKey get_MenuFontWeightKey();
    public static FontFamily get_MessageFontFamily();
    public static ResourceKey get_MessageFontFamilyKey();
    public static double get_MessageFontSize();
    public static ResourceKey get_MessageFontSizeKey();
    public static FontStyle get_MessageFontStyle();
    public static ResourceKey get_MessageFontStyleKey();
    public static TextDecorationCollection get_MessageFontTextDecorations();
    public static ResourceKey get_MessageFontTextDecorationsKey();
    public static FontWeight get_MessageFontWeight();
    public static ResourceKey get_MessageFontWeightKey();
    public static FontFamily get_SmallCaptionFontFamily();
    public static ResourceKey get_SmallCaptionFontFamilyKey();
    public static double get_SmallCaptionFontSize();
    public static ResourceKey get_SmallCaptionFontSizeKey();
    public static FontStyle get_SmallCaptionFontStyle();
    public static ResourceKey get_SmallCaptionFontStyleKey();
    public static TextDecorationCollection get_SmallCaptionFontTextDecorations();
    public static ResourceKey get_SmallCaptionFontTextDecorationsKey();
    public static FontWeight get_SmallCaptionFontWeight();
    public static ResourceKey get_SmallCaptionFontWeightKey();
    public static FontFamily get_StatusFontFamily();
    public static ResourceKey get_StatusFontFamilyKey();
    public static double get_StatusFontSize();
    public static ResourceKey get_StatusFontSizeKey();
    public static FontStyle get_StatusFontStyle();
    public static ResourceKey get_StatusFontStyleKey();
    public static TextDecorationCollection get_StatusFontTextDecorations();
    public static ResourceKey get_StatusFontTextDecorationsKey();
    public static FontWeight get_StatusFontWeight();
    public static ResourceKey get_StatusFontWeightKey();
}
public static class System.Windows.SystemParameters : object {
    public static int Border { get; }
    public static ResourceKey BorderKey { get; }
    public static double BorderWidth { get; }
    public static ResourceKey BorderWidthKey { get; }
    public static double CaptionHeight { get; }
    public static ResourceKey CaptionHeightKey { get; }
    public static double CaptionWidth { get; }
    public static ResourceKey CaptionWidthKey { get; }
    public static double CaretWidth { get; }
    public static ResourceKey CaretWidthKey { get; }
    public static bool ClientAreaAnimation { get; }
    public static ResourceKey ClientAreaAnimationKey { get; }
    public static bool ComboBoxAnimation { get; }
    public static ResourceKey ComboBoxAnimationKey { get; }
    public static PopupAnimation ComboBoxPopupAnimation { get; }
    public static ResourceKey ComboBoxPopupAnimationKey { get; }
    public static double CursorHeight { get; }
    public static ResourceKey CursorHeightKey { get; }
    public static bool CursorShadow { get; }
    public static ResourceKey CursorShadowKey { get; }
    public static double CursorWidth { get; }
    public static ResourceKey CursorWidthKey { get; }
    public static bool DragFullWindows { get; }
    public static ResourceKey DragFullWindowsKey { get; }
    public static bool DropShadow { get; }
    public static ResourceKey DropShadowKey { get; }
    public static double FixedFrameHorizontalBorderHeight { get; }
    public static ResourceKey FixedFrameHorizontalBorderHeightKey { get; }
    public static double FixedFrameVerticalBorderWidth { get; }
    public static ResourceKey FixedFrameVerticalBorderWidthKey { get; }
    public static bool FlatMenu { get; }
    public static ResourceKey FlatMenuKey { get; }
    public static double FocusBorderHeight { get; }
    public static ResourceKey FocusBorderHeightKey { get; }
    public static double FocusBorderWidth { get; }
    public static ResourceKey FocusBorderWidthKey { get; }
    public static double FocusHorizontalBorderHeight { get; }
    public static ResourceKey FocusHorizontalBorderHeightKey { get; }
    public static double FocusVerticalBorderWidth { get; }
    public static ResourceKey FocusVerticalBorderWidthKey { get; }
    public static ResourceKey FocusVisualStyleKey { get; }
    public static int ForegroundFlashCount { get; }
    public static ResourceKey ForegroundFlashCountKey { get; }
    public static double FullPrimaryScreenHeight { get; }
    public static ResourceKey FullPrimaryScreenHeightKey { get; }
    public static double FullPrimaryScreenWidth { get; }
    public static ResourceKey FullPrimaryScreenWidthKey { get; }
    public static bool GradientCaptions { get; }
    public static ResourceKey GradientCaptionsKey { get; }
    public static bool HighContrast { get; }
    public static ResourceKey HighContrastKey { get; }
    public static double HorizontalScrollBarButtonWidth { get; }
    public static ResourceKey HorizontalScrollBarButtonWidthKey { get; }
    public static double HorizontalScrollBarHeight { get; }
    public static ResourceKey HorizontalScrollBarHeightKey { get; }
    public static double HorizontalScrollBarThumbWidth { get; }
    public static ResourceKey HorizontalScrollBarThumbWidthKey { get; }
    public static bool HotTracking { get; }
    public static ResourceKey HotTrackingKey { get; }
    public static double IconGridHeight { get; }
    public static ResourceKey IconGridHeightKey { get; }
    public static double IconGridWidth { get; }
    public static ResourceKey IconGridWidthKey { get; }
    public static double IconHeight { get; }
    public static ResourceKey IconHeightKey { get; }
    public static double IconHorizontalSpacing { get; }
    public static ResourceKey IconHorizontalSpacingKey { get; }
    public static bool IconTitleWrap { get; }
    public static ResourceKey IconTitleWrapKey { get; }
    public static double IconVerticalSpacing { get; }
    public static ResourceKey IconVerticalSpacingKey { get; }
    public static double IconWidth { get; }
    public static ResourceKey IconWidthKey { get; }
    public static bool IsGlassEnabled { get; }
    public static bool IsImmEnabled { get; }
    public static ResourceKey IsImmEnabledKey { get; }
    public static bool IsMediaCenter { get; }
    public static ResourceKey IsMediaCenterKey { get; }
    public static bool IsMenuDropRightAligned { get; }
    public static ResourceKey IsMenuDropRightAlignedKey { get; }
    public static bool IsMiddleEastEnabled { get; }
    public static ResourceKey IsMiddleEastEnabledKey { get; }
    public static bool IsMousePresent { get; }
    public static ResourceKey IsMousePresentKey { get; }
    public static bool IsMouseWheelPresent { get; }
    public static ResourceKey IsMouseWheelPresentKey { get; }
    public static bool IsPenWindows { get; }
    public static ResourceKey IsPenWindowsKey { get; }
    public static bool IsRemotelyControlled { get; }
    public static ResourceKey IsRemotelyControlledKey { get; }
    public static bool IsRemoteSession { get; }
    public static ResourceKey IsRemoteSessionKey { get; }
    public static bool IsSlowMachine { get; }
    public static ResourceKey IsSlowMachineKey { get; }
    public static bool IsTabletPC { get; }
    public static ResourceKey IsTabletPCKey { get; }
    public static double KanjiWindowHeight { get; }
    public static ResourceKey KanjiWindowHeightKey { get; }
    public static bool KeyboardCues { get; }
    public static ResourceKey KeyboardCuesKey { get; }
    public static int KeyboardDelay { get; }
    public static ResourceKey KeyboardDelayKey { get; }
    public static bool KeyboardPreference { get; }
    public static ResourceKey KeyboardPreferenceKey { get; }
    public static int KeyboardSpeed { get; }
    public static ResourceKey KeyboardSpeedKey { get; }
    public static bool ListBoxSmoothScrolling { get; }
    public static ResourceKey ListBoxSmoothScrollingKey { get; }
    public static double MaximizedPrimaryScreenHeight { get; }
    public static ResourceKey MaximizedPrimaryScreenHeightKey { get; }
    public static double MaximizedPrimaryScreenWidth { get; }
    public static ResourceKey MaximizedPrimaryScreenWidthKey { get; }
    public static double MaximumWindowTrackHeight { get; }
    public static ResourceKey MaximumWindowTrackHeightKey { get; }
    public static double MaximumWindowTrackWidth { get; }
    public static ResourceKey MaximumWindowTrackWidthKey { get; }
    public static bool MenuAnimation { get; }
    public static ResourceKey MenuAnimationKey { get; }
    public static double MenuBarHeight { get; }
    public static ResourceKey MenuBarHeightKey { get; }
    public static double MenuButtonHeight { get; }
    public static ResourceKey MenuButtonHeightKey { get; }
    public static double MenuButtonWidth { get; }
    public static ResourceKey MenuButtonWidthKey { get; }
    public static double MenuCheckmarkHeight { get; }
    public static ResourceKey MenuCheckmarkHeightKey { get; }
    public static double MenuCheckmarkWidth { get; }
    public static ResourceKey MenuCheckmarkWidthKey { get; }
    public static bool MenuDropAlignment { get; }
    public static ResourceKey MenuDropAlignmentKey { get; }
    public static bool MenuFade { get; }
    public static ResourceKey MenuFadeKey { get; }
    public static double MenuHeight { get; }
    public static ResourceKey MenuHeightKey { get; }
    public static PopupAnimation MenuPopupAnimation { get; }
    public static ResourceKey MenuPopupAnimationKey { get; }
    public static int MenuShowDelay { get; }
    public static ResourceKey MenuShowDelayKey { get; }
    public static double MenuWidth { get; }
    public static ResourceKey MenuWidthKey { get; }
    public static bool MinimizeAnimation { get; }
    public static ResourceKey MinimizeAnimationKey { get; }
    public static double MinimizedGridHeight { get; }
    public static ResourceKey MinimizedGridHeightKey { get; }
    public static double MinimizedGridWidth { get; }
    public static ResourceKey MinimizedGridWidthKey { get; }
    public static double MinimizedWindowHeight { get; }
    public static ResourceKey MinimizedWindowHeightKey { get; }
    public static double MinimizedWindowWidth { get; }
    public static ResourceKey MinimizedWindowWidthKey { get; }
    public static double MinimumHorizontalDragDistance { get; }
    public static double MinimumVerticalDragDistance { get; }
    public static double MinimumWindowHeight { get; }
    public static ResourceKey MinimumWindowHeightKey { get; }
    public static double MinimumWindowTrackHeight { get; }
    public static ResourceKey MinimumWindowTrackHeightKey { get; }
    public static double MinimumWindowTrackWidth { get; }
    public static ResourceKey MinimumWindowTrackWidthKey { get; }
    public static double MinimumWindowWidth { get; }
    public static ResourceKey MinimumWindowWidthKey { get; }
    public static double MouseHoverHeight { get; }
    public static ResourceKey MouseHoverHeightKey { get; }
    public static TimeSpan MouseHoverTime { get; }
    public static ResourceKey MouseHoverTimeKey { get; }
    public static double MouseHoverWidth { get; }
    public static ResourceKey MouseHoverWidthKey { get; }
    public static ResourceKey NavigationChromeDownLevelStyleKey { get; }
    public static ResourceKey NavigationChromeStyleKey { get; }
    public static PowerLineStatus PowerLineStatus { get; }
    public static ResourceKey PowerLineStatusKey { get; }
    public static double PrimaryScreenHeight { get; }
    public static ResourceKey PrimaryScreenHeightKey { get; }
    public static double PrimaryScreenWidth { get; }
    public static ResourceKey PrimaryScreenWidthKey { get; }
    public static double ResizeFrameHorizontalBorderHeight { get; }
    public static ResourceKey ResizeFrameHorizontalBorderHeightKey { get; }
    public static double ResizeFrameVerticalBorderWidth { get; }
    public static ResourceKey ResizeFrameVerticalBorderWidthKey { get; }
    public static double ScrollHeight { get; }
    public static ResourceKey ScrollHeightKey { get; }
    public static double ScrollWidth { get; }
    public static ResourceKey ScrollWidthKey { get; }
    public static bool SelectionFade { get; }
    public static ResourceKey SelectionFadeKey { get; }
    public static bool ShowSounds { get; }
    public static ResourceKey ShowSoundsKey { get; }
    public static double SmallCaptionHeight { get; }
    public static ResourceKey SmallCaptionHeightKey { get; }
    public static double SmallCaptionWidth { get; }
    public static ResourceKey SmallCaptionWidthKey { get; }
    public static double SmallIconHeight { get; }
    public static ResourceKey SmallIconHeightKey { get; }
    public static double SmallIconWidth { get; }
    public static ResourceKey SmallIconWidthKey { get; }
    public static double SmallWindowCaptionButtonHeight { get; }
    public static ResourceKey SmallWindowCaptionButtonHeightKey { get; }
    public static double SmallWindowCaptionButtonWidth { get; }
    public static ResourceKey SmallWindowCaptionButtonWidthKey { get; }
    public static bool SnapToDefaultButton { get; }
    public static ResourceKey SnapToDefaultButtonKey { get; }
    public static bool StylusHotTracking { get; }
    public static ResourceKey StylusHotTrackingKey { get; }
    public static bool SwapButtons { get; }
    public static ResourceKey SwapButtonsKey { get; }
    public static double ThickHorizontalBorderHeight { get; }
    public static ResourceKey ThickHorizontalBorderHeightKey { get; }
    public static double ThickVerticalBorderWidth { get; }
    public static ResourceKey ThickVerticalBorderWidthKey { get; }
    public static double ThinHorizontalBorderHeight { get; }
    public static ResourceKey ThinHorizontalBorderHeightKey { get; }
    public static double ThinVerticalBorderWidth { get; }
    public static ResourceKey ThinVerticalBorderWidthKey { get; }
    public static bool ToolTipAnimation { get; }
    public static ResourceKey ToolTipAnimationKey { get; }
    public static bool ToolTipFade { get; }
    public static ResourceKey ToolTipFadeKey { get; }
    public static PopupAnimation ToolTipPopupAnimation { get; }
    public static ResourceKey ToolTipPopupAnimationKey { get; }
    public static bool UIEffects { get; }
    public static ResourceKey UIEffectsKey { get; }
    public static string UxThemeColor { get; }
    public static string UxThemeName { get; }
    public static double VerticalScrollBarButtonHeight { get; }
    public static ResourceKey VerticalScrollBarButtonHeightKey { get; }
    public static double VerticalScrollBarThumbHeight { get; }
    public static ResourceKey VerticalScrollBarThumbHeightKey { get; }
    public static double VerticalScrollBarWidth { get; }
    public static ResourceKey VerticalScrollBarWidthKey { get; }
    public static double VirtualScreenHeight { get; }
    public static ResourceKey VirtualScreenHeightKey { get; }
    public static double VirtualScreenLeft { get; }
    public static ResourceKey VirtualScreenLeftKey { get; }
    public static double VirtualScreenTop { get; }
    public static ResourceKey VirtualScreenTopKey { get; }
    public static double VirtualScreenWidth { get; }
    public static ResourceKey VirtualScreenWidthKey { get; }
    public static int WheelScrollLines { get; }
    public static ResourceKey WheelScrollLinesKey { get; }
    public static double WindowCaptionButtonHeight { get; }
    public static ResourceKey WindowCaptionButtonHeightKey { get; }
    public static double WindowCaptionButtonWidth { get; }
    public static ResourceKey WindowCaptionButtonWidthKey { get; }
    public static double WindowCaptionHeight { get; }
    public static ResourceKey WindowCaptionHeightKey { get; }
    public static CornerRadius WindowCornerRadius { get; }
    public static Brush WindowGlassBrush { get; }
    public static Color WindowGlassColor { get; }
    public static Thickness WindowNonClientFrameThickness { get; }
    public static Thickness WindowResizeBorderThickness { get; }
    public static Rect WorkArea { get; }
    public static ResourceKey WorkAreaKey { get; }
    public static int get_Border();
    public static ResourceKey get_BorderKey();
    public static double get_BorderWidth();
    public static ResourceKey get_BorderWidthKey();
    public static double get_CaptionHeight();
    public static ResourceKey get_CaptionHeightKey();
    public static double get_CaptionWidth();
    public static ResourceKey get_CaptionWidthKey();
    public static double get_CaretWidth();
    public static ResourceKey get_CaretWidthKey();
    public static bool get_ClientAreaAnimation();
    public static ResourceKey get_ClientAreaAnimationKey();
    public static bool get_ComboBoxAnimation();
    public static ResourceKey get_ComboBoxAnimationKey();
    public static PopupAnimation get_ComboBoxPopupAnimation();
    public static ResourceKey get_ComboBoxPopupAnimationKey();
    public static double get_CursorHeight();
    public static ResourceKey get_CursorHeightKey();
    public static bool get_CursorShadow();
    public static ResourceKey get_CursorShadowKey();
    public static double get_CursorWidth();
    public static ResourceKey get_CursorWidthKey();
    public static bool get_DragFullWindows();
    public static ResourceKey get_DragFullWindowsKey();
    public static bool get_DropShadow();
    public static ResourceKey get_DropShadowKey();
    public static double get_FixedFrameHorizontalBorderHeight();
    public static ResourceKey get_FixedFrameHorizontalBorderHeightKey();
    public static double get_FixedFrameVerticalBorderWidth();
    public static ResourceKey get_FixedFrameVerticalBorderWidthKey();
    public static bool get_FlatMenu();
    public static ResourceKey get_FlatMenuKey();
    public static double get_FocusBorderHeight();
    public static ResourceKey get_FocusBorderHeightKey();
    public static double get_FocusBorderWidth();
    public static ResourceKey get_FocusBorderWidthKey();
    public static double get_FocusHorizontalBorderHeight();
    public static ResourceKey get_FocusHorizontalBorderHeightKey();
    public static double get_FocusVerticalBorderWidth();
    public static ResourceKey get_FocusVerticalBorderWidthKey();
    public static ResourceKey get_FocusVisualStyleKey();
    public static int get_ForegroundFlashCount();
    public static ResourceKey get_ForegroundFlashCountKey();
    public static double get_FullPrimaryScreenHeight();
    public static ResourceKey get_FullPrimaryScreenHeightKey();
    public static double get_FullPrimaryScreenWidth();
    public static ResourceKey get_FullPrimaryScreenWidthKey();
    public static bool get_GradientCaptions();
    public static ResourceKey get_GradientCaptionsKey();
    public static bool get_HighContrast();
    public static ResourceKey get_HighContrastKey();
    public static double get_HorizontalScrollBarButtonWidth();
    public static ResourceKey get_HorizontalScrollBarButtonWidthKey();
    public static double get_HorizontalScrollBarHeight();
    public static ResourceKey get_HorizontalScrollBarHeightKey();
    public static double get_HorizontalScrollBarThumbWidth();
    public static ResourceKey get_HorizontalScrollBarThumbWidthKey();
    public static bool get_HotTracking();
    public static ResourceKey get_HotTrackingKey();
    public static double get_IconGridHeight();
    public static ResourceKey get_IconGridHeightKey();
    public static double get_IconGridWidth();
    public static ResourceKey get_IconGridWidthKey();
    public static double get_IconHeight();
    public static ResourceKey get_IconHeightKey();
    public static double get_IconHorizontalSpacing();
    public static ResourceKey get_IconHorizontalSpacingKey();
    public static bool get_IconTitleWrap();
    public static ResourceKey get_IconTitleWrapKey();
    public static double get_IconVerticalSpacing();
    public static ResourceKey get_IconVerticalSpacingKey();
    public static double get_IconWidth();
    public static ResourceKey get_IconWidthKey();
    public static bool get_IsGlassEnabled();
    public static bool get_IsImmEnabled();
    public static ResourceKey get_IsImmEnabledKey();
    public static bool get_IsMediaCenter();
    public static ResourceKey get_IsMediaCenterKey();
    public static bool get_IsMenuDropRightAligned();
    public static ResourceKey get_IsMenuDropRightAlignedKey();
    public static bool get_IsMiddleEastEnabled();
    public static ResourceKey get_IsMiddleEastEnabledKey();
    public static bool get_IsMousePresent();
    public static ResourceKey get_IsMousePresentKey();
    public static bool get_IsMouseWheelPresent();
    public static ResourceKey get_IsMouseWheelPresentKey();
    public static bool get_IsPenWindows();
    public static ResourceKey get_IsPenWindowsKey();
    public static bool get_IsRemotelyControlled();
    public static ResourceKey get_IsRemotelyControlledKey();
    public static bool get_IsRemoteSession();
    public static ResourceKey get_IsRemoteSessionKey();
    public static bool get_IsSlowMachine();
    public static ResourceKey get_IsSlowMachineKey();
    public static bool get_IsTabletPC();
    public static ResourceKey get_IsTabletPCKey();
    public static double get_KanjiWindowHeight();
    public static ResourceKey get_KanjiWindowHeightKey();
    public static bool get_KeyboardCues();
    public static ResourceKey get_KeyboardCuesKey();
    public static int get_KeyboardDelay();
    public static ResourceKey get_KeyboardDelayKey();
    public static bool get_KeyboardPreference();
    public static ResourceKey get_KeyboardPreferenceKey();
    public static int get_KeyboardSpeed();
    public static ResourceKey get_KeyboardSpeedKey();
    public static bool get_ListBoxSmoothScrolling();
    public static ResourceKey get_ListBoxSmoothScrollingKey();
    public static double get_MaximizedPrimaryScreenHeight();
    public static ResourceKey get_MaximizedPrimaryScreenHeightKey();
    public static double get_MaximizedPrimaryScreenWidth();
    public static ResourceKey get_MaximizedPrimaryScreenWidthKey();
    public static double get_MaximumWindowTrackHeight();
    public static ResourceKey get_MaximumWindowTrackHeightKey();
    public static double get_MaximumWindowTrackWidth();
    public static ResourceKey get_MaximumWindowTrackWidthKey();
    public static bool get_MenuAnimation();
    public static ResourceKey get_MenuAnimationKey();
    public static double get_MenuBarHeight();
    public static ResourceKey get_MenuBarHeightKey();
    public static double get_MenuButtonHeight();
    public static ResourceKey get_MenuButtonHeightKey();
    public static double get_MenuButtonWidth();
    public static ResourceKey get_MenuButtonWidthKey();
    public static double get_MenuCheckmarkHeight();
    public static ResourceKey get_MenuCheckmarkHeightKey();
    public static double get_MenuCheckmarkWidth();
    public static ResourceKey get_MenuCheckmarkWidthKey();
    public static bool get_MenuDropAlignment();
    public static ResourceKey get_MenuDropAlignmentKey();
    public static bool get_MenuFade();
    public static ResourceKey get_MenuFadeKey();
    public static double get_MenuHeight();
    public static ResourceKey get_MenuHeightKey();
    public static PopupAnimation get_MenuPopupAnimation();
    public static ResourceKey get_MenuPopupAnimationKey();
    public static int get_MenuShowDelay();
    public static ResourceKey get_MenuShowDelayKey();
    public static double get_MenuWidth();
    public static ResourceKey get_MenuWidthKey();
    public static bool get_MinimizeAnimation();
    public static ResourceKey get_MinimizeAnimationKey();
    public static double get_MinimizedGridHeight();
    public static ResourceKey get_MinimizedGridHeightKey();
    public static double get_MinimizedGridWidth();
    public static ResourceKey get_MinimizedGridWidthKey();
    public static double get_MinimizedWindowHeight();
    public static ResourceKey get_MinimizedWindowHeightKey();
    public static double get_MinimizedWindowWidth();
    public static ResourceKey get_MinimizedWindowWidthKey();
    public static double get_MinimumHorizontalDragDistance();
    public static double get_MinimumVerticalDragDistance();
    public static double get_MinimumWindowHeight();
    public static ResourceKey get_MinimumWindowHeightKey();
    public static double get_MinimumWindowTrackHeight();
    public static ResourceKey get_MinimumWindowTrackHeightKey();
    public static double get_MinimumWindowTrackWidth();
    public static ResourceKey get_MinimumWindowTrackWidthKey();
    public static double get_MinimumWindowWidth();
    public static ResourceKey get_MinimumWindowWidthKey();
    public static double get_MouseHoverHeight();
    public static ResourceKey get_MouseHoverHeightKey();
    public static TimeSpan get_MouseHoverTime();
    public static ResourceKey get_MouseHoverTimeKey();
    public static double get_MouseHoverWidth();
    public static ResourceKey get_MouseHoverWidthKey();
    public static ResourceKey get_NavigationChromeDownLevelStyleKey();
    public static ResourceKey get_NavigationChromeStyleKey();
    public static PowerLineStatus get_PowerLineStatus();
    public static ResourceKey get_PowerLineStatusKey();
    public static double get_PrimaryScreenHeight();
    public static ResourceKey get_PrimaryScreenHeightKey();
    public static double get_PrimaryScreenWidth();
    public static ResourceKey get_PrimaryScreenWidthKey();
    public static double get_ResizeFrameHorizontalBorderHeight();
    public static ResourceKey get_ResizeFrameHorizontalBorderHeightKey();
    public static double get_ResizeFrameVerticalBorderWidth();
    public static ResourceKey get_ResizeFrameVerticalBorderWidthKey();
    public static double get_ScrollHeight();
    public static ResourceKey get_ScrollHeightKey();
    public static double get_ScrollWidth();
    public static ResourceKey get_ScrollWidthKey();
    public static bool get_SelectionFade();
    public static ResourceKey get_SelectionFadeKey();
    public static bool get_ShowSounds();
    public static ResourceKey get_ShowSoundsKey();
    public static double get_SmallCaptionHeight();
    public static ResourceKey get_SmallCaptionHeightKey();
    public static double get_SmallCaptionWidth();
    public static ResourceKey get_SmallCaptionWidthKey();
    public static double get_SmallIconHeight();
    public static ResourceKey get_SmallIconHeightKey();
    public static double get_SmallIconWidth();
    public static ResourceKey get_SmallIconWidthKey();
    public static double get_SmallWindowCaptionButtonHeight();
    public static ResourceKey get_SmallWindowCaptionButtonHeightKey();
    public static double get_SmallWindowCaptionButtonWidth();
    public static ResourceKey get_SmallWindowCaptionButtonWidthKey();
    public static bool get_SnapToDefaultButton();
    public static ResourceKey get_SnapToDefaultButtonKey();
    public static bool get_StylusHotTracking();
    public static ResourceKey get_StylusHotTrackingKey();
    public static bool get_SwapButtons();
    public static ResourceKey get_SwapButtonsKey();
    public static double get_ThickHorizontalBorderHeight();
    public static ResourceKey get_ThickHorizontalBorderHeightKey();
    public static double get_ThickVerticalBorderWidth();
    public static ResourceKey get_ThickVerticalBorderWidthKey();
    public static double get_ThinHorizontalBorderHeight();
    public static ResourceKey get_ThinHorizontalBorderHeightKey();
    public static double get_ThinVerticalBorderWidth();
    public static ResourceKey get_ThinVerticalBorderWidthKey();
    public static bool get_ToolTipAnimation();
    public static ResourceKey get_ToolTipAnimationKey();
    public static bool get_ToolTipFade();
    public static ResourceKey get_ToolTipFadeKey();
    public static PopupAnimation get_ToolTipPopupAnimation();
    public static ResourceKey get_ToolTipPopupAnimationKey();
    public static bool get_UIEffects();
    public static ResourceKey get_UIEffectsKey();
    public static string get_UxThemeColor();
    public static string get_UxThemeName();
    public static double get_VerticalScrollBarButtonHeight();
    public static ResourceKey get_VerticalScrollBarButtonHeightKey();
    public static double get_VerticalScrollBarThumbHeight();
    public static ResourceKey get_VerticalScrollBarThumbHeightKey();
    public static double get_VerticalScrollBarWidth();
    public static ResourceKey get_VerticalScrollBarWidthKey();
    public static double get_VirtualScreenHeight();
    public static ResourceKey get_VirtualScreenHeightKey();
    public static double get_VirtualScreenLeft();
    public static ResourceKey get_VirtualScreenLeftKey();
    public static double get_VirtualScreenTop();
    public static ResourceKey get_VirtualScreenTopKey();
    public static double get_VirtualScreenWidth();
    public static ResourceKey get_VirtualScreenWidthKey();
    public static int get_WheelScrollLines();
    public static ResourceKey get_WheelScrollLinesKey();
    public static double get_WindowCaptionButtonHeight();
    public static ResourceKey get_WindowCaptionButtonHeightKey();
    public static double get_WindowCaptionButtonWidth();
    public static ResourceKey get_WindowCaptionButtonWidthKey();
    public static double get_WindowCaptionHeight();
    public static ResourceKey get_WindowCaptionHeightKey();
    public static CornerRadius get_WindowCornerRadius();
    public static Brush get_WindowGlassBrush();
    public static Color get_WindowGlassColor();
    public static Thickness get_WindowNonClientFrameThickness();
    public static Thickness get_WindowResizeBorderThickness();
    public static Rect get_WorkArea();
    public static ResourceKey get_WorkAreaKey();
    public static void add_StaticPropertyChanged(PropertyChangedEventHandler value);
    public static void remove_StaticPropertyChanged(PropertyChangedEventHandler value);
}
[TypeConverterAttribute("System.Windows.TemplateBindingExpressionConverter")]
public class System.Windows.TemplateBindingExpression : Expression {
    public TemplateBindingExtension TemplateBindingExtension { get; }
    public TemplateBindingExtension get_TemplateBindingExtension();
}
public class System.Windows.TemplateBindingExpressionConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("System.Windows.TemplateBindingExtensionConverter")]
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.TemplateBindingExtension : MarkupExtension {
    [DefaultValueAttribute("")]
public IValueConverter Converter { get; public set; }
    [DefaultValueAttribute("")]
public object ConverterParameter { get; public set; }
    [ConstructorArgumentAttribute("property")]
public DependencyProperty Property { get; public set; }
    public TemplateBindingExtension(DependencyProperty property);
    public IValueConverter get_Converter();
    public void set_Converter(IValueConverter value);
    public object get_ConverterParameter();
    public void set_ConverterParameter(object value);
    public DependencyProperty get_Property();
    public void set_Property(DependencyProperty value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Windows.TemplateBindingExtensionConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[XamlDeferLoadAttribute("System.Windows.TemplateContentLoader", "System.Windows.FrameworkElement")]
public class System.Windows.TemplateContent : object {
}
public class System.Windows.TemplateContentLoader : XamlDeferringLoader {
    public virtual object Load(XamlReader xamlReader, IServiceProvider serviceProvider);
    public virtual XamlReader Save(object value, IServiceProvider serviceProvider);
}
[TypeConverterAttribute("System.Windows.Markup.TemplateKeyConverter")]
public abstract class System.Windows.TemplateKey : ResourceKey {
    public Assembly Assembly { get; }
    public object DataType { get; public set; }
    protected TemplateKey(TemplateType templateType);
    protected TemplateKey(TemplateType templateType, object dataType);
    public virtual Assembly get_Assembly();
    public object get_DataType();
    public void set_DataType(object value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
public class System.Windows.TemplatePartAttribute : Attribute {
    public string Name { get; public set; }
    public Type Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.TemplateVisualStateAttribute : Attribute {
    public string GroupName { get; public set; }
    public string Name { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    public string get_Name();
    public void set_Name(string value);
}
[MarkupExtensionReturnTypeAttribute("System.Uri")]
public class System.Windows.ThemeDictionaryExtension : MarkupExtension {
    public string AssemblyName { get; public set; }
    public ThemeDictionaryExtension(string assemblyName);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("1")]
public class System.Windows.ThemeInfoAttribute : Attribute {
    public ResourceDictionaryLocation GenericDictionaryLocation { get; }
    public ResourceDictionaryLocation ThemeDictionaryLocation { get; }
    public ThemeInfoAttribute(ResourceDictionaryLocation themeDictionaryLocation, ResourceDictionaryLocation genericDictionaryLocation);
    public ResourceDictionaryLocation get_GenericDictionaryLocation();
    public ResourceDictionaryLocation get_ThemeDictionaryLocation();
}
[TypeConverterAttribute("System.Windows.ThicknessConverter")]
[LocalizabilityAttribute("0")]
public class System.Windows.Thickness : ValueType {
    public double Bottom { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public Thickness(double uniformLength);
    public Thickness(double left, double top, double right, double bottom);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Top();
    public void set_Top(double value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Thickness thickness);
    public virtual int GetHashCode();
    public static bool op_Equality(Thickness t1, Thickness t2);
    public static bool op_Inequality(Thickness t1, Thickness t2);
    public virtual string ToString();
}
public class System.Windows.ThicknessConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext typeDescriptorContext, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext typeDescriptorContext, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object source);
    public virtual object ConvertTo(ITypeDescriptorContext typeDescriptorContext, CultureInfo cultureInfo, object value, Type destinationType);
}
[ContentPropertyAttribute("Setters")]
[XamlSetTypeConverterAttribute("ReceiveTypeConverter")]
public class System.Windows.Trigger : TriggerBase {
    [LocalizabilityAttribute("0")]
[AmbientAttribute]
public DependencyProperty Property { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public SetterBaseCollection Setters { get; }
    [DefaultValueAttribute("")]
[AmbientAttribute]
public string SourceName { get; public set; }
    [TypeConverterAttribute("System.Windows.Markup.SetterTriggerConditionValueConverter")]
[LocalizabilityAttribute("0")]
[DependsOnAttribute("Property")]
[DependsOnAttribute("SourceName")]
public object Value { get; public set; }
    public DependencyProperty get_Property();
    public void set_Property(DependencyProperty value);
    public SetterBaseCollection get_Setters();
    public string get_SourceName();
    public void set_SourceName(string value);
    public object get_Value();
    public void set_Value(object value);
    public static void ReceiveTypeConverter(object targetObject, XamlSetTypeConverterEventArgs eventArgs);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private sealed virtual override void System.Windows.Markup.IAddChild.AddChild(object value);
    private sealed virtual override void System.Windows.Markup.IAddChild.AddText(string text);
}
public abstract class System.Windows.TriggerAction : DependencyObject {
}
[DefaultMemberAttribute("Item")]
public class System.Windows.TriggerActionCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TriggerAction Item { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public TriggerActionCollection(int initialSize);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TriggerAction get_Item(int index);
    public sealed virtual void set_Item(int index, TriggerAction value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void Add(TriggerAction value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TriggerAction value);
    public sealed virtual void CopyTo(TriggerAction[] array, int index);
    [CLSCompliantAttribute("False")]
public sealed virtual IEnumerator`1<TriggerAction> GetEnumerator();
    public sealed virtual int IndexOf(TriggerAction value);
    public sealed virtual void Insert(int index, TriggerAction value);
    public sealed virtual bool Remove(TriggerAction value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[LocalizabilityAttribute("0")]
public abstract class System.Windows.TriggerBase : DependencyObject {
    [DesignerSerializationVisibilityAttribute("2")]
public TriggerActionCollection EnterActions { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public TriggerActionCollection ExitActions { get; }
    public TriggerActionCollection get_EnterActions();
    public TriggerActionCollection get_ExitActions();
}
[LocalizabilityAttribute("0")]
public class System.Windows.TriggerCollection : Collection`1<TriggerBase> {
    public bool IsSealed { get; }
    public bool get_IsSealed();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, TriggerBase item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TriggerBase item);
}
public class System.Windows.ValueSource : ValueType {
    public BaseValueSource BaseValueSource { get; }
    public bool IsAnimated { get; }
    public bool IsCoerced { get; }
    public bool IsCurrent { get; }
    public bool IsExpression { get; }
    public BaseValueSource get_BaseValueSource();
    public bool get_IsAnimated();
    public bool get_IsCoerced();
    public bool get_IsCurrent();
    public bool get_IsExpression();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(ValueSource vs1, ValueSource vs2);
    public static bool op_Inequality(ValueSource vs1, ValueSource vs2);
}
[LocalizabilityAttribute("0")]
public enum System.Windows.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
    public static VerticalAlignment Stretch;
}
[ContentPropertyAttribute("Storyboard")]
[RuntimeNamePropertyAttribute("Name")]
public class System.Windows.VisualState : DependencyObject {
    public string Name { get; public set; }
    public Storyboard Storyboard { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public Storyboard get_Storyboard();
    public void set_Storyboard(Storyboard value);
}
public class System.Windows.VisualStateChangedEventArgs : EventArgs {
    public FrameworkElement Control { get; }
    public VisualState NewState { get; }
    public VisualState OldState { get; }
    public FrameworkElement StateGroupsRoot { get; }
    public FrameworkElement get_Control();
    public VisualState get_NewState();
    public VisualState get_OldState();
    public FrameworkElement get_StateGroupsRoot();
}
[ContentPropertyAttribute("States")]
[RuntimeNamePropertyAttribute("Name")]
public class System.Windows.VisualStateGroup : DependencyObject {
    public VisualState CurrentState { get; }
    public string Name { get; public set; }
    public IList States { get; }
    public IList Transitions { get; }
    public VisualState get_CurrentState();
    public string get_Name();
    public void set_Name(string value);
    public IList get_States();
    public IList get_Transitions();
    public void add_CurrentStateChanged(EventHandler`1<VisualStateChangedEventArgs> value);
    public void remove_CurrentStateChanged(EventHandler`1<VisualStateChangedEventArgs> value);
    public void add_CurrentStateChanging(EventHandler`1<VisualStateChangedEventArgs> value);
    public void remove_CurrentStateChanging(EventHandler`1<VisualStateChangedEventArgs> value);
}
public class System.Windows.VisualStateManager : DependencyObject {
    public static DependencyProperty CustomVisualStateManagerProperty;
    public static DependencyProperty VisualStateGroupsProperty;
    public static VisualStateManager GetCustomVisualStateManager(FrameworkElement obj);
    [DesignerSerializationVisibilityAttribute("2")]
public static IList GetVisualStateGroups(FrameworkElement obj);
    public static bool GoToElementState(FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);
    public static bool GoToState(FrameworkElement control, string stateName, bool useTransitions);
    protected virtual bool GoToStateCore(FrameworkElement control, FrameworkElement stateGroupsRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions);
    protected void RaiseCurrentStateChanged(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, FrameworkElement control, FrameworkElement stateGroupsRoot);
    protected void RaiseCurrentStateChanging(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, FrameworkElement control, FrameworkElement stateGroupsRoot);
    public static void SetCustomVisualStateManager(FrameworkElement obj, VisualStateManager value);
}
[ContentPropertyAttribute("Storyboard")]
public class System.Windows.VisualTransition : DependencyObject {
    public string From { get; public set; }
    [TypeConverterAttribute("System.Windows.DurationConverter")]
public Duration GeneratedDuration { get; public set; }
    public IEasingFunction GeneratedEasingFunction { get; public set; }
    public Storyboard Storyboard { get; public set; }
    public string To { get; public set; }
    public string get_From();
    public void set_From(string value);
    public Duration get_GeneratedDuration();
    public void set_GeneratedDuration(Duration value);
    public IEasingFunction get_GeneratedEasingFunction();
    public void set_GeneratedEasingFunction(IEasingFunction value);
    public Storyboard get_Storyboard();
    public void set_Storyboard(Storyboard value);
    public string get_To();
    public void set_To(string value);
}
[LocalizabilityAttribute("16")]
public class System.Windows.Window : ContentControl {
    public static DependencyProperty AllowsTransparencyProperty;
    public static RoutedEvent DpiChangedEvent;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IsActiveProperty;
    public static DependencyProperty LeftProperty;
    public static DependencyProperty ResizeModeProperty;
    public static DependencyProperty ShowActivatedProperty;
    public static DependencyProperty ShowInTaskbarProperty;
    public static DependencyProperty SizeToContentProperty;
    public static DependencyProperty TaskbarItemInfoProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty TopmostProperty;
    public static DependencyProperty TopProperty;
    public static DependencyProperty WindowStateProperty;
    public static DependencyProperty WindowStyleProperty;
    public bool AllowsTransparency { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Windows.DialogResultConverter")]
public Nullable`1<bool> DialogResult { get; public set; }
    public ImageSource Icon { get; public set; }
    public bool IsActive { get; }
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public double Left { get; public set; }
    protected internal IEnumerator LogicalChildren { get; }
    public WindowCollection OwnedWindows { get; }
    [DefaultValueAttribute("")]
public Window Owner { get; public set; }
    public ResizeMode ResizeMode { get; public set; }
    public Rect RestoreBounds { get; }
    public bool ShowActivated { get; public set; }
    public bool ShowInTaskbar { get; public set; }
    public SizeToContent SizeToContent { get; public set; }
    public TaskbarItemInfo TaskbarItemInfo { get; public set; }
    [LocalizabilityAttribute("2")]
public string Title { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public double Top { get; public set; }
    public bool Topmost { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public WindowStartupLocation WindowStartupLocation { get; public set; }
    public WindowState WindowState { get; public set; }
    public WindowStyle WindowStyle { get; public set; }
    public bool get_AllowsTransparency();
    public void set_AllowsTransparency(bool value);
    public Nullable`1<bool> get_DialogResult();
    public void set_DialogResult(Nullable`1<bool> value);
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public bool get_IsActive();
    public double get_Left();
    public void set_Left(double value);
    protected internal virtual IEnumerator get_LogicalChildren();
    public WindowCollection get_OwnedWindows();
    public Window get_Owner();
    public void set_Owner(Window value);
    public ResizeMode get_ResizeMode();
    public void set_ResizeMode(ResizeMode value);
    public Rect get_RestoreBounds();
    public bool get_ShowActivated();
    public void set_ShowActivated(bool value);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public SizeToContent get_SizeToContent();
    public void set_SizeToContent(SizeToContent value);
    public TaskbarItemInfo get_TaskbarItemInfo();
    public void set_TaskbarItemInfo(TaskbarItemInfo value);
    public string get_Title();
    public void set_Title(string value);
    public double get_Top();
    public void set_Top(double value);
    public bool get_Topmost();
    public void set_Topmost(bool value);
    public WindowStartupLocation get_WindowStartupLocation();
    public void set_WindowStartupLocation(WindowStartupLocation value);
    public WindowState get_WindowState();
    public void set_WindowState(WindowState value);
    public WindowStyle get_WindowStyle();
    public void set_WindowStyle(WindowStyle value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public void add_Closing(CancelEventHandler value);
    public void remove_Closing(CancelEventHandler value);
    public void add_ContentRendered(EventHandler value);
    public void remove_ContentRendered(EventHandler value);
    public void add_Deactivated(EventHandler value);
    public void remove_Deactivated(EventHandler value);
    public void add_DpiChanged(DpiChangedEventHandler value);
    public void remove_DpiChanged(DpiChangedEventHandler value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public void add_SourceInitialized(EventHandler value);
    public void remove_SourceInitialized(EventHandler value);
    public void add_StateChanged(EventHandler value);
    public void remove_StateChanged(EventHandler value);
    public bool Activate();
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    public void Close();
    public void DragMove();
    public static Window GetWindow(DependencyObject dependencyObject);
    public void Hide();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnActivated(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual void OnContentRendered(EventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDeactivated(EventArgs e);
    protected virtual void OnDpiChanged(DpiScale oldDpi, DpiScale newDpi);
    protected virtual void OnLocationChanged(EventArgs e);
    protected virtual void OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs e);
    protected virtual void OnSourceInitialized(EventArgs e);
    protected virtual void OnStateChanged(EventArgs e);
    protected internal virtual void OnVisualChildrenChanged(DependencyObject visualAdded, DependencyObject visualRemoved);
    protected internal sealed virtual void OnVisualParentChanged(DependencyObject oldParent);
    public void Show();
    public Nullable`1<bool> ShowDialog();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.WindowCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public Window Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public Window get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public void CopyTo(Window[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[LocalizabilityAttribute("0")]
public enum System.Windows.WindowStartupLocation : Enum {
    public int value__;
    public static WindowStartupLocation Manual;
    public static WindowStartupLocation CenterScreen;
    public static WindowStartupLocation CenterOwner;
}
public enum System.Windows.WindowState : Enum {
    public int value__;
    public static WindowState Normal;
    public static WindowState Minimized;
    public static WindowState Maximized;
}
public enum System.Windows.WindowStyle : Enum {
    public int value__;
    public static WindowStyle None;
    public static WindowStyle SingleBorderWindow;
    public static WindowStyle ThreeDBorderWindow;
    public static WindowStyle ToolWindow;
}
public enum System.Windows.WrapDirection : Enum {
    public int value__;
    public static WrapDirection None;
    public static WrapDirection Left;
    public static WrapDirection Right;
    public static WrapDirection Both;
}
