public enum System.Printing.Collation : Enum {
    public int value__;
    public static Collation Unknown;
    public static Collation Collated;
    public static Collation Uncollated;
}
public enum System.Printing.ConflictStatus : Enum {
    public int value__;
    public static ConflictStatus NoConflict;
    public static ConflictStatus ConflictResolved;
}
public enum System.Printing.DeviceFontSubstitution : Enum {
    public int value__;
    public static DeviceFontSubstitution Unknown;
    public static DeviceFontSubstitution Off;
    public static DeviceFontSubstitution On;
}
public enum System.Printing.Duplexing : Enum {
    public int value__;
    public static Duplexing Unknown;
    public static Duplexing OneSided;
    public static Duplexing TwoSidedShortEdge;
    public static Duplexing TwoSidedLongEdge;
}
public enum System.Printing.InputBin : Enum {
    public int value__;
    public static InputBin Unknown;
    public static InputBin AutoSelect;
    public static InputBin Cassette;
    public static InputBin Tractor;
    public static InputBin AutoSheetFeeder;
    public static InputBin Manual;
}
public enum System.Printing.Interop.BaseDevModeType : Enum {
    public int value__;
    public static BaseDevModeType UserDefault;
    public static BaseDevModeType PrinterDefault;
}
public class System.Printing.Interop.PrintTicketConverter : object {
    public static int MaxPrintSchemaVersion { get; }
    public PrintTicketConverter(string deviceName, int clientPrintSchemaVersion);
    public static int get_MaxPrintSchemaVersion();
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode);
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
}
public enum System.Printing.OutputColor : Enum {
    public int value__;
    public static OutputColor Unknown;
    public static OutputColor Color;
    public static OutputColor Grayscale;
    public static OutputColor Monochrome;
}
public enum System.Printing.OutputQuality : Enum {
    public int value__;
    public static OutputQuality Unknown;
    public static OutputQuality Automatic;
    public static OutputQuality Draft;
    public static OutputQuality Fax;
    public static OutputQuality High;
    public static OutputQuality Normal;
    public static OutputQuality Photographic;
    public static OutputQuality Text;
}
public enum System.Printing.PageBorderless : Enum {
    public int value__;
    public static PageBorderless Unknown;
    public static PageBorderless Borderless;
    public static PageBorderless None;
}
public class System.Printing.PageImageableArea : object {
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double OriginHeight { get; }
    public double OriginWidth { get; }
    public double get_ExtentHeight();
    public double get_ExtentWidth();
    public double get_OriginHeight();
    public double get_OriginWidth();
    public virtual string ToString();
}
public class System.Printing.PageMediaSize : object {
    public Nullable`1<double> Height { get; }
    public Nullable`1<PageMediaSizeName> PageMediaSizeName { get; }
    public Nullable`1<double> Width { get; }
    public PageMediaSize(double width, double height);
    public PageMediaSize(PageMediaSizeName mediaSizeName);
    public PageMediaSize(PageMediaSizeName mediaSizeName, double width, double height);
    public Nullable`1<double> get_Height();
    public Nullable`1<PageMediaSizeName> get_PageMediaSizeName();
    public Nullable`1<double> get_Width();
    public virtual string ToString();
}
public enum System.Printing.PageMediaSizeName : Enum {
    public int value__;
    public static PageMediaSizeName Unknown;
    public static PageMediaSizeName ISOA0;
    public static PageMediaSizeName ISOA1;
    public static PageMediaSizeName ISOA10;
    public static PageMediaSizeName ISOA2;
    public static PageMediaSizeName ISOA3;
    public static PageMediaSizeName ISOA3Rotated;
    public static PageMediaSizeName ISOA3Extra;
    public static PageMediaSizeName ISOA4;
    public static PageMediaSizeName ISOA4Rotated;
    public static PageMediaSizeName ISOA4Extra;
    public static PageMediaSizeName ISOA5;
    public static PageMediaSizeName ISOA5Rotated;
    public static PageMediaSizeName ISOA5Extra;
    public static PageMediaSizeName ISOA6;
    public static PageMediaSizeName ISOA6Rotated;
    public static PageMediaSizeName ISOA7;
    public static PageMediaSizeName ISOA8;
    public static PageMediaSizeName ISOA9;
    public static PageMediaSizeName ISOB0;
    public static PageMediaSizeName ISOB1;
    public static PageMediaSizeName ISOB10;
    public static PageMediaSizeName ISOB2;
    public static PageMediaSizeName ISOB3;
    public static PageMediaSizeName ISOB4;
    public static PageMediaSizeName ISOB4Envelope;
    public static PageMediaSizeName ISOB5Envelope;
    public static PageMediaSizeName ISOB5Extra;
    public static PageMediaSizeName ISOB7;
    public static PageMediaSizeName ISOB8;
    public static PageMediaSizeName ISOB9;
    public static PageMediaSizeName ISOC0;
    public static PageMediaSizeName ISOC1;
    public static PageMediaSizeName ISOC10;
    public static PageMediaSizeName ISOC2;
    public static PageMediaSizeName ISOC3;
    public static PageMediaSizeName ISOC3Envelope;
    public static PageMediaSizeName ISOC4;
    public static PageMediaSizeName ISOC4Envelope;
    public static PageMediaSizeName ISOC5;
    public static PageMediaSizeName ISOC5Envelope;
    public static PageMediaSizeName ISOC6;
    public static PageMediaSizeName ISOC6Envelope;
    public static PageMediaSizeName ISOC6C5Envelope;
    public static PageMediaSizeName ISOC7;
    public static PageMediaSizeName ISOC8;
    public static PageMediaSizeName ISOC9;
    public static PageMediaSizeName ISODLEnvelope;
    public static PageMediaSizeName ISODLEnvelopeRotated;
    public static PageMediaSizeName ISOSRA3;
    public static PageMediaSizeName JapanQuadrupleHagakiPostcard;
    public static PageMediaSizeName JISB0;
    public static PageMediaSizeName JISB1;
    public static PageMediaSizeName JISB10;
    public static PageMediaSizeName JISB2;
    public static PageMediaSizeName JISB3;
    public static PageMediaSizeName JISB4;
    public static PageMediaSizeName JISB4Rotated;
    public static PageMediaSizeName JISB5;
    public static PageMediaSizeName JISB5Rotated;
    public static PageMediaSizeName JISB6;
    public static PageMediaSizeName JISB6Rotated;
    public static PageMediaSizeName JISB7;
    public static PageMediaSizeName JISB8;
    public static PageMediaSizeName JISB9;
    public static PageMediaSizeName JapanChou3Envelope;
    public static PageMediaSizeName JapanChou3EnvelopeRotated;
    public static PageMediaSizeName JapanChou4Envelope;
    public static PageMediaSizeName JapanChou4EnvelopeRotated;
    public static PageMediaSizeName JapanHagakiPostcard;
    public static PageMediaSizeName JapanHagakiPostcardRotated;
    public static PageMediaSizeName JapanKaku2Envelope;
    public static PageMediaSizeName JapanKaku2EnvelopeRotated;
    public static PageMediaSizeName JapanKaku3Envelope;
    public static PageMediaSizeName JapanKaku3EnvelopeRotated;
    public static PageMediaSizeName JapanYou4Envelope;
    public static PageMediaSizeName NorthAmerica10x11;
    public static PageMediaSizeName NorthAmerica10x14;
    public static PageMediaSizeName NorthAmerica11x17;
    public static PageMediaSizeName NorthAmerica9x11;
    public static PageMediaSizeName NorthAmericaArchitectureASheet;
    public static PageMediaSizeName NorthAmericaArchitectureBSheet;
    public static PageMediaSizeName NorthAmericaArchitectureCSheet;
    public static PageMediaSizeName NorthAmericaArchitectureDSheet;
    public static PageMediaSizeName NorthAmericaArchitectureESheet;
    public static PageMediaSizeName NorthAmericaCSheet;
    public static PageMediaSizeName NorthAmericaDSheet;
    public static PageMediaSizeName NorthAmericaESheet;
    public static PageMediaSizeName NorthAmericaExecutive;
    public static PageMediaSizeName NorthAmericaGermanLegalFanfold;
    public static PageMediaSizeName NorthAmericaGermanStandardFanfold;
    public static PageMediaSizeName NorthAmericaLegal;
    public static PageMediaSizeName NorthAmericaLegalExtra;
    public static PageMediaSizeName NorthAmericaLetter;
    public static PageMediaSizeName NorthAmericaLetterRotated;
    public static PageMediaSizeName NorthAmericaLetterExtra;
    public static PageMediaSizeName NorthAmericaLetterPlus;
    public static PageMediaSizeName NorthAmericaMonarchEnvelope;
    public static PageMediaSizeName NorthAmericaNote;
    public static PageMediaSizeName NorthAmericaNumber10Envelope;
    public static PageMediaSizeName NorthAmericaNumber10EnvelopeRotated;
    public static PageMediaSizeName NorthAmericaNumber9Envelope;
    public static PageMediaSizeName NorthAmericaNumber11Envelope;
    public static PageMediaSizeName NorthAmericaNumber12Envelope;
    public static PageMediaSizeName NorthAmericaNumber14Envelope;
    public static PageMediaSizeName NorthAmericaPersonalEnvelope;
    public static PageMediaSizeName NorthAmericaQuarto;
    public static PageMediaSizeName NorthAmericaStatement;
    public static PageMediaSizeName NorthAmericaSuperA;
    public static PageMediaSizeName NorthAmericaSuperB;
    public static PageMediaSizeName NorthAmericaTabloid;
    public static PageMediaSizeName NorthAmericaTabloidExtra;
    public static PageMediaSizeName OtherMetricA4Plus;
    public static PageMediaSizeName OtherMetricA3Plus;
    public static PageMediaSizeName OtherMetricFolio;
    public static PageMediaSizeName OtherMetricInviteEnvelope;
    public static PageMediaSizeName OtherMetricItalianEnvelope;
    public static PageMediaSizeName PRC1Envelope;
    public static PageMediaSizeName PRC1EnvelopeRotated;
    public static PageMediaSizeName PRC10Envelope;
    public static PageMediaSizeName PRC10EnvelopeRotated;
    public static PageMediaSizeName PRC16K;
    public static PageMediaSizeName PRC16KRotated;
    public static PageMediaSizeName PRC2Envelope;
    public static PageMediaSizeName PRC2EnvelopeRotated;
    public static PageMediaSizeName PRC32K;
    public static PageMediaSizeName PRC32KRotated;
    public static PageMediaSizeName PRC32KBig;
    public static PageMediaSizeName PRC3Envelope;
    public static PageMediaSizeName PRC3EnvelopeRotated;
    public static PageMediaSizeName PRC4Envelope;
    public static PageMediaSizeName PRC4EnvelopeRotated;
    public static PageMediaSizeName PRC5Envelope;
    public static PageMediaSizeName PRC5EnvelopeRotated;
    public static PageMediaSizeName PRC6Envelope;
    public static PageMediaSizeName PRC6EnvelopeRotated;
    public static PageMediaSizeName PRC7Envelope;
    public static PageMediaSizeName PRC7EnvelopeRotated;
    public static PageMediaSizeName PRC8Envelope;
    public static PageMediaSizeName PRC8EnvelopeRotated;
    public static PageMediaSizeName PRC9Envelope;
    public static PageMediaSizeName PRC9EnvelopeRotated;
    public static PageMediaSizeName Roll04Inch;
    public static PageMediaSizeName Roll06Inch;
    public static PageMediaSizeName Roll08Inch;
    public static PageMediaSizeName Roll12Inch;
    public static PageMediaSizeName Roll15Inch;
    public static PageMediaSizeName Roll18Inch;
    public static PageMediaSizeName Roll22Inch;
    public static PageMediaSizeName Roll24Inch;
    public static PageMediaSizeName Roll30Inch;
    public static PageMediaSizeName Roll36Inch;
    public static PageMediaSizeName Roll54Inch;
    public static PageMediaSizeName JapanDoubleHagakiPostcard;
    public static PageMediaSizeName JapanDoubleHagakiPostcardRotated;
    public static PageMediaSizeName JapanLPhoto;
    public static PageMediaSizeName Japan2LPhoto;
    public static PageMediaSizeName JapanYou1Envelope;
    public static PageMediaSizeName JapanYou2Envelope;
    public static PageMediaSizeName JapanYou3Envelope;
    public static PageMediaSizeName JapanYou4EnvelopeRotated;
    public static PageMediaSizeName JapanYou6Envelope;
    public static PageMediaSizeName JapanYou6EnvelopeRotated;
    public static PageMediaSizeName NorthAmerica4x6;
    public static PageMediaSizeName NorthAmerica4x8;
    public static PageMediaSizeName NorthAmerica5x7;
    public static PageMediaSizeName NorthAmerica8x10;
    public static PageMediaSizeName NorthAmerica10x12;
    public static PageMediaSizeName NorthAmerica14x17;
    public static PageMediaSizeName BusinessCard;
    public static PageMediaSizeName CreditCard;
}
public enum System.Printing.PageMediaType : Enum {
    public int value__;
    public static PageMediaType Unknown;
    public static PageMediaType AutoSelect;
    public static PageMediaType Archival;
    public static PageMediaType BackPrintFilm;
    public static PageMediaType Bond;
    public static PageMediaType CardStock;
    public static PageMediaType Continuous;
    public static PageMediaType EnvelopePlain;
    public static PageMediaType EnvelopeWindow;
    public static PageMediaType Fabric;
    public static PageMediaType HighResolution;
    public static PageMediaType Label;
    public static PageMediaType MultiLayerForm;
    public static PageMediaType MultiPartForm;
    public static PageMediaType Photographic;
    public static PageMediaType PhotographicFilm;
    public static PageMediaType PhotographicGlossy;
    public static PageMediaType PhotographicHighGloss;
    public static PageMediaType PhotographicMatte;
    public static PageMediaType PhotographicSatin;
    public static PageMediaType PhotographicSemiGloss;
    public static PageMediaType Plain;
    public static PageMediaType Screen;
    public static PageMediaType ScreenPaged;
    public static PageMediaType Stationery;
    public static PageMediaType TabStockFull;
    public static PageMediaType TabStockPreCut;
    public static PageMediaType Transparency;
    public static PageMediaType TShirtTransfer;
    public static PageMediaType None;
}
public enum System.Printing.PageOrder : Enum {
    public int value__;
    public static PageOrder Unknown;
    public static PageOrder Standard;
    public static PageOrder Reverse;
}
public enum System.Printing.PageOrientation : Enum {
    public int value__;
    public static PageOrientation Unknown;
    public static PageOrientation Landscape;
    public static PageOrientation Portrait;
    public static PageOrientation ReverseLandscape;
    public static PageOrientation ReversePortrait;
}
public enum System.Printing.PageQualitativeResolution : Enum {
    public int value__;
    public static PageQualitativeResolution Unknown;
    public static PageQualitativeResolution Default;
    public static PageQualitativeResolution Draft;
    public static PageQualitativeResolution High;
    public static PageQualitativeResolution Normal;
    public static PageQualitativeResolution Other;
}
public class System.Printing.PageResolution : object {
    public Nullable`1<PageQualitativeResolution> QualitativeResolution { get; }
    public Nullable`1<int> X { get; }
    public Nullable`1<int> Y { get; }
    public PageResolution(int resolutionX, int resolutionY);
    public PageResolution(int resolutionX, int resolutionY, PageQualitativeResolution qualitative);
    public PageResolution(PageQualitativeResolution qualitative);
    public Nullable`1<PageQualitativeResolution> get_QualitativeResolution();
    public Nullable`1<int> get_X();
    public Nullable`1<int> get_Y();
    public virtual string ToString();
}
public class System.Printing.PageScalingFactorRange : object {
    public int MaximumScale { get; }
    public int MinimumScale { get; }
    public int get_MaximumScale();
    public int get_MinimumScale();
    public virtual string ToString();
}
public enum System.Printing.PagesPerSheetDirection : Enum {
    public int value__;
    public static PagesPerSheetDirection Unknown;
    public static PagesPerSheetDirection RightBottom;
    public static PagesPerSheetDirection BottomRight;
    public static PagesPerSheetDirection LeftBottom;
    public static PagesPerSheetDirection BottomLeft;
    public static PagesPerSheetDirection RightTop;
    public static PagesPerSheetDirection TopRight;
    public static PagesPerSheetDirection LeftTop;
    public static PagesPerSheetDirection TopLeft;
}
public enum System.Printing.PhotoPrintingIntent : Enum {
    public int value__;
    public static PhotoPrintingIntent Unknown;
    public static PhotoPrintingIntent None;
    public static PhotoPrintingIntent PhotoBest;
    public static PhotoPrintingIntent PhotoDraft;
    public static PhotoPrintingIntent PhotoStandard;
}
public class System.Printing.PrintCapabilities : object {
    public ReadOnlyCollection`1<Collation> CollationCapability { get; }
    public ReadOnlyCollection`1<DeviceFontSubstitution> DeviceFontSubstitutionCapability { get; }
    public ReadOnlyCollection`1<Duplexing> DuplexingCapability { get; }
    public ReadOnlyCollection`1<InputBin> InputBinCapability { get; }
    public Nullable`1<int> MaxCopyCount { get; }
    public Nullable`1<double> OrientedPageMediaHeight { get; }
    public Nullable`1<double> OrientedPageMediaWidth { get; }
    public ReadOnlyCollection`1<OutputColor> OutputColorCapability { get; }
    public ReadOnlyCollection`1<OutputQuality> OutputQualityCapability { get; }
    public ReadOnlyCollection`1<PageBorderless> PageBorderlessCapability { get; }
    public PageImageableArea PageImageableArea { get; }
    public ReadOnlyCollection`1<PageMediaSize> PageMediaSizeCapability { get; }
    public ReadOnlyCollection`1<PageMediaType> PageMediaTypeCapability { get; }
    public ReadOnlyCollection`1<PageOrder> PageOrderCapability { get; }
    public ReadOnlyCollection`1<PageOrientation> PageOrientationCapability { get; }
    public ReadOnlyCollection`1<PageResolution> PageResolutionCapability { get; }
    public PageScalingFactorRange PageScalingFactorRange { get; }
    public ReadOnlyCollection`1<int> PagesPerSheetCapability { get; }
    public ReadOnlyCollection`1<PagesPerSheetDirection> PagesPerSheetDirectionCapability { get; }
    public ReadOnlyCollection`1<PhotoPrintingIntent> PhotoPrintingIntentCapability { get; }
    public ReadOnlyCollection`1<Stapling> StaplingCapability { get; }
    public ReadOnlyCollection`1<TrueTypeFontMode> TrueTypeFontModeCapability { get; }
    public PrintCapabilities(Stream xmlStream);
    public ReadOnlyCollection`1<Collation> get_CollationCapability();
    public ReadOnlyCollection`1<DeviceFontSubstitution> get_DeviceFontSubstitutionCapability();
    public ReadOnlyCollection`1<Duplexing> get_DuplexingCapability();
    public ReadOnlyCollection`1<InputBin> get_InputBinCapability();
    public Nullable`1<int> get_MaxCopyCount();
    public Nullable`1<double> get_OrientedPageMediaHeight();
    public Nullable`1<double> get_OrientedPageMediaWidth();
    public ReadOnlyCollection`1<OutputColor> get_OutputColorCapability();
    public ReadOnlyCollection`1<OutputQuality> get_OutputQualityCapability();
    public ReadOnlyCollection`1<PageBorderless> get_PageBorderlessCapability();
    public PageImageableArea get_PageImageableArea();
    public ReadOnlyCollection`1<PageMediaSize> get_PageMediaSizeCapability();
    public ReadOnlyCollection`1<PageMediaType> get_PageMediaTypeCapability();
    public ReadOnlyCollection`1<PageOrder> get_PageOrderCapability();
    public ReadOnlyCollection`1<PageOrientation> get_PageOrientationCapability();
    public ReadOnlyCollection`1<PageResolution> get_PageResolutionCapability();
    public PageScalingFactorRange get_PageScalingFactorRange();
    public ReadOnlyCollection`1<int> get_PagesPerSheetCapability();
    public ReadOnlyCollection`1<PagesPerSheetDirection> get_PagesPerSheetDirectionCapability();
    public ReadOnlyCollection`1<PhotoPrintingIntent> get_PhotoPrintingIntentCapability();
    public ReadOnlyCollection`1<Stapling> get_StaplingCapability();
    public ReadOnlyCollection`1<TrueTypeFontMode> get_TrueTypeFontModeCapability();
}
public class System.Printing.PrintCommitAttributesException : PrintSystemException {
    public Collection`1<string> CommittedAttributesCollection { get; }
    public Collection`1<string> FailedAttributesCollection { get; }
    public string PrintObjectName { get; }
    public PrintCommitAttributesException(int errorCode, Collection`1<string> attributesSuccessList, Collection`1<string> attributesFailList);
    public PrintCommitAttributesException(int errorCode, string message, Collection`1<string> attributesSuccessList, Collection`1<string> attributesFailList, string objectName);
    protected PrintCommitAttributesException(SerializationInfo info, StreamingContext context);
    public PrintCommitAttributesException(string message);
    public PrintCommitAttributesException(string message, Exception innerException);
    public Collection`1<string> get_CommittedAttributesCollection();
    public Collection`1<string> get_FailedAttributesCollection();
    public string get_PrintObjectName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintingCanceledException : PrintJobException {
    public PrintingCanceledException(int errorCode, string message);
    public PrintingCanceledException(int errorCode, string message, Exception innerException);
    public PrintingCanceledException(int errorCode, string message, string printQueueName, string jobName, int jobId);
    public PrintingCanceledException(int errorCode, string message, string printQueueName, string jobName, int jobId, Exception innerException);
    protected PrintingCanceledException(SerializationInfo info, StreamingContext context);
    public PrintingCanceledException(string message);
    public PrintingCanceledException(string message, Exception innerException);
}
public class System.Printing.PrintingNotSupportedException : PrintSystemException {
    protected PrintingNotSupportedException(SerializationInfo info, StreamingContext context);
    public PrintingNotSupportedException(string message);
    public PrintingNotSupportedException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintJobException : PrintSystemException {
    public int JobId { get; }
    public string JobName { get; }
    public string PrintQueueName { get; }
    public PrintJobException(int errorCode, string message);
    public PrintJobException(int errorCode, string message, Exception innerException);
    public PrintJobException(int errorCode, string message, string printQueueName, string jobName, int jobId);
    public PrintJobException(int errorCode, string message, string printQueueName, string jobName, int jobId, Exception innerException);
    protected PrintJobException(SerializationInfo info, StreamingContext context);
    public PrintJobException(string message);
    public PrintJobException(string message, Exception innerException);
    public int get_JobId();
    public string get_JobName();
    public string get_PrintQueueName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintQueueException : PrintSystemException {
    public string PrinterName { get; }
    public PrintQueueException(int errorCode, string message, string printerName);
    public PrintQueueException(int errorCode, string message, string printerName, Exception innerException);
    public PrintQueueException(int errorCode, string message, string printerName, string printerMessage);
    protected PrintQueueException(SerializationInfo info, StreamingContext context);
    public PrintQueueException(string message);
    public PrintQueueException(string message, Exception innerException);
    public string get_PrinterName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintServerException : PrintSystemException {
    public string ServerName { get; }
    public PrintServerException(int errorCode, string message, string serverName);
    public PrintServerException(int errorCode, string message, string serverName, Exception innerException);
    protected PrintServerException(SerializationInfo info, StreamingContext context);
    public PrintServerException(string message);
    public PrintServerException(string message, Exception innerException);
    public string get_ServerName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintSystemException : SystemException {
    public PrintSystemException(int errorCode, string message);
    public PrintSystemException(int errorCode, string message, Exception innerException);
    public PrintSystemException(int errorCode, string message, string printerMessage);
    protected PrintSystemException(SerializationInfo info, StreamingContext context);
    public PrintSystemException(string message);
    public PrintSystemException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintTicket : object {
    public Nullable`1<Collation> Collation { get; public set; }
    public Nullable`1<int> CopyCount { get; public set; }
    public Nullable`1<DeviceFontSubstitution> DeviceFontSubstitution { get; public set; }
    public Nullable`1<Duplexing> Duplexing { get; public set; }
    public Nullable`1<InputBin> InputBin { get; public set; }
    public Nullable`1<OutputColor> OutputColor { get; public set; }
    public Nullable`1<OutputQuality> OutputQuality { get; public set; }
    public Nullable`1<PageBorderless> PageBorderless { get; public set; }
    public PageMediaSize PageMediaSize { get; public set; }
    public Nullable`1<PageMediaType> PageMediaType { get; public set; }
    public Nullable`1<PageOrder> PageOrder { get; public set; }
    public Nullable`1<PageOrientation> PageOrientation { get; public set; }
    public PageResolution PageResolution { get; public set; }
    public Nullable`1<int> PageScalingFactor { get; public set; }
    public Nullable`1<int> PagesPerSheet { get; public set; }
    public Nullable`1<PagesPerSheetDirection> PagesPerSheetDirection { get; public set; }
    public Nullable`1<PhotoPrintingIntent> PhotoPrintingIntent { get; public set; }
    public Nullable`1<Stapling> Stapling { get; public set; }
    public Nullable`1<TrueTypeFontMode> TrueTypeFontMode { get; public set; }
    public PrintTicket(Stream xmlStream);
    public Nullable`1<Collation> get_Collation();
    public void set_Collation(Nullable`1<Collation> value);
    public Nullable`1<int> get_CopyCount();
    public void set_CopyCount(Nullable`1<int> value);
    public Nullable`1<DeviceFontSubstitution> get_DeviceFontSubstitution();
    public void set_DeviceFontSubstitution(Nullable`1<DeviceFontSubstitution> value);
    public Nullable`1<Duplexing> get_Duplexing();
    public void set_Duplexing(Nullable`1<Duplexing> value);
    public Nullable`1<InputBin> get_InputBin();
    public void set_InputBin(Nullable`1<InputBin> value);
    public Nullable`1<OutputColor> get_OutputColor();
    public void set_OutputColor(Nullable`1<OutputColor> value);
    public Nullable`1<OutputQuality> get_OutputQuality();
    public void set_OutputQuality(Nullable`1<OutputQuality> value);
    public Nullable`1<PageBorderless> get_PageBorderless();
    public void set_PageBorderless(Nullable`1<PageBorderless> value);
    public PageMediaSize get_PageMediaSize();
    public void set_PageMediaSize(PageMediaSize value);
    public Nullable`1<PageMediaType> get_PageMediaType();
    public void set_PageMediaType(Nullable`1<PageMediaType> value);
    public Nullable`1<PageOrder> get_PageOrder();
    public void set_PageOrder(Nullable`1<PageOrder> value);
    public Nullable`1<PageOrientation> get_PageOrientation();
    public void set_PageOrientation(Nullable`1<PageOrientation> value);
    public PageResolution get_PageResolution();
    public void set_PageResolution(PageResolution value);
    public Nullable`1<int> get_PageScalingFactor();
    public void set_PageScalingFactor(Nullable`1<int> value);
    public Nullable`1<int> get_PagesPerSheet();
    public void set_PagesPerSheet(Nullable`1<int> value);
    public Nullable`1<PagesPerSheetDirection> get_PagesPerSheetDirection();
    public void set_PagesPerSheetDirection(Nullable`1<PagesPerSheetDirection> value);
    public Nullable`1<PhotoPrintingIntent> get_PhotoPrintingIntent();
    public void set_PhotoPrintingIntent(Nullable`1<PhotoPrintingIntent> value);
    public Nullable`1<Stapling> get_Stapling();
    public void set_Stapling(Nullable`1<Stapling> value);
    public Nullable`1<TrueTypeFontMode> get_TrueTypeFontMode();
    public void set_TrueTypeFontMode(Nullable`1<TrueTypeFontMode> value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public PrintTicket Clone();
    public MemoryStream GetXmlStream();
    public void SaveTo(Stream outStream);
}
public enum System.Printing.PrintTicketScope : Enum {
    public int value__;
    public static PrintTicketScope PageScope;
    public static PrintTicketScope DocumentScope;
    public static PrintTicketScope JobScope;
}
public enum System.Printing.Stapling : Enum {
    public int value__;
    public static Stapling Unknown;
    public static Stapling SaddleStitch;
    public static Stapling StapleBottomLeft;
    public static Stapling StapleBottomRight;
    public static Stapling StapleDualLeft;
    public static Stapling StapleDualRight;
    public static Stapling StapleDualTop;
    public static Stapling StapleDualBottom;
    public static Stapling StapleTopLeft;
    public static Stapling StapleTopRight;
    public static Stapling None;
}
public enum System.Printing.TrueTypeFontMode : Enum {
    public int value__;
    public static TrueTypeFontMode Unknown;
    public static TrueTypeFontMode Automatic;
    public static TrueTypeFontMode DownloadAsOutlineFont;
    public static TrueTypeFontMode DownloadAsRasterFont;
    public static TrueTypeFontMode DownloadAsNativeTrueTypeFont;
    public static TrueTypeFontMode RenderAsBitmap;
}
public class System.Printing.ValidationResult : ValueType {
    public ConflictStatus ConflictStatus { get; }
    public PrintTicket ValidatedPrintTicket { get; }
    public ConflictStatus get_ConflictStatus();
    public PrintTicket get_ValidatedPrintTicket();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(ValidationResult a, ValidationResult b);
    public static bool op_Inequality(ValidationResult a, ValidationResult b);
}
public interface System.Windows.Xps.Packaging.IDocumentStructureProvider {
    public abstract virtual XpsStructure AddDocumentStructure();
}
public interface System.Windows.Xps.Packaging.IStoryFragmentProvider {
    public abstract virtual XpsStructure AddStoryFragment();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentReader {
    public int DocumentNumber { get; }
    public XpsStructure DocumentStructure { get; }
    public ReadOnlyCollection`1<IXpsFixedPageReader> FixedPages { get; }
    public PrintTicket PrintTicket { get; }
    public ICollection`1<XpsSignatureDefinition> SignatureDefinitions { get; }
    public XpsThumbnail Thumbnail { get; }
    public Uri Uri { get; }
    public abstract virtual int get_DocumentNumber();
    public abstract virtual XpsStructure get_DocumentStructure();
    public abstract virtual ReadOnlyCollection`1<IXpsFixedPageReader> get_FixedPages();
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual ICollection`1<XpsSignatureDefinition> get_SignatureDefinitions();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual Uri get_Uri();
    public abstract virtual void AddSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public abstract virtual void CommitSignatureDefinition();
    public abstract virtual IXpsFixedPageReader GetFixedPage(Uri pageSource);
    public abstract virtual void RemoveSignatureDefinition(XpsSignatureDefinition signatureDefinition);
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader {
    public ReadOnlyCollection`1<IXpsFixedDocumentReader> FixedDocuments { get; }
    public PrintTicket PrintTicket { get; }
    public XpsThumbnail Thumbnail { get; }
    public Uri Uri { get; }
    public abstract virtual ReadOnlyCollection`1<IXpsFixedDocumentReader> get_FixedDocuments();
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual Uri get_Uri();
    public abstract virtual IXpsFixedDocumentReader GetFixedDocument(Uri documentSource);
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual IXpsFixedDocumentWriter AddFixedDocument();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentWriter {
    public int DocumentNumber { get; }
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public abstract virtual int get_DocumentNumber();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual IXpsFixedPageWriter AddFixedPage();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
}
public interface System.Windows.Xps.Packaging.IXpsFixedPageReader {
    public ICollection`1<XpsColorContext> ColorContexts { get; }
    public ICollection`1<XpsFont> Fonts { get; }
    public ICollection`1<XpsImage> Images { get; }
    public int PageNumber { get; }
    public PrintTicket PrintTicket { get; }
    public ICollection`1<XpsResourceDictionary> ResourceDictionaries { get; }
    public XpsStructure StoryFragment { get; }
    public XpsThumbnail Thumbnail { get; }
    public Uri Uri { get; }
    public XmlReader XmlReader { get; }
    public abstract virtual ICollection`1<XpsColorContext> get_ColorContexts();
    public abstract virtual ICollection`1<XpsFont> get_Fonts();
    public abstract virtual ICollection`1<XpsImage> get_Images();
    public abstract virtual int get_PageNumber();
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual ICollection`1<XpsResourceDictionary> get_ResourceDictionaries();
    public abstract virtual XpsStructure get_StoryFragment();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual Uri get_Uri();
    public abstract virtual XmlReader get_XmlReader();
    public abstract virtual XpsColorContext GetColorContext(Uri uri);
    public abstract virtual XpsFont GetFont(Uri uri);
    public abstract virtual XpsImage GetImage(Uri uri);
    public abstract virtual XpsResource GetResource(Uri resourceUri);
    public abstract virtual XpsResourceDictionary GetResourceDictionary(Uri uri);
}
public interface System.Windows.Xps.Packaging.IXpsFixedPageWriter {
    public IList`1<string> LinkTargetStream { get; }
    public int PageNumber { get; }
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public XmlWriter XmlWriter { get; }
    public abstract virtual IList`1<string> get_LinkTargetStream();
    public abstract virtual int get_PageNumber();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual XmlWriter get_XmlWriter();
    public abstract virtual XpsColorContext AddColorContext();
    public abstract virtual XpsFont AddFont();
    public abstract virtual XpsFont AddFont(bool obfuscate);
    public abstract virtual XpsFont AddFont(bool obfuscate, bool addRestrictedRelationship);
    public abstract virtual XpsImage AddImage(string mimeType);
    public abstract virtual XpsImage AddImage(XpsImageType imageType);
    public abstract virtual XpsResource AddResource(Type resourceType, Uri resourceUri);
    public abstract virtual XpsResourceDictionary AddResourceDictionary();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
}
public enum System.Windows.Xps.Packaging.PackageInterleavingOrder : Enum {
    public int value__;
    public static PackageInterleavingOrder None;
    public static PackageInterleavingOrder ResourceFirst;
    public static PackageInterleavingOrder ResourceLast;
    public static PackageInterleavingOrder ImagesLast;
}
public enum System.Windows.Xps.Packaging.PackagingAction : Enum {
    public int value__;
    public static PackagingAction None;
    public static PackagingAction AddingDocumentSequence;
    public static PackagingAction DocumentSequenceCompleted;
    public static PackagingAction AddingFixedDocument;
    public static PackagingAction FixedDocumentCompleted;
    public static PackagingAction AddingFixedPage;
    public static PackagingAction FixedPageCompleted;
    public static PackagingAction ResourceAdded;
    public static PackagingAction FontAdded;
    public static PackagingAction ImageAdded;
    public static PackagingAction XpsDocumentCommitted;
}
public class System.Windows.Xps.Packaging.PackagingProgressEventArgs : EventArgs {
    public PackagingAction Action { get; }
    public int NumberCompleted { get; }
    public PackagingProgressEventArgs(PackagingAction action, int numberCompleted);
    public PackagingAction get_Action();
    public int get_NumberCompleted();
}
public class System.Windows.Xps.Packaging.PackagingProgressEventHandler : MulticastDelegate {
    public PackagingProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PackagingProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PackagingProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Packaging.SpotLocation : object {
    public Uri PageUri { get; public set; }
    public double StartX { get; public set; }
    public double StartY { get; public set; }
    public Uri get_PageUri();
    public void set_PageUri(Uri value);
    public double get_StartX();
    public void set_StartX(double value);
    public double get_StartY();
    public void set_StartY(double value);
}
public class System.Windows.Xps.Packaging.XpsColorContext : XpsResource {
}
public class System.Windows.Xps.Packaging.XpsDigitalSignature : object {
    public bool DocumentPropertiesRestricted { get; }
    public Nullable`1<Guid> Id { get; }
    public bool IsCertificateAvailable { get; }
    public bool SignatureOriginRestricted { get; }
    public string SignatureType { get; }
    public Byte[] SignatureValue { get; }
    public IXpsFixedDocumentSequenceReader SignedDocumentSequence { get; }
    public X509Certificate SignerCertificate { get; }
    public DateTime SigningTime { get; }
    public XpsDigitalSignature(PackageDigitalSignature packageSignature, XpsDocument package);
    public bool get_DocumentPropertiesRestricted();
    public Nullable`1<Guid> get_Id();
    public bool get_IsCertificateAvailable();
    public bool get_SignatureOriginRestricted();
    public string get_SignatureType();
    public Byte[] get_SignatureValue();
    public IXpsFixedDocumentSequenceReader get_SignedDocumentSequence();
    public X509Certificate get_SignerCertificate();
    public DateTime get_SigningTime();
    public VerifyResult Verify();
    public VerifyResult Verify(X509Certificate certificate);
    public X509ChainStatusFlags VerifyCertificate();
    public static X509ChainStatusFlags VerifyCertificate(X509Certificate certificate);
}
[FlagsAttribute]
public enum System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions : Enum {
    public int value__;
    public static XpsDigSigPartAlteringRestrictions None;
    public static XpsDigSigPartAlteringRestrictions CoreMetadata;
    public static XpsDigSigPartAlteringRestrictions Annotations;
    public static XpsDigSigPartAlteringRestrictions SignatureOrigin;
}
public class System.Windows.Xps.Packaging.XpsDocument : XpsPartBase {
    public PackageProperties CoreDocumentProperties { get; }
    public IXpsFixedDocumentSequenceReader FixedDocumentSequenceReader { get; }
    public bool IsReader { get; }
    public bool IsSignable { get; }
    public bool IsWriter { get; }
    public ReadOnlyCollection`1<XpsDigitalSignature> Signatures { get; }
    public XpsThumbnail Thumbnail { get; public set; }
    public XpsDocument(Package package);
    public XpsDocument(Package package, CompressionOption compressionOption);
    public XpsDocument(Package package, CompressionOption compressionOption, string path);
    public XpsDocument(string path, FileAccess packageAccess);
    public XpsDocument(string path, FileAccess packageAccess, CompressionOption compressionOption);
    public PackageProperties get_CoreDocumentProperties();
    public IXpsFixedDocumentSequenceReader get_FixedDocumentSequenceReader();
    public bool get_IsReader();
    public bool get_IsSignable();
    public bool get_IsWriter();
    public ReadOnlyCollection`1<XpsDigitalSignature> get_Signatures();
    public XpsThumbnail get_Thumbnail();
    public void set_Thumbnail(XpsThumbnail value);
    public IXpsFixedDocumentSequenceWriter AddFixedDocumentSequence();
    public XpsThumbnail AddThumbnail(XpsImageType imageType);
    public void Close();
    public static XpsDocumentWriter CreateXpsDocumentWriter(XpsDocument xpsDocument);
    protected virtual void Dispose(bool disposing);
    public FixedDocumentSequence GetFixedDocumentSequence();
    public void RemoveSignature(XpsDigitalSignature signature);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, Guid id);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, Guid id, bool testIsSignable);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.XpsFont : XpsResource {
    public bool IsObfuscated { get; }
    public bool IsRestricted { get; public set; }
    public bool get_IsObfuscated();
    public bool get_IsRestricted();
    public void set_IsRestricted(bool value);
    public static void ObfuscateFontData(Byte[] fontData, Guid guid);
}
public class System.Windows.Xps.Packaging.XpsImage : XpsResource {
}
public enum System.Windows.Xps.Packaging.XpsImageType : Enum {
    public int value__;
    public static XpsImageType PngImageType;
    public static XpsImageType JpegImageType;
    public static XpsImageType TiffImageType;
    public static XpsImageType WdpImageType;
}
public abstract class System.Windows.Xps.Packaging.XpsPartBase : object {
    public Uri Uri { get; public set; }
    public Uri get_Uri();
    public void set_Uri(Uri value);
}
public class System.Windows.Xps.Packaging.XpsResource : XpsPartBase {
    public void Commit();
    public virtual Stream GetStream();
    public Uri RelativeUri(Uri inUri);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.XpsResourceDictionary : XpsResource {
}
public enum System.Windows.Xps.Packaging.XpsResourceSharing : Enum {
    public int value__;
    public static XpsResourceSharing ShareResources;
    public static XpsResourceSharing NoResourceSharing;
}
public class System.Windows.Xps.Packaging.XpsSignatureDefinition : object {
    public CultureInfo Culture { get; public set; }
    public bool HasBeenModified { get; public set; }
    public string Intent { get; public set; }
    public string RequestedSigner { get; public set; }
    public Nullable`1<DateTime> SignBy { get; public set; }
    public string SigningLocale { get; public set; }
    public Nullable`1<Guid> SpotId { get; public set; }
    public SpotLocation SpotLocation { get; public set; }
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_HasBeenModified();
    public void set_HasBeenModified(bool value);
    public string get_Intent();
    public void set_Intent(string value);
    public string get_RequestedSigner();
    public void set_RequestedSigner(string value);
    public Nullable`1<DateTime> get_SignBy();
    public void set_SignBy(Nullable`1<DateTime> value);
    public string get_SigningLocale();
    public void set_SigningLocale(string value);
    public Nullable`1<Guid> get_SpotId();
    public void set_SpotId(Nullable`1<Guid> value);
    public SpotLocation get_SpotLocation();
    public void set_SpotLocation(SpotLocation value);
}
public class System.Windows.Xps.Packaging.XpsStructure : XpsResource {
}
public class System.Windows.Xps.Packaging.XpsThumbnail : XpsResource {
}
public abstract class System.Windows.Xps.Serialization.BasePackagingPolicy : object {
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    public abstract virtual Uri get_CurrentFixedDocumentUri();
    public abstract virtual Uri get_CurrentFixedPageUri();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public abstract virtual IList`1<string> AcquireStreamForLinkTargets();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedPage();
    public abstract virtual XmlWriter AcquireXmlWriterForPage();
    public abstract virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public abstract virtual void PersistPrintTicket(PrintTicket printTicket);
    public abstract virtual void PreCommitCurrentPage();
    public abstract virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public abstract virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public abstract virtual void ReleaseResourceStreamForXpsColorContext();
    public abstract virtual void ReleaseResourceStreamForXpsFont();
    public abstract virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsImage();
    public abstract virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public abstract virtual void ReleaseXmlWriterForFixedDocument();
    public abstract virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public abstract virtual void ReleaseXmlWriterForFixedPage();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Serialization.ColorTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public static string SerializeColorContext(IServiceProvider context, ColorContext colorContext);
}
[FlagsAttribute]
public enum System.Windows.Xps.Serialization.FontSubsetterCommitPolicies : Enum {
    public int value__;
    public static FontSubsetterCommitPolicies None;
    public static FontSubsetterCommitPolicies CommitPerPage;
    public static FontSubsetterCommitPolicies CommitPerDocument;
    public static FontSubsetterCommitPolicies CommitEntireSequence;
}
public class System.Windows.Xps.Serialization.FontTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public class System.Windows.Xps.Serialization.ImageSourceTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [SecurityTreatAsSafeAttribute]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public abstract class System.Windows.Xps.Serialization.PackageSerializationManager : object {
    public abstract virtual void SaveAsXaml(object serializedObject);
    private sealed virtual override void System.IDisposable.Dispose();
}
public enum System.Windows.Xps.Serialization.PrintTicketLevel : Enum {
    public int value__;
    public static PrintTicketLevel None;
    public static PrintTicketLevel FixedDocumentSequencePrintTicket;
    public static PrintTicketLevel FixedDocumentPrintTicket;
    public static PrintTicketLevel FixedPagePrintTicket;
}
public enum System.Windows.Xps.Serialization.SerializationState : Enum {
    public int value__;
    public static SerializationState Normal;
    public static SerializationState Stop;
}
public class System.Windows.Xps.Serialization.XpsPackagingPolicy : BasePackagingPolicy {
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    public XpsPackagingPolicy(XpsDocument xpsPackage);
    public XpsPackagingPolicy(XpsDocument xpsPackage, PackageInterleavingOrder interleavingType);
    public virtual Uri get_CurrentFixedDocumentUri();
    public virtual Uri get_CurrentFixedPageUri();
    public void add_PackagingProgressEvent(PackagingProgressEventHandler value);
    public void remove_PackagingProgressEvent(PackagingProgressEventHandler value);
    public virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public virtual IList`1<string> AcquireStreamForLinkTargets();
    public virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public virtual XmlWriter AcquireXmlWriterForFixedPage();
    public virtual XmlWriter AcquireXmlWriterForPage();
    public virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public virtual void PersistPrintTicket(PrintTicket printTicket);
    public virtual void PreCommitCurrentPage();
    public virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public virtual void ReleaseResourceStreamForXpsColorContext();
    public virtual void ReleaseResourceStreamForXpsFont();
    public virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public virtual void ReleaseResourceStreamForXpsImage();
    public virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public virtual void ReleaseXmlWriterForFixedDocument();
    public virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public virtual void ReleaseXmlWriterForFixedPage();
}
public class System.Windows.Xps.Serialization.XpsResourceStream : object {
    public Stream Stream { get; }
    public Uri Uri { get; }
    public XpsResourceStream(Stream stream, Uri uri);
    public Stream get_Stream();
    public Uri get_Uri();
    public void Initialize();
}
public class System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs : AsyncCompletedEventArgs {
    public XpsSerializationCompletedEventArgs(bool canceled, object state, Exception exception);
}
public class System.Windows.Xps.Serialization.XpsSerializationCompletedEventHandler : MulticastDelegate {
    public XpsSerializationCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializationManager : PackageSerializationManager {
    public bool IsBatchMode { get; }
    public XpsSerializationManager(BasePackagingPolicy packagingPolicy, bool batchMode);
    public bool get_IsBatchMode();
    public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    public virtual void Commit();
    public virtual void SaveAsXaml(object serializedObject);
    public void SetFontSubsettingCountPolicy(int countPolicy);
    public void SetFontSubsettingPolicy(FontSubsetterCommitPolicies policy);
}
public class System.Windows.Xps.Serialization.XpsSerializationManagerAsync : XpsSerializationManager {
    public XpsSerializationManagerAsync(BasePackagingPolicy packagingPolicy, bool batchMode);
    public void add_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    public void remove_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    public void CancelAsync();
    public virtual void Commit();
    public virtual void SaveAsXaml(object serializedObject);
}
public class System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs : EventArgs {
    public PrintTicket PrintTicket { get; public set; }
    public PrintTicketLevel PrintTicketLevel { get; }
    public int Sequence { get; }
    public XpsSerializationPrintTicketRequiredEventArgs(PrintTicketLevel printTicketLevel, int sequence);
    public PrintTicket get_PrintTicket();
    public void set_PrintTicket(PrintTicket value);
    public PrintTicketLevel get_PrintTicketLevel();
    public int get_Sequence();
}
public class System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventHandler : MulticastDelegate {
    public XpsSerializationPrintTicketRequiredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationPrintTicketRequiredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationPrintTicketRequiredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs : ProgressChangedEventArgs {
    public int PageNumber { get; }
    public XpsWritingProgressChangeLevel WritingLevel { get; }
    public XpsSerializationProgressChangedEventArgs(XpsWritingProgressChangeLevel writingLevel, int pageNumber, int progressPercentage, object userToken);
    public int get_PageNumber();
    public XpsWritingProgressChangeLevel get_WritingLevel();
}
public class System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventHandler : MulticastDelegate {
    public XpsSerializationProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializerFactory : object {
    public string DefaultFileExtension { get; }
    public string DisplayName { get; }
    public string ManufacturerName { get; }
    public Uri ManufacturerWebsite { get; }
    public sealed virtual string get_DefaultFileExtension();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_ManufacturerName();
    public sealed virtual Uri get_ManufacturerWebsite();
    public sealed virtual SerializerWriter CreateSerializerWriter(Stream stream);
}
public enum System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel : Enum {
    public int value__;
    public static XpsWritingProgressChangeLevel None;
    public static XpsWritingProgressChangeLevel FixedDocumentSequenceWritingProgress;
    public static XpsWritingProgressChangeLevel FixedDocumentWritingProgress;
    public static XpsWritingProgressChangeLevel FixedPageWritingProgress;
}
public class System.Windows.Xps.XpsException : Exception {
    protected XpsException(SerializationInfo info, StreamingContext context);
    public XpsException(string message);
    public XpsException(string message, Exception innerException);
}
public class System.Windows.Xps.XpsPackagingException : XpsException {
    protected XpsPackagingException(SerializationInfo info, StreamingContext context);
    public XpsPackagingException(string message);
    public XpsPackagingException(string message, Exception innerException);
}
public class System.Windows.Xps.XpsSerializationException : XpsException {
    protected XpsSerializationException(SerializationInfo info, StreamingContext context);
    public XpsSerializationException(string message);
    public XpsSerializationException(string message, Exception innerException);
}
