public class Microsoft.CSharp.CSharpCodeProvider : CodeDomProvider {
    public string FileExtension { get; }
    public CSharpCodeProvider(IDictionary`2<string, string> providerOptions);
    public virtual string get_FileExtension();
    [ObsoleteAttribute("ICodeCompiler has been deprecated. Use the methods directly on the CodeDomProvider class instead.")]
public virtual ICodeCompiler CreateCompiler();
    [ObsoleteAttribute("ICodeGenerator has been deprecated. Use the methods directly on the CodeDomProvider class instead.")]
public virtual ICodeGenerator CreateGenerator();
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    public virtual TypeConverter GetConverter(Type type);
}
public class Microsoft.VisualBasic.VBCodeProvider : CodeDomProvider {
    public string FileExtension { get; }
    public LanguageOptions LanguageOptions { get; }
    public VBCodeProvider(IDictionary`2<string, string> providerOptions);
    public virtual string get_FileExtension();
    public virtual LanguageOptions get_LanguageOptions();
    [ObsoleteAttribute("ICodeCompiler has been deprecated. Use the methods directly on the CodeDomProvider class instead.")]
public virtual ICodeCompiler CreateCompiler();
    [ObsoleteAttribute("ICodeGenerator has been deprecated. Use the methods directly on the CodeDomProvider class instead.")]
public virtual ICodeGenerator CreateGenerator();
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    public virtual TypeConverter GetConverter(Type type);
}
public class System.CodeDom.CodeArgumentReferenceExpression : CodeExpression {
    public string ParameterName { get; public set; }
    public CodeArgumentReferenceExpression(string parameterName);
    public string get_ParameterName();
    public void set_ParameterName(string value);
}
public class System.CodeDom.CodeArrayCreateExpression : CodeExpression {
    public CodeTypeReference CreateType { get; public set; }
    public CodeExpressionCollection Initializers { get; }
    public int Size { get; public set; }
    public CodeExpression SizeExpression { get; public set; }
    public CodeArrayCreateExpression(CodeTypeReference createType, CodeExpression size);
    public CodeArrayCreateExpression(CodeTypeReference createType, CodeExpression[] initializers);
    public CodeArrayCreateExpression(CodeTypeReference createType, int size);
    public CodeArrayCreateExpression(string createType, CodeExpression size);
    public CodeArrayCreateExpression(string createType, CodeExpression[] initializers);
    public CodeArrayCreateExpression(string createType, int size);
    public CodeArrayCreateExpression(Type createType, CodeExpression size);
    public CodeArrayCreateExpression(Type createType, CodeExpression[] initializers);
    public CodeArrayCreateExpression(Type createType, int size);
    public CodeTypeReference get_CreateType();
    public void set_CreateType(CodeTypeReference value);
    public CodeExpressionCollection get_Initializers();
    public int get_Size();
    public void set_Size(int value);
    public CodeExpression get_SizeExpression();
    public void set_SizeExpression(CodeExpression value);
}
public class System.CodeDom.CodeArrayIndexerExpression : CodeExpression {
    public CodeExpressionCollection Indices { get; }
    public CodeExpression TargetObject { get; public set; }
    public CodeArrayIndexerExpression(CodeExpression targetObject, CodeExpression[] indices);
    public CodeExpressionCollection get_Indices();
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodeAssignStatement : CodeStatement {
    public CodeExpression Left { get; public set; }
    public CodeExpression Right { get; public set; }
    public CodeAssignStatement(CodeExpression left, CodeExpression right);
    public CodeExpression get_Left();
    public void set_Left(CodeExpression value);
    public CodeExpression get_Right();
    public void set_Right(CodeExpression value);
}
public class System.CodeDom.CodeAttachEventStatement : CodeStatement {
    public CodeEventReferenceExpression Event { get; public set; }
    public CodeExpression Listener { get; public set; }
    public CodeAttachEventStatement(CodeEventReferenceExpression eventRef, CodeExpression listener);
    public CodeAttachEventStatement(CodeExpression targetObject, string eventName, CodeExpression listener);
    public CodeEventReferenceExpression get_Event();
    public void set_Event(CodeEventReferenceExpression value);
    public CodeExpression get_Listener();
    public void set_Listener(CodeExpression value);
}
public class System.CodeDom.CodeAttributeArgument : object {
    public string Name { get; public set; }
    public CodeExpression Value { get; public set; }
    public CodeAttributeArgument(CodeExpression value);
    public CodeAttributeArgument(string name, CodeExpression value);
    public string get_Name();
    public void set_Name(string value);
    public CodeExpression get_Value();
    public void set_Value(CodeExpression value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeAttributeArgumentCollection : CollectionBase {
    public CodeAttributeArgument Item { get; public set; }
    public CodeAttributeArgumentCollection(CodeAttributeArgumentCollection value);
    public CodeAttributeArgumentCollection(CodeAttributeArgument[] value);
    public CodeAttributeArgument get_Item(int index);
    public void set_Item(int index, CodeAttributeArgument value);
    public int Add(CodeAttributeArgument value);
    public void AddRange(CodeAttributeArgumentCollection value);
    public void AddRange(CodeAttributeArgument[] value);
    public bool Contains(CodeAttributeArgument value);
    public void CopyTo(CodeAttributeArgument[] array, int index);
    public int IndexOf(CodeAttributeArgument value);
    public void Insert(int index, CodeAttributeArgument value);
    public void Remove(CodeAttributeArgument value);
}
public class System.CodeDom.CodeAttributeDeclaration : object {
    public CodeAttributeArgumentCollection Arguments { get; }
    public CodeTypeReference AttributeType { get; }
    public string Name { get; public set; }
    public CodeAttributeDeclaration(CodeTypeReference attributeType);
    public CodeAttributeDeclaration(CodeTypeReference attributeType, CodeAttributeArgument[] arguments);
    public CodeAttributeDeclaration(string name);
    public CodeAttributeDeclaration(string name, CodeAttributeArgument[] arguments);
    public CodeAttributeArgumentCollection get_Arguments();
    public CodeTypeReference get_AttributeType();
    public string get_Name();
    public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeAttributeDeclarationCollection : CollectionBase {
    public CodeAttributeDeclaration Item { get; public set; }
    public CodeAttributeDeclarationCollection(CodeAttributeDeclarationCollection value);
    public CodeAttributeDeclarationCollection(CodeAttributeDeclaration[] value);
    public CodeAttributeDeclaration get_Item(int index);
    public void set_Item(int index, CodeAttributeDeclaration value);
    public int Add(CodeAttributeDeclaration value);
    public void AddRange(CodeAttributeDeclarationCollection value);
    public void AddRange(CodeAttributeDeclaration[] value);
    public bool Contains(CodeAttributeDeclaration value);
    public void CopyTo(CodeAttributeDeclaration[] array, int index);
    public int IndexOf(CodeAttributeDeclaration value);
    public void Insert(int index, CodeAttributeDeclaration value);
    public void Remove(CodeAttributeDeclaration value);
}
public class System.CodeDom.CodeBaseReferenceExpression : CodeExpression {
}
public class System.CodeDom.CodeBinaryOperatorExpression : CodeExpression {
    public CodeExpression Left { get; public set; }
    public CodeBinaryOperatorType Operator { get; public set; }
    public CodeExpression Right { get; public set; }
    public CodeBinaryOperatorExpression(CodeExpression left, CodeBinaryOperatorType op, CodeExpression right);
    public CodeExpression get_Left();
    public void set_Left(CodeExpression value);
    public CodeBinaryOperatorType get_Operator();
    public void set_Operator(CodeBinaryOperatorType value);
    public CodeExpression get_Right();
    public void set_Right(CodeExpression value);
}
public enum System.CodeDom.CodeBinaryOperatorType : Enum {
    public int value__;
    public static CodeBinaryOperatorType Add;
    public static CodeBinaryOperatorType Subtract;
    public static CodeBinaryOperatorType Multiply;
    public static CodeBinaryOperatorType Divide;
    public static CodeBinaryOperatorType Modulus;
    public static CodeBinaryOperatorType Assign;
    public static CodeBinaryOperatorType IdentityInequality;
    public static CodeBinaryOperatorType IdentityEquality;
    public static CodeBinaryOperatorType ValueEquality;
    public static CodeBinaryOperatorType BitwiseOr;
    public static CodeBinaryOperatorType BitwiseAnd;
    public static CodeBinaryOperatorType BooleanOr;
    public static CodeBinaryOperatorType BooleanAnd;
    public static CodeBinaryOperatorType LessThan;
    public static CodeBinaryOperatorType LessThanOrEqual;
    public static CodeBinaryOperatorType GreaterThan;
    public static CodeBinaryOperatorType GreaterThanOrEqual;
}
public class System.CodeDom.CodeCastExpression : CodeExpression {
    public CodeExpression Expression { get; public set; }
    public CodeTypeReference TargetType { get; public set; }
    public CodeCastExpression(CodeTypeReference targetType, CodeExpression expression);
    public CodeCastExpression(string targetType, CodeExpression expression);
    public CodeCastExpression(Type targetType, CodeExpression expression);
    public CodeExpression get_Expression();
    public void set_Expression(CodeExpression value);
    public CodeTypeReference get_TargetType();
    public void set_TargetType(CodeTypeReference value);
}
public class System.CodeDom.CodeCatchClause : object {
    public CodeTypeReference CatchExceptionType { get; public set; }
    public string LocalName { get; public set; }
    public CodeStatementCollection Statements { get; }
    public CodeCatchClause(string localName);
    public CodeCatchClause(string localName, CodeTypeReference catchExceptionType);
    public CodeCatchClause(string localName, CodeTypeReference catchExceptionType, CodeStatement[] statements);
    public CodeTypeReference get_CatchExceptionType();
    public void set_CatchExceptionType(CodeTypeReference value);
    public string get_LocalName();
    public void set_LocalName(string value);
    public CodeStatementCollection get_Statements();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeCatchClauseCollection : CollectionBase {
    public CodeCatchClause Item { get; public set; }
    public CodeCatchClauseCollection(CodeCatchClauseCollection value);
    public CodeCatchClauseCollection(CodeCatchClause[] value);
    public CodeCatchClause get_Item(int index);
    public void set_Item(int index, CodeCatchClause value);
    public int Add(CodeCatchClause value);
    public void AddRange(CodeCatchClauseCollection value);
    public void AddRange(CodeCatchClause[] value);
    public bool Contains(CodeCatchClause value);
    public void CopyTo(CodeCatchClause[] array, int index);
    public int IndexOf(CodeCatchClause value);
    public void Insert(int index, CodeCatchClause value);
    public void Remove(CodeCatchClause value);
}
public class System.CodeDom.CodeChecksumPragma : CodeDirective {
    public Guid ChecksumAlgorithmId { get; public set; }
    public Byte[] ChecksumData { get; public set; }
    public string FileName { get; public set; }
    public CodeChecksumPragma(string fileName, Guid checksumAlgorithmId, Byte[] checksumData);
    public Guid get_ChecksumAlgorithmId();
    public void set_ChecksumAlgorithmId(Guid value);
    public Byte[] get_ChecksumData();
    public void set_ChecksumData(Byte[] value);
    public string get_FileName();
    public void set_FileName(string value);
}
public class System.CodeDom.CodeComment : CodeObject {
    public bool DocComment { get; public set; }
    public string Text { get; public set; }
    public CodeComment(string text);
    public CodeComment(string text, bool docComment);
    public bool get_DocComment();
    public void set_DocComment(bool value);
    public string get_Text();
    public void set_Text(string value);
}
public class System.CodeDom.CodeCommentStatement : CodeStatement {
    public CodeComment Comment { get; public set; }
    public CodeCommentStatement(CodeComment comment);
    public CodeCommentStatement(string text);
    public CodeCommentStatement(string text, bool docComment);
    public CodeComment get_Comment();
    public void set_Comment(CodeComment value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeCommentStatementCollection : CollectionBase {
    public CodeCommentStatement Item { get; public set; }
    public CodeCommentStatementCollection(CodeCommentStatementCollection value);
    public CodeCommentStatementCollection(CodeCommentStatement[] value);
    public CodeCommentStatement get_Item(int index);
    public void set_Item(int index, CodeCommentStatement value);
    public int Add(CodeCommentStatement value);
    public void AddRange(CodeCommentStatementCollection value);
    public void AddRange(CodeCommentStatement[] value);
    public bool Contains(CodeCommentStatement value);
    public void CopyTo(CodeCommentStatement[] array, int index);
    public int IndexOf(CodeCommentStatement value);
    public void Insert(int index, CodeCommentStatement value);
    public void Remove(CodeCommentStatement value);
}
public class System.CodeDom.CodeCompileUnit : CodeObject {
    public CodeAttributeDeclarationCollection AssemblyCustomAttributes { get; }
    public CodeDirectiveCollection EndDirectives { get; }
    public CodeNamespaceCollection Namespaces { get; }
    public StringCollection ReferencedAssemblies { get; }
    public CodeDirectiveCollection StartDirectives { get; }
    public CodeAttributeDeclarationCollection get_AssemblyCustomAttributes();
    public CodeDirectiveCollection get_EndDirectives();
    public CodeNamespaceCollection get_Namespaces();
    public StringCollection get_ReferencedAssemblies();
    public CodeDirectiveCollection get_StartDirectives();
}
public class System.CodeDom.CodeConditionStatement : CodeStatement {
    public CodeExpression Condition { get; public set; }
    public CodeStatementCollection FalseStatements { get; }
    public CodeStatementCollection TrueStatements { get; }
    public CodeConditionStatement(CodeExpression condition, CodeStatement[] trueStatements);
    public CodeConditionStatement(CodeExpression condition, CodeStatement[] trueStatements, CodeStatement[] falseStatements);
    public CodeExpression get_Condition();
    public void set_Condition(CodeExpression value);
    public CodeStatementCollection get_FalseStatements();
    public CodeStatementCollection get_TrueStatements();
}
public class System.CodeDom.CodeConstructor : CodeMemberMethod {
    public CodeExpressionCollection BaseConstructorArgs { get; }
    public CodeExpressionCollection ChainedConstructorArgs { get; }
    public CodeExpressionCollection get_BaseConstructorArgs();
    public CodeExpressionCollection get_ChainedConstructorArgs();
}
public class System.CodeDom.CodeDefaultValueExpression : CodeExpression {
    public CodeTypeReference Type { get; public set; }
    public CodeDefaultValueExpression(CodeTypeReference type);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeDelegateCreateExpression : CodeExpression {
    public CodeTypeReference DelegateType { get; public set; }
    public string MethodName { get; public set; }
    public CodeExpression TargetObject { get; public set; }
    public CodeDelegateCreateExpression(CodeTypeReference delegateType, CodeExpression targetObject, string methodName);
    public CodeTypeReference get_DelegateType();
    public void set_DelegateType(CodeTypeReference value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodeDelegateInvokeExpression : CodeExpression {
    public CodeExpressionCollection Parameters { get; }
    public CodeExpression TargetObject { get; public set; }
    public CodeDelegateInvokeExpression(CodeExpression targetObject);
    public CodeDelegateInvokeExpression(CodeExpression targetObject, CodeExpression[] parameters);
    public CodeExpressionCollection get_Parameters();
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodeDirectionExpression : CodeExpression {
    public FieldDirection Direction { get; public set; }
    public CodeExpression Expression { get; public set; }
    public CodeDirectionExpression(FieldDirection direction, CodeExpression expression);
    public FieldDirection get_Direction();
    public void set_Direction(FieldDirection value);
    public CodeExpression get_Expression();
    public void set_Expression(CodeExpression value);
}
public class System.CodeDom.CodeDirective : CodeObject {
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeDirectiveCollection : CollectionBase {
    public CodeDirective Item { get; public set; }
    public CodeDirectiveCollection(CodeDirectiveCollection value);
    public CodeDirectiveCollection(CodeDirective[] value);
    public CodeDirective get_Item(int index);
    public void set_Item(int index, CodeDirective value);
    public int Add(CodeDirective value);
    public void AddRange(CodeDirectiveCollection value);
    public void AddRange(CodeDirective[] value);
    public bool Contains(CodeDirective value);
    public void CopyTo(CodeDirective[] array, int index);
    public int IndexOf(CodeDirective value);
    public void Insert(int index, CodeDirective value);
    public void Remove(CodeDirective value);
}
public class System.CodeDom.CodeEntryPointMethod : CodeMemberMethod {
}
public class System.CodeDom.CodeEventReferenceExpression : CodeExpression {
    public string EventName { get; public set; }
    public CodeExpression TargetObject { get; public set; }
    public CodeEventReferenceExpression(CodeExpression targetObject, string eventName);
    public string get_EventName();
    public void set_EventName(string value);
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodeExpression : CodeObject {
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeExpressionCollection : CollectionBase {
    public CodeExpression Item { get; public set; }
    public CodeExpressionCollection(CodeExpressionCollection value);
    public CodeExpressionCollection(CodeExpression[] value);
    public CodeExpression get_Item(int index);
    public void set_Item(int index, CodeExpression value);
    public int Add(CodeExpression value);
    public void AddRange(CodeExpressionCollection value);
    public void AddRange(CodeExpression[] value);
    public bool Contains(CodeExpression value);
    public void CopyTo(CodeExpression[] array, int index);
    public int IndexOf(CodeExpression value);
    public void Insert(int index, CodeExpression value);
    public void Remove(CodeExpression value);
}
public class System.CodeDom.CodeExpressionStatement : CodeStatement {
    public CodeExpression Expression { get; public set; }
    public CodeExpressionStatement(CodeExpression expression);
    public CodeExpression get_Expression();
    public void set_Expression(CodeExpression value);
}
public class System.CodeDom.CodeFieldReferenceExpression : CodeExpression {
    public string FieldName { get; public set; }
    public CodeExpression TargetObject { get; public set; }
    public CodeFieldReferenceExpression(CodeExpression targetObject, string fieldName);
    public string get_FieldName();
    public void set_FieldName(string value);
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodeGotoStatement : CodeStatement {
    public string Label { get; public set; }
    public CodeGotoStatement(string label);
    public string get_Label();
    public void set_Label(string value);
}
public class System.CodeDom.CodeIndexerExpression : CodeExpression {
    public CodeExpressionCollection Indices { get; }
    public CodeExpression TargetObject { get; public set; }
    public CodeIndexerExpression(CodeExpression targetObject, CodeExpression[] indices);
    public CodeExpressionCollection get_Indices();
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodeIterationStatement : CodeStatement {
    public CodeStatement IncrementStatement { get; public set; }
    public CodeStatement InitStatement { get; public set; }
    public CodeStatementCollection Statements { get; }
    public CodeExpression TestExpression { get; public set; }
    public CodeIterationStatement(CodeStatement initStatement, CodeExpression testExpression, CodeStatement incrementStatement, CodeStatement[] statements);
    public CodeStatement get_IncrementStatement();
    public void set_IncrementStatement(CodeStatement value);
    public CodeStatement get_InitStatement();
    public void set_InitStatement(CodeStatement value);
    public CodeStatementCollection get_Statements();
    public CodeExpression get_TestExpression();
    public void set_TestExpression(CodeExpression value);
}
public class System.CodeDom.CodeLabeledStatement : CodeStatement {
    public string Label { get; public set; }
    public CodeStatement Statement { get; public set; }
    public CodeLabeledStatement(string label);
    public CodeLabeledStatement(string label, CodeStatement statement);
    public string get_Label();
    public void set_Label(string value);
    public CodeStatement get_Statement();
    public void set_Statement(CodeStatement value);
}
public class System.CodeDom.CodeLinePragma : object {
    public string FileName { get; public set; }
    public int LineNumber { get; public set; }
    public CodeLinePragma(string fileName, int lineNumber);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
}
public class System.CodeDom.CodeMemberEvent : CodeTypeMember {
    public CodeTypeReferenceCollection ImplementationTypes { get; }
    public CodeTypeReference PrivateImplementationType { get; public set; }
    public CodeTypeReference Type { get; public set; }
    public CodeTypeReferenceCollection get_ImplementationTypes();
    public CodeTypeReference get_PrivateImplementationType();
    public void set_PrivateImplementationType(CodeTypeReference value);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeMemberField : CodeTypeMember {
    public CodeExpression InitExpression { get; public set; }
    public CodeTypeReference Type { get; public set; }
    public CodeMemberField(CodeTypeReference type, string name);
    public CodeMemberField(string type, string name);
    public CodeMemberField(Type type, string name);
    public CodeExpression get_InitExpression();
    public void set_InitExpression(CodeExpression value);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeMemberMethod : CodeTypeMember {
    public CodeTypeReferenceCollection ImplementationTypes { get; }
    public CodeParameterDeclarationExpressionCollection Parameters { get; }
    public CodeTypeReference PrivateImplementationType { get; public set; }
    public CodeTypeReference ReturnType { get; public set; }
    public CodeAttributeDeclarationCollection ReturnTypeCustomAttributes { get; }
    public CodeStatementCollection Statements { get; }
    public CodeTypeParameterCollection TypeParameters { get; }
    public CodeTypeReferenceCollection get_ImplementationTypes();
    public CodeParameterDeclarationExpressionCollection get_Parameters();
    public CodeTypeReference get_PrivateImplementationType();
    public void set_PrivateImplementationType(CodeTypeReference value);
    public CodeTypeReference get_ReturnType();
    public void set_ReturnType(CodeTypeReference value);
    public CodeAttributeDeclarationCollection get_ReturnTypeCustomAttributes();
    public CodeStatementCollection get_Statements();
    public CodeTypeParameterCollection get_TypeParameters();
    public void add_PopulateImplementationTypes(EventHandler value);
    public void remove_PopulateImplementationTypes(EventHandler value);
    public void add_PopulateParameters(EventHandler value);
    public void remove_PopulateParameters(EventHandler value);
    public void add_PopulateStatements(EventHandler value);
    public void remove_PopulateStatements(EventHandler value);
}
public class System.CodeDom.CodeMemberProperty : CodeTypeMember {
    public CodeStatementCollection GetStatements { get; }
    public bool HasGet { get; public set; }
    public bool HasSet { get; public set; }
    public CodeTypeReferenceCollection ImplementationTypes { get; }
    public CodeParameterDeclarationExpressionCollection Parameters { get; }
    public CodeTypeReference PrivateImplementationType { get; public set; }
    public CodeStatementCollection SetStatements { get; }
    public CodeTypeReference Type { get; public set; }
    public CodeStatementCollection get_GetStatements();
    public bool get_HasGet();
    public void set_HasGet(bool value);
    public bool get_HasSet();
    public void set_HasSet(bool value);
    public CodeTypeReferenceCollection get_ImplementationTypes();
    public CodeParameterDeclarationExpressionCollection get_Parameters();
    public CodeTypeReference get_PrivateImplementationType();
    public void set_PrivateImplementationType(CodeTypeReference value);
    public CodeStatementCollection get_SetStatements();
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeMethodInvokeExpression : CodeExpression {
    public CodeMethodReferenceExpression Method { get; public set; }
    public CodeExpressionCollection Parameters { get; }
    public CodeMethodInvokeExpression(CodeExpression targetObject, string methodName, CodeExpression[] parameters);
    public CodeMethodInvokeExpression(CodeMethodReferenceExpression method, CodeExpression[] parameters);
    public CodeMethodReferenceExpression get_Method();
    public void set_Method(CodeMethodReferenceExpression value);
    public CodeExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeMethodReferenceExpression : CodeExpression {
    public string MethodName { get; public set; }
    public CodeExpression TargetObject { get; public set; }
    public CodeTypeReferenceCollection TypeArguments { get; }
    public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName);
    public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName, CodeTypeReference[] typeParameters);
    public string get_MethodName();
    public void set_MethodName(string value);
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
    public CodeTypeReferenceCollection get_TypeArguments();
}
public class System.CodeDom.CodeMethodReturnStatement : CodeStatement {
    public CodeExpression Expression { get; public set; }
    public CodeMethodReturnStatement(CodeExpression expression);
    public CodeExpression get_Expression();
    public void set_Expression(CodeExpression value);
}
public class System.CodeDom.CodeNamespace : CodeObject {
    public CodeCommentStatementCollection Comments { get; }
    public CodeNamespaceImportCollection Imports { get; }
    public string Name { get; public set; }
    public CodeTypeDeclarationCollection Types { get; }
    public CodeNamespace(string name);
    public CodeCommentStatementCollection get_Comments();
    public CodeNamespaceImportCollection get_Imports();
    public string get_Name();
    public void set_Name(string value);
    public CodeTypeDeclarationCollection get_Types();
    public void add_PopulateComments(EventHandler value);
    public void remove_PopulateComments(EventHandler value);
    public void add_PopulateImports(EventHandler value);
    public void remove_PopulateImports(EventHandler value);
    public void add_PopulateTypes(EventHandler value);
    public void remove_PopulateTypes(EventHandler value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeNamespaceCollection : CollectionBase {
    public CodeNamespace Item { get; public set; }
    public CodeNamespaceCollection(CodeNamespaceCollection value);
    public CodeNamespaceCollection(CodeNamespace[] value);
    public CodeNamespace get_Item(int index);
    public void set_Item(int index, CodeNamespace value);
    public int Add(CodeNamespace value);
    public void AddRange(CodeNamespaceCollection value);
    public void AddRange(CodeNamespace[] value);
    public bool Contains(CodeNamespace value);
    public void CopyTo(CodeNamespace[] array, int index);
    public int IndexOf(CodeNamespace value);
    public void Insert(int index, CodeNamespace value);
    public void Remove(CodeNamespace value);
}
public class System.CodeDom.CodeNamespaceImport : CodeObject {
    public CodeLinePragma LinePragma { get; public set; }
    public string Namespace { get; public set; }
    public CodeNamespaceImport(string nameSpace);
    public CodeLinePragma get_LinePragma();
    public void set_LinePragma(CodeLinePragma value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeNamespaceImportCollection : object {
    public int Count { get; }
    public CodeNamespaceImport Item { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int get_Count();
    public CodeNamespaceImport get_Item(int index);
    public void set_Item(int index, CodeNamespaceImport value);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Add(CodeNamespaceImport value);
    public void AddRange(CodeNamespaceImport[] value);
    public void Clear();
    public IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public class System.CodeDom.CodeObject : object {
    public IDictionary UserData { get; }
    public IDictionary get_UserData();
}
public class System.CodeDom.CodeObjectCreateExpression : CodeExpression {
    public CodeTypeReference CreateType { get; public set; }
    public CodeExpressionCollection Parameters { get; }
    public CodeObjectCreateExpression(CodeTypeReference createType, CodeExpression[] parameters);
    public CodeObjectCreateExpression(string createType, CodeExpression[] parameters);
    public CodeObjectCreateExpression(Type createType, CodeExpression[] parameters);
    public CodeTypeReference get_CreateType();
    public void set_CreateType(CodeTypeReference value);
    public CodeExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeParameterDeclarationExpression : CodeExpression {
    public CodeAttributeDeclarationCollection CustomAttributes { get; public set; }
    public FieldDirection Direction { get; public set; }
    public string Name { get; public set; }
    public CodeTypeReference Type { get; public set; }
    public CodeParameterDeclarationExpression(CodeTypeReference type, string name);
    public CodeParameterDeclarationExpression(string type, string name);
    public CodeParameterDeclarationExpression(Type type, string name);
    public CodeAttributeDeclarationCollection get_CustomAttributes();
    public void set_CustomAttributes(CodeAttributeDeclarationCollection value);
    public FieldDirection get_Direction();
    public void set_Direction(FieldDirection value);
    public string get_Name();
    public void set_Name(string value);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeParameterDeclarationExpressionCollection : CollectionBase {
    public CodeParameterDeclarationExpression Item { get; public set; }
    public CodeParameterDeclarationExpressionCollection(CodeParameterDeclarationExpressionCollection value);
    public CodeParameterDeclarationExpressionCollection(CodeParameterDeclarationExpression[] value);
    public CodeParameterDeclarationExpression get_Item(int index);
    public void set_Item(int index, CodeParameterDeclarationExpression value);
    public int Add(CodeParameterDeclarationExpression value);
    public void AddRange(CodeParameterDeclarationExpressionCollection value);
    public void AddRange(CodeParameterDeclarationExpression[] value);
    public bool Contains(CodeParameterDeclarationExpression value);
    public void CopyTo(CodeParameterDeclarationExpression[] array, int index);
    public int IndexOf(CodeParameterDeclarationExpression value);
    public void Insert(int index, CodeParameterDeclarationExpression value);
    public void Remove(CodeParameterDeclarationExpression value);
}
public class System.CodeDom.CodePrimitiveExpression : CodeExpression {
    public object Value { get; public set; }
    public CodePrimitiveExpression(object value);
    public object get_Value();
    public void set_Value(object value);
}
public class System.CodeDom.CodePropertyReferenceExpression : CodeExpression {
    public string PropertyName { get; public set; }
    public CodeExpression TargetObject { get; public set; }
    public CodePropertyReferenceExpression(CodeExpression targetObject, string propertyName);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public CodeExpression get_TargetObject();
    public void set_TargetObject(CodeExpression value);
}
public class System.CodeDom.CodePropertySetValueReferenceExpression : CodeExpression {
}
public class System.CodeDom.CodeRegionDirective : CodeDirective {
    public CodeRegionMode RegionMode { get; public set; }
    public string RegionText { get; public set; }
    public CodeRegionDirective(CodeRegionMode regionMode, string regionText);
    public CodeRegionMode get_RegionMode();
    public void set_RegionMode(CodeRegionMode value);
    public string get_RegionText();
    public void set_RegionText(string value);
}
public enum System.CodeDom.CodeRegionMode : Enum {
    public int value__;
    public static CodeRegionMode None;
    public static CodeRegionMode Start;
    public static CodeRegionMode End;
}
public class System.CodeDom.CodeRemoveEventStatement : CodeStatement {
    public CodeEventReferenceExpression Event { get; public set; }
    public CodeExpression Listener { get; public set; }
    public CodeRemoveEventStatement(CodeEventReferenceExpression eventRef, CodeExpression listener);
    public CodeRemoveEventStatement(CodeExpression targetObject, string eventName, CodeExpression listener);
    public CodeEventReferenceExpression get_Event();
    public void set_Event(CodeEventReferenceExpression value);
    public CodeExpression get_Listener();
    public void set_Listener(CodeExpression value);
}
public class System.CodeDom.CodeSnippetCompileUnit : CodeCompileUnit {
    public CodeLinePragma LinePragma { get; public set; }
    public string Value { get; public set; }
    public CodeSnippetCompileUnit(string value);
    public CodeLinePragma get_LinePragma();
    public void set_LinePragma(CodeLinePragma value);
    public string get_Value();
    public void set_Value(string value);
}
public class System.CodeDom.CodeSnippetExpression : CodeExpression {
    public string Value { get; public set; }
    public CodeSnippetExpression(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class System.CodeDom.CodeSnippetStatement : CodeStatement {
    public string Value { get; public set; }
    public CodeSnippetStatement(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class System.CodeDom.CodeSnippetTypeMember : CodeTypeMember {
    public string Text { get; public set; }
    public CodeSnippetTypeMember(string text);
    public string get_Text();
    public void set_Text(string value);
}
public class System.CodeDom.CodeStatement : CodeObject {
    public CodeDirectiveCollection EndDirectives { get; }
    public CodeLinePragma LinePragma { get; public set; }
    public CodeDirectiveCollection StartDirectives { get; }
    public CodeDirectiveCollection get_EndDirectives();
    public CodeLinePragma get_LinePragma();
    public void set_LinePragma(CodeLinePragma value);
    public CodeDirectiveCollection get_StartDirectives();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeStatementCollection : CollectionBase {
    public CodeStatement Item { get; public set; }
    public CodeStatementCollection(CodeStatementCollection value);
    public CodeStatementCollection(CodeStatement[] value);
    public CodeStatement get_Item(int index);
    public void set_Item(int index, CodeStatement value);
    public int Add(CodeExpression value);
    public int Add(CodeStatement value);
    public void AddRange(CodeStatementCollection value);
    public void AddRange(CodeStatement[] value);
    public bool Contains(CodeStatement value);
    public void CopyTo(CodeStatement[] array, int index);
    public int IndexOf(CodeStatement value);
    public void Insert(int index, CodeStatement value);
    public void Remove(CodeStatement value);
}
public class System.CodeDom.CodeThisReferenceExpression : CodeExpression {
}
public class System.CodeDom.CodeThrowExceptionStatement : CodeStatement {
    public CodeExpression ToThrow { get; public set; }
    public CodeThrowExceptionStatement(CodeExpression toThrow);
    public CodeExpression get_ToThrow();
    public void set_ToThrow(CodeExpression value);
}
public class System.CodeDom.CodeTryCatchFinallyStatement : CodeStatement {
    public CodeCatchClauseCollection CatchClauses { get; }
    public CodeStatementCollection FinallyStatements { get; }
    public CodeStatementCollection TryStatements { get; }
    public CodeTryCatchFinallyStatement(CodeStatement[] tryStatements, CodeCatchClause[] catchClauses);
    public CodeTryCatchFinallyStatement(CodeStatement[] tryStatements, CodeCatchClause[] catchClauses, CodeStatement[] finallyStatements);
    public CodeCatchClauseCollection get_CatchClauses();
    public CodeStatementCollection get_FinallyStatements();
    public CodeStatementCollection get_TryStatements();
}
public class System.CodeDom.CodeTypeConstructor : CodeMemberMethod {
}
public class System.CodeDom.CodeTypeDeclaration : CodeTypeMember {
    public CodeTypeReferenceCollection BaseTypes { get; }
    public bool IsClass { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsInterface { get; public set; }
    public bool IsPartial { get; public set; }
    public bool IsStruct { get; public set; }
    public CodeTypeMemberCollection Members { get; }
    public TypeAttributes TypeAttributes { get; public set; }
    public CodeTypeParameterCollection TypeParameters { get; }
    public CodeTypeDeclaration(string name);
    public CodeTypeReferenceCollection get_BaseTypes();
    public bool get_IsClass();
    public void set_IsClass(bool value);
    public bool get_IsEnum();
    public void set_IsEnum(bool value);
    public bool get_IsInterface();
    public void set_IsInterface(bool value);
    public bool get_IsPartial();
    public void set_IsPartial(bool value);
    public bool get_IsStruct();
    public void set_IsStruct(bool value);
    public CodeTypeMemberCollection get_Members();
    public TypeAttributes get_TypeAttributes();
    public void set_TypeAttributes(TypeAttributes value);
    public CodeTypeParameterCollection get_TypeParameters();
    public void add_PopulateBaseTypes(EventHandler value);
    public void remove_PopulateBaseTypes(EventHandler value);
    public void add_PopulateMembers(EventHandler value);
    public void remove_PopulateMembers(EventHandler value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeDeclarationCollection : CollectionBase {
    public CodeTypeDeclaration Item { get; public set; }
    public CodeTypeDeclarationCollection(CodeTypeDeclarationCollection value);
    public CodeTypeDeclarationCollection(CodeTypeDeclaration[] value);
    public CodeTypeDeclaration get_Item(int index);
    public void set_Item(int index, CodeTypeDeclaration value);
    public int Add(CodeTypeDeclaration value);
    public void AddRange(CodeTypeDeclarationCollection value);
    public void AddRange(CodeTypeDeclaration[] value);
    public bool Contains(CodeTypeDeclaration value);
    public void CopyTo(CodeTypeDeclaration[] array, int index);
    public int IndexOf(CodeTypeDeclaration value);
    public void Insert(int index, CodeTypeDeclaration value);
    public void Remove(CodeTypeDeclaration value);
}
public class System.CodeDom.CodeTypeDelegate : CodeTypeDeclaration {
    public CodeParameterDeclarationExpressionCollection Parameters { get; }
    public CodeTypeReference ReturnType { get; public set; }
    public CodeTypeDelegate(string name);
    public CodeParameterDeclarationExpressionCollection get_Parameters();
    public CodeTypeReference get_ReturnType();
    public void set_ReturnType(CodeTypeReference value);
}
public class System.CodeDom.CodeTypeMember : CodeObject {
    public MemberAttributes Attributes { get; public set; }
    public CodeCommentStatementCollection Comments { get; }
    public CodeAttributeDeclarationCollection CustomAttributes { get; public set; }
    public CodeDirectiveCollection EndDirectives { get; }
    public CodeLinePragma LinePragma { get; public set; }
    public string Name { get; public set; }
    public CodeDirectiveCollection StartDirectives { get; }
    public MemberAttributes get_Attributes();
    public void set_Attributes(MemberAttributes value);
    public CodeCommentStatementCollection get_Comments();
    public CodeAttributeDeclarationCollection get_CustomAttributes();
    public void set_CustomAttributes(CodeAttributeDeclarationCollection value);
    public CodeDirectiveCollection get_EndDirectives();
    public CodeLinePragma get_LinePragma();
    public void set_LinePragma(CodeLinePragma value);
    public string get_Name();
    public void set_Name(string value);
    public CodeDirectiveCollection get_StartDirectives();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeMemberCollection : CollectionBase {
    public CodeTypeMember Item { get; public set; }
    public CodeTypeMemberCollection(CodeTypeMemberCollection value);
    public CodeTypeMemberCollection(CodeTypeMember[] value);
    public CodeTypeMember get_Item(int index);
    public void set_Item(int index, CodeTypeMember value);
    public int Add(CodeTypeMember value);
    public void AddRange(CodeTypeMemberCollection value);
    public void AddRange(CodeTypeMember[] value);
    public bool Contains(CodeTypeMember value);
    public void CopyTo(CodeTypeMember[] array, int index);
    public int IndexOf(CodeTypeMember value);
    public void Insert(int index, CodeTypeMember value);
    public void Remove(CodeTypeMember value);
}
public class System.CodeDom.CodeTypeOfExpression : CodeExpression {
    public CodeTypeReference Type { get; public set; }
    public CodeTypeOfExpression(CodeTypeReference type);
    public CodeTypeOfExpression(string type);
    public CodeTypeOfExpression(Type type);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeTypeParameter : CodeObject {
    public CodeTypeReferenceCollection Constraints { get; }
    public CodeAttributeDeclarationCollection CustomAttributes { get; }
    public bool HasConstructorConstraint { get; public set; }
    public string Name { get; public set; }
    public CodeTypeParameter(string name);
    public CodeTypeReferenceCollection get_Constraints();
    public CodeAttributeDeclarationCollection get_CustomAttributes();
    public bool get_HasConstructorConstraint();
    public void set_HasConstructorConstraint(bool value);
    public string get_Name();
    public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeParameterCollection : CollectionBase {
    public CodeTypeParameter Item { get; public set; }
    public CodeTypeParameterCollection(CodeTypeParameterCollection value);
    public CodeTypeParameterCollection(CodeTypeParameter[] value);
    public CodeTypeParameter get_Item(int index);
    public void set_Item(int index, CodeTypeParameter value);
    public int Add(CodeTypeParameter value);
    public void Add(string value);
    public void AddRange(CodeTypeParameterCollection value);
    public void AddRange(CodeTypeParameter[] value);
    public bool Contains(CodeTypeParameter value);
    public void CopyTo(CodeTypeParameter[] array, int index);
    public int IndexOf(CodeTypeParameter value);
    public void Insert(int index, CodeTypeParameter value);
    public void Remove(CodeTypeParameter value);
}
public class System.CodeDom.CodeTypeReference : CodeObject {
    public CodeTypeReference ArrayElementType { get; public set; }
    public int ArrayRank { get; public set; }
    public string BaseType { get; public set; }
    public CodeTypeReferenceOptions Options { get; public set; }
    public CodeTypeReferenceCollection TypeArguments { get; }
    public CodeTypeReference(CodeTypeParameter typeParameter);
    public CodeTypeReference(CodeTypeReference arrayType, int rank);
    public CodeTypeReference(string typeName);
    public CodeTypeReference(string typeName, CodeTypeReferenceOptions codeTypeReferenceOption);
    public CodeTypeReference(string typeName, CodeTypeReference[] typeArguments);
    public CodeTypeReference(string baseType, int rank);
    public CodeTypeReference(Type type);
    public CodeTypeReference(Type type, CodeTypeReferenceOptions codeTypeReferenceOption);
    public CodeTypeReference get_ArrayElementType();
    public void set_ArrayElementType(CodeTypeReference value);
    public int get_ArrayRank();
    public void set_ArrayRank(int value);
    public string get_BaseType();
    public void set_BaseType(string value);
    public CodeTypeReferenceOptions get_Options();
    public void set_Options(CodeTypeReferenceOptions value);
    public CodeTypeReferenceCollection get_TypeArguments();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeReferenceCollection : CollectionBase {
    public CodeTypeReference Item { get; public set; }
    public CodeTypeReferenceCollection(CodeTypeReferenceCollection value);
    public CodeTypeReferenceCollection(CodeTypeReference[] value);
    public CodeTypeReference get_Item(int index);
    public void set_Item(int index, CodeTypeReference value);
    public int Add(CodeTypeReference value);
    public void Add(string value);
    public void Add(Type value);
    public void AddRange(CodeTypeReferenceCollection value);
    public void AddRange(CodeTypeReference[] value);
    public bool Contains(CodeTypeReference value);
    public void CopyTo(CodeTypeReference[] array, int index);
    public int IndexOf(CodeTypeReference value);
    public void Insert(int index, CodeTypeReference value);
    public void Remove(CodeTypeReference value);
}
public class System.CodeDom.CodeTypeReferenceExpression : CodeExpression {
    public CodeTypeReference Type { get; public set; }
    public CodeTypeReferenceExpression(CodeTypeReference type);
    public CodeTypeReferenceExpression(string type);
    public CodeTypeReferenceExpression(Type type);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
[FlagsAttribute]
public enum System.CodeDom.CodeTypeReferenceOptions : Enum {
    public int value__;
    public static CodeTypeReferenceOptions GlobalReference;
    public static CodeTypeReferenceOptions GenericTypeParameter;
}
public class System.CodeDom.CodeVariableDeclarationStatement : CodeStatement {
    public CodeExpression InitExpression { get; public set; }
    public string Name { get; public set; }
    public CodeTypeReference Type { get; public set; }
    public CodeVariableDeclarationStatement(CodeTypeReference type, string name);
    public CodeVariableDeclarationStatement(CodeTypeReference type, string name, CodeExpression initExpression);
    public CodeVariableDeclarationStatement(string type, string name);
    public CodeVariableDeclarationStatement(string type, string name, CodeExpression initExpression);
    public CodeVariableDeclarationStatement(Type type, string name);
    public CodeVariableDeclarationStatement(Type type, string name, CodeExpression initExpression);
    public CodeExpression get_InitExpression();
    public void set_InitExpression(CodeExpression value);
    public string get_Name();
    public void set_Name(string value);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeVariableReferenceExpression : CodeExpression {
    public string VariableName { get; public set; }
    public CodeVariableReferenceExpression(string variableName);
    public string get_VariableName();
    public void set_VariableName(string value);
}
public abstract class System.CodeDom.Compiler.CodeCompiler : CodeGenerator {
    protected string CompilerName { get; }
    protected string FileExtension { get; }
    protected abstract virtual string get_CompilerName();
    protected abstract virtual string get_FileExtension();
    protected abstract virtual string CmdArgsFromParameters(CompilerParameters options);
    protected virtual CompilerResults FromDom(CompilerParameters options, CodeCompileUnit e);
    protected virtual CompilerResults FromDomBatch(CompilerParameters options, CodeCompileUnit[] ea);
    protected virtual CompilerResults FromFile(CompilerParameters options, string fileName);
    protected virtual CompilerResults FromFileBatch(CompilerParameters options, String[] fileNames);
    protected virtual CompilerResults FromSource(CompilerParameters options, string source);
    protected virtual CompilerResults FromSourceBatch(CompilerParameters options, String[] sources);
    protected virtual string GetResponseFileCmdArgs(CompilerParameters options, string cmdArgs);
    protected static string JoinStringArray(String[] sa, string separator);
    protected abstract virtual void ProcessCompilerOutputLine(CompilerResults results, string line);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit e);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(CompilerParameters options, CodeCompileUnit[] ea);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(CompilerParameters options, string fileName);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(CompilerParameters options, String[] fileNames);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(CompilerParameters options, string source);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(CompilerParameters options, String[] sources);
}
[ToolboxItemAttribute("False")]
public abstract class System.CodeDom.Compiler.CodeDomProvider : Component {
    public string FileExtension { get; }
    public LanguageOptions LanguageOptions { get; }
    public virtual string get_FileExtension();
    public virtual LanguageOptions get_LanguageOptions();
    public virtual CompilerResults CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit[] compilationUnits);
    public virtual CompilerResults CompileAssemblyFromFile(CompilerParameters options, String[] fileNames);
    public virtual CompilerResults CompileAssemblyFromSource(CompilerParameters options, String[] sources);
    [ObsoleteAttribute("ICodeCompiler has been deprecated. Use the methods directly on the CodeDomProvider class instead. Classes inheriting from CodeDomProvider must still implement this interface, and should suppress this warning or also mark this method as obsolete.")]
public abstract virtual ICodeCompiler CreateCompiler();
    public virtual string CreateEscapedIdentifier(string value);
    [ObsoleteAttribute("ICodeGenerator has been deprecated. Use the methods directly on the CodeDomProvider class instead. Classes inheriting from CodeDomProvider must still implement this interface, and should suppress this warning or also mark this method as obsolete.")]
public abstract virtual ICodeGenerator CreateGenerator();
    public virtual ICodeGenerator CreateGenerator(TextWriter output);
    public virtual ICodeGenerator CreateGenerator(string fileName);
    [ObsoleteAttribute("ICodeParser has been deprecated. Use the methods directly on the CodeDomProvider class instead. Classes inheriting from CodeDomProvider must still implement this interface, and should suppress this warning or also mark this method as obsolete.")]
public virtual ICodeParser CreateParser();
    public static CodeDomProvider CreateProvider(string language);
    public static CodeDomProvider CreateProvider(string language, IDictionary`2<string, string> providerOptions);
    public virtual string CreateValidIdentifier(string value);
    public virtual void GenerateCodeFromCompileUnit(CodeCompileUnit compileUnit, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromExpression(CodeExpression expression, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromNamespace(CodeNamespace codeNamespace, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromStatement(CodeStatement statement, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromType(CodeTypeDeclaration codeType, TextWriter writer, CodeGeneratorOptions options);
    public static CompilerInfo[] GetAllCompilerInfo();
    public static CompilerInfo GetCompilerInfo(string language);
    public virtual TypeConverter GetConverter(Type type);
    public static string GetLanguageFromExtension(string extension);
    public virtual string GetTypeOutput(CodeTypeReference type);
    public static bool IsDefinedExtension(string extension);
    public static bool IsDefinedLanguage(string language);
    public virtual bool IsValidIdentifier(string value);
    public virtual CodeCompileUnit Parse(TextReader codeStream);
    public virtual bool Supports(GeneratorSupport generatorSupport);
}
public abstract class System.CodeDom.Compiler.CodeGenerator : object {
    protected CodeTypeDeclaration CurrentClass { get; }
    protected CodeTypeMember CurrentMember { get; }
    protected string CurrentMemberName { get; }
    protected string CurrentTypeName { get; }
    protected int Indent { get; protected set; }
    protected bool IsCurrentClass { get; }
    protected bool IsCurrentDelegate { get; }
    protected bool IsCurrentEnum { get; }
    protected bool IsCurrentInterface { get; }
    protected bool IsCurrentStruct { get; }
    protected string NullToken { get; }
    protected CodeGeneratorOptions Options { get; }
    protected TextWriter Output { get; }
    protected CodeTypeDeclaration get_CurrentClass();
    protected CodeTypeMember get_CurrentMember();
    protected string get_CurrentMemberName();
    protected string get_CurrentTypeName();
    protected int get_Indent();
    protected void set_Indent(int value);
    protected bool get_IsCurrentClass();
    protected bool get_IsCurrentDelegate();
    protected bool get_IsCurrentEnum();
    protected bool get_IsCurrentInterface();
    protected bool get_IsCurrentStruct();
    protected abstract virtual string get_NullToken();
    protected CodeGeneratorOptions get_Options();
    protected TextWriter get_Output();
    protected virtual void ContinueOnNewLine(string st);
    protected abstract virtual string CreateEscapedIdentifier(string value);
    protected abstract virtual string CreateValidIdentifier(string value);
    protected abstract virtual void GenerateArgumentReferenceExpression(CodeArgumentReferenceExpression e);
    protected abstract virtual void GenerateArrayCreateExpression(CodeArrayCreateExpression e);
    protected abstract virtual void GenerateArrayIndexerExpression(CodeArrayIndexerExpression e);
    protected abstract virtual void GenerateAssignStatement(CodeAssignStatement e);
    protected abstract virtual void GenerateAttachEventStatement(CodeAttachEventStatement e);
    protected abstract virtual void GenerateAttributeDeclarationsEnd(CodeAttributeDeclarationCollection attributes);
    protected abstract virtual void GenerateAttributeDeclarationsStart(CodeAttributeDeclarationCollection attributes);
    protected abstract virtual void GenerateBaseReferenceExpression(CodeBaseReferenceExpression e);
    protected virtual void GenerateBinaryOperatorExpression(CodeBinaryOperatorExpression e);
    protected abstract virtual void GenerateCastExpression(CodeCastExpression e);
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    protected abstract virtual void GenerateComment(CodeComment e);
    protected virtual void GenerateCommentStatement(CodeCommentStatement e);
    protected virtual void GenerateCommentStatements(CodeCommentStatementCollection e);
    protected virtual void GenerateCompileUnit(CodeCompileUnit e);
    protected virtual void GenerateCompileUnitEnd(CodeCompileUnit e);
    protected virtual void GenerateCompileUnitStart(CodeCompileUnit e);
    protected abstract virtual void GenerateConditionStatement(CodeConditionStatement e);
    protected abstract virtual void GenerateConstructor(CodeConstructor e, CodeTypeDeclaration c);
    protected virtual void GenerateDecimalValue(decimal d);
    protected virtual void GenerateDefaultValueExpression(CodeDefaultValueExpression e);
    protected abstract virtual void GenerateDelegateCreateExpression(CodeDelegateCreateExpression e);
    protected abstract virtual void GenerateDelegateInvokeExpression(CodeDelegateInvokeExpression e);
    protected virtual void GenerateDirectionExpression(CodeDirectionExpression e);
    protected virtual void GenerateDirectives(CodeDirectiveCollection directives);
    protected virtual void GenerateDoubleValue(double d);
    protected abstract virtual void GenerateEntryPointMethod(CodeEntryPointMethod e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateEvent(CodeMemberEvent e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateEventReferenceExpression(CodeEventReferenceExpression e);
    protected void GenerateExpression(CodeExpression e);
    protected abstract virtual void GenerateExpressionStatement(CodeExpressionStatement e);
    protected abstract virtual void GenerateField(CodeMemberField e);
    protected abstract virtual void GenerateFieldReferenceExpression(CodeFieldReferenceExpression e);
    protected abstract virtual void GenerateGotoStatement(CodeGotoStatement e);
    protected abstract virtual void GenerateIndexerExpression(CodeIndexerExpression e);
    protected abstract virtual void GenerateIterationStatement(CodeIterationStatement e);
    protected abstract virtual void GenerateLabeledStatement(CodeLabeledStatement e);
    protected abstract virtual void GenerateLinePragmaEnd(CodeLinePragma e);
    protected abstract virtual void GenerateLinePragmaStart(CodeLinePragma e);
    protected abstract virtual void GenerateMethod(CodeMemberMethod e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateMethodInvokeExpression(CodeMethodInvokeExpression e);
    protected abstract virtual void GenerateMethodReferenceExpression(CodeMethodReferenceExpression e);
    protected abstract virtual void GenerateMethodReturnStatement(CodeMethodReturnStatement e);
    protected virtual void GenerateNamespace(CodeNamespace e);
    protected abstract virtual void GenerateNamespaceEnd(CodeNamespace e);
    protected abstract virtual void GenerateNamespaceImport(CodeNamespaceImport e);
    protected void GenerateNamespaceImports(CodeNamespace e);
    protected void GenerateNamespaces(CodeCompileUnit e);
    protected abstract virtual void GenerateNamespaceStart(CodeNamespace e);
    protected abstract virtual void GenerateObjectCreateExpression(CodeObjectCreateExpression e);
    protected virtual void GenerateParameterDeclarationExpression(CodeParameterDeclarationExpression e);
    protected virtual void GeneratePrimitiveExpression(CodePrimitiveExpression e);
    protected abstract virtual void GenerateProperty(CodeMemberProperty e, CodeTypeDeclaration c);
    protected abstract virtual void GeneratePropertyReferenceExpression(CodePropertyReferenceExpression e);
    protected abstract virtual void GeneratePropertySetValueReferenceExpression(CodePropertySetValueReferenceExpression e);
    protected abstract virtual void GenerateRemoveEventStatement(CodeRemoveEventStatement e);
    protected virtual void GenerateSingleFloatValue(float s);
    protected virtual void GenerateSnippetCompileUnit(CodeSnippetCompileUnit e);
    protected abstract virtual void GenerateSnippetExpression(CodeSnippetExpression e);
    protected abstract virtual void GenerateSnippetMember(CodeSnippetTypeMember e);
    protected virtual void GenerateSnippetStatement(CodeSnippetStatement e);
    protected void GenerateStatement(CodeStatement e);
    protected void GenerateStatements(CodeStatementCollection stmts);
    protected abstract virtual void GenerateThisReferenceExpression(CodeThisReferenceExpression e);
    protected abstract virtual void GenerateThrowExceptionStatement(CodeThrowExceptionStatement e);
    protected abstract virtual void GenerateTryCatchFinallyStatement(CodeTryCatchFinallyStatement e);
    protected abstract virtual void GenerateTypeConstructor(CodeTypeConstructor e);
    protected abstract virtual void GenerateTypeEnd(CodeTypeDeclaration e);
    protected virtual void GenerateTypeOfExpression(CodeTypeOfExpression e);
    protected virtual void GenerateTypeReferenceExpression(CodeTypeReferenceExpression e);
    protected void GenerateTypes(CodeNamespace e);
    protected abstract virtual void GenerateTypeStart(CodeTypeDeclaration e);
    protected abstract virtual void GenerateVariableDeclarationStatement(CodeVariableDeclarationStatement e);
    protected abstract virtual void GenerateVariableReferenceExpression(CodeVariableReferenceExpression e);
    protected abstract virtual string GetTypeOutput(CodeTypeReference value);
    protected abstract virtual bool IsValidIdentifier(string value);
    public static bool IsValidLanguageIndependentIdentifier(string value);
    protected virtual void OutputAttributeArgument(CodeAttributeArgument arg);
    protected virtual void OutputAttributeDeclarations(CodeAttributeDeclarationCollection attributes);
    protected virtual void OutputDirection(FieldDirection dir);
    protected virtual void OutputExpressionList(CodeExpressionCollection expressions);
    protected virtual void OutputExpressionList(CodeExpressionCollection expressions, bool newlineBetweenItems);
    protected virtual void OutputFieldScopeModifier(MemberAttributes attributes);
    protected virtual void OutputIdentifier(string ident);
    protected virtual void OutputMemberAccessModifier(MemberAttributes attributes);
    protected virtual void OutputMemberScopeModifier(MemberAttributes attributes);
    protected virtual void OutputOperator(CodeBinaryOperatorType op);
    protected virtual void OutputParameters(CodeParameterDeclarationExpressionCollection parameters);
    protected abstract virtual void OutputType(CodeTypeReference typeRef);
    protected virtual void OutputTypeAttributes(TypeAttributes attributes, bool isStruct, bool isEnum);
    protected virtual void OutputTypeNamePair(CodeTypeReference typeRef, string name);
    protected abstract virtual string QuoteSnippetString(string value);
    protected abstract virtual bool Supports(GeneratorSupport support);
    private sealed virtual override string System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(string value);
    private sealed virtual override string System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(string value);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(CodeExpression e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(CodeStatement e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override string System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(CodeTypeReference type);
    private sealed virtual override bool System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(string value);
    private sealed virtual override bool System.CodeDom.Compiler.ICodeGenerator.Supports(GeneratorSupport support);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(string value);
    protected virtual void ValidateIdentifier(string value);
    public static void ValidateIdentifiers(CodeObject e);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.Compiler.CodeGeneratorOptions : object {
    public bool BlankLinesBetweenMembers { get; public set; }
    public string BracingStyle { get; public set; }
    public bool ElseOnClosing { get; public set; }
    public string IndentString { get; public set; }
    public object Item { get; public set; }
    public bool VerbatimOrder { get; public set; }
    public bool get_BlankLinesBetweenMembers();
    public void set_BlankLinesBetweenMembers(bool value);
    public string get_BracingStyle();
    public void set_BracingStyle(string value);
    public bool get_ElseOnClosing();
    public void set_ElseOnClosing(bool value);
    public string get_IndentString();
    public void set_IndentString(string value);
    public object get_Item(string index);
    public void set_Item(string index, object value);
    public bool get_VerbatimOrder();
    public void set_VerbatimOrder(bool value);
}
public abstract class System.CodeDom.Compiler.CodeParser : object {
    public abstract virtual CodeCompileUnit Parse(TextReader codeStream);
}
public class System.CodeDom.Compiler.CompilerError : object {
    public int Column { get; public set; }
    public string ErrorNumber { get; public set; }
    public string ErrorText { get; public set; }
    public string FileName { get; public set; }
    public bool IsWarning { get; public set; }
    public int Line { get; public set; }
    public CompilerError(string fileName, int line, int column, string errorNumber, string errorText);
    public int get_Column();
    public void set_Column(int value);
    public string get_ErrorNumber();
    public void set_ErrorNumber(string value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public bool get_IsWarning();
    public void set_IsWarning(bool value);
    public int get_Line();
    public void set_Line(int value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.Compiler.CompilerErrorCollection : CollectionBase {
    public bool HasErrors { get; }
    public bool HasWarnings { get; }
    public CompilerError Item { get; public set; }
    public CompilerErrorCollection(CompilerErrorCollection value);
    public CompilerErrorCollection(CompilerError[] value);
    public bool get_HasErrors();
    public bool get_HasWarnings();
    public CompilerError get_Item(int index);
    public void set_Item(int index, CompilerError value);
    public int Add(CompilerError value);
    public void AddRange(CompilerErrorCollection value);
    public void AddRange(CompilerError[] value);
    public bool Contains(CompilerError value);
    public void CopyTo(CompilerError[] array, int index);
    public int IndexOf(CompilerError value);
    public void Insert(int index, CompilerError value);
    public void Remove(CompilerError value);
}
public class System.CodeDom.Compiler.CompilerInfo : object {
    public Type CodeDomProviderType { get; }
    public bool IsCodeDomProviderTypeValid { get; }
    public Type get_CodeDomProviderType();
    public bool get_IsCodeDomProviderTypeValid();
    public CompilerParameters CreateDefaultCompilerParameters();
    public CodeDomProvider CreateProvider();
    public CodeDomProvider CreateProvider(IDictionary`2<string, string> providerOptions);
    public virtual bool Equals(object o);
    public String[] GetExtensions();
    public virtual int GetHashCode();
    public String[] GetLanguages();
}
public class System.CodeDom.Compiler.CompilerParameters : object {
    public string CompilerOptions { get; public set; }
    public string CoreAssemblyFileName { get; public set; }
    public StringCollection EmbeddedResources { get; }
    public bool GenerateExecutable { get; public set; }
    public bool GenerateInMemory { get; public set; }
    public bool IncludeDebugInformation { get; public set; }
    public StringCollection LinkedResources { get; }
    public string MainClass { get; public set; }
    public string OutputAssembly { get; public set; }
    public StringCollection ReferencedAssemblies { get; }
    public TempFileCollection TempFiles { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public IntPtr UserToken { get; public set; }
    public int WarningLevel { get; public set; }
    public string Win32Resource { get; public set; }
    public CompilerParameters(String[] assemblyNames);
    public CompilerParameters(String[] assemblyNames, string outputName);
    public CompilerParameters(String[] assemblyNames, string outputName, bool includeDebugInformation);
    public string get_CompilerOptions();
    public void set_CompilerOptions(string value);
    public string get_CoreAssemblyFileName();
    public void set_CoreAssemblyFileName(string value);
    public StringCollection get_EmbeddedResources();
    public bool get_GenerateExecutable();
    public void set_GenerateExecutable(bool value);
    public bool get_GenerateInMemory();
    public void set_GenerateInMemory(bool value);
    public bool get_IncludeDebugInformation();
    public void set_IncludeDebugInformation(bool value);
    public StringCollection get_LinkedResources();
    public string get_MainClass();
    public void set_MainClass(string value);
    public string get_OutputAssembly();
    public void set_OutputAssembly(string value);
    public StringCollection get_ReferencedAssemblies();
    public TempFileCollection get_TempFiles();
    public void set_TempFiles(TempFileCollection value);
    public bool get_TreatWarningsAsErrors();
    public void set_TreatWarningsAsErrors(bool value);
    public IntPtr get_UserToken();
    public void set_UserToken(IntPtr value);
    public int get_WarningLevel();
    public void set_WarningLevel(int value);
    public string get_Win32Resource();
    public void set_Win32Resource(string value);
}
public class System.CodeDom.Compiler.CompilerResults : object {
    public Assembly CompiledAssembly { get; public set; }
    public CompilerErrorCollection Errors { get; }
    public int NativeCompilerReturnValue { get; public set; }
    public StringCollection Output { get; }
    public string PathToAssembly { get; public set; }
    public TempFileCollection TempFiles { get; public set; }
    public CompilerResults(TempFileCollection tempFiles);
    public Assembly get_CompiledAssembly();
    public void set_CompiledAssembly(Assembly value);
    public CompilerErrorCollection get_Errors();
    public int get_NativeCompilerReturnValue();
    public void set_NativeCompilerReturnValue(int value);
    public StringCollection get_Output();
    public string get_PathToAssembly();
    public void set_PathToAssembly(string value);
    public TempFileCollection get_TempFiles();
    public void set_TempFiles(TempFileCollection value);
}
public static class System.CodeDom.Compiler.Executor : object {
    public static void ExecWait(string cmd, TempFileCollection tempFiles);
    public static int ExecWaitWithCapture(IntPtr userToken, string cmd, TempFileCollection tempFiles, String& outputName, String& errorName);
    public static int ExecWaitWithCapture(IntPtr userToken, string cmd, string currentDir, TempFileCollection tempFiles, String& outputName, String& errorName);
    public static int ExecWaitWithCapture(string cmd, TempFileCollection tempFiles, String& outputName, String& errorName);
    public static int ExecWaitWithCapture(string cmd, string currentDir, TempFileCollection tempFiles, String& outputName, String& errorName);
}
[FlagsAttribute]
public enum System.CodeDom.Compiler.GeneratorSupport : Enum {
    public int value__;
    public static GeneratorSupport ArraysOfArrays;
    public static GeneratorSupport EntryPointMethod;
    public static GeneratorSupport GotoStatements;
    public static GeneratorSupport MultidimensionalArrays;
    public static GeneratorSupport StaticConstructors;
    public static GeneratorSupport TryCatchStatements;
    public static GeneratorSupport ReturnTypeAttributes;
    public static GeneratorSupport DeclareValueTypes;
    public static GeneratorSupport DeclareEnums;
    public static GeneratorSupport DeclareDelegates;
    public static GeneratorSupport DeclareInterfaces;
    public static GeneratorSupport DeclareEvents;
    public static GeneratorSupport AssemblyAttributes;
    public static GeneratorSupport ParameterAttributes;
    public static GeneratorSupport ReferenceParameters;
    public static GeneratorSupport ChainedConstructorArguments;
    public static GeneratorSupport NestedTypes;
    public static GeneratorSupport MultipleInterfaceMembers;
    public static GeneratorSupport PublicStaticMembers;
    public static GeneratorSupport ComplexExpressions;
    public static GeneratorSupport Win32Resources;
    public static GeneratorSupport Resources;
    public static GeneratorSupport PartialTypes;
    public static GeneratorSupport GenericTypeReference;
    public static GeneratorSupport GenericTypeDeclaration;
    public static GeneratorSupport DeclareIndexerProperties;
}
public interface System.CodeDom.Compiler.ICodeCompiler {
    public abstract virtual CompilerResults CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit compilationUnit);
    public abstract virtual CompilerResults CompileAssemblyFromDomBatch(CompilerParameters options, CodeCompileUnit[] compilationUnits);
    public abstract virtual CompilerResults CompileAssemblyFromFile(CompilerParameters options, string fileName);
    public abstract virtual CompilerResults CompileAssemblyFromFileBatch(CompilerParameters options, String[] fileNames);
    public abstract virtual CompilerResults CompileAssemblyFromSource(CompilerParameters options, string source);
    public abstract virtual CompilerResults CompileAssemblyFromSourceBatch(CompilerParameters options, String[] sources);
}
public interface System.CodeDom.Compiler.ICodeGenerator {
    public abstract virtual string CreateEscapedIdentifier(string value);
    public abstract virtual string CreateValidIdentifier(string value);
    public abstract virtual void GenerateCodeFromCompileUnit(CodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromExpression(CodeExpression e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromNamespace(CodeNamespace e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromStatement(CodeStatement e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromType(CodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual string GetTypeOutput(CodeTypeReference type);
    public abstract virtual bool IsValidIdentifier(string value);
    public abstract virtual bool Supports(GeneratorSupport supports);
    public abstract virtual void ValidateIdentifier(string value);
}
public interface System.CodeDom.Compiler.ICodeParser {
    public abstract virtual CodeCompileUnit Parse(TextReader codeStream);
}
[FlagsAttribute]
public enum System.CodeDom.Compiler.LanguageOptions : Enum {
    public int value__;
    public static LanguageOptions None;
    public static LanguageOptions CaseInsensitive;
}
public class System.CodeDom.Compiler.TempFileCollection : object {
    public string BasePath { get; }
    public int Count { get; }
    public bool KeepFiles { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public string TempDir { get; }
    public TempFileCollection(string tempDir);
    public TempFileCollection(string tempDir, bool keepFiles);
    public string get_BasePath();
    public int get_Count();
    public bool get_KeepFiles();
    public void set_KeepFiles(bool value);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public string get_TempDir();
    public string AddExtension(string fileExtension);
    public string AddExtension(string fileExtension, bool keepFile);
    public void AddFile(string fileName, bool keepFile);
    public void CopyTo(String[] fileNames, int start);
    public void Delete();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int start);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.IDisposable.Dispose();
}
public enum System.CodeDom.FieldDirection : Enum {
    public int value__;
    public static FieldDirection In;
    public static FieldDirection Out;
    public static FieldDirection Ref;
}
public enum System.CodeDom.MemberAttributes : Enum {
    public int value__;
    public static MemberAttributes Abstract;
    public static MemberAttributes Final;
    public static MemberAttributes Static;
    public static MemberAttributes Override;
    public static MemberAttributes Const;
    public static MemberAttributes ScopeMask;
    public static MemberAttributes New;
    public static MemberAttributes VTableMask;
    public static MemberAttributes Overloaded;
    public static MemberAttributes Assembly;
    public static MemberAttributes FamilyAndAssembly;
    public static MemberAttributes Family;
    public static MemberAttributes FamilyOrAssembly;
    public static MemberAttributes Private;
    public static MemberAttributes Public;
    public static MemberAttributes AccessMask;
}
