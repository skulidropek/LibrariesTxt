[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport : object {
    public bool BridgeAllSiteLinks { get; public set; }
    public bool IgnoreReplicationSchedule { get; public set; }
    public ReadOnlySiteLinkBridgeCollection SiteLinkBridges { get; }
    public ReadOnlySiteLinkCollection SiteLinks { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public bool get_BridgeAllSiteLinks();
    public void set_BridgeAllSiteLinks(bool value);
    public bool get_IgnoreReplicationSchedule();
    public void set_IgnoreReplicationSchedule(bool value);
    public ReadOnlySiteLinkBridgeCollection get_SiteLinkBridges();
    public ReadOnlySiteLinkCollection get_SiteLinks();
    public ActiveDirectoryTransportType get_TransportType();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectoryInterSiteTransport FindByTransportType(DirectoryContext context, ActiveDirectoryTransportType transport);
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException : Exception {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ActiveDirectoryObjectExistsException(SerializationInfo info, StreamingContext context);
    public ActiveDirectoryObjectExistsException(string message);
    public ActiveDirectoryObjectExistsException(string message, Exception inner);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException : Exception {
    public string Name { get; }
    public Type Type { get; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ActiveDirectoryObjectNotFoundException(SerializationInfo info, StreamingContext context);
    public ActiveDirectoryObjectNotFoundException(string message);
    public ActiveDirectoryObjectNotFoundException(string message, Exception inner);
    public ActiveDirectoryObjectNotFoundException(string message, Type type, string name);
    public string get_Name();
    public Type get_Type();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException : Exception {
    public int ErrorCode { get; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ActiveDirectoryOperationException(SerializationInfo info, StreamingContext context);
    public ActiveDirectoryOperationException(string message);
    public ActiveDirectoryOperationException(string message, Exception inner);
    public ActiveDirectoryOperationException(string message, Exception inner, int errorCode);
    public ActiveDirectoryOperationException(string message, int errorCode);
    public int get_ErrorCode();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition : object {
    public string Name { get; }
    public string get_Name();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual DirectoryEntry GetDirectoryEntry();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata : DictionaryBase {
    public ReadOnlyStringCollection AttributeNames { get; }
    [NullableAttribute("2")]
public AttributeMetadata Item { get; }
    public AttributeMetadataCollection Values { get; }
    public ReadOnlyStringCollection get_AttributeNames();
    public AttributeMetadata get_Item(string name);
    public AttributeMetadataCollection get_Values();
    public bool Contains(string attributeName);
    public void CopyTo(AttributeMetadata[] array, int index);
}
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole : Enum {
    public int value__;
    public static ActiveDirectoryRole SchemaRole;
    public static ActiveDirectoryRole NamingRole;
    public static ActiveDirectoryRole PdcRole;
    public static ActiveDirectoryRole RidRole;
    public static ActiveDirectoryRole InfrastructureRole;
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection : ReadOnlyCollectionBase {
    public ActiveDirectoryRole Item { get; }
    public ActiveDirectoryRole get_Item(int index);
    public bool Contains(ActiveDirectoryRole role);
    [NullableContextAttribute("1")]
public void CopyTo(ActiveDirectoryRole[] roles, int index);
    public int IndexOf(ActiveDirectoryRole role);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule : object {
    public Boolean[0...,0...,0...] RawSchedule { get; public set; }
    public ActiveDirectorySchedule(ActiveDirectorySchedule schedule);
    public Boolean[0...,0...,0...] get_RawSchedule();
    public void set_RawSchedule(Boolean[0...,0...,0...] value);
    public void ResetSchedule();
    public void SetDailySchedule(HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute);
    public void SetSchedule(DayOfWeek day, HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute);
    public void SetSchedule(DayOfWeek[] days, HourOfDay fromHour, MinuteOfHour fromMinute, HourOfDay toHour, MinuteOfHour toMinute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema : ActiveDirectoryPartition {
    public DirectoryServer SchemaRoleOwner { get; }
    public DirectoryServer get_SchemaRoleOwner();
    protected virtual void Dispose(bool disposing);
    public ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses();
    public ReadOnlyActiveDirectorySchemaClassCollection FindAllClasses(SchemaClassType type);
    public ReadOnlyActiveDirectorySchemaClassCollection FindAllDefunctClasses();
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllDefunctProperties();
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties();
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties(PropertyTypes type);
    public ActiveDirectorySchemaClass FindClass(string ldapDisplayName);
    public ActiveDirectorySchemaClass FindDefunctClass(string commonName);
    public ActiveDirectorySchemaProperty FindDefunctProperty(string commonName);
    public ActiveDirectorySchemaProperty FindProperty(string ldapDisplayName);
    public static ActiveDirectorySchema GetCurrentSchema();
    public virtual DirectoryEntry GetDirectoryEntry();
    public static ActiveDirectorySchema GetSchema(DirectoryContext context);
    public void RefreshSchema();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass : object {
    public ActiveDirectorySchemaClassCollection AuxiliaryClasses { get; }
    [NullableAttribute("2")]
public string CommonName { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySecurity DefaultObjectSecurityDescriptor { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public bool IsDefunct { get; public set; }
    public ActiveDirectorySchemaPropertyCollection MandatoryProperties { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Oid { get; public set; }
    public ActiveDirectorySchemaPropertyCollection OptionalProperties { get; }
    public ReadOnlyActiveDirectorySchemaClassCollection PossibleInferiors { get; }
    public ActiveDirectorySchemaClassCollection PossibleSuperiors { get; }
    public Guid SchemaGuid { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySchemaClass SubClassOf { get; public set; }
    public SchemaClassType Type { get; public set; }
    public ActiveDirectorySchemaClass(DirectoryContext context, string ldapDisplayName);
    public ActiveDirectorySchemaClassCollection get_AuxiliaryClasses();
    [NullableContextAttribute("2")]
public string get_CommonName();
    [NullableContextAttribute("2")]
public void set_CommonName(string value);
    [NullableContextAttribute("2")]
public ActiveDirectorySecurity get_DefaultObjectSecurityDescriptor();
    [NullableContextAttribute("2")]
public void set_DefaultObjectSecurityDescriptor(ActiveDirectorySecurity value);
    [NullableContextAttribute("2")]
public string get_Description();
    [NullableContextAttribute("2")]
public void set_Description(string value);
    public bool get_IsDefunct();
    public void set_IsDefunct(bool value);
    public ActiveDirectorySchemaPropertyCollection get_MandatoryProperties();
    public string get_Name();
    [NullableContextAttribute("2")]
public string get_Oid();
    [NullableContextAttribute("2")]
public void set_Oid(string value);
    public ActiveDirectorySchemaPropertyCollection get_OptionalProperties();
    public ReadOnlyActiveDirectorySchemaClassCollection get_PossibleInferiors();
    public ActiveDirectorySchemaClassCollection get_PossibleSuperiors();
    public Guid get_SchemaGuid();
    public void set_SchemaGuid(Guid value);
    [NullableContextAttribute("2")]
public ActiveDirectorySchemaClass get_SubClassOf();
    [NullableContextAttribute("2")]
public void set_SubClassOf(ActiveDirectorySchemaClass value);
    public SchemaClassType get_Type();
    public void set_Type(SchemaClassType value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySchemaClass FindByName(DirectoryContext context, string ldapDisplayName);
    public ReadOnlyActiveDirectorySchemaPropertyCollection GetAllProperties();
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection : CollectionBase {
    public ActiveDirectorySchemaClass Item { get; public set; }
    public ActiveDirectorySchemaClass get_Item(int index);
    public void set_Item(int index, ActiveDirectorySchemaClass value);
    public int Add(ActiveDirectorySchemaClass schemaClass);
    public void AddRange(ActiveDirectorySchemaClassCollection schemaClasses);
    public void AddRange(ActiveDirectorySchemaClass[] schemaClasses);
    public void AddRange(ReadOnlyActiveDirectorySchemaClassCollection schemaClasses);
    public bool Contains(ActiveDirectorySchemaClass schemaClass);
    public void CopyTo(ActiveDirectorySchemaClass[] schemaClasses, int index);
    public int IndexOf(ActiveDirectorySchemaClass schemaClass);
    public void Insert(int index, ActiveDirectorySchemaClass schemaClass);
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(ActiveDirectorySchemaClass schemaClass);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty : object {
    public string CommonName { get; public set; }
    public string Description { get; public set; }
    public bool IsDefunct { get; public set; }
    public bool IsInAnr { get; public set; }
    public bool IsIndexed { get; public set; }
    public bool IsIndexedOverContainer { get; public set; }
    public bool IsInGlobalCatalog { get; public set; }
    public bool IsOnTombstonedObject { get; public set; }
    public bool IsSingleValued { get; public set; }
    public bool IsTupleIndexed { get; public set; }
    public ActiveDirectorySchemaProperty Link { get; }
    public Nullable`1<int> LinkId { get; public set; }
    [NullableAttribute("1")]
public string Name { get; }
    public string Oid { get; public set; }
    public Nullable`1<int> RangeLower { get; public set; }
    public Nullable`1<int> RangeUpper { get; public set; }
    public Guid SchemaGuid { get; public set; }
    public ActiveDirectorySyntax Syntax { get; public set; }
    [NullableContextAttribute("1")]
public ActiveDirectorySchemaProperty(DirectoryContext context, string ldapDisplayName);
    public string get_CommonName();
    public void set_CommonName(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_IsDefunct();
    public void set_IsDefunct(bool value);
    public bool get_IsInAnr();
    public void set_IsInAnr(bool value);
    public bool get_IsIndexed();
    public void set_IsIndexed(bool value);
    public bool get_IsIndexedOverContainer();
    public void set_IsIndexedOverContainer(bool value);
    public bool get_IsInGlobalCatalog();
    public void set_IsInGlobalCatalog(bool value);
    public bool get_IsOnTombstonedObject();
    public void set_IsOnTombstonedObject(bool value);
    public bool get_IsSingleValued();
    public void set_IsSingleValued(bool value);
    public bool get_IsTupleIndexed();
    public void set_IsTupleIndexed(bool value);
    public ActiveDirectorySchemaProperty get_Link();
    public Nullable`1<int> get_LinkId();
    public void set_LinkId(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public string get_Name();
    public string get_Oid();
    public void set_Oid(string value);
    public Nullable`1<int> get_RangeLower();
    public void set_RangeLower(Nullable`1<int> value);
    public Nullable`1<int> get_RangeUpper();
    public void set_RangeUpper(Nullable`1<int> value);
    public Guid get_SchemaGuid();
    public void set_SchemaGuid(Guid value);
    public ActiveDirectorySyntax get_Syntax();
    public void set_Syntax(ActiveDirectorySyntax value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public static ActiveDirectorySchemaProperty FindByName(DirectoryContext context, string ldapDisplayName);
    [NullableContextAttribute("1")]
public DirectoryEntry GetDirectoryEntry();
    public void Save();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection : CollectionBase {
    public ActiveDirectorySchemaProperty Item { get; public set; }
    public ActiveDirectorySchemaProperty get_Item(int index);
    public void set_Item(int index, ActiveDirectorySchemaProperty value);
    public int Add(ActiveDirectorySchemaProperty schemaProperty);
    public void AddRange(ActiveDirectorySchemaPropertyCollection properties);
    public void AddRange(ActiveDirectorySchemaProperty[] properties);
    public void AddRange(ReadOnlyActiveDirectorySchemaPropertyCollection properties);
    public bool Contains(ActiveDirectorySchemaProperty schemaProperty);
    public void CopyTo(ActiveDirectorySchemaProperty[] properties, int index);
    public int IndexOf(ActiveDirectorySchemaProperty schemaProperty);
    public void Insert(int index, ActiveDirectorySchemaProperty schemaProperty);
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(ActiveDirectorySchemaProperty schemaProperty);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException : Exception {
    public int ErrorCode { get; }
    [NullableAttribute("1")]
public string Message { get; }
    public string Name { get; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ActiveDirectoryServerDownException(SerializationInfo info, StreamingContext context);
    public ActiveDirectoryServerDownException(string message);
    public ActiveDirectoryServerDownException(string message, Exception inner);
    public ActiveDirectoryServerDownException(string message, Exception inner, int errorCode, string name);
    public ActiveDirectoryServerDownException(string message, int errorCode, string name);
    public int get_ErrorCode();
    [NullableContextAttribute("1")]
public virtual string get_Message();
    public string get_Name();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySite : object {
    public ReadOnlySiteCollection AdjacentSites { get; }
    public ReadOnlyDirectoryServerCollection BridgeheadServers { get; }
    public DomainCollection Domains { get; }
    [NullableAttribute("2")]
public DirectoryServer InterSiteTopologyGenerator { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySchedule IntraSiteReplicationSchedule { get; public set; }
    [NullableAttribute("2")]
public string Location { get; public set; }
    public string Name { get; }
    public ActiveDirectorySiteOptions Options { get; public set; }
    public DirectoryServerCollection PreferredRpcBridgeheadServers { get; }
    public DirectoryServerCollection PreferredSmtpBridgeheadServers { get; }
    public ReadOnlyDirectoryServerCollection Servers { get; }
    public ReadOnlySiteLinkCollection SiteLinks { get; }
    public ActiveDirectorySubnetCollection Subnets { get; }
    public ActiveDirectorySite(DirectoryContext context, string siteName);
    public ReadOnlySiteCollection get_AdjacentSites();
    public ReadOnlyDirectoryServerCollection get_BridgeheadServers();
    public DomainCollection get_Domains();
    [NullableContextAttribute("2")]
public DirectoryServer get_InterSiteTopologyGenerator();
    [NullableContextAttribute("2")]
public void set_InterSiteTopologyGenerator(DirectoryServer value);
    [NullableContextAttribute("2")]
public ActiveDirectorySchedule get_IntraSiteReplicationSchedule();
    [NullableContextAttribute("2")]
public void set_IntraSiteReplicationSchedule(ActiveDirectorySchedule value);
    [NullableContextAttribute("2")]
public string get_Location();
    [NullableContextAttribute("2")]
public void set_Location(string value);
    public string get_Name();
    public ActiveDirectorySiteOptions get_Options();
    public void set_Options(ActiveDirectorySiteOptions value);
    public DirectoryServerCollection get_PreferredRpcBridgeheadServers();
    public DirectoryServerCollection get_PreferredSmtpBridgeheadServers();
    public ReadOnlyDirectoryServerCollection get_Servers();
    public ReadOnlySiteLinkCollection get_SiteLinks();
    public ActiveDirectorySubnetCollection get_Subnets();
    public void Delete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySite FindByName(DirectoryContext context, string siteName);
    public static ActiveDirectorySite GetComputerSite();
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection : CollectionBase {
    public ActiveDirectorySite Item { get; public set; }
    public ActiveDirectorySite get_Item(int index);
    public void set_Item(int index, ActiveDirectorySite value);
    public int Add(ActiveDirectorySite site);
    public void AddRange(ActiveDirectorySiteCollection sites);
    public void AddRange(ActiveDirectorySite[] sites);
    public bool Contains(ActiveDirectorySite site);
    public void CopyTo(ActiveDirectorySite[] array, int index);
    public int IndexOf(ActiveDirectorySite site);
    public void Insert(int index, ActiveDirectorySite site);
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(ActiveDirectorySite site);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink : object {
    public int Cost { get; public set; }
    public bool DataCompressionEnabled { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySchedule InterSiteReplicationSchedule { get; public set; }
    public string Name { get; }
    public bool NotificationEnabled { get; public set; }
    public bool ReciprocalReplicationEnabled { get; public set; }
    public TimeSpan ReplicationInterval { get; public set; }
    public ActiveDirectorySiteCollection Sites { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName);
    public ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport);
    public ActiveDirectorySiteLink(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport, ActiveDirectorySchedule schedule);
    public int get_Cost();
    public void set_Cost(int value);
    public bool get_DataCompressionEnabled();
    public void set_DataCompressionEnabled(bool value);
    [NullableContextAttribute("2")]
public ActiveDirectorySchedule get_InterSiteReplicationSchedule();
    [NullableContextAttribute("2")]
public void set_InterSiteReplicationSchedule(ActiveDirectorySchedule value);
    public string get_Name();
    public bool get_NotificationEnabled();
    public void set_NotificationEnabled(bool value);
    public bool get_ReciprocalReplicationEnabled();
    public void set_ReciprocalReplicationEnabled(bool value);
    public TimeSpan get_ReplicationInterval();
    public void set_ReplicationInterval(TimeSpan value);
    public ActiveDirectorySiteCollection get_Sites();
    public ActiveDirectoryTransportType get_TransportType();
    public void Delete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySiteLink FindByName(DirectoryContext context, string siteLinkName);
    public static ActiveDirectorySiteLink FindByName(DirectoryContext context, string siteLinkName, ActiveDirectoryTransportType transport);
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge : object {
    public string Name { get; }
    public ActiveDirectorySiteLinkCollection SiteLinks { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public ActiveDirectorySiteLinkBridge(DirectoryContext context, string bridgeName);
    public ActiveDirectorySiteLinkBridge(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport);
    public string get_Name();
    public ActiveDirectorySiteLinkCollection get_SiteLinks();
    public ActiveDirectoryTransportType get_TransportType();
    public void Delete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySiteLinkBridge FindByName(DirectoryContext context, string bridgeName);
    public static ActiveDirectorySiteLinkBridge FindByName(DirectoryContext context, string bridgeName, ActiveDirectoryTransportType transport);
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection : CollectionBase {
    public ActiveDirectorySiteLink Item { get; public set; }
    public ActiveDirectorySiteLink get_Item(int index);
    public void set_Item(int index, ActiveDirectorySiteLink value);
    public int Add(ActiveDirectorySiteLink link);
    public void AddRange(ActiveDirectorySiteLinkCollection links);
    public void AddRange(ActiveDirectorySiteLink[] links);
    public bool Contains(ActiveDirectorySiteLink link);
    public void CopyTo(ActiveDirectorySiteLink[] array, int index);
    public int IndexOf(ActiveDirectorySiteLink link);
    public void Insert(int index, ActiveDirectorySiteLink link);
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(ActiveDirectorySiteLink link);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions : Enum {
    public int value__;
    public static ActiveDirectorySiteOptions None;
    public static ActiveDirectorySiteOptions AutoTopologyDisabled;
    public static ActiveDirectorySiteOptions TopologyCleanupDisabled;
    public static ActiveDirectorySiteOptions AutoMinimumHopDisabled;
    public static ActiveDirectorySiteOptions StaleServerDetectDisabled;
    public static ActiveDirectorySiteOptions AutoInterSiteTopologyDisabled;
    public static ActiveDirectorySiteOptions GroupMembershipCachingEnabled;
    public static ActiveDirectorySiteOptions ForceKccWindows2003Behavior;
    public static ActiveDirectorySiteOptions UseWindows2000IstgElection;
    public static ActiveDirectorySiteOptions RandomBridgeHeaderServerSelectionDisabled;
    public static ActiveDirectorySiteOptions UseHashingForReplicationSchedule;
    public static ActiveDirectorySiteOptions RedundantServerTopologyEnabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet : object {
    [NullableAttribute("2")]
public string Location { get; public set; }
    public string Name { get; }
    [NullableAttribute("2")]
public ActiveDirectorySite Site { get; public set; }
    public ActiveDirectorySubnet(DirectoryContext context, string subnetName);
    public ActiveDirectorySubnet(DirectoryContext context, string subnetName, string siteName);
    [NullableContextAttribute("2")]
public string get_Location();
    [NullableContextAttribute("2")]
public void set_Location(string value);
    public string get_Name();
    [NullableContextAttribute("2")]
public ActiveDirectorySite get_Site();
    [NullableContextAttribute("2")]
public void set_Site(ActiveDirectorySite value);
    public void Delete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ActiveDirectorySubnet FindByName(DirectoryContext context, string subnetName);
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection : CollectionBase {
    public ActiveDirectorySubnet Item { get; public set; }
    public ActiveDirectorySubnet get_Item(int index);
    public void set_Item(int index, ActiveDirectorySubnet value);
    public int Add(ActiveDirectorySubnet subnet);
    public void AddRange(ActiveDirectorySubnetCollection subnets);
    public void AddRange(ActiveDirectorySubnet[] subnets);
    public bool Contains(ActiveDirectorySubnet subnet);
    public void CopyTo(ActiveDirectorySubnet[] array, int index);
    public int IndexOf(ActiveDirectorySubnet subnet);
    public void Insert(int index, ActiveDirectorySubnet subnet);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(ActiveDirectorySubnet subnet);
}
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax : Enum {
    public int value__;
    public static ActiveDirectorySyntax CaseExactString;
    public static ActiveDirectorySyntax CaseIgnoreString;
    public static ActiveDirectorySyntax NumericString;
    public static ActiveDirectorySyntax DirectoryString;
    public static ActiveDirectorySyntax OctetString;
    public static ActiveDirectorySyntax SecurityDescriptor;
    public static ActiveDirectorySyntax Int;
    public static ActiveDirectorySyntax Int64;
    public static ActiveDirectorySyntax Bool;
    public static ActiveDirectorySyntax Oid;
    public static ActiveDirectorySyntax GeneralizedTime;
    public static ActiveDirectorySyntax UtcTime;
    public static ActiveDirectorySyntax DN;
    public static ActiveDirectorySyntax DNWithBinary;
    public static ActiveDirectorySyntax DNWithString;
    public static ActiveDirectorySyntax Enumeration;
    public static ActiveDirectorySyntax IA5String;
    public static ActiveDirectorySyntax PrintableString;
    public static ActiveDirectorySyntax Sid;
    public static ActiveDirectorySyntax AccessPointDN;
    public static ActiveDirectorySyntax ORName;
    public static ActiveDirectorySyntax PresentationAddress;
    public static ActiveDirectorySyntax ReplicaLink;
}
public enum System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType : Enum {
    public int value__;
    public static ActiveDirectoryTransportType Rpc;
    public static ActiveDirectoryTransportType Smtp;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.AdamInstance : DirectoryServer {
    public ConfigurationSet ConfigurationSet { get; }
    [NullableAttribute("2")]
public string DefaultPartition { get; public set; }
    public string HostName { get; }
    public ReplicationConnectionCollection InboundConnections { get; }
    [NullableAttribute("2")]
public string IPAddress { get; }
    public int LdapPort { get; }
    public ReplicationConnectionCollection OutboundConnections { get; }
    public AdamRoleCollection Roles { get; }
    public string SiteName { get; }
    public int SslPort { get; }
    [NullableAttribute("2")]
public SyncUpdateCallback SyncFromAllServersCallback { get; public set; }
    public ConfigurationSet get_ConfigurationSet();
    [NullableContextAttribute("2")]
public string get_DefaultPartition();
    [NullableContextAttribute("2")]
public void set_DefaultPartition(string value);
    public string get_HostName();
    public virtual ReplicationConnectionCollection get_InboundConnections();
    [NullableContextAttribute("2")]
public virtual string get_IPAddress();
    public int get_LdapPort();
    public virtual ReplicationConnectionCollection get_OutboundConnections();
    public AdamRoleCollection get_Roles();
    public virtual string get_SiteName();
    public int get_SslPort();
    [NullableContextAttribute("2")]
public virtual SyncUpdateCallback get_SyncFromAllServersCallback();
    [NullableContextAttribute("2")]
public virtual void set_SyncFromAllServersCallback(SyncUpdateCallback value);
    public virtual void CheckReplicationConsistency();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public static AdamInstanceCollection FindAll(DirectoryContext context, string partitionName);
    public static AdamInstance FindOne(DirectoryContext context, string partitionName);
    public static AdamInstance GetAdamInstance(DirectoryContext context);
    public virtual ReplicationNeighborCollection GetAllReplicationNeighbors();
    public virtual ReplicationFailureCollection GetReplicationConnectionFailures();
    public virtual ReplicationCursorCollection GetReplicationCursors(string partition);
    public virtual ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
    public virtual ReplicationNeighborCollection GetReplicationNeighbors(string partition);
    public virtual ReplicationOperationInformation GetReplicationOperationInformation();
    public void Save();
    public void SeizeRoleOwnership(AdamRole role);
    public virtual void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options);
    public virtual void SyncReplicaFromServer(string partition, string sourceServer);
    public void TransferRoleOwnership(AdamRole role);
    public virtual void TriggerSyncReplicaFromNeighbors(string partition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.AdamInstanceCollection : ReadOnlyCollectionBase {
    public AdamInstance Item { get; }
    public AdamInstance get_Item(int index);
    public bool Contains(AdamInstance adamInstance);
    public void CopyTo(AdamInstance[] adamInstances, int index);
    public int IndexOf(AdamInstance adamInstance);
}
public enum System.DirectoryServices.ActiveDirectory.AdamRole : Enum {
    public int value__;
    public static AdamRole SchemaRole;
    public static AdamRole NamingRole;
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.AdamRoleCollection : ReadOnlyCollectionBase {
    public AdamRole Item { get; }
    public AdamRole get_Item(int index);
    public bool Contains(AdamRole role);
    [NullableContextAttribute("1")]
public void CopyTo(AdamRole[] roles, int index);
    public int IndexOf(AdamRole role);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ApplicationPartition : ActiveDirectoryPartition {
    public DirectoryServerCollection DirectoryServers { get; }
    [NullableAttribute("2")]
public string SecurityReferenceDomain { get; public set; }
    public ApplicationPartition(DirectoryContext context, string distinguishedName);
    public ApplicationPartition(DirectoryContext context, string distinguishedName, string objectClass);
    public DirectoryServerCollection get_DirectoryServers();
    [NullableContextAttribute("2")]
public string get_SecurityReferenceDomain();
    [NullableContextAttribute("2")]
public void set_SecurityReferenceDomain(string value);
    public void Delete();
    protected virtual void Dispose(bool disposing);
    public ReadOnlyDirectoryServerCollection FindAllDirectoryServers();
    public ReadOnlyDirectoryServerCollection FindAllDirectoryServers(string siteName);
    public ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers();
    public ReadOnlyDirectoryServerCollection FindAllDiscoverableDirectoryServers(string siteName);
    public static ApplicationPartition FindByName(DirectoryContext context, string distinguishedName);
    public DirectoryServer FindDirectoryServer();
    public DirectoryServer FindDirectoryServer(bool forceRediscovery);
    public DirectoryServer FindDirectoryServer(string siteName);
    public DirectoryServer FindDirectoryServer(string siteName, bool forceRediscovery);
    public static ApplicationPartition GetApplicationPartition(DirectoryContext context);
    public virtual DirectoryEntry GetDirectoryEntry();
    public void Save();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection : ReadOnlyCollectionBase {
    public ApplicationPartition Item { get; }
    public ApplicationPartition get_Item(int index);
    public bool Contains(ApplicationPartition applicationPartition);
    public void CopyTo(ApplicationPartition[] applicationPartitions, int index);
    public int IndexOf(ApplicationPartition applicationPartition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.AttributeMetadata : object {
    public DateTime LastOriginatingChangeTime { get; }
    public Guid LastOriginatingInvocationId { get; }
    public long LocalChangeUsn { get; }
    public string Name { get; }
    public long OriginatingChangeUsn { get; }
    [NullableAttribute("2")]
public string OriginatingServer { get; }
    public int Version { get; }
    public DateTime get_LastOriginatingChangeTime();
    public Guid get_LastOriginatingInvocationId();
    public long get_LocalChangeUsn();
    public string get_Name();
    public long get_OriginatingChangeUsn();
    [NullableContextAttribute("2")]
public string get_OriginatingServer();
    public int get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection : ReadOnlyCollectionBase {
    public AttributeMetadata Item { get; }
    public AttributeMetadata get_Item(int index);
    public bool Contains(AttributeMetadata metadata);
    public void CopyTo(AttributeMetadata[] metadata, int index);
    public int IndexOf(AttributeMetadata metadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ConfigurationSet : object {
    public AdamInstanceCollection AdamInstances { get; }
    public ApplicationPartitionCollection ApplicationPartitions { get; }
    public string Name { get; }
    public AdamInstance NamingRoleOwner { get; }
    public ActiveDirectorySchema Schema { get; }
    public AdamInstance SchemaRoleOwner { get; }
    public ReadOnlySiteCollection Sites { get; }
    public AdamInstanceCollection get_AdamInstances();
    public ApplicationPartitionCollection get_ApplicationPartitions();
    public string get_Name();
    public AdamInstance get_NamingRoleOwner();
    public ActiveDirectorySchema get_Schema();
    public AdamInstance get_SchemaRoleOwner();
    public ReadOnlySiteCollection get_Sites();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    public AdamInstance FindAdamInstance();
    public AdamInstance FindAdamInstance(string partitionName);
    public AdamInstance FindAdamInstance(string partitionName, string siteName);
    public AdamInstanceCollection FindAllAdamInstances();
    public AdamInstanceCollection FindAllAdamInstances(string partitionName);
    [NullableContextAttribute("2")]
public AdamInstanceCollection FindAllAdamInstances(string partitionName, string siteName);
    public static ConfigurationSet GetConfigurationSet(DirectoryContext context);
    public DirectoryEntry GetDirectoryEntry();
    public ReplicationSecurityLevel GetSecurityLevel();
    public void SetSecurityLevel(ReplicationSecurityLevel securityLevel);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.DirectoryContext : object {
    public DirectoryContextType ContextType { get; }
    public string Name { get; }
    public string UserName { get; }
    public DirectoryContext(DirectoryContextType contextType);
    [NullableContextAttribute("1")]
public DirectoryContext(DirectoryContextType contextType, string name);
    public DirectoryContext(DirectoryContextType contextType, string username, string password);
    public DirectoryContext(DirectoryContextType contextType, string name, string username, string password);
    public DirectoryContextType get_ContextType();
    public string get_Name();
    public string get_UserName();
}
public enum System.DirectoryServices.ActiveDirectory.DirectoryContextType : Enum {
    public int value__;
    public static DirectoryContextType Domain;
    public static DirectoryContextType Forest;
    public static DirectoryContextType DirectoryServer;
    public static DirectoryContextType ConfigurationSet;
    public static DirectoryContextType ApplicationPartition;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.DirectoryServices.ActiveDirectory.DirectoryServer : object {
    public ReplicationConnectionCollection InboundConnections { get; }
    [NullableAttribute("2")]
public string IPAddress { get; }
    public string Name { get; }
    public ReplicationConnectionCollection OutboundConnections { get; }
    public ReadOnlyStringCollection Partitions { get; }
    public string SiteName { get; }
    [NullableAttribute("2")]
public SyncUpdateCallback SyncFromAllServersCallback { get; public set; }
    public abstract virtual ReplicationConnectionCollection get_InboundConnections();
    [NullableContextAttribute("2")]
public abstract virtual string get_IPAddress();
    public string get_Name();
    public abstract virtual ReplicationConnectionCollection get_OutboundConnections();
    public ReadOnlyStringCollection get_Partitions();
    public abstract virtual string get_SiteName();
    [NullableContextAttribute("2")]
public abstract virtual SyncUpdateCallback get_SyncFromAllServersCallback();
    [NullableContextAttribute("2")]
public abstract virtual void set_SyncFromAllServersCallback(SyncUpdateCallback value);
    public abstract virtual void CheckReplicationConsistency();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public abstract virtual ReplicationNeighborCollection GetAllReplicationNeighbors();
    public DirectoryEntry GetDirectoryEntry();
    public abstract virtual ReplicationFailureCollection GetReplicationConnectionFailures();
    public abstract virtual ReplicationCursorCollection GetReplicationCursors(string partition);
    public abstract virtual ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
    public abstract virtual ReplicationNeighborCollection GetReplicationNeighbors(string partition);
    public abstract virtual ReplicationOperationInformation GetReplicationOperationInformation();
    public void MoveToAnotherSite(string siteName);
    public abstract virtual void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options);
    public abstract virtual void SyncReplicaFromServer(string partition, string sourceServer);
    public virtual string ToString();
    public abstract virtual void TriggerSyncReplicaFromNeighbors(string partition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.DirectoryServerCollection : CollectionBase {
    public DirectoryServer Item { get; public set; }
    public DirectoryServer get_Item(int index);
    public void set_Item(int index, DirectoryServer value);
    public int Add(DirectoryServer server);
    public void AddRange(DirectoryServer[] servers);
    public bool Contains(DirectoryServer server);
    public void CopyTo(DirectoryServer[] array, int index);
    public int IndexOf(DirectoryServer server);
    public void Insert(int index, DirectoryServer server);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
    public void Remove(DirectoryServer server);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.Domain : ActiveDirectoryPartition {
    public DomainCollection Children { get; }
    public DomainControllerCollection DomainControllers { get; }
    public DomainMode DomainMode { get; }
    public int DomainModeLevel { get; }
    public Forest Forest { get; }
    public DomainController InfrastructureRoleOwner { get; }
    [NullableAttribute("2")]
public Domain Parent { get; }
    public DomainController PdcRoleOwner { get; }
    public DomainController RidRoleOwner { get; }
    public DomainCollection get_Children();
    public DomainControllerCollection get_DomainControllers();
    public DomainMode get_DomainMode();
    public int get_DomainModeLevel();
    public Forest get_Forest();
    public DomainController get_InfrastructureRoleOwner();
    [NullableContextAttribute("2")]
public Domain get_Parent();
    public DomainController get_PdcRoleOwner();
    public DomainController get_RidRoleOwner();
    public void CreateLocalSideOfTrustRelationship(string targetDomainName, TrustDirection direction, string trustPassword);
    public void CreateTrustRelationship(Domain targetDomain, TrustDirection direction);
    public void DeleteLocalSideOfTrustRelationship(string targetDomainName);
    public void DeleteTrustRelationship(Domain targetDomain);
    public DomainControllerCollection FindAllDiscoverableDomainControllers();
    public DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName);
    public DomainControllerCollection FindAllDomainControllers();
    public DomainControllerCollection FindAllDomainControllers(string siteName);
    public DomainController FindDomainController();
    public DomainController FindDomainController(LocatorOptions flag);
    public DomainController FindDomainController(string siteName);
    public DomainController FindDomainController(string siteName, LocatorOptions flag);
    public TrustRelationshipInformationCollection GetAllTrustRelationships();
    public static Domain GetComputerDomain();
    public static Domain GetCurrentDomain();
    public virtual DirectoryEntry GetDirectoryEntry();
    public static Domain GetDomain(DirectoryContext context);
    public bool GetSelectiveAuthenticationStatus(string targetDomainName);
    public bool GetSidFilteringStatus(string targetDomainName);
    public TrustRelationshipInformation GetTrustRelationship(string targetDomainName);
    public void RaiseDomainFunctionality(DomainMode domainMode);
    public void RaiseDomainFunctionalityLevel(int domainMode);
    public void RepairTrustRelationship(Domain targetDomain);
    public void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable);
    public void SetSidFilteringStatus(string targetDomainName, bool enable);
    public void UpdateLocalSideOfTrustRelationship(string targetDomainName, TrustDirection newTrustDirection, string newTrustPassword);
    public void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword);
    public void UpdateTrustRelationship(Domain targetDomain, TrustDirection newTrustDirection);
    public void VerifyOutboundTrustRelationship(string targetDomainName);
    public void VerifyTrustRelationship(Domain targetDomain, TrustDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.DomainCollection : ReadOnlyCollectionBase {
    public Domain Item { get; }
    public Domain get_Item(int index);
    public bool Contains(Domain domain);
    public void CopyTo(Domain[] domains, int index);
    public int IndexOf(Domain domain);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.DomainCollisionOptions : Enum {
    public int value__;
    public static DomainCollisionOptions None;
    public static DomainCollisionOptions SidDisabledByAdmin;
    public static DomainCollisionOptions SidDisabledByConflict;
    public static DomainCollisionOptions NetBiosNameDisabledByAdmin;
    public static DomainCollisionOptions NetBiosNameDisabledByConflict;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.DomainController : DirectoryServer {
    public DateTime CurrentTime { get; }
    public Domain Domain { get; }
    public Forest Forest { get; }
    public long HighestCommittedUsn { get; }
    public ReplicationConnectionCollection InboundConnections { get; }
    [NullableAttribute("2")]
public string IPAddress { get; }
    public string OSVersion { get; }
    public ReplicationConnectionCollection OutboundConnections { get; }
    public ActiveDirectoryRoleCollection Roles { get; }
    public string SiteName { get; }
    [NullableAttribute("2")]
public SyncUpdateCallback SyncFromAllServersCallback { get; public set; }
    public DateTime get_CurrentTime();
    public Domain get_Domain();
    public Forest get_Forest();
    public long get_HighestCommittedUsn();
    public virtual ReplicationConnectionCollection get_InboundConnections();
    [NullableContextAttribute("2")]
public virtual string get_IPAddress();
    public string get_OSVersion();
    public virtual ReplicationConnectionCollection get_OutboundConnections();
    public ActiveDirectoryRoleCollection get_Roles();
    public virtual string get_SiteName();
    [NullableContextAttribute("2")]
public virtual SyncUpdateCallback get_SyncFromAllServersCallback();
    [NullableContextAttribute("2")]
public virtual void set_SyncFromAllServersCallback(SyncUpdateCallback value);
    public virtual void CheckReplicationConsistency();
    protected virtual void Dispose(bool disposing);
    public virtual GlobalCatalog EnableGlobalCatalog();
    protected virtual override void Finalize();
    public static DomainControllerCollection FindAll(DirectoryContext context);
    public static DomainControllerCollection FindAll(DirectoryContext context, string siteName);
    public static DomainController FindOne(DirectoryContext context);
    public static DomainController FindOne(DirectoryContext context, LocatorOptions flag);
    public static DomainController FindOne(DirectoryContext context, string siteName);
    public static DomainController FindOne(DirectoryContext context, string siteName, LocatorOptions flag);
    public virtual ReplicationNeighborCollection GetAllReplicationNeighbors();
    public virtual DirectorySearcher GetDirectorySearcher();
    public static DomainController GetDomainController(DirectoryContext context);
    public virtual ReplicationFailureCollection GetReplicationConnectionFailures();
    public virtual ReplicationCursorCollection GetReplicationCursors(string partition);
    public virtual ActiveDirectoryReplicationMetadata GetReplicationMetadata(string objectPath);
    public virtual ReplicationNeighborCollection GetReplicationNeighbors(string partition);
    public virtual ReplicationOperationInformation GetReplicationOperationInformation();
    public virtual bool IsGlobalCatalog();
    public void SeizeRoleOwnership(ActiveDirectoryRole role);
    public virtual void SyncReplicaFromAllServers(string partition, SyncFromAllServersOptions options);
    public virtual void SyncReplicaFromServer(string partition, string sourceServer);
    public void TransferRoleOwnership(ActiveDirectoryRole role);
    public virtual void TriggerSyncReplicaFromNeighbors(string partition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.DomainControllerCollection : ReadOnlyCollectionBase {
    public DomainController Item { get; }
    public DomainController get_Item(int index);
    public bool Contains(DomainController domainController);
    public void CopyTo(DomainController[] domainControllers, int index);
    public int IndexOf(DomainController domainController);
}
public enum System.DirectoryServices.ActiveDirectory.DomainMode : Enum {
    public int value__;
    public static DomainMode Unknown;
    public static DomainMode Windows2000MixedDomain;
    public static DomainMode Windows2000NativeDomain;
    public static DomainMode Windows2003InterimDomain;
    public static DomainMode Windows2003Domain;
    public static DomainMode Windows2008Domain;
    public static DomainMode Windows2008R2Domain;
    public static DomainMode Windows8Domain;
    public static DomainMode Windows2012R2Domain;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.Forest : object {
    public ApplicationPartitionCollection ApplicationPartitions { get; }
    public DomainCollection Domains { get; }
    public ForestMode ForestMode { get; }
    public int ForestModeLevel { get; }
    public GlobalCatalogCollection GlobalCatalogs { get; }
    public string Name { get; }
    public DomainController NamingRoleOwner { get; }
    public Domain RootDomain { get; }
    public ActiveDirectorySchema Schema { get; }
    public DomainController SchemaRoleOwner { get; }
    public ReadOnlySiteCollection Sites { get; }
    public ApplicationPartitionCollection get_ApplicationPartitions();
    public DomainCollection get_Domains();
    public ForestMode get_ForestMode();
    public int get_ForestModeLevel();
    public GlobalCatalogCollection get_GlobalCatalogs();
    public string get_Name();
    public DomainController get_NamingRoleOwner();
    public Domain get_RootDomain();
    public ActiveDirectorySchema get_Schema();
    public DomainController get_SchemaRoleOwner();
    public ReadOnlySiteCollection get_Sites();
    public void CreateLocalSideOfTrustRelationship(string targetForestName, TrustDirection direction, string trustPassword);
    public void CreateTrustRelationship(Forest targetForest, TrustDirection direction);
    public void DeleteLocalSideOfTrustRelationship(string targetForestName);
    public void DeleteTrustRelationship(Forest targetForest);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    public GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs();
    public GlobalCatalogCollection FindAllDiscoverableGlobalCatalogs(string siteName);
    public GlobalCatalogCollection FindAllGlobalCatalogs();
    public GlobalCatalogCollection FindAllGlobalCatalogs(string siteName);
    public GlobalCatalog FindGlobalCatalog();
    public GlobalCatalog FindGlobalCatalog(LocatorOptions flag);
    public GlobalCatalog FindGlobalCatalog(string siteName);
    public GlobalCatalog FindGlobalCatalog(string siteName, LocatorOptions flag);
    public TrustRelationshipInformationCollection GetAllTrustRelationships();
    public static Forest GetCurrentForest();
    public static Forest GetForest(DirectoryContext context);
    public bool GetSelectiveAuthenticationStatus(string targetForestName);
    public bool GetSidFilteringStatus(string targetForestName);
    public ForestTrustRelationshipInformation GetTrustRelationship(string targetForestName);
    public void RaiseForestFunctionality(ForestMode forestMode);
    public void RaiseForestFunctionalityLevel(int forestMode);
    public void RepairTrustRelationship(Forest targetForest);
    public void SetSelectiveAuthenticationStatus(string targetForestName, bool enable);
    public void SetSidFilteringStatus(string targetForestName, bool enable);
    public virtual string ToString();
    public void UpdateLocalSideOfTrustRelationship(string targetForestName, TrustDirection newTrustDirection, string newTrustPassword);
    public void UpdateLocalSideOfTrustRelationship(string targetForestName, string newTrustPassword);
    public void UpdateTrustRelationship(Forest targetForest, TrustDirection newTrustDirection);
    public void VerifyOutboundTrustRelationship(string targetForestName);
    public void VerifyTrustRelationship(Forest targetForest, TrustDirection direction);
}
public enum System.DirectoryServices.ActiveDirectory.ForestMode : Enum {
    public int value__;
    public static ForestMode Unknown;
    public static ForestMode Windows2000Forest;
    public static ForestMode Windows2003InterimForest;
    public static ForestMode Windows2003Forest;
    public static ForestMode Windows2008Forest;
    public static ForestMode Windows2008R2Forest;
    public static ForestMode Windows8Forest;
    public static ForestMode Windows2012R2Forest;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException : ActiveDirectoryOperationException {
    public ForestTrustRelationshipCollisionCollection Collisions { get; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ForestTrustCollisionException(SerializationInfo info, StreamingContext context);
    public ForestTrustCollisionException(string message);
    public ForestTrustCollisionException(string message, Exception inner);
    public ForestTrustCollisionException(string message, Exception inner, ForestTrustRelationshipCollisionCollection collisions);
    public ForestTrustRelationshipCollisionCollection get_Collisions();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public enum System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType : Enum {
    public int value__;
    public static ForestTrustCollisionType TopLevelName;
    public static ForestTrustCollisionType Domain;
    public static ForestTrustCollisionType Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection : ReadOnlyCollectionBase {
    public ForestTrustDomainInformation Item { get; }
    public ForestTrustDomainInformation get_Item(int index);
    public bool Contains(ForestTrustDomainInformation information);
    public void CopyTo(ForestTrustDomainInformation[] array, int index);
    public int IndexOf(ForestTrustDomainInformation information);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation : object {
    public string DnsName { get; }
    public string DomainSid { get; }
    public string NetBiosName { get; }
    public ForestTrustDomainStatus Status { get; public set; }
    public string get_DnsName();
    public string get_DomainSid();
    public string get_NetBiosName();
    public ForestTrustDomainStatus get_Status();
    public void set_Status(ForestTrustDomainStatus value);
}
public enum System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus : Enum {
    public int value__;
    public static ForestTrustDomainStatus Enabled;
    public static ForestTrustDomainStatus SidAdminDisabled;
    public static ForestTrustDomainStatus SidConflictDisabled;
    public static ForestTrustDomainStatus NetBiosNameAdminDisabled;
    public static ForestTrustDomainStatus NetBiosNameConflictDisabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision : object {
    public string CollisionRecord { get; }
    public ForestTrustCollisionType CollisionType { get; }
    public DomainCollisionOptions DomainCollisionOption { get; }
    public TopLevelNameCollisionOptions TopLevelNameCollisionOption { get; }
    public string get_CollisionRecord();
    public ForestTrustCollisionType get_CollisionType();
    public DomainCollisionOptions get_DomainCollisionOption();
    public TopLevelNameCollisionOptions get_TopLevelNameCollisionOption();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection : ReadOnlyCollectionBase {
    public ForestTrustRelationshipCollision Item { get; }
    public ForestTrustRelationshipCollision get_Item(int index);
    public bool Contains(ForestTrustRelationshipCollision collision);
    public void CopyTo(ForestTrustRelationshipCollision[] array, int index);
    public int IndexOf(ForestTrustRelationshipCollision collision);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation : TrustRelationshipInformation {
    public StringCollection ExcludedTopLevelNames { get; }
    public TopLevelNameCollection TopLevelNames { get; }
    public ForestTrustDomainInfoCollection TrustedDomainInformation { get; }
    public StringCollection get_ExcludedTopLevelNames();
    public TopLevelNameCollection get_TopLevelNames();
    public ForestTrustDomainInfoCollection get_TrustedDomainInformation();
    public void Save();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.GlobalCatalog : DomainController {
    public DomainController DisableGlobalCatalog();
    public virtual GlobalCatalog EnableGlobalCatalog();
    public static GlobalCatalogCollection FindAll(DirectoryContext context);
    public static GlobalCatalogCollection FindAll(DirectoryContext context, string siteName);
    public ReadOnlyActiveDirectorySchemaPropertyCollection FindAllProperties();
    public static GlobalCatalog FindOne(DirectoryContext context);
    public static GlobalCatalog FindOne(DirectoryContext context, LocatorOptions flag);
    public static GlobalCatalog FindOne(DirectoryContext context, string siteName);
    public static GlobalCatalog FindOne(DirectoryContext context, string siteName, LocatorOptions flag);
    public virtual DirectorySearcher GetDirectorySearcher();
    public static GlobalCatalog GetGlobalCatalog(DirectoryContext context);
    public virtual bool IsGlobalCatalog();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection : ReadOnlyCollectionBase {
    public GlobalCatalog Item { get; }
    public GlobalCatalog get_Item(int index);
    public bool Contains(GlobalCatalog globalCatalog);
    public void CopyTo(GlobalCatalog[] globalCatalogs, int index);
    public int IndexOf(GlobalCatalog globalCatalog);
}
public enum System.DirectoryServices.ActiveDirectory.HourOfDay : Enum {
    public int value__;
    public static HourOfDay Zero;
    public static HourOfDay One;
    public static HourOfDay Two;
    public static HourOfDay Three;
    public static HourOfDay Four;
    public static HourOfDay Five;
    public static HourOfDay Six;
    public static HourOfDay Seven;
    public static HourOfDay Eight;
    public static HourOfDay Nine;
    public static HourOfDay Ten;
    public static HourOfDay Eleven;
    public static HourOfDay Twelve;
    public static HourOfDay Thirteen;
    public static HourOfDay Fourteen;
    public static HourOfDay Fifteen;
    public static HourOfDay Sixteen;
    public static HourOfDay Seventeen;
    public static HourOfDay Eighteen;
    public static HourOfDay Nineteen;
    public static HourOfDay Twenty;
    public static HourOfDay TwentyOne;
    public static HourOfDay TwentyTwo;
    public static HourOfDay TwentyThree;
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.LocatorOptions : Enum {
    public long value__;
    public static LocatorOptions ForceRediscovery;
    public static LocatorOptions KdcRequired;
    public static LocatorOptions TimeServerRequired;
    public static LocatorOptions WriteableRequired;
    public static LocatorOptions AvoidSelf;
}
public enum System.DirectoryServices.ActiveDirectory.MinuteOfHour : Enum {
    public int value__;
    public static MinuteOfHour Zero;
    public static MinuteOfHour Fifteen;
    public static MinuteOfHour Thirty;
    public static MinuteOfHour FortyFive;
}
public enum System.DirectoryServices.ActiveDirectory.NotificationStatus : Enum {
    public int value__;
    public static NotificationStatus NoNotification;
    public static NotificationStatus IntraSiteOnly;
    public static NotificationStatus NotificationAlways;
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.PropertyTypes : Enum {
    public int value__;
    public static PropertyTypes Indexed;
    public static PropertyTypes InGlobalCatalog;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySchemaClass Item { get; }
    public ActiveDirectorySchemaClass get_Item(int index);
    public bool Contains(ActiveDirectorySchemaClass schemaClass);
    public void CopyTo(ActiveDirectorySchemaClass[] classes, int index);
    public int IndexOf(ActiveDirectorySchemaClass schemaClass);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySchemaProperty Item { get; }
    public ActiveDirectorySchemaProperty get_Item(int index);
    public bool Contains(ActiveDirectorySchemaProperty schemaProperty);
    public void CopyTo(ActiveDirectorySchemaProperty[] properties, int index);
    public int IndexOf(ActiveDirectorySchemaProperty schemaProperty);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection : ReadOnlyCollectionBase {
    public DirectoryServer Item { get; }
    public DirectoryServer get_Item(int index);
    public bool Contains(DirectoryServer directoryServer);
    public void CopyTo(DirectoryServer[] directoryServers, int index);
    public int IndexOf(DirectoryServer directoryServer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySite Item { get; }
    public ActiveDirectorySite get_Item(int index);
    public bool Contains(ActiveDirectorySite site);
    public void CopyTo(ActiveDirectorySite[] sites, int index);
    public int IndexOf(ActiveDirectorySite site);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySiteLinkBridge Item { get; }
    public ActiveDirectorySiteLinkBridge get_Item(int index);
    public bool Contains(ActiveDirectorySiteLinkBridge bridge);
    public void CopyTo(ActiveDirectorySiteLinkBridge[] bridges, int index);
    public int IndexOf(ActiveDirectorySiteLinkBridge bridge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection : ReadOnlyCollectionBase {
    public ActiveDirectorySiteLink Item { get; }
    public ActiveDirectorySiteLink get_Item(int index);
    public bool Contains(ActiveDirectorySiteLink link);
    public void CopyTo(ActiveDirectorySiteLink[] links, int index);
    public int IndexOf(ActiveDirectorySiteLink link);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection : ReadOnlyCollectionBase {
    public string Item { get; }
    public string get_Item(int index);
    public bool Contains(string value);
    public void CopyTo(String[] values, int index);
    public int IndexOf(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationConnection : object {
    public NotificationStatus ChangeNotificationStatus { get; public set; }
    public bool DataCompressionEnabled { get; public set; }
    public string DestinationServer { get; }
    public bool Enabled { get; public set; }
    public bool GeneratedByKcc { get; public set; }
    public string Name { get; }
    public bool ReciprocalReplicationEnabled { get; public set; }
    [NullableAttribute("2")]
public ActiveDirectorySchedule ReplicationSchedule { get; public set; }
    public bool ReplicationScheduleOwnedByUser { get; public set; }
    public ReplicationSpan ReplicationSpan { get; }
    [NullableAttribute("2")]
public string SourceServer { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectorySchedule schedule, ActiveDirectoryTransportType transport);
    public ReplicationConnection(DirectoryContext context, string name, DirectoryServer sourceServer, ActiveDirectoryTransportType transport);
    public NotificationStatus get_ChangeNotificationStatus();
    public void set_ChangeNotificationStatus(NotificationStatus value);
    public bool get_DataCompressionEnabled();
    public void set_DataCompressionEnabled(bool value);
    public string get_DestinationServer();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_GeneratedByKcc();
    public void set_GeneratedByKcc(bool value);
    public string get_Name();
    public bool get_ReciprocalReplicationEnabled();
    public void set_ReciprocalReplicationEnabled(bool value);
    [NullableContextAttribute("2")]
public ActiveDirectorySchedule get_ReplicationSchedule();
    [NullableContextAttribute("2")]
public void set_ReplicationSchedule(ActiveDirectorySchedule value);
    public bool get_ReplicationScheduleOwnedByUser();
    public void set_ReplicationScheduleOwnedByUser(bool value);
    public ReplicationSpan get_ReplicationSpan();
    [NullableContextAttribute("2")]
public string get_SourceServer();
    public ActiveDirectoryTransportType get_TransportType();
    public void Delete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public static ReplicationConnection FindByName(DirectoryContext context, string name);
    public DirectoryEntry GetDirectoryEntry();
    public void Save();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection : ReadOnlyCollectionBase {
    public ReplicationConnection Item { get; }
    public ReplicationConnection get_Item(int index);
    public bool Contains(ReplicationConnection connection);
    public void CopyTo(ReplicationConnection[] connections, int index);
    public int IndexOf(ReplicationConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationCursor : object {
    public DateTime LastSuccessfulSyncTime { get; }
    public string PartitionName { get; }
    public Guid SourceInvocationId { get; }
    [NullableAttribute("2")]
public string SourceServer { get; }
    public long UpToDatenessUsn { get; }
    public DateTime get_LastSuccessfulSyncTime();
    public string get_PartitionName();
    public Guid get_SourceInvocationId();
    [NullableContextAttribute("2")]
public string get_SourceServer();
    public long get_UpToDatenessUsn();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection : ReadOnlyCollectionBase {
    public ReplicationCursor Item { get; }
    public ReplicationCursor get_Item(int index);
    public bool Contains(ReplicationCursor cursor);
    public void CopyTo(ReplicationCursor[] values, int index);
    public int IndexOf(ReplicationCursor cursor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationFailure : object {
    public int ConsecutiveFailureCount { get; }
    public DateTime FirstFailureTime { get; }
    public int LastErrorCode { get; }
    public string LastErrorMessage { get; }
    [NullableAttribute("2")]
public string SourceServer { get; }
    public int get_ConsecutiveFailureCount();
    public DateTime get_FirstFailureTime();
    public int get_LastErrorCode();
    public string get_LastErrorMessage();
    [NullableContextAttribute("2")]
public string get_SourceServer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection : ReadOnlyCollectionBase {
    public ReplicationFailure Item { get; }
    public ReplicationFailure get_Item(int index);
    public bool Contains(ReplicationFailure failure);
    public void CopyTo(ReplicationFailure[] failures, int index);
    public int IndexOf(ReplicationFailure failure);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationNeighbor : object {
    public int ConsecutiveFailureCount { get; }
    public DateTime LastAttemptedSync { get; }
    public DateTime LastSuccessfulSync { get; }
    [NullableAttribute("1")]
public string LastSyncMessage { get; }
    public int LastSyncResult { get; }
    public string PartitionName { get; }
    public ReplicationNeighborOptions ReplicationNeighborOption { get; }
    public Guid SourceInvocationId { get; }
    public string SourceServer { get; }
    public ActiveDirectoryTransportType TransportType { get; }
    public long UsnAttributeFilter { get; }
    public long UsnLastObjectChangeSynced { get; }
    public int get_ConsecutiveFailureCount();
    public DateTime get_LastAttemptedSync();
    public DateTime get_LastSuccessfulSync();
    [NullableContextAttribute("1")]
public string get_LastSyncMessage();
    public int get_LastSyncResult();
    public string get_PartitionName();
    public ReplicationNeighborOptions get_ReplicationNeighborOption();
    public Guid get_SourceInvocationId();
    public string get_SourceServer();
    public ActiveDirectoryTransportType get_TransportType();
    public long get_UsnAttributeFilter();
    public long get_UsnLastObjectChangeSynced();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection : ReadOnlyCollectionBase {
    public ReplicationNeighbor Item { get; }
    public ReplicationNeighbor get_Item(int index);
    public bool Contains(ReplicationNeighbor neighbor);
    public void CopyTo(ReplicationNeighbor[] neighbors, int index);
    public int IndexOf(ReplicationNeighbor neighbor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationOperation : object {
    public int OperationNumber { get; }
    public ReplicationOperationType OperationType { get; }
    public string PartitionName { get; }
    public int Priority { get; }
    public string SourceServer { get; }
    public DateTime TimeEnqueued { get; }
    public int get_OperationNumber();
    public ReplicationOperationType get_OperationType();
    public string get_PartitionName();
    public int get_Priority();
    public string get_SourceServer();
    public DateTime get_TimeEnqueued();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection : ReadOnlyCollectionBase {
    public ReplicationOperation Item { get; }
    public ReplicationOperation get_Item(int index);
    public bool Contains(ReplicationOperation operation);
    public void CopyTo(ReplicationOperation[] operations, int index);
    public int IndexOf(ReplicationOperation operation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation : object {
    public ReplicationOperation CurrentOperation { get; }
    public DateTime OperationStartTime { get; }
    public ReplicationOperationCollection PendingOperations { get; }
    public ReplicationOperation get_CurrentOperation();
    public DateTime get_OperationStartTime();
    public ReplicationOperationCollection get_PendingOperations();
}
public enum System.DirectoryServices.ActiveDirectory.ReplicationOperationType : Enum {
    public int value__;
    public static ReplicationOperationType Sync;
    public static ReplicationOperationType Add;
    public static ReplicationOperationType Delete;
    public static ReplicationOperationType Modify;
    public static ReplicationOperationType UpdateReference;
}
public enum System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel : Enum {
    public int value__;
    public static ReplicationSecurityLevel NegotiatePassThrough;
    public static ReplicationSecurityLevel Negotiate;
    public static ReplicationSecurityLevel MutualAuthentication;
}
public enum System.DirectoryServices.ActiveDirectory.ReplicationSpan : Enum {
    public int value__;
    public static ReplicationSpan IntraSite;
    public static ReplicationSpan InterSite;
}
public enum System.DirectoryServices.ActiveDirectory.SchemaClassType : Enum {
    public int value__;
    public static SchemaClassType Type88;
    public static SchemaClassType Structural;
    public static SchemaClassType Abstract;
    public static SchemaClassType Auxiliary;
}
public enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory : Enum {
    public int value__;
    public static SyncFromAllServersErrorCategory ErrorContactingServer;
    public static SyncFromAllServersErrorCategory ErrorReplicating;
    public static SyncFromAllServersErrorCategory ServerUnreachable;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation : object {
    public SyncFromAllServersErrorCategory ErrorCategory { get; }
    public int ErrorCode { get; }
    [NullableAttribute("1")]
public string ErrorMessage { get; }
    public string SourceServer { get; }
    public string TargetServer { get; }
    public SyncFromAllServersErrorCategory get_ErrorCategory();
    public int get_ErrorCode();
    [NullableContextAttribute("1")]
public string get_ErrorMessage();
    public string get_SourceServer();
    public string get_TargetServer();
}
public enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent : Enum {
    public int value__;
    public static SyncFromAllServersEvent Error;
    public static SyncFromAllServersEvent SyncStarted;
    public static SyncFromAllServersEvent SyncCompleted;
    public static SyncFromAllServersEvent Finished;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException : ActiveDirectoryOperationException {
    public SyncFromAllServersErrorInformation[] ErrorInformation { get; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SyncFromAllServersOperationException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public SyncFromAllServersOperationException(string message);
    [NullableContextAttribute("2")]
public SyncFromAllServersOperationException(string message, Exception inner);
    [NullableContextAttribute("2")]
public SyncFromAllServersOperationException(string message, Exception inner, SyncFromAllServersErrorInformation[] errors);
    public SyncFromAllServersErrorInformation[] get_ErrorInformation();
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions : Enum {
    public int value__;
    public static SyncFromAllServersOptions None;
    public static SyncFromAllServersOptions AbortIfServerUnavailable;
    public static SyncFromAllServersOptions SyncAdjacentServerOnly;
    public static SyncFromAllServersOptions CheckServerAlivenessOnly;
    public static SyncFromAllServersOptions SkipInitialCheck;
    public static SyncFromAllServersOptions PushChangeOutward;
    public static SyncFromAllServersOptions CrossSite;
}
public class System.DirectoryServices.ActiveDirectory.SyncUpdateCallback : MulticastDelegate {
    public SyncUpdateCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual bool Invoke(SyncFromAllServersEvent eventType, string targetServer, string sourceServer, SyncFromAllServersOperationException exception);
    public virtual IAsyncResult BeginInvoke(SyncFromAllServersEvent eventType, string targetServer, string sourceServer, SyncFromAllServersOperationException exception, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.TopLevelName : object {
    public string Name { get; }
    public TopLevelNameStatus Status { get; public set; }
    public string get_Name();
    public TopLevelNameStatus get_Status();
    public void set_Status(TopLevelNameStatus value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.TopLevelNameCollection : ReadOnlyCollectionBase {
    public TopLevelName Item { get; }
    public TopLevelName get_Item(int index);
    public bool Contains(TopLevelName name);
    public void CopyTo(TopLevelName[] names, int index);
    public int IndexOf(TopLevelName name);
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions : Enum {
    public int value__;
    public static TopLevelNameCollisionOptions None;
    public static TopLevelNameCollisionOptions NewlyCreated;
    public static TopLevelNameCollisionOptions DisabledByAdmin;
    public static TopLevelNameCollisionOptions DisabledByConflict;
}
public enum System.DirectoryServices.ActiveDirectory.TopLevelNameStatus : Enum {
    public int value__;
    public static TopLevelNameStatus Enabled;
    public static TopLevelNameStatus NewlyCreated;
    public static TopLevelNameStatus AdminDisabled;
    public static TopLevelNameStatus ConflictDisabled;
}
public enum System.DirectoryServices.ActiveDirectory.TrustDirection : Enum {
    public int value__;
    public static TrustDirection Inbound;
    public static TrustDirection Outbound;
    public static TrustDirection Bidirectional;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation : object {
    public string SourceName { get; }
    public string TargetName { get; }
    public TrustDirection TrustDirection { get; }
    public TrustType TrustType { get; }
    public string get_SourceName();
    public string get_TargetName();
    public TrustDirection get_TrustDirection();
    public TrustType get_TrustType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection : ReadOnlyCollectionBase {
    public TrustRelationshipInformation Item { get; }
    public TrustRelationshipInformation get_Item(int index);
    public bool Contains(TrustRelationshipInformation information);
    public void CopyTo(TrustRelationshipInformation[] array, int index);
    public int IndexOf(TrustRelationshipInformation information);
}
public enum System.DirectoryServices.ActiveDirectory.TrustType : Enum {
    public int value__;
    public static TrustType TreeRoot;
    public static TrustType ParentChild;
    public static TrustType CrossLink;
    public static TrustType External;
    public static TrustType Forest;
    public static TrustType Kerberos;
    public static TrustType Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectoryAccessRule : ObjectAccessRule {
    public ActiveDirectoryRights ActiveDirectoryRights { get; }
    public ActiveDirectorySecurityInheritance InheritanceType { get; }
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAccessRule(IdentityReference identity, ActiveDirectoryRights adRights, AccessControlType type, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ActiveDirectoryRights get_ActiveDirectoryRights();
    public ActiveDirectorySecurityInheritance get_InheritanceType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectoryAuditRule : ObjectAuditRule {
    public ActiveDirectoryRights ActiveDirectoryRights { get; }
    public ActiveDirectorySecurityInheritance InheritanceType { get; }
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType);
    public ActiveDirectoryAuditRule(IdentityReference identity, ActiveDirectoryRights adRights, AuditFlags auditFlags, Guid objectType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ActiveDirectoryRights get_ActiveDirectoryRights();
    public ActiveDirectorySecurityInheritance get_InheritanceType();
}
[FlagsAttribute]
public enum System.DirectoryServices.ActiveDirectoryRights : Enum {
    public int value__;
    public static ActiveDirectoryRights CreateChild;
    public static ActiveDirectoryRights DeleteChild;
    public static ActiveDirectoryRights ListChildren;
    public static ActiveDirectoryRights Self;
    public static ActiveDirectoryRights ReadProperty;
    public static ActiveDirectoryRights WriteProperty;
    public static ActiveDirectoryRights DeleteTree;
    public static ActiveDirectoryRights ListObject;
    public static ActiveDirectoryRights ExtendedRight;
    public static ActiveDirectoryRights Delete;
    public static ActiveDirectoryRights ReadControl;
    public static ActiveDirectoryRights GenericExecute;
    public static ActiveDirectoryRights GenericWrite;
    public static ActiveDirectoryRights GenericRead;
    public static ActiveDirectoryRights WriteDacl;
    public static ActiveDirectoryRights WriteOwner;
    public static ActiveDirectoryRights GenericAll;
    public static ActiveDirectoryRights Synchronize;
    public static ActiveDirectoryRights AccessSystemSecurity;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ActiveDirectorySecurity : DirectoryObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public sealed virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public sealed virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectGuid, Guid inheritedObjectGuid);
    public void AddAccessRule(ActiveDirectoryAccessRule rule);
    public void AddAuditRule(ActiveDirectoryAuditRule rule);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectGuid, Guid inheritedObjectGuid);
    public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, Boolean& modified);
    public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, Boolean& modified);
    public virtual void PurgeAccessRules(IdentityReference identity);
    public virtual void PurgeAuditRules(IdentityReference identity);
    public void RemoveAccess(IdentityReference identity, AccessControlType type);
    public bool RemoveAccessRule(ActiveDirectoryAccessRule rule);
    public void RemoveAccessRuleSpecific(ActiveDirectoryAccessRule rule);
    public void RemoveAudit(IdentityReference identity);
    public bool RemoveAuditRule(ActiveDirectoryAuditRule rule);
    public void RemoveAuditRuleSpecific(ActiveDirectoryAuditRule rule);
    public void ResetAccessRule(ActiveDirectoryAccessRule rule);
    public void SetAccessRule(ActiveDirectoryAccessRule rule);
    public void SetAuditRule(ActiveDirectoryAuditRule rule);
}
public enum System.DirectoryServices.ActiveDirectorySecurityInheritance : Enum {
    public int value__;
    public static ActiveDirectorySecurityInheritance None;
    public static ActiveDirectorySecurityInheritance All;
    public static ActiveDirectorySecurityInheritance Descendents;
    public static ActiveDirectorySecurityInheritance SelfAndChildren;
    public static ActiveDirectorySecurityInheritance Children;
}
[FlagsAttribute]
public enum System.DirectoryServices.AuthenticationTypes : Enum {
    public int value__;
    public static AuthenticationTypes None;
    public static AuthenticationTypes Secure;
    public static AuthenticationTypes Encryption;
    public static AuthenticationTypes SecureSocketsLayer;
    public static AuthenticationTypes ReadonlyServer;
    public static AuthenticationTypes Anonymous;
    public static AuthenticationTypes FastBind;
    public static AuthenticationTypes Signing;
    public static AuthenticationTypes Sealing;
    public static AuthenticationTypes Delegation;
    public static AuthenticationTypes ServerBind;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.CreateChildAccessRule : ActiveDirectoryAccessRule {
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType);
    public CreateChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DeleteChildAccessRule : ActiveDirectoryAccessRule {
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType);
    public DeleteChildAccessRule(IdentityReference identity, AccessControlType type, Guid childType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DeleteTreeAccessRule : ActiveDirectoryAccessRule {
    public DeleteTreeAccessRule(IdentityReference identity, AccessControlType type);
    public DeleteTreeAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public DeleteTreeAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
public enum System.DirectoryServices.DereferenceAlias : Enum {
    public int value__;
    public static DereferenceAlias Never;
    public static DereferenceAlias InSearching;
    public static DereferenceAlias FindingBaseObject;
    public static DereferenceAlias Always;
}
internal class System.DirectoryServices.Design.DirectoryEntryConverter : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryEntries : object {
    public SchemaNameCollection SchemaFilter { get; }
    public SchemaNameCollection get_SchemaFilter();
    public DirectoryEntry Add(string name, string schemaClassName);
    public DirectoryEntry Find(string name);
    public DirectoryEntry Find(string name, string schemaClassName);
    public sealed virtual IEnumerator GetEnumerator();
    public void Remove(DirectoryEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.DirectoryServices.Design.DirectoryEntryConverter")]
public class System.DirectoryServices.DirectoryEntry : Component {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AuthenticationTypes AuthenticationType { get; public set; }
    public DirectoryEntries Children { get; }
    public Guid Guid { get; }
    public string Name { get; }
    public string NativeGuid { get; }
    public object NativeObject { get; }
    public ActiveDirectorySecurity ObjectSecurity { get; public set; }
    [NullableAttribute("2")]
public DirectoryEntryConfiguration Options { get; }
    public DirectoryEntry Parent { get; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
unknown string Password {public set; }
    [DefaultValueAttribute("")]
public string Path { get; public set; }
    public PropertyCollection Properties { get; }
    public string SchemaClassName { get; }
    public DirectoryEntry SchemaEntry { get; }
    [DefaultValueAttribute("True")]
public bool UsePropertyCache { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
public string Username { get; public set; }
    public DirectoryEntry(object adsObject);
    [NullableContextAttribute("2")]
public DirectoryEntry(string path);
    [NullableContextAttribute("2")]
public DirectoryEntry(string path, string username, string password);
    [NullableContextAttribute("2")]
public DirectoryEntry(string path, string username, string password, AuthenticationTypes authenticationType);
    public AuthenticationTypes get_AuthenticationType();
    public void set_AuthenticationType(AuthenticationTypes value);
    public DirectoryEntries get_Children();
    public Guid get_Guid();
    public string get_Name();
    public string get_NativeGuid();
    public object get_NativeObject();
    public ActiveDirectorySecurity get_ObjectSecurity();
    public void set_ObjectSecurity(ActiveDirectorySecurity value);
    [NullableContextAttribute("2")]
public DirectoryEntryConfiguration get_Options();
    public DirectoryEntry get_Parent();
    [NullableContextAttribute("2")]
public void set_Password(string value);
    public string get_Path();
    public void set_Path(string value);
    public PropertyCollection get_Properties();
    public string get_SchemaClassName();
    public DirectoryEntry get_SchemaEntry();
    public bool get_UsePropertyCache();
    public void set_UsePropertyCache(bool value);
    [NullableContextAttribute("2")]
public string get_Username();
    [NullableContextAttribute("2")]
public void set_Username(string value);
    public void Close();
    public void CommitChanges();
    public DirectoryEntry CopyTo(DirectoryEntry newParent);
    public DirectoryEntry CopyTo(DirectoryEntry newParent, string newName);
    public void DeleteTree();
    protected virtual void Dispose(bool disposing);
    public static bool Exists(string path);
    [NullableContextAttribute("2")]
public object Invoke(string methodName, Object[] args);
    public object InvokeGet(string propertyName);
    public void InvokeSet(string propertyName, Object[] args);
    public void MoveTo(DirectoryEntry newParent);
    public void MoveTo(DirectoryEntry newParent, string newName);
    public void RefreshCache();
    public void RefreshCache(String[] propertyNames);
    [NullableContextAttribute("2")]
public void Rename(string newName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryEntryConfiguration : object {
    public int PageSize { get; public set; }
    public PasswordEncodingMethod PasswordEncoding { get; public set; }
    public int PasswordPort { get; public set; }
    public ReferralChasingOption Referral { get; public set; }
    public SecurityMasks SecurityMasks { get; public set; }
    public int get_PageSize();
    public void set_PageSize(int value);
    public PasswordEncodingMethod get_PasswordEncoding();
    public void set_PasswordEncoding(PasswordEncodingMethod value);
    public int get_PasswordPort();
    public void set_PasswordPort(int value);
    public ReferralChasingOption get_Referral();
    public void set_Referral(ReferralChasingOption value);
    public SecurityMasks get_SecurityMasks();
    public void set_SecurityMasks(SecurityMasks value);
    public string GetCurrentServerName();
    public bool IsMutuallyAuthenticated();
    public void SetUserNameQueryQuota(string accountName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectorySearcher : Component {
    [DefaultValueAttribute("False")]
public bool Asynchronous { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
public string AttributeScopeQuery { get; public set; }
    [DefaultValueAttribute("True")]
public bool CacheResults { get; public set; }
    public TimeSpan ClientTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DereferenceAlias DerefAlias { get; public set; }
    [DefaultValueAttribute("")]
public DirectorySynchronization DirectorySynchronization { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ExtendedDN ExtendedDN { get; public set; }
    [DefaultValueAttribute("(objectClass=*)")]
public string Filter { get; public set; }
    [DefaultValueAttribute("0")]
public int PageSize { get; public set; }
    [NullableAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public StringCollection PropertiesToLoad { get; }
    [DefaultValueAttribute("False")]
public bool PropertyNamesOnly { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ReferralChasingOption ReferralChasing { get; public set; }
    [DefaultValueAttribute("")]
public DirectoryEntry SearchRoot { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SearchScope SearchScope { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SecurityMasks SecurityMasks { get; public set; }
    public TimeSpan ServerPageTimeLimit { get; public set; }
    public TimeSpan ServerTimeLimit { get; public set; }
    [DefaultValueAttribute("0")]
public int SizeLimit { get; public set; }
    [NullableAttribute("1")]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public SortOption Sort { get; public set; }
    [DefaultValueAttribute("False")]
public bool Tombstone { get; public set; }
    [DefaultValueAttribute("")]
public DirectoryVirtualListView VirtualListView { get; public set; }
    public DirectorySearcher(DirectoryEntry searchRoot);
    public DirectorySearcher(DirectoryEntry searchRoot, string filter);
    public DirectorySearcher(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad);
    public DirectorySearcher(DirectoryEntry searchRoot, string filter, String[] propertiesToLoad, SearchScope scope);
    public DirectorySearcher(string filter);
    public DirectorySearcher(string filter, String[] propertiesToLoad);
    public DirectorySearcher(string filter, String[] propertiesToLoad, SearchScope scope);
    public bool get_Asynchronous();
    public void set_Asynchronous(bool value);
    [NullableContextAttribute("1")]
public string get_AttributeScopeQuery();
    [NullableContextAttribute("1")]
public void set_AttributeScopeQuery(string value);
    public bool get_CacheResults();
    public void set_CacheResults(bool value);
    public TimeSpan get_ClientTimeout();
    public void set_ClientTimeout(TimeSpan value);
    public DereferenceAlias get_DerefAlias();
    public void set_DerefAlias(DereferenceAlias value);
    public DirectorySynchronization get_DirectorySynchronization();
    public void set_DirectorySynchronization(DirectorySynchronization value);
    public ExtendedDN get_ExtendedDN();
    public void set_ExtendedDN(ExtendedDN value);
    public string get_Filter();
    public void set_Filter(string value);
    public int get_PageSize();
    public void set_PageSize(int value);
    [NullableContextAttribute("1")]
public StringCollection get_PropertiesToLoad();
    public bool get_PropertyNamesOnly();
    public void set_PropertyNamesOnly(bool value);
    public ReferralChasingOption get_ReferralChasing();
    public void set_ReferralChasing(ReferralChasingOption value);
    public DirectoryEntry get_SearchRoot();
    public void set_SearchRoot(DirectoryEntry value);
    public SearchScope get_SearchScope();
    public void set_SearchScope(SearchScope value);
    public SecurityMasks get_SecurityMasks();
    public void set_SecurityMasks(SecurityMasks value);
    public TimeSpan get_ServerPageTimeLimit();
    public void set_ServerPageTimeLimit(TimeSpan value);
    public TimeSpan get_ServerTimeLimit();
    public void set_ServerTimeLimit(TimeSpan value);
    public int get_SizeLimit();
    public void set_SizeLimit(int value);
    [NullableContextAttribute("1")]
public SortOption get_Sort();
    [NullableContextAttribute("1")]
public void set_Sort(SortOption value);
    public bool get_Tombstone();
    public void set_Tombstone(bool value);
    public DirectoryVirtualListView get_VirtualListView();
    public void set_VirtualListView(DirectoryVirtualListView value);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
public SearchResultCollection FindAll();
    public SearchResult FindOne();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryServicesCOMException : COMException {
    public int ExtendedError { get; }
    public string ExtendedErrorMessage { get; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected DirectoryServicesCOMException(SerializationInfo info, StreamingContext context);
    public DirectoryServicesCOMException(string message);
    public DirectoryServicesCOMException(string message, Exception inner);
    public int get_ExtendedError();
    public string get_ExtendedErrorMessage();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectorySynchronization : object {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DirectorySynchronizationOptions Option { get; public set; }
    public DirectorySynchronization(Byte[] cookie);
    public DirectorySynchronization(DirectorySynchronization sync);
    public DirectorySynchronization(DirectorySynchronizationOptions option);
    public DirectorySynchronization(DirectorySynchronizationOptions option, Byte[] cookie);
    public DirectorySynchronizationOptions get_Option();
    public void set_Option(DirectorySynchronizationOptions value);
    [NullableContextAttribute("1")]
public DirectorySynchronization Copy();
    [NullableContextAttribute("1")]
public Byte[] GetDirectorySynchronizationCookie();
    public void ResetDirectorySynchronizationCookie();
    public void ResetDirectorySynchronizationCookie(Byte[] cookie);
}
[FlagsAttribute]
public enum System.DirectoryServices.DirectorySynchronizationOptions : Enum {
    public long value__;
    public static DirectorySynchronizationOptions None;
    public static DirectorySynchronizationOptions ObjectSecurity;
    public static DirectorySynchronizationOptions ParentsFirst;
    public static DirectorySynchronizationOptions PublicDataOnly;
    public static DirectorySynchronizationOptions IncrementalValues;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.DirectoryServices.DirectoryVirtualListView : object {
    [DefaultValueAttribute("0")]
public int AfterCount { get; public set; }
    [DefaultValueAttribute("0")]
public int ApproximateTotal { get; public set; }
    [DefaultValueAttribute("0")]
public int BeforeCount { get; public set; }
    [DefaultValueAttribute("")]
public DirectoryVirtualListViewContext DirectoryVirtualListViewContext { get; public set; }
    [DefaultValueAttribute("0")]
public int Offset { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
public string Target { get; public set; }
    [DefaultValueAttribute("0")]
public int TargetPercentage { get; public set; }
    public DirectoryVirtualListView(int afterCount);
    public DirectoryVirtualListView(int beforeCount, int afterCount, int offset);
    public DirectoryVirtualListView(int beforeCount, int afterCount, int offset, DirectoryVirtualListViewContext context);
    public DirectoryVirtualListView(int beforeCount, int afterCount, string target);
    public DirectoryVirtualListView(int beforeCount, int afterCount, string target, DirectoryVirtualListViewContext context);
    public int get_AfterCount();
    public void set_AfterCount(int value);
    public int get_ApproximateTotal();
    public void set_ApproximateTotal(int value);
    public int get_BeforeCount();
    public void set_BeforeCount(int value);
    public DirectoryVirtualListViewContext get_DirectoryVirtualListViewContext();
    public void set_DirectoryVirtualListViewContext(DirectoryVirtualListViewContext value);
    public int get_Offset();
    public void set_Offset(int value);
    [NullableContextAttribute("1")]
public string get_Target();
    [NullableContextAttribute("1")]
public void set_Target(string value);
    public int get_TargetPercentage();
    public void set_TargetPercentage(int value);
}
public class System.DirectoryServices.DirectoryVirtualListViewContext : object {
    [NullableContextAttribute("1")]
public DirectoryVirtualListViewContext Copy();
}
public enum System.DirectoryServices.ExtendedDN : Enum {
    public int value__;
    public static ExtendedDN None;
    public static ExtendedDN HexString;
    public static ExtendedDN Standard;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ExtendedRightAccessRule : ActiveDirectoryAccessRule {
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, Guid extendedRightType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, Guid extendedRightType, ActiveDirectorySecurityInheritance inheritanceType);
    public ExtendedRightAccessRule(IdentityReference identity, AccessControlType type, Guid extendedRightType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.ListChildrenAccessRule : ActiveDirectoryAccessRule {
    public ListChildrenAccessRule(IdentityReference identity, AccessControlType type);
    public ListChildrenAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType);
    public ListChildrenAccessRule(IdentityReference identity, AccessControlType type, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
public enum System.DirectoryServices.PasswordEncodingMethod : Enum {
    public int value__;
    public static PasswordEncodingMethod PasswordEncodingSsl;
    public static PasswordEncodingMethod PasswordEncodingClear;
}
public enum System.DirectoryServices.PropertyAccess : Enum {
    public int value__;
    public static PropertyAccess Read;
    public static PropertyAccess Write;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.PropertyAccessRule : ActiveDirectoryAccessRule {
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, ActiveDirectorySecurityInheritance inheritanceType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType, ActiveDirectorySecurityInheritance inheritanceType);
    public PropertyAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertyType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.PropertyCollection : object {
    public int Count { get; }
    public PropertyValueCollection Item { get; }
    public ICollection PropertyNames { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    public ICollection Values { get; }
    public sealed virtual int get_Count();
    public PropertyValueCollection get_Item(string propertyName);
    public ICollection get_PropertyNames();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual ICollection get_Values();
    public bool Contains(string propertyName);
    public void CopyTo(PropertyValueCollection[] array, int index);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object value);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.PropertySetAccessRule : ActiveDirectoryAccessRule {
    public PropertySetAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType);
    public PropertySetAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType, ActiveDirectorySecurityInheritance inheritanceType);
    public PropertySetAccessRule(IdentityReference identity, AccessControlType type, PropertyAccess access, Guid propertySetType, ActiveDirectorySecurityInheritance inheritanceType, Guid inheritedObjectType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.PropertyValueCollection : CollectionBase {
    public object Item { get; public set; }
    [NullableAttribute("1")]
public string PropertyName { get; }
    public object Value { get; public set; }
    public object get_Item(int index);
    public void set_Item(int index, object value);
    [NullableContextAttribute("1")]
public string get_PropertyName();
    public object get_Value();
    public void set_Value(object value);
    public int Add(object value);
    [NullableContextAttribute("1")]
public void AddRange(PropertyValueCollection value);
    public void AddRange(Object[] value);
    public bool Contains(object value);
    public void CopyTo(Object[] array, int index);
    public int IndexOf(object value);
    public void Insert(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    public void Remove(object value);
}
public enum System.DirectoryServices.ReferralChasingOption : Enum {
    public int value__;
    public static ReferralChasingOption None;
    public static ReferralChasingOption Subordinate;
    public static ReferralChasingOption External;
    public static ReferralChasingOption All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ResultPropertyCollection : DictionaryBase {
    public ResultPropertyValueCollection Item { get; }
    public ICollection PropertyNames { get; }
    public ICollection Values { get; }
    public ResultPropertyValueCollection get_Item(string name);
    public ICollection get_PropertyNames();
    public ICollection get_Values();
    public bool Contains(string propertyName);
    public void CopyTo(ResultPropertyValueCollection[] array, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.ResultPropertyValueCollection : ReadOnlyCollectionBase {
    public object Item { get; }
    public object get_Item(int index);
    [NullableContextAttribute("2")]
public bool Contains(object value);
    public void CopyTo(Object[] values, int index);
    [NullableContextAttribute("2")]
public int IndexOf(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.SchemaNameCollection : object {
    public int Count { get; }
    public string Item { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public string get_Item(int index);
    public void set_Item(int index, string value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(string value);
    [NullableContextAttribute("1")]
public void AddRange(SchemaNameCollection value);
    public void AddRange(String[] value);
    public sealed virtual void Clear();
    public bool Contains(string value);
    public void CopyTo(String[] stringArray, int index);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(string value);
    public void Insert(int index, string value);
    public void Remove(string value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.DirectoryServices.SearchResult : object {
    public string Path { get; }
    public ResultPropertyCollection Properties { get; }
    public string get_Path();
    public ResultPropertyCollection get_Properties();
    public DirectoryEntry GetDirectoryEntry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.SearchResultCollection : MarshalByRefObject {
    public int Count { get; }
    public IntPtr Handle { get; }
    public SearchResult Item { get; }
    public String[] PropertiesLoaded { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public IntPtr get_Handle();
    public SearchResult get_Item(int index);
    public String[] get_PropertiesLoaded();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public bool Contains(SearchResult result);
    public void CopyTo(SearchResult[] results, int index);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(SearchResult result);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public enum System.DirectoryServices.SearchScope : Enum {
    public int value__;
    public static SearchScope Base;
    public static SearchScope OneLevel;
    public static SearchScope Subtree;
}
[FlagsAttribute]
public enum System.DirectoryServices.SecurityMasks : Enum {
    public int value__;
    public static SecurityMasks None;
    public static SecurityMasks Owner;
    public static SecurityMasks Group;
    public static SecurityMasks Dacl;
    public static SecurityMasks Sacl;
}
public enum System.DirectoryServices.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.DirectoryServices.SortOption : object {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SortDirection Direction { get; public set; }
    [DefaultValueAttribute("")]
public string PropertyName { get; public set; }
    [NullableContextAttribute("1")]
public SortOption(string propertyName, SortDirection direction);
    public SortDirection get_Direction();
    public void set_Direction(SortDirection value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
