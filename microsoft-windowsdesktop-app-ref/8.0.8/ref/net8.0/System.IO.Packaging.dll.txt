[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.IO.FileFormatException : FormatException {
    public Uri SourceUri { get; }
    public FileFormatException(string message);
    public FileFormatException(string message, Exception innerException);
    public FileFormatException(Uri sourceUri);
    public FileFormatException(Uri sourceUri, Exception innerException);
    public FileFormatException(Uri sourceUri, string message);
    public FileFormatException(Uri sourceUri, string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected FileFormatException(SerializationInfo info, StreamingContext context);
    public Uri get_SourceUri();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum System.IO.Packaging.CompressionOption : Enum {
    public int value__;
    public static CompressionOption NotCompressed;
    public static CompressionOption Normal;
    public static CompressionOption Maximum;
    public static CompressionOption Fast;
    public static CompressionOption SuperFast;
}
public enum System.IO.Packaging.EncryptionOption : Enum {
    public int value__;
    public static EncryptionOption None;
    public static EncryptionOption RightsManagement;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Packaging.Package : object {
    public FileAccess FileOpenAccess { get; }
    public PackageProperties PackageProperties { get; }
    protected Package(FileAccess openFileAccess);
    public FileAccess get_FileOpenAccess();
    public PackageProperties get_PackageProperties();
    public void Close();
    public PackagePart CreatePart(Uri partUri, string contentType);
    public PackagePart CreatePart(Uri partUri, string contentType, CompressionOption compressionOption);
    protected abstract virtual PackagePart CreatePartCore(Uri partUri, string contentType, CompressionOption compressionOption);
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType);
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    public void DeletePart(Uri partUri);
    protected abstract virtual void DeletePartCore(Uri partUri);
    public void DeleteRelationship(string id);
    protected virtual void Dispose(bool disposing);
    public void Flush();
    protected abstract virtual void FlushCore();
    public PackagePart GetPart(Uri partUri);
    protected abstract virtual PackagePart GetPartCore(Uri partUri);
    public PackagePartCollection GetParts();
    protected abstract virtual PackagePart[] GetPartsCore();
    public PackageRelationship GetRelationship(string id);
    public PackageRelationshipCollection GetRelationships();
    public PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    public static Package Open(Stream stream);
    public static Package Open(Stream stream, FileMode packageMode);
    public static Package Open(Stream stream, FileMode packageMode, FileAccess packageAccess);
    public static Package Open(string path);
    public static Package Open(string path, FileMode packageMode);
    public static Package Open(string path, FileMode packageMode, FileAccess packageAccess);
    public static Package Open(string path, FileMode packageMode, FileAccess packageAccess, FileShare packageShare);
    public virtual bool PartExists(Uri partUri);
    public bool RelationshipExists(string id);
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Packaging.PackagePart : object {
    public CompressionOption CompressionOption { get; }
    public string ContentType { get; }
    public Package Package { get; }
    public Uri Uri { get; }
    protected PackagePart(Package package, Uri partUri);
    protected PackagePart(Package package, Uri partUri, string contentType);
    protected PackagePart(Package package, Uri partUri, string contentType, CompressionOption compressionOption);
    public CompressionOption get_CompressionOption();
    public string get_ContentType();
    public Package get_Package();
    public Uri get_Uri();
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType);
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    public void DeleteRelationship(string id);
    protected virtual string GetContentTypeCore();
    public PackageRelationship GetRelationship(string id);
    public PackageRelationshipCollection GetRelationships();
    public PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    public Stream GetStream();
    public Stream GetStream(FileMode mode);
    public Stream GetStream(FileMode mode, FileAccess access);
    [NullableContextAttribute("2")]
protected abstract virtual Stream GetStreamCore(FileMode mode, FileAccess access);
    public bool RelationshipExists(string id);
}
public class System.IO.Packaging.PackagePartCollection : object {
    [NullableContextAttribute("1")]
public IEnumerator`1<PackagePart> GetEnumerator();
    private sealed virtual override IEnumerator`1<PackagePart> System.Collections.Generic.IEnumerable<System.IO.Packaging.PackagePart>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.IO.Packaging.PackageProperties : object {
    public string Category { get; public set; }
    public string ContentStatus { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<DateTime> Created { get; public set; }
    public string Creator { get; public set; }
    public string Description { get; public set; }
    public string Identifier { get; public set; }
    public string Keywords { get; public set; }
    public string Language { get; public set; }
    public string LastModifiedBy { get; public set; }
    public Nullable`1<DateTime> LastPrinted { get; public set; }
    public Nullable`1<DateTime> Modified { get; public set; }
    public string Revision { get; public set; }
    public string Subject { get; public set; }
    public string Title { get; public set; }
    public string Version { get; public set; }
    public abstract virtual string get_Category();
    public abstract virtual void set_Category(string value);
    public abstract virtual string get_ContentStatus();
    public abstract virtual void set_ContentStatus(string value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Nullable`1<DateTime> get_Created();
    public abstract virtual void set_Created(Nullable`1<DateTime> value);
    public abstract virtual string get_Creator();
    public abstract virtual void set_Creator(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_Identifier();
    public abstract virtual void set_Identifier(string value);
    public abstract virtual string get_Keywords();
    public abstract virtual void set_Keywords(string value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual string get_LastModifiedBy();
    public abstract virtual void set_LastModifiedBy(string value);
    public abstract virtual Nullable`1<DateTime> get_LastPrinted();
    public abstract virtual void set_LastPrinted(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_Modified();
    public abstract virtual void set_Modified(Nullable`1<DateTime> value);
    public abstract virtual string get_Revision();
    public abstract virtual void set_Revision(string value);
    public abstract virtual string get_Subject();
    public abstract virtual void set_Subject(string value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Version();
    public abstract virtual void set_Version(string value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Packaging.PackageRelationship : object {
    public string Id { get; }
    public Package Package { get; }
    public string RelationshipType { get; }
    public Uri SourceUri { get; }
    public TargetMode TargetMode { get; }
    public Uri TargetUri { get; }
    public string get_Id();
    public Package get_Package();
    public string get_RelationshipType();
    public Uri get_SourceUri();
    public TargetMode get_TargetMode();
    public Uri get_TargetUri();
}
public class System.IO.Packaging.PackageRelationshipCollection : object {
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<PackageRelationship> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Packaging.PackageRelationshipSelector : object {
    public string SelectionCriteria { get; }
    public PackageRelationshipSelectorType SelectorType { get; }
    public Uri SourceUri { get; }
    public PackageRelationshipSelector(Uri sourceUri, PackageRelationshipSelectorType selectorType, string selectionCriteria);
    public string get_SelectionCriteria();
    public PackageRelationshipSelectorType get_SelectorType();
    public Uri get_SourceUri();
    public List`1<PackageRelationship> Select(Package package);
}
public enum System.IO.Packaging.PackageRelationshipSelectorType : Enum {
    public int value__;
    public static PackageRelationshipSelectorType Id;
    public static PackageRelationshipSelectorType Type;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.IO.Packaging.PackUriHelper : object {
    public static string UriSchemePack;
    [NullableContextAttribute("2")]
public static int ComparePartUri(Uri firstPartUri, Uri secondPartUri);
    public static Uri CreatePartUri(Uri partUri);
    public static Uri GetNormalizedPartUri(Uri partUri);
    public static Uri GetRelationshipPartUri(Uri partUri);
    public static Uri GetRelativeUri(Uri sourcePartUri, Uri targetPartUri);
    public static Uri GetSourcePartUriFromRelationshipPartUri(Uri relationshipPartUri);
    public static bool IsRelationshipPartUri(Uri partUri);
    public static Uri ResolvePartUri(Uri sourcePartUri, Uri targetUri);
    [NullableContextAttribute("2")]
public static int ComparePackUri(Uri firstPackUri, Uri secondPackUri);
    public static Uri Create(Uri packageUri);
    public static Uri Create(Uri packageUri, Uri partUri);
    public static Uri Create(Uri packageUri, Uri partUri, string fragment);
    public static Uri GetPackageUri(Uri packUri);
    public static Uri GetPartUri(Uri packUri);
}
public enum System.IO.Packaging.TargetMode : Enum {
    public int value__;
    public static TargetMode Internal;
    public static TargetMode External;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Packaging.ZipPackage : Package {
    protected virtual PackagePart CreatePartCore(Uri partUri, string contentType, CompressionOption compressionOption);
    protected virtual void DeletePartCore(Uri partUri);
    protected virtual void Dispose(bool disposing);
    protected virtual void FlushCore();
    protected virtual PackagePart GetPartCore(Uri partUri);
    protected virtual PackagePart[] GetPartsCore();
}
public class System.IO.Packaging.ZipPackagePart : PackagePart {
    [NullableContextAttribute("2")]
protected virtual Stream GetStreamCore(FileMode streamFileMode, FileAccess streamFileAccess);
}
