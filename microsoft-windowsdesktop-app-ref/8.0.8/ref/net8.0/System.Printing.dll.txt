internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
internal class MS.Internal.PrintWin32Thunk.SafeMemoryHandle : SafeHandle {
    public bool IsInvalid { get; }
    public static SafeMemoryHandle Null { get; }
    public int Size { get; }
    public SafeMemoryHandle(IntPtr Win32Pointer);
    public virtual bool get_IsInvalid();
    public static SafeMemoryHandle get_Null();
    public virtual int get_Size();
    public void CopyFromArray(Byte[] source, int startIndex, int length);
    public void CopyToArray(Byte[] destination, int startIndex, int length);
    public static SafeMemoryHandle Create(int byteCount);
    protected virtual bool ReleaseHandle();
    public static bool TryCreate(int byteCount, SafeMemoryHandle& result);
    public static SafeMemoryHandle Wrap(IntPtr Win32Pointer);
}
internal class MS.Internal.PrintWin32Thunk.XpsPrintStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static XpsPrintStream CreateXpsPrintStream();
    protected virtual void Dispose(bool A_0);
    public virtual void Flush();
    public IStream GetManagedIStream();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[FlagsAttribute]
public enum System.Printing.EnumeratedPrintQueueTypes : Enum {
    public int value__;
    public static EnumeratedPrintQueueTypes Connections;
    public static EnumeratedPrintQueueTypes DirectPrinting;
    public static EnumeratedPrintQueueTypes EnableBidi;
    public static EnumeratedPrintQueueTypes EnableDevQuery;
    public static EnumeratedPrintQueueTypes Fax;
    public static EnumeratedPrintQueueTypes KeepPrintedJobs;
    public static EnumeratedPrintQueueTypes Local;
    public static EnumeratedPrintQueueTypes PublishedInDirectoryServices;
    public static EnumeratedPrintQueueTypes PushedMachineConnection;
    public static EnumeratedPrintQueueTypes PushedUserConnection;
    public static EnumeratedPrintQueueTypes Queued;
    public static EnumeratedPrintQueueTypes RawOnly;
    public static EnumeratedPrintQueueTypes Shared;
    public static EnumeratedPrintQueueTypes TerminalServer;
    public static EnumeratedPrintQueueTypes WorkOffline;
}
internal interface System.Printing.ILegacyDevice {
    public abstract virtual int StartDocument(string printerName, string jobName, string filename, Byte[] deviceMode);
    public abstract virtual void StartDocumentWithoutCreatingDC(string printerName, string jobName, string filename);
    public abstract virtual void EndDocument();
    public abstract virtual void CreateDeviceContext(string printerName, string jobName, Byte[] deviceMode);
    public abstract virtual void DeleteDeviceContext();
    public abstract virtual string ExtEscGetName();
    public abstract virtual bool ExtEscMXDWPassThru();
    public abstract virtual void StartPage(Byte[] deviceMode, int rasterizationDPI);
    public abstract virtual void EndPage();
    public abstract virtual void PopTransform();
    public abstract virtual void PopClip();
    public abstract virtual void PushClip(Geometry clipGeometry);
    public abstract virtual void PushTransform(Matrix transform);
    public abstract virtual void DrawGeometry(Brush brush, Pen pen, Brush strokeBrush, Geometry geometry);
    public abstract virtual void DrawImage(BitmapSource source, Byte[] buffer, Rect rect);
    public abstract virtual void DrawGlyphRun(Brush brush, GlyphRun glyphRun);
    public abstract virtual void Comment(string message);
}
public class System.Printing.IndexedProperties.PrintBooleanProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintBooleanProperty(string attributeName);
    public PrintBooleanProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static bool op_Implicit(PrintBooleanProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintByteArrayProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintByteArrayProperty(string attributeName);
    public PrintByteArrayProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static Byte[] op_Implicit(PrintByteArrayProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintDateTimeProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintDateTimeProperty(string attributeName);
    public PrintDateTimeProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static ValueType op_Implicit(PrintDateTimeProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintDriverProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintDriverProperty(string attributeName);
    public PrintDriverProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintDriver op_Implicit(PrintDriverProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintInt32Property : PrintProperty {
    public object Value { get; public set; }
    public PrintInt32Property(string attributeName);
    public PrintInt32Property(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static int op_Implicit(PrintInt32Property attribRef);
}
public class System.Printing.IndexedProperties.PrintJobPriorityProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintJobPriorityProperty(string attributeName);
    public PrintJobPriorityProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintJobPriority op_Implicit(PrintJobPriorityProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintJobStatusProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintJobStatusProperty(string attributeName);
    public PrintJobStatusProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintJobStatus op_Implicit(PrintJobStatusProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintPortProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintPortProperty(string attributeName);
    public PrintPortProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintPort op_Implicit(PrintPortProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintProcessorProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintProcessorProperty(string attributeName);
    public PrintProcessorProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintProcessor op_Implicit(PrintProcessorProperty attribRef);
}
public abstract class System.Printing.IndexedProperties.PrintProperty : object {
    protected bool IsDisposed { get; protected set; }
    protected internal bool IsInitialized { get; protected set; }
    public string Name { get; }
    public object Value { get; public set; }
    protected PrintProperty(string attributeName);
    protected bool get_IsDisposed();
    protected void set_IsDisposed(bool value);
    protected internal bool get_IsInitialized();
    protected void set_IsInitialized(bool value);
    public virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool A_0);
    protected virtual override void Finalize();
    protected virtual void InternalDispose(bool disposing);
    public virtual void OnDeserialization(object sender);
}
[DefaultMemberAttribute("Property")]
public class System.Printing.IndexedProperties.PrintPropertyDictionary : Hashtable {
    protected PrintPropertyDictionary(SerializationInfo info, StreamingContext context);
    public void Add(PrintProperty attributeValue);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool A_0);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PrintProperty GetProperty(string attribName);
    public virtual void OnDeserialization(object sender);
    public void SetProperty(string attribName, PrintProperty attribValue);
}
public class System.Printing.IndexedProperties.PrintQueueAttributeProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintQueueAttributeProperty(string attributeName);
    public PrintQueueAttributeProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintQueueAttributes op_Implicit(PrintQueueAttributeProperty attributeRef);
}
public class System.Printing.IndexedProperties.PrintQueueProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintQueueProperty(string attributeName);
    public PrintQueueProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintQueue op_Implicit(PrintQueueProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintQueueStatusProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintQueueStatusProperty(string attributeName);
    public PrintQueueStatusProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintQueueStatus op_Implicit(PrintQueueStatusProperty attributeRef);
}
public class System.Printing.IndexedProperties.PrintServerLoggingProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintServerLoggingProperty(string attributeName);
    public PrintServerLoggingProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintServerEventLoggingTypes op_Implicit(PrintServerLoggingProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintServerProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintServerProperty(string attributeName);
    public PrintServerProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintServer op_Implicit(PrintServerProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintStreamProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintStreamProperty(string attributeName);
    public PrintStreamProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static Stream op_Implicit(PrintStreamProperty attributeRef);
}
public class System.Printing.IndexedProperties.PrintStringProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintStringProperty(string attributeName);
    public PrintStringProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static string op_Implicit(PrintStringProperty attributeRef);
}
public class System.Printing.IndexedProperties.PrintSystemTypeProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintSystemTypeProperty(string attributeName);
    public PrintSystemTypeProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static Type op_Implicit(PrintSystemTypeProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintThreadPriorityProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintThreadPriorityProperty(string attributeName);
    public PrintThreadPriorityProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static ThreadPriority op_Implicit(PrintThreadPriorityProperty attribRef);
}
public class System.Printing.IndexedProperties.PrintTicketProperty : PrintProperty {
    public object Value { get; public set; }
    public PrintTicketProperty(string attributeName);
    public PrintTicketProperty(string attributeName, object attributeValue);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    protected sealed virtual void InternalDispose(bool disposing);
    public static PrintTicket op_Implicit(PrintTicketProperty attribRef);
}
public class System.Printing.LocalPrintServer : PrintServer {
    public PrintQueue DefaultPrintQueue { get; public set; }
    public LocalPrintServer(LocalPrintServerIndexedProperty[] propertiesFilter);
    public LocalPrintServer(LocalPrintServerIndexedProperty[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public LocalPrintServer(PrintSystemDesiredAccess desiredAccess);
    public LocalPrintServer(String[] propertiesFilter);
    public LocalPrintServer(String[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue get_DefaultPrintQueue();
    public void set_DefaultPrintQueue(PrintQueue value);
    public sealed virtual void Commit();
    public bool ConnectToPrintQueue(PrintQueue printer);
    public bool ConnectToPrintQueue(string printQueuePath);
    public bool DisconnectFromPrintQueue(PrintQueue printer);
    public bool DisconnectFromPrintQueue(string printQueuePath);
    public static PrintQueue GetDefaultPrintQueue();
    public sealed virtual void Refresh();
}
public enum System.Printing.LocalPrintServerIndexedProperty : Enum {
    public int value__;
    public static LocalPrintServerIndexedProperty BeepEnabled;
    public static LocalPrintServerIndexedProperty DefaultPortThreadPriority;
    public static LocalPrintServerIndexedProperty DefaultPrintQueue;
    public static LocalPrintServerIndexedProperty DefaultSchedulerPriority;
    public static LocalPrintServerIndexedProperty DefaultSpoolDirectory;
    public static LocalPrintServerIndexedProperty EventLog;
    public static LocalPrintServerIndexedProperty MajorVersion;
    public static LocalPrintServerIndexedProperty MinorVersion;
    public static LocalPrintServerIndexedProperty NetPopup;
    public static LocalPrintServerIndexedProperty PortThreadPriority;
    public static LocalPrintServerIndexedProperty RestartJobOnPoolEnabled;
    public static LocalPrintServerIndexedProperty RestartJobOnPoolTimeout;
    public static LocalPrintServerIndexedProperty SchedulerPriority;
}
public class System.Printing.PrintDocumentImageableArea : object {
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double MediaSizeHeight { get; }
    public double MediaSizeWidth { get; }
    public double OriginHeight { get; }
    public double OriginWidth { get; }
    public double get_ExtentHeight();
    public double get_ExtentWidth();
    public double get_MediaSizeHeight();
    public double get_MediaSizeWidth();
    public double get_OriginHeight();
    public double get_OriginWidth();
}
public class System.Printing.PrintDriver : PrintFilter {
    public sealed virtual void Commit();
    protected sealed virtual void InternalDispose(bool disposing);
    public sealed virtual void Refresh();
}
public abstract class System.Printing.PrintFilter : PrintSystemObject {
    protected virtual void InternalDispose(bool disposing);
}
public class System.Printing.PrintJobInfoCollection : PrintSystemObjects {
    public PrintJobInfoCollection(PrintQueue printQueue, String[] propertyFilter);
    public void Add(PrintSystemJobInfo printObject);
    protected virtual void Dispose(bool A_0);
    public virtual IEnumerator`1<PrintSystemJobInfo> GetEnumerator();
    public virtual IEnumerator GetNonGenericEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Printing.PrintJobPriority : Enum {
    public int value__;
    public static PrintJobPriority Default;
    public static PrintJobPriority Maximum;
    public static PrintJobPriority Minimum;
    public static PrintJobPriority None;
}
public class System.Printing.PrintJobSettings : object {
    public PrintTicket CurrentPrintTicket { get; public set; }
    public string Description { get; public set; }
    public PrintTicket get_CurrentPrintTicket();
    public void set_CurrentPrintTicket(PrintTicket value);
    public string get_Description();
    public void set_Description(string value);
}
[FlagsAttribute]
public enum System.Printing.PrintJobStatus : Enum {
    public int value__;
    public static PrintJobStatus Blocked;
    public static PrintJobStatus Completed;
    public static PrintJobStatus Deleted;
    public static PrintJobStatus Deleting;
    public static PrintJobStatus Error;
    public static PrintJobStatus None;
    public static PrintJobStatus Offline;
    public static PrintJobStatus PaperOut;
    public static PrintJobStatus Paused;
    public static PrintJobStatus Printed;
    public static PrintJobStatus Printing;
    public static PrintJobStatus Restarted;
    public static PrintJobStatus Retained;
    public static PrintJobStatus Spooling;
    public static PrintJobStatus UserIntervention;
}
public enum System.Printing.PrintJobType : Enum {
    public int value__;
    public static PrintJobType Legacy;
    public static PrintJobType None;
    public static PrintJobType Xps;
}
public class System.Printing.PrintPort : PrintSystemObject {
    public sealed virtual void Commit();
    protected sealed virtual void InternalDispose(bool disposing);
    public sealed virtual void Refresh();
}
public class System.Printing.PrintProcessor : PrintFilter {
    public sealed virtual void Commit();
    protected sealed virtual void InternalDispose(bool disposing);
    public sealed virtual void Refresh();
}
public class System.Printing.PrintQueue : PrintSystemObject {
    public int AveragePagesPerMinute { get; }
    public int ClientPrintSchemaVersion { get; }
    public string Comment { get; public set; }
    public PrintJobSettings CurrentJobSettings { get; }
    public PrintTicket DefaultPrintTicket { get; public set; }
    public int DefaultPriority { get; public set; }
    public string Description { get; }
    public string FullName { get; }
    public bool HasPaperProblem { get; }
    public bool HasToner { get; }
    public PrintServer HostingPrintServer { get; protected set; }
    public bool InPartialTrust { get; public set; }
    public bool IsBidiEnabled { get; }
    public bool IsBusy { get; }
    public bool IsDevQueryEnabled { get; }
    public bool IsDirect { get; }
    public bool IsDoorOpened { get; }
    public bool IsHidden { get; }
    public bool IsInError { get; }
    public bool IsInitializing { get; }
    public bool IsIOActive { get; }
    public bool IsManualFeedRequired { get; }
    public bool IsNotAvailable { get; }
    public bool IsOffline { get; }
    public bool IsOutOfMemory { get; }
    public bool IsOutOfPaper { get; }
    public bool IsOutputBinFull { get; }
    public bool IsPaperJammed { get; }
    public bool IsPaused { get; }
    public bool IsPendingDeletion { get; }
    public bool IsPowerSaveOn { get; }
    public bool IsPrinting { get; }
    public bool IsProcessing { get; }
    public bool IsPublished { get; }
    public bool IsQueued { get; }
    public bool IsRawOnlyEnabled { get; }
    public bool IsServerUnknown { get; }
    public bool IsShared { get; }
    public bool IsTonerLow { get; }
    public bool IsWaiting { get; }
    public bool IsWarmingUp { get; }
    public bool IsXpsDevice { get; }
    public bool KeepPrintedJobs { get; }
    public string Location { get; public set; }
    public static int MaxPrintSchemaVersion { get; }
    public string Name { get; internal set; }
    public bool NeedUserIntervention { get; }
    public int NumberOfJobs { get; }
    public bool PagePunt { get; }
    public bool PrintingIsCancelled { get; public set; }
    public int Priority { get; public set; }
    public PrintQueueAttributes QueueAttributes { get; }
    public PrintDriver QueueDriver { get; public set; }
    public PrintPort QueuePort { get; public set; }
    public PrintProcessor QueuePrintProcessor { get; public set; }
    public PrintQueueStatus QueueStatus { get; }
    public bool ScheduleCompletedJobsFirst { get; }
    public string SeparatorFile { get; public set; }
    public string ShareName { get; public set; }
    public int StartTimeOfDay { get; public set; }
    public int UntilTimeOfDay { get; public set; }
    public PrintTicket UserPrintTicket { get; public set; }
    unknown IXpsOMPackageWriter XpsOMPackageWriter {internal set; }
    public PrintQueue(PrintServer printServer, string printQueueName);
    public PrintQueue(PrintServer printServer, string printQueueName, int printSchemaVersion);
    public PrintQueue(PrintServer printServer, string printQueueName, int printSchemaVersion, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, PrintQueueIndexedProperty[] propertyFilter);
    public PrintQueue(PrintServer printServer, string printQueueName, PrintQueueIndexedProperty[] propertyFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, PrintSystemDesiredAccess desiredAccess);
    public PrintQueue(PrintServer printServer, string printQueueName, String[] propertyFilter);
    public PrintQueue(PrintServer printServer, string printQueueName, String[] propertyFilter, PrintSystemDesiredAccess desiredAccess);
    public virtual int get_AveragePagesPerMinute();
    public int get_ClientPrintSchemaVersion();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public PrintJobSettings get_CurrentJobSettings();
    public virtual PrintTicket get_DefaultPrintTicket();
    public virtual void set_DefaultPrintTicket(PrintTicket value);
    public virtual int get_DefaultPriority();
    public virtual void set_DefaultPriority(int value);
    public virtual string get_Description();
    public string get_FullName();
    public bool get_HasPaperProblem();
    public bool get_HasToner();
    public virtual PrintServer get_HostingPrintServer();
    protected virtual void set_HostingPrintServer(PrintServer value);
    public bool get_InPartialTrust();
    public void set_InPartialTrust(bool value);
    public bool get_IsBidiEnabled();
    public bool get_IsBusy();
    public bool get_IsDevQueryEnabled();
    public bool get_IsDirect();
    public bool get_IsDoorOpened();
    public bool get_IsHidden();
    public bool get_IsInError();
    public bool get_IsInitializing();
    public bool get_IsIOActive();
    public bool get_IsManualFeedRequired();
    public bool get_IsNotAvailable();
    public bool get_IsOffline();
    public bool get_IsOutOfMemory();
    public bool get_IsOutOfPaper();
    public bool get_IsOutputBinFull();
    public bool get_IsPaperJammed();
    public bool get_IsPaused();
    public bool get_IsPendingDeletion();
    public bool get_IsPowerSaveOn();
    public bool get_IsPrinting();
    public bool get_IsProcessing();
    public bool get_IsPublished();
    public bool get_IsQueued();
    public bool get_IsRawOnlyEnabled();
    public bool get_IsServerUnknown();
    public bool get_IsShared();
    public bool get_IsTonerLow();
    public bool get_IsWaiting();
    public bool get_IsWarmingUp();
    public bool get_IsXpsDevice();
    public bool get_KeepPrintedJobs();
    public virtual string get_Location();
    public virtual void set_Location(string value);
    public static int get_MaxPrintSchemaVersion();
    public sealed virtual string get_Name();
    internal sealed virtual void set_Name(string value);
    public bool get_NeedUserIntervention();
    public virtual int get_NumberOfJobs();
    public bool get_PagePunt();
    public bool get_PrintingIsCancelled();
    public void set_PrintingIsCancelled(bool value);
    public virtual int get_Priority();
    public virtual void set_Priority(int value);
    public PrintQueueAttributes get_QueueAttributes();
    public virtual PrintDriver get_QueueDriver();
    public virtual void set_QueueDriver(PrintDriver value);
    public virtual PrintPort get_QueuePort();
    public virtual void set_QueuePort(PrintPort value);
    public virtual PrintProcessor get_QueuePrintProcessor();
    public virtual void set_QueuePrintProcessor(PrintProcessor value);
    public PrintQueueStatus get_QueueStatus();
    public bool get_ScheduleCompletedJobsFirst();
    public virtual string get_SeparatorFile();
    public virtual void set_SeparatorFile(string value);
    public virtual string get_ShareName();
    public virtual void set_ShareName(string value);
    public virtual int get_StartTimeOfDay();
    public virtual void set_StartTimeOfDay(int value);
    public virtual int get_UntilTimeOfDay();
    public virtual void set_UntilTimeOfDay(int value);
    public virtual PrintTicket get_UserPrintTicket();
    public virtual void set_UserPrintTicket(PrintTicket value);
    public PrintSystemJobInfo AddJob();
    public PrintSystemJobInfo AddJob(string jobName);
    public PrintSystemJobInfo AddJob(string jobName, PrintTicket printTicket);
    public PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy);
    public PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, PrintTicket printTicket);
    public virtual void Commit();
    public static XpsDocumentWriter CreateXpsDocumentWriter(Double& width, Double& height);
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintDocumentImageableArea& documentImageableArea);
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintDocumentImageableArea& documentImageableArea, PageRangeSelection& pageRangeSelection, PageRange& pageRange);
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintQueue printQueue);
    public static XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, PrintDocumentImageableArea& documentImageableArea);
    public static XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, PrintDocumentImageableArea& documentImageableArea, PageRangeSelection& pageRangeSelection, PageRange& pageRange);
    public PrintSystemJobInfo GetJob(int jobId);
    public PrintCapabilities GetPrintCapabilities();
    public PrintCapabilities GetPrintCapabilities(PrintTicket printTicket);
    public MemoryStream GetPrintCapabilitiesAsXml();
    public MemoryStream GetPrintCapabilitiesAsXml(PrintTicket printTicket);
    public PrintJobInfoCollection GetPrintJobInfoCollection();
    protected sealed virtual void InternalDispose(bool disposing);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket, PrintTicketScope scope);
    public virtual void Pause();
    public virtual void Purge();
    public virtual void Refresh();
    public virtual void Resume();
    internal void set_XpsOMPackageWriter(IXpsOMPackageWriter value);
    internal static UInt32 GetDpiX(ILegacyDevice legacyDevice);
    internal static UInt32 GetDpiY(ILegacyDevice legacyDevice);
    internal ILegacyDevice GetLegacyDevice();
}
[FlagsAttribute]
public enum System.Printing.PrintQueueAttributes : Enum {
    public int value__;
    public static PrintQueueAttributes Direct;
    public static PrintQueueAttributes EnableBidi;
    public static PrintQueueAttributes EnableDevQuery;
    public static PrintQueueAttributes Hidden;
    public static PrintQueueAttributes KeepPrintedJobs;
    public static PrintQueueAttributes None;
    public static PrintQueueAttributes Published;
    public static PrintQueueAttributes Queued;
    public static PrintQueueAttributes RawOnly;
    public static PrintQueueAttributes ScheduleCompletedJobsFirst;
    public static PrintQueueAttributes Shared;
}
public class System.Printing.PrintQueueCollection : PrintSystemObjects {
    public static object SyncRoot { get; }
    public PrintQueueCollection(PrintServer printServer, String[] propertyFilter);
    public PrintQueueCollection(PrintServer printServer, String[] propertyFilter, EnumeratedPrintQueueTypes[] enumerationFlag);
    public static object get_SyncRoot();
    public void Add(PrintQueue printObject);
    protected virtual void Dispose(bool A_0);
    public virtual IEnumerator`1<PrintQueue> GetEnumerator();
    public virtual IEnumerator GetNonGenericEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Printing.PrintQueueIndexedProperty : Enum {
    public int value__;
    public static PrintQueueIndexedProperty AveragePagesPerMinute;
    public static PrintQueueIndexedProperty Comment;
    public static PrintQueueIndexedProperty DefaultPrintTicket;
    public static PrintQueueIndexedProperty DefaultPriority;
    public static PrintQueueIndexedProperty Description;
    public static PrintQueueIndexedProperty HostingPrintServer;
    public static PrintQueueIndexedProperty Location;
    public static PrintQueueIndexedProperty Name;
    public static PrintQueueIndexedProperty NumberOfJobs;
    public static PrintQueueIndexedProperty Priority;
    public static PrintQueueIndexedProperty QueueAttributes;
    public static PrintQueueIndexedProperty QueueDriver;
    public static PrintQueueIndexedProperty QueuePort;
    public static PrintQueueIndexedProperty QueuePrintProcessor;
    public static PrintQueueIndexedProperty QueueStatus;
    public static PrintQueueIndexedProperty SeparatorFile;
    public static PrintQueueIndexedProperty ShareName;
    public static PrintQueueIndexedProperty StartTimeOfDay;
    public static PrintQueueIndexedProperty UntilTimeOfDay;
    public static PrintQueueIndexedProperty UserPrintTicket;
}
[FlagsAttribute]
public enum System.Printing.PrintQueueStatus : Enum {
    public int value__;
    public static PrintQueueStatus Busy;
    public static PrintQueueStatus DoorOpen;
    public static PrintQueueStatus Error;
    public static PrintQueueStatus Initializing;
    public static PrintQueueStatus IOActive;
    public static PrintQueueStatus ManualFeed;
    public static PrintQueueStatus None;
    public static PrintQueueStatus NotAvailable;
    public static PrintQueueStatus NoToner;
    public static PrintQueueStatus Offline;
    public static PrintQueueStatus OutOfMemory;
    public static PrintQueueStatus OutputBinFull;
    public static PrintQueueStatus PagePunt;
    public static PrintQueueStatus PaperJam;
    public static PrintQueueStatus PaperOut;
    public static PrintQueueStatus PaperProblem;
    public static PrintQueueStatus Paused;
    public static PrintQueueStatus PendingDeletion;
    public static PrintQueueStatus PowerSave;
    public static PrintQueueStatus Printing;
    public static PrintQueueStatus Processing;
    public static PrintQueueStatus ServerUnknown;
    public static PrintQueueStatus TonerLow;
    public static PrintQueueStatus UserIntervention;
    public static PrintQueueStatus Waiting;
    public static PrintQueueStatus WarmingUp;
}
public class System.Printing.PrintQueueStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public int JobIdentifier { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PrintQueueStream(PrintQueue printQueue, string printJobName);
    public PrintQueueStream(PrintQueue printQueue, string printJobName, bool commitDataOnClose);
    public PrintQueueStream(PrintQueue printQueue, string printJobName, bool commitDataOnClose, PrintTicket printTicket);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public int get_JobIdentifier();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Close();
    protected virtual void Dispose(bool A_0);
    public virtual void EndWrite(IAsyncResult asyncResult);
    protected virtual override void Finalize();
    public virtual void Flush();
    public void HandlePackagingProgressEvent(object sender, PackagingProgressEventArgs e);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class System.Printing.PrintQueueStringProperty : object {
    public string Name { get; public set; }
    public PrintQueueStringPropertyType Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public PrintQueueStringPropertyType get_Type();
    public void set_Type(PrintQueueStringPropertyType value);
}
public enum System.Printing.PrintQueueStringPropertyType : Enum {
    public int value__;
    public static PrintQueueStringPropertyType Comment;
    public static PrintQueueStringPropertyType Location;
    public static PrintQueueStringPropertyType ShareName;
}
public class System.Printing.PrintServer : PrintSystemObject {
    public bool BeepEnabled { get; public set; }
    public ThreadPriority DefaultPortThreadPriority { get; }
    public ThreadPriority DefaultSchedulerPriority { get; }
    public string DefaultSpoolDirectory { get; public set; }
    public PrintServerEventLoggingTypes EventLog { get; public set; }
    protected bool IsDelayInitialized { get; protected set; }
    public int MajorVersion { get; }
    public int MinorVersion { get; }
    public string Name { get; internal set; }
    public bool NetPopup { get; public set; }
    public ThreadPriority PortThreadPriority { get; public set; }
    public bool RestartJobOnPoolEnabled { get; public set; }
    public int RestartJobOnPoolTimeout { get; public set; }
    public ThreadPriority SchedulerPriority { get; public set; }
    public byte SubSystemVersion { get; }
    public PrintServer(PrintSystemDesiredAccess desiredAccess);
    public PrintServer(string path);
    public PrintServer(string path, PrintServerIndexedProperty[] propertiesFilter);
    public PrintServer(string path, PrintServerIndexedProperty[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public PrintServer(string path, PrintSystemDesiredAccess desiredAccess);
    public PrintServer(string path, String[] propertiesFilter);
    public PrintServer(string path, String[] propertiesFilter, PrintSystemDesiredAccess desiredAccess);
    public bool get_BeepEnabled();
    public void set_BeepEnabled(bool value);
    public ThreadPriority get_DefaultPortThreadPriority();
    public ThreadPriority get_DefaultSchedulerPriority();
    public string get_DefaultSpoolDirectory();
    public void set_DefaultSpoolDirectory(string value);
    public PrintServerEventLoggingTypes get_EventLog();
    public void set_EventLog(PrintServerEventLoggingTypes value);
    protected bool get_IsDelayInitialized();
    protected void set_IsDelayInitialized(bool value);
    public int get_MajorVersion();
    public int get_MinorVersion();
    public sealed virtual string get_Name();
    public bool get_NetPopup();
    public void set_NetPopup(bool value);
    public ThreadPriority get_PortThreadPriority();
    public void set_PortThreadPriority(ThreadPriority value);
    public bool get_RestartJobOnPoolEnabled();
    public void set_RestartJobOnPoolEnabled(bool value);
    public int get_RestartJobOnPoolTimeout();
    public void set_RestartJobOnPoolTimeout(int value);
    public ThreadPriority get_SchedulerPriority();
    public void set_SchedulerPriority(ThreadPriority value);
    public byte get_SubSystemVersion();
    public virtual void Commit();
    public static bool DeletePrintQueue(PrintQueue printQueue);
    public static bool DeletePrintQueue(string printQueueName);
    public PrintQueue GetPrintQueue(string printQueueName);
    public PrintQueue GetPrintQueue(string printQueueName, String[] propertiesFilter);
    public PrintQueueCollection GetPrintQueues();
    public PrintQueueCollection GetPrintQueues(EnumeratedPrintQueueTypes[] enumerationFlag);
    public PrintQueueCollection GetPrintQueues(PrintQueueIndexedProperty[] propertiesFilter);
    public PrintQueueCollection GetPrintQueues(PrintQueueIndexedProperty[] propertiesFilter, EnumeratedPrintQueueTypes[] enumerationFlag);
    public PrintQueueCollection GetPrintQueues(String[] propertiesFilter);
    public PrintQueueCollection GetPrintQueues(String[] propertiesFilter, EnumeratedPrintQueueTypes[] enumerationFlag);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintPropertyDictionary initialParameters);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes, PrintQueueStringProperty printQueueProperty, int printQueuePriority, int printQueueDefaultPriority);
    public PrintQueue InstallPrintQueue(string printQueueName, string driverName, String[] portNames, string printProcessorName, PrintQueueAttributes printQueueAttributes, string printQueueShareName, string printQueueComment, string printQueueLocation, string printQueueSeparatorFile, int printQueuePriority, int printQueueDefaultPriority);
    protected sealed virtual void InternalDispose(bool disposing);
    public virtual void Refresh();
    internal sealed virtual void set_Name(string value);
}
[FlagsAttribute]
public enum System.Printing.PrintServerEventLoggingTypes : Enum {
    public int value__;
    public static PrintServerEventLoggingTypes LogAllPrintingEvents;
    public static PrintServerEventLoggingTypes LogPrintingErrorEvents;
    public static PrintServerEventLoggingTypes LogPrintingInformationEvents;
    public static PrintServerEventLoggingTypes LogPrintingSuccessEvents;
    public static PrintServerEventLoggingTypes LogPrintingWarningEvents;
    public static PrintServerEventLoggingTypes None;
}
public enum System.Printing.PrintServerIndexedProperty : Enum {
    public int value__;
    public static PrintServerIndexedProperty BeepEnabled;
    public static PrintServerIndexedProperty DefaultPortThreadPriority;
    public static PrintServerIndexedProperty DefaultSchedulerPriority;
    public static PrintServerIndexedProperty DefaultSpoolDirectory;
    public static PrintServerIndexedProperty EventLog;
    public static PrintServerIndexedProperty MajorVersion;
    public static PrintServerIndexedProperty MinorVersion;
    public static PrintServerIndexedProperty NetPopup;
    public static PrintServerIndexedProperty PortThreadPriority;
    public static PrintServerIndexedProperty RestartJobOnPoolEnabled;
    public static PrintServerIndexedProperty RestartJobOnPoolTimeout;
    public static PrintServerIndexedProperty SchedulerPriority;
}
public enum System.Printing.PrintSystemDesiredAccess : Enum {
    public int value__;
    public static PrintSystemDesiredAccess AdministratePrinter;
    public static PrintSystemDesiredAccess AdministrateServer;
    public static PrintSystemDesiredAccess EnumerateServer;
    public static PrintSystemDesiredAccess None;
    public static PrintSystemDesiredAccess UsePrinter;
}
internal class System.Printing.PrintSystemDispatcherObject : DispatcherObject {
    public void VerifyThreadLocality();
}
public class System.Printing.PrintSystemJobInfo : PrintSystemObject {
    public PrintQueue HostingPrintQueue { get; }
    public PrintServer HostingPrintServer { get; }
    public bool IsBlocked { get; }
    public bool IsCompleted { get; }
    public bool IsDeleted { get; }
    public bool IsDeleting { get; }
    public bool IsInError { get; }
    public bool IsOffline { get; }
    public bool IsPaperOut { get; }
    public bool IsPaused { get; }
    public bool IsPrinted { get; }
    public bool IsPrinting { get; }
    public bool IsRestarted { get; }
    public bool IsRetained { get; }
    public bool IsSpooling { get; }
    public bool IsUserInterventionRequired { get; }
    public int JobIdentifier { get; }
    public string JobName { get; public set; }
    public int JobSize { get; }
    public PrintJobStatus JobStatus { get; }
    public Stream JobStream { get; }
    public int NumberOfPages { get; }
    public int NumberOfPagesPrinted { get; }
    public int PositionInPrintQueue { get; }
    public PrintJobPriority Priority { get; }
    public int StartTimeOfDay { get; }
    public string Submitter { get; }
    public DateTime TimeJobSubmitted { get; }
    public int TimeSinceStartedPrinting { get; }
    public int UntilTimeOfDay { get; }
    public PrintQueue get_HostingPrintQueue();
    public PrintServer get_HostingPrintServer();
    public bool get_IsBlocked();
    public bool get_IsCompleted();
    public bool get_IsDeleted();
    public bool get_IsDeleting();
    public bool get_IsInError();
    public bool get_IsOffline();
    public bool get_IsPaperOut();
    public bool get_IsPaused();
    public bool get_IsPrinted();
    public bool get_IsPrinting();
    public bool get_IsRestarted();
    public bool get_IsRetained();
    public bool get_IsSpooling();
    public bool get_IsUserInterventionRequired();
    public int get_JobIdentifier();
    public string get_JobName();
    public void set_JobName(string value);
    public int get_JobSize();
    public PrintJobStatus get_JobStatus();
    public Stream get_JobStream();
    public int get_NumberOfPages();
    public int get_NumberOfPagesPrinted();
    public int get_PositionInPrintQueue();
    public PrintJobPriority get_Priority();
    public int get_StartTimeOfDay();
    public string get_Submitter();
    public DateTime get_TimeJobSubmitted();
    public int get_TimeSinceStartedPrinting();
    public int get_UntilTimeOfDay();
    public void Cancel();
    public virtual void Commit();
    public static PrintSystemJobInfo Get(PrintQueue printQueue, int jobIdentifier);
    protected sealed virtual void InternalDispose(bool disposing);
    public void Pause();
    public virtual void Refresh();
    public void Restart();
    public void Resume();
}
public abstract class System.Printing.PrintSystemObject : object {
    protected bool IsDisposed { get; protected set; }
    public string Name { get; internal set; }
    public PrintSystemObject Parent { get; }
    public PrintPropertyDictionary PropertiesCollection { get; }
    protected PrintSystemObject(PrintSystemObjectLoadMode mode);
    protected bool get_IsDisposed();
    protected void set_IsDisposed(bool value);
    public virtual string get_Name();
    internal virtual void set_Name(string value);
    public virtual PrintSystemObject get_Parent();
    public PrintPropertyDictionary get_PropertiesCollection();
    protected static String[] BaseAttributeNames();
    public abstract virtual void Commit();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool A_0);
    protected virtual override void Finalize();
    protected void Initialize();
    protected virtual void InternalDispose(bool disposing);
    public abstract virtual void Refresh();
}
public enum System.Printing.PrintSystemObjectLoadMode : Enum {
    public int value__;
    public static PrintSystemObjectLoadMode LoadInitialized;
    public static PrintSystemObjectLoadMode LoadUninitialized;
    public static PrintSystemObjectLoadMode None;
}
public class System.Printing.PrintSystemObjectPropertiesChangedEventArgs : EventArgs {
    public StringCollection PropertiesNames { get; }
    public PrintSystemObjectPropertiesChangedEventArgs(StringCollection events);
    public StringCollection get_PropertiesNames();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool A_0);
}
public class System.Printing.PrintSystemObjectPropertyChangedEventArgs : EventArgs {
    public string PropertyName { get; }
    public PrintSystemObjectPropertyChangedEventArgs(string eventName);
    public string get_PropertyName();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool A_0);
}
public abstract class System.Printing.PrintSystemObjects : object {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool A_0);
}
public class System.Windows.Xps.VisualsToXpsDocument : SerializerWriterCollator {
    public virtual void BeginBatchWrite();
    public virtual void Cancel();
    public virtual void CancelAsync();
    public virtual void EndBatchWrite();
    public virtual void Write(Visual visual);
    public virtual void Write(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual);
    public virtual void WriteAsync(Visual visual, object userSuppliedState);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userSuppliedState);
}
public enum System.Windows.Xps.XpsDocumentNotificationLevel : Enum {
    public int value__;
    public static XpsDocumentNotificationLevel None;
    public static XpsDocumentNotificationLevel ReceiveNotificationDisabled;
    public static XpsDocumentNotificationLevel ReceiveNotificationEnabled;
}
public class System.Windows.Xps.XpsDocumentWriter : SerializerWriter {
    internal XpsDocumentWriter(PrintQueue printQueue);
    internal XpsDocumentWriter(XpsDocument document);
    public virtual void add_WritingCancelled(WritingCancelledEventHandler value);
    public virtual void remove_WritingCancelled(WritingCancelledEventHandler value);
    public virtual void add_WritingCompleted(WritingCompletedEventHandler value);
    public virtual void remove_WritingCompleted(WritingCompletedEventHandler value);
    public virtual void add_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    public virtual void remove_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    public virtual void add_WritingProgressChanged(WritingProgressChangedEventHandler value);
    public virtual void remove_WritingProgressChanged(WritingProgressChangedEventHandler value);
    public virtual void CancelAsync();
    public virtual SerializerWriterCollator CreateVisualsCollator();
    public virtual SerializerWriterCollator CreateVisualsCollator(PrintTicket documentSequencePrintTicket, PrintTicket documentPrintTicket);
    public virtual void raise_WritingCancelled(object sender, WritingCancelledEventArgs args);
    public virtual void raise_WritingCompleted(object sender, WritingCompletedEventArgs e);
    public virtual void raise_WritingPrintTicketRequired(object sender, WritingPrintTicketRequiredEventArgs e);
    public virtual void raise_WritingProgressChanged(object sender, WritingProgressChangedEventArgs e);
    public void Write(string documentPath);
    public void Write(string documentPath, XpsDocumentNotificationLevel notificationLevel);
    public virtual void Write(DocumentPaginator documentPaginator);
    public virtual void Write(DocumentPaginator documentPaginator, PrintTicket printTicket);
    public virtual void Write(FixedDocument fixedDocument);
    public virtual void Write(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void Write(FixedPage fixedPage);
    public virtual void Write(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void Write(Visual visual);
    public virtual void Write(Visual visual, PrintTicket printTicket);
    public void WriteAsync(string documentPath);
    public void WriteAsync(string documentPath, XpsDocumentNotificationLevel notificationLevel);
    public virtual void WriteAsync(DocumentPaginator documentPaginator);
    public virtual void WriteAsync(DocumentPaginator documentPaginator, object userSuppliedState);
    public virtual void WriteAsync(DocumentPaginator documentPaginator, PrintTicket printTicket);
    public virtual void WriteAsync(DocumentPaginator documentPaginator, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(FixedDocument fixedDocument);
    public virtual void WriteAsync(FixedDocument fixedDocument, object userSuppliedState);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, object userSuppliedState);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(FixedPage fixedPage);
    public virtual void WriteAsync(FixedPage fixedPage, object userSuppliedState);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket, object userSuppliedState);
    public virtual void WriteAsync(Visual visual);
    public virtual void WriteAsync(Visual visual, object userSuppliedState);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userSuppliedState);
}
public class System.Windows.Xps.XpsWriterException : Exception {
    protected XpsWriterException(SerializationInfo info, StreamingContext context);
    public XpsWriterException(string message);
    public XpsWriterException(string message, Exception innerException);
}
