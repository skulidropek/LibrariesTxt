[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.CryptographicAttributeObject : object {
    public Oid Oid { get; }
    public AsnEncodedDataCollection Values { get; }
    public CryptographicAttributeObject(Oid oid);
    public CryptographicAttributeObject(Oid oid, AsnEncodedDataCollection values);
    public Oid get_Oid();
    public AsnEncodedDataCollection get_Values();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.CryptographicAttributeObjectCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public CryptographicAttributeObject Item { get; }
    public object SyncRoot { get; }
    public CryptographicAttributeObjectCollection(CryptographicAttributeObject attribute);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public CryptographicAttributeObject get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public int Add(AsnEncodedData asnEncodedData);
    public int Add(CryptographicAttributeObject attribute);
    public void CopyTo(CryptographicAttributeObject[] array, int index);
    public CryptographicAttributeObjectEnumerator GetEnumerator();
    public void Remove(CryptographicAttributeObject attribute);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.CryptographicAttributeObjectEnumerator : object {
    public CryptographicAttributeObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CryptographicAttributeObject get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.AlgorithmIdentifier : object {
    public int KeyLength { get; public set; }
    public Oid Oid { get; public set; }
    public Byte[] Parameters { get; public set; }
    public AlgorithmIdentifier(Oid oid);
    public AlgorithmIdentifier(Oid oid, int keyLength);
    public int get_KeyLength();
    public void set_KeyLength(int value);
    public Oid get_Oid();
    public void set_Oid(Oid value);
    public Byte[] get_Parameters();
    public void set_Parameters(Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.CmsRecipient : object {
    public X509Certificate2 Certificate { get; }
    public SubjectIdentifierType RecipientIdentifierType { get; }
    [NullableAttribute("2")]
public RSAEncryptionPadding RSAEncryptionPadding { get; }
    public CmsRecipient(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate);
    public CmsRecipient(X509Certificate2 certificate);
    public CmsRecipient(X509Certificate2 certificate, RSAEncryptionPadding rsaEncryptionPadding);
    public CmsRecipient(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate, RSAEncryptionPadding rsaEncryptionPadding);
    public X509Certificate2 get_Certificate();
    public SubjectIdentifierType get_RecipientIdentifierType();
    [NullableContextAttribute("2")]
public RSAEncryptionPadding get_RSAEncryptionPadding();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.CmsRecipientCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public CmsRecipient Item { get; }
    public object SyncRoot { get; }
    public CmsRecipientCollection(CmsRecipient recipient);
    public CmsRecipientCollection(SubjectIdentifierType recipientIdentifierType, X509Certificate2Collection certificates);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public CmsRecipient get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public int Add(CmsRecipient recipient);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(CmsRecipient[] array, int index);
    public CmsRecipientEnumerator GetEnumerator();
    public void Remove(CmsRecipient recipient);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.CmsRecipientEnumerator : object {
    public CmsRecipient Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CmsRecipient get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.CmsSigner : object {
    public X509Certificate2 Certificate { get; public set; }
    [NullableAttribute("1")]
public X509Certificate2Collection Certificates { get; }
    [NullableAttribute("1")]
public Oid DigestAlgorithm { get; public set; }
    public X509IncludeOption IncludeOption { get; public set; }
    [NullableAttribute("1")]
public CryptographicAttributeObjectCollection SignedAttributes { get; }
    public SubjectIdentifierType SignerIdentifierType { get; public set; }
    [NullableAttribute("1")]
public CryptographicAttributeObjectCollection UnsignedAttributes { get; }
    public AsymmetricAlgorithm PrivateKey { get; public set; }
    public RSASignaturePadding SignaturePadding { get; public set; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("CmsSigner(CspParameters) is obsolete and is not supported. Use an alternative constructor instead.")]
[EditorBrowsableAttribute("1")]
public CmsSigner(CspParameters parameters);
    public CmsSigner(SubjectIdentifierType signerIdentifierType);
    public CmsSigner(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate);
    public CmsSigner(X509Certificate2 certificate);
    public CmsSigner(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate, AsymmetricAlgorithm privateKey);
    public CmsSigner(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate, RSA privateKey, RSASignaturePadding signaturePadding);
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    [NullableContextAttribute("1")]
public X509Certificate2Collection get_Certificates();
    [NullableContextAttribute("1")]
public Oid get_DigestAlgorithm();
    [NullableContextAttribute("1")]
public void set_DigestAlgorithm(Oid value);
    public X509IncludeOption get_IncludeOption();
    public void set_IncludeOption(X509IncludeOption value);
    [NullableContextAttribute("1")]
public CryptographicAttributeObjectCollection get_SignedAttributes();
    public SubjectIdentifierType get_SignerIdentifierType();
    public void set_SignerIdentifierType(SubjectIdentifierType value);
    [NullableContextAttribute("1")]
public CryptographicAttributeObjectCollection get_UnsignedAttributes();
    public AsymmetricAlgorithm get_PrivateKey();
    public void set_PrivateKey(AsymmetricAlgorithm value);
    public RSASignaturePadding get_SignaturePadding();
    public void set_SignaturePadding(RSASignaturePadding value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.ContentInfo : object {
    public Byte[] Content { get; }
    public Oid ContentType { get; }
    public ContentInfo(Byte[] content);
    public ContentInfo(Oid contentType, Byte[] content);
    public Byte[] get_Content();
    public Oid get_ContentType();
    public static Oid GetContentType(Byte[] encodedMessage);
    [NullableContextAttribute("0")]
public static Oid GetContentType(ReadOnlySpan`1<byte> encodedMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.EnvelopedCms : object {
    public X509Certificate2Collection Certificates { get; }
    public AlgorithmIdentifier ContentEncryptionAlgorithm { get; }
    public ContentInfo ContentInfo { get; }
    public RecipientInfoCollection RecipientInfos { get; }
    public CryptographicAttributeObjectCollection UnprotectedAttributes { get; }
    public int Version { get; }
    public EnvelopedCms(ContentInfo contentInfo);
    public EnvelopedCms(ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm);
    public X509Certificate2Collection get_Certificates();
    public AlgorithmIdentifier get_ContentEncryptionAlgorithm();
    public ContentInfo get_ContentInfo();
    public RecipientInfoCollection get_RecipientInfos();
    public CryptographicAttributeObjectCollection get_UnprotectedAttributes();
    public int get_Version();
    public void Decode(Byte[] encodedMessage);
    public void Decrypt();
    public void Decrypt(RecipientInfo recipientInfo);
    public void Decrypt(RecipientInfo recipientInfo, X509Certificate2Collection extraStore);
    public void Decrypt(X509Certificate2Collection extraStore);
    public Byte[] Encode();
    public void Encrypt(CmsRecipient recipient);
    public void Encrypt(CmsRecipientCollection recipients);
    [NullableContextAttribute("0")]
public void Decode(ReadOnlySpan`1<byte> encodedMessage);
    public void Decrypt(RecipientInfo recipientInfo, AsymmetricAlgorithm privateKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo : RecipientInfo {
    public DateTime Date { get; }
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifierOrKey OriginatorIdentifierOrKey { get; }
    [NullableAttribute("2")]
public CryptographicAttributeObject OtherKeyAttribute { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public int Version { get; }
    public DateTime get_Date();
    public virtual Byte[] get_EncryptedKey();
    public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public SubjectIdentifierOrKey get_OriginatorIdentifierOrKey();
    [NullableContextAttribute("2")]
public CryptographicAttributeObject get_OtherKeyAttribute();
    public virtual SubjectIdentifier get_RecipientIdentifier();
    public virtual int get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.KeyTransRecipientInfo : RecipientInfo {
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public int Version { get; }
    public virtual Byte[] get_EncryptedKey();
    public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public virtual SubjectIdentifier get_RecipientIdentifier();
    public virtual int get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs12Builder : object {
    public bool IsSealed { get; }
    public bool get_IsSealed();
    public void AddSafeContentsEncrypted(Pkcs12SafeContents safeContents, Byte[] passwordBytes, PbeParameters pbeParameters);
    public void AddSafeContentsEncrypted(Pkcs12SafeContents safeContents, ReadOnlySpan`1<byte> passwordBytes, PbeParameters pbeParameters);
    public void AddSafeContentsEncrypted(Pkcs12SafeContents safeContents, ReadOnlySpan`1<char> password, PbeParameters pbeParameters);
    public void AddSafeContentsEncrypted(Pkcs12SafeContents safeContents, string password, PbeParameters pbeParameters);
    public void AddSafeContentsUnencrypted(Pkcs12SafeContents safeContents);
    public Byte[] Encode();
    [NullableContextAttribute("0")]
public void SealWithMac(ReadOnlySpan`1<char> password, HashAlgorithmName hashAlgorithm, int iterationCount);
    [NullableContextAttribute("2")]
public void SealWithMac(string password, HashAlgorithmName hashAlgorithm, int iterationCount);
    public void SealWithoutIntegrity();
    [NullableContextAttribute("0")]
public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
}
public class System.Security.Cryptography.Pkcs.Pkcs12CertBag : Pkcs12SafeBag {
    public ReadOnlyMemory`1<byte> EncodedCertificate { get; }
    public bool IsX509Certificate { get; }
    public Pkcs12CertBag(Oid certificateType, ReadOnlyMemory`1<byte> encodedCertificate);
    public ReadOnlyMemory`1<byte> get_EncodedCertificate();
    public bool get_IsX509Certificate();
    [NullableContextAttribute("1")]
public X509Certificate2 GetCertificate();
    [NullableContextAttribute("1")]
public Oid GetCertificateType();
}
public enum System.Security.Cryptography.Pkcs.Pkcs12ConfidentialityMode : Enum {
    public int value__;
    public static Pkcs12ConfidentialityMode None;
    public static Pkcs12ConfidentialityMode Password;
    public static Pkcs12ConfidentialityMode PublicKey;
    public static Pkcs12ConfidentialityMode Unknown;
}
public class System.Security.Cryptography.Pkcs.Pkcs12Info : object {
    [NullableAttribute("1")]
public ReadOnlyCollection`1<Pkcs12SafeContents> AuthenticatedSafe { get; }
    public Pkcs12IntegrityMode IntegrityMode { get; }
    [NullableContextAttribute("1")]
public ReadOnlyCollection`1<Pkcs12SafeContents> get_AuthenticatedSafe();
    public Pkcs12IntegrityMode get_IntegrityMode();
    public static Pkcs12Info Decode(ReadOnlyMemory`1<byte> encodedBytes, Int32& bytesConsumed, bool skipCopy);
    public bool VerifyMac(ReadOnlySpan`1<char> password);
    [NullableContextAttribute("2")]
public bool VerifyMac(string password);
}
public enum System.Security.Cryptography.Pkcs.Pkcs12IntegrityMode : Enum {
    public int value__;
    public static Pkcs12IntegrityMode None;
    public static Pkcs12IntegrityMode Password;
    public static Pkcs12IntegrityMode PublicKey;
    public static Pkcs12IntegrityMode Unknown;
}
public class System.Security.Cryptography.Pkcs.Pkcs12KeyBag : Pkcs12SafeBag {
    public ReadOnlyMemory`1<byte> Pkcs8PrivateKey { get; }
    public Pkcs12KeyBag(ReadOnlyMemory`1<byte> pkcs8PrivateKey, bool skipCopy);
    public ReadOnlyMemory`1<byte> get_Pkcs8PrivateKey();
}
public abstract class System.Security.Cryptography.Pkcs.Pkcs12SafeBag : object {
    [NullableAttribute("1")]
public CryptographicAttributeObjectCollection Attributes { get; }
    public ReadOnlyMemory`1<byte> EncodedBagValue { get; }
    protected Pkcs12SafeBag(string bagIdValue, ReadOnlyMemory`1<byte> encodedBagValue, bool skipCopy);
    [NullableContextAttribute("1")]
public CryptographicAttributeObjectCollection get_Attributes();
    public ReadOnlyMemory`1<byte> get_EncodedBagValue();
    [NullableContextAttribute("1")]
public Byte[] Encode();
    [NullableContextAttribute("1")]
public Oid GetBagId();
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs12SafeContents : object {
    public Pkcs12ConfidentialityMode ConfidentialityMode { get; }
    public bool IsReadOnly { get; }
    public Pkcs12ConfidentialityMode get_ConfidentialityMode();
    public bool get_IsReadOnly();
    public Pkcs12CertBag AddCertificate(X509Certificate2 certificate);
    public Pkcs12KeyBag AddKeyUnencrypted(AsymmetricAlgorithm key);
    public Pkcs12SafeContentsBag AddNestedContents(Pkcs12SafeContents safeContents);
    public void AddSafeBag(Pkcs12SafeBag safeBag);
    public Pkcs12SecretBag AddSecret(Oid secretType, ReadOnlyMemory`1<byte> secretValue);
    public Pkcs12ShroudedKeyBag AddShroudedKey(AsymmetricAlgorithm key, Byte[] passwordBytes, PbeParameters pbeParameters);
    public Pkcs12ShroudedKeyBag AddShroudedKey(AsymmetricAlgorithm key, ReadOnlySpan`1<byte> passwordBytes, PbeParameters pbeParameters);
    public Pkcs12ShroudedKeyBag AddShroudedKey(AsymmetricAlgorithm key, ReadOnlySpan`1<char> password, PbeParameters pbeParameters);
    public Pkcs12ShroudedKeyBag AddShroudedKey(AsymmetricAlgorithm key, string password, PbeParameters pbeParameters);
    [NullableContextAttribute("2")]
public void Decrypt(Byte[] passwordBytes);
    [NullableContextAttribute("0")]
public void Decrypt(ReadOnlySpan`1<byte> passwordBytes);
    [NullableContextAttribute("0")]
public void Decrypt(ReadOnlySpan`1<char> password);
    [NullableContextAttribute("2")]
public void Decrypt(string password);
    public IEnumerable`1<Pkcs12SafeBag> GetBags();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs12SafeContentsBag : Pkcs12SafeBag {
    public Pkcs12SafeContents SafeContents { get; }
    public Pkcs12SafeContents get_SafeContents();
}
public class System.Security.Cryptography.Pkcs.Pkcs12SecretBag : Pkcs12SafeBag {
    public ReadOnlyMemory`1<byte> SecretValue { get; }
    public ReadOnlyMemory`1<byte> get_SecretValue();
    [NullableContextAttribute("1")]
public Oid GetSecretType();
}
public class System.Security.Cryptography.Pkcs.Pkcs12ShroudedKeyBag : Pkcs12SafeBag {
    public ReadOnlyMemory`1<byte> EncryptedPkcs8PrivateKey { get; }
    public Pkcs12ShroudedKeyBag(ReadOnlyMemory`1<byte> encryptedPkcs8PrivateKey, bool skipCopy);
    public ReadOnlyMemory`1<byte> get_EncryptedPkcs8PrivateKey();
}
public class System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo : object {
    [NullableAttribute("1")]
public Oid AlgorithmId { get; }
    public Nullable`1<ReadOnlyMemory`1<byte>> AlgorithmParameters { get; }
    [NullableAttribute("1")]
public CryptographicAttributeObjectCollection Attributes { get; }
    public ReadOnlyMemory`1<byte> PrivateKeyBytes { get; }
    public Pkcs8PrivateKeyInfo(Oid algorithmId, Nullable`1<ReadOnlyMemory`1<byte>> algorithmParameters, ReadOnlyMemory`1<byte> privateKey, bool skipCopies);
    [NullableContextAttribute("1")]
public Oid get_AlgorithmId();
    public Nullable`1<ReadOnlyMemory`1<byte>> get_AlgorithmParameters();
    [NullableContextAttribute("1")]
public CryptographicAttributeObjectCollection get_Attributes();
    public ReadOnlyMemory`1<byte> get_PrivateKeyBytes();
    [NullableContextAttribute("1")]
public static Pkcs8PrivateKeyInfo Create(AsymmetricAlgorithm privateKey);
    public static Pkcs8PrivateKeyInfo Decode(ReadOnlyMemory`1<byte> source, Int32& bytesRead, bool skipCopy);
    public static Pkcs8PrivateKeyInfo DecryptAndDecode(ReadOnlySpan`1<byte> passwordBytes, ReadOnlyMemory`1<byte> source, Int32& bytesRead);
    public static Pkcs8PrivateKeyInfo DecryptAndDecode(ReadOnlySpan`1<char> password, ReadOnlyMemory`1<byte> source, Int32& bytesRead);
    [NullableContextAttribute("1")]
public Byte[] Encode();
    [NullableContextAttribute("1")]
public Byte[] Encrypt(ReadOnlySpan`1<byte> passwordBytes, PbeParameters pbeParameters);
    [NullableContextAttribute("1")]
public Byte[] Encrypt(ReadOnlySpan`1<char> password, PbeParameters pbeParameters);
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
    public bool TryEncrypt(ReadOnlySpan`1<byte> passwordBytes, PbeParameters pbeParameters, Span`1<byte> destination, Int32& bytesWritten);
    public bool TryEncrypt(ReadOnlySpan`1<char> password, PbeParameters pbeParameters, Span`1<byte> destination, Int32& bytesWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs9AttributeObject : AsnEncodedData {
    [NullableAttribute("2")]
public Oid Oid { get; }
    public Pkcs9AttributeObject(AsnEncodedData asnEncodedData);
    public Pkcs9AttributeObject(Oid oid, Byte[] encodedData);
    public Pkcs9AttributeObject(string oid, Byte[] encodedData);
    [NullableContextAttribute("2")]
public Oid get_Oid();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs9ContentType : Pkcs9AttributeObject {
    public Oid ContentType { get; }
    public Oid get_ContentType();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription : Pkcs9AttributeObject {
    public string DocumentDescription { get; }
    public Pkcs9DocumentDescription(Byte[] encodedDocumentDescription);
    public Pkcs9DocumentDescription(string documentDescription);
    public string get_DocumentDescription();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentName : Pkcs9AttributeObject {
    public string DocumentName { get; }
    public Pkcs9DocumentName(Byte[] encodedDocumentName);
    public Pkcs9DocumentName(string documentName);
    public string get_DocumentName();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9LocalKeyId : Pkcs9AttributeObject {
    public ReadOnlyMemory`1<byte> KeyId { get; }
    [NullableContextAttribute("1")]
public Pkcs9LocalKeyId(Byte[] keyId);
    public Pkcs9LocalKeyId(ReadOnlySpan`1<byte> keyId);
    public ReadOnlyMemory`1<byte> get_KeyId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs9MessageDigest : Pkcs9AttributeObject {
    public Byte[] MessageDigest { get; }
    public Byte[] get_MessageDigest();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Pkcs9SigningTime : Pkcs9AttributeObject {
    public DateTime SigningTime { get; }
    public Pkcs9SigningTime(Byte[] encodedSigningTime);
    public Pkcs9SigningTime(DateTime signingTime);
    public DateTime get_SigningTime();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.PublicKeyInfo : object {
    public AlgorithmIdentifier Algorithm { get; }
    public Byte[] KeyValue { get; }
    public AlgorithmIdentifier get_Algorithm();
    public Byte[] get_KeyValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Security.Cryptography.Pkcs.RecipientInfo : object {
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public RecipientInfoType Type { get; }
    public int Version { get; }
    public abstract virtual Byte[] get_EncryptedKey();
    public abstract virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public abstract virtual SubjectIdentifier get_RecipientIdentifier();
    public RecipientInfoType get_Type();
    public abstract virtual int get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.RecipientInfoCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public RecipientInfo Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public RecipientInfo get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(RecipientInfo[] array, int index);
    public RecipientInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.RecipientInfoEnumerator : object {
    public RecipientInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public RecipientInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.Pkcs.RecipientInfoType : Enum {
    public int value__;
    public static RecipientInfoType Unknown;
    public static RecipientInfoType KeyTransport;
    public static RecipientInfoType KeyAgreement;
}
public class System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest : object {
    public bool HasExtensions { get; }
    [NullableAttribute("1")]
public Oid HashAlgorithmId { get; }
    [NullableAttribute("2")]
public Oid RequestedPolicyId { get; }
    public bool RequestSignerCertificate { get; }
    public int Version { get; }
    public bool get_HasExtensions();
    [NullableContextAttribute("1")]
public Oid get_HashAlgorithmId();
    [NullableContextAttribute("2")]
public Oid get_RequestedPolicyId();
    public bool get_RequestSignerCertificate();
    public int get_Version();
    public static Rfc3161TimestampRequest CreateFromData(ReadOnlySpan`1<byte> data, HashAlgorithmName hashAlgorithm, Oid requestedPolicyId, Nullable`1<ReadOnlyMemory`1<byte>> nonce, bool requestSignerCertificates, X509ExtensionCollection extensions);
    public static Rfc3161TimestampRequest CreateFromHash(ReadOnlyMemory`1<byte> hash, HashAlgorithmName hashAlgorithm, Oid requestedPolicyId, Nullable`1<ReadOnlyMemory`1<byte>> nonce, bool requestSignerCertificates, X509ExtensionCollection extensions);
    public static Rfc3161TimestampRequest CreateFromHash(ReadOnlyMemory`1<byte> hash, Oid hashAlgorithmId, Oid requestedPolicyId, Nullable`1<ReadOnlyMemory`1<byte>> nonce, bool requestSignerCertificates, X509ExtensionCollection extensions);
    [NullableContextAttribute("1")]
public static Rfc3161TimestampRequest CreateFromSignerInfo(SignerInfo signerInfo, HashAlgorithmName hashAlgorithm, Oid requestedPolicyId, Nullable`1<ReadOnlyMemory`1<byte>> nonce, bool requestSignerCertificates, X509ExtensionCollection extensions);
    [NullableContextAttribute("1")]
public Byte[] Encode();
    [NullableContextAttribute("1")]
public X509ExtensionCollection GetExtensions();
    public ReadOnlyMemory`1<byte> GetMessageHash();
    public Nullable`1<ReadOnlyMemory`1<byte>> GetNonce();
    public Rfc3161TimestampToken ProcessResponse(ReadOnlyMemory`1<byte> responseBytes, Int32& bytesConsumed);
    public static bool TryDecode(ReadOnlyMemory`1<byte> encodedBytes, Rfc3161TimestampRequest& request, Int32& bytesConsumed);
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.Rfc3161TimestampToken : object {
    [NullableAttribute("1")]
public Rfc3161TimestampTokenInfo TokenInfo { get; }
    [NullableContextAttribute("1")]
public Rfc3161TimestampTokenInfo get_TokenInfo();
    [NullableContextAttribute("1")]
public SignedCms AsSignedCms();
    [NullableContextAttribute("0")]
public static bool TryDecode(ReadOnlyMemory`1<byte> encodedBytes, Rfc3161TimestampToken& token, Int32& bytesConsumed);
    public bool VerifySignatureForData(ReadOnlySpan`1<byte> data, X509Certificate2& signerCertificate, X509Certificate2Collection extraCandidates);
    public bool VerifySignatureForHash(ReadOnlySpan`1<byte> hash, HashAlgorithmName hashAlgorithm, X509Certificate2& signerCertificate, X509Certificate2Collection extraCandidates);
    public bool VerifySignatureForHash(ReadOnlySpan`1<byte> hash, Oid hashAlgorithmId, X509Certificate2& signerCertificate, X509Certificate2Collection extraCandidates);
    public bool VerifySignatureForSignerInfo(SignerInfo signerInfo, X509Certificate2& signerCertificate, X509Certificate2Collection extraCandidates);
}
public class System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo : object {
    public Nullable`1<long> AccuracyInMicroseconds { get; }
    public bool HasExtensions { get; }
    [NullableAttribute("1")]
public Oid HashAlgorithmId { get; }
    public bool IsOrdering { get; }
    [NullableAttribute("1")]
public Oid PolicyId { get; }
    public DateTimeOffset Timestamp { get; }
    public int Version { get; }
    public Rfc3161TimestampTokenInfo(Oid policyId, Oid hashAlgorithmId, ReadOnlyMemory`1<byte> messageHash, ReadOnlyMemory`1<byte> serialNumber, DateTimeOffset timestamp, Nullable`1<long> accuracyInMicroseconds, bool isOrdering, Nullable`1<ReadOnlyMemory`1<byte>> nonce, Nullable`1<ReadOnlyMemory`1<byte>> timestampAuthorityName, X509ExtensionCollection extensions);
    public Nullable`1<long> get_AccuracyInMicroseconds();
    public bool get_HasExtensions();
    [NullableContextAttribute("1")]
public Oid get_HashAlgorithmId();
    public bool get_IsOrdering();
    [NullableContextAttribute("1")]
public Oid get_PolicyId();
    public DateTimeOffset get_Timestamp();
    public int get_Version();
    [NullableContextAttribute("1")]
public Byte[] Encode();
    [NullableContextAttribute("1")]
public X509ExtensionCollection GetExtensions();
    public ReadOnlyMemory`1<byte> GetMessageHash();
    public Nullable`1<ReadOnlyMemory`1<byte>> GetNonce();
    public ReadOnlyMemory`1<byte> GetSerialNumber();
    public Nullable`1<ReadOnlyMemory`1<byte>> GetTimestampAuthorityName();
    public static bool TryDecode(ReadOnlyMemory`1<byte> encodedBytes, Rfc3161TimestampTokenInfo& timestampTokenInfo, Int32& bytesConsumed);
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.SignedCms : object {
    public X509Certificate2Collection Certificates { get; }
    public ContentInfo ContentInfo { get; }
    public bool Detached { get; }
    public SignerInfoCollection SignerInfos { get; }
    public int Version { get; }
    public SignedCms(ContentInfo contentInfo);
    public SignedCms(ContentInfo contentInfo, bool detached);
    public SignedCms(SubjectIdentifierType signerIdentifierType);
    public SignedCms(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo);
    public SignedCms(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo, bool detached);
    public X509Certificate2Collection get_Certificates();
    public ContentInfo get_ContentInfo();
    public bool get_Detached();
    public SignerInfoCollection get_SignerInfos();
    public int get_Version();
    public void CheckHash();
    public void CheckSignature(bool verifySignatureOnly);
    public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly);
    [EditorBrowsableAttribute("1")]
public void ComputeSignature();
    public void ComputeSignature(CmsSigner signer);
    public void ComputeSignature(CmsSigner signer, bool silent);
    public void Decode(Byte[] encodedMessage);
    public Byte[] Encode();
    public void RemoveSignature(int index);
    public void RemoveSignature(SignerInfo signerInfo);
    public void AddCertificate(X509Certificate2 certificate);
    [NullableContextAttribute("0")]
public void Decode(ReadOnlySpan`1<byte> encodedMessage);
    public void RemoveCertificate(X509Certificate2 certificate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.SignerInfo : object {
    [NullableAttribute("2")]
public X509Certificate2 Certificate { get; }
    public SignerInfoCollection CounterSignerInfos { get; }
    public Oid DigestAlgorithm { get; }
    public CryptographicAttributeObjectCollection SignedAttributes { get; }
    public SubjectIdentifier SignerIdentifier { get; }
    public CryptographicAttributeObjectCollection UnsignedAttributes { get; }
    public int Version { get; }
    public Oid SignatureAlgorithm { get; }
    [NullableContextAttribute("2")]
public X509Certificate2 get_Certificate();
    public SignerInfoCollection get_CounterSignerInfos();
    public Oid get_DigestAlgorithm();
    public CryptographicAttributeObjectCollection get_SignedAttributes();
    public SubjectIdentifier get_SignerIdentifier();
    public CryptographicAttributeObjectCollection get_UnsignedAttributes();
    public int get_Version();
    public void CheckHash();
    public void CheckSignature(bool verifySignatureOnly);
    public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly);
    [ObsoleteAttribute("ComputeCounterSignature without specifying a CmsSigner is obsolete and is not supported. Use the overload that accepts a CmsSigner.")]
[EditorBrowsableAttribute("1")]
public void ComputeCounterSignature();
    public void ComputeCounterSignature(CmsSigner signer);
    public void RemoveCounterSignature(int index);
    public void RemoveCounterSignature(SignerInfo counterSignerInfo);
    public Oid get_SignatureAlgorithm();
    public Byte[] GetSignature();
    public void AddUnsignedAttribute(AsnEncodedData unsignedAttribute);
    public void RemoveUnsignedAttribute(AsnEncodedData unsignedAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.SignerInfoCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public SignerInfo Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public SignerInfo get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SignerInfo[] array, int index);
    public SignerInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.SignerInfoEnumerator : object {
    public SignerInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SignerInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.SubjectIdentifier : object {
    public SubjectIdentifierType Type { get; }
    public object Value { get; }
    public SubjectIdentifierType get_Type();
    public object get_Value();
    [NullableContextAttribute("1")]
public bool MatchesCertificate(X509Certificate2 certificate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey : object {
    public SubjectIdentifierOrKeyType Type { get; }
    public object Value { get; }
    public SubjectIdentifierOrKeyType get_Type();
    public object get_Value();
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType : Enum {
    public int value__;
    public static SubjectIdentifierOrKeyType Unknown;
    public static SubjectIdentifierOrKeyType IssuerAndSerialNumber;
    public static SubjectIdentifierOrKeyType SubjectKeyIdentifier;
    public static SubjectIdentifierOrKeyType PublicKeyInfo;
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierType : Enum {
    public int value__;
    public static SubjectIdentifierType Unknown;
    public static SubjectIdentifierType IssuerAndSerialNumber;
    public static SubjectIdentifierType SubjectKeyIdentifier;
    public static SubjectIdentifierType NoSignature;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Cryptography.Xml.X509IssuerSerial : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public string IssuerName { get; public set; }
    public string SerialNumber { get; public set; }
    [IsReadOnlyAttribute]
public string get_IssuerName();
    public void set_IssuerName(string value);
    [IsReadOnlyAttribute]
public string get_SerialNumber();
    public void set_SerialNumber(string value);
}
