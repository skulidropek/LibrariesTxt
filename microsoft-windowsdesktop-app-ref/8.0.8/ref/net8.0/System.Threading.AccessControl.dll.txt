[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.EventWaitHandleAccessRule : AccessRule {
    public EventWaitHandleRights EventWaitHandleRights { get; }
    public EventWaitHandleAccessRule(IdentityReference identity, EventWaitHandleRights eventRights, AccessControlType type);
    public EventWaitHandleAccessRule(string identity, EventWaitHandleRights eventRights, AccessControlType type);
    public EventWaitHandleRights get_EventWaitHandleRights();
}
public class System.Security.AccessControl.EventWaitHandleAuditRule : AuditRule {
    public EventWaitHandleRights EventWaitHandleRights { get; }
    [NullableContextAttribute("1")]
public EventWaitHandleAuditRule(IdentityReference identity, EventWaitHandleRights eventRights, AuditFlags flags);
    public EventWaitHandleRights get_EventWaitHandleRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.EventWaitHandleRights : Enum {
    public int value__;
    public static EventWaitHandleRights Modify;
    public static EventWaitHandleRights Delete;
    public static EventWaitHandleRights ReadPermissions;
    public static EventWaitHandleRights ChangePermissions;
    public static EventWaitHandleRights TakeOwnership;
    public static EventWaitHandleRights Synchronize;
    public static EventWaitHandleRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.EventWaitHandleSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(EventWaitHandleAccessRule rule);
    public void AddAuditRule(EventWaitHandleAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(EventWaitHandleAccessRule rule);
    public void RemoveAccessRuleAll(EventWaitHandleAccessRule rule);
    public void RemoveAccessRuleSpecific(EventWaitHandleAccessRule rule);
    public bool RemoveAuditRule(EventWaitHandleAuditRule rule);
    public void RemoveAuditRuleAll(EventWaitHandleAuditRule rule);
    public void RemoveAuditRuleSpecific(EventWaitHandleAuditRule rule);
    public void ResetAccessRule(EventWaitHandleAccessRule rule);
    public void SetAccessRule(EventWaitHandleAccessRule rule);
    public void SetAuditRule(EventWaitHandleAuditRule rule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.MutexAccessRule : AccessRule {
    public MutexRights MutexRights { get; }
    public MutexAccessRule(IdentityReference identity, MutexRights eventRights, AccessControlType type);
    public MutexAccessRule(string identity, MutexRights eventRights, AccessControlType type);
    public MutexRights get_MutexRights();
}
public class System.Security.AccessControl.MutexAuditRule : AuditRule {
    public MutexRights MutexRights { get; }
    [NullableContextAttribute("1")]
public MutexAuditRule(IdentityReference identity, MutexRights eventRights, AuditFlags flags);
    public MutexRights get_MutexRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.MutexRights : Enum {
    public int value__;
    public static MutexRights Modify;
    public static MutexRights Delete;
    public static MutexRights ReadPermissions;
    public static MutexRights ChangePermissions;
    public static MutexRights TakeOwnership;
    public static MutexRights Synchronize;
    public static MutexRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.MutexSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public MutexSecurity(string name, AccessControlSections includeSections);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(MutexAccessRule rule);
    public void AddAuditRule(MutexAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(MutexAccessRule rule);
    public void RemoveAccessRuleAll(MutexAccessRule rule);
    public void RemoveAccessRuleSpecific(MutexAccessRule rule);
    public bool RemoveAuditRule(MutexAuditRule rule);
    public void RemoveAuditRuleAll(MutexAuditRule rule);
    public void RemoveAuditRuleSpecific(MutexAuditRule rule);
    public void ResetAccessRule(MutexAccessRule rule);
    public void SetAccessRule(MutexAccessRule rule);
    public void SetAuditRule(MutexAuditRule rule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.SemaphoreAccessRule : AccessRule {
    public SemaphoreRights SemaphoreRights { get; }
    public SemaphoreAccessRule(IdentityReference identity, SemaphoreRights eventRights, AccessControlType type);
    public SemaphoreAccessRule(string identity, SemaphoreRights eventRights, AccessControlType type);
    public SemaphoreRights get_SemaphoreRights();
}
public class System.Security.AccessControl.SemaphoreAuditRule : AuditRule {
    public SemaphoreRights SemaphoreRights { get; }
    [NullableContextAttribute("1")]
public SemaphoreAuditRule(IdentityReference identity, SemaphoreRights eventRights, AuditFlags flags);
    public SemaphoreRights get_SemaphoreRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.SemaphoreRights : Enum {
    public int value__;
    public static SemaphoreRights Modify;
    public static SemaphoreRights Delete;
    public static SemaphoreRights ReadPermissions;
    public static SemaphoreRights ChangePermissions;
    public static SemaphoreRights TakeOwnership;
    public static SemaphoreRights Synchronize;
    public static SemaphoreRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.SemaphoreSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public SemaphoreSecurity(string name, AccessControlSections includeSections);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(SemaphoreAccessRule rule);
    public void AddAuditRule(SemaphoreAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(SemaphoreAccessRule rule);
    public void RemoveAccessRuleAll(SemaphoreAccessRule rule);
    public void RemoveAccessRuleSpecific(SemaphoreAccessRule rule);
    public bool RemoveAuditRule(SemaphoreAuditRule rule);
    public void RemoveAuditRuleAll(SemaphoreAuditRule rule);
    public void RemoveAuditRuleSpecific(SemaphoreAuditRule rule);
    public void ResetAccessRule(SemaphoreAccessRule rule);
    public void SetAccessRule(SemaphoreAccessRule rule);
    public void SetAuditRule(SemaphoreAuditRule rule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.EventWaitHandleAcl : object {
    [NullableContextAttribute("2")]
public static EventWaitHandle Create(bool initialState, EventResetMode mode, string name, Boolean& createdNew, EventWaitHandleSecurity eventSecurity);
    public static EventWaitHandle OpenExisting(string name, EventWaitHandleRights rights);
    public static bool TryOpenExisting(string name, EventWaitHandleRights rights, EventWaitHandle& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.MutexAcl : object {
    [NullableContextAttribute("2")]
public static Mutex Create(bool initiallyOwned, string name, Boolean& createdNew, MutexSecurity mutexSecurity);
    public static Mutex OpenExisting(string name, MutexRights rights);
    public static bool TryOpenExisting(string name, MutexRights rights, Mutex& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.SemaphoreAcl : object {
    [NullableContextAttribute("2")]
public static Semaphore Create(int initialCount, int maximumCount, string name, Boolean& createdNew, SemaphoreSecurity semaphoreSecurity);
    public static Semaphore OpenExisting(string name, SemaphoreRights rights);
    public static bool TryOpenExisting(string name, SemaphoreRights rights, Semaphore& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Threading.ThreadingAclExtensions : object {
    [ExtensionAttribute]
public static EventWaitHandleSecurity GetAccessControl(EventWaitHandle handle);
    [ExtensionAttribute]
public static MutexSecurity GetAccessControl(Mutex mutex);
    [ExtensionAttribute]
public static SemaphoreSecurity GetAccessControl(Semaphore semaphore);
    [ExtensionAttribute]
public static void SetAccessControl(EventWaitHandle handle, EventWaitHandleSecurity eventSecurity);
    [ExtensionAttribute]
public static void SetAccessControl(Mutex mutex, MutexSecurity mutexSecurity);
    [ExtensionAttribute]
public static void SetAccessControl(Semaphore semaphore, SemaphoreSecurity semaphoreSecurity);
}
