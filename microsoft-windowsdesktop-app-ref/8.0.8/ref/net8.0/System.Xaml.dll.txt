internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("This is not used by the XAML parser. Please look at XamlSetMarkupExtensionAttribute.")]
public class System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute : Attribute {
    public Type Type { get; public set; }
    public AcceptedMarkupExtensionExpressionTypeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("196")]
public class System.Windows.Markup.AmbientAttribute : Attribute {
}
[ContentPropertyAttribute("Items")]
[MarkupExtensionReturnTypeAttribute("System.Array")]
public class System.Windows.Markup.ArrayExtension : MarkupExtension {
    [DesignerSerializationVisibilityAttribute("2")]
public IList Items { get; }
    [ConstructorArgumentAttribute("type")]
public Type Type { get; public set; }
    public ArrayExtension(Array elements);
    public ArrayExtension(Type arrayType);
    public IList get_Items();
    public Type get_Type();
    public void set_Type(Type value);
    public void AddChild(object value);
    public void AddText(string text);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("128")]
public class System.Windows.Markup.ConstructorArgumentAttribute : Attribute {
    public string ArgumentName { get; }
    public ConstructorArgumentAttribute(string argumentName);
    public string get_ArgumentName();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.ContentPropertyAttribute : Attribute {
    public string Name { get; }
    public ContentPropertyAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.ContentWrapperAttribute : Attribute {
    public Type ContentWrapper { get; }
    public object TypeId { get; }
    public ContentWrapperAttribute(Type contentWrapper);
    public Type get_ContentWrapper();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Windows.Markup.DateTimeValueSerializer : ValueSerializer {
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("192")]
public class System.Windows.Markup.DependsOnAttribute : Attribute {
    public string Name { get; }
    public object TypeId { get; }
    public DependsOnAttribute(string name);
    public string get_Name();
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.DictionaryKeyPropertyAttribute : Attribute {
    public string Name { get; }
    public DictionaryKeyPropertyAttribute(string name);
    public string get_Name();
}
public interface System.Windows.Markup.IComponentConnector {
    public abstract virtual void Connect(int connectionId, object target);
    public abstract virtual void InitializeComponent();
}
public interface System.Windows.Markup.INameScope {
    public abstract virtual object FindName(string name);
    public abstract virtual void RegisterName(string name, object scopedElement);
    public abstract virtual void UnregisterName(string name);
}
public interface System.Windows.Markup.INameScopeDictionary {
}
public interface System.Windows.Markup.IProvideValueTarget {
    public object TargetObject { get; }
    public object TargetProperty { get; }
    public abstract virtual object get_TargetObject();
    public abstract virtual object get_TargetProperty();
}
public interface System.Windows.Markup.IQueryAmbient {
    public abstract virtual bool IsAmbientPropertyAvailable(string propertyName);
}
public interface System.Windows.Markup.IUriContext {
    public Uri BaseUri { get; public set; }
    public abstract virtual Uri get_BaseUri();
    public abstract virtual void set_BaseUri(Uri value);
}
public interface System.Windows.Markup.IValueSerializerContext {
    public abstract virtual ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor);
    public abstract virtual ValueSerializer GetValueSerializerFor(Type type);
}
public interface System.Windows.Markup.IXamlTypeResolver {
    public abstract virtual Type Resolve(string qualifiedTypeName);
}
public abstract class System.Windows.Markup.MarkupExtension : object {
    public abstract virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("128")]
public class System.Windows.Markup.MarkupExtensionBracketCharactersAttribute : Attribute {
    public char ClosingBracket { get; }
    public char OpeningBracket { get; }
    public MarkupExtensionBracketCharactersAttribute(char openingBracket, char closingBracket);
    public char get_ClosingBracket();
    public char get_OpeningBracket();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.MarkupExtensionReturnTypeAttribute : Attribute {
    [ObsoleteAttribute("This is not used by the XAML parser. Please look at XamlSetMarkupExtensionAttribute.")]
public Type ExpressionType { get; }
    public Type ReturnType { get; }
    public MarkupExtensionReturnTypeAttribute(Type returnType);
    [ObsoleteAttribute("The expressionType argument is not used by the XAML parser. To specify the expected return type, use MarkupExtensionReturnTypeAttribute(Type). To specify custom handling for expression types, use XamlSetMarkupExtensionAttribute.")]
public MarkupExtensionReturnTypeAttribute(Type returnType, Type expressionType);
    public Type get_ExpressionType();
    public Type get_ReturnType();
}
public abstract class System.Windows.Markup.MemberDefinition : object {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class System.Windows.Markup.NameReferenceConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.NameScopePropertyAttribute : Attribute {
    public string Name { get; }
    public Type Type { get; }
    public NameScopePropertyAttribute(string name);
    public NameScopePropertyAttribute(string name, Type type);
    public string get_Name();
    public Type get_Type();
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.Markup.NullExtension : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Windows.Markup.PropertyDefinition : MemberDefinition {
    public IList`1<Attribute> Attributes { get; }
    [DefaultValueAttribute("")]
public string Modifier { get; public set; }
    public string Name { get; public set; }
    [TypeConverterAttribute("System.Xaml.Schema.XamlTypeTypeConverter")]
public XamlType Type { get; public set; }
    public IList`1<Attribute> get_Attributes();
    public string get_Modifier();
    public void set_Modifier(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public XamlType get_Type();
    public void set_Type(XamlType value);
}
[ContentPropertyAttribute("Name")]
public class System.Windows.Markup.Reference : MarkupExtension {
    [ConstructorArgumentAttribute("name")]
public string Name { get; public set; }
    public Reference(string name);
    public string get_Name();
    public void set_Name(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.RootNamespaceAttribute : Attribute {
    public string Namespace { get; }
    public RootNamespaceAttribute(string nameSpace);
    public string get_Namespace();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.RuntimeNamePropertyAttribute : Attribute {
    public string Name { get; }
    public RuntimeNamePropertyAttribute(string name);
    public string get_Name();
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.Markup.StaticExtension : MarkupExtension {
    [ConstructorArgumentAttribute("member")]
public string Member { get; public set; }
    [DefaultValueAttribute("")]
public Type MemberType { get; public set; }
    public StaticExtension(string member);
    public string get_Member();
    public void set_Member(string value);
    public Type get_MemberType();
    public void set_MemberType(Type value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.TrimSurroundingWhitespaceAttribute : Attribute {
}
[MarkupExtensionReturnTypeAttribute("System.Type")]
public class System.Windows.Markup.TypeExtension : MarkupExtension {
    [DefaultValueAttribute("")]
[ConstructorArgumentAttribute("type")]
public Type Type { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string TypeName { get; public set; }
    public TypeExtension(string typeName);
    public TypeExtension(Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.UidPropertyAttribute : Attribute {
    public string Name { get; }
    public UidPropertyAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.UsableDuringInitializationAttribute : Attribute {
    public bool Usable { get; }
    public UsableDuringInitializationAttribute(bool usable);
    public bool get_Usable();
}
public abstract class System.Windows.Markup.ValueSerializer : object {
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    protected Exception GetConvertFromException(object value);
    protected Exception GetConvertToException(object value, Type destinationType);
    public static ValueSerializer GetSerializerFor(PropertyDescriptor descriptor);
    public static ValueSerializer GetSerializerFor(PropertyDescriptor descriptor, IValueSerializerContext context);
    public static ValueSerializer GetSerializerFor(Type type);
    public static ValueSerializer GetSerializerFor(Type type, IValueSerializerContext context);
    public virtual IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.WhitespaceSignificantCollectionAttribute : Attribute {
}
[AttributeUsageAttribute("132")]
public class System.Windows.Markup.XamlDeferLoadAttribute : Attribute {
    public Type ContentType { get; }
    public string ContentTypeName { get; }
    public Type LoaderType { get; }
    public string LoaderTypeName { get; }
    public XamlDeferLoadAttribute(string loaderType, string contentType);
    public XamlDeferLoadAttribute(Type loaderType, Type contentType);
    public Type get_ContentType();
    public string get_ContentTypeName();
    public Type get_LoaderType();
    public string get_LoaderTypeName();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XamlSetMarkupExtensionAttribute : Attribute {
    public string XamlSetMarkupExtensionHandler { get; }
    public XamlSetMarkupExtensionAttribute(string xamlSetMarkupExtensionHandler);
    public string get_XamlSetMarkupExtensionHandler();
}
public class System.Windows.Markup.XamlSetMarkupExtensionEventArgs : XamlSetValueEventArgs {
    public MarkupExtension MarkupExtension { get; }
    public IServiceProvider ServiceProvider { get; }
    public XamlSetMarkupExtensionEventArgs(XamlMember member, MarkupExtension value, IServiceProvider serviceProvider);
    public MarkupExtension get_MarkupExtension();
    public IServiceProvider get_ServiceProvider();
    public virtual void CallBase();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XamlSetTypeConverterAttribute : Attribute {
    public string XamlSetTypeConverterHandler { get; }
    public XamlSetTypeConverterAttribute(string xamlSetTypeConverterHandler);
    public string get_XamlSetTypeConverterHandler();
}
public class System.Windows.Markup.XamlSetTypeConverterEventArgs : XamlSetValueEventArgs {
    public CultureInfo CultureInfo { get; }
    public ITypeDescriptorContext ServiceProvider { get; }
    public TypeConverter TypeConverter { get; }
    public XamlSetTypeConverterEventArgs(XamlMember member, TypeConverter typeConverter, object value, ITypeDescriptorContext serviceProvider, CultureInfo cultureInfo);
    public CultureInfo get_CultureInfo();
    public ITypeDescriptorContext get_ServiceProvider();
    public TypeConverter get_TypeConverter();
    public virtual void CallBase();
}
public class System.Windows.Markup.XamlSetValueEventArgs : EventArgs {
    public bool Handled { get; public set; }
    public XamlMember Member { get; }
    public object Value { get; }
    public XamlSetValueEventArgs(XamlMember member, object value);
    public bool get_Handled();
    public void set_Handled(bool value);
    public XamlMember get_Member();
    public object get_Value();
    public virtual void CallBase();
}
[ContentPropertyAttribute("Text")]
public class System.Windows.Markup.XData : object {
    public string Text { get; public set; }
    public object XmlReader { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    public object get_XmlReader();
    public void set_XmlReader(object value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XmlLangPropertyAttribute : Attribute {
    public string Name { get; }
    public XmlLangPropertyAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.XmlnsCompatibleWithAttribute : Attribute {
    public string NewNamespace { get; }
    public string OldNamespace { get; }
    public XmlnsCompatibleWithAttribute(string oldNamespace, string newNamespace);
    public string get_NewNamespace();
    public string get_OldNamespace();
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.XmlnsDefinitionAttribute : Attribute {
    public string AssemblyName { get; public set; }
    public string ClrNamespace { get; }
    public string XmlNamespace { get; }
    public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ClrNamespace();
    public string get_XmlNamespace();
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.XmlnsPrefixAttribute : Attribute {
    public string Prefix { get; }
    public string XmlNamespace { get; }
    public XmlnsPrefixAttribute(string xmlNamespace, string prefix);
    public string get_Prefix();
    public string get_XmlNamespace();
}
public class System.Xaml.AmbientPropertyValue : object {
    public XamlMember RetrievedProperty { get; }
    public object Value { get; }
    public AmbientPropertyValue(XamlMember property, object value);
    public XamlMember get_RetrievedProperty();
    public object get_Value();
}
public class System.Xaml.AttachableMemberIdentifier : object {
    public Type DeclaringType { get; }
    public string MemberName { get; }
    public AttachableMemberIdentifier(Type declaringType, string memberName);
    public Type get_DeclaringType();
    public string get_MemberName();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AttachableMemberIdentifier other);
    public virtual int GetHashCode();
    public static bool op_Equality(AttachableMemberIdentifier left, AttachableMemberIdentifier right);
    public static bool op_Inequality(AttachableMemberIdentifier left, AttachableMemberIdentifier right);
    public virtual string ToString();
}
public static class System.Xaml.AttachablePropertyServices : object {
    public static void CopyPropertiesTo(object instance, KeyValuePair`2[] array, int index);
    public static int GetAttachedPropertyCount(object instance);
    public static bool RemoveProperty(object instance, AttachableMemberIdentifier name);
    public static void SetProperty(object instance, AttachableMemberIdentifier name, object value);
    public static bool TryGetProperty(object instance, AttachableMemberIdentifier name, Object& value);
    public static bool TryGetProperty(object instance, AttachableMemberIdentifier name, T& value);
}
public interface System.Xaml.IAmbientProvider {
    public abstract virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
    public abstract virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    public abstract virtual IEnumerable`1<object> GetAllAmbientValues(XamlType[] types);
    public abstract virtual AmbientPropertyValue GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    public abstract virtual object GetFirstAmbientValue(XamlType[] types);
}
public interface System.Xaml.IAttachedPropertyStore {
    public int PropertyCount { get; }
    public abstract virtual int get_PropertyCount();
    public abstract virtual void CopyPropertiesTo(KeyValuePair`2[] array, int index);
    public abstract virtual bool RemoveProperty(AttachableMemberIdentifier attachableMemberIdentifier);
    public abstract virtual void SetProperty(AttachableMemberIdentifier attachableMemberIdentifier, object value);
    public abstract virtual bool TryGetProperty(AttachableMemberIdentifier attachableMemberIdentifier, Object& value);
}
public interface System.Xaml.IDestinationTypeProvider {
    public abstract virtual Type GetDestinationType();
}
public interface System.Xaml.INamespacePrefixLookup {
    public abstract virtual string LookupPrefix(string ns);
}
public interface System.Xaml.IRootObjectProvider {
    public object RootObject { get; }
    public abstract virtual object get_RootObject();
}
public interface System.Xaml.IXamlIndexingReader {
    public int Count { get; }
    public int CurrentIndex { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual int get_CurrentIndex();
    public abstract virtual void set_CurrentIndex(int value);
}
public interface System.Xaml.IXamlLineInfo {
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool get_HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public interface System.Xaml.IXamlLineInfoConsumer {
    public bool ShouldProvideLineInfo { get; }
    public abstract virtual bool get_ShouldProvideLineInfo();
    public abstract virtual void SetLineInfo(int lineNumber, int linePosition);
}
public interface System.Xaml.IXamlNameProvider {
    public abstract virtual string GetName(object value);
}
public interface System.Xaml.IXamlNameResolver {
    public bool IsFixupTokenAvailable { get; }
    public abstract virtual bool get_IsFixupTokenAvailable();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnNameScopeInitializationComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnNameScopeInitializationComplete(EventHandler value);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope();
    public abstract virtual object GetFixupToken(IEnumerable`1<string> names);
    public abstract virtual object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly);
    public abstract virtual object Resolve(string name);
    public abstract virtual object Resolve(string name, Boolean& isFullyInitialized);
}
public interface System.Xaml.IXamlNamespaceResolver {
    public abstract virtual string GetNamespace(string prefix);
    public abstract virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
}
public interface System.Xaml.IXamlObjectWriterFactory {
    public abstract virtual XamlObjectWriterSettings GetParentSettings();
    public abstract virtual XamlObjectWriter GetXamlObjectWriter(XamlObjectWriterSettings settings);
}
public interface System.Xaml.IXamlSchemaContextProvider {
    public XamlSchemaContext SchemaContext { get; }
    public abstract virtual XamlSchemaContext get_SchemaContext();
}
public class System.Xaml.NamespaceDeclaration : object {
    public string Namespace { get; }
    public string Prefix { get; }
    public NamespaceDeclaration(string ns, string prefix);
    public string get_Namespace();
    public string get_Prefix();
}
[FlagsAttribute]
public enum System.Xaml.Schema.AllowedMemberLocations : Enum {
    public int value__;
    public static AllowedMemberLocations None;
    public static AllowedMemberLocations Attribute;
    public static AllowedMemberLocations MemberElement;
    public static AllowedMemberLocations Any;
}
public enum System.Xaml.Schema.ShouldSerializeResult : Enum {
    public int value__;
    public static ShouldSerializeResult Default;
    public static ShouldSerializeResult True;
    public static ShouldSerializeResult False;
}
public enum System.Xaml.Schema.XamlCollectionKind : Enum {
    public byte value__;
    public static XamlCollectionKind None;
    public static XamlCollectionKind Collection;
    public static XamlCollectionKind Dictionary;
    public static XamlCollectionKind Array;
}
public class System.Xaml.Schema.XamlMemberInvoker : object {
    public MethodInfo UnderlyingGetter { get; }
    public MethodInfo UnderlyingSetter { get; }
    public static XamlMemberInvoker UnknownInvoker { get; }
    public XamlMemberInvoker(XamlMember member);
    public MethodInfo get_UnderlyingGetter();
    public MethodInfo get_UnderlyingSetter();
    public static XamlMemberInvoker get_UnknownInvoker();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    public virtual ShouldSerializeResult ShouldSerializeValue(object instance);
}
public class System.Xaml.Schema.XamlTypeInvoker : object {
    public EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get; }
    public EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get; }
    public static XamlTypeInvoker UnknownInvoker { get; }
    public XamlTypeInvoker(XamlType type);
    public EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler();
    public EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler();
    public static XamlTypeInvoker get_UnknownInvoker();
    public virtual void AddToCollection(object instance, object item);
    public virtual void AddToDictionary(object instance, object key, object item);
    public virtual object CreateInstance(Object[] arguments);
    public virtual MethodInfo GetAddMethod(XamlType contentType);
    public virtual MethodInfo GetEnumeratorMethod();
    public virtual IEnumerator GetItems(object instance);
}
public class System.Xaml.Schema.XamlTypeName : object {
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public IList`1<XamlTypeName> TypeArguments { get; }
    public XamlTypeName(string xamlNamespace, string name);
    public XamlTypeName(string xamlNamespace, string name, IEnumerable`1<XamlTypeName> typeArguments);
    public XamlTypeName(XamlType xamlType);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public IList`1<XamlTypeName> get_TypeArguments();
    public static XamlTypeName Parse(string typeName, IXamlNamespaceResolver namespaceResolver);
    public static IList`1<XamlTypeName> ParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver);
    public virtual string ToString();
    public static string ToString(IList`1<XamlTypeName> typeNameList, INamespacePrefixLookup prefixLookup);
    public string ToString(INamespacePrefixLookup prefixLookup);
    public static bool TryParse(string typeName, IXamlNamespaceResolver namespaceResolver, XamlTypeName& result);
    public static bool TryParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver, IList`1& result);
}
public class System.Xaml.Schema.XamlTypeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Xaml.Schema.XamlValueConverter`1 : object {
    public TConverterBase ConverterInstance { get; }
    public Type ConverterType { get; }
    public string Name { get; }
    public XamlType TargetType { get; }
    public XamlValueConverter`1(Type converterType, XamlType targetType);
    public XamlValueConverter`1(Type converterType, XamlType targetType, string name);
    public TConverterBase get_ConverterInstance();
    public Type get_ConverterType();
    public string get_Name();
    public XamlType get_TargetType();
    protected virtual TConverterBase CreateInstance();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(XamlValueConverter`1<TConverterBase> other);
    public virtual int GetHashCode();
    public static bool op_Equality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2);
    public static bool op_Inequality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2);
    public virtual string ToString();
}
public class System.Xaml.XamlBackgroundReader : XamlReader {
    public bool HasLineInfo { get; }
    public bool IsEof { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlBackgroundReader(XamlReader wrappedReader);
    public sealed virtual bool get_HasLineInfo();
    public virtual bool get_IsEof();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
    public void StartThread();
    public void StartThread(string threadName);
}
public abstract class System.Xaml.XamlDeferringLoader : object {
    public abstract virtual object Load(XamlReader xamlReader, IServiceProvider serviceProvider);
    public abstract virtual XamlReader Save(object value, IServiceProvider serviceProvider);
}
public class System.Xaml.XamlDirective : XamlMember {
    public AllowedMemberLocations AllowedLocation { get; }
    public XamlDirective(IEnumerable`1<string> xamlNamespaces, string name, XamlType xamlType, XamlValueConverter`1<TypeConverter> typeConverter, AllowedMemberLocations allowedLocation);
    public XamlDirective(string xamlNamespace, string name);
    public AllowedMemberLocations get_AllowedLocation();
    public virtual int GetHashCode();
    public virtual IList`1<string> GetXamlNamespaces();
    protected sealed virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected sealed virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected sealed virtual IList`1<XamlMember> LookupDependsOn();
    protected sealed virtual XamlMemberInvoker LookupInvoker();
    protected sealed virtual bool LookupIsAmbient();
    protected sealed virtual bool LookupIsEvent();
    protected sealed virtual bool LookupIsReadOnly();
    protected sealed virtual bool LookupIsReadPublic();
    protected sealed virtual bool LookupIsUnknown();
    protected sealed virtual bool LookupIsWriteOnly();
    protected sealed virtual bool LookupIsWritePublic();
    protected sealed virtual XamlType LookupTargetType();
    protected sealed virtual XamlType LookupType();
    protected sealed virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected sealed virtual MethodInfo LookupUnderlyingGetter();
    protected sealed virtual MemberInfo LookupUnderlyingMember();
    protected sealed virtual MethodInfo LookupUnderlyingSetter();
    public virtual string ToString();
}
public class System.Xaml.XamlDuplicateMemberException : XamlException {
    public XamlMember DuplicateMember { get; public set; }
    public XamlType ParentType { get; public set; }
    protected XamlDuplicateMemberException(SerializationInfo info, StreamingContext context);
    public XamlDuplicateMemberException(string message);
    public XamlDuplicateMemberException(string message, Exception innerException);
    public XamlDuplicateMemberException(XamlMember member, XamlType type);
    public XamlMember get_DuplicateMember();
    public void set_DuplicateMember(XamlMember value);
    public XamlType get_ParentType();
    public void set_ParentType(XamlType value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlException : Exception {
    public int LineNumber { get; protected set; }
    public int LinePosition { get; protected set; }
    public string Message { get; }
    protected XamlException(SerializationInfo info, StreamingContext context);
    public XamlException(string message);
    public XamlException(string message, Exception innerException);
    public XamlException(string message, Exception innerException, int lineNumber, int linePosition);
    public int get_LineNumber();
    protected void set_LineNumber(int value);
    public int get_LinePosition();
    protected void set_LinePosition(int value);
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlInternalException : XamlException {
    protected XamlInternalException(SerializationInfo info, StreamingContext context);
    public XamlInternalException(string message);
    public XamlInternalException(string message, Exception innerException);
}
public static class System.Xaml.XamlLanguage : object {
    public static string Xaml2006Namespace;
    public static string Xml1998Namespace;
    public static ReadOnlyCollection`1<XamlDirective> AllDirectives { get; }
    public static ReadOnlyCollection`1<XamlType> AllTypes { get; }
    public static XamlDirective Arguments { get; }
    public static XamlType Array { get; }
    public static XamlDirective AsyncRecords { get; }
    public static XamlDirective Base { get; }
    public static XamlType Boolean { get; }
    public static XamlType Byte { get; }
    public static XamlType Char { get; }
    public static XamlDirective Class { get; }
    public static XamlDirective ClassAttributes { get; }
    public static XamlDirective ClassModifier { get; }
    public static XamlDirective Code { get; }
    public static XamlDirective ConnectionId { get; }
    public static XamlType Decimal { get; }
    public static XamlType Double { get; }
    public static XamlDirective FactoryMethod { get; }
    public static XamlDirective FieldModifier { get; }
    public static XamlDirective Initialization { get; }
    public static XamlType Int16 { get; }
    public static XamlType Int32 { get; }
    public static XamlType Int64 { get; }
    public static XamlDirective Items { get; }
    public static XamlDirective Key { get; }
    public static XamlDirective Lang { get; }
    public static XamlType Member { get; }
    public static XamlDirective Members { get; }
    public static XamlDirective Name { get; }
    public static XamlType Null { get; }
    public static XamlType Object { get; }
    public static XamlDirective PositionalParameters { get; }
    public static XamlType Property { get; }
    public static XamlType Reference { get; }
    public static XamlDirective Shared { get; }
    public static XamlType Single { get; }
    public static XamlDirective Space { get; }
    public static XamlType Static { get; }
    public static XamlType String { get; }
    public static XamlDirective Subclass { get; }
    public static XamlDirective SynchronousMode { get; }
    public static XamlType TimeSpan { get; }
    public static XamlType Type { get; }
    public static XamlDirective TypeArguments { get; }
    public static XamlDirective Uid { get; }
    public static XamlDirective UnknownContent { get; }
    public static XamlType Uri { get; }
    public static IList`1<string> XamlNamespaces { get; }
    public static XamlType XData { get; }
    public static IList`1<string> XmlNamespaces { get; }
    public static ReadOnlyCollection`1<XamlDirective> get_AllDirectives();
    public static ReadOnlyCollection`1<XamlType> get_AllTypes();
    public static XamlDirective get_Arguments();
    public static XamlType get_Array();
    public static XamlDirective get_AsyncRecords();
    public static XamlDirective get_Base();
    public static XamlType get_Boolean();
    public static XamlType get_Byte();
    public static XamlType get_Char();
    public static XamlDirective get_Class();
    public static XamlDirective get_ClassAttributes();
    public static XamlDirective get_ClassModifier();
    public static XamlDirective get_Code();
    public static XamlDirective get_ConnectionId();
    public static XamlType get_Decimal();
    public static XamlType get_Double();
    public static XamlDirective get_FactoryMethod();
    public static XamlDirective get_FieldModifier();
    public static XamlDirective get_Initialization();
    public static XamlType get_Int16();
    public static XamlType get_Int32();
    public static XamlType get_Int64();
    public static XamlDirective get_Items();
    public static XamlDirective get_Key();
    public static XamlDirective get_Lang();
    public static XamlType get_Member();
    public static XamlDirective get_Members();
    public static XamlDirective get_Name();
    public static XamlType get_Null();
    public static XamlType get_Object();
    public static XamlDirective get_PositionalParameters();
    public static XamlType get_Property();
    public static XamlType get_Reference();
    public static XamlDirective get_Shared();
    public static XamlType get_Single();
    public static XamlDirective get_Space();
    public static XamlType get_Static();
    public static XamlType get_String();
    public static XamlDirective get_Subclass();
    public static XamlDirective get_SynchronousMode();
    public static XamlType get_TimeSpan();
    public static XamlType get_Type();
    public static XamlDirective get_TypeArguments();
    public static XamlDirective get_Uid();
    public static XamlDirective get_UnknownContent();
    public static XamlType get_Uri();
    public static IList`1<string> get_XamlNamespaces();
    public static XamlType get_XData();
    public static IList`1<string> get_XmlNamespaces();
}
public class System.Xaml.XamlMember : object {
    public XamlType DeclaringType { get; }
    public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; }
    public IList`1<XamlMember> DependsOn { get; }
    public XamlMemberInvoker Invoker { get; }
    public bool IsAmbient { get; }
    public bool IsAttachable { get; }
    public bool IsDirective { get; }
    public bool IsEvent { get; }
    public bool IsNameValid { get; }
    public bool IsReadOnly { get; }
    public bool IsReadPublic { get; }
    public bool IsUnknown { get; }
    public bool IsWriteOnly { get; }
    public bool IsWritePublic { get; }
    public IReadOnlyDictionary`2<char, char> MarkupExtensionBracketCharacters { get; }
    public string Name { get; }
    public string PreferredXamlNamespace { get; }
    public DesignerSerializationVisibility SerializationVisibility { get; }
    public XamlType TargetType { get; }
    public XamlType Type { get; }
    public XamlValueConverter`1<TypeConverter> TypeConverter { get; }
    public MemberInfo UnderlyingMember { get; }
    public XamlValueConverter`1<ValueSerializer> ValueSerializer { get; }
    public XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext);
    public XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext);
    public XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext);
    public XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext);
    public XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(string name, XamlType declaringType, bool isAttachable);
    public XamlType get_DeclaringType();
    public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    public IList`1<XamlMember> get_DependsOn();
    public XamlMemberInvoker get_Invoker();
    public bool get_IsAmbient();
    public bool get_IsAttachable();
    public bool get_IsDirective();
    public bool get_IsEvent();
    public bool get_IsNameValid();
    public bool get_IsReadOnly();
    public bool get_IsReadPublic();
    public bool get_IsUnknown();
    public bool get_IsWriteOnly();
    public bool get_IsWritePublic();
    public IReadOnlyDictionary`2<char, char> get_MarkupExtensionBracketCharacters();
    public string get_Name();
    public string get_PreferredXamlNamespace();
    public DesignerSerializationVisibility get_SerializationVisibility();
    public XamlType get_TargetType();
    public XamlType get_Type();
    public XamlValueConverter`1<TypeConverter> get_TypeConverter();
    public MemberInfo get_UnderlyingMember();
    public XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(XamlMember other);
    public virtual int GetHashCode();
    public virtual IList`1<string> GetXamlNamespaces();
    protected virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected virtual IList`1<XamlMember> LookupDependsOn();
    protected virtual XamlMemberInvoker LookupInvoker();
    protected virtual bool LookupIsAmbient();
    protected virtual bool LookupIsEvent();
    protected virtual bool LookupIsReadOnly();
    protected virtual bool LookupIsReadPublic();
    protected virtual bool LookupIsUnknown();
    protected virtual bool LookupIsWriteOnly();
    protected virtual bool LookupIsWritePublic();
    protected virtual IReadOnlyDictionary`2<char, char> LookupMarkupExtensionBracketCharacters();
    protected virtual XamlType LookupTargetType();
    protected virtual XamlType LookupType();
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual MethodInfo LookupUnderlyingGetter();
    protected virtual MemberInfo LookupUnderlyingMember();
    protected virtual MethodInfo LookupUnderlyingSetter();
    protected virtual XamlValueConverter`1<ValueSerializer> LookupValueSerializer();
    public static bool op_Equality(XamlMember xamlMember1, XamlMember xamlMember2);
    public static bool op_Inequality(XamlMember xamlMember1, XamlMember xamlMember2);
    public virtual string ToString();
}
public class System.Xaml.XamlNodeList : object {
    public int Count { get; }
    public XamlWriter Writer { get; }
    public XamlNodeList(XamlSchemaContext schemaContext);
    public XamlNodeList(XamlSchemaContext schemaContext, int size);
    public int get_Count();
    public XamlWriter get_Writer();
    public void Clear();
    public XamlReader GetReader();
}
public class System.Xaml.XamlNodeQueue : object {
    public int Count { get; }
    public bool IsEmpty { get; }
    public XamlReader Reader { get; }
    public XamlWriter Writer { get; }
    public XamlNodeQueue(XamlSchemaContext schemaContext);
    public int get_Count();
    public bool get_IsEmpty();
    public XamlReader get_Reader();
    public XamlWriter get_Writer();
}
public enum System.Xaml.XamlNodeType : Enum {
    public byte value__;
    public static XamlNodeType None;
    public static XamlNodeType StartObject;
    public static XamlNodeType GetObject;
    public static XamlNodeType EndObject;
    public static XamlNodeType StartMember;
    public static XamlNodeType EndMember;
    public static XamlNodeType Value;
    public static XamlNodeType NamespaceDeclaration;
}
public class System.Xaml.XamlObjectEventArgs : EventArgs {
    public int ElementLineNumber { get; }
    public int ElementLinePosition { get; }
    public object Instance { get; }
    public Uri SourceBamlUri { get; }
    public XamlObjectEventArgs(object instance);
    public int get_ElementLineNumber();
    public int get_ElementLinePosition();
    public object get_Instance();
    public Uri get_SourceBamlUri();
}
public class System.Xaml.XamlObjectReader : XamlReader {
    public object Instance { get; }
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlObjectReader(object instance);
    public XamlObjectReader(object instance, XamlObjectReaderSettings settings);
    public XamlObjectReader(object instance, XamlSchemaContext schemaContext);
    public XamlObjectReader(object instance, XamlSchemaContext schemaContext, XamlObjectReaderSettings settings);
    public virtual object get_Instance();
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual bool Read();
}
public class System.Xaml.XamlObjectReaderException : XamlException {
    protected XamlObjectReaderException(SerializationInfo info, StreamingContext context);
    public XamlObjectReaderException(string message);
    public XamlObjectReaderException(string message, Exception innerException);
}
public class System.Xaml.XamlObjectReaderSettings : XamlReaderSettings {
    public bool RequireExplicitContentVisibility { get; public set; }
    public bool get_RequireExplicitContentVisibility();
    public void set_RequireExplicitContentVisibility(bool value);
}
public class System.Xaml.XamlObjectWriter : XamlWriter {
    public object Result { get; }
    public INameScope RootNameScope { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool ShouldProvideLineInfo { get; }
    public XamlObjectWriter(XamlSchemaContext schemaContext);
    public XamlObjectWriter(XamlSchemaContext schemaContext, XamlObjectWriterSettings settings);
    public virtual object get_Result();
    public INameScope get_RootNameScope();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual bool get_ShouldProvideLineInfo();
    public void Clear();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAfterBeginInit(object value);
    protected virtual void OnAfterEndInit(object value);
    protected virtual void OnAfterProperties(object value);
    protected virtual void OnBeforeProperties(object value);
    protected virtual bool OnSetValue(object eventSender, XamlMember member, object value);
    public sealed virtual void SetLineInfo(int lineNumber, int linePosition);
    public virtual void WriteEndMember();
    public virtual void WriteEndObject();
    public virtual void WriteGetObject();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteStartObject(XamlType xamlType);
    public virtual void WriteValue(object value);
}
public class System.Xaml.XamlObjectWriterException : XamlException {
    protected XamlObjectWriterException(SerializationInfo info, StreamingContext context);
    public XamlObjectWriterException(string message);
    public XamlObjectWriterException(string message, Exception innerException);
}
public class System.Xaml.XamlObjectWriterSettings : XamlWriterSettings {
    public XamlAccessLevel AccessLevel { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterBeginInitHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterEndInitHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterPropertiesHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> BeforePropertiesHandler { get; public set; }
    public INameScope ExternalNameScope { get; public set; }
    public bool IgnoreCanConvert { get; public set; }
    public bool PreferUnconvertedDictionaryKeys { get; public set; }
    public bool RegisterNamesOnExternalNamescope { get; public set; }
    public object RootObjectInstance { get; public set; }
    public bool SkipDuplicatePropertyCheck { get; public set; }
    public bool SkipProvideValueOnRoot { get; public set; }
    public Uri SourceBamlUri { get; public set; }
    public EventHandler`1<XamlSetValueEventArgs> XamlSetValueHandler { get; public set; }
    public XamlObjectWriterSettings(XamlObjectWriterSettings settings);
    public XamlAccessLevel get_AccessLevel();
    public void set_AccessLevel(XamlAccessLevel value);
    public EventHandler`1<XamlObjectEventArgs> get_AfterBeginInitHandler();
    public void set_AfterBeginInitHandler(EventHandler`1<XamlObjectEventArgs> value);
    public EventHandler`1<XamlObjectEventArgs> get_AfterEndInitHandler();
    public void set_AfterEndInitHandler(EventHandler`1<XamlObjectEventArgs> value);
    public EventHandler`1<XamlObjectEventArgs> get_AfterPropertiesHandler();
    public void set_AfterPropertiesHandler(EventHandler`1<XamlObjectEventArgs> value);
    public EventHandler`1<XamlObjectEventArgs> get_BeforePropertiesHandler();
    public void set_BeforePropertiesHandler(EventHandler`1<XamlObjectEventArgs> value);
    public INameScope get_ExternalNameScope();
    public void set_ExternalNameScope(INameScope value);
    public bool get_IgnoreCanConvert();
    public void set_IgnoreCanConvert(bool value);
    public bool get_PreferUnconvertedDictionaryKeys();
    public void set_PreferUnconvertedDictionaryKeys(bool value);
    public bool get_RegisterNamesOnExternalNamescope();
    public void set_RegisterNamesOnExternalNamescope(bool value);
    public object get_RootObjectInstance();
    public void set_RootObjectInstance(object value);
    public bool get_SkipDuplicatePropertyCheck();
    public void set_SkipDuplicatePropertyCheck(bool value);
    public bool get_SkipProvideValueOnRoot();
    public void set_SkipProvideValueOnRoot(bool value);
    public Uri get_SourceBamlUri();
    public void set_SourceBamlUri(Uri value);
    public EventHandler`1<XamlSetValueEventArgs> get_XamlSetValueHandler();
    public void set_XamlSetValueHandler(EventHandler`1<XamlSetValueEventArgs> value);
}
public class System.Xaml.XamlParseException : XamlException {
    protected XamlParseException(SerializationInfo info, StreamingContext context);
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
}
public abstract class System.Xaml.XamlReader : object {
    protected bool IsDisposed { get; }
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    protected bool get_IsDisposed();
    public abstract virtual bool get_IsEof();
    public abstract virtual XamlMember get_Member();
    public abstract virtual NamespaceDeclaration get_Namespace();
    public abstract virtual XamlNodeType get_NodeType();
    public abstract virtual XamlSchemaContext get_SchemaContext();
    public abstract virtual XamlType get_Type();
    public abstract virtual object get_Value();
    public void Close();
    protected virtual void Dispose(bool disposing);
    public abstract virtual bool Read();
    public virtual XamlReader ReadSubtree();
    public virtual void Skip();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Xaml.XamlReaderSettings : object {
    public bool AllowProtectedMembersOnRoot { get; public set; }
    public Uri BaseUri { get; public set; }
    public bool IgnoreUidsOnPropertyElements { get; public set; }
    public Assembly LocalAssembly { get; public set; }
    public bool ProvideLineInfo { get; public set; }
    public bool ValuesMustBeString { get; public set; }
    public XamlReaderSettings(XamlReaderSettings settings);
    public bool get_AllowProtectedMembersOnRoot();
    public void set_AllowProtectedMembersOnRoot(bool value);
    public Uri get_BaseUri();
    public void set_BaseUri(Uri value);
    public bool get_IgnoreUidsOnPropertyElements();
    public void set_IgnoreUidsOnPropertyElements(bool value);
    public Assembly get_LocalAssembly();
    public void set_LocalAssembly(Assembly value);
    public bool get_ProvideLineInfo();
    public void set_ProvideLineInfo(bool value);
    public bool get_ValuesMustBeString();
    public void set_ValuesMustBeString(bool value);
}
public class System.Xaml.XamlSchemaContext : object {
    public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }
    public IList`1<Assembly> ReferenceAssemblies { get; }
    public bool SupportMarkupExtensionsWithDuplicateArity { get; }
    public XamlSchemaContext(IEnumerable`1<Assembly> referenceAssemblies);
    public XamlSchemaContext(IEnumerable`1<Assembly> referenceAssemblies, XamlSchemaContextSettings settings);
    public XamlSchemaContext(XamlSchemaContextSettings settings);
    public bool get_FullyQualifyAssemblyNamesInClrNamespaces();
    public IList`1<Assembly> get_ReferenceAssemblies();
    public bool get_SupportMarkupExtensionsWithDuplicateArity();
    protected virtual override void Finalize();
    public virtual IEnumerable`1<string> GetAllXamlNamespaces();
    public virtual ICollection`1<XamlType> GetAllXamlTypes(string xamlNamespace);
    public virtual string GetPreferredPrefix(string xmlns);
    protected internal XamlValueConverter`1<TConverterBase> GetValueConverter(Type converterType, XamlType targetType);
    public virtual XamlDirective GetXamlDirective(string xamlNamespace, string name);
    protected internal virtual XamlType GetXamlType(string xamlNamespace, string name, XamlType[] typeArguments);
    public virtual XamlType GetXamlType(Type type);
    public XamlType GetXamlType(XamlTypeName xamlTypeName);
    protected internal virtual Assembly OnAssemblyResolve(string assemblyName);
    public virtual bool TryGetCompatibleXamlNamespace(string xamlNamespace, String& compatibleNamespace);
}
public class System.Xaml.XamlSchemaContextSettings : object {
    public bool FullyQualifyAssemblyNamesInClrNamespaces { get; public set; }
    public bool SupportMarkupExtensionsWithDuplicateArity { get; public set; }
    public XamlSchemaContextSettings(XamlSchemaContextSettings settings);
    public bool get_FullyQualifyAssemblyNamesInClrNamespaces();
    public void set_FullyQualifyAssemblyNamesInClrNamespaces(bool value);
    public bool get_SupportMarkupExtensionsWithDuplicateArity();
    public void set_SupportMarkupExtensionsWithDuplicateArity(bool value);
}
public class System.Xaml.XamlSchemaException : XamlException {
    protected XamlSchemaException(SerializationInfo info, StreamingContext context);
    public XamlSchemaException(string message);
    public XamlSchemaException(string message, Exception innerException);
}
public static class System.Xaml.XamlServices : object {
    public static object Load(Stream stream);
    public static object Load(TextReader textReader);
    public static object Load(string fileName);
    public static object Load(XamlReader xamlReader);
    public static object Load(XmlReader xmlReader);
    public static object Parse(string xaml);
    public static void Save(Stream stream, object instance);
    public static void Save(TextWriter writer, object instance);
    public static string Save(object instance);
    public static void Save(string fileName, object instance);
    public static void Save(XamlWriter writer, object instance);
    public static void Save(XmlWriter writer, object instance);
    public static void Transform(XamlReader xamlReader, XamlWriter xamlWriter);
    public static void Transform(XamlReader xamlReader, XamlWriter xamlWriter, bool closeWriter);
}
public class System.Xaml.XamlType : object {
    public IList`1<XamlType> AllowedContentTypes { get; }
    public XamlType BaseType { get; }
    public bool ConstructionRequiresArguments { get; }
    public XamlMember ContentProperty { get; }
    public IList`1<XamlType> ContentWrappers { get; }
    public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; }
    public XamlTypeInvoker Invoker { get; }
    public bool IsAmbient { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsGeneric { get; }
    public bool IsMarkupExtension { get; }
    public bool IsNameScope { get; }
    public bool IsNameValid { get; }
    public bool IsNullable { get; }
    public bool IsPublic { get; }
    public bool IsUnknown { get; }
    public bool IsUsableDuringInitialization { get; }
    public bool IsWhitespaceSignificantCollection { get; }
    public bool IsXData { get; }
    public XamlType ItemType { get; }
    public XamlType KeyType { get; }
    public XamlType MarkupExtensionReturnType { get; }
    public string Name { get; }
    public string PreferredXamlNamespace { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool TrimSurroundingWhitespace { get; }
    public IList`1<XamlType> TypeArguments { get; }
    public XamlValueConverter`1<TypeConverter> TypeConverter { get; }
    public Type UnderlyingType { get; }
    public XamlValueConverter`1<ValueSerializer> ValueSerializer { get; }
    protected XamlType(string typeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext);
    public XamlType(string unknownTypeNamespace, string unknownTypeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext);
    public XamlType(Type underlyingType, XamlSchemaContext schemaContext);
    public XamlType(Type underlyingType, XamlSchemaContext schemaContext, XamlTypeInvoker invoker);
    public IList`1<XamlType> get_AllowedContentTypes();
    public XamlType get_BaseType();
    public bool get_ConstructionRequiresArguments();
    public XamlMember get_ContentProperty();
    public IList`1<XamlType> get_ContentWrappers();
    public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    public XamlTypeInvoker get_Invoker();
    public bool get_IsAmbient();
    public bool get_IsArray();
    public bool get_IsCollection();
    public bool get_IsConstructible();
    public bool get_IsDictionary();
    public bool get_IsGeneric();
    public bool get_IsMarkupExtension();
    public bool get_IsNameScope();
    public bool get_IsNameValid();
    public bool get_IsNullable();
    public bool get_IsPublic();
    public bool get_IsUnknown();
    public bool get_IsUsableDuringInitialization();
    public bool get_IsWhitespaceSignificantCollection();
    public bool get_IsXData();
    public XamlType get_ItemType();
    public XamlType get_KeyType();
    public XamlType get_MarkupExtensionReturnType();
    public string get_Name();
    public string get_PreferredXamlNamespace();
    public XamlSchemaContext get_SchemaContext();
    public bool get_TrimSurroundingWhitespace();
    public IList`1<XamlType> get_TypeArguments();
    public XamlValueConverter`1<TypeConverter> get_TypeConverter();
    public Type get_UnderlyingType();
    public XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    public virtual bool CanAssignTo(XamlType xamlType);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(XamlType other);
    public XamlMember GetAliasedProperty(XamlDirective directive);
    public ICollection`1<XamlMember> GetAllAttachableMembers();
    public ICollection`1<XamlMember> GetAllMembers();
    public XamlMember GetAttachableMember(string name);
    public virtual int GetHashCode();
    public XamlMember GetMember(string name);
    public IList`1<XamlType> GetPositionalParameters(int parameterCount);
    public virtual IList`1<string> GetXamlNamespaces();
    protected virtual XamlMember LookupAliasedProperty(XamlDirective directive);
    protected virtual IEnumerable`1<XamlMember> LookupAllAttachableMembers();
    protected virtual IEnumerable`1<XamlMember> LookupAllMembers();
    protected virtual IList`1<XamlType> LookupAllowedContentTypes();
    protected virtual XamlMember LookupAttachableMember(string name);
    protected virtual XamlType LookupBaseType();
    protected virtual XamlCollectionKind LookupCollectionKind();
    protected virtual bool LookupConstructionRequiresArguments();
    protected virtual XamlMember LookupContentProperty();
    protected virtual IList`1<XamlType> LookupContentWrappers();
    protected virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected virtual XamlTypeInvoker LookupInvoker();
    protected virtual bool LookupIsAmbient();
    protected virtual bool LookupIsConstructible();
    protected virtual bool LookupIsMarkupExtension();
    protected virtual bool LookupIsNameScope();
    protected virtual bool LookupIsNullable();
    protected virtual bool LookupIsPublic();
    protected virtual bool LookupIsUnknown();
    protected virtual bool LookupIsWhitespaceSignificantCollection();
    protected virtual bool LookupIsXData();
    protected virtual XamlType LookupItemType();
    protected virtual XamlType LookupKeyType();
    protected virtual XamlType LookupMarkupExtensionReturnType();
    protected virtual XamlMember LookupMember(string name, bool skipReadOnlyCheck);
    protected virtual IList`1<XamlType> LookupPositionalParameters(int parameterCount);
    protected virtual EventHandler`1<XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler();
    protected virtual EventHandler`1<XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler();
    protected virtual bool LookupTrimSurroundingWhitespace();
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual Type LookupUnderlyingType();
    protected virtual bool LookupUsableDuringInitialization();
    protected virtual XamlValueConverter`1<ValueSerializer> LookupValueSerializer();
    public static bool op_Equality(XamlType xamlType1, XamlType xamlType2);
    public static bool op_Inequality(XamlType xamlType1, XamlType xamlType2);
    public virtual string ToString();
}
public abstract class System.Xaml.XamlWriter : object {
    protected bool IsDisposed { get; }
    public XamlSchemaContext SchemaContext { get; }
    protected bool get_IsDisposed();
    public abstract virtual XamlSchemaContext get_SchemaContext();
    public void Close();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    public abstract virtual void WriteEndMember();
    public abstract virtual void WriteEndObject();
    public abstract virtual void WriteGetObject();
    public abstract virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public void WriteNode(XamlReader reader);
    public abstract virtual void WriteStartMember(XamlMember xamlMember);
    public abstract virtual void WriteStartObject(XamlType type);
    public abstract virtual void WriteValue(object value);
}
public class System.Xaml.XamlWriterSettings : object {
    public XamlWriterSettings(XamlWriterSettings settings);
}
public class System.Xaml.XamlXmlReader : XamlReader {
    public bool HasLineInfo { get; }
    public bool IsEof { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlXmlReader(Stream stream);
    public XamlXmlReader(Stream stream, XamlSchemaContext schemaContext);
    public XamlXmlReader(Stream stream, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(Stream stream, XamlXmlReaderSettings settings);
    public XamlXmlReader(TextReader textReader);
    public XamlXmlReader(TextReader textReader, XamlSchemaContext schemaContext);
    public XamlXmlReader(TextReader textReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(TextReader textReader, XamlXmlReaderSettings settings);
    public XamlXmlReader(string fileName);
    public XamlXmlReader(string fileName, XamlSchemaContext schemaContext);
    public XamlXmlReader(string fileName, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(string fileName, XamlXmlReaderSettings settings);
    public XamlXmlReader(XmlReader xmlReader);
    public XamlXmlReader(XmlReader xmlReader, XamlSchemaContext schemaContext);
    public XamlXmlReader(XmlReader xmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(XmlReader xmlReader, XamlXmlReaderSettings settings);
    public sealed virtual bool get_HasLineInfo();
    public virtual bool get_IsEof();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual bool Read();
}
public class System.Xaml.XamlXmlReaderSettings : XamlReaderSettings {
    public bool CloseInput { get; public set; }
    public bool SkipXmlCompatibilityProcessing { get; public set; }
    public string XmlLang { get; public set; }
    public bool XmlSpacePreserve { get; public set; }
    public XamlXmlReaderSettings(XamlXmlReaderSettings settings);
    public bool get_CloseInput();
    public void set_CloseInput(bool value);
    public bool get_SkipXmlCompatibilityProcessing();
    public void set_SkipXmlCompatibilityProcessing(bool value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public bool get_XmlSpacePreserve();
    public void set_XmlSpacePreserve(bool value);
}
public class System.Xaml.XamlXmlWriter : XamlWriter {
    public XamlSchemaContext SchemaContext { get; }
    public XamlXmlWriterSettings Settings { get; }
    public XamlXmlWriter(Stream stream, XamlSchemaContext schemaContext);
    public XamlXmlWriter(Stream stream, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public XamlXmlWriter(TextWriter textWriter, XamlSchemaContext schemaContext);
    public XamlXmlWriter(TextWriter textWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public XamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext);
    public XamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public virtual XamlSchemaContext get_SchemaContext();
    public XamlXmlWriterSettings get_Settings();
    protected virtual void Dispose(bool disposing);
    public void Flush();
    public virtual void WriteEndMember();
    public virtual void WriteEndObject();
    public virtual void WriteGetObject();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteValue(object value);
}
public class System.Xaml.XamlXmlWriterException : XamlException {
    protected XamlXmlWriterException(SerializationInfo info, StreamingContext context);
    public XamlXmlWriterException(string message);
    public XamlXmlWriterException(string message, Exception innerException);
}
public class System.Xaml.XamlXmlWriterSettings : XamlWriterSettings {
    public bool AssumeValidInput { get; public set; }
    public bool CloseOutput { get; public set; }
    public bool get_AssumeValidInput();
    public void set_AssumeValidInput(bool value);
    public bool get_CloseOutput();
    public void set_CloseOutput(bool value);
    public XamlXmlWriterSettings Copy();
}
