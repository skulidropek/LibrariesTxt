public static class System.Windows.Automation.Provider.AutomationInteropProvider : object {
    public static int AppendRuntimeId;
    public static int InvalidateLimit;
    public static int ItemsInvalidateLimit;
    public static int RootObjectId;
    public static bool ClientsAreListening { get; }
    public static bool get_ClientsAreListening();
    public static IRawElementProviderSimple HostProviderFromHandle(IntPtr hwnd);
    public static void RaiseAutomationEvent(AutomationEvent eventId, IRawElementProviderSimple provider, AutomationEventArgs e);
    public static void RaiseAutomationPropertyChangedEvent(IRawElementProviderSimple element, AutomationPropertyChangedEventArgs e);
    public static void RaiseStructureChangedEvent(IRawElementProviderSimple provider, StructureChangedEventArgs e);
    public static IntPtr ReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, IRawElementProviderSimple el);
}
public interface System.Windows.Automation.Provider.IDockProvider {
    public DockPosition DockPosition { get; }
    public abstract virtual DockPosition get_DockPosition();
    public abstract virtual void SetDockPosition(DockPosition dockPosition);
}
public interface System.Windows.Automation.Provider.IExpandCollapseProvider {
    public ExpandCollapseState ExpandCollapseState { get; }
    public abstract virtual ExpandCollapseState get_ExpandCollapseState();
    public abstract virtual void Collapse();
    public abstract virtual void Expand();
}
public interface System.Windows.Automation.Provider.IGridItemProvider {
    public int Column { get; }
    public int ColumnSpan { get; }
    public IRawElementProviderSimple ContainingGrid { get; }
    public int Row { get; }
    public int RowSpan { get; }
    public abstract virtual int get_Column();
    public abstract virtual int get_ColumnSpan();
    public abstract virtual IRawElementProviderSimple get_ContainingGrid();
    public abstract virtual int get_Row();
    public abstract virtual int get_RowSpan();
}
public interface System.Windows.Automation.Provider.IGridProvider {
    public int ColumnCount { get; }
    public int RowCount { get; }
    public abstract virtual int get_ColumnCount();
    public abstract virtual int get_RowCount();
    public abstract virtual IRawElementProviderSimple GetItem(int row, int column);
}
public interface System.Windows.Automation.Provider.IInvokeProvider {
    public abstract virtual void Invoke();
}
public interface System.Windows.Automation.Provider.IItemContainerProvider {
    public abstract virtual IRawElementProviderSimple FindItemByProperty(IRawElementProviderSimple startAfter, int propertyId, object value);
}
public interface System.Windows.Automation.Provider.IMultipleViewProvider {
    public int CurrentView { get; }
    public abstract virtual int get_CurrentView();
    public abstract virtual Int32[] GetSupportedViews();
    public abstract virtual string GetViewName(int viewId);
    public abstract virtual void SetCurrentView(int viewId);
}
public interface System.Windows.Automation.Provider.IRangeValueProvider {
    public bool IsReadOnly { get; }
    public double LargeChange { get; }
    public double Maximum { get; }
    public double Minimum { get; }
    public double SmallChange { get; }
    public double Value { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual double get_LargeChange();
    public abstract virtual double get_Maximum();
    public abstract virtual double get_Minimum();
    public abstract virtual double get_SmallChange();
    public abstract virtual double get_Value();
    public abstract virtual void SetValue(double value);
}
public interface System.Windows.Automation.Provider.IRawElementProviderAdviseEvents {
    public abstract virtual void AdviseEventAdded(int eventId, Int32[] properties);
    public abstract virtual void AdviseEventRemoved(int eventId, Int32[] properties);
}
public interface System.Windows.Automation.Provider.IRawElementProviderFragment {
    public Rect BoundingRectangle { get; }
    public IRawElementProviderFragmentRoot FragmentRoot { get; }
    public abstract virtual Rect get_BoundingRectangle();
    public abstract virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    public abstract virtual IRawElementProviderSimple[] GetEmbeddedFragmentRoots();
    public abstract virtual Int32[] GetRuntimeId();
    public abstract virtual IRawElementProviderFragment Navigate(NavigateDirection direction);
    public abstract virtual void SetFocus();
}
public interface System.Windows.Automation.Provider.IRawElementProviderFragmentRoot {
    public abstract virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    public abstract virtual IRawElementProviderFragment GetFocus();
}
public interface System.Windows.Automation.Provider.IRawElementProviderHwndOverride {
    public abstract virtual IRawElementProviderSimple GetOverrideProviderForHwnd(IntPtr hwnd);
}
public interface System.Windows.Automation.Provider.IScrollItemProvider {
    public abstract virtual void ScrollIntoView();
}
public interface System.Windows.Automation.Provider.IScrollProvider {
    public bool HorizontallyScrollable { get; }
    public double HorizontalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public bool VerticallyScrollable { get; }
    public double VerticalScrollPercent { get; }
    public double VerticalViewSize { get; }
    public abstract virtual bool get_HorizontallyScrollable();
    public abstract virtual double get_HorizontalScrollPercent();
    public abstract virtual double get_HorizontalViewSize();
    public abstract virtual bool get_VerticallyScrollable();
    public abstract virtual double get_VerticalScrollPercent();
    public abstract virtual double get_VerticalViewSize();
    public abstract virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public abstract virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
}
public interface System.Windows.Automation.Provider.ISelectionItemProvider {
    public bool IsSelected { get; }
    public IRawElementProviderSimple SelectionContainer { get; }
    public abstract virtual bool get_IsSelected();
    public abstract virtual IRawElementProviderSimple get_SelectionContainer();
    public abstract virtual void AddToSelection();
    public abstract virtual void RemoveFromSelection();
    public abstract virtual void Select();
}
public interface System.Windows.Automation.Provider.ISelectionProvider {
    public bool CanSelectMultiple { get; }
    public bool IsSelectionRequired { get; }
    public abstract virtual bool get_CanSelectMultiple();
    public abstract virtual bool get_IsSelectionRequired();
    public abstract virtual IRawElementProviderSimple[] GetSelection();
}
public interface System.Windows.Automation.Provider.ISynchronizedInputProvider {
    public abstract virtual void Cancel();
    public abstract virtual void StartListening(SynchronizedInputType inputType);
}
public interface System.Windows.Automation.Provider.ITableItemProvider {
    public abstract virtual IRawElementProviderSimple[] GetColumnHeaderItems();
    public abstract virtual IRawElementProviderSimple[] GetRowHeaderItems();
}
public interface System.Windows.Automation.Provider.ITableProvider {
    public RowOrColumnMajor RowOrColumnMajor { get; }
    public abstract virtual RowOrColumnMajor get_RowOrColumnMajor();
    public abstract virtual IRawElementProviderSimple[] GetColumnHeaders();
    public abstract virtual IRawElementProviderSimple[] GetRowHeaders();
}
public interface System.Windows.Automation.Provider.ITextProvider {
    public ITextRangeProvider DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public abstract virtual ITextRangeProvider get_DocumentRange();
    public abstract virtual SupportedTextSelection get_SupportedTextSelection();
    public abstract virtual ITextRangeProvider[] GetSelection();
    public abstract virtual ITextRangeProvider[] GetVisibleRanges();
    public abstract virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    public abstract virtual ITextRangeProvider RangeFromPoint(Point screenLocation);
}
public interface System.Windows.Automation.Provider.IToggleProvider {
    public ToggleState ToggleState { get; }
    public abstract virtual ToggleState get_ToggleState();
    public abstract virtual void Toggle();
}
public interface System.Windows.Automation.Provider.ITransformProvider {
    public bool CanMove { get; }
    public bool CanResize { get; }
    public bool CanRotate { get; }
    public abstract virtual bool get_CanMove();
    public abstract virtual bool get_CanResize();
    public abstract virtual bool get_CanRotate();
    public abstract virtual void Move(double x, double y);
    public abstract virtual void Resize(double width, double height);
    public abstract virtual void Rotate(double degrees);
}
public interface System.Windows.Automation.Provider.IValueProvider {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual string get_Value();
    public abstract virtual void SetValue(string value);
}
public interface System.Windows.Automation.Provider.IVirtualizedItemProvider {
    public abstract virtual void Realize();
}
public interface System.Windows.Automation.Provider.IWindowProvider {
    public WindowInteractionState InteractionState { get; }
    public bool IsModal { get; }
    public bool IsTopmost { get; }
    public bool Maximizable { get; }
    public bool Minimizable { get; }
    public WindowVisualState VisualState { get; }
    public abstract virtual WindowInteractionState get_InteractionState();
    public abstract virtual bool get_IsModal();
    public abstract virtual bool get_IsTopmost();
    public abstract virtual bool get_Maximizable();
    public abstract virtual bool get_Minimizable();
    public abstract virtual WindowVisualState get_VisualState();
    public abstract virtual void Close();
    public abstract virtual void SetVisualState(WindowVisualState state);
    public abstract virtual bool WaitForInputIdle(int milliseconds);
}
public enum System.Windows.Automation.Provider.NavigateDirection : Enum {
    public int value__;
    public static NavigateDirection Parent;
    public static NavigateDirection NextSibling;
    public static NavigateDirection PreviousSibling;
    public static NavigateDirection FirstChild;
    public static NavigateDirection LastChild;
}
