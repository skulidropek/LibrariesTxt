[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class __s_GUID : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class __type_info_node : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _BY_HANDLE_FILE_INFORMATION : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _EXCEPTION_POINTERS : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _FILETIME : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _GUID : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _SECURITY_ATTRIBUTES : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _SLIST_HEADER : ValueType {
    private long <alignment member>;
}
internal class $VCls$0000000080 : ValueType {
}
[NativeCppClassAttribute]
internal class CModuleInitialize : ValueType {
}
[NativeCppClassAttribute]
internal class gcroot<System::String ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class HINSTANCE__ : ValueType {
    private int <alignment member>;
}
internal class MS.Internal.NativeWPFDLLLoader : object {
    private static IntPtr m_hDWrite;
    private static Void* m_pfnDWriteCreateFactory;
    private static NativeWPFDLLLoader();
    public static void LoadDwrite();
    public static void UnloadDWrite();
    public static Void* GetDWriteCreateFactoryFunctionPointer();
    public static void ClearDWriteCreateFactoryFunctionPointer();
}
internal class MS.Internal.Span : object {
    public object element;
    public int length;
    public Span(object element, int length);
}
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.CharAttribute : ValueType {
}
internal class MS.Internal.Text.TextInterface.CreateTextAnalysisSink : MulticastDelegate {
    public CreateTextAnalysisSink(object A_0, IntPtr A_1);
    public sealed virtual Void* Invoke();
    public sealed virtual IAsyncResult BeginInvoke(AsyncCallback callback, object obj);
    public sealed virtual Void* EndInvoke(IAsyncResult result);
}
internal class MS.Internal.Text.TextInterface.CreateTextAnalysisSource : MulticastDelegate {
    public CreateTextAnalysisSource(object A_0, IntPtr A_1);
    public sealed virtual int Invoke(Char modopt(System.Runtime.CompilerServices.IsConst)* text, UInt32 length, Char modopt(System.Runtime.CompilerServices.IsConst)* culture, Void* factory, bool isRightToLeft, Char modopt(System.Runtime.CompilerServices.IsConst)* numberCulture, bool ignoreUserOverride, UInt32 numberSubstitutionMethod, Void** ppTextAnalysisSource);
    public sealed virtual IAsyncResult BeginInvoke(Char modopt(System.Runtime.CompilerServices.IsConst)* text, UInt32 length, Char modopt(System.Runtime.CompilerServices.IsConst)* culture, Void* factory, bool isRightToLeft, Char modopt(System.Runtime.CompilerServices.IsConst)* numberCulture, bool ignoreUserOverride, UInt32 numberSubstitutionMethod, Void** ppTextAnalysisSource, AsyncCallback callback, object obj);
    public sealed virtual int EndInvoke(IAsyncResult result);
}
internal class MS.Internal.Text.TextInterface.DWriteFontFeature : ValueType {
    public DWriteFontFeatureTag nameTag;
    public UInt32 parameter;
    public DWriteFontFeature(DWriteFontFeatureTag dwriteNameTag, UInt32 dwriteParameter);
}
internal enum MS.Internal.Text.TextInterface.DWriteFontFeatureTag : Enum {
    public int value__;
    public static DWriteFontFeatureTag AlternativeFractions;
    public static DWriteFontFeatureTag PetiteCapitalsFromCapitals;
    public static DWriteFontFeatureTag SmallCapitalsFromCapitals;
    public static DWriteFontFeatureTag ContextualAlternates;
    public static DWriteFontFeatureTag CaseSensitiveForms;
    public static DWriteFontFeatureTag GlyphCompositionDecomposition;
    public static DWriteFontFeatureTag ContextualLigatures;
    public static DWriteFontFeatureTag CapitalSpacing;
    public static DWriteFontFeatureTag ContextualSwash;
    public static DWriteFontFeatureTag CursivePositioning;
    public static DWriteFontFeatureTag Default;
    public static DWriteFontFeatureTag DiscretionaryLigatures;
    public static DWriteFontFeatureTag ExpertForms;
    public static DWriteFontFeatureTag Fractions;
    public static DWriteFontFeatureTag FullWidth;
    public static DWriteFontFeatureTag HalfForms;
    public static DWriteFontFeatureTag HalantForms;
    public static DWriteFontFeatureTag AlternateHalfWidth;
    public static DWriteFontFeatureTag HistoricalForms;
    public static DWriteFontFeatureTag HorizontalKanaAlternates;
    public static DWriteFontFeatureTag HistoricalLigatures;
    public static DWriteFontFeatureTag HalfWidth;
    public static DWriteFontFeatureTag HojoKanjiForms;
    public static DWriteFontFeatureTag JIS04Forms;
    public static DWriteFontFeatureTag JIS78Forms;
    public static DWriteFontFeatureTag JIS83Forms;
    public static DWriteFontFeatureTag JIS90Forms;
    public static DWriteFontFeatureTag Kerning;
    public static DWriteFontFeatureTag StandardLigatures;
    public static DWriteFontFeatureTag LiningFigures;
    public static DWriteFontFeatureTag LocalizedForms;
    public static DWriteFontFeatureTag MarkPositioning;
    public static DWriteFontFeatureTag MathematicalGreek;
    public static DWriteFontFeatureTag MarkToMarkPositioning;
    public static DWriteFontFeatureTag AlternateAnnotationForms;
    public static DWriteFontFeatureTag NLCKanjiForms;
    public static DWriteFontFeatureTag OldStyleFigures;
    public static DWriteFontFeatureTag Ordinals;
    public static DWriteFontFeatureTag ProportionalAlternateWidth;
    public static DWriteFontFeatureTag PetiteCapitals;
    public static DWriteFontFeatureTag ProportionalFigures;
    public static DWriteFontFeatureTag ProportionalWidths;
    public static DWriteFontFeatureTag QuarterWidths;
    public static DWriteFontFeatureTag RequiredLigatures;
    public static DWriteFontFeatureTag RubyNotationForms;
    public static DWriteFontFeatureTag StylisticAlternates;
    public static DWriteFontFeatureTag ScientificInferiors;
    public static DWriteFontFeatureTag SmallCapitals;
    public static DWriteFontFeatureTag SimplifiedForms;
    public static DWriteFontFeatureTag StylisticSet1;
    public static DWriteFontFeatureTag StylisticSet2;
    public static DWriteFontFeatureTag StylisticSet3;
    public static DWriteFontFeatureTag StylisticSet4;
    public static DWriteFontFeatureTag StylisticSet5;
    public static DWriteFontFeatureTag StylisticSet6;
    public static DWriteFontFeatureTag StylisticSet7;
    public static DWriteFontFeatureTag StylisticSet8;
    public static DWriteFontFeatureTag StylisticSet9;
    public static DWriteFontFeatureTag StylisticSet10;
    public static DWriteFontFeatureTag StylisticSet11;
    public static DWriteFontFeatureTag StylisticSet12;
    public static DWriteFontFeatureTag StylisticSet13;
    public static DWriteFontFeatureTag StylisticSet14;
    public static DWriteFontFeatureTag StylisticSet15;
    public static DWriteFontFeatureTag StylisticSet16;
    public static DWriteFontFeatureTag StylisticSet17;
    public static DWriteFontFeatureTag StylisticSet18;
    public static DWriteFontFeatureTag StylisticSet19;
    public static DWriteFontFeatureTag StylisticSet20;
    public static DWriteFontFeatureTag Subscript;
    public static DWriteFontFeatureTag Superscript;
    public static DWriteFontFeatureTag Swash;
    public static DWriteFontFeatureTag Titling;
    public static DWriteFontFeatureTag TraditionalNameForms;
    public static DWriteFontFeatureTag TabularFigures;
    public static DWriteFontFeatureTag TraditionalForms;
    public static DWriteFontFeatureTag ThirdWidths;
    public static DWriteFontFeatureTag Unicase;
    public static DWriteFontFeatureTag SlashedZero;
}
internal class MS.Internal.Text.TextInterface.DWriteMatrix : ValueType {
    public float M11;
    public float M12;
    public float M21;
    public float M22;
    public float Dx;
    public float Dy;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.Text.TextInterface.DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS> : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution *> : ValueType {
    private long <alignment member>;
}
internal class MS.Internal.Text.TextInterface.DWriteTypeConverter : object {
    internal static TextFormattingMode Convert(DWRITE_MEASURING_MODE dwriteMeasuringMode);
    internal static DWRITE_MEASURING_MODE Convert(TextFormattingMode measuringMode);
    internal static InformationalStringID Convert(DWRITE_INFORMATIONAL_STRING_ID dwriteInformationStringID);
    internal static DWRITE_INFORMATIONAL_STRING_ID Convert(InformationalStringID informationStringID);
    internal static Point Convert(DWRITE_GLYPH_OFFSET dwriteGlyphOffset);
    internal static ValueType modopt(MS.Internal.Text.TextInterface.DWriteMatrix) modopt(System.Runtime.CompilerServices.IsBoxed) Convert(DWRITE_MATRIX dwriteMatrix);
    internal static DWRITE_MATRIX Convert(ValueType modopt(MS.Internal.Text.TextInterface.DWriteMatrix) modopt(System.Runtime.CompilerServices.IsBoxed) matrix);
    internal static FontMetrics Convert(DWRITE_FONT_METRICS dwriteFontMetrics);
    internal static DWRITE_FONT_METRICS Convert(FontMetrics fontMetrics);
    internal static DWRITE_FONT_STYLE Convert(FontStyle fontStyle);
    internal static FontStyle Convert(DWRITE_FONT_STYLE fontStyle);
    internal static DWRITE_FONT_STRETCH Convert(FontStretch fontStrech);
    internal static FontStretch Convert(DWRITE_FONT_STRETCH fontStrech);
    internal static FontFaceType Convert(DWRITE_FONT_FACE_TYPE fontFaceType);
    internal static DWRITE_FONT_FACE_TYPE Convert(FontFaceType fontFaceType);
    internal static byte Convert(FontSimulations fontSimulations);
    internal static FontSimulations Convert(DWRITE_FONT_SIMULATIONS fontSimulations);
    internal static FontFileType Convert(DWRITE_FONT_FILE_TYPE dwriteFontFileType);
    internal static DWRITE_FONT_WEIGHT Convert(FontWeight fontWeight);
    internal static FontWeight Convert(DWRITE_FONT_WEIGHT fontWeight);
    internal static DWRITE_FACTORY_TYPE Convert(FactoryType factoryType);
}
internal class MS.Internal.Text.TextInterface.Factory : CriticalHandle {
    private IDWriteFactory* _pFactory;
    private FontCollectionLoader _wpfFontCollectionLoader;
    private FontFileLoader _wpfFontFileLoader;
    private IFontSourceFactory _fontSourceFactory;
    [ThreadStaticAttribute]
private static Dictionary`2<Uri, FILETIME> _timeStampCache;
    [ThreadStaticAttribute]
private static DispatcherOperation _timeStampCacheCleanupOp;
    public bool IsInvalid { get; }
    internal IDWriteFactory* DWriteFactoryAddRef { get; }
    private Factory(FactoryType factoryType, IFontSourceCollectionFactory fontSourceCollectionFactory, IFontSourceFactory fontSourceFactory);
    private static Factory();
    private void Initialize(FactoryType factoryType);
    private static void CleanupTimeStampCache();
    protected sealed virtual bool ReleaseHandle();
    internal IDWriteFactory* get_DWriteFactoryAddRef();
    internal static Factory Create(FactoryType factoryType, IFontSourceCollectionFactory fontSourceCollectionFactory, IFontSourceFactory fontSourceFactory);
    internal static Int32 modopt(System.Runtime.CompilerServices.IsLong) CreateFontFile(IDWriteFactory* factory, FontFileLoader fontFileLoader, Uri filePathUri, IDWriteFontFile** dwriteFontFile);
    internal FontFile CreateFontFile(Uri filePathUri);
    internal FontFace CreateFontFace(Uri filePathUri, UInt32 faceIndex);
    internal FontFace CreateFontFace(Uri filePathUri, UInt32 faceIndex, FontSimulations fontSimulationFlags);
    internal FontCollection GetSystemFontCollection(bool checkForUpdates);
    internal FontCollection GetSystemFontCollection();
    internal FontCollection GetFontCollection(Uri uri);
    internal static bool IsLocalUri(Uri uri);
    internal static DWRITE_MATRIX GetIdentityTransform();
    internal TextAnalyzer CreateTextAnalyzer();
    [ReliabilityContractAttribute("3", "2")]
public virtual bool get_IsInvalid();
}
internal enum MS.Internal.Text.TextInterface.FactoryType : Enum {
    public int value__;
    public static FactoryType Shared;
    public static FactoryType Isolated;
}
internal class MS.Internal.Text.TextInterface.Font : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFont> _font;
    private double _version;
    private FontMetrics _fontMetrics;
    private int _flags;
    private static int _mutex;
    private static Int32 modopt(System.Runtime.CompilerServices.IsConst) _fontFaceCacheSize;
    private static FontFaceCacheEntry[] _fontFaceCache;
    private static int _fontFaceCacheMRU;
    internal double Version { get; }
    internal FontMetrics Metrics { get; }
    internal FontSimulations SimulationFlags { get; }
    internal LocalizedStrings FaceNames { get; }
    internal bool IsSymbolFont { get; }
    internal FontStyle Style { get; }
    internal FontStretch Stretch { get; }
    internal FontWeight Weight { get; }
    internal FontFamily Family { get; }
    internal IntPtr DWriteFontAddRef { get; }
    internal Font(IDWriteFont* font);
    private static Font();
    private FontFace AddFontFaceToCache();
    private FontFace LookupFontFaceSlow();
    private FontFace CreateFontFace();
    internal IntPtr get_DWriteFontAddRef();
    internal FontFamily get_Family();
    internal FontWeight get_Weight();
    internal FontStretch get_Stretch();
    internal FontStyle get_Style();
    internal bool get_IsSymbolFont();
    internal LocalizedStrings get_FaceNames();
    internal FontSimulations get_SimulationFlags();
    internal FontMetrics get_Metrics();
    internal double get_Version();
    internal FontMetrics DisplayMetrics(float emSize, float pixelsPerDip);
    internal static void ResetFontFaceCache();
    internal FontFace GetFontFace();
    internal bool GetInformationalStrings(InformationalStringID informationalStringID, LocalizedStrings& informationalStrings);
    internal bool HasCharacter(UInt32 unicodeValue);
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Text.TextInterface.FontCollection : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontCollection> _fontCollection;
    internal FontFamily Item { get; }
    internal FontFamily Item { get; }
    internal UInt32 FamilyCount { get; }
    internal FontCollection(IDWriteFontCollection* fontCollection);
    internal UInt32 get_FamilyCount();
    internal FontFamily get_Item(string familyName);
    internal FontFamily get_Item(UInt32 familyIndex);
    internal bool FindFamilyName(string familyName, UInt32& index);
    internal Font GetFontFromFontFace(FontFace fontFace);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("0")]
internal class MS.Internal.Text.TextInterface.FontCollectionLoader : object {
    private IFontSourceCollectionFactory _fontSourceCollectionFactory;
    private FontFileLoader _fontFileLoader;
    public FontCollectionLoader(IFontSourceCollectionFactory fontSourceCollectionFactory, FontFileLoader fontFileLoader);
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) CreateEnumeratorFromKey(IntPtr factory, Void modopt(System.Runtime.CompilerServices.IsConst)* collectionKey, UInt32 collectionKeySize, IntPtr* fontFileEnumerator);
}
internal class MS.Internal.Text.TextInterface.FontFace : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontFace> _fontFace;
    private FontMetrics _fontMetrics;
    private int _refCount;
    internal ushort GlyphCount { get; }
    internal FontMetrics Metrics { get; }
    internal bool IsSymbolFont { get; }
    internal FontSimulations SimulationFlags { get; }
    internal UInt32 Index { get; }
    internal FontFaceType Type { get; }
    internal IntPtr DWriteFontFaceAddRef { get; }
    internal IDWriteFontFace* DWriteFontFaceNoAddRef { get; }
    internal FontFace(IDWriteFontFace* fontFace);
    internal IDWriteFontFace* get_DWriteFontFaceNoAddRef();
    internal IntPtr get_DWriteFontFaceAddRef();
    internal FontFaceType get_Type();
    internal UInt32 get_Index();
    internal FontSimulations get_SimulationFlags();
    internal bool get_IsSymbolFont();
    internal FontMetrics get_Metrics();
    internal ushort get_GlyphCount();
    internal FontFile GetFileZero();
    internal void AddRef();
    internal void Release();
    internal void GetDesignGlyphMetrics(UInt16 modopt(System.Runtime.CompilerServices.IsConst)* pGlyphIndices, UInt32 glyphCount, GlyphMetrics* pGlyphMetrics);
    internal void GetDisplayGlyphMetrics(UInt16 modopt(System.Runtime.CompilerServices.IsConst)* pGlyphIndices, UInt32 glyphCount, GlyphMetrics* pGlyphMetrics, float emSize, bool useDisplayNatural, bool isSideways, float pixelsPerDip);
    internal void GetArrayOfGlyphIndices(UInt32 modopt(System.Runtime.CompilerServices.IsConst)* pCodePoints, UInt32 glyphCount, UInt16* pGlyphIndices);
    internal bool TryGetFontTable(OpenTypeTableTag openTypeTableTag, Byte[]& tableData);
    internal bool ReadFontEmbeddingRights(UInt16& fsType);
    private void ~FontFace();
    protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal enum MS.Internal.Text.TextInterface.FontFaceType : Enum {
    public int value__;
    public static FontFaceType CFF;
    public static FontFaceType TrueType;
    public static FontFaceType TrueTypeCollection;
    public static FontFaceType Type1;
    public static FontFaceType Vector;
    public static FontFaceType Bitmap;
    public static FontFaceType Unknown;
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Text.TextInterface.FontFamily : FontList {
    private Font _regularFont;
    internal FontMetrics Metrics { get; }
    internal string OrdinalName { get; }
    internal bool IsComposite { get; }
    internal bool IsPhysical { get; }
    internal LocalizedStrings FamilyNames { get; }
    internal FontFamily(IDWriteFontFamily* fontFamily);
    internal LocalizedStrings get_FamilyNames();
    internal bool get_IsPhysical();
    internal bool get_IsComposite();
    internal string get_OrdinalName();
    internal FontMetrics get_Metrics();
    internal FontMetrics DisplayMetrics(float emSize, float pixelsPerDip);
    internal Font GetFirstMatchingFont(FontWeight weight, FontStretch stretch, FontStyle style);
    internal FontList GetMatchingFonts(FontWeight weight, FontStretch stretch, FontStyle style);
}
internal class MS.Internal.Text.TextInterface.FontFile : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontFile> _fontFile;
    private static NativePointerWrapper<_GUID> _guidForIDWriteLocalFontFileLoader;
    internal IDWriteFontFile* DWriteFontFileNoAddRef { get; }
    private static FontFile();
    internal FontFile(IDWriteFontFile* fontFile);
    private static void ReleaseInterface(IDWriteLocalFontFileLoader** ppInterface);
    internal IDWriteFontFile* get_DWriteFontFileNoAddRef();
    internal bool Analyze(DWRITE_FONT_FILE_TYPE& dwriteFontFileType, DWRITE_FONT_FACE_TYPE& dwriteFontFaceType, UInt32& numberOfFaces, Int32 modopt(System.Runtime.CompilerServices.IsLong)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) hr);
    internal string GetUriPath();
    private void ~FontFile();
    protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
internal class MS.Internal.Text.TextInterface.FontFileEnumerator : object {
    private IEnumerator`1<IFontSource> _fontSourceCollectionEnumerator;
    private FontFileLoader _fontFileLoader;
    private IDWriteFactory* _factory;
    public FontFileEnumerator(IEnumerable`1<IFontSource> fontSourceCollection, FontFileLoader fontFileLoader, IDWriteFactory* factory);
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) MoveNext(Boolean& hasCurrentFile);
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) GetCurrentFontFile(IDWriteFontFile** fontFile);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("0")]
internal class MS.Internal.Text.TextInterface.FontFileLoader : object {
    private IFontSourceFactory _fontSourceFactory;
    public FontFileLoader(IFontSourceFactory fontSourceFactory);
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) CreateStreamFromKey(Void modopt(System.Runtime.CompilerServices.IsConst)* fontFileReferenceKey, UInt32 fontFileReferenceKeySize, IntPtr* fontFileStream);
}
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
internal class MS.Internal.Text.TextInterface.FontFileStream : object {
    private UnmanagedMemoryStream _fontSourceStream;
    private Byte* _fontSourcePointer;
    private long _lastWriteTime;
    public FontFileStream(IFontSource fontSource);
    private void ~FontFileStream();
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) ReadFileFragment(Void modopt(System.Runtime.CompilerServices.IsConst)** fragmentStart, ulong fileOffset, ulong fragmentSize, Void** fragmentContext);
    [ComVisibleAttribute("True")]
public virtual void ReleaseFileFragment(Void* fragmentContext);
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) GetFileSize(UInt64* fileSize);
    [ComVisibleAttribute("True")]
public virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) GetLastWriteTime(UInt64* lastWriteTime);
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal enum MS.Internal.Text.TextInterface.FontFileType : Enum {
    public int value__;
    public static FontFileType Unknown;
    public static FontFileType CFF;
    public static FontFileType TrueType;
    public static FontFileType TrueTypeCollection;
    public static FontFileType Type1PFM;
    public static FontFileType Type1PFB;
    public static FontFileType Vector;
    public static FontFileType Bitmap;
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Text.TextInterface.FontList : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontList> _fontList;
    internal FontCollection FontsCollection { get; }
    internal UInt32 Count { get; }
    internal Font Item { get; }
    protected NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontList> FontListObject { get; }
    internal FontList(IDWriteFontList* fontList);
    protected NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontList> get_FontListObject();
    internal Font get_Item(UInt32 A_0);
    internal UInt32 get_Count();
    internal FontCollection get_FontsCollection();
    public virtual IEnumerator`1<Font> GetEnumerator();
    public sealed virtual override IEnumerator GetEnumerator2();
}
internal class MS.Internal.Text.TextInterface.FontMetrics : object {
    public ushort DesignUnitsPerEm;
    public ushort Ascent;
    public ushort Descent;
    public short LineGap;
    public ushort CapHeight;
    public ushort XHeight;
    public short UnderlinePosition;
    public ushort UnderlineThickness;
    public short StrikethroughPosition;
    public ushort StrikethroughThickness;
    public double LineSpacing { get; }
    public double Baseline { get; }
    public double get_Baseline();
    public double get_LineSpacing();
}
[FlagsAttribute]
internal enum MS.Internal.Text.TextInterface.FontSimulations : Enum {
    public int value__;
    public static FontSimulations None;
    public static FontSimulations Bold;
    public static FontSimulations Oblique;
}
internal enum MS.Internal.Text.TextInterface.FontStretch : Enum {
    public int value__;
    public static FontStretch Undefined;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch Normal;
    public static FontStretch Medium;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
internal enum MS.Internal.Text.TextInterface.FontStyle : Enum {
    public int value__;
    public static FontStyle Normal;
    public static FontStyle Oblique;
    public static FontStyle Italic;
}
internal enum MS.Internal.Text.TextInterface.FontWeight : Enum {
    public int value__;
    public static FontWeight Thin;
    public static FontWeight ExtraLight;
    public static FontWeight UltraLight;
    public static FontWeight Light;
    public static FontWeight Normal;
    public static FontWeight Regular;
    public static FontWeight Medium;
    public static FontWeight DemiBold;
    public static FontWeight SemiBOLD;
    public static FontWeight Bold;
    public static FontWeight ExtraBold;
    public static FontWeight UltraBold;
    public static FontWeight Black;
    public static FontWeight Heavy;
    public static FontWeight ExtraBlack;
    public static FontWeight UltraBlack;
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFont> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFont> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFont>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontCollection> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontCollection> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontCollection>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontFace> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontFace> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontFace>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontFile> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontFile> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontFile>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontList> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontList> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteFontList>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteLocalizedStrings> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteLocalizedStrings> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteLocalizedStrings>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteTextAnalyzer> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteTextAnalyzer> {
    public NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteTextAnalyzer>(IUnknown* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<_GUID> : CriticalHandle {
    public _GUID* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<_GUID>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public _GUID* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS> : CriticalHandle {
    public DWRITE_SCRIPT_ANALYSIS* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public DWRITE_SCRIPT_ANALYSIS* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFont> : CriticalHandle {
    public IDWriteFont* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFont>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteFont* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontCollection> : CriticalHandle {
    public IDWriteFontCollection* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontCollection>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteFontCollection* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontFace> : CriticalHandle {
    public IDWriteFontFace* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontFace>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteFontFace* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontFile> : CriticalHandle {
    public IDWriteFontFile* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontFile>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteFontFile* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontList> : CriticalHandle {
    public IDWriteFontList* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteFontList>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteFontList* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteLocalizedStrings> : CriticalHandle {
    public IDWriteLocalizedStrings* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteLocalizedStrings>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteLocalizedStrings* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution> : CriticalHandle {
    public IDWriteNumberSubstitution* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteNumberSubstitution* get_Value();
}
internal abstract class MS.Internal.Text.TextInterface.Generics.NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteTextAnalyzer> : CriticalHandle {
    public IDWriteTextAnalyzer* Value { get; }
    public bool IsInvalid { get; }
    public NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::IDWriteTextAnalyzer>(Void* pNativePointer);
    public virtual bool get_IsInvalid();
    public IDWriteTextAnalyzer* get_Value();
}
internal class MS.Internal.Text.TextInterface.Generics.NativePointerWrapper<_GUID> : NativePointerCriticalHandle<_GUID> {
    public NativePointerWrapper<_GUID>(_GUID* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.Generics.NativePointerWrapper<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS> : NativePointerCriticalHandle<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS> {
    public NativePointerWrapper<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS>(DWRITE_SCRIPT_ANALYSIS* pNativePointer);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Text.TextInterface.GetNumberSubstitutionList : MulticastDelegate {
    public GetNumberSubstitutionList(object A_0, IntPtr A_1);
    public sealed virtual Void* Invoke(Void* A_0);
    public sealed virtual IAsyncResult BeginInvoke(Void* __unnamed000, AsyncCallback callback, object obj);
    public sealed virtual Void* EndInvoke(IAsyncResult result);
}
internal class MS.Internal.Text.TextInterface.GetScriptAnalysisList : MulticastDelegate {
    public GetScriptAnalysisList(object A_0, IntPtr A_1);
    public sealed virtual Void* Invoke(Void* A_0);
    public sealed virtual IAsyncResult BeginInvoke(Void* __unnamed000, AsyncCallback callback, object obj);
    public sealed virtual Void* EndInvoke(IAsyncResult result);
}
internal class MS.Internal.Text.TextInterface.GlyphMetrics : ValueType {
    public int LeftSideBearing;
    public UInt32 AdvanceWidth;
    public int RightSideBearing;
    public int TopSideBearing;
    public UInt32 AdvanceHeight;
    public int BottomSideBearing;
    public int VerticalOriginY;
}
internal class MS.Internal.Text.TextInterface.GlyphOffset : ValueType {
    public int du;
    public int dv;
}
internal interface MS.Internal.Text.TextInterface.IClassification {
    public abstract virtual void GetCharAttribute(int unicodeScalar, Boolean& isCombining, Boolean& needsCaretInfo, Boolean& isIndic, Boolean& isDigit, Boolean& isLatin, Boolean& isStrong);
}
internal interface MS.Internal.Text.TextInterface.IFontSource {
    public bool IsComposite { get; }
    public Uri Uri { get; }
    public abstract virtual void TestFileOpenable();
    public abstract virtual UnmanagedMemoryStream GetUnmanagedStream();
    public abstract virtual DateTime GetLastWriteTimeUtc();
    public abstract virtual Uri get_Uri();
    public abstract virtual bool get_IsComposite();
}
internal interface MS.Internal.Text.TextInterface.IFontSourceCollection {
}
internal interface MS.Internal.Text.TextInterface.IFontSourceCollectionFactory {
    public abstract virtual IFontSourceCollection Create(string A_0);
}
internal interface MS.Internal.Text.TextInterface.IFontSourceFactory {
    public abstract virtual IFontSource Create(string A_0);
}
internal enum MS.Internal.Text.TextInterface.InformationalStringID : Enum {
    public int value__;
    public static InformationalStringID None;
    public static InformationalStringID CopyrightNotice;
    public static InformationalStringID VersionStrings;
    public static InformationalStringID Trademark;
    public static InformationalStringID Manufacturer;
    public static InformationalStringID Designer;
    public static InformationalStringID DesignerURL;
    public static InformationalStringID Description;
    public static InformationalStringID FontVendorURL;
    public static InformationalStringID LicenseDescription;
    public static InformationalStringID LicenseInfoURL;
    public static InformationalStringID WIN32FamilyNames;
    public static InformationalStringID Win32SubFamilyNames;
    public static InformationalStringID PreferredFamilyNames;
    public static InformationalStringID PreferredSubFamilyNames;
    public static InformationalStringID SampleText;
}
[GuidAttribute("cca920e4-52f0-492b-bfa8-29c72ee0a468")]
[InterfaceTypeAttribute("1")]
internal interface MS.Internal.Text.TextInterface.Interfaces.IDWriteFontCollectionLoaderMirror {
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) CreateEnumeratorFromKey(IntPtr factory, Void modopt(System.Runtime.CompilerServices.IsConst)* collectionKey, UInt32 collectionKeySize, IntPtr* fontFileEnumerator);
}
[GuidAttribute("72755049-5ff7-435d-8348-4be97cfa6c7c")]
[InterfaceTypeAttribute("1")]
internal interface MS.Internal.Text.TextInterface.Interfaces.IDWriteFontFileEnumeratorMirror {
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) MoveNext(Boolean& hasCurrentFile);
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) GetCurrentFontFile(IDWriteFontFile** fontFile);
}
[GuidAttribute("727cad4e-d6af-4c9e-8a08-d695b11caa49")]
[InterfaceTypeAttribute("1")]
internal interface MS.Internal.Text.TextInterface.Interfaces.IDWriteFontFileLoaderMirror {
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) CreateStreamFromKey(Void modopt(System.Runtime.CompilerServices.IsConst)* fontFileReferenceKey, UInt32 fontFileReferenceKeySize, IntPtr* fontFileStream);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")]
internal interface MS.Internal.Text.TextInterface.Interfaces.IDWriteFontFileStreamMirror {
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) ReadFileFragment(Void modopt(System.Runtime.CompilerServices.IsConst)** fragmentStart, ulong fileOffset, ulong fragmentSize, Void** fragmentContext);
    public abstract virtual void ReleaseFileFragment(Void* fragmentContext);
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) GetFileSize(UInt64* fileSize);
    public abstract virtual Int32 modopt(System.Runtime.CompilerServices.IsLong) GetLastWriteTime(UInt64* lastWriteTime);
}
internal class MS.Internal.Text.TextInterface.ItemProps : object {
    private CultureInfo _digitCulture;
    private bool _hasCombiningMark;
    private bool _needsCaretInfo;
    private bool _hasExtendedCharacter;
    private bool _isIndic;
    private bool _isLatin;
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution> _numberSubstitution;
    private NativePointerWrapper<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS> _scriptAnalysis;
    public bool HasCombiningMark { get; }
    public bool IsLatin { get; }
    public bool IsIndic { get; }
    public bool NeedsCaretInfo { get; }
    public bool HasExtendedCharacter { get; }
    public CultureInfo DigitCulture { get; }
    public Void* ScriptAnalysis { get; }
    public Void* NumberSubstitutionNoAddRef { get; }
    public Void* get_NumberSubstitutionNoAddRef();
    public Void* get_ScriptAnalysis();
    public CultureInfo get_DigitCulture();
    public bool get_HasExtendedCharacter();
    public bool get_NeedsCaretInfo();
    public bool get_IsIndic();
    public bool get_IsLatin();
    public bool get_HasCombiningMark();
    public bool CanShapeTogether(ItemProps other);
    public static ItemProps Create(Void* scriptAnalysis, Void* numberSubstitution, CultureInfo digitCulture, bool hasCombiningMark, bool needsCaretInfo, bool hasExtendedCharacter, bool isIndic, bool isLatin);
}
internal class MS.Internal.Text.TextInterface.LocalizedErrorMsgs : object {
    private static string _localizedExceptionMsgEnumeratorNotStarted;
    private static string _localizedExceptionMsgEnumeratorReachedEnd;
    private static object _staticLockForLocalizedExceptionMsgs;
    internal static string EnumeratorReachedEnd { get; internal set; }
    internal static string EnumeratorNotStarted { get; internal set; }
    private static LocalizedErrorMsgs();
    internal static string get_EnumeratorNotStarted();
    internal static void set_EnumeratorNotStarted(string msg);
    internal static string get_EnumeratorReachedEnd();
    internal static void set_EnumeratorReachedEnd(string msg);
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Text.TextInterface.LocalizedStrings : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteLocalizedStrings> _localizedStrings;
    private CultureInfo[] _keys;
    private String[] _values;
    public bool IsReadOnly { get; }
    public int Count { get; }
    public string Item { get; public set; }
    public ICollection`1<string> Values { get; }
    public ICollection`1<CultureInfo> Keys { get; }
    internal UInt32 StringsCount { get; }
    private String[] ValuesArray { get; }
    private CultureInfo[] KeysArray { get; }
    internal LocalizedStrings(IDWriteLocalizedStrings* localizedStrings);
    private UInt32 GetLocaleNameLength(UInt32 index);
    private UInt32 GetStringLength(UInt32 index);
    private CultureInfo[] get_KeysArray();
    private String[] get_ValuesArray();
    internal UInt32 get_StringsCount();
    internal bool FindLocaleName(string localeName, UInt32& index);
    internal string GetLocaleName(UInt32 index);
    internal string GetString(UInt32 index);
    public sealed virtual void Add(KeyValuePair`2<CultureInfo, string> item);
    public sealed virtual void Add(CultureInfo key, string value);
    public sealed virtual bool ContainsKey(CultureInfo key);
    public virtual ICollection`1<CultureInfo> get_Keys();
    public sealed virtual bool Remove(KeyValuePair`2<CultureInfo, string> item);
    public sealed virtual bool Remove(CultureInfo key);
    public sealed virtual bool TryGetValue(CultureInfo key, String& value);
    public virtual ICollection`1<string> get_Values();
    public virtual string get_Item(CultureInfo key);
    public virtual void set_Item(CultureInfo key, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<CultureInfo, string> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] arrayObj, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<KeyValuePair`2<CultureInfo, string>> GetEnumerator();
    public sealed virtual override IEnumerator GetEnumerator2();
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FACTORY_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FONT_FACE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FONT_FILE_TYPE : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_FONT_METRICS : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FONT_SIMULATIONS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FONT_STRETCH : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FONT_STYLE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_FONT_WEIGHT : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_GLYPH_METRICS : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_GLYPH_OFFSET : ValueType {
    private float <alignment member>;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_INFORMATIONAL_STRING_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_MATRIX : ValueType {
    private float <alignment member>;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_MEASURING_MODE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_SCRIPT_ANALYSIS : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum MS.Internal.Text.TextInterface.Native.DWRITE_SCRIPT_SHAPES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_SHAPING_GLYPH_PROPERTIES : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_SHAPING_TEXT_PROPERTIES : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.Text.TextInterface.Native.DWRITE_TYPOGRAPHIC_FEATURES : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFactory : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFont : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontCollection : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontCollectionLoader : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontFace : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontFamily : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontFile : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontFileLoader : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteFontList : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteLocalFontFileLoader : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteLocalizedStrings : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteNumberSubstitution : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteTextAnalysisSink : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteTextAnalysisSource : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IDWriteTextAnalyzer : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class MS.Internal.Text.TextInterface.Native.IUnknown : ValueType {
    private long <alignment member>;
}
internal class MS.Internal.Text.TextInterface.Native.Util : object {
    public static void ConvertHresultToException(Int32 modopt(System.Runtime.CompilerServices.IsLong) hr);
    public static Char modopt(System.Runtime.CompilerServices.IsConst)& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) modopt(System.Runtime.CompilerServices.IsConst) GetPtrToStringChars(string s);
    public static _GUID ToGUID(Guid* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) guid);
    private static void SanitizeAndThrowIfKnownException(Int32 modopt(System.Runtime.CompilerServices.IsLong) hr);
    private static bool IsFullTrustCaller();
}
internal enum MS.Internal.Text.TextInterface.OpenTypeTableTag : Enum {
    public int value__;
    public static OpenTypeTableTag CharToIndexMap;
    public static OpenTypeTableTag ControlValue;
    public static OpenTypeTableTag BitmapData;
    public static OpenTypeTableTag BitmapLocation;
    public static OpenTypeTableTag BitmapScale;
    public static OpenTypeTableTag Editor0;
    public static OpenTypeTableTag Editor1;
    public static OpenTypeTableTag Encryption;
    public static OpenTypeTableTag FontHeader;
    public static OpenTypeTableTag FontProgram;
    public static OpenTypeTableTag GridfitAndScanProc;
    public static OpenTypeTableTag GlyphDirectory;
    public static OpenTypeTableTag GlyphData;
    public static OpenTypeTableTag HoriDeviceMetrics;
    public static OpenTypeTableTag HoriHeader;
    public static OpenTypeTableTag HorizontalMetrics;
    public static OpenTypeTableTag IndexToLoc;
    public static OpenTypeTableTag Kerning;
    public static OpenTypeTableTag LinearThreshold;
    public static OpenTypeTableTag MaxProfile;
    public static OpenTypeTableTag NamingTable;
    public static OpenTypeTableTag OS_2;
    public static OpenTypeTableTag Postscript;
    public static OpenTypeTableTag PreProgram;
    public static OpenTypeTableTag VertDeviceMetrics;
    public static OpenTypeTableTag VertHeader;
    public static OpenTypeTableTag VerticalMetrics;
    public static OpenTypeTableTag PCLT;
    public static OpenTypeTableTag TTO_GSUB;
    public static OpenTypeTableTag TTO_GPOS;
    public static OpenTypeTableTag TTO_GDEF;
    public static OpenTypeTableTag TTO_BASE;
    public static OpenTypeTableTag TTO_JSTF;
}
internal class MS.Internal.Text.TextInterface.TextAnalyzer : object {
    private NativeIUnknownWrapper<MS::Internal::Text::TextInterface::Native::IDWriteTextAnalyzer> _textAnalyzer;
    internal static Char modopt(System.Runtime.CompilerServices.IsConst) CharHyphen;
    internal TextAnalyzer(IDWriteTextAnalyzer* textAnalyzer);
    private static TextAnalyzer();
    private void GetBlankGlyphsForControlCharacters(Char modopt(System.Runtime.CompilerServices.IsConst)* pTextString, UInt32 textLength, FontFace fontFace, ushort blankGlyphIndex, UInt32 maxGlyphCount, UInt16* clusterMap, UInt16* glyphIndices, Int32* pfCanGlyphAlone, UInt32& actualGlyphCount);
    private void GetGlyphPlacementsForControlCharacters(Char modopt(System.Runtime.CompilerServices.IsConst)* pTextString, UInt32 textLength, Font font, TextFormattingMode textFormattingMode, double fontEmSize, double scalingFactor, bool isSideways, float pixelsPerDip, UInt32 glyphCount, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* pGlyphIndices, Int32* glyphAdvances, GlyphOffset[]& glyphOffsets);
    private static void ReleaseItemizationNativeResources(IDWriteFactory** ppFactory, IDWriteTextAnalyzer** ppTextAnalyzer, IDWriteTextAnalysisSource** ppTextAnalysisSource, IDWriteTextAnalysisSink** ppTextAnalysisSink);
    private static IList`1<Span> AnalyzeExtendedAndItemize(TextItemizer textItemizer, Char modopt(System.Runtime.CompilerServices.IsConst)* text, UInt32 length, CultureInfo numberCulture, IClassification classification);
    private static DWRITE_SCRIPT_SHAPES GetScriptShapes(ItemProps itemProps);
    internal static IList`1<Span> Itemize(Char modopt(System.Runtime.CompilerServices.IsConst)* text, UInt32 length, CultureInfo culture, Factory factory, bool isRightToLeftParagraph, CultureInfo numberCulture, bool ignoreUserOverride, UInt32 numberSubstitutionMethod, IClassification classificationUtility, CreateTextAnalysisSink pfnCreateTextAnalysisSink, GetScriptAnalysisList pfnGetScriptAnalysisList, GetNumberSubstitutionList pfnGetNumberSubstitutionList, CreateTextAnalysisSource pfnCreateTextAnalysisSource);
    internal static void AnalyzeExtendedCharactersAndDigits(Char modopt(System.Runtime.CompilerServices.IsConst)* text, UInt32 length, TextItemizer textItemizer, Byte* pCharAttribute, CultureInfo numberCulture, IClassification classificationUtility);
    internal void GetGlyphsAndTheirPlacements(Char modopt(System.Runtime.CompilerServices.IsConst)* textString, UInt32 textLength, Font font, ushort blankGlyphIndex, bool isSideways, bool isRightToLeft, CultureInfo cultureInfo, DWriteFontFeature[][] features, UInt32[] featureRangeLengths, double fontEmSize, double scalingFactor, float pixelsPerDip, TextFormattingMode textFormattingMode, ItemProps itemProps, UInt16[]& clusterMap, UInt16[]& glyphIndices, Int32[]& glyphAdvances, GlyphOffset[]& glyphOffsets);
    internal void GetGlyphs(Char modopt(System.Runtime.CompilerServices.IsConst)* textString, UInt32 textLength, Font font, ushort blankGlyphIndex, bool isSideways, bool isRightToLeft, CultureInfo cultureInfo, DWriteFontFeature[][] features, UInt32[] featureRangeLengths, UInt32 maxGlyphCount, TextFormattingMode textFormattingMode, ItemProps itemProps, UInt16* clusterMap, UInt16* textProps, UInt16* glyphIndices, UInt32* glyphProps, Int32* pfCanGlyphAlone, UInt32& actualGlyphCount);
    internal void GetGlyphPlacements(Char modopt(System.Runtime.CompilerServices.IsConst)* textString, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* clusterMap, UInt16* textProps, UInt32 textLength, UInt16 modopt(System.Runtime.CompilerServices.IsConst)* glyphIndices, UInt32* glyphProps, UInt32 glyphCount, Font font, double fontEmSize, double scalingFactor, bool isSideways, bool isRightToLeft, CultureInfo cultureInfo, DWriteFontFeature[][] features, UInt32[] featureRangeLengths, TextFormattingMode textFormattingMode, ItemProps itemProps, float pixelsPerDip, Int32* glyphAdvances, GlyphOffset[]& glyphOffsets);
}
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
internal class MS.Internal.Text.TextInterface.TextItemizer : object {
    private DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS>* _pScriptAnalysisListHead;
    private DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution *>* _pNumberSubstitutionListHead;
    private List`1<bool> _isDigitList;
    private List`1<UInt32[]> _isDigitListRanges;
    public TextItemizer(DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS>* pScriptAnalysisListHead, DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution *>* pNumberSubstitutionListHead);
    private UInt32 GetNextSmallestPos(DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::DWRITE_SCRIPT_ANALYSIS>** ppScriptAnalysisCurrent, UInt32* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) scriptAnalysisRangeIndex, DWriteTextAnalysisNode<MS::Internal::Text::TextInterface::Native::IDWriteNumberSubstitution *>** ppNumberSubstitutionCurrent, UInt32* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) numberSubstitutionRangeIndex, UInt32* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) isDigitIndex, UInt32* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) isDigitRangeIndex);
    public IList`1<Span> Itemize(CultureInfo numberCulture, Byte* pCharAttribute, UInt32 textLength);
    public void SetIsDigit(UInt32 textPosition, UInt32 textLength, bool isDigit);
}
public static class MS.Internal.TrueTypeSubsetter : object {
    internal static Byte[] ComputeSubset(Void* fontData, int fileSize, Uri sourceUri, int directoryOffset, UInt16[] glyphArray);
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASEAXIS : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASECOORDFORMAT2 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASEFEATMINMAXRECORD : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASEHEADER : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASELANGSYSRECORD : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASEMINMAX : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.BASESCRIPT : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASESCRIPTLIST : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASESCRIPTRECORD : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.BASEVALUES : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.Char_Glyph_Map_List : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.Char_Glyph_Map_List_Ex : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CMAP_FORMAT0 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.CMAP_FORMAT12 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.CMAP_FORMAT4 : ValueType {
    private short <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CMAP_FORMAT6 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CMAP_HEADER : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CMAP_SUBHEADER_GEN : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CMAP_TABLELOC : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.cmapoffsetrecordkeeper : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CODEOFFSETPAIR : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.CONST_TTFACC_FILEBUFFERINFO : ValueType {
    private long <alignment member>;
}
internal class MS.Internal.TtfDelta.ControlTableInit : object {
    private static object _staticLock;
    private static bool _isInitialized;
    private static ControlTableInit();
    public static void Init();
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.DIRECTORY : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.DTTF_HEADER : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.EBLCHEADER : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.FORMAT12_GROUPS : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.FORMAT4_SEGMENTS : ValueType {
    private short <alignment member>;
}
internal class MS.Internal.TtfDelta.GlobalInit : object {
    private static object _staticLock;
    private static bool _isInitialized;
    private static GlobalInit();
    public static void Init();
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GLYF_HEADER : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.glyphoffsetrecordkeeper : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.groupoffsetrecordkeeper : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.GSUBALTERNATESUBSTFORMAT1 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBCOVERAGEFORMAT1 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBCOVERAGEFORMAT2 : ValueType {
    private short <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.GSUBHEADER : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBLIGATURE : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBLIGATURESUBSTFORMAT1 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBLOOKUP : ValueType {
    private short <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.GSUBLOOKUPLIST : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBMULTIPLESUBSTFORMAT1 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.GSUBRANGERECORD : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.GSUBSINGLESUBSTFORMAT1 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.GSUBSINGLESUBSTFORMAT2 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.HDMX : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.HDMX_DEVICE_REC : ValueType {
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.HEAD : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.HHEA : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.ImageDataBlock : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.IndexOffset : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBHEADER : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBTABLE1 : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBTABLE2 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBTABLE3 : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBTABLE4 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBTABLE5 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.INDEXSUBTABLEARRAY : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.JSTFEXTENDERGLYPH : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.JSTFHEADER : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.JSTFSCRIPT : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.JSTFSCRIPTRECORD : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.KERN_FORMAT_0 : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.KERN_HEADER : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.KERN_PAIR : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.KERN_SUB_HEADER : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.LONGXMETRIC : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.LTSH : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.MAXP : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.MORTBINSRCHHEADER : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.MORTLOOKUPSINGLE : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.NAME_HEADER : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.namerecord : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.namerecordstrings : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.NEWOS2 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.OFFSET_TABLE : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.OS2 : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.POST : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.SubTablePointers : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.TTFACC_FILEBUFFERINFO : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.VDMX : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.VDMXGroup : ValueType {
    private short <alignment member>;
}
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.VDMXRatio : ValueType {
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class MS.Internal.TtfDelta.VHEA : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class MS.Internal.TtfDelta.XHEA : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum vc_attributes.AccessType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum vc_attributes.YesNoMaybe : Enum {
    public int value__;
}
