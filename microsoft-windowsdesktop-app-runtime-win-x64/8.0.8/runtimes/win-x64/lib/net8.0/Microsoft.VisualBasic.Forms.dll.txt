[StandardModuleAttribute]
internal class Microsoft.VisualBasic._Interaction : object {
    public static int Shell(string PathName, AppWinStyle Style, bool Wait, int Timeout);
    public static void AppActivateByProcessId(int ProcessId);
    public static void AppActivateByTitle(string Title);
    private static void AppActivateHelper(IntPtr hwndApp, string ProcessId);
    public static string InputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    private static string GetTitleFromAssembly(Assembly CallingAssembly);
    private static string InternalInputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos, IWin32Window ParentWindow);
    public static MsgBoxResult MsgBox(object Prompt, MsgBoxStyle Buttons, object Title);
}
public class Microsoft.VisualBasic.ApplicationServices.ApplicationBase : object {
    private Log _log;
    private AssemblyInfo _info;
    public Log Log { get; }
    public AssemblyInfo Info { get; }
    public CultureInfo Culture { get; }
    public CultureInfo UICulture { get; }
    public string GetEnvironmentVariable(string name);
    public Log get_Log();
    public AssemblyInfo get_Info();
    public CultureInfo get_Culture();
    public CultureInfo get_UICulture();
    public void ChangeCulture(string cultureName);
    public void ChangeUICulture(string cultureName);
}
[EditorBrowsableAttribute("2")]
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.ApplicationServices.ApplyApplicationDefaultsEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Font _Font;
    [CompilerGeneratedAttribute]
private int _MinimumSplashScreenDisplayTime;
    [CompilerGeneratedAttribute]
private HighDpiMode _HighDpiMode;
    public Font Font { get; public set; }
    public int MinimumSplashScreenDisplayTime { get; public set; }
    public HighDpiMode HighDpiMode { get; public set; }
    internal ApplyApplicationDefaultsEventArgs(int minimumSplashScreenDisplayTime, HighDpiMode highDpiMode);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font AutoPropertyValue);
    [CompilerGeneratedAttribute]
public int get_MinimumSplashScreenDisplayTime();
    [CompilerGeneratedAttribute]
public void set_MinimumSplashScreenDisplayTime(int AutoPropertyValue);
    [CompilerGeneratedAttribute]
public HighDpiMode get_HighDpiMode();
    [CompilerGeneratedAttribute]
public void set_HighDpiMode(HighDpiMode AutoPropertyValue);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.ApplyApplicationDefaultsEventHandler : MulticastDelegate {
    public ApplyApplicationDefaultsEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, ApplyApplicationDefaultsEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, ApplyApplicationDefaultsEventArgs e);
}
public class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo : object {
    private Assembly _assembly;
    private string _description;
    private string _title;
    private string _productName;
    private string _companyName;
    private string _trademark;
    private string _copyright;
    public string Description { get; }
    public string CompanyName { get; }
    public string Title { get; }
    public string Copyright { get; }
    public string Trademark { get; }
    public string ProductName { get; }
    public Version Version { get; }
    public string AssemblyName { get; }
    public string DirectoryPath { get; }
    public ReadOnlyCollection`1<Assembly> LoadedAssemblies { get; }
    public string StackTrace { get; }
    public long WorkingSet { get; }
    public AssemblyInfo(Assembly currentAssembly);
    public string get_Description();
    public string get_CompanyName();
    public string get_Title();
    public string get_Copyright();
    public string get_Trademark();
    public string get_ProductName();
    public Version get_Version();
    public string get_AssemblyName();
    public string get_DirectoryPath();
    public ReadOnlyCollection`1<Assembly> get_LoadedAssemblies();
    public string get_StackTrace();
    public long get_WorkingSet();
    private object GetAttribute(Type AttributeType);
}
public enum Microsoft.VisualBasic.ApplicationServices.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode Windows;
    public static AuthenticationMode ApplicationDefined;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.ApplicationServices.CantStartSingleInstanceException : Exception {
    public CantStartSingleInstanceException(string message);
    public CantStartSingleInstanceException(string message, Exception inner);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("Type or member is obsolete")]
protected CantStartSingleInstanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase : ApplicationBase {
    private ReadOnlyCollection`1<string> _commandLineArgs;
    public ReadOnlyCollection`1<string> CommandLineArgs { get; }
    [EditorBrowsableAttribute("2")]
unknown ReadOnlyCollection`1<string> InternalCommandLine {protected set; }
    public ReadOnlyCollection`1<string> get_CommandLineArgs();
    protected void set_InternalCommandLine(ReadOnlyCollection`1<string> value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.ApplicationServices.NoStartupFormException : Exception {
    public NoStartupFormException(string message);
    public NoStartupFormException(string message, Exception inner);
    [EditorBrowsableAttribute("2")]
[ObsoleteAttribute("Type or member obsolete.")]
protected NoStartupFormException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler : MulticastDelegate {
    public ShutdownEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, EventArgs e);
}
public enum Microsoft.VisualBasic.ApplicationServices.ShutdownMode : Enum {
    public int value__;
    public static ShutdownMode AfterMainFormCloses;
    public static ShutdownMode AfterAllFormsClose;
}
[StandardModuleAttribute]
internal class Microsoft.VisualBasic.ApplicationServices.SingleInstanceHelpers : object {
    private static PipeOptions NamedPipeOptions;
    internal static bool TryCreatePipeServer(string pipeName, NamedPipeServerStream& pipeServer);
    [AsyncStateMachineAttribute("Microsoft.VisualBasic.ApplicationServices.SingleInstanceHelpers/VB$StateMachine_2_WaitForClientConnectionsAsync")]
internal static Task WaitForClientConnectionsAsync(NamedPipeServerStream pipeServer, Action`1<String[]> callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualBasic.ApplicationServices.SingleInstanceHelpers/VB$StateMachine_3_SendSecondInstanceArgsAsync")]
internal static Task SendSecondInstanceArgsAsync(string pipeName, String[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualBasic.ApplicationServices.SingleInstanceHelpers/VB$StateMachine_4_ReadArgsAsync")]
private static Task`1<String[]> ReadArgsAsync(NamedPipeServerStream pipeServer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualBasic.ApplicationServices.SingleInstanceHelpers/VB$StateMachine_5_WriteArgsAsync")]
private static Task WriteArgsAsync(NamedPipeClientStream pipeClient, String[] args, CancellationToken cancellationToken);
}
[EditorBrowsableAttribute("2")]
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> _CommandLine;
    public ReadOnlyCollection`1<string> CommandLine { get; }
    public StartupEventArgs(ReadOnlyCollection`1<string> args);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_CommandLine();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler : MulticastDelegate {
    public StartupEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, StartupEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, StartupEventArgs e);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool _BringToForeground;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> _CommandLine;
    public bool BringToForeground { get; public set; }
    public ReadOnlyCollection`1<string> CommandLine { get; }
    public StartupNextInstanceEventArgs(ReadOnlyCollection`1<string> args, bool bringToForegroundFlag);
    [CompilerGeneratedAttribute]
public bool get_BringToForeground();
    [CompilerGeneratedAttribute]
public void set_BringToForeground(bool AutoPropertyValue);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_CommandLine();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler : MulticastDelegate {
    public StartupNextInstanceEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, StartupNextInstanceEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, StartupNextInstanceEventArgs e);
}
[EditorBrowsableAttribute("2")]
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs : ThreadExceptionEventArgs {
    [CompilerGeneratedAttribute]
private bool _ExitApplication;
    public bool ExitApplication { get; public set; }
    public UnhandledExceptionEventArgs(bool exitApplication, Exception exception);
    [CompilerGeneratedAttribute]
public bool get_ExitApplication();
    [CompilerGeneratedAttribute]
public void set_ExitApplication(bool AutoPropertyValue);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler : MulticastDelegate {
    public UnhandledExceptionEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, UnhandledExceptionEventArgs e);
}
public class Microsoft.VisualBasic.ApplicationServices.User : object {
    public string Name { get; }
    [EditorBrowsableAttribute("2")]
public IPrincipal CurrentPrincipal { get; public set; }
    public bool IsAuthenticated { get; }
    protected IPrincipal InternalPrincipal { get; protected set; }
    public string get_Name();
    public IPrincipal get_CurrentPrincipal();
    public void set_CurrentPrincipal(IPrincipal value);
    public bool get_IsAuthenticated();
    public bool IsInRole(string role);
    protected virtual IPrincipal get_InternalPrincipal();
    protected virtual void set_InternalPrincipal(IPrincipal value);
}
public class Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : ConsoleApplicationBase {
    [CompilerGeneratedAttribute]
private ApplyApplicationDefaultsEventHandler ApplyApplicationDefaultsEvent;
    [CompilerGeneratedAttribute]
private StartupEventHandler StartupEvent;
    [CompilerGeneratedAttribute]
private StartupNextInstanceEventHandler StartupNextInstanceEvent;
    [CompilerGeneratedAttribute]
private ShutdownEventHandler ShutdownEvent;
    private static int SECOND_INSTANCE_TIMEOUT;
    internal static int MINIMUM_SPLASH_EXPOSURE_DEFAULT;
    private object _splashLock;
    private WinFormsAppContext _appContext;
    private object _networkAvailabilityChangeLock;
    private List`1<UnhandledExceptionEventHandler> _unhandledExceptionHandlers;
    private bool _processingUnhandledExceptionEvent;
    private bool _turnOnNetworkListener;
    private bool _finishedOnInitialize;
    private List`1<NetworkAvailableEventHandler> _networkAvailabilityEventHandlers;
    private Network _networkObject;
    private bool _isSingleInstance;
    private ShutdownMode _shutdownStyle;
    private bool _enableVisualStyles;
    private bool _didSplashScreen;
    private TaskCompletionSource`1<bool> _splashScreenCompletionSource;
    private AutoResetEvent _formLoadWaiter;
    private Form _splashScreen;
    private int _minimumSplashExposure;
    private Timer _splashTimer;
    private SynchronizationContext _appSynchronizationContext;
    private bool _saveMySettingsOnExit;
    private HighDpiMode _highDpiMode;
    public FormCollection OpenForms { get; }
    protected Form MainForm { get; protected set; }
    public Form SplashScreen { get; public set; }
    [EditorBrowsableAttribute("1")]
public int MinimumSplashScreenDisplayTime { get; public set; }
    [EditorBrowsableAttribute("2")]
protected static bool UseCompatibleTextRendering { get; }
    [EditorBrowsableAttribute("2")]
public ApplicationContext ApplicationContext { get; }
    public bool SaveMySettingsOnExit { get; public set; }
    protected internal ShutdownMode ShutdownStyle { get; protected internal set; }
    protected bool EnableVisualStyles { get; protected set; }
    [EditorBrowsableAttribute("1")]
protected HighDpiMode HighDpiMode { get; protected set; }
    [EditorBrowsableAttribute("2")]
protected bool IsSingleInstance { get; protected set; }
    [SecuritySafeCriticalAttribute]
public WindowsFormsApplicationBase(AuthenticationMode authenticationMode);
    [CompilerGeneratedAttribute]
public void add_ApplyApplicationDefaults(ApplyApplicationDefaultsEventHandler obj);
    [CompilerGeneratedAttribute]
public void remove_ApplyApplicationDefaults(ApplyApplicationDefaultsEventHandler obj);
    [CompilerGeneratedAttribute]
public void add_Startup(StartupEventHandler obj);
    [CompilerGeneratedAttribute]
public void remove_Startup(StartupEventHandler obj);
    [CompilerGeneratedAttribute]
public void add_StartupNextInstance(StartupNextInstanceEventHandler obj);
    [CompilerGeneratedAttribute]
public void remove_StartupNextInstance(StartupNextInstanceEventHandler obj);
    [CompilerGeneratedAttribute]
public void add_Shutdown(ShutdownEventHandler obj);
    [CompilerGeneratedAttribute]
public void remove_Shutdown(ShutdownEventHandler obj);
    public void add_NetworkAvailabilityChanged(NetworkAvailableEventHandler value);
    public void remove_NetworkAvailabilityChanged(NetworkAvailableEventHandler value);
    private void raise_NetworkAvailabilityChanged(object sender, NetworkAvailableEventArgs e);
    public void add_UnhandledException(UnhandledExceptionEventHandler value);
    public void remove_UnhandledException(UnhandledExceptionEventHandler value);
    private void raise_UnhandledException(object sender, UnhandledExceptionEventArgs e);
    [SecuritySafeCriticalAttribute]
public void Run(String[] commandLine);
    public FormCollection get_OpenForms();
    protected Form get_MainForm();
    protected void set_MainForm(Form value);
    public Form get_SplashScreen();
    public void set_SplashScreen(Form value);
    public int get_MinimumSplashScreenDisplayTime();
    public void set_MinimumSplashScreenDisplayTime(int value);
    protected static bool get_UseCompatibleTextRendering();
    public ApplicationContext get_ApplicationContext();
    public bool get_SaveMySettingsOnExit();
    public void set_SaveMySettingsOnExit(bool value);
    public void DoEvents();
    [EditorBrowsableAttribute("2")]
[STAThreadAttribute]
protected virtual bool OnInitialize(ReadOnlyCollection`1<string> commandLineArgs);
    [EditorBrowsableAttribute("2")]
protected virtual bool OnStartup(StartupEventArgs eventArgs);
    [EditorBrowsableAttribute("2")]
[SecuritySafeCriticalAttribute]
protected virtual void OnStartupNextInstance(StartupNextInstanceEventArgs eventArgs);
    [SecuritySafeCriticalAttribute]
[EditorBrowsableAttribute("2")]
protected virtual void OnRun();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateSplashScreen();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateMainForm();
    [EditorBrowsableAttribute("2")]
protected virtual void OnShutdown();
    [EditorBrowsableAttribute("2")]
protected virtual bool OnUnhandledException(UnhandledExceptionEventArgs e);
    [EditorBrowsableAttribute("2")]
protected void ShowSplashScreen();
    [EditorBrowsableAttribute("2")]
[SecuritySafeCriticalAttribute]
protected void HideSplashScreen();
    protected internal ShutdownMode get_ShutdownStyle();
    protected internal void set_ShutdownStyle(ShutdownMode value);
    protected bool get_EnableVisualStyles();
    protected void set_EnableVisualStyles(bool value);
    protected HighDpiMode get_HighDpiMode();
    protected void set_HighDpiMode(HighDpiMode value);
    protected bool get_IsSingleInstance();
    protected void set_IsSingleInstance(bool value);
    private static void ValidateAuthenticationModeEnumValue(AuthenticationMode value, string paramName);
    private static void ValidateShutdownModeEnumValue(ShutdownMode value, string paramName);
    private void DisplaySplash();
    private void MinimumSplashExposureTimeIsUp(object sender, ElapsedEventArgs e);
    private void MainFormLoadingDone(object sender, EventArgs e);
    private void OnUnhandledExceptionEventAdaptor(object sender, ThreadExceptionEventArgs e);
    private void OnStartupNextInstanceMarshallingAdaptor(String[] args);
    private void NetworkAvailableEventAdaptor(object sender, NetworkAvailableEventArgs e);
    private void DoApplicationModel();
    private static string GetApplicationInstanceID(Assembly Entry);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase/VB$StateMachine___Lambda$__96-0")]
private Task _Lambda$__96-0();
}
public enum Microsoft.VisualBasic.AudioPlayMode : Enum {
    public int value__;
    public static AudioPlayMode WaitToComplete;
    public static AudioPlayMode Background;
    public static AudioPlayMode BackgroundLoop;
}
internal class Microsoft.VisualBasic.CompilerServices.ExceptionUtils : object {
    internal static Exception VbMakeException(int hr);
    internal static Exception VbMakeExceptionEx(int number, string sMsg);
    internal static Exception BuildException(int Number, string Description, Boolean& VBDefinedError);
    internal static ArgumentException GetArgumentExceptionWithArgName(string ArgumentName, string ResourceID, String[] PlaceHolders);
    internal static ArgumentNullException GetArgumentNullException(string ArgumentName);
    internal static ArgumentNullException GetArgumentNullException(string ArgumentName, string ResourceID, String[] PlaceHolders);
    internal static DirectoryNotFoundException GetDirectoryNotFoundException(string ResourceID, String[] PlaceHolders);
    internal static FileNotFoundException GetFileNotFoundException(string FileName, string ResourceID, String[] PlaceHolders);
    internal static InvalidOperationException GetInvalidOperationException(string ResourceID, String[] PlaceHolders);
    internal static IOException GetIOException(string ResourceID, String[] PlaceHolders);
    internal static Win32Exception GetWin32Exception(string ResourceID, String[] PlaceHolders);
}
internal class Microsoft.VisualBasic.CompilerServices.FileSystemUtils : object {
    internal static string NormalizeFilePath(string Path, string ParamName);
    internal static string NormalizePath(string Path);
    internal static void CheckFilePathTrailingSeparator(string path, string paramName);
    private static string GetLongPath(string FullPath);
    private static bool IsRoot(string Path);
    private static string RemoveEndingSeparator(string Path);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.HostServices : object {
    private static IVbHost s_host;
    public static IVbHost VBHost { get; public set; }
    public static IVbHost get_VBHost();
    public static void set_VBHost(IVbHost Value);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.VisualBasic.CompilerServices.IVbHost {
    public abstract virtual IWin32Window GetParentWindow();
    public abstract virtual string GetWindowTitle();
}
[ComVisibleAttribute("False")]
internal class Microsoft.VisualBasic.CompilerServices.NativeMethods : object {
    internal static int WaitForInputIdle(LateInitSafeHandleZeroOrMinusOneIsInvalid Process, int Milliseconds);
    internal static IntPtr GetWindow(IntPtr hwnd, int wFlag);
    internal static IntPtr GetDesktopWindow();
    internal static int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);
    internal static int AttachThreadInput(int idAttach, int idAttachTo, int fAttach);
    internal static bool SetForegroundWindow(IntPtr hwnd);
    internal static IntPtr SetFocus(IntPtr hwnd);
    internal static IntPtr FindWindow(String& lpClassName, String& lpWindowName);
    internal static int CloseHandle(IntPtr hObject);
    internal static int WaitForSingleObject(LateInitSafeHandleZeroOrMinusOneIsInvalid hHandle, int dwMilliseconds);
    internal static void GetStartupInfo(STARTUPINFO lpStartupInfo);
    internal static int CreateProcess(string lpApplicationName, string lpCommandLine, SECURITY_ATTRIBUTES lpProcessAttributes, SECURITY_ATTRIBUTES lpThreadAttributes, bool bInheritHandles, int dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO lpStartupInfo, PROCESS_INFORMATION lpProcessInformation);
    internal static bool GlobalMemoryStatusEx(MEMORYSTATUSEX& lpBuffer);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.NativeTypes : object {
    internal static IntPtr s_invalidHandle;
    internal static int GW_HWNDFIRST;
    internal static int GW_HWNDLAST;
    internal static int GW_HWNDNEXT;
    internal static int GW_HWNDPREV;
    internal static int GW_OWNER;
    internal static int GW_CHILD;
    internal static int GW_MAX;
    internal static int STARTF_USESHOWWINDOW;
    internal static int NORMAL_PRIORITY_CLASS;
    private static NativeTypes();
}
[EditorBrowsableAttribute("1")]
[ComVisibleAttribute("False")]
internal class Microsoft.VisualBasic.CompilerServices.SafeNativeMethods : object {
    internal static bool IsWindowEnabled(IntPtr hwnd);
    internal static bool IsWindowVisible(IntPtr hwnd);
    internal static int GetWindowThreadProcessId(IntPtr hwnd, Int32& lpdwProcessId);
}
[ComVisibleAttribute("False")]
internal class Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods : object {
    internal static short GetKeyState(int KeyCode);
    internal static IntPtr LocalFree(IntPtr LocalHandle);
    internal static bool GetDiskFreeSpaceEx(string Directory, Int64& UserSpaceFree, Int64& TotalUserSpace, Int64& TotalFreeSpace);
}
internal class Microsoft.VisualBasic.CompilerServices.Utils : object {
    internal static string GetResourceString(vbErrors ResourceId);
    internal static string GetResourceString(string resourceKey, String[] args);
    internal static CultureInfo GetCultureInfo();
}
internal enum Microsoft.VisualBasic.CompilerServices.vbErrors : Enum {
    public int value__;
    public static vbErrors None;
    public static vbErrors FileNotFound;
    public static vbErrors PermissionDenied;
}
internal class Microsoft.VisualBasic.CompilerServices.VBInputBox : Form {
    private Container components;
    private TextBox TextBox;
    private Label Label;
    private Button OKButton;
    private Button MyCancelButton;
    public string Output;
    internal VBInputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void InitializeInputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    private void OKButton_Click(object sender, EventArgs e);
    private void MyCancelButton_Click(object sender, EventArgs e);
}
public class Microsoft.VisualBasic.Devices.Audio : object {
    private SoundPlayer _sound;
    public void Play(string location);
    public void Play(string location, AudioPlayMode playMode);
    public void Play(Byte[] data, AudioPlayMode playMode);
    public void Play(Stream stream, AudioPlayMode playMode);
    public void PlaySystemSound(SystemSound systemSound);
    public void Stop();
    private void Play(SoundPlayer sound, AudioPlayMode mode);
    private static string ValidateFilename(string location);
    private static void ValidateAudioPlayModeEnum(AudioPlayMode value, string paramName);
}
public class Microsoft.VisualBasic.Devices.Clock : object {
    public DateTime LocalTime { get; }
    public DateTime GmtTime { get; }
    public int TickCount { get; }
    public DateTime get_LocalTime();
    public DateTime get_GmtTime();
    public int get_TickCount();
}
public class Microsoft.VisualBasic.Devices.Computer : ServerComputer {
    private Audio _audio;
    private static ClipboardProxy s_clipboard;
    private static Mouse s_mouse;
    private static Keyboard s_keyboardInstance;
    public Audio Audio { get; }
    public ClipboardProxy Clipboard { get; }
    public Mouse Mouse { get; }
    public Keyboard Keyboard { get; }
    public Screen Screen { get; }
    public Audio get_Audio();
    public ClipboardProxy get_Clipboard();
    public Mouse get_Mouse();
    public Keyboard get_Keyboard();
    public Screen get_Screen();
}
[DebuggerTypeProxyAttribute("Microsoft.VisualBasic.Devices.ComputerInfo/ComputerInfoDebugView")]
public class Microsoft.VisualBasic.Devices.ComputerInfo : object {
    private InternalMemoryStatus _internalMemoryStatus;
    [CLSCompliantAttribute("False")]
public ulong TotalPhysicalMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong AvailablePhysicalMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong TotalVirtualMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong AvailableVirtualMemory { get; }
    public CultureInfo InstalledUICulture { get; }
    public string OSFullName { get; }
    public string OSPlatform { get; }
    public string OSVersion { get; }
    private InternalMemoryStatus MemoryStatus { get; }
    public ulong get_TotalPhysicalMemory();
    public ulong get_AvailablePhysicalMemory();
    public ulong get_TotalVirtualMemory();
    public ulong get_AvailableVirtualMemory();
    public CultureInfo get_InstalledUICulture();
    public string get_OSFullName();
    public string get_OSPlatform();
    public string get_OSVersion();
    private InternalMemoryStatus get_MemoryStatus();
}
public class Microsoft.VisualBasic.Devices.Keyboard : object {
    public bool ShiftKeyDown { get; }
    public bool AltKeyDown { get; }
    public bool CtrlKeyDown { get; }
    public bool CapsLock { get; }
    public bool NumLock { get; }
    public bool ScrollLock { get; }
    public void SendKeys(string keys);
    public void SendKeys(string keys, bool wait);
    public bool get_ShiftKeyDown();
    public bool get_AltKeyDown();
    public bool get_CtrlKeyDown();
    public bool get_CapsLock();
    public bool get_NumLock();
    public bool get_ScrollLock();
}
public class Microsoft.VisualBasic.Devices.Mouse : object {
    public bool ButtonsSwapped { get; }
    public bool WheelExists { get; }
    public int WheelScrollLines { get; }
    public bool get_ButtonsSwapped();
    public bool get_WheelExists();
    public int get_WheelScrollLines();
}
public class Microsoft.VisualBasic.Devices.Network : object {
    private Byte[] _pingBuffer;
    private static int BUFFER_SIZE;
    private static int DEFAULT_TIMEOUT;
    private static int DEFAULT_PING_TIMEOUT;
    private static string DEFAULT_USERNAME;
    private static string DEFAULT_PASSWORD;
    private bool _connected;
    private object _syncObject;
    private List`1<NetworkAvailableEventHandler> _networkAvailabilityEventHandlers;
    private SynchronizationContext _synchronizationContext;
    private SendOrPostCallback _networkAvailabilityChangedCallback;
    public bool IsAvailable { get; }
    private Byte[] PingBuffer { get; }
    public void add_NetworkAvailabilityChanged(NetworkAvailableEventHandler handler);
    public void remove_NetworkAvailabilityChanged(NetworkAvailableEventHandler handler);
    private void raise_NetworkAvailabilityChanged(object sender, NetworkAvailableEventArgs e);
    public bool get_IsAvailable();
    public bool Ping(string hostNameOrAddress);
    public bool Ping(Uri address);
    public bool Ping(string hostNameOrAddress, int timeout);
    public bool Ping(Uri address, int timeout);
    public void DownloadFile(string address, string destinationFileName);
    public void DownloadFile(Uri address, string destinationFileName);
    public void DownloadFile(string address, string destinationFileName, string userName, string password);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password);
    public void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void DownloadFile(Uri address, string destinationFileName, ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(Uri address, string destinationFileName, ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, string address);
    public void UploadFile(string sourceFileName, Uri address);
    public void UploadFile(string sourceFileName, string address, string userName, string password);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password);
    public void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, Uri address, ICredentials networkCredentials, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, Uri address, ICredentials networkCredentials, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    internal void DisconnectListener();
    private void OS_NetworkAvailabilityChangedListener(object sender, EventArgs e);
    private void NetworkAvailabilityChangedHandler(object state);
    private Byte[] get_PingBuffer();
    private static Uri GetUri(string address);
    private static ICredentials GetNetworkCredentials(string userName, string password);
}
public class Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool _IsNetworkAvailable;
    public bool IsNetworkAvailable { get; }
    public NetworkAvailableEventArgs(bool networkAvailable);
    [CompilerGeneratedAttribute]
public bool get_IsNetworkAvailable();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler : MulticastDelegate {
    public NetworkAvailableEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, NetworkAvailableEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, NetworkAvailableEventArgs e);
}
public class Microsoft.VisualBasic.Devices.ServerComputer : object {
    private ComputerInfo _computerInfo;
    private FileSystemProxy _fileIO;
    private Network _network;
    private RegistryProxy _registryInstance;
    private static Clock s_clock;
    public Clock Clock { get; }
    public FileSystemProxy FileSystem { get; }
    public ComputerInfo Info { get; }
    public Network Network { get; }
    public string Name { get; }
    public RegistryProxy Registry { get; }
    public Clock get_Clock();
    public FileSystemProxy get_FileSystem();
    public ComputerInfo get_Info();
    public Network get_Network();
    public string get_Name();
    public RegistryProxy get_Registry();
}
internal class Microsoft.VisualBasic.Devices.WebClientExtended : WebClient {
    private int _timeout;
    private bool _useNonPassiveFtp;
    unknown int Timeout {public set; }
    unknown bool UseNonPassiveFtp {public set; }
    public void set_Timeout(int value);
    public void set_UseNonPassiveFtp(bool value);
    protected virtual WebRequest GetWebRequest(Uri address);
}
public enum Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption : Enum {
    public int value__;
    public static DiskSpaceExhaustedOption ThrowException;
    public static DiskSpaceExhaustedOption DiscardMessages;
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.Logging.FileLogTraceListener : TraceListener {
    private LogFileLocation _location;
    private bool _autoFlush;
    private bool _append;
    private bool _includeHostName;
    private DiskSpaceExhaustedOption _diskSpaceExhaustedBehavior;
    private string _baseFileName;
    private LogFileCreationScheduleOption _logFileDateStamp;
    private long _maxFileSize;
    private long _reserveDiskSpace;
    private string _delimiter;
    private Encoding _encoding;
    private string _fullFileName;
    private string _customLocation;
    private ReferencedStream _stream;
    private DateTime _day;
    private DateTime _firstDayOfWeek;
    private string _hostName;
    private BitArray _propertiesSet;
    private static Dictionary`2<string, ReferencedStream> s_streams;
    private String[] _supportedAttributes;
    private static int PROPERTY_COUNT;
    private static int APPEND_INDEX;
    private static int AUTOFLUSH_INDEX;
    private static int BASEFILENAME_INDEX;
    private static int CUSTOMLOCATION_INDEX;
    private static int DELIMITER_INDEX;
    private static int DISKSPACEEXHAUSTEDBEHAVIOR_INDEX;
    private static int ENCODING_INDEX;
    private static int INCLUDEHOSTNAME_INDEX;
    private static int LOCATION_INDEX;
    private static int LOGFILECREATIONSCHEDULE_INDEX;
    private static int MAXFILESIZE_INDEX;
    private static int RESERVEDISKSPACE_INDEX;
    private static string DATE_FORMAT;
    private static string FILE_EXTENSION;
    private static int MAX_OPEN_ATTEMPTS;
    private static string DEFAULT_NAME;
    private static int MIN_FILE_SIZE;
    private static string KEY_APPEND;
    private static string KEY_APPEND_PASCAL;
    private static string KEY_AUTOFLUSH;
    private static string KEY_AUTOFLUSH_PASCAL;
    private static string KEY_AUTOFLUSH_CAMEL;
    private static string KEY_BASEFILENAME;
    private static string KEY_BASEFILENAME_PASCAL;
    private static string KEY_BASEFILENAME_CAMEL;
    private static string KEY_BASEFILENAME_PASCAL_ALT;
    private static string KEY_BASEFILENAME_CAMEL_ALT;
    private static string KEY_CUSTOMLOCATION;
    private static string KEY_CUSTOMLOCATION_PASCAL;
    private static string KEY_CUSTOMLOCATION_CAMEL;
    private static string KEY_DELIMITER;
    private static string KEY_DELIMITER_PASCAL;
    private static string KEY_DISKSPACEEXHAUSTEDBEHAVIOR;
    private static string KEY_DISKSPACEEXHAUSTEDBEHAVIOR_PASCAL;
    private static string KEY_DISKSPACEEXHAUSTEDBEHAVIOR_CAMEL;
    private static string KEY_ENCODING;
    private static string KEY_ENCODING_PASCAL;
    private static string KEY_INCLUDEHOSTNAME;
    private static string KEY_INCLUDEHOSTNAME_PASCAL;
    private static string KEY_INCLUDEHOSTNAME_CAMEL;
    private static string KEY_LOCATION;
    private static string KEY_LOCATION_PASCAL;
    private static string KEY_LOGFILECREATIONSCHEDULE;
    private static string KEY_LOGFILECREATIONSCHEDULE_PASCAL;
    private static string KEY_LOGFILECREATIONSCHEDULE_CAMEL;
    private static string KEY_MAXFILESIZE;
    private static string KEY_MAXFILESIZE_PASCAL;
    private static string KEY_MAXFILESIZE_CAMEL;
    private static string KEY_RESERVEDISKSPACE;
    private static string KEY_RESERVEDISKSPACE_PASCAL;
    private static string KEY_RESERVEDISKSPACE_CAMEL;
    private static string STACK_DELIMITER;
    public LogFileLocation Location { get; public set; }
    public bool AutoFlush { get; public set; }
    public bool IncludeHostName { get; public set; }
    public bool Append { get; public set; }
    public DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; public set; }
    public string BaseFileName { get; public set; }
    public string FullLogFileName { get; }
    public LogFileCreationScheduleOption LogFileCreationSchedule { get; public set; }
    public long MaxFileSize { get; public set; }
    public long ReserveDiskSpace { get; public set; }
    public string Delimiter { get; public set; }
    public Encoding Encoding { get; public set; }
    public string CustomLocation { get; public set; }
    private string LogFileName { get; }
    private ReferencedStream ListenerStream { get; }
    private string HostName { get; }
    private static FileLogTraceListener();
    public FileLogTraceListener(string name);
    public LogFileLocation get_Location();
    public void set_Location(LogFileLocation value);
    public bool get_AutoFlush();
    public void set_AutoFlush(bool value);
    public bool get_IncludeHostName();
    public void set_IncludeHostName(bool value);
    public bool get_Append();
    public void set_Append(bool value);
    public DiskSpaceExhaustedOption get_DiskSpaceExhaustedBehavior();
    public void set_DiskSpaceExhaustedBehavior(DiskSpaceExhaustedOption value);
    public string get_BaseFileName();
    public void set_BaseFileName(string value);
    public string get_FullLogFileName();
    public LogFileCreationScheduleOption get_LogFileCreationSchedule();
    public void set_LogFileCreationSchedule(LogFileCreationScheduleOption value);
    public long get_MaxFileSize();
    public void set_MaxFileSize(long value);
    public long get_ReserveDiskSpace();
    public void set_ReserveDiskSpace(long value);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_CustomLocation();
    public void set_CustomLocation(string value);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void Flush();
    public virtual void Close();
    protected virtual String[] GetSupportedAttributes();
    protected virtual void Dispose(bool disposing);
    private string get_LogFileName();
    private ReferencedStream get_ListenerStream();
    private ReferencedStream GetStream();
    private void EnsureStreamIsOpen();
    private void CloseCurrentStream();
    private bool DayChanged();
    private bool WeekChanged();
    private static DateTime GetFirstDayOfWeek(DateTime checkDate);
    private void HandleDateChange();
    private bool ResourcesAvailable(long newEntrySize);
    private long GetFreeDiskSpace();
    private Encoding GetFileEncoding(string fileName);
    private string get_HostName();
    private void DemandWritePermission();
    private static void ValidateLogFileLocationEnumValue(LogFileLocation value, string paramName);
    private static void ValidateDiskSpaceExhaustedOptionEnumValue(DiskSpaceExhaustedOption value, string paramName);
    private static void ValidateLogFileCreationScheduleOptionEnumValue(LogFileCreationScheduleOption value, string paramName);
    private static string StackToString(Stack stack);
}
public class Microsoft.VisualBasic.Logging.Log : object {
    private DefaultTraceSource _traceSource;
    private static Dictionary`2<TraceEventType, int> s_idHash;
    private static string WINAPP_SOURCE_NAME;
    private static string DEFAULT_FILE_LOG_TRACE_LISTENER_NAME;
    [EditorBrowsableAttribute("2")]
public TraceSource TraceSource { get; }
    public FileLogTraceListener DefaultFileLogWriter { get; }
    private static Log();
    public Log(string name);
    public void WriteEntry(string message);
    public void WriteEntry(string message, TraceEventType severity);
    public void WriteEntry(string message, TraceEventType severity, int id);
    public void WriteException(Exception ex);
    public void WriteException(Exception ex, TraceEventType severity, string additionalInfo);
    public void WriteException(Exception ex, TraceEventType severity, string additionalInfo, int id);
    public TraceSource get_TraceSource();
    public FileLogTraceListener get_DefaultFileLogWriter();
    protected internal virtual void InitializeWithDefaultsSinceNoConfigExists();
    private void CloseOnProcessExit(object sender, EventArgs e);
    private static Dictionary`2<TraceEventType, int> InitializeIDHash();
    private static int TraceEventTypeToId(TraceEventType traceEventValue);
}
public enum Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption : Enum {
    public int value__;
    public static LogFileCreationScheduleOption None;
    public static LogFileCreationScheduleOption Daily;
    public static LogFileCreationScheduleOption Weekly;
}
public enum Microsoft.VisualBasic.Logging.LogFileLocation : Enum {
    public int value__;
    public static LogFileLocation TempDirectory;
    public static LogFileLocation LocalUserApplicationDirectory;
    public static LogFileLocation CommonApplicationDirectory;
    public static LogFileLocation ExecutableDirectory;
    public static LogFileLocation Custom;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.ClipboardProxy : object {
    public string GetText();
    public string GetText(TextDataFormat format);
    public bool ContainsText();
    public bool ContainsText(TextDataFormat format);
    public void SetText(string text);
    public void SetText(string text, TextDataFormat format);
    public Image GetImage();
    public bool ContainsImage();
    public void SetImage(Image image);
    public Stream GetAudioStream();
    public bool ContainsAudio();
    public void SetAudio(Byte[] audioBytes);
    public void SetAudio(Stream audioStream);
    public StringCollection GetFileDropList();
    public bool ContainsFileDropList();
    public void SetFileDropList(StringCollection filePaths);
    public object GetData(string format);
    public bool ContainsData(string format);
    public void SetData(string format, object data);
    public void Clear();
    [EditorBrowsableAttribute("2")]
public IDataObject GetDataObject();
    [EditorBrowsableAttribute("2")]
public void SetDataObject(DataObject data);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.FileSystemProxy : object {
    private SpecialDirectoriesProxy _specialDirectoriesProxy;
    public ReadOnlyCollection`1<DriveInfo> Drives { get; }
    public SpecialDirectoriesProxy SpecialDirectories { get; }
    public string CurrentDirectory { get; public set; }
    public ReadOnlyCollection`1<DriveInfo> get_Drives();
    public SpecialDirectoriesProxy get_SpecialDirectories();
    public string get_CurrentDirectory();
    public void set_CurrentDirectory(string value);
    public bool DirectoryExists(string directory);
    public bool FileExists(string file);
    public void CreateDirectory(string directory);
    public DirectoryInfo GetDirectoryInfo(string directory);
    public FileInfo GetFileInfo(string file);
    public DriveInfo GetDriveInfo(string drive);
    public ReadOnlyCollection`1<string> GetFiles(string directory);
    public ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public ReadOnlyCollection`1<string> GetDirectories(string directory);
    public ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    public ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    public string GetParentPath(string path);
    public string CombinePath(string baseDirectory, string relativePath);
    public string GetName(string path);
    public string GetTempFileName();
    public string ReadAllText(string file);
    public string ReadAllText(string file, Encoding encoding);
    public Byte[] ReadAllBytes(string file);
    public void WriteAllText(string file, string text, bool append);
    public void WriteAllText(string file, string text, bool append, Encoding encoding);
    public void WriteAllBytes(string file, Byte[] data, bool append);
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public void DeleteFile(string file);
    public void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public void RenameFile(string file, string newName);
    public void RenameDirectory(string directory, string newName);
    public TextFieldParser OpenTextFieldParser(string file);
    public TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public StreamReader OpenTextFileReader(string file);
    public StreamReader OpenTextFileReader(string file, Encoding encoding);
    public StreamWriter OpenTextFileWriter(string file, bool append);
    public StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.Internal.ContextValue`1 : object {
    private string _contextKey;
    private static ThreadLocal`1<IDictionary> s_threadLocal;
    public T Value { get; public set; }
    public T get_Value();
    public void set_Value(T value);
    private static IDictionary GetDictionary();
}
internal class Microsoft.VisualBasic.MyServices.Internal.ProgressDialog : Form {
    [CompilerGeneratedAttribute]
private UserHitCancelEventHandler UserHitCancelEvent;
    private bool _closing;
    private bool _canceled;
    private ManualResetEvent _formClosableSemaphore;
    private bool _closeDialogInvoked;
    private static int WS_THICKFRAME;
    private static int BORDER_SIZE;
    [CompilerGeneratedAttribute]
[AccessedThroughPropertyAttribute("LabelInfo")]
private Label _LabelInfo;
    [CompilerGeneratedAttribute]
[AccessedThroughPropertyAttribute("ProgressBarWork")]
private ProgressBar _ProgressBarWork;
    [CompilerGeneratedAttribute]
[AccessedThroughPropertyAttribute("ButtonCloseDialog")]
private Button _ButtonCloseDialog;
    private IContainer _components;
    public string LabelText { get; public set; }
    public ManualResetEvent FormClosableSemaphore { get; }
    public bool UserCanceledTheDialog { get; }
    protected CreateParams CreateParams { get; }
    internal Label LabelInfo { get; internal set; }
    internal ProgressBar ProgressBarWork { get; internal set; }
    internal Button ButtonCloseDialog { get; internal set; }
    [CompilerGeneratedAttribute]
public void add_UserHitCancel(UserHitCancelEventHandler obj);
    [CompilerGeneratedAttribute]
public void remove_UserHitCancel(UserHitCancelEventHandler obj);
    public void Increment(int incrementAmount);
    public void CloseDialog();
    public void ShowProgressDialog();
    public string get_LabelText();
    public void set_LabelText(string Value);
    public ManualResetEvent get_FormClosableSemaphore();
    public void IndicateClosing();
    public bool get_UserCanceledTheDialog();
    protected virtual CreateParams get_CreateParams();
    private void ButtonCloseDialog_Click(object sender, EventArgs e);
    private void ProgressDialog_FormClosing(object sender, FormClosingEventArgs e);
    private void ProgressDialog_Resize(object sender, EventArgs e);
    private void ProgressDialog_Activated(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
internal virtual Label get_LabelInfo();
    [CompilerGeneratedAttribute]
internal virtual void set_LabelInfo(Label WithEventsValue);
    [CompilerGeneratedAttribute]
internal virtual ProgressBar get_ProgressBarWork();
    [CompilerGeneratedAttribute]
internal virtual void set_ProgressBarWork(ProgressBar WithEventsValue);
    [CompilerGeneratedAttribute]
internal virtual Button get_ButtonCloseDialog();
    [CompilerGeneratedAttribute]
internal virtual void set_ButtonCloseDialog(Button WithEventsValue);
    [DebuggerStepThroughAttribute]
private void InitializeComponent();
}
internal class Microsoft.VisualBasic.MyServices.Internal.WebClientCopy : object {
    [CompilerGeneratedAttribute]
[AccessedThroughPropertyAttribute("m_WebClient")]
private WebClient _m_WebClient;
    [CompilerGeneratedAttribute]
[AccessedThroughPropertyAttribute("m_ProgressDialog")]
private ProgressDialog _m_ProgressDialog;
    private Exception _exceptionEncounteredDuringFileTransfer;
    private int _percentage;
    private WebClient m_WebClient { get; private set; }
    private ProgressDialog m_ProgressDialog { get; private set; }
    public WebClientCopy(WebClient client, ProgressDialog dialog);
    public void DownloadFile(Uri address, string destinationFileName);
    public void UploadFile(string sourceFileName, Uri address);
    private void InvokeIncrement(int progressPercentage);
    private void CloseProgressDialog();
    private void m_WebClient_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e);
    private void m_WebClient_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e);
    private void m_WebClient_UploadFileCompleted(object sender, UploadFileCompletedEventArgs e);
    private void m_WebClient_UploadProgressChanged(object sender, UploadProgressChangedEventArgs e);
    private void m_ProgressDialog_UserCancelledEvent();
    [CompilerGeneratedAttribute]
private virtual WebClient get_m_WebClient();
    [CompilerGeneratedAttribute]
private virtual void set_m_WebClient(WebClient WithEventsValue);
    [CompilerGeneratedAttribute]
private virtual ProgressDialog get_m_ProgressDialog();
    [CompilerGeneratedAttribute]
private virtual void set_m_ProgressDialog(ProgressDialog WithEventsValue);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.RegistryProxy : object {
    public RegistryKey CurrentUser { get; }
    public RegistryKey LocalMachine { get; }
    public RegistryKey ClassesRoot { get; }
    public RegistryKey Users { get; }
    public RegistryKey PerformanceData { get; }
    public RegistryKey CurrentConfig { get; }
    public RegistryKey get_CurrentUser();
    public RegistryKey get_LocalMachine();
    public RegistryKey get_ClassesRoot();
    public RegistryKey get_Users();
    public RegistryKey get_PerformanceData();
    public RegistryKey get_CurrentConfig();
    public object GetValue(string keyName, string valueName, object defaultValue);
    public void SetValue(string keyName, string valueName, object value);
    public void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy : object {
    public string MyDocuments { get; }
    public string MyMusic { get; }
    public string MyPictures { get; }
    public string Desktop { get; }
    public string Programs { get; }
    public string ProgramFiles { get; }
    public string Temp { get; }
    public string CurrentUserApplicationData { get; }
    public string AllUsersApplicationData { get; }
    public string get_MyDocuments();
    public string get_MyMusic();
    public string get_MyPictures();
    public string get_Desktop();
    public string get_Programs();
    public string get_ProgramFiles();
    public string get_Temp();
    public string get_CurrentUserApplicationData();
    public string get_AllUsersApplicationData();
}
internal class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo _Culture;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ID53 { get; }
    internal static string ID70 { get; }
    internal static string Argument_InvalidValue1 { get; }
    internal static string Argument_InvalidValueType2 { get; }
    internal static string Argument_InvalidNullValue1 { get; }
    internal static string ProcessNotFound { get; }
    internal static string Mouse_NoMouseIsPresent { get; }
    internal static string Mouse_NoWheelIsPresent { get; }
    internal static string IO_FileExists_Path { get; }
    internal static string IO_FileNotFound_Path { get; }
    internal static string IO_FilePathException { get; }
    internal static string General_ArgumentNullException { get; }
    internal static string General_PropertyNothing { get; }
    internal static string ApplicationLog_FreeSpaceError { get; }
    internal static string ApplicationLog_FileExceedsMaximumSize { get; }
    internal static string ApplicationLog_ReservedSpaceEncroached { get; }
    internal static string ApplicationLog_NegativeNumber { get; }
    internal static string ApplicationLogBaseNameNull { get; }
    internal static string ApplicationLogNumberTooSmall { get; }
    internal static string ApplicationLog_ExhaustedPossibleStreamNames { get; }
    internal static string Network_InvalidUriString { get; }
    internal static string Network_BadConnectionTimeout { get; }
    internal static string Network_NetworkNotAvailable { get; }
    internal static string Network_UploadAddressNeedsFilename { get; }
    internal static string Network_DownloadNeedsFilename { get; }
    internal static string ProgressDialogDownloadingTitle { get; }
    internal static string ProgressDialogUploadingTitle { get; }
    internal static string ProgressDialogDownloadingLabel { get; }
    internal static string ProgressDialogUploadingLabel { get; }
    internal static string DiagnosticInfo_Memory { get; }
    internal static string DiagnosticInfo_FullOSName { get; }
    internal static string AppModel_NoStartupForm { get; }
    internal static string AppModel_SingleInstanceCantConnect { get; }
    internal static string AppModel_SplashAndMainFormTheSame { get; }
    internal static string EnvVarNotFound_Name { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo AutoPropertyValue);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_ID53();
    internal static string get_ID70();
    internal static string get_Argument_InvalidValue1();
    internal static string get_Argument_InvalidValueType2();
    internal static string get_Argument_InvalidNullValue1();
    internal static string get_ProcessNotFound();
    internal static string get_Mouse_NoMouseIsPresent();
    internal static string get_Mouse_NoWheelIsPresent();
    internal static string get_IO_FileExists_Path();
    internal static string get_IO_FileNotFound_Path();
    internal static string get_IO_FilePathException();
    internal static string get_General_ArgumentNullException();
    internal static string get_General_PropertyNothing();
    internal static string get_ApplicationLog_FreeSpaceError();
    internal static string get_ApplicationLog_FileExceedsMaximumSize();
    internal static string get_ApplicationLog_ReservedSpaceEncroached();
    internal static string get_ApplicationLog_NegativeNumber();
    internal static string get_ApplicationLogBaseNameNull();
    internal static string get_ApplicationLogNumberTooSmall();
    internal static string get_ApplicationLog_ExhaustedPossibleStreamNames();
    internal static string get_Network_InvalidUriString();
    internal static string get_Network_BadConnectionTimeout();
    internal static string get_Network_NetworkNotAvailable();
    internal static string get_Network_UploadAddressNeedsFilename();
    internal static string get_Network_DownloadNeedsFilename();
    internal static string get_ProgressDialogDownloadingTitle();
    internal static string get_ProgressDialogUploadingTitle();
    internal static string get_ProgressDialogDownloadingLabel();
    internal static string get_ProgressDialogUploadingLabel();
    internal static string get_DiagnosticInfo_Memory();
    internal static string get_DiagnosticInfo_FullOSName();
    internal static string get_AppModel_NoStartupForm();
    internal static string get_AppModel_SingleInstanceCantConnect();
    internal static string get_AppModel_SplashAndMainFormTheSame();
    internal static string get_EnvVarNotFound_Name();
}
