internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
public class Microsoft.Windows.Themes.DataGridHeaderBorder : Border {
    public static DependencyProperty IsHoveredProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty IsClickableProperty;
    public static DependencyProperty SortDirectionProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    private static List`1<Freezable> _freezableCache;
    private static object _cacheAccess;
    public bool IsHovered { get; public set; }
    public bool IsPressed { get; public set; }
    public bool IsClickable { get; public set; }
    public Nullable`1<ListSortDirection> SortDirection { get; public set; }
    public bool IsSelected { get; public set; }
    public Orientation Orientation { get; public set; }
    private bool UsingBorderImplementation { get; }
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    private Thickness DefaultPadding { get; }
    private Nullable`1<Thickness> ThemeDefaultPadding { get; }
    private static DataGridHeaderBorder();
    public bool get_IsHovered();
    public void set_IsHovered(bool value);
    public bool get_IsPressed();
    public void set_IsPressed(bool value);
    public bool get_IsClickable();
    public void set_IsClickable(bool value);
    public Nullable`1<ListSortDirection> get_SortDirection();
    public void set_SortDirection(Nullable`1<ListSortDirection> value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private bool get_UsingBorderImplementation();
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private Thickness get_DefaultPadding();
    protected virtual void OnRender(DrawingContext dc);
    private static double Max0(double d);
    private static void EnsureCache(int size);
    private static void ReleaseCache();
    private static Freezable GetCachedFreezable(int index);
    private static void CacheFreezable(Freezable freezable, int index);
    private Nullable`1<Thickness> get_ThemeDefaultPadding();
    private void RenderTheme(DrawingContext dc);
}
internal class Microsoft.Windows.Themes.KnownTypeHelper : ThemeKnownTypeHelper {
    private static KnownTypeHelper();
    public virtual XamlType GetKnownXamlType(string name);
    private static WpfKnownMember Create_BamlProperty_ScrollChrome_ScrollGlyph();
    private static WpfKnownType Create_BamlType_ScrollChrome();
    private static WpfKnownType Create_BamlType_ScrollGlyph();
    private static WpfKnownType Create_BamlType_SystemDropShadowChrome();
}
public static class Microsoft.Windows.Themes.PlatformCulture : object {
    private static CultureInfo _platformCulture;
    public static FlowDirection FlowDirection { get; }
    public static FlowDirection get_FlowDirection();
}
public class Microsoft.Windows.Themes.ProgressBarBrushConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Windows.Themes.ScrollChrome : FrameworkElement {
    public static DependencyProperty ScrollGlyphProperty;
    public static DependencyProperty RenderMouseOverProperty;
    public static DependencyProperty RenderPressedProperty;
    private static SolidColorBrush _commonThumbFill;
    private static SolidColorBrush _commonThumbHoverFill;
    private static SolidColorBrush _commonThumbPressedFill;
    private static Pen _commonThumbBorder;
    private static Pen _commonThumbHoverBorder;
    private static Pen _commonThumbPressedBorder;
    private static SolidColorBrush _commonThumbEnabledGlyph;
    private static object _resourceAccess;
    private ScrollGlyph _scrollGlyph;
    private ScrollGlyph ScrollGlyph { get; }
    public bool RenderMouseOver { get; public set; }
    public bool RenderPressed { get; public set; }
    private static SolidColorBrush CommonThumbFill { get; }
    private static SolidColorBrush CommonThumbHoverFill { get; }
    private static SolidColorBrush CommonThumbPressedFill { get; }
    private SolidColorBrush Fill { get; }
    private static Pen CommonThumbBorder { get; }
    private static Pen CommonThumbHoverBorder { get; }
    private static Pen CommonThumbPressedBorder { get; }
    private Pen Border { get; }
    private SolidColorBrush CommonThumbEnabledGlyph { get; }
    private SolidColorBrush Glyph { get; }
    private static ScrollChrome();
    public static ScrollGlyph GetScrollGlyph(DependencyObject element);
    public static void SetScrollGlyph(DependencyObject element, ScrollGlyph value);
    private ScrollGlyph get_ScrollGlyph();
    private static bool IsValidScrollGlyph(object o);
    public bool get_RenderMouseOver();
    public void set_RenderMouseOver(bool value);
    public bool get_RenderPressed();
    public void set_RenderPressed(bool value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    private void DrawBorders(DrawingContext dc, Rect& bounds);
    private void DrawGlyph(DrawingContext dc, Rect& bounds);
    private void DrawHorizontalGripper(DrawingContext dc, Brush brush, Rect bounds);
    private void DrawVerticalGripper(DrawingContext dc, Brush brush, Rect bounds);
    private static SolidColorBrush get_CommonThumbFill();
    private static SolidColorBrush get_CommonThumbHoverFill();
    private static SolidColorBrush get_CommonThumbPressedFill();
    private SolidColorBrush get_Fill();
    private static Pen get_CommonThumbBorder();
    private static Pen get_CommonThumbHoverBorder();
    private static Pen get_CommonThumbPressedBorder();
    private Pen get_Border();
    private SolidColorBrush get_CommonThumbEnabledGlyph();
    private SolidColorBrush get_Glyph();
}
public enum Microsoft.Windows.Themes.ScrollGlyph : Enum {
    public int value__;
    public static ScrollGlyph None;
    public static ScrollGlyph VerticalGripper;
    public static ScrollGlyph HorizontalGripper;
}
public class Microsoft.Windows.Themes.SystemDropShadowChrome : Decorator {
    public static DependencyProperty ColorProperty;
    public static DependencyProperty CornerRadiusProperty;
    private static double ShadowDepth;
    private static int TopLeft;
    private static int Top;
    private static int TopRight;
    private static int Left;
    private static int Center;
    private static int Right;
    private static int BottomLeft;
    private static int Bottom;
    private static int BottomRight;
    private static Brush[] _commonBrushes;
    private static CornerRadius _commonCornerRadius;
    private static object _resourceAccess;
    private Brush[] _brushes;
    public Color Color { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    private static SystemDropShadowChrome();
    public Color get_Color();
    public void set_Color(Color value);
    private static bool IsCornerRadiusValid(object value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    private static void ClearBrushes(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnRender(DrawingContext drawingContext);
    private static GradientStopCollection CreateStops(Color c, double cornerRadius);
    private static Brush[] CreateBrushes(Color c, CornerRadius cornerRadius);
    private Brush[] GetBrushes(Color c, CornerRadius cornerRadius);
}
