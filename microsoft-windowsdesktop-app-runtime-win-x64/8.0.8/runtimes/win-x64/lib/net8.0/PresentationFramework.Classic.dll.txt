internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
public class Microsoft.Windows.Themes.ClassicBorderDecorator : Decorator {
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty BorderStyleProperty;
    private static Brush _classicBorderBrush;
    private static object _brushLock;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BorderThicknessProperty;
    private CustomBrushCache _brushCache;
    private BorderGeometryCache _borderGeometryCache;
    private TabGeometryCache _tabCache;
    private static Geometry _topLeftArcGeometry;
    private static Geometry _bottomRightArcGeometry;
    private static object _resourceAccess;
    public Brush Background { get; public set; }
    public ClassicBorderStyle BorderStyle { get; public set; }
    public static Brush ClassicBorderBrush { get; }
    public Brush BorderBrush { get; public set; }
    public Thickness BorderThickness { get; public set; }
    private Brush LightBrush { get; }
    private Brush LightLightBrush { get; }
    private Brush DarkBrush { get; }
    private Brush DarkDarkBrush { get; }
    private static Geometry TopLeftArcGeometry { get; }
    private static Geometry BottomRightArcGeometry { get; }
    private static ClassicBorderDecorator();
    public Brush get_Background();
    public void set_Background(Brush value);
    private static HlsColor RgbToHls(RgbColor rgbColor);
    private static HlsColor RgbToHls(RgbColor rgbColor, Boolean& isHueDefined, Boolean& isSaturationDefined);
    private static RgbColor HlsToRgb(HlsColor hlsColor);
    private static float HlsValue(float n1, float n2, float hue);
    private static Color GetControlLightLightColor(Color controlColor);
    private static Color GetControlDarkColor(Color controlColor);
    private static void BorderBrushesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ClassicBorderStyle get_BorderStyle();
    public void set_BorderStyle(ClassicBorderStyle value);
    private static bool IsValidBorderStyle(object o);
    public static Brush get_ClassicBorderBrush();
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    private static bool IsValidBorderThickness(object o);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    private static Size HelperCollapseThickness(Thickness th);
    private static Rect HelperDeflateRect(Rect rt, Thickness thick);
    private double GetClassicBorderThickness();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private static Thickness ScaleThickness(Thickness t, double s);
    protected virtual void OnRender(DrawingContext drawingContext);
    private DoubleCollection GetPixelSnappingGuidelines(double length, double thickness1, double thickness2, int steps);
    private static PathFigure GenerateRectFigure(Rect rect);
    private static Geometry GenerateBorderGeometry(Rect rect, Thickness borderThickness);
    private Geometry GetBorder(Rect bounds, Thickness borderThickness);
    private static bool IsSimpleBorderBrush(Brush borderBrush);
    private void DrawBorder(Brush borderBrush, Thickness borderThickness, DrawingContext dc, Rect& bounds);
    private void DrawBorderPair(Brush highlight, Brush shadow, Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawRaisedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawRaisedPressedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawSunkenBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawEtchedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawHorizontalLine(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawVerticalLine(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private bool IsTabStyle(ClassicBorderStyle style);
    private Geometry GenerateTabTopHighlightGeometry(Rect bounds, bool outerBorder);
    private Geometry GenerateTabTopShadowGeometry(Rect bounds, bool outerBorder);
    private Geometry GetHighlight1(Rect bounds);
    private Geometry GetShadow1(Rect bounds);
    private Geometry GetHighlight2(Rect bounds);
    private Geometry GetShadow2(Rect bounds);
    private MatrixTransform GetTabTransform(ClassicBorderStyle style, double xOffset, double yOffset);
    private void DrawTabLeft(DrawingContext dc, Rect& bounds);
    private void DrawTabTop(DrawingContext dc, Rect& bounds);
    private void DrawTabRight(DrawingContext dc, Rect& bounds);
    private void DrawTabBottom(DrawingContext dc, Rect& bounds);
    private void DrawThinRaisedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawThinPressedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawAltRaisedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawAltPressedBorder(Thickness singleThickness, DrawingContext dc, Rect& bounds);
    private void DrawRadioButtonBorder(DrawingContext dc, Rect& bounds);
    private Brush get_LightBrush();
    private Brush get_LightLightBrush();
    private Brush get_DarkBrush();
    private Brush get_DarkDarkBrush();
    private static Geometry get_TopLeftArcGeometry();
    private static Geometry get_BottomRightArcGeometry();
}
public enum Microsoft.Windows.Themes.ClassicBorderStyle : Enum {
    public int value__;
    public static ClassicBorderStyle None;
    public static ClassicBorderStyle Raised;
    public static ClassicBorderStyle RaisedPressed;
    public static ClassicBorderStyle RaisedFocused;
    public static ClassicBorderStyle Sunken;
    public static ClassicBorderStyle Etched;
    public static ClassicBorderStyle HorizontalLine;
    public static ClassicBorderStyle VerticalLine;
    public static ClassicBorderStyle TabRight;
    public static ClassicBorderStyle TabTop;
    public static ClassicBorderStyle TabLeft;
    public static ClassicBorderStyle TabBottom;
    public static ClassicBorderStyle ThinRaised;
    public static ClassicBorderStyle ThinPressed;
    public static ClassicBorderStyle AltRaised;
    public static ClassicBorderStyle AltPressed;
    public static ClassicBorderStyle RadioButton;
}
public class Microsoft.Windows.Themes.DataGridHeaderBorder : Border {
    public static DependencyProperty IsHoveredProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty IsClickableProperty;
    public static DependencyProperty SortDirectionProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    private static List`1<Freezable> _freezableCache;
    private static object _cacheAccess;
    private static DependencyProperty ControlBrushProperty;
    public bool IsHovered { get; public set; }
    public bool IsPressed { get; public set; }
    public bool IsClickable { get; public set; }
    public Nullable`1<ListSortDirection> SortDirection { get; public set; }
    public bool IsSelected { get; public set; }
    public Orientation Orientation { get; public set; }
    private bool UsingBorderImplementation { get; }
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    private Thickness DefaultPadding { get; }
    private Nullable`1<Thickness> ThemeDefaultPadding { get; }
    private static DataGridHeaderBorder();
    public bool get_IsHovered();
    public void set_IsHovered(bool value);
    public bool get_IsPressed();
    public void set_IsPressed(bool value);
    public bool get_IsClickable();
    public void set_IsClickable(bool value);
    public Nullable`1<ListSortDirection> get_SortDirection();
    public void set_SortDirection(Nullable`1<ListSortDirection> value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private bool get_UsingBorderImplementation();
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private Thickness get_DefaultPadding();
    protected virtual void OnRender(DrawingContext dc);
    private static double Max0(double d);
    private static void EnsureCache(int size);
    private static void ReleaseCache();
    private static Freezable GetCachedFreezable(int index);
    private static void CacheFreezable(Freezable freezable, int index);
    private Nullable`1<Thickness> get_ThemeDefaultPadding();
    private Brush EnsureControlBrush();
    private void RenderTheme(DrawingContext dc);
}
internal class Microsoft.Windows.Themes.KnownTypeHelper : ThemeKnownTypeHelper {
    private static KnownTypeHelper();
    public virtual XamlType GetKnownXamlType(string name);
    private static WpfKnownMember Create_BamlProperty_ClassicBorderDecorator_BorderStyle();
    private static WpfKnownType Create_BamlType_ClassicBorderDecorator();
    private static WpfKnownType Create_BamlType_ClassicBorderStyle();
    private static WpfKnownType Create_BamlType_SystemDropShadowChrome();
}
public static class Microsoft.Windows.Themes.PlatformCulture : object {
    private static CultureInfo _platformCulture;
    public static FlowDirection FlowDirection { get; }
    public static FlowDirection get_FlowDirection();
}
public class Microsoft.Windows.Themes.ProgressBarBrushConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Windows.Themes.SystemDropShadowChrome : Decorator {
    public static DependencyProperty ColorProperty;
    public static DependencyProperty CornerRadiusProperty;
    private static double ShadowDepth;
    private static int TopLeft;
    private static int Top;
    private static int TopRight;
    private static int Left;
    private static int Center;
    private static int Right;
    private static int BottomLeft;
    private static int Bottom;
    private static int BottomRight;
    private static Brush[] _commonBrushes;
    private static CornerRadius _commonCornerRadius;
    private static object _resourceAccess;
    private Brush[] _brushes;
    public Color Color { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    private static SystemDropShadowChrome();
    public Color get_Color();
    public void set_Color(Color value);
    private static bool IsCornerRadiusValid(object value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    private static void ClearBrushes(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnRender(DrawingContext drawingContext);
    private static GradientStopCollection CreateStops(Color c, double cornerRadius);
    private static Brush[] CreateBrushes(Color c, CornerRadius cornerRadius);
    private Brush[] GetBrushes(Color c, CornerRadius cornerRadius);
}
