internal static class FxResources.System.Configuration.ConfigurationManager.SR : object {
}
[AttributeUsageAttribute("128")]
public class System.Configuration.ApplicationScopedSettingAttribute : SettingAttribute {
}
[DefaultMemberAttribute("Item")]
public abstract class System.Configuration.ApplicationSettingsBase : SettingsBase {
    private bool _explicitSerializeOnClass;
    private Object[] _classAttributes;
    private IComponent _owner;
    private PropertyChangedEventHandler _onPropertyChanged;
    private SettingsContext _context;
    private SettingsProperty _init;
    private SettingsPropertyCollection _settings;
    private SettingsProviderCollection _providers;
    private SettingChangingEventHandler _onSettingChanging;
    private SettingsLoadedEventHandler _onSettingsLoaded;
    private SettingsSavingEventHandler _onSettingsSaving;
    private string _settingsKey;
    private bool _initialized;
    [BrowsableAttribute("False")]
public SettingsContext Context { get; }
    [BrowsableAttribute("False")]
public SettingsPropertyCollection Properties { get; }
    [BrowsableAttribute("False")]
public SettingsPropertyValueCollection PropertyValues { get; }
    [BrowsableAttribute("False")]
public SettingsProviderCollection Providers { get; }
    [BrowsableAttribute("False")]
public string SettingsKey { get; public set; }
    public object Item { get; public set; }
    private SettingsProperty Initializer { get; }
    protected ApplicationSettingsBase(IComponent owner);
    protected ApplicationSettingsBase(string settingsKey);
    protected ApplicationSettingsBase(IComponent owner, string settingsKey);
    public virtual SettingsContext get_Context();
    public virtual SettingsPropertyCollection get_Properties();
    public virtual SettingsPropertyValueCollection get_PropertyValues();
    public virtual SettingsProviderCollection get_Providers();
    public string get_SettingsKey();
    public void set_SettingsKey(string value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void add_SettingChanging(SettingChangingEventHandler value);
    public void remove_SettingChanging(SettingChangingEventHandler value);
    public void add_SettingsLoaded(SettingsLoadedEventHandler value);
    public void remove_SettingsLoaded(SettingsLoadedEventHandler value);
    public void add_SettingsSaving(SettingsSavingEventHandler value);
    public void remove_SettingsSaving(SettingsSavingEventHandler value);
    public object GetPreviousVersion(string propertyName);
    protected virtual void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnSettingChanging(object sender, SettingChangingEventArgs e);
    protected virtual void OnSettingsLoaded(object sender, SettingsLoadedEventArgs e);
    protected virtual void OnSettingsSaving(object sender, CancelEventArgs e);
    public void Reload();
    public void Reset();
    public virtual void Save();
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    public virtual void Upgrade();
    private SettingsProperty CreateSetting(PropertyInfo propertyInfo);
    private void EnsureInitialized();
    private SettingsProperty get_Initializer();
    private SettingsPropertyCollection GetPropertiesForProvider(SettingsProvider provider);
    private object GetPropertyValue(string propertyName);
    private static PropertyInfo[] SettingsFilter(PropertyInfo[] allProps);
    private void ResetProviders();
}
public class System.Configuration.ApplicationSettingsGroup : ConfigurationSectionGroup {
}
public class System.Configuration.AppSettingsReader : object {
    private NameValueCollection _map;
    private static Type s_stringType;
    private static string NullString;
    private static AppSettingsReader();
    public object GetValue(string key, Type type);
    private static int GetNoneNesting(string val);
}
public class System.Configuration.AppSettingsSection : ConfigurationSection {
    private static ConfigurationPropertyCollection modreq(System.Runtime.CompilerServices.IsVolatile) s_properties;
    private static ConfigurationProperty modreq(System.Runtime.CompilerServices.IsVolatile) s_propAppSettings;
    private static ConfigurationProperty modreq(System.Runtime.CompilerServices.IsVolatile) s_propFile;
    private KeyValueInternalCollection _keyValueCollection;
    protected internal ConfigurationPropertyCollection Properties { get; }
    internal NameValueCollection InternalSettings { get; }
    [ConfigurationPropertyAttribute("")]
public KeyValueConfigurationCollection Settings { get; }
    [ConfigurationPropertyAttribute("file")]
public string File { get; public set; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    internal NameValueCollection get_InternalSettings();
    public KeyValueConfigurationCollection get_Settings();
    public string get_File();
    public void set_File(string value);
    private static ConfigurationPropertyCollection EnsureStaticPropertyBag();
    protected internal virtual object GetRuntimeObject();
    protected internal virtual void Reset(ConfigurationElement parentSection);
    protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
}
[DebuggerDisplayAttribute("ConfigPath = {ConfigPath}")]
internal abstract class System.Configuration.BaseConfigurationRecord : object {
    protected static string NewLine;
    internal static string KeywordTrue;
    internal static string KeywordFalse;
    protected static string ConfigurationTag;
    protected static string XmlnsAttribute;
    protected static string ConfigurationNamespace;
    protected static string ConfigSectionsTag;
    protected static string SectionTag;
    protected static string SectionNameAttribute;
    protected static string SectionTypeAttribute;
    protected static string SectionAllowLocationAttribute;
    protected static string SectionAllowDefinitionAttribute;
    protected static string AllowDefinitionEverywhere;
    protected static string AllowDefinitionMachineOnly;
    protected static string AllowDefinitionMachineToApplication;
    protected static string AllowDefinitionMachineToWebRoot;
    protected static string SectionAllowExeDefinitionAttribute;
    protected static string AllowExeDefinitionMachineToRoaming;
    protected static string AllowExeDefinitionMachineToLocal;
    protected static string SectionRestartonExternalChangesAttribute;
    protected static string SectionRequirePermissionAttribute;
    internal static string SectionOverrideModeDefaultAttribute;
    internal static string OverrideModeInherit;
    internal static string OverrideModeAllow;
    internal static string OverrideModeDeny;
    protected static string SectionGroupTag;
    protected static string SectionGroupNameAttribute;
    protected static string SectionGroupTypeAttribute;
    protected static string RemoveTag;
    protected static string ClearTag;
    protected static string LocationTag;
    protected static string LocationPathAttribute;
    internal static string LocationAllowOverrideAttribute;
    internal static string LocationOverrideModeAttribute;
    protected static string LocationInheritInChildApplicationsAttribute;
    protected static string ConfigSourceAttribute;
    internal static string ProtectionProviderAttribute;
    protected static string FormatNewConfigFile;
    protected static string FormatConfiguration;
    protected static string FormatConfigurationNamespace;
    protected static string FormatConfigurationEndElement;
    protected static string FormatLocationNoPath;
    protected static string FormatLocationPath;
    protected static string FormatLocationEndElement;
    internal static string KeywordLocationOverrideModeString;
    protected static string FormatSectionConfigSource;
    protected static string FormatConfigSourceFile;
    protected static string FormatSectionGroupEndElement;
    protected static int ClassSupportsChangeNotifications;
    protected static int ClassSupportsRefresh;
    protected static int ClassSupportsImpersonation;
    protected static int ClassSupportsRestrictedPermissions;
    protected static int ClassSupportsKeepInputs;
    protected static int ClassSupportsDelayedInit;
    protected static int ClassIgnoreLocalErrors;
    protected static int ProtectedDataInitialized;
    protected static int Closed;
    protected static int PrefetchAll;
    protected static int IsAboveApplication;
    private static int ContextEvaluated;
    private static int IsLocationListResolved;
    protected static int NamespacePresentInFile;
    protected static int IsTrusted;
    protected static int SupportsChangeNotifications;
    protected static int SupportsRefresh;
    protected static int SupportsPath;
    protected static int SupportsKeepInputs;
    protected static int SupportsLocation;
    protected static int ForceLocationWritten;
    protected static int SuggestLocationRemoval;
    protected static int NamespacePresentCurrent;
    internal static char ConfigPathSeparatorChar;
    internal static string ConfigPathSeparatorString;
    private static string InvalidFirstSubPathCharacters;
    private static string InvalidLastSubPathCharacters;
    private static string InvalidSubPathCharactersString;
    private static string ProtectedConfigurationSectionTypeName;
    internal static string ReservedSectionProtectedConfiguration;
    internal static Char[] s_configPathSeparatorParams;
    private static string s_appConfigPath;
    private static IComparer`1<SectionInput> s_indirectInputsComparer;
    private static Char[] s_invalidSubPathCharactersArray;
    protected Hashtable _children;
    private object _configContext;
    protected string _configName;
    protected string _configPath;
    protected InternalConfigRoot _configRoot;
    private ConfigRecordStreamInfo _configStreamInfo;
    protected Hashtable _factoryRecords;
    protected SafeBitVector32 _flags;
    private BaseConfigurationRecord _initDelayedRoot;
    private ConfigurationSchemaErrors _initErrors;
    protected ArrayList _locationSections;
    protected string _locationSubPath;
    protected BaseConfigurationRecord _parent;
    private ProtectedConfigurationSection _protectedConfig;
    protected Hashtable _sectionRecords;
    protected SimpleBitVector32 ClassFlags { get; }
    internal bool HasStream { get; }
    private bool IsInitDelayed { get; }
    internal IInternalConfigHost Host { get; }
    internal BaseConfigurationRecord Parent { get; }
    internal bool IsRootConfig { get; }
    internal bool IsMachineConfig { get; }
    internal string LocationSubPath { get; }
    internal bool IsLocationConfig { get; }
    protected ConfigRecordStreamInfo ConfigStreamInfo { get; }
    internal string DefaultProviderName { get; }
    private ProtectedConfigurationSection ProtectedConfig { get; }
    private bool HasFactoryRecords { get; }
    internal bool IsEmpty { get; }
    internal object ConfigContext { get; }
    internal bool RecordSupportsLocation { get; }
    internal Configuration CurrentConfiguration { get; }
    internal bool TypeStringTransformerIsSet { get; }
    internal bool AssemblyStringTransformerIsSet { get; }
    internal Func`2<string, string> TypeStringTransformer { get; }
    internal Func`2<string, string> AssemblyStringTransformer { get; }
    internal FrameworkName TargetFramework { get; }
    internal Stack SectionsStack { get; }
    public string ConfigPath { get; }
    public string StreamName { get; }
    public bool HasInitErrors { get; }
    private static BaseConfigurationRecord();
    protected abstract virtual SimpleBitVector32 get_ClassFlags();
    internal bool get_HasStream();
    private bool get_IsInitDelayed();
    internal IInternalConfigHost get_Host();
    internal BaseConfigurationRecord get_Parent();
    internal bool get_IsRootConfig();
    internal bool get_IsMachineConfig();
    internal string get_LocationSubPath();
    internal bool get_IsLocationConfig();
    protected ConfigRecordStreamInfo get_ConfigStreamInfo();
    internal string get_DefaultProviderName();
    private ProtectedConfigurationSection get_ProtectedConfig();
    private bool get_HasFactoryRecords();
    internal bool get_IsEmpty();
    internal object get_ConfigContext();
    internal bool get_RecordSupportsLocation();
    internal Configuration get_CurrentConfiguration();
    internal bool get_TypeStringTransformerIsSet();
    internal bool get_AssemblyStringTransformerIsSet();
    internal Func`2<string, string> get_TypeStringTransformer();
    internal Func`2<string, string> get_AssemblyStringTransformer();
    internal FrameworkName get_TargetFramework();
    internal Stack get_SectionsStack();
    public sealed virtual string get_ConfigPath();
    public sealed virtual string get_StreamName();
    public sealed virtual bool get_HasInitErrors();
    public sealed virtual void ThrowIfInitErrors();
    public sealed virtual object GetSection(string configKey);
    public sealed virtual object GetLkgSection(string configKey);
    public sealed virtual void RefreshSection(string configKey);
    public sealed virtual void Remove();
    protected abstract virtual object CreateSectionFactory(FactoryRecord factoryRecord);
    protected abstract virtual object CreateSection(bool inputIsTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, object parentConfig, ConfigXmlReader reader);
    protected abstract virtual object UseParentResult(string configKey, object parentResult, SectionRecord sectionRecord);
    protected abstract virtual object GetRuntimeObject(object result);
    private bool ShouldPrefetchRawXml(FactoryRecord factoryRecord);
    internal void Init(IInternalConfigRoot configRoot, BaseConfigurationRecord parent, string configPath, string locationSubPath);
    private void InitConfigFromFile();
    private void RefreshFactoryRecord(string configKey);
    private object GetSection(string configKey, bool getLkg, bool checkPermission);
    private void GetSectionRecursive(string configKey, bool getLkg, bool checkPermission, bool getRuntimeObject, bool requestIsHere, Object& result, Object& resultRuntimeObject);
    protected void CreateSectionDefault(string configKey, bool getRuntimeObject, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object& result, Object& resultRuntimeObject);
    private bool ShouldSkipDueToInheritInChildApplications(bool skipInChildApps);
    private bool ShouldSkipDueToInheritInChildApplications(bool skipInChildApps, string configPath);
    private bool Evaluate(FactoryRecord factoryRecord, SectionRecord sectionRecord, object parentResult, bool getLkg, bool getRuntimeObject, Object& result, Object& resultRuntimeObject);
    private object EvaluateOne(String[] keys, SectionInput input, bool isTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, object parentResult);
    private ConfigXmlReader FindSection(String[] keys, SectionXmlInfo sectionXmlInfo, Int32& lineNumber);
    private static ConfigXmlReader FindSectionRecursive(String[] keys, int iKey, XmlUtil xmlUtil, Int32& lineNumber);
    private ConfigXmlReader LoadConfigSource(string name, SectionXmlInfo sectionXmlInfo);
    protected ConfigXmlReader GetSectionXmlReader(String[] keys, SectionInput input);
    internal ProtectedConfigurationProvider GetProtectionProviderFromName(string providerName, bool throwIfNotFound);
    internal void InitProtectedConfigurationSection();
    protected object CallCreateSection(bool inputIsTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, object parentConfig, ConfigXmlReader reader, string filename, int line);
    internal bool IsRootDeclaration(string configKey, bool implicitIsRooted);
    internal FactoryRecord FindFactoryRecord(string configKey, bool permitErrors, BaseConfigurationRecord& configRecord);
    internal FactoryRecord FindFactoryRecord(string configKey, bool permitErrors);
    private FactoryRecord FindAndEnsureFactoryRecord(string configKey, Boolean& isRootDeclaredHere);
    private Hashtable ScanFactories(XmlUtil xmlUtil);
    private void ScanFactoriesRecursive(XmlUtil xmlUtil, string parentConfigKey, Hashtable factoryList);
    internal static ConfigurationAllowExeDefinition AllowExeDefinitionToEnum(string allowExeDefinition, XmlUtil xmlUtil);
    internal static ConfigurationAllowDefinition AllowDefinitionToEnum(XmlUtil xmlUtil);
    internal static string CombineConfigKey(string parentConfigKey, string tagName);
    internal static void SplitConfigKey(string configKey, String& group, String& name);
    [ConditionalAttribute("DEBUG")]
private void DebugValidateIndirectInputs(SectionRecord sectionRecord);
    private OverrideMode ResolveOverrideModeFromParent(string configKey, OverrideMode& childLockMode);
    protected OverrideMode GetSectionLockedMode(string configKey);
    protected OverrideMode GetSectionLockedMode(string configKey, OverrideMode& childLockMode);
    private void ScanSections(XmlUtil xmlUtil);
    private void ScanSectionsRecursive(XmlUtil xmlUtil, string parentConfigKey, bool inLocation, string locationSubPath, OverrideModeSetting overrideMode, bool skipInChildApps);
    private void ScanLocationSection(XmlUtil xmlUtil);
    protected virtual void AddLocation(string locationSubPath);
    private void ResolveLocationSections();
    private void VerifyDefinitionAllowed(FactoryRecord factoryRecord, string configPath, IConfigErrorInfo errorInfo);
    internal bool IsDefinitionAllowed(ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    protected static void VerifySectionName(string name, XmlUtil xmlUtil, ExceptionAction action, bool allowImplicit);
    protected static void VerifySectionName(string name, IConfigErrorInfo errorInfo, bool allowImplicit);
    internal static string NormalizeLocationSubPath(string subPath, IConfigErrorInfo errorInfo);
    protected SectionRecord GetSectionRecord(string configKey, bool permitErrors);
    protected SectionRecord EnsureSectionRecord(string configKey, bool permitErrors);
    protected SectionRecord EnsureSectionRecordUnsafe(string configKey, bool permitErrors);
    private SectionRecord EnsureSectionRecordImpl(string configKey, bool permitErrors, bool setLockSettings);
    internal FactoryRecord GetFactoryRecord(string configKey, bool permitErrors);
    protected Hashtable EnsureFactories();
    private ArrayList EnsureLocationSections();
    internal static string NormalizeConfigSource(string configSource, IConfigErrorInfo errorInfo);
    protected object MonitorStream(string configKey, string configSource, string streamname);
    private void OnStreamChanged(string streamname);
    private void ValidateUniqueConfigSource(string configKey, string configSourceStreamName, string configSourceArg, IConfigErrorInfo errorInfo);
    protected void ValidateUniqueChildConfigSource(string configSourceStreamName, string configSourceArg, IConfigErrorInfo errorInfo);
    internal void HlClearResultRecursive(string configKey, bool forceEvaluatation);
    internal BaseConfigurationRecord HlGetChild(string configName);
    internal void HlAddChild(string configName, BaseConfigurationRecord child);
    internal void HlRemoveChild(string configName);
    internal bool HlNeedsChildFor(string configName);
    internal void CloseRecursive();
    internal string FindChangedConfigurationStream();
    private bool HasStreamChanged(string streamname, object lastVersion);
    protected virtual string CallHostDecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfig);
    internal static string ValidateProtectionProviderAttribute(string protectionProvider, IConfigErrorInfo errorInfo);
    private ConfigXmlReader DecryptConfigSection(ConfigXmlReader reader, ProtectedConfigurationProvider protectionProvider);
    private void ThrowIfParseErrors(ConfigurationSchemaErrors schemaErrors);
    internal static bool IsImplicitSection(string configKey);
    private void AddImplicitSections(Hashtable factoryList);
    internal static bool IsReservedAttributeName(string name);
}
public class System.Configuration.CallbackValidator : ConfigurationValidatorBase {
    private ValidatorCallback _callback;
    private Type _type;
    public CallbackValidator(Type type, ValidatorCallback callback);
    internal CallbackValidator(ValidatorCallback callback);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.CallbackValidatorAttribute : ConfigurationValidatorAttribute {
    private ValidatorCallback _callbackMethod;
    private string _callbackMethodName;
    private Type _type;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public Type Type { get; public set; }
    public string CallbackMethodName { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public Type get_Type();
    public void set_Type(Type value);
    public string get_CallbackMethodName();
    public void set_CallbackMethodName(string value);
}
internal class System.Configuration.ClientConfigPaths : object {
    internal static string UserConfigFilename;
    private static string ConfigExtension;
    private static int MaxLengthToUse;
    private static string HttpUri;
    private static string StrongNameDesc;
    private static string UrlDesc;
    private static string PathDesc;
    private static ClientConfigPaths modreq(System.Runtime.CompilerServices.IsVolatile) s_current;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_currentIncludesUserConfig;
    private bool _includesUserConfig;
    private string _companyName;
    [CompilerGeneratedAttribute]
private bool <HasEntryAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationConfigUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoamingConfigFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoamingConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalConfigFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    internal static ClientConfigPaths Current { get; }
    internal bool HasEntryAssembly { get; }
    internal string ApplicationUri { get; }
    internal string ApplicationConfigUri { get; }
    internal string RoamingConfigFilename { get; }
    internal string RoamingConfigDirectory { get; }
    internal bool HasRoamingConfig { get; }
    internal string LocalConfigFilename { get; }
    internal string LocalConfigDirectory { get; }
    internal bool HasLocalConfig { get; }
    internal string ProductName { get; private set; }
    internal string ProductVersion { get; private set; }
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3000: Avoid accessing Assembly file path when publishing as a single file")]
[UnconditionalSuppressMessageAttribute("SingleFile", "IL3002: RequiresAssemblyFiles on Module.Name")]
private ClientConfigPaths(string exePath, bool includeUserConfig);
    internal static ClientConfigPaths get_Current();
    [CompilerGeneratedAttribute]
internal bool get_HasEntryAssembly();
    [CompilerGeneratedAttribute]
internal string get_ApplicationUri();
    [CompilerGeneratedAttribute]
internal string get_ApplicationConfigUri();
    [CompilerGeneratedAttribute]
internal string get_RoamingConfigFilename();
    [CompilerGeneratedAttribute]
internal string get_RoamingConfigDirectory();
    internal bool get_HasRoamingConfig();
    [CompilerGeneratedAttribute]
internal string get_LocalConfigFilename();
    [CompilerGeneratedAttribute]
internal string get_LocalConfigDirectory();
    internal bool get_HasLocalConfig();
    [CompilerGeneratedAttribute]
internal string get_ProductName();
    [CompilerGeneratedAttribute]
private void set_ProductName(string value);
    [CompilerGeneratedAttribute]
internal string get_ProductVersion();
    [CompilerGeneratedAttribute]
private void set_ProductVersion(string value);
    internal static ClientConfigPaths GetPaths(string exePath, bool includeUserConfig);
    internal static void RefreshCurrent();
    private static string CombineIfValid(string path1, string path2);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002: RequiresAssemblyFiles on Module.Name")]
private static string GetTypeAndHashSuffix(string exePath, bool isSingleFile);
    private void SetNamesAndVersion(Assembly exeAssembly, bool isHttp);
    private static string Validate(string str, bool limitSize);
}
internal class System.Configuration.ClientConfigurationHost : DelegatingConfigHost {
    internal static string MachineConfigName;
    internal static string ExeConfigName;
    internal static string RoamingUserConfigName;
    internal static string LocalUserConfigName;
    internal static string MachineConfigPath;
    internal static string ExeConfigPath;
    internal static string RoamingUserConfigPath;
    internal static string LocalUserConfigPath;
    private static string MachineConfigFilename;
    private static string MachineConfigSubdirectory;
    private static object s_version;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_machineConfigFilePath;
    private ClientConfigPaths _configPaths;
    private string _exePath;
    private ExeConfigurationFileMap _fileMap;
    private bool _initComplete;
    internal ClientConfigPaths ConfigPaths { get; }
    internal static string MachineConfigFilePath { get; }
    public bool HasRoamingConfig { get; }
    public bool HasLocalConfig { get; }
    public bool IsAppConfigHttp { get; }
    public bool SupportsRefresh { get; }
    public bool SupportsPath { get; }
    public bool SupportsLocation { get; }
    private static ClientConfigurationHost();
    internal ClientConfigPaths get_ConfigPaths();
    internal static string get_MachineConfigFilePath();
    public virtual bool get_HasRoamingConfig();
    public virtual bool get_HasLocalConfig();
    public virtual bool get_IsAppConfigHttp();
    public virtual bool get_SupportsRefresh();
    public virtual bool get_SupportsPath();
    public virtual bool get_SupportsLocation();
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigClientHost.IsExeConfig(string configPath);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigClientHost.IsRoamingUserConfig(string configPath);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigClientHost.IsLocalUserConfig(string configPath);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigClientHost.GetExeConfigPath();
    private sealed virtual override string System.Configuration.Internal.IInternalConfigClientHost.GetRoamingUserConfigPath();
    private sealed virtual override string System.Configuration.Internal.IInternalConfigClientHost.GetLocalUserConfigPath();
    public virtual void RefreshConfigPaths();
    private static bool IsUserConfig(string configPath);
    public virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    public virtual bool IsInitDelayed(IInternalConfigRecord configRecord);
    public virtual void RequireCompleteInit(IInternalConfigRecord record);
    public virtual bool IsConfigRecordRequired(string configPath);
    public virtual string GetStreamName(string configPath);
    public virtual string GetStreamNameForConfigSource(string streamName, string configSource);
    public virtual object GetStreamVersion(string streamName);
    public virtual Stream OpenStreamForRead(string streamName);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public virtual void DeleteStream(string streamName);
    public virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    public virtual void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    public virtual bool PrefetchAll(string configPath, string streamName);
    public virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public virtual object CreateDeprecatedConfigContext(string configPath);
    public virtual object CreateConfigurationContext(string configPath, string locationSubPath);
    private static ConfigurationUserLevel GetUserLevel(string configPath);
    internal static Configuration OpenExeConfiguration(ConfigurationFileMap fileMap, bool isMachine, ConfigurationUserLevel userLevel, string exePath);
}
internal class System.Configuration.ClientConfigurationSystem : object {
    private static string SystemDiagnosticsConfigKey;
    private static string SystemNetGroupKey;
    private IInternalConfigHost _configHost;
    private IInternalConfigRoot _configRoot;
    private bool _isAppConfigHttp;
    private IInternalConfigRecord _completeConfigRecord;
    private Exception _initError;
    private bool _isInitInProgress;
    private bool _isMachineConfigInited;
    private bool _isUserConfigInited;
    private IInternalConfigRecord _machineConfigRecord;
    private bool System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig { get; }
    private sealed virtual override object System.Configuration.Internal.IInternalConfigSystem.GetSection(string sectionName);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(string sectionName);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigSystem.get_SupportsUserConfig();
    private bool IsSectionUsedInInit(string configKey);
    private bool DoesSectionOnlyUseMachineConfig(string configKey);
    private void EnsureInit(string configKey);
    private void PrepareClientConfigSystem(string sectionName);
    private void OnConfigRemoved(object sender, InternalConfigEventArgs e);
}
public class System.Configuration.ClientSettingsSection : ConfigurationSection {
    private static ConfigurationProperty s_propSettings;
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public SettingElementCollection Settings { get; }
    private static ClientSettingsSection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public SettingElementCollection get_Settings();
}
internal class System.Configuration.ClientSettingsStore : object {
    private static string ApplicationSettingsGroupName;
    private static string UserSettingsGroupName;
    private static string ApplicationSettingsGroupPrefix;
    private static string UserSettingsGroupPrefix;
    private static Configuration GetUserConfig(bool isRoaming);
    private static ClientSettingsSection GetConfigSection(Configuration config, string sectionName, bool declare);
    private static void DeclareSection(Configuration config, string sectionName);
    internal static IDictionary ReadSettings(string sectionName, bool isUserScoped);
    internal static IDictionary ReadSettingsFromFile(string configFileName, string sectionName, bool isUserScoped);
    internal static ConnectionStringSettingsCollection ReadConnectionStrings();
    internal static void RevertToParent(string sectionName, bool isRoaming);
    internal static void WriteSettings(string sectionName, bool isRoaming, IDictionary newSettings);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.CommaDelimitedStringCollection : StringCollection {
    private bool _modified;
    private string _originalString;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public bool IsModified { get; }
    public bool IsReadOnly { get; private set; }
    public string Item { get; public set; }
    public bool get_IsModified();
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(bool value);
    public string get_Item(int index);
    public void set_Item(int index, string value);
    internal void FromString(string list);
    public virtual string ToString();
    private void ThrowIfReadOnly();
    private static void ThrowIfContainsDelimiter(string value);
    public void SetReadOnly();
    public void Add(string value);
    public void AddRange(String[] range);
    public void Clear();
    public void Insert(int index, string value);
    public void Remove(string value);
    public CommaDelimitedStringCollection Clone();
}
public class System.Configuration.CommaDelimitedStringCollectionConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
internal static class System.Configuration.CommonConfigurationStrings : object {
    internal static string UriSectionName;
    internal static string IriParsing;
    internal static string Idn;
    internal static string Enabled;
    internal static string SchemeSettings;
    internal static string SchemeName;
    internal static string GenericUriParserOptions;
}
internal class System.Configuration.ConfigDefinitionUpdates : object {
    [CompilerGeneratedAttribute]
private ArrayList <LocationUpdatesList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLocation>k__BackingField;
    internal ArrayList LocationUpdatesList { get; }
    internal bool RequireLocation { get; internal set; }
    [CompilerGeneratedAttribute]
internal ArrayList get_LocationUpdatesList();
    [CompilerGeneratedAttribute]
internal bool get_RequireLocation();
    [CompilerGeneratedAttribute]
internal void set_RequireLocation(bool value);
    internal LocationUpdates FindLocationUpdates(OverrideModeSetting overrideMode, bool inheritInChildApps);
    internal DefinitionUpdate AddUpdate(OverrideModeSetting overrideMode, bool inheritInChildApps, bool moved, string updatedXml, SectionRecord sectionRecord);
    internal void CompleteUpdates();
    internal void FlagLocationWritten();
}
internal static class System.Configuration.ConfigPathUtility : object {
    private static char SeparatorChar;
    internal static bool IsValid(string configPath);
    internal static string Combine(string parentConfigPath, string childConfigPath);
    internal static String[] GetParts(string configPath);
    internal static string GetName(string configPath);
}
public class System.Configuration.Configuration : object {
    private MgmtConfigurationRecord _configRecord;
    private Object[] _hostInitConfigurationParams;
    private Type _typeConfigHost;
    private Func`2<string, string> _assemblyStringTransformer;
    private ContextInformation _evalContext;
    private ConfigurationLocationCollection _locations;
    private ConfigurationSectionGroup _rootSectionGroup;
    private Stack _sectionsStack;
    private Func`2<string, string> _typeStringTransformer;
    [CompilerGeneratedAttribute]
private FrameworkName <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TypeStringTransformerIsSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssemblyStringTransformerIsSet>k__BackingField;
    public AppSettingsSection AppSettings { get; }
    public ConnectionStringsSection ConnectionStrings { get; }
    public string FilePath { get; }
    public bool HasFile { get; }
    public ConfigurationLocationCollection Locations { get; }
    public ContextInformation EvaluationContext { get; }
    public ConfigurationSectionGroup RootSectionGroup { get; }
    public ConfigurationSectionCollection Sections { get; }
    public ConfigurationSectionGroupCollection SectionGroups { get; }
    public bool NamespaceDeclared { get; public set; }
    public Func`2<string, string> TypeStringTransformer { get; public set; }
    public Func`2<string, string> AssemblyStringTransformer { get; public set; }
    public FrameworkName TargetFramework { get; public set; }
    internal bool TypeStringTransformerIsSet { get; private set; }
    internal bool AssemblyStringTransformerIsSet { get; private set; }
    internal Stack SectionsStack { get; }
    internal Configuration(string locationSubPath, Type typeConfigHost, Object[] hostInitConfigurationParams);
    public AppSettingsSection get_AppSettings();
    public ConnectionStringsSection get_ConnectionStrings();
    public string get_FilePath();
    public bool get_HasFile();
    public ConfigurationLocationCollection get_Locations();
    public ContextInformation get_EvaluationContext();
    public ConfigurationSectionGroup get_RootSectionGroup();
    public ConfigurationSectionCollection get_Sections();
    public ConfigurationSectionGroupCollection get_SectionGroups();
    public bool get_NamespaceDeclared();
    public void set_NamespaceDeclared(bool value);
    public Func`2<string, string> get_TypeStringTransformer();
    public void set_TypeStringTransformer(Func`2<string, string> value);
    public Func`2<string, string> get_AssemblyStringTransformer();
    public void set_AssemblyStringTransformer(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public FrameworkName get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(FrameworkName value);
    [CompilerGeneratedAttribute]
internal bool get_TypeStringTransformerIsSet();
    [CompilerGeneratedAttribute]
private void set_TypeStringTransformerIsSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_AssemblyStringTransformerIsSet();
    [CompilerGeneratedAttribute]
private void set_AssemblyStringTransformerIsSet(bool value);
    internal Stack get_SectionsStack();
    internal Configuration OpenLocationConfiguration(string locationSubPath);
    public ConfigurationSection GetSection(string sectionName);
    public ConfigurationSectionGroup GetSectionGroup(string sectionGroupName);
    public void Save();
    public void Save(ConfigurationSaveMode saveMode);
    public void Save(ConfigurationSaveMode saveMode, bool forceSaveAll);
    public void SaveAs(string filename);
    public void SaveAs(string filename, ConfigurationSaveMode saveMode);
    public void SaveAs(string filename, ConfigurationSaveMode saveMode, bool forceSaveAll);
    private void SaveAsImpl(string filename, ConfigurationSaveMode saveMode, bool forceSaveAll);
    private static void ForceGroupsRecursive(ConfigurationSectionGroup group);
}
public enum System.Configuration.ConfigurationAllowDefinition : Enum {
    public int value__;
    public static ConfigurationAllowDefinition MachineOnly;
    public static ConfigurationAllowDefinition MachineToWebRoot;
    public static ConfigurationAllowDefinition MachineToApplication;
    public static ConfigurationAllowDefinition Everywhere;
}
public enum System.Configuration.ConfigurationAllowExeDefinition : Enum {
    public int value__;
    public static ConfigurationAllowExeDefinition MachineOnly;
    public static ConfigurationAllowExeDefinition MachineToApplication;
    public static ConfigurationAllowExeDefinition MachineToRoamingUser;
    public static ConfigurationAllowExeDefinition MachineToLocalUser;
}
[AttributeUsageAttribute("132")]
public class System.Configuration.ConfigurationCollectionAttribute : Attribute {
    private string _addItemName;
    private string _clearItemsName;
    private string _removeItemName;
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationElementCollectionType <CollectionType>k__BackingField;
    public Type ItemType { get; }
    public string AddItemName { get; public set; }
    public string RemoveItemName { get; public set; }
    public string ClearItemsName { get; public set; }
    public ConfigurationElementCollectionType CollectionType { get; public set; }
    public ConfigurationCollectionAttribute(Type itemType);
    [CompilerGeneratedAttribute]
public Type get_ItemType();
    public string get_AddItemName();
    public void set_AddItemName(string value);
    public string get_RemoveItemName();
    public void set_RemoveItemName(string value);
    public string get_ClearItemsName();
    public void set_ClearItemsName(string value);
    [CompilerGeneratedAttribute]
public ConfigurationElementCollectionType get_CollectionType();
    [CompilerGeneratedAttribute]
public void set_CollectionType(ConfigurationElementCollectionType value);
}
public abstract class System.Configuration.ConfigurationConverterBase : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext ctx, Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext ctx, Type type);
    internal static void ValidateType(object value, Type expected);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Configuration.ConfigurationElement : object {
    private static string LockAttributesKey;
    private static string LockAllAttributesExceptKey;
    private static string LockElementsKey;
    private static string LockAll;
    private static string LockAllElementsExceptKey;
    private static string LockItemKey;
    internal static string DefaultCollectionPropertyName;
    private static String[] s_lockAttributeNames;
    private static Hashtable s_propertyBags;
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_perTypeValidators;
    internal static object s_nullPropertyValue;
    private static ConfigurationElementProperty s_elementProperty;
    private bool _initialized;
    private bool _modified;
    private bool _readOnly;
    internal BaseConfigurationRecord _configRecord;
    private ConfigurationElementProperty _elementProperty;
    internal ContextInformation _evalContext;
    private ElementInformation modreq(System.Runtime.CompilerServices.IsVolatile) _evaluationElement;
    internal ConfigurationValueFlags _itemLockedFlag;
    internal ConfigurationLockCollection _lockedAllExceptAttributesList;
    internal ConfigurationLockCollection _lockedAllExceptElementsList;
    internal ConfigurationLockCollection _lockedAttributesList;
    internal ConfigurationLockCollection _lockedElementsList;
    [CompilerGeneratedAttribute]
private bool <DataToWriteInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ElementPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementTagName>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationValues <Values>k__BackingField;
    internal bool DataToWriteInternal { get; internal set; }
    internal bool ElementPresent { get; internal set; }
    internal string ElementTagName { get; private set; }
    internal ConfigurationLockCollection LockedAttributesList { get; }
    internal ConfigurationLockCollection LockedAllExceptAttributesList { get; }
    internal ConfigurationValueFlags ItemLocked { get; }
    public ConfigurationLockCollection LockAttributes { get; }
    public ConfigurationLockCollection LockAllAttributesExcept { get; }
    public ConfigurationLockCollection LockElements { get; }
    public ConfigurationLockCollection LockAllElementsExcept { get; }
    public bool LockItem { get; public set; }
    protected internal object Item { get; protected internal set; }
    protected internal object Item { get; protected internal set; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    internal ConfigurationValues Values { get; }
    public ElementInformation ElementInformation { get; }
    protected ContextInformation EvaluationContext { get; }
    protected internal ConfigurationElementProperty ElementProperty { get; }
    protected bool HasContext { get; }
    public Configuration CurrentConfiguration { get; }
    private static ConfigurationElement();
    internal static bool IsNullOrNullProperty(object value);
    [CompilerGeneratedAttribute]
internal bool get_DataToWriteInternal();
    [CompilerGeneratedAttribute]
internal void set_DataToWriteInternal(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ElementPresent();
    [CompilerGeneratedAttribute]
internal void set_ElementPresent(bool value);
    [CompilerGeneratedAttribute]
internal string get_ElementTagName();
    [CompilerGeneratedAttribute]
private void set_ElementTagName(string value);
    internal ConfigurationLockCollection get_LockedAttributesList();
    internal ConfigurationLockCollection get_LockedAllExceptAttributesList();
    internal ConfigurationValueFlags get_ItemLocked();
    public ConfigurationLockCollection get_LockAttributes();
    public ConfigurationLockCollection get_LockAllAttributesExcept();
    public ConfigurationLockCollection get_LockElements();
    public ConfigurationLockCollection get_LockAllElementsExcept();
    public bool get_LockItem();
    public void set_LockItem(bool value);
    protected internal object get_Item(ConfigurationProperty prop);
    protected internal void set_Item(ConfigurationProperty prop, object value);
    protected internal object get_Item(string propertyName);
    protected internal void set_Item(string propertyName, object value);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
internal ConfigurationValues get_Values();
    public ElementInformation get_ElementInformation();
    protected ContextInformation get_EvaluationContext();
    protected internal virtual ConfigurationElementProperty get_ElementProperty();
    protected bool get_HasContext();
    public Configuration get_CurrentConfiguration();
    internal static ConfigurationElement CreateElement(Type type);
    protected internal virtual void Init();
    internal void CallInit();
    internal void MergeLocks(ConfigurationElement source);
    internal void HandleLockedAttributes(ConfigurationElement source);
    internal virtual void AssociateContext(BaseConfigurationRecord configRecord);
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    public virtual bool IsReadOnly();
    protected internal virtual void SetReadOnly();
    internal void SetLocked();
    internal ArrayList GetErrorsList();
    internal ConfigurationErrorsException GetErrors();
    protected virtual void ListErrors(IList errorList);
    protected internal virtual void InitializeDefault();
    internal void CheckLockedElement(string elementName, XmlReader reader);
    internal void RemoveAllInheritedLocks();
    internal void ResetLockLists(ConfigurationElement parentElement);
    protected internal virtual void Reset(ConfigurationElement parentElement);
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    private static bool PropertiesFromType(Type type, ConfigurationPropertyCollection& result);
    private static ConfigurationPropertyCollection CreatePropertyBagFromType(Type type);
    private static ConfigurationProperty CreateConfigurationPropertyFromAttributes(PropertyInfo propertyInformation);
    private static void CachePerTypeValidator(Type type, ConfigurationValidatorBase validator);
    private static void ApplyValidatorsRecursive(ConfigurationElement root);
    private static void ApplyValidator(ConfigurationElement elem);
    protected void SetPropertyValue(ConfigurationProperty prop, object value, bool ignoreLocks);
    internal PropertySourceInfo PropertyInfoInternal(string propertyName);
    internal string PropertyFileName(string propertyName);
    internal int PropertyLineNumber(string propertyName);
    internal virtual void Dump(TextWriter tw);
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected internal virtual bool SerializeToXmlElement(XmlWriter writer, string elementName);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    private static bool SerializeLockList(ConfigurationLockCollection list, string elementKey, XmlWriter writer);
    internal void ReportInvalidLock(string attribToLockTrim, ConfigurationLockCollectionType lockedType, ConfigurationValue value, string collectionProperties);
    private ConfigurationLockCollection ParseLockedAttributes(ConfigurationValue value, ConfigurationLockCollectionType lockType);
    private StringCollection IntersectLockCollections(ConfigurationLockCollection collection1, ConfigurationLockCollection collection2);
    protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    private static object DeserializePropertyValue(ConfigurationProperty prop, XmlReader reader);
    internal static void ValidateElement(ConfigurationElement elem, ConfigurationValidatorBase propValidator, bool recursive);
    private void EnsureRequiredProperties(bool ensureKeysOnly);
    protected virtual object OnRequiredPropertyNotFound(string name);
    protected virtual void PostDeserialize();
    protected virtual void PreSerialize(XmlWriter writer);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    protected virtual string GetTransformedTypeString(string typeName);
    protected virtual string GetTransformedAssemblyString(string assemblyName);
    internal ConfigurationLockCollection UnMergeLockList(ConfigurationLockCollection sourceLockList, ConfigurationLockCollection parentLockList, ConfigurationSaveMode saveMode);
    internal static bool IsLockAttributeName(string name);
}
[DebuggerDisplayAttribute("Count = {Count}")]
public abstract class System.Configuration.ConfigurationElementCollection : ConfigurationElement {
    internal static string DefaultAddItemName;
    internal static string DefaultRemoveItemName;
    internal static string DefaultClearItemsName;
    private IComparer _comparer;
    private string _addElement;
    private string _clearElement;
    private bool _collectionCleared;
    private bool _emitClearTag;
    private int _inheritedCount;
    private bool _modified;
    private bool _readOnly;
    private int _removedItemCount;
    private string _removeElement;
    internal bool InternalAddToEnd;
    internal string InternalElementTagName;
    [CompilerGeneratedAttribute]
private ArrayList <Items>k__BackingField;
    private ArrayList Items { get; }
    protected internal string AddElementName { get; protected internal set; }
    protected internal string RemoveElementName { get; protected internal set; }
    protected internal string ClearElementName { get; protected internal set; }
    public bool EmitClear { get; public set; }
    protected string ElementName { get; }
    internal string LockableElements { get; }
    protected bool ThrowOnDuplicate { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    protected ConfigurationElementCollection(IComparer comparer);
    [CompilerGeneratedAttribute]
private ArrayList get_Items();
    protected internal string get_AddElementName();
    protected internal void set_AddElementName(string value);
    protected internal string get_RemoveElementName();
    protected internal void set_RemoveElementName(string value);
    protected internal string get_ClearElementName();
    protected internal void set_ClearElementName(string value);
    public bool get_EmitClear();
    public void set_EmitClear(bool value);
    protected virtual string get_ElementName();
    internal string get_LockableElements();
    protected virtual bool get_ThrowOnDuplicate();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array arr, int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal virtual void AssociateContext(BaseConfigurationRecord configRecord);
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    public virtual bool IsReadOnly();
    protected internal virtual void SetReadOnly();
    internal virtual IEnumerator GetEnumeratorImpl();
    internal IEnumerator GetElementsEnumerator();
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected internal virtual void Reset(ConfigurationElement parentElement);
    public void CopyTo(ConfigurationElement[] array, int index);
    protected virtual void BaseAdd(ConfigurationElement element);
    protected internal void BaseAdd(ConfigurationElement element, bool throwIfExists);
    private void BaseAdd(ConfigurationElement element, bool throwIfExists, bool ignoreLocks);
    protected int BaseIndexOf(ConfigurationElement element);
    internal int RealIndexOf(ConfigurationElement element);
    private void BaseAddInternal(int index, ConfigurationElement element, bool flagAsReplaced, bool ignoreLocks);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
    private void BaseAdd(int index, ConfigurationElement element, bool ignoreLocks);
    protected internal void BaseRemove(object key);
    private void BaseRemove(object key, bool throwIfMissing);
    protected internal ConfigurationElement BaseGet(object key);
    protected internal bool BaseIsRemoved(object key);
    protected internal ConfigurationElement BaseGet(int index);
    protected internal Object[] BaseGetAllKeys();
    protected internal object BaseGetKey(int index);
    protected internal void BaseClear();
    protected internal void BaseRemoveAt(int index);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    private ConfigurationElement CallCreateNewElement(string elementName);
    private ConfigurationElement CallCreateNewElement();
    protected virtual ConfigurationElement CreateNewElement(string elementName);
    protected abstract virtual ConfigurationElement CreateNewElement();
    protected abstract virtual object GetElementKey(ConfigurationElement element);
    internal object GetElementKeyInternal(ConfigurationElement element);
    protected virtual bool IsElementRemovable(ConfigurationElement element);
    private bool CompareKeys(object key1, object key2);
    protected virtual bool IsElementName(string elementName);
    internal bool IsLockableElement(string elementName);
}
public enum System.Configuration.ConfigurationElementCollectionType : Enum {
    public int value__;
    public static ConfigurationElementCollectionType BasicMap;
    public static ConfigurationElementCollectionType AddRemoveClearMap;
    public static ConfigurationElementCollectionType BasicMapAlternate;
    public static ConfigurationElementCollectionType AddRemoveClearMapAlternate;
}
public class System.Configuration.ConfigurationElementProperty : object {
    [CompilerGeneratedAttribute]
private ConfigurationValidatorBase <Validator>k__BackingField;
    public ConfigurationValidatorBase Validator { get; }
    public ConfigurationElementProperty(ConfigurationValidatorBase validator);
    [CompilerGeneratedAttribute]
public ConfigurationValidatorBase get_Validator();
}
[TypeForwardedFromAttribute("System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Configuration.ConfigurationErrorsException : ConfigurationException {
    private static string SerializationParamFilename;
    private static string SerializationParamLine;
    private static string SerializationParamErrorCount;
    private static string SerializationParamErrorData;
    private static string SerializationParamErrorType;
    private ConfigurationException[] _errors;
    private string _firstFilename;
    private int _firstLine;
    public string Message { get; }
    public string Filename { get; }
    public int Line { get; }
    public ICollection Errors { get; }
    internal ICollection`1<ConfigurationException> ErrorsGeneric { get; }
    public ConfigurationErrorsException(string message, Exception inner, string filename, int line);
    public ConfigurationErrorsException(string message);
    public ConfigurationErrorsException(string message, Exception inner);
    public ConfigurationErrorsException(string message, string filename, int line);
    public ConfigurationErrorsException(string message, XmlNode node);
    public ConfigurationErrorsException(string message, Exception inner, XmlNode node);
    public ConfigurationErrorsException(string message, XmlReader reader);
    public ConfigurationErrorsException(string message, Exception inner, XmlReader reader);
    internal ConfigurationErrorsException(string message, IConfigErrorInfo errorInfo);
    internal ConfigurationErrorsException(string message, Exception inner, IConfigErrorInfo errorInfo);
    internal ConfigurationErrorsException(ConfigurationException e);
    internal ConfigurationErrorsException(ICollection`1<ConfigurationException> coll);
    internal ConfigurationErrorsException(ArrayList coll);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ConfigurationErrorsException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public virtual string get_Filename();
    public virtual int get_Line();
    public ICollection get_Errors();
    internal ICollection`1<ConfigurationException> get_ErrorsGeneric();
    private void Init(string filename, int line);
    private static ConfigurationException GetFirstException(ICollection`1<ConfigurationException> coll);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static int GetLineNumber(XmlNode node);
    public static string GetFilename(XmlNode node);
    public static int GetLineNumber(XmlReader reader);
    public static string GetFilename(XmlReader reader);
    private static int GetConfigErrorInfoLineNumber(IConfigErrorInfo errorInfo);
    private static string GetConfigErrorInfoFilename(IConfigErrorInfo errorInfo);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Configuration.ConfigurationException : SystemException {
    private string _filename;
    private int _line;
    public string Message { get; }
    public string BareMessage { get; }
    public string Filename { get; }
    public int Line { get; }
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ConfigurationException(SerializationInfo info, StreamingContext context);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException instead.")]
public ConfigurationException(string message);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException instead.")]
public ConfigurationException(string message, Exception inner);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException instead.")]
public ConfigurationException(string message, XmlNode node);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException instead.")]
public ConfigurationException(string message, Exception inner, XmlNode node);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException instead.")]
public ConfigurationException(string message, string filename, int line);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException instead.")]
public ConfigurationException(string message, Exception inner, string filename, int line);
    public virtual string get_Message();
    public virtual string get_BareMessage();
    public virtual string get_Filename();
    public virtual int get_Line();
    private void Init(string filename, int line);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException.GetFilename instead.")]
public static string GetXmlNodeFilename(XmlNode node);
    [ObsoleteAttribute("ConfigurationException has been deprecated. Use System.Configuration.ConfigurationErrorsException.GetLinenumber instead.")]
public static int GetXmlNodeLineNumber(XmlNode node);
}
public class System.Configuration.ConfigurationFileMap : object {
    private Func`1<string> _getFilenameThunk;
    public string MachineConfigFilename { get; public set; }
    internal bool IsMachinePathDefault { get; }
    public ConfigurationFileMap(string machineConfigFilename);
    private ConfigurationFileMap(ConfigurationFileMap other);
    public string get_MachineConfigFilename();
    public void set_MachineConfigFilename(string value);
    public virtual object Clone();
    private static string GetFilenameFromMachineConfigFilePath();
    internal bool get_IsMachinePathDefault();
}
public class System.Configuration.ConfigurationLocation : object {
    private Configuration _config;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    internal ConfigurationLocation(Configuration config, string locationSubPath);
    [CompilerGeneratedAttribute]
public string get_Path();
    public Configuration OpenConfiguration();
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationLocationCollection : ReadOnlyCollectionBase {
    public ConfigurationLocation Item { get; }
    internal ConfigurationLocationCollection(ICollection col);
    public ConfigurationLocation get_Item(int index);
}
public class System.Configuration.ConfigurationLockCollection : object {
    private static string LockAll;
    private string _ignoreName;
    private ConfigurationElement _thisElement;
    private ArrayList _internalArraylist;
    private HybridDictionary _internalDictionary;
    private string _seedList;
    [CompilerGeneratedAttribute]
private ConfigurationLockCollectionType <LockType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsModified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceptionList>k__BackingField;
    internal ConfigurationLockCollectionType LockType { get; }
    public bool IsModified { get; private set; }
    internal bool ExceptionList { get; }
    public string AttributeList { get; }
    public bool HasParentElements { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal ConfigurationLockCollection(ConfigurationElement thisElement);
    internal ConfigurationLockCollection(ConfigurationElement thisElement, ConfigurationLockCollectionType lockType);
    internal ConfigurationLockCollection(ConfigurationElement thisElement, ConfigurationLockCollectionType lockType, string ignoreName);
    internal ConfigurationLockCollection(ConfigurationElement thisElement, ConfigurationLockCollectionType lockType, string ignoreName, ConfigurationLockCollection parentCollection);
    [CompilerGeneratedAttribute]
internal ConfigurationLockCollectionType get_LockType();
    [CompilerGeneratedAttribute]
public bool get_IsModified();
    [CompilerGeneratedAttribute]
private void set_IsModified(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ExceptionList();
    public string get_AttributeList();
    public bool get_HasParentElements();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void ClearSeedList();
    public void Add(string name);
    internal void Add(string name, ConfigurationValueFlags flags);
    internal bool DefinedInParent(string name);
    internal bool IsValueModified(string name);
    internal void RemoveInheritedLocks();
    public void Remove(string name);
    internal void ClearInternal(bool useSeedIfAvailable);
    public void Clear();
    public bool Contains(string name);
    public void CopyTo(String[] array, int index);
    internal void ResetModified();
    public bool IsReadOnly(string name);
    public void SetFromList(string attributeList);
}
internal enum System.Configuration.ConfigurationLockCollectionType : Enum {
    public int value__;
    public static ConfigurationLockCollectionType LockedAttributes;
    public static ConfigurationLockCollectionType LockedExceptionList;
    public static ConfigurationLockCollectionType LockedElements;
    public static ConfigurationLockCollectionType LockedElementsExceptionList;
}
public static class System.Configuration.ConfigurationManager : object {
    private static IInternalConfigSystem modreq(System.Runtime.CompilerServices.IsVolatile) s_configSystem;
    private static InitState modreq(System.Runtime.CompilerServices.IsVolatile) s_initState;
    private static object s_initLock;
    private static Exception modreq(System.Runtime.CompilerServices.IsVolatile) s_initError;
    internal static bool SetConfigurationSystemInProgress { get; }
    internal static bool SupportsUserConfig { get; }
    public static NameValueCollection AppSettings { get; }
    public static ConnectionStringSettingsCollection ConnectionStrings { get; }
    private static ConfigurationManager();
    internal static bool get_SetConfigurationSystemInProgress();
    internal static bool get_SupportsUserConfig();
    public static NameValueCollection get_AppSettings();
    public static ConnectionStringSettingsCollection get_ConnectionStrings();
    internal static void SetConfigurationSystem(IInternalConfigSystem configSystem, bool initComplete);
    private static void EnsureConfigurationSystem();
    internal static void SetInitError(Exception initError);
    internal static void CompleteConfigInit();
    private static void PrepareConfigSystem();
    public static object GetSection(string sectionName);
    public static void RefreshSection(string sectionName);
    public static Configuration OpenMachineConfiguration();
    public static Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap);
    public static Configuration OpenExeConfiguration(ConfigurationUserLevel userLevel);
    public static Configuration OpenExeConfiguration(string exePath);
    public static Configuration OpenMappedExeConfiguration(ExeConfigurationFileMap fileMap, ConfigurationUserLevel userLevel);
    public static Configuration OpenMappedExeConfiguration(ExeConfigurationFileMap fileMap, ConfigurationUserLevel userLevel, bool preLoad);
    private static Configuration OpenExeConfigurationImpl(ConfigurationFileMap fileMap, bool isMachine, ConfigurationUserLevel userLevel, string exePath, bool preLoad);
    private static void PreloadConfiguration(Configuration configuration);
    private static void PreloadConfigurationSectionGroup(ConfigurationSectionGroup sectionGroup);
}
internal static class System.Configuration.ConfigurationManagerInternalFactory : object {
    private static IConfigurationManagerInternal modreq(System.Runtime.CompilerServices.IsVolatile) s_instance;
    internal static IConfigurationManagerInternal Instance { get; }
    internal static IConfigurationManagerInternal get_Instance();
}
public class System.Configuration.ConfigurationProperty : object {
    internal static ConfigurationValidatorBase s_nonEmptyStringValidator;
    private static ConfigurationValidatorBase s_defaultValidatorInstance;
    internal static string DefaultCollectionPropertyName;
    private TypeConverter _converter;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isConfigurationElementType;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isTypeInited;
    private ConfigurationPropertyOptions _options;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProvidedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationValidatorBase <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoveElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearElementName>k__BackingField;
    public string Name { get; private set; }
    public string Description { get; private set; }
    internal string ProvidedName { get; private set; }
    internal bool IsConfigurationElementType { get; }
    public Type Type { get; private set; }
    public object DefaultValue { get; private set; }
    public bool IsRequired { get; }
    public bool IsKey { get; }
    public bool IsDefaultCollection { get; }
    public bool IsTypeStringTransformationRequired { get; }
    public bool IsAssemblyStringTransformationRequired { get; }
    public bool IsVersionCheckRequired { get; }
    public TypeConverter Converter { get; }
    public ConfigurationValidatorBase Validator { get; private set; }
    internal string AddElementName { get; }
    internal string RemoveElementName { get; }
    internal string ClearElementName { get; }
    public ConfigurationProperty(string name, Type type);
    public ConfigurationProperty(string name, Type type, object defaultValue);
    public ConfigurationProperty(string name, Type type, object defaultValue, ConfigurationPropertyOptions options);
    public ConfigurationProperty(string name, Type type, object defaultValue, TypeConverter typeConverter, ConfigurationValidatorBase validator, ConfigurationPropertyOptions options);
    public ConfigurationProperty(string name, Type type, object defaultValue, TypeConverter typeConverter, ConfigurationValidatorBase validator, ConfigurationPropertyOptions options, string description);
    internal ConfigurationProperty(PropertyInfo info);
    private static ConfigurationProperty();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
internal string get_ProvidedName();
    [CompilerGeneratedAttribute]
private void set_ProvidedName(string value);
    internal bool get_IsConfigurationElementType();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    public bool get_IsRequired();
    public bool get_IsKey();
    public bool get_IsDefaultCollection();
    public bool get_IsTypeStringTransformationRequired();
    public bool get_IsAssemblyStringTransformationRequired();
    public bool get_IsVersionCheckRequired();
    public TypeConverter get_Converter();
    [CompilerGeneratedAttribute]
public ConfigurationValidatorBase get_Validator();
    [CompilerGeneratedAttribute]
private void set_Validator(ConfigurationValidatorBase value);
    [CompilerGeneratedAttribute]
internal string get_AddElementName();
    [CompilerGeneratedAttribute]
internal string get_RemoveElementName();
    [CompilerGeneratedAttribute]
internal string get_ClearElementName();
    private void ConstructorInit(string name, Type type, ConfigurationPropertyOptions options, ConfigurationValidatorBase validator, TypeConverter converter, string description);
    private static void ValidatePropertyName(string name);
    private void SetDefaultValue(object value);
    private void InitDefaultValueFromTypeInfo(ConfigurationPropertyAttribute configurationProperty, DefaultValueAttribute defaultValueAttribute);
    internal object ConvertFromString(string value);
    internal string ConvertToString(object value);
    internal void Validate(object value);
    private void CreateConverter();
}
[AttributeUsageAttribute("128")]
public class System.Configuration.ConfigurationPropertyAttribute : Attribute {
    internal static string DefaultCollectionPropertyName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationPropertyOptions <Options>k__BackingField;
    public string Name { get; }
    public object DefaultValue { get; public set; }
    public ConfigurationPropertyOptions Options { get; public set; }
    public bool IsDefaultCollection { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsKey { get; public set; }
    public ConfigurationPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public ConfigurationPropertyOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(ConfigurationPropertyOptions value);
    public bool get_IsDefaultCollection();
    public void set_IsDefaultCollection(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public bool get_IsKey();
    public void set_IsKey(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationPropertyCollection : object {
    private ArrayList _items;
    internal ConfigurationProperty DefaultCollectionProperty { get; }
    public ConfigurationProperty Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal ConfigurationProperty get_DefaultCollectionProperty();
    public ConfigurationProperty get_Item(string name);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public void CopyTo(ConfigurationProperty[] array, int index);
    public bool Contains(string name);
    public void Add(ConfigurationProperty property);
    public bool Remove(string name);
    public void Clear();
}
[FlagsAttribute]
public enum System.Configuration.ConfigurationPropertyOptions : Enum {
    public int value__;
    public static ConfigurationPropertyOptions None;
    public static ConfigurationPropertyOptions IsDefaultCollection;
    public static ConfigurationPropertyOptions IsRequired;
    public static ConfigurationPropertyOptions IsKey;
    public static ConfigurationPropertyOptions IsTypeStringTransformationRequired;
    public static ConfigurationPropertyOptions IsAssemblyStringTransformationRequired;
    public static ConfigurationPropertyOptions IsVersionCheckRequired;
}
public enum System.Configuration.ConfigurationSaveMode : Enum {
    public int value__;
    public static ConfigurationSaveMode Modified;
    public static ConfigurationSaveMode Minimal;
    public static ConfigurationSaveMode Full;
}
internal class System.Configuration.ConfigurationSchemaErrors : object {
    private List`1<ConfigurationException> _errorsAll;
    private List`1<ConfigurationException> _errorsGlobal;
    private List`1<ConfigurationException> _errorsLocal;
    internal bool HasLocalErrors { get; }
    internal bool HasGlobalErrors { get; }
    private bool HasAllErrors { get; }
    internal int GlobalErrorCount { get; }
    internal bool get_HasLocalErrors();
    internal bool get_HasGlobalErrors();
    private bool get_HasAllErrors();
    internal int get_GlobalErrorCount();
    internal void AddError(ConfigurationException ce, ExceptionAction action);
    internal void SetSingleGlobalError(ConfigurationException ce);
    internal bool HasErrors(bool ignoreLocal);
    internal void ThrowIfErrors(bool ignoreLocal);
    internal List`1<ConfigurationException> RetrieveAndResetLocalErrors(bool keepLocalErrors);
    internal void AddSavedLocalErrors(ICollection`1<ConfigurationException> coll);
    internal void ResetLocalErrors();
}
public abstract class System.Configuration.ConfigurationSection : ConfigurationElement {
    [CompilerGeneratedAttribute]
private SectionInformation <SectionInformation>k__BackingField;
    public SectionInformation SectionInformation { get; }
    [CompilerGeneratedAttribute]
public SectionInformation get_SectionInformation();
    protected internal virtual object GetRuntimeObject();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual void DeserializeSection(XmlReader reader);
    protected internal virtual string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode);
    protected internal virtual bool ShouldSerializePropertyInTargetVersion(ConfigurationProperty property, string propertyName, FrameworkName targetFramework, ConfigurationElement parentConfigurationElement);
    protected internal virtual bool ShouldSerializeElementInTargetVersion(ConfigurationElement element, string elementName, FrameworkName targetFramework);
    protected internal virtual bool ShouldSerializeSectionInTargetVersion(FrameworkName targetFramework);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationSectionCollection : NameObjectCollectionBase {
    private ConfigurationSectionGroup _configSectionGroup;
    private MgmtConfigurationRecord _configRecord;
    public ConfigurationSection Item { get; }
    public ConfigurationSection Item { get; }
    internal ConfigurationSectionCollection(MgmtConfigurationRecord configRecord, ConfigurationSectionGroup configSectionGroup);
    public ConfigurationSection get_Item(string name);
    public ConfigurationSection get_Item(int index);
    internal void DetachFromConfigurationRecord();
    private void VerifyIsAttachedToConfigRecord();
    public void Add(string name, ConfigurationSection section);
    public void Clear();
    public void CopyTo(ConfigurationSection[] array, int index);
    public ConfigurationSection Get(int index);
    public ConfigurationSection Get(string name);
    [IteratorStateMachineAttribute("System.Configuration.ConfigurationSectionCollection/<GetEnumerator>d__14")]
public virtual IEnumerator GetEnumerator();
    public string GetKey(int index);
    public void Remove(string name);
    public void RemoveAt(int index);
}
public class System.Configuration.ConfigurationSectionGroup : object {
    private MgmtConfigurationRecord _configRecord;
    private ConfigurationSectionGroupCollection _configSectionGroups;
    private ConfigurationSectionCollection _configSections;
    private string _typeName;
    [CompilerGeneratedAttribute]
private bool <IsDeclared>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeclarationRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRoot>k__BackingField;
    internal bool Attached { get; }
    public bool IsDeclared { get; private set; }
    public bool IsDeclarationRequired { get; private set; }
    public string SectionGroupName { get; private set; }
    public string Name { get; private set; }
    public string Type { get; public set; }
    public ConfigurationSectionCollection Sections { get; }
    public ConfigurationSectionGroupCollection SectionGroups { get; }
    internal bool IsRoot { get; private set; }
    internal bool get_Attached();
    [CompilerGeneratedAttribute]
public bool get_IsDeclared();
    [CompilerGeneratedAttribute]
private void set_IsDeclared(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDeclarationRequired();
    [CompilerGeneratedAttribute]
private void set_IsDeclarationRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_SectionGroupName();
    [CompilerGeneratedAttribute]
private void set_SectionGroupName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public ConfigurationSectionCollection get_Sections();
    public ConfigurationSectionGroupCollection get_SectionGroups();
    [CompilerGeneratedAttribute]
internal bool get_IsRoot();
    [CompilerGeneratedAttribute]
private void set_IsRoot(bool value);
    internal void AttachToConfigurationRecord(MgmtConfigurationRecord configRecord, FactoryRecord factoryRecord);
    internal void RootAttachToConfigurationRecord(MgmtConfigurationRecord configRecord);
    internal void DetachFromConfigurationRecord();
    private FactoryRecord FindParentFactoryRecord(bool permitErrors);
    private void VerifyIsAttachedToConfigRecord();
    public void ForceDeclaration();
    public void ForceDeclaration(bool force);
    protected internal virtual bool ShouldSerializeSectionGroupInTargetVersion(FrameworkName targetFramework);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationSectionGroupCollection : NameObjectCollectionBase {
    private ConfigurationSectionGroup _configSectionGroup;
    private MgmtConfigurationRecord _configRecord;
    public ConfigurationSectionGroup Item { get; }
    public ConfigurationSectionGroup Item { get; }
    internal ConfigurationSectionGroupCollection(MgmtConfigurationRecord configRecord, ConfigurationSectionGroup configSectionGroup);
    public ConfigurationSectionGroup get_Item(string name);
    public ConfigurationSectionGroup get_Item(int index);
    internal void DetachFromConfigurationRecord();
    private void VerifyIsAttachedToConfigRecord();
    public void Add(string name, ConfigurationSectionGroup sectionGroup);
    public void Clear();
    public void CopyTo(ConfigurationSectionGroup[] array, int index);
    public ConfigurationSectionGroup Get(int index);
    public ConfigurationSectionGroup Get(string name);
    [IteratorStateMachineAttribute("System.Configuration.ConfigurationSectionGroupCollection/<GetEnumerator>d__14")]
public virtual IEnumerator GetEnumerator();
    public string GetKey(int index);
    public void Remove(string name);
    public void RemoveAt(int index);
}
public class System.Configuration.ConfigurationSettings : object {
    [ObsoleteAttribute("ConfigurationSettings.AppSettings has been deprecated. Use System.Configuration.ConfigurationManager.AppSettings instead.")]
public static NameValueCollection AppSettings { get; }
    public static NameValueCollection get_AppSettings();
    [ObsoleteAttribute("ConfigurationSettings.GetConfig has been deprecated. Use System.Configuration.ConfigurationManager.GetSection instead.")]
public static object GetConfig(string sectionName);
}
public enum System.Configuration.ConfigurationUserLevel : Enum {
    public int value__;
    public static ConfigurationUserLevel None;
    public static ConfigurationUserLevel PerUserRoaming;
    public static ConfigurationUserLevel PerUserRoamingAndLocal;
}
[AttributeUsageAttribute("128")]
public class System.Configuration.ConfigurationValidatorAttribute : Attribute {
    internal Type _declaringType;
    [CompilerGeneratedAttribute]
private Type <ValidatorType>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public Type ValidatorType { get; }
    public ConfigurationValidatorAttribute(Type validator);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    [CompilerGeneratedAttribute]
public Type get_ValidatorType();
    internal void SetDeclaringType(Type declaringType);
}
public abstract class System.Configuration.ConfigurationValidatorBase : object {
    public virtual bool CanValidate(Type type);
    public abstract virtual void Validate(object value);
}
internal class System.Configuration.ConfigurationValue : object {
    internal PropertySourceInfo SourceInfo;
    internal object Value;
    internal ConfigurationValueFlags ValueFlags;
    internal ConfigurationValue(object value, ConfigurationValueFlags valueFlags, PropertySourceInfo sourceInfo);
}
[FlagsAttribute]
internal enum System.Configuration.ConfigurationValueFlags : Enum {
    public int value__;
    public static ConfigurationValueFlags Default;
    public static ConfigurationValueFlags Inherited;
    public static ConfigurationValueFlags Modified;
    public static ConfigurationValueFlags Locked;
    public static ConfigurationValueFlags XmlParentInherited;
}
[DefaultMemberAttribute("Item")]
internal class System.Configuration.ConfigurationValues : NameObjectCollectionBase {
    private static IEnumerable modreq(System.Runtime.CompilerServices.IsVolatile) s_emptyCollection;
    private BaseConfigurationRecord _configRecord;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _containsElement;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _containsInvalidValue;
    internal object Item { get; internal set; }
    internal object Item { get; }
    internal object SyncRoot { get; }
    internal IEnumerable ConfigurationElements { get; }
    internal IEnumerable InvalidValues { get; }
    private static IEnumerable EmptyCollectionInstance { get; }
    internal object get_Item(string key);
    internal void set_Item(string key, object value);
    internal object get_Item(int index);
    internal object get_SyncRoot();
    internal IEnumerable get_ConfigurationElements();
    internal IEnumerable get_InvalidValues();
    private static IEnumerable get_EmptyCollectionInstance();
    internal void AssociateContext(BaseConfigurationRecord configRecord);
    internal bool Contains(string key);
    internal string GetKey(int index);
    internal ConfigurationValue GetConfigValue(string key);
    internal ConfigurationValue GetConfigValue(int index);
    internal PropertySourceInfo GetSourceInfo(string key);
    internal void ChangeSourceInfo(string key, PropertySourceInfo sourceInfo);
    private ConfigurationValue CreateConfigValue(object value, ConfigurationValueFlags valueFlags, PropertySourceInfo sourceInfo);
    internal void SetValue(string key, object value, ConfigurationValueFlags valueFlags, PropertySourceInfo sourceInfo);
    internal void Clear();
    internal ConfigurationValueFlags RetrieveFlags(string key);
    internal bool IsModified(string key);
    internal bool IsInherited(string key);
}
internal class System.Configuration.ConfigXmlAttribute : XmlAttribute {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlAttribute(string filename, int line, string prefix, string localName, string namespaceUri, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
internal class System.Configuration.ConfigXmlCDataSection : XmlCDataSection {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlCDataSection(string filename, int line, string data, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
internal class System.Configuration.ConfigXmlComment : XmlComment {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlComment(string filename, int line, string comment, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
public class System.Configuration.ConfigXmlDocument : XmlDocument {
    private XmlTextReader _reader;
    private int _lineOffset;
    private string _filename;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    public int LineNumber { get; }
    public string Filename { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    public int get_LineNumber();
    public string get_Filename();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual void Load(string filename);
    public void LoadSingleElement(string filename, XmlTextReader sourceReader);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceUri);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceUri);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string data);
    public virtual XmlWhitespace CreateWhitespace(string data);
}
internal class System.Configuration.ConfigXmlElement : XmlElement {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlElement(string filename, int line, string prefix, string localName, string namespaceUri, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
internal class System.Configuration.ConfigXmlReader : XmlTextReader {
    private string _filename;
    private bool _lineNumberIsConstant;
    private int _lineOffset;
    [CompilerGeneratedAttribute]
private string <RawXml>k__BackingField;
    internal string RawXml { get; }
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    internal ConfigXmlReader(string rawXml, string filename, int lineOffset);
    internal ConfigXmlReader(string rawXml, string filename, int lineOffset, bool lineNumberIsConstant);
    [CompilerGeneratedAttribute]
internal string get_RawXml();
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    internal ConfigXmlReader Clone();
}
internal class System.Configuration.ConfigXmlSignificantWhitespace : XmlSignificantWhitespace {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlSignificantWhitespace(string filename, int line, string strData, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
internal class System.Configuration.ConfigXmlText : XmlText {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlText(string filename, int line, string strData, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
internal class System.Configuration.ConfigXmlWhitespace : XmlWhitespace {
    private string _filename;
    private int _line;
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    public ConfigXmlWhitespace(string filename, int line, string comment, XmlDocument doc);
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual XmlNode CloneNode(bool deep);
}
public class System.Configuration.ConnectionStringSettings : ConfigurationElement {
    private static ConfigurationProperty s_propName;
    private static ConfigurationProperty s_propConnectionString;
    private static ConfigurationProperty s_propProviderName;
    private static ConfigurationPropertyCollection s_properties;
    internal string Key { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("connectionString")]
public string ConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("providerName")]
public string ProviderName { get; public set; }
    public ConnectionStringSettings(string name, string connectionString);
    public ConnectionStringSettings(string name, string connectionString, string providerName);
    private static ConnectionStringSettings();
    internal string get_Key();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.ConnectionStringSettings")]
public class System.Configuration.ConnectionStringSettingsCollection : ConfigurationElementCollection {
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    public ConnectionStringSettings Item { get; public set; }
    public ConnectionStringSettings Item { get; }
    private static ConnectionStringSettingsCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ConnectionStringSettings get_Item(int index);
    public void set_Item(int index, ConnectionStringSettings value);
    public ConnectionStringSettings get_Item(string name);
    public int IndexOf(ConnectionStringSettings settings);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
    public void Add(ConnectionStringSettings settings);
    public void Remove(ConnectionStringSettings settings);
    public void RemoveAt(int index);
    public void Remove(string name);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Clear();
}
public class System.Configuration.ConnectionStringsSection : ConfigurationSection {
    private static ConfigurationProperty s_propConnectionStrings;
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public ConnectionStringSettingsCollection ConnectionStrings { get; }
    private static ConnectionStringsSection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ConnectionStringSettingsCollection get_ConnectionStrings();
    protected internal virtual object GetRuntimeObject();
}
public class System.Configuration.ContextInformation : object {
    private BaseConfigurationRecord _configRecord;
    private object _hostingContext;
    private bool _hostingContextEvaluated;
    public object HostingContext { get; }
    public bool IsMachineLevel { get; }
    internal ContextInformation(BaseConfigurationRecord configRecord);
    public object get_HostingContext();
    public bool get_IsMachineLevel();
    public object GetSection(string sectionName);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.DateTimeConfigurationElement")]
internal class System.Configuration.DateTimeConfigurationCollection : ConfigurationElementCollection {
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    public DateTime Item { get; public set; }
    public Object[] AllKeys { get; }
    private static DateTimeConfigurationCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public DateTime get_Item(int index);
    public void set_Item(int index, DateTime value);
    public Object[] get_AllKeys();
    public void Add(DateTime dateTime);
    public void Remove(DateTime dateTime);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Configuration.DateTimeConfigurationElement : ConfigurationElement {
    private static ConfigurationProperty s_propValue;
    private static ConfigurationPropertyCollection s_properties;
    private DateTime _initValue;
    private bool _needsInit;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("value")]
public DateTime Value { get; public set; }
    public DateTimeConfigurationElement(DateTime value);
    private static DateTimeConfigurationElement();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public DateTime get_Value();
    public void set_Value(DateTime value);
    protected internal virtual void Init();
}
internal class System.Configuration.DeclarationUpdate : Update {
    internal DeclarationUpdate(string configKey, bool moved, string updatedXml);
}
public class System.Configuration.DefaultSection : ConfigurationSection {
    private static ConfigurationPropertyCollection modreq(System.Runtime.CompilerServices.IsVolatile) s_properties;
    private bool _isModified;
    private string _rawXml;
    protected internal ConfigurationPropertyCollection Properties { get; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    private static ConfigurationPropertyCollection EnsureStaticPropertyBag();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual void Reset(ConfigurationElement parentSection);
    protected internal virtual void DeserializeSection(XmlReader xmlReader);
    protected internal virtual string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.DefaultSettingValueAttribute : Attribute {
    private string _value;
    public string Value { get; }
    public DefaultSettingValueAttribute(string value);
    public string get_Value();
}
public class System.Configuration.DefaultValidator : ConfigurationValidatorBase {
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
internal class System.Configuration.DefinitionUpdate : Update {
    [CompilerGeneratedAttribute]
private SectionRecord <SectionRecord>k__BackingField;
    internal SectionRecord SectionRecord { get; }
    internal DefinitionUpdate(string configKey, bool moved, string updatedXml, SectionRecord sectionRecord);
    [CompilerGeneratedAttribute]
internal SectionRecord get_SectionRecord();
}
public class System.Configuration.DictionarySectionHandler : object {
    protected string KeyAttributeName { get; }
    protected string ValueAttributeName { get; }
    internal bool ValueRequired { get; }
    public virtual object Create(object parent, object context, XmlNode section);
    protected virtual string get_KeyAttributeName();
    protected virtual string get_ValueAttributeName();
    internal virtual bool get_ValueRequired();
}
[SupportedOSPlatformAttribute("windows")]
public class System.Configuration.DpapiProtectedConfigurationProvider : ProtectedConfigurationProvider {
    private bool _useMachineProtection;
    private string _keyEntropy;
    public bool UseMachineProtection { get; }
    public virtual XmlNode Decrypt(XmlNode encryptedNode);
    public virtual XmlNode Encrypt(XmlNode node);
    private string EncryptText(string clearText);
    private string DecryptText(string encText);
    public bool get_UseMachineProtection();
    public virtual void Initialize(string name, NameValueCollection configurationValues);
    private static XmlNode TraverseToChild(XmlNode node, string name, bool onlyChild);
    private static Byte[] PrepareDataBlob(string s);
    private static bool GetBooleanValue(NameValueCollection configurationValues, string valueName, bool defaultValue);
}
public class System.Configuration.ElementInformation : object {
    private ConfigurationElement _thisElement;
    private ConfigurationException[] _errors;
    private PropertyInformationCollection _internalProperties;
    public PropertyInformationCollection Properties { get; }
    public bool IsPresent { get; }
    public bool IsLocked { get; }
    public bool IsCollection { get; }
    public string Source { get; }
    public int LineNumber { get; }
    public Type Type { get; }
    public ConfigurationValidatorBase Validator { get; }
    public ICollection Errors { get; }
    internal ElementInformation(ConfigurationElement thisElement);
    public PropertyInformationCollection get_Properties();
    public bool get_IsPresent();
    public bool get_IsLocked();
    public bool get_IsCollection();
    public string get_Source();
    public int get_LineNumber();
    public Type get_Type();
    public ConfigurationValidatorBase get_Validator();
    public ICollection get_Errors();
    internal PropertySourceInfo PropertyInfoInternal();
    internal void ChangeSourceAndLineNumber(PropertySourceInfo sourceInformation);
    private ConfigurationException[] GetReadOnlyErrorsList();
}
internal class System.Configuration.EmptyImpersonationContext : object {
    private static IDisposable modreq(System.Runtime.CompilerServices.IsVolatile) s_emptyImpersonationContext;
    public sealed virtual void Dispose();
    internal static IDisposable GetStaticInstance();
}
internal class System.Configuration.ErrorInfoXmlDocument : XmlDocument {
    private string _filename;
    private int _lineOffset;
    private XmlTextReader _reader;
    internal int LineNumber { get; }
    private int System.Configuration.Internal.IConfigErrorInfo.LineNumber { get; }
    private string System.Configuration.Internal.IConfigErrorInfo.Filename { get; }
    internal int get_LineNumber();
    private sealed virtual override int System.Configuration.Internal.IConfigErrorInfo.get_LineNumber();
    private sealed virtual override string System.Configuration.Internal.IConfigErrorInfo.get_Filename();
    public virtual void Load(string filename);
    private void LoadFromConfigXmlReader(ConfigXmlReader reader);
    internal static XmlNode CreateSectionXmlNode(ConfigXmlReader reader);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceUri);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceUri);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string data);
    public virtual XmlWhitespace CreateWhitespace(string data);
}
internal static class System.Configuration.ErrorsHelper : object {
    internal static int GetErrorCount(List`1<ConfigurationException> errors);
    internal static bool GetHasErrors(List`1<ConfigurationException> errors);
    internal static void AddError(List`1& errors, ConfigurationException e);
    internal static void AddErrors(List`1& errors, ICollection`1<ConfigurationException> coll);
    internal static ConfigurationErrorsException GetErrorsException(List`1<ConfigurationException> errors);
    internal static void ThrowOnErrors(List`1<ConfigurationException> errors);
}
internal enum System.Configuration.ExceptionAction : Enum {
    public int value__;
    public static ExceptionAction NonSpecific;
    public static ExceptionAction Local;
    public static ExceptionAction Global;
}
internal static class System.Configuration.ExceptionUtil : object {
    internal static string NoExceptionInformation { get; }
    internal static string get_NoExceptionInformation();
    internal static ArgumentException ParameterInvalid(string parameter);
    internal static ArgumentException ParameterNullOrEmpty(string parameter);
    internal static ArgumentException PropertyInvalid(string property);
    internal static ArgumentException PropertyNullOrEmpty(string property);
    internal static InvalidOperationException UnexpectedError(string methodName);
    internal static ConfigurationErrorsException WrapAsConfigException(string outerMessage, Exception e, IConfigErrorInfo errorInfo);
    internal static ConfigurationErrorsException WrapAsConfigException(string outerMessage, Exception e, string filename, int line);
}
public class System.Configuration.ExeConfigurationFileMap : ConfigurationFileMap {
    [CompilerGeneratedAttribute]
private string <ExeConfigFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoamingUserConfigFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalUserConfigFilename>k__BackingField;
    public string ExeConfigFilename { get; public set; }
    public string RoamingUserConfigFilename { get; public set; }
    public string LocalUserConfigFilename { get; public set; }
    public ExeConfigurationFileMap(string machineConfigFileName);
    private ExeConfigurationFileMap(string machineConfigFileName, string exeConfigFilename, string roamingUserConfigFilename, string localUserConfigFilename);
    [CompilerGeneratedAttribute]
public string get_ExeConfigFilename();
    [CompilerGeneratedAttribute]
public void set_ExeConfigFilename(string value);
    [CompilerGeneratedAttribute]
public string get_RoamingUserConfigFilename();
    [CompilerGeneratedAttribute]
public void set_RoamingUserConfigFilename(string value);
    [CompilerGeneratedAttribute]
public string get_LocalUserConfigFilename();
    [CompilerGeneratedAttribute]
public void set_LocalUserConfigFilename(string value);
    public virtual object Clone();
}
public class System.Configuration.ExeContext : object {
    [CompilerGeneratedAttribute]
private ConfigurationUserLevel <UserLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExePath>k__BackingField;
    public ConfigurationUserLevel UserLevel { get; }
    public string ExePath { get; }
    internal ExeContext(ConfigurationUserLevel userContext, string exePath);
    [CompilerGeneratedAttribute]
public ConfigurationUserLevel get_UserLevel();
    [CompilerGeneratedAttribute]
public string get_ExePath();
}
[DebuggerDisplayAttribute("FactoryId {ConfigKey}")]
internal class System.Configuration.FactoryId : object {
    [CompilerGeneratedAttribute]
private string <ConfigKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal string ConfigKey { get; }
    internal string Group { get; }
    internal string Name { get; }
    internal FactoryId(string configKey, string group, string name);
    [CompilerGeneratedAttribute]
internal string get_ConfigKey();
    [CompilerGeneratedAttribute]
internal string get_Group();
    [CompilerGeneratedAttribute]
internal string get_Name();
}
[DebuggerDisplayAttribute("FactoryRecord {ConfigKey}")]
internal class System.Configuration.FactoryRecord : object {
    private static int FlagAllowLocation;
    private static int FlagRestartOnExternalChanges;
    private static int FlagRequirePermission;
    private static int FlagIsGroup;
    private static int FlagIsFromTrustedConfigRecord;
    private static int FlagIsUndeclared;
    private List`1<ConfigurationException> _errors;
    private SimpleBitVector32 _flags;
    [CompilerGeneratedAttribute]
private string <ConfigKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FactoryTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationAllowDefinition <AllowDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationAllowExeDefinition <AllowExeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private OverrideModeSetting <OverrideModeDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    internal string ConfigKey { get; }
    internal string Group { get; }
    internal string Name { get; }
    internal object Factory { get; internal set; }
    internal string FactoryTypeName { get; internal set; }
    internal ConfigurationAllowDefinition AllowDefinition { get; internal set; }
    internal ConfigurationAllowExeDefinition AllowExeDefinition { get; internal set; }
    internal OverrideModeSetting OverrideModeDefault { get; }
    internal bool AllowLocation { get; internal set; }
    internal bool RestartOnExternalChanges { get; internal set; }
    internal bool RequirePermission { get; internal set; }
    internal bool IsGroup { get; internal set; }
    internal bool IsFromTrustedConfigRecord { get; internal set; }
    internal bool IsUndeclared { get; internal set; }
    internal bool HasFile { get; }
    internal List`1<ConfigurationException> Errors { get; }
    internal bool HasErrors { get; }
    public string Filename { get; public set; }
    public int LineNumber { get; public set; }
    private FactoryRecord(string configKey, string group, string name, object factory, string factoryTypeName, SimpleBitVector32 flags, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, OverrideModeSetting overrideModeDefault, string filename, int lineNumber, ICollection`1<ConfigurationException> errors);
    internal FactoryRecord(string configKey, string group, string name, string factoryTypeName, string filename, int lineNumber);
    internal FactoryRecord(string configKey, string group, string name, string factoryTypeName, bool allowLocation, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, OverrideModeSetting overrideModeDefault, bool restartOnExternalChanges, bool requirePermission, bool isFromTrustedConfigRecord, bool isUndeclared, string filename, int lineNumber);
    [CompilerGeneratedAttribute]
internal string get_ConfigKey();
    [CompilerGeneratedAttribute]
internal string get_Group();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal object get_Factory();
    [CompilerGeneratedAttribute]
internal void set_Factory(object value);
    [CompilerGeneratedAttribute]
internal string get_FactoryTypeName();
    [CompilerGeneratedAttribute]
internal void set_FactoryTypeName(string value);
    [CompilerGeneratedAttribute]
internal ConfigurationAllowDefinition get_AllowDefinition();
    [CompilerGeneratedAttribute]
internal void set_AllowDefinition(ConfigurationAllowDefinition value);
    [CompilerGeneratedAttribute]
internal ConfigurationAllowExeDefinition get_AllowExeDefinition();
    [CompilerGeneratedAttribute]
internal void set_AllowExeDefinition(ConfigurationAllowExeDefinition value);
    [CompilerGeneratedAttribute]
internal OverrideModeSetting get_OverrideModeDefault();
    internal bool get_AllowLocation();
    internal void set_AllowLocation(bool value);
    internal bool get_RestartOnExternalChanges();
    internal void set_RestartOnExternalChanges(bool value);
    internal bool get_RequirePermission();
    internal void set_RequirePermission(bool value);
    internal bool get_IsGroup();
    internal void set_IsGroup(bool value);
    internal bool get_IsFromTrustedConfigRecord();
    internal void set_IsFromTrustedConfigRecord(bool value);
    internal bool get_IsUndeclared();
    internal void set_IsUndeclared(bool value);
    internal bool get_HasFile();
    internal List`1<ConfigurationException> get_Errors();
    internal bool get_HasErrors();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    internal FactoryRecord CloneSection(string filename, int lineNumber);
    internal FactoryRecord CloneSectionGroup(string factoryTypeName, string filename, int lineNumber);
    internal bool IsEquivalentType(IInternalConfigHost host, string typeName);
    internal bool IsEquivalentSectionGroupFactory(IInternalConfigHost host, string typeName);
    internal bool IsEquivalentSectionFactory(IInternalConfigHost host, string typeName, bool allowLocation, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, bool restartOnExternalChanges, bool requirePermission);
    internal void AddErrors(ICollection`1<ConfigurationException> coll);
    internal void ThrowOnErrors();
    internal bool IsIgnorable();
}
public class System.Configuration.GenericEnumConverter : ConfigurationConverterBase {
    private Type _enumType;
    public GenericEnumConverter(Type typeEnum);
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
    private ArgumentException CreateExceptionForInvalidValue();
}
internal static class System.Configuration.HandlerBase : object {
    private static XmlNode GetAndRemoveAttribute(XmlNode node, string attrib, bool fRequired);
    private static XmlNode GetAndRemoveStringAttributeInternal(XmlNode node, string attrib, bool fRequired, String& val);
    internal static XmlNode GetAndRemoveStringAttribute(XmlNode node, string attrib, String& val);
    private static XmlNode GetAndRemoveBooleanAttributeInternal(XmlNode node, string attrib, bool fRequired, Boolean& val);
    internal static XmlNode GetAndRemoveBooleanAttribute(XmlNode node, string attrib, Boolean& val);
    private static XmlNode GetAndRemoveIntegerAttributeInternal(XmlNode node, string attrib, bool fRequired, Int32& val);
    internal static XmlNode GetAndRemoveIntegerAttribute(XmlNode node, string attrib, Int32& val);
    internal static void CheckForUnrecognizedAttributes(XmlNode node);
    internal static string RemoveAttribute(XmlNode node, string name);
    internal static string RemoveRequiredAttribute(XmlNode node, string name);
    internal static string RemoveRequiredAttribute(XmlNode node, string name, bool allowEmpty);
    internal static void CheckForNonElement(XmlNode node);
    internal static bool IsIgnorableAlsoCheckForNonElement(XmlNode node);
    internal static void CheckForChildNodes(XmlNode node);
    internal static void ThrowUnrecognizedElement(XmlNode node);
}
internal static class System.Configuration.HResults : object {
    internal static int Configuration;
}
public interface System.Configuration.IApplicationSettingsProvider {
    public abstract virtual SettingsPropertyValue GetPreviousVersion(SettingsContext context, SettingsProperty property);
    public abstract virtual void Reset(SettingsContext context);
    public abstract virtual void Upgrade(SettingsContext context, SettingsPropertyCollection properties);
}
public interface System.Configuration.IConfigurationSectionHandler {
    public abstract virtual object Create(object parent, object configContext, XmlNode section);
}
public interface System.Configuration.IConfigurationSystem {
    public abstract virtual object GetConfig(string configKey);
    public abstract virtual void Init();
}
public class System.Configuration.IdnElement : ConfigurationElement {
    internal static UriIdnScope EnabledDefaultValue;
    private ConfigurationPropertyCollection _properties;
    private ConfigurationProperty _enabled;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public UriIdnScope Enabled { get; public set; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public UriIdnScope get_Enabled();
    public void set_Enabled(UriIdnScope value);
}
public class System.Configuration.IgnoreSection : ConfigurationSection {
    private static ConfigurationPropertyCollection modreq(System.Runtime.CompilerServices.IsVolatile) s_properties;
    private bool _isModified;
    private string _rawXml;
    protected internal ConfigurationPropertyCollection Properties { get; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    private static ConfigurationPropertyCollection EnsureStaticPropertyBag();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual void Reset(ConfigurationElement parentSection);
    protected internal virtual void DeserializeSection(XmlReader xmlReader);
    protected internal virtual string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode);
}
public class System.Configuration.IgnoreSectionHandler : object {
    public virtual object Create(object parent, object configContext, XmlNode section);
}
internal class System.Configuration.ImplicitMachineConfigHost : DelegatingConfigHost {
    private string _machineStreamName;
    private ConfigurationFileMap _fileMap;
    private static string ImplicitMachineConfig;
    internal ImplicitMachineConfigHost(IInternalConfigHost host);
    public virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    public virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    private void GetFileMap(Object[] parameters);
    public virtual string GetStreamName(string configPath);
    public virtual Stream OpenStreamForRead(string streamName);
}
public class System.Configuration.InfiniteIntConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.InfiniteTimeSpanConverter : ConfigurationConverterBase {
    private static TypeConverter s_timeSpanConverter;
    private static InfiniteTimeSpanConverter();
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.IntegerValidator : ConfigurationValidatorBase {
    private ValidationFlags _flags;
    private int _maxValue;
    private int _minValue;
    private int _resolution;
    public IntegerValidator(int minValue, int maxValue);
    public IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive);
    public IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive, int resolution);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.IntegerValidatorAttribute : ConfigurationValidatorAttribute {
    private int _max;
    private int _min;
    [CompilerGeneratedAttribute]
private bool <ExcludeRange>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public int MinValue { get; public set; }
    public int MaxValue { get; public set; }
    public bool ExcludeRange { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public int get_MinValue();
    public void set_MinValue(int value);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeRange();
    [CompilerGeneratedAttribute]
public void set_ExcludeRange(bool value);
}
internal class System.Configuration.Internal.ConfigSystem : object {
    private ImplicitMachineConfigHost _configHost;
    private IInternalConfigRoot _configRoot;
    private IInternalConfigHost System.Configuration.Internal.IConfigSystem.Host { get; }
    private IInternalConfigRoot System.Configuration.Internal.IConfigSystem.Root { get; }
    private sealed virtual override void System.Configuration.Internal.IConfigSystem.Init(Type typeConfigHost, Object[] hostInitParams);
    private sealed virtual override IInternalConfigHost System.Configuration.Internal.IConfigSystem.get_Host();
    private sealed virtual override IInternalConfigRoot System.Configuration.Internal.IConfigSystem.get_Root();
}
internal class System.Configuration.Internal.ConfigurationManagerInternal : object {
    private bool System.Configuration.Internal.IConfigurationManagerInternal.SupportsUserConfig { get; }
    private bool System.Configuration.Internal.IConfigurationManagerInternal.SetConfigurationSystemInProgress { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.MachineConfigPath { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ApplicationConfigUri { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ExeProductName { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ExeProductVersion { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigDirectory { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigPath { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigDirectory { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigPath { get; }
    private string System.Configuration.Internal.IConfigurationManagerInternal.UserConfigFilename { get; }
    private sealed virtual override bool System.Configuration.Internal.IConfigurationManagerInternal.get_SupportsUserConfig();
    private sealed virtual override bool System.Configuration.Internal.IConfigurationManagerInternal.get_SetConfigurationSystemInProgress();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_MachineConfigPath();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ApplicationConfigUri();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ExeProductName();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ExeProductVersion();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ExeRoamingConfigDirectory();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ExeRoamingConfigPath();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ExeLocalConfigDirectory();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_ExeLocalConfigPath();
    private sealed virtual override string System.Configuration.Internal.IConfigurationManagerInternal.get_UserConfigFilename();
}
public class System.Configuration.Internal.DelegatingConfigHost : object {
    [CompilerGeneratedAttribute]
private IInternalConfigHost <Host>k__BackingField;
    protected IInternalConfigHost Host { get; protected set; }
    public bool SupportsChangeNotifications { get; }
    public bool SupportsRefresh { get; }
    public bool SupportsPath { get; }
    public bool SupportsLocation { get; }
    public bool IsRemote { get; }
    private IInternalConfigHostPaths HostPaths { get; }
    public bool HasLocalConfig { get; }
    public bool HasRoamingConfig { get; }
    public bool IsAppConfigHttp { get; }
    [CompilerGeneratedAttribute]
protected IInternalConfigHost get_Host();
    [CompilerGeneratedAttribute]
protected void set_Host(IInternalConfigHost value);
    public virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    public virtual bool IsConfigRecordRequired(string configPath);
    public virtual bool IsInitDelayed(IInternalConfigRecord configRecord);
    public virtual void RequireCompleteInit(IInternalConfigRecord configRecord);
    public virtual bool IsSecondaryRoot(string configPath);
    public virtual string GetStreamName(string configPath);
    public virtual string GetStreamNameForConfigSource(string streamName, string configSource);
    public virtual object GetStreamVersion(string streamName);
    public virtual Stream OpenStreamForRead(string streamName);
    public virtual Stream OpenStreamForRead(string streamName, bool assertPermissions);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions);
    public virtual void WriteCompleted(string streamName, bool success, object writeContext);
    public virtual void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions);
    public virtual void DeleteStream(string streamName);
    public virtual bool IsFile(string streamName);
    public virtual bool get_SupportsChangeNotifications();
    public virtual object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public virtual void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public virtual bool get_SupportsRefresh();
    public virtual bool get_SupportsPath();
    public virtual bool get_SupportsLocation();
    public virtual bool IsAboveApplication(string configPath);
    public virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    public virtual void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    public virtual string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath);
    public virtual bool IsLocationApplicable(string configPath);
    public virtual bool PrefetchAll(string configPath, string streamName);
    public virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public virtual object CreateDeprecatedConfigContext(string configPath);
    public virtual object CreateConfigurationContext(string configPath, string locationSubPath);
    public virtual string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public virtual string EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public virtual Type GetConfigType(string typeName, bool throwOnError);
    public virtual string GetConfigTypeName(Type t);
    public virtual bool get_IsRemote();
    private IInternalConfigHostPaths get_HostPaths();
    public virtual void RefreshConfigPaths();
    public virtual bool get_HasLocalConfig();
    public virtual bool get_HasRoamingConfig();
    public virtual bool get_IsAppConfigHttp();
    public virtual bool IsTrustedConfigPath(string configPath);
    public virtual bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord);
    public virtual IDisposable Impersonate();
    [ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
public virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
}
internal class System.Configuration.Internal.DummyDisposable : object {
    public sealed virtual void Dispose();
}
internal class System.Configuration.Internal.FileVersion : object {
    private bool _exists;
    private long _fileSize;
    private DateTime _utcCreationTime;
    private DateTime _utcLastWriteTime;
    internal FileVersion(bool exists, long fileSize, DateTime utcCreationTime, DateTime utcLastWriteTime);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface System.Configuration.Internal.IConfigErrorInfo {
    public string Filename { get; }
    public int LineNumber { get; }
    public abstract virtual string get_Filename();
    public abstract virtual int get_LineNumber();
}
public interface System.Configuration.Internal.IConfigSystem {
    public IInternalConfigHost Host { get; }
    public IInternalConfigRoot Root { get; }
    public abstract virtual IInternalConfigHost get_Host();
    public abstract virtual IInternalConfigRoot get_Root();
    public abstract virtual void Init(Type typeConfigHost, Object[] hostInitParams);
}
public interface System.Configuration.Internal.IConfigurationManagerHelper {
    public abstract virtual void EnsureNetConfigLoaded();
}
public interface System.Configuration.Internal.IConfigurationManagerInternal {
    public bool SupportsUserConfig { get; }
    public bool SetConfigurationSystemInProgress { get; }
    public string MachineConfigPath { get; }
    public string ApplicationConfigUri { get; }
    public string ExeProductName { get; }
    public string ExeProductVersion { get; }
    public string ExeRoamingConfigDirectory { get; }
    public string ExeRoamingConfigPath { get; }
    public string ExeLocalConfigDirectory { get; }
    public string ExeLocalConfigPath { get; }
    public string UserConfigFilename { get; }
    public abstract virtual bool get_SupportsUserConfig();
    public abstract virtual bool get_SetConfigurationSystemInProgress();
    public abstract virtual string get_MachineConfigPath();
    public abstract virtual string get_ApplicationConfigUri();
    public abstract virtual string get_ExeProductName();
    public abstract virtual string get_ExeProductVersion();
    public abstract virtual string get_ExeRoamingConfigDirectory();
    public abstract virtual string get_ExeRoamingConfigPath();
    public abstract virtual string get_ExeLocalConfigDirectory();
    public abstract virtual string get_ExeLocalConfigPath();
    public abstract virtual string get_UserConfigFilename();
}
public interface System.Configuration.Internal.IInternalConfigClientHost {
    public abstract virtual bool IsExeConfig(string configPath);
    public abstract virtual bool IsRoamingUserConfig(string configPath);
    public abstract virtual bool IsLocalUserConfig(string configPath);
    public abstract virtual string GetExeConfigPath();
    public abstract virtual string GetRoamingUserConfigPath();
    public abstract virtual string GetLocalUserConfigPath();
}
public interface System.Configuration.Internal.IInternalConfigConfigurationFactory {
    public abstract virtual Configuration Create(Type typeConfigHost, Object[] hostInitConfigurationParams);
    public abstract virtual string NormalizeLocationSubPath(string subPath, IConfigErrorInfo errorInfo);
}
public interface System.Configuration.Internal.IInternalConfigHost {
    public bool SupportsChangeNotifications { get; }
    public bool SupportsRefresh { get; }
    public bool SupportsPath { get; }
    public bool SupportsLocation { get; }
    public bool IsRemote { get; }
    public abstract virtual bool get_SupportsChangeNotifications();
    public abstract virtual bool get_SupportsRefresh();
    public abstract virtual bool get_SupportsPath();
    public abstract virtual bool get_SupportsLocation();
    public abstract virtual bool get_IsRemote();
    public abstract virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public abstract virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    public abstract virtual bool IsConfigRecordRequired(string configPath);
    public abstract virtual bool IsInitDelayed(IInternalConfigRecord configRecord);
    public abstract virtual void RequireCompleteInit(IInternalConfigRecord configRecord);
    public abstract virtual bool IsSecondaryRoot(string configPath);
    public abstract virtual string GetStreamName(string configPath);
    public abstract virtual string GetStreamNameForConfigSource(string streamName, string configSource);
    public abstract virtual object GetStreamVersion(string streamName);
    public abstract virtual Stream OpenStreamForRead(string streamName);
    public abstract virtual Stream OpenStreamForRead(string streamName, bool assertPermissions);
    public abstract virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public abstract virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions);
    public abstract virtual void WriteCompleted(string streamName, bool success, object writeContext);
    public abstract virtual void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions);
    public abstract virtual void DeleteStream(string streamName);
    public abstract virtual bool IsFile(string streamName);
    public abstract virtual object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public abstract virtual void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public abstract virtual bool IsAboveApplication(string configPath);
    public abstract virtual string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath);
    public abstract virtual bool IsLocationApplicable(string configPath);
    public abstract virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    public abstract virtual void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    public abstract virtual bool PrefetchAll(string configPath, string streamName);
    public abstract virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public abstract virtual object CreateDeprecatedConfigContext(string configPath);
    public abstract virtual object CreateConfigurationContext(string configPath, string locationSubPath);
    public abstract virtual string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public abstract virtual string EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public abstract virtual Type GetConfigType(string typeName, bool throwOnError);
    public abstract virtual string GetConfigTypeName(Type t);
    public abstract virtual bool IsTrustedConfigPath(string configPath);
    public abstract virtual bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord);
    public abstract virtual IDisposable Impersonate();
    [ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
public abstract virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
}
internal interface System.Configuration.Internal.IInternalConfigHostPaths {
    public bool HasLocalConfig { get; }
    public bool HasRoamingConfig { get; }
    public bool IsAppConfigHttp { get; }
    public abstract virtual void RefreshConfigPaths();
    public abstract virtual bool get_HasLocalConfig();
    public abstract virtual bool get_HasRoamingConfig();
    public abstract virtual bool get_IsAppConfigHttp();
}
public interface System.Configuration.Internal.IInternalConfigRecord {
    public string ConfigPath { get; }
    public string StreamName { get; }
    public bool HasInitErrors { get; }
    public abstract virtual string get_ConfigPath();
    public abstract virtual string get_StreamName();
    public abstract virtual bool get_HasInitErrors();
    public abstract virtual void ThrowIfInitErrors();
    public abstract virtual object GetSection(string configKey);
    public abstract virtual object GetLkgSection(string configKey);
    public abstract virtual void RefreshSection(string configKey);
    public abstract virtual void Remove();
}
public interface System.Configuration.Internal.IInternalConfigRoot {
    public bool IsDesignTime { get; }
    public abstract virtual bool get_IsDesignTime();
    public abstract virtual void Init(IInternalConfigHost host, bool isDesignTime);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigChanged(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigChanged(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigRemoved(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigRemoved(InternalConfigEventHandler value);
    public abstract virtual object GetSection(string section, string configPath);
    public abstract virtual string GetUniqueConfigPath(string configPath);
    public abstract virtual IInternalConfigRecord GetUniqueConfigRecord(string configPath);
    public abstract virtual IInternalConfigRecord GetConfigRecord(string configPath);
    public abstract virtual void RemoveConfig(string configPath);
}
public interface System.Configuration.Internal.IInternalConfigSettingsFactory {
    public abstract virtual void SetConfigurationSystem(IInternalConfigSystem internalConfigSystem, bool initComplete);
    public abstract virtual void CompleteInit();
}
public interface System.Configuration.Internal.IInternalConfigSystem {
    public bool SupportsUserConfig { get; }
    public abstract virtual bool get_SupportsUserConfig();
    public abstract virtual object GetSection(string configKey);
    public abstract virtual void RefreshConfig(string sectionName);
}
internal class System.Configuration.Internal.InternalConfigConfigurationFactory : object {
    private sealed virtual override Configuration System.Configuration.Internal.IInternalConfigConfigurationFactory.Create(Type typeConfigHost, Object[] hostInitConfigurationParams);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigConfigurationFactory.NormalizeLocationSubPath(string subPath, IConfigErrorInfo errorInfo);
}
public class System.Configuration.Internal.InternalConfigEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ConfigPath>k__BackingField;
    public string ConfigPath { get; public set; }
    public InternalConfigEventArgs(string configPath);
    [CompilerGeneratedAttribute]
public string get_ConfigPath();
    [CompilerGeneratedAttribute]
public void set_ConfigPath(string value);
}
public class System.Configuration.Internal.InternalConfigEventHandler : MulticastDelegate {
    public InternalConfigEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InternalConfigEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InternalConfigEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Configuration.Internal.InternalConfigHost : object {
    private static FileAttributes InvalidAttributesForWrite;
    private bool System.Configuration.Internal.IInternalConfigHost.SupportsChangeNotifications { get; }
    private bool System.Configuration.Internal.IInternalConfigHost.SupportsRefresh { get; }
    private bool System.Configuration.Internal.IInternalConfigHost.SupportsPath { get; }
    private bool System.Configuration.Internal.IInternalConfigHost.SupportsLocation { get; }
    private bool System.Configuration.Internal.IInternalConfigHost.IsRemote { get; }
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.IsConfigRecordRequired(string configPath);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.IsInitDelayed(IInternalConfigRecord configRecord);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.RequireCompleteInit(IInternalConfigRecord configRecord);
    public sealed virtual bool IsSecondaryRoot(string configPath);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigHost.GetStreamName(string configPath);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigHost.GetStreamNameForConfigSource(string streamName, string configSource);
    private sealed virtual override object System.Configuration.Internal.IInternalConfigHost.GetStreamVersion(string streamName);
    private sealed virtual override Stream System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(string streamName);
    private sealed virtual override Stream System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(string streamName, bool assertPermissions);
    private sealed virtual override Stream System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    private sealed virtual override Stream System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.WriteCompleted(string streamName, bool success, object writeContext);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.DeleteStream(string streamName);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.IsFile(string streamName);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.get_SupportsChangeNotifications();
    private sealed virtual override object System.Configuration.Internal.IInternalConfigHost.StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.get_SupportsRefresh();
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.get_SupportsPath();
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigHost.VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.get_SupportsLocation();
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.IsAboveApplication(string configPath);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigHost.GetConfigPathFromLocationSubPath(string configPath, string locationSubPath);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.IsLocationApplicable(string configPath);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.PrefetchAll(string configPath, string streamName);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.PrefetchSection(string sectionGroupName, string sectionName);
    private sealed virtual override object System.Configuration.Internal.IInternalConfigHost.CreateDeprecatedConfigContext(string configPath);
    private sealed virtual override object System.Configuration.Internal.IInternalConfigHost.CreateConfigurationContext(string configPath, string locationSubPath);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigHost.DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigHost.EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    private sealed virtual override Type System.Configuration.Internal.IInternalConfigHost.GetConfigType(string typeName, bool throwOnError);
    private sealed virtual override string System.Configuration.Internal.IInternalConfigHost.GetConfigTypeName(Type t);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigHost.get_IsRemote();
    internal static string StaticGetStreamNameForConfigSource(string streamName, string configSource);
    internal static FileVersion StaticGetStreamVersion(string streamName);
    internal static Stream StaticOpenStreamForRead(string streamName);
    internal static Stream StaticOpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    internal static void StaticWriteCompleted(string streamName, bool success, object writeContext);
    internal static void StaticDeleteStream(string streamName);
    internal static bool StaticIsFile(string streamName);
    public sealed virtual bool IsTrustedConfigPath(string configPath);
    public sealed virtual bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord);
    public sealed virtual IDisposable Impersonate();
    [ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
public sealed virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
}
internal class System.Configuration.Internal.InternalConfigRoot : object {
    private ReaderWriterLock _hierarchyLock;
    private bool _isDesignTime;
    [CompilerGeneratedAttribute]
private IInternalConfigHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateConfigHost <UpdateConfigHost>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseConfigurationRecord <RootConfigRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private Configuration <CurrentConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalConfigEventHandler ConfigChanged;
    [CompilerGeneratedAttribute]
private InternalConfigEventHandler ConfigRemoved;
    internal IInternalConfigHost Host { get; private set; }
    internal UpdateConfigHost UpdateConfigHost { get; private set; }
    internal BaseConfigurationRecord RootConfigRecord { get; private set; }
    internal Configuration CurrentConfiguration { get; }
    private bool System.Configuration.Internal.IInternalConfigRoot.IsDesignTime { get; }
    internal InternalConfigRoot(Configuration currentConfiguration, UpdateConfigHost host);
    [CompilerGeneratedAttribute]
internal IInternalConfigHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(IInternalConfigHost value);
    [CompilerGeneratedAttribute]
internal UpdateConfigHost get_UpdateConfigHost();
    [CompilerGeneratedAttribute]
private void set_UpdateConfigHost(UpdateConfigHost value);
    [CompilerGeneratedAttribute]
internal BaseConfigurationRecord get_RootConfigRecord();
    [CompilerGeneratedAttribute]
private void set_RootConfigRecord(BaseConfigurationRecord value);
    [CompilerGeneratedAttribute]
internal Configuration get_CurrentConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigChanged(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigChanged(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ConfigRemoved(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigRemoved(InternalConfigEventHandler value);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigRoot.Init(IInternalConfigHost host, bool isDesignTime);
    private sealed virtual override bool System.Configuration.Internal.IInternalConfigRoot.get_IsDesignTime();
    public sealed virtual object GetSection(string section, string configPath);
    public sealed virtual string GetUniqueConfigPath(string configPath);
    public sealed virtual IInternalConfigRecord GetUniqueConfigRecord(string configPath);
    public sealed virtual IInternalConfigRecord GetConfigRecord(string configPath);
    public sealed virtual void RemoveConfig(string configPath);
    private void AcquireHierarchyLockForRead();
    private void ReleaseHierarchyLockForRead();
    private void AcquireHierarchyLockForWrite();
    private void ReleaseHierarchyLockForWrite();
    private void HlFindConfigRecord(String[] parts, Int32& nextIndex, BaseConfigurationRecord& currentRecord);
    private void RemoveConfigImpl(string configPath, BaseConfigurationRecord configRecord);
    public void RemoveConfigRecord(BaseConfigurationRecord configRecord);
    public void ClearResult(BaseConfigurationRecord configRecord, string configKey, bool forceEvaluation);
    private void OnConfigRemoved(InternalConfigEventArgs e);
    internal void FireConfigChanged(string configPath);
    private void OnConfigChanged(InternalConfigEventArgs e);
}
internal class System.Configuration.Internal.InternalConfigSettingsFactory : object {
    private sealed virtual override void System.Configuration.Internal.IInternalConfigSettingsFactory.SetConfigurationSystem(IInternalConfigSystem configSystem, bool initComplete);
    private sealed virtual override void System.Configuration.Internal.IInternalConfigSettingsFactory.CompleteInit();
}
public class System.Configuration.Internal.StreamChangeCallback : MulticastDelegate {
    public StreamChangeCallback(object object, IntPtr method);
    public virtual void Invoke(string streamName);
    public virtual IAsyncResult BeginInvoke(string streamName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Configuration.Internal.WriteFileContext : object {
    private static int SavingTimeout;
    private static int SavingRetryInterval;
    private string _templateFilename;
    private TempFileCollection _tempFiles;
    [CompilerGeneratedAttribute]
private string <TempNewFilename>k__BackingField;
    internal string TempNewFilename { get; }
    internal WriteFileContext(string filename, string templateFilename);
    [CompilerGeneratedAttribute]
internal string get_TempNewFilename();
    internal void Complete(string filename, bool success);
    private static void DuplicateFileAttributes(string source, string destination);
    private static void DuplicateTemplateAttributes(string source, string destination);
    private static void ValidateWriteAccess(string filename);
    private static void ReplaceFile(string source, string target);
    private static bool AttemptMove(string source, string target);
    private static bool FileIsWriteLocked(string fileName);
}
internal class System.Configuration.InvalidPropValue : object {
    [CompilerGeneratedAttribute]
private ConfigurationException <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    internal ConfigurationException Error { get; }
    internal string Value { get; }
    internal InvalidPropValue(string value, ConfigurationException error);
    [CompilerGeneratedAttribute]
internal ConfigurationException get_Error();
    [CompilerGeneratedAttribute]
internal string get_Value();
}
public interface System.Configuration.IPersistComponentSettings {
    public bool SaveSettings { get; public set; }
    public string SettingsKey { get; public set; }
    public abstract virtual bool get_SaveSettings();
    public abstract virtual void set_SaveSettings(bool value);
    public abstract virtual string get_SettingsKey();
    public abstract virtual void set_SettingsKey(string value);
    public abstract virtual void LoadComponentSettings();
    public abstract virtual void SaveComponentSettings();
    public abstract virtual void ResetComponentSettings();
}
public class System.Configuration.IriParsingElement : ConfigurationElement {
    internal static bool EnabledDefaultValue;
    private ConfigurationPropertyCollection _properties;
    private ConfigurationProperty _enabled;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public interface System.Configuration.ISettingsProviderService {
    public abstract virtual SettingsProvider GetSettingsProvider(SettingsProperty property);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.KeyValueConfigurationElement")]
public class System.Configuration.KeyValueConfigurationCollection : ConfigurationElementCollection {
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    protected bool ThrowOnDuplicate { get; }
    public KeyValueConfigurationElement Item { get; }
    public String[] AllKeys { get; }
    private static KeyValueConfigurationCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected virtual bool get_ThrowOnDuplicate();
    public KeyValueConfigurationElement get_Item(string key);
    public String[] get_AllKeys();
    public void Add(KeyValueConfigurationElement keyValue);
    public void Add(string key, string value);
    public void Remove(string key);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Configuration.KeyValueConfigurationElement : ConfigurationElement {
    private static ConfigurationProperty s_propKey;
    private static ConfigurationProperty s_propValue;
    private static ConfigurationPropertyCollection s_properties;
    private string _initKey;
    private string _initValue;
    private bool _needsInit;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("key")]
public string Key { get; }
    [ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    public KeyValueConfigurationElement(string key, string value);
    private static KeyValueConfigurationElement();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Key();
    public string get_Value();
    public void set_Value(string value);
    protected internal virtual void Init();
}
internal class System.Configuration.KeyValueInternalCollection : NameValueCollection {
    private AppSettingsSection _root;
    public KeyValueInternalCollection(AppSettingsSection root);
    public virtual void Add(string key, string value);
    public virtual void Clear();
    public virtual void Remove(string key);
}
public class System.Configuration.LocalFileSettingsProvider : SettingsProvider {
    private string _appName;
    private ClientSettingsStore _store;
    private string _prevLocalConfigFileName;
    private string _prevRoamingConfigFileName;
    private XmlEscaper _escaper;
    public string ApplicationName { get; public set; }
    private XmlEscaper Escaper { get; }
    private ClientSettingsStore Store { get; }
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    private XmlEscaper get_Escaper();
    private ClientSettingsStore get_Store();
    public virtual void Initialize(string name, NameValueCollection values);
    public virtual SettingsPropertyValueCollection GetPropertyValues(SettingsContext context, SettingsPropertyCollection properties);
    public virtual void SetPropertyValues(SettingsContext context, SettingsPropertyValueCollection values);
    public sealed virtual void Reset(SettingsContext context);
    public sealed virtual void Upgrade(SettingsContext context, SettingsPropertyCollection properties);
    public sealed virtual SettingsPropertyValue GetPreviousVersion(SettingsContext context, SettingsProperty property);
    private string GetPreviousConfigFileName(bool isRoaming);
    private static string GetSectionName(SettingsContext context);
    private SettingsPropertyValueCollection GetSettingValuesFromFile(string configFileName, string sectionName, bool userScoped, SettingsPropertyCollection properties);
    private static bool IsRoamingSetting(SettingsProperty setting);
    private static bool IsUserSetting(SettingsProperty setting);
    private XmlElement SerializeToXmlElement(SettingsProperty setting, SettingsPropertyValue value);
    private void Upgrade(SettingsContext context, SettingsPropertyCollection properties, bool isRoaming);
}
[DebuggerDisplayAttribute("LocationSectionRecord {ConfigKey}")]
internal class System.Configuration.LocationSectionRecord : object {
    private List`1<ConfigurationException> _errors;
    [CompilerGeneratedAttribute]
private SectionXmlInfo <SectionXmlInfo>k__BackingField;
    internal string ConfigKey { get; }
    internal SectionXmlInfo SectionXmlInfo { get; }
    internal ICollection`1<ConfigurationException> Errors { get; }
    internal List`1<ConfigurationException> ErrorsList { get; }
    internal bool HasErrors { get; }
    internal LocationSectionRecord(SectionXmlInfo sectionXmlInfo, List`1<ConfigurationException> errors);
    internal string get_ConfigKey();
    [CompilerGeneratedAttribute]
internal SectionXmlInfo get_SectionXmlInfo();
    internal ICollection`1<ConfigurationException> get_Errors();
    internal List`1<ConfigurationException> get_ErrorsList();
    internal bool get_HasErrors();
    internal void AddError(ConfigurationException e);
}
internal class System.Configuration.LocationUpdates : object {
    [CompilerGeneratedAttribute]
private OverrideModeSetting <OverrideMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritInChildApps>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionUpdates <SectionUpdates>k__BackingField;
    internal OverrideModeSetting OverrideMode { get; }
    internal bool InheritInChildApps { get; }
    internal SectionUpdates SectionUpdates { get; }
    internal bool IsDefault { get; }
    internal LocationUpdates(OverrideModeSetting overrideMode, bool inheritInChildApps);
    [CompilerGeneratedAttribute]
internal OverrideModeSetting get_OverrideMode();
    [CompilerGeneratedAttribute]
internal bool get_InheritInChildApps();
    [CompilerGeneratedAttribute]
internal SectionUpdates get_SectionUpdates();
    internal bool get_IsDefault();
    internal void CompleteUpdates();
}
public class System.Configuration.LongValidator : ConfigurationValidatorBase {
    private ValidationFlags _flags;
    private long _maxValue;
    private long _minValue;
    private long _resolution;
    public LongValidator(long minValue, long maxValue);
    public LongValidator(long minValue, long maxValue, bool rangeIsExclusive);
    public LongValidator(long minValue, long maxValue, bool rangeIsExclusive, long resolution);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.LongValidatorAttribute : ConfigurationValidatorAttribute {
    private long _max;
    private long _min;
    [CompilerGeneratedAttribute]
private bool <ExcludeRange>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public long MinValue { get; public set; }
    public long MaxValue { get; public set; }
    public bool ExcludeRange { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public long get_MinValue();
    public void set_MinValue(long value);
    public long get_MaxValue();
    public void set_MaxValue(long value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeRange();
    [CompilerGeneratedAttribute]
public void set_ExcludeRange(bool value);
}
internal class System.Configuration.MgmtConfigurationRecord : BaseConfigurationRecord {
    private static int DefaultIndent;
    private static int MaxIndent;
    private static SimpleBitVector32 s_mgmtClassFlags;
    private Hashtable _locationTags;
    private Hashtable _removedSectionGroups;
    private Hashtable _removedSections;
    private Hashtable _sectionFactories;
    private Hashtable _sectionGroupFactories;
    private Hashtable _sectionGroups;
    private HybridDictionary _streamInfoUpdates;
    private MgmtConfigurationRecord MgmtParent { get; }
    private UpdateConfigHost UpdateConfigHost { get; }
    protected SimpleBitVector32 ClassFlags { get; }
    private Hashtable SectionGroups { get; }
    private Hashtable RemovedSections { get; }
    private Hashtable RemovedSectionGroups { get; }
    internal Hashtable SectionFactories { get; }
    internal Hashtable SectionGroupFactories { get; }
    internal string ConfigurationFilePath { get; }
    private bool HasRemovedSectionsOrGroups { get; }
    private bool HasRemovedSections { get; }
    internal bool NamespacePresent { get; internal set; }
    private NamespaceChange NamespaceChangeNeeded { get; }
    private bool RecordItselfRequiresUpdates { get; }
    private static MgmtConfigurationRecord();
    private MgmtConfigurationRecord get_MgmtParent();
    private UpdateConfigHost get_UpdateConfigHost();
    protected virtual SimpleBitVector32 get_ClassFlags();
    private Hashtable get_SectionGroups();
    private Hashtable get_RemovedSections();
    private Hashtable get_RemovedSectionGroups();
    internal Hashtable get_SectionFactories();
    internal Hashtable get_SectionGroupFactories();
    internal string get_ConfigurationFilePath();
    private bool get_HasRemovedSectionsOrGroups();
    private bool get_HasRemovedSections();
    internal bool get_NamespacePresent();
    internal void set_NamespacePresent(bool value);
    private NamespaceChange get_NamespaceChangeNeeded();
    private bool get_RecordItselfRequiresUpdates();
    internal static MgmtConfigurationRecord Create(IInternalConfigRoot configRoot, IInternalConfigRecord parent, string configPath, string locationSubPath);
    private void Init(IInternalConfigRoot configRoot, IInternalConfigRecord parent, string configPath, string locationSubPath);
    private void InitStreamInfoUpdates();
    protected virtual object CreateSectionFactory(FactoryRecord factoryRecord);
    protected virtual object CreateSection(bool inputIsTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, object parentConfig, ConfigXmlReader reader);
    private ConstructorInfo CreateSectionGroupFactory(FactoryRecord factoryRecord);
    private ConstructorInfo EnsureSectionGroupFactory(FactoryRecord factoryRecord);
    protected virtual object UseParentResult(string configKey, object parentResult, SectionRecord sectionRecord);
    protected virtual object GetRuntimeObject(object result);
    private ConfigurationSection GetConfigSection(string configKey);
    internal ConfigurationSectionGroup LookupSectionGroup(string configKey);
    internal ConfigurationSectionGroup GetSectionGroup(string configKey);
    internal ConfigurationLocationCollection GetLocationCollection(Configuration config);
    protected virtual void AddLocation(string locationSubPath);
    private Hashtable GetAllFactories(bool isGroup);
    internal ConfigurationSection FindImmediateParentSection(ConfigurationSection section);
    internal ConfigurationSection FindAndCloneImmediateParentSection(ConfigurationSection configSection);
    internal void RevertToParent(ConfigurationSection configSection);
    internal string GetRawXml(string configKey);
    internal void SetRawXml(ConfigurationSection configSection, string xmlElement);
    private bool IsStreamUsed(string oldStreamName);
    internal void ChangeConfigSource(SectionInformation sectionInformation, string oldConfigSource, string oldConfigSourceStreamName, string newConfigSource);
    private static void ValidateSectionXml(string xmlElement, string configKey);
    internal void AddConfigurationSection(string group, string name, ConfigurationSection configSection);
    internal void RemoveConfigurationSection(string group, string name);
    internal void AddConfigurationSectionGroup(string group, string name, ConfigurationSectionGroup configSectionGroup);
    private ArrayList GetDescendentSectionFactories(string configKey);
    private ArrayList GetDescendentSectionGroupFactories(string configKey);
    internal void RemoveConfigurationSectionGroup(string group, string name);
    internal void SaveAs(string filename, ConfigurationSaveMode saveMode, bool forceUpdateAll);
    private static bool AreDeclarationAttributesModified(FactoryRecord factoryRecord, ConfigurationSection configSection);
    private static void AppendAttribute(StringBuilder sb, string key, string value);
    private string GetUpdatedSectionDeclarationXml(FactoryRecord factoryRecord, ConfigurationSection configSection, ConfigurationSaveMode saveMode);
    private static string ExeDefinitionToString(ConfigurationAllowExeDefinition allowDefinition);
    private string GetUpdatedSectionGroupDeclarationXml(FactoryRecord factoryRecord, ConfigurationSectionGroup configSectionGroup);
    private SectionUpdates GetConfigDeclarationUpdates(ConfigurationSaveMode saveMode);
    private static bool AreLocationAttributesModified(SectionRecord sectionRecord, ConfigurationSection configSection);
    private static bool AreSectionAttributesModified(SectionRecord sectionRecord, ConfigurationSection configSection);
    private static bool IsConfigSectionMoved(SectionRecord sectionRecord, ConfigurationSection configSection);
    private void GetConfigDefinitionUpdates(bool requireUpdates, ConfigurationSaveMode saveMode, bool forceSaveAll, ConfigDefinitionUpdates& definitionUpdates, ArrayList& configSourceUpdates);
    private static string WriteEmptyElement(string elementName);
    private void UpdateRecords();
    private void CreateNewConfig(SectionUpdates declarationUpdates, ConfigDefinitionUpdates definitionUpdates, NamespaceChange namespaceChange, XmlUtilWriter utilWriter);
    private void WriteNewConfigDeclarations(SectionUpdates declarationUpdates, XmlUtilWriter utilWriter, int linePosition, int indent, bool skipFirstIndent);
    private void WriteUnwrittenConfigDeclarations(SectionUpdates declarationUpdates, XmlUtilWriter utilWriter, int linePosition, int indent, bool skipFirstIndent);
    private void WriteUnwrittenConfigDeclarationsRecursive(SectionUpdates declarationUpdates, XmlUtilWriter utilWriter, int linePosition, int indent, bool skipFirstIndent);
    private void WriteNewConfigDefinitions(ConfigDefinitionUpdates configDefinitionUpdates, XmlUtilWriter utilWriter, int linePosition, int indent);
    private bool WriteNewConfigDefinitionsRecursive(XmlUtilWriter utilWriter, SectionUpdates sectionUpdates, int linePosition, int indent, bool skipFirstIndent);
    private static void CheckPreamble(Byte[] preamble, XmlUtilWriter utilWriter, Byte[] buffer);
    private static int UpdateIndent(int oldIndent, XmlUtil xmlUtil, XmlUtilWriter utilWriter, int parentLinePosition);
    private void CopyConfig(SectionUpdates declarationUpdates, ConfigDefinitionUpdates definitionUpdates, Byte[] buffer, string filename, NamespaceChange namespaceChange, XmlUtilWriter utilWriter);
    private static bool CopyConfigDeclarationsRecursive(SectionUpdates declarationUpdates, XmlUtil xmlUtil, XmlUtilWriter utilWriter, string group, int parentLinePosition, int parentIndent);
    private bool CopyConfigDefinitionsRecursive(ConfigDefinitionUpdates configDefinitionUpdates, XmlUtil xmlUtil, XmlUtilWriter utilWriter, bool locationPathApplies, LocationUpdates locationUpdates, SectionUpdates sectionUpdates, bool addNewSections, string group, int parentLinePosition, int parentIndent);
    private static void WriteSectionUpdate(XmlUtilWriter utilWriter, DefinitionUpdate update, int linePosition, int indent, bool skipFirstIndent);
    private void SaveConfigSource(DefinitionUpdate update);
    private void CopyConfigSource(XmlUtilWriter utilWriter, string updatedXml, string configSourceStreamName, Byte[] buffer);
    private void CreateNewConfigSource(XmlUtilWriter utilWriter, string updatedXml, int indent);
    private static string BoolToString(bool v);
    internal void RemoveLocationWriteRequirement();
}
internal enum System.Configuration.NamespaceChange : Enum {
    public int value__;
    public static NamespaceChange None;
    public static NamespaceChange Add;
    public static NamespaceChange Remove;
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.NameValueConfigurationElement")]
public class System.Configuration.NameValueConfigurationCollection : ConfigurationElementCollection {
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    public NameValueConfigurationElement Item { get; public set; }
    public String[] AllKeys { get; }
    private static NameValueConfigurationCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public NameValueConfigurationElement get_Item(string name);
    public void set_Item(string name, NameValueConfigurationElement value);
    public String[] get_AllKeys();
    public void Add(NameValueConfigurationElement nameValue);
    public void Remove(NameValueConfigurationElement nameValue);
    public void Remove(string name);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Configuration.NameValueConfigurationElement : ConfigurationElement {
    private static ConfigurationProperty s_propName;
    private static ConfigurationProperty s_propValue;
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    public NameValueConfigurationElement(string name, string value);
    private static NameValueConfigurationElement();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public string get_Value();
    public void set_Value(string value);
}
public class System.Configuration.NameValueFileSectionHandler : object {
    public sealed virtual object Create(object parent, object configContext, XmlNode section);
}
public class System.Configuration.NameValueSectionHandler : object {
    private static string DefaultKeyAttribute;
    private static string DefaultValueAttribute;
    protected string KeyAttributeName { get; }
    protected string ValueAttributeName { get; }
    public sealed virtual object Create(object parent, object context, XmlNode section);
    internal static object CreateStatic(object parent, XmlNode section);
    internal static object CreateStatic(object parent, XmlNode section, string keyAttriuteName, string valueAttributeName);
    protected virtual string get_KeyAttributeName();
    protected virtual string get_ValueAttributeName();
}
[AttributeUsageAttribute("128")]
public class System.Configuration.NoSettingsVersionUpgradeAttribute : Attribute {
}
public enum System.Configuration.OverrideMode : Enum {
    public int value__;
    public static OverrideMode Inherit;
    public static OverrideMode Allow;
    public static OverrideMode Deny;
}
internal class System.Configuration.OverrideModeSetting : ValueType {
    private static byte ApiDefinedLegacy;
    private static byte ApiDefinedNewMode;
    private static byte ApiDefinedAny;
    private static byte XmlDefinedLegacy;
    private static byte XmlDefinedNewMode;
    private static byte XmlDefinedAny;
    private static byte ModeMask;
    private byte _mode;
    internal static OverrideModeSetting s_sectionDefault;
    internal static OverrideModeSetting s_locationDefault;
    internal bool IsDefaultForSection { get; }
    internal bool IsDefaultForLocationTag { get; }
    internal bool IsLocked { get; }
    internal string LocationTagXmlString { get; }
    internal string OverrideModeXmlValue { get; }
    internal OverrideMode OverrideMode { get; internal set; }
    internal bool AllowOverride { get; internal set; }
    private static OverrideModeSetting();
    internal static OverrideModeSetting CreateFromXmlReadValue(bool allowOverride);
    internal static OverrideModeSetting CreateFromXmlReadValue(OverrideMode mode);
    internal static OverrideMode ParseOverrideModeXmlValue(string value, XmlUtil xmlUtil);
    internal static bool CanUseSameLocationTag(OverrideModeSetting x, OverrideModeSetting y);
    private static bool IsMatchingApiChangedLocationTag(OverrideModeSetting x, OverrideModeSetting y);
    internal bool get_IsDefaultForSection();
    internal bool get_IsDefaultForLocationTag();
    internal bool get_IsLocked();
    internal string get_LocationTagXmlString();
    internal string get_OverrideModeXmlValue();
    internal void ChangeModeInternal(OverrideMode mode);
    internal OverrideMode get_OverrideMode();
    internal void set_OverrideMode(OverrideMode value);
    internal bool get_AllowOverride();
    internal void set_AllowOverride(bool value);
    private void SetMode(OverrideMode mode);
    private void VerifyConsistentChangeModel(byte required);
}
public class System.Configuration.PositiveTimeSpanValidator : ConfigurationValidatorBase {
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.PositiveTimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
internal static class System.Configuration.PrivilegedConfigurationManager : object {
    internal static ConnectionStringSettingsCollection ConnectionStrings { get; }
    internal static ConnectionStringSettingsCollection get_ConnectionStrings();
    internal static object GetSection(string sectionName);
}
public class System.Configuration.PropertyInformation : object {
    private static string LockAll;
    private ConfigurationProperty _prop;
    private ConfigurationElement _thisElement;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private ConfigurationProperty Prop { get; }
    public string Name { get; }
    internal string ProvidedName { get; }
    public object Value { get; public set; }
    public object DefaultValue { get; }
    public PropertyValueOrigin ValueOrigin { get; }
    public bool IsModified { get; }
    public bool IsKey { get; }
    public bool IsRequired { get; }
    public bool IsLocked { get; }
    public string Source { get; }
    public int LineNumber { get; }
    public Type Type { get; }
    public ConfigurationValidatorBase Validator { get; }
    public TypeConverter Converter { get; }
    public string Description { get; }
    internal PropertyInformation(ConfigurationElement thisElement, string propertyName);
    private ConfigurationProperty get_Prop();
    [CompilerGeneratedAttribute]
public string get_Name();
    internal string get_ProvidedName();
    public object get_Value();
    public void set_Value(object value);
    public object get_DefaultValue();
    public PropertyValueOrigin get_ValueOrigin();
    public bool get_IsModified();
    public bool get_IsKey();
    public bool get_IsRequired();
    public bool get_IsLocked();
    public string get_Source();
    public int get_LineNumber();
    public Type get_Type();
    public ConfigurationValidatorBase get_Validator();
    public TypeConverter get_Converter();
    public string get_Description();
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.PropertyInformationCollection : NameObjectCollectionBase {
    public PropertyInformation Item { get; }
    internal PropertyInformation Item { get; }
    internal PropertyInformationCollection(ConfigurationElement thisElement);
    public PropertyInformation get_Item(string propertyName);
    internal PropertyInformation get_Item(int index);
    public void CopyTo(PropertyInformation[] array, int index);
    [IteratorStateMachineAttribute("System.Configuration.PropertyInformationCollection/<GetEnumerator>d__6")]
public virtual IEnumerator GetEnumerator();
}
internal class System.Configuration.PropertySourceInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    internal string FileName { get; }
    internal int LineNumber { get; }
    internal PropertySourceInfo(XmlReader reader);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CompilerGeneratedAttribute]
internal int get_LineNumber();
    private static string GetFilename(XmlReader reader);
    private static int GetLineNumber(XmlReader reader);
}
public enum System.Configuration.PropertyValueOrigin : Enum {
    public int value__;
    public static PropertyValueOrigin Default;
    public static PropertyValueOrigin Inherited;
    public static PropertyValueOrigin SetHere;
}
public static class System.Configuration.ProtectedConfiguration : object {
    public static string RsaProviderName;
    public static string DataProtectionProviderName;
    public static string ProtectedDataSectionName;
    public static ProtectedConfigurationProviderCollection Providers { get; }
    public static string DefaultProvider { get; }
    public static ProtectedConfigurationProviderCollection get_Providers();
    public static string get_DefaultProvider();
}
public abstract class System.Configuration.ProtectedConfigurationProvider : ProviderBase {
    public abstract virtual XmlNode Encrypt(XmlNode node);
    public abstract virtual XmlNode Decrypt(XmlNode encryptedNode);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ProtectedConfigurationProviderCollection : ProviderCollection {
    public ProtectedConfigurationProvider Item { get; }
    public ProtectedConfigurationProvider get_Item(string name);
    public virtual void Add(ProviderBase provider);
}
public class System.Configuration.ProtectedConfigurationSection : ConfigurationSection {
    private static string EncryptedSectionTemplate;
    private static ConfigurationProperty s_propProviders;
    private static ConfigurationProperty s_propDefaultProvider;
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    private ProtectedProviderSettings ProtectedProviders { get; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("defaultProvider")]
public string DefaultProvider { get; public set; }
    private static ProtectedConfigurationSection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    private ProtectedProviderSettings get_ProtectedProviders();
    public ProviderSettingsCollection get_Providers();
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    internal ProtectedConfigurationProvider GetProviderFromName(string providerName);
    internal ProtectedConfigurationProviderCollection GetAllProviders();
    private static ProtectedConfigurationProvider CreateAndInitializeProviderWithAssert(Type t, ProviderSettings pn);
    private static ProtectedConfigurationProvider InstantiateProvider(ProviderSettings pn);
    internal static string DecryptSection(string encryptedXml, ProtectedConfigurationProvider provider);
    internal static string FormatEncryptedSection(string encryptedXml, string sectionName, string providerName);
    internal static string EncryptSection(string clearXml, ProtectedConfigurationProvider provider);
}
public class System.Configuration.ProtectedProviderSettings : ConfigurationElement {
    private ConfigurationProperty _propProviders;
    private ConfigurationPropertyCollection _properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public ProviderSettingsCollection Providers { get; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ProviderSettingsCollection get_Providers();
}
public abstract class System.Configuration.Provider.ProviderBase : object {
    private string _description;
    private bool _initialized;
    private string _name;
    public string Name { get; }
    public string Description { get; }
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual void Initialize(string name, NameValueCollection config);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.Provider.ProviderCollection : object {
    private Hashtable _hashtable;
    private bool _readOnly;
    public ProviderBase Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ProviderBase get_Item(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual void Add(ProviderBase provider);
    public void Remove(string name);
    public void SetReadOnly();
    public void Clear();
    public void CopyTo(ProviderBase[] array, int index);
}
[TypeForwardedFromAttribute("System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Configuration.Provider.ProviderException : Exception {
    public ProviderException(string message);
    public ProviderException(string message, Exception innerException);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ProviderException(SerializationInfo info, StreamingContext context);
}
public class System.Configuration.ProviderSettings : ConfigurationElement {
    private ConfigurationPropertyCollection _properties;
    private ConfigurationProperty _propName;
    private ConfigurationProperty _propType;
    private NameValueCollection _propertyNameCollection;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public NameValueCollection Parameters { get; }
    public ProviderSettings(string name, string type);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public NameValueCollection get_Parameters();
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected internal virtual void Reset(ConfigurationElement parentElement);
    internal bool UpdatePropertyCollection();
    protected internal virtual bool IsModified();
    private string GetProperty(string propName);
    private void SetProperty(string propName, string value);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.ProviderSettings")]
public class System.Configuration.ProviderSettingsCollection : ConfigurationElementCollection {
    private static ConfigurationPropertyCollection s_properties;
    protected internal ConfigurationPropertyCollection Properties { get; }
    public ProviderSettings Item { get; }
    public ProviderSettings Item { get; public set; }
    private static ProviderSettingsCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ProviderSettings get_Item(string key);
    public ProviderSettings get_Item(int index);
    public void set_Item(int index, ProviderSettings value);
    public void Add(ProviderSettings provider);
    public void Remove(string name);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Configuration.ReadOnlyNameValueCollection : NameValueCollection {
    internal ReadOnlyNameValueCollection(IEqualityComparer equalityComparer);
    internal ReadOnlyNameValueCollection(ReadOnlyNameValueCollection value);
    internal void SetReadOnly();
}
public class System.Configuration.RegexStringValidator : ConfigurationValidatorBase {
    private string _expression;
    private Regex _regex;
    public RegexStringValidator(string regex);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.RegexStringValidatorAttribute : ConfigurationValidatorAttribute {
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public string Regex { get; }
    public RegexStringValidatorAttribute(string regex);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    [CompilerGeneratedAttribute]
public string get_Regex();
}
public class System.Configuration.RsaProtectedConfigurationProvider : ProtectedConfigurationProvider {
    public string KeyContainerName { get; }
    public string CspProviderName { get; }
    public bool UseMachineContainer { get; }
    public bool UseOAEP { get; }
    public bool UseFIPS { get; }
    public RSAParameters RsaPublicKey { get; }
    public virtual XmlNode Decrypt(XmlNode encryptedNode);
    public virtual XmlNode Encrypt(XmlNode node);
    public void AddKey(int keySize, bool exportable);
    public void DeleteKey();
    public void ImportKey(string xmlFileName, bool exportable);
    public void ExportKey(string xmlFileName, bool includePrivateParameters);
    public string get_KeyContainerName();
    public string get_CspProviderName();
    public bool get_UseMachineContainer();
    public bool get_UseOAEP();
    public bool get_UseFIPS();
    public RSAParameters get_RsaPublicKey();
}
internal class System.Configuration.RuntimeConfigurationRecord : BaseConfigurationRecord {
    private static SimpleBitVector32 s_runtimeClassFlags;
    protected SimpleBitVector32 ClassFlags { get; }
    private static RuntimeConfigurationRecord();
    protected virtual SimpleBitVector32 get_ClassFlags();
    internal static IInternalConfigRecord Create(InternalConfigRoot configRoot, IInternalConfigRecord parent, string configPath);
    protected virtual object CreateSectionFactory(FactoryRecord factoryRecord);
    protected virtual object CreateSection(bool inputIsTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, object parentConfig, ConfigXmlReader reader);
    protected virtual object UseParentResult(string configKey, object parentResult, SectionRecord sectionRecord);
    protected virtual object GetRuntimeObject(object result);
}
[DefaultMemberAttribute("Item")]
internal class System.Configuration.SafeBitVector32 : ValueType {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _data;
    internal bool Item { get; internal set; }
    internal SafeBitVector32(int data);
    internal bool get_Item(int bit);
    internal void set_Item(int bit, bool value);
}
public class System.Configuration.SchemeSettingElement : ConfigurationElement {
    private static ConfigurationProperty s_name;
    private static ConfigurationProperty s_genericUriParserOptions;
    private static ConfigurationPropertyCollection s_properties;
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("genericUriParserOptions")]
public GenericUriParserOptions GenericUriParserOptions { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    private static SchemeSettingElement();
    public string get_Name();
    public GenericUriParserOptions get_GenericUriParserOptions();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.SchemeSettingElement")]
public class System.Configuration.SchemeSettingElementCollection : ConfigurationElementCollection {
    internal static string AddItemName;
    internal static string ClearItemsName;
    internal static string RemoveItemName;
    public ConfigurationElementCollectionType CollectionType { get; }
    public SchemeSettingElement Item { get; }
    public SchemeSettingElement Item { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public SchemeSettingElement get_Item(int index);
    public SchemeSettingElement get_Item(string name);
    public int IndexOf(SchemeSettingElement element);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Configuration.SchemeSettingInternal : object {
    private string name;
    private GenericUriParserOptions options;
    public string Name { get; }
    public GenericUriParserOptions Options { get; }
    public SchemeSettingInternal(string name, GenericUriParserOptions options);
    public string get_Name();
    public GenericUriParserOptions get_Options();
}
public class System.Configuration.SectionInformation : object {
    private static int FlagAttached;
    private static int FlagDeclared;
    private static int FlagDeclarationRequired;
    private static int FlagAllowLocation;
    private static int FlagRestartOnExternalChanges;
    private static int FlagRequirePermission;
    private static int FlagLocationLocked;
    private static int FlagChildrenLocked;
    private static int FlagInheritInChildApps;
    private static int FlagIsParentSection;
    private static int FlagRemoved;
    private static int FlagProtectionProviderDetermined;
    private static int FlagForceSave;
    private static int FlagIsUndeclared;
    private static int FlagChildrenLockWithoutFileInput;
    private static int FlagAllowExeDefinitionModified;
    private static int FlagAllowDefinitionModified;
    private static int FlagConfigSourceModified;
    private static int FlagProtectionProviderModified;
    private static int FlagOverrideModeDefaultModified;
    private static int FlagOverrideModeModified;
    private ConfigurationSection _configurationSection;
    private ConfigurationAllowDefinition _allowDefinition;
    private ConfigurationAllowExeDefinition _allowExeDefinition;
    private MgmtConfigurationRecord _configRecord;
    private string _configSource;
    private SafeBitVector32 _flags;
    private SimpleBitVector32 _modifiedFlags;
    private OverrideModeSetting _overrideMode;
    private OverrideModeSetting _overrideModeDefault;
    private ProtectedConfigurationProvider _protectionProvider;
    private string _typeName;
    [CompilerGeneratedAttribute]
private string <ConfigKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigSourceStreamName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProtectionProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawXml>k__BackingField;
    private bool IsRuntime { get; }
    internal bool Attached { get; }
    internal string ConfigKey { get; private set; }
    internal bool Removed { get; internal set; }
    public string SectionName { get; }
    public string Name { get; private set; }
    public ConfigurationAllowDefinition AllowDefinition { get; public set; }
    internal bool AllowDefinitionModified { get; }
    public ConfigurationAllowExeDefinition AllowExeDefinition { get; public set; }
    internal bool AllowExeDefinitionModified { get; }
    public OverrideMode OverrideModeDefault { get; public set; }
    internal OverrideModeSetting OverrideModeDefaultSetting { get; }
    internal bool OverrideModeDefaultModified { get; }
    public bool AllowLocation { get; public set; }
    internal bool AllowLocationModified { get; }
    public bool AllowOverride { get; public set; }
    public OverrideMode OverrideMode { get; public set; }
    public OverrideMode OverrideModeEffective { get; }
    internal OverrideModeSetting OverrideModeSetting { get; }
    internal bool LocationAttributesAreDefault { get; }
    public string ConfigSource { get; public set; }
    internal bool ConfigSourceModified { get; }
    internal string ConfigSourceStreamName { get; internal set; }
    public bool InheritInChildApplications { get; public set; }
    public bool IsDeclared { get; }
    public bool IsDeclarationRequired { get; }
    private bool IsDefinitionAllowed { get; }
    public bool IsLocked { get; }
    public bool IsProtected { get; }
    public ProtectedConfigurationProvider ProtectionProvider { get; }
    internal string ProtectionProviderName { get; private set; }
    public bool RestartOnExternalChanges { get; public set; }
    internal bool RestartOnExternalChangesModified { get; }
    public bool RequirePermission { get; public set; }
    internal bool RequirePermissionModified { get; }
    public string Type { get; public set; }
    internal string RawXml { get; internal set; }
    public bool ForceSave { get; public set; }
    internal SectionInformation(ConfigurationSection associatedConfigurationSection);
    private bool get_IsRuntime();
    internal bool get_Attached();
    [CompilerGeneratedAttribute]
internal string get_ConfigKey();
    [CompilerGeneratedAttribute]
private void set_ConfigKey(string value);
    internal bool get_Removed();
    internal void set_Removed(bool value);
    public string get_SectionName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public ConfigurationAllowDefinition get_AllowDefinition();
    public void set_AllowDefinition(ConfigurationAllowDefinition value);
    internal bool get_AllowDefinitionModified();
    public ConfigurationAllowExeDefinition get_AllowExeDefinition();
    public void set_AllowExeDefinition(ConfigurationAllowExeDefinition value);
    internal bool get_AllowExeDefinitionModified();
    public OverrideMode get_OverrideModeDefault();
    public void set_OverrideModeDefault(OverrideMode value);
    internal OverrideModeSetting get_OverrideModeDefaultSetting();
    internal bool get_OverrideModeDefaultModified();
    public bool get_AllowLocation();
    public void set_AllowLocation(bool value);
    internal bool get_AllowLocationModified();
    public bool get_AllowOverride();
    public void set_AllowOverride(bool value);
    public OverrideMode get_OverrideMode();
    public void set_OverrideMode(OverrideMode value);
    public OverrideMode get_OverrideModeEffective();
    internal OverrideModeSetting get_OverrideModeSetting();
    internal bool get_LocationAttributesAreDefault();
    public string get_ConfigSource();
    public void set_ConfigSource(string value);
    internal bool get_ConfigSourceModified();
    [CompilerGeneratedAttribute]
internal string get_ConfigSourceStreamName();
    [CompilerGeneratedAttribute]
internal void set_ConfigSourceStreamName(string value);
    public bool get_InheritInChildApplications();
    public void set_InheritInChildApplications(bool value);
    public bool get_IsDeclared();
    public bool get_IsDeclarationRequired();
    private bool get_IsDefinitionAllowed();
    public bool get_IsLocked();
    public bool get_IsProtected();
    public ProtectedConfigurationProvider get_ProtectionProvider();
    [CompilerGeneratedAttribute]
internal string get_ProtectionProviderName();
    [CompilerGeneratedAttribute]
private void set_ProtectionProviderName(string value);
    public bool get_RestartOnExternalChanges();
    public void set_RestartOnExternalChanges(bool value);
    internal bool get_RestartOnExternalChangesModified();
    public bool get_RequirePermission();
    public void set_RequirePermission(bool value);
    internal bool get_RequirePermissionModified();
    public string get_Type();
    public void set_Type(string value);
    [CompilerGeneratedAttribute]
internal string get_RawXml();
    [CompilerGeneratedAttribute]
internal void set_RawXml(string value);
    public bool get_ForceSave();
    public void set_ForceSave(bool value);
    internal void ResetModifiedFlags();
    internal bool IsModifiedFlags();
    internal void AttachToConfigurationRecord(MgmtConfigurationRecord configRecord, FactoryRecord factoryRecord, SectionRecord sectionRecord);
    internal void SetRuntimeConfigurationInformation(BaseConfigurationRecord configRecord, FactoryRecord factoryRecord, SectionRecord sectionRecord);
    internal void DetachFromConfigurationRecord();
    private void VerifyDesigntime();
    private void VerifyIsAttachedToConfigRecord();
    internal void VerifyIsEditable();
    private void VerifyNotParentSection();
    private void VerifySupportsLocation();
    internal void VerifyIsEditableFactory();
    private FactoryRecord FindParentFactoryRecord(bool permitErrors);
    public void ForceDeclaration();
    public void ForceDeclaration(bool force);
    public void ProtectSection(string protectionProvider);
    public void UnprotectSection();
    public ConfigurationSection GetParentSection();
    public string GetRawXml();
    public void SetRawXml(string rawXml);
    public void RevertToParent();
}
[DebuggerDisplayAttribute("SectionInput {SectionXmlInfo.ConfigKey}")]
internal class System.Configuration.SectionInput : object {
    private static object s_unevaluated;
    private List`1<ConfigurationException> _errors;
    private ProtectedConfigurationProvider _protectionProvider;
    [CompilerGeneratedAttribute]
private SectionXmlInfo <SectionXmlInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResultRuntimeObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProtectionProviderDetermined>k__BackingField;
    internal SectionXmlInfo SectionXmlInfo { get; }
    internal bool HasResult { get; }
    internal bool HasResultRuntimeObject { get; }
    internal object Result { get; internal set; }
    internal object ResultRuntimeObject { get; internal set; }
    internal bool IsProtectionProviderDetermined { get; private set; }
    internal ProtectedConfigurationProvider ProtectionProvider { get; internal set; }
    internal ICollection`1<ConfigurationException> Errors { get; }
    internal bool HasErrors { get; }
    internal SectionInput(SectionXmlInfo sectionXmlInfo, List`1<ConfigurationException> errors);
    private static SectionInput();
    [CompilerGeneratedAttribute]
internal SectionXmlInfo get_SectionXmlInfo();
    internal bool get_HasResult();
    internal bool get_HasResultRuntimeObject();
    [CompilerGeneratedAttribute]
internal object get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(object value);
    [CompilerGeneratedAttribute]
internal object get_ResultRuntimeObject();
    [CompilerGeneratedAttribute]
internal void set_ResultRuntimeObject(object value);
    [CompilerGeneratedAttribute]
internal bool get_IsProtectionProviderDetermined();
    [CompilerGeneratedAttribute]
private void set_IsProtectionProviderDetermined(bool value);
    internal ProtectedConfigurationProvider get_ProtectionProvider();
    internal void set_ProtectionProvider(ProtectedConfigurationProvider value);
    internal ICollection`1<ConfigurationException> get_Errors();
    internal bool get_HasErrors();
    internal void ClearResult();
    internal void ThrowOnErrors();
}
[DebuggerDisplayAttribute("SectionRecord {ConfigKey}")]
internal class System.Configuration.SectionRecord : object {
    private static int FlagLocked;
    private static int FlagLockChildren;
    private static int FlagRequirePermission;
    private static int FlagLocationInputLockApplied;
    private static int FlagIndirectLocationInputLockApplied;
    private static int FlagChildrenLockWithoutFileInput;
    private static int FlagAddUpdate;
    private static object s_unevaluated;
    private SafeBitVector32 _flags;
    [CompilerGeneratedAttribute]
private string <ConfigKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SectionInput> <LocationInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionInput <FileInput>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SectionInput> <IndirectLocationInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResultRuntimeObject>k__BackingField;
    internal string ConfigKey { get; }
    internal bool Locked { get; }
    internal bool LockChildren { get; }
    internal bool LockChildrenWithoutFileInput { get; }
    internal bool RequirePermission { get; internal set; }
    internal bool AddUpdate { get; internal set; }
    internal bool HasLocationInputs { get; }
    internal List`1<SectionInput> LocationInputs { get; private set; }
    internal SectionInput LastLocationInput { get; }
    internal bool HasFileInput { get; }
    internal SectionInput FileInput { get; private set; }
    internal bool HasIndirectLocationInputs { get; }
    internal List`1<SectionInput> IndirectLocationInputs { get; private set; }
    internal SectionInput LastIndirectLocationInput { get; }
    internal bool HasInput { get; }
    internal bool HasResult { get; }
    internal bool HasResultRuntimeObject { get; }
    internal object Result { get; internal set; }
    internal object ResultRuntimeObject { get; internal set; }
    internal bool HasErrors { get; }
    internal SectionRecord(string configKey);
    private static SectionRecord();
    [CompilerGeneratedAttribute]
internal string get_ConfigKey();
    internal bool get_Locked();
    internal bool get_LockChildren();
    internal bool get_LockChildrenWithoutFileInput();
    internal bool get_RequirePermission();
    internal void set_RequirePermission(bool value);
    internal bool get_AddUpdate();
    internal void set_AddUpdate(bool value);
    internal bool get_HasLocationInputs();
    [CompilerGeneratedAttribute]
internal List`1<SectionInput> get_LocationInputs();
    [CompilerGeneratedAttribute]
private void set_LocationInputs(List`1<SectionInput> value);
    internal SectionInput get_LastLocationInput();
    internal bool get_HasFileInput();
    [CompilerGeneratedAttribute]
internal SectionInput get_FileInput();
    [CompilerGeneratedAttribute]
private void set_FileInput(SectionInput value);
    internal bool get_HasIndirectLocationInputs();
    [CompilerGeneratedAttribute]
internal List`1<SectionInput> get_IndirectLocationInputs();
    [CompilerGeneratedAttribute]
private void set_IndirectLocationInputs(List`1<SectionInput> value);
    internal SectionInput get_LastIndirectLocationInput();
    internal bool get_HasInput();
    internal bool get_HasResult();
    internal bool get_HasResultRuntimeObject();
    [CompilerGeneratedAttribute]
internal object get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(object value);
    [CompilerGeneratedAttribute]
internal object get_ResultRuntimeObject();
    [CompilerGeneratedAttribute]
internal void set_ResultRuntimeObject(object value);
    internal bool get_HasErrors();
    internal void AddLocationInput(SectionInput sectionInput);
    internal void ChangeLockSettings(OverrideMode forSelf, OverrideMode forChildren);
    internal void AddFileInput(SectionInput sectionInput);
    internal void RemoveFileInput();
    internal void AddIndirectLocationInput(SectionInput sectionInput);
    private void AddLocationInputImpl(SectionInput sectionInput, bool isIndirectLocation);
    internal void ClearRawXml();
    internal void ClearResult();
    private List`1<ConfigurationException> GetAllErrors();
    internal void ThrowOnErrors();
}
internal class System.Configuration.SectionUpdates : object {
    private Hashtable _groups;
    private string _name;
    private Hashtable _sections;
    private int _cMoved;
    private int _cUnretrieved;
    private Update _sectionGroupUpdate;
    [CompilerGeneratedAttribute]
private bool <IsNew>k__BackingField;
    internal bool IsNew { get; internal set; }
    internal bool IsEmpty { get; }
    internal SectionUpdates(string name);
    [CompilerGeneratedAttribute]
internal bool get_IsNew();
    [CompilerGeneratedAttribute]
internal void set_IsNew(bool value);
    internal bool get_IsEmpty();
    private SectionUpdates FindSectionUpdates(string configKey, bool isGroup);
    internal void CompleteUpdates();
    internal void AddSection(Update update);
    internal void AddSectionGroup(Update update);
    private Update GetUpdate(string configKey);
    internal DeclarationUpdate GetSectionGroupUpdate();
    internal DefinitionUpdate GetDefinitionUpdate(string configKey);
    internal DeclarationUpdate GetDeclarationUpdate(string configKey);
    internal SectionUpdates GetSectionUpdatesForGroup(string group);
    internal bool HasUnretrievedSections();
    internal void MarkAsRetrieved();
    internal void MarkGroupAsRetrieved(string groupName);
    internal bool HasNewSectionGroups();
    internal String[] GetUnretrievedSectionNames();
    internal String[] GetMovedSectionNames();
    internal String[] GetUnretrievedGroupNames();
    internal String[] GetNewGroupNames();
}
internal class System.Configuration.SectionXmlInfo : object {
    [CompilerGeneratedAttribute]
private object <StreamVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigSourceStreamName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefinitionConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetConfigPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawXml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProtectionProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private OverrideModeSetting <OverrideModeSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipInChildApps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    internal object StreamVersion { get; internal set; }
    internal string ConfigSource { get; internal set; }
    internal string ConfigSourceStreamName { get; internal set; }
    internal string ConfigKey { get; }
    internal string DefinitionConfigPath { get; }
    internal string TargetConfigPath { get; internal set; }
    internal string SubPath { get; }
    internal string RawXml { get; internal set; }
    internal string ProtectionProviderName { get; internal set; }
    internal OverrideModeSetting OverrideModeSetting { get; internal set; }
    internal bool SkipInChildApps { get; internal set; }
    public string Filename { get; }
    public int LineNumber { get; public set; }
    internal SectionXmlInfo(string configKey, string definitionConfigPath, string targetConfigPath, string subPath, string filename, int lineNumber, object streamVersion, string rawXml, string configSource, string configSourceStreamName, string protectionProviderName, OverrideModeSetting overrideMode, bool skipInChildApps);
    [CompilerGeneratedAttribute]
internal object get_StreamVersion();
    [CompilerGeneratedAttribute]
internal void set_StreamVersion(object value);
    [CompilerGeneratedAttribute]
internal string get_ConfigSource();
    [CompilerGeneratedAttribute]
internal void set_ConfigSource(string value);
    [CompilerGeneratedAttribute]
internal string get_ConfigSourceStreamName();
    [CompilerGeneratedAttribute]
internal void set_ConfigSourceStreamName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConfigKey();
    [CompilerGeneratedAttribute]
internal string get_DefinitionConfigPath();
    [CompilerGeneratedAttribute]
internal string get_TargetConfigPath();
    [CompilerGeneratedAttribute]
internal void set_TargetConfigPath(string value);
    [CompilerGeneratedAttribute]
internal string get_SubPath();
    [CompilerGeneratedAttribute]
internal string get_RawXml();
    [CompilerGeneratedAttribute]
internal void set_RawXml(string value);
    [CompilerGeneratedAttribute]
internal string get_ProtectionProviderName();
    [CompilerGeneratedAttribute]
internal void set_ProtectionProviderName(string value);
    [CompilerGeneratedAttribute]
internal OverrideModeSetting get_OverrideModeSetting();
    [CompilerGeneratedAttribute]
internal void set_OverrideModeSetting(OverrideModeSetting value);
    [CompilerGeneratedAttribute]
internal bool get_SkipInChildApps();
    [CompilerGeneratedAttribute]
internal void set_SkipInChildApps(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Filename();
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.SettingAttribute : Attribute {
}
public class System.Configuration.SettingChangingEventArgs : CancelEventArgs {
    private string _settingClass;
    private string _settingName;
    private string _settingKey;
    private object _newValue;
    public object NewValue { get; }
    public string SettingClass { get; }
    public string SettingName { get; }
    public string SettingKey { get; }
    public SettingChangingEventArgs(string settingName, string settingClass, string settingKey, object newValue, bool cancel);
    public object get_NewValue();
    public string get_SettingClass();
    public string get_SettingName();
    public string get_SettingKey();
}
public class System.Configuration.SettingChangingEventHandler : MulticastDelegate {
    public SettingChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SettingChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SettingChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Configuration.SettingElement : ConfigurationElement {
    private static ConfigurationProperty s_propName;
    private static ConfigurationProperty s_propSerializeAs;
    private static ConfigurationProperty s_propValue;
    private static ConfigurationPropertyCollection s_properties;
    internal string Key { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("serializeAs")]
public SettingsSerializeAs SerializeAs { get; public set; }
    [ConfigurationPropertyAttribute("value")]
public SettingValueElement Value { get; public set; }
    public SettingElement(string name, SettingsSerializeAs serializeAs);
    private static SettingElement();
    internal string get_Key();
    public virtual bool Equals(object settings);
    public virtual int GetHashCode();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public SettingsSerializeAs get_SerializeAs();
    public void set_SerializeAs(SettingsSerializeAs value);
    public SettingValueElement get_Value();
    public void set_Value(SettingValueElement value);
}
public class System.Configuration.SettingElementCollection : ConfigurationElementCollection {
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public SettingElement Get(string elementKey);
    public void Add(SettingElement element);
    public void Remove(SettingElement element);
    public void Clear();
}
public class System.Configuration.SettingsAttributeDictionary : Hashtable {
    public SettingsAttributeDictionary(SettingsAttributeDictionary attributes);
    protected SettingsAttributeDictionary(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Configuration.SettingsBase : object {
    private SettingsPropertyCollection _properties;
    private SettingsProviderCollection _providers;
    private SettingsPropertyValueCollection _propertyValues;
    private SettingsContext _context;
    private bool _isSynchronized;
    public object Item { get; public set; }
    public SettingsPropertyCollection Properties { get; }
    public SettingsProviderCollection Providers { get; }
    public SettingsPropertyValueCollection PropertyValues { get; }
    public SettingsContext Context { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    private object GetPropertyValueByName(string propertyName);
    private void SetPropertyValueByName(string propertyName, object propertyValue);
    public void Initialize(SettingsContext context, SettingsPropertyCollection properties, SettingsProviderCollection providers);
    public virtual void Save();
    private void SaveCore();
    public virtual SettingsPropertyCollection get_Properties();
    public virtual SettingsProviderCollection get_Providers();
    public virtual SettingsPropertyValueCollection get_PropertyValues();
    public virtual SettingsContext get_Context();
    private void GetPropertiesFromProvider(SettingsProvider provider);
    public static SettingsBase Synchronized(SettingsBase settingsBase);
    public bool get_IsSynchronized();
}
public class System.Configuration.SettingsContext : Hashtable {
    protected SettingsContext(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.SettingsDescriptionAttribute : Attribute {
    private string _description;
    public string Description { get; }
    public SettingsDescriptionAttribute(string description);
    public string get_Description();
}
[AttributeUsageAttribute("4")]
public class System.Configuration.SettingsGroupDescriptionAttribute : Attribute {
    private string _description;
    public string Description { get; }
    public SettingsGroupDescriptionAttribute(string description);
    public string get_Description();
}
[AttributeUsageAttribute("4")]
public class System.Configuration.SettingsGroupNameAttribute : Attribute {
    private string _groupName;
    public string GroupName { get; }
    public SettingsGroupNameAttribute(string groupName);
    public string get_GroupName();
}
public class System.Configuration.SettingsLoadedEventArgs : EventArgs {
    private SettingsProvider _provider;
    public SettingsProvider Provider { get; }
    public SettingsLoadedEventArgs(SettingsProvider provider);
    public SettingsProvider get_Provider();
}
public class System.Configuration.SettingsLoadedEventHandler : MulticastDelegate {
    public SettingsLoadedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SettingsLoadedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SettingsLoadedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Configuration.SettingsManageability : Enum {
    public int value__;
    public static SettingsManageability Roaming;
}
[AttributeUsageAttribute("132")]
public class System.Configuration.SettingsManageabilityAttribute : Attribute {
    private SettingsManageability _manageability;
    public SettingsManageability Manageability { get; }
    public SettingsManageabilityAttribute(SettingsManageability manageability);
    public SettingsManageability get_Manageability();
}
public class System.Configuration.SettingsProperty : object {
    [CompilerGeneratedAttribute]
private static bool <EnableUnsafeBinaryFormatterInPropertyValueSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsSerializeAs <SerializeAs>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsAttributeDictionary <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnErrorDeserializing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnErrorSerializing>k__BackingField;
    internal static bool EnableUnsafeBinaryFormatterInPropertyValueSerialization { get; }
    public string Name { get; public set; }
    public bool IsReadOnly { get; public set; }
    public object DefaultValue { get; public set; }
    public Type PropertyType { get; public set; }
    public SettingsSerializeAs SerializeAs { get; public set; }
    public SettingsProvider Provider { get; public set; }
    public SettingsAttributeDictionary Attributes { get; private set; }
    public bool ThrowOnErrorDeserializing { get; public set; }
    public bool ThrowOnErrorSerializing { get; public set; }
    public SettingsProperty(string name);
    public SettingsProperty(string name, Type propertyType, SettingsProvider provider, bool isReadOnly, object defaultValue, SettingsSerializeAs serializeAs, SettingsAttributeDictionary attributes, bool throwOnErrorDeserializing, bool throwOnErrorSerializing);
    public SettingsProperty(SettingsProperty propertyToCopy);
    private static SettingsProperty();
    [CompilerGeneratedAttribute]
internal static bool get_EnableUnsafeBinaryFormatterInPropertyValueSerialization();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual Type get_PropertyType();
    [CompilerGeneratedAttribute]
public virtual void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public virtual SettingsSerializeAs get_SerializeAs();
    [CompilerGeneratedAttribute]
public virtual void set_SerializeAs(SettingsSerializeAs value);
    [CompilerGeneratedAttribute]
public virtual SettingsProvider get_Provider();
    [CompilerGeneratedAttribute]
public virtual void set_Provider(SettingsProvider value);
    [CompilerGeneratedAttribute]
public virtual SettingsAttributeDictionary get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(SettingsAttributeDictionary value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnErrorDeserializing();
    [CompilerGeneratedAttribute]
public void set_ThrowOnErrorDeserializing(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnErrorSerializing();
    [CompilerGeneratedAttribute]
public void set_ThrowOnErrorSerializing(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.SettingsPropertyCollection : object {
    private Hashtable _hashtable;
    private bool _readOnly;
    public SettingsProperty Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private SettingsPropertyCollection(Hashtable h);
    public void Add(SettingsProperty property);
    public void Remove(string name);
    public SettingsProperty get_Item(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual object Clone();
    public void SetReadOnly();
    public void Clear();
    protected virtual void OnAdd(SettingsProperty property);
    protected virtual void OnAddComplete(SettingsProperty property);
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnRemove(SettingsProperty property);
    protected virtual void OnRemoveComplete(SettingsProperty property);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Configuration.SettingsPropertyIsReadOnlyException : Exception {
    public SettingsPropertyIsReadOnlyException(string message);
    public SettingsPropertyIsReadOnlyException(string message, Exception innerException);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SettingsPropertyIsReadOnlyException(SerializationInfo info, StreamingContext context);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Configuration.SettingsPropertyNotFoundException : Exception {
    public SettingsPropertyNotFoundException(string message);
    public SettingsPropertyNotFoundException(string message, Exception innerException);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SettingsPropertyNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.Configuration.SettingsPropertyValue : object {
    private object _value;
    private object _serializedValue;
    private bool _changedSinceLastSerialized;
    [CompilerGeneratedAttribute]
private bool <IsDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deserialized>k__BackingField;
    public string Name { get; }
    public bool IsDirty { get; public set; }
    public SettingsProperty Property { get; private set; }
    public bool UsingDefaultValue { get; private set; }
    public bool Deserialized { get; public set; }
    public object PropertyValue { get; public set; }
    public object SerializedValue { get; public set; }
    public SettingsPropertyValue(SettingsProperty property);
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsDirty();
    [CompilerGeneratedAttribute]
public void set_IsDirty(bool value);
    [CompilerGeneratedAttribute]
public SettingsProperty get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(SettingsProperty value);
    [CompilerGeneratedAttribute]
public bool get_UsingDefaultValue();
    [CompilerGeneratedAttribute]
private void set_UsingDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_Deserialized();
    [CompilerGeneratedAttribute]
public void set_Deserialized(bool value);
    public object get_PropertyValue();
    public void set_PropertyValue(object value);
    public object get_SerializedValue();
    public void set_SerializedValue(object value);
    private static bool IsHostedInAspnet();
    private object Deserialize();
    private static object GetObjectFromString(Type type, SettingsSerializeAs serializeAs, string serializedValue);
    private object SerializePropertyValue();
    private static string ConvertObjectToString(object propertyValue, Type type, SettingsSerializeAs serializeAs, bool throwOnError);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.SettingsPropertyValueCollection : object {
    private Hashtable _indices;
    private ArrayList _values;
    private bool _readOnly;
    public SettingsPropertyValue Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private SettingsPropertyValueCollection(Hashtable indices, ArrayList values);
    public void Add(SettingsPropertyValue property);
    public void Remove(string name);
    public SettingsPropertyValue get_Item(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual object Clone();
    public void SetReadOnly();
    public void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Configuration.SettingsPropertyWrongTypeException : Exception {
    public SettingsPropertyWrongTypeException(string message);
    public SettingsPropertyWrongTypeException(string message, Exception innerException);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected SettingsPropertyWrongTypeException(SerializationInfo info, StreamingContext context);
}
public abstract class System.Configuration.SettingsProvider : ProviderBase {
    public string ApplicationName { get; public set; }
    public abstract virtual SettingsPropertyValueCollection GetPropertyValues(SettingsContext context, SettingsPropertyCollection collection);
    public abstract virtual void SetPropertyValues(SettingsContext context, SettingsPropertyValueCollection collection);
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
}
[AttributeUsageAttribute("132")]
public class System.Configuration.SettingsProviderAttribute : Attribute {
    private string _providerTypeName;
    public string ProviderTypeName { get; }
    public SettingsProviderAttribute(string providerTypeName);
    public SettingsProviderAttribute(Type providerType);
    public string get_ProviderTypeName();
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.SettingsProviderCollection : ProviderCollection {
    public SettingsProvider Item { get; }
    public virtual void Add(ProviderBase provider);
    public SettingsProvider get_Item(string name);
}
public class System.Configuration.SettingsSavingEventHandler : MulticastDelegate {
    public SettingsSavingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Configuration.SettingsSerializeAs : Enum {
    public int value__;
    public static SettingsSerializeAs String;
    public static SettingsSerializeAs Xml;
    [ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.. Consider using Xml instead.")]
public static SettingsSerializeAs Binary;
    public static SettingsSerializeAs ProviderSpecific;
}
[AttributeUsageAttribute("132")]
public class System.Configuration.SettingsSerializeAsAttribute : Attribute {
    private SettingsSerializeAs _serializeAs;
    public SettingsSerializeAs SerializeAs { get; }
    public SettingsSerializeAsAttribute(SettingsSerializeAs serializeAs);
    public SettingsSerializeAs get_SerializeAs();
}
public class System.Configuration.SettingValueElement : ConfigurationElement {
    private static ConfigurationPropertyCollection modreq(System.Runtime.CompilerServices.IsVolatile) _properties;
    private static XmlDocument _document;
    private XmlNode _valueXml;
    private bool _isModified;
    protected internal ConfigurationPropertyCollection Properties { get; }
    public XmlNode ValueXml { get; public set; }
    private static SettingValueElement();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public XmlNode get_ValueXml();
    public void set_ValueXml(XmlNode value);
    protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    public virtual bool Equals(object settingValue);
    public virtual int GetHashCode();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual bool SerializeToXmlElement(XmlWriter writer, string elementName);
    protected internal virtual void Reset(ConfigurationElement parentElement);
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
}
[DefaultMemberAttribute("Item")]
internal class System.Configuration.SimpleBitVector32 : ValueType {
    [CompilerGeneratedAttribute]
private int <Data>k__BackingField;
    internal int Data { get; private set; }
    internal bool Item { get; internal set; }
    internal SimpleBitVector32(int data);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal int get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(int value);
    internal bool get_Item(int bit);
    internal void set_Item(int bit, bool value);
}
public class System.Configuration.SingleTagSectionHandler : object {
    public virtual object Create(object parent, object context, XmlNode section);
}
public enum System.Configuration.SpecialSetting : Enum {
    public int value__;
    public static SpecialSetting ConnectionString;
    public static SpecialSetting WebServiceUrl;
}
[AttributeUsageAttribute("132")]
public class System.Configuration.SpecialSettingAttribute : Attribute {
    private SpecialSetting _specialSetting;
    public SpecialSetting SpecialSetting { get; }
    public SpecialSettingAttribute(SpecialSetting specialSetting);
    public SpecialSetting get_SpecialSetting();
}
[IsReadOnlyAttribute]
internal class System.Configuration.StoredSetting : ValueType {
    internal SettingsSerializeAs SerializeAs;
    internal XmlNode Value;
    internal StoredSetting(SettingsSerializeAs serializeAs, XmlNode value);
}
internal class System.Configuration.StreamInfo : object {
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreamName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMonitored>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Version>k__BackingField;
    internal string SectionName { get; private set; }
    internal string ConfigSource { get; private set; }
    internal string StreamName { get; private set; }
    internal bool IsMonitored { get; internal set; }
    internal object Version { get; internal set; }
    internal StreamInfo(string sectionName, string configSource, string streamName);
    [CompilerGeneratedAttribute]
internal string get_SectionName();
    [CompilerGeneratedAttribute]
private void set_SectionName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConfigSource();
    [CompilerGeneratedAttribute]
private void set_ConfigSource(string value);
    [CompilerGeneratedAttribute]
internal string get_StreamName();
    [CompilerGeneratedAttribute]
private void set_StreamName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsMonitored();
    [CompilerGeneratedAttribute]
internal void set_IsMonitored(bool value);
    [CompilerGeneratedAttribute]
internal object get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(object value);
    internal StreamInfo Clone();
}
internal class System.Configuration.StreamUpdate : object {
    [CompilerGeneratedAttribute]
private string <NewStreamname>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteCompleted>k__BackingField;
    internal string NewStreamname { get; }
    internal bool WriteCompleted { get; internal set; }
    internal StreamUpdate(string newStreamname);
    [CompilerGeneratedAttribute]
internal string get_NewStreamname();
    [CompilerGeneratedAttribute]
internal bool get_WriteCompleted();
    [CompilerGeneratedAttribute]
internal void set_WriteCompleted(bool value);
}
internal static class System.Configuration.StringUtil : object {
    internal static bool EqualsOrBothNullOrEmpty(string s1, string s2);
    internal static bool EqualsIgnoreCase(string s1, string s2);
    internal static bool StartsWithOrdinal(string s1, string s2);
    internal static bool StartsWithOrdinalIgnoreCase(string s1, string s2);
    internal static String[] ObjectArrayToStringArray(Object[] objectArray);
}
public class System.Configuration.StringValidator : ConfigurationValidatorBase {
    private string _invalidChars;
    private int _maxLength;
    private int _minLength;
    public StringValidator(int minLength);
    public StringValidator(int minLength, int maxLength);
    public StringValidator(int minLength, int maxLength, string invalidCharacters);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.StringValidatorAttribute : ConfigurationValidatorAttribute {
    private int _maxLength;
    private int _minLength;
    [CompilerGeneratedAttribute]
private string <InvalidCharacters>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public int MinLength { get; public set; }
    public int MaxLength { get; public set; }
    public string InvalidCharacters { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public int get_MinLength();
    public void set_MinLength(int value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public string get_InvalidCharacters();
    [CompilerGeneratedAttribute]
public void set_InvalidCharacters(string value);
}
public class System.Configuration.SubclassTypeValidator : ConfigurationValidatorBase {
    private Type _base;
    public SubclassTypeValidator(Type baseClass);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.SubclassTypeValidatorAttribute : ConfigurationValidatorAttribute {
    [CompilerGeneratedAttribute]
private Type <BaseClass>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public Type BaseClass { get; }
    public SubclassTypeValidatorAttribute(Type baseClass);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    [CompilerGeneratedAttribute]
public Type get_BaseClass();
}
public class System.Configuration.TimeSpanMinutesConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanMinutesOrInfiniteConverter : TimeSpanMinutesConverter {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanSecondsConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanSecondsOrInfiniteConverter : TimeSpanSecondsConverter {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanValidator : ConfigurationValidatorBase {
    private ValidationFlags _flags;
    private TimeSpan _maxValue;
    private TimeSpan _minValue;
    private long _resolution;
    public TimeSpanValidator(TimeSpan minValue, TimeSpan maxValue);
    public TimeSpanValidator(TimeSpan minValue, TimeSpan maxValue, bool rangeIsExclusive);
    public TimeSpanValidator(TimeSpan minValue, TimeSpan maxValue, bool rangeIsExclusive, long resolutionInSeconds);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.TimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
    public static string TimeSpanMinValue;
    public static string TimeSpanMaxValue;
    [CompilerGeneratedAttribute]
private TimeSpan <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeRange>k__BackingField;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public TimeSpan MinValue { get; private set; }
    public TimeSpan MaxValue { get; private set; }
    public string MinValueString { get; public set; }
    public string MaxValueString { get; public set; }
    public bool ExcludeRange { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    [CompilerGeneratedAttribute]
public TimeSpan get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(TimeSpan value);
    public string get_MinValueString();
    public void set_MinValueString(string value);
    public string get_MaxValueString();
    public void set_MaxValueString(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeRange();
    [CompilerGeneratedAttribute]
public void set_ExcludeRange(bool value);
}
public class System.Configuration.TypeNameConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
internal static class System.Configuration.TypeUtil : object {
    internal static string ConfigurationManagerAssemblyName;
    private static String[] s_implicitAssemblies;
    private static TypeUtil();
    private static Type GetImplicitType(string typeString);
    internal static Type GetType(string typeString, bool throwOnError);
    internal static Type GetType(IInternalConfigHost host, string typeString, bool throwOnError);
    internal static T CreateInstance(string typeString);
    internal static object CreateInstance(Type type);
    internal static ConstructorInfo GetConstructor(Type type, Type baseType, bool throwOnError);
    internal static Type VerifyAssignableType(Type baseType, Type type, bool throwOnError);
}
internal abstract class System.Configuration.Update : object {
    [CompilerGeneratedAttribute]
private string <ConfigKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Moved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedXml>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Retrieved>k__BackingField;
    internal string ConfigKey { get; }
    internal bool Moved { get; }
    internal string UpdatedXml { get; }
    internal bool Retrieved { get; internal set; }
    internal Update(string configKey, bool moved, string updatedXml);
    [CompilerGeneratedAttribute]
internal string get_ConfigKey();
    [CompilerGeneratedAttribute]
internal bool get_Moved();
    [CompilerGeneratedAttribute]
internal string get_UpdatedXml();
    [CompilerGeneratedAttribute]
internal bool get_Retrieved();
    [CompilerGeneratedAttribute]
internal void set_Retrieved(bool value);
}
internal class System.Configuration.UpdateConfigHost : DelegatingConfigHost {
    private HybridDictionary _streams;
    internal UpdateConfigHost(IInternalConfigHost host);
    internal void AddStreamname(string oldStreamname, string newStreamname, bool alwaysIntercept);
    internal string GetNewStreamname(string oldStreamname);
    private StreamUpdate GetStreamUpdate(string oldStreamname, bool alwaysIntercept);
    public virtual object GetStreamVersion(string streamName);
    public virtual Stream OpenStreamForRead(string streamName);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public virtual void WriteCompleted(string streamName, bool success, object writeContext);
    public virtual bool IsConfigRecordRequired(string configPath);
    public virtual void DeleteStream(string streamName);
    public virtual bool IsFile(string streamName);
}
public class System.Configuration.UriSection : ConfigurationSection {
    private static ConfigurationPropertyCollection _properties;
    private static ConfigurationProperty _idn;
    private static ConfigurationProperty _iriParsing;
    private static ConfigurationProperty _schemeSettings;
    [ConfigurationPropertyAttribute("idn")]
public IdnElement Idn { get; }
    [ConfigurationPropertyAttribute("iriParsing")]
public IriParsingElement IriParsing { get; }
    [ConfigurationPropertyAttribute("schemeSettings")]
public SchemeSettingElementCollection SchemeSettings { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    private static UriSection();
    public IdnElement get_Idn();
    public IriParsingElement get_IriParsing();
    public SchemeSettingElementCollection get_SchemeSettings();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
}
internal static class System.Configuration.UrlPath : object {
    private static string FileUrlLocal;
    private static string FileUrlUnc;
    internal static string GetDirectoryOrRootName(string path);
    internal static bool IsEqualOrSubdirectory(string dir, string subdir);
    internal static bool IsEqualOrSubpath(string path, string subpath);
    internal static bool IsSubpath(string path, string subpath);
    private static bool IsEqualOrSubpathImpl(string path, string subpath, bool excludeEqual);
    private static bool IsDirectorySeparatorChar(char ch);
    private static bool IsAbsoluteLocalPhysicalPath(string path);
    private static bool IsAbsoluteUncPhysicalPath(string path);
    internal static string ConvertFileNameToUrl(string fileName);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.UserScopedSettingAttribute : SettingAttribute {
}
public class System.Configuration.UserSettingsGroup : ConfigurationSectionGroup {
}
public class System.Configuration.ValidatorCallback : MulticastDelegate {
    public ValidatorCallback(object object, IntPtr method);
    public virtual void Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Configuration.ValidatorUtils : object {
    public static void HelperParamValidation(object value, Type allowedType);
    public static void ValidateScalar(T value, T min, T max, T resolution, bool exclusiveRange);
    private static void ValidateRangeImpl(T value, T min, T max, bool exclusiveRange);
    private static void ValidateResolution(string resolutionAsString, long value, long resolution);
    public static void ValidateScalar(TimeSpan value, TimeSpan min, TimeSpan max, long resolutionInSeconds, bool exclusiveRange);
}
public class System.Configuration.WhiteSpaceTrimStringConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
internal class System.Configuration.XmlUtil : object {
    private static int MaxLineWidth;
    private StringWriter _cachedStringWriter;
    private int _lastLineNumber;
    private int _lastLinePosition;
    private Stream _stream;
    [CompilerGeneratedAttribute]
private XmlTextReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationSchemaErrors <SchemaErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    private static ReadOnlySpan`1<int> PositionOffset { get; }
    internal int TrueLinePosition { get; }
    internal XmlTextReader Reader { get; private set; }
    internal ConfigurationSchemaErrors SchemaErrors { get; }
    public string Filename { get; }
    public int LineNumber { get; }
    internal XmlUtil(Stream stream, string name, bool readToFirstElement);
    internal XmlUtil(Stream stream, string name, bool readToFirstElement, ConfigurationSchemaErrors schemaErrors);
    private static ReadOnlySpan`1<int> get_PositionOffset();
    internal int get_TrueLinePosition();
    [CompilerGeneratedAttribute]
internal XmlTextReader get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(XmlTextReader value);
    [CompilerGeneratedAttribute]
internal ConfigurationSchemaErrors get_SchemaErrors();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Filename();
    public sealed virtual int get_LineNumber();
    public sealed virtual void Dispose();
    private static int GetPositionOffset(XmlNodeType nodeType);
    private void ReleaseResources();
    internal void ReadToNextElement();
    internal void SkipToNextElement();
    internal void StrictReadToNextElement(ExceptionAction action);
    internal void StrictSkipToNextElement(ExceptionAction action);
    internal void StrictSkipToOurParentsEndElement(ExceptionAction action);
    internal void VerifyIgnorableNodeType(ExceptionAction action);
    internal void VerifyNoUnrecognizedAttributes(ExceptionAction action);
    internal bool VerifyRequiredAttribute(object requiredAttribute, string attrName, ExceptionAction action);
    internal void AddErrorUnrecognizedAttribute(ExceptionAction action);
    internal void AddErrorRequiredAttribute(string attrib, ExceptionAction action);
    internal void AddErrorReservedAttribute(ExceptionAction action);
    internal void AddErrorUnrecognizedElement(ExceptionAction action);
    internal void VerifyAndGetNonEmptyStringAttribute(ExceptionAction action, String& newValue);
    internal void VerifyAndGetBooleanAttribute(ExceptionAction action, bool defaultValue, Boolean& newValue);
    internal bool CopyOuterXmlToNextElement(XmlUtilWriter utilWriter, bool limitDepth);
    internal bool SkipChildElementsAndCopyOuterXmlToNextElement(XmlUtilWriter utilWriter);
    internal bool CopyReaderToNextElement(XmlUtilWriter utilWriter, bool limitDepth);
    internal bool SkipAndCopyReaderToNextElement(XmlUtilWriter utilWriter, bool limitDepth);
    private void CopyElement(XmlUtilWriter utilWriter);
    internal bool CopyXmlNode(XmlUtilWriter utilWriter);
    private string RetrieveFullOpenElementTag();
    internal string UpdateStartElement(XmlUtilWriter utilWriter, string updatedStartElement, bool needsChildren, int linePosition, int indent);
    private void ResetCachedStringWriter();
    internal string CopySection();
    internal static string FormatXmlElement(string xmlElement, int linePosition, int indent, bool skipFirstIndent);
}
internal class System.Configuration.XmlUtilWriter : object {
    private static char Space;
    private static string NewLine;
    private static string s_spaces8;
    private static string s_spaces4;
    private static string s_spaces2;
    private Stream _baseStream;
    private object _lineStartCheckpoint;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastLineBlank>k__BackingField;
    internal TextWriter Writer { get; }
    internal bool TrackPosition { get; }
    internal int LineNumber { get; private set; }
    internal int LinePosition { get; private set; }
    internal bool IsLastLineBlank { get; private set; }
    internal XmlUtilWriter(TextWriter writer, bool trackPosition);
    private static XmlUtilWriter();
    [CompilerGeneratedAttribute]
internal TextWriter get_Writer();
    [CompilerGeneratedAttribute]
internal bool get_TrackPosition();
    [CompilerGeneratedAttribute]
internal int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsLastLineBlank();
    [CompilerGeneratedAttribute]
private void set_IsLastLineBlank(bool value);
    private void UpdatePosition(char ch);
    internal int Write(string s);
    internal int Write(char ch);
    internal void Flush();
    internal int AppendEscapeTextString(string s);
    internal int AppendEscapeXmlString(string s, bool inAttribute, char quoteChar);
    internal int AppendEntityRef(string entityRef);
    internal int AppendCharEntity(char ch);
    internal int AppendCData(string cdata);
    internal int AppendProcessingInstruction(string name, string value);
    internal int AppendComment(string comment);
    internal int AppendAttributeValue(XmlTextReader reader);
    internal int AppendRequiredWhiteSpace(int fromLineNumber, int fromLinePosition, int toLineNumber, int toLinePosition);
    internal int AppendWhiteSpace(int fromLineNumber, int fromLinePosition, int toLineNumber, int toLinePosition);
    internal int AppendIndent(int linePosition, int indent, int depth, bool newLine);
    internal int AppendSpacesToLinePosition(int linePosition);
    internal int AppendNewLine();
    internal int AppendSpaces(int count);
    internal int AppendSpace();
    internal void SeekToLineStart();
    internal object CreateStreamCheckpoint();
    internal void RestoreStreamCheckpoint(object o);
}
internal static class System.Diagnostics.DiagnosticsConfiguration : object {
    private static SystemDiagnosticsSection modreq(System.Runtime.CompilerServices.IsVolatile) s_configSection;
    private static InitState modreq(System.Runtime.CompilerServices.IsVolatile) s_initState;
    internal static SwitchElementsCollection SwitchSettings { get; }
    internal static string ConfigFilePath { get; }
    internal static bool AutoFlush { get; }
    internal static bool UseGlobalLock { get; }
    internal static int IndentSize { get; }
    internal static ListenerElementsCollection SharedListeners { get; }
    internal static SourceElementsCollection Sources { get; }
    internal static SystemDiagnosticsSection SystemDiagnosticsSection { get; }
    internal static SwitchElementsCollection get_SwitchSettings();
    internal static string get_ConfigFilePath();
    internal static bool get_AutoFlush();
    internal static bool get_UseGlobalLock();
    internal static int get_IndentSize();
    internal static ListenerElementsCollection get_SharedListeners();
    internal static SourceElementsCollection get_Sources();
    internal static SystemDiagnosticsSection get_SystemDiagnosticsSection();
    private static SystemDiagnosticsSection GetConfigSection();
    internal static bool IsInitializing();
    internal static bool IsInitialized();
    internal static bool CanInitialize();
    internal static void Initialize();
    internal static void Refresh();
}
internal class System.Diagnostics.FilterElement : TypedElement {
    private static ConditionalWeakTable`2<TraceFilter, string> s_initData;
    private static FilterElement();
    public TraceFilter GetRuntimeObject();
    internal TraceFilter RefreshRuntimeObject(TraceFilter filter);
    private bool InitDataChanged(TraceFilter filter);
}
internal class System.Diagnostics.ListenerElement : TypedElement {
    private static ConfigurationProperty s_propFilter;
    private static ConfigurationProperty s_propName;
    private static ConfigurationProperty s_propOutputOpts;
    private ConfigurationProperty _propListenerTypeName;
    private bool _allowReferences;
    private StringDictionary _attributes;
    internal bool _isAddedByDefault;
    private static ConditionalWeakTable`2<TraceListener, string> s_initData;
    public StringDictionary Attributes { get; }
    [ConfigurationPropertyAttribute("filter")]
public FilterElement Filter { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("traceOutputOptions")]
public TraceOptions TraceOutputOptions { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string TypeName { get; public set; }
    public ListenerElement(bool allowReferences);
    private static ListenerElement();
    public StringDictionary get_Attributes();
    public FilterElement get_Filter();
    public string get_Name();
    public void set_Name(string value);
    public TraceOptions get_TraceOutputOptions();
    public void set_TraceOutputOptions(TraceOptions value);
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    public TraceListener GetRuntimeObject();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual void PreSerialize(XmlWriter writer);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    internal void ResetProperties();
    internal TraceListener RefreshRuntimeObject(TraceListener listener);
    private bool InitDataChanged(TraceListener listener);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Diagnostics.ListenerElement")]
internal class System.Diagnostics.ListenerElementsCollection : ConfigurationElementCollection {
    public ListenerElement Item { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    public ListenerElement get_Item(string name);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public IEnumerable`1<TraceListener> GetRuntimeObject();
    protected internal virtual void InitializeDefault();
    internal void InitializeDefaultInternal();
    protected virtual void BaseAdd(ConfigurationElement element);
}
[ConfigurationCollectionAttribute("System.Diagnostics.ListenerElement")]
internal class System.Diagnostics.SharedListenerElementsCollection : ListenerElementsCollection {
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual string get_ElementName();
}
internal class System.Diagnostics.SourceElement : ConfigurationElement {
    private static ConfigurationPropertyCollection _properties;
    private static ConfigurationProperty _propName;
    private static ConfigurationProperty _propSwitchName;
    private static ConfigurationProperty _propSwitchValue;
    private static ConfigurationProperty _propSwitchType;
    private static ConfigurationProperty _propListeners;
    private StringDictionary _attributes;
    public StringDictionary Attributes { get; }
    [ConfigurationPropertyAttribute("listeners")]
public ListenerElementsCollection Listeners { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("switchName")]
public string SwitchName { get; }
    [ConfigurationPropertyAttribute("switchValue")]
public string SwitchValue { get; }
    [ConfigurationPropertyAttribute("switchType")]
public string SwitchType { get; }
    private static SourceElement();
    public StringDictionary get_Attributes();
    public ListenerElementsCollection get_Listeners();
    public string get_Name();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_SwitchName();
    public string get_SwitchValue();
    public string get_SwitchType();
    protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual void PreSerialize(XmlWriter writer);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    internal void ResetProperties();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Diagnostics.SourceElement")]
internal class System.Diagnostics.SourceElementsCollection : ConfigurationElementCollection {
    public SourceElement Item { get; }
    protected string ElementName { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    public SourceElement get_Item(string name);
    protected virtual string get_ElementName();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Diagnostics.SwitchElement : ConfigurationElement {
    private static ConfigurationPropertyCollection _properties;
    private static ConfigurationProperty _propName;
    private static ConfigurationProperty _propValue;
    private StringDictionary _attributes;
    public StringDictionary Attributes { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("value")]
public string Value { get; }
    private static SwitchElement();
    public StringDictionary get_Attributes();
    public string get_Name();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Value();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual void PreSerialize(XmlWriter writer);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    internal void ResetProperties();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Diagnostics.SwitchElement")]
internal class System.Diagnostics.SwitchElementsCollection : ConfigurationElementCollection {
    public SwitchElement Item { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    public SwitchElement get_Item(string name);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class System.Diagnostics.SystemDiagnosticsSection : ConfigurationSection {
    private static ConfigurationPropertyCollection s_properties;
    private static ConfigurationProperty s_propSources;
    private static ConfigurationProperty s_propSharedListeners;
    private static ConfigurationProperty s_propSwitches;
    private static ConfigurationProperty s_propTrace;
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("sources")]
public SourceElementsCollection Sources { get; }
    [ConfigurationPropertyAttribute("sharedListeners")]
public ListenerElementsCollection SharedListeners { get; }
    [ConfigurationPropertyAttribute("switches")]
public SwitchElementsCollection Switches { get; }
    [ConfigurationPropertyAttribute("trace")]
public TraceSection Trace { get; }
    private static SystemDiagnosticsSection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public SourceElementsCollection get_Sources();
    public ListenerElementsCollection get_SharedListeners();
    public SwitchElementsCollection get_Switches();
    public TraceSection get_Trace();
    protected internal virtual void InitializeDefault();
}
public static class System.Diagnostics.TraceConfiguration : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_registered;
    public static void Register();
    private static void RefreshingConfiguration(object sender, EventArgs e);
    private static void InitializingTraceSource(object sender, InitializingTraceSourceEventArgs e);
    private static void ConfigureTraceSettings();
    private static void InitializingSwitch(object sender, InitializingSwitchEventArgs e);
    [CompilerGeneratedAttribute]
internal static bool <InitializingTraceSource>g__HasSourceSwitchTypeChanged|3_1(<>c__DisplayClass3_0& , <>c__DisplayClass3_1& );
    [CompilerGeneratedAttribute]
internal static void <InitializingTraceSource>g__CreateSwitch|3_0(string typeName, string name, <>c__DisplayClass3_0& );
}
internal class System.Diagnostics.TraceSection : ConfigurationElement {
    private static ConfigurationPropertyCollection s_properties;
    private static ConfigurationProperty s_propListeners;
    private static ConfigurationProperty s_propAutoFlush;
    private static ConfigurationProperty s_propIndentSize;
    private static ConfigurationProperty s_propUseGlobalLock;
    [ConfigurationPropertyAttribute("autoflush")]
public bool AutoFlush { get; }
    [ConfigurationPropertyAttribute("indentsize")]
public int IndentSize { get; }
    [ConfigurationPropertyAttribute("listeners")]
public ListenerElementsCollection Listeners { get; }
    [ConfigurationPropertyAttribute("useGlobalLock")]
public bool UseGlobalLock { get; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    private static TraceSection();
    public bool get_AutoFlush();
    public int get_IndentSize();
    public ListenerElementsCollection get_Listeners();
    public bool get_UseGlobalLock();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
}
internal static class System.Diagnostics.TraceUtils : object {
    private static string SystemDiagnostics;
    internal static object GetRuntimeObject(string className, Type baseType, string initializeData);
    private static Type MapToBuiltInTypes(string className);
    internal static bool IsOwnedTL(Type type);
    internal static bool IsOwnedTextWriterTL(Type type);
    private static object ConvertToBaseTypeOrEnum(string value, Type type);
    internal static void CopyStringDictionary(StringDictionary source, StringDictionary dest);
}
internal class System.Diagnostics.TypedElement : ConfigurationElement {
    protected static ConfigurationProperty s_propTypeName;
    protected static ConfigurationProperty s_propInitData;
    protected ConfigurationPropertyCollection _properties;
    protected object _runtimeObject;
    private Type _baseType;
    [ConfigurationPropertyAttribute("initializeData")]
public string InitData { get; public set; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("type")]
public string TypeName { get; public set; }
    public TypedElement(Type baseType);
    private static TypedElement();
    public string get_InitData();
    public void set_InitData(string value);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public virtual string get_TypeName();
    public virtual void set_TypeName(string value);
    protected object BaseGetRuntimeObject();
}
public class System.Drawing.Configuration.SystemDrawingSection : ConfigurationSection {
    private static string BitmapSuffixSectionName;
    private static ConfigurationPropertyCollection s_properties;
    private static ConfigurationProperty s_bitmapSuffix;
    [ConfigurationPropertyAttribute("bitmapSuffix")]
public string BitmapSuffix { get; public set; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    private static SystemDrawingSection();
    public string get_BitmapSuffix();
    public void set_BitmapSuffix(string value);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
}
internal class System.IO.Internal.TempFileCollection : object {
    private string _basePath;
    private string _tempDir;
    private Hashtable _files;
    private bool _createdTempDirectory;
    [CompilerGeneratedAttribute]
private bool <KeepFiles>k__BackingField;
    public int Count { get; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public string TempDir { get; }
    public string BasePath { get; }
    public bool KeepFiles { get; public set; }
    public TempFileCollection(string tempDir);
    public TempFileCollection(string tempDir, bool keepFiles);
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Dispose(bool disposing);
    protected virtual override void Finalize();
    public string AddExtension(string fileExtension);
    public string AddExtension(string fileExtension, bool keepFile);
    public void AddFile(string fileName, bool keepFile);
    public IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int start);
    public void CopyTo(String[] fileNames, int start);
    public int get_Count();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public string get_TempDir();
    public string get_BasePath();
    private void EnsureTempNameCreated();
    private string GetTempDirectory();
    [CompilerGeneratedAttribute]
public bool get_KeepFiles();
    [CompilerGeneratedAttribute]
public void set_KeepFiles(bool value);
    private bool KeepFile(string fileName);
    public void Delete();
    private static void Delete(string fileName);
    internal void SafeDelete();
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
internal static class System.Security.IdentityHelper : object {
    internal static string GetNormalizedUriHash(Uri uri);
    internal static string GetNormalizedStrongNameHash(AssemblyName name);
    internal static string GetStrongHashSuitableForObjectName(string name);
    internal static string GetStrongHashSuitableForObjectName(Stream stream);
    internal static string ToBase32StringSuitableForDirName(Byte[] buff);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Parameter_Invalid { get; }
    internal static string Parameter_NullOrEmpty { get; }
    internal static string Property_NullOrEmpty { get; }
    internal static string Property_Invalid { get; }
    internal static string Unexpected_Error { get; }
    internal static string Wrapped_exception_message { get; }
    internal static string Config_error_loading_XML_file { get; }
    internal static string Config_exception_creating_section_handler { get; }
    internal static string Config_exception_creating_section { get; }
    internal static string Config_tag_name_invalid { get; }
    internal static string Config_add_configurationsection_already_added { get; }
    internal static string Config_add_configurationsection_already_exists { get; }
    internal static string Config_add_configurationsection_in_location_config { get; }
    internal static string Config_add_configurationsectiongroup_already_added { get; }
    internal static string Config_add_configurationsectiongroup_already_exists { get; }
    internal static string Config_add_configurationsectiongroup_in_location_config { get; }
    internal static string Config_allow_exedefinition_error_application { get; }
    internal static string Config_allow_exedefinition_error_machine { get; }
    internal static string Config_allow_exedefinition_error_roaminguser { get; }
    internal static string Config_appsettings_declaration_invalid { get; }
    internal static string Config_base_attribute_locked { get; }
    internal static string Config_base_collection_item_locked_cannot_clear { get; }
    internal static string Config_base_collection_item_locked { get; }
    internal static string Config_base_cannot_add_items_above_inherited_items { get; }
    internal static string Config_base_cannot_add_items_below_inherited_items { get; }
    internal static string Config_base_cannot_remove_inherited_items { get; }
    internal static string Config_base_collection_elements_may_not_be_removed { get; }
    internal static string Config_base_collection_entry_already_exists { get; }
    internal static string Config_base_collection_entry_already_removed { get; }
    internal static string Config_base_collection_entry_not_found { get; }
    internal static string Config_base_element_cannot_have_multiple_child_elements { get; }
    internal static string Config_base_element_locked { get; }
    internal static string Config_base_expected_to_find_element { get; }
    internal static string Config_base_invalid_attribute_to_lock { get; }
    internal static string Config_base_invalid_attribute_to_lock_by_add { get; }
    internal static string Config_base_invalid_element_key { get; }
    internal static string Config_base_invalid_element_to_lock { get; }
    internal static string Config_base_invalid_element_to_lock_by_add { get; }
    internal static string Config_base_property_is_not_a_configuration_element { get; }
    internal static string Config_base_read_only { get; }
    internal static string Config_base_required_attribute_locked { get; }
    internal static string Config_base_required_attribute_lock_attempt { get; }
    internal static string Config_base_required_attribute_missing { get; }
    internal static string Config_base_section_invalid_content { get; }
    internal static string Config_base_unrecognized_attribute { get; }
    internal static string Config_base_unrecognized_element { get; }
    internal static string Config_base_unrecognized_element_name { get; }
    internal static string Config_base_value_cannot_contain { get; }
    internal static string Config_cannot_edit_configurationsection_in_location_config { get; }
    internal static string Config_cannot_edit_configurationsection_parentsection { get; }
    internal static string Config_cannot_edit_configurationsection_when_location_locked { get; }
    internal static string Config_cannot_edit_configurationsection_when_locked { get; }
    internal static string Config_cannot_edit_configurationsection_when_not_attached { get; }
    internal static string Config_cannot_edit_configurationsection_when_it_is_implicit { get; }
    internal static string Config_cannot_edit_configurationsection_when_it_is_undeclared { get; }
    internal static string Config_cannot_edit_configurationsectiongroup_in_location_config { get; }
    internal static string Config_cannot_edit_configurationsectiongroup_when_not_attached { get; }
    internal static string Config_cannot_edit_locationattriubtes { get; }
    internal static string Config_cannot_open_config_source { get; }
    internal static string Config_client_config_init_error { get; }
    internal static string Config_client_config_too_many_configsections_elements { get; }
    internal static string Config_configmanager_open_noexe { get; }
    internal static string Config_configsection_parentnotvalid { get; }
    internal static string Config_connectionstrings_declaration_invalid { get; }
    internal static string Config_data_read_count_mismatch { get; }
    internal static string Config_element_no_context { get; }
    internal static string Config_empty_lock_attributes_except { get; }
    internal static string Config_empty_lock_element_except { get; }
    internal static string Config_exception_in_config_section_handler { get; }
    internal static string Config_file_doesnt_have_root_configuration { get; }
    internal static string Config_file_has_changed { get; }
    internal static string Config_getparentconfigurationsection_first_instance { get; }
    internal static string Config_inconsistent_location_attributes { get; }
    internal static string Config_invalid_attributes_for_write { get; }
    internal static string Config_invalid_boolean_attribute { get; }
    internal static string Config_invalid_node_type { get; }
    internal static string Config_location_location_not_allowed { get; }
    internal static string Config_location_path_invalid_character { get; }
    internal static string Config_location_path_invalid_first_character { get; }
    internal static string Config_location_path_invalid_last_character { get; }
    internal static string Config_missing_required_attribute { get; }
    internal static string Config_more_data_than_expected { get; }
    internal static string Config_name_value_file_section_file_invalid_root { get; }
    internal static string Config_namespace_invalid { get; }
    internal static string Config_no_stream_to_write { get; }
    internal static string Config_not_allowed_to_encrypt_this_section { get; }
    internal static string Config_object_is_null { get; }
    internal static string Config_operation_not_runtime { get; }
    internal static string Config_properties_may_not_be_derived_from_configuration_section { get; }
    internal static string Config_provider_must_implement_type { get; }
    internal static string Config_root_section_group_cannot_be_edited { get; }
    internal static string Config_section_allow_definition_attribute_invalid { get; }
    internal static string Config_section_allow_exe_definition_attribute_invalid { get; }
    internal static string Config_section_cannot_be_used_in_location { get; }
    internal static string Config_section_locked { get; }
    internal static string Config_sections_must_be_unique { get; }
    internal static string Config_source_cannot_be_shared { get; }
    internal static string Config_source_parent_conflict { get; }
    internal static string Config_source_file_format { get; }
    internal static string Config_source_invalid_format { get; }
    internal static string Config_source_requires_file { get; }
    internal static string Config_source_syntax_error { get; }
    internal static string Config_system_already_set { get; }
    internal static string Config_tag_name_already_defined { get; }
    internal static string Config_tag_name_already_defined_at_this_level { get; }
    internal static string Config_tag_name_cannot_be_location { get; }
    internal static string Config_tag_name_cannot_begin_with_config { get; }
    internal static string Config_type_doesnt_inherit_from_type { get; }
    internal static string Config_unexpected_element_end { get; }
    internal static string Config_unexpected_element_name { get; }
    internal static string Config_unexpected_node_type { get; }
    internal static string Config_unrecognized_configuration_section { get; }
    internal static string Config_write_failed { get; }
    internal static string Converter_timespan_not_in_second { get; }
    internal static string Converter_unsupported_value_type { get; }
    internal static string Decryption_failed { get; }
    internal static string Default_value_conversion_error_from_string { get; }
    internal static string Default_value_wrong_type { get; }
    internal static string DPAPI_bad_data { get; }
    internal static string Empty_attribute { get; }
    internal static string EncryptedNode_not_found { get; }
    internal static string EncryptedNode_is_in_invalid_format { get; }
    internal static string Encryption_failed { get; }
    internal static string IndexOutOfRange { get; }
    internal static string Invalid_enum_value { get; }
    internal static string Must_add_to_config_before_protecting_it { get; }
    internal static string No_converter { get; }
    internal static string No_exception_information_available { get; }
    internal static string Property_name_reserved { get; }
    internal static string Item_name_reserved { get; }
    internal static string Basicmap_item_name_reserved { get; }
    internal static string ProtectedConfigurationProvider_not_found { get; }
    internal static string Regex_validator_error { get; }
    internal static string String_null_or_empty { get; }
    internal static string Subclass_validator_error { get; }
    internal static string Top_level_conversion_error_from_string { get; }
    internal static string Top_level_conversion_error_to_string { get; }
    internal static string Top_level_validation_error { get; }
    internal static string Type_cannot_be_resolved { get; }
    internal static string TypeNotPublic { get; }
    internal static string Unrecognized_initialization_value { get; }
    internal static string Validation_scalar_range_violation_not_different { get; }
    internal static string Validation_scalar_range_violation_not_equal { get; }
    internal static string Validation_scalar_range_violation_not_in_range { get; }
    internal static string Validation_scalar_range_violation_not_outside_range { get; }
    internal static string Validator_Attribute_param_not_validator { get; }
    internal static string Validator_does_not_support_elem_type { get; }
    internal static string Validator_does_not_support_prop_type { get; }
    internal static string Validator_element_not_valid { get; }
    internal static string Validator_method_not_found { get; }
    internal static string Validator_min_greater_than_max { get; }
    internal static string Validator_scalar_resolution_violation { get; }
    internal static string Validator_string_invalid_chars { get; }
    internal static string Validator_string_max_length { get; }
    internal static string Validator_string_min_length { get; }
    internal static string Validator_value_type_invalid { get; }
    internal static string Validator_multiple_validator_attributes { get; }
    internal static string Validator_timespan_value_must_be_positive { get; }
    internal static string WrongType_of_Protected_provider { get; }
    internal static string Config_element_locking_not_supported { get; }
    internal static string Protection_provider_syntax_error { get; }
    internal static string Protection_provider_invalid_format { get; }
    internal static string Cannot_declare_or_remove_implicit_section { get; }
    internal static string Config_reserved_attribute { get; }
    internal static string Filename_in_SaveAs_is_used_already { get; }
    internal static string Provider_Already_Initialized { get; }
    internal static string Config_provider_name_null_or_empty { get; }
    internal static string CollectionReadOnly { get; }
    internal static string Config_source_not_under_config_dir { get; }
    internal static string Config_source_invalid { get; }
    internal static string Location_invalid_inheritInChildApplications_in_machine_or_root_web_config { get; }
    internal static string Cannot_change_both_AllowOverride_and_OverrideMode { get; }
    internal static string Config_section_override_mode_attribute_invalid { get; }
    internal static string Invalid_override_mode_declaration { get; }
    internal static string Machine_config_file_not_found { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string Unable_to_convert_type_from_string { get; }
    internal static string Unable_to_convert_type_to_string { get; }
    internal static string Could_not_create_from_default_value { get; }
    internal static string Could_not_create_from_default_value_2 { get; }
    internal static string UserSettingsNotSupported { get; }
    internal static string SettingsSaveFailed { get; }
    internal static string SettingsSaveFailedNoSection { get; }
    internal static string UnknownUserLevel { get; }
    internal static string BothScopeAttributes { get; }
    internal static string NoScopeAttributes { get; }
    internal static string SettingsPropertyNotFound { get; }
    internal static string SettingsPropertyReadOnly { get; }
    internal static string SettingsPropertyWrongType { get; }
    internal static string ProviderInstantiationFailed { get; }
    internal static string ProviderTypeLoadFailed { get; }
    internal static string AppSettingsReaderNoKey { get; }
    internal static string AppSettingsReaderCantParse { get; }
    internal static string AppSettingsReaderEmptyString { get; }
    internal static string Config_invalid_integer_attribute { get; }
    internal static string Config_base_required_attribute_empty { get; }
    internal static string Config_base_elements_only { get; }
    internal static string Config_base_no_child_nodes { get; }
    internal static string InvalidNullEmptyArgument { get; }
    internal static string DuplicateFileName { get; }
    internal static string Could_not_create_listener { get; }
    internal static string Could_not_create_type_instance { get; }
    internal static string Could_not_find_type { get; }
    internal static string Could_not_get_constructor { get; }
    internal static string EmptyTypeName_NotAllowed { get; }
    internal static string Incorrect_base_type { get; }
    internal static string Only_specify_one { get; }
    internal static string Reference_listener_cant_have_properties { get; }
    internal static string Reference_to_nonexistent_listener { get; }
    internal static string TL_InitializeData_NotSpecified { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Parameter_Invalid();
    internal static string get_Parameter_NullOrEmpty();
    internal static string get_Property_NullOrEmpty();
    internal static string get_Property_Invalid();
    internal static string get_Unexpected_Error();
    internal static string get_Wrapped_exception_message();
    internal static string get_Config_error_loading_XML_file();
    internal static string get_Config_exception_creating_section_handler();
    internal static string get_Config_exception_creating_section();
    internal static string get_Config_tag_name_invalid();
    internal static string get_Config_add_configurationsection_already_added();
    internal static string get_Config_add_configurationsection_already_exists();
    internal static string get_Config_add_configurationsection_in_location_config();
    internal static string get_Config_add_configurationsectiongroup_already_added();
    internal static string get_Config_add_configurationsectiongroup_already_exists();
    internal static string get_Config_add_configurationsectiongroup_in_location_config();
    internal static string get_Config_allow_exedefinition_error_application();
    internal static string get_Config_allow_exedefinition_error_machine();
    internal static string get_Config_allow_exedefinition_error_roaminguser();
    internal static string get_Config_appsettings_declaration_invalid();
    internal static string get_Config_base_attribute_locked();
    internal static string get_Config_base_collection_item_locked_cannot_clear();
    internal static string get_Config_base_collection_item_locked();
    internal static string get_Config_base_cannot_add_items_above_inherited_items();
    internal static string get_Config_base_cannot_add_items_below_inherited_items();
    internal static string get_Config_base_cannot_remove_inherited_items();
    internal static string get_Config_base_collection_elements_may_not_be_removed();
    internal static string get_Config_base_collection_entry_already_exists();
    internal static string get_Config_base_collection_entry_already_removed();
    internal static string get_Config_base_collection_entry_not_found();
    internal static string get_Config_base_element_cannot_have_multiple_child_elements();
    internal static string get_Config_base_element_locked();
    internal static string get_Config_base_expected_to_find_element();
    internal static string get_Config_base_invalid_attribute_to_lock();
    internal static string get_Config_base_invalid_attribute_to_lock_by_add();
    internal static string get_Config_base_invalid_element_key();
    internal static string get_Config_base_invalid_element_to_lock();
    internal static string get_Config_base_invalid_element_to_lock_by_add();
    internal static string get_Config_base_property_is_not_a_configuration_element();
    internal static string get_Config_base_read_only();
    internal static string get_Config_base_required_attribute_locked();
    internal static string get_Config_base_required_attribute_lock_attempt();
    internal static string get_Config_base_required_attribute_missing();
    internal static string get_Config_base_section_invalid_content();
    internal static string get_Config_base_unrecognized_attribute();
    internal static string get_Config_base_unrecognized_element();
    internal static string get_Config_base_unrecognized_element_name();
    internal static string get_Config_base_value_cannot_contain();
    internal static string get_Config_cannot_edit_configurationsection_in_location_config();
    internal static string get_Config_cannot_edit_configurationsection_parentsection();
    internal static string get_Config_cannot_edit_configurationsection_when_location_locked();
    internal static string get_Config_cannot_edit_configurationsection_when_locked();
    internal static string get_Config_cannot_edit_configurationsection_when_not_attached();
    internal static string get_Config_cannot_edit_configurationsection_when_it_is_implicit();
    internal static string get_Config_cannot_edit_configurationsection_when_it_is_undeclared();
    internal static string get_Config_cannot_edit_configurationsectiongroup_in_location_config();
    internal static string get_Config_cannot_edit_configurationsectiongroup_when_not_attached();
    internal static string get_Config_cannot_edit_locationattriubtes();
    internal static string get_Config_cannot_open_config_source();
    internal static string get_Config_client_config_init_error();
    internal static string get_Config_client_config_too_many_configsections_elements();
    internal static string get_Config_configmanager_open_noexe();
    internal static string get_Config_configsection_parentnotvalid();
    internal static string get_Config_connectionstrings_declaration_invalid();
    internal static string get_Config_data_read_count_mismatch();
    internal static string get_Config_element_no_context();
    internal static string get_Config_empty_lock_attributes_except();
    internal static string get_Config_empty_lock_element_except();
    internal static string get_Config_exception_in_config_section_handler();
    internal static string get_Config_file_doesnt_have_root_configuration();
    internal static string get_Config_file_has_changed();
    internal static string get_Config_getparentconfigurationsection_first_instance();
    internal static string get_Config_inconsistent_location_attributes();
    internal static string get_Config_invalid_attributes_for_write();
    internal static string get_Config_invalid_boolean_attribute();
    internal static string get_Config_invalid_node_type();
    internal static string get_Config_location_location_not_allowed();
    internal static string get_Config_location_path_invalid_character();
    internal static string get_Config_location_path_invalid_first_character();
    internal static string get_Config_location_path_invalid_last_character();
    internal static string get_Config_missing_required_attribute();
    internal static string get_Config_more_data_than_expected();
    internal static string get_Config_name_value_file_section_file_invalid_root();
    internal static string get_Config_namespace_invalid();
    internal static string get_Config_no_stream_to_write();
    internal static string get_Config_not_allowed_to_encrypt_this_section();
    internal static string get_Config_object_is_null();
    internal static string get_Config_operation_not_runtime();
    internal static string get_Config_properties_may_not_be_derived_from_configuration_section();
    internal static string get_Config_provider_must_implement_type();
    internal static string get_Config_root_section_group_cannot_be_edited();
    internal static string get_Config_section_allow_definition_attribute_invalid();
    internal static string get_Config_section_allow_exe_definition_attribute_invalid();
    internal static string get_Config_section_cannot_be_used_in_location();
    internal static string get_Config_section_locked();
    internal static string get_Config_sections_must_be_unique();
    internal static string get_Config_source_cannot_be_shared();
    internal static string get_Config_source_parent_conflict();
    internal static string get_Config_source_file_format();
    internal static string get_Config_source_invalid_format();
    internal static string get_Config_source_requires_file();
    internal static string get_Config_source_syntax_error();
    internal static string get_Config_system_already_set();
    internal static string get_Config_tag_name_already_defined();
    internal static string get_Config_tag_name_already_defined_at_this_level();
    internal static string get_Config_tag_name_cannot_be_location();
    internal static string get_Config_tag_name_cannot_begin_with_config();
    internal static string get_Config_type_doesnt_inherit_from_type();
    internal static string get_Config_unexpected_element_end();
    internal static string get_Config_unexpected_element_name();
    internal static string get_Config_unexpected_node_type();
    internal static string get_Config_unrecognized_configuration_section();
    internal static string get_Config_write_failed();
    internal static string get_Converter_timespan_not_in_second();
    internal static string get_Converter_unsupported_value_type();
    internal static string get_Decryption_failed();
    internal static string get_Default_value_conversion_error_from_string();
    internal static string get_Default_value_wrong_type();
    internal static string get_DPAPI_bad_data();
    internal static string get_Empty_attribute();
    internal static string get_EncryptedNode_not_found();
    internal static string get_EncryptedNode_is_in_invalid_format();
    internal static string get_Encryption_failed();
    internal static string get_IndexOutOfRange();
    internal static string get_Invalid_enum_value();
    internal static string get_Must_add_to_config_before_protecting_it();
    internal static string get_No_converter();
    internal static string get_No_exception_information_available();
    internal static string get_Property_name_reserved();
    internal static string get_Item_name_reserved();
    internal static string get_Basicmap_item_name_reserved();
    internal static string get_ProtectedConfigurationProvider_not_found();
    internal static string get_Regex_validator_error();
    internal static string get_String_null_or_empty();
    internal static string get_Subclass_validator_error();
    internal static string get_Top_level_conversion_error_from_string();
    internal static string get_Top_level_conversion_error_to_string();
    internal static string get_Top_level_validation_error();
    internal static string get_Type_cannot_be_resolved();
    internal static string get_TypeNotPublic();
    internal static string get_Unrecognized_initialization_value();
    internal static string get_Validation_scalar_range_violation_not_different();
    internal static string get_Validation_scalar_range_violation_not_equal();
    internal static string get_Validation_scalar_range_violation_not_in_range();
    internal static string get_Validation_scalar_range_violation_not_outside_range();
    internal static string get_Validator_Attribute_param_not_validator();
    internal static string get_Validator_does_not_support_elem_type();
    internal static string get_Validator_does_not_support_prop_type();
    internal static string get_Validator_element_not_valid();
    internal static string get_Validator_method_not_found();
    internal static string get_Validator_min_greater_than_max();
    internal static string get_Validator_scalar_resolution_violation();
    internal static string get_Validator_string_invalid_chars();
    internal static string get_Validator_string_max_length();
    internal static string get_Validator_string_min_length();
    internal static string get_Validator_value_type_invalid();
    internal static string get_Validator_multiple_validator_attributes();
    internal static string get_Validator_timespan_value_must_be_positive();
    internal static string get_WrongType_of_Protected_provider();
    internal static string get_Config_element_locking_not_supported();
    internal static string get_Protection_provider_syntax_error();
    internal static string get_Protection_provider_invalid_format();
    internal static string get_Cannot_declare_or_remove_implicit_section();
    internal static string get_Config_reserved_attribute();
    internal static string get_Filename_in_SaveAs_is_used_already();
    internal static string get_Provider_Already_Initialized();
    internal static string get_Config_provider_name_null_or_empty();
    internal static string get_CollectionReadOnly();
    internal static string get_Config_source_not_under_config_dir();
    internal static string get_Config_source_invalid();
    internal static string get_Location_invalid_inheritInChildApplications_in_machine_or_root_web_config();
    internal static string get_Cannot_change_both_AllowOverride_and_OverrideMode();
    internal static string get_Config_section_override_mode_attribute_invalid();
    internal static string get_Invalid_override_mode_declaration();
    internal static string get_Machine_config_file_not_found();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_Unable_to_convert_type_from_string();
    internal static string get_Unable_to_convert_type_to_string();
    internal static string get_Could_not_create_from_default_value();
    internal static string get_Could_not_create_from_default_value_2();
    internal static string get_UserSettingsNotSupported();
    internal static string get_SettingsSaveFailed();
    internal static string get_SettingsSaveFailedNoSection();
    internal static string get_UnknownUserLevel();
    internal static string get_BothScopeAttributes();
    internal static string get_NoScopeAttributes();
    internal static string get_SettingsPropertyNotFound();
    internal static string get_SettingsPropertyReadOnly();
    internal static string get_SettingsPropertyWrongType();
    internal static string get_ProviderInstantiationFailed();
    internal static string get_ProviderTypeLoadFailed();
    internal static string get_AppSettingsReaderNoKey();
    internal static string get_AppSettingsReaderCantParse();
    internal static string get_AppSettingsReaderEmptyString();
    internal static string get_Config_invalid_integer_attribute();
    internal static string get_Config_base_required_attribute_empty();
    internal static string get_Config_base_elements_only();
    internal static string get_Config_base_no_child_nodes();
    internal static string get_InvalidNullEmptyArgument();
    internal static string get_DuplicateFileName();
    internal static string get_Could_not_create_listener();
    internal static string get_Could_not_create_type_instance();
    internal static string get_Could_not_find_type();
    internal static string get_Could_not_get_constructor();
    internal static string get_EmptyTypeName_NotAllowed();
    internal static string get_Incorrect_base_type();
    internal static string get_Only_specify_one();
    internal static string get_Reference_listener_cant_have_properties();
    internal static string get_Reference_to_nonexistent_listener();
    internal static string get_TL_InitializeData_NotSpecified();
}
public enum System.UriIdnScope : Enum {
    public int value__;
    public static UriIdnScope None;
    public static UriIdnScope AllExceptIntranet;
    public static UriIdnScope All;
}
