[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AssemblyRef : object {
    internal static string MicrosoftPublicKey;
    internal static string SystemDesign;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
}
internal static class FXAssembly : object {
    [NullableAttribute("1")]
internal static string Version;
}
internal static class SourceGenerated.EnumValidator : object {
    public static void Validate(Enum enumToValidate, string parameterName);
    public static void Validate(HighDpiMode enumToValidate, string parameterName);
    public static void Validate(AutoSizeMode enumToValidate, string parameterName);
    public static void Validate(DialogResult enumToValidate, string parameterName);
    public static void Validate(FlatStyle enumToValidate, string parameterName);
    public static void Validate(ContentAlignment enumToValidate, string parameterName);
    public static void Validate(TextImageRelation enumToValidate, string parameterName);
    public static void Validate(Appearance enumToValidate, string parameterName);
    public static void Validate(CheckState enumToValidate, string parameterName);
    public static void Validate(SelectionMode enumToValidate, string parameterName);
    public static void Validate(TextDataFormat enumToValidate, string parameterName);
    public static void Validate(HorizontalAlignment enumToValidate, string parameterName);
    public static void Validate(AutoCompleteMode enumToValidate, string parameterName);
    public static void Validate(AutoCompleteSource enumToValidate, string parameterName);
    public static void Validate(DrawMode enumToValidate, string parameterName);
    public static void Validate(ComboBoxStyle enumToValidate, string parameterName);
    public static void Validate(AutoScaleMode enumToValidate, string parameterName);
    public static void Validate(AccessibleRole enumToValidate, string parameterName);
    public static void Validate(ImageLayout enumToValidate, string parameterName);
    public static void Validate(RightToLeft enumToValidate, string parameterName);
    public static void Validate(ImeMode enumToValidate, string parameterName);
    public static void Validate(BorderStyle enumToValidate, string parameterName);
    public static void Validate(DataGridViewCellBorderStyle enumToValidate, string parameterName);
    public static void Validate(DataGridViewClipboardCopyMode enumToValidate, string parameterName);
    public static void Validate(DataGridViewHeaderBorderStyle enumToValidate, string parameterName);
    public static void Validate(DataGridViewColumnHeadersHeightSizeMode enumToValidate, string parameterName);
    public static void Validate(DataGridViewEditMode enumToValidate, string parameterName);
    public static void Validate(DataGridViewRowHeadersWidthSizeMode enumToValidate, string parameterName);
    public static void Validate(ScrollBars enumToValidate, string parameterName);
    public static void Validate(DataGridViewSelectionMode enumToValidate, string parameterName);
    public static void Validate(DataGridViewAdvancedCellBorderStyle enumToValidate, string parameterName);
    public static void Validate(DataGridViewTriState enumToValidate, string parameterName);
    public static void Validate(SortOrder enumToValidate, string parameterName);
    public static void Validate(DataGridViewComboBoxDisplayStyle enumToValidate, string parameterName);
    public static void Validate(DataGridViewImageCellLayout enumToValidate, string parameterName);
    public static void Validate(LinkBehavior enumToValidate, string parameterName);
    public static void Validate(LeftRightAlignment enumToValidate, string parameterName);
    public static void Validate(DateTimePickerFormat enumToValidate, string parameterName);
    public static void Validate(DropImageType enumToValidate, string parameterName);
    public static void Validate(ErrorIconAlignment enumToValidate, string parameterName);
    public static void Validate(ErrorBlinkStyle enumToValidate, string parameterName);
    public static void Validate(FormBorderStyle enumToValidate, string parameterName);
    public static void Validate(SizeGripStyle enumToValidate, string parameterName);
    public static void Validate(FormStartPosition enumToValidate, string parameterName);
    public static void Validate(FormWindowState enumToValidate, string parameterName);
    public static void Validate(HelpNavigator enumToValidate, string parameterName);
    public static void Validate(ColorDepth enumToValidate, string parameterName);
    public static void Validate(AutomationLiveSetting enumToValidate, string parameterName);
    public static void Validate(DockStyle enumToValidate, string parameterName);
    public static void Validate(FlowDirection enumToValidate, string parameterName);
    public static void Validate(ItemActivation enumToValidate, string parameterName);
    public static void Validate(ListViewAlignment enumToValidate, string parameterName);
    public static void Validate(ColumnHeaderStyle enumToValidate, string parameterName);
    public static void Validate(View enumToValidate, string parameterName);
    public static void Validate(ItemBoundsPortion enumToValidate, string parameterName);
    public static void Validate(ColumnHeaderAutoResizeStyle enumToValidate, string parameterName);
    public static void Validate(ListViewGroupCollapsedState enumToValidate, string parameterName);
    public static void Validate(MaskFormat enumToValidate, string parameterName);
    public static void Validate(InsertKeyMode enumToValidate, string parameterName);
    public static void Validate(MessageBoxButtons enumToValidate, string parameterName);
    public static void Validate(MessageBoxIcon enumToValidate, string parameterName);
    public static void Validate(MessageBoxDefaultButton enumToValidate, string parameterName);
    public static void Validate(ToolTipIcon enumToValidate, string parameterName);
    public static void Validate(PictureBoxSizeMode enumToValidate, string parameterName);
    public static void Validate(ProgressBarStyle enumToValidate, string parameterName);
    public static void Validate(PropertySort enumToValidate, string parameterName);
    public static void Validate(RichTextBoxScrollBars enumToValidate, string parameterName);
    public static void Validate(RichTextBoxStreamType enumToValidate, string parameterName);
    public static void Validate(FixedPanel enumToValidate, string parameterName);
    public static void Validate(Orientation enumToValidate, string parameterName);
    public static void Validate(TabAlignment enumToValidate, string parameterName);
    public static void Validate(TabAppearance enumToValidate, string parameterName);
    public static void Validate(TabDrawMode enumToValidate, string parameterName);
    public static void Validate(TabSizeMode enumToValidate, string parameterName);
    public static void Validate(TableLayoutPanelCellBorderStyle enumToValidate, string parameterName);
    public static void Validate(TableLayoutPanelGrowStyle enumToValidate, string parameterName);
    public static void Validate(TaskDialogExpanderPosition enumToValidate, string parameterName);
    public static void Validate(TaskDialogProgressBarState enumToValidate, string parameterName);
    public static void Validate(CharacterCasing enumToValidate, string parameterName);
    public static void Validate(ToolStripGripStyle enumToValidate, string parameterName);
    public static void Validate(ToolStripLayoutStyle enumToValidate, string parameterName);
    public static void Validate(ToolStripRenderMode enumToValidate, string parameterName);
    public static void Validate(ToolStripTextDirection enumToValidate, string parameterName);
    public static void Validate(ToolStripItemAlignment enumToValidate, string parameterName);
    public static void Validate(ToolStripItemDisplayStyle enumToValidate, string parameterName);
    public static void Validate(ToolStripItemImageScaling enumToValidate, string parameterName);
    public static void Validate(MergeAction enumToValidate, string parameterName);
    public static void Validate(ToolStripItemOverflow enumToValidate, string parameterName);
    public static void Validate(ToolStripManagerRenderMode enumToValidate, string parameterName);
    public static void Validate(Border3DStyle enumToValidate, string parameterName);
    public static void Validate(TreeViewDrawMode enumToValidate, string parameterName);
    public static void Validate(Edges enumToValidate, string parameterName);
    public static void Validate(EdgeStyle enumToValidate, string parameterName);
    public static void Validate(EdgeEffects enumToValidate, string parameterName);
    public static void Validate(BooleanProperty enumToValidate, string parameterName);
    public static void Validate(ColorProperty enumToValidate, string parameterName);
    public static void Validate(EnumProperty enumToValidate, string parameterName);
    public static void Validate(FilenameProperty enumToValidate, string parameterName);
    public static void Validate(FontProperty enumToValidate, string parameterName);
    public static void Validate(IntegerProperty enumToValidate, string parameterName);
    public static void Validate(ThemeSizeType enumToValidate, string parameterName);
    public static void Validate(PointProperty enumToValidate, string parameterName);
    public static void Validate(MarginProperty enumToValidate, string parameterName);
    public static void Validate(StringProperty enumToValidate, string parameterName);
    private static void ReportEnumValidationError(string parameterName, int value, Type enumType);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.CollectionHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void HashtableCopyTo(IDictionary`2<TKey, TValue> source, Array target, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Collections.Specialized.BackCompatibleStringComparer : object {
    internal static IEqualityComparer`1<string> Default;
    private static BackCompatibleStringComparer();
    public sealed virtual int GetHashCode(string obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(string x, string y);
    public virtual int GetHashCode(object o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.ComponentModel.CoreSwitches : object {
    [NullableAttribute("2")]
private static BooleanSwitch s_perfTrack;
    public static BooleanSwitch PerfTrack { get; }
    public static BooleanSwitch get_PerfTrack();
}
internal class System.ComponentModel.WeakHashtable : Hashtable {
    [NullableAttribute("1")]
private static IEqualityComparer _comparer;
    private long _lastGlobalMem;
    private int _lastHashCount;
    private static WeakHashtable();
    public virtual void Clear();
    [NullableContextAttribute("1")]
public virtual void Remove(object key);
    [NullableContextAttribute("1")]
public void SetWeak(object key, object value);
    private void ScavengeKeys();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Drawing.Design.Com2ExtendedUITypeEditor : UITypeEditor {
    private UITypeEditor _innerEditor;
    public UITypeEditor InnerEditor { get; }
    public Com2ExtendedUITypeEditor(UITypeEditor baseTypeEditor);
    [NullableContextAttribute("1")]
public Com2ExtendedUITypeEditor(Type baseType);
    public UITypeEditor get_InnerEditor();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    [NullableContextAttribute("1")]
public virtual void PaintValue(PaintValueEventArgs e);
}
[NullableContextAttribute("1")]
public interface System.Drawing.Design.IPropertyValueUIService {
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_PropertyUIValueItemsChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyUIValueItemsChanged(EventHandler value);
    public abstract virtual void AddPropertyValueUIHandler(PropertyValueUIHandler newHandler);
    public abstract virtual PropertyValueUIItem[] GetPropertyUIValueItems(ITypeDescriptorContext context, PropertyDescriptor propDesc);
    public abstract virtual void NotifyPropertyValueUIItemsChanged();
    public abstract virtual void RemovePropertyValueUIHandler(PropertyValueUIHandler newHandler);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.Design.PaintValueEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeDescriptorContext <Context>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Rectangle Bounds { get; }
    public ITypeDescriptorContext Context { get; }
    [NullableAttribute("1")]
public Graphics Graphics { get; }
    public object Value { get; }
    public PaintValueEventArgs(ITypeDescriptorContext context, object value, Graphics graphics, Rectangle bounds);
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public ITypeDescriptorContext get_Context();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public class System.Drawing.Design.PropertyValueUIHandler : MulticastDelegate {
    public PropertyValueUIHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList);
    public virtual IAsyncResult BeginInvoke(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Drawing.Design.PropertyValueUIItem : object {
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyValueUIItemInvokeHandler <InvokeHandler>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public Image Image { get; }
    public PropertyValueUIItemInvokeHandler InvokeHandler { get; }
    [NullableAttribute("2")]
public string ToolTip { get; }
    public PropertyValueUIItem(Image uiItemImage, PropertyValueUIItemInvokeHandler handler, string tooltip);
    [CompilerGeneratedAttribute]
public virtual Image get_Image();
    [CompilerGeneratedAttribute]
public virtual PropertyValueUIItemInvokeHandler get_InvokeHandler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_ToolTip();
    public virtual void Reset();
}
public class System.Drawing.Design.PropertyValueUIItemInvokeHandler : MulticastDelegate {
    public PropertyValueUIItemInvokeHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem);
    public virtual IAsyncResult BeginInvoke(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Drawing.Design.UITypeEditor : object {
    public bool IsDropDownResizable { get; }
    private static UITypeEditor();
    public virtual bool get_IsDropDownResizable();
    public object EditValue(IServiceProvider provider, object value);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public UITypeEditorEditStyle GetEditStyle();
    public bool GetPaintValueSupported();
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    [NullableContextAttribute("1")]
public void PaintValue(object value, Graphics canvas, Rectangle rectangle);
    [NullableContextAttribute("1")]
public virtual void PaintValue(PaintValueEventArgs e);
}
public enum System.Drawing.Design.UITypeEditorEditStyle : Enum {
    public int value__;
    public static UITypeEditorEditStyle None;
    public static UITypeEditorEditStyle Modal;
    public static UITypeEditorEditStyle DropDown;
}
internal static class System.IComparerHelpers : object {
    [NullableContextAttribute("1")]
public static bool CompareReturnIfNull(T x, T y, Nullable`1& compareReturnValue);
}
internal class System.InvariantComparer : object {
    [NullableAttribute("1")]
private CompareInfo m_compareInfo;
    [NullableAttribute("1")]
internal static InvariantComparer Default;
    private static InvariantComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(object a, object b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string DomainUpDownAccessibleObjectMessage;
    internal static string DomainUpDownAccessibleObjectDiagnosticId;
    internal static string DomainItemAccessibleObjectMessage;
    internal static string DomainItemAccessibleObjectDiagnosticId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Resources.AssemblyNamesTypeResolutionService : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AssemblyName[] _names;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<AssemblyName, Assembly> _cachedAssemblies;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, Type> _cachedTypes;
    private static string s_dotNetPath;
    private static string s_dotNetPathX86;
    internal AssemblyNamesTypeResolutionService(AssemblyName[] names);
    private static AssemblyNamesTypeResolutionService();
    public sealed virtual Assembly GetAssembly(AssemblyName name);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002")]
public sealed virtual Assembly GetAssembly(AssemblyName name, bool throwOnError);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002")]
public sealed virtual string GetPathOfAssembly(AssemblyName name);
    public sealed virtual Type GetType(string name);
    public sealed virtual Type GetType(string name, bool throwOnError);
    public sealed virtual Type GetType(string name, bool throwOnError, bool ignoreCase);
    private static bool IsDotNetAssembly(string assemblyPath);
    public sealed virtual void ReferenceAssembly(AssemblyName name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class System.Resources.DataNodeInfo : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ValueData>k__BackingField;
    public Point ReaderPosition;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Name { get; public set; }
    public string Comment { get; public set; }
    public string TypeName { get; public set; }
    public string MimeType { get; public set; }
    [NullableAttribute("1")]
public string ValueData { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ValueData();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ValueData(string value);
    [NullableContextAttribute("1")]
internal DataNodeInfo Clone();
}
[NullableContextAttribute("1")]
internal interface System.Resources.IAliasResolver {
    public abstract virtual AssemblyName ResolveAlias(string alias);
    public abstract virtual void PushAlias(string alias, AssemblyName name);
}
internal static class System.Resources.MultitargetUtil : object {
    [NullableContextAttribute("1")]
public static string GetAssemblyQualifiedName(Type type, Func`2<Type, string> typeNameConverter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Resources.ResXDataNode : object {
    [NullableAttribute("1")]
private static Char[] s_specialChars;
    private DataNodeInfo _nodeInfo;
    private string _name;
    private string _comment;
    private string _typeName;
    private string _fileRefFullPath;
    private string _fileRefType;
    private string _fileRefTextEncoding;
    private object _value;
    private ResXFileRef _fileRef;
    [ObsoleteAttribute]
private IFormatter _binaryFormatter;
    [NullableAttribute("1")]
private static ITypeResolutionService s_internalTypeResolver;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Type, string> _typeNameConverter;
    [NullableAttribute("1")]
public string Comment { get; public set; }
    [NullableAttribute("1")]
public string Name { get; public set; }
    public ResXFileRef FileRef { get; }
    private string FileRefFullPath { get; }
    private string FileRefType { get; }
    private string FileRefTextEncoding { get; }
    [NullableContextAttribute("1")]
public ResXDataNode(string name, object value);
    [NullableContextAttribute("1")]
public ResXDataNode(string name, object value, Func`2<Type, string> typeNameConverter);
    [NullableContextAttribute("1")]
public ResXDataNode(string name, ResXFileRef fileRef);
    [NullableContextAttribute("1")]
public ResXDataNode(string name, ResXFileRef fileRef, Func`2<Type, string> typeNameConverter);
    [NullableContextAttribute("1")]
internal ResXDataNode(DataNodeInfo nodeInfo, string basePath);
    private static ResXDataNode();
    [NullableContextAttribute("1")]
internal ResXDataNode DeepClone();
    [NullableContextAttribute("1")]
public string get_Comment();
    [NullableContextAttribute("1")]
public void set_Comment(string value);
    [NullableContextAttribute("1")]
public string get_Name();
    [NullableContextAttribute("1")]
public void set_Name(string value);
    public ResXFileRef get_FileRef();
    private string get_FileRefFullPath();
    private string get_FileRefType();
    private string get_FileRefTextEncoding();
    [NullableContextAttribute("1")]
private static string ToBase64WrappedString(Byte[] data);
    [NullableContextAttribute("1")]
private void FillDataNodeInfoFromObject(DataNodeInfo nodeInfo, object value);
    private object GenerateObjectFromDataNodeInfo(DataNodeInfo dataNodeInfo, ITypeResolutionService typeResolver);
    [ObsoleteAttribute]
private object GenerateObjectFromBinaryDataNodeInfo(DataNodeInfo dataNodeInfo, ITypeResolutionService typeResolver);
    [NullableContextAttribute("1")]
internal DataNodeInfo GetDataNodeInfo();
    public Point GetNodePosition();
    public string GetValueTypeName(ITypeResolutionService typeResolver);
    public string GetValueTypeName(AssemblyName[] names);
    public object GetValue(ITypeResolutionService typeResolver);
    public object GetValue(AssemblyName[] names);
    [NullableContextAttribute("1")]
private static Byte[] FromBase64WrappedString(string text);
    private static Type ResolveType(string typeName, ITypeResolutionService typeResolver);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <FillDataNodeInfoFromObject>g__SerializeWithBinaryFormatter|35_0(IFormatter binaryFormatter, DataNodeInfo nodeInfo, object value, Func`2<Type, string> typeNameConverter);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static Type <GenerateObjectFromDataNodeInfo>g__ResolveTypeName|36_0(string typeName, <>c__DisplayClass36_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <GenerateObjectFromDataNodeInfo>g__ResolveMimeType|36_1(string mimeTypeName, <>c__DisplayClass36_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Resources.ResXFileRef/Converter")]
public class System.Resources.ResXFileRef : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Encoding <TextFileEncoding>k__BackingField;
    public string FileName { get; private set; }
    public string TypeName { get; }
    [NullableAttribute("2")]
public Encoding TextFileEncoding { get; }
    public ResXFileRef(string fileName, string typeName);
    public ResXFileRef(string fileName, string typeName, Encoding textFileEncoding);
    internal ResXFileRef Clone();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Encoding get_TextFileEncoding();
    private static string PathDifference(string path1, string path2, bool compareCase);
    internal void MakeFilePathRelative(string basePath);
    public virtual string ToString();
}
internal class System.Resources.ResXNullRef : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Resources.ResXResourceReader : object {
    [NullableAttribute("2")]
private string _fileName;
    [NullableAttribute("2")]
private TextReader _reader;
    [NullableAttribute("2")]
private Stream _stream;
    [NullableAttribute("2")]
private string _fileContents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AssemblyName[] _assemblyNames;
    [NullableAttribute("2")]
private string _basePath;
    private bool _isReaderDirty;
    [NullableAttribute("2")]
private ITypeResolutionService _typeResolver;
    private IAliasResolver _aliasResolver;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _resData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> _resMetadata;
    [NullableAttribute("2")]
private string _resHeaderVersion;
    [NullableAttribute("2")]
private string _resHeaderMimeType;
    [NullableAttribute("2")]
private string _resHeaderReaderType;
    [NullableAttribute("2")]
private string _resHeaderWriterType;
    private bool _useResXDataNodes;
    [NullableAttribute("2")]
public string BasePath { get; public set; }
    public bool UseResXDataNodes { get; public set; }
    [NullableContextAttribute("2")]
private ResXResourceReader(ITypeResolutionService typeResolver);
    private ResXResourceReader(AssemblyName[] assemblyNames);
    public ResXResourceReader(string fileName);
    public ResXResourceReader(string fileName, ITypeResolutionService typeResolver);
    [NullableContextAttribute("2")]
internal ResXResourceReader(string fileName, ITypeResolutionService typeResolver, IAliasResolver aliasResolver);
    public ResXResourceReader(TextReader reader);
    public ResXResourceReader(TextReader reader, ITypeResolutionService typeResolver);
    [NullableContextAttribute("2")]
internal ResXResourceReader(TextReader reader, ITypeResolutionService typeResolver, IAliasResolver aliasResolver);
    public ResXResourceReader(Stream stream);
    public ResXResourceReader(Stream stream, ITypeResolutionService typeResolver);
    [NullableContextAttribute("2")]
internal ResXResourceReader(Stream stream, ITypeResolutionService typeResolver, IAliasResolver aliasResolver);
    public ResXResourceReader(Stream stream, AssemblyName[] assemblyNames);
    internal ResXResourceReader(Stream stream, AssemblyName[] assemblyNames, IAliasResolver aliasResolver);
    public ResXResourceReader(TextReader reader, AssemblyName[] assemblyNames);
    internal ResXResourceReader(TextReader reader, AssemblyName[] assemblyNames, IAliasResolver aliasResolver);
    public ResXResourceReader(string fileName, AssemblyName[] assemblyNames);
    internal ResXResourceReader(string fileName, AssemblyName[] assemblyNames, IAliasResolver aliasResolver);
    protected virtual override void Finalize();
    [NullableContextAttribute("2")]
public string get_BasePath();
    [NullableContextAttribute("2")]
public void set_BasePath(string value);
    public bool get_UseResXDataNodes();
    public void set_UseResXDataNodes(bool value);
    public sealed virtual void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    private static void SetupNameTable(XmlReader reader);
    [MemberNotNullAttribute("_resData")]
[MemberNotNullAttribute("_resMetadata")]
private void EnsureResData();
    public static ResXResourceReader FromFileContents(string fileContents);
    public static ResXResourceReader FromFileContents(string fileContents, ITypeResolutionService typeResolver);
    public static ResXResourceReader FromFileContents(string fileContents, AssemblyName[] assemblyNames);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public IDictionaryEnumerator GetMetadataEnumerator();
    private static Point GetPosition(XmlReader reader);
    private void ParseXml(XmlTextReader reader);
    private void ParseResHeaderNode(XmlReader reader);
    private void ParseAssemblyNode(XmlReader reader);
    private void ParseDataNode(XmlTextReader reader, bool isMetaData);
    private static string GetAliasFromTypeName(string typeName);
    private static string GetTypeFromTypeName(string typeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Resources.ResXResourceSet : ResourceSet {
    public ResXResourceSet(string fileName);
    public ResXResourceSet(Stream stream);
    public virtual Type GetDefaultReader();
    public virtual Type GetDefaultWriter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Resources.ResXResourceWriter : object {
    internal static string TypeStr;
    internal static string NameStr;
    internal static string DataStr;
    internal static string MetadataStr;
    internal static string MimeTypeStr;
    internal static string ValueStr;
    internal static string ResHeaderStr;
    internal static string VersionStr;
    internal static string ResMimeTypeStr;
    internal static string ReaderStr;
    internal static string WriterStr;
    internal static string CommentStr;
    internal static string AssemblyStr;
    internal static string AliasStr;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _cachedAliases;
    private static TraceSwitch s_resValueProviderSwitch;
    public static string BinSerializedObjectMimeType;
    public static string SoapSerializedObjectMimeType;
    public static string DefaultSerializedObjectMimeType;
    public static string ByteArraySerializedObjectMimeType;
    public static string ResMimeType;
    public static string Version;
    public static string ResourceSchema;
    [NullableAttribute("2")]
private string _fileName;
    [NullableAttribute("2")]
private Stream _stream;
    [NullableAttribute("2")]
private TextWriter _textWriter;
    [NullableAttribute("2")]
private XmlTextWriter _xmlTextWriter;
    private bool _hasBeenSaved;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Type, string> _typeNameConverter;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [NullableAttribute("2")]
public string BasePath { get; public set; }
    private XmlWriter Writer { get; }
    public ResXResourceWriter(string fileName);
    public ResXResourceWriter(string fileName, Func`2<Type, string> typeNameConverter);
    public ResXResourceWriter(Stream stream);
    public ResXResourceWriter(Stream stream, Func`2<Type, string> typeNameConverter);
    public ResXResourceWriter(TextWriter textWriter);
    public ResXResourceWriter(TextWriter textWriter, Func`2<Type, string> typeNameConverter);
    private static ResXResourceWriter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_BasePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BasePath(string value);
    protected virtual override void Finalize();
    [MemberNotNullAttribute("_xmlTextWriter")]
private void InitializeWriter();
    private XmlWriter get_Writer();
    public virtual void AddAlias(string aliasName, AssemblyName assemblyName);
    public void AddMetadata(string name, Byte[] value);
    public void AddMetadata(string name, string value);
    public void AddMetadata(string name, object value);
    public sealed virtual void AddResource(string name, Byte[] value);
    public sealed virtual void AddResource(string name, object value);
    public sealed virtual void AddResource(string name, string value);
    public void AddResource(ResXDataNode node);
    private void AddDataRow(string elementName, string name, Byte[] value);
    private void AddDataRow(string elementName, string name, object value);
    private void AddDataRow(string elementName, string name, string value);
    [NullableContextAttribute("2")]
private void AddDataRow(string elementName, string name, string value, string type, string mimeType, string comment);
    [NullableContextAttribute("2")]
private void AddAssemblyRow(string elementName, string alias, string name);
    private string GetAliasFromName(AssemblyName assemblyName);
    public sealed virtual void Close();
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static string GetTypeName(string typeName);
    private static string GetFullName(string typeName);
    private static string ToBase64WrappedString(Byte[] data);
    public sealed virtual void Generate();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Resources.ResXSerializationBinder : SerializationBinder {
    private ITypeResolutionService _typeResolver;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Type, string> _typeNameConverter;
    internal ResXSerializationBinder(ITypeResolutionService typeResolver);
    internal ResXSerializationBinder(Func`2<Type, string> typeNameConverter);
    [NullableContextAttribute("1")]
public virtual Type BindToType(string assemblyName, string typeName);
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AboutBoxDesc { get; }
    internal static string AccDGCollapse { get; }
    internal static string AccDGEdit { get; }
    internal static string AccDGExpand { get; }
    internal static string AccDGNavigate { get; }
    internal static string AccDGNavigateBack { get; }
    internal static string AccDGNewRow { get; }
    internal static string AccDGParentRow { get; }
    internal static string AccDGParentRows { get; }
    internal static string AccessibleActionCheck { get; }
    internal static string AccessibleActionClick { get; }
    internal static string AccessibleActionCollapse { get; }
    internal static string AccessibleActionExpand { get; }
    internal static string AccessibleActionPress { get; }
    internal static string AccessibleActionUncheck { get; }
    internal static string AddDifferentThreads { get; }
    internal static string ApplicationCannotChangeThreadExceptionMode { get; }
    internal static string ApplicationCannotChangeApplicationExceptionMode { get; }
    internal static string ApplyCaption { get; }
    internal static string AutoCompleteFailure { get; }
    internal static string AutoCompleteFailureListItems { get; }
    internal static string AXAddInvalidEvent { get; }
    internal static string AXDuplicateControl { get; }
    internal static string AXEditProperties { get; }
    internal static string AXFontUnitNotPoint { get; }
    internal static string AxInterfaceNotSupported { get; }
    internal static string AXInvalidArgument { get; }
    internal static string AXInvalidMethodInvoke { get; }
    internal static string AXInvalidPropertyGet { get; }
    internal static string AXInvalidPropertySet { get; }
    internal static string AXMTAThread { get; }
    internal static string AXNoConnectionPoint { get; }
    internal static string AXNoConnectionPointContainer { get; }
    internal static string AXNoEventInterface { get; }
    internal static string AXNohWnd { get; }
    internal static string AXNoLicenseToUse { get; }
    internal static string AXNoSinkAdvise { get; }
    internal static string AXNoSinkImplementation { get; }
    internal static string AXNoThreadInfo { get; }
    internal static string AXNotImplemented { get; }
    internal static string AXNoTopLevelContainerControl { get; }
    internal static string AXOcxStateLoaded { get; }
    internal static string AXProperties { get; }
    internal static string AXSingleThreaded { get; }
    internal static string AXTopLevelSource { get; }
    internal static string AXUnknownError { get; }
    internal static string AXUnknownImage { get; }
    internal static string AXWindowlessControl { get; }
    internal static string BadDataSourceForComplexBinding { get; }
    internal static string BindingManagerBadIndex { get; }
    internal static string BindingNavigatorAddNewItemPropDescr { get; }
    internal static string BindingNavigatorAddNewItemText { get; }
    internal static string BindingNavigatorBindingSourcePropDescr { get; }
    internal static string BindingNavigatorCountItemFormat { get; }
    internal static string BindingNavigatorCountItemFormatPropDescr { get; }
    internal static string BindingNavigatorCountItemPropDescr { get; }
    internal static string BindingNavigatorCountItemTip { get; }
    internal static string BindingNavigatorDeleteItemPropDescr { get; }
    internal static string BindingNavigatorDeleteItemText { get; }
    internal static string BindingNavigatorMoveFirstItemPropDescr { get; }
    internal static string BindingNavigatorMoveFirstItemText { get; }
    internal static string BindingNavigatorMoveLastItemPropDescr { get; }
    internal static string BindingNavigatorMoveLastItemText { get; }
    internal static string BindingNavigatorMoveNextItemPropDescr { get; }
    internal static string BindingNavigatorMoveNextItemText { get; }
    internal static string BindingNavigatorMovePreviousItemPropDescr { get; }
    internal static string BindingNavigatorMovePreviousItemText { get; }
    internal static string BindingNavigatorPositionAccessibleName { get; }
    internal static string BindingNavigatorPositionItemPropDescr { get; }
    internal static string BindingNavigatorPositionItemTip { get; }
    internal static string BindingNavigatorRefreshItemsEventDescr { get; }
    internal static string BindingNavigatorToolStripName { get; }
    internal static string BindingsCollectionAdd1 { get; }
    internal static string BindingsCollectionAdd2 { get; }
    internal static string BindingsCollectionBadIndex { get; }
    internal static string BindingsCollectionDup { get; }
    internal static string BindingsCollectionForeign { get; }
    internal static string BindingSourceAddingNewEventHandlerDescr { get; }
    internal static string BindingSourceAllowNewDescr { get; }
    internal static string BindingSourceBadSortString { get; }
    internal static string BindingSourceBindingCompleteEventHandlerDescr { get; }
    internal static string BindingSourceBindingListWrapperAddToReadOnlyList { get; }
    internal static string BindingSourceBindingListWrapperNeedAParameterlessConstructor { get; }
    internal static string BindingSourceBindingListWrapperNeedToSetAllowNew { get; }
    internal static string BindingSourceCurrentChangedEventHandlerDescr { get; }
    internal static string BindingSourceCurrentItemChangedEventHandlerDescr { get; }
    internal static string BindingSourceDataErrorEventHandlerDescr { get; }
    internal static string BindingSourceDataMemberChangedEventHandlerDescr { get; }
    internal static string BindingSourceDataMemberDescr { get; }
    internal static string BindingSourceDataSourceChangedEventHandlerDescr { get; }
    internal static string BindingSourceDataSourceDescr { get; }
    internal static string BindingSourceFilterDescr { get; }
    internal static string BindingSourceInstanceError { get; }
    internal static string BindingSourceItemChangedEventModeDescr { get; }
    internal static string BindingSourceItemTypeIsValueType { get; }
    internal static string BindingSourceItemTypeMismatchOnAdd { get; }
    internal static string BindingSourceListChangedEventHandlerDescr { get; }
    internal static string BindingSourcePositionChangedEventHandlerDescr { get; }
    internal static string BindingSourceRecursionDetected { get; }
    internal static string BindingSourceRemoveCurrentNoCurrentItem { get; }
    internal static string BindingSourceRemoveCurrentNotAllowed { get; }
    internal static string BindingSourceSortDescr { get; }
    internal static string BindingSourceSortStringPropertyNotInIBindingList { get; }
    internal static string BlinkRateMustBeZeroOrMore { get; }
    internal static string borderStyleDescr { get; }
    internal static string ButtonAutoEllipsisDescr { get; }
    internal static string ButtonBorderColorDescr { get; }
    internal static string ButtonBorderSizeDescr { get; }
    internal static string ButtonCheckedBackColorDescr { get; }
    internal static string ButtonDialogResultDescr { get; }
    internal static string ButtonFlatAppearance { get; }
    internal static string ButtonFlatAppearanceInvalidBorderColor { get; }
    internal static string ButtonFlatStyleDescr { get; }
    internal static string ButtonImageAlignDescr { get; }
    internal static string ButtonImageDescr { get; }
    internal static string ButtonImageIndexDescr { get; }
    internal static string ButtonImageListDescr { get; }
    internal static string ButtonMouseDownBackColorDescr { get; }
    internal static string ButtonMouseOverBackColorDescr { get; }
    internal static string ButtonTextAlignDescr { get; }
    internal static string ButtonTextImageRelationDescr { get; }
    internal static string ButtonUseMnemonicDescr { get; }
    internal static string ButtonUseVisualStyleBackColorDescr { get; }
    internal static string CancelCaption { get; }
    internal static string CannotActivateControl { get; }
    internal static string CannotChangePrintedDocument { get; }
    internal static string CantNestMessageLoops { get; }
    internal static string CantShowMBServiceWithHelp { get; }
    internal static string CantShowMBServiceWithOwner { get; }
    internal static string CantShowModalOnNonInteractive { get; }
    internal static string CatAccessibility { get; }
    internal static string CatAction { get; }
    internal static string CatAppearance { get; }
    internal static string CatAsynchronous { get; }
    internal static string CatBehavior { get; }
    internal static string CatColors { get; }
    internal static string CatData { get; }
    internal static string CatDisplay { get; }
    internal static string CatDragDrop { get; }
    internal static string CatFocus { get; }
    internal static string CatFolderBrowsing { get; }
    internal static string CatItems { get; }
    internal static string CatKey { get; }
    internal static string CatLayout { get; }
    internal static string CatMouse { get; }
    internal static string CatPrivate { get; }
    internal static string CatPropertyChanged { get; }
    internal static string CatWindowStyle { get; }
    internal static string CDallowFullOpenDescr { get; }
    internal static string CDanyColorDescr { get; }
    internal static string CDcolorDescr { get; }
    internal static string CDcustomColorsDescr { get; }
    internal static string CDfullOpenDescr { get; }
    internal static string CDshowHelpDescr { get; }
    internal static string CDsolidColorOnlyDescr { get; }
    internal static string CheckBoxAppearanceDescr { get; }
    internal static string CheckBoxAutoCheckDescr { get; }
    internal static string CheckBoxCheckAlignDescr { get; }
    internal static string CheckBoxCheckedDescr { get; }
    internal static string CheckBoxCheckStateDescr { get; }
    internal static string CheckBoxOnAppearanceChangedDescr { get; }
    internal static string CheckBoxOnCheckedChangedDescr { get; }
    internal static string CheckBoxOnCheckStateChangedDescr { get; }
    internal static string CheckBoxThreeStateDescr { get; }
    internal static string CheckedListBoxCheckedIndexCollectionIsReadOnly { get; }
    internal static string CheckedListBoxCheckedItemCollectionIsReadOnly { get; }
    internal static string CheckedListBoxCheckOnClickDescr { get; }
    internal static string CheckedListBoxInvalidSelectionMode { get; }
    internal static string CheckedListBoxItemCheckDescr { get; }
    internal static string CheckedListBoxThreeDCheckBoxesDescr { get; }
    internal static string CircularOwner { get; }
    internal static string Clipboard_InvalidPath { get; }
    internal static string ClipboardOperationFailed { get; }
    internal static string ClipboardSecurityException { get; }
    internal static string CloseCaption { get; }
    internal static string ClosingWhileCreatingHandle { get; }
    internal static string collectionChangedEventDescr { get; }
    internal static string collectionChangingEventDescr { get; }
    internal static string CollectionEmptyException { get; }
    internal static string ColumnAlignment { get; }
    internal static string ColumnCaption { get; }
    internal static string ColumnHeaderBadDisplayIndex { get; }
    internal static string ColumnHeaderCollectionInvalidArgument { get; }
    internal static string ColumnHeaderDisplayIndexDescr { get; }
    internal static string ColumnHeaderNameDescr { get; }
    internal static string ColumnWidth { get; }
    internal static string COM2BadHandlerType { get; }
    internal static string COM2NamesAndValuesNotEqual { get; }
    internal static string COM2ReadonlyProperty { get; }
    internal static string COM2UnhandledVT { get; }
    internal static string ComboBoxAutoCompleteCustomSourceDescr { get; }
    internal static string ComboBoxAutoCompleteModeDescr { get; }
    internal static string ComboBoxAutoCompleteModeOnlyNoneAllowed { get; }
    internal static string ComboBoxAutoCompleteSourceDescr { get; }
    internal static string ComboBoxAutoCompleteSourceOnlyListItemsAllowed { get; }
    internal static string ComboBoxDataSourceWithSort { get; }
    internal static string ComboBoxDrawModeDescr { get; }
    internal static string ComboBoxDropDownHeightDescr { get; }
    internal static string ComboBoxDropDownStyleChangedDescr { get; }
    internal static string ComboBoxDropDownWidthDescr { get; }
    internal static string ComboBoxDroppedDownDescr { get; }
    internal static string ComboBoxEditDefaultAccessibleName { get; }
    internal static string ComboBoxFlatStyleDescr { get; }
    internal static string ComboBoxIntegralHeightDescr { get; }
    internal static string ComboBoxItemHeightDescr { get; }
    internal static string ComboBoxItemOverflow { get; }
    internal static string ComboBoxItemsDescr { get; }
    internal static string ComboBoxMaxDropDownItemsDescr { get; }
    internal static string ComboBoxMaxLengthDescr { get; }
    internal static string ComboBoxOnDropDownClosedDescr { get; }
    internal static string ComboBoxOnDropDownDescr { get; }
    internal static string ComboBoxOnTextUpdateDescr { get; }
    internal static string ComboBoxPreferredHeightDescr { get; }
    internal static string ComboBoxSelectedIndexDescr { get; }
    internal static string ComboBoxSelectedItemDescr { get; }
    internal static string ComboBoxSelectedTextDescr { get; }
    internal static string ComboBoxSelectionLengthDescr { get; }
    internal static string ComboBoxSelectionStartDescr { get; }
    internal static string ComboBoxSortedDescr { get; }
    internal static string ComboBoxSortWithDataSource { get; }
    internal static string ComboBoxStyleDescr { get; }
    internal static string CommandIdNotAllocated { get; }
    internal static string CommonDialogHelpRequested { get; }
    internal static string ComponentEditorFormBadComponent { get; }
    internal static string ComponentEditorFormProperties { get; }
    internal static string ComponentEditorFormPropertiesNoName { get; }
    internal static string ComponentManagerProxyOutOfMemory { get; }
    internal static string Config_base_unrecognized_attribute { get; }
    internal static string ConnPointAdviseFailed { get; }
    internal static string ConnPointCouldNotCreate { get; }
    internal static string ConnPointSinkIF { get; }
    internal static string ConnPointSourceIF { get; }
    internal static string ConnPointUnhandledType { get; }
    internal static string ContainerControlActiveControlDescr { get; }
    internal static string ContainerControlAutoScaleModeDescr { get; }
    internal static string ContainerControlAutoValidate { get; }
    internal static string ContainerControlBindingContextDescr { get; }
    internal static string ContainerControlInvalidAutoScaleDimensions { get; }
    internal static string ContainerControlOnAutoValidateChangedDescr { get; }
    internal static string ContainerControlParentFormDescr { get; }
    internal static string ContextMenuStripSourceControlDescr { get; }
    internal static string ControlAccessibleObjectInvalid { get; }
    internal static string ControlAccessibilityObjectDescr { get; }
    internal static string ControlAccessibleDefaultActionDescr { get; }
    internal static string ControlAccessibleDescriptionDescr { get; }
    internal static string ControlAccessibleNameDescr { get; }
    internal static string ControlAccessibleRoleDescr { get; }
    internal static string ControlAllowDropDescr { get; }
    internal static string ControlAllowTransparencyDescr { get; }
    internal static string ControlAnchorDescr { get; }
    internal static string ControlArrayCannotAddComponentArray { get; }
    internal static string ControlArrayCannotPerformAddCopy { get; }
    internal static string ControlArrayCloningException { get; }
    internal static string ControlArrayDuplicateException { get; }
    internal static string ControlArrayValidationException { get; }
    internal static string ControlAutoRelocateDescr { get; }
    internal static string ControlAutoSizeDescr { get; }
    internal static string ControlAutoSizeModeDescr { get; }
    internal static string ControlBackColorDescr { get; }
    internal static string ControlBackgroundImageDescr { get; }
    internal static string ControlBackgroundImageLayoutDescr { get; }
    internal static string ControlBadAsyncResult { get; }
    internal static string ControlBadControl { get; }
    internal static string ControlBindingContextDescr { get; }
    internal static string ControlBindingsDescr { get; }
    internal static string ControlBottomDescr { get; }
    internal static string ControlBoundsDescr { get; }
    internal static string ControlCanFocusDescr { get; }
    internal static string ControlCannotBeNull { get; }
    internal static string ControlCanSelectDescr { get; }
    internal static string ControlCaptureDescr { get; }
    internal static string ControlCausesValidationDescr { get; }
    internal static string ControlCheckForIllegalCrossThreadCalls { get; }
    internal static string ControlClientRectangleDescr { get; }
    internal static string ControlClientSizeDescr { get; }
    internal static string ControlCompanyNameDescr { get; }
    internal static string ControlContainsFocusDescr { get; }
    internal static string ControlContextMenuDescr { get; }
    internal static string ControlContextMenuStripChangedDescr { get; }
    internal static string ControlControlsDescr { get; }
    internal static string ControlCreatedDescr { get; }
    internal static string ControlCursorDescr { get; }
    internal static string ControlDisplayRectangleDescr { get; }
    internal static string ControlDisposedDescr { get; }
    internal static string ControlDisposingDescr { get; }
    internal static string ControlDockDescr { get; }
    internal static string ControlDoubleBufferedDescr { get; }
    internal static string ControlEnabledDescr { get; }
    internal static string ControlFocusedDescr { get; }
    internal static string ControlFontDescr { get; }
    internal static string ControlForeColorDescr { get; }
    internal static string ControlHandleCreatedDescr { get; }
    internal static string ControlHandleDescr { get; }
    internal static string ControlHasChildrenDescr { get; }
    internal static string ControlHeightDescr { get; }
    internal static string ControlIMEModeDescr { get; }
    internal static string ControlInvalidLastScalingFactor { get; }
    internal static string ControlInvokeRequiredDescr { get; }
    internal static string ControlIsAccessibleDescr { get; }
    internal static string ControlIsKeyLockedNumCapsScrollLockKeysSupportedOnly { get; }
    internal static string ControlLeftDescr { get; }
    internal static string ControlLocationDescr { get; }
    internal static string ControlMarginDescr { get; }
    internal static string ControlMaximumSizeDescr { get; }
    internal static string ControlMetaFileDCWrapperSizeInvalid { get; }
    internal static string ControlMinimumSizeDescr { get; }
    internal static string ControlNotChild { get; }
    internal static string ControlOnAutoSizeChangedDescr { get; }
    internal static string ControlOnBackColorChangedDescr { get; }
    internal static string ControlOnBackgroundImageChangedDescr { get; }
    internal static string ControlOnBackgroundImageLayoutChangedDescr { get; }
    internal static string ControlOnBindingContextChangedDescr { get; }
    internal static string ControlOnCausesValidationChangedDescr { get; }
    internal static string ControlOnChangeUICuesDescr { get; }
    internal static string ControlOnClickDescr { get; }
    internal static string ControlOnClientSizeChangedDescr { get; }
    internal static string ControlOnContextMenuChangedDescr { get; }
    internal static string ControlOnControlAddedDescr { get; }
    internal static string ControlOnControlRemovedDescr { get; }
    internal static string ControlOnCreateHandleDescr { get; }
    internal static string ControlOnCursorChangedDescr { get; }
    internal static string ControlOnDestroyHandleDescr { get; }
    internal static string ControlOnDockChangedDescr { get; }
    internal static string ControlOnDoubleClickDescr { get; }
    internal static string ControlOnDragDropDescr { get; }
    internal static string ControlOnDragEnterDescr { get; }
    internal static string ControlOnDragLeaveDescr { get; }
    internal static string ControlOnDragOverDescr { get; }
    internal static string ControlOnEnabledChangedDescr { get; }
    internal static string ControlOnEnterDescr { get; }
    internal static string ControlOnFontChangedDescr { get; }
    internal static string ControlOnForeColorChangedDescr { get; }
    internal static string ControlOnGiveFeedbackDescr { get; }
    internal static string ControlOnGotFocusDescr { get; }
    internal static string ControlOnHelpDescr { get; }
    internal static string ControlOnImeModeChangedDescr { get; }
    internal static string ControlOnInvalidateDescr { get; }
    internal static string ControlOnKeyDownDescr { get; }
    internal static string ControlOnKeyPressDescr { get; }
    internal static string ControlOnKeyUpDescr { get; }
    internal static string ControlOnLayoutDescr { get; }
    internal static string ControlOnLeaveDescr { get; }
    internal static string ControlOnLocationChangedDescr { get; }
    internal static string ControlOnLostFocusDescr { get; }
    internal static string ControlOnMarginChangedDescr { get; }
    internal static string ControlOnMouseCaptureChangedDescr { get; }
    internal static string ControlOnMouseClickDescr { get; }
    internal static string ControlOnMouseDoubleClickDescr { get; }
    internal static string ControlOnMouseDownDescr { get; }
    internal static string ControlOnMouseEnterDescr { get; }
    internal static string ControlOnMouseHoverDescr { get; }
    internal static string ControlOnMouseLeaveDescr { get; }
    internal static string ControlOnMouseMoveDescr { get; }
    internal static string ControlOnMouseUpDescr { get; }
    internal static string ControlOnMouseWheelDescr { get; }
    internal static string ControlOnMoveDescr { get; }
    internal static string ControlOnPaddingChangedDescr { get; }
    internal static string ControlOnPaintDescr { get; }
    internal static string ControlOnParentChangedDescr { get; }
    internal static string ControlOnQueryAccessibilityHelpDescr { get; }
    internal static string ControlOnQueryContinueDragDescr { get; }
    internal static string ControlOnResizeBeginDescr { get; }
    internal static string ControlOnResizeDescr { get; }
    internal static string ControlOnResizeEndDescr { get; }
    internal static string ControlOnRightToLeftChangedDescr { get; }
    internal static string ControlOnRightToLeftLayoutChangedDescr { get; }
    internal static string ControlOnSizeChangedDescr { get; }
    internal static string ControlOnStyleChangedDescr { get; }
    internal static string ControlOnSystemColorsChangedDescr { get; }
    internal static string ControlOnTabIndexChangedDescr { get; }
    internal static string ControlOnTabStopChangedDescr { get; }
    internal static string ControlOnTextChangedDescr { get; }
    internal static string ControlOnValidatedDescr { get; }
    internal static string ControlOnValidatingDescr { get; }
    internal static string ControlOnVisibleChangedDescr { get; }
    internal static string ControlPaddingDescr { get; }
    internal static string ControlParentDescr { get; }
    internal static string ControlProductNameDescr { get; }
    internal static string ControlProductVersionDescr { get; }
    internal static string ControlRecreatingHandleDescr { get; }
    internal static string ControlRegionChangedDescr { get; }
    internal static string ControlRegionDescr { get; }
    internal static string ControlResizeRedrawDescr { get; }
    internal static string ControlRightDescr { get; }
    internal static string ControlRightToLeftDescr { get; }
    internal static string ControlRightToLeftLayoutDescr { get; }
    internal static string ControlSizeDescr { get; }
    internal static string ControlTabIndexDescr { get; }
    internal static string ControlTabStopDescr { get; }
    internal static string ControlTagDescr { get; }
    internal static string ControlTextDescr { get; }
    internal static string ControlTopDescr { get; }
    internal static string ControlTopLevelControlDescr { get; }
    internal static string ControlUnsupportedProperty { get; }
    internal static string ControlUserPreferenceChangedDescr { get; }
    internal static string ControlUserPreferenceChangingDescr { get; }
    internal static string ControlUseWaitCursorDescr { get; }
    internal static string ControlVisibleDescr { get; }
    internal static string ControlWidthDescr { get; }
    internal static string ControlWindowTargetDescr { get; }
    internal static string ControlWithScrollbarsPositionDescr { get; }
    internal static string ControlWithScrollbarsVirtualSizeDescr { get; }
    internal static string CurrencyManagerCantAddNew { get; }
    internal static string CursorCannotCovertToBytes { get; }
    internal static string CursorCannotCovertToString { get; }
    internal static string CursorNonSerializableHandle { get; }
    internal static string DataBindingAddNewNotSupportedOnPropertyManager { get; }
    internal static string DataBindingCycle { get; }
    internal static string DataBindingPushDataException { get; }
    internal static string DataBindingRemoveAtNotSupportedOnPropertyManager { get; }
    internal static string DataGridView_AccButtonCellDefaultAction { get; }
    internal static string DataGridView_AccCellDefaultAction { get; }
    internal static string DataGridView_AccCheckBoxCellDefaultActionCheck { get; }
    internal static string DataGridView_AccCheckBoxCellDefaultActionUncheck { get; }
    internal static string DataGridView_AccColumnHeaderCellDefaultAction { get; }
    internal static string DataGridView_AccColumnHeaderCellSelectDefaultAction { get; }
    internal static string DataGridView_AccDataGridViewCellName { get; }
    internal static string DataGridView_AccEditingControlAccName { get; }
    internal static string DataGridView_AccEditingPanelAccName { get; }
    internal static string DataGridView_AccHorizontalScrollBarAccName { get; }
    internal static string DataGridView_AccLinkCellDefaultAction { get; }
    internal static string DataGridView_AccNullValue { get; }
    internal static string DataGridView_AccRowCreateNew { get; }
    internal static string DataGridView_AccRowName { get; }
    internal static string DataGridView_AccSelectedCellsName { get; }
    internal static string DataGridView_AccSelectedRowCellsName { get; }
    internal static string DataGridView_AccTopLeftColumnHeaderCellDefaultAction { get; }
    internal static string DataGridView_AccTopLeftColumnHeaderCellName { get; }
    internal static string DataGridView_AccTopLeftColumnHeaderCellNameRTL { get; }
    internal static string DataGridView_AccTopRow { get; }
    internal static string DataGridView_AccVerticalScrollBarAccName { get; }
    internal static string DataGridView_AColumnHasNoCellTemplate { get; }
    internal static string DataGridView_AdvancedCellBorderStyleInvalid { get; }
    internal static string DataGridView_AllowUserToAddRowsDescr { get; }
    internal static string DataGridView_AllowUserToDeleteRowsDescr { get; }
    internal static string DataGridView_AllowUserToOrderColumnsDescr { get; }
    internal static string DataGridView_AllowUserToResizeColumnsDescr { get; }
    internal static string DataGridView_AllowUserToResizeRowsDescr { get; }
    internal static string DataGridView_AlternatingRowsDefaultCellStyleDescr { get; }
    internal static string DataGridView_AtLeastOneColumnIsNull { get; }
    internal static string DataGridView_AtLeastOneRowIsNull { get; }
    internal static string DataGridView_AutoSizeColumnsModeDescr { get; }
    internal static string DataGridView_AutoSizeRowsModeDescr { get; }
    internal static string DataGridView_BeginEditNotReentrant { get; }
    internal static string DataGridView_BorderStyleDescr { get; }
    internal static string DataGridView_ButtonColumnFlatStyleDescr { get; }
    internal static string DataGridView_ButtonColumnTextDescr { get; }
    internal static string DataGridView_ButtonColumnUseColumnTextForButtonValueDescr { get; }
    internal static string DataGridView_CancelRowEditDescr { get; }
    internal static string DataGridView_CannotAddAutoFillColumn { get; }
    internal static string DataGridView_CannotAddAutoSizedColumn { get; }
    internal static string DataGridView_CannotAddFrozenColumn { get; }
    internal static string DataGridView_CannotAddFrozenRow { get; }
    internal static string DataGridView_CannotAddIdenticalColumns { get; }
    internal static string DataGridView_CannotAddIdenticalRows { get; }
    internal static string DataGridView_CannotAddNonFrozenColumn { get; }
    internal static string DataGridView_CannotAddNonFrozenRow { get; }
    internal static string DataGridView_CannotAddUntypedColumn { get; }
    internal static string DataGridView_CannotAlterAutoFillColumnParameter { get; }
    internal static string DataGridView_CannotAlterDisplayIndexWithinAdjustments { get; }
    internal static string DataGridView_CannotAutoFillFrozenColumns { get; }
    internal static string DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders { get; }
    internal static string DataGridView_CannotAutoSizeInvisibleColumnHeader { get; }
    internal static string DataGridView_CannotAutoSizeRowInvisibleRowHeader { get; }
    internal static string DataGridView_CannotAutoSizeRowsInvisibleRowHeader { get; }
    internal static string DataGridView_CannotMakeAutoSizedColumnVisible { get; }
    internal static string DataGridView_CannotMoveFrozenColumn { get; }
    internal static string DataGridView_CannotMoveNonFrozenColumn { get; }
    internal static string DataGridView_CannotSetColumnCountOnDataBoundDataGridView { get; }
    internal static string DataGridView_CannotSetRowCountOnDataBoundDataGridView { get; }
    internal static string DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList { get; }
    internal static string DataGridView_CannotThrowNullException { get; }
    internal static string DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound { get; }
    internal static string DataGridView_CellBeginEditDescr { get; }
    internal static string DataGridView_CellBorderStyleChangedDescr { get; }
    internal static string DataGridView_CellBorderStyleDescr { get; }
    internal static string DataGridView_CellChangeCannotBeCommittedOrAborted { get; }
    internal static string DataGridView_CellClickDescr { get; }
    internal static string DataGridView_CellContentClick { get; }
    internal static string DataGridView_CellContentDoubleClick { get; }
    internal static string DataGridView_CellContextMenuStripChanged { get; }
    internal static string DataGridView_CellContextMenuStripNeeded { get; }
    internal static string DataGridView_CellDoesNotBelongToDataGridView { get; }
    internal static string DataGridView_CellDoesNotYetBelongToDataGridView { get; }
    internal static string DataGridView_CellDoubleClickDescr { get; }
    internal static string DataGridView_CellEndEditDescr { get; }
    internal static string DataGridView_CellEnterDescr { get; }
    internal static string DataGridView_CellErrorTextChangedDescr { get; }
    internal static string DataGridView_CellErrorTextNeededDescr { get; }
    internal static string DataGridView_CellFormattingDescr { get; }
    internal static string DataGridView_CellLeaveDescr { get; }
    internal static string DataGridView_CellMouseClickDescr { get; }
    internal static string DataGridView_CellMouseDoubleClickDescr { get; }
    internal static string DataGridView_CellMouseDownDescr { get; }
    internal static string DataGridView_CellMouseEnterDescr { get; }
    internal static string DataGridView_CellMouseLeaveDescr { get; }
    internal static string DataGridView_CellMouseMoveDescr { get; }
    internal static string DataGridView_CellMouseUpDescr { get; }
    internal static string DataGridView_CellNeedsDataGridViewForInheritedStyle { get; }
    internal static string DataGridView_CellPaintingDescr { get; }
    internal static string DataGridView_CellParsingDescr { get; }
    internal static string DataGridView_CellStateChangedDescr { get; }
    internal static string DataGridView_CellStyleChangedDescr { get; }
    internal static string DataGridView_CellStyleContentChangedDescr { get; }
    internal static string DataGridView_CellToolTipTextChangedDescr { get; }
    internal static string DataGridView_CellToolTipTextDescr { get; }
    internal static string DataGridView_CellToolTipTextNeededDescr { get; }
    internal static string DataGridView_CellValidatedDescr { get; }
    internal static string DataGridView_CellValidatingDescr { get; }
    internal static string DataGridView_CellValueChangedDescr { get; }
    internal static string DataGridView_CellValueNeededDescr { get; }
    internal static string DataGridView_CellValuePushedDescr { get; }
    internal static string DataGridView_CheckBoxColumnFalseValueDescr { get; }
    internal static string DataGridView_CheckBoxColumnFlatStyleDescr { get; }
    internal static string DataGridView_CheckBoxColumnIndeterminateValueDescr { get; }
    internal static string DataGridView_CheckBoxColumnThreeStateDescr { get; }
    internal static string DataGridView_CheckBoxColumnTrueValueDescr { get; }
    internal static string DataGridView_ClipboardCopyModeDescr { get; }
    internal static string DataGridView_ColumnAddedDescr { get; }
    internal static string DataGridView_ColumnAlreadyBelongsToDataGridView { get; }
    internal static string DataGridView_ColumnBoundToAReadOnlyFieldMustRemainReadOnly { get; }
    internal static string DataGridView_ColumnContextMenuStripChangedDescr { get; }
    internal static string DataGridView_ColumnContextMenuStripDescr { get; }
    internal static string DataGridView_ColumnDataPropertyNameChangedDescr { get; }
    internal static string DataGridView_ColumnDataPropertyNameDescr { get; }
    internal static string DataGridView_ColumnDefaultCellStyleChangedDescr { get; }
    internal static string DataGridView_ColumnDefaultCellStyleDescr { get; }
    internal static string DataGridView_ColumnDisplayIndexChangedDescr { get; }
    internal static string DataGridView_ColumnDividerDoubleClickDescr { get; }
    internal static string DataGridView_ColumnDividerWidthChangedDescr { get; }
    internal static string DataGridView_ColumnDividerWidthDescr { get; }
    internal static string DataGridView_ColumnDoesNotBelongToDataGridView { get; }
    internal static string DataGridView_ColumnFrozenDescr { get; }
    internal static string DataGridView_ColumnHeaderCellChangedDescr { get; }
    internal static string DataGridView_ColumnHeaderMouseClickDescr { get; }
    internal static string DataGridView_ColumnHeaderMouseDoubleClickDescr { get; }
    internal static string DataGridView_ColumnHeadersBorderStyleChangedDescr { get; }
    internal static string DataGridView_ColumnHeadersBorderStyleDescr { get; }
    internal static string DataGridView_ColumnHeadersCannotBeInvisible { get; }
    internal static string DataGridView_ColumnHeadersDefaultCellStyleDescr { get; }
    internal static string DataGridView_ColumnHeadersHeightDescr { get; }
    internal static string DataGridView_ColumnHeadersHeightSizeModeChangedDescr { get; }
    internal static string DataGridView_ColumnHeadersHeightSizeModeDescr { get; }
    internal static string DataGridView_ColumnHeaderTextDescr { get; }
    internal static string DataGridView_ColumnMinimumWidthChangedDescr { get; }
    internal static string DataGridView_ColumnMinimumWidthDescr { get; }
    internal static string DataGridView_ColumnNameChangedDescr { get; }
    internal static string DataGridView_ColumnNameDescr { get; }
    internal static string DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView { get; }
    internal static string DataGridView_ColumnReadOnlyDescr { get; }
    internal static string DataGridView_ColumnRemovedDescr { get; }
    internal static string DataGridView_ColumnResizableDescr { get; }
    internal static string DataGridView_ColumnSortModeDescr { get; }
    internal static string DataGridView_ColumnStateChangedDescr { get; }
    internal static string DataGridView_ColumnToolTipTextChangedDescr { get; }
    internal static string DataGridView_ColumnToolTipTextDescr { get; }
    internal static string DataGridView_ColumnVisibleDescr { get; }
    internal static string DataGridView_ColumnWidthChangedDescr { get; }
    internal static string DataGridView_ColumnWidthDescr { get; }
    internal static string DataGridView_ComboBoxColumnAutoCompleteDescr { get; }
    internal static string DataGridView_ComboBoxColumnDataSourceDescr { get; }
    internal static string DataGridView_ComboBoxColumnDisplayMemberDescr { get; }
    internal static string DataGridView_ComboBoxColumnDisplayStyleDescr { get; }
    internal static string DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr { get; }
    internal static string DataGridView_ComboBoxColumnDropDownWidthDescr { get; }
    internal static string DataGridView_ComboBoxColumnFlatStyleDescr { get; }
    internal static string DataGridView_ComboBoxColumnItemsDescr { get; }
    internal static string DataGridView_ComboBoxColumnMaxDropDownItemsDescr { get; }
    internal static string DataGridView_ComboBoxColumnSortedDescr { get; }
    internal static string DataGridView_ComboBoxColumnValueMemberDescr { get; }
    internal static string DataGridView_CommitFailedCannotCompleteOperation { get; }
    internal static string DataGridView_CurrencyManagerRowCannotBeInvisible { get; }
    internal static string DataGridView_CurrentCellCannotBeInvisible { get; }
    internal static string DataGridView_CurrentCellChangedDescr { get; }
    internal static string DataGridView_CurrentCellDirtyStateChangedDescr { get; }
    internal static string DataGridView_CustomCellBorderStyleInvalid { get; }
    internal static string DataGridView_DataBindingCompleteDescr { get; }
    internal static string DataGridView_DataErrorDescr { get; }
    internal static string DataGridView_DefaultCellStyleDescr { get; }
    internal static string DataGridView_DefaultValuesNeededDescr { get; }
    internal static string DataGridView_DisabledClipboardCopy { get; }
    internal static string DataGridView_EditingControlShowingDescr { get; }
    internal static string DataGridView_EditModeChangedDescr { get; }
    internal static string DataGridView_EditModeDescr { get; }
    internal static string DataGridView_EmptyColor { get; }
    internal static string DataGridView_EnableHeadersVisualStylesDescr { get; }
    internal static string DataGridView_ErrorMessageCaption { get; }
    internal static string DataGridView_ErrorMessageText_NoException { get; }
    internal static string DataGridView_ErrorMessageText_WithException { get; }
    internal static string DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell { get; }
    internal static string DataGridView_FirstDisplayedCellCannotBeInvisible { get; }
    internal static string DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen { get; }
    internal static string DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible { get; }
    internal static string DataGridView_FirstDisplayedScrollingRowCannotBeFrozen { get; }
    internal static string DataGridView_FirstDisplayedScrollingRowCannotBeInvisible { get; }
    internal static string DataGridView_ForbiddenOperationInEventHandler { get; }
    internal static string DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn { get; }
    internal static string DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow { get; }
    internal static string DataGridView_HeaderCellReadOnlyProperty { get; }
    internal static string DataGridView_IBindingListNeedsToSupportSorting { get; }
    internal static string DataGridView_InvalidDataGridViewElementStateCombination { get; }
    internal static string DataGridView_InvalidDataGridViewPaintPartsCombination { get; }
    internal static string DataGridView_InvalidEditingControl { get; }
    internal static string DataGridView_InvalidOperationInVirtualMode { get; }
    internal static string DataGridView_InvalidOperationOnSharedCell { get; }
    internal static string DataGridView_InvalidOperationOnSharedRow { get; }
    internal static string DataGridView_InvalidPropertyGetOnSharedCell { get; }
    internal static string DataGridView_InvalidPropertyGetOnSharedRow { get; }
    internal static string DataGridView_InvalidPropertySetOnSharedRow { get; }
    internal static string DataGridView_LinkColumnActiveLinkColorDescr { get; }
    internal static string DataGridView_LinkColumnLinkBehaviorDescr { get; }
    internal static string DataGridView_LinkColumnLinkColorDescr { get; }
    internal static string DataGridView_LinkColumnTextDescr { get; }
    internal static string DataGridView_LinkColumnTrackVisitedStateDescr { get; }
    internal static string DataGridView_LinkColumnUseColumnTextForLinkValueDescr { get; }
    internal static string DataGridView_LinkColumnVisitedLinkColorDescr { get; }
    internal static string DataGridView_MultiSelectDescr { get; }
    internal static string DataGridView_NeedAutoSizingCriteria { get; }
    internal static string DataGridView_NeedColumnAutoSizingCriteria { get; }
    internal static string DataGridView_NewRowNeededDescr { get; }
    internal static string DataGridView_NoCurrentCell { get; }
    internal static string DataGridView_NoRoomForDisplayedColumns { get; }
    internal static string DataGridView_NoRoomForDisplayedRows { get; }
    internal static string DataGridView_OperationDisabledInVirtualMode { get; }
    internal static string DataGridView_PreviousModesHasWrongLength { get; }
    internal static string DataGridView_PropertyMustBeZero { get; }
    internal static string DataGridView_ReadOnlyCollection { get; }
    internal static string DataGridView_ReadOnlyDescr { get; }
    internal static string DataGridView_RowAlreadyBelongsToDataGridView { get; }
    internal static string DataGridView_RowContextMenuStripChangedDescr { get; }
    internal static string DataGridView_RowContextMenuStripDescr { get; }
    internal static string DataGridView_RowContextMenuStripNeededDescr { get; }
    internal static string DataGridView_RowDefaultCellStyleChangedDescr { get; }
    internal static string DataGridView_RowDefaultCellStyleDescr { get; }
    internal static string DataGridView_RowDirtyStateNeededDescr { get; }
    internal static string DataGridView_RowDividerDoubleClickDescr { get; }
    internal static string DataGridView_RowDividerHeightChangedDescr { get; }
    internal static string DataGridView_RowDividerHeightDescr { get; }
    internal static string DataGridView_RowDoesNotBelongToDataGridView { get; }
    internal static string DataGridView_RowDoesNotYetBelongToDataGridView { get; }
    internal static string DataGridView_RowEnterDescr { get; }
    internal static string DataGridView_RowErrorTextChangedDescr { get; }
    internal static string DataGridView_RowErrorTextDescr { get; }
    internal static string DataGridView_RowErrorTextNeededDescr { get; }
    internal static string DataGridView_RowHeaderCellAccDefaultAction { get; }
    internal static string DataGridView_RowHeaderCellChangedDescr { get; }
    internal static string DataGridView_RowHeaderMouseClickDescr { get; }
    internal static string DataGridView_RowHeaderMouseDoubleClickDescr { get; }
    internal static string DataGridView_RowHeadersBorderStyleChangedDescr { get; }
    internal static string DataGridView_RowHeadersBorderStyleDescr { get; }
    internal static string DataGridView_RowHeadersCannotBeInvisible { get; }
    internal static string DataGridView_RowHeadersDefaultCellStyleDescr { get; }
    internal static string DataGridView_RowHeadersWidthDescr { get; }
    internal static string DataGridView_RowHeadersWidthSizeModeChangedDescr { get; }
    internal static string DataGridView_RowHeadersWidthSizeModeDescr { get; }
    internal static string DataGridView_RowHeightChangedDescr { get; }
    internal static string DataGridView_RowHeightDescr { get; }
    internal static string DataGridView_RowHeightInfoNeededDescr { get; }
    internal static string DataGridView_RowHeightInfoPushedDescr { get; }
    internal static string DataGridView_RowLeaveDescr { get; }
    internal static string DataGridView_RowMinimumHeightChangedDescr { get; }
    internal static string DataGridView_RowMinimumHeightDescr { get; }
    internal static string DataGridView_RowMustBeUnshared { get; }
    internal static string DataGridView_RowPostPaintDescr { get; }
    internal static string DataGridView_RowPrePaintDescr { get; }
    internal static string DataGridView_RowReadOnlyDescr { get; }
    internal static string DataGridView_RowResizableDescr { get; }
    internal static string DataGridView_RowsAddedDescr { get; }
    internal static string DataGridView_RowsDefaultCellStyleDescr { get; }
    internal static string DataGridView_RowsRemovedDescr { get; }
    internal static string DataGridView_RowStateChangedDescr { get; }
    internal static string DataGridView_RowTemplateDescr { get; }
    internal static string DataGridView_RowUnsharedDescr { get; }
    internal static string DataGridView_RowValidatedDescr { get; }
    internal static string DataGridView_RowValidatingDescr { get; }
    internal static string DataGridView_ScrollBarsDescr { get; }
    internal static string DataGridView_ScrollDescr { get; }
    internal static string DataGridView_SelectionChangedDescr { get; }
    internal static string DataGridView_SelectionModeAndSortModeClash { get; }
    internal static string DataGridView_SelectionModeDescr { get; }
    internal static string DataGridView_SelectionModeReset { get; }
    internal static string DataGridView_SetCurrentCellAddressCoreNotReentrant { get; }
    internal static string DataGridView_ShowCellErrorsDescr { get; }
    internal static string DataGridView_ShowCellToolTipsDescr { get; }
    internal static string DataGridView_ShowEditingIconDescr { get; }
    internal static string DataGridView_ShowRowErrorsDescr { get; }
    internal static string DataGridView_SizeTooLarge { get; }
    internal static string DataGridView_SortCompareDescr { get; }
    internal static string DataGridView_SortedDescr { get; }
    internal static string DataGridView_StandardTabDescr { get; }
    internal static string DataGridView_TextBoxColumnMaxInputLengthDescr { get; }
    internal static string DataGridView_TransparentColor { get; }
    internal static string DataGridView_UserAddedRowDescr { get; }
    internal static string DataGridView_UserDeletedRowDescr { get; }
    internal static string DataGridView_UserDeletingRowDescr { get; }
    internal static string DataGridView_WeightSumCannotExceedLongMaxValue { get; }
    internal static string DataGridView_WrongType { get; }
    internal static string DataGridViewAlternatingRowsDefaultCellStyleChangedDescr { get; }
    internal static string DataGridViewAutoSizeColumnModeChangedDescr { get; }
    internal static string DataGridViewAutoSizeColumnsModeChangedDescr { get; }
    internal static string DataGridViewAutoSizeRowsModeChangedDescr { get; }
    internal static string DataGridViewBackgroundColorChangedDescr { get; }
    internal static string DataGridViewBackgroundColorDescr { get; }
    internal static string DataGridViewBand_CannotSelect { get; }
    internal static string DataGridViewBand_MinimumHeightSmallerThanOne { get; }
    internal static string DataGridViewBand_MinimumWidthSmallerThanOne { get; }
    internal static string DataGridViewBand_NewRowCannotBeInvisible { get; }
    internal static string DataGridViewBeginInit { get; }
    internal static string DataGridViewBorderStyleChangedDescr { get; }
    internal static string DataGridViewCell_CannotSetReadOnlyState { get; }
    internal static string DataGridViewCell_CannotSetSelectedState { get; }
    internal static string DataGridViewCell_FormattedValueHasWrongType { get; }
    internal static string DataGridViewCell_FormattedValueTypeNull { get; }
    internal static string DataGridViewCell_ValueTypeNull { get; }
    internal static string DataGridViewCellAccessibleObject_OwnerAlreadySet { get; }
    internal static string DataGridViewCellAccessibleObject_OwnerNotSet { get; }
    internal static string DataGridViewCellAccessibleObject_OwnerWrongType { get; }
    internal static string DataGridViewCellCollection_AtLeastOneCellIsNull { get; }
    internal static string DataGridViewCellCollection_CannotAddIdenticalCells { get; }
    internal static string DataGridViewCellCollection_CellAlreadyBelongsToDataGridView { get; }
    internal static string DataGridViewCellCollection_CellAlreadyBelongsToDataGridViewRow { get; }
    internal static string DataGridViewCellCollection_CellNotFound { get; }
    internal static string DataGridViewCellCollection_OwningRowAlreadyBelongsToDataGridView { get; }
    internal static string DataGridViewCellStyle_TransparentColorNotAllowed { get; }
    internal static string DataGridViewCellStyleAlignmentDescr { get; }
    internal static string DataGridViewCheckBoxCell_ClipboardChecked { get; }
    internal static string DataGridViewCheckBoxCell_ClipboardFalse { get; }
    internal static string DataGridViewCheckBoxCell_ClipboardIndeterminate { get; }
    internal static string DataGridViewCheckBoxCell_ClipboardTrue { get; }
    internal static string DataGridViewCheckBoxCell_ClipboardUnchecked { get; }
    internal static string DataGridViewCheckBoxCell_InvalidValueType { get; }
    internal static string DataGridViewColumn_AutoSizeCriteriaCannotUseInvisibleHeaders { get; }
    internal static string DataGridViewColumn_AutoSizeModeDescr { get; }
    internal static string DataGridViewColumn_CellTemplateRequired { get; }
    internal static string DataGridViewColumn_DisplayIndexExceedsColumnCount { get; }
    internal static string DataGridViewColumn_DisplayIndexNegative { get; }
    internal static string DataGridViewColumn_DisplayIndexTooLarge { get; }
    internal static string DataGridViewColumn_DisplayIndexTooNegative { get; }
    internal static string DataGridViewColumn_FillWeightDescr { get; }
    internal static string DataGridViewColumn_FrozenColumnCannotAutoFill { get; }
    internal static string DataGridViewColumn_SortModeAndSelectionModeClash { get; }
    internal static string DataGridViewColumnCollection_ColumnNotFound { get; }
    internal static string DataGridViewColumnHeaderCell_SortModeAndSortGlyphDirectionClash { get; }
    internal static string DataGridViewColumnHeadersDefaultCellStyleChangedDescr { get; }
    internal static string DataGridViewColumnHeadersHeightChangedDescr { get; }
    internal static string DataGridViewColumnHeadersVisibleDescr { get; }
    internal static string DataGridViewColumnSortModeChangedDescr { get; }
    internal static string DataGridViewComboBoxCell_DropDownWidthOutOfRange { get; }
    internal static string DataGridViewComboBoxCell_FieldNotFound { get; }
    internal static string DataGridViewComboBoxCell_InvalidValue { get; }
    internal static string DataGridViewComboBoxCell_MaxDropDownItemsOutOfRange { get; }
    internal static string DataGridViewDataMemberChangedDescr { get; }
    internal static string DataGridViewDataMemberDescr { get; }
    internal static string DataGridViewDataSourceChangedDescr { get; }
    internal static string DataGridViewDataSourceDescr { get; }
    internal static string DataGridViewDefaultCellStyleChangedDescr { get; }
    internal static string DataGridViewElementPaintingEventArgs_ColumnIndexOutOfRange { get; }
    internal static string DataGridViewElementPaintingEventArgs_RowIndexOutOfRange { get; }
    internal static string DataGridViewGridColorDescr { get; }
    internal static string DataGridViewImageColumn_DescriptionDescr { get; }
    internal static string DataGridViewImageColumn_IconDescr { get; }
    internal static string DataGridViewImageColumn_ImageDescr { get; }
    internal static string DataGridViewImageColumn_ImageLayoutDescr { get; }
    internal static string DataGridViewImageColumn_PaddingDescr { get; }
    internal static string DataGridViewImageColumn_ValuesAreIconsDescr { get; }
    internal static string DataGridViewOnAllowUserToAddRowsChangedDescr { get; }
    internal static string DataGridViewOnAllowUserToDeleteRowsChangedDescr { get; }
    internal static string DataGridViewOnAllowUserToOrderColumnsChangedDescr { get; }
    internal static string DataGridViewOnAllowUserToResizeColumnsChangedDescr { get; }
    internal static string DataGridViewOnAllowUserToResizeRowsChangedDescr { get; }
    internal static string DataGridViewOnGridColorChangedDescr { get; }
    internal static string DataGridViewOnMultiSelectChangedDescr { get; }
    internal static string DataGridViewOnReadOnlyChangedDescr { get; }
    internal static string DataGridViewRowAccessibleObject_OwnerAlreadySet { get; }
    internal static string DataGridViewRowAccessibleObject_OwnerNotSet { get; }
    internal static string DataGridViewRowCollection_AddUnboundRow { get; }
    internal static string DataGridViewRowCollection_CannotAddOrInsertSelectedRow { get; }
    internal static string DataGridViewRowCollection_CannotDeleteNewRow { get; }
    internal static string DataGridViewRowCollection_CantClearRowCollectionWithWrongSource { get; }
    internal static string DataGridViewRowCollection_CantRemoveRowsWithWrongSource { get; }
    internal static string DataGridViewRowCollection_CountOutOfRange { get; }
    internal static string DataGridViewRowCollection_EnumFinished { get; }
    internal static string DataGridViewRowCollection_EnumNotStarted { get; }
    internal static string DataGridViewRowCollection_IndexDestinationOutOfRange { get; }
    internal static string DataGridViewRowCollection_IndexSourceOutOfRange { get; }
    internal static string DataGridViewRowCollection_NoColumns { get; }
    internal static string DataGridViewRowCollection_NoInsertionAfterNewRow { get; }
    internal static string DataGridViewRowCollection_NoRowToDuplicate { get; }
    internal static string DataGridViewRowCollection_RowIndexOutOfRange { get; }
    internal static string DataGridViewRowCollection_RowTemplateTooManyCells { get; }
    internal static string DataGridViewRowCollection_TooManyCells { get; }
    internal static string DataGridViewRowHeadersDefaultCellStyleChangedDescr { get; }
    internal static string DataGridViewRowHeadersVisibleDescr { get; }
    internal static string DataGridViewRowHeadersWidthChangedDescr { get; }
    internal static string DataGridViewRowsDefaultCellStyleChangedDescr { get; }
    internal static string DataGridViewTopRowAccessibleObject_OwnerAlreadySet { get; }
    internal static string DataGridViewTopRowAccessibleObject_OwnerNotSet { get; }
    internal static string DataGridViewTypeColumn_WrongCellTemplateType { get; }
    internal static string DataGridViewVirtualModeDescr { get; }
    internal static string DataGridVisibleColumnCountDescr { get; }
    internal static string DataGridVisibleRowCountDescr { get; }
    internal static string DataObjectWhitespaceEmptyFormatNotAllowed { get; }
    internal static string DataObjectDibNotSupported { get; }
    internal static string DataSourceDataMemberPropNotFound { get; }
    internal static string DataSourceLocksItems { get; }
    internal static string DataStreamWrite { get; }
    internal static string DateTimePickerCalendarFontDescr { get; }
    internal static string DateTimePickerCalendarForeColorDescr { get; }
    internal static string DateTimePickerCalendarMonthBackgroundDescr { get; }
    internal static string DateTimePickerCalendarTitleBackColorDescr { get; }
    internal static string DateTimePickerCalendarTitleForeColorDescr { get; }
    internal static string DateTimePickerCalendarTrailingForeColorDescr { get; }
    internal static string DateTimePickerCheckedDescr { get; }
    internal static string DateTimePickerCustomFormatDescr { get; }
    internal static string DateTimePickerDropDownAlignDescr { get; }
    internal static string DateTimePickerFormatDescr { get; }
    internal static string DateTimePickerMaxDate { get; }
    internal static string DateTimePickerMaxDateDescr { get; }
    internal static string DateTimePickerMinDate { get; }
    internal static string DateTimePickerMinDateDescr { get; }
    internal static string DateTimePickerOnCloseUpDescr { get; }
    internal static string DateTimePickerOnDropDownDescr { get; }
    internal static string DateTimePickerOnFormatChangedDescr { get; }
    internal static string DateTimePickerShowNoneDescr { get; }
    internal static string DateTimePickerShowUpDownDescr { get; }
    internal static string DateTimePickerValueDescr { get; }
    internal static string DebuggingExceptionOnly { get; }
    internal static string DefManifestNotFound { get; }
    internal static string DefaultDataGridViewButtonCellTollTipText { get; }
    internal static string DefaultDataGridViewComboBoxCellTollTipText { get; }
    internal static string DefaultDataGridViewImageCellToolTipText { get; }
    internal static string DefaultDataGridViewLinkCellTollTipText { get; }
    internal static string DefaultDataGridViewTextBoxCellTollTipText { get; }
    internal static string DescriptionBindingNavigator { get; }
    internal static string DescriptionBindingSource { get; }
    internal static string DescriptionButton { get; }
    internal static string DescriptionCheckBox { get; }
    internal static string DescriptionCheckedListBox { get; }
    internal static string DescriptionColorDialog { get; }
    internal static string DescriptionComboBox { get; }
    internal static string DescriptionContextMenuStrip { get; }
    internal static string DescriptionDataGridView { get; }
    internal static string DescriptionDateTimePicker { get; }
    internal static string DescriptionDomainUpDown { get; }
    internal static string DescriptionErrorProvider { get; }
    internal static string DescriptionFlowLayoutPanel { get; }
    internal static string DescriptionFolderBrowserDialog { get; }
    internal static string DescriptionFontDialog { get; }
    internal static string DescriptionGroupBox { get; }
    internal static string DescriptionHelpProvider { get; }
    internal static string DescriptionHScrollBar { get; }
    internal static string DescriptionImageList { get; }
    internal static string DescriptionLabel { get; }
    internal static string DescriptionLinkLabel { get; }
    internal static string DescriptionListBox { get; }
    internal static string DescriptionListView { get; }
    internal static string DescriptionMaskedTextBox { get; }
    internal static string DescriptionMenuStrip { get; }
    internal static string DescriptionMonthCalendar { get; }
    internal static string DescriptionNotifyIcon { get; }
    internal static string DescriptionNumericUpDown { get; }
    internal static string DescriptionOpenFileDialog { get; }
    internal static string DescriptionPageSetupDialog { get; }
    internal static string DescriptionPanel { get; }
    internal static string DescriptionPictureBox { get; }
    internal static string DescriptionPrintDialog { get; }
    internal static string DescriptionPrintPreviewControl { get; }
    internal static string DescriptionPrintPreviewDialog { get; }
    internal static string DescriptionProgressBar { get; }
    internal static string DescriptionPropertyGrid { get; }
    internal static string DescriptionRadioButton { get; }
    internal static string DescriptionRichTextBox { get; }
    internal static string DescriptionSaveFileDialog { get; }
    internal static string DescriptionSplitContainer { get; }
    internal static string DescriptionSplitter { get; }
    internal static string DescriptionStatusStrip { get; }
    internal static string DescriptionTabControl { get; }
    internal static string DescriptionTableLayoutPanel { get; }
    internal static string DescriptionTextBox { get; }
    internal static string DescriptionTimer { get; }
    internal static string DescriptionToolStrip { get; }
    internal static string DescriptionToolTip { get; }
    internal static string DescriptionTrackBar { get; }
    internal static string DescriptionTreeView { get; }
    internal static string DescriptionVScrollBar { get; }
    internal static string DescriptionWebBrowser { get; }
    internal static string DispInvokeFailed { get; }
    internal static string DomainUpDownItemsDescr { get; }
    internal static string DomainUpDownOnSelectedItemChangedDescr { get; }
    internal static string DomainUpDownSelectedIndexDescr { get; }
    internal static string DomainUpDownSelectedItemDescr { get; }
    internal static string DomainUpDownSortedDescr { get; }
    internal static string DomainUpDownWrapDescr { get; }
    internal static string DragDropRegFailed { get; }
    internal static string drawItemEventDescr { get; }
    internal static string ErrorBadInputLanguage { get; }
    internal static string ErrorCollectionFull { get; }
    internal static string ErrorCreatingHandle { get; }
    internal static string ErrorNoMarshalingThread { get; }
    internal static string ErrorPropertyPageFailed { get; }
    internal static string ErrorProviderBlinkRateDescr { get; }
    internal static string ErrorProviderBlinkStyleDescr { get; }
    internal static string ErrorProviderContainerControlDescr { get; }
    internal static string ErrorProviderDataMemberDescr { get; }
    internal static string ErrorProviderDataSourceDescr { get; }
    internal static string ErrorProviderErrorDescr { get; }
    internal static string ErrorProviderIconAlignmentDescr { get; }
    internal static string ErrorProviderIconDescr { get; }
    internal static string ErrorProviderIconPaddingDescr { get; }
    internal static string ErrorSettingWindowRegion { get; }
    internal static string ErrorTypeConverterFailed { get; }
    internal static string ExceptionCreatingCompEditorControl { get; }
    internal static string ExceptionCreatingObject { get; }
    internal static string ExDlgCancel { get; }
    internal static string ExDlgCaption { get; }
    internal static string ExDlgCaption2 { get; }
    internal static string ExDlgContinue { get; }
    internal static string ExDlgContinueErrorText { get; }
    internal static string ExDlgDetailsText { get; }
    internal static string ExDlgErrorText { get; }
    internal static string ExDlgHelp { get; }
    internal static string ExDlgMsgExceptionSection { get; }
    internal static string ExDlgMsgFooterNonSwitchable { get; }
    internal static string ExDlgMsgFooterSwitchable { get; }
    internal static string ExDlgMsgHeaderNonSwitchable { get; }
    internal static string ExDlgMsgHeaderSwitchable { get; }
    internal static string ExDlgMsgJITDebuggingSection { get; }
    internal static string ExDlgMsgLoadedAssembliesEntry { get; }
    internal static string ExDlgMsgLoadedAssembliesSection { get; }
    internal static string ExDlgMsgSectionSeparator { get; }
    internal static string ExDlgMsgSeparator { get; }
    internal static string ExDlgOk { get; }
    internal static string ExDlgQuit { get; }
    internal static string ExDlgSecurityContinueErrorText { get; }
    internal static string ExDlgSecurityErrorText { get; }
    internal static string ExDlgShowDetails { get; }
    internal static string ExDlgWarningText { get; }
    internal static string ExternalException { get; }
    internal static string FDaddExtensionDescr { get; }
    internal static string FDcheckFileExistsDescr { get; }
    internal static string FDcheckPathExistsDescr { get; }
    internal static string FDdefaultExtDescr { get; }
    internal static string FDdereferenceLinksDescr { get; }
    internal static string FDfileNameDescr { get; }
    internal static string FDFileNamesDescr { get; }
    internal static string FDfileOkDescr { get; }
    internal static string FDfilterDescr { get; }
    internal static string FDfilterIndexDescr { get; }
    internal static string FDinitialDirDescr { get; }
    internal static string FDrestoreDirectoryDescr { get; }
    internal static string FDshowHelpDescr { get; }
    internal static string FDsupportMultiDottedExtensionsDescr { get; }
    internal static string FDtitleDescr { get; }
    internal static string FDvalidateNamesDescr { get; }
    internal static string FileDialogBufferTooSmall { get; }
    internal static string FileDialogCreatePrompt { get; }
    internal static string FileDialogFileNotFound { get; }
    internal static string FileDialogInvalidFileName { get; }
    internal static string FileDialogInvalidFilter { get; }
    internal static string FileDialogInvalidFilterIndex { get; }
    internal static string FileDialogOverwritePrompt { get; }
    internal static string FileDialogSubLassFailure { get; }
    internal static string FilterRequiresIBindingListView { get; }
    internal static string FindKeyMayNotBeEmptyOrNull { get; }
    internal static string FlowPanelFlowDirectionDescr { get; }
    internal static string FlowPanelWrapContentsDescr { get; }
    internal static string FnDallowScriptChangeDescr { get; }
    internal static string FnDallowSimulationsDescr { get; }
    internal static string FnDallowVectorFontsDescr { get; }
    internal static string FnDallowVerticalFontsDescr { get; }
    internal static string FnDapplyDescr { get; }
    internal static string FnDcolorDescr { get; }
    internal static string FnDfixedPitchOnlyDescr { get; }
    internal static string FnDfontDescr { get; }
    internal static string FnDfontMustExistDescr { get; }
    internal static string FnDmaxSizeDescr { get; }
    internal static string FnDminSizeDescr { get; }
    internal static string FnDscriptsOnlyDescr { get; }
    internal static string FnDshowApplyDescr { get; }
    internal static string FnDshowColorDescr { get; }
    internal static string FnDshowEffectsDescr { get; }
    internal static string FnDshowHelpDescr { get; }
    internal static string FolderBrowserDialogDescription { get; }
    internal static string FolderBrowserDialogRootFolder { get; }
    internal static string FolderBrowserDialogSelectedPath { get; }
    internal static string FolderBrowserDialogShowNewFolderButton { get; }
    internal static string FormAcceptButtonDescr { get; }
    internal static string FormActiveMDIChildDescr { get; }
    internal static string FormatControlFormatDescr { get; }
    internal static string Formatter_CantConvert { get; }
    internal static string Formatter_CantConvertNull { get; }
    internal static string FormAutoScaleDescr { get; }
    internal static string FormAutoScrollDescr { get; }
    internal static string FormAutoScrollMarginDescr { get; }
    internal static string FormAutoScrollMinSizeDescr { get; }
    internal static string FormAutoScrollPositionDescr { get; }
    internal static string FormBorderStyleDescr { get; }
    internal static string FormCancelButtonDescr { get; }
    internal static string FormControlBoxDescr { get; }
    internal static string FormDesktopBoundsDescr { get; }
    internal static string FormDesktopLocationDescr { get; }
    internal static string FormDialogResultDescr { get; }
    internal static string FormHelpButtonClickedDescr { get; }
    internal static string FormHelpButtonDescr { get; }
    internal static string FormIconDescr { get; }
    internal static string FormIsMDIChildDescr { get; }
    internal static string FormIsMDIContainerDescr { get; }
    internal static string FormKeyPreviewDescr { get; }
    internal static string FormMaximizeBoxDescr { get; }
    internal static string FormMaximumSizeDescr { get; }
    internal static string FormMDIChildrenDescr { get; }
    internal static string FormMdiChildrenMinimizedAnchorBottomDescr { get; }
    internal static string FormMDIParentAndChild { get; }
    internal static string FormMDIParentCannotAdd { get; }
    internal static string FormMDIParentDescr { get; }
    internal static string FormMenuStripDescr { get; }
    internal static string FormMinimizeBoxDescr { get; }
    internal static string FormMinimumSizeDescr { get; }
    internal static string FormModalDescr { get; }
    internal static string FormOnActivateDescr { get; }
    internal static string FormOnClosedDescr { get; }
    internal static string FormOnClosingDescr { get; }
    internal static string FormOnDeactivateDescr { get; }
    internal static string FormOnFormClosedDescr { get; }
    internal static string FormOnFormClosingDescr { get; }
    internal static string FormOnInputLangChangeDescr { get; }
    internal static string FormOnInputLangChangeRequestDescr { get; }
    internal static string FormOnLoadDescr { get; }
    internal static string FormOnMaximizedBoundsChangedDescr { get; }
    internal static string FormOnMaximumSizeChangedDescr { get; }
    internal static string FormOnMDIChildActivateDescr { get; }
    internal static string FormOnMenuCompleteDescr { get; }
    internal static string FormOnMenuStartDescr { get; }
    internal static string FormOnMinimumSizeChangedDescr { get; }
    internal static string FormOnResizeBeginDescr { get; }
    internal static string FormOnResizeEndDescr { get; }
    internal static string FormOnShownDescr { get; }
    internal static string FormOpacityDescr { get; }
    internal static string FormOwnedFormsDescr { get; }
    internal static string FormOwnerDescr { get; }
    internal static string FormShowIconDescr { get; }
    internal static string FormShowInTaskbarDescr { get; }
    internal static string FormSizeGripStyleDescr { get; }
    internal static string FormStartPositionDescr { get; }
    internal static string FormTopMostDescr { get; }
    internal static string FormTransparencyKeyDescr { get; }
    internal static string FormWindowStateDescr { get; }
    internal static string GridItemNotExpandable { get; }
    internal static string GridPanelCellPositionDescr { get; }
    internal static string GridPanelColumnDescr { get; }
    internal static string GridPanelColumnsDescr { get; }
    internal static string GridPanelColumnStylesDescr { get; }
    internal static string GridPanelGetAlignmentDescr { get; }
    internal static string GridPanelGetBoxStretchDescr { get; }
    internal static string GridPanelGetColumnSpanDescr { get; }
    internal static string GridPanelGetRowSpanDescr { get; }
    internal static string GridPanelRowDescr { get; }
    internal static string GridPanelRowsDescr { get; }
    internal static string GridPanelRowStylesDescr { get; }
    internal static string HandleAlreadyExists { get; }
    internal static string HelpCaption { get; }
    internal static string HelpInvalidURL { get; }
    internal static string HelpProviderHelpKeywordDescr { get; }
    internal static string HelpProviderHelpNamespaceDescr { get; }
    internal static string HelpProviderHelpStringDescr { get; }
    internal static string HelpProviderNavigatorDescr { get; }
    internal static string HelpProviderShowHelpDescr { get; }
    internal static string HtmlDocumentInvalidDomain { get; }
    internal static string HtmlElementAttributeNotSupported { get; }
    internal static string HtmlElementMethodNotSupported { get; }
    internal static string HtmlElementPropertyNotSupported { get; }
    internal static string ICurrencyManagerProviderDescr { get; }
    internal static string IllegalCrossThreadCall { get; }
    internal static string IllegalCrossThreadCallWithStack { get; }
    internal static string IllegalState { get; }
    internal static string ImageListAddFailed { get; }
    internal static string ImageListAllowMirroringDescr { get; }
    internal static string ImageListBadImage { get; }
    internal static string ImageListBitmap { get; }
    internal static string ImageListColorDepthDescr { get; }
    internal static string ImageListCreateFailed { get; }
    internal static string ImageListDuplicateFailed { get; }
    internal static string ImageListEntryType { get; }
    internal static string ImageListGetFailed { get; }
    internal static string ImageListHandleCreatedDescr { get; }
    internal static string ImageListHandleDescr { get; }
    internal static string ImageListImagesDescr { get; }
    internal static string ImageListImageStreamDescr { get; }
    internal static string ImageListImageTooShort { get; }
    internal static string ImageListOnRecreateHandleDescr { get; }
    internal static string ImageListRemoveFailed { get; }
    internal static string ImageListReplaceFailed { get; }
    internal static string ImageListRightToLeftInvalidArgument { get; }
    internal static string ImageListSizeDescr { get; }
    internal static string ImageListStreamerLoadFailed { get; }
    internal static string ImageListStreamerSaveFailed { get; }
    internal static string ImageListStripBadWidth { get; }
    internal static string ImageListTransparentColorDescr { get; }
    internal static string IndexOutOfRange { get; }
    internal static string Invalid_boolean_attribute { get; }
    internal static string InvalidArgument { get; }
    internal static string InvalidBoundArgument { get; }
    internal static string InvalidCrossThreadControlCall { get; }
    internal static string InvalidExBoundArgument { get; }
    internal static string InvalidFileFormat { get; }
    internal static string InvalidFileType { get; }
    internal static string InvalidGDIHandle { get; }
    internal static string InvalidHighBoundArgument { get; }
    internal static string InvalidHighBoundArgumentEx { get; }
    internal static string InvalidLowBoundArgument { get; }
    internal static string InvalidLowBoundArgumentEx { get; }
    internal static string InvalidNullArgument { get; }
    internal static string InvalidNullItemInCollection { get; }
    internal static string InvalidPictureFormat { get; }
    internal static string InvalidPictureType { get; }
    internal static string InvalidResXBasePathOperation { get; }
    internal static string InvalidResXFile { get; }
    internal static string InvalidResXFileReaderWriterTypes { get; }
    internal static string InvalidResXNoType { get; }
    internal static string InvalidResXResourceNoName { get; }
    internal static string InvalidSendKeysKeyword { get; }
    internal static string InvalidSendKeysRepeat { get; }
    internal static string InvalidSendKeysString { get; }
    internal static string InvalidSingleMonthSize { get; }
    internal static string InvalidWndClsName { get; }
    internal static string InvocationException { get; }
    internal static string IsMirroredDescr { get; }
    internal static string ISupportInitializeDescr { get; }
    internal static string KeysConverterInvalidKeyCombination { get; }
    internal static string LabelAutoEllipsisDescr { get; }
    internal static string LabelAutoSizeDescr { get; }
    internal static string LabelBackgroundImageDescr { get; }
    internal static string LabelBorderDescr { get; }
    internal static string LabelOnTextAlignChangedDescr { get; }
    internal static string LabelPreferredHeightDescr { get; }
    internal static string LabelPreferredWidthDescr { get; }
    internal static string LabelTextAlignDescr { get; }
    internal static string LabelUseMnemonicDescr { get; }
    internal static string LayoutEngineUnsupportedType { get; }
    internal static string LinkLabelActiveLinkColorDescr { get; }
    internal static string LinkLabelAreaLength { get; }
    internal static string LinkLabelAreaStart { get; }
    internal static string LinkLabelBadLink { get; }
    internal static string LinkLabelDisabledLinkColorDescr { get; }
    internal static string LinkLabelLinkAreaDescr { get; }
    internal static string LinkLabelLinkBehaviorDescr { get; }
    internal static string LinkLabelLinkClickedDescr { get; }
    internal static string LinkLabelLinkColorDescr { get; }
    internal static string LinkLabelLinkVisitedDescr { get; }
    internal static string LinkLabelOverlap { get; }
    internal static string LinkLabelVisitedLinkColorDescr { get; }
    internal static string ListBindingBindField { get; }
    internal static string ListBindingBindProperty { get; }
    internal static string ListBindingBindPropertyReadOnly { get; }
    internal static string ListBindingFormatFailed { get; }
    internal static string ListBoxBorderDescr { get; }
    internal static string ListBoxCantInsertIntoIntegerCollection { get; }
    internal static string ListBoxColumnWidthDescr { get; }
    internal static string ListBoxCustomTabOffsetsDescr { get; }
    internal static string ListBoxDrawModeDescr { get; }
    internal static string ListBoxHorizontalExtentDescr { get; }
    internal static string ListBoxHorizontalScrollbarDescr { get; }
    internal static string ListBoxIntegralHeightDescr { get; }
    internal static string ListBoxInvalidSelectionMode { get; }
    internal static string ListBoxItemHeightDescr { get; }
    internal static string ListBoxItemOverflow { get; }
    internal static string ListBoxItemsDescr { get; }
    internal static string ListBoxMultiColumnDescr { get; }
    internal static string ListBoxPreferredHeightDescr { get; }
    internal static string ListBoxScrollIsVisibleDescr { get; }
    internal static string ListBoxSelectedIndexCollectionIsReadOnly { get; }
    internal static string ListBoxSelectedIndexDescr { get; }
    internal static string ListBoxSelectedIndicesDescr { get; }
    internal static string ListBoxSelectedItemDescr { get; }
    internal static string ListBoxSelectedItemsDescr { get; }
    internal static string ListBoxSelectedObjectCollectionIsReadOnly { get; }
    internal static string ListBoxSelectionModeDescr { get; }
    internal static string ListBoxSortedDescr { get; }
    internal static string ListBoxTopIndexDescr { get; }
    internal static string ListBoxUseTabStopsDescr { get; }
    internal static string ListBoxVarHeightMultiCol { get; }
    internal static string ListControlDataSourceDescr { get; }
    internal static string ListControlDisplayMemberDescr { get; }
    internal static string ListControlEmptyValueMemberInSettingSelectedValue { get; }
    internal static string ListControlFormatDescr { get; }
    internal static string ListControlFormatInfoChangedDescr { get; }
    internal static string ListControlFormatStringChangedDescr { get; }
    internal static string ListControlFormatStringDescr { get; }
    internal static string ListControlFormattingEnabledChangedDescr { get; }
    internal static string ListControlFormattingEnabledDescr { get; }
    internal static string ListControlOnDataSourceChangedDescr { get; }
    internal static string ListControlOnDisplayMemberChangedDescr { get; }
    internal static string ListControlOnSelectedValueChangedDescr { get; }
    internal static string ListControlOnValueMemberChangedDescr { get; }
    internal static string ListControlSelectedValueDescr { get; }
    internal static string ListControlValueMemberDescr { get; }
    internal static string ListControlWrongDisplayMember { get; }
    internal static string ListControlWrongValueMember { get; }
    internal static string ListEnumCurrentOutOfRange { get; }
    internal static string ListEnumVersionMismatch { get; }
    internal static string ListManagerBadPosition { get; }
    internal static string ListManagerEmptyList { get; }
    internal static string ListManagerNoValue { get; }
    internal static string ListManagerSetDataSource { get; }
    internal static string ListViewActivationDescr { get; }
    internal static string ListViewActivationMustBeOnWhenHotTrackingIsOn { get; }
    internal static string ListViewAddColumnFailed { get; }
    internal static string ListViewAddItemFailed { get; }
    internal static string ListViewAfterLabelEditDescr { get; }
    internal static string ListViewAlignmentDescr { get; }
    internal static string ListViewAllowColumnReorderDescr { get; }
    internal static string ListViewAutoArrangeDescr { get; }
    internal static string ListViewBackgroundImageTiledDescr { get; }
    internal static string ListViewBadListViewSubItem { get; }
    internal static string ListViewBeforeLabelEditDescr { get; }
    internal static string ListViewBeginEditFailed { get; }
    internal static string ListViewCacheVirtualItemsEventDescr { get; }
    internal static string ListViewCantAccessCheckedItemsCollectionWhenInVirtualMode { get; }
    internal static string ListViewCantAccessSelectedItemsCollectionWhenInVirtualMode { get; }
    internal static string ListViewCantAddItemsToAVirtualListView { get; }
    internal static string ListViewCantGetEnumeratorInVirtualMode { get; }
    internal static string ListViewCantModifyTheItemCollInAVirtualListView { get; }
    internal static string ListViewCantRemoveItemsFromAVirtualListView { get; }
    internal static string ListViewCantSetViewToTileViewInVirtualMode { get; }
    internal static string ListViewCantSetVirtualModeWhenInTileView { get; }
    internal static string ListViewCheckBoxesDescr { get; }
    internal static string ListViewCheckBoxesNotSupportedInTileView { get; }
    internal static string ListViewColumnClickDescr { get; }
    internal static string ListViewColumnInfoSet { get; }
    internal static string ListViewColumnReorderedDscr { get; }
    internal static string ListViewColumnsDescr { get; }
    internal static string ListViewColumnWidthChangedDscr { get; }
    internal static string ListViewColumnWidthChangingDscr { get; }
    internal static string ListViewDrawColumnHeaderEventDescr { get; }
    internal static string ListViewDrawItemEventDescr { get; }
    internal static string ListViewDrawSubItemEventDescr { get; }
    internal static string ListViewFindNearestItemWorksOnlyInIconView { get; }
    internal static string ListViewFocusedItemDescr { get; }
    internal static string ListViewFullRowSelectDescr { get; }
    internal static string ListViewGetTopItem { get; }
    internal static string ListViewGridLinesDescr { get; }
    internal static string ListViewGroupDefaultGroup { get; }
    internal static string ListViewGroupDefaultHeader { get; }
    internal static string ListViewGroupNameDescr { get; }
    internal static string ListViewGroupsDescr { get; }
    internal static string ListViewGroupCollectionBadListViewGroup { get; }
    internal static string ListViewHeaderStyleDescr { get; }
    internal static string ListViewHideSelectionDescr { get; }
    internal static string ListViewHotTrackingDescr { get; }
    internal static string ListViewHoverMustBeOnWhenHotTrackingIsOn { get; }
    internal static string ListViewHoverSelectDescr { get; }
    internal static string ListViewIndentCountCantBeNegative { get; }
    internal static string ListViewInsertionMarkDescr { get; }
    internal static string ListViewItemCheckedDescr { get; }
    internal static string ListViewItemClickDescr { get; }
    internal static string ListViewItemDragDescr { get; }
    internal static string ListViewItemImageIndexDescr { get; }
    internal static string ListViewItemImageKeyDescr { get; }
    internal static string ListViewItemIndentCountDescr { get; }
    internal static string ListViewItemMouseHoverDescr { get; }
    internal static string ListViewItemsDescr { get; }
    internal static string ListViewItemSelectionChangedDescr { get; }
    internal static string ListViewItemSorterDescr { get; }
    internal static string ListViewItemStateImageIndexDescr { get; }
    internal static string ListViewItemStateImageKeyDescr { get; }
    internal static string ListViewItemSubItemsDescr { get; }
    internal static string ListViewLabelEditDescr { get; }
    internal static string ListViewLabelWrapDescr { get; }
    internal static string ListViewLargeImageListDescr { get; }
    internal static string ListViewMultiSelectDescr { get; }
    internal static string ListViewOwnerDrawDescr { get; }
    internal static string ListViewRetrieveVirtualItemEventDescr { get; }
    internal static string ListViewScrollableDescr { get; }
    internal static string ListViewSearchForVirtualItemDescr { get; }
    internal static string ListViewSelectedIndexChangedDescr { get; }
    internal static string ListViewSelectedItemsDescr { get; }
    internal static string ListViewSetTopItem { get; }
    internal static string ListViewShowGroupsDescr { get; }
    internal static string ListViewShowItemToolTipsDescr { get; }
    internal static string ListViewSmallImageListDescr { get; }
    internal static string ListViewSortingDescr { get; }
    internal static string ListViewSortNotAllowedInVirtualListView { get; }
    internal static string ListViewStartIndexCannotBeLargerThanEndIndex { get; }
    internal static string ListViewStateImageListDescr { get; }
    internal static string ListViewSubItemCollectionInvalidArgument { get; }
    internal static string ListViewTileSizeDescr { get; }
    internal static string ListViewTileSizeMustBePositive { get; }
    internal static string ListViewTileViewDoesNotSupportCheckBoxes { get; }
    internal static string ListViewTopItemDescr { get; }
    internal static string ListViewViewDescr { get; }
    internal static string ListViewVirtualItemRequired { get; }
    internal static string ListViewVirtualItemsSelectionRangeChangedDescr { get; }
    internal static string ListViewVirtualItemStateChangedDescr { get; }
    internal static string ListViewVirtualListSizeDescr { get; }
    internal static string ListViewVirtualListSizeInvalidArgument { get; }
    internal static string ListViewVirtualListViewRequiresNoCheckedItems { get; }
    internal static string ListViewVirtualListViewRequiresNoItems { get; }
    internal static string ListViewVirtualListViewRequiresNoSelectedItems { get; }
    internal static string ListViewVirtualModeCantAccessSubItem { get; }
    internal static string ListViewVirtualModeDescr { get; }
    internal static string LoadDLLError { get; }
    internal static string LoadTextError { get; }
    internal static string MaskedTextBoxAllowPromptAsInputDescr { get; }
    internal static string MaskedTextBoxAsciiOnlyDescr { get; }
    internal static string MaskedTextBoxBeepOnErrorDescr { get; }
    internal static string MaskedTextBoxCultureDescr { get; }
    internal static string MaskedTextBoxCutCopyMaskFormat { get; }
    internal static string MaskedTextBoxHidePromptOnLeaveDescr { get; }
    internal static string MaskedTextBoxIncompleteMsg { get; }
    internal static string MaskedTextBoxInsertKeyModeDescr { get; }
    internal static string MaskedTextBoxInvalidCharError { get; }
    internal static string MaskedTextBoxIsOverwriteModeChangedDescr { get; }
    internal static string MaskedTextBoxMaskChangedDescr { get; }
    internal static string MaskedTextBoxMaskDescr { get; }
    internal static string MaskedTextBoxMaskInputRejectedDescr { get; }
    internal static string MaskedTextBoxMaskInvalidChar { get; }
    internal static string MaskedTextBoxPasswordAndPromptCharError { get; }
    internal static string MaskedTextBoxPasswordCharDescr { get; }
    internal static string MaskedTextBoxPromptCharDescr { get; }
    internal static string MaskedTextBoxRejectInputOnFirstFailureDescr { get; }
    internal static string MaskedTextBoxResetOnPrompt { get; }
    internal static string MaskedTextBoxResetOnSpace { get; }
    internal static string MaskedTextBoxSkipLiterals { get; }
    internal static string MaskedTextBoxTextMaskFormat { get; }
    internal static string MaskedTextBoxTypeValidationCompletedDescr { get; }
    internal static string MaskedTextBoxTypeValidationSucceeded { get; }
    internal static string MaskedTextBoxUseSystemPasswordCharDescr { get; }
    internal static string MaskedTextBoxValidatedValueChangedDescr { get; }
    internal static string MaskedTextBoxValidatingTypeDescr { get; }
    internal static string MDIChildAddToNonMDIParent { get; }
    internal static string MDIContainerMustBeTopLevel { get; }
    internal static string MDIMenuMoreWindows { get; }
    internal static string MDIParentNotContainer { get; }
    internal static string measureItemEventDescr { get; }
    internal static string MenuItemShortCutDescr { get; }
    internal static string MenuItemShowShortCutDescr { get; }
    internal static string MenuStripMdiWindowListItem { get; }
    internal static string MenuStripMenuActivateDescr { get; }
    internal static string MenuStripMenuDeactivateDescr { get; }
    internal static string MonthCalendarAnnuallyBoldedDatesDescr { get; }
    internal static string MonthCalendarBodyAccessibleName { get; }
    internal static string MonthCalendarDimensionsDescr { get; }
    internal static string MonthCalendarFirstDayOfWeekDescr { get; }
    internal static string MonthCalendarForeColorDescr { get; }
    internal static string MonthCalendarInvalidDimensions { get; }
    internal static string MonthCalendarMaxDateDescr { get; }
    internal static string MonthCalendarMaxSelCount { get; }
    internal static string MonthCalendarMaxSelectionCountDescr { get; }
    internal static string MonthCalendarMinDateDescr { get; }
    internal static string MonthCalendarMonthBackColorDescr { get; }
    internal static string MonthCalendarMonthlyBoldedDatesDescr { get; }
    internal static string MonthCalendarNextButtonAccessibleName { get; }
    internal static string MonthCalendarOnDateChangedDescr { get; }
    internal static string MonthCalendarOnDateSelectedDescr { get; }
    internal static string MonthCalendarPreviousButtonAccessibleName { get; }
    internal static string MonthCalendarRange { get; }
    internal static string MonthCalendarScrollChangeDescr { get; }
    internal static string MonthCalendarSelectionEndDescr { get; }
    internal static string MonthCalendarSelectionRangeDescr { get; }
    internal static string MonthCalendarSelectionStartDescr { get; }
    internal static string MonthCalendarShowTodayCircleDescr { get; }
    internal static string MonthCalendarShowTodayDescr { get; }
    internal static string MonthCalendarShowWeekNumbersDescr { get; }
    internal static string MonthCalendarSingleMonthSizeDescr { get; }
    internal static string MonthCalendarTitleBackColorDescr { get; }
    internal static string MonthCalendarTitleForeColorDescr { get; }
    internal static string MonthCalendarTodayButtonAccessibleName { get; }
    internal static string MonthCalendarTodayDateDescr { get; }
    internal static string MonthCalendarTodayDateSetDescr { get; }
    internal static string MonthCalendarTrailingForeColorDescr { get; }
    internal static string NoAllowNewOnReadOnlyList { get; }
    internal static string NoAllowRemoveOnReadOnlyList { get; }
    internal static string NoDefaultConstructor { get; }
    internal static string NoMoreColumns { get; }
    internal static string NonTopLevelCantHaveOwner { get; }
    internal static string NotAvailable { get; }
    internal static string NotifyIconBalloonTipIconDescr { get; }
    internal static string NotifyIconBalloonTipTextDescr { get; }
    internal static string NotifyIconBalloonTipTitleDescr { get; }
    internal static string NotifyIconEmptyOrNullTipText { get; }
    internal static string NotifyIconIconDescr { get; }
    internal static string NotifyIconMenuDescr { get; }
    internal static string NotifyIconMouseClickDescr { get; }
    internal static string NotifyIconMouseDoubleClickDescr { get; }
    internal static string NotifyIconOnBalloonTipClickedDescr { get; }
    internal static string NotifyIconOnBalloonTipClosedDescr { get; }
    internal static string NotifyIconOnBalloonTipShownDescr { get; }
    internal static string NotifyIconTextDescr { get; }
    internal static string NotifyIconVisDescr { get; }
    internal static string NotSerializableType { get; }
    internal static string NotSupported { get; }
    internal static string NumericUpDownAccelerationCollectionAtLeastOneEntryIsNull { get; }
    internal static string NumericUpDownAccelerationCompareException { get; }
    internal static string NumericUpDownDecimalPlacesDescr { get; }
    internal static string NumericUpDownHexadecimalDescr { get; }
    internal static string NumericUpDownIncrementDescr { get; }
    internal static string NumericUpDownLessThanZeroError { get; }
    internal static string NumericUpDownMaximumDescr { get; }
    internal static string NumericUpDownMinimumDescr { get; }
    internal static string NumericUpDownOnValueChangedDescr { get; }
    internal static string NumericUpDownThousandsSeparatorDescr { get; }
    internal static string NumericUpDownValueDescr { get; }
    internal static string ObjectHasParent { get; }
    internal static string OFDcheckFileExistsDescr { get; }
    internal static string OFDmultiSelectDescr { get; }
    internal static string OFDreadOnlyCheckedDescr { get; }
    internal static string OFDshowReadOnlyDescr { get; }
    internal static string OKCaption { get; }
    internal static string OnlyOneControl { get; }
    internal static string OperationRequiresIBindingList { get; }
    internal static string OperationRequiresIBindingListView { get; }
    internal static string OutOfMemory { get; }
    internal static string OwnsSelfOrOwner { get; }
    internal static string PaddingAllDescr { get; }
    internal static string PaddingBottomDescr { get; }
    internal static string PaddingLeftDescr { get; }
    internal static string PaddingRightDescr { get; }
    internal static string PaddingTopDescr { get; }
    internal static string PanelBorderStyleDescr { get; }
    internal static string PropertyGridHelpPaneTitle { get; }
    internal static string PBRSErrorInvalidPropertyValue { get; }
    internal static string PBRSErrorTitle { get; }
    internal static string PBRSFormatExceptionMessage { get; }
    internal static string PBRSToolTipAlphabetic { get; }
    internal static string PBRSToolTipCategorized { get; }
    internal static string PBRSToolTipEvents { get; }
    internal static string PBRSToolTipProperties { get; }
    internal static string PBRSToolTipPropertyPages { get; }
    internal static string PDallowCurrentPageDescr { get; }
    internal static string PDallowPagesDescr { get; }
    internal static string PDallowPrintToFileDescr { get; }
    internal static string PDallowSelectionDescr { get; }
    internal static string PDcantShowWithoutPrinter { get; }
    internal static string PDdocumentDescr { get; }
    internal static string PDpageOutOfRange { get; }
    internal static string PDprinterSettingsDescr { get; }
    internal static string PDprintToFileDescr { get; }
    internal static string PDshowHelpDescr { get; }
    internal static string PDshowNetworkDescr { get; }
    internal static string PDuseEXDialog { get; }
    internal static string PictureBoxBorderStyleDescr { get; }
    internal static string PictureBoxCancelAsyncDescr { get; }
    internal static string PictureBoxErrorImageDescr { get; }
    internal static string PictureBoxImageDescr { get; }
    internal static string PictureBoxImageLocationDescr { get; }
    internal static string PictureBoxInitialImageDescr { get; }
    internal static string PictureBoxLoad0Descr { get; }
    internal static string PictureBoxLoad1Descr { get; }
    internal static string PictureBoxLoadAsync0Descr { get; }
    internal static string PictureBoxLoadAsync1Descr { get; }
    internal static string PictureBoxLoadCompletedDescr { get; }
    internal static string PictureBoxLoadProgressChangedDescr { get; }
    internal static string PictureBoxLoadProgressDescr { get; }
    internal static string PictureBoxNoImageLocation { get; }
    internal static string PictureBoxOnSizeModeChangedDescr { get; }
    internal static string PictureBoxSizeModeDescr { get; }
    internal static string PictureBoxWaitOnLoadDescr { get; }
    internal static string PictureBoxRemoteLocationNotSupported { get; }
    internal static string PopupControlBadParentArgument { get; }
    internal static string PreviewKeyDownDescr { get; }
    internal static string PrintControllerWithStatusDialog_Cancel { get; }
    internal static string PrintControllerWithStatusDialog_Canceling { get; }
    internal static string PrintControllerWithStatusDialog_DialogTitlePreview { get; }
    internal static string PrintControllerWithStatusDialog_DialogTitlePrint { get; }
    internal static string PrintControllerWithStatusDialog_NowPrinting { get; }
    internal static string PrintPreviewAntiAliasDescr { get; }
    internal static string PrintPreviewAutoZoomDescr { get; }
    internal static string PrintPreviewColumnsDescr { get; }
    internal static string PrintPreviewControlZoomNegative { get; }
    internal static string PrintPreviewDialog_PrintPreview { get; }
    internal static string PrintPreviewDocumentDescr { get; }
    internal static string PrintPreviewExceptionPrinting { get; }
    internal static string PrintPreviewNoPages { get; }
    internal static string PrintPreviewPrintPreviewControlDescr { get; }
    internal static string PrintPreviewRowsDescr { get; }
    internal static string PrintPreviewStartPageDescr { get; }
    internal static string PrintPreviewZoomDescr { get; }
    internal static string ProfessionalColorsButtonCheckedGradientBeginDescr { get; }
    internal static string ProfessionalColorsButtonCheckedGradientEndDescr { get; }
    internal static string ProfessionalColorsButtonCheckedGradientMiddleDescr { get; }
    internal static string ProfessionalColorsButtonCheckedHighlightBorderDescr { get; }
    internal static string ProfessionalColorsButtonCheckedHighlightDescr { get; }
    internal static string ProfessionalColorsButtonPressedBorderDescr { get; }
    internal static string ProfessionalColorsButtonPressedGradientBeginDescr { get; }
    internal static string ProfessionalColorsButtonPressedGradientEndDescr { get; }
    internal static string ProfessionalColorsButtonPressedGradientMiddleDescr { get; }
    internal static string ProfessionalColorsButtonPressedHighlightBorderDescr { get; }
    internal static string ProfessionalColorsButtonPressedHighlightDescr { get; }
    internal static string ProfessionalColorsButtonSelectedBorderDescr { get; }
    internal static string ProfessionalColorsButtonSelectedGradientBeginDescr { get; }
    internal static string ProfessionalColorsButtonSelectedGradientEndDescr { get; }
    internal static string ProfessionalColorsButtonSelectedGradientMiddleDescr { get; }
    internal static string ProfessionalColorsButtonSelectedHighlightBorderDescr { get; }
    internal static string ProfessionalColorsButtonSelectedHighlightDescr { get; }
    internal static string ProfessionalColorsCheckBackgroundDescr { get; }
    internal static string ProfessionalColorsCheckPressedBackgroundDescr { get; }
    internal static string ProfessionalColorsCheckSelectedBackgroundDescr { get; }
    internal static string ProfessionalColorsGripDarkDescr { get; }
    internal static string ProfessionalColorsGripLightDescr { get; }
    internal static string ProfessionalColorsImageMarginGradientBeginDescr { get; }
    internal static string ProfessionalColorsImageMarginGradientEndDescr { get; }
    internal static string ProfessionalColorsImageMarginGradientMiddleDescr { get; }
    internal static string ProfessionalColorsImageMarginRevealedGradientBeginDescr { get; }
    internal static string ProfessionalColorsImageMarginRevealedGradientEndDescr { get; }
    internal static string ProfessionalColorsImageMarginRevealedGradientMiddleDescr { get; }
    internal static string ProfessionalColorsMenuBorderDescr { get; }
    internal static string ProfessionalColorsMenuItemBorderDescr { get; }
    internal static string ProfessionalColorsMenuItemPressedGradientBeginDescr { get; }
    internal static string ProfessionalColorsMenuItemPressedGradientEndDescr { get; }
    internal static string ProfessionalColorsMenuItemPressedGradientMiddleDescr { get; }
    internal static string ProfessionalColorsMenuItemSelectedDescr { get; }
    internal static string ProfessionalColorsMenuItemSelectedGradientBeginDescr { get; }
    internal static string ProfessionalColorsMenuItemSelectedGradientEndDescr { get; }
    internal static string ProfessionalColorsMenuStripGradientBeginDescr { get; }
    internal static string ProfessionalColorsMenuStripGradientEndDescr { get; }
    internal static string ProfessionalColorsOverflowButtonGradientBeginDescr { get; }
    internal static string ProfessionalColorsOverflowButtonGradientEndDescr { get; }
    internal static string ProfessionalColorsOverflowButtonGradientMiddleDescr { get; }
    internal static string ProfessionalColorsRaftingContainerGradientBeginDescr { get; }
    internal static string ProfessionalColorsRaftingContainerGradientEndDescr { get; }
    internal static string ProfessionalColorsSeparatorDarkDescr { get; }
    internal static string ProfessionalColorsSeparatorLightDescr { get; }
    internal static string ProfessionalColorsStatusStripGradientBeginDescr { get; }
    internal static string ProfessionalColorsStatusStripGradientEndDescr { get; }
    internal static string ProfessionalColorsToolStripBorderDescr { get; }
    internal static string ProfessionalColorsToolStripContentPanelGradientBeginDescr { get; }
    internal static string ProfessionalColorsToolStripContentPanelGradientEndDescr { get; }
    internal static string ProfessionalColorsToolStripDropDownBackgroundDescr { get; }
    internal static string ProfessionalColorsToolStripGradientBeginDescr { get; }
    internal static string ProfessionalColorsToolStripGradientEndDescr { get; }
    internal static string ProfessionalColorsToolStripGradientMiddleDescr { get; }
    internal static string ProfessionalColorsToolStripPanelGradientBeginDescr { get; }
    internal static string ProfessionalColorsToolStripPanelGradientEndDescr { get; }
    internal static string ProgressBarDefaultAccessibleName { get; }
    internal static string ProgressBarIncrementMarqueeException { get; }
    internal static string ProgressBarMarqueeAnimationSpeed { get; }
    internal static string ProgressBarMaximumDescr { get; }
    internal static string ProgressBarMinimumDescr { get; }
    internal static string ProgressBarPerformStepMarqueeException { get; }
    internal static string ProgressBarStepDescr { get; }
    internal static string ProgressBarStyleDescr { get; }
    internal static string ProgressBarValueDescr { get; }
    internal static string ProgressBarValueMarqueeException { get; }
    internal static string PropertyCategoryAppearance { get; }
    internal static string PropertyCategoryBehavior { get; }
    internal static string PropertyCategoryData { get; }
    internal static string PropertyCategoryDDE { get; }
    internal static string PropertyCategoryFont { get; }
    internal static string PropertyCategoryList { get; }
    internal static string PropertyCategoryMisc { get; }
    internal static string PropertyCategoryPosition { get; }
    internal static string PropertyCategoryScale { get; }
    internal static string PropertyCategoryText { get; }
    internal static string PropertyGridBadTabIndex { get; }
    internal static string PropertyGridCanShowCommandsDesc { get; }
    internal static string PropertyGridCanShowVisualStyleGlyphsDesc { get; }
    internal static string PropertyGridCategoryForeColorDesc { get; }
    internal static string PropertyGridCategorySplitterColorDesc { get; }
    internal static string PropertyGridCommandsActiveLinkColorDesc { get; }
    internal static string PropertyGridCommandsBackColorDesc { get; }
    internal static string PropertyGridCommandsBorderColorDesc { get; }
    internal static string PropertyGridCommandsDisabledLinkColorDesc { get; }
    internal static string PropertyGridCommandsForeColorDesc { get; }
    internal static string PropertyGridCommandsLinkColorDesc { get; }
    internal static string PropertyGridCommandsVisibleIfAvailable { get; }
    internal static string PropertyGridDefaultAccessibleName { get; }
    internal static string PropertyGridDefaultAccessibleNameTemplate { get; }
    internal static string PropertyGridHelpPaneAccessibleNameTemplate { get; }
    internal static string PropertyGridDisabledItemForeColorDesc { get; }
    internal static string PropertyGridDropDownButtonAccessibleName { get; }
    internal static string PropertyGridExceptionInfo { get; }
    internal static string PropertyGridExceptionWhilePaintingLabel { get; }
    internal static string PropertyGridHelpBackColorDesc { get; }
    internal static string PropertyGridHelpBorderColorDesc { get; }
    internal static string PropertyGridHelpForeColorDesc { get; }
    internal static string PropertyGridHelpVisibleDesc { get; }
    internal static string PropertyGridSelectedItemWithFocusBackColorDesc { get; }
    internal static string PropertyGridSelectedItemWithFocusForeColorDesc { get; }
    internal static string PropertyGridInternalNoProp { get; }
    internal static string PropertyGridInvalidGridEntry { get; }
    internal static string PropertyGridLargeButtonsDesc { get; }
    internal static string PropertyGridLineColorDesc { get; }
    internal static string PropertyGridNoBitmap { get; }
    internal static string PropertyGridPropertySortChangedDescr { get; }
    internal static string PropertyGridPropertySortDesc { get; }
    internal static string PropertyGridPropertyTabchangedDescr { get; }
    internal static string PropertyGridPropertyTabCollectionReadOnly { get; }
    internal static string PropertyGridPropertyValueChangedDescr { get; }
    internal static string PropertyGridRemoveStaticTabs { get; }
    internal static string PropertyGridResetValue { get; }
    internal static string PropertyGridSelectedGridItemChangedDescr { get; }
    internal static string PropertyGridSelectedObjectDesc { get; }
    internal static string PropertyGridSelectedObjectsChangedDescr { get; }
    internal static string PropertyGridSet { get; }
    internal static string PropertyGridSetNull { get; }
    internal static string PropertyGridSetValue { get; }
    internal static string PropertyGridTabName { get; }
    internal static string PropertyGridTabScope { get; }
    internal static string PropertyGridTitle { get; }
    internal static string PropertyGridToolbarAccessibleName { get; }
    internal static string PropertyGridToolbarVisibleDesc { get; }
    internal static string PropertyGridViewBackColorDesc { get; }
    internal static string PropertyGridViewBorderColorDesc { get; }
    internal static string PropertyGridViewEditorCreatedInvalidObject { get; }
    internal static string PropertyGridViewForeColorDesc { get; }
    internal static string PropertyManagerPropDoesNotExist { get; }
    internal static string PropertyValueInvalidEntry { get; }
    internal static string PSDallowMarginsDescr { get; }
    internal static string PSDallowOrientationDescr { get; }
    internal static string PSDallowPaperDescr { get; }
    internal static string PSDallowPrinterDescr { get; }
    internal static string PSDcantShowWithoutPage { get; }
    internal static string PSDenableMetricDescr { get; }
    internal static string PSDminMarginsDescr { get; }
    internal static string PSDpageSettingsDescr { get; }
    internal static string PSDprinterSettingsDescr { get; }
    internal static string PSDshowHelpDescr { get; }
    internal static string PSDshowNetworkDescr { get; }
    internal static string RadioButtonAppearanceDescr { get; }
    internal static string RadioButtonAutoCheckDescr { get; }
    internal static string RadioButtonCheckAlignDescr { get; }
    internal static string RadioButtonCheckedDescr { get; }
    internal static string RadioButtonOnAppearanceChangedDescr { get; }
    internal static string RadioButtonOnCheckedChangedDescr { get; }
    internal static string RadioButtonOnStartPageChangedDescr { get; }
    internal static string RadioButtonOnTextAlignChangedDescr { get; }
    internal static string ReadonlyControlsCollection { get; }
    internal static string RegisterCFFailed { get; }
    internal static string RelatedListManagerChild { get; }
    internal static string RestartNotSupported { get; }
    internal static string ResXResourceWriterSaved { get; }
    internal static string RichControlLresult { get; }
    internal static string RichTextBox_IDCut { get; }
    internal static string RichTextBox_IDDelete { get; }
    internal static string RichTextBox_IDDragDrop { get; }
    internal static string RichTextBox_IDPaste { get; }
    internal static string RichTextBox_IDTyping { get; }
    internal static string RichTextBox_IDUnknown { get; }
    internal static string RichTextBoxAutoWordSelection { get; }
    internal static string RichTextBoxBulletIndent { get; }
    internal static string RichTextBoxCanRedoDescr { get; }
    internal static string RichTextBoxContentsResized { get; }
    internal static string RichTextBoxDetectURLs { get; }
    internal static string RichTextBoxEnableAutoDragDrop { get; }
    internal static string RichTextBoxHScroll { get; }
    internal static string RichTextBoxIMEChange { get; }
    internal static string RichTextBoxLinkClick { get; }
    internal static string RichTextBoxProtected { get; }
    internal static string RichTextBoxRedoActionNameDescr { get; }
    internal static string RichTextBoxRightMargin { get; }
    internal static string RichTextBoxRTF { get; }
    internal static string RichTextBoxScrollBars { get; }
    internal static string RichTextBoxSelAlignment { get; }
    internal static string RichTextBoxSelBackColor { get; }
    internal static string RichTextBoxSelBullet { get; }
    internal static string RichTextBoxSelChange { get; }
    internal static string RichTextBoxSelCharOffset { get; }
    internal static string RichTextBoxSelColor { get; }
    internal static string RichTextBoxSelFont { get; }
    internal static string RichTextBoxSelHangingIndent { get; }
    internal static string RichTextBoxSelIndent { get; }
    internal static string RichTextBoxSelMargin { get; }
    internal static string RichTextBoxSelProtected { get; }
    internal static string RichTextBoxSelRightIndent { get; }
    internal static string RichTextBoxSelRTF { get; }
    internal static string RichTextBoxSelTabs { get; }
    internal static string RichTextBoxSelText { get; }
    internal static string RichTextBoxSelTypeDescr { get; }
    internal static string RichTextBoxUndoActionNameDescr { get; }
    internal static string RichTextBoxVScroll { get; }
    internal static string RichTextBoxZoomFactor { get; }
    internal static string RichTextFindEndInvalid { get; }
    internal static string RTL { get; }
    internal static string SafeTopLevelCaptionFormat { get; }
    internal static string SaveFileDialogCreatePrompt { get; }
    internal static string SaveFileDialogOverWritePrompt { get; }
    internal static string SaveTextError { get; }
    internal static string ScrollableControlHorizontalScrollDescr { get; }
    internal static string ScrollableControlActiveControlParentNull { get; }
    internal static string ScrollableControlRaiseMouseEnterLeaveEventsForScrollBarsDescr { get; }
    internal static string ScrollableControlVerticalScrollDescr { get; }
    internal static string ScrollBarEnableDescr { get; }
    internal static string ScrollBarLargeChangeDescr { get; }
    internal static string ScrollBarMaximumDescr { get; }
    internal static string ScrollBarMinimumDescr { get; }
    internal static string ScrollBarOnScrollDescr { get; }
    internal static string ScrollBarSmallChangeDescr { get; }
    internal static string ScrollBarValueDescr { get; }
    internal static string ScrollBarVisibleDescr { get; }
    internal static string selectedIndexChangedEventDescr { get; }
    internal static string selectedIndexDescr { get; }
    internal static string SelectedNotEqualActual { get; }
    internal static string selectionChangeCommittedEventDescr { get; }
    internal static string SelTabCountRange { get; }
    internal static string SendKeysGroupDelimError { get; }
    internal static string SendKeysHookFailed { get; }
    internal static string SendKeysKeywordDelimError { get; }
    internal static string SendKeysNestingError { get; }
    internal static string SendKeysNoMessageLoop { get; }
    internal static string SerializationException { get; }
    internal static string ShowDialogOnDisabled { get; }
    internal static string ShowDialogOnModal { get; }
    internal static string ShowDialogOnNonTopLevel { get; }
    internal static string ShowDialogOnVisible { get; }
    internal static string SortRequiresIBindingList { get; }
    internal static string SplitContainerFixedPanelDescr { get; }
    internal static string SplitContainerIsSplitterFixedDescr { get; }
    internal static string SplitContainerOrientationDescr { get; }
    internal static string SplitContainerPanel1CollapsedDescr { get; }
    internal static string SplitContainerPanel1Descr { get; }
    internal static string SplitContainerPanel1MinSizeDescr { get; }
    internal static string SplitContainerPanel2CollapsedDescr { get; }
    internal static string SplitContainerPanel2Descr { get; }
    internal static string SplitContainerPanel2MinSizeDescr { get; }
    internal static string SplitContainerPanelHeight { get; }
    internal static string SplitContainerPanelWidth { get; }
    internal static string SplitContainerSplitterDistanceDescr { get; }
    internal static string SplitContainerSplitterIncrementDescr { get; }
    internal static string SplitContainerSplitterRectangleDescr { get; }
    internal static string SplitContainerSplitterWidthDescr { get; }
    internal static string SplitterBorderStyleDescr { get; }
    internal static string SplitterDistanceNotAllowed { get; }
    internal static string SplitterInvalidDockEnum { get; }
    internal static string SplitterMinExtraDescr { get; }
    internal static string SplitterMinSizeDescr { get; }
    internal static string SplitterSplitPositionDescr { get; }
    internal static string SplitterSplitterMovedDescr { get; }
    internal static string SplitterSplitterMovingDescr { get; }
    internal static string StatusStripPanelBorderSidesDescr { get; }
    internal static string StatusStripPanelBorderStyleDescr { get; }
    internal static string StatusStripSizingGripDescr { get; }
    internal static string SystemInformationFeatureNotSupported { get; }
    internal static string TabBaseAlignmentDescr { get; }
    internal static string TabBaseAppearanceDescr { get; }
    internal static string TabBaseDrawModeDescr { get; }
    internal static string TabBaseHotTrackDescr { get; }
    internal static string TabBaseImageListDescr { get; }
    internal static string TabBaseItemSizeDescr { get; }
    internal static string TabBaseMultilineDescr { get; }
    internal static string TabBasePaddingDescr { get; }
    internal static string TabBaseRowCountDescr { get; }
    internal static string TabBaseShowToolTipsDescr { get; }
    internal static string TabBaseSizeModeDescr { get; }
    internal static string TabBaseTabCountDescr { get; }
    internal static string TabControlBadControl { get; }
    internal static string TabControlDeselectedEventDescr { get; }
    internal static string TabControlDeselectingEventDescr { get; }
    internal static string TabControlInvalidTabPageType { get; }
    internal static string TabControlSelectedEventDescr { get; }
    internal static string TabControlSelectedTabDescr { get; }
    internal static string TabControlSelectingEventDescr { get; }
    internal static string TabControlTabPageNotOnTabControl { get; }
    internal static string TabControlTabPageOnTabPage { get; }
    internal static string TabControlTabsDescr { get; }
    internal static string TabItemImageIndexDescr { get; }
    internal static string TabItemToolTipTextDescr { get; }
    internal static string TabItemUseVisualStyleBackColorDescr { get; }
    internal static string TableBeginMustBeCalledPrior { get; }
    internal static string TableBeginNotCalled { get; }
    internal static string TableLayoutPanelCellBorderStyleDescr { get; }
    internal static string TableLayoutPanelFullDesc { get; }
    internal static string TableLayoutPanelGrowStyleDescr { get; }
    internal static string TableLayoutPanelOnPaintCellDescr { get; }
    internal static string TableLayoutPanelSpanDesc { get; }
    internal static string TableLayoutSettingsConverterNoName { get; }
    internal static string TableLayoutSettingSettingsIsNotSupported { get; }
    internal static string TableLayoutSettingsGetCellPositionDescr { get; }
    internal static string TableLayoutSettingsSetCellPositionDescr { get; }
    internal static string TablePrintLayoutFromDifferentDocument { get; }
    internal static string TextBoxAcceptsReturnDescr { get; }
    internal static string TextBoxAcceptsTabDescr { get; }
    internal static string TextBoxAutoCompleteCustomSourceDescr { get; }
    internal static string TextBoxAutoCompleteModeDescr { get; }
    internal static string TextBoxAutoCompleteSourceDescr { get; }
    internal static string TextBoxAutoCompleteSourceNoItems { get; }
    internal static string TextBoxAutoSizeDescr { get; }
    internal static string TextBoxBaseOnAcceptsTabChangedDescr { get; }
    internal static string TextBoxBaseOnAutoSizeChangedDescr { get; }
    internal static string TextBoxBaseOnBorderStyleChangedDescr { get; }
    internal static string TextBoxBaseOnHideSelectionChangedDescr { get; }
    internal static string TextBoxBaseOnModifiedChangedDescr { get; }
    internal static string TextBoxBaseOnMultilineChangedDescr { get; }
    internal static string TextBoxBaseOnReadOnlyChangedDescr { get; }
    internal static string TextBoxBorderDescr { get; }
    internal static string TextBoxCanUndoDescr { get; }
    internal static string TextBoxCharacterCasingDescr { get; }
    internal static string TextBoxHideSelectionDescr { get; }
    internal static string TextBoxLinesDescr { get; }
    internal static string TextBoxMaxLengthDescr { get; }
    internal static string TextBoxModifiedDescr { get; }
    internal static string TextBoxMultilineDescr { get; }
    internal static string TextBoxPasswordCharDescr { get; }
    internal static string TextBoxPreferredHeightDescr { get; }
    internal static string TextBoxReadOnlyDescr { get; }
    internal static string TextBoxScrollBarsDescr { get; }
    internal static string TextBoxSelectedTextDescr { get; }
    internal static string TextBoxSelectionLengthDescr { get; }
    internal static string TextBoxSelectionStartDescr { get; }
    internal static string TextBoxShortcutsEnabledDescr { get; }
    internal static string TextBoxTextAlignDescr { get; }
    internal static string TextBoxUseSystemPasswordCharDescr { get; }
    internal static string TextBoxWordWrapDescr { get; }
    internal static string TextParseFailedFormat { get; }
    internal static string ThreadMustBeSTA { get; }
    internal static string ThreadNoLongerValid { get; }
    internal static string ThreadNotPumpingMessages { get; }
    internal static string TimerEnabledDescr { get; }
    internal static string TimerIntervalDescr { get; }
    internal static string TimerInvalidInterval { get; }
    internal static string TimerTimerDescr { get; }
    internal static string ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue { get; }
    internal static string ToolStripAllowItemReorderDescr { get; }
    internal static string ToolStripAllowMergeDescr { get; }
    internal static string ToolStripBackColorDescr { get; }
    internal static string ToolStripButtonCheckedDescr { get; }
    internal static string ToolStripButtonCheckOnClickDescr { get; }
    internal static string ToolStripCanOnlyPositionItsOwnItems { get; }
    internal static string ToolStripCanOverflowDescr { get; }
    internal static string ToolStripCollectionMustInsertAndRemove { get; }
    internal static string ToolStripContainerBottomToolStripPanelDescr { get; }
    internal static string ToolStripContainerBottomToolStripPanelVisibleDescr { get; }
    internal static string ToolStripContainerContentPanelDescr { get; }
    internal static string ToolStripContainerDesc { get; }
    internal static string ToolStripContainerLeftToolStripPanelDescr { get; }
    internal static string ToolStripContainerLeftToolStripPanelVisibleDescr { get; }
    internal static string ToolStripContainerRightToolStripPanelDescr { get; }
    internal static string ToolStripContainerRightToolStripPanelVisibleDescr { get; }
    internal static string ToolStripContainerTopToolStripPanelDescr { get; }
    internal static string ToolStripContainerTopToolStripPanelVisibleDescr { get; }
    internal static string ToolStripContainerUseContentPanel { get; }
    internal static string ToolStripContentPanelOnLoadDescr { get; }
    internal static string ToolStripDefaultDropDownDirectionDescr { get; }
    internal static string ToolStripDoesntSupportAutoScroll { get; }
    internal static string ToolStripDropDownAutoCloseDescr { get; }
    internal static string ToolStripDropDownButtonShowDropDownArrowDescr { get; }
    internal static string ToolStripDropDownClosedDecr { get; }
    internal static string ToolStripDropDownClosingDecr { get; }
    internal static string ToolStripDropDownDescr { get; }
    internal static string ToolStripDropDownItemDropDownDirectionDescr { get; }
    internal static string ToolStripDropDownItemsDescr { get; }
    internal static string ToolStripDropDownMenuShowCheckMarginDescr { get; }
    internal static string ToolStripDropDownMenuShowImageMarginDescr { get; }
    internal static string ToolStripDropDownOpenedDescr { get; }
    internal static string ToolStripDropDownOpeningDescr { get; }
    internal static string ToolStripDropDownPreferredWidthDescr { get; }
    internal static string ToolStripGripAccessibleName { get; }
    internal static string ToolStripDropDownsCantBeRafted { get; }
    internal static string ToolStripGripDisplayStyleDescr { get; }
    internal static string ToolStripGripMargin { get; }
    internal static string ToolStripGripStyleDescr { get; }
    internal static string ToolStripImageListDescr { get; }
    internal static string ToolStripImageScalingSizeDescr { get; }
    internal static string ToolStripItemAccessibilityObjectDescr { get; }
    internal static string ToolStripItemAccessibleDefaultActionDescr { get; }
    internal static string ToolStripItemAccessibleDescriptionDescr { get; }
    internal static string ToolStripItemAccessibleNameDescr { get; }
    internal static string ToolStripItemAccessibleRoleDescr { get; }
    internal static string ToolStripItemAddedDescr { get; }
    internal static string ToolStripItemAlignment { get; }
    internal static string ToolStripItemAlignmentDescr { get; }
    internal static string ToolStripItemAllowDropDescr { get; }
    internal static string ToolStripItemAutoSizeDescr { get; }
    internal static string ToolStripItemAutoToolTipDescr { get; }
    internal static string ToolStripItemAvailableDescr { get; }
    internal static string ToolStripItemBackColorDescr { get; }
    internal static string ToolStripItemCircularReference { get; }
    internal static string ToolStripItemCollectionIsReadOnly { get; }
    internal static string ToolStripItemDisplayStyleDescr { get; }
    internal static string ToolStripItemDoubleClickedEnabledDescr { get; }
    internal static string ToolStripItemDrawModeDescr { get; }
    internal static string ToolStripItemEnabledChangedDescr { get; }
    internal static string ToolStripItemEnabledDescr { get; }
    internal static string ToolStripItemFontDescr { get; }
    internal static string ToolStripItemForeColorDescr { get; }
    internal static string ToolStripItemImageAlignDescr { get; }
    internal static string ToolStripItemImageDescr { get; }
    internal static string ToolStripItemImageIndexDescr { get; }
    internal static string ToolStripItemImageKeyDescr { get; }
    internal static string ToolStripItemImageList { get; }
    internal static string ToolStripItemImageScalingDescr { get; }
    internal static string ToolStripItemImageTransparentColorDescr { get; }
    internal static string ToolStripItemMarginDescr { get; }
    internal static string ToolStripItemOnAvailableChangedDescr { get; }
    internal static string ToolStripItemOnBackColorChangedDescr { get; }
    internal static string ToolStripItemOnClickDescr { get; }
    internal static string ToolStripItemOnDragDropDescr { get; }
    internal static string ToolStripItemOnDragEnterDescr { get; }
    internal static string ToolStripItemOnDragLeaveDescr { get; }
    internal static string ToolStripItemOnDragOverDescr { get; }
    internal static string ToolStripItemOnForeColorChangedDescr { get; }
    internal static string ToolStripItemOnGiveFeedbackDescr { get; }
    internal static string ToolStripItemOnGotFocusDescr { get; }
    internal static string ToolStripItemOnLocationChangedDescr { get; }
    internal static string ToolStripItemOnLostFocusDescr { get; }
    internal static string ToolStripItemOnMouseDownDescr { get; }
    internal static string ToolStripItemOnMouseEnterDescr { get; }
    internal static string ToolStripItemOnMouseHoverDescr { get; }
    internal static string ToolStripItemOnMouseLeaveDescr { get; }
    internal static string ToolStripItemOnMouseMoveDescr { get; }
    internal static string ToolStripItemOnMouseUpDescr { get; }
    internal static string ToolStripItemOnPaintDescr { get; }
    internal static string ToolStripItemOnQueryAccessibilityHelpDescr { get; }
    internal static string ToolStripItemOnQueryContinueDragDescr { get; }
    internal static string ToolStripItemOnRightToLeftChangedDescr { get; }
    internal static string ToolStripItemOnTextChangedDescr { get; }
    internal static string ToolStripItemOnVisibleChangedDescr { get; }
    internal static string ToolStripItemOverflow { get; }
    internal static string ToolStripItemOverflowDescr { get; }
    internal static string ToolStripItemOwnerChangedDescr { get; }
    internal static string ToolStripItemPaddingDescr { get; }
    internal static string ToolStripItemRemovedDescr { get; }
    internal static string ToolStripItemRightToLeftAutoMirrorImageDescr { get; }
    internal static string ToolStripItemRightToLeftDescr { get; }
    internal static string ToolStripItemsDescr { get; }
    internal static string ToolStripItemSize { get; }
    internal static string ToolStripItemSizeDescr { get; }
    internal static string ToolStripItemTagDescr { get; }
    internal static string ToolStripItemTextAlignDescr { get; }
    internal static string ToolStripItemTextDescr { get; }
    internal static string ToolStripItemTextImageRelationDescr { get; }
    internal static string ToolStripItemToolTipTextDescr { get; }
    internal static string ToolStripItemVisibleDescr { get; }
    internal static string ToolStripLabelActiveLinkColorDescr { get; }
    internal static string ToolStripLabelIsLinkDescr { get; }
    internal static string DataGridViewCheckBoxCellCheckedStateDescription { get; }
    internal static string DataGridViewCheckBoxCellUncheckedStateDescription { get; }
    internal static string DataGridViewCheckBoxCellIndeterminateStateDescription { get; }
    internal static string ToolStripLabelLinkBehaviorDescr { get; }
    internal static string ToolStripLabelLinkColorDescr { get; }
    internal static string ToolStripLabelLinkVisitedDescr { get; }
    internal static string ToolStripLabelVisitedLinkColorDescr { get; }
    internal static string ToolStripLayoutCompleteDescr { get; }
    internal static string ToolStripLayoutStyle { get; }
    internal static string ToolStripLayoutStyleChangedDescr { get; }
    internal static string ToolStripMenuItemShortcutKeyDisplayStringDescr { get; }
    internal static string ToolStripMergeActionDescr { get; }
    internal static string ToolStripMergeImpossibleIdentical { get; }
    internal static string ToolStripMergeIndexDescr { get; }
    internal static string ToolStripMustSupplyItsOwnComboBox { get; }
    internal static string ToolStripMustSupplyItsOwnTextBox { get; }
    internal static string ToolStripOnBeginDrag { get; }
    internal static string ToolStripOnEndDrag { get; }
    internal static string ToolStripOptions { get; }
    internal static string ToolStripPaintGripDescr { get; }
    internal static string ToolStripPanelRowsDescr { get; }
    internal static string ToolStripPanelRowControlCollectionIncorrectIndexLength { get; }
    internal static string ToolStripRendererChanged { get; }
    internal static string ToolStripRenderModeDescr { get; }
    internal static string ToolStripRenderModeUseRendererPropertyInstead { get; }
    internal static string ToolStripSaveSettingsDescr { get; }
    internal static string ToolStripScrollButtonDownAccessibleName { get; }
    internal static string ToolStripScrollButtonUpAccessibleName { get; }
    internal static string ToolStripSettingsKeyDescr { get; }
    internal static string ToolStripShowDropDownInvalidOperation { get; }
    internal static string ToolStripShowItemToolTipsDescr { get; }
    internal static string ToolStripSplitButtonDropDownButtonWidthDescr { get; }
    internal static string ToolStripSplitButtonOnButtonClickDescr { get; }
    internal static string ToolStripSplitButtonOnButtonDoubleClickDescr { get; }
    internal static string ToolStripSplitButtonOnDefaultItemChangedDescr { get; }
    internal static string ToolStripSplitButtonSplitterWidthDescr { get; }
    internal static string ToolStripSplitStackLayoutContainerMustBeAToolStrip { get; }
    internal static string ToolStripStatusLabelBorderSidesDescr { get; }
    internal static string ToolStripStatusLabelBorderStyleDescr { get; }
    internal static string ToolStripStatusLabelSpringDescr { get; }
    internal static string ToolStripStretchDescr { get; }
    internal static string ToolStripTextBoxTextBoxTextAlignChangedDescr { get; }
    internal static string ToolStripTextDirectionDescr { get; }
    internal static string ToolTipActiveDescr { get; }
    internal static string ToolTipAddFailed { get; }
    internal static string ToolTipAutomaticDelayDescr { get; }
    internal static string ToolTipAutoPopDelayDescr { get; }
    internal static string ToolTipBackColorDescr { get; }
    internal static string ToolTipDrawEventDescr { get; }
    internal static string ToolTipEmptyColor { get; }
    internal static string ToolTipForeColorDescr { get; }
    internal static string ToolTipInitialDelayDescr { get; }
    internal static string ToolTipIsBalloonDescr { get; }
    internal static string ToolTipOwnerDrawDescr { get; }
    internal static string ToolTipPopupEventDescr { get; }
    internal static string ToolTipReshowDelayDescr { get; }
    internal static string ToolTipShowAlwaysDescr { get; }
    internal static string ToolTipStripAmpersandsDescr { get; }
    internal static string ToolTipTitleDescr { get; }
    internal static string ToolTipToolTipDescr { get; }
    internal static string ToolTipToolTipIconDescr { get; }
    internal static string ToolTipUseAnimationDescr { get; }
    internal static string ToolTipUseFadingDescr { get; }
    internal static string TooManyResumeUpdateMenuHandles { get; }
    internal static string TopLevelControlAdd { get; }
    internal static string TopLevelNotAllowedIfActiveX { get; }
    internal static string TopLevelParentedControl { get; }
    internal static string toStringAlt { get; }
    internal static string toStringBack { get; }
    internal static string toStringControl { get; }
    internal static string toStringDefault { get; }
    internal static string toStringDelete { get; }
    internal static string toStringEnd { get; }
    internal static string toStringEnter { get; }
    internal static string toStringHome { get; }
    internal static string toStringInsert { get; }
    internal static string toStringNone { get; }
    internal static string toStringPageDown { get; }
    internal static string toStringPageUp { get; }
    internal static string toStringShift { get; }
    internal static string TrackBarAutoSizeDescr { get; }
    internal static string TrackBarLargeChangeDescr { get; }
    internal static string TrackBarLargeChangeError { get; }
    internal static string TrackBarMaximumDescr { get; }
    internal static string TrackBarMinimumDescr { get; }
    internal static string TrackBarOnScrollDescr { get; }
    internal static string TrackBarOrientationDescr { get; }
    internal static string TrackBarSmallChangeDescr { get; }
    internal static string TrackBarSmallChangeError { get; }
    internal static string TrackBarTickFrequencyDescr { get; }
    internal static string TrackBarTickStyleDescr { get; }
    internal static string TrackBarValueDescr { get; }
    internal static string TransparentBackColorNotAllowed { get; }
    internal static string TrayIcon_TextTooLong { get; }
    internal static string TreeNodeBackColorDescr { get; }
    internal static string TreeNodeBeginEditFailed { get; }
    internal static string TreeNodeCheckedDescr { get; }
    internal static string TreeNodeCollectionBadTreeNode { get; }
    internal static string TreeNodeForeColorDescr { get; }
    internal static string TreeNodeImageIndexDescr { get; }
    internal static string TreeNodeImageKeyDescr { get; }
    internal static string TreeNodeIndexDescr { get; }
    internal static string TreeNodeNodeFontDescr { get; }
    internal static string TreeNodeNodeNameDescr { get; }
    internal static string TreeNodeNoParent { get; }
    internal static string TreeNodeSelectedImageIndexDescr { get; }
    internal static string TreeNodeSelectedImageKeyDescr { get; }
    internal static string TreeNodeStateImageIndexDescr { get; }
    internal static string TreeNodeStateImageKeyDescr { get; }
    internal static string TreeNodeTextDescr { get; }
    internal static string TreeNodeToolTipTextDescr { get; }
    internal static string TreeViewAfterCheckDescr { get; }
    internal static string TreeViewAfterCollapseDescr { get; }
    internal static string TreeViewAfterEditDescr { get; }
    internal static string TreeViewAfterExpandDescr { get; }
    internal static string TreeViewAfterSelectDescr { get; }
    internal static string TreeViewBeforeCheckDescr { get; }
    internal static string TreeViewBeforeCollapseDescr { get; }
    internal static string TreeViewBeforeEditDescr { get; }
    internal static string TreeViewBeforeExpandDescr { get; }
    internal static string TreeViewBeforeSelectDescr { get; }
    internal static string TreeViewCheckBoxesDescr { get; }
    internal static string TreeViewDrawModeDescr { get; }
    internal static string TreeViewDrawNodeEventDescr { get; }
    internal static string TreeViewFullRowSelectDescr { get; }
    internal static string TreeViewHideSelectionDescr { get; }
    internal static string TreeViewHotTrackingDescr { get; }
    internal static string TreeViewImageIndexDescr { get; }
    internal static string TreeViewImageKeyDescr { get; }
    internal static string TreeViewImageListDescr { get; }
    internal static string TreeViewIndentDescr { get; }
    internal static string TreeViewItemHeightDescr { get; }
    internal static string TreeViewLabelEditDescr { get; }
    internal static string TreeViewLineColorDescr { get; }
    internal static string TreeViewNodeMouseClickDescr { get; }
    internal static string TreeViewNodeMouseDoubleClickDescr { get; }
    internal static string TreeViewNodeMouseHoverDescr { get; }
    internal static string TreeViewNodesDescr { get; }
    internal static string TreeViewNodeSorterDescr { get; }
    internal static string TreeViewPathSeparatorDescr { get; }
    internal static string TreeViewScrollableDescr { get; }
    internal static string TreeViewSelectedImageIndexDescr { get; }
    internal static string TreeViewSelectedImageKeyDescr { get; }
    internal static string TreeViewSelectedNodeDescr { get; }
    internal static string TreeViewShowLinesDescr { get; }
    internal static string TreeViewShowPlusMinusDescr { get; }
    internal static string TreeViewShowRootLinesDescr { get; }
    internal static string TreeViewShowShowNodeToolTipsDescr { get; }
    internal static string TreeViewSortedDescr { get; }
    internal static string TreeViewStateImageListDescr { get; }
    internal static string TreeViewTopNodeDescr { get; }
    internal static string TreeViewVisibleCountDescr { get; }
    internal static string TypedControlCollectionShouldBeOfType { get; }
    internal static string TypedControlCollectionShouldBeOfTypes { get; }
    internal static string TYPEINFOPROCESSORGetDocumentationFailed { get; }
    internal static string TYPEINFOPROCESSORGetRefTypeInfoFailed { get; }
    internal static string TYPEINFOPROCESSORGetTypeAttrFailed { get; }
    internal static string TypeLoadException { get; }
    internal static string TypeLoadExceptionShort { get; }
    internal static string UnableToInitComponent { get; }
    internal static string UnableToSetPanelText { get; }
    internal static string UnknownAttr { get; }
    internal static string UnknownInputLanguageLayout { get; }
    internal static string UnsafeNativeMethodsNotImplemented { get; }
    internal static string UpDownBaseAlignmentDescr { get; }
    internal static string UpDownBaseBorderStyleDescr { get; }
    internal static string UpDownBaseDownButtonAccName { get; }
    internal static string UpDownBaseInterceptArrowKeysDescr { get; }
    internal static string UpDownBasePreferredHeightDescr { get; }
    internal static string UpDownBaseReadOnlyDescr { get; }
    internal static string UpDownBaseTextAlignDescr { get; }
    internal static string UpDownBaseUpButtonAccName { get; }
    internal static string UseCompatibleTextRenderingDescr { get; }
    internal static string UserControlBorderStyleDescr { get; }
    internal static string UserControlOnLoadDescr { get; }
    internal static string valueChangedEventDescr { get; }
    internal static string VisualStyleHandleCreationFailed { get; }
    internal static string VisualStyleNotActive { get; }
    internal static string VisualStylesDisabledInClientArea { get; }
    internal static string VisualStylesInvalidCombination { get; }
    internal static string WebBrowserAllowDropNotSupported { get; }
    internal static string WebBrowserAllowNavigationDescr { get; }
    internal static string WebBrowserAllowWebBrowserDropDescr { get; }
    internal static string WebBrowserBackgroundImageLayoutNotSupported { get; }
    internal static string WebBrowserBackgroundImageNotSupported { get; }
    internal static string WebBrowserCanGoBackChangedDescr { get; }
    internal static string WebBrowserCanGoForwardChangedDescr { get; }
    internal static string WebBrowserCursorNotSupported { get; }
    internal static string WebBrowserDocumentCompletedDescr { get; }
    internal static string WebBrowserDocumentTitleChangedDescr { get; }
    internal static string WebBrowserEnabledNotSupported { get; }
    internal static string WebBrowserEncryptionLevelChangedDescr { get; }
    internal static string WebBrowserFileDownloadDescr { get; }
    internal static string WebBrowserIsOfflineDescr { get; }
    internal static string WebBrowserIsWebBrowserContextMenuEnabledDescr { get; }
    internal static string WebBrowserNavigateAbsoluteUri { get; }
    internal static string WebBrowserNavigatedDescr { get; }
    internal static string WebBrowserNavigatingDescr { get; }
    internal static string WebBrowserNewWindowDescr { get; }
    internal static string WebBrowserNoCastToIWebBrowser2 { get; }
    internal static string WebBrowserObjectForScriptingComVisibleOnly { get; }
    internal static string WebBrowserProgressChangedDescr { get; }
    internal static string WebBrowserRightToLeftNotSupported { get; }
    internal static string WebBrowserScriptErrorsSuppressedDescr { get; }
    internal static string WebBrowserScrollBarsEnabledDescr { get; }
    internal static string WebBrowserSecurityLevelDescr { get; }
    internal static string WebBrowserStatusTextChangedDescr { get; }
    internal static string WebBrowserTextNotSupported { get; }
    internal static string WebBrowserUrlDescr { get; }
    internal static string WebBrowserUseWaitCursorNotSupported { get; }
    internal static string WebBrowserWebBrowserShortcutsEnabledDescr { get; }
    internal static string WidthGreaterThanMinWidth { get; }
    internal static string Win32WindowAlreadyCreated { get; }
    internal static string WindowsFormsSetEvent { get; }
    internal static string ControlOnDpiChangedBeforeParentDescr { get; }
    internal static string ControlOnDpiChangedAfterParentDescr { get; }
    internal static string FormOnDpiChangedDescr { get; }
    internal static string MDIChildSystemMenuItemAccessibleName { get; }
    internal static string MonthCalendarSingleDateSelected { get; }
    internal static string MonthCalendarSingleYearSelected { get; }
    internal static string MonthCalendarYearRangeSelected { get; }
    internal static string MonthCalendarSingleDecadeSelected { get; }
    internal static string MonthCalendarRangeSelected { get; }
    internal static string PropertyGridDropDownButtonComboBoxAccessibleName { get; }
    internal static string CombinationOfAccessibilitySwitchesNotSupported { get; }
    internal static string DateTimePickerLocalizedControlType { get; }
    internal static string LiveRegionAutomationLiveSettingDescr { get; }
    internal static string AccessibleObjectLiveRegionNotSupported { get; }
    internal static string OwnerControlIsNotALiveRegion { get; }
    internal static string StandardOleMarshalObjectGetMarshalerFailed { get; }
    internal static string NotSortedAccessibleStatus { get; }
    internal static string SortedAscendingAccessibleStatus { get; }
    internal static string SortedDescendingAccessibleStatus { get; }
    internal static string DataGridViewSortedAscendingAccessibleStatusFormat { get; }
    internal static string DataGridViewSortedDescendingAccessibleStatusFormat { get; }
    internal static string PropertyGridPropertyValueSelectedFormat { get; }
    internal static string KeyboardToolTipDisplayBehaviorRequiresAccessibilityImprovementsLevel3 { get; }
    internal static string ControlDpiChangeScale { get; }
    internal static string DataGridViewEditingPanelUiaProviderDescription { get; }
    internal static string ComboBoxValueSelectedFormat { get; }
    internal static string UnexpectedClipboardType { get; }
    internal static string UnexpectedTypeForClipboardFormat { get; }
    internal static string FolderBrowserDialogUseDescriptionForTitle { get; }
    internal static string TextBoxPlaceholderTextDescr { get; }
    internal static string TreeNodeCircularReference { get; }
    internal static string DefaultNumericUpDownAccessibleName { get; }
    internal static string DefaultUpDownButtonsAccessibleName { get; }
    internal static string Win32SetParentFailed { get; }
    internal static string ErrorProviderDefaultAccessibleName { get; }
    internal static string PropertyGridEntryValuesListDefaultAccessibleName { get; }
    internal static string TaskDialogButtonTextMustNotBeNull { get; }
    internal static string TaskDialogCannotNavigateClosedDialog { get; }
    internal static string TaskDialogCannotNavigateWithinNavigationEventHandler { get; }
    internal static string TaskDialogCannotNavigateWithinRadioButtonCheckedChanged { get; }
    internal static string TaskDialogCannotNavigateWithoutDialog { get; }
    internal static string TaskDialogCannotRemoveProgressBarWhileDialogIsShown { get; }
    internal static string TaskDialogCannotSetPropertyOfBoundPage { get; }
    internal static string TaskDialogCannotSetPropertyOfShownDialog { get; }
    internal static string TaskDialogCannotSetRadioButtonCheckedWithinCheckedChangedEvent { get; }
    internal static string TaskDialogCannotUncheckRadioButtonWhileBound { get; }
    internal static string TaskDialogCannotUpdateAfterNavigation { get; }
    internal static string TaskDialogCannotUpdateIconType { get; }
    internal static string TaskDialogCanUpdateStateOnlyWhenShown { get; }
    internal static string HScrollBarDefaultAccessibleName { get; }
    internal static string VScrollBarDefaultAccessibleName { get; }
    internal static string TaskDialogCollectionAlreadyBound { get; }
    internal static string TaskDialogControlAlreadyAddedToCollection { get; }
    internal static string TaskDialogControlAlreadyBound { get; }
    internal static string TaskDialogControlIsPartOfOtherCollection { get; }
    internal static string TaskDialogControlNotBound { get; }
    internal static string TaskDialogControlNotCreated { get; }
    internal static string TaskDialogInstanceAlreadyShown { get; }
    internal static string TaskDialogNavigationNotCompleted { get; }
    internal static string TaskDialogVisualStylesNotEnabled { get; }
    internal static string TaskDialogDefaultButtonMustExistInCollection { get; }
    internal static string TaskDialogOnlySingleRadioButtonCanBeChecked { get; }
    internal static string TaskDialogPageIsAlreadyBound { get; }
    internal static string TaskDialogRadioButtonTextMustNotBeNull { get; }
    internal static string TaskDialogTooManyButtonsAdded { get; }
    internal static string TaskDialogCannotSetTextForStandardButton { get; }
    internal static string TaskDialogCannotShowCustomButtonsAndCommandLinks { get; }
    internal static string WindowSubclassHandlerWndProcIsNotExceptedOne { get; }
    internal static string ListViewGroupCollapsedStateChangedDescr { get; }
    internal static string ListViewGroupTaskLinkClickDescr { get; }
    internal static string InputLanguageCultureNotFound { get; }
    internal static string ListViewGroupImageListDescr { get; }
    internal static string ConstructorArgumentInvalidValueType { get; }
    internal static string TextFormatFlagsModifyStringNotAllowed { get; }
    internal static string AccessibleActionDoubleClick { get; }
    internal static string InvalidHdcType { get; }
    internal static string PropertyGridViewDropDownControlHolderAccessibleName { get; }
    internal static string UpDownEditLocalizedControlTypeName { get; }
    internal static string DataGridView_RowAddedNotification { get; }
    internal static string TreeNodeBoundToAnotherTreeView { get; }
    internal static string ComboboxDropDownButtonCloseName { get; }
    internal static string ComboboxDropDownButtonOpenName { get; }
    internal static string CalendarPreviousButtonAccessibleObjectDescription { get; }
    internal static string CalendarNextButtonAccessibleObjectDescription { get; }
    internal static string CalendarTodayLinkAccessibleObjectDescription { get; }
    internal static string MonthCalendarWeekNumberDescription { get; }
    internal static string ListViewItemAccessibilityObjectInvalidViewException { get; }
    internal static string TrackBarLargeDecreaseButtonName { get; }
    internal static string TrackBarLargeIncreaseButtonName { get; }
    internal static string TrackBarPositionButtonName { get; }
    internal static string ProfessionalColorsStatusStripBorderDescr { get; }
    internal static string ListViewCannotAddGroupsToVirtualListView { get; }
    internal static string ParentPropertyNotSetInGetNextControl { get; }
    internal static string ControlsPropertyNotSetInGetNextControl { get; }
    internal static string ControlsCollectionShouldNotBeEmptyInGetNextControl { get; }
    internal static string AccessibleObjectRuntimeIdNotSupported { get; }
    internal static string ListViewGroupCollapsedStateName { get; }
    internal static string ListViewGroupExpandedStateName { get; }
    internal static string CategoryPropertyGridLocalizedControlType { get; }
    internal static string FileDialogAddToRecentDescr { get; }
    internal static string FileDialogShowHiddenFilesDescr { get; }
    internal static string SaveFileDialogCheckWriteAccess { get; }
    internal static string SaveFileDialogExpandedMode { get; }
    internal static string FileDialogOkRequiresInteractionDescr { get; }
    internal static string OpenFileDialogSelectReadOnlyDescr { get; }
    internal static string FileDialogShowPinnedPlacesDescr { get; }
    internal static string OpenFileDialogShowPreviewDescr { get; }
    internal static string FolderBrowserDialogAddToRecent { get; }
    internal static string FolderBrowserDialogOkRequiresInteraction { get; }
    internal static string FolderBrowserDialogShowHiddenFiles { get; }
    internal static string FolderBrowserDialogShowPinnedPlaces { get; }
    internal static string EditDefaultAccessibleName { get; }
    internal static string ExpandedStateName { get; }
    internal static string ToolStripItemOnCommandChangedDescr { get; }
    internal static string ToolStripItemOnBindingContextChangedDescr { get; }
    internal static string CommandComponentCommandDescr { get; }
    internal static string ToolStripItemBindingContextDescr { get; }
    internal static string ListViewItemAccessibilityObjectRequiresListView { get; }
    internal static string BindableComponentBindingContextChangedDescr { get; }
    internal static string BindingComponentBindingContextDescr { get; }
    internal static string CommandCanExecuteChangedEventDescr { get; }
    internal static string CommandChangedEventDescr { get; }
    internal static string CommandParameterChangedEventDescr { get; }
    internal static string ControlDataContextChangedDescr { get; }
    internal static string CommandComponentCommandParameterDescr { get; }
    internal static string AccessDenied { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Argument_IncompatibleArrayType { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Arg_NonZeroLowerBound { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string InvalidArgumentType { get; }
    internal static string FailedToLoadCursor { get; }
    internal static string ResourceValueNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_AboutBoxDesc();
    internal static string get_AccDGCollapse();
    internal static string get_AccDGEdit();
    internal static string get_AccDGExpand();
    internal static string get_AccDGNavigate();
    internal static string get_AccDGNavigateBack();
    internal static string get_AccDGNewRow();
    internal static string get_AccDGParentRow();
    internal static string get_AccDGParentRows();
    internal static string get_AccessibleActionCheck();
    internal static string get_AccessibleActionClick();
    internal static string get_AccessibleActionCollapse();
    internal static string get_AccessibleActionExpand();
    internal static string get_AccessibleActionPress();
    internal static string get_AccessibleActionUncheck();
    internal static string get_AddDifferentThreads();
    internal static string get_ApplicationCannotChangeThreadExceptionMode();
    internal static string get_ApplicationCannotChangeApplicationExceptionMode();
    internal static string get_ApplyCaption();
    internal static string get_AutoCompleteFailure();
    internal static string get_AutoCompleteFailureListItems();
    internal static string get_AXAddInvalidEvent();
    internal static string get_AXDuplicateControl();
    internal static string get_AXEditProperties();
    internal static string get_AXFontUnitNotPoint();
    internal static string get_AxInterfaceNotSupported();
    internal static string get_AXInvalidArgument();
    internal static string get_AXInvalidMethodInvoke();
    internal static string get_AXInvalidPropertyGet();
    internal static string get_AXInvalidPropertySet();
    internal static string get_AXMTAThread();
    internal static string get_AXNoConnectionPoint();
    internal static string get_AXNoConnectionPointContainer();
    internal static string get_AXNoEventInterface();
    internal static string get_AXNohWnd();
    internal static string get_AXNoLicenseToUse();
    internal static string get_AXNoSinkAdvise();
    internal static string get_AXNoSinkImplementation();
    internal static string get_AXNoThreadInfo();
    internal static string get_AXNotImplemented();
    internal static string get_AXNoTopLevelContainerControl();
    internal static string get_AXOcxStateLoaded();
    internal static string get_AXProperties();
    internal static string get_AXSingleThreaded();
    internal static string get_AXTopLevelSource();
    internal static string get_AXUnknownError();
    internal static string get_AXUnknownImage();
    internal static string get_AXWindowlessControl();
    internal static string get_BadDataSourceForComplexBinding();
    internal static string get_BindingManagerBadIndex();
    internal static string get_BindingNavigatorAddNewItemPropDescr();
    internal static string get_BindingNavigatorAddNewItemText();
    internal static string get_BindingNavigatorBindingSourcePropDescr();
    internal static string get_BindingNavigatorCountItemFormat();
    internal static string get_BindingNavigatorCountItemFormatPropDescr();
    internal static string get_BindingNavigatorCountItemPropDescr();
    internal static string get_BindingNavigatorCountItemTip();
    internal static string get_BindingNavigatorDeleteItemPropDescr();
    internal static string get_BindingNavigatorDeleteItemText();
    internal static string get_BindingNavigatorMoveFirstItemPropDescr();
    internal static string get_BindingNavigatorMoveFirstItemText();
    internal static string get_BindingNavigatorMoveLastItemPropDescr();
    internal static string get_BindingNavigatorMoveLastItemText();
    internal static string get_BindingNavigatorMoveNextItemPropDescr();
    internal static string get_BindingNavigatorMoveNextItemText();
    internal static string get_BindingNavigatorMovePreviousItemPropDescr();
    internal static string get_BindingNavigatorMovePreviousItemText();
    internal static string get_BindingNavigatorPositionAccessibleName();
    internal static string get_BindingNavigatorPositionItemPropDescr();
    internal static string get_BindingNavigatorPositionItemTip();
    internal static string get_BindingNavigatorRefreshItemsEventDescr();
    internal static string get_BindingNavigatorToolStripName();
    internal static string get_BindingsCollectionAdd1();
    internal static string get_BindingsCollectionAdd2();
    internal static string get_BindingsCollectionBadIndex();
    internal static string get_BindingsCollectionDup();
    internal static string get_BindingsCollectionForeign();
    internal static string get_BindingSourceAddingNewEventHandlerDescr();
    internal static string get_BindingSourceAllowNewDescr();
    internal static string get_BindingSourceBadSortString();
    internal static string get_BindingSourceBindingCompleteEventHandlerDescr();
    internal static string get_BindingSourceBindingListWrapperAddToReadOnlyList();
    internal static string get_BindingSourceBindingListWrapperNeedAParameterlessConstructor();
    internal static string get_BindingSourceBindingListWrapperNeedToSetAllowNew();
    internal static string get_BindingSourceCurrentChangedEventHandlerDescr();
    internal static string get_BindingSourceCurrentItemChangedEventHandlerDescr();
    internal static string get_BindingSourceDataErrorEventHandlerDescr();
    internal static string get_BindingSourceDataMemberChangedEventHandlerDescr();
    internal static string get_BindingSourceDataMemberDescr();
    internal static string get_BindingSourceDataSourceChangedEventHandlerDescr();
    internal static string get_BindingSourceDataSourceDescr();
    internal static string get_BindingSourceFilterDescr();
    internal static string get_BindingSourceInstanceError();
    internal static string get_BindingSourceItemChangedEventModeDescr();
    internal static string get_BindingSourceItemTypeIsValueType();
    internal static string get_BindingSourceItemTypeMismatchOnAdd();
    internal static string get_BindingSourceListChangedEventHandlerDescr();
    internal static string get_BindingSourcePositionChangedEventHandlerDescr();
    internal static string get_BindingSourceRecursionDetected();
    internal static string get_BindingSourceRemoveCurrentNoCurrentItem();
    internal static string get_BindingSourceRemoveCurrentNotAllowed();
    internal static string get_BindingSourceSortDescr();
    internal static string get_BindingSourceSortStringPropertyNotInIBindingList();
    internal static string get_BlinkRateMustBeZeroOrMore();
    internal static string get_borderStyleDescr();
    internal static string get_ButtonAutoEllipsisDescr();
    internal static string get_ButtonBorderColorDescr();
    internal static string get_ButtonBorderSizeDescr();
    internal static string get_ButtonCheckedBackColorDescr();
    internal static string get_ButtonDialogResultDescr();
    internal static string get_ButtonFlatAppearance();
    internal static string get_ButtonFlatAppearanceInvalidBorderColor();
    internal static string get_ButtonFlatStyleDescr();
    internal static string get_ButtonImageAlignDescr();
    internal static string get_ButtonImageDescr();
    internal static string get_ButtonImageIndexDescr();
    internal static string get_ButtonImageListDescr();
    internal static string get_ButtonMouseDownBackColorDescr();
    internal static string get_ButtonMouseOverBackColorDescr();
    internal static string get_ButtonTextAlignDescr();
    internal static string get_ButtonTextImageRelationDescr();
    internal static string get_ButtonUseMnemonicDescr();
    internal static string get_ButtonUseVisualStyleBackColorDescr();
    internal static string get_CancelCaption();
    internal static string get_CannotActivateControl();
    internal static string get_CannotChangePrintedDocument();
    internal static string get_CantNestMessageLoops();
    internal static string get_CantShowMBServiceWithHelp();
    internal static string get_CantShowMBServiceWithOwner();
    internal static string get_CantShowModalOnNonInteractive();
    internal static string get_CatAccessibility();
    internal static string get_CatAction();
    internal static string get_CatAppearance();
    internal static string get_CatAsynchronous();
    internal static string get_CatBehavior();
    internal static string get_CatColors();
    internal static string get_CatData();
    internal static string get_CatDisplay();
    internal static string get_CatDragDrop();
    internal static string get_CatFocus();
    internal static string get_CatFolderBrowsing();
    internal static string get_CatItems();
    internal static string get_CatKey();
    internal static string get_CatLayout();
    internal static string get_CatMouse();
    internal static string get_CatPrivate();
    internal static string get_CatPropertyChanged();
    internal static string get_CatWindowStyle();
    internal static string get_CDallowFullOpenDescr();
    internal static string get_CDanyColorDescr();
    internal static string get_CDcolorDescr();
    internal static string get_CDcustomColorsDescr();
    internal static string get_CDfullOpenDescr();
    internal static string get_CDshowHelpDescr();
    internal static string get_CDsolidColorOnlyDescr();
    internal static string get_CheckBoxAppearanceDescr();
    internal static string get_CheckBoxAutoCheckDescr();
    internal static string get_CheckBoxCheckAlignDescr();
    internal static string get_CheckBoxCheckedDescr();
    internal static string get_CheckBoxCheckStateDescr();
    internal static string get_CheckBoxOnAppearanceChangedDescr();
    internal static string get_CheckBoxOnCheckedChangedDescr();
    internal static string get_CheckBoxOnCheckStateChangedDescr();
    internal static string get_CheckBoxThreeStateDescr();
    internal static string get_CheckedListBoxCheckedIndexCollectionIsReadOnly();
    internal static string get_CheckedListBoxCheckedItemCollectionIsReadOnly();
    internal static string get_CheckedListBoxCheckOnClickDescr();
    internal static string get_CheckedListBoxInvalidSelectionMode();
    internal static string get_CheckedListBoxItemCheckDescr();
    internal static string get_CheckedListBoxThreeDCheckBoxesDescr();
    internal static string get_CircularOwner();
    internal static string get_Clipboard_InvalidPath();
    internal static string get_ClipboardOperationFailed();
    internal static string get_ClipboardSecurityException();
    internal static string get_CloseCaption();
    internal static string get_ClosingWhileCreatingHandle();
    internal static string get_collectionChangedEventDescr();
    internal static string get_collectionChangingEventDescr();
    internal static string get_CollectionEmptyException();
    internal static string get_ColumnAlignment();
    internal static string get_ColumnCaption();
    internal static string get_ColumnHeaderBadDisplayIndex();
    internal static string get_ColumnHeaderCollectionInvalidArgument();
    internal static string get_ColumnHeaderDisplayIndexDescr();
    internal static string get_ColumnHeaderNameDescr();
    internal static string get_ColumnWidth();
    internal static string get_COM2BadHandlerType();
    internal static string get_COM2NamesAndValuesNotEqual();
    internal static string get_COM2ReadonlyProperty();
    internal static string get_COM2UnhandledVT();
    internal static string get_ComboBoxAutoCompleteCustomSourceDescr();
    internal static string get_ComboBoxAutoCompleteModeDescr();
    internal static string get_ComboBoxAutoCompleteModeOnlyNoneAllowed();
    internal static string get_ComboBoxAutoCompleteSourceDescr();
    internal static string get_ComboBoxAutoCompleteSourceOnlyListItemsAllowed();
    internal static string get_ComboBoxDataSourceWithSort();
    internal static string get_ComboBoxDrawModeDescr();
    internal static string get_ComboBoxDropDownHeightDescr();
    internal static string get_ComboBoxDropDownStyleChangedDescr();
    internal static string get_ComboBoxDropDownWidthDescr();
    internal static string get_ComboBoxDroppedDownDescr();
    internal static string get_ComboBoxEditDefaultAccessibleName();
    internal static string get_ComboBoxFlatStyleDescr();
    internal static string get_ComboBoxIntegralHeightDescr();
    internal static string get_ComboBoxItemHeightDescr();
    internal static string get_ComboBoxItemOverflow();
    internal static string get_ComboBoxItemsDescr();
    internal static string get_ComboBoxMaxDropDownItemsDescr();
    internal static string get_ComboBoxMaxLengthDescr();
    internal static string get_ComboBoxOnDropDownClosedDescr();
    internal static string get_ComboBoxOnDropDownDescr();
    internal static string get_ComboBoxOnTextUpdateDescr();
    internal static string get_ComboBoxPreferredHeightDescr();
    internal static string get_ComboBoxSelectedIndexDescr();
    internal static string get_ComboBoxSelectedItemDescr();
    internal static string get_ComboBoxSelectedTextDescr();
    internal static string get_ComboBoxSelectionLengthDescr();
    internal static string get_ComboBoxSelectionStartDescr();
    internal static string get_ComboBoxSortedDescr();
    internal static string get_ComboBoxSortWithDataSource();
    internal static string get_ComboBoxStyleDescr();
    internal static string get_CommandIdNotAllocated();
    internal static string get_CommonDialogHelpRequested();
    internal static string get_ComponentEditorFormBadComponent();
    internal static string get_ComponentEditorFormProperties();
    internal static string get_ComponentEditorFormPropertiesNoName();
    internal static string get_ComponentManagerProxyOutOfMemory();
    internal static string get_Config_base_unrecognized_attribute();
    internal static string get_ConnPointAdviseFailed();
    internal static string get_ConnPointCouldNotCreate();
    internal static string get_ConnPointSinkIF();
    internal static string get_ConnPointSourceIF();
    internal static string get_ConnPointUnhandledType();
    internal static string get_ContainerControlActiveControlDescr();
    internal static string get_ContainerControlAutoScaleModeDescr();
    internal static string get_ContainerControlAutoValidate();
    internal static string get_ContainerControlBindingContextDescr();
    internal static string get_ContainerControlInvalidAutoScaleDimensions();
    internal static string get_ContainerControlOnAutoValidateChangedDescr();
    internal static string get_ContainerControlParentFormDescr();
    internal static string get_ContextMenuStripSourceControlDescr();
    internal static string get_ControlAccessibleObjectInvalid();
    internal static string get_ControlAccessibilityObjectDescr();
    internal static string get_ControlAccessibleDefaultActionDescr();
    internal static string get_ControlAccessibleDescriptionDescr();
    internal static string get_ControlAccessibleNameDescr();
    internal static string get_ControlAccessibleRoleDescr();
    internal static string get_ControlAllowDropDescr();
    internal static string get_ControlAllowTransparencyDescr();
    internal static string get_ControlAnchorDescr();
    internal static string get_ControlArrayCannotAddComponentArray();
    internal static string get_ControlArrayCannotPerformAddCopy();
    internal static string get_ControlArrayCloningException();
    internal static string get_ControlArrayDuplicateException();
    internal static string get_ControlArrayValidationException();
    internal static string get_ControlAutoRelocateDescr();
    internal static string get_ControlAutoSizeDescr();
    internal static string get_ControlAutoSizeModeDescr();
    internal static string get_ControlBackColorDescr();
    internal static string get_ControlBackgroundImageDescr();
    internal static string get_ControlBackgroundImageLayoutDescr();
    internal static string get_ControlBadAsyncResult();
    internal static string get_ControlBadControl();
    internal static string get_ControlBindingContextDescr();
    internal static string get_ControlBindingsDescr();
    internal static string get_ControlBottomDescr();
    internal static string get_ControlBoundsDescr();
    internal static string get_ControlCanFocusDescr();
    internal static string get_ControlCannotBeNull();
    internal static string get_ControlCanSelectDescr();
    internal static string get_ControlCaptureDescr();
    internal static string get_ControlCausesValidationDescr();
    internal static string get_ControlCheckForIllegalCrossThreadCalls();
    internal static string get_ControlClientRectangleDescr();
    internal static string get_ControlClientSizeDescr();
    internal static string get_ControlCompanyNameDescr();
    internal static string get_ControlContainsFocusDescr();
    internal static string get_ControlContextMenuDescr();
    internal static string get_ControlContextMenuStripChangedDescr();
    internal static string get_ControlControlsDescr();
    internal static string get_ControlCreatedDescr();
    internal static string get_ControlCursorDescr();
    internal static string get_ControlDisplayRectangleDescr();
    internal static string get_ControlDisposedDescr();
    internal static string get_ControlDisposingDescr();
    internal static string get_ControlDockDescr();
    internal static string get_ControlDoubleBufferedDescr();
    internal static string get_ControlEnabledDescr();
    internal static string get_ControlFocusedDescr();
    internal static string get_ControlFontDescr();
    internal static string get_ControlForeColorDescr();
    internal static string get_ControlHandleCreatedDescr();
    internal static string get_ControlHandleDescr();
    internal static string get_ControlHasChildrenDescr();
    internal static string get_ControlHeightDescr();
    internal static string get_ControlIMEModeDescr();
    internal static string get_ControlInvalidLastScalingFactor();
    internal static string get_ControlInvokeRequiredDescr();
    internal static string get_ControlIsAccessibleDescr();
    internal static string get_ControlIsKeyLockedNumCapsScrollLockKeysSupportedOnly();
    internal static string get_ControlLeftDescr();
    internal static string get_ControlLocationDescr();
    internal static string get_ControlMarginDescr();
    internal static string get_ControlMaximumSizeDescr();
    internal static string get_ControlMetaFileDCWrapperSizeInvalid();
    internal static string get_ControlMinimumSizeDescr();
    internal static string get_ControlNotChild();
    internal static string get_ControlOnAutoSizeChangedDescr();
    internal static string get_ControlOnBackColorChangedDescr();
    internal static string get_ControlOnBackgroundImageChangedDescr();
    internal static string get_ControlOnBackgroundImageLayoutChangedDescr();
    internal static string get_ControlOnBindingContextChangedDescr();
    internal static string get_ControlOnCausesValidationChangedDescr();
    internal static string get_ControlOnChangeUICuesDescr();
    internal static string get_ControlOnClickDescr();
    internal static string get_ControlOnClientSizeChangedDescr();
    internal static string get_ControlOnContextMenuChangedDescr();
    internal static string get_ControlOnControlAddedDescr();
    internal static string get_ControlOnControlRemovedDescr();
    internal static string get_ControlOnCreateHandleDescr();
    internal static string get_ControlOnCursorChangedDescr();
    internal static string get_ControlOnDestroyHandleDescr();
    internal static string get_ControlOnDockChangedDescr();
    internal static string get_ControlOnDoubleClickDescr();
    internal static string get_ControlOnDragDropDescr();
    internal static string get_ControlOnDragEnterDescr();
    internal static string get_ControlOnDragLeaveDescr();
    internal static string get_ControlOnDragOverDescr();
    internal static string get_ControlOnEnabledChangedDescr();
    internal static string get_ControlOnEnterDescr();
    internal static string get_ControlOnFontChangedDescr();
    internal static string get_ControlOnForeColorChangedDescr();
    internal static string get_ControlOnGiveFeedbackDescr();
    internal static string get_ControlOnGotFocusDescr();
    internal static string get_ControlOnHelpDescr();
    internal static string get_ControlOnImeModeChangedDescr();
    internal static string get_ControlOnInvalidateDescr();
    internal static string get_ControlOnKeyDownDescr();
    internal static string get_ControlOnKeyPressDescr();
    internal static string get_ControlOnKeyUpDescr();
    internal static string get_ControlOnLayoutDescr();
    internal static string get_ControlOnLeaveDescr();
    internal static string get_ControlOnLocationChangedDescr();
    internal static string get_ControlOnLostFocusDescr();
    internal static string get_ControlOnMarginChangedDescr();
    internal static string get_ControlOnMouseCaptureChangedDescr();
    internal static string get_ControlOnMouseClickDescr();
    internal static string get_ControlOnMouseDoubleClickDescr();
    internal static string get_ControlOnMouseDownDescr();
    internal static string get_ControlOnMouseEnterDescr();
    internal static string get_ControlOnMouseHoverDescr();
    internal static string get_ControlOnMouseLeaveDescr();
    internal static string get_ControlOnMouseMoveDescr();
    internal static string get_ControlOnMouseUpDescr();
    internal static string get_ControlOnMouseWheelDescr();
    internal static string get_ControlOnMoveDescr();
    internal static string get_ControlOnPaddingChangedDescr();
    internal static string get_ControlOnPaintDescr();
    internal static string get_ControlOnParentChangedDescr();
    internal static string get_ControlOnQueryAccessibilityHelpDescr();
    internal static string get_ControlOnQueryContinueDragDescr();
    internal static string get_ControlOnResizeBeginDescr();
    internal static string get_ControlOnResizeDescr();
    internal static string get_ControlOnResizeEndDescr();
    internal static string get_ControlOnRightToLeftChangedDescr();
    internal static string get_ControlOnRightToLeftLayoutChangedDescr();
    internal static string get_ControlOnSizeChangedDescr();
    internal static string get_ControlOnStyleChangedDescr();
    internal static string get_ControlOnSystemColorsChangedDescr();
    internal static string get_ControlOnTabIndexChangedDescr();
    internal static string get_ControlOnTabStopChangedDescr();
    internal static string get_ControlOnTextChangedDescr();
    internal static string get_ControlOnValidatedDescr();
    internal static string get_ControlOnValidatingDescr();
    internal static string get_ControlOnVisibleChangedDescr();
    internal static string get_ControlPaddingDescr();
    internal static string get_ControlParentDescr();
    internal static string get_ControlProductNameDescr();
    internal static string get_ControlProductVersionDescr();
    internal static string get_ControlRecreatingHandleDescr();
    internal static string get_ControlRegionChangedDescr();
    internal static string get_ControlRegionDescr();
    internal static string get_ControlResizeRedrawDescr();
    internal static string get_ControlRightDescr();
    internal static string get_ControlRightToLeftDescr();
    internal static string get_ControlRightToLeftLayoutDescr();
    internal static string get_ControlSizeDescr();
    internal static string get_ControlTabIndexDescr();
    internal static string get_ControlTabStopDescr();
    internal static string get_ControlTagDescr();
    internal static string get_ControlTextDescr();
    internal static string get_ControlTopDescr();
    internal static string get_ControlTopLevelControlDescr();
    internal static string get_ControlUnsupportedProperty();
    internal static string get_ControlUserPreferenceChangedDescr();
    internal static string get_ControlUserPreferenceChangingDescr();
    internal static string get_ControlUseWaitCursorDescr();
    internal static string get_ControlVisibleDescr();
    internal static string get_ControlWidthDescr();
    internal static string get_ControlWindowTargetDescr();
    internal static string get_ControlWithScrollbarsPositionDescr();
    internal static string get_ControlWithScrollbarsVirtualSizeDescr();
    internal static string get_CurrencyManagerCantAddNew();
    internal static string get_CursorCannotCovertToBytes();
    internal static string get_CursorCannotCovertToString();
    internal static string get_CursorNonSerializableHandle();
    internal static string get_DataBindingAddNewNotSupportedOnPropertyManager();
    internal static string get_DataBindingCycle();
    internal static string get_DataBindingPushDataException();
    internal static string get_DataBindingRemoveAtNotSupportedOnPropertyManager();
    internal static string get_DataGridView_AccButtonCellDefaultAction();
    internal static string get_DataGridView_AccCellDefaultAction();
    internal static string get_DataGridView_AccCheckBoxCellDefaultActionCheck();
    internal static string get_DataGridView_AccCheckBoxCellDefaultActionUncheck();
    internal static string get_DataGridView_AccColumnHeaderCellDefaultAction();
    internal static string get_DataGridView_AccColumnHeaderCellSelectDefaultAction();
    internal static string get_DataGridView_AccDataGridViewCellName();
    internal static string get_DataGridView_AccEditingControlAccName();
    internal static string get_DataGridView_AccEditingPanelAccName();
    internal static string get_DataGridView_AccHorizontalScrollBarAccName();
    internal static string get_DataGridView_AccLinkCellDefaultAction();
    internal static string get_DataGridView_AccNullValue();
    internal static string get_DataGridView_AccRowCreateNew();
    internal static string get_DataGridView_AccRowName();
    internal static string get_DataGridView_AccSelectedCellsName();
    internal static string get_DataGridView_AccSelectedRowCellsName();
    internal static string get_DataGridView_AccTopLeftColumnHeaderCellDefaultAction();
    internal static string get_DataGridView_AccTopLeftColumnHeaderCellName();
    internal static string get_DataGridView_AccTopLeftColumnHeaderCellNameRTL();
    internal static string get_DataGridView_AccTopRow();
    internal static string get_DataGridView_AccVerticalScrollBarAccName();
    internal static string get_DataGridView_AColumnHasNoCellTemplate();
    internal static string get_DataGridView_AdvancedCellBorderStyleInvalid();
    internal static string get_DataGridView_AllowUserToAddRowsDescr();
    internal static string get_DataGridView_AllowUserToDeleteRowsDescr();
    internal static string get_DataGridView_AllowUserToOrderColumnsDescr();
    internal static string get_DataGridView_AllowUserToResizeColumnsDescr();
    internal static string get_DataGridView_AllowUserToResizeRowsDescr();
    internal static string get_DataGridView_AlternatingRowsDefaultCellStyleDescr();
    internal static string get_DataGridView_AtLeastOneColumnIsNull();
    internal static string get_DataGridView_AtLeastOneRowIsNull();
    internal static string get_DataGridView_AutoSizeColumnsModeDescr();
    internal static string get_DataGridView_AutoSizeRowsModeDescr();
    internal static string get_DataGridView_BeginEditNotReentrant();
    internal static string get_DataGridView_BorderStyleDescr();
    internal static string get_DataGridView_ButtonColumnFlatStyleDescr();
    internal static string get_DataGridView_ButtonColumnTextDescr();
    internal static string get_DataGridView_ButtonColumnUseColumnTextForButtonValueDescr();
    internal static string get_DataGridView_CancelRowEditDescr();
    internal static string get_DataGridView_CannotAddAutoFillColumn();
    internal static string get_DataGridView_CannotAddAutoSizedColumn();
    internal static string get_DataGridView_CannotAddFrozenColumn();
    internal static string get_DataGridView_CannotAddFrozenRow();
    internal static string get_DataGridView_CannotAddIdenticalColumns();
    internal static string get_DataGridView_CannotAddIdenticalRows();
    internal static string get_DataGridView_CannotAddNonFrozenColumn();
    internal static string get_DataGridView_CannotAddNonFrozenRow();
    internal static string get_DataGridView_CannotAddUntypedColumn();
    internal static string get_DataGridView_CannotAlterAutoFillColumnParameter();
    internal static string get_DataGridView_CannotAlterDisplayIndexWithinAdjustments();
    internal static string get_DataGridView_CannotAutoFillFrozenColumns();
    internal static string get_DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders();
    internal static string get_DataGridView_CannotAutoSizeInvisibleColumnHeader();
    internal static string get_DataGridView_CannotAutoSizeRowInvisibleRowHeader();
    internal static string get_DataGridView_CannotAutoSizeRowsInvisibleRowHeader();
    internal static string get_DataGridView_CannotMakeAutoSizedColumnVisible();
    internal static string get_DataGridView_CannotMoveFrozenColumn();
    internal static string get_DataGridView_CannotMoveNonFrozenColumn();
    internal static string get_DataGridView_CannotSetColumnCountOnDataBoundDataGridView();
    internal static string get_DataGridView_CannotSetRowCountOnDataBoundDataGridView();
    internal static string get_DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList();
    internal static string get_DataGridView_CannotThrowNullException();
    internal static string get_DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound();
    internal static string get_DataGridView_CellBeginEditDescr();
    internal static string get_DataGridView_CellBorderStyleChangedDescr();
    internal static string get_DataGridView_CellBorderStyleDescr();
    internal static string get_DataGridView_CellChangeCannotBeCommittedOrAborted();
    internal static string get_DataGridView_CellClickDescr();
    internal static string get_DataGridView_CellContentClick();
    internal static string get_DataGridView_CellContentDoubleClick();
    internal static string get_DataGridView_CellContextMenuStripChanged();
    internal static string get_DataGridView_CellContextMenuStripNeeded();
    internal static string get_DataGridView_CellDoesNotBelongToDataGridView();
    internal static string get_DataGridView_CellDoesNotYetBelongToDataGridView();
    internal static string get_DataGridView_CellDoubleClickDescr();
    internal static string get_DataGridView_CellEndEditDescr();
    internal static string get_DataGridView_CellEnterDescr();
    internal static string get_DataGridView_CellErrorTextChangedDescr();
    internal static string get_DataGridView_CellErrorTextNeededDescr();
    internal static string get_DataGridView_CellFormattingDescr();
    internal static string get_DataGridView_CellLeaveDescr();
    internal static string get_DataGridView_CellMouseClickDescr();
    internal static string get_DataGridView_CellMouseDoubleClickDescr();
    internal static string get_DataGridView_CellMouseDownDescr();
    internal static string get_DataGridView_CellMouseEnterDescr();
    internal static string get_DataGridView_CellMouseLeaveDescr();
    internal static string get_DataGridView_CellMouseMoveDescr();
    internal static string get_DataGridView_CellMouseUpDescr();
    internal static string get_DataGridView_CellNeedsDataGridViewForInheritedStyle();
    internal static string get_DataGridView_CellPaintingDescr();
    internal static string get_DataGridView_CellParsingDescr();
    internal static string get_DataGridView_CellStateChangedDescr();
    internal static string get_DataGridView_CellStyleChangedDescr();
    internal static string get_DataGridView_CellStyleContentChangedDescr();
    internal static string get_DataGridView_CellToolTipTextChangedDescr();
    internal static string get_DataGridView_CellToolTipTextDescr();
    internal static string get_DataGridView_CellToolTipTextNeededDescr();
    internal static string get_DataGridView_CellValidatedDescr();
    internal static string get_DataGridView_CellValidatingDescr();
    internal static string get_DataGridView_CellValueChangedDescr();
    internal static string get_DataGridView_CellValueNeededDescr();
    internal static string get_DataGridView_CellValuePushedDescr();
    internal static string get_DataGridView_CheckBoxColumnFalseValueDescr();
    internal static string get_DataGridView_CheckBoxColumnFlatStyleDescr();
    internal static string get_DataGridView_CheckBoxColumnIndeterminateValueDescr();
    internal static string get_DataGridView_CheckBoxColumnThreeStateDescr();
    internal static string get_DataGridView_CheckBoxColumnTrueValueDescr();
    internal static string get_DataGridView_ClipboardCopyModeDescr();
    internal static string get_DataGridView_ColumnAddedDescr();
    internal static string get_DataGridView_ColumnAlreadyBelongsToDataGridView();
    internal static string get_DataGridView_ColumnBoundToAReadOnlyFieldMustRemainReadOnly();
    internal static string get_DataGridView_ColumnContextMenuStripChangedDescr();
    internal static string get_DataGridView_ColumnContextMenuStripDescr();
    internal static string get_DataGridView_ColumnDataPropertyNameChangedDescr();
    internal static string get_DataGridView_ColumnDataPropertyNameDescr();
    internal static string get_DataGridView_ColumnDefaultCellStyleChangedDescr();
    internal static string get_DataGridView_ColumnDefaultCellStyleDescr();
    internal static string get_DataGridView_ColumnDisplayIndexChangedDescr();
    internal static string get_DataGridView_ColumnDividerDoubleClickDescr();
    internal static string get_DataGridView_ColumnDividerWidthChangedDescr();
    internal static string get_DataGridView_ColumnDividerWidthDescr();
    internal static string get_DataGridView_ColumnDoesNotBelongToDataGridView();
    internal static string get_DataGridView_ColumnFrozenDescr();
    internal static string get_DataGridView_ColumnHeaderCellChangedDescr();
    internal static string get_DataGridView_ColumnHeaderMouseClickDescr();
    internal static string get_DataGridView_ColumnHeaderMouseDoubleClickDescr();
    internal static string get_DataGridView_ColumnHeadersBorderStyleChangedDescr();
    internal static string get_DataGridView_ColumnHeadersBorderStyleDescr();
    internal static string get_DataGridView_ColumnHeadersCannotBeInvisible();
    internal static string get_DataGridView_ColumnHeadersDefaultCellStyleDescr();
    internal static string get_DataGridView_ColumnHeadersHeightDescr();
    internal static string get_DataGridView_ColumnHeadersHeightSizeModeChangedDescr();
    internal static string get_DataGridView_ColumnHeadersHeightSizeModeDescr();
    internal static string get_DataGridView_ColumnHeaderTextDescr();
    internal static string get_DataGridView_ColumnMinimumWidthChangedDescr();
    internal static string get_DataGridView_ColumnMinimumWidthDescr();
    internal static string get_DataGridView_ColumnNameChangedDescr();
    internal static string get_DataGridView_ColumnNameDescr();
    internal static string get_DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView();
    internal static string get_DataGridView_ColumnReadOnlyDescr();
    internal static string get_DataGridView_ColumnRemovedDescr();
    internal static string get_DataGridView_ColumnResizableDescr();
    internal static string get_DataGridView_ColumnSortModeDescr();
    internal static string get_DataGridView_ColumnStateChangedDescr();
    internal static string get_DataGridView_ColumnToolTipTextChangedDescr();
    internal static string get_DataGridView_ColumnToolTipTextDescr();
    internal static string get_DataGridView_ColumnVisibleDescr();
    internal static string get_DataGridView_ColumnWidthChangedDescr();
    internal static string get_DataGridView_ColumnWidthDescr();
    internal static string get_DataGridView_ComboBoxColumnAutoCompleteDescr();
    internal static string get_DataGridView_ComboBoxColumnDataSourceDescr();
    internal static string get_DataGridView_ComboBoxColumnDisplayMemberDescr();
    internal static string get_DataGridView_ComboBoxColumnDisplayStyleDescr();
    internal static string get_DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr();
    internal static string get_DataGridView_ComboBoxColumnDropDownWidthDescr();
    internal static string get_DataGridView_ComboBoxColumnFlatStyleDescr();
    internal static string get_DataGridView_ComboBoxColumnItemsDescr();
    internal static string get_DataGridView_ComboBoxColumnMaxDropDownItemsDescr();
    internal static string get_DataGridView_ComboBoxColumnSortedDescr();
    internal static string get_DataGridView_ComboBoxColumnValueMemberDescr();
    internal static string get_DataGridView_CommitFailedCannotCompleteOperation();
    internal static string get_DataGridView_CurrencyManagerRowCannotBeInvisible();
    internal static string get_DataGridView_CurrentCellCannotBeInvisible();
    internal static string get_DataGridView_CurrentCellChangedDescr();
    internal static string get_DataGridView_CurrentCellDirtyStateChangedDescr();
    internal static string get_DataGridView_CustomCellBorderStyleInvalid();
    internal static string get_DataGridView_DataBindingCompleteDescr();
    internal static string get_DataGridView_DataErrorDescr();
    internal static string get_DataGridView_DefaultCellStyleDescr();
    internal static string get_DataGridView_DefaultValuesNeededDescr();
    internal static string get_DataGridView_DisabledClipboardCopy();
    internal static string get_DataGridView_EditingControlShowingDescr();
    internal static string get_DataGridView_EditModeChangedDescr();
    internal static string get_DataGridView_EditModeDescr();
    internal static string get_DataGridView_EmptyColor();
    internal static string get_DataGridView_EnableHeadersVisualStylesDescr();
    internal static string get_DataGridView_ErrorMessageCaption();
    internal static string get_DataGridView_ErrorMessageText_NoException();
    internal static string get_DataGridView_ErrorMessageText_WithException();
    internal static string get_DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell();
    internal static string get_DataGridView_FirstDisplayedCellCannotBeInvisible();
    internal static string get_DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen();
    internal static string get_DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible();
    internal static string get_DataGridView_FirstDisplayedScrollingRowCannotBeFrozen();
    internal static string get_DataGridView_FirstDisplayedScrollingRowCannotBeInvisible();
    internal static string get_DataGridView_ForbiddenOperationInEventHandler();
    internal static string get_DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn();
    internal static string get_DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow();
    internal static string get_DataGridView_HeaderCellReadOnlyProperty();
    internal static string get_DataGridView_IBindingListNeedsToSupportSorting();
    internal static string get_DataGridView_InvalidDataGridViewElementStateCombination();
    internal static string get_DataGridView_InvalidDataGridViewPaintPartsCombination();
    internal static string get_DataGridView_InvalidEditingControl();
    internal static string get_DataGridView_InvalidOperationInVirtualMode();
    internal static string get_DataGridView_InvalidOperationOnSharedCell();
    internal static string get_DataGridView_InvalidOperationOnSharedRow();
    internal static string get_DataGridView_InvalidPropertyGetOnSharedCell();
    internal static string get_DataGridView_InvalidPropertyGetOnSharedRow();
    internal static string get_DataGridView_InvalidPropertySetOnSharedRow();
    internal static string get_DataGridView_LinkColumnActiveLinkColorDescr();
    internal static string get_DataGridView_LinkColumnLinkBehaviorDescr();
    internal static string get_DataGridView_LinkColumnLinkColorDescr();
    internal static string get_DataGridView_LinkColumnTextDescr();
    internal static string get_DataGridView_LinkColumnTrackVisitedStateDescr();
    internal static string get_DataGridView_LinkColumnUseColumnTextForLinkValueDescr();
    internal static string get_DataGridView_LinkColumnVisitedLinkColorDescr();
    internal static string get_DataGridView_MultiSelectDescr();
    internal static string get_DataGridView_NeedAutoSizingCriteria();
    internal static string get_DataGridView_NeedColumnAutoSizingCriteria();
    internal static string get_DataGridView_NewRowNeededDescr();
    internal static string get_DataGridView_NoCurrentCell();
    internal static string get_DataGridView_NoRoomForDisplayedColumns();
    internal static string get_DataGridView_NoRoomForDisplayedRows();
    internal static string get_DataGridView_OperationDisabledInVirtualMode();
    internal static string get_DataGridView_PreviousModesHasWrongLength();
    internal static string get_DataGridView_PropertyMustBeZero();
    internal static string get_DataGridView_ReadOnlyCollection();
    internal static string get_DataGridView_ReadOnlyDescr();
    internal static string get_DataGridView_RowAlreadyBelongsToDataGridView();
    internal static string get_DataGridView_RowContextMenuStripChangedDescr();
    internal static string get_DataGridView_RowContextMenuStripDescr();
    internal static string get_DataGridView_RowContextMenuStripNeededDescr();
    internal static string get_DataGridView_RowDefaultCellStyleChangedDescr();
    internal static string get_DataGridView_RowDefaultCellStyleDescr();
    internal static string get_DataGridView_RowDirtyStateNeededDescr();
    internal static string get_DataGridView_RowDividerDoubleClickDescr();
    internal static string get_DataGridView_RowDividerHeightChangedDescr();
    internal static string get_DataGridView_RowDividerHeightDescr();
    internal static string get_DataGridView_RowDoesNotBelongToDataGridView();
    internal static string get_DataGridView_RowDoesNotYetBelongToDataGridView();
    internal static string get_DataGridView_RowEnterDescr();
    internal static string get_DataGridView_RowErrorTextChangedDescr();
    internal static string get_DataGridView_RowErrorTextDescr();
    internal static string get_DataGridView_RowErrorTextNeededDescr();
    internal static string get_DataGridView_RowHeaderCellAccDefaultAction();
    internal static string get_DataGridView_RowHeaderCellChangedDescr();
    internal static string get_DataGridView_RowHeaderMouseClickDescr();
    internal static string get_DataGridView_RowHeaderMouseDoubleClickDescr();
    internal static string get_DataGridView_RowHeadersBorderStyleChangedDescr();
    internal static string get_DataGridView_RowHeadersBorderStyleDescr();
    internal static string get_DataGridView_RowHeadersCannotBeInvisible();
    internal static string get_DataGridView_RowHeadersDefaultCellStyleDescr();
    internal static string get_DataGridView_RowHeadersWidthDescr();
    internal static string get_DataGridView_RowHeadersWidthSizeModeChangedDescr();
    internal static string get_DataGridView_RowHeadersWidthSizeModeDescr();
    internal static string get_DataGridView_RowHeightChangedDescr();
    internal static string get_DataGridView_RowHeightDescr();
    internal static string get_DataGridView_RowHeightInfoNeededDescr();
    internal static string get_DataGridView_RowHeightInfoPushedDescr();
    internal static string get_DataGridView_RowLeaveDescr();
    internal static string get_DataGridView_RowMinimumHeightChangedDescr();
    internal static string get_DataGridView_RowMinimumHeightDescr();
    internal static string get_DataGridView_RowMustBeUnshared();
    internal static string get_DataGridView_RowPostPaintDescr();
    internal static string get_DataGridView_RowPrePaintDescr();
    internal static string get_DataGridView_RowReadOnlyDescr();
    internal static string get_DataGridView_RowResizableDescr();
    internal static string get_DataGridView_RowsAddedDescr();
    internal static string get_DataGridView_RowsDefaultCellStyleDescr();
    internal static string get_DataGridView_RowsRemovedDescr();
    internal static string get_DataGridView_RowStateChangedDescr();
    internal static string get_DataGridView_RowTemplateDescr();
    internal static string get_DataGridView_RowUnsharedDescr();
    internal static string get_DataGridView_RowValidatedDescr();
    internal static string get_DataGridView_RowValidatingDescr();
    internal static string get_DataGridView_ScrollBarsDescr();
    internal static string get_DataGridView_ScrollDescr();
    internal static string get_DataGridView_SelectionChangedDescr();
    internal static string get_DataGridView_SelectionModeAndSortModeClash();
    internal static string get_DataGridView_SelectionModeDescr();
    internal static string get_DataGridView_SelectionModeReset();
    internal static string get_DataGridView_SetCurrentCellAddressCoreNotReentrant();
    internal static string get_DataGridView_ShowCellErrorsDescr();
    internal static string get_DataGridView_ShowCellToolTipsDescr();
    internal static string get_DataGridView_ShowEditingIconDescr();
    internal static string get_DataGridView_ShowRowErrorsDescr();
    internal static string get_DataGridView_SizeTooLarge();
    internal static string get_DataGridView_SortCompareDescr();
    internal static string get_DataGridView_SortedDescr();
    internal static string get_DataGridView_StandardTabDescr();
    internal static string get_DataGridView_TextBoxColumnMaxInputLengthDescr();
    internal static string get_DataGridView_TransparentColor();
    internal static string get_DataGridView_UserAddedRowDescr();
    internal static string get_DataGridView_UserDeletedRowDescr();
    internal static string get_DataGridView_UserDeletingRowDescr();
    internal static string get_DataGridView_WeightSumCannotExceedLongMaxValue();
    internal static string get_DataGridView_WrongType();
    internal static string get_DataGridViewAlternatingRowsDefaultCellStyleChangedDescr();
    internal static string get_DataGridViewAutoSizeColumnModeChangedDescr();
    internal static string get_DataGridViewAutoSizeColumnsModeChangedDescr();
    internal static string get_DataGridViewAutoSizeRowsModeChangedDescr();
    internal static string get_DataGridViewBackgroundColorChangedDescr();
    internal static string get_DataGridViewBackgroundColorDescr();
    internal static string get_DataGridViewBand_CannotSelect();
    internal static string get_DataGridViewBand_MinimumHeightSmallerThanOne();
    internal static string get_DataGridViewBand_MinimumWidthSmallerThanOne();
    internal static string get_DataGridViewBand_NewRowCannotBeInvisible();
    internal static string get_DataGridViewBeginInit();
    internal static string get_DataGridViewBorderStyleChangedDescr();
    internal static string get_DataGridViewCell_CannotSetReadOnlyState();
    internal static string get_DataGridViewCell_CannotSetSelectedState();
    internal static string get_DataGridViewCell_FormattedValueHasWrongType();
    internal static string get_DataGridViewCell_FormattedValueTypeNull();
    internal static string get_DataGridViewCell_ValueTypeNull();
    internal static string get_DataGridViewCellAccessibleObject_OwnerAlreadySet();
    internal static string get_DataGridViewCellAccessibleObject_OwnerNotSet();
    internal static string get_DataGridViewCellAccessibleObject_OwnerWrongType();
    internal static string get_DataGridViewCellCollection_AtLeastOneCellIsNull();
    internal static string get_DataGridViewCellCollection_CannotAddIdenticalCells();
    internal static string get_DataGridViewCellCollection_CellAlreadyBelongsToDataGridView();
    internal static string get_DataGridViewCellCollection_CellAlreadyBelongsToDataGridViewRow();
    internal static string get_DataGridViewCellCollection_CellNotFound();
    internal static string get_DataGridViewCellCollection_OwningRowAlreadyBelongsToDataGridView();
    internal static string get_DataGridViewCellStyle_TransparentColorNotAllowed();
    internal static string get_DataGridViewCellStyleAlignmentDescr();
    internal static string get_DataGridViewCheckBoxCell_ClipboardChecked();
    internal static string get_DataGridViewCheckBoxCell_ClipboardFalse();
    internal static string get_DataGridViewCheckBoxCell_ClipboardIndeterminate();
    internal static string get_DataGridViewCheckBoxCell_ClipboardTrue();
    internal static string get_DataGridViewCheckBoxCell_ClipboardUnchecked();
    internal static string get_DataGridViewCheckBoxCell_InvalidValueType();
    internal static string get_DataGridViewColumn_AutoSizeCriteriaCannotUseInvisibleHeaders();
    internal static string get_DataGridViewColumn_AutoSizeModeDescr();
    internal static string get_DataGridViewColumn_CellTemplateRequired();
    internal static string get_DataGridViewColumn_DisplayIndexExceedsColumnCount();
    internal static string get_DataGridViewColumn_DisplayIndexNegative();
    internal static string get_DataGridViewColumn_DisplayIndexTooLarge();
    internal static string get_DataGridViewColumn_DisplayIndexTooNegative();
    internal static string get_DataGridViewColumn_FillWeightDescr();
    internal static string get_DataGridViewColumn_FrozenColumnCannotAutoFill();
    internal static string get_DataGridViewColumn_SortModeAndSelectionModeClash();
    internal static string get_DataGridViewColumnCollection_ColumnNotFound();
    internal static string get_DataGridViewColumnHeaderCell_SortModeAndSortGlyphDirectionClash();
    internal static string get_DataGridViewColumnHeadersDefaultCellStyleChangedDescr();
    internal static string get_DataGridViewColumnHeadersHeightChangedDescr();
    internal static string get_DataGridViewColumnHeadersVisibleDescr();
    internal static string get_DataGridViewColumnSortModeChangedDescr();
    internal static string get_DataGridViewComboBoxCell_DropDownWidthOutOfRange();
    internal static string get_DataGridViewComboBoxCell_FieldNotFound();
    internal static string get_DataGridViewComboBoxCell_InvalidValue();
    internal static string get_DataGridViewComboBoxCell_MaxDropDownItemsOutOfRange();
    internal static string get_DataGridViewDataMemberChangedDescr();
    internal static string get_DataGridViewDataMemberDescr();
    internal static string get_DataGridViewDataSourceChangedDescr();
    internal static string get_DataGridViewDataSourceDescr();
    internal static string get_DataGridViewDefaultCellStyleChangedDescr();
    internal static string get_DataGridViewElementPaintingEventArgs_ColumnIndexOutOfRange();
    internal static string get_DataGridViewElementPaintingEventArgs_RowIndexOutOfRange();
    internal static string get_DataGridViewGridColorDescr();
    internal static string get_DataGridViewImageColumn_DescriptionDescr();
    internal static string get_DataGridViewImageColumn_IconDescr();
    internal static string get_DataGridViewImageColumn_ImageDescr();
    internal static string get_DataGridViewImageColumn_ImageLayoutDescr();
    internal static string get_DataGridViewImageColumn_PaddingDescr();
    internal static string get_DataGridViewImageColumn_ValuesAreIconsDescr();
    internal static string get_DataGridViewOnAllowUserToAddRowsChangedDescr();
    internal static string get_DataGridViewOnAllowUserToDeleteRowsChangedDescr();
    internal static string get_DataGridViewOnAllowUserToOrderColumnsChangedDescr();
    internal static string get_DataGridViewOnAllowUserToResizeColumnsChangedDescr();
    internal static string get_DataGridViewOnAllowUserToResizeRowsChangedDescr();
    internal static string get_DataGridViewOnGridColorChangedDescr();
    internal static string get_DataGridViewOnMultiSelectChangedDescr();
    internal static string get_DataGridViewOnReadOnlyChangedDescr();
    internal static string get_DataGridViewRowAccessibleObject_OwnerAlreadySet();
    internal static string get_DataGridViewRowAccessibleObject_OwnerNotSet();
    internal static string get_DataGridViewRowCollection_AddUnboundRow();
    internal static string get_DataGridViewRowCollection_CannotAddOrInsertSelectedRow();
    internal static string get_DataGridViewRowCollection_CannotDeleteNewRow();
    internal static string get_DataGridViewRowCollection_CantClearRowCollectionWithWrongSource();
    internal static string get_DataGridViewRowCollection_CantRemoveRowsWithWrongSource();
    internal static string get_DataGridViewRowCollection_CountOutOfRange();
    internal static string get_DataGridViewRowCollection_EnumFinished();
    internal static string get_DataGridViewRowCollection_EnumNotStarted();
    internal static string get_DataGridViewRowCollection_IndexDestinationOutOfRange();
    internal static string get_DataGridViewRowCollection_IndexSourceOutOfRange();
    internal static string get_DataGridViewRowCollection_NoColumns();
    internal static string get_DataGridViewRowCollection_NoInsertionAfterNewRow();
    internal static string get_DataGridViewRowCollection_NoRowToDuplicate();
    internal static string get_DataGridViewRowCollection_RowIndexOutOfRange();
    internal static string get_DataGridViewRowCollection_RowTemplateTooManyCells();
    internal static string get_DataGridViewRowCollection_TooManyCells();
    internal static string get_DataGridViewRowHeadersDefaultCellStyleChangedDescr();
    internal static string get_DataGridViewRowHeadersVisibleDescr();
    internal static string get_DataGridViewRowHeadersWidthChangedDescr();
    internal static string get_DataGridViewRowsDefaultCellStyleChangedDescr();
    internal static string get_DataGridViewTopRowAccessibleObject_OwnerAlreadySet();
    internal static string get_DataGridViewTopRowAccessibleObject_OwnerNotSet();
    internal static string get_DataGridViewTypeColumn_WrongCellTemplateType();
    internal static string get_DataGridViewVirtualModeDescr();
    internal static string get_DataGridVisibleColumnCountDescr();
    internal static string get_DataGridVisibleRowCountDescr();
    internal static string get_DataObjectWhitespaceEmptyFormatNotAllowed();
    internal static string get_DataObjectDibNotSupported();
    internal static string get_DataSourceDataMemberPropNotFound();
    internal static string get_DataSourceLocksItems();
    internal static string get_DataStreamWrite();
    internal static string get_DateTimePickerCalendarFontDescr();
    internal static string get_DateTimePickerCalendarForeColorDescr();
    internal static string get_DateTimePickerCalendarMonthBackgroundDescr();
    internal static string get_DateTimePickerCalendarTitleBackColorDescr();
    internal static string get_DateTimePickerCalendarTitleForeColorDescr();
    internal static string get_DateTimePickerCalendarTrailingForeColorDescr();
    internal static string get_DateTimePickerCheckedDescr();
    internal static string get_DateTimePickerCustomFormatDescr();
    internal static string get_DateTimePickerDropDownAlignDescr();
    internal static string get_DateTimePickerFormatDescr();
    internal static string get_DateTimePickerMaxDate();
    internal static string get_DateTimePickerMaxDateDescr();
    internal static string get_DateTimePickerMinDate();
    internal static string get_DateTimePickerMinDateDescr();
    internal static string get_DateTimePickerOnCloseUpDescr();
    internal static string get_DateTimePickerOnDropDownDescr();
    internal static string get_DateTimePickerOnFormatChangedDescr();
    internal static string get_DateTimePickerShowNoneDescr();
    internal static string get_DateTimePickerShowUpDownDescr();
    internal static string get_DateTimePickerValueDescr();
    internal static string get_DebuggingExceptionOnly();
    internal static string get_DefManifestNotFound();
    internal static string get_DefaultDataGridViewButtonCellTollTipText();
    internal static string get_DefaultDataGridViewComboBoxCellTollTipText();
    internal static string get_DefaultDataGridViewImageCellToolTipText();
    internal static string get_DefaultDataGridViewLinkCellTollTipText();
    internal static string get_DefaultDataGridViewTextBoxCellTollTipText();
    internal static string get_DescriptionBindingNavigator();
    internal static string get_DescriptionBindingSource();
    internal static string get_DescriptionButton();
    internal static string get_DescriptionCheckBox();
    internal static string get_DescriptionCheckedListBox();
    internal static string get_DescriptionColorDialog();
    internal static string get_DescriptionComboBox();
    internal static string get_DescriptionContextMenuStrip();
    internal static string get_DescriptionDataGridView();
    internal static string get_DescriptionDateTimePicker();
    internal static string get_DescriptionDomainUpDown();
    internal static string get_DescriptionErrorProvider();
    internal static string get_DescriptionFlowLayoutPanel();
    internal static string get_DescriptionFolderBrowserDialog();
    internal static string get_DescriptionFontDialog();
    internal static string get_DescriptionGroupBox();
    internal static string get_DescriptionHelpProvider();
    internal static string get_DescriptionHScrollBar();
    internal static string get_DescriptionImageList();
    internal static string get_DescriptionLabel();
    internal static string get_DescriptionLinkLabel();
    internal static string get_DescriptionListBox();
    internal static string get_DescriptionListView();
    internal static string get_DescriptionMaskedTextBox();
    internal static string get_DescriptionMenuStrip();
    internal static string get_DescriptionMonthCalendar();
    internal static string get_DescriptionNotifyIcon();
    internal static string get_DescriptionNumericUpDown();
    internal static string get_DescriptionOpenFileDialog();
    internal static string get_DescriptionPageSetupDialog();
    internal static string get_DescriptionPanel();
    internal static string get_DescriptionPictureBox();
    internal static string get_DescriptionPrintDialog();
    internal static string get_DescriptionPrintPreviewControl();
    internal static string get_DescriptionPrintPreviewDialog();
    internal static string get_DescriptionProgressBar();
    internal static string get_DescriptionPropertyGrid();
    internal static string get_DescriptionRadioButton();
    internal static string get_DescriptionRichTextBox();
    internal static string get_DescriptionSaveFileDialog();
    internal static string get_DescriptionSplitContainer();
    internal static string get_DescriptionSplitter();
    internal static string get_DescriptionStatusStrip();
    internal static string get_DescriptionTabControl();
    internal static string get_DescriptionTableLayoutPanel();
    internal static string get_DescriptionTextBox();
    internal static string get_DescriptionTimer();
    internal static string get_DescriptionToolStrip();
    internal static string get_DescriptionToolTip();
    internal static string get_DescriptionTrackBar();
    internal static string get_DescriptionTreeView();
    internal static string get_DescriptionVScrollBar();
    internal static string get_DescriptionWebBrowser();
    internal static string get_DispInvokeFailed();
    internal static string get_DomainUpDownItemsDescr();
    internal static string get_DomainUpDownOnSelectedItemChangedDescr();
    internal static string get_DomainUpDownSelectedIndexDescr();
    internal static string get_DomainUpDownSelectedItemDescr();
    internal static string get_DomainUpDownSortedDescr();
    internal static string get_DomainUpDownWrapDescr();
    internal static string get_DragDropRegFailed();
    internal static string get_drawItemEventDescr();
    internal static string get_ErrorBadInputLanguage();
    internal static string get_ErrorCollectionFull();
    internal static string get_ErrorCreatingHandle();
    internal static string get_ErrorNoMarshalingThread();
    internal static string get_ErrorPropertyPageFailed();
    internal static string get_ErrorProviderBlinkRateDescr();
    internal static string get_ErrorProviderBlinkStyleDescr();
    internal static string get_ErrorProviderContainerControlDescr();
    internal static string get_ErrorProviderDataMemberDescr();
    internal static string get_ErrorProviderDataSourceDescr();
    internal static string get_ErrorProviderErrorDescr();
    internal static string get_ErrorProviderIconAlignmentDescr();
    internal static string get_ErrorProviderIconDescr();
    internal static string get_ErrorProviderIconPaddingDescr();
    internal static string get_ErrorSettingWindowRegion();
    internal static string get_ErrorTypeConverterFailed();
    internal static string get_ExceptionCreatingCompEditorControl();
    internal static string get_ExceptionCreatingObject();
    internal static string get_ExDlgCancel();
    internal static string get_ExDlgCaption();
    internal static string get_ExDlgCaption2();
    internal static string get_ExDlgContinue();
    internal static string get_ExDlgContinueErrorText();
    internal static string get_ExDlgDetailsText();
    internal static string get_ExDlgErrorText();
    internal static string get_ExDlgHelp();
    internal static string get_ExDlgMsgExceptionSection();
    internal static string get_ExDlgMsgFooterNonSwitchable();
    internal static string get_ExDlgMsgFooterSwitchable();
    internal static string get_ExDlgMsgHeaderNonSwitchable();
    internal static string get_ExDlgMsgHeaderSwitchable();
    internal static string get_ExDlgMsgJITDebuggingSection();
    internal static string get_ExDlgMsgLoadedAssembliesEntry();
    internal static string get_ExDlgMsgLoadedAssembliesSection();
    internal static string get_ExDlgMsgSectionSeparator();
    internal static string get_ExDlgMsgSeparator();
    internal static string get_ExDlgOk();
    internal static string get_ExDlgQuit();
    internal static string get_ExDlgSecurityContinueErrorText();
    internal static string get_ExDlgSecurityErrorText();
    internal static string get_ExDlgShowDetails();
    internal static string get_ExDlgWarningText();
    internal static string get_ExternalException();
    internal static string get_FDaddExtensionDescr();
    internal static string get_FDcheckFileExistsDescr();
    internal static string get_FDcheckPathExistsDescr();
    internal static string get_FDdefaultExtDescr();
    internal static string get_FDdereferenceLinksDescr();
    internal static string get_FDfileNameDescr();
    internal static string get_FDFileNamesDescr();
    internal static string get_FDfileOkDescr();
    internal static string get_FDfilterDescr();
    internal static string get_FDfilterIndexDescr();
    internal static string get_FDinitialDirDescr();
    internal static string get_FDrestoreDirectoryDescr();
    internal static string get_FDshowHelpDescr();
    internal static string get_FDsupportMultiDottedExtensionsDescr();
    internal static string get_FDtitleDescr();
    internal static string get_FDvalidateNamesDescr();
    internal static string get_FileDialogBufferTooSmall();
    internal static string get_FileDialogCreatePrompt();
    internal static string get_FileDialogFileNotFound();
    internal static string get_FileDialogInvalidFileName();
    internal static string get_FileDialogInvalidFilter();
    internal static string get_FileDialogInvalidFilterIndex();
    internal static string get_FileDialogOverwritePrompt();
    internal static string get_FileDialogSubLassFailure();
    internal static string get_FilterRequiresIBindingListView();
    internal static string get_FindKeyMayNotBeEmptyOrNull();
    internal static string get_FlowPanelFlowDirectionDescr();
    internal static string get_FlowPanelWrapContentsDescr();
    internal static string get_FnDallowScriptChangeDescr();
    internal static string get_FnDallowSimulationsDescr();
    internal static string get_FnDallowVectorFontsDescr();
    internal static string get_FnDallowVerticalFontsDescr();
    internal static string get_FnDapplyDescr();
    internal static string get_FnDcolorDescr();
    internal static string get_FnDfixedPitchOnlyDescr();
    internal static string get_FnDfontDescr();
    internal static string get_FnDfontMustExistDescr();
    internal static string get_FnDmaxSizeDescr();
    internal static string get_FnDminSizeDescr();
    internal static string get_FnDscriptsOnlyDescr();
    internal static string get_FnDshowApplyDescr();
    internal static string get_FnDshowColorDescr();
    internal static string get_FnDshowEffectsDescr();
    internal static string get_FnDshowHelpDescr();
    internal static string get_FolderBrowserDialogDescription();
    internal static string get_FolderBrowserDialogRootFolder();
    internal static string get_FolderBrowserDialogSelectedPath();
    internal static string get_FolderBrowserDialogShowNewFolderButton();
    internal static string get_FormAcceptButtonDescr();
    internal static string get_FormActiveMDIChildDescr();
    internal static string get_FormatControlFormatDescr();
    internal static string get_Formatter_CantConvert();
    internal static string get_Formatter_CantConvertNull();
    internal static string get_FormAutoScaleDescr();
    internal static string get_FormAutoScrollDescr();
    internal static string get_FormAutoScrollMarginDescr();
    internal static string get_FormAutoScrollMinSizeDescr();
    internal static string get_FormAutoScrollPositionDescr();
    internal static string get_FormBorderStyleDescr();
    internal static string get_FormCancelButtonDescr();
    internal static string get_FormControlBoxDescr();
    internal static string get_FormDesktopBoundsDescr();
    internal static string get_FormDesktopLocationDescr();
    internal static string get_FormDialogResultDescr();
    internal static string get_FormHelpButtonClickedDescr();
    internal static string get_FormHelpButtonDescr();
    internal static string get_FormIconDescr();
    internal static string get_FormIsMDIChildDescr();
    internal static string get_FormIsMDIContainerDescr();
    internal static string get_FormKeyPreviewDescr();
    internal static string get_FormMaximizeBoxDescr();
    internal static string get_FormMaximumSizeDescr();
    internal static string get_FormMDIChildrenDescr();
    internal static string get_FormMdiChildrenMinimizedAnchorBottomDescr();
    internal static string get_FormMDIParentAndChild();
    internal static string get_FormMDIParentCannotAdd();
    internal static string get_FormMDIParentDescr();
    internal static string get_FormMenuStripDescr();
    internal static string get_FormMinimizeBoxDescr();
    internal static string get_FormMinimumSizeDescr();
    internal static string get_FormModalDescr();
    internal static string get_FormOnActivateDescr();
    internal static string get_FormOnClosedDescr();
    internal static string get_FormOnClosingDescr();
    internal static string get_FormOnDeactivateDescr();
    internal static string get_FormOnFormClosedDescr();
    internal static string get_FormOnFormClosingDescr();
    internal static string get_FormOnInputLangChangeDescr();
    internal static string get_FormOnInputLangChangeRequestDescr();
    internal static string get_FormOnLoadDescr();
    internal static string get_FormOnMaximizedBoundsChangedDescr();
    internal static string get_FormOnMaximumSizeChangedDescr();
    internal static string get_FormOnMDIChildActivateDescr();
    internal static string get_FormOnMenuCompleteDescr();
    internal static string get_FormOnMenuStartDescr();
    internal static string get_FormOnMinimumSizeChangedDescr();
    internal static string get_FormOnResizeBeginDescr();
    internal static string get_FormOnResizeEndDescr();
    internal static string get_FormOnShownDescr();
    internal static string get_FormOpacityDescr();
    internal static string get_FormOwnedFormsDescr();
    internal static string get_FormOwnerDescr();
    internal static string get_FormShowIconDescr();
    internal static string get_FormShowInTaskbarDescr();
    internal static string get_FormSizeGripStyleDescr();
    internal static string get_FormStartPositionDescr();
    internal static string get_FormTopMostDescr();
    internal static string get_FormTransparencyKeyDescr();
    internal static string get_FormWindowStateDescr();
    internal static string get_GridItemNotExpandable();
    internal static string get_GridPanelCellPositionDescr();
    internal static string get_GridPanelColumnDescr();
    internal static string get_GridPanelColumnsDescr();
    internal static string get_GridPanelColumnStylesDescr();
    internal static string get_GridPanelGetAlignmentDescr();
    internal static string get_GridPanelGetBoxStretchDescr();
    internal static string get_GridPanelGetColumnSpanDescr();
    internal static string get_GridPanelGetRowSpanDescr();
    internal static string get_GridPanelRowDescr();
    internal static string get_GridPanelRowsDescr();
    internal static string get_GridPanelRowStylesDescr();
    internal static string get_HandleAlreadyExists();
    internal static string get_HelpCaption();
    internal static string get_HelpInvalidURL();
    internal static string get_HelpProviderHelpKeywordDescr();
    internal static string get_HelpProviderHelpNamespaceDescr();
    internal static string get_HelpProviderHelpStringDescr();
    internal static string get_HelpProviderNavigatorDescr();
    internal static string get_HelpProviderShowHelpDescr();
    internal static string get_HtmlDocumentInvalidDomain();
    internal static string get_HtmlElementAttributeNotSupported();
    internal static string get_HtmlElementMethodNotSupported();
    internal static string get_HtmlElementPropertyNotSupported();
    internal static string get_ICurrencyManagerProviderDescr();
    internal static string get_IllegalCrossThreadCall();
    internal static string get_IllegalCrossThreadCallWithStack();
    internal static string get_IllegalState();
    internal static string get_ImageListAddFailed();
    internal static string get_ImageListAllowMirroringDescr();
    internal static string get_ImageListBadImage();
    internal static string get_ImageListBitmap();
    internal static string get_ImageListColorDepthDescr();
    internal static string get_ImageListCreateFailed();
    internal static string get_ImageListDuplicateFailed();
    internal static string get_ImageListEntryType();
    internal static string get_ImageListGetFailed();
    internal static string get_ImageListHandleCreatedDescr();
    internal static string get_ImageListHandleDescr();
    internal static string get_ImageListImagesDescr();
    internal static string get_ImageListImageStreamDescr();
    internal static string get_ImageListImageTooShort();
    internal static string get_ImageListOnRecreateHandleDescr();
    internal static string get_ImageListRemoveFailed();
    internal static string get_ImageListReplaceFailed();
    internal static string get_ImageListRightToLeftInvalidArgument();
    internal static string get_ImageListSizeDescr();
    internal static string get_ImageListStreamerLoadFailed();
    internal static string get_ImageListStreamerSaveFailed();
    internal static string get_ImageListStripBadWidth();
    internal static string get_ImageListTransparentColorDescr();
    internal static string get_IndexOutOfRange();
    internal static string get_Invalid_boolean_attribute();
    internal static string get_InvalidArgument();
    internal static string get_InvalidBoundArgument();
    internal static string get_InvalidCrossThreadControlCall();
    internal static string get_InvalidExBoundArgument();
    internal static string get_InvalidFileFormat();
    internal static string get_InvalidFileType();
    internal static string get_InvalidGDIHandle();
    internal static string get_InvalidHighBoundArgument();
    internal static string get_InvalidHighBoundArgumentEx();
    internal static string get_InvalidLowBoundArgument();
    internal static string get_InvalidLowBoundArgumentEx();
    internal static string get_InvalidNullArgument();
    internal static string get_InvalidNullItemInCollection();
    internal static string get_InvalidPictureFormat();
    internal static string get_InvalidPictureType();
    internal static string get_InvalidResXBasePathOperation();
    internal static string get_InvalidResXFile();
    internal static string get_InvalidResXFileReaderWriterTypes();
    internal static string get_InvalidResXNoType();
    internal static string get_InvalidResXResourceNoName();
    internal static string get_InvalidSendKeysKeyword();
    internal static string get_InvalidSendKeysRepeat();
    internal static string get_InvalidSendKeysString();
    internal static string get_InvalidSingleMonthSize();
    internal static string get_InvalidWndClsName();
    internal static string get_InvocationException();
    internal static string get_IsMirroredDescr();
    internal static string get_ISupportInitializeDescr();
    internal static string get_KeysConverterInvalidKeyCombination();
    internal static string get_LabelAutoEllipsisDescr();
    internal static string get_LabelAutoSizeDescr();
    internal static string get_LabelBackgroundImageDescr();
    internal static string get_LabelBorderDescr();
    internal static string get_LabelOnTextAlignChangedDescr();
    internal static string get_LabelPreferredHeightDescr();
    internal static string get_LabelPreferredWidthDescr();
    internal static string get_LabelTextAlignDescr();
    internal static string get_LabelUseMnemonicDescr();
    internal static string get_LayoutEngineUnsupportedType();
    internal static string get_LinkLabelActiveLinkColorDescr();
    internal static string get_LinkLabelAreaLength();
    internal static string get_LinkLabelAreaStart();
    internal static string get_LinkLabelBadLink();
    internal static string get_LinkLabelDisabledLinkColorDescr();
    internal static string get_LinkLabelLinkAreaDescr();
    internal static string get_LinkLabelLinkBehaviorDescr();
    internal static string get_LinkLabelLinkClickedDescr();
    internal static string get_LinkLabelLinkColorDescr();
    internal static string get_LinkLabelLinkVisitedDescr();
    internal static string get_LinkLabelOverlap();
    internal static string get_LinkLabelVisitedLinkColorDescr();
    internal static string get_ListBindingBindField();
    internal static string get_ListBindingBindProperty();
    internal static string get_ListBindingBindPropertyReadOnly();
    internal static string get_ListBindingFormatFailed();
    internal static string get_ListBoxBorderDescr();
    internal static string get_ListBoxCantInsertIntoIntegerCollection();
    internal static string get_ListBoxColumnWidthDescr();
    internal static string get_ListBoxCustomTabOffsetsDescr();
    internal static string get_ListBoxDrawModeDescr();
    internal static string get_ListBoxHorizontalExtentDescr();
    internal static string get_ListBoxHorizontalScrollbarDescr();
    internal static string get_ListBoxIntegralHeightDescr();
    internal static string get_ListBoxInvalidSelectionMode();
    internal static string get_ListBoxItemHeightDescr();
    internal static string get_ListBoxItemOverflow();
    internal static string get_ListBoxItemsDescr();
    internal static string get_ListBoxMultiColumnDescr();
    internal static string get_ListBoxPreferredHeightDescr();
    internal static string get_ListBoxScrollIsVisibleDescr();
    internal static string get_ListBoxSelectedIndexCollectionIsReadOnly();
    internal static string get_ListBoxSelectedIndexDescr();
    internal static string get_ListBoxSelectedIndicesDescr();
    internal static string get_ListBoxSelectedItemDescr();
    internal static string get_ListBoxSelectedItemsDescr();
    internal static string get_ListBoxSelectedObjectCollectionIsReadOnly();
    internal static string get_ListBoxSelectionModeDescr();
    internal static string get_ListBoxSortedDescr();
    internal static string get_ListBoxTopIndexDescr();
    internal static string get_ListBoxUseTabStopsDescr();
    internal static string get_ListBoxVarHeightMultiCol();
    internal static string get_ListControlDataSourceDescr();
    internal static string get_ListControlDisplayMemberDescr();
    internal static string get_ListControlEmptyValueMemberInSettingSelectedValue();
    internal static string get_ListControlFormatDescr();
    internal static string get_ListControlFormatInfoChangedDescr();
    internal static string get_ListControlFormatStringChangedDescr();
    internal static string get_ListControlFormatStringDescr();
    internal static string get_ListControlFormattingEnabledChangedDescr();
    internal static string get_ListControlFormattingEnabledDescr();
    internal static string get_ListControlOnDataSourceChangedDescr();
    internal static string get_ListControlOnDisplayMemberChangedDescr();
    internal static string get_ListControlOnSelectedValueChangedDescr();
    internal static string get_ListControlOnValueMemberChangedDescr();
    internal static string get_ListControlSelectedValueDescr();
    internal static string get_ListControlValueMemberDescr();
    internal static string get_ListControlWrongDisplayMember();
    internal static string get_ListControlWrongValueMember();
    internal static string get_ListEnumCurrentOutOfRange();
    internal static string get_ListEnumVersionMismatch();
    internal static string get_ListManagerBadPosition();
    internal static string get_ListManagerEmptyList();
    internal static string get_ListManagerNoValue();
    internal static string get_ListManagerSetDataSource();
    internal static string get_ListViewActivationDescr();
    internal static string get_ListViewActivationMustBeOnWhenHotTrackingIsOn();
    internal static string get_ListViewAddColumnFailed();
    internal static string get_ListViewAddItemFailed();
    internal static string get_ListViewAfterLabelEditDescr();
    internal static string get_ListViewAlignmentDescr();
    internal static string get_ListViewAllowColumnReorderDescr();
    internal static string get_ListViewAutoArrangeDescr();
    internal static string get_ListViewBackgroundImageTiledDescr();
    internal static string get_ListViewBadListViewSubItem();
    internal static string get_ListViewBeforeLabelEditDescr();
    internal static string get_ListViewBeginEditFailed();
    internal static string get_ListViewCacheVirtualItemsEventDescr();
    internal static string get_ListViewCantAccessCheckedItemsCollectionWhenInVirtualMode();
    internal static string get_ListViewCantAccessSelectedItemsCollectionWhenInVirtualMode();
    internal static string get_ListViewCantAddItemsToAVirtualListView();
    internal static string get_ListViewCantGetEnumeratorInVirtualMode();
    internal static string get_ListViewCantModifyTheItemCollInAVirtualListView();
    internal static string get_ListViewCantRemoveItemsFromAVirtualListView();
    internal static string get_ListViewCantSetViewToTileViewInVirtualMode();
    internal static string get_ListViewCantSetVirtualModeWhenInTileView();
    internal static string get_ListViewCheckBoxesDescr();
    internal static string get_ListViewCheckBoxesNotSupportedInTileView();
    internal static string get_ListViewColumnClickDescr();
    internal static string get_ListViewColumnInfoSet();
    internal static string get_ListViewColumnReorderedDscr();
    internal static string get_ListViewColumnsDescr();
    internal static string get_ListViewColumnWidthChangedDscr();
    internal static string get_ListViewColumnWidthChangingDscr();
    internal static string get_ListViewDrawColumnHeaderEventDescr();
    internal static string get_ListViewDrawItemEventDescr();
    internal static string get_ListViewDrawSubItemEventDescr();
    internal static string get_ListViewFindNearestItemWorksOnlyInIconView();
    internal static string get_ListViewFocusedItemDescr();
    internal static string get_ListViewFullRowSelectDescr();
    internal static string get_ListViewGetTopItem();
    internal static string get_ListViewGridLinesDescr();
    internal static string get_ListViewGroupDefaultGroup();
    internal static string get_ListViewGroupDefaultHeader();
    internal static string get_ListViewGroupNameDescr();
    internal static string get_ListViewGroupsDescr();
    internal static string get_ListViewGroupCollectionBadListViewGroup();
    internal static string get_ListViewHeaderStyleDescr();
    internal static string get_ListViewHideSelectionDescr();
    internal static string get_ListViewHotTrackingDescr();
    internal static string get_ListViewHoverMustBeOnWhenHotTrackingIsOn();
    internal static string get_ListViewHoverSelectDescr();
    internal static string get_ListViewIndentCountCantBeNegative();
    internal static string get_ListViewInsertionMarkDescr();
    internal static string get_ListViewItemCheckedDescr();
    internal static string get_ListViewItemClickDescr();
    internal static string get_ListViewItemDragDescr();
    internal static string get_ListViewItemImageIndexDescr();
    internal static string get_ListViewItemImageKeyDescr();
    internal static string get_ListViewItemIndentCountDescr();
    internal static string get_ListViewItemMouseHoverDescr();
    internal static string get_ListViewItemsDescr();
    internal static string get_ListViewItemSelectionChangedDescr();
    internal static string get_ListViewItemSorterDescr();
    internal static string get_ListViewItemStateImageIndexDescr();
    internal static string get_ListViewItemStateImageKeyDescr();
    internal static string get_ListViewItemSubItemsDescr();
    internal static string get_ListViewLabelEditDescr();
    internal static string get_ListViewLabelWrapDescr();
    internal static string get_ListViewLargeImageListDescr();
    internal static string get_ListViewMultiSelectDescr();
    internal static string get_ListViewOwnerDrawDescr();
    internal static string get_ListViewRetrieveVirtualItemEventDescr();
    internal static string get_ListViewScrollableDescr();
    internal static string get_ListViewSearchForVirtualItemDescr();
    internal static string get_ListViewSelectedIndexChangedDescr();
    internal static string get_ListViewSelectedItemsDescr();
    internal static string get_ListViewSetTopItem();
    internal static string get_ListViewShowGroupsDescr();
    internal static string get_ListViewShowItemToolTipsDescr();
    internal static string get_ListViewSmallImageListDescr();
    internal static string get_ListViewSortingDescr();
    internal static string get_ListViewSortNotAllowedInVirtualListView();
    internal static string get_ListViewStartIndexCannotBeLargerThanEndIndex();
    internal static string get_ListViewStateImageListDescr();
    internal static string get_ListViewSubItemCollectionInvalidArgument();
    internal static string get_ListViewTileSizeDescr();
    internal static string get_ListViewTileSizeMustBePositive();
    internal static string get_ListViewTileViewDoesNotSupportCheckBoxes();
    internal static string get_ListViewTopItemDescr();
    internal static string get_ListViewViewDescr();
    internal static string get_ListViewVirtualItemRequired();
    internal static string get_ListViewVirtualItemsSelectionRangeChangedDescr();
    internal static string get_ListViewVirtualItemStateChangedDescr();
    internal static string get_ListViewVirtualListSizeDescr();
    internal static string get_ListViewVirtualListSizeInvalidArgument();
    internal static string get_ListViewVirtualListViewRequiresNoCheckedItems();
    internal static string get_ListViewVirtualListViewRequiresNoItems();
    internal static string get_ListViewVirtualListViewRequiresNoSelectedItems();
    internal static string get_ListViewVirtualModeCantAccessSubItem();
    internal static string get_ListViewVirtualModeDescr();
    internal static string get_LoadDLLError();
    internal static string get_LoadTextError();
    internal static string get_MaskedTextBoxAllowPromptAsInputDescr();
    internal static string get_MaskedTextBoxAsciiOnlyDescr();
    internal static string get_MaskedTextBoxBeepOnErrorDescr();
    internal static string get_MaskedTextBoxCultureDescr();
    internal static string get_MaskedTextBoxCutCopyMaskFormat();
    internal static string get_MaskedTextBoxHidePromptOnLeaveDescr();
    internal static string get_MaskedTextBoxIncompleteMsg();
    internal static string get_MaskedTextBoxInsertKeyModeDescr();
    internal static string get_MaskedTextBoxInvalidCharError();
    internal static string get_MaskedTextBoxIsOverwriteModeChangedDescr();
    internal static string get_MaskedTextBoxMaskChangedDescr();
    internal static string get_MaskedTextBoxMaskDescr();
    internal static string get_MaskedTextBoxMaskInputRejectedDescr();
    internal static string get_MaskedTextBoxMaskInvalidChar();
    internal static string get_MaskedTextBoxPasswordAndPromptCharError();
    internal static string get_MaskedTextBoxPasswordCharDescr();
    internal static string get_MaskedTextBoxPromptCharDescr();
    internal static string get_MaskedTextBoxRejectInputOnFirstFailureDescr();
    internal static string get_MaskedTextBoxResetOnPrompt();
    internal static string get_MaskedTextBoxResetOnSpace();
    internal static string get_MaskedTextBoxSkipLiterals();
    internal static string get_MaskedTextBoxTextMaskFormat();
    internal static string get_MaskedTextBoxTypeValidationCompletedDescr();
    internal static string get_MaskedTextBoxTypeValidationSucceeded();
    internal static string get_MaskedTextBoxUseSystemPasswordCharDescr();
    internal static string get_MaskedTextBoxValidatedValueChangedDescr();
    internal static string get_MaskedTextBoxValidatingTypeDescr();
    internal static string get_MDIChildAddToNonMDIParent();
    internal static string get_MDIContainerMustBeTopLevel();
    internal static string get_MDIMenuMoreWindows();
    internal static string get_MDIParentNotContainer();
    internal static string get_measureItemEventDescr();
    internal static string get_MenuItemShortCutDescr();
    internal static string get_MenuItemShowShortCutDescr();
    internal static string get_MenuStripMdiWindowListItem();
    internal static string get_MenuStripMenuActivateDescr();
    internal static string get_MenuStripMenuDeactivateDescr();
    internal static string get_MonthCalendarAnnuallyBoldedDatesDescr();
    internal static string get_MonthCalendarBodyAccessibleName();
    internal static string get_MonthCalendarDimensionsDescr();
    internal static string get_MonthCalendarFirstDayOfWeekDescr();
    internal static string get_MonthCalendarForeColorDescr();
    internal static string get_MonthCalendarInvalidDimensions();
    internal static string get_MonthCalendarMaxDateDescr();
    internal static string get_MonthCalendarMaxSelCount();
    internal static string get_MonthCalendarMaxSelectionCountDescr();
    internal static string get_MonthCalendarMinDateDescr();
    internal static string get_MonthCalendarMonthBackColorDescr();
    internal static string get_MonthCalendarMonthlyBoldedDatesDescr();
    internal static string get_MonthCalendarNextButtonAccessibleName();
    internal static string get_MonthCalendarOnDateChangedDescr();
    internal static string get_MonthCalendarOnDateSelectedDescr();
    internal static string get_MonthCalendarPreviousButtonAccessibleName();
    internal static string get_MonthCalendarRange();
    internal static string get_MonthCalendarScrollChangeDescr();
    internal static string get_MonthCalendarSelectionEndDescr();
    internal static string get_MonthCalendarSelectionRangeDescr();
    internal static string get_MonthCalendarSelectionStartDescr();
    internal static string get_MonthCalendarShowTodayCircleDescr();
    internal static string get_MonthCalendarShowTodayDescr();
    internal static string get_MonthCalendarShowWeekNumbersDescr();
    internal static string get_MonthCalendarSingleMonthSizeDescr();
    internal static string get_MonthCalendarTitleBackColorDescr();
    internal static string get_MonthCalendarTitleForeColorDescr();
    internal static string get_MonthCalendarTodayButtonAccessibleName();
    internal static string get_MonthCalendarTodayDateDescr();
    internal static string get_MonthCalendarTodayDateSetDescr();
    internal static string get_MonthCalendarTrailingForeColorDescr();
    internal static string get_NoAllowNewOnReadOnlyList();
    internal static string get_NoAllowRemoveOnReadOnlyList();
    internal static string get_NoDefaultConstructor();
    internal static string get_NoMoreColumns();
    internal static string get_NonTopLevelCantHaveOwner();
    internal static string get_NotAvailable();
    internal static string get_NotifyIconBalloonTipIconDescr();
    internal static string get_NotifyIconBalloonTipTextDescr();
    internal static string get_NotifyIconBalloonTipTitleDescr();
    internal static string get_NotifyIconEmptyOrNullTipText();
    internal static string get_NotifyIconIconDescr();
    internal static string get_NotifyIconMenuDescr();
    internal static string get_NotifyIconMouseClickDescr();
    internal static string get_NotifyIconMouseDoubleClickDescr();
    internal static string get_NotifyIconOnBalloonTipClickedDescr();
    internal static string get_NotifyIconOnBalloonTipClosedDescr();
    internal static string get_NotifyIconOnBalloonTipShownDescr();
    internal static string get_NotifyIconTextDescr();
    internal static string get_NotifyIconVisDescr();
    internal static string get_NotSerializableType();
    internal static string get_NotSupported();
    internal static string get_NumericUpDownAccelerationCollectionAtLeastOneEntryIsNull();
    internal static string get_NumericUpDownAccelerationCompareException();
    internal static string get_NumericUpDownDecimalPlacesDescr();
    internal static string get_NumericUpDownHexadecimalDescr();
    internal static string get_NumericUpDownIncrementDescr();
    internal static string get_NumericUpDownLessThanZeroError();
    internal static string get_NumericUpDownMaximumDescr();
    internal static string get_NumericUpDownMinimumDescr();
    internal static string get_NumericUpDownOnValueChangedDescr();
    internal static string get_NumericUpDownThousandsSeparatorDescr();
    internal static string get_NumericUpDownValueDescr();
    internal static string get_ObjectHasParent();
    internal static string get_OFDcheckFileExistsDescr();
    internal static string get_OFDmultiSelectDescr();
    internal static string get_OFDreadOnlyCheckedDescr();
    internal static string get_OFDshowReadOnlyDescr();
    internal static string get_OKCaption();
    internal static string get_OnlyOneControl();
    internal static string get_OperationRequiresIBindingList();
    internal static string get_OperationRequiresIBindingListView();
    internal static string get_OutOfMemory();
    internal static string get_OwnsSelfOrOwner();
    internal static string get_PaddingAllDescr();
    internal static string get_PaddingBottomDescr();
    internal static string get_PaddingLeftDescr();
    internal static string get_PaddingRightDescr();
    internal static string get_PaddingTopDescr();
    internal static string get_PanelBorderStyleDescr();
    internal static string get_PropertyGridHelpPaneTitle();
    internal static string get_PBRSErrorInvalidPropertyValue();
    internal static string get_PBRSErrorTitle();
    internal static string get_PBRSFormatExceptionMessage();
    internal static string get_PBRSToolTipAlphabetic();
    internal static string get_PBRSToolTipCategorized();
    internal static string get_PBRSToolTipEvents();
    internal static string get_PBRSToolTipProperties();
    internal static string get_PBRSToolTipPropertyPages();
    internal static string get_PDallowCurrentPageDescr();
    internal static string get_PDallowPagesDescr();
    internal static string get_PDallowPrintToFileDescr();
    internal static string get_PDallowSelectionDescr();
    internal static string get_PDcantShowWithoutPrinter();
    internal static string get_PDdocumentDescr();
    internal static string get_PDpageOutOfRange();
    internal static string get_PDprinterSettingsDescr();
    internal static string get_PDprintToFileDescr();
    internal static string get_PDshowHelpDescr();
    internal static string get_PDshowNetworkDescr();
    internal static string get_PDuseEXDialog();
    internal static string get_PictureBoxBorderStyleDescr();
    internal static string get_PictureBoxCancelAsyncDescr();
    internal static string get_PictureBoxErrorImageDescr();
    internal static string get_PictureBoxImageDescr();
    internal static string get_PictureBoxImageLocationDescr();
    internal static string get_PictureBoxInitialImageDescr();
    internal static string get_PictureBoxLoad0Descr();
    internal static string get_PictureBoxLoad1Descr();
    internal static string get_PictureBoxLoadAsync0Descr();
    internal static string get_PictureBoxLoadAsync1Descr();
    internal static string get_PictureBoxLoadCompletedDescr();
    internal static string get_PictureBoxLoadProgressChangedDescr();
    internal static string get_PictureBoxLoadProgressDescr();
    internal static string get_PictureBoxNoImageLocation();
    internal static string get_PictureBoxOnSizeModeChangedDescr();
    internal static string get_PictureBoxSizeModeDescr();
    internal static string get_PictureBoxWaitOnLoadDescr();
    internal static string get_PictureBoxRemoteLocationNotSupported();
    internal static string get_PopupControlBadParentArgument();
    internal static string get_PreviewKeyDownDescr();
    internal static string get_PrintControllerWithStatusDialog_Cancel();
    internal static string get_PrintControllerWithStatusDialog_Canceling();
    internal static string get_PrintControllerWithStatusDialog_DialogTitlePreview();
    internal static string get_PrintControllerWithStatusDialog_DialogTitlePrint();
    internal static string get_PrintControllerWithStatusDialog_NowPrinting();
    internal static string get_PrintPreviewAntiAliasDescr();
    internal static string get_PrintPreviewAutoZoomDescr();
    internal static string get_PrintPreviewColumnsDescr();
    internal static string get_PrintPreviewControlZoomNegative();
    internal static string get_PrintPreviewDialog_PrintPreview();
    internal static string get_PrintPreviewDocumentDescr();
    internal static string get_PrintPreviewExceptionPrinting();
    internal static string get_PrintPreviewNoPages();
    internal static string get_PrintPreviewPrintPreviewControlDescr();
    internal static string get_PrintPreviewRowsDescr();
    internal static string get_PrintPreviewStartPageDescr();
    internal static string get_PrintPreviewZoomDescr();
    internal static string get_ProfessionalColorsButtonCheckedGradientBeginDescr();
    internal static string get_ProfessionalColorsButtonCheckedGradientEndDescr();
    internal static string get_ProfessionalColorsButtonCheckedGradientMiddleDescr();
    internal static string get_ProfessionalColorsButtonCheckedHighlightBorderDescr();
    internal static string get_ProfessionalColorsButtonCheckedHighlightDescr();
    internal static string get_ProfessionalColorsButtonPressedBorderDescr();
    internal static string get_ProfessionalColorsButtonPressedGradientBeginDescr();
    internal static string get_ProfessionalColorsButtonPressedGradientEndDescr();
    internal static string get_ProfessionalColorsButtonPressedGradientMiddleDescr();
    internal static string get_ProfessionalColorsButtonPressedHighlightBorderDescr();
    internal static string get_ProfessionalColorsButtonPressedHighlightDescr();
    internal static string get_ProfessionalColorsButtonSelectedBorderDescr();
    internal static string get_ProfessionalColorsButtonSelectedGradientBeginDescr();
    internal static string get_ProfessionalColorsButtonSelectedGradientEndDescr();
    internal static string get_ProfessionalColorsButtonSelectedGradientMiddleDescr();
    internal static string get_ProfessionalColorsButtonSelectedHighlightBorderDescr();
    internal static string get_ProfessionalColorsButtonSelectedHighlightDescr();
    internal static string get_ProfessionalColorsCheckBackgroundDescr();
    internal static string get_ProfessionalColorsCheckPressedBackgroundDescr();
    internal static string get_ProfessionalColorsCheckSelectedBackgroundDescr();
    internal static string get_ProfessionalColorsGripDarkDescr();
    internal static string get_ProfessionalColorsGripLightDescr();
    internal static string get_ProfessionalColorsImageMarginGradientBeginDescr();
    internal static string get_ProfessionalColorsImageMarginGradientEndDescr();
    internal static string get_ProfessionalColorsImageMarginGradientMiddleDescr();
    internal static string get_ProfessionalColorsImageMarginRevealedGradientBeginDescr();
    internal static string get_ProfessionalColorsImageMarginRevealedGradientEndDescr();
    internal static string get_ProfessionalColorsImageMarginRevealedGradientMiddleDescr();
    internal static string get_ProfessionalColorsMenuBorderDescr();
    internal static string get_ProfessionalColorsMenuItemBorderDescr();
    internal static string get_ProfessionalColorsMenuItemPressedGradientBeginDescr();
    internal static string get_ProfessionalColorsMenuItemPressedGradientEndDescr();
    internal static string get_ProfessionalColorsMenuItemPressedGradientMiddleDescr();
    internal static string get_ProfessionalColorsMenuItemSelectedDescr();
    internal static string get_ProfessionalColorsMenuItemSelectedGradientBeginDescr();
    internal static string get_ProfessionalColorsMenuItemSelectedGradientEndDescr();
    internal static string get_ProfessionalColorsMenuStripGradientBeginDescr();
    internal static string get_ProfessionalColorsMenuStripGradientEndDescr();
    internal static string get_ProfessionalColorsOverflowButtonGradientBeginDescr();
    internal static string get_ProfessionalColorsOverflowButtonGradientEndDescr();
    internal static string get_ProfessionalColorsOverflowButtonGradientMiddleDescr();
    internal static string get_ProfessionalColorsRaftingContainerGradientBeginDescr();
    internal static string get_ProfessionalColorsRaftingContainerGradientEndDescr();
    internal static string get_ProfessionalColorsSeparatorDarkDescr();
    internal static string get_ProfessionalColorsSeparatorLightDescr();
    internal static string get_ProfessionalColorsStatusStripGradientBeginDescr();
    internal static string get_ProfessionalColorsStatusStripGradientEndDescr();
    internal static string get_ProfessionalColorsToolStripBorderDescr();
    internal static string get_ProfessionalColorsToolStripContentPanelGradientBeginDescr();
    internal static string get_ProfessionalColorsToolStripContentPanelGradientEndDescr();
    internal static string get_ProfessionalColorsToolStripDropDownBackgroundDescr();
    internal static string get_ProfessionalColorsToolStripGradientBeginDescr();
    internal static string get_ProfessionalColorsToolStripGradientEndDescr();
    internal static string get_ProfessionalColorsToolStripGradientMiddleDescr();
    internal static string get_ProfessionalColorsToolStripPanelGradientBeginDescr();
    internal static string get_ProfessionalColorsToolStripPanelGradientEndDescr();
    internal static string get_ProgressBarDefaultAccessibleName();
    internal static string get_ProgressBarIncrementMarqueeException();
    internal static string get_ProgressBarMarqueeAnimationSpeed();
    internal static string get_ProgressBarMaximumDescr();
    internal static string get_ProgressBarMinimumDescr();
    internal static string get_ProgressBarPerformStepMarqueeException();
    internal static string get_ProgressBarStepDescr();
    internal static string get_ProgressBarStyleDescr();
    internal static string get_ProgressBarValueDescr();
    internal static string get_ProgressBarValueMarqueeException();
    internal static string get_PropertyCategoryAppearance();
    internal static string get_PropertyCategoryBehavior();
    internal static string get_PropertyCategoryData();
    internal static string get_PropertyCategoryDDE();
    internal static string get_PropertyCategoryFont();
    internal static string get_PropertyCategoryList();
    internal static string get_PropertyCategoryMisc();
    internal static string get_PropertyCategoryPosition();
    internal static string get_PropertyCategoryScale();
    internal static string get_PropertyCategoryText();
    internal static string get_PropertyGridBadTabIndex();
    internal static string get_PropertyGridCanShowCommandsDesc();
    internal static string get_PropertyGridCanShowVisualStyleGlyphsDesc();
    internal static string get_PropertyGridCategoryForeColorDesc();
    internal static string get_PropertyGridCategorySplitterColorDesc();
    internal static string get_PropertyGridCommandsActiveLinkColorDesc();
    internal static string get_PropertyGridCommandsBackColorDesc();
    internal static string get_PropertyGridCommandsBorderColorDesc();
    internal static string get_PropertyGridCommandsDisabledLinkColorDesc();
    internal static string get_PropertyGridCommandsForeColorDesc();
    internal static string get_PropertyGridCommandsLinkColorDesc();
    internal static string get_PropertyGridCommandsVisibleIfAvailable();
    internal static string get_PropertyGridDefaultAccessibleName();
    internal static string get_PropertyGridDefaultAccessibleNameTemplate();
    internal static string get_PropertyGridHelpPaneAccessibleNameTemplate();
    internal static string get_PropertyGridDisabledItemForeColorDesc();
    internal static string get_PropertyGridDropDownButtonAccessibleName();
    internal static string get_PropertyGridExceptionInfo();
    internal static string get_PropertyGridExceptionWhilePaintingLabel();
    internal static string get_PropertyGridHelpBackColorDesc();
    internal static string get_PropertyGridHelpBorderColorDesc();
    internal static string get_PropertyGridHelpForeColorDesc();
    internal static string get_PropertyGridHelpVisibleDesc();
    internal static string get_PropertyGridSelectedItemWithFocusBackColorDesc();
    internal static string get_PropertyGridSelectedItemWithFocusForeColorDesc();
    internal static string get_PropertyGridInternalNoProp();
    internal static string get_PropertyGridInvalidGridEntry();
    internal static string get_PropertyGridLargeButtonsDesc();
    internal static string get_PropertyGridLineColorDesc();
    internal static string get_PropertyGridNoBitmap();
    internal static string get_PropertyGridPropertySortChangedDescr();
    internal static string get_PropertyGridPropertySortDesc();
    internal static string get_PropertyGridPropertyTabchangedDescr();
    internal static string get_PropertyGridPropertyTabCollectionReadOnly();
    internal static string get_PropertyGridPropertyValueChangedDescr();
    internal static string get_PropertyGridRemoveStaticTabs();
    internal static string get_PropertyGridResetValue();
    internal static string get_PropertyGridSelectedGridItemChangedDescr();
    internal static string get_PropertyGridSelectedObjectDesc();
    internal static string get_PropertyGridSelectedObjectsChangedDescr();
    internal static string get_PropertyGridSet();
    internal static string get_PropertyGridSetNull();
    internal static string get_PropertyGridSetValue();
    internal static string get_PropertyGridTabName();
    internal static string get_PropertyGridTabScope();
    internal static string get_PropertyGridTitle();
    internal static string get_PropertyGridToolbarAccessibleName();
    internal static string get_PropertyGridToolbarVisibleDesc();
    internal static string get_PropertyGridViewBackColorDesc();
    internal static string get_PropertyGridViewBorderColorDesc();
    internal static string get_PropertyGridViewEditorCreatedInvalidObject();
    internal static string get_PropertyGridViewForeColorDesc();
    internal static string get_PropertyManagerPropDoesNotExist();
    internal static string get_PropertyValueInvalidEntry();
    internal static string get_PSDallowMarginsDescr();
    internal static string get_PSDallowOrientationDescr();
    internal static string get_PSDallowPaperDescr();
    internal static string get_PSDallowPrinterDescr();
    internal static string get_PSDcantShowWithoutPage();
    internal static string get_PSDenableMetricDescr();
    internal static string get_PSDminMarginsDescr();
    internal static string get_PSDpageSettingsDescr();
    internal static string get_PSDprinterSettingsDescr();
    internal static string get_PSDshowHelpDescr();
    internal static string get_PSDshowNetworkDescr();
    internal static string get_RadioButtonAppearanceDescr();
    internal static string get_RadioButtonAutoCheckDescr();
    internal static string get_RadioButtonCheckAlignDescr();
    internal static string get_RadioButtonCheckedDescr();
    internal static string get_RadioButtonOnAppearanceChangedDescr();
    internal static string get_RadioButtonOnCheckedChangedDescr();
    internal static string get_RadioButtonOnStartPageChangedDescr();
    internal static string get_RadioButtonOnTextAlignChangedDescr();
    internal static string get_ReadonlyControlsCollection();
    internal static string get_RegisterCFFailed();
    internal static string get_RelatedListManagerChild();
    internal static string get_RestartNotSupported();
    internal static string get_ResXResourceWriterSaved();
    internal static string get_RichControlLresult();
    internal static string get_RichTextBox_IDCut();
    internal static string get_RichTextBox_IDDelete();
    internal static string get_RichTextBox_IDDragDrop();
    internal static string get_RichTextBox_IDPaste();
    internal static string get_RichTextBox_IDTyping();
    internal static string get_RichTextBox_IDUnknown();
    internal static string get_RichTextBoxAutoWordSelection();
    internal static string get_RichTextBoxBulletIndent();
    internal static string get_RichTextBoxCanRedoDescr();
    internal static string get_RichTextBoxContentsResized();
    internal static string get_RichTextBoxDetectURLs();
    internal static string get_RichTextBoxEnableAutoDragDrop();
    internal static string get_RichTextBoxHScroll();
    internal static string get_RichTextBoxIMEChange();
    internal static string get_RichTextBoxLinkClick();
    internal static string get_RichTextBoxProtected();
    internal static string get_RichTextBoxRedoActionNameDescr();
    internal static string get_RichTextBoxRightMargin();
    internal static string get_RichTextBoxRTF();
    internal static string get_RichTextBoxScrollBars();
    internal static string get_RichTextBoxSelAlignment();
    internal static string get_RichTextBoxSelBackColor();
    internal static string get_RichTextBoxSelBullet();
    internal static string get_RichTextBoxSelChange();
    internal static string get_RichTextBoxSelCharOffset();
    internal static string get_RichTextBoxSelColor();
    internal static string get_RichTextBoxSelFont();
    internal static string get_RichTextBoxSelHangingIndent();
    internal static string get_RichTextBoxSelIndent();
    internal static string get_RichTextBoxSelMargin();
    internal static string get_RichTextBoxSelProtected();
    internal static string get_RichTextBoxSelRightIndent();
    internal static string get_RichTextBoxSelRTF();
    internal static string get_RichTextBoxSelTabs();
    internal static string get_RichTextBoxSelText();
    internal static string get_RichTextBoxSelTypeDescr();
    internal static string get_RichTextBoxUndoActionNameDescr();
    internal static string get_RichTextBoxVScroll();
    internal static string get_RichTextBoxZoomFactor();
    internal static string get_RichTextFindEndInvalid();
    internal static string get_RTL();
    internal static string get_SafeTopLevelCaptionFormat();
    internal static string get_SaveFileDialogCreatePrompt();
    internal static string get_SaveFileDialogOverWritePrompt();
    internal static string get_SaveTextError();
    internal static string get_ScrollableControlHorizontalScrollDescr();
    internal static string get_ScrollableControlActiveControlParentNull();
    internal static string get_ScrollableControlRaiseMouseEnterLeaveEventsForScrollBarsDescr();
    internal static string get_ScrollableControlVerticalScrollDescr();
    internal static string get_ScrollBarEnableDescr();
    internal static string get_ScrollBarLargeChangeDescr();
    internal static string get_ScrollBarMaximumDescr();
    internal static string get_ScrollBarMinimumDescr();
    internal static string get_ScrollBarOnScrollDescr();
    internal static string get_ScrollBarSmallChangeDescr();
    internal static string get_ScrollBarValueDescr();
    internal static string get_ScrollBarVisibleDescr();
    internal static string get_selectedIndexChangedEventDescr();
    internal static string get_selectedIndexDescr();
    internal static string get_SelectedNotEqualActual();
    internal static string get_selectionChangeCommittedEventDescr();
    internal static string get_SelTabCountRange();
    internal static string get_SendKeysGroupDelimError();
    internal static string get_SendKeysHookFailed();
    internal static string get_SendKeysKeywordDelimError();
    internal static string get_SendKeysNestingError();
    internal static string get_SendKeysNoMessageLoop();
    internal static string get_SerializationException();
    internal static string get_ShowDialogOnDisabled();
    internal static string get_ShowDialogOnModal();
    internal static string get_ShowDialogOnNonTopLevel();
    internal static string get_ShowDialogOnVisible();
    internal static string get_SortRequiresIBindingList();
    internal static string get_SplitContainerFixedPanelDescr();
    internal static string get_SplitContainerIsSplitterFixedDescr();
    internal static string get_SplitContainerOrientationDescr();
    internal static string get_SplitContainerPanel1CollapsedDescr();
    internal static string get_SplitContainerPanel1Descr();
    internal static string get_SplitContainerPanel1MinSizeDescr();
    internal static string get_SplitContainerPanel2CollapsedDescr();
    internal static string get_SplitContainerPanel2Descr();
    internal static string get_SplitContainerPanel2MinSizeDescr();
    internal static string get_SplitContainerPanelHeight();
    internal static string get_SplitContainerPanelWidth();
    internal static string get_SplitContainerSplitterDistanceDescr();
    internal static string get_SplitContainerSplitterIncrementDescr();
    internal static string get_SplitContainerSplitterRectangleDescr();
    internal static string get_SplitContainerSplitterWidthDescr();
    internal static string get_SplitterBorderStyleDescr();
    internal static string get_SplitterDistanceNotAllowed();
    internal static string get_SplitterInvalidDockEnum();
    internal static string get_SplitterMinExtraDescr();
    internal static string get_SplitterMinSizeDescr();
    internal static string get_SplitterSplitPositionDescr();
    internal static string get_SplitterSplitterMovedDescr();
    internal static string get_SplitterSplitterMovingDescr();
    internal static string get_StatusStripPanelBorderSidesDescr();
    internal static string get_StatusStripPanelBorderStyleDescr();
    internal static string get_StatusStripSizingGripDescr();
    internal static string get_SystemInformationFeatureNotSupported();
    internal static string get_TabBaseAlignmentDescr();
    internal static string get_TabBaseAppearanceDescr();
    internal static string get_TabBaseDrawModeDescr();
    internal static string get_TabBaseHotTrackDescr();
    internal static string get_TabBaseImageListDescr();
    internal static string get_TabBaseItemSizeDescr();
    internal static string get_TabBaseMultilineDescr();
    internal static string get_TabBasePaddingDescr();
    internal static string get_TabBaseRowCountDescr();
    internal static string get_TabBaseShowToolTipsDescr();
    internal static string get_TabBaseSizeModeDescr();
    internal static string get_TabBaseTabCountDescr();
    internal static string get_TabControlBadControl();
    internal static string get_TabControlDeselectedEventDescr();
    internal static string get_TabControlDeselectingEventDescr();
    internal static string get_TabControlInvalidTabPageType();
    internal static string get_TabControlSelectedEventDescr();
    internal static string get_TabControlSelectedTabDescr();
    internal static string get_TabControlSelectingEventDescr();
    internal static string get_TabControlTabPageNotOnTabControl();
    internal static string get_TabControlTabPageOnTabPage();
    internal static string get_TabControlTabsDescr();
    internal static string get_TabItemImageIndexDescr();
    internal static string get_TabItemToolTipTextDescr();
    internal static string get_TabItemUseVisualStyleBackColorDescr();
    internal static string get_TableBeginMustBeCalledPrior();
    internal static string get_TableBeginNotCalled();
    internal static string get_TableLayoutPanelCellBorderStyleDescr();
    internal static string get_TableLayoutPanelFullDesc();
    internal static string get_TableLayoutPanelGrowStyleDescr();
    internal static string get_TableLayoutPanelOnPaintCellDescr();
    internal static string get_TableLayoutPanelSpanDesc();
    internal static string get_TableLayoutSettingsConverterNoName();
    internal static string get_TableLayoutSettingSettingsIsNotSupported();
    internal static string get_TableLayoutSettingsGetCellPositionDescr();
    internal static string get_TableLayoutSettingsSetCellPositionDescr();
    internal static string get_TablePrintLayoutFromDifferentDocument();
    internal static string get_TextBoxAcceptsReturnDescr();
    internal static string get_TextBoxAcceptsTabDescr();
    internal static string get_TextBoxAutoCompleteCustomSourceDescr();
    internal static string get_TextBoxAutoCompleteModeDescr();
    internal static string get_TextBoxAutoCompleteSourceDescr();
    internal static string get_TextBoxAutoCompleteSourceNoItems();
    internal static string get_TextBoxAutoSizeDescr();
    internal static string get_TextBoxBaseOnAcceptsTabChangedDescr();
    internal static string get_TextBoxBaseOnAutoSizeChangedDescr();
    internal static string get_TextBoxBaseOnBorderStyleChangedDescr();
    internal static string get_TextBoxBaseOnHideSelectionChangedDescr();
    internal static string get_TextBoxBaseOnModifiedChangedDescr();
    internal static string get_TextBoxBaseOnMultilineChangedDescr();
    internal static string get_TextBoxBaseOnReadOnlyChangedDescr();
    internal static string get_TextBoxBorderDescr();
    internal static string get_TextBoxCanUndoDescr();
    internal static string get_TextBoxCharacterCasingDescr();
    internal static string get_TextBoxHideSelectionDescr();
    internal static string get_TextBoxLinesDescr();
    internal static string get_TextBoxMaxLengthDescr();
    internal static string get_TextBoxModifiedDescr();
    internal static string get_TextBoxMultilineDescr();
    internal static string get_TextBoxPasswordCharDescr();
    internal static string get_TextBoxPreferredHeightDescr();
    internal static string get_TextBoxReadOnlyDescr();
    internal static string get_TextBoxScrollBarsDescr();
    internal static string get_TextBoxSelectedTextDescr();
    internal static string get_TextBoxSelectionLengthDescr();
    internal static string get_TextBoxSelectionStartDescr();
    internal static string get_TextBoxShortcutsEnabledDescr();
    internal static string get_TextBoxTextAlignDescr();
    internal static string get_TextBoxUseSystemPasswordCharDescr();
    internal static string get_TextBoxWordWrapDescr();
    internal static string get_TextParseFailedFormat();
    internal static string get_ThreadMustBeSTA();
    internal static string get_ThreadNoLongerValid();
    internal static string get_ThreadNotPumpingMessages();
    internal static string get_TimerEnabledDescr();
    internal static string get_TimerIntervalDescr();
    internal static string get_TimerInvalidInterval();
    internal static string get_TimerTimerDescr();
    internal static string get_ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue();
    internal static string get_ToolStripAllowItemReorderDescr();
    internal static string get_ToolStripAllowMergeDescr();
    internal static string get_ToolStripBackColorDescr();
    internal static string get_ToolStripButtonCheckedDescr();
    internal static string get_ToolStripButtonCheckOnClickDescr();
    internal static string get_ToolStripCanOnlyPositionItsOwnItems();
    internal static string get_ToolStripCanOverflowDescr();
    internal static string get_ToolStripCollectionMustInsertAndRemove();
    internal static string get_ToolStripContainerBottomToolStripPanelDescr();
    internal static string get_ToolStripContainerBottomToolStripPanelVisibleDescr();
    internal static string get_ToolStripContainerContentPanelDescr();
    internal static string get_ToolStripContainerDesc();
    internal static string get_ToolStripContainerLeftToolStripPanelDescr();
    internal static string get_ToolStripContainerLeftToolStripPanelVisibleDescr();
    internal static string get_ToolStripContainerRightToolStripPanelDescr();
    internal static string get_ToolStripContainerRightToolStripPanelVisibleDescr();
    internal static string get_ToolStripContainerTopToolStripPanelDescr();
    internal static string get_ToolStripContainerTopToolStripPanelVisibleDescr();
    internal static string get_ToolStripContainerUseContentPanel();
    internal static string get_ToolStripContentPanelOnLoadDescr();
    internal static string get_ToolStripDefaultDropDownDirectionDescr();
    internal static string get_ToolStripDoesntSupportAutoScroll();
    internal static string get_ToolStripDropDownAutoCloseDescr();
    internal static string get_ToolStripDropDownButtonShowDropDownArrowDescr();
    internal static string get_ToolStripDropDownClosedDecr();
    internal static string get_ToolStripDropDownClosingDecr();
    internal static string get_ToolStripDropDownDescr();
    internal static string get_ToolStripDropDownItemDropDownDirectionDescr();
    internal static string get_ToolStripDropDownItemsDescr();
    internal static string get_ToolStripDropDownMenuShowCheckMarginDescr();
    internal static string get_ToolStripDropDownMenuShowImageMarginDescr();
    internal static string get_ToolStripDropDownOpenedDescr();
    internal static string get_ToolStripDropDownOpeningDescr();
    internal static string get_ToolStripDropDownPreferredWidthDescr();
    internal static string get_ToolStripGripAccessibleName();
    internal static string get_ToolStripDropDownsCantBeRafted();
    internal static string get_ToolStripGripDisplayStyleDescr();
    internal static string get_ToolStripGripMargin();
    internal static string get_ToolStripGripStyleDescr();
    internal static string get_ToolStripImageListDescr();
    internal static string get_ToolStripImageScalingSizeDescr();
    internal static string get_ToolStripItemAccessibilityObjectDescr();
    internal static string get_ToolStripItemAccessibleDefaultActionDescr();
    internal static string get_ToolStripItemAccessibleDescriptionDescr();
    internal static string get_ToolStripItemAccessibleNameDescr();
    internal static string get_ToolStripItemAccessibleRoleDescr();
    internal static string get_ToolStripItemAddedDescr();
    internal static string get_ToolStripItemAlignment();
    internal static string get_ToolStripItemAlignmentDescr();
    internal static string get_ToolStripItemAllowDropDescr();
    internal static string get_ToolStripItemAutoSizeDescr();
    internal static string get_ToolStripItemAutoToolTipDescr();
    internal static string get_ToolStripItemAvailableDescr();
    internal static string get_ToolStripItemBackColorDescr();
    internal static string get_ToolStripItemCircularReference();
    internal static string get_ToolStripItemCollectionIsReadOnly();
    internal static string get_ToolStripItemDisplayStyleDescr();
    internal static string get_ToolStripItemDoubleClickedEnabledDescr();
    internal static string get_ToolStripItemDrawModeDescr();
    internal static string get_ToolStripItemEnabledChangedDescr();
    internal static string get_ToolStripItemEnabledDescr();
    internal static string get_ToolStripItemFontDescr();
    internal static string get_ToolStripItemForeColorDescr();
    internal static string get_ToolStripItemImageAlignDescr();
    internal static string get_ToolStripItemImageDescr();
    internal static string get_ToolStripItemImageIndexDescr();
    internal static string get_ToolStripItemImageKeyDescr();
    internal static string get_ToolStripItemImageList();
    internal static string get_ToolStripItemImageScalingDescr();
    internal static string get_ToolStripItemImageTransparentColorDescr();
    internal static string get_ToolStripItemMarginDescr();
    internal static string get_ToolStripItemOnAvailableChangedDescr();
    internal static string get_ToolStripItemOnBackColorChangedDescr();
    internal static string get_ToolStripItemOnClickDescr();
    internal static string get_ToolStripItemOnDragDropDescr();
    internal static string get_ToolStripItemOnDragEnterDescr();
    internal static string get_ToolStripItemOnDragLeaveDescr();
    internal static string get_ToolStripItemOnDragOverDescr();
    internal static string get_ToolStripItemOnForeColorChangedDescr();
    internal static string get_ToolStripItemOnGiveFeedbackDescr();
    internal static string get_ToolStripItemOnGotFocusDescr();
    internal static string get_ToolStripItemOnLocationChangedDescr();
    internal static string get_ToolStripItemOnLostFocusDescr();
    internal static string get_ToolStripItemOnMouseDownDescr();
    internal static string get_ToolStripItemOnMouseEnterDescr();
    internal static string get_ToolStripItemOnMouseHoverDescr();
    internal static string get_ToolStripItemOnMouseLeaveDescr();
    internal static string get_ToolStripItemOnMouseMoveDescr();
    internal static string get_ToolStripItemOnMouseUpDescr();
    internal static string get_ToolStripItemOnPaintDescr();
    internal static string get_ToolStripItemOnQueryAccessibilityHelpDescr();
    internal static string get_ToolStripItemOnQueryContinueDragDescr();
    internal static string get_ToolStripItemOnRightToLeftChangedDescr();
    internal static string get_ToolStripItemOnTextChangedDescr();
    internal static string get_ToolStripItemOnVisibleChangedDescr();
    internal static string get_ToolStripItemOverflow();
    internal static string get_ToolStripItemOverflowDescr();
    internal static string get_ToolStripItemOwnerChangedDescr();
    internal static string get_ToolStripItemPaddingDescr();
    internal static string get_ToolStripItemRemovedDescr();
    internal static string get_ToolStripItemRightToLeftAutoMirrorImageDescr();
    internal static string get_ToolStripItemRightToLeftDescr();
    internal static string get_ToolStripItemsDescr();
    internal static string get_ToolStripItemSize();
    internal static string get_ToolStripItemSizeDescr();
    internal static string get_ToolStripItemTagDescr();
    internal static string get_ToolStripItemTextAlignDescr();
    internal static string get_ToolStripItemTextDescr();
    internal static string get_ToolStripItemTextImageRelationDescr();
    internal static string get_ToolStripItemToolTipTextDescr();
    internal static string get_ToolStripItemVisibleDescr();
    internal static string get_ToolStripLabelActiveLinkColorDescr();
    internal static string get_ToolStripLabelIsLinkDescr();
    internal static string get_DataGridViewCheckBoxCellCheckedStateDescription();
    internal static string get_DataGridViewCheckBoxCellUncheckedStateDescription();
    internal static string get_DataGridViewCheckBoxCellIndeterminateStateDescription();
    internal static string get_ToolStripLabelLinkBehaviorDescr();
    internal static string get_ToolStripLabelLinkColorDescr();
    internal static string get_ToolStripLabelLinkVisitedDescr();
    internal static string get_ToolStripLabelVisitedLinkColorDescr();
    internal static string get_ToolStripLayoutCompleteDescr();
    internal static string get_ToolStripLayoutStyle();
    internal static string get_ToolStripLayoutStyleChangedDescr();
    internal static string get_ToolStripMenuItemShortcutKeyDisplayStringDescr();
    internal static string get_ToolStripMergeActionDescr();
    internal static string get_ToolStripMergeImpossibleIdentical();
    internal static string get_ToolStripMergeIndexDescr();
    internal static string get_ToolStripMustSupplyItsOwnComboBox();
    internal static string get_ToolStripMustSupplyItsOwnTextBox();
    internal static string get_ToolStripOnBeginDrag();
    internal static string get_ToolStripOnEndDrag();
    internal static string get_ToolStripOptions();
    internal static string get_ToolStripPaintGripDescr();
    internal static string get_ToolStripPanelRowsDescr();
    internal static string get_ToolStripPanelRowControlCollectionIncorrectIndexLength();
    internal static string get_ToolStripRendererChanged();
    internal static string get_ToolStripRenderModeDescr();
    internal static string get_ToolStripRenderModeUseRendererPropertyInstead();
    internal static string get_ToolStripSaveSettingsDescr();
    internal static string get_ToolStripScrollButtonDownAccessibleName();
    internal static string get_ToolStripScrollButtonUpAccessibleName();
    internal static string get_ToolStripSettingsKeyDescr();
    internal static string get_ToolStripShowDropDownInvalidOperation();
    internal static string get_ToolStripShowItemToolTipsDescr();
    internal static string get_ToolStripSplitButtonDropDownButtonWidthDescr();
    internal static string get_ToolStripSplitButtonOnButtonClickDescr();
    internal static string get_ToolStripSplitButtonOnButtonDoubleClickDescr();
    internal static string get_ToolStripSplitButtonOnDefaultItemChangedDescr();
    internal static string get_ToolStripSplitButtonSplitterWidthDescr();
    internal static string get_ToolStripSplitStackLayoutContainerMustBeAToolStrip();
    internal static string get_ToolStripStatusLabelBorderSidesDescr();
    internal static string get_ToolStripStatusLabelBorderStyleDescr();
    internal static string get_ToolStripStatusLabelSpringDescr();
    internal static string get_ToolStripStretchDescr();
    internal static string get_ToolStripTextBoxTextBoxTextAlignChangedDescr();
    internal static string get_ToolStripTextDirectionDescr();
    internal static string get_ToolTipActiveDescr();
    internal static string get_ToolTipAddFailed();
    internal static string get_ToolTipAutomaticDelayDescr();
    internal static string get_ToolTipAutoPopDelayDescr();
    internal static string get_ToolTipBackColorDescr();
    internal static string get_ToolTipDrawEventDescr();
    internal static string get_ToolTipEmptyColor();
    internal static string get_ToolTipForeColorDescr();
    internal static string get_ToolTipInitialDelayDescr();
    internal static string get_ToolTipIsBalloonDescr();
    internal static string get_ToolTipOwnerDrawDescr();
    internal static string get_ToolTipPopupEventDescr();
    internal static string get_ToolTipReshowDelayDescr();
    internal static string get_ToolTipShowAlwaysDescr();
    internal static string get_ToolTipStripAmpersandsDescr();
    internal static string get_ToolTipTitleDescr();
    internal static string get_ToolTipToolTipDescr();
    internal static string get_ToolTipToolTipIconDescr();
    internal static string get_ToolTipUseAnimationDescr();
    internal static string get_ToolTipUseFadingDescr();
    internal static string get_TooManyResumeUpdateMenuHandles();
    internal static string get_TopLevelControlAdd();
    internal static string get_TopLevelNotAllowedIfActiveX();
    internal static string get_TopLevelParentedControl();
    internal static string get_toStringAlt();
    internal static string get_toStringBack();
    internal static string get_toStringControl();
    internal static string get_toStringDefault();
    internal static string get_toStringDelete();
    internal static string get_toStringEnd();
    internal static string get_toStringEnter();
    internal static string get_toStringHome();
    internal static string get_toStringInsert();
    internal static string get_toStringNone();
    internal static string get_toStringPageDown();
    internal static string get_toStringPageUp();
    internal static string get_toStringShift();
    internal static string get_TrackBarAutoSizeDescr();
    internal static string get_TrackBarLargeChangeDescr();
    internal static string get_TrackBarLargeChangeError();
    internal static string get_TrackBarMaximumDescr();
    internal static string get_TrackBarMinimumDescr();
    internal static string get_TrackBarOnScrollDescr();
    internal static string get_TrackBarOrientationDescr();
    internal static string get_TrackBarSmallChangeDescr();
    internal static string get_TrackBarSmallChangeError();
    internal static string get_TrackBarTickFrequencyDescr();
    internal static string get_TrackBarTickStyleDescr();
    internal static string get_TrackBarValueDescr();
    internal static string get_TransparentBackColorNotAllowed();
    internal static string get_TrayIcon_TextTooLong();
    internal static string get_TreeNodeBackColorDescr();
    internal static string get_TreeNodeBeginEditFailed();
    internal static string get_TreeNodeCheckedDescr();
    internal static string get_TreeNodeCollectionBadTreeNode();
    internal static string get_TreeNodeForeColorDescr();
    internal static string get_TreeNodeImageIndexDescr();
    internal static string get_TreeNodeImageKeyDescr();
    internal static string get_TreeNodeIndexDescr();
    internal static string get_TreeNodeNodeFontDescr();
    internal static string get_TreeNodeNodeNameDescr();
    internal static string get_TreeNodeNoParent();
    internal static string get_TreeNodeSelectedImageIndexDescr();
    internal static string get_TreeNodeSelectedImageKeyDescr();
    internal static string get_TreeNodeStateImageIndexDescr();
    internal static string get_TreeNodeStateImageKeyDescr();
    internal static string get_TreeNodeTextDescr();
    internal static string get_TreeNodeToolTipTextDescr();
    internal static string get_TreeViewAfterCheckDescr();
    internal static string get_TreeViewAfterCollapseDescr();
    internal static string get_TreeViewAfterEditDescr();
    internal static string get_TreeViewAfterExpandDescr();
    internal static string get_TreeViewAfterSelectDescr();
    internal static string get_TreeViewBeforeCheckDescr();
    internal static string get_TreeViewBeforeCollapseDescr();
    internal static string get_TreeViewBeforeEditDescr();
    internal static string get_TreeViewBeforeExpandDescr();
    internal static string get_TreeViewBeforeSelectDescr();
    internal static string get_TreeViewCheckBoxesDescr();
    internal static string get_TreeViewDrawModeDescr();
    internal static string get_TreeViewDrawNodeEventDescr();
    internal static string get_TreeViewFullRowSelectDescr();
    internal static string get_TreeViewHideSelectionDescr();
    internal static string get_TreeViewHotTrackingDescr();
    internal static string get_TreeViewImageIndexDescr();
    internal static string get_TreeViewImageKeyDescr();
    internal static string get_TreeViewImageListDescr();
    internal static string get_TreeViewIndentDescr();
    internal static string get_TreeViewItemHeightDescr();
    internal static string get_TreeViewLabelEditDescr();
    internal static string get_TreeViewLineColorDescr();
    internal static string get_TreeViewNodeMouseClickDescr();
    internal static string get_TreeViewNodeMouseDoubleClickDescr();
    internal static string get_TreeViewNodeMouseHoverDescr();
    internal static string get_TreeViewNodesDescr();
    internal static string get_TreeViewNodeSorterDescr();
    internal static string get_TreeViewPathSeparatorDescr();
    internal static string get_TreeViewScrollableDescr();
    internal static string get_TreeViewSelectedImageIndexDescr();
    internal static string get_TreeViewSelectedImageKeyDescr();
    internal static string get_TreeViewSelectedNodeDescr();
    internal static string get_TreeViewShowLinesDescr();
    internal static string get_TreeViewShowPlusMinusDescr();
    internal static string get_TreeViewShowRootLinesDescr();
    internal static string get_TreeViewShowShowNodeToolTipsDescr();
    internal static string get_TreeViewSortedDescr();
    internal static string get_TreeViewStateImageListDescr();
    internal static string get_TreeViewTopNodeDescr();
    internal static string get_TreeViewVisibleCountDescr();
    internal static string get_TypedControlCollectionShouldBeOfType();
    internal static string get_TypedControlCollectionShouldBeOfTypes();
    internal static string get_TYPEINFOPROCESSORGetDocumentationFailed();
    internal static string get_TYPEINFOPROCESSORGetRefTypeInfoFailed();
    internal static string get_TYPEINFOPROCESSORGetTypeAttrFailed();
    internal static string get_TypeLoadException();
    internal static string get_TypeLoadExceptionShort();
    internal static string get_UnableToInitComponent();
    internal static string get_UnableToSetPanelText();
    internal static string get_UnknownAttr();
    internal static string get_UnknownInputLanguageLayout();
    internal static string get_UnsafeNativeMethodsNotImplemented();
    internal static string get_UpDownBaseAlignmentDescr();
    internal static string get_UpDownBaseBorderStyleDescr();
    internal static string get_UpDownBaseDownButtonAccName();
    internal static string get_UpDownBaseInterceptArrowKeysDescr();
    internal static string get_UpDownBasePreferredHeightDescr();
    internal static string get_UpDownBaseReadOnlyDescr();
    internal static string get_UpDownBaseTextAlignDescr();
    internal static string get_UpDownBaseUpButtonAccName();
    internal static string get_UseCompatibleTextRenderingDescr();
    internal static string get_UserControlBorderStyleDescr();
    internal static string get_UserControlOnLoadDescr();
    internal static string get_valueChangedEventDescr();
    internal static string get_VisualStyleHandleCreationFailed();
    internal static string get_VisualStyleNotActive();
    internal static string get_VisualStylesDisabledInClientArea();
    internal static string get_VisualStylesInvalidCombination();
    internal static string get_WebBrowserAllowDropNotSupported();
    internal static string get_WebBrowserAllowNavigationDescr();
    internal static string get_WebBrowserAllowWebBrowserDropDescr();
    internal static string get_WebBrowserBackgroundImageLayoutNotSupported();
    internal static string get_WebBrowserBackgroundImageNotSupported();
    internal static string get_WebBrowserCanGoBackChangedDescr();
    internal static string get_WebBrowserCanGoForwardChangedDescr();
    internal static string get_WebBrowserCursorNotSupported();
    internal static string get_WebBrowserDocumentCompletedDescr();
    internal static string get_WebBrowserDocumentTitleChangedDescr();
    internal static string get_WebBrowserEnabledNotSupported();
    internal static string get_WebBrowserEncryptionLevelChangedDescr();
    internal static string get_WebBrowserFileDownloadDescr();
    internal static string get_WebBrowserIsOfflineDescr();
    internal static string get_WebBrowserIsWebBrowserContextMenuEnabledDescr();
    internal static string get_WebBrowserNavigateAbsoluteUri();
    internal static string get_WebBrowserNavigatedDescr();
    internal static string get_WebBrowserNavigatingDescr();
    internal static string get_WebBrowserNewWindowDescr();
    internal static string get_WebBrowserNoCastToIWebBrowser2();
    internal static string get_WebBrowserObjectForScriptingComVisibleOnly();
    internal static string get_WebBrowserProgressChangedDescr();
    internal static string get_WebBrowserRightToLeftNotSupported();
    internal static string get_WebBrowserScriptErrorsSuppressedDescr();
    internal static string get_WebBrowserScrollBarsEnabledDescr();
    internal static string get_WebBrowserSecurityLevelDescr();
    internal static string get_WebBrowserStatusTextChangedDescr();
    internal static string get_WebBrowserTextNotSupported();
    internal static string get_WebBrowserUrlDescr();
    internal static string get_WebBrowserUseWaitCursorNotSupported();
    internal static string get_WebBrowserWebBrowserShortcutsEnabledDescr();
    internal static string get_WidthGreaterThanMinWidth();
    internal static string get_Win32WindowAlreadyCreated();
    internal static string get_WindowsFormsSetEvent();
    internal static string get_ControlOnDpiChangedBeforeParentDescr();
    internal static string get_ControlOnDpiChangedAfterParentDescr();
    internal static string get_FormOnDpiChangedDescr();
    internal static string get_MDIChildSystemMenuItemAccessibleName();
    internal static string get_MonthCalendarSingleDateSelected();
    internal static string get_MonthCalendarSingleYearSelected();
    internal static string get_MonthCalendarYearRangeSelected();
    internal static string get_MonthCalendarSingleDecadeSelected();
    internal static string get_MonthCalendarRangeSelected();
    internal static string get_PropertyGridDropDownButtonComboBoxAccessibleName();
    internal static string get_CombinationOfAccessibilitySwitchesNotSupported();
    internal static string get_DateTimePickerLocalizedControlType();
    internal static string get_LiveRegionAutomationLiveSettingDescr();
    internal static string get_AccessibleObjectLiveRegionNotSupported();
    internal static string get_OwnerControlIsNotALiveRegion();
    internal static string get_StandardOleMarshalObjectGetMarshalerFailed();
    internal static string get_NotSortedAccessibleStatus();
    internal static string get_SortedAscendingAccessibleStatus();
    internal static string get_SortedDescendingAccessibleStatus();
    internal static string get_DataGridViewSortedAscendingAccessibleStatusFormat();
    internal static string get_DataGridViewSortedDescendingAccessibleStatusFormat();
    internal static string get_PropertyGridPropertyValueSelectedFormat();
    internal static string get_KeyboardToolTipDisplayBehaviorRequiresAccessibilityImprovementsLevel3();
    internal static string get_ControlDpiChangeScale();
    internal static string get_DataGridViewEditingPanelUiaProviderDescription();
    internal static string get_ComboBoxValueSelectedFormat();
    internal static string get_UnexpectedClipboardType();
    internal static string get_UnexpectedTypeForClipboardFormat();
    internal static string get_FolderBrowserDialogUseDescriptionForTitle();
    internal static string get_TextBoxPlaceholderTextDescr();
    internal static string get_TreeNodeCircularReference();
    internal static string get_DefaultNumericUpDownAccessibleName();
    internal static string get_DefaultUpDownButtonsAccessibleName();
    internal static string get_Win32SetParentFailed();
    internal static string get_ErrorProviderDefaultAccessibleName();
    internal static string get_PropertyGridEntryValuesListDefaultAccessibleName();
    internal static string get_TaskDialogButtonTextMustNotBeNull();
    internal static string get_TaskDialogCannotNavigateClosedDialog();
    internal static string get_TaskDialogCannotNavigateWithinNavigationEventHandler();
    internal static string get_TaskDialogCannotNavigateWithinRadioButtonCheckedChanged();
    internal static string get_TaskDialogCannotNavigateWithoutDialog();
    internal static string get_TaskDialogCannotRemoveProgressBarWhileDialogIsShown();
    internal static string get_TaskDialogCannotSetPropertyOfBoundPage();
    internal static string get_TaskDialogCannotSetPropertyOfShownDialog();
    internal static string get_TaskDialogCannotSetRadioButtonCheckedWithinCheckedChangedEvent();
    internal static string get_TaskDialogCannotUncheckRadioButtonWhileBound();
    internal static string get_TaskDialogCannotUpdateAfterNavigation();
    internal static string get_TaskDialogCannotUpdateIconType();
    internal static string get_TaskDialogCanUpdateStateOnlyWhenShown();
    internal static string get_HScrollBarDefaultAccessibleName();
    internal static string get_VScrollBarDefaultAccessibleName();
    internal static string get_TaskDialogCollectionAlreadyBound();
    internal static string get_TaskDialogControlAlreadyAddedToCollection();
    internal static string get_TaskDialogControlAlreadyBound();
    internal static string get_TaskDialogControlIsPartOfOtherCollection();
    internal static string get_TaskDialogControlNotBound();
    internal static string get_TaskDialogControlNotCreated();
    internal static string get_TaskDialogInstanceAlreadyShown();
    internal static string get_TaskDialogNavigationNotCompleted();
    internal static string get_TaskDialogVisualStylesNotEnabled();
    internal static string get_TaskDialogDefaultButtonMustExistInCollection();
    internal static string get_TaskDialogOnlySingleRadioButtonCanBeChecked();
    internal static string get_TaskDialogPageIsAlreadyBound();
    internal static string get_TaskDialogRadioButtonTextMustNotBeNull();
    internal static string get_TaskDialogTooManyButtonsAdded();
    internal static string get_TaskDialogCannotSetTextForStandardButton();
    internal static string get_TaskDialogCannotShowCustomButtonsAndCommandLinks();
    internal static string get_WindowSubclassHandlerWndProcIsNotExceptedOne();
    internal static string get_ListViewGroupCollapsedStateChangedDescr();
    internal static string get_ListViewGroupTaskLinkClickDescr();
    internal static string get_InputLanguageCultureNotFound();
    internal static string get_ListViewGroupImageListDescr();
    internal static string get_ConstructorArgumentInvalidValueType();
    internal static string get_TextFormatFlagsModifyStringNotAllowed();
    internal static string get_AccessibleActionDoubleClick();
    internal static string get_InvalidHdcType();
    internal static string get_PropertyGridViewDropDownControlHolderAccessibleName();
    internal static string get_UpDownEditLocalizedControlTypeName();
    internal static string get_DataGridView_RowAddedNotification();
    internal static string get_TreeNodeBoundToAnotherTreeView();
    internal static string get_ComboboxDropDownButtonCloseName();
    internal static string get_ComboboxDropDownButtonOpenName();
    internal static string get_CalendarPreviousButtonAccessibleObjectDescription();
    internal static string get_CalendarNextButtonAccessibleObjectDescription();
    internal static string get_CalendarTodayLinkAccessibleObjectDescription();
    internal static string get_MonthCalendarWeekNumberDescription();
    internal static string get_ListViewItemAccessibilityObjectInvalidViewException();
    internal static string get_TrackBarLargeDecreaseButtonName();
    internal static string get_TrackBarLargeIncreaseButtonName();
    internal static string get_TrackBarPositionButtonName();
    internal static string get_ProfessionalColorsStatusStripBorderDescr();
    internal static string get_ListViewCannotAddGroupsToVirtualListView();
    internal static string get_ParentPropertyNotSetInGetNextControl();
    internal static string get_ControlsPropertyNotSetInGetNextControl();
    internal static string get_ControlsCollectionShouldNotBeEmptyInGetNextControl();
    internal static string get_AccessibleObjectRuntimeIdNotSupported();
    internal static string get_ListViewGroupCollapsedStateName();
    internal static string get_ListViewGroupExpandedStateName();
    internal static string get_CategoryPropertyGridLocalizedControlType();
    internal static string get_FileDialogAddToRecentDescr();
    internal static string get_FileDialogShowHiddenFilesDescr();
    internal static string get_SaveFileDialogCheckWriteAccess();
    internal static string get_SaveFileDialogExpandedMode();
    internal static string get_FileDialogOkRequiresInteractionDescr();
    internal static string get_OpenFileDialogSelectReadOnlyDescr();
    internal static string get_FileDialogShowPinnedPlacesDescr();
    internal static string get_OpenFileDialogShowPreviewDescr();
    internal static string get_FolderBrowserDialogAddToRecent();
    internal static string get_FolderBrowserDialogOkRequiresInteraction();
    internal static string get_FolderBrowserDialogShowHiddenFiles();
    internal static string get_FolderBrowserDialogShowPinnedPlaces();
    internal static string get_EditDefaultAccessibleName();
    internal static string get_ExpandedStateName();
    internal static string get_ToolStripItemOnCommandChangedDescr();
    internal static string get_ToolStripItemOnBindingContextChangedDescr();
    internal static string get_CommandComponentCommandDescr();
    internal static string get_ToolStripItemBindingContextDescr();
    internal static string get_ListViewItemAccessibilityObjectRequiresListView();
    internal static string get_BindableComponentBindingContextChangedDescr();
    internal static string get_BindingComponentBindingContextDescr();
    internal static string get_CommandCanExecuteChangedEventDescr();
    internal static string get_CommandChangedEventDescr();
    internal static string get_CommandParameterChangedEventDescr();
    internal static string get_ControlDataContextChangedDescr();
    internal static string get_CommandComponentCommandParameterDescr();
    internal static string get_AccessDenied();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Argument_IncompatibleArrayType();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Arg_NonZeroLowerBound();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_InvalidArgumentType();
    internal static string get_FailedToLoadCursor();
    internal static string get_ResourceValueNotFound();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__ContiguousNonWhitespace_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__ContiguousNonWhitespace_0 Instance;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__ContiguousNonWhitespace_0();
}
[ExtensionAttribute]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    [NullableAttribute("1")]
internal static SearchValues`1<char> s_asciiWhiteSpace;
    private static <RegexGenerator_g>F74B1AE921BCEFE4BA601AA541C7A23B1CA9711EA81E8FE504B5B6446748E035A__Utilities();
    [ExtensionAttribute]
internal static int IndexOfAnyExceptWhiteSpace(ReadOnlySpan`1<char> span);
}
public enum System.Windows.Forms.AccessibleEvents : Enum {
    public int value__;
    public static AccessibleEvents SystemSound;
    public static AccessibleEvents SystemAlert;
    public static AccessibleEvents SystemForeground;
    public static AccessibleEvents SystemMenuStart;
    public static AccessibleEvents SystemMenuEnd;
    public static AccessibleEvents SystemMenuPopupStart;
    public static AccessibleEvents SystemMenuPopupEnd;
    public static AccessibleEvents SystemCaptureStart;
    public static AccessibleEvents SystemCaptureEnd;
    public static AccessibleEvents SystemMoveSizeStart;
    public static AccessibleEvents SystemMoveSizeEnd;
    public static AccessibleEvents SystemContextHelpStart;
    public static AccessibleEvents SystemContextHelpEnd;
    public static AccessibleEvents SystemDragDropStart;
    public static AccessibleEvents SystemDragDropEnd;
    public static AccessibleEvents SystemDialogStart;
    public static AccessibleEvents SystemDialogEnd;
    public static AccessibleEvents SystemScrollingStart;
    public static AccessibleEvents SystemScrollingEnd;
    public static AccessibleEvents SystemSwitchStart;
    public static AccessibleEvents SystemSwitchEnd;
    public static AccessibleEvents SystemMinimizeStart;
    public static AccessibleEvents SystemMinimizeEnd;
    public static AccessibleEvents Create;
    public static AccessibleEvents Destroy;
    public static AccessibleEvents Show;
    public static AccessibleEvents Hide;
    public static AccessibleEvents Reorder;
    public static AccessibleEvents Focus;
    public static AccessibleEvents Selection;
    public static AccessibleEvents SelectionAdd;
    public static AccessibleEvents SelectionRemove;
    public static AccessibleEvents SelectionWithin;
    public static AccessibleEvents StateChange;
    public static AccessibleEvents LocationChange;
    public static AccessibleEvents NameChange;
    public static AccessibleEvents DescriptionChange;
    public static AccessibleEvents ValueChange;
    public static AccessibleEvents ParentChange;
    public static AccessibleEvents HelpChange;
    public static AccessibleEvents DefaultActionChange;
    public static AccessibleEvents AcceleratorChange;
}
public enum System.Windows.Forms.AccessibleNavigation : Enum {
    public int value__;
    public static AccessibleNavigation Down;
    public static AccessibleNavigation FirstChild;
    public static AccessibleNavigation LastChild;
    public static AccessibleNavigation Left;
    public static AccessibleNavigation Next;
    public static AccessibleNavigation Previous;
    public static AccessibleNavigation Right;
    public static AccessibleNavigation Up;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.AccessibleObject : StandardOleMarshalObject {
    [CompilerGeneratedAttribute]
private AgileComPointer`1<IAccessible> <SystemIAccessible>k__BackingField;
    [CompilerGeneratedAttribute]
private static VARIANT <CHILDID_SELF>k__BackingField;
    private AgileComPointer`1<IEnumVARIANT> _systemIEnumVariant;
    private Interface _enumVariant;
    private AgileComPointer`1<IOleWindow> _systemIOleWindow;
    private bool _isSystemWrapper;
    private static bool s_notificationEventAvailable;
    private static Nullable`1<bool> s_canNotifyClients;
    internal static int InvalidIndex;
    internal static int RuntimeIDFirstItem;
    [CompilerGeneratedAttribute]
private int <AccessibleObjectId>k__BackingField;
    internal AgileComPointer`1<IAccessible> SystemIAccessible { get; private set; }
    private protected static VARIANT CHILDID_SELF { get; }
    private protected string AutomationId { get; }
    public Rectangle Bounds { get; }
    internal static bool CanNotifyClients { get; }
    public string DefaultAction { get; }
    public string Description { get; }
    [NullableAttribute("1")]
private Interface EnumVariant { get; }
    public string Help { get; }
    public string KeyboardShortcut { get; }
    public string Name { get; public set; }
    public AccessibleObject Parent { get; }
    public AccessibleRole Role { get; }
    public AccessibleStates State { get; }
    public string Value { get; public set; }
    [NullableAttribute("1")]
internal Int32[] RuntimeId { get; }
    internal int ProviderOptions { get; }
    internal IRawElementProviderSimple HostRawElementProvider { get; }
    private bool IsInvokePatternAvailable { get; }
    internal Rectangle BoundingRectangle { get; }
    internal IRawElementProviderFragmentRoot FragmentRoot { get; }
    internal ExpandCollapseState ExpandCollapseState { get; }
    internal ToggleState ToggleState { get; }
    private protected IRawElementProviderFragmentRoot ToolStripFragmentRoot { get; }
    internal RowOrColumnMajor RowOrColumnMajor { get; }
    internal int RowCount { get; }
    internal int ColumnCount { get; }
    internal int Row { get; }
    internal int Column { get; }
    internal int RowSpan { get; }
    internal int ColumnSpan { get; }
    internal IRawElementProviderSimple ContainingGrid { get; }
    internal ITextRangeProvider DocumentRangeInternal { get; }
    internal SupportedTextSelection SupportedTextSelectionInternal { get; }
    internal bool IsReadOnly { get; }
    internal double LargeChange { get; }
    internal double Maximum { get; }
    internal double Minimum { get; }
    internal double SmallChange { get; }
    internal double RangeValue { get; }
    internal bool CanSelectMultiple { get; }
    internal bool IsSelectionRequired { get; }
    internal bool IsItemSelected { get; }
    internal IRawElementProviderSimple ItemSelectionContainer { get; }
    private ProviderOptions Interop.UiaCore.IRawElementProviderSimple.ProviderOptions { get; }
    private IRawElementProviderSimple Interop.UiaCore.IRawElementProviderSimple.HostRawElementProvider { get; }
    private UiaRect Interop.UiaCore.IRawElementProviderFragment.BoundingRectangle { get; }
    private IRawElementProviderFragmentRoot Interop.UiaCore.IRawElementProviderFragment.FragmentRoot { get; }
    private string Interop.UiaCore.ILegacyIAccessibleProvider.DefaultAction { get; }
    private string Interop.UiaCore.ILegacyIAccessibleProvider.Description { get; }
    private string Interop.UiaCore.ILegacyIAccessibleProvider.Help { get; }
    private string Interop.UiaCore.ILegacyIAccessibleProvider.KeyboardShortcut { get; }
    private string Interop.UiaCore.ILegacyIAccessibleProvider.Name { get; }
    private UInt32 Interop.UiaCore.ILegacyIAccessibleProvider.Role { get; }
    private UInt32 Interop.UiaCore.ILegacyIAccessibleProvider.State { get; }
    private string Interop.UiaCore.ILegacyIAccessibleProvider.Value { get; }
    private int Interop.UiaCore.ILegacyIAccessibleProvider.ChildId { get; }
    private ExpandCollapseState Interop.UiaCore.IExpandCollapseProvider.ExpandCollapseState { get; }
    private ITextRangeProvider Interop.UiaCore.ITextProvider.DocumentRange { get; }
    private SupportedTextSelection Interop.UiaCore.ITextProvider.SupportedTextSelection { get; }
    private ITextRangeProvider Interop.UiaCore.ITextProvider2.DocumentRange { get; }
    private SupportedTextSelection Interop.UiaCore.ITextProvider2.SupportedTextSelection { get; }
    private BOOL Interop.UiaCore.IValueProvider.IsReadOnly { get; }
    private string Interop.UiaCore.IValueProvider.Value { get; }
    private ToggleState Interop.UiaCore.IToggleProvider.ToggleState { get; }
    private RowOrColumnMajor Interop.UiaCore.ITableProvider.RowOrColumnMajor { get; }
    private int Interop.UiaCore.IGridProvider.RowCount { get; }
    private int Interop.UiaCore.IGridProvider.ColumnCount { get; }
    private int Interop.UiaCore.IGridItemProvider.Row { get; }
    private int Interop.UiaCore.IGridItemProvider.Column { get; }
    private int Interop.UiaCore.IGridItemProvider.RowSpan { get; }
    private int Interop.UiaCore.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple Interop.UiaCore.IGridItemProvider.ContainingGrid { get; }
    private int Accessibility.IAccessible.accChildCount { get; }
    private object Accessibility.IAccessible.accFocus { get; }
    private object Accessibility.IAccessible.accParent { get; }
    private object Accessibility.IAccessible.accSelection { get; }
    internal int AccessibleObjectId { get; internal set; }
    internal bool IsClientObject { get; }
    internal bool IsNonClientObject { get; }
    [NullableAttribute("1")]
private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    private int Interop.UiaCore.IMultipleViewProvider.CurrentView { get; }
    private BOOL Interop.UiaCore.IRangeValueProvider.IsReadOnly { get; }
    private double Interop.UiaCore.IRangeValueProvider.LargeChange { get; }
    private double Interop.UiaCore.IRangeValueProvider.Maximum { get; }
    private double Interop.UiaCore.IRangeValueProvider.Minimum { get; }
    private double Interop.UiaCore.IRangeValueProvider.SmallChange { get; }
    private double Interop.UiaCore.IRangeValueProvider.Value { get; }
    private BOOL Interop.UiaCore.ISelectionProvider.CanSelectMultiple { get; }
    private BOOL Interop.UiaCore.ISelectionProvider.IsSelectionRequired { get; }
    private BOOL Interop.UiaCore.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple Interop.UiaCore.ISelectionItemProvider.SelectionContainer { get; }
    [NullableContextAttribute("1")]
private AccessibleObject(AgileComPointer`1<IAccessible> accessible);
    private static AccessibleObject();
    [CompilerGeneratedAttribute]
internal AgileComPointer`1<IAccessible> get_SystemIAccessible();
    [CompilerGeneratedAttribute]
private void set_SystemIAccessible(AgileComPointer`1<IAccessible> value);
    [CompilerGeneratedAttribute]
private protected static VARIANT get_CHILDID_SELF();
    private protected virtual string get_AutomationId();
    public virtual Rectangle get_Bounds();
    internal static bool get_CanNotifyClients();
    private static bool InitializeCanNotifyClients();
    public virtual string get_DefaultAction();
    public virtual string get_Description();
    [NullableContextAttribute("1")]
private Interface get_EnumVariant();
    public virtual string get_Help();
    public virtual string get_KeyboardShortcut();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AccessibleObject get_Parent();
    public virtual AccessibleRole get_Role();
    public virtual AccessibleStates get_State();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual AccessibleObject GetChild(int index);
    internal virtual int GetChildIndex(AccessibleObject child);
    public virtual int GetChildCount();
    internal virtual Int32[] GetSysChildOrder();
    internal virtual bool GetSysChild(AccessibleNavigation navdir, AccessibleObject& accessibleObject);
    public virtual AccessibleObject GetFocused();
    private AccessibleObject TryGetFocus();
    public virtual int GetHelpTopic(String& fileName);
    public virtual AccessibleObject GetSelected();
    private AccessibleObject TryGetSelection();
    public virtual AccessibleObject HitTest(int x, int y);
    internal virtual bool IsIAccessibleExSupported();
    internal virtual bool IsPatternSupported(UIA patternId);
    [NullableContextAttribute("1")]
internal virtual Int32[] get_RuntimeId();
    internal virtual int get_ProviderOptions();
    internal virtual IRawElementProviderSimple get_HostRawElementProvider();
    internal virtual object GetPropertyValue(UIA propertyID);
    private bool get_IsInvokePatternAvailable();
    internal virtual int GetChildId();
    internal virtual IRawElementProviderFragment FragmentNavigate(NavigateDirection direction);
    internal virtual IRawElementProviderSimple[] GetEmbeddedFragmentRoots();
    internal virtual void SetFocus();
    internal virtual Rectangle get_BoundingRectangle();
    internal virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    internal virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    internal virtual IRawElementProviderFragment GetFocus();
    internal virtual void Expand();
    internal virtual void Collapse();
    internal virtual ExpandCollapseState get_ExpandCollapseState();
    internal virtual void Toggle();
    internal virtual ToggleState get_ToggleState();
    private protected virtual IRawElementProviderFragmentRoot get_ToolStripFragmentRoot();
    internal virtual IRawElementProviderSimple[] GetRowHeaders();
    internal virtual IRawElementProviderSimple[] GetColumnHeaders();
    internal virtual RowOrColumnMajor get_RowOrColumnMajor();
    internal virtual IRawElementProviderSimple[] GetRowHeaderItems();
    internal virtual IRawElementProviderSimple[] GetColumnHeaderItems();
    internal virtual IRawElementProviderSimple GetItem(int row, int column);
    internal virtual int get_RowCount();
    internal virtual int get_ColumnCount();
    internal virtual int get_Row();
    internal virtual int get_Column();
    internal virtual int get_RowSpan();
    internal virtual int get_ColumnSpan();
    internal virtual IRawElementProviderSimple get_ContainingGrid();
    internal virtual void Invoke();
    internal virtual ITextRangeProvider get_DocumentRangeInternal();
    internal virtual ITextRangeProvider[] GetTextSelection();
    internal virtual ITextRangeProvider[] GetTextVisibleRanges();
    [NullableContextAttribute("1")]
internal virtual ITextRangeProvider GetTextRangeFromChild(IRawElementProviderSimple childElement);
    internal virtual ITextRangeProvider GetTextRangeFromPoint(Point screenLocation);
    internal virtual SupportedTextSelection get_SupportedTextSelectionInternal();
    internal virtual ITextRangeProvider GetTextCaretRange(BOOL& isActive);
    [NullableContextAttribute("1")]
internal virtual ITextRangeProvider GetRangeFromAnnotation(IRawElementProviderSimple annotationElement);
    internal virtual bool get_IsReadOnly();
    internal virtual void SetValue(string newValue);
    internal virtual IRawElementProviderSimple GetOverrideProviderForHwnd(IntPtr hwnd);
    internal virtual int GetMultiViewProviderCurrentView();
    internal virtual Int32[] GetMultiViewProviderSupportedViews();
    [NullableContextAttribute("1")]
internal virtual string GetMultiViewProviderViewName(int viewId);
    internal virtual void SetMultiViewProviderCurrentView(int viewId);
    internal virtual void SetValue(double newValue);
    internal virtual double get_LargeChange();
    internal virtual double get_Maximum();
    internal virtual double get_Minimum();
    internal virtual double get_SmallChange();
    internal virtual double get_RangeValue();
    internal virtual IRawElementProviderSimple[] GetSelection();
    internal virtual bool get_CanSelectMultiple();
    internal virtual bool get_IsSelectionRequired();
    internal virtual void SelectItem();
    internal virtual void AddToSelection();
    internal virtual void RemoveFromSelection();
    internal virtual bool get_IsItemSelected();
    internal virtual IRawElementProviderSimple get_ItemSelectionContainer();
    internal virtual void SetParent(AccessibleObject parent);
    internal virtual void SetDetachableChild(AccessibleObject child);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IServiceProvider.Interface.QueryService(Guid* service, Guid* riid, Void** ppvObject);
    private sealed virtual override IAccessibleEx Interop.UiaCore.IAccessibleEx.GetObjectForChild(int idChild);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Interop.UiaCore.IAccessibleEx.GetIAccessiblePair(Object& ppAcc, Int32* pidChild);
    private sealed virtual override Int32[] Interop.UiaCore.IAccessibleEx.GetRuntimeId();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Interop.UiaCore.IAccessibleEx.ConvertReturnedElement(IRawElementProviderSimple pIn, IntPtr* ppRetValOut);
    private sealed virtual override ProviderOptions Interop.UiaCore.IRawElementProviderSimple.get_ProviderOptions();
    private sealed virtual override IRawElementProviderSimple Interop.UiaCore.IRawElementProviderSimple.get_HostRawElementProvider();
    private sealed virtual override object Interop.UiaCore.IRawElementProviderSimple.GetPatternProvider(UIA patternId);
    private sealed virtual override object Interop.UiaCore.IRawElementProviderSimple.GetPropertyValue(UIA propertyID);
    private sealed virtual override object Interop.UiaCore.IRawElementProviderFragment.Navigate(NavigateDirection direction);
    private sealed virtual override Int32[] Interop.UiaCore.IRawElementProviderFragment.GetRuntimeId();
    private sealed virtual override Object[] Interop.UiaCore.IRawElementProviderFragment.GetEmbeddedFragmentRoots();
    private sealed virtual override void Interop.UiaCore.IRawElementProviderFragment.SetFocus();
    private sealed virtual override UiaRect Interop.UiaCore.IRawElementProviderFragment.get_BoundingRectangle();
    private sealed virtual override IRawElementProviderFragmentRoot Interop.UiaCore.IRawElementProviderFragment.get_FragmentRoot();
    private sealed virtual override object Interop.UiaCore.IRawElementProviderFragmentRoot.ElementProviderFromPoint(double x, double y);
    private sealed virtual override object Interop.UiaCore.IRawElementProviderFragmentRoot.GetFocus();
    private sealed virtual override string Interop.UiaCore.ILegacyIAccessibleProvider.get_DefaultAction();
    private sealed virtual override string Interop.UiaCore.ILegacyIAccessibleProvider.get_Description();
    private sealed virtual override string Interop.UiaCore.ILegacyIAccessibleProvider.get_Help();
    private sealed virtual override string Interop.UiaCore.ILegacyIAccessibleProvider.get_KeyboardShortcut();
    private sealed virtual override string Interop.UiaCore.ILegacyIAccessibleProvider.get_Name();
    private sealed virtual override UInt32 Interop.UiaCore.ILegacyIAccessibleProvider.get_Role();
    private sealed virtual override UInt32 Interop.UiaCore.ILegacyIAccessibleProvider.get_State();
    private sealed virtual override string Interop.UiaCore.ILegacyIAccessibleProvider.get_Value();
    private sealed virtual override int Interop.UiaCore.ILegacyIAccessibleProvider.get_ChildId();
    private sealed virtual override void Interop.UiaCore.ILegacyIAccessibleProvider.DoDefaultAction();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Interop.UiaCore.ILegacyIAccessibleProvider.GetIAccessible(IAccessible** ppAccessible);
    [NullableContextAttribute("1")]
private sealed virtual override IRawElementProviderSimple[] Interop.UiaCore.ILegacyIAccessibleProvider.GetSelection();
    private sealed virtual override void Interop.UiaCore.ILegacyIAccessibleProvider.Select(int flagsSelect);
    [NullableContextAttribute("1")]
private sealed virtual override void Interop.UiaCore.ILegacyIAccessibleProvider.SetValue(string szValue);
    private sealed virtual override void Interop.UiaCore.IExpandCollapseProvider.Expand();
    private sealed virtual override void Interop.UiaCore.IExpandCollapseProvider.Collapse();
    private sealed virtual override ExpandCollapseState Interop.UiaCore.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void Interop.UiaCore.IInvokeProvider.Invoke();
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider.get_DocumentRange();
    private sealed virtual override ITextRangeProvider[] Interop.UiaCore.ITextProvider.GetSelection();
    private sealed virtual override ITextRangeProvider[] Interop.UiaCore.ITextProvider.GetVisibleRanges();
    [NullableContextAttribute("1")]
private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider.RangeFromChild(IRawElementProviderSimple childElement);
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider.RangeFromPoint(Point screenLocation);
    private sealed virtual override SupportedTextSelection Interop.UiaCore.ITextProvider.get_SupportedTextSelection();
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider2.get_DocumentRange();
    private sealed virtual override ITextRangeProvider[] Interop.UiaCore.ITextProvider2.GetSelection();
    private sealed virtual override ITextRangeProvider[] Interop.UiaCore.ITextProvider2.GetVisibleRanges();
    [NullableContextAttribute("1")]
private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider2.RangeFromChild(IRawElementProviderSimple childElement);
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider2.RangeFromPoint(Point screenLocation);
    private sealed virtual override SupportedTextSelection Interop.UiaCore.ITextProvider2.get_SupportedTextSelection();
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider2.GetCaretRange(BOOL& isActive);
    [NullableContextAttribute("1")]
private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextProvider2.RangeFromAnnotation(IRawElementProviderSimple annotationElement);
    private sealed virtual override BOOL Interop.UiaCore.IValueProvider.get_IsReadOnly();
    private sealed virtual override string Interop.UiaCore.IValueProvider.get_Value();
    private sealed virtual override void Interop.UiaCore.IValueProvider.SetValue(string newValue);
    private sealed virtual override void Interop.UiaCore.IToggleProvider.Toggle();
    private sealed virtual override ToggleState Interop.UiaCore.IToggleProvider.get_ToggleState();
    private sealed virtual override Object[] Interop.UiaCore.ITableProvider.GetRowHeaders();
    private sealed virtual override Object[] Interop.UiaCore.ITableProvider.GetColumnHeaders();
    private sealed virtual override RowOrColumnMajor Interop.UiaCore.ITableProvider.get_RowOrColumnMajor();
    private sealed virtual override Object[] Interop.UiaCore.ITableItemProvider.GetRowHeaderItems();
    private sealed virtual override Object[] Interop.UiaCore.ITableItemProvider.GetColumnHeaderItems();
    private sealed virtual override object Interop.UiaCore.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int Interop.UiaCore.IGridProvider.get_RowCount();
    private sealed virtual override int Interop.UiaCore.IGridProvider.get_ColumnCount();
    private sealed virtual override int Interop.UiaCore.IGridItemProvider.get_Row();
    private sealed virtual override int Interop.UiaCore.IGridItemProvider.get_Column();
    private sealed virtual override int Interop.UiaCore.IGridItemProvider.get_RowSpan();
    private sealed virtual override int Interop.UiaCore.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple Interop.UiaCore.IGridItemProvider.get_ContainingGrid();
    [NullableContextAttribute("1")]
private sealed virtual override void Accessibility.IAccessible.accDoDefaultAction(object childID);
    [NullableContextAttribute("1")]
private VARIANT ChildIdToVARIANT(object childId);
    private sealed virtual override object Accessibility.IAccessible.accHitTest(int xLeft, int yTop);
    [NullableContextAttribute("1")]
private sealed virtual override void Accessibility.IAccessible.accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object childID);
    [NullableContextAttribute("1")]
private sealed virtual override object Accessibility.IAccessible.accNavigate(int navDir, object childID);
    [NullableContextAttribute("1")]
private sealed virtual override void Accessibility.IAccessible.accSelect(int flagsSelect, object childID);
    public virtual void DoDefaultAction();
    [NullableContextAttribute("1")]
private sealed virtual override object Accessibility.IAccessible.get_accChild(object childID);
    private sealed virtual override int Accessibility.IAccessible.get_accChildCount();
    [NullableContextAttribute("1")]
private sealed virtual override string Accessibility.IAccessible.get_accDefaultAction(object childID);
    [NullableContextAttribute("1")]
private sealed virtual override string Accessibility.IAccessible.get_accDescription(object childID);
    [NullableContextAttribute("1")]
private AccessibleObject GetAccessibleChild(object childID);
    private sealed virtual override object Accessibility.IAccessible.get_accFocus();
    [NullableContextAttribute("1")]
private sealed virtual override string Accessibility.IAccessible.get_accHelp(object childID);
    [NullableContextAttribute("1")]
private sealed virtual override int Accessibility.IAccessible.get_accHelpTopic(String& pszHelpFile, object childID);
    [NullableContextAttribute("1")]
private sealed virtual override string Accessibility.IAccessible.get_accKeyboardShortcut(object childID);
    [NullableContextAttribute("1")]
internal virtual string get_accKeyboardShortcutInternal(object childID);
    [NullableContextAttribute("1")]
private sealed virtual override string Accessibility.IAccessible.get_accName(object childID);
    [NullableContextAttribute("1")]
internal virtual string get_accNameInternal(object childID);
    private sealed virtual override object Accessibility.IAccessible.get_accParent();
    [NullableContextAttribute("1")]
private sealed virtual override object Accessibility.IAccessible.get_accRole(object childID);
    private sealed virtual override object Accessibility.IAccessible.get_accSelection();
    [NullableContextAttribute("1")]
private sealed virtual override object Accessibility.IAccessible.get_accState(object childID);
    [NullableContextAttribute("1")]
private sealed virtual override string Accessibility.IAccessible.get_accValue(object childID);
    [NullableContextAttribute("1")]
private sealed virtual override void Accessibility.IAccessible.set_accName(object childID, string newName);
    [NullableContextAttribute("1")]
private sealed virtual override void Accessibility.IAccessible.set_accValue(object childID, string newValue);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IEnumVARIANT.Interface.Clone(IEnumVARIANT** ppEnum);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IEnumVARIANT.Interface.Next(UInt32 celt, VARIANT* rgVar, UInt32* pCeltFetched);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IEnumVARIANT.Interface.Reset();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IEnumVARIANT.Interface.Skip(UInt32 celt);
    public virtual AccessibleObject Navigate(AccessibleNavigation navdir);
    public virtual void Select(AccessibleSelection flags);
    private object AsChildId(AccessibleObject obj);
    private static object AsIAccessible(AccessibleObject obj);
    [CompilerGeneratedAttribute]
internal int get_AccessibleObjectId();
    [CompilerGeneratedAttribute]
internal void set_AccessibleObjectId(int value);
    internal bool get_IsClientObject();
    internal bool get_IsNonClientObject();
    protected void UseStdAccessibleObjects(IntPtr handle);
    protected void UseStdAccessibleObjects(IntPtr handle, int objid);
    [NullableContextAttribute("1")]
private bool SysNavigate(AccessibleNavigation direction, object childID, AccessibleObject& accessibleObject);
    [NullableContextAttribute("1")]
internal static void ValidateChildID(Object& childID);
    private AccessibleObject TryGetAccessibleObject(VARIANT variant);
    [NullableContextAttribute("0")]
private AccessibleObject TryGetAccessibleObject(IDispatch* dispatch);
    [NullableContextAttribute("0")]
private AccessibleObject TryGetAccessibleObject(IAccessible* accessible);
    [DynamicallyAccessedMembersAttribute("24")]
private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("24")]
private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("24")]
private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("96")]
private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("96")]
private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("1536")]
private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("1536")]
private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("1536")]
private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("8191")]
private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    [NullableContextAttribute("1")]
[DynamicallyAccessedMembersAttribute("8191")]
private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("-1")]
private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    [NullableContextAttribute("1")]
private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
    private sealed virtual override IRawElementProviderSimple Interop.UiaCore.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private sealed virtual override int Interop.UiaCore.IMultipleViewProvider.get_CurrentView();
    private sealed virtual override Int32[] Interop.UiaCore.IMultipleViewProvider.GetSupportedViews();
    private sealed virtual override string Interop.UiaCore.IMultipleViewProvider.GetViewName(int viewId);
    private sealed virtual override void Interop.UiaCore.IMultipleViewProvider.SetCurrentView(int viewId);
    private sealed virtual override BOOL Interop.UiaCore.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double Interop.UiaCore.IRangeValueProvider.get_LargeChange();
    private sealed virtual override double Interop.UiaCore.IRangeValueProvider.get_Maximum();
    private sealed virtual override double Interop.UiaCore.IRangeValueProvider.get_Minimum();
    private sealed virtual override double Interop.UiaCore.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double Interop.UiaCore.IRangeValueProvider.get_Value();
    private sealed virtual override void Interop.UiaCore.IRangeValueProvider.SetValue(double value);
    private sealed virtual override Object[] Interop.UiaCore.ISelectionProvider.GetSelection();
    private sealed virtual override BOOL Interop.UiaCore.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override BOOL Interop.UiaCore.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override void Interop.UiaCore.ISelectionItemProvider.Select();
    private sealed virtual override void Interop.UiaCore.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void Interop.UiaCore.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override BOOL Interop.UiaCore.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple Interop.UiaCore.ISelectionItemProvider.get_SelectionContainer();
    public bool RaiseAutomationNotification(AutomationNotificationKind notificationKind, AutomationNotificationProcessing notificationProcessing, string notificationText);
    public virtual bool RaiseLiveRegionChanged();
    internal virtual bool RaiseAutomationEvent(UIA eventId);
    internal virtual bool RaiseAutomationPropertyChangedEvent(UIA propertyId, object oldValue, object newValue);
    [NullableContextAttribute("1")]
internal virtual bool InternalRaiseAutomationNotification(AutomationNotificationKind notificationKind, AutomationNotificationProcessing notificationProcessing, string notificationText);
    [NullableContextAttribute("1")]
internal bool RaiseStructureChangedEvent(StructureChangeType structureChangeType, Int32[] runtimeId);
    private sealed virtual override void Interop.UiaCore.IScrollItemProvider.ScrollIntoView();
    internal virtual void ScrollIntoView();
    [NullableContextAttribute("0")]
private ComScope`1<IOleWindow> TryGetOleWindow(HRESULT& result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.AccessibleObjectExtensions : object {
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static ComScope`1<IAccessible> TryGetIAccessible(AgileComPointer`1<IAccessible> agile, HRESULT& result);
    [ExtensionAttribute]
public static Rectangle TryGetLocation(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static Rectangle TryGetLocation(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static string TryGetDefaultAction(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static string TryGetDefaultAction(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static void TryDoDefaultAction(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static void TryDoDefaultAction(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static string TryGetDescription(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static string TryGetDescription(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static string TryGetHelp(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static string TryGetHelp(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static string TryGetKeyboardShortcut(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static string TryGetKeyboardShortcut(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static string TryGetName(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static string TryGetName(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static void TrySetName(AgileComPointer`1<IAccessible> agile, VARIANT child, string name);
    [ExtensionAttribute]
public static AccessibleRole TryGetRole(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static AccessibleRole TryGetRole(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static AccessibleStates TryGetState(AgileComPointer`1<IAccessible> agile, int child);
    [ExtensionAttribute]
public static AccessibleStates TryGetState(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static string TryGetValue(AgileComPointer`1<IAccessible> agile, VARIANT child);
    [ExtensionAttribute]
public static void TrySetValue(AgileComPointer`1<IAccessible> agile, VARIANT child, string value);
    [ExtensionAttribute]
public static int TryGetHelpTopic(AgileComPointer`1<IAccessible> agile, VARIANT child, String& fileName);
    [ExtensionAttribute]
public static void TrySelect(AgileComPointer`1<IAccessible> agile, AccessibleSelection flags, int child);
    [ExtensionAttribute]
public static void TrySelect(AgileComPointer`1<IAccessible> agile, AccessibleSelection flags, VARIANT child);
    [ExtensionAttribute]
public static int TryGetChildCount(AgileComPointer`1<IAccessible> agile);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AccessibleRole GetOwnerAccessibleRole(TAccessible accessibleObject, AccessibleRole defaultRole);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetOwnerAccessibleName(TAccessible accessibleObject, string defaultName);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetOwnerText(TAccessible accessibleObject, string defaultText);
}
public enum System.Windows.Forms.AccessibleRole : Enum {
    public int value__;
    public static AccessibleRole Default;
    public static AccessibleRole None;
    public static AccessibleRole TitleBar;
    public static AccessibleRole MenuBar;
    public static AccessibleRole ScrollBar;
    public static AccessibleRole Grip;
    public static AccessibleRole Sound;
    public static AccessibleRole Cursor;
    public static AccessibleRole Caret;
    public static AccessibleRole Alert;
    public static AccessibleRole Window;
    public static AccessibleRole Client;
    public static AccessibleRole MenuPopup;
    public static AccessibleRole MenuItem;
    public static AccessibleRole ToolTip;
    public static AccessibleRole Application;
    public static AccessibleRole Document;
    public static AccessibleRole Pane;
    public static AccessibleRole Chart;
    public static AccessibleRole Dialog;
    public static AccessibleRole Border;
    public static AccessibleRole Grouping;
    public static AccessibleRole Separator;
    public static AccessibleRole ToolBar;
    public static AccessibleRole StatusBar;
    public static AccessibleRole Table;
    public static AccessibleRole ColumnHeader;
    public static AccessibleRole RowHeader;
    public static AccessibleRole Column;
    public static AccessibleRole Row;
    public static AccessibleRole Cell;
    public static AccessibleRole Link;
    public static AccessibleRole HelpBalloon;
    public static AccessibleRole Character;
    public static AccessibleRole List;
    public static AccessibleRole ListItem;
    public static AccessibleRole Outline;
    public static AccessibleRole OutlineItem;
    public static AccessibleRole PageTab;
    public static AccessibleRole PropertyPage;
    public static AccessibleRole Indicator;
    public static AccessibleRole Graphic;
    public static AccessibleRole StaticText;
    public static AccessibleRole Text;
    public static AccessibleRole PushButton;
    public static AccessibleRole CheckButton;
    public static AccessibleRole RadioButton;
    public static AccessibleRole ComboBox;
    public static AccessibleRole DropList;
    public static AccessibleRole ProgressBar;
    public static AccessibleRole Dial;
    public static AccessibleRole HotkeyField;
    public static AccessibleRole Slider;
    public static AccessibleRole SpinButton;
    public static AccessibleRole Diagram;
    public static AccessibleRole Animation;
    public static AccessibleRole Equation;
    public static AccessibleRole ButtonDropDown;
    public static AccessibleRole ButtonMenu;
    public static AccessibleRole ButtonDropDownGrid;
    public static AccessibleRole WhiteSpace;
    public static AccessibleRole PageTabList;
    public static AccessibleRole Clock;
    public static AccessibleRole SplitButton;
    public static AccessibleRole IpAddress;
    public static AccessibleRole OutlineButton;
}
internal static class System.Windows.Forms.AccessibleRoleControlTypeMap : object {
    [NullableAttribute("1")]
private static Dictionary`2<AccessibleRole, UIA> s_map;
    private static AccessibleRoleControlTypeMap();
    public static UIA GetControlType(AccessibleRole role);
}
[FlagsAttribute]
public enum System.Windows.Forms.AccessibleSelection : Enum {
    public int value__;
    public static AccessibleSelection None;
    public static AccessibleSelection TakeFocus;
    public static AccessibleSelection TakeSelection;
    public static AccessibleSelection ExtendSelection;
    public static AccessibleSelection AddSelection;
    public static AccessibleSelection RemoveSelection;
}
[FlagsAttribute]
public enum System.Windows.Forms.AccessibleStates : Enum {
    public int value__;
    public static AccessibleStates None;
    public static AccessibleStates Unavailable;
    public static AccessibleStates Selected;
    public static AccessibleStates Focused;
    public static AccessibleStates Pressed;
    public static AccessibleStates Checked;
    public static AccessibleStates Mixed;
    public static AccessibleStates Indeterminate;
    public static AccessibleStates ReadOnly;
    public static AccessibleStates HotTracked;
    public static AccessibleStates Default;
    public static AccessibleStates Expanded;
    public static AccessibleStates Collapsed;
    public static AccessibleStates Busy;
    public static AccessibleStates Floating;
    public static AccessibleStates Marqueed;
    public static AccessibleStates Animated;
    public static AccessibleStates Invisible;
    public static AccessibleStates Offscreen;
    public static AccessibleStates Sizeable;
    public static AccessibleStates Moveable;
    public static AccessibleStates SelfVoicing;
    public static AccessibleStates Focusable;
    public static AccessibleStates Selectable;
    public static AccessibleStates Linked;
    public static AccessibleStates Traversed;
    public static AccessibleStates MultiSelectable;
    public static AccessibleStates ExtSelectable;
    public static AccessibleStates AlertLow;
    public static AccessibleStates AlertMedium;
    public static AccessibleStates AlertHigh;
    public static AccessibleStates Protected;
    public static AccessibleStates HasPopup;
    [ObsoleteAttribute("This enumeration value has been deprecated. There is no replacement. https://go.microsoft.com/fwlink/?linkid=14202")]
public static AccessibleStates Valid;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.AmbientProperties : object {
    [CompilerGeneratedAttribute]
private Color <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Cursor <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForeColor>k__BackingField;
    public Color BackColor { get; public set; }
    public Cursor Cursor { get; public set; }
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(Color value);
    [CompilerGeneratedAttribute]
public Cursor get_Cursor();
    [CompilerGeneratedAttribute]
public void set_Cursor(Cursor value);
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public Color get_ForeColor();
    [CompilerGeneratedAttribute]
public void set_ForeColor(Color value);
}
[EditorAttribute("System.Windows.Forms.Design.AnchorEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[FlagsAttribute]
public enum System.Windows.Forms.AnchorStyles : Enum {
    public int value__;
    public static AnchorStyles Top;
    public static AnchorStyles Bottom;
    public static AnchorStyles Left;
    public static AnchorStyles Right;
    public static AnchorStyles None;
}
public enum System.Windows.Forms.Appearance : Enum {
    public int value__;
    public static Appearance Normal;
    public static Appearance Button;
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.ApplicableToButtonAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.Application : object {
    [NullableAttribute("2")]
private static EventHandlerList s_eventHandlers;
    [NullableAttribute("2")]
private static Font s_defaultFont;
    [NullableAttribute("2")]
private static Font s_defaultFontScaled;
    [NullableAttribute("2")]
private static string s_startupPath;
    [NullableAttribute("2")]
private static string s_executablePath;
    [NullableAttribute("2")]
private static object s_appFileVersion;
    [NullableAttribute("2")]
private static Type s_mainType;
    [NullableAttribute("2")]
private static string s_companyName;
    [NullableAttribute("2")]
private static string s_productName;
    [NullableAttribute("2")]
private static string s_productVersion;
    [NullableAttribute("2")]
private static string s_safeTopLevelCaptionSuffix;
    private static bool s_comCtlSupportsVisualStylesInitialized;
    private static bool s_comCtlSupportsVisualStyles;
    [NullableAttribute("2")]
private static FormCollection s_forms;
    private static object s_internalSyncObject;
    private static bool s_useWaitCursor;
    private static bool s_useEverettThreadAffinity;
    private static bool s_checkedThreadAffinity;
    private static string EverettThreadAffinityValue;
    private static object s_eventApplicationExit;
    private static object s_eventThreadExit;
    private static bool s_exiting;
    [CompilerGeneratedAttribute]
private static bool <UseVisualStyles>k__BackingField;
    internal static Type s_typeOfModalApplicationContext;
    public static bool AllowQuit { get; }
    internal static bool CanContinueIdle { get; }
    internal static bool ComCtlSupportsVisualStyles { get; }
    public static RegistryKey CommonAppDataRegistry { get; }
    internal static string CommonAppDataRegistryKeyName { get; }
    internal static bool UseEverettThreadAffinity { get; }
    public static string CommonAppDataPath { get; }
    [NullableAttribute("2")]
public static string CompanyName { get; }
    public static CultureInfo CurrentCulture { get; public set; }
    public static InputLanguage CurrentInputLanguage { get; public set; }
    internal static bool CustomThreadExceptionHandlerAttached { get; }
    [NullableAttribute("2")]
internal static Font DefaultFont { get; }
    public static string ExecutablePath { get; }
    public static HighDpiMode HighDpiMode { get; }
    public static string LocalUserAppDataPath { get; }
    public static bool MessageLoop { get; }
    public static FormCollection OpenForms { get; }
    [NullableAttribute("2")]
public static string ProductName { get; }
    public static string ProductVersion { get; }
    public static bool RenderWithVisualStyles { get; }
    public static string SafeTopLevelCaptionFormat { get; public set; }
    public static string StartupPath { get; }
    public static bool UseWaitCursor { get; public set; }
    public static string UserAppDataPath { get; }
    public static RegistryKey UserAppDataRegistry { get; }
    public static bool UseVisualStyles { get; private set; }
    internal static string WindowsFormsVersion { get; }
    internal static string WindowMessagesVersion { get; }
    public static VisualStyleState VisualStyleState { get; public set; }
    private static Application();
    public static bool get_AllowQuit();
    internal static bool get_CanContinueIdle();
    internal static bool get_ComCtlSupportsVisualStyles();
    private static bool InitializeComCtlSupportsVisualStyles();
    public static RegistryKey get_CommonAppDataRegistry();
    internal static string get_CommonAppDataRegistryKeyName();
    internal static bool get_UseEverettThreadAffinity();
    public static string get_CommonAppDataPath();
    [NullableContextAttribute("2")]
public static string get_CompanyName();
    public static CultureInfo get_CurrentCulture();
    public static void set_CurrentCulture(CultureInfo value);
    public static InputLanguage get_CurrentInputLanguage();
    public static void set_CurrentInputLanguage(InputLanguage value);
    internal static bool get_CustomThreadExceptionHandlerAttached();
    [NullableContextAttribute("2")]
internal static Font get_DefaultFont();
    public static string get_ExecutablePath();
    public static HighDpiMode get_HighDpiMode();
    public static string get_LocalUserAppDataPath();
    public static bool get_MessageLoop();
    public static FormCollection get_OpenForms();
    [NullableContextAttribute("2")]
public static string get_ProductName();
    public static string get_ProductVersion();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("2")]
public static void RegisterMessageLoop(MessageLoopCallback callback);
    public static bool get_RenderWithVisualStyles();
    public static string get_SafeTopLevelCaptionFormat();
    public static void set_SafeTopLevelCaptionFormat(string value);
    public static string get_StartupPath();
    [EditorBrowsableAttribute("2")]
public static void UnregisterMessageLoop();
    public static bool get_UseWaitCursor();
    public static void set_UseWaitCursor(bool value);
    public static string get_UserAppDataPath();
    public static RegistryKey get_UserAppDataRegistry();
    [CompilerGeneratedAttribute]
public static bool get_UseVisualStyles();
    [CompilerGeneratedAttribute]
private static void set_UseVisualStyles(bool value);
    internal static string get_WindowsFormsVersion();
    internal static string get_WindowMessagesVersion();
    public static VisualStyleState get_VisualStyleState();
    public static void set_VisualStyleState(VisualStyleState value);
    private static BOOL SendThemeChanged(HWND hwnd);
    private static BOOL SendThemeChangedRecursive(HWND handle);
    [NullableContextAttribute("2")]
public static void add_ApplicationExit(EventHandler value);
    [NullableContextAttribute("2")]
public static void remove_ApplicationExit(EventHandler value);
    private static void AddEventHandler(object key, Delegate value);
    private static void RemoveEventHandler(object key, Delegate value);
    [NullableContextAttribute("2")]
public static void AddMessageFilter(IMessageFilter value);
    [EditorBrowsableAttribute("2")]
public static bool FilterMessage(Message& message);
    [NullableContextAttribute("2")]
public static void add_Idle(EventHandler value);
    [NullableContextAttribute("2")]
public static void remove_Idle(EventHandler value);
    [NullableContextAttribute("2")]
public static void add_EnterThreadModal(EventHandler value);
    [NullableContextAttribute("2")]
public static void remove_EnterThreadModal(EventHandler value);
    [NullableContextAttribute("2")]
public static void add_LeaveThreadModal(EventHandler value);
    [NullableContextAttribute("2")]
public static void remove_LeaveThreadModal(EventHandler value);
    [NullableContextAttribute("2")]
public static void add_ThreadException(ThreadExceptionEventHandler value);
    [NullableContextAttribute("2")]
public static void remove_ThreadException(ThreadExceptionEventHandler value);
    [NullableContextAttribute("2")]
public static void add_ThreadExit(EventHandler value);
    [NullableContextAttribute("2")]
public static void remove_ThreadExit(EventHandler value);
    internal static void BeginModalMessageLoop();
    public static void DoEvents();
    internal static void DoEventsModal();
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002")]
public static void EnableVisualStyles();
    internal static void EndModalMessageLoop();
    public static void Exit();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("2")]
public static void Exit(CancelEventArgs e);
    public static void ExitThread();
    internal static void FormActivated(bool modal, bool activated);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3002")]
private static FileVersionInfo GetAppFileVersionInfo();
    [NullableContextAttribute("2")]
private static Type GetAppMainType();
    internal static ThreadContext GetContextForHandle(T handle);
    private static string GetDataPath(string basePath);
    private static void RaiseExit();
    private static void RaiseThreadExit();
    [NullableContextAttribute("0")]
internal static void ParkHandle(HandleRef`1<HWND> handle, DPI_AWARENESS_CONTEXT dpiAwarenessContext);
    internal static void ParkHandle(CreateParams cp, DPI_AWARENESS_CONTEXT dpiAwarenessContext);
    public static ApartmentState OleRequired();
    public static void OnThreadException(Exception t);
    internal static void UnparkHandle(IHandle`1<HWND> handle, DPI_AWARENESS_CONTEXT context);
    [EditorBrowsableAttribute("2")]
public static void RaiseIdle(EventArgs e);
    public static void RemoveMessageFilter(IMessageFilter value);
    public static void Restart();
    public static void Run();
    public static void Run(Form mainForm);
    public static void Run(ApplicationContext context);
    internal static void RunDialog(Form form);
    internal static void ScaleDefaultFont(float textScaleFactor);
    public static void SetCompatibleTextRenderingDefault(bool defaultValue);
    public static void SetDefaultFont(Font font);
    public static bool SetHighDpiMode(HighDpiMode highDpiMode);
    public static bool SetSuspendState(PowerState state, bool force, bool disableWakeEvent);
    public static void SetUnhandledExceptionMode(UnhandledExceptionMode mode);
    public static void SetUnhandledExceptionMode(UnhandledExceptionMode mode, bool threadScope);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ApplicationContext : object {
    private Form _mainForm;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler ThreadExit;
    public Form MainForm { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public ApplicationContext(Form mainForm);
    protected virtual override void Finalize();
    public Form get_MainForm();
    public void set_MainForm(Form value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public void add_ThreadExit(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ThreadExit(EventHandler value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void ExitThread();
    protected virtual void ExitThreadCore();
    [NullableContextAttribute("1")]
protected virtual void OnMainFormClosed(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnMainFormDestroy(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ArrangedElement : Component {
    private Rectangle _bounds;
    [NullableAttribute("2")]
private IArrangedElement _parent;
    private BitVector32 _state;
    private PropertyStore _propertyStore;
    private static int s_stateVisible;
    public Rectangle Bounds { get; }
    private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    [NullableAttribute("2")]
private IArrangedElement System.Windows.Forms.Layout.IArrangedElement.Container { get; }
    protected Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    public Rectangle DisplayRectangle { get; }
    public LayoutEngine LayoutEngine { get; }
    public Padding Margin { get; public set; }
    public Padding Padding { get; public set; }
    [NullableAttribute("2")]
public IArrangedElement Parent { get; public set; }
    public bool ParticipatesInLayout { get; }
    private PropertyStore System.Windows.Forms.Layout.IArrangedElement.Properties { get; }
    private PropertyStore Properties { get; }
    public bool Visible { get; public set; }
    private static ArrangedElement();
    public sealed virtual Rectangle get_Bounds();
    private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    [NullableContextAttribute("2")]
private sealed virtual override IArrangedElement System.Windows.Forms.Layout.IArrangedElement.get_Container();
    protected virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    public virtual Rectangle get_DisplayRectangle();
    public abstract virtual LayoutEngine get_LayoutEngine();
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public virtual Padding get_Padding();
    public virtual void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public virtual IArrangedElement get_Parent();
    [NullableContextAttribute("2")]
public virtual void set_Parent(IArrangedElement value);
    public virtual bool get_ParticipatesInLayout();
    private sealed virtual override PropertyStore System.Windows.Forms.Layout.IArrangedElement.get_Properties();
    private PropertyStore get_Properties();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    [NullableContextAttribute("2")]
protected abstract virtual IArrangedElement GetContainer();
    protected abstract virtual ArrangedElementCollection GetChildren();
    public virtual Size GetPreferredSize(Size constrainingSize);
    public virtual void PerformLayout(IArrangedElement container, string propertyName);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnBoundsChanged(Rectangle oldBounds, Rectangle newBounds);
    public sealed virtual void SetBounds(Rectangle bounds, BoundsSpecified specified);
    protected virtual void SetBoundsCore(Rectangle bounds, BoundsSpecified specified);
}
[FlagsAttribute]
public enum System.Windows.Forms.ArrangeDirection : Enum {
    public int value__;
    public static ArrangeDirection Down;
    public static ArrangeDirection Left;
    public static ArrangeDirection Right;
    public static ArrangeDirection Up;
}
[FlagsAttribute]
public enum System.Windows.Forms.ArrangeStartingPosition : Enum {
    public int value__;
    public static ArrangeStartingPosition BottomLeft;
    public static ArrangeStartingPosition BottomRight;
    public static ArrangeStartingPosition Hide;
    public static ArrangeStartingPosition TopLeft;
    public static ArrangeStartingPosition TopRight;
}
internal class System.Windows.Forms.ArraySubsetEnumerator : object {
    [NullableAttribute("1")]
private Object[] _array;
    private int _total;
    private int _current;
    [NullableAttribute("2")]
public object Current { get; }
    [NullableContextAttribute("1")]
public ArraySubsetEnumerator(Object[] array, int count);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    [NullableContextAttribute("2")]
public sealed virtual object get_Current();
}
public enum System.Windows.Forms.ArrowDirection : Enum {
    public int value__;
    public static ArrowDirection Up;
    public static ArrowDirection Down;
    public static ArrowDirection Left;
    public static ArrowDirection Right;
}
public enum System.Windows.Forms.AutoCompleteMode : Enum {
    public int value__;
    public static AutoCompleteMode None;
    public static AutoCompleteMode Suggest;
    public static AutoCompleteMode Append;
    public static AutoCompleteMode SuggestAppend;
}
public enum System.Windows.Forms.AutoCompleteSource : Enum {
    public int value__;
    public static AutoCompleteSource FileSystem;
    public static AutoCompleteSource HistoryList;
    public static AutoCompleteSource RecentlyUsedList;
    public static AutoCompleteSource AllUrl;
    public static AutoCompleteSource AllSystemSources;
    public static AutoCompleteSource FileSystemDirectories;
    public static AutoCompleteSource CustomSource;
    public static AutoCompleteSource None;
    public static AutoCompleteSource ListItems;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.AutoCompleteStringCollection : object {
    [NullableAttribute("2")]
private CollectionChangeEventHandler _onCollectionChanged;
    private List`1<string> _data;
    public string Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [NullableContextAttribute("2")]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [NullableContextAttribute("2")]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected void OnCollectionChanged(CollectionChangeEventArgs e);
    public int Add(string value);
    public void AddRange(String[] value);
    public sealed virtual void Clear();
    public bool Contains(string value);
    public void CopyTo(String[] array, int index);
    public int IndexOf(string value);
    public void Insert(int index, string value);
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(string value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_SyncRoot();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.AutomationMessages : object {
    internal static int PGM_GETBUTTONCOUNT;
    internal static int PGM_GETBUTTONSTATE;
    internal static int PGM_SETBUTTONSTATE;
    internal static int PGM_GETBUTTONTEXT;
    internal static int PGM_GETBUTTONTOOLTIPTEXT;
    internal static int PGM_GETROWCOORDS;
    internal static int PGM_GETVISIBLEROWCOUNT;
    internal static int PGM_GETSELECTEDROW;
    internal static int PGM_SETSELECTEDTAB;
    internal static int PGM_GETTESTINGINFO;
    [NullableContextAttribute("1")]
public static IntPtr WriteAutomationText(string text);
    public static string ReadAutomationText(IntPtr fileId);
    private static string GenerateLogFileName(IntPtr& fileId);
}
public enum System.Windows.Forms.AutoScaleMode : Enum {
    public int value__;
    public static AutoScaleMode None;
    public static AutoScaleMode Font;
    public static AutoScaleMode Dpi;
    public static AutoScaleMode Inherit;
}
public enum System.Windows.Forms.AutoSizeMode : Enum {
    public int value__;
    public static AutoSizeMode GrowAndShrink;
    public static AutoSizeMode GrowOnly;
}
public enum System.Windows.Forms.AutoValidate : Enum {
    public int value__;
    public static AutoValidate Disable;
    public static AutoValidate EnablePreventFocusChange;
    public static AutoValidate EnableAllowFocusChange;
    public static AutoValidate Inherit;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultEventAttribute("Enter")]
[DesignerAttribute("System.Windows.Forms.Design.AxHostDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.AxHost : Control {
    [NullableAttribute("1")]
private static TraceSwitch s_axHTraceSwitch;
    [NullableAttribute("1")]
private static TraceSwitch s_axPropTraceSwitch;
    [NullableAttribute("1")]
private static TraceSwitch s_axHostSwitch;
    [NullableAttribute("1")]
private static COMException s_invalidArgumentException;
    private static int OC_PASSIVE;
    private static int OC_LOADED;
    private static int OC_RUNNING;
    private static int OC_INPLACE;
    private static int OC_UIACTIVE;
    private static int OC_OPEN;
    private static int EDITM_NONE;
    private static int EDITM_OBJECT;
    private static int EDITM_HOST;
    private static int STG_UNKNOWN;
    private static int STG_STREAM;
    private static int STG_STREAMINIT;
    private static int STG_STORAGE;
    private UInt32 _subclassCheckMessage;
    private static int REGMSG_RETVAL;
    private static int s_logPixelsX;
    private static int s_logPixelsY;
    private static Guid s_ivbformat_Guid;
    private static Guid s_ioleobject_Guid;
    private static Guid s_dataSource_Guid;
    private static Guid s_windowsMediaPlayer_Clsid;
    private static Guid s_comctlImageCombo_Clsid;
    private static Guid s_maskEdit_Clsid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConditionalWeakTable`2<Font, object> s_fontTable;
    private static int s_ocxStateSet;
    private static int s_editorRefresh;
    private static int s_listeningToIdle;
    private static int s_refreshProperties;
    private static int s_fNeedOwnWindow;
    private static int s_fOwnWindow;
    private static int s_fSimpleFrame;
    private static int s_fFakingWindow;
    private static int s_rejectSelection;
    private static int s_ownDisposing;
    private static int s_sinkAttached;
    private static int s_disposed;
    private static int s_manualUpdate;
    private static int s_addedSelectionHandler;
    private static int s_valueChanged;
    private static int s_handlePosRectChanged;
    private static int s_siteProcessedInputKey;
    private static int s_needLicenseKey;
    private static int s_inTransition;
    private static int s_processingKeyUp;
    private static int s_assignUniqueID;
    private static int s_renameEventHooked;
    private BitVector32 _axState;
    private int _storageType;
    private int _ocState;
    private OLEMISC _miscStatusBits;
    private int _freezeCount;
    private int _flags;
    private int _selectionStyle;
    private int _editMode;
    private int _noComponentChange;
    private IntPtr _wndprocAddr;
    private Guid _clsid;
    [NullableAttribute("1")]
private string _text;
    private string _licenseKey;
    [NullableAttribute("1")]
private OleInterfaces _oleSite;
    private AxComponentEditor _editor;
    private AxContainer _container;
    private ContainerControl _containingControl;
    private ContainerControl _newParent;
    private AxContainer _axContainer;
    private State _ocxState;
    private HWND _hwndFocus;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, PropertyDescriptor> _properties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, PropertyInfo> _propertyInfos;
    private PropertyDescriptorCollection _propsStash;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Attribute[] _attribsStash;
    private object _instance;
    private AgileComPointer`1<IOleInPlaceActiveObject> _iOleInPlaceActiveObjectExternal;
    private Interface _iPersistPropBag;
    private Interface _iPersistStream;
    private Interface _iPersistStreamInit;
    private Interface _iPersistStorage;
    private AboutBoxDelegate _aboutBoxDelegate;
    [NullableAttribute("1")]
private EventHandler _selectionChangeHandler;
    private bool _isMaskEdit;
    private bool _ignoreDialogKeys;
    [NullableAttribute("1")]
private EventHandler _onContainerVisibleChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static CategoryAttribute[] s_categoryNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<PROPCAT, CategoryAttribute> _objectDefinedCategoryNames;
    private static int HMperInch;
    private bool CanUIActivate { get; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImeMode ImeMode { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Cursor Cursor { get; public set; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[LocalizableAttribute("True")]
public bool RightToLeft { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Text { get; public set; }
    internal bool CanAccessProperties { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool EditMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasAboutBox { get; }
    private int NoComponentChangeEvents { get; private set; }
    unknown ISite Site {public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public State OcxState { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public ContainerControl ContainingControl { get; public set; }
    private bool RefreshAllProperties { get; private set; }
    [NullableContextAttribute("1")]
protected AxHost(string clsid);
    [NullableContextAttribute("1")]
protected AxHost(string clsid, int flags);
    private static AxHost();
    private bool get_CanUIActivate();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    private bool GetAxState(int mask);
    private void SetAxState(int mask, bool value);
    protected virtual void AttachInterfaces();
    private void RealizeStyles();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_MouseClick(EventHandler value);
    public void remove_MouseClick(EventHandler value);
    public void add_MouseDoubleClick(EventHandler value);
    public void remove_MouseDoubleClick(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Cursor get_Cursor();
    [NullableContextAttribute("1")]
public virtual void set_Cursor(Cursor value);
    protected virtual Size get_DefaultSize();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_RightToLeft();
    public virtual void set_RightToLeft(bool value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    internal virtual bool get_CanAccessProperties();
    [EditorBrowsableAttribute("2")]
protected bool PropsValid();
    [EditorBrowsableAttribute("2")]
public sealed virtual void BeginInit();
    [EditorBrowsableAttribute("2")]
public sealed virtual void EndInit();
    [NullableContextAttribute("1")]
private void OnContainerVisibleChanged(object sender, EventArgs e);
    public bool get_EditMode();
    public bool get_HasAboutBox();
    private int get_NoComponentChangeEvents();
    private void set_NoComponentChangeEvents(int value);
    public void ShowAboutBox();
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnForeColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBackColorChanged(EventArgs e);
    private void AmbientChanged(int dispid);
    private bool OwnWindow();
    private HWND GetHandleNoCreate();
    private void AddSelectionHandler();
    [NullableContextAttribute("1")]
private void OnComponentRename(object sender, ComponentRenameEventArgs e);
    private bool RemoveSelectionHandler();
    private void SyncRenameNotification(bool hook);
    public virtual void set_Site(ISite value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLostFocus(EventArgs e);
    [NullableContextAttribute("1")]
private void OnNewSelection(object sender, EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    protected virtual void CreateHandle();
    private static HRESULT SetupLogPixels(bool force);
    private void HiMetric2Pixel(Size& sz);
    private void Pixel2hiMetric(Size& sz);
    private static int Pixel2Twip(int v, bool xDirection);
    private static int Twip2Pixel(double v, bool xDirection);
    private static int Twip2Pixel(int v, bool xDirection);
    private Size SetExtent(int width, int height);
    private Size GetExtent();
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    private void SetObjectRects(Rectangle bounds);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private bool CheckSubclassing();
    protected virtual void DestroyHandle();
    private void TransitionDownTo(int state);
    private void TransitionUpTo(int state);
    protected virtual void OnInPlaceActive();
    private void InPlaceActivate();
    private HRESULT InPlaceDeactivate();
    private void UiActivate();
    private void DestroyFakeWindow();
    private void EnsureWindowPresent();
    protected virtual void SetVisibleCore(bool value);
    private void MakeVisibleWithShow();
    private void HideAxControl();
    protected virtual bool IsInputChar(char charCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual bool PreProcessMessage(Message& msg);
    protected internal virtual bool ProcessMnemonic(char charCode);
    [NullableContextAttribute("1")]
protected void SetAboutBoxDelegate(AboutBoxDelegate d);
    public State get_OcxState();
    public void set_OcxState(State value);
    private State CreateNewOcxState(State oldOcxState);
    public ContainerControl get_ContainingControl();
    public void set_ContainingControl(ContainerControl value);
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeText();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeContainingControl();
    private ContainerControl FindContainerControlInternal();
    private bool IsDirty();
    internal bool IsUserMode();
    private object GetAmbientProperty(int dispid);
    public void DoVerb(int verb);
    private bool AwaitingDefreezing();
    private void FreezeEvents(bool freeze);
    private HRESULT UiDeactivate();
    private int GetOcState();
    private void SetOcState(int nv);
    private string GetLicenseKey();
    private string GetLicenseKey(Guid clsid);
    private void CreateWithoutLicense(Guid clsid);
    private void CreateWithLicense(string license, Guid clsid);
    private void CreateInstance();
    protected virtual object CreateInstanceCore(Guid clsid);
    private CategoryAttribute GetCategoryForDispid(int dispid);
    private void SetSelectionStyle(int selectionStyle);
    [EditorBrowsableAttribute("2")]
public void InvokeEditMode();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("Generic TypeConverters may require the generic types to be annotated. For example, NullableConverter requires the underlying type to be DynamicallyAccessedMembers All.")]
private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("The built-in EventDescriptor implementation uses Reflection which requires unreferenced code.")]
private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered.")]
private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("Editors registered in TypeDescriptor.AddEditorTable may be trimmed.")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    [NullableContextAttribute("0")]
private void OnIdle(object sender, EventArgs e);
    private bool get_RefreshAllProperties();
    private void set_RefreshAllProperties(bool value);
    [NullableContextAttribute("0")]
private PropertyDescriptorCollection FillProperties(Attribute[] attributes);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered.")]
private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
[RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered. The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    [NullableContextAttribute("0")]
private AxPropertyDescriptor GetPropertyDescriptorFromDispid(int dispid);
    private void ActivateAxControl();
    [NullableContextAttribute("0")]
private void DepersistFromIPropertyBag(Interface propBag);
    [NullableContextAttribute("0")]
private void DepersistFromIStream(Interface istream);
    [NullableContextAttribute("0")]
private void DepersistFromIStreamInit(Interface istream);
    [NullableContextAttribute("0")]
private void DepersistFromIStorage(IStorage* storage);
    private void DepersistControl();
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
public object GetOcx();
    [NullableContextAttribute("0")]
private object GetOcxCreate();
    private void StartEvents();
    private void StopEvents();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateSink();
    [EditorBrowsableAttribute("2")]
protected virtual void DetachSink();
    private bool CanShowPropertyPages();
    public bool HasPropertyPages();
    private void ShowPropertyPageForDispid(int dispid, Guid guid);
    [EditorBrowsableAttribute("2")]
public void MakeDirty();
    public void ShowPropertyPages();
    [NullableContextAttribute("0")]
public void ShowPropertyPages(Control control);
    internal virtual HBRUSH InitializeDCForWmCtlColor(HDC dc, MessageId msg);
    protected virtual void WndProc(Message& m);
    private void DetachAndForward(Message& m);
    private void DetachWindow();
    private void InformOfNewHandle();
    private void AttachWindow(HWND hwnd);
    [NullableContextAttribute("0")]
protected virtual void OnHandleCreated(EventArgs e);
    private static int Pix2HM(int pix, int logP);
    private static int HM2Pix(int hm, int logP);
    private bool QuickActivate();
    internal virtual void DisposeAxControls();
    private bool GetControlEnabled();
    internal virtual bool CanSelectCore();
    protected virtual void Dispose(bool disposing);
    private bool GetSiteOwnsDeactivation();
    private void DisposeAxControl();
    private void ReleaseAxControl();
    private void ParseMiscBits(OLEMISC bits);
    private void SlowActivate();
    [NullableContextAttribute("0")]
private AxContainer GetParentContainer();
    [NullableContextAttribute("0")]
private ComScope`1<T> GetComScope();
    [NullableContextAttribute("0")]
private ComScope`1<T> TryGetComScope(HRESULT& hr);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static object GetIPictureFromPicture(Image image);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static object GetIPictureFromCursor(Cursor cursor);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static object GetIPictureDispFromPicture(Image image);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static Image GetPictureFromIPicture(object picture);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static Image GetPictureFromIPictureDisp(object picture);
    [NullableContextAttribute("0")]
private static FONTDESC GetFONTDESCFromFont(Font font);
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("2")]
protected static Color GetColorFromOleColor(UInt32 color);
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("2")]
protected static UInt32 GetOleColorFromColor(Color color);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static object GetIFontFromFont(Font font);
    [NullableContextAttribute("0")]
private protected static IFont* GetIFontPointerFromFont(Font font);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static Font GetFontFromIFont(object font);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static object GetIFontDispFromFont(Font font);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected static Font GetFontFromIFontDisp(object font);
    [EditorBrowsableAttribute("2")]
protected static double GetOADateFromTime(DateTime time);
    [EditorBrowsableAttribute("2")]
protected static DateTime GetTimeFromOADate(double date);
    [NullableContextAttribute("0")]
private static int Convert2int(object o, bool xDirection);
    [NullableContextAttribute("0")]
private static short Convert2short(object o);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected void RaiseOnMouseMove(object o1, object o2, object o3, object o4);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseMove(short button, short shift, float x, float y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseMove(short button, short shift, int x, int y);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected void RaiseOnMouseUp(object o1, object o2, object o3, object o4);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseUp(short button, short shift, float x, float y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseUp(short button, short shift, int x, int y);
    [NullableContextAttribute("0")]
[EditorBrowsableAttribute("2")]
protected void RaiseOnMouseDown(object o1, object o2, object o3, object o4);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseDown(short button, short shift, float x, float y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseDown(short button, short shift, int x, int y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.BaseCollection : MarshalByRefObject {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public int Count { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public object SyncRoot { get; }
    [NullableAttribute("2")]
protected ArrayList List { get; }
    public virtual int get_Count();
    public sealed virtual void CopyTo(Array ar, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    [NullableContextAttribute("2")]
protected virtual ArrayList get_List();
}
[FlagsAttribute]
public enum System.Windows.Forms.BatteryChargeStatus : Enum {
    public int value__;
    public static BatteryChargeStatus High;
    public static BatteryChargeStatus Low;
    public static BatteryChargeStatus Critical;
    public static BatteryChargeStatus Charging;
    public static BatteryChargeStatus NoSystemBattery;
    public static BatteryChargeStatus Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.BindableComponent : Component {
    internal static object s_bindingContextChangedEvent;
    [NullableAttribute("2")]
private ControlBindingsCollection _dataBindings;
    [NullableAttribute("2")]
private BindingContext _bindingContext;
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("BindingComponentBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[SRCategoryAttribute("CatData")]
public ControlBindingsCollection DataBindings { get; }
    private static BindableComponent();
    [NullableContextAttribute("2")]
public sealed virtual BindingContext get_BindingContext();
    [NullableContextAttribute("2")]
public sealed virtual void set_BindingContext(BindingContext value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnBindingContextChanged(EventArgs e);
    public sealed virtual ControlBindingsCollection get_DataBindings();
    private protected void RaiseEvent(object key, EventArgs e);
}
[TypeConverterAttribute("System.Windows.Forms.ListBindingConverter")]
public class System.Windows.Forms.Binding : object {
    private BindingManagerBase _bindingManagerBase;
    private BindToObject _bindToObject;
    private PropertyDescriptor _propInfo;
    private PropertyDescriptor _propIsNullInfo;
    private EventDescriptor _validateInfo;
    private TypeConverter _propInfoConverter;
    private bool _formattingEnabled;
    private bool _modified;
    private bool _inSetPropValue;
    private bool _inPushOrPull;
    private bool _inOnBindingComplete;
    private string _formatString;
    private IFormatProvider _formatInfo;
    private object _nullValue;
    private object _dsNullValue;
    private bool _dsNullValueSet;
    private ConvertEventHandler _onParse;
    private ConvertEventHandler _onFormat;
    private ControlUpdateMode _controlUpdateMode;
    private BindingCompleteEventHandler _onComplete;
    [CompilerGeneratedAttribute]
private object <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingMemberInfo <BindingMemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableComponent <BindableComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSourceUpdateMode <DataSourceUpdateMode>k__BackingField;
    public object DataSource { get; }
    public BindingMemberInfo BindingMemberInfo { get; }
    [DefaultValueAttribute("")]
public IBindableComponent BindableComponent { get; private set; }
    [DefaultValueAttribute("")]
public Control Control { get; }
    internal bool ComponentCreated { get; }
    public bool IsBinding { get; private set; }
    public BindingManagerBase BindingManagerBase { get; internal set; }
    [DefaultValueAttribute("")]
public string PropertyName { get; }
    [DefaultValueAttribute("False")]
public bool FormattingEnabled { get; public set; }
    [DefaultValueAttribute("")]
public IFormatProvider FormatInfo { get; public set; }
    public string FormatString { get; public set; }
    public object NullValue { get; public set; }
    public object DataSourceNullValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ControlUpdateMode ControlUpdateMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataSourceUpdateMode DataSourceUpdateMode { get; public set; }
    internal bool IsBindable { get; }
    public Binding(string propertyName, object dataSource, string dataMember);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);
    [CompilerGeneratedAttribute]
public object get_DataSource();
    [CompilerGeneratedAttribute]
public BindingMemberInfo get_BindingMemberInfo();
    [CompilerGeneratedAttribute]
public IBindableComponent get_BindableComponent();
    [CompilerGeneratedAttribute]
private void set_BindableComponent(IBindableComponent value);
    public Control get_Control();
    internal static bool IsComponentCreated(IBindableComponent component);
    internal bool get_ComponentCreated();
    private void FormLoaded(object sender, EventArgs e);
    internal void SetBindableComponent(IBindableComponent value);
    [CompilerGeneratedAttribute]
public bool get_IsBinding();
    [CompilerGeneratedAttribute]
private void set_IsBinding(bool value);
    public BindingManagerBase get_BindingManagerBase();
    internal void set_BindingManagerBase(BindingManagerBase value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    public void add_BindingComplete(BindingCompleteEventHandler value);
    public void remove_BindingComplete(BindingCompleteEventHandler value);
    public void add_Parse(ConvertEventHandler value);
    public void remove_Parse(ConvertEventHandler value);
    public void add_Format(ConvertEventHandler value);
    public void remove_Format(ConvertEventHandler value);
    public bool get_FormattingEnabled();
    public void set_FormattingEnabled(bool value);
    public IFormatProvider get_FormatInfo();
    public void set_FormatInfo(IFormatProvider value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public object get_NullValue();
    public void set_NullValue(object value);
    public object get_DataSourceNullValue();
    public void set_DataSourceNullValue(object value);
    public ControlUpdateMode get_ControlUpdateMode();
    public void set_ControlUpdateMode(ControlUpdateMode value);
    [CompilerGeneratedAttribute]
public DataSourceUpdateMode get_DataSourceUpdateMode();
    [CompilerGeneratedAttribute]
public void set_DataSourceUpdateMode(DataSourceUpdateMode value);
    private void BindTarget(bool bind);
    private void binding_MetaDataChanged(object sender, EventArgs e);
    private void CheckBinding();
    internal bool ControlAtDesignTime();
    private object GetDataSourceNullValue(Type type);
    private object GetPropValue();
    private BindingCompleteEventArgs CreateBindingCompleteEventArgs(BindingCompleteContext context, Exception ex);
    protected virtual void OnBindingComplete(BindingCompleteEventArgs e);
    protected virtual void OnParse(ConvertEventArgs cevent);
    protected virtual void OnFormat(ConvertEventArgs cevent);
    private object ParseObject(object value);
    private object FormatObject(object value);
    internal bool PullData();
    internal bool PullData(bool reformat);
    internal bool PullData(bool reformat, bool force);
    internal bool PushData();
    internal bool PushData(bool force);
    public void ReadValue();
    public void WriteValue();
    private void SetPropValue(object value);
    private bool ShouldSerializeFormatString();
    private bool ShouldSerializeNullValue();
    private bool ShouldSerializeDataSourceNullValue();
    private void Target_PropertyChanged(object sender, EventArgs e);
    private void Target_Validate(object sender, CancelEventArgs e);
    internal bool get_IsBindable();
    internal void UpdateIsBinding();
}
public enum System.Windows.Forms.BindingCompleteContext : Enum {
    public int value__;
    public static BindingCompleteContext ControlUpdate;
    public static BindingCompleteContext DataSourceUpdate;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.BindingCompleteEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private Binding <Binding>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingCompleteState <BindingCompleteState>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingCompleteContext <BindingCompleteContext>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Binding Binding { get; }
    public BindingCompleteState BindingCompleteState { get; }
    public BindingCompleteContext BindingCompleteContext { get; }
    [NullableAttribute("1")]
public string ErrorText { get; }
    public Exception Exception { get; }
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText, Exception exception, bool cancel);
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText, Exception exception);
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText);
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context);
    [CompilerGeneratedAttribute]
public Binding get_Binding();
    [CompilerGeneratedAttribute]
public BindingCompleteState get_BindingCompleteState();
    [CompilerGeneratedAttribute]
public BindingCompleteContext get_BindingCompleteContext();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class System.Windows.Forms.BindingCompleteEventHandler : MulticastDelegate {
    public BindingCompleteEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, BindingCompleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BindingCompleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.BindingCompleteState : Enum {
    public int value__;
    public static BindingCompleteState Success;
    public static BindingCompleteState DataError;
    public static BindingCompleteState Exception;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Windows.Forms.BindingContext : object {
    private Dictionary`2<HashKey, WeakReference> _listManagers;
    private int System.Collections.ICollection.Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public BindingManagerBase Item { get; }
    public BindingManagerBase Item { get; }
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array ar, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public BindingManagerBase get_Item(object dataSource);
    public BindingManagerBase get_Item(object dataSource, string dataMember);
    protected internal void Add(object dataSource, BindingManagerBase listManager);
    protected virtual void AddCore(object dataSource, BindingManagerBase listManager);
    [NullableContextAttribute("2")]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [NullableContextAttribute("2")]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected internal void Clear();
    protected virtual void ClearCore();
    public bool Contains(object dataSource);
    public bool Contains(object dataSource, string dataMember);
    private static HashKey GetKey(object dataSource, string dataMember);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected internal void Remove(object dataSource);
    protected virtual void RemoveCore(object dataSource);
    private BindingManagerBase EnsureListManager(object dataSource, string dataMember);
    private static void CheckPropertyBindingCycles(BindingContext newBindingContext, Binding propBinding);
    private void ScrubWeakRefs();
    public static void UpdateBinding(BindingContext newBindingContext, Binding binding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.BindingManagerBase : object {
    [NullableAttribute("2")]
private BindingsCollection _bindings;
    private bool _pullingData;
    [NullableAttribute("2")]
protected EventHandler onCurrentChangedHandler;
    [NullableAttribute("2")]
protected EventHandler onPositionChangedHandler;
    [NullableAttribute("2")]
private BindingCompleteEventHandler _onBindingCompleteHandler;
    [NullableAttribute("2")]
private protected EventHandler _onCurrentItemChangedHandler;
    [NullableAttribute("2")]
private BindingManagerDataErrorEventHandler _onDataErrorHandler;
    public BindingsCollection Bindings { get; }
    [NullableAttribute("2")]
public object Current { get; }
    internal Type BindType { get; }
    public int Position { get; public set; }
    [NullableAttribute("2")]
internal object DataSource { get; }
    internal bool IsBinding { get; }
    public bool IsBindingSuspended { get; }
    public int Count { get; }
    internal BindingManagerBase(object dataSource);
    public BindingsCollection get_Bindings();
    protected internal void OnBindingComplete(BindingCompleteEventArgs args);
    protected internal abstract virtual void OnCurrentChanged(EventArgs e);
    protected internal abstract virtual void OnCurrentItemChanged(EventArgs e);
    protected internal void OnDataError(Exception e);
    [NullableContextAttribute("2")]
public abstract virtual object get_Current();
    private protected abstract virtual void SetDataSource(object dataSource);
    internal abstract virtual Type get_BindType();
    internal abstract virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties();
    protected internal virtual PropertyDescriptorCollection GetItemProperties(ArrayList dataSources, ArrayList listAccessors);
    protected virtual PropertyDescriptorCollection GetItemProperties(Type listType, int offset, ArrayList dataSources, ArrayList listAccessors);
    public void add_BindingComplete(BindingCompleteEventHandler value);
    public void remove_BindingComplete(BindingCompleteEventHandler value);
    public void add_CurrentChanged(EventHandler value);
    public void remove_CurrentChanged(EventHandler value);
    public void add_CurrentItemChanged(EventHandler value);
    public void remove_CurrentItemChanged(EventHandler value);
    public void add_DataError(BindingManagerDataErrorEventHandler value);
    public void remove_DataError(BindingManagerDataErrorEventHandler value);
    internal abstract virtual string GetListName();
    public abstract virtual void CancelCurrentEdit();
    public abstract virtual void EndCurrentEdit();
    public abstract virtual void AddNew();
    public abstract virtual void RemoveAt(int index);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public void add_PositionChanged(EventHandler value);
    public void remove_PositionChanged(EventHandler value);
    protected abstract virtual void UpdateIsBinding();
    protected internal abstract virtual string GetListName(ArrayList listAccessors);
    public abstract virtual void SuspendBinding();
    public abstract virtual void ResumeBinding();
    protected void PullData();
    internal void PullData(Boolean& success);
    protected void PushData();
    [NullableContextAttribute("2")]
internal abstract virtual object get_DataSource();
    internal abstract virtual bool get_IsBinding();
    public bool get_IsBindingSuspended();
    public abstract virtual int get_Count();
    private void OnBindingsCollectionChanged(object sender, CollectionChangeEventArgs e);
    private void OnBindingsCollectionChanging(object sender, CollectionChangeEventArgs e);
    private void Binding_BindingComplete(object sender, BindingCompleteEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.BindingManagerDataErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public BindingManagerDataErrorEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class System.Windows.Forms.BindingManagerDataErrorEventHandler : MulticastDelegate {
    public BindingManagerDataErrorEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, BindingManagerDataErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BindingManagerDataErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Windows.Forms.BindingMemberInfo : ValueType {
    [NullableAttribute("2")]
private string _dataList;
    [NullableAttribute("2")]
private string _dataField;
    public string BindingPath { get; }
    public string BindingField { get; }
    public string BindingMember { get; }
    [NullableContextAttribute("2")]
public BindingMemberInfo(string dataMember);
    public string get_BindingPath();
    public string get_BindingField();
    public string get_BindingMember();
    [NullableContextAttribute("2")]
public virtual bool Equals(object otherObject);
    public sealed virtual bool Equals(BindingMemberInfo other);
    public static bool op_Equality(BindingMemberInfo a, BindingMemberInfo b);
    public static bool op_Inequality(BindingMemberInfo a, BindingMemberInfo b);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("BindingSource")]
[DefaultEventAttribute("RefreshItems")]
[DesignerAttribute("System.Windows.Forms.Design.BindingNavigatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionBindingNavigator")]
public class System.Windows.Forms.BindingNavigator : ToolStrip {
    private BindingSource _bindingSource;
    private ToolStripItem _moveFirstItem;
    private ToolStripItem _movePreviousItem;
    private ToolStripItem _moveNextItem;
    private ToolStripItem _moveLastItem;
    private ToolStripItem _addNewItem;
    private ToolStripItem _deleteItem;
    private ToolStripItem _positionItem;
    private ToolStripItem _countItem;
    [NullableAttribute("1")]
private string _countItemFormat;
    private EventHandler _onRefreshItems;
    private bool _initializing;
    private bool _addNewItemUserEnabled;
    private bool _deleteItemUserEnabled;
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("BindingNavigatorBindingSourcePropDescr")]
[TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
public BindingSource BindingSource { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMoveFirstItemPropDescr")]
public ToolStripItem MoveFirstItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMovePreviousItemPropDescr")]
public ToolStripItem MovePreviousItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMoveNextItemPropDescr")]
public ToolStripItem MoveNextItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMoveLastItemPropDescr")]
public ToolStripItem MoveLastItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorAddNewItemPropDescr")]
public ToolStripItem AddNewItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorDeleteItemPropDescr")]
public ToolStripItem DeleteItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorPositionItemPropDescr")]
public ToolStripItem PositionItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorCountItemPropDescr")]
public ToolStripItem CountItem { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("BindingNavigatorCountItemFormatPropDescr")]
public string CountItemFormat { get; public set; }
    public BindingNavigator(BindingSource bindingSource);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public BindingNavigator(IContainer container);
    public BindingNavigator(bool addStandardItems);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    protected virtual void Dispose(bool disposing);
    public virtual void AddStandardItems();
    public BindingSource get_BindingSource();
    public void set_BindingSource(BindingSource value);
    public ToolStripItem get_MoveFirstItem();
    public void set_MoveFirstItem(ToolStripItem value);
    public ToolStripItem get_MovePreviousItem();
    public void set_MovePreviousItem(ToolStripItem value);
    public ToolStripItem get_MoveNextItem();
    public void set_MoveNextItem(ToolStripItem value);
    public ToolStripItem get_MoveLastItem();
    public void set_MoveLastItem(ToolStripItem value);
    public ToolStripItem get_AddNewItem();
    public void set_AddNewItem(ToolStripItem value);
    public ToolStripItem get_DeleteItem();
    public void set_DeleteItem(ToolStripItem value);
    public ToolStripItem get_PositionItem();
    public void set_PositionItem(ToolStripItem value);
    public ToolStripItem get_CountItem();
    public void set_CountItem(ToolStripItem value);
    [NullableContextAttribute("1")]
public string get_CountItemFormat();
    [NullableContextAttribute("1")]
public void set_CountItemFormat(string value);
    public void add_RefreshItems(EventHandler value);
    public void remove_RefreshItems(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void RefreshItemsCore();
    protected virtual void OnRefreshItems();
    public bool Validate();
    private void AcceptNewPosition();
    private void CancelNewPosition();
    [NullableContextAttribute("1")]
private void OnMoveFirst(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnMovePrevious(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnMoveNext(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnMoveLast(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnAddNew(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnDelete(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnPositionKey(object sender, KeyEventArgs e);
    [NullableContextAttribute("1")]
private void OnPositionLostFocus(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnBindingSourceStateChanged(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnBindingSourceDisposed(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnBindingSourceListChanged(object sender, ListChangedEventArgs e);
    private void RefreshItemsInternal();
    private void ResetCountItemFormat();
    private bool ShouldSerializeCountItemFormat();
    [NullableContextAttribute("1")]
private void OnAddNewItemEnabledChanged(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnDeleteItemEnabledChanged(object sender, EventArgs e);
    private void WireUpButton(ToolStripItem& oldButton, ToolStripItem newButton, EventHandler clickHandler);
    [NullableContextAttribute("1")]
private void WireUpTextBox(ToolStripItem& oldTextBox, ToolStripItem newTextBox, KeyEventHandler keyUpHandler, EventHandler lostFocusHandler);
    private void WireUpLabel(ToolStripItem& oldLabel, ToolStripItem newLabel);
    private void WireUpBindingSource(BindingSource& oldBindingSource, BindingSource newBindingSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Windows.Forms.BindingsCollection : BaseCollection {
    private List`1<Binding> _list;
    [NullableAttribute("2")]
private CollectionChangeEventHandler _onCollectionChanging;
    [NullableAttribute("2")]
private CollectionChangeEventHandler _onCollectionChanged;
    public int Count { get; }
    protected ArrayList List { get; }
    public Binding Item { get; }
    public virtual int get_Count();
    protected virtual ArrayList get_List();
    public Binding get_Item(int index);
    protected internal void Add(Binding binding);
    protected virtual void AddCore(Binding dataBinding);
    [NullableContextAttribute("2")]
public void add_CollectionChanging(CollectionChangeEventHandler value);
    [NullableContextAttribute("2")]
public void remove_CollectionChanging(CollectionChangeEventHandler value);
    [NullableContextAttribute("2")]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [NullableContextAttribute("2")]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected internal void Clear();
    protected virtual void ClearCore();
    protected virtual void OnCollectionChanging(CollectionChangeEventArgs e);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected internal void Remove(Binding binding);
    protected internal void RemoveAt(int index);
    protected virtual void RemoveCore(Binding dataBinding);
    protected internal bool ShouldSerializeMyAll();
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("DataSource")]
[DefaultEventAttribute("CurrentChanged")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
[DesignerAttribute("System.Windows.Forms.Design.BindingSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionBindingSource")]
public class System.Windows.Forms.BindingSource : Component {
    private static object s_eventAddingNew;
    private static object s_eventBindingComplete;
    private static object s_eventCurrentChanged;
    private static object s_eventCurrentItemChanged;
    private static object s_eventDataError;
    private static object s_eventDataMemberChanged;
    private static object s_eventDataSourceChanged;
    private static object s_eventListChanged;
    private static object s_eventPositionChanged;
    private static object s_eventInitialized;
    private object _dataSource;
    private string _dataMember;
    private string _sort;
    private string _filter;
    private CurrencyManager _currencyManager;
    private bool _parentsCurrentItemChanging;
    private bool _disposedOrFinalized;
    private IList _innerList;
    private bool _isBindingList;
    private bool _listRaisesItemChangedEvents;
    private bool _listExtractedFromEnumerable;
    private Type _itemType;
    private ConstructorInfo _itemConstructor;
    private PropertyDescriptorCollection _itemShape;
    private Dictionary`2<string, BindingSource> _relatedBindingSources;
    private bool _allowNewIsSet;
    private bool _allowNewSetValue;
    private object _currentItemHookedForItemChange;
    private object _lastCurrentItem;
    private EventHandler _listItemPropertyChangedHandler;
    private int _addNewPos;
    private bool _initializing;
    private bool _needToSetList;
    private bool _recursionDetectionFlag;
    private bool _innerListChanging;
    private bool _endingEdit;
    [CompilerGeneratedAttribute]
private bool <RaiseListChangedEvents>k__BackingField;
    [BrowsableAttribute("False")]
public CurrencyManager CurrencyManager { get; }
    [BrowsableAttribute("False")]
public object Current { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("BindingSourceDataMemberDescr")]
public string DataMember { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("BindingSourceDataSourceDescr")]
public object DataSource { get; public set; }
    private string InnerListFilter { get; private set; }
    private string InnerListSort { get; private set; }
    [BrowsableAttribute("False")]
public bool IsBindingSuspended { get; }
    [BrowsableAttribute("False")]
public IList List { get; }
    [DefaultValueAttribute("-1")]
[BrowsableAttribute("False")]
public int Position { get; public set; }
    [DefaultValueAttribute("True")]
[BrowsableAttribute("False")]
public bool RaiseListChangedEvents { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("BindingSourceSortDescr")]
public string Sort { get; public set; }
    private bool System.ComponentModel.ISupportInitializeNotification.IsInitialized { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    [BrowsableAttribute("False")]
public object Item { get; public set; }
    [BrowsableAttribute("False")]
public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool AllowEdit { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("BindingSourceAllowNewDescr")]
public bool AllowNew { get; public set; }
    [BrowsableAttribute("False")]
public bool AllowRemove { get; }
    [BrowsableAttribute("False")]
public bool SupportsChangeNotification { get; }
    [BrowsableAttribute("False")]
public bool SupportsSearching { get; }
    [BrowsableAttribute("False")]
public bool SupportsSorting { get; }
    [BrowsableAttribute("False")]
public bool IsSorted { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public PropertyDescriptor SortProperty { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ListSortDirection SortDirection { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ListSortDescriptionCollection SortDescriptions { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("BindingSourceFilterDescr")]
public string Filter { get; public set; }
    [BrowsableAttribute("False")]
public bool SupportsAdvancedSorting { get; }
    [BrowsableAttribute("False")]
public bool SupportsFiltering { get; }
    public BindingSource(object dataSource, string dataMember);
    public BindingSource(IContainer container);
    private static BindingSource();
    private bool AllowNewInternal(bool checkConstructor);
    private bool IsListWriteable(bool checkConstructor);
    public virtual CurrencyManager get_CurrencyManager();
    public virtual CurrencyManager GetRelatedCurrencyManager(string dataMember);
    private BindingSource GetRelatedBindingSource(string dataMember);
    public object get_Current();
    public string get_DataMember();
    public void set_DataMember(string value);
    public object get_DataSource();
    public void set_DataSource(object value);
    private string get_InnerListFilter();
    private void set_InnerListFilter(string value);
    private string get_InnerListSort();
    private void set_InnerListSort(string value);
    public bool get_IsBindingSuspended();
    public IList get_List();
    public int get_Position();
    public void set_Position(int value);
    [CompilerGeneratedAttribute]
public bool get_RaiseListChangedEvents();
    [CompilerGeneratedAttribute]
public void set_RaiseListChangedEvents(bool value);
    public string get_Sort();
    public void set_Sort(string value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    public void add_BindingComplete(BindingCompleteEventHandler value);
    public void remove_BindingComplete(BindingCompleteEventHandler value);
    public void add_DataError(BindingManagerDataErrorEventHandler value);
    public void remove_DataError(BindingManagerDataErrorEventHandler value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    public void add_DataMemberChanged(EventHandler value);
    public void remove_DataMemberChanged(EventHandler value);
    public void add_CurrentChanged(EventHandler value);
    public void remove_CurrentChanged(EventHandler value);
    public void add_CurrentItemChanged(EventHandler value);
    public void remove_CurrentItemChanged(EventHandler value);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_PositionChanged(EventHandler value);
    public void remove_PositionChanged(EventHandler value);
    private static string BuildSortString(ListSortDescriptionCollection sortsColln);
    public void CancelEdit();
    private void ThrowIfBindingSourceRecursionDetected(object newDataSource);
    private void ClearInvalidDataMember();
    private static IList CreateBindingList(Type type);
    private static object CreateInstanceOfType(Type type);
    private void CurrencyManager_PositionChanged(object sender, EventArgs e);
    private void CurrencyManager_CurrentChanged(object sender, EventArgs e);
    private void CurrencyManager_CurrentItemChanged(object sender, EventArgs e);
    private void CurrencyManager_BindingComplete(object sender, BindingCompleteEventArgs e);
    private void CurrencyManager_DataError(object sender, BindingManagerDataErrorEventArgs e);
    protected virtual void Dispose(bool disposing);
    public void EndEdit();
    private void EnsureInnerList();
    public int Find(string propertyName, object key);
    private static IList GetListFromType(Type type);
    private static IList GetListFromEnumerable(IEnumerable enumerable);
    private bool IsDataMemberValid();
    private void InnerList_ListChanged(object sender, ListChangedEventArgs e);
    private void ListItem_PropertyChanged(object sender, EventArgs e);
    public void MoveFirst();
    public void MoveLast();
    public void MoveNext();
    public void MovePrevious();
    private void OnSimpleListChanged(ListChangedType listChangedType, int newIndex);
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnBindingComplete(BindingCompleteEventArgs e);
    protected virtual void OnCurrentChanged(EventArgs e);
    protected virtual void OnCurrentItemChanged(EventArgs e);
    protected virtual void OnDataError(BindingManagerDataErrorEventArgs e);
    protected virtual void OnDataMemberChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnPositionChanged(EventArgs e);
    private void ParentCurrencyManager_CurrentItemChanged(object sender, EventArgs e);
    private void ParentCurrencyManager_MetaDataChanged(object sender, EventArgs e);
    private ListSortDescriptionCollection ParseSortString(string sortString);
    public void RemoveCurrent();
    [EditorBrowsableAttribute("2")]
public virtual void ResetAllowNew();
    public void ResetBindings(bool metadataChanged);
    public void ResetCurrentItem();
    public void ResetItem(int itemIndex);
    public void ResumeBinding();
    public void SuspendBinding();
    private void ResetList();
    private void SetList(IList list, bool metaDataChanged, bool applySortAndFilter);
    private static IList WrapObjectInBindingList(object obj);
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeAllowNew();
    private void HookItemChangedEventsForNewCurrent();
    private void UnhookItemChangedEventsForOldCurrent();
    private void WireCurrencyManager(CurrencyManager cm);
    private void UnwireCurrencyManager(CurrencyManager cm);
    private void WireDataSource();
    private void UnwireDataSource();
    private void WireInnerList();
    private void UnwireInnerList();
    private void WirePropertyChangedEvents(object item);
    private void UnwirePropertyChangedEvents(object item);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private void EndInitCore();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private void DataSource_Initialized(object sender, EventArgs e);
    private sealed virtual override bool System.ComponentModel.ISupportInitializeNotification.get_IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.add_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.remove_Initialized(EventHandler value);
    private void OnInitialized();
    public virtual IEnumerator GetEnumerator();
    public virtual void CopyTo(Array arr, int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual string GetListName(PropertyDescriptor[] listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual object AddNew();
    public virtual bool get_AllowEdit();
    public virtual bool get_AllowNew();
    public virtual void set_AllowNew(bool value);
    public virtual bool get_AllowRemove();
    public virtual bool get_SupportsChangeNotification();
    public virtual bool get_SupportsSearching();
    public virtual bool get_SupportsSorting();
    public virtual bool get_IsSorted();
    public virtual PropertyDescriptor get_SortProperty();
    public virtual ListSortDirection get_SortDirection();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    [EditorBrowsableAttribute("1")]
public virtual void ApplySort(PropertyDescriptor property, ListSortDirection sort);
    public virtual int Find(PropertyDescriptor prop, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor prop);
    public virtual void RemoveSort();
    [EditorBrowsableAttribute("1")]
public virtual void ApplySort(ListSortDescriptionCollection sorts);
    public virtual ListSortDescriptionCollection get_SortDescriptions();
    public virtual string get_Filter();
    [RequiresUnreferencedCodeAttribute("Members of types used in the filter expression might be trimmed.")]
public virtual void set_Filter(string value);
    public virtual void RemoveFilter();
    public virtual bool get_SupportsAdvancedSorting();
    public virtual bool get_SupportsFiltering();
    private sealed virtual override void System.ComponentModel.ICancelAddNew.CancelNew(int position);
    private sealed virtual override void System.ComponentModel.ICancelAddNew.EndNew(int position);
}
public enum System.Windows.Forms.BootMode : Enum {
    public int value__;
    public static BootMode Normal;
    public static BootMode FailSafe;
    public static BootMode FailSafeWithNetwork;
}
[FlagsAttribute]
public enum System.Windows.Forms.Border3DSide : Enum {
    public int value__;
    public static Border3DSide Left;
    public static Border3DSide Top;
    public static Border3DSide Right;
    public static Border3DSide Bottom;
    public static Border3DSide Middle;
    public static Border3DSide All;
}
public enum System.Windows.Forms.Border3DStyle : Enum {
    public int value__;
    public static Border3DStyle Adjust;
    public static Border3DStyle Bump;
    public static Border3DStyle Etched;
    public static Border3DStyle Flat;
    public static Border3DStyle Raised;
    public static Border3DStyle RaisedInner;
    public static Border3DStyle RaisedOuter;
    public static Border3DStyle Sunken;
    public static Border3DStyle SunkenInner;
    public static Border3DStyle SunkenOuter;
}
public enum System.Windows.Forms.BorderStyle : Enum {
    public int value__;
    public static BorderStyle None;
    public static BorderStyle FixedSingle;
    public static BorderStyle Fixed3D;
}
[FlagsAttribute]
public enum System.Windows.Forms.BoundsSpecified : Enum {
    public int value__;
    public static BoundsSpecified X;
    public static BoundsSpecified Y;
    public static BoundsSpecified Width;
    public static BoundsSpecified Height;
    public static BoundsSpecified Location;
    public static BoundsSpecified Size;
    public static BoundsSpecified All;
    public static BoundsSpecified None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SRDescriptionAttribute("DescriptionButton")]
[DesignerAttribute("System.Windows.Forms.Design.ButtonBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.Button : ButtonBase {
    private DialogResult _dialogResult;
    private static int InvalidDimensionValue;
    private Size _systemSize;
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlAutoSizeModeDescr")]
public AutoSizeMode AutoSizeMode { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ButtonDialogResultDescr")]
public DialogResult DialogResult { get; public set; }
    internal bool SupportsUiaProviders { get; }
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal virtual ButtonBaseAdapter CreateFlatAdapter();
    internal virtual ButtonBaseAdapter CreatePopupAdapter();
    internal virtual ButtonBaseAdapter CreateStandardAdapter();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    protected virtual CreateParams get_CreateParams();
    public virtual DialogResult get_DialogResult();
    public virtual void set_DialogResult(DialogResult value);
    internal virtual bool get_SupportsUiaProviders();
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("2")]
public void add_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseDoubleClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseDoubleClick(MouseEventHandler value);
    public virtual void NotifyDefault(bool value);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    public sealed virtual void PerformClick();
    protected internal virtual bool ProcessMnemonic(char charCode);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ButtonBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.ButtonBase : Control {
    private FlatStyle _flatStyle;
    private ContentAlignment _imageAlign;
    private ContentAlignment _textAlign;
    private TextImageRelation _textImageRelation;
    private Indexer _imageIndex;
    [NullableAttribute("2")]
private FlatButtonAppearance _flatAppearance;
    [NullableAttribute("2")]
private ImageList _imageList;
    [NullableAttribute("2")]
private Image _image;
    private static int FlagMouseOver;
    private static int FlagMouseDown;
    private static int FlagMousePressed;
    private static int FlagInButtonUp;
    private static int FlagCurrentlyAnimating;
    private static int FlagAutoEllipsis;
    private static int FlagIsDefault;
    private static int FlagUseMnemonic;
    private static int FlagShowToolTip;
    private int _state;
    [NullableAttribute("2")]
private ToolTip _textToolTip;
    private bool _enableVisualStyleBackground;
    private bool _isEnableVisualStyleBackgroundSet;
    [NullableAttribute("2")]
private ButtonBaseAdapter _adapter;
    private FlatStyle _cachedAdapterType;
    [NullableAttribute("2")]
private ICommand _command;
    [NullableAttribute("2")]
private object _commandParameter;
    internal static object s_commandChangedEvent;
    internal static object s_commandParameterChangedEvent;
    internal static object s_commandCanExecuteChangedEvent;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <System.Windows.Forms.ICommandBindingTargetProvider.PreviousEnabledStatus>k__BackingField;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[SRDescriptionAttribute("ButtonAutoEllipsisDescr")]
public bool AutoEllipsis { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("CommandComponentCommandDescr")]
public ICommand Command { get; public set; }
    [NullableAttribute("2")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("CommandComponentCommandParameterDescr")]
public object CommandParameter { get; public set; }
    protected Size DefaultSize { get; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected internal bool IsDefault { get; protected internal set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonFlatAppearance")]
[DesignerSerializationVisibilityAttribute("2")]
public FlatButtonAppearance FlatAppearance { get; }
    [NullableAttribute("2")]
[SRDescriptionAttribute("ButtonImageDescr")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public Image Image { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonImageAlignDescr")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment ImageAlign { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("-1")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public int ImageIndex { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public string ImageKey { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ButtonImageListDescr")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
public ImageList ImageList { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    internal bool IsMnemonicsListenerAxSourced { get; }
    internal Rectangle OverChangeRectangle { get; }
    internal bool OwnerDraw { get; }
    private Nullable`1<bool> System.Windows.Forms.ICommandBindingTargetProvider.PreviousEnabledStatus { get; private set; }
    internal Rectangle DownChangeRectangle { get; }
    internal bool MouseIsPressed { get; }
    internal bool MouseIsDown { get; }
    internal bool MouseIsOver { get; }
    internal bool ShowToolTip { get; internal set; }
    [EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SettingsBindableAttribute("True")]
public string Text { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonTextAlignDescr")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment TextAlign { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonTextImageRelationDescr")]
[SRCategoryAttribute("CatAppearance")]
public TextImageRelation TextImageRelation { get; public set; }
    [SRDescriptionAttribute("ButtonUseMnemonicDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public bool UseMnemonic { get; public set; }
    internal ButtonBaseAdapter Adapter { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    internal bool SupportsUseCompatibleTextRendering { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonUseVisualStyleBackColorDescr")]
public bool UseVisualStyleBackColor { get; public set; }
    private static ButtonBase();
    public bool get_AutoEllipsis();
    public void set_AutoEllipsis(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    [NullableContextAttribute("2")]
public void add_AutoSizeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public sealed virtual ICommand get_Command();
    [NullableContextAttribute("2")]
public sealed virtual void set_Command(ICommand value);
    [NullableContextAttribute("2")]
public sealed virtual void add_CommandCanExecuteChanged(EventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CommandCanExecuteChanged(EventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void add_CommandChanged(EventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CommandChanged(EventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual object get_CommandParameter();
    [NullableContextAttribute("2")]
public sealed virtual void set_CommandParameter(object value);
    [NullableContextAttribute("2")]
public void add_CommandParameterChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CommandParameterChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected internal bool get_IsDefault();
    protected internal void set_IsDefault(bool value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public FlatButtonAppearance get_FlatAppearance();
    [NullableContextAttribute("2")]
public Image get_Image();
    [NullableContextAttribute("2")]
public void set_Image(Image value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    [NullableContextAttribute("2")]
public ImageList get_ImageList();
    [NullableContextAttribute("2")]
public void set_ImageList(ImageList value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    [NullableContextAttribute("2")]
public void add_ImeModeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ImeModeChanged(EventHandler value);
    internal virtual bool get_IsMnemonicsListenerAxSourced();
    internal virtual Rectangle get_OverChangeRectangle();
    internal bool get_OwnerDraw();
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> System.Windows.Forms.ICommandBindingTargetProvider.get_PreviousEnabledStatus();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Forms.ICommandBindingTargetProvider.set_PreviousEnabledStatus(Nullable`1<bool> value);
    internal virtual Rectangle get_DownChangeRectangle();
    internal bool get_MouseIsPressed();
    internal bool get_MouseIsDown();
    internal bool get_MouseIsOver();
    internal bool get_ShowToolTip();
    internal void set_ShowToolTip(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public bool get_UseMnemonic();
    public void set_UseMnemonic(bool value);
    private void Animate();
    private void StopAnimate();
    private void Animate(bool animate);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private void DetachImageList(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private bool GetFlag(int flag);
    private void ImageListRecreateHandle(object sender, EventArgs e);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseEnter(EventArgs eventargs);
    protected virtual void OnMouseLeave(EventArgs eventargs);
    protected virtual void OnMouseMove(MouseEventArgs mevent);
    protected virtual void OnMouseDown(MouseEventArgs mevent);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected void ResetFlagsandPaint();
    private void PaintControl(PaintEventArgs pevent);
    public virtual Size GetPreferredSize(Size proposedSize);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    internal ButtonBaseAdapter get_Adapter();
    internal virtual ButtonBaseAdapter CreateFlatAdapter();
    internal virtual ButtonBaseAdapter CreatePopupAdapter();
    internal virtual ButtonBaseAdapter CreateStandardAdapter();
    internal virtual StringFormat CreateStringFormat();
    internal virtual TextFormatFlags CreateTextFormatFlags();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCommandChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCommandCanExecuteChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCommandParameterChanged(EventArgs e);
    protected virtual void OnRequestCommandExecute(EventArgs e);
    private sealed virtual override void System.Windows.Forms.ICommandBindingTargetProvider.RaiseCommandChanged(EventArgs e);
    private sealed virtual override void System.Windows.Forms.ICommandBindingTargetProvider.RaiseCommandCanExecuteChanged(EventArgs e);
    private void OnFrameChanged(object o, EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    protected virtual void OnKeyUp(KeyEventArgs kevent);
    protected virtual void OnPaint(PaintEventArgs pevent);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    private void RaiseEvent(object key, EventArgs e);
    private void ResetImage();
    private void SetFlag(int flag, bool value);
    private bool ShouldSerializeImage();
    private void UpdateOwnerDraw();
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    internal virtual bool get_SupportsUseCompatibleTextRendering();
    public bool get_UseVisualStyleBackColor();
    public void set_UseVisualStyleBackColor(bool value);
    private void ResetUseVisualStyleBackColor();
    private bool ShouldSerializeUseVisualStyleBackColor();
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.ButtonBorderStyle : Enum {
    public int value__;
    public static ButtonBorderStyle None;
    public static ButtonBorderStyle Dotted;
    public static ButtonBorderStyle Dashed;
    public static ButtonBorderStyle Solid;
    public static ButtonBorderStyle Inset;
    public static ButtonBorderStyle Outset;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ButtonInternal.ButtonBaseAdapter : object {
    protected static int ButtonBorderSize;
    [CompilerGeneratedAttribute]
private ButtonBase <Control>k__BackingField;
    protected ButtonBase Control { get; }
    internal ButtonBaseAdapter(ButtonBase control);
    [CompilerGeneratedAttribute]
protected ButtonBase get_Control();
    private protected static Color GetContrastingBorderColor(Color buttonBorderShadowColor);
    internal void Paint(PaintEventArgs pevent);
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    protected abstract virtual LayoutOptions Layout(PaintEventArgs e);
    internal abstract virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal abstract virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal abstract virtual void PaintOver(PaintEventArgs e, CheckState state);
    protected bool IsHighContrastHighlighted();
    internal static Brush CreateDitherBrush(Color color1, Color color2);
    internal virtual StringFormat CreateStringFormat();
    internal virtual TextFormatFlags CreateTextFormatFlags();
    internal static void DrawDitheredFill(Graphics g, Color color1, Color color2, Rectangle bounds);
    protected void Draw3DBorder(IDeviceContext deviceContext, Rectangle bounds, ColorData colors, bool raised);
    private void Draw3DBorderHighContrastRaised(IDeviceContext deviceContext, Rectangle& bounds, ColorData colors);
    private static void Draw3DBorderNormal(IDeviceContext deviceContext, Rectangle& bounds, ColorData colors);
    private void Draw3DBorderRaised(IDeviceContext deviceContext, Rectangle& bounds, ColorData colors);
    protected internal static void Draw3DLiteBorder(IDeviceContext deviceContext, Rectangle r, ColorData colors, bool up);
    internal static void DrawFlatBorderWithSize(PaintEventArgs e, Rectangle bounds, Color color, int size);
    internal static void DrawFlatFocus(IDeviceContext deviceContext, Rectangle r, Color color);
    private void DrawFocus(Graphics g, Rectangle r);
    internal virtual void DrawImageCore(Graphics graphics, Image image, Rectangle imageBounds, Point imageStart, LayoutData layout);
    internal static void DrawDefaultBorder(IDeviceContext deviceContext, Rectangle r, Color color, bool isDefault);
    private void DrawText(PaintEventArgs e, LayoutData layout, Color color, ColorData colors);
    internal void PaintButtonBackground(PaintEventArgs e, Rectangle bounds, Brush background);
    internal void PaintField(PaintEventArgs e, LayoutData layout, ColorData colors, Color foreColor, bool drawFocus);
    internal void PaintImage(PaintEventArgs e, LayoutData layout);
    internal static LayoutOptions CommonLayout(Rectangle clientRectangle, Padding padding, bool isDefault, Font font, string text, bool enabled, ContentAlignment textAlign, RightToLeft rtl);
    internal virtual LayoutOptions CommonLayout();
    private static ColorOptions CommonRender(IDeviceContext deviceContext, Color foreColor, Color backColor, bool enabled);
    private ColorOptions CommonRender(IDeviceContext deviceContext);
    protected ColorOptions PaintRender(IDeviceContext deviceContext);
    internal static ColorOptions PaintFlatRender(Graphics g, Color foreColor, Color backColor, bool enabled);
    protected ColorOptions PaintFlatRender(IDeviceContext deviceContext);
    internal static ColorOptions PaintPopupRender(Graphics g, Color foreColor, Color backColor, bool enabled);
    protected ColorOptions PaintPopupRender(IDeviceContext deviceContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.ButtonFlatAdapter : ButtonBaseAdapter {
    private static int BorderSize;
    internal ButtonFlatAdapter(ButtonBase control);
    private void PaintBackground(PaintEventArgs e, Rectangle r, Color backColor);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    protected virtual LayoutOptions Layout(PaintEventArgs e);
    internal static LayoutOptions PaintFlatLayout(bool up, bool check, int borderSize, Rectangle clientRectangle, Padding padding, bool isDefault, Font font, string text, bool enabled, ContentAlignment textAlign, RightToLeft rtl);
    private LayoutOptions PaintFlatLayout(bool up, bool check, int borderSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.ButtonPopupAdapter : ButtonBaseAdapter {
    internal ButtonPopupAdapter(ButtonBase control);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    protected virtual LayoutOptions Layout(PaintEventArgs e);
    internal static LayoutOptions PaintPopupLayout(bool up, int paintedBorder, Rectangle clientRectangle, Padding padding, bool isDefault, Font font, string text, bool enabled, ContentAlignment textAlign, RightToLeft rtl);
    private LayoutOptions PaintPopupLayout(PaintEventArgs e, bool up, int paintedBorder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.ButtonStandardAdapter : ButtonBaseAdapter {
    private static int BorderWidth;
    internal ButtonStandardAdapter(ButtonBase control);
    private PushButtonState DetermineState(bool up);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    private void PaintThemedButtonBackground(PaintEventArgs e, Rectangle bounds, bool up);
    private void PaintWorker(PaintEventArgs e, bool up, CheckState state);
    protected virtual LayoutOptions Layout(PaintEventArgs e);
    private LayoutOptions PaintLayout(PaintEventArgs e, bool up);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ButtonInternal.CheckableControlBaseAdapter : ButtonBaseAdapter {
    private static int StandardCheckSize;
    [NullableAttribute("2")]
private ButtonBaseAdapter _buttonAdapter;
    protected ButtonBaseAdapter ButtonAdapter { get; }
    private Appearance Appearance { get; }
    internal CheckableControlBaseAdapter(ButtonBase control);
    protected ButtonBaseAdapter get_ButtonAdapter();
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    protected abstract virtual ButtonBaseAdapter CreateButtonAdapter();
    private Appearance get_Appearance();
    internal virtual LayoutOptions CommonLayout();
    internal double GetDpiScaleRatio();
    [NullableContextAttribute("2")]
internal static double GetDpiScaleRatio(Control control);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ButtonInternal.CheckBoxBaseAdapter : CheckableControlBaseAdapter {
    protected static int FlatCheckSize;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Bitmap t_checkImageChecked;
    [ThreadStaticAttribute]
private static Color t_checkImageCheckedBackColor;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Bitmap t_checkImageIndeterminate;
    [ThreadStaticAttribute]
private static Color t_checkImageIndeterminateBackColor;
    protected CheckBox Control { get; }
    internal CheckBoxBaseAdapter(ButtonBase control);
    protected CheckBox get_Control();
    protected void DrawCheckFlat(PaintEventArgs e, LayoutData layout, Color checkColor, Color checkBackground, Color checkBorder, ColorData colors);
    internal static void DrawCheckBackground(bool controlEnabled, CheckState controlCheckState, IDeviceContext deviceContext, Rectangle bounds, Color checkBackground, bool disabledColors);
    protected void DrawCheckBackground(PaintEventArgs e, Rectangle bounds, Color checkBackground, bool disabledColors, ColorData colors);
    protected void DrawCheckOnly(PaintEventArgs e, LayoutData layout, ColorData colors, Color checkColor);
    internal static void DrawCheckOnly(int checkSize, bool controlChecked, bool controlEnabled, CheckState controlCheckState, Graphics g, LayoutData layout, ColorData colors, Color checkColor);
    internal static Rectangle DrawPopupBorder(Graphics g, Rectangle r, ColorData colors);
    internal static Rectangle DrawPopupBorder(PaintEventArgs e, Rectangle r, ColorData colors);
    internal static Rectangle DrawPopupBorder(HDC hdc, Rectangle r, ColorData colors);
    protected ButtonState GetState();
    protected void DrawCheckBox(PaintEventArgs e, LayoutData layout);
    private static Bitmap GetCheckBoxImage(Color checkColor, Rectangle fullSize, Color& cacheCheckColor, Bitmap& cacheCheckImage);
    protected void AdjustFocusRectangle(LayoutData layout);
    internal virtual LayoutOptions CommonLayout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.CheckBoxFlatAdapter : CheckBoxBaseAdapter {
    private ButtonFlatAdapter ButtonAdapter { get; }
    internal CheckBoxFlatAdapter(ButtonBase control);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    private void PaintFlatWorker(PaintEventArgs e, Color checkColor, Color checkBackground, Color checkBorder, ColorData colors);
    private ButtonFlatAdapter get_ButtonAdapter();
    protected virtual ButtonBaseAdapter CreateButtonAdapter();
    protected virtual LayoutOptions Layout(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.CheckBoxPopupAdapter : CheckBoxBaseAdapter {
    internal CheckBoxPopupAdapter(ButtonBase control);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    protected virtual ButtonBaseAdapter CreateButtonAdapter();
    protected virtual LayoutOptions Layout(PaintEventArgs e);
    internal static LayoutOptions PaintPopupLayout(bool show3D, int checkSize, Rectangle clientRectangle, Padding padding, bool isDefault, Font font, string text, bool enabled, ContentAlignment textAlign, RightToLeft rtl, Control control);
    private LayoutOptions PaintPopupLayout(bool show3D);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.CheckBoxStandardAdapter : CheckBoxBaseAdapter {
    private ButtonStandardAdapter ButtonAdapter { get; }
    internal CheckBoxStandardAdapter(ButtonBase control);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    private ButtonStandardAdapter get_ButtonAdapter();
    protected virtual ButtonBaseAdapter CreateButtonAdapter();
    protected virtual LayoutOptions Layout(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ButtonInternal.RadioButtonBaseAdapter : CheckableControlBaseAdapter {
    protected RadioButton Control { get; }
    internal RadioButtonBaseAdapter(ButtonBase control);
    protected RadioButton get_Control();
    protected void DrawCheckFlat(PaintEventArgs e, LayoutData layout, Color checkColor, Color checkBackground, Color checkBorder);
    protected void DrawCheckBackground3DLite(PaintEventArgs e, Rectangle bounds, Color checkBackground, ColorData colors, bool disabledColors);
    protected void DrawCheckBackgroundFlat(PaintEventArgs e, Rectangle bounds, Color borderColor, Color checkBackground);
    private static void DrawAndFillEllipse(HDC hdc, HPEN borderPen, HBRUSH fieldBrush, Rectangle bounds);
    private static int GetScaledNumber(int n, double scale);
    protected void DrawCheckOnly(PaintEventArgs e, LayoutData layout, Color checkColor, bool disabledColors);
    protected ButtonState GetState();
    protected void DrawCheckBox(PaintEventArgs e, LayoutData layout);
    protected void AdjustFocusRectangle(LayoutData layout);
    internal virtual LayoutOptions CommonLayout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.RadioButtonFlatAdapter : RadioButtonBaseAdapter {
    protected static int FlatCheckSize;
    internal RadioButtonFlatAdapter(ButtonBase control);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    private void PaintFlatWorker(PaintEventArgs e, Color checkColor, Color checkBackground, Color checkBorder, ColorData colors);
    protected virtual ButtonBaseAdapter CreateButtonAdapter();
    protected virtual LayoutOptions Layout(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.RadioButtonPopupAdapter : RadioButtonFlatAdapter {
    internal RadioButtonPopupAdapter(ButtonBase control);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    protected virtual ButtonBaseAdapter CreateButtonAdapter();
    protected virtual LayoutOptions Layout(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ButtonInternal.RadioButtonStandardAdapter : RadioButtonBaseAdapter {
    private ButtonStandardAdapter ButtonAdapter { get; }
    internal RadioButtonStandardAdapter(ButtonBase control);
    internal virtual void PaintUp(PaintEventArgs e, CheckState state);
    internal virtual void PaintDown(PaintEventArgs e, CheckState state);
    internal virtual void PaintOver(PaintEventArgs e, CheckState state);
    private ButtonStandardAdapter get_ButtonAdapter();
    protected virtual ButtonBaseAdapter CreateButtonAdapter();
    protected virtual LayoutOptions Layout(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ButtonRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    private static VisualStyleElement s_buttonElement;
    [CompilerGeneratedAttribute]
private static bool <RenderMatchingApplicationState>k__BackingField;
    public static bool RenderMatchingApplicationState { get; public set; }
    private static bool RenderWithVisualStyles { get; }
    private static ButtonRenderer();
    [CompilerGeneratedAttribute]
public static bool get_RenderMatchingApplicationState();
    [CompilerGeneratedAttribute]
public static void set_RenderMatchingApplicationState(bool value);
    private static bool get_RenderWithVisualStyles();
    public static bool IsBackgroundPartiallyTransparent(PushButtonState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    internal static void DrawParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl);
    public static void DrawButton(Graphics g, Rectangle bounds, PushButtonState state);
    internal static void DrawButton(IDeviceContext deviceContext, Rectangle bounds, PushButtonState state);
    internal static void DrawButtonForHandle(IDeviceContext deviceContext, Rectangle bounds, bool focused, PushButtonState state, HWND hwnd);
    public static void DrawButton(Graphics g, Rectangle bounds, bool focused, PushButtonState state);
    [NullableContextAttribute("2")]
public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, bool focused, PushButtonState state);
    [NullableContextAttribute("2")]
public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
    internal static void DrawButton(IDeviceContext deviceContext, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
    internal static ButtonState ConvertToButtonState(PushButtonState state);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(int state);
}
[FlagsAttribute]
public enum System.Windows.Forms.ButtonState : Enum {
    public int value__;
    public static ButtonState Checked;
    public static ButtonState Flat;
    public static ButtonState Inactive;
    public static ButtonState Normal;
    public static ButtonState Pushed;
    public static ButtonState All;
}
internal class System.Windows.Forms.CachedItemHdcInfo : object {
    private HDC _cachedItemHDC;
    private Size _cachedHDCSize;
    private HBITMAP _cachedItemBitmap;
    public HDC Handle { get; }
    public sealed virtual HDC get_Handle();
    public HDC GetCachedItemDC(HDC toolStripHDC, Size bitmapSize);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class System.Windows.Forms.CacheVirtualItemsEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndIndex>k__BackingField;
    public int StartIndex { get; }
    public int EndIndex { get; }
    public CacheVirtualItemsEventArgs(int startIndex, int endIndex);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public int get_EndIndex();
}
public class System.Windows.Forms.CacheVirtualItemsEventHandler : MulticastDelegate {
    public CacheVirtualItemsEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, CacheVirtualItemsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CacheVirtualItemsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.CaptionButton : Enum {
    public int value__;
    public static CaptionButton Close;
    public static CaptionButton Help;
    public static CaptionButton Maximize;
    public static CaptionButton Minimize;
    public static CaptionButton Restore;
}
public enum System.Windows.Forms.CharacterCasing : Enum {
    public int value__;
    public static CharacterCasing Normal;
    public static CharacterCasing Upper;
    public static CharacterCasing Lower;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Checked")]
[DefaultEventAttribute("CheckedChanged")]
[DefaultBindingPropertyAttribute("CheckState")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionCheckBox")]
public class System.Windows.Forms.CheckBox : ButtonBase {
    private static object EVENT_CHECKEDCHANGED;
    private static object EVENT_CHECKSTATECHANGED;
    private static object EVENT_APPEARANCECHANGED;
    private static ContentAlignment AnyRight;
    private ContentAlignment _checkAlign;
    private CheckState _checkState;
    private Appearance _appearance;
    private static int FlatSystemStylePaddingWidth;
    private static int FlatSystemStyleMinimumHeight;
    internal int _flatSystemStylePaddingWidth;
    internal int _flatSystemStyleMinimumHeight;
    private bool _notifyAccessibilityStateChangedNeeded;
    [CompilerGeneratedAttribute]
private bool <AccObjDoDefaultAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThreeState>k__BackingField;
    private bool AccObjDoDefaultAction { get; private set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("CheckBoxAppearanceDescr")]
public Appearance Appearance { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("CheckBoxAutoCheckDescr")]
public bool AutoCheck { get; public set; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("CheckBoxCheckAlignDescr")]
public ContentAlignment CheckAlign { get; public set; }
    [BindableAttribute("True")]
[SettingsBindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckedDescr")]
public bool Checked { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckStateDescr")]
public CheckState CheckState { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    internal Rectangle OverChangeRectangle { get; }
    internal Rectangle DownChangeRectangle { get; }
    internal bool SupportsUiaProviders { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ContentAlignment TextAlign { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("CheckBoxThreeStateDescr")]
public bool ThreeState { get; public set; }
    private static CheckBox();
    [CompilerGeneratedAttribute]
private bool get_AccObjDoDefaultAction();
    [CompilerGeneratedAttribute]
private void set_AccObjDoDefaultAction(bool value);
    public Appearance get_Appearance();
    public void set_Appearance(Appearance value);
    [NullableContextAttribute("2")]
public void add_AppearanceChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AppearanceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_AutoCheck();
    [CompilerGeneratedAttribute]
public void set_AutoCheck(bool value);
    public ContentAlignment get_CheckAlign();
    public void set_CheckAlign(ContentAlignment value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    [NullableContextAttribute("2")]
public void add_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseDoubleClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseDoubleClick(MouseEventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    internal virtual Rectangle get_OverChangeRectangle();
    internal virtual Rectangle get_DownChangeRectangle();
    internal virtual bool get_SupportsUiaProviders();
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    [CompilerGeneratedAttribute]
public bool get_ThreeState();
    [CompilerGeneratedAttribute]
public void set_ThreeState(bool value);
    [NullableContextAttribute("2")]
public void add_CheckedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CheckedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_CheckStateChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CheckStateChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnAppearanceChanged(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnCheckStateChanged(EventArgs e);
    private void NotifyAccessibilityStateChanged();
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    internal virtual ButtonBaseAdapter CreateFlatAdapter();
    internal virtual ButtonBaseAdapter CreatePopupAdapter();
    internal virtual ButtonBaseAdapter CreateStandardAdapter();
    protected internal virtual bool ProcessMnemonic(char charCode);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.CheckBoxRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    private static VisualStyleElement s_checkBoxElement;
    [CompilerGeneratedAttribute]
private static bool <RenderMatchingApplicationState>k__BackingField;
    public static bool RenderMatchingApplicationState { get; public set; }
    private static bool RenderWithVisualStyles { get; }
    private static CheckBoxRenderer();
    [CompilerGeneratedAttribute]
public static bool get_RenderMatchingApplicationState();
    [CompilerGeneratedAttribute]
public static void set_RenderMatchingApplicationState(bool value);
    private static bool get_RenderWithVisualStyles();
    public static bool IsBackgroundPartiallyTransparent(CheckBoxState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, CheckBoxState state);
    internal static void DrawCheckBoxWithVisualStyles(IDeviceContext deviceContext, Point glyphLocation, CheckBoxState state, HWND hwnd);
    [NullableContextAttribute("2")]
public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, bool focused, CheckBoxState state);
    [NullableContextAttribute("2")]
public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, bool focused, CheckBoxState state);
    [NullableContextAttribute("2")]
internal static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, bool focused, CheckBoxState state, HWND hwnd);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, Image image, Rectangle imageBounds, bool focused, CheckBoxState state);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, CheckBoxState state);
    public static Size GetGlyphSize(Graphics g, CheckBoxState state);
    internal static Size GetGlyphSize(IDeviceContext deviceContext, CheckBoxState state, HWND hwnd);
    internal static Size GetGlyphSize(HDC hdc, CheckBoxState state, HWND hwnd);
    internal static ButtonState ConvertToButtonState(CheckBoxState state);
    internal static CheckBoxState ConvertFromButtonState(ButtonState state, bool isMixed, bool isHot);
    private static bool IsMixed(CheckBoxState state);
    private static bool IsDisabled(CheckBoxState state);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(int state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LookupBindingPropertiesAttribute]
[SRDescriptionAttribute("DescriptionCheckedListBox")]
public class System.Windows.Forms.CheckedListBox : ListBox {
    private int _idealCheckSize;
    private static int LB_CHECKED;
    private static int LB_UNCHECKED;
    private static int BORDER_SIZE;
    private bool _killnextselect;
    [NullableAttribute("2")]
private ItemCheckEventHandler _onItemCheck;
    private bool _flat;
    private int _lastSelected;
    [NullableAttribute("2")]
private CheckedItemCollection _checkedItemCollection;
    [NullableAttribute("2")]
private CheckedIndexCollection _checkedIndexCollection;
    private static MessageId LBC_GETCHECKSTATE;
    private static MessageId LBC_SETCHECKSTATE;
    [CompilerGeneratedAttribute]
private bool <CheckOnClick>k__BackingField;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CheckedListBoxCheckOnClickDescr")]
public bool CheckOnClick { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedIndexCollection CheckedIndices { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedItemCollection CheckedItems { get; }
    protected CreateParams CreateParams { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object DataSource { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string DisplayMember { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DrawMode DrawMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public ObjectCollection Items { get; }
    internal int MaxItemWidth { get; }
    public SelectionMode SelectionMode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CheckedListBoxThreeDCheckBoxesDescr")]
public bool ThreeDCheckBoxes { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    internal bool SupportsUseCompatibleTextRendering { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ValueMember { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private static CheckedListBox();
    [CompilerGeneratedAttribute]
public bool get_CheckOnClick();
    [CompilerGeneratedAttribute]
public void set_CheckOnClick(bool value);
    public CheckedIndexCollection get_CheckedIndices();
    public CheckedItemCollection get_CheckedItems();
    protected virtual CreateParams get_CreateParams();
    [NullableContextAttribute("2")]
public object get_DataSource();
    [NullableContextAttribute("2")]
public void set_DataSource(object value);
    public string get_DisplayMember();
    public void set_DisplayMember(string value);
    public virtual DrawMode get_DrawMode();
    public virtual void set_DrawMode(DrawMode value);
    public virtual int get_ItemHeight();
    public virtual void set_ItemHeight(int value);
    public ObjectCollection get_Items();
    internal virtual int get_MaxItemWidth();
    public virtual SelectionMode get_SelectionMode();
    public virtual void set_SelectionMode(SelectionMode value);
    public bool get_ThreeDCheckBoxes();
    public void set_ThreeDCheckBoxes(bool value);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    internal virtual bool get_SupportsUseCompatibleTextRendering();
    public string get_ValueMember();
    public void set_ValueMember(string value);
    [NullableContextAttribute("2")]
public void add_DataSourceChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DataSourceChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DisplayMemberChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DisplayMemberChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_ItemCheck(ItemCheckEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ItemCheck(ItemCheckEventHandler value);
    [NullableContextAttribute("2")]
public void add_Click(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Click(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void add_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_MeasureItem(MeasureItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MeasureItem(MeasureItemEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public void add_ValueMemberChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ValueMemberChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ObjectCollection CreateItemCollection();
    public CheckState GetItemCheckState(int index);
    public bool GetItemChecked(int index);
    private void InvalidateItem(int index);
    private void LbnSelChange();
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnItemCheck(ItemCheckEventArgs ice);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void RefreshItems();
    public void SetItemCheckState(int index, CheckState value);
    public void SetItemChecked(int index, bool value);
    protected virtual void WmReflectCommand(Message& m);
    private void WmReflectVKeyToItem(Message& m);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.CheckState : Enum {
    public int value__;
    public static CheckState Unchecked;
    public static CheckState Checked;
    public static CheckState Indeterminate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.Clipboard : object {
    public static void SetDataObject(object data);
    public static void SetDataObject(object data, bool copy);
    public static void SetDataObject(object data, bool copy, int retryTimes, int retryDelay);
    [NullableContextAttribute("2")]
public static IDataObject GetDataObject();
    public static void Clear();
    public static bool ContainsAudio();
    [NullableContextAttribute("2")]
public static bool ContainsData(string format);
    private static bool ContainsData(string format, bool autoConvert);
    public static bool ContainsFileDropList();
    public static bool ContainsImage();
    public static bool ContainsText();
    public static bool ContainsText(TextDataFormat format);
    [NullableContextAttribute("2")]
public static Stream GetAudioStream();
    public static object GetData(string format);
    private static object GetData(string format, bool autoConvert);
    public static StringCollection GetFileDropList();
    [NullableContextAttribute("2")]
public static Image GetImage();
    public static string GetText();
    public static string GetText(TextDataFormat format);
    public static void SetAudio(Byte[] audioBytes);
    public static void SetAudio(Stream audioStream);
    public static void SetData(string format, object data);
    public static void SetFileDropList(StringCollection filePaths);
    public static void SetImage(Image image);
    public static void SetText(string text);
    public static void SetText(string text, TextDataFormat format);
    private static string ConvertToDataFormats(TextDataFormat format);
}
public enum System.Windows.Forms.CloseReason : Enum {
    public int value__;
    public static CloseReason None;
    public static CloseReason WindowsShutDown;
    public static CloseReason MdiFormClosing;
    public static CloseReason UserClosing;
    public static CloseReason TaskManagerClosing;
    public static CloseReason FormOwnerClosing;
    public static CloseReason ApplicationExitCall;
}
public enum System.Windows.Forms.ColorDepth : Enum {
    public int value__;
    public static ColorDepth Depth4Bit;
    public static ColorDepth Depth8Bit;
    public static ColorDepth Depth16Bit;
    public static ColorDepth Depth24Bit;
    public static ColorDepth Depth32Bit;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Color")]
[SRDescriptionAttribute("DescriptionColorDialog")]
public class System.Windows.Forms.ColorDialog : CommonDialog {
    private int _options;
    private Int32[] _customColors;
    private Color _color;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("CDallowFullOpenDescr")]
public bool AllowFullOpen { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDanyColorDescr")]
public bool AnyColor { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("CDcolorDescr")]
public Color Color { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("CDcustomColorsDescr")]
public Int32[] CustomColors { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDfullOpenDescr")]
public bool FullOpen { get; public set; }
    protected IntPtr Instance { get; }
    protected int Options { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDsolidColorOnlyDescr")]
public bool SolidColorOnly { get; public set; }
    public virtual bool get_AllowFullOpen();
    public virtual void set_AllowFullOpen(bool value);
    public virtual bool get_AnyColor();
    public virtual void set_AnyColor(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Int32[] get_CustomColors();
    public void set_CustomColors(Int32[] value);
    public virtual bool get_FullOpen();
    public virtual void set_FullOpen(bool value);
    protected virtual IntPtr get_Instance();
    protected virtual int get_Options();
    public virtual bool get_ShowHelp();
    public virtual void set_ShowHelp(bool value);
    public virtual bool get_SolidColorOnly();
    public virtual void set_SolidColorOnly(bool value);
    private bool GetOption(int option);
    public virtual void Reset();
    private void ResetColor();
    protected virtual bool RunDialog(IntPtr hwndOwner);
    private void SetOption(int option, bool value);
    private bool ShouldSerializeColor();
    public virtual string ToString();
}
public class System.Windows.Forms.ColumnClickEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Column { get; }
    public ColumnClickEventArgs(int column);
    [CompilerGeneratedAttribute]
public int get_Column();
}
public class System.Windows.Forms.ColumnClickEventHandler : MulticastDelegate {
    public ColumnClickEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ColumnClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Text")]
[DynamicallyAccessedMembersAttribute("1")]
[ToolboxItemAttribute("False")]
[TypeConverterAttribute("System.Windows.Forms.ColumnHeaderConverter")]
public class System.Windows.Forms.ColumnHeader : Component {
    internal int _index;
    internal string _text;
    [NullableAttribute("1")]
internal string _name;
    internal int _width;
    private HorizontalAlignment _textAlign;
    private bool _textAlignInitialized;
    private AccessibleObject _accessibilityObject;
    [NullableAttribute("1")]
private ColumnHeaderImageListIndexer _imageIndexer;
    [CompilerGeneratedAttribute]
private int <DisplayIndexInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private ListView <ListView>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    internal ListView OwnerListview { get; internal set; }
    [NullableAttribute("1")]
internal AccessibleObject AccessibilityObject { get; }
    internal int ActualImageIndex_Internal { get; }
    [LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ColumnHeaderDisplayIndexDescr")]
public int DisplayIndex { get; public set; }
    internal int DisplayIndexInternal { get; internal set; }
    [BrowsableAttribute("False")]
public int Index { get; }
    [DefaultValueAttribute("-1")]
[TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public int ImageIndex { get; public set; }
    [BrowsableAttribute("False")]
public ImageList ImageList { get; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
public ListView ListView { get; private set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ColumnHeaderNameDescr")]
public string Name { get; public set; }
    [NullableAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ColumnCaption")]
public string Text { get; public set; }
    [SRDescriptionAttribute("ColumnAlignment")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public HorizontalAlignment TextAlign { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    internal int WidthInternal { get; }
    [SRDescriptionAttribute("ColumnWidth")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("60")]
public int Width { get; public set; }
    public ColumnHeader(int imageIndex);
    [NullableContextAttribute("1")]
public ColumnHeader(string imageKey);
    internal ListView get_OwnerListview();
    internal void set_OwnerListview(ListView value);
    [NullableContextAttribute("1")]
internal AccessibleObject get_AccessibilityObject();
    internal int get_ActualImageIndex_Internal();
    public int get_DisplayIndex();
    public void set_DisplayIndex(int value);
    [CompilerGeneratedAttribute]
internal int get_DisplayIndexInternal();
    [CompilerGeneratedAttribute]
internal void set_DisplayIndexInternal(int value);
    public int get_Index();
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public ImageList get_ImageList();
    [NullableContextAttribute("1")]
public string get_ImageKey();
    [NullableContextAttribute("1")]
public void set_ImageKey(string value);
    [CompilerGeneratedAttribute]
public ListView get_ListView();
    [CompilerGeneratedAttribute]
private void set_ListView(ListView value);
    public string get_Name();
    public void set_Name(string value);
    [NullableContextAttribute("1")]
public string get_Text();
    [NullableContextAttribute("1")]
public void set_Text(string value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    internal int get_WidthInternal();
    public int get_Width();
    public void set_Width(int value);
    public void AutoResize(ColumnHeaderAutoResizeStyle headerAutoResize);
    [NullableContextAttribute("1")]
public sealed virtual object Clone();
    protected virtual void Dispose(bool disposing);
    internal void ReleaseUiaProvider();
    private void ResetText();
    [NullableContextAttribute("1")]
private void SetDisplayIndices(Int32[] cols);
    private bool ShouldSerializeName();
    private bool ShouldSerializeDisplayIndex();
    internal bool ShouldSerializeText();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum System.Windows.Forms.ColumnHeaderAutoResizeStyle : Enum {
    public int value__;
    public static ColumnHeaderAutoResizeStyle None;
    public static ColumnHeaderAutoResizeStyle HeaderSize;
    public static ColumnHeaderAutoResizeStyle ColumnContent;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ColumnHeaderConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Windows.Forms.ColumnHeaderStyle : Enum {
    public int value__;
    public static ColumnHeaderStyle None;
    public static ColumnHeaderStyle Nonclickable;
    public static ColumnHeaderStyle Clickable;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ColumnReorderedEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private int <OldDisplayIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewDisplayIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnHeader <Header>k__BackingField;
    public int OldDisplayIndex { get; }
    public int NewDisplayIndex { get; }
    public ColumnHeader Header { get; }
    public ColumnReorderedEventArgs(int oldDisplayIndex, int newDisplayIndex, ColumnHeader header);
    [CompilerGeneratedAttribute]
public int get_OldDisplayIndex();
    [CompilerGeneratedAttribute]
public int get_NewDisplayIndex();
    [CompilerGeneratedAttribute]
public ColumnHeader get_Header();
}
public class System.Windows.Forms.ColumnReorderedEventHandler : MulticastDelegate {
    public ColumnReorderedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ColumnReorderedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnReorderedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ColumnStyle : TableLayoutStyle {
    public float Width { get; public set; }
    public ColumnStyle(SizeType sizeType);
    public ColumnStyle(SizeType sizeType, float width);
    public float get_Width();
    public void set_Width(float value);
}
public class System.Windows.Forms.ColumnWidthChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    public int ColumnIndex { get; }
    public ColumnWidthChangedEventArgs(int columnIndex);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
}
public class System.Windows.Forms.ColumnWidthChangedEventHandler : MulticastDelegate {
    public ColumnWidthChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ColumnWidthChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnWidthChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ColumnWidthChangingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewWidth>k__BackingField;
    public int ColumnIndex { get; }
    public int NewWidth { get; public set; }
    public ColumnWidthChangingEventArgs(int columnIndex, int newWidth);
    public ColumnWidthChangingEventArgs(int columnIndex, int newWidth, bool cancel);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public int get_NewWidth();
    [CompilerGeneratedAttribute]
public void set_NewWidth(int value);
}
public class System.Windows.Forms.ColumnWidthChangingEventHandler : MulticastDelegate {
    public ColumnWidthChangingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ColumnWidthChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnWidthChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DefaultPropertyAttribute("Items")]
[DefaultBindingPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.ComboBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionComboBox")]
public class System.Windows.Forms.ComboBox : ListControl {
    private static object EVENT_DROPDOWN;
    private static object EVENT_DRAWITEM;
    private static object EVENT_MEASUREITEM;
    private static object EVENT_SELECTEDINDEXCHANGED;
    private static object EVENT_SELECTIONCHANGECOMMITTED;
    private static object EVENT_SELECTEDITEMCHANGED;
    private static object EVENT_DROPDOWNSTYLE;
    private static object EVENT_TEXTUPDATE;
    private static object EVENT_DROPDOWNCLOSED;
    private static int PropMaxLength;
    private static int PropItemHeight;
    private static int PropDropDownWidth;
    private static int PropDropDownHeight;
    private static int PropStyle;
    private static int PropDrawMode;
    private static int PropMatchingText;
    private static int PropFlatComboAdapter;
    private static int DefaultSimpleStyleHeight;
    private static int DefaultDropDownHeight;
    private static int AutoCompleteTimeout;
    private bool _autoCompleteDroppedDown;
    private FlatStyle _flatStyle;
    private int _updateCount;
    private long _autoCompleteTimeStamp;
    private int _selectedIndex;
    private bool _allowCommit;
    private int _requestedHeight;
    [NullableAttribute("2")]
private ComboBoxChildNativeWindow _childDropDown;
    [NullableAttribute("2")]
private ComboBoxChildNativeWindow _childEdit;
    [NullableAttribute("2")]
private ComboBoxChildNativeWindow _childListBox;
    private HWND _dropDownHandle;
    [NullableAttribute("2")]
private ObjectCollection _itemsCollection;
    private short _prefHeightCache;
    private short _maxDropDownItems;
    private bool _integralHeight;
    private bool _mousePressed;
    private bool _mouseEvents;
    private bool _mouseInEdit;
    private bool _sorted;
    private bool _fireSetFocus;
    private bool _fireLostFocus;
    private bool _mouseOver;
    private bool _suppressNextWindowsPos;
    private bool _canFireLostFocus;
    private string _currentText;
    [NullableAttribute("2")]
private string _lastTextChangedValue;
    private bool _dropDown;
    private AutoCompleteDropDownFinder _finder;
    private bool _selectedValueChangedFired;
    private AutoCompleteMode _autoCompleteMode;
    private AutoCompleteSource _autoCompleteSource;
    [NullableAttribute("2")]
private AutoCompleteStringCollection _autoCompleteCustomSource;
    [NullableAttribute("2")]
private StringSource _stringSource;
    private bool _fromHandleCreate;
    [NullableAttribute("2")]
private ComboBoxChildListUiaProvider _childListAccessibleObject;
    [NullableAttribute("2")]
private ComboBoxChildEditUiaProvider _childEditAccessibleObject;
    [NullableAttribute("2")]
private ComboBoxChildTextUiaProvider _childTextAccessibleObject;
    private bool _dropDownWillBeClosed;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteSourceDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    internal ChildAccessibleObject ChildEditAccessibleObject { get; }
    internal ChildAccessibleObject ChildListAccessibleObject { get; }
    internal AccessibleObject ChildTextAccessibleObject { get; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("ListControlDataSourceDescr")]
public object DataSource { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxDrawModeDescr")]
[RefreshPropertiesAttribute("2")]
public DrawMode DrawMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownWidthDescr")]
public int DropDownWidth { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownHeightDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("106")]
public int DropDownHeight { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxDroppedDownDescr")]
public bool DroppedDown { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    public bool Focused { get; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxIntegralHeightDescr")]
public bool IntegralHeight { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxItemHeightDescr")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public ObjectCollection Items { get; }
    private string MatchingText { get; private set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("8")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxDropDownItemsDescr")]
public int MaxDropDownItems { get; public set; }
    public Size MaximumSize { get; public set; }
    public Size MinimumSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    internal bool MouseIsOver { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxPreferredHeightDescr")]
public int PreferredHeight { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ComboBoxSortedDescr")]
public bool Sorted { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxStyleDescr")]
[RefreshPropertiesAttribute("2")]
public ComboBoxStyle DropDownStyle { get; public set; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
public string Text { get; public set; }
    internal bool SupportsUiaProviders { get; }
    private bool SystemAutoCompleteEnabled { get; }
    private IReadOnlyList`1<Entry> Entries { get; }
    private FlatComboAdapter FlatComboBoxAdapter { get; }
    private static ComboBox();
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageLayoutChanged(EventHandler value);
    internal ChildAccessibleObject get_ChildEditAccessibleObject();
    internal ChildAccessibleObject get_ChildListAccessibleObject();
    internal AccessibleObject get_ChildTextAccessibleObject();
    internal void ClearChildEditAccessibleObject();
    internal void ClearChildListAccessibleObject();
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    [NullableContextAttribute("2")]
public object get_DataSource();
    [NullableContextAttribute("2")]
public void set_DataSource(object value);
    public DrawMode get_DrawMode();
    public void set_DrawMode(DrawMode value);
    public int get_DropDownWidth();
    public void set_DropDownWidth(int value);
    public int get_DropDownHeight();
    public void set_DropDownHeight(int value);
    public bool get_DroppedDown();
    public void set_DroppedDown(bool value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual bool get_Focused();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public int get_ItemHeight();
    public void set_ItemHeight(int value);
    public ObjectCollection get_Items();
    private string get_MatchingText();
    private void set_MatchingText(string value);
    public int get_MaxDropDownItems();
    public void set_MaxDropDownItems(int value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    internal bool get_MouseIsOver();
    internal void set_MouseIsOver(bool value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public void add_PaddingChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_PaddingChanged(EventHandler value);
    public int get_PreferredHeight();
    private int GetComboHeight();
    private String[] GetStringsForAutoComplete(IList collection);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    [NullableContextAttribute("2")]
public object get_SelectedItem();
    [NullableContextAttribute("2")]
public void set_SelectedItem(object value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public ComboBoxStyle get_DropDownStyle();
    public void set_DropDownStyle(ComboBoxStyle value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private int FindStringIgnoreCase(string value);
    private void NotifyAutoComplete();
    private void NotifyAutoComplete(bool setSelectedIndex);
    internal virtual bool get_SupportsUiaProviders();
    private bool get_SystemAutoCompleteEnabled();
    [NullableContextAttribute("2")]
public void add_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDown(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDown(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MeasureItem(MeasureItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MeasureItem(MeasureItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_SelectionChangeCommitted(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_SelectionChangeCommitted(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDownStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void add_TextUpdate(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextUpdate(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDownClosed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownClosed(EventHandler value);
    [ObsoleteAttribute("This method has been deprecated.  There is no replacement.  https://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void AddItemsCore(Object[] value);
    public void BeginUpdate();
    private void CheckNoDataSource();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal bool UpdateNeeded();
    internal Point EditToComboboxMapping(Message m);
    private void ChildWndProc(Message& m);
    private void OnMouseEnterInternal(EventArgs args);
    protected virtual void OnMouseDown(MouseEventArgs e);
    private void OnMouseLeaveInternal(EventArgs args);
    private void DefChildWndProc(Message& m);
    protected virtual void Dispose(bool disposing);
    public void EndUpdate();
    [NullableContextAttribute("2")]
public int FindString(string s);
    [NullableContextAttribute("2")]
public int FindString(string s, int startIndex);
    [NullableContextAttribute("2")]
public int FindStringExact(string s);
    [NullableContextAttribute("2")]
public int FindStringExact(string s, int startIndex);
    [NullableContextAttribute("2")]
internal int FindStringExact(string s, int startIndex, bool ignoreCase);
    internal virtual Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    public int GetItemHeight(int index);
    [NullableContextAttribute("0")]
internal HandleRef`1<HWND> GetListHandle();
    internal NativeWindow GetListNativeWindow();
    internal int GetListNativeWindowRuntimeIdPart();
    internal virtual HBRUSH InitializeDCForWmCtlColor(HDC dc, MessageId msg);
    private bool InterceptAutoCompleteKeystroke(Message m);
    private void InvalidateEverything();
    protected virtual bool IsInputKey(Keys keyData);
    private int NativeAdd(object item);
    private void NativeClear();
    [SkipLocalsInitAttribute]
private string NativeGetItemText(int index);
    private int NativeInsert(int index, object item);
    private void NativeRemoveAt(int index);
    internal virtual void RecreateHandleCore();
    protected virtual void CreateHandle();
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnDropDown(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    private static bool ContainsNavigationKeyCode(Keys keyCode);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    private void OnSelectionChangeCommittedInternal(EventArgs e);
    protected virtual void OnSelectionChangeCommitted(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedValueChanged(EventArgs e);
    protected virtual void OnSelectedItemChanged(EventArgs e);
    protected virtual void OnDropDownStyleChanged(EventArgs e);
    protected virtual void OnParentBackColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    private void OnAutoCompleteCustomSourceChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnGotFocus(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLostFocus(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValidating(CancelEventArgs e);
    private void UpdateControl(bool recreate);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnDisplayMemberChanged(EventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    protected virtual void OnTextUpdate(EventArgs e);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    private void ResetHeightCache();
    protected virtual void RefreshItems();
    protected virtual void RefreshItem(int index);
    private void ReleaseChildWindow();
    internal virtual void ReleaseUiaProvider(HWND handle);
    private void ResetAutoCompleteCustomSource();
    private void ResetDropDownWidth();
    private void ResetItemHeight();
    public virtual void ResetText();
    private void SetAutoComplete(bool reset, bool recreate);
    public void Select(int start, int length);
    public void SelectAll();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void SetItemsCore(IList value);
    protected virtual void SetItemCore(int index, object value);
    private bool ShouldSerializeAutoCompleteCustomSource();
    internal bool ShouldSerializeDropDownWidth();
    internal bool ShouldSerializeItemHeight();
    internal virtual bool ShouldSerializeText();
    private IReadOnlyList`1<Entry> get_Entries();
    public virtual string ToString();
    private void UpdateDropDownHeight();
    private void UpdateItemHeight();
    private void UpdateText();
    private void WmEraseBkgnd(Message& m);
    private void WmParentNotify(Message& m);
    private void WmReflectCommand(Message& m);
    private void WmReflectDrawItem(Message& m);
    private void WmReflectMeasureItem(Message& m);
    protected virtual void WndProc(Message& m);
    private FlatComboAdapter get_FlatComboBoxAdapter();
    internal virtual FlatComboAdapter CreateFlatComboAdapterInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ComboBoxRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    private static VisualStyleElement ComboBoxElement;
    private static VisualStyleElement TextBoxElement;
    public static bool IsSupported { get; }
    private static ComboBoxRenderer();
    public static bool get_IsSupported();
    private static void DrawBackground(Graphics g, Rectangle bounds, ComboBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, ComboBoxState state);
    [NullableContextAttribute("2")]
public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, ComboBoxState state);
    [NullableContextAttribute("2")]
public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, Rectangle textBounds, ComboBoxState state);
    [NullableContextAttribute("2")]
public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, TextFormatFlags flags, ComboBoxState state);
    [NullableContextAttribute("2")]
public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, Rectangle textBounds, TextFormatFlags flags, ComboBoxState state);
    public static void DrawDropDownButton(Graphics g, Rectangle bounds, ComboBoxState state);
    internal static void DrawDropDownButtonForHandle(HDC hdc, Rectangle bounds, ComboBoxState state, HWND hwnd);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(VisualStyleElement visualStyleElement, int state);
}
public enum System.Windows.Forms.ComboBoxStyle : Enum {
    public int value__;
    public static ComboBoxStyle Simple;
    public static ComboBoxStyle DropDown;
    public static ComboBoxStyle DropDownList;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.Command : WeakReference {
    [NullableAttribute("2")]
private static Command[] s_cmds;
    private static int s_icmdTry;
    private static object s_internalSyncObject;
    private static int IdMin;
    private static int IdLim;
    internal int _id;
    public int ID { get; }
    public Command(ICommandExecutor target);
    private static Command();
    public virtual int get_ID();
    protected static void AssignID(Command cmd);
    public static bool DispatchID(int id);
    protected static void Dispose(Command cmd);
    public virtual void Dispose();
    [NullableContextAttribute("2")]
public static Command GetCommandFromID(int id);
    public virtual bool Invoke();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public abstract class System.Windows.Forms.CommonDialog : Component {
    [NullableAttribute("1")]
private static object s_helpRequestEvent;
    private static int CDM_SETDEFAULTFOCUS;
    private static MessageId s_helpMessage;
    private IntPtr _priorWindowProcedure;
    private HWND _defaultControlHwnd;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    private static CommonDialog();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public void add_HelpRequest(EventHandler value);
    public void remove_HelpRequest(EventHandler value);
    internal LRESULT HookProcInternal(HWND hWnd, MessageId msg, WPARAM wparam, LPARAM lparam);
    protected virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    private protected static void MoveToScreenCenter(HWND hwnd);
    [NullableContextAttribute("1")]
protected virtual void OnHelpRequest(EventArgs e);
    private LRESULT OwnerWndProcInternal(HWND hWnd, MessageId msg, WPARAM wparam, LPARAM lparam);
    protected virtual IntPtr OwnerWndProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    public abstract virtual void Reset();
    protected abstract virtual bool RunDialog(IntPtr hwndOwner);
    public DialogResult ShowDialog();
    public DialogResult ShowDialog(IWin32Window owner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor : Com2PropertyDescriptor {
    [NullableAttribute("2")]
private TypeConverter _converter;
    [NullableAttribute("2")]
private UITypeEditor _editor;
    public TypeConverter Converter { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    [RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered.")]
public virtual TypeConverter get_Converter();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    [RequiresUnreferencedCodeAttribute("Editors registered in TypeDescriptor.AddEditorTable may be trimmed. PropertyDescriptor's PropertyType cannot be statically discovered.")]
public virtual object GetEditor(Type editorBaseType);
    [NullableContextAttribute("2")]
public virtual object GetValue(object component);
    [NullableContextAttribute("2")]
public virtual void ResetValue(object component);
    [NullableContextAttribute("2")]
public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter : Com2DataTypeToManagedDataTypeConverter {
    public Type ManagedType { get; }
    public virtual Type get_ManagedType();
    public virtual object ConvertNativeToManaged(VARIANT nativeValue, Com2PropertyDescriptor property);
    public virtual VARIANT ConvertManagedToNative(object managedValue, Com2PropertyDescriptor property, Boolean& cancelSet);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2ComponentEditor : WindowsFormsComponentEditor {
    [NullableContextAttribute("1")]
public static bool NeedsComponentEditor(object comObject);
    [NullableContextAttribute("2")]
public virtual bool EditComponent(ITypeDescriptorContext context, object obj, IWin32Window parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter : object {
    public bool AllowExpand { get; }
    public Type ManagedType { get; }
    public virtual bool get_AllowExpand();
    public abstract virtual Type get_ManagedType();
    public abstract virtual object ConvertNativeToManaged(VARIANT nativeValue, Com2PropertyDescriptor property);
    public abstract virtual VARIANT ConvertManagedToNative(object managedValue, Com2PropertyDescriptor property, Boolean& cancelSet);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2Enum : object {
    private String[] _names;
    private Object[] _values;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _stringValues;
    public Object[] Values { get; }
    public String[] Names { get; }
    public virtual Object[] get_Values();
    public virtual String[] get_Names();
    public virtual object FromString(string value);
    protected void PopulateArrays(String[] names, Object[] values);
    public virtual string ToString(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter : TypeConverter {
    [NullableAttribute("1")]
internal Com2Enum _com2Enum;
    private StandardValuesCollection _values;
    [NullableContextAttribute("1")]
public Com2EnumConverter(Com2Enum enumObj);
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    public void RefreshValues();
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2EventHandler : MulticastDelegate {
    public Com2EventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Com2PropertyDescriptor sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(Com2PropertyDescriptor sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual bool ObjectSupportsInterface(object object);
    public abstract virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
    public static ComScope`1<T> TryGetComScope(object object, HRESULT& hr);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter : TypeConverter {
    private TypeConverter _innerConverter;
    public TypeConverter InnerConverter { get; }
    public Com2ExtendedTypeConverter(TypeConverter innerConverter);
    [NullableContextAttribute("1")]
public Com2ExtendedTypeConverter(Type baseType);
    public TypeConverter get_InnerConverter();
    [NullableContextAttribute("1")]
public TypeConverter GetWrappedConverter(Type t);
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    [RequiresUnreferencedCodeAttribute("The Type of value cannot be statically discovered. The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter : Com2DataTypeToManagedDataTypeConverter {
    private HFONT _lastHandle;
    [NullableAttribute("2")]
private Font _lastFont;
    public bool AllowExpand { get; }
    public Type ManagedType { get; }
    public virtual bool get_AllowExpand();
    public virtual Type get_ManagedType();
    public virtual object ConvertNativeToManaged(VARIANT nativeValue, Com2PropertyDescriptor property);
    public virtual VARIANT ConvertManagedToNative(object managedValue, Com2PropertyDescriptor property, Boolean& cancelSet);
    [NullableContextAttribute("0")]
private static void ApplyFontSettings(Font source, IFont* target, Boolean& targetChanged);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2ICategorizePropertiesHandler : Com2ExtendedBrowsingHandler`1<ICategorizeProperties> {
    [NullableContextAttribute("2")]
private static string GetCategoryFromObject(object object, int dispid);
    public virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
    [NullableContextAttribute("1")]
private void OnGetAttributes(Com2PropertyDescriptor sender, GetAttributesEvent e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter : Com2ExtendedTypeConverter {
    private bool _allowExpand;
    public Com2IDispatchConverter(bool allowExpand, TypeConverter baseConverter);
    [NullableContextAttribute("1")]
public Com2IDispatchConverter(Com2PropertyDescriptor propertyDescriptor, bool allowExpand);
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("The Type of value cannot be statically discovered. The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2IManagedPerPropertyBrowsingHandler : Com2ExtendedBrowsingHandler`1<IVSMDPerPropertyBrowsing> {
    public virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
    [NullableContextAttribute("1")]
private void OnGetAttributes(Com2PropertyDescriptor sender, GetAttributesEvent e);
    internal static Attribute[] GetComponentAttributes(IVSMDPerPropertyBrowsing* propertyBrowsing, int dispid);
    private static String[] GetStringsFromPtr(BSTR* values, UInt32 count);
    private static Object[] GetVariantsFromPtr(VARIANT* values, UInt32 count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2IPerPropertyBrowsingHandler : Com2ExtendedBrowsingHandler`1<IPerPropertyBrowsing> {
    public virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
    [NullableContextAttribute("0")]
private static Guid GetPropertyPageGuid(IPerPropertyBrowsing* propertyBrowsing, int dispid);
    [NullableContextAttribute("0")]
internal static bool TryGetDisplayString(IPerPropertyBrowsing* propertyBrowsing, int dispid, String& displayString);
    private void OnGetBaseAttributes(Com2PropertyDescriptor sender, GetAttributesEvent e);
    private void OnGetDisplayValue(Com2PropertyDescriptor sender, GetNameItemEvent e);
    private void OnGetTypeConverterAndTypeEditor(Com2PropertyDescriptor sender, GetTypeConverterAndTypeEditorEvent e);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2IProvidePropertyBuilderHandler : Com2ExtendedBrowsingHandler`1<IProvidePropertyBuilder> {
    private bool GetBuilderGuidString(IProvidePropertyBuilder* target, int dispid, String& builderGuid, CTLBLDTYPE* builderType);
    public virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
    [NullableContextAttribute("1")]
private void OnGetBaseAttributes(Com2PropertyDescriptor sender, GetAttributesEvent e);
    [NullableContextAttribute("1")]
private void OnGetTypeConverterAndTypeEditor(Com2PropertyDescriptor sender, GetTypeConverterAndTypeEditorEvent e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler : Com2ExtendedBrowsingHandler`1<IVsPerPropertyBrowsing> {
    public static bool AllowChildProperties(Com2PropertyDescriptor property);
    public virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
    private void OnGetBaseAttributes(Com2PropertyDescriptor sender, GetAttributesEvent e);
    private void OnGetDynamicAttributes(Com2PropertyDescriptor sender, GetAttributesEvent e);
    private void OnCanResetPropertyValue(Com2PropertyDescriptor sender, GetBoolValueEvent e);
    private void OnGetDisplayName(Com2PropertyDescriptor sender, GetNameItemEvent e);
    private void OnGetIsReadOnly(Com2PropertyDescriptor sender, GetBoolValueEvent e);
    private void OnGetTypeConverterAndTypeEditor(Com2PropertyDescriptor sender, GetTypeConverterAndTypeEditorEvent e);
    private void OnResetPropertyValue(Com2PropertyDescriptor sender, EventArgs e);
    private void OnShouldSerializeValue(Com2PropertyDescriptor sender, GetBoolValueEvent e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter : Com2DataTypeToManagedDataTypeConverter {
    [NullableAttribute("2")]
private object _lastManaged;
    private OLE_HANDLE _lastNativeHandle;
    private Type _pictureType;
    public Type ManagedType { get; }
    public Com2PictureConverter(Com2PropertyDescriptor property);
    public virtual Type get_ManagedType();
    public virtual object ConvertNativeToManaged(VARIANT nativeValue, Com2PropertyDescriptor property);
    public virtual VARIANT ConvertManagedToNative(object managedValue, Com2PropertyDescriptor property, Boolean& cancelSet);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties : object {
    private static long AgeThreshold;
    [NullableAttribute("1")]
private WeakReference`1<object> _weakObjectReference;
    [NullableAttribute("1")]
private Com2PropertyDescriptor[] _properties;
    private int _defaultPropertyIndex;
    private long _touchedTime;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`4[] _typeInfoVersions;
    private int _alwaysValid;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    internal bool AlwaysValid { get; internal set; }
    public Com2PropertyDescriptor DefaultProperty { get; }
    public object TargetObject { get; }
    public long TicksSinceTouched { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Com2PropertyDescriptor[] Properties { get; }
    public bool NeedsRefreshed { get; }
    [NullableContextAttribute("1")]
public Com2Properties(object comObject, Com2PropertyDescriptor[] properties, int defaultIndex);
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    internal bool get_AlwaysValid();
    internal void set_AlwaysValid(bool value);
    public Com2PropertyDescriptor get_DefaultProperty();
    public object get_TargetObject();
    public long get_TicksSinceTouched();
    public Com2PropertyDescriptor[] get_Properties();
    public bool get_NeedsRefreshed();
    [NullableContextAttribute("1")]
public void RegisterPropertyEvents(IReadOnlyList`1<ICom2ExtendedBrowsingHandler> handlers);
    public void Dispose();
    [NullableContextAttribute("1")]
private ValueTuple`4[] GetTypeInfoVersions(object comObject);
    internal object CheckAndGetTarget(bool checkVersions, bool callDispose);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyBuilderUITypeEditor : Com2ExtendedUITypeEditor {
    private Com2PropertyDescriptor _propDesc;
    private string _guidString;
    private CTLBLDTYPE _bldrType;
    public Com2PropertyBuilderUITypeEditor(Com2PropertyDescriptor pd, string guidString, CTLBLDTYPE type, UITypeEditor baseEditor);
    [NullableContextAttribute("2")]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [NullableContextAttribute("2")]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor : PropertyDescriptor {
    [NullableAttribute("2")]
private EventHandlerList _events;
    private bool _baseReadOnly;
    private bool _readOnly;
    [NullableAttribute("2")]
private Type _propertyType;
    [NullableAttribute("2")]
private TypeConverter _converter;
    [NullableAttribute("2")]
private object _editor;
    [NullableAttribute("2")]
private string _displayName;
    [NullableAttribute("2")]
private object _typeData;
    private int _refreshState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Attribute[] _baseAttributes;
    [NullableAttribute("2")]
private object _lastValue;
    private bool _typeHide;
    private bool _hrHidden;
    private static object EventGetBaseAttributes;
    private static object EventGetDynamicAttributes;
    private static object EventShouldRefresh;
    private static object EventGetDisplayName;
    private static object EventGetDisplayValue;
    private static object EventGetIsReadOnly;
    private static object EventGetTypeConverterAndTypeEditor;
    private static object EventShouldSerializeValue;
    private static object EventCanResetValue;
    private static object EventResetValue;
    private static Guid GUID_COLOR;
    [NullableAttribute("2")]
private Com2DataTypeToManagedDataTypeConverter _valueConverter;
    [CompilerGeneratedAttribute]
private bool <CanShow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DISPID>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InAttributeQuery>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Com2Properties <PropertyManager>k__BackingField;
    protected Attribute[] BaseAttributes { get; }
    public AttributeCollection Attributes { get; }
    protected bool AttributesValid { get; }
    public bool CanShow { get; }
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    [MemberNotNullWhenAttribute("True", "_valueConverter")]
public bool ConvertingNativeType { get; }
    [NullableAttribute("2")]
protected object DefaultValue { get; }
    public int DISPID { get; }
    public string DisplayName { get; }
    protected EventHandlerList Events { get; }
    protected bool InAttributeQuery { get; private set; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
internal Com2Properties PropertyManager { get; internal set; }
    [NullableAttribute("2")]
public Type PropertyType { get; }
    [NullableAttribute("2")]
public object TargetObject { get; }
    [MemberNotNullWhenAttribute("True", "_converter")]
protected bool TypeConverterValid { get; }
    [MemberNotNullWhenAttribute("True", "_editor")]
protected bool TypeEditorValid { get; }
    public Com2PropertyDescriptor(int dispid, string name, Attribute[] attributes, bool readOnly, Type propertyType, object typeData, bool hrHidden);
    private static Com2PropertyDescriptor();
    protected Attribute[] get_BaseAttributes();
    public virtual AttributeCollection get_Attributes();
    protected bool get_AttributesValid();
    [CompilerGeneratedAttribute]
public bool get_CanShow();
    public sealed virtual Type get_ComponentType();
    [RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered.")]
public virtual TypeConverter get_Converter();
    [MemberNotNullWhenAttribute("True", "_valueConverter")]
public bool get_ConvertingNativeType();
    [NullableContextAttribute("2")]
protected virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public int get_DISPID();
    public virtual string get_DisplayName();
    protected EventHandlerList get_Events();
    [CompilerGeneratedAttribute]
protected bool get_InAttributeQuery();
    [CompilerGeneratedAttribute]
private void set_InAttributeQuery(bool value);
    public virtual bool get_IsReadOnly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Com2Properties get_PropertyManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_PropertyManager(Com2Properties value);
    [NullableContextAttribute("2")]
public virtual Type get_PropertyType();
    [NullableContextAttribute("2")]
public virtual object get_TargetObject();
    [MemberNotNullWhenAttribute("True", "_converter")]
protected bool get_TypeConverterValid();
    [MemberNotNullWhenAttribute("True", "_editor")]
protected bool get_TypeEditorValid();
    public void add_QueryCanResetValue(GetBoolValueEventHandler value);
    public void remove_QueryCanResetValue(GetBoolValueEventHandler value);
    public void add_QueryGetBaseAttributes(GetAttributesEventHandler value);
    public void remove_QueryGetBaseAttributes(GetAttributesEventHandler value);
    public void add_QueryGetDynamicAttributes(GetAttributesEventHandler value);
    public void remove_QueryGetDynamicAttributes(GetAttributesEventHandler value);
    public void add_QueryGetDisplayName(GetNameItemEventHandler value);
    public void remove_QueryGetDisplayName(GetNameItemEventHandler value);
    public void add_QueryGetDisplayValue(GetNameItemEventHandler value);
    public void remove_QueryGetDisplayValue(GetNameItemEventHandler value);
    public void add_QueryGetIsReadOnly(GetBoolValueEventHandler value);
    public void remove_QueryGetIsReadOnly(GetBoolValueEventHandler value);
    public void add_QueryGetTypeConverterAndTypeEditor(GetTypeConverterAndTypeEditorEventHandler value);
    public void remove_QueryGetTypeConverterAndTypeEditor(GetTypeConverterAndTypeEditorEventHandler value);
    public void add_QueryResetValue(Com2EventHandler value);
    public void remove_QueryResetValue(Com2EventHandler value);
    public void add_QueryShouldSerializeValue(GetBoolValueEventHandler value);
    public void remove_QueryShouldSerializeValue(GetBoolValueEventHandler value);
    public virtual bool CanResetValue(object component);
    public sealed virtual object Clone();
    protected sealed virtual AttributeCollection CreateAttributeCollection();
    private TypeConverter GetBaseTypeConverter();
    private object GetBaseTypeEditor(Type editorBaseType);
    [NullableContextAttribute("2")]
public string GetDisplayValue(string defaultValue);
    [RequiresUnreferencedCodeAttribute("Editors registered in TypeDescriptor.AddEditorTable may be trimmed. PropertyDescriptor's PropertyType cannot be statically discovered.")]
public virtual object GetEditor(Type editorBaseType);
    [NullableContextAttribute("2")]
internal VARIANT GetNativeValue(object component);
    private bool GetNeedsRefresh(int mask);
    [NullableContextAttribute("2")]
public virtual object GetValue(object component);
    [NullableContextAttribute("2")]
public void GetTypeConverterAndTypeEditor(TypeConverter& typeConverter, Type editorBaseType, Object& typeEditor);
    [NullableContextAttribute("2")]
internal bool IsLastKnownValue(object value);
    protected void OnCanResetValue(GetBoolValueEvent e);
    protected void OnGetBaseAttributes(GetAttributesEvent e);
    protected void OnGetDisplayName(GetNameItemEvent e);
    protected void OnGetDisplayValue(GetNameItemEvent e);
    protected void OnGetDynamicAttributes(GetAttributesEvent e);
    protected void OnGetIsReadOnly(GetBoolValueEvent e);
    protected void OnGetTypeConverterAndTypeEditor(GetTypeConverterAndTypeEditorEvent e);
    protected void OnResetValue(EventArgs e);
    protected void OnShouldSerializeValue(GetBoolValueEvent e);
    protected void OnShouldRefresh(GetRefreshStateEvent e);
    private void RaiseGetBoolValueEvent(object key, GetBoolValueEvent e);
    private void RaiseCom2Event(object key, EventArgs e);
    private void RaiseGetNameItemEvent(object key, GetNameItemEvent e);
    [NullableContextAttribute("2")]
public virtual void ResetValue(object component);
    internal void SetNeedsRefresh(int mask, bool value);
    [NullableContextAttribute("2")]
public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal static class System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptorRefresh : object {
    public static int Attributes;
    public static int DisplayName;
    public static int ReadOnly;
    public static int TypeConverter;
    public static int TypeEditor;
    public static int All;
    public static int TypeConverterAttr;
    public static int TypeEditorAttr;
    public static int BaseAttributes;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyPageUITypeEditor : Com2ExtendedUITypeEditor {
    private Com2PropertyDescriptor _propertyDescriptor;
    private Guid _guid;
    public Com2PropertyPageUITypeEditor(Com2PropertyDescriptor propertyDescriptor, Guid guid, UITypeEditor baseEditor);
    [NullableContextAttribute("2")]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [NullableContextAttribute("2")]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public sealed virtual void ShowPropertyPage(string title, object component, int dispid, Guid pageGuid, IntPtr parentHandle);
}
internal enum System.Windows.Forms.ComponentModel.Com2Interop.Com2ShouldRefreshTypes : Enum {
    public int value__;
    public static Com2ShouldRefreshTypes Attributes;
    public static Com2ShouldRefreshTypes DisplayName;
    public static Com2ShouldRefreshTypes ReadOnly;
    public static Com2ShouldRefreshTypes TypeConverter;
    public static Com2ShouldRefreshTypes TypeEditor;
}
internal static class System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor : object {
    [NullableAttribute("1")]
private static TraceSwitch DbgTypeInfoProcessorSwitch;
    [NullableAttribute("2")]
private static ModuleBuilder s_moduleBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, Type> s_builtEnums;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<Guid, CachedProperties> s_processedLibraries;
    [NullableAttribute("1")]
private static ModuleBuilder ModuleBuilder { get; }
    private static Com2TypeInfoProcessor();
    [NullableContextAttribute("1")]
private static ModuleBuilder get_ModuleBuilder();
    public static ITypeInfo* FindTypeInfo(object comObject, bool preferIProvideClassInfo);
    [NullableContextAttribute("1")]
public static ITypeInfo*[] FindTypeInfos(object comObject);
    public static int GetNameDispId(IDispatch* dispatch);
    [NullableContextAttribute("1")]
public static Com2Properties GetProperties(object comObject);
    [NullableContextAttribute("1")]
private static Com2Properties ProcessTypeInfos(object comObject, ITypeInfo*[] typeInfos);
    private static Guid GetGuidForTypeInfo(ITypeInfo* typeInfo, UInt32[] versions);
    private static Type GetValueTypeFromTypeDesc(TYPEDESC& typeDesc, ITypeInfo* typeInfo, Guid& typeGuid);
    private static Com2PropertyDescriptor[] InternalGetProperties(IDispatch* dispatch, ITypeInfo* typeInfo, int dispidToGet);
    [NullableContextAttribute("1")]
private static PropertyInfo ProcessDataCore(ITypeInfo* typeInfo, IDictionary`2<string, PropertyInfo> properties, int dispid, int nameDispid, TYPEDESC typeDescription, VARFLAGS flags);
    private static void ProcessFunctions(ITypeInfo* typeInfo, IDictionary`2<string, PropertyInfo> properties, int dispidToGet, int nameDispID, Boolean& addAboutBox);
    private static Type ProcessTypeInfoEnum(ITypeInfo* enumTypeInfo);
    private static void ProcessVariables(ITypeInfo* typeInfo, IDictionary`2<string, PropertyInfo> propertyInfo, int dispidToGet, int nameDispID);
    [NullableContextAttribute("2")]
private static Type VTToType(VARENUM vt);
}
public class System.Windows.Forms.ComponentModel.Com2Interop.Com2Variant : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor : TypeDescriptionProvider {
    private static Attribute[] s_staticAttributes;
    private WeakHashtable _nativeProperties;
    private ICom2ExtendedBrowsingHandler[] _extendedBrowsingHandlers;
    private int _clearCount;
    private static int ClearInterval;
    private static ComNativeDescriptor();
    public static object GetNativePropertyValue(object component, string propertyName, Boolean& succeeded);
    [NullableContextAttribute("2")]
public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    internal static string GetClassName(object component);
    internal static TypeConverter GetIComponentConverter();
    internal static object GetEditor(object component, Type baseEditorType);
    [NullableContextAttribute("0")]
internal static string GetName(IDispatch* dispatch);
    [NullableContextAttribute("0")]
internal static HRESULT GetPropertyValue(IDispatch* dispatch, string propertyName, Object& value);
    [NullableContextAttribute("0")]
internal static HRESULT GetPropertyValue(IDispatch* dispatch, int dispid, Object& value);
    internal static bool IsNameDispId(object object, int dispid);
    private void CheckClear();
    private Com2Properties GetPropertiesInfo(object component);
    internal static AttributeCollection GetAttributes(object component);
    internal PropertyDescriptor GetDefaultProperty(object component);
    internal PropertyDescriptorCollection GetProperties(object component);
    private void OnPropsInfoDisposed(object sender, EventArgs e);
    internal static void ResolveVariantTypeConverterAndTypeEditor(object propertyValue, TypeConverter& currentConverter, Type editorType, Object& currentEditor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent : EventArgs {
    private List`1<Attribute> _attributeList;
    public GetAttributesEvent(List`1<Attribute> attributeList);
    public void Add(Attribute attribute);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEventHandler : MulticastDelegate {
    public GetAttributesEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Com2PropertyDescriptor sender, GetAttributesEvent e);
    public virtual IAsyncResult BeginInvoke(Com2PropertyDescriptor sender, GetAttributesEvent e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; public set; }
    public GetBoolValueEvent(bool defaultValue);
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEventHandler : MulticastDelegate {
    public GetBoolValueEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Com2PropertyDescriptor sender, GetBoolValueEvent e);
    public virtual IAsyncResult BeginInvoke(Com2PropertyDescriptor sender, GetBoolValueEvent e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent : EventArgs {
    [CompilerGeneratedAttribute]
private object <Name>k__BackingField;
    public object Name { get; public set; }
    [NullableAttribute("1")]
public string NameString { get; }
    public GetNameItemEvent(object defaultName);
    [CompilerGeneratedAttribute]
public object get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(object value);
    [NullableContextAttribute("1")]
public string get_NameString();
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEventHandler : MulticastDelegate {
    public GetNameItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Com2PropertyDescriptor sender, GetNameItemEvent e);
    public virtual IAsyncResult BeginInvoke(Com2PropertyDescriptor sender, GetNameItemEvent e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetRefreshStateEvent : GetBoolValueEvent {
    public GetRefreshStateEvent(bool defaultValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetTypeConverterAndTypeEditorEvent : EventArgs {
    [CompilerGeneratedAttribute]
private TypeConverter <TypeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TypeEditor>k__BackingField;
    public TypeConverter TypeConverter { get; public set; }
    public object TypeEditor { get; public set; }
    public GetTypeConverterAndTypeEditorEvent(TypeConverter typeConverter, object typeEditor);
    [CompilerGeneratedAttribute]
public TypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
public void set_TypeConverter(TypeConverter value);
    [CompilerGeneratedAttribute]
public object get_TypeEditor();
    [CompilerGeneratedAttribute]
public void set_TypeEditor(object value);
}
internal class System.Windows.Forms.ComponentModel.Com2Interop.GetTypeConverterAndTypeEditorEventHandler : MulticastDelegate {
    public GetTypeConverterAndTypeEditorEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Com2PropertyDescriptor sender, GetTypeConverterAndTypeEditorEvent e);
    public virtual IAsyncResult BeginInvoke(Com2PropertyDescriptor sender, GetTypeConverterAndTypeEditorEvent e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
internal interface System.Windows.Forms.ComponentModel.Com2Interop.ICom2ExtendedBrowsingHandler {
    public abstract virtual bool ObjectSupportsInterface(object object);
    public abstract virtual void RegisterEvents(Com2PropertyDescriptor[] properties);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.ComponentModel.Com2Interop.ICom2PropertyPageDisplayService {
    public abstract virtual void ShowPropertyPage(string title, object component, int dispid, Guid pageGuid, IntPtr parentHandle);
}
[NullableContextAttribute("2")]
public interface System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser {
    public bool InPropertySet { get; }
    public abstract virtual void DropDownDone();
    public abstract virtual bool get_InPropertySet();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComComponentNameChanged(ComponentRenameEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComComponentNameChanged(ComponentRenameEventHandler value);
    public abstract virtual bool EnsurePendingChangesCommitted();
    public abstract virtual void HandleF4();
    public abstract virtual void LoadState(RegistryKey key);
    public abstract virtual void SaveState(RegistryKey key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ContainerControl : ScrollableControl {
    [NullableAttribute("2")]
private Control _activeControl;
    [NullableAttribute("2")]
private Control _focusedControl;
    [NullableAttribute("2")]
private Control _unvalidatedControl;
    private AutoValidate _autoValidate;
    [NullableAttribute("2")]
private EventHandler _autoValidateChanged;
    private SizeF _autoScaleDimensions;
    private SizeF _currentAutoScaleDimensions;
    private AutoScaleMode _autoScaleMode;
    private bool _isScaledByDpiChangedEvent;
    private BitVector32 _state;
    private static int s_stateScalingNeededOnLayout;
    private static int s_stateValidating;
    private static int s_stateProcessingMnemonic;
    private static int s_stateScalingChild;
    private static int s_stateParentChanged;
    private static int s_propAxContainer;
    private static string FontMeasureString;
    internal SizeF _currentAutoScaleFactor;
    [CompilerGeneratedAttribute]
private bool <IsDpiChangeScalingRequired>k__BackingField;
    [LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CatLayout")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public SizeF AutoScaleDimensions { get; public set; }
    protected SizeF AutoScaleFactor { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ContainerControlAutoScaleModeDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public AutoScaleMode AutoScaleMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ContainerControlAutoValidate")]
public AutoValidate AutoValidate { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("ContainerControlBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    protected bool CanEnableIme { get; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContainerControlActiveControlDescr")]
public Control ActiveControl { get; public set; }
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CatLayout")]
[EditorBrowsableAttribute("2")]
public SizeF CurrentAutoScaleDimensions { get; }
    internal bool IsDpiChangeScalingRequired { get; internal set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContainerControlParentFormDescr")]
public Form ParentForm { get; }
    private protected ContainerControl InnerMostActiveContainerControl { get; }
    private ContainerControl InnerMostFocusedContainerControl { get; }
    private static ContainerControl();
    public SizeF get_AutoScaleDimensions();
    public void set_AutoScaleDimensions(SizeF value);
    protected SizeF get_AutoScaleFactor();
    internal static SizeF GetCurrentAutoScaleFactor(SizeF currentAutoScaleDimensions, SizeF savedAutoScaleDimensions);
    public AutoScaleMode get_AutoScaleMode();
    public void set_AutoScaleMode(AutoScaleMode value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    [NullableContextAttribute("2")]
public void add_AutoValidateChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoValidateChanged(EventHandler value);
    [NullableContextAttribute("2")]
public virtual BindingContext get_BindingContext();
    [NullableContextAttribute("2")]
public virtual void set_BindingContext(BindingContext value);
    protected virtual bool get_CanEnableIme();
    [NullableContextAttribute("2")]
public sealed virtual Control get_ActiveControl();
    [NullableContextAttribute("2")]
public sealed virtual void set_ActiveControl(Control value);
    protected virtual CreateParams get_CreateParams();
    public SizeF get_CurrentAutoScaleDimensions();
    internal SizeF GetCurrentAutoScaleDimensions(HFONT fontHandle);
    [CompilerGeneratedAttribute]
internal bool get_IsDpiChangeScalingRequired();
    [CompilerGeneratedAttribute]
internal void set_IsDpiChangeScalingRequired(bool value);
    [NullableContextAttribute("2")]
public Form get_ParentForm();
    private sealed virtual override bool System.Windows.Forms.IContainerControl.ActivateControl(Control control);
    internal bool ActivateControl(Control control);
    [NullableContextAttribute("2")]
internal bool ActivateControl(Control control, bool originator);
    private bool HasFocusableChild();
    [EditorBrowsableAttribute("2")]
protected virtual void AdjustFormScrollbars(bool displayScrollbars);
    internal virtual void AfterControlRemoved(Control control, Control oldParent);
    [NullableContextAttribute("2")]
private bool AssignActiveControlInternal(Control value);
    private void AxContainerFormCreated();
    internal virtual bool CanProcessMnemonic();
    internal AxContainer CreateAxContainer();
    protected virtual void Dispose(bool disposing);
    private static void EnableRequiredScaling(Control start, bool enable);
    internal void FocusActiveControlInternal();
    private SizeF GetParentAutoScaleFactor();
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    internal virtual Rectangle GetToolNativeScreenRectangle();
    private SizeF GetFontAutoScaleDimensions(HFONT fontHandle);
    private void LayoutScalingNeeded();
    private protected virtual void OnAutoScaleModeChanged();
    protected virtual void OnAutoValidateChanged(EventArgs e);
    private protected virtual void OnFrameWindowActivate(bool fActivate);
    internal virtual void OnChildLayoutResuming(Control child, bool performLayout);
    protected virtual void OnCreateControl();
    [EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    internal virtual void OnLayoutResuming(bool performLayout);
    protected virtual void OnMove(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    public void PerformAutoScale();
    private void PerformAutoScale(bool includedBounds, bool excludedBounds, bool causedByFontChanged);
    private void PerformNeededAutoScaleOnLayout();
    private void ResetToolTip();
    internal static void ResumeAllLayout(Control start, bool performLayout);
    internal static void SuspendAllLayout(Control start);
    internal virtual void Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, bool causedByFontChanged);
    protected virtual void ScaleMinMaxSize(float xScaleFactor, float yScaleFactor, bool updateContainerSize);
    private bool ProcessArrowKey(bool forward);
    [EditorBrowsableAttribute("2")]
protected virtual bool ProcessDialogChar(char charCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual bool ProcessTabKey(bool forward);
    private static ScrollableControl FindScrollableParent(Control ctl);
    private void ScrollActiveControlIntoView();
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    internal void ScaleContainerForDpi(int deviceDpiNew, int deviceDpiOld, Rectangle suggestedRectangle);
    protected virtual void Select(bool directed, bool forward);
    [NullableContextAttribute("2")]
internal void SetActiveControl(Control value);
    private protected ContainerControl get_InnerMostActiveContainerControl();
    private ContainerControl get_InnerMostFocusedContainerControl();
    protected virtual void UpdateDefaultButton();
    internal void UpdateFocusedControl();
    [NullableContextAttribute("2")]
private void EnsureUnvalidatedControl(Control candidate);
    private void EnterValidation(Control enterControl);
    public bool Validate();
    public bool Validate(bool checkAutoValidate);
    internal bool ValidateInternal(bool checkAutoValidate, Boolean& validatedControlAllowsFocusChange);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual bool ValidateChildren();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual bool ValidateChildren(ValidationConstraints validationConstraints);
    [NullableContextAttribute("2")]
private bool ValidateThroughAncestor(Control ancestorControl, bool preventFocusChangeOnError);
    private void ResetValidationFlag();
    internal void ResetActiveAndFocusedControlsRecursive();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeAutoValidate();
    private void WmSetFocus(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.ContentsResizedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Rectangle <NewRectangle>k__BackingField;
    public Rectangle NewRectangle { get; }
    public ContentsResizedEventArgs(Rectangle newRectangle);
    [CompilerGeneratedAttribute]
public Rectangle get_NewRectangle();
}
public class System.Windows.Forms.ContentsResizedEventHandler : MulticastDelegate {
    public ContentsResizedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ContentsResizedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ContentsResizedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("Opening")]
[SRDescriptionAttribute("DescriptionContextMenuStrip")]
public class System.Windows.Forms.ContextMenuStrip : ToolStripDropDownMenu {
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContextMenuStripSourceControlDescr")]
public Control SourceControl { get; }
    public ContextMenuStrip(IContainer container);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("2")]
public Control get_SourceControl();
    internal ContextMenuStrip Clone();
    internal void ShowInternal(Control source, Point location, bool isKeyboardActivated);
    internal void ShowInTaskbar(int x, int y);
    protected virtual void SetVisibleCore(bool visible);
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Text")]
[DefaultEventAttribute("Click")]
[DesignerAttribute("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public class System.Windows.Forms.Control : Component {
    internal static TraceSwitch s_paletteTracing;
    internal static TraceSwitch s_controlKeyboardRouting;
    private protected TraceSwitch s_focusTracing;
    private static UInt32 WM_GETCONTROLNAME;
    private static UInt32 WM_GETCONTROLTYPE;
    [NullableAttribute("1")]
private static object s_autoSizeChangedEvent;
    [NullableAttribute("1")]
private static object s_keyDownEvent;
    [NullableAttribute("1")]
private static object s_keyPressEvent;
    [NullableAttribute("1")]
private static object s_keyUpEvent;
    [NullableAttribute("1")]
private static object s_mouseDownEvent;
    [NullableAttribute("1")]
private static object s_mouseEnterEvent;
    [NullableAttribute("1")]
private static object s_mouseLeaveEvent;
    [NullableAttribute("1")]
private static object s_dpiChangedBeforeParentEvent;
    [NullableAttribute("1")]
private static object s_dpiChangedAfterParentEvent;
    [NullableAttribute("1")]
private static object s_mouseHoverEvent;
    [NullableAttribute("1")]
private static object s_mouseMoveEvent;
    [NullableAttribute("1")]
private static object s_mouseUpEvent;
    [NullableAttribute("1")]
private static object s_mouseWheelEvent;
    [NullableAttribute("1")]
private static object s_clickEvent;
    [NullableAttribute("1")]
private static object s_clientSizeEvent;
    [NullableAttribute("1")]
private static object s_doubleClickEvent;
    [NullableAttribute("1")]
private static object s_mouseClickEvent;
    [NullableAttribute("1")]
private static object s_mouseDoubleClickEvent;
    [NullableAttribute("1")]
private static object s_mouseCaptureChangedEvent;
    [NullableAttribute("1")]
private static object s_moveEvent;
    [NullableAttribute("1")]
private static object s_resizeEvent;
    [NullableAttribute("1")]
private static object s_layoutEvent;
    [NullableAttribute("1")]
private static object s_gotFocusEvent;
    [NullableAttribute("1")]
private static object s_lostFocusEvent;
    [NullableAttribute("1")]
private static object s_enterEvent;
    [NullableAttribute("1")]
private static object s_leaveEvent;
    [NullableAttribute("1")]
private static object s_handleCreatedEvent;
    [NullableAttribute("1")]
private static object s_handleDestroyedEvent;
    [NullableAttribute("1")]
private static object s_controlAddedEvent;
    [NullableAttribute("1")]
private static object s_controlRemovedEvent;
    [NullableAttribute("1")]
private static object s_changeUICuesEvent;
    [NullableAttribute("1")]
private static object s_systemColorsChangedEvent;
    [NullableAttribute("1")]
private static object s_validatingEvent;
    [NullableAttribute("1")]
private static object s_validatedEvent;
    [NullableAttribute("1")]
private static object s_styleChangedEvent;
    [NullableAttribute("1")]
private static object s_imeModeChangedEvent;
    [NullableAttribute("1")]
private static object s_helpRequestedEvent;
    [NullableAttribute("1")]
private static object s_paintEvent;
    [NullableAttribute("1")]
private static object s_invalidatedEvent;
    [NullableAttribute("1")]
private static object s_queryContinueDragEvent;
    [NullableAttribute("1")]
private static object s_giveFeedbackEvent;
    [NullableAttribute("1")]
private static object s_dragEnterEvent;
    [NullableAttribute("1")]
private static object s_dragLeaveEvent;
    [NullableAttribute("1")]
private static object s_dragOverEvent;
    [NullableAttribute("1")]
private static object s_dragDropEvent;
    [NullableAttribute("1")]
private static object s_queryAccessibilityHelpEvent;
    [NullableAttribute("1")]
private static object s_backgroundImageEvent;
    [NullableAttribute("1")]
private static object s_backgroundImageLayoutEvent;
    [NullableAttribute("1")]
private static object s_bindingContextEvent;
    [NullableAttribute("1")]
private static object s_backColorEvent;
    [NullableAttribute("1")]
private static object s_parentEvent;
    [NullableAttribute("1")]
private static object s_visibleEvent;
    [NullableAttribute("1")]
private static object s_textEvent;
    [NullableAttribute("1")]
private static object s_tabStopEvent;
    [NullableAttribute("1")]
private static object s_tabIndexEvent;
    [NullableAttribute("1")]
private static object s_sizeEvent;
    [NullableAttribute("1")]
private static object s_rightToLeftEvent;
    [NullableAttribute("1")]
private static object s_locationEvent;
    [NullableAttribute("1")]
private static object s_foreColorEvent;
    [NullableAttribute("1")]
private static object s_fontEvent;
    [NullableAttribute("1")]
private static object s_enabledEvent;
    [NullableAttribute("1")]
private static object s_dockEvent;
    [NullableAttribute("1")]
private static object s_cursorEvent;
    [NullableAttribute("1")]
private static object s_contextMenuStripEvent;
    [NullableAttribute("1")]
private static object s_causesValidationEvent;
    [NullableAttribute("1")]
private static object s_regionChangedEvent;
    [NullableAttribute("1")]
private static object s_marginChangedEvent;
    [NullableAttribute("1")]
private protected static object s_paddingChangedEvent;
    [NullableAttribute("1")]
private static object s_previewKeyDownEvent;
    [NullableAttribute("1")]
private static object s_dataContextEvent;
    private static MessageId s_threadCallbackMessage;
    private static ContextCallback s_invokeMarshaledCallbackHelperDelegate;
    [ThreadStaticAttribute]
private static bool t_inCrossThreadSafeCall;
    [ThreadStaticAttribute]
internal static HelpInfo t_currentHelpInfo;
    private static FontHandleWrapper s_defaultFontHandleWrapper;
    private static short PaintLayerBackground;
    private static short PaintLayerForeground;
    private static byte RequiredScalingEnabledMask;
    private static byte RequiredScalingMask;
    private static byte HighOrderBitMask;
    private static Font s_defaultFont;
    private static int s_namePropertyProperty;
    private static int s_backBrushProperty;
    private static int s_fontHeightProperty;
    private static int s_currentAmbientFontProperty;
    private static int s_controlsCollectionProperty;
    private static int s_backColorProperty;
    private static int s_foreColorProperty;
    internal static int s_fontProperty;
    private static int s_backgroundImageProperty;
    private static int s_fontHandleWrapperProperty;
    private static int s_userDataProperty;
    private static int s_cursorProperty;
    private static int s_regionProperty;
    private static int s_rightToLeftProperty;
    private static int s_bindingsProperty;
    private static int s_bindingManagerProperty;
    private static int s_accessibleDefaultActionProperty;
    private static int s_accessibleDescriptionProperty;
    private static int s_accessibilityProperty;
    private static int s_ncAccessibilityProperty;
    private static int s_accessibleNameProperty;
    private static int s_accessibleRoleProperty;
    private static int s_activeXImplProperty;
    private static int s_controlVersionInfoProperty;
    private static int s_backgroundImageLayoutProperty;
    private static int s_contextMenuStripProperty;
    private static int s_autoScrollOffsetProperty;
    private static int s_useCompatibleTextRenderingProperty;
    private static int s_imeWmCharsToIgnoreProperty;
    private static int s_imeModeProperty;
    private static int s_disableImeModeChangedCountProperty;
    private static int s_lastCanEnableImeProperty;
    private static int s_cacheTextCountProperty;
    private static int s_acheTextFieldProperty;
    private static int s_ambientPropertiesServiceProperty;
    private static int s_dataContextProperty;
    private static bool s_needToLoadComCtl;
    [CompilerGeneratedAttribute]
private static bool <UseCompatibleTextRenderingDefault>k__BackingField;
    [NullableAttribute("1")]
private ControlNativeWindow _window;
    private Control _parent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<Control> _reflectParent;
    private CreateParams _createParams;
    private int _x;
    private int _y;
    private int _width;
    private int _height;
    private int _clientWidth;
    private int _clientHeight;
    private States _state;
    private ExtendedStates _extendedState;
    private ControlStyles _controlStyle;
    private int _tabIndex;
    private string _text;
    private byte _requiredScaling;
    private TRACKMOUSEEVENT _trackMouseEvent;
    private short _updateCount;
    private LayoutEventArgs _cachedLayoutEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ThreadMethodEntry> _threadCallbackList;
    internal int _deviceDpi;
    internal int _oldDeviceDpi;
    private UICuesStates _uiCuesState;
    private Font _scaledControlFont;
    private FontHandleWrapper _scaledFontWrapper;
    internal bool _doNotScaleChildren;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, Font> _dpiFonts;
    internal bool _childControlsNeedAnchorLayout;
    internal bool _forceAnchorCalculations;
    [CompilerGeneratedAttribute]
private byte <LayoutSuspendCount>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <CheckForIllegalCrossThreadCalls>k__BackingField;
    [CompilerGeneratedAttribute]
private static Keys <LastKeyData>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PropertyStore <Properties>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<ToolStripControlHost> toolStripControlHostReference;
    private static int ImeCharsToIgnoreDisabled;
    private static int ImeCharsToIgnoreEnabled;
    private static ImeMode propagatingImeMode;
    private static bool ignoreWmImeNotify;
    private Color ActiveXAmbientBackColor { get; }
    private Color ActiveXAmbientForeColor { get; }
    private Font ActiveXAmbientFont { get; }
    private bool ActiveXEventsFrozen { get; }
    private IntPtr ActiveXHWNDParent { get; }
    [NullableAttribute("1")]
private ActiveXImpl ActiveXInstance { get; }
    internal static bool UseCompatibleTextRenderingDefault { get; internal set; }
    internal byte LayoutSuspendCount { get; private set; }
    internal DPI_AWARENESS_CONTEXT DpiAwarenessContext { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAccessibilityObjectDescr")]
public AccessibleObject AccessibilityObject { get; }
    [NullableAttribute("1")]
private AccessibleObject NcAccessibilityObject { get; }
    [SRCategoryAttribute("CatAccessibility")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAccessibleDefaultActionDescr")]
public string AccessibleDefaultActionDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlAccessibleDescriptionDescr")]
public string AccessibleDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlAccessibleNameDescr")]
public string AccessibleName { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlAccessibleRoleDescr")]
public AccessibleRole AccessibleRole { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlAllowDropDescr")]
public bool AllowDrop { get; public set; }
    private AmbientProperties AmbientPropertiesService { get; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlAnchorDescr")]
[RefreshPropertiesAttribute("2")]
public AnchorStyles Anchor { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlAutoSizeDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point AutoScrollOffset { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public LayoutEngine LayoutEngine { get; }
    internal HBRUSH BackColorBrush { get; }
    [SRCategoryAttribute("CatData")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
public object DataContext { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-501")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageDescr")]
public Image BackgroundImage { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageLayoutDescr")]
public ImageLayout BackgroundImageLayout { get; public set; }
    internal bool BecomingActiveControl { get; internal set; }
    internal BindingContext BindingContextInternal { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlBottomDescr")]
[SRCategoryAttribute("CatLayout")]
public int Bottom { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlBoundsDescr")]
[SRCategoryAttribute("CatLayout")]
public Rectangle Bounds { get; public set; }
    internal bool CanAccessProperties { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatFocus")]
[SRDescriptionAttribute("ControlCanFocusDescr")]
public bool CanFocus { get; }
    protected bool CanRaiseEvents { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatFocus")]
[SRDescriptionAttribute("ControlCanSelectDescr")]
public bool CanSelect { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatFocus")]
[SRDescriptionAttribute("ControlCaptureDescr")]
public bool Capture { get; public set; }
    [SRCategoryAttribute("CatFocus")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ControlCausesValidationDescr")]
public bool CausesValidation { get; public set; }
    internal bool CacheTextInternal { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("ControlCheckForIllegalCrossThreadCalls")]
[DesignerSerializationVisibilityAttribute("0")]
public static bool CheckForIllegalCrossThreadCalls { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ControlClientRectangleDescr")]
public Rectangle ClientRectangle { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlClientSizeDescr")]
public Size ClientSize { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlCompanyNameDescr")]
public string CompanyName { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlContainsFocusDescr")]
public bool ContainsFocus { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ControlContextMenuDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ControlControlsDescr")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlCreatedDescr")]
public bool Created { get; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    internal bool ValidationCancelled { get; internal set; }
    internal bool IsTopMdiWindowClosing { get; internal set; }
    internal bool ScalingInProgress { get; private set; }
    internal bool IsAccessibilityObjectCreated { get; }
    internal UInt32 CreateThreadId { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlCursorDescr")]
[AmbientValueAttribute("")]
public Cursor Cursor { get; public set; }
    [NullableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ControlBindingsDescr")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
public ControlBindingsCollection DataBindings { get; }
    public static Color DefaultBackColor { get; }
    [NullableAttribute("1")]
protected Cursor DefaultCursor { get; }
    [NullableAttribute("1")]
public static Font DefaultFont { get; }
    public static Color DefaultForeColor { get; }
    protected Padding DefaultMargin { get; }
    protected Size DefaultMaximumSize { get; }
    protected Size DefaultMinimumSize { get; }
    protected Padding DefaultPadding { get; }
    private static RightToLeft DefaultRightToLeft { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int DeviceDpi { get; }
    internal Color DisabledColor { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlDisplayRectangleDescr")]
public Rectangle DisplayRectangle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlDisposedDescr")]
public bool IsDisposed { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlDisposingDescr")]
public bool Disposing { get; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlDockDescr")]
public DockStyle Dock { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ControlDoubleBufferedDescr")]
protected bool DoubleBuffered { get; protected set; }
    private bool DoubleBufferingEnabled { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DispIdAttribute("-514")]
[SRDescriptionAttribute("ControlEnabledDescr")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlFocusedDescr")]
public bool Focused { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DispIdAttribute("-512")]
[AmbientValueAttribute("")]
[SRDescriptionAttribute("ControlFontDescr")]
public Font Font { get; public set; }
    internal HFONT FontHandle { get; }
    protected int FontHeight { get; protected set; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-513")]
[SRDescriptionAttribute("ControlForeColorDescr")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DispIdAttribute("-515")]
[SRDescriptionAttribute("ControlHandleDescr")]
public IntPtr Handle { get; }
    internal IntPtr HandleInternal { get; }
    internal HWND HWNDInternal { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHasChildrenDescr")]
public bool HasChildren { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHeightDescr")]
public int Height { get; public set; }
    internal bool HostedInWin32DialogManager { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHandleCreatedDescr")]
public bool IsHandleCreated { get; }
    internal bool IsLayoutSuspended { get; }
    internal bool IsWindowObscured { get; }
    internal HWND InternalHandle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlInvokeRequiredDescr")]
public bool InvokeRequired { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlIsAccessibleDescr")]
public bool IsAccessible { get; public set; }
    internal bool IsActiveX { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsAncestorSiteInDesignMode { get; }
    internal bool IsContainerControl { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("IsMirroredDescr")]
public bool IsMirrored { get; }
    internal bool IsMnemonicsListenerAxSourced { get; }
    private protected static Keys LastKeyData { get; private protected set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlLeftDescr")]
public int Left { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlLocationDescr")]
public Point Location { get; public set; }
    [SRDescriptionAttribute("ControlMarginDescr")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public Padding Margin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlMaximumSizeDescr")]
[AmbientValueAttribute("System.Drawing.Size", "0, 0")]
public Size MaximumSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlMinimumSizeDescr")]
public Size MinimumSize { get; public set; }
    public static Keys ModifierKeys { get; }
    public static MouseButtons MouseButtons { get; }
    public static Point MousePosition { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlParentDescr")]
public Control Parent { get; public set; }
    internal Control ParentInternal { get; internal set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlProductNameDescr")]
public string ProductName { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlProductVersionDescr")]
public string ProductVersion { get; }
    [NullableAttribute("1")]
internal PropertyStore Properties { get; }
    internal Color RawBackColor { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlRecreatingHandleDescr")]
public bool RecreatingHandle { get; }
    private Control ReflectParent { get; private set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlRegionDescr")]
public Region Region { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Please use RightToLeft instead. https://go.microsoft.com/fwlink/?linkid=14202")]
protected internal bool RenderRightToLeft { get; }
    internal bool RenderTransparent { get; }
    internal bool RenderTransparencyWithVisualStyles { get; }
    internal BoundsSpecified RequiredScaling { get; internal set; }
    internal bool RequiredScalingEnabled { get; internal set; }
    [SRDescriptionAttribute("ControlResizeRedrawDescr")]
protected bool ResizeRedraw { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlRightDescr")]
public int Right { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [EditorBrowsableAttribute("2")]
protected bool ScaleChildren { get; }
    internal Font ScaledControlFont { get; internal set; }
    [EditorBrowsableAttribute("2")]
public ISite Site { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlSizeDescr")]
public Size Size { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[MergablePropertyAttribute("False")]
[SRDescriptionAttribute("ControlTabIndexDescr")]
public int TabIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    internal bool TabStopInternal { get; internal set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[BindableAttribute("True")]
[DispIdAttribute("-517")]
[SRDescriptionAttribute("ControlTextDescr")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlTopDescr")]
public int Top { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlTopLevelControlDescr")]
public Control TopLevelControl { get; }
    internal Control TopLevelControlInternal { get; }
    [NullableAttribute("1")]
internal Control TopMostParent { get; }
    [NullableAttribute("1")]
private static BufferedGraphicsContext BufferContext { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal bool ShowKeyboardCues { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal bool ShowFocusCues { get; }
    internal SHOW_WINDOW_CMD ShowParams { get; }
    [DefaultValueAttribute("False")]
[EditorBrowsableAttribute("0")]
[BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlUseWaitCursorDescr")]
public bool UseWaitCursor { get; public set; }
    internal bool UseCompatibleTextRenderingInt { get; internal set; }
    internal bool SupportsUseCompatibleTextRendering { get; }
    [NullableAttribute("1")]
private ControlVersionInfo VersionInfo { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlVisibleDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWidthDescr")]
public int Width { get; public set; }
    private protected WINDOW_EX_STYLE ExtendedWindowStyle { get; private protected set; }
    internal WINDOW_STYLE WindowStyle { get; internal set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWindowTargetDescr")]
public IWindowTarget WindowTarget { get; public set; }
    [NullableAttribute("1")]
internal string WindowText { get; internal set; }
    [BrowsableAttribute("False")]
public Size PreferredSize { get; }
    [SRDescriptionAttribute("ControlPaddingDescr")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public Padding Padding { get; public set; }
    internal bool DesiredVisibility { get; }
    internal ContainerControl ParentContainerControl { get; }
    [EditorBrowsableAttribute("1")]
internal bool ShouldAutoValidate { get; }
    [NullableAttribute("1")]
private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    private IArrangedElement System.Windows.Forms.Layout.IArrangedElement.Container { get; }
    private bool System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout { get; }
    [NullableAttribute("1")]
private PropertyStore System.Windows.Forms.Layout.IArrangedElement.Properties { get; }
    internal bool SupportsUiaProviders { get; }
    internal ToolStripControlHost ToolStripControlHost { get; internal set; }
    private HWND IHandle<Windows.Win32.Foundation.HWND>.Handle { get; }
    internal HWND HWND { get; }
    internal ImeMode CachedImeMode { get; internal set; }
    protected bool CanEnableIme { get; }
    internal ImeMode CurrentImeContextMode { get; }
    protected ImeMode DefaultImeMode { get; }
    internal int DisableImeModeChangedCount { get; internal set; }
    private static bool IgnoreWmImeNotify { get; private set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlIMEModeDescr")]
public ImeMode ImeMode { get; public set; }
    protected ImeMode ImeModeBase { get; protected set; }
    private bool ImeSupported { get; }
    internal int ImeWmCharsToIgnore { get; internal set; }
    private bool LastCanEnableIme { get; private set; }
    protected static ImeMode PropagatingImeMode { get; private set; }
    internal Control(bool autoInstallSyncContext);
    public Control(string text);
    public Control(string text, int left, int top, int width, int height);
    public Control(Control parent, string text);
    public Control(Control parent, string text, int left, int top, int width, int height);
    private static Control();
    private Color get_ActiveXAmbientBackColor();
    private Color get_ActiveXAmbientForeColor();
    private Font get_ActiveXAmbientFont();
    private bool get_ActiveXEventsFrozen();
    private IntPtr get_ActiveXHWNDParent();
    [NullableContextAttribute("1")]
private Region ActiveXMergeRegion(Region region);
    private void ActiveXOnFocus(bool focus);
    private void ActiveXViewChanged();
    private void ActiveXUpdateBounds(Int32& x, Int32& y, Int32& width, Int32& height, SET_WINDOW_POS_FLAGS flags);
    [NullableContextAttribute("1")]
private ActiveXImpl get_ActiveXInstance();
    [NullableContextAttribute("1")]
internal T GetService();
    [NullableContextAttribute("1")]
internal bool TryGetService(T& service);
    [CompilerGeneratedAttribute]
internal static bool get_UseCompatibleTextRenderingDefault();
    [CompilerGeneratedAttribute]
internal static void set_UseCompatibleTextRenderingDefault(bool value);
    [CompilerGeneratedAttribute]
internal byte get_LayoutSuspendCount();
    [CompilerGeneratedAttribute]
private void set_LayoutSuspendCount(byte value);
    internal DPI_AWARENESS_CONTEXT get_DpiAwarenessContext();
    [NullableContextAttribute("1")]
public AccessibleObject get_AccessibilityObject();
    [NullableContextAttribute("1")]
private AccessibleObject get_NcAccessibilityObject();
    private AccessibleObject GetAccessibilityObject(int accObjId);
    protected virtual AccessibleObject GetAccessibilityObjectById(int objectId);
    public string get_AccessibleDefaultActionDescription();
    public void set_AccessibleDefaultActionDescription(string value);
    public string get_AccessibleDescription();
    public void set_AccessibleDescription(string value);
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public AccessibleRole get_AccessibleRole();
    public void set_AccessibleRole(AccessibleRole value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    private AmbientProperties get_AmbientPropertiesService();
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Point get_AutoScrollOffset();
    public virtual void set_AutoScrollOffset(Point value);
    protected void SetAutoSizeMode(AutoSizeMode mode);
    protected AutoSizeMode GetAutoSizeMode();
    [NullableContextAttribute("1")]
public virtual LayoutEngine get_LayoutEngine();
    internal HBRUSH get_BackColorBrush();
    public virtual object get_DataContext();
    public virtual void set_DataContext(object value);
    private bool ShouldSerializeDataContext();
    private void ResetDataContext();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    internal bool get_BecomingActiveControl();
    internal void set_BecomingActiveControl(bool value);
    private bool ShouldSerializeAccessibleName();
    [EditorBrowsableAttribute("1")]
public void ResetBindings();
    internal BindingContext get_BindingContextInternal();
    internal void set_BindingContextInternal(BindingContext value);
    public virtual BindingContext get_BindingContext();
    public virtual void set_BindingContext(BindingContext value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public int get_Bottom();
    public sealed virtual Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    internal virtual bool get_CanAccessProperties();
    public bool get_CanFocus();
    protected virtual bool get_CanRaiseEvents();
    public bool get_CanSelect();
    public bool get_Capture();
    public void set_Capture(bool value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    internal bool get_CacheTextInternal();
    internal void set_CacheTextInternal(bool value);
    [CompilerGeneratedAttribute]
public static bool get_CheckForIllegalCrossThreadCalls();
    [CompilerGeneratedAttribute]
public static void set_CheckForIllegalCrossThreadCalls(bool value);
    public Rectangle get_ClientRectangle();
    public Size get_ClientSize();
    public void set_ClientSize(Size value);
    public void add_ClientSizeChanged(EventHandler value);
    public void remove_ClientSizeChanged(EventHandler value);
    [NullableContextAttribute("1")]
public string get_CompanyName();
    public bool get_ContainsFocus();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    [NullableContextAttribute("1")]
public ControlCollection get_Controls();
    public bool get_Created();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    [NullableContextAttribute("1")]
internal virtual void NotifyValidationResult(object sender, CancelEventArgs ev);
    internal bool ValidateActiveControl(Boolean& validatedControlAllowsFocusChange);
    internal bool get_ValidationCancelled();
    internal void set_ValidationCancelled(bool value);
    internal bool get_IsTopMdiWindowClosing();
    internal void set_IsTopMdiWindowClosing(bool value);
    internal bool get_ScalingInProgress();
    private void set_ScalingInProgress(bool value);
    internal bool get_IsAccessibilityObjectCreated();
    internal UInt32 get_CreateThreadId();
    [NullableContextAttribute("1")]
public virtual Cursor get_Cursor();
    [NullableContextAttribute("1")]
public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    [NullableContextAttribute("1")]
public sealed virtual ControlBindingsCollection get_DataBindings();
    public static Color get_DefaultBackColor();
    [NullableContextAttribute("1")]
protected virtual Cursor get_DefaultCursor();
    [NullableContextAttribute("1")]
public static Font get_DefaultFont();
    public static Color get_DefaultForeColor();
    protected virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultMaximumSize();
    protected virtual Size get_DefaultMinimumSize();
    protected virtual Padding get_DefaultPadding();
    private static RightToLeft get_DefaultRightToLeft();
    protected virtual Size get_DefaultSize();
    [NullableContextAttribute("1")]
private void DetachContextMenuStrip(object sender, EventArgs e);
    public int get_DeviceDpi();
    internal Color get_DisabledColor();
    public virtual Rectangle get_DisplayRectangle();
    public bool get_IsDisposed();
    private void DisposeFontHandle();
    public bool get_Disposing();
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    private bool get_DoubleBufferingEnabled();
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public virtual bool get_Focused();
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    [NullableContextAttribute("1")]
internal Font GetScaledFont(Font font, int newDpi, int oldDpi);
    private void ClearDpiFonts();
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    internal HFONT get_FontHandle();
    protected int get_FontHeight();
    protected void set_FontHeight(int value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    private Font GetParentFont(Int32& fontDpi);
    [EditorBrowsableAttribute("2")]
public virtual Size GetPreferredSize(Size proposedSize);
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    public sealed virtual IntPtr get_Handle();
    internal IntPtr get_HandleInternal();
    internal HWND get_HWNDInternal();
    public bool get_HasChildren();
    public int get_Height();
    public void set_Height(int value);
    internal bool get_HostedInWin32DialogManager();
    public bool get_IsHandleCreated();
    private protected virtual bool IsHoveredWithMouse();
    internal bool get_IsLayoutSuspended();
    internal bool get_IsWindowObscured();
    internal HWND get_InternalHandle();
    public sealed virtual bool get_InvokeRequired();
    public bool get_IsAccessible();
    public void set_IsAccessible(bool value);
    internal bool get_IsActiveX();
    public bool get_IsAncestorSiteInDesignMode();
    [NullableContextAttribute("1")]
private static ISite GetSitedParentSite(Control control);
    internal virtual bool get_IsContainerControl();
    public bool get_IsMirrored();
    internal virtual bool get_IsMnemonicsListenerAxSourced();
    private bool IsValidBackColor(Color c);
    [CompilerGeneratedAttribute]
private protected static Keys get_LastKeyData();
    [CompilerGeneratedAttribute]
private protected static void set_LastKeyData(Keys value);
    public int get_Left();
    public void set_Left(int value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public void add_MarginChanged(EventHandler value);
    public void remove_MarginChanged(EventHandler value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public static Keys get_ModifierKeys();
    public static MouseButtons get_MouseButtons();
    public static Point get_MousePosition();
    [NullableContextAttribute("1")]
public string get_Name();
    [NullableContextAttribute("1")]
public void set_Name(string value);
    public Control get_Parent();
    public void set_Parent(Control value);
    internal virtual Control get_ParentInternal();
    internal virtual void set_ParentInternal(Control value);
    [NullableContextAttribute("1")]
public string get_ProductName();
    [NullableContextAttribute("1")]
public string get_ProductVersion();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal PropertyStore get_Properties();
    internal Color get_RawBackColor();
    public bool get_RecreatingHandle();
    internal virtual void AddReflectChild();
    internal virtual void RemoveReflectChild();
    [NullableContextAttribute("1")]
internal virtual void RemoveToolTip(ToolTip toolTip);
    private Control get_ReflectParent();
    private void set_ReflectParent(Control value);
    public Region get_Region();
    public void set_Region(Region value);
    internal void SetRegion(Region region);
    public void add_RegionChanged(EventHandler value);
    public void remove_RegionChanged(EventHandler value);
    protected internal bool get_RenderRightToLeft();
    internal bool get_RenderTransparent();
    private bool RenderColorTransparent(Color c);
    internal virtual bool get_RenderTransparencyWithVisualStyles();
    internal BoundsSpecified get_RequiredScaling();
    internal void set_RequiredScaling(BoundsSpecified value);
    internal bool get_RequiredScalingEnabled();
    internal void set_RequiredScalingEnabled(bool value);
    protected bool get_ResizeRedraw();
    protected void set_ResizeRedraw(bool value);
    public int get_Right();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    protected virtual bool get_ScaleChildren();
    internal Font get_ScaledControlFont();
    internal void set_ScaledControlFont(Font value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public Size get_Size();
    public void set_Size(Size value);
    public void add_SizeChanged(EventHandler value);
    public void remove_SizeChanged(EventHandler value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    internal bool get_TabStopInternal();
    internal void set_TabStopInternal(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public object get_Tag();
    public void set_Tag(object value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_Top();
    public void set_Top(int value);
    public Control get_TopLevelControl();
    internal Control get_TopLevelControlInternal();
    [NullableContextAttribute("1")]
internal Control get_TopMostParent();
    [NullableContextAttribute("1")]
private static BufferedGraphicsContext get_BufferContext();
    protected internal virtual bool get_ShowKeyboardCues();
    protected internal virtual bool get_ShowFocusCues();
    internal virtual SHOW_WINDOW_CMD get_ShowParams();
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
    internal bool get_UseCompatibleTextRenderingInt();
    internal void set_UseCompatibleTextRenderingInt(bool value);
    internal virtual bool get_SupportsUseCompatibleTextRendering();
    [NullableContextAttribute("1")]
private ControlVersionInfo get_VersionInfo();
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    [NullableContextAttribute("1")]
private void WaitForWaitHandle(WaitHandle waitHandle);
    public int get_Width();
    public void set_Width(int value);
    private protected WINDOW_EX_STYLE get_ExtendedWindowStyle();
    private protected void set_ExtendedWindowStyle(WINDOW_EX_STYLE value);
    internal WINDOW_STYLE get_WindowStyle();
    internal void set_WindowStyle(WINDOW_STYLE value);
    [NullableContextAttribute("1")]
public IWindowTarget get_WindowTarget();
    [NullableContextAttribute("1")]
public void set_WindowTarget(IWindowTarget value);
    [NullableContextAttribute("1")]
internal virtual string get_WindowText();
    [NullableContextAttribute("1")]
internal virtual void set_WindowText(string value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_ControlAdded(ControlEventHandler value);
    public void remove_ControlAdded(ControlEventHandler value);
    public void add_ControlRemoved(ControlEventHandler value);
    public void remove_ControlRemoved(ControlEventHandler value);
    public void add_DataContextChanged(EventHandler value);
    public void remove_DataContextChanged(EventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_HandleCreated(EventHandler value);
    public void remove_HandleCreated(EventHandler value);
    public void add_HandleDestroyed(EventHandler value);
    public void remove_HandleDestroyed(EventHandler value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_Invalidated(InvalidateEventHandler value);
    public void remove_Invalidated(InvalidateEventHandler value);
    public Size get_PreferredSize();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_GotFocus(EventHandler value);
    public void remove_GotFocus(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_LostFocus(EventHandler value);
    public void remove_LostFocus(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseCaptureChanged(EventHandler value);
    public void remove_MouseCaptureChanged(EventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_DpiChangedBeforeParent(EventHandler value);
    public void remove_DpiChangedBeforeParent(EventHandler value);
    public void add_DpiChangedAfterParent(EventHandler value);
    public void remove_DpiChangedAfterParent(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_Move(EventHandler value);
    public void remove_Move(EventHandler value);
    public void add_PreviewKeyDown(PreviewKeyDownEventHandler value);
    public void remove_PreviewKeyDown(PreviewKeyDownEventHandler value);
    public void add_Resize(EventHandler value);
    public void remove_Resize(EventHandler value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    public void add_SystemColorsChanged(EventHandler value);
    public void remove_SystemColorsChanged(EventHandler value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected internal void AccessibilityNotifyClients(AccessibleEvents accEvent, int childID);
    [EditorBrowsableAttribute("2")]
protected void AccessibilityNotifyClients(AccessibleEvents accEvent, int objectID, int childID);
    internal virtual void AssignParent(Control value);
    public void add_ParentChanged(EventHandler value);
    public void remove_ParentChanged(EventHandler value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public IAsyncResult BeginInvoke(Delegate method);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public IAsyncResult BeginInvoke(Action method);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public sealed virtual IAsyncResult BeginInvoke(Delegate method, Object[] args);
    internal void BeginUpdateInternal();
    public void BringToFront();
    internal virtual bool CanProcessMnemonic();
    internal virtual bool CanSelectCore();
    internal static void CheckParentingCycle(Control bottom, Control toFind);
    [NullableContextAttribute("1")]
private void ChildGotFocus(Control child);
    public bool Contains(Control ctl);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    [NullableContextAttribute("1")]
public Graphics CreateGraphics();
    [NullableContextAttribute("1")]
internal Graphics CreateGraphicsInternal();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateHandle();
    public void CreateControl();
    internal void CreateControl(bool ignoreVisible);
    [EditorBrowsableAttribute("2")]
protected virtual void DefWndProc(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void DestroyHandle();
    protected virtual void Dispose(bool disposing);
    internal virtual void DisposeAxControls();
    [NullableContextAttribute("1")]
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects);
    [NullableContextAttribute("1")]
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects, Bitmap dragImage, Point cursorOffset, bool useDefaultDragImage);
    [NullableContextAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public sealed virtual object EndInvoke(IAsyncResult asyncResult);
    internal bool EndUpdateInternal();
    internal bool EndUpdateInternal(bool invalidate);
    public Form FindForm();
    [NullableContextAttribute("1")]
private Control FindMarshalingControl();
    protected bool GetTopLevel();
    [NullableContextAttribute("1")]
internal void RaiseCreateHandleEvent(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void RaiseKeyEvent(object key, KeyEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void RaiseMouseEvent(object key, MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
public bool Focus();
    private protected virtual bool FocusInternal();
    [EditorBrowsableAttribute("2")]
public static Control FromChildHandle(IntPtr handle);
    [NullableContextAttribute("0")]
internal static HandleRef`1<HWND> GetHandleRef(HWND hwnd);
    [EditorBrowsableAttribute("2")]
public static Control FromHandle(IntPtr handle);
    internal Size ApplySizeConstraints(int width, int height);
    internal Size ApplySizeConstraints(Size proposedSize);
    internal virtual Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight);
    public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue);
    [NullableContextAttribute("1")]
private protected virtual string GetCaptionForTool(ToolTip toolTip);
    public Control GetChildAtPoint(Point pt);
    public IContainerControl GetContainerControl();
    [NullableContextAttribute("1")]
private static bool IsFocusManagingContainerControl(Control ctl);
    internal bool IsUpdating();
    [NullableContextAttribute("1")]
private static FontHandleWrapper GetDefaultFontHandleWrapper();
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    private static MouseButtons GetXButton(int wparam);
    internal bool get_DesiredVisibility();
    internal bool GetAnyDisposingInHierarchy();
    [NullableContextAttribute("1")]
private Int32[] GetChildWindowsInTabOrder();
    [NullableContextAttribute("1")]
internal Control[] GetChildControlsInTabOrder(bool handleCreatedOnly);
    internal virtual Control GetFirstChildControlInTabOrder(bool forward);
    [NullableContextAttribute("1")]
internal Font GetCurrentFontAndDpi(Int32& fontDpi);
    [NullableContextAttribute("1")]
private protected virtual IList`1<Rectangle> GetNeighboringToolsRectangles();
    public Control GetNextControl(Control ctl, bool forward);
    [NullableContextAttribute("0")]
internal static HandleRef`1<HWND> GetSafeHandle(IWin32Window window);
    private protected bool GetState(States flag);
    private protected bool GetExtendedState(ExtendedStates flag);
    protected bool GetStyle(ControlStyles flag);
    public void Hide();
    private void HookMouseEvent();
    [EditorBrowsableAttribute("2")]
protected virtual void InitLayout();
    private void InitScaling(BoundsSpecified specified);
    internal virtual HBRUSH InitializeDCForWmCtlColor(HDC dc, MessageId msg);
    public void Invalidate(Region region);
    public void Invalidate(Region region, bool invalidateChildren);
    public void Invalidate();
    public void Invalidate(bool invalidateChildren);
    public void Invalidate(Rectangle rc);
    public void Invalidate(Rectangle rc, bool invalidateChildren);
    [NullableContextAttribute("1")]
public void Invoke(Action method);
    [NullableContextAttribute("1")]
public object Invoke(Delegate method);
    [NullableContextAttribute("1")]
public sealed virtual object Invoke(Delegate method, Object[] args);
    [NullableContextAttribute("1")]
public T Invoke(Func`1<T> method);
    [NullableContextAttribute("1")]
private static void InvokeMarshaledCallback(ThreadMethodEntry tme);
    private static void InvokeMarshaledCallbackHelper(object obj);
    private static void InvokeMarshaledCallbackDo(ThreadMethodEntry tme);
    private void InvokeMarshaledCallbacks();
    [NullableContextAttribute("1")]
protected void InvokePaint(Control c, PaintEventArgs e);
    [NullableContextAttribute("1")]
protected void InvokePaintBackground(Control c, PaintEventArgs e);
    internal bool IsFontSet();
    internal bool IsDescendant(Control descendant);
    public static bool IsKeyLocked(Keys keyVal);
    protected virtual bool IsInputChar(char charCode);
    protected virtual bool IsInputKey(Keys keyData);
    public static bool IsMnemonic(char charCode, string text);
    [NullableContextAttribute("1")]
private static bool IsScaledByParent(Control control);
    private void ListenToUserPreferenceChanged(bool listen);
    public int LogicalToDeviceUnits(int value);
    public Size LogicalToDeviceUnits(Size value);
    [NullableContextAttribute("1")]
public void ScaleBitmapLogicalToDevice(Bitmap& logicalBitmap);
    private protected void AdjustWindowRectExForControlDpi(RECT& rect, WINDOW_STYLE style, bool bMenu, WINDOW_EX_STYLE exStyle);
    private static void AdjustWindowRectExForDpi(RECT& rect, WINDOW_STYLE style, bool bMenu, WINDOW_EX_STYLE exStyle, int dpi);
    [NullableContextAttribute("1")]
private object MarshaledInvoke(Control caller, Delegate method, Object[] args, bool synchronous);
    [NullableContextAttribute("1")]
private static void MarshalStringToMessage(string value, Message& m);
    internal void NotifyEnter();
    internal void NotifyLeave();
    [EditorBrowsableAttribute("2")]
protected virtual void NotifyInvalidate(Rectangle invalidatedArea);
    private bool NotifyValidating();
    private void NotifyValidated();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void InvokeOnClick(Control toInvoke, EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnAutoSizeChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnBackColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnBackgroundImageChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnBackgroundImageLayoutChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnBindingContextChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnCausesValidationChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnChildLayoutResuming(Control child, bool performLayout);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnContextMenuStripChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnCursorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDataContextChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDockChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnEnabledChanged(EventArgs e);
    private protected virtual void OnFrameWindowActivate(bool fActivate);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnForeColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnNotifyMessage(Message m);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentBackColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentBackgroundImageChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentBindingContextChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentCursorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentDataContextChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentFontChanged(EventArgs e);
    internal virtual void OnParentHandleRecreated();
    internal virtual void OnParentHandleRecreating();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentForeColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentRightToLeftChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentVisibleChanged(EventArgs e);
    internal virtual void OnParentBecameInvisible();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnPrint(PaintEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnTabIndexChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnTabStopChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnVisibleChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnTopMostActiveXParentChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnClick(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnClientSizeChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnControlAdded(ControlEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnControlRemoved(ControlEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
private void OnSetScrollPosition(object sender, EventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnInvokedSetScrollPosition(object sender, EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLocationChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDoubleClick(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragEnter(DragEventArgs drgevent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragOver(DragEventArgs drgevent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragLeave(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragDrop(DragEventArgs drgevent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnEnter(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void InvokeGotFocus(Control toInvoke, EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnGotFocus(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHelpRequested(HelpEventArgs hevent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnInvalidated(InvalidateEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnKeyPress(KeyPressEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnKeyUp(KeyEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLayout(LayoutEventArgs levent);
    internal virtual void OnLayoutResuming(bool performLayout);
    internal virtual void OnLayoutSuspended();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLeave(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void InvokeLostFocus(Control toInvoke, EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLostFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMarginChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseClick(MouseEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseCaptureChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseDown(MouseEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseEnter(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
protected virtual void OnDpiChangedBeforeParent(EventArgs e);
    [NullableContextAttribute("1")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
protected virtual void OnDpiChangedAfterParent(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseHover(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseMove(MouseEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseUp(MouseEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMove(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaddingChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs pevent);
    [NullableContextAttribute("1")]
private void OnParentInvalidated(InvalidateEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRegionChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnResize(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnPreviewKeyDown(PreviewKeyDownEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnSizeChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnChangeUICues(UICuesEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnStyleChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnSystemColorsChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnValidating(CancelEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnValidated(EventArgs e);
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("2")]
protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    [NullableContextAttribute("1")]
internal void PaintBackground(PaintEventArgs e, Rectangle rectangle);
    [NullableContextAttribute("1")]
internal void PaintBackground(PaintEventArgs e, Rectangle rectangle, Color backColor);
    [NullableContextAttribute("1")]
internal void PaintBackground(PaintEventArgs e, Rectangle rectangle, Color backColor, Point scrollOffset);
    [NullableContextAttribute("1")]
private static void PaintBackColor(PaintEventArgs e, Rectangle rectangle, Color backColor);
    [NullableContextAttribute("1")]
private void PaintException(PaintEventArgs e);
    [NullableContextAttribute("1")]
internal void PaintTransparentBackground(PaintEventArgs e, Rectangle rectangle);
    [NullableContextAttribute("1")]
internal void PaintTransparentBackground(PaintEventArgs e, Rectangle rectangle, Region transparentRegion);
    [NullableContextAttribute("1")]
private void PaintWithErrorHandling(PaintEventArgs e, short layer);
    internal ContainerControl get_ParentContainerControl();
    [EditorBrowsableAttribute("2")]
public void PerformLayout();
    [EditorBrowsableAttribute("2")]
public void PerformLayout(Control affectedControl, string affectedProperty);
    [NullableContextAttribute("1")]
internal void PerformLayout(LayoutEventArgs args);
    internal bool PerformControlValidation(bool bulkValidation);
    internal bool PerformContainerValidation(ValidationConstraints validationConstraints);
    public Point PointToClient(Point p);
    public Point PointToScreen(Point p);
    public virtual bool PreProcessMessage(Message& msg);
    [EditorBrowsableAttribute("2")]
public PreProcessControlState PreProcessControlMessage(Message& msg);
    internal static PreProcessControlState PreProcessControlMessageInternal(Control target, Message& message);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    private void PrintToMetaFile(HDC hDC, IntPtr lParam);
    private protected virtual void PrintToMetaFileRecursive(HDC hDC, IntPtr lParam, Rectangle bounds);
    private void PrintToMetaFile_SendPrintMessage(HDC hDC, IntPtr lParam);
    protected virtual bool ProcessDialogChar(char charCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    protected internal virtual bool ProcessKeyMessage(Message& m);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected internal virtual bool ProcessMnemonic(char charCode);
    internal void ProcessUICues(Message& msg);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void RaiseDragEvent(object key, DragEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected void RaisePaintEvent(object key, PaintEventArgs e);
    private void RemovePendingMessages(MessageId msgMin, MessageId msgMax);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetCursor();
    private void ResetEnabled();
    [EditorBrowsableAttribute("1")]
public virtual void ResetFont();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    private void ResetLocation();
    private void ResetMargin();
    private void ResetMinimumSize();
    private void ResetPadding();
    private void ResetSize();
    [EditorBrowsableAttribute("1")]
public virtual void ResetRightToLeft();
    [EditorBrowsableAttribute("2")]
protected void RecreateHandle();
    internal virtual void RecreateHandleCore();
    public Rectangle RectangleToClient(Rectangle r);
    public Rectangle RectangleToScreen(Rectangle r);
    [EditorBrowsableAttribute("2")]
protected static bool ReflectMessage(IntPtr hWnd, Message& m);
    public virtual void Refresh();
    internal virtual void ReleaseUiaProvider(HWND handle);
    private protected bool TryGetAccessibilityObject(AccessibleObject& accessibleObject);
    [EditorBrowsableAttribute("2")]
protected void ResetMouseEventArgs();
    public virtual void ResetText();
    private void ResetVisible();
    public void ResumeLayout();
    public void ResumeLayout(bool performLayout);
    internal void SetAcceptDrops(bool accept);
    [ObsoleteAttribute("This method has been deprecated. Use the Scale(SizeF ratio) method instead. https://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("1")]
public void Scale(float ratio);
    [ObsoleteAttribute("This method has been deprecated. Use the Scale(SizeF ratio) method instead. https://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("1")]
public void Scale(float dx, float dy);
    [EditorBrowsableAttribute("2")]
public void Scale(SizeF factor);
    [NullableContextAttribute("1")]
internal virtual void Scale(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, bool causedByFontChanged);
    [NullableContextAttribute("1")]
internal void ScaleChildControls(SizeF includedFactor, SizeF excludedFactor, Control requestingControl, bool causedByFontChanged);
    internal void UpdateWindowFontIfNeeded();
    [NullableContextAttribute("1")]
internal void ScaleControl(SizeF includedFactor, SizeF excludedFactor, Control requestingControl);
    [EditorBrowsableAttribute("2")]
protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    internal Size ScaleSize(Size startSize, float x, float y);
    public void Select();
    protected virtual void Select(bool directed, bool forward);
    public bool SelectNextControl(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    private Control GetNextSelectableControl(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    private void SelectNextIfFocused();
    public void SendToBack();
    public void SetBounds(int x, int y, int width, int height);
    public void SetBounds(int x, int y, int width, int height, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetClientSizeCore(int x, int y);
    [EditorBrowsableAttribute("2")]
protected virtual Size SizeFromClientSize(Size clientSize);
    internal Size SizeFromClientSizeInternal(Size size);
    private void SetHandle(IntPtr value);
    private void SetParentHandle(HWND value);
    private protected void SetState(States flag, bool value);
    private protected void SetExtendedState(ExtendedStates flag, bool value);
    [EditorBrowsableAttribute("2")]
protected void SetStyle(ControlStyles flag, bool value);
    [NullableContextAttribute("1")]
internal virtual void SetToolTip(ToolTip toolTip);
    protected void SetTopLevel(bool value);
    private protected void SetTopLevelInternal(bool value);
    protected virtual void SetVisibleCore(bool value);
    [NullableContextAttribute("1")]
internal static AutoValidate GetAutoValidateForControl(Control control);
    internal bool get_ShouldAutoValidate();
    internal virtual bool ShouldPerformContainerValidation();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeBackColor();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeCursor();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeEnabled();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeForeColor();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeFont();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeRightToLeft();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeVisible();
    [EditorBrowsableAttribute("2")]
protected HorizontalAlignment RtlTranslateAlignment(HorizontalAlignment align);
    [EditorBrowsableAttribute("2")]
protected LeftRightAlignment RtlTranslateAlignment(LeftRightAlignment align);
    [EditorBrowsableAttribute("2")]
protected ContentAlignment RtlTranslateAlignment(ContentAlignment align);
    [EditorBrowsableAttribute("2")]
protected HorizontalAlignment RtlTranslateHorizontal(HorizontalAlignment align);
    [EditorBrowsableAttribute("2")]
protected LeftRightAlignment RtlTranslateLeftRight(LeftRightAlignment align);
    [EditorBrowsableAttribute("2")]
protected internal ContentAlignment RtlTranslateContent(ContentAlignment align);
    private void SetWindowFont();
    private void SetWindowStyle(int flag, bool value);
    public void Show();
    [EditorBrowsableAttribute("1")]
internal bool ShouldSerializeMargin();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeMaximumSize();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeMinimumSize();
    [EditorBrowsableAttribute("1")]
internal bool ShouldSerializePadding();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeSize();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeText();
    public void SuspendLayout();
    internal bool TryGetExplicitlySetFont(Font& localFont);
    [NullableContextAttribute("1")]
private protected void SetScaledFont(Font scaledFont, bool raiseOnFontChangedEvent);
    private void UnhookMouseEvent();
    public void Update();
    [EditorBrowsableAttribute("2")]
protected internal void UpdateBounds();
    [EditorBrowsableAttribute("2")]
protected void UpdateBounds(int x, int y, int width, int height);
    [EditorBrowsableAttribute("2")]
protected void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight);
    private void UpdateBindings();
    [NullableContextAttribute("1")]
private void UpdateChildControlIndex(Control control);
    private void UpdateReflectParent();
    [EditorBrowsableAttribute("2")]
protected void UpdateZOrder();
    [NullableContextAttribute("1")]
private void UpdateChildZOrder(Control control);
    private void UpdateRoot();
    [EditorBrowsableAttribute("2")]
protected void UpdateStyles();
    internal virtual void UpdateStylesCore();
    [NullableContextAttribute("1")]
private void UserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    internal virtual void OnBoundsUpdate(int x, int y, int width, int height);
    internal void WindowAssignHandle(HWND handle, bool value);
    internal void WindowReleaseHandle();
    private void WmClose(Message& m);
    private void WmCaptureChanged(Message& m);
    private void WmCommand(Message& m);
    internal virtual void WmContextMenu(Message& m);
    [NullableContextAttribute("1")]
internal void WmContextMenu(Message& m, Control sourceControl);
    private void WmCtlColorControl(Message& m);
    private void WmDisplayChange(Message& m);
    private void WmEraseBkgnd(Message& m);
    private void WmGetControlName(Message& m);
    private void WmGetControlType(Message& m);
    private void WmGetObject(Message& m);
    private void WmHelp(Message& m);
    private void WmCreate(Message& m);
    private void WmDestroy(Message& m);
    private void WmKeyChar(Message& m);
    private void WmKillFocus(Message& m);
    private void WmMouseDown(Message& m, MouseButtons button, int clicks);
    private void WmMouseEnter(Message& m);
    private void WmMouseLeave(Message& m);
    private void WmDpiChangedBeforeParent(Message& m);
    private void WmDpiChangedAfterParent(Message& m);
    private void WmMouseHover(Message& m);
    private void WmMouseMove(Message& m);
    private void WmMouseUp(Message& m, MouseButtons button, int clicks);
    private void WmMouseWheel(Message& m);
    private void WmMove(Message& m);
    private void WmNotify(Message& m);
    private void WmNotifyFormat(Message& m);
    private void WmOwnerDraw(Message& m);
    private void WmPaint(Message& m);
    private void WmPrintClient(Message& m);
    private void WmQueryNewPalette(Message& m);
    private void WmSetCursor(Message& m);
    private void WmWindowPosChanging(Message& m);
    private void WmParentNotify(Message& m);
    private void WmSetFocus(Message& m);
    private void WmShowWindow(Message& m);
    private void WmUpdateUIState(Message& m);
    private void WmWindowPosChanged(Message& m);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
private static void WndProcException(Exception e);
    [NullableContextAttribute("1")]
private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    private sealed virtual override IArrangedElement System.Windows.Forms.Layout.IArrangedElement.get_Container();
    private sealed virtual override bool System.Windows.Forms.Layout.IArrangedElement.get_ParticipatesInLayout();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.PerformLayout(IArrangedElement affectedElement, string affectedProperty);
    [NullableContextAttribute("1")]
private sealed virtual override PropertyStore System.Windows.Forms.Layout.IArrangedElement.get_Properties();
    private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.SetBounds(Rectangle bounds, BoundsSpecified specified);
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs drgEvent);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs drgEvent);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs drgEvent);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.ISupportOleDropSource.OnGiveFeedback(GiveFeedbackEventArgs giveFeedbackEventArgs);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.ISupportOleDropSource.OnQueryContinueDrag(QueryContinueDragEventArgs queryContinueDragEventArgs);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.CanShowToolTipsNow();
    private sealed virtual override Rectangle System.Windows.Forms.IKeyboardToolTip.GetNativeScreenRectangle();
    [NullableContextAttribute("1")]
private sealed virtual override IList`1<Rectangle> System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsHoveredWithMouse();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.HasRtlModeEnabled();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsToolTip();
    [NullableContextAttribute("1")]
private sealed virtual override IWin32Window System.Windows.Forms.IKeyboardToolTip.GetOwnerWindow();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnHooked(ToolTip toolTip);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnUnhooked(ToolTip toolTip);
    [NullableContextAttribute("1")]
private sealed virtual override string System.Windows.Forms.IKeyboardToolTip.GetCaptionForTool(ToolTip toolTip);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.ShowsOwnToolTip();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsBeingTabbedTo();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsChildrenToShowToolTips();
    [NullableContextAttribute("1")]
private IList`1<Rectangle> GetOwnNeighboringToolsRectangles();
    internal virtual bool ShowsOwnKeyboardToolTip();
    [NullableContextAttribute("1")]
internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    [NullableContextAttribute("1")]
internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    internal virtual Rectangle GetToolNativeScreenRectangle();
    internal virtual bool AllowsKeyboardToolTip();
    internal static bool AreCommonNavigationalKeysDown();
    [NullableContextAttribute("1")]
internal virtual ToolInfoWrapper`1<Control> GetToolInfoWrapper(TOOLTIP_FLAGS flags, string caption, ToolTip tooltip);
    internal ToolStripControlHost get_ToolStripControlHost();
    internal void set_ToolStripControlHost(ToolStripControlHost value);
    private sealed virtual override HWND IHandle<Windows.Win32.Foundation.HWND>.get_Handle();
    internal HWND get_HWND();
    internal virtual bool AllowsChildrenToShowToolTips();
    internal ImeMode get_CachedImeMode();
    internal void set_CachedImeMode(ImeMode value);
    protected virtual bool get_CanEnableIme();
    internal ImeMode get_CurrentImeContextMode();
    protected virtual ImeMode get_DefaultImeMode();
    internal int get_DisableImeModeChangedCount();
    internal void set_DisableImeModeChangedCount(int value);
    private static bool get_IgnoreWmImeNotify();
    private static void set_IgnoreWmImeNotify(bool value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    protected virtual ImeMode get_ImeModeBase();
    protected virtual void set_ImeModeBase(ImeMode value);
    private bool get_ImeSupported();
    [NullableContextAttribute("1")]
public void add_ImeModeChanged(EventHandler value);
    [NullableContextAttribute("1")]
public void remove_ImeModeChanged(EventHandler value);
    internal int get_ImeWmCharsToIgnore();
    internal void set_ImeWmCharsToIgnore(int value);
    private bool get_LastCanEnableIme();
    private void set_LastCanEnableIme(bool value);
    protected static ImeMode get_PropagatingImeMode();
    private static void set_PropagatingImeMode(ImeMode value);
    internal void UpdateImeContextMode();
    private void VerifyImeModeChanged(ImeMode oldMode, ImeMode newMode);
    internal void VerifyImeRestrictedModeChanged();
    internal void OnImeContextStatusChanged(IntPtr handle);
    [NullableContextAttribute("1")]
protected virtual void OnImeModeChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
public void ResetImeMode();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeImeMode();
    private void WmInputLangChange(Message& m);
    private void WmInputLangChangeRequest(Message& m);
    private void WmImeChar(Message& m);
    private void WmImeEndComposition(Message& m);
    private void WmImeNotify(Message& m);
    internal void WmImeSetFocus();
    private void WmImeStartComposition(Message& m);
    private void WmImeKillFocus();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControl.Interface.GetControlInfo(CONTROLINFO* pCI);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControl.Interface.OnMnemonic(MSG* pMsg);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControl.Interface.OnAmbientPropertyChange(int dispID);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControl.Interface.FreezeEvents(BOOL bFreeze);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.TranslateAccelerator(MSG* lpmsg);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.OnFrameWindowActivate(BOOL fActivate);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.OnDocWindowActivate(BOOL fActivate);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.ResizeBorder(RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fFrameWindow);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceActiveObject.Interface.EnableModeless(BOOL fEnable);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceObject.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceObject.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceObject.Interface.InPlaceDeactivate();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceObject.Interface.UIDeactivate();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceObject.Interface.SetObjectRects(RECT* lprcPosRect, RECT* lprcClipRect);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceObject.Interface.ReactivateAndUndo();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.SetClientSite(IOleClientSite* pClientSite);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetClientSite(IOleClientSite** ppClientSite);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.SetHostNames(PCWSTR szContainerApp, PCWSTR szContainerObj);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.Close(UInt32 dwSaveOption);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.SetMoniker(UInt32 dwWhichMoniker, IMoniker* pmk);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetMoniker(UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker** ppmk);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.InitFromData(IDataObject* pDataObject, BOOL fCreation, UInt32 dwReserved);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetClipboardData(UInt32 dwReserved, IDataObject** ppDataObject);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.DoVerb(int iVerb, MSG* lpmsg, IOleClientSite* pActiveSite, int lindex, HWND hwndParent, RECT* lprcPosRect);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.EnumVerbs(IEnumOLEVERB** ppEnumOleVerb);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.Update();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.IsUpToDate();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetUserClassID(Guid* pClsid);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetUserType(UInt32 dwFormOfType, PWSTR* pszUserType);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.SetExtent(DVASPECT dwDrawAspect, SIZE* psizel);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetExtent(DVASPECT dwDrawAspect, SIZE* psizel);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.Advise(IAdviseSink* pAdvSink, UInt32* pdwConnection);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.Unadvise(UInt32 dwConnection);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.EnumAdvise(IEnumSTATDATA** ppenumAdvise);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.GetMiscStatus(DVASPECT dwAspect, OLEMISC* pdwStatus);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleObject.Interface.SetColorScheme(LOGPALETTE* pLogpal);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IPersist.Interface.GetClassID(Guid* pClassID);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IPersistPropertyBag.Interface.InitNew();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IPersistPropertyBag.Interface.GetClassID(Guid* pClassID);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IPersistPropertyBag.Interface.Load(IPropertyBag* pPropBag, IErrorLog* pErrorLog);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IPersistPropertyBag.Interface.Save(IPropertyBag* pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.GetClassID(Guid* pClassID);
    private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.IsDirty();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.InitNew(IStorage* pStg);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.Load(IStorage* pStg);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.Save(IStorage* pStgSave, BOOL fSameAsLoad);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.SaveCompleted(IStorage* pStgNew);
    private sealed virtual override HRESULT Windows.Win32.System.Com.StructuredStorage.IPersistStorage.Interface.HandsOffStorage();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IPersistStreamInit.Interface.GetClassID(Guid* pClassID);
    private sealed virtual override HRESULT Windows.Win32.System.Com.IPersistStreamInit.Interface.IsDirty();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IPersistStreamInit.Interface.Load(IStream* pStm);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IPersistStreamInit.Interface.Save(IStream* pStm, BOOL fClearDirty);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IPersistStreamInit.Interface.GetSizeMax(UInt64* pCbSize);
    private sealed virtual override HRESULT Windows.Win32.System.Com.IPersistStreamInit.Interface.InitNew();
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IQuickActivate.Interface.QuickActivate(QACONTAINER* pQaContainer, QACONTROL* pQaControl);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IQuickActivate.Interface.SetContentExtent(SIZE* pSizel);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IQuickActivate.Interface.GetContentExtent(SIZE* pSizel);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject.Interface.Draw(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, RECTL* lprcBounds, RECTL* lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject.Interface.GetColorSet(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject.Interface.Freeze(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32* pdwFreeze);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject.Interface.Unfreeze(UInt32 dwFreeze);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject.Interface.SetAdvise(DVASPECT aspects, UInt32 advf, IAdviseSink* pAdvSink);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject.Interface.GetAdvise(UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.Draw(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, RECTL* lprcBounds, RECTL* lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.GetColorSet(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, LOGPALETTE** ppColorSet);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.Freeze(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32* pdwFreeze);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.Unfreeze(UInt32 dwFreeze);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.SetAdvise(DVASPECT aspects, UInt32 advf, IAdviseSink* pAdvSink);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.GetAdvise(UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Ole.IViewObject2.Interface.GetExtent(DVASPECT dwDrawAspect, int lindex, DVTARGETDEVICE* ptd, SIZE* lpsizel);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static ControlCollection <GetNextControl>g__GetControlCollection|845_0(Control control);
    [CompilerGeneratedAttribute]
internal static void <GetOwnNeighboringToolsRectangles>g__AddIfCreated|1196_0(Control control, <>c__DisplayClass1196_0& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <AreCommonNavigationalKeysDown>g__IsKeyDown|1202_0(Keys key, ReadOnlySpan`1<byte> stateArray);
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
[EditorAttribute("System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Windows.Forms.Design.ControlBindingsConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ControlBindingsCollection : BindingsCollection {
    private IBindableComponent _control;
    [CompilerGeneratedAttribute]
private DataSourceUpdateMode <DefaultDataSourceUpdateMode>k__BackingField;
    public IBindableComponent BindableComponent { get; }
    public Control Control { get; }
    public Binding Item { get; }
    public DataSourceUpdateMode DefaultDataSourceUpdateMode { get; public set; }
    public ControlBindingsCollection(IBindableComponent control);
    public IBindableComponent get_BindableComponent();
    public Control get_Control();
    public Binding get_Item(string propertyName);
    public void Add(Binding binding);
    public Binding Add(string propertyName, object dataSource, string dataMember);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString, IFormatProvider formatInfo);
    protected virtual void AddCore(Binding dataBinding);
    internal void CheckDuplicates(Binding binding);
    public void Clear();
    protected virtual void ClearCore();
    [CompilerGeneratedAttribute]
public DataSourceUpdateMode get_DefaultDataSourceUpdateMode();
    [CompilerGeneratedAttribute]
public void set_DefaultDataSourceUpdateMode(DataSourceUpdateMode value);
    public void Remove(Binding binding);
    public void RemoveAt(int index);
    protected virtual void RemoveCore(Binding dataBinding);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ControlEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Control <Control>k__BackingField;
    public Control Control { get; }
    public ControlEventArgs(Control control);
    [CompilerGeneratedAttribute]
public Control get_Control();
}
public class System.Windows.Forms.ControlEventHandler : MulticastDelegate {
    public ControlEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ControlEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ControlEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ControlPaint : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Bitmap t_checkImage;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Pen t_focusPen;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Pen t_focusPenInvert;
    [ThreadStaticAttribute]
private static Color t_focusPenColor;
    [ThreadStaticAttribute]
private static bool t_hcFocusPen;
    [NullableAttribute("2")]
private static Pen s_grabPenPrimary;
    [NullableAttribute("2")]
private static Pen s_grabPenSecondary;
    [NullableAttribute("2")]
private static Brush s_grabBrushPrimary;
    [NullableAttribute("2")]
private static Brush s_grabBrushSecondary;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Brush t_frameBrushActive;
    private static Color s_frameColorActive;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Brush t_frameBrushSelected;
    private static Color s_frameColorSelected;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Brush t_gridBrush;
    private static Size s_gridSize;
    private static bool s_gridInvert;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static ImageAttributes t_disabledImageAttr;
    private static ContentAlignment AnyRight;
    private static ContentAlignment AnyBottom;
    private static ContentAlignment AnyCenter;
    private static ContentAlignment AnyMiddle;
    private static int MaximumLuminosityDifference;
    public static Color ContrastControlDark { get; }
    internal static Rectangle CalculateBackgroundImageRectangle(Rectangle bounds, Image backgroundImage, ImageLayout imageLayout);
    public static Color get_ContrastControlDark();
    public static IntPtr CreateHBitmap16Bit(Bitmap bitmap, Color background);
    public static IntPtr CreateHBitmapTransparencyMask(Bitmap bitmap);
    public static IntPtr CreateHBitmapColorMask(Bitmap bitmap, IntPtr monochromeMask);
    internal static HBRUSH CreateHalftoneHBRUSH();
    private static DashStyle BorderStyleToDashStyle(ButtonBorderStyle borderStyle);
    public static Color Dark(Color baseColor, float percOfDarkDark);
    public static Color Dark(Color baseColor);
    public static Color DarkDark(Color baseColor);
    internal static bool IsDark(Color color);
    internal static bool IsDarker(Color c1, Color c2);
    internal static void PrintBorder(Graphics graphics, Rectangle bounds, BorderStyle style, Border3DStyle b3dStyle);
    internal static void DrawBackgroundImage(Graphics g, Image backgroundImage, Color backColor, ImageLayout backgroundImageLayout, Rectangle bounds, Rectangle clipRect, Point scrollOffset, RightToLeft rightToLeft);
    public static void DrawBorder(Graphics graphics, Rectangle bounds, Color color, ButtonBorderStyle style);
    public static void DrawBorder(Graphics graphics, Rectangle bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle);
    internal static void DrawBorder(IDeviceContext deviceContext, Rectangle bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle);
    public static void DrawBorder3D(Graphics graphics, Rectangle rectangle);
    public static void DrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style);
    public static void DrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides);
    public static void DrawBorder3D(Graphics graphics, int x, int y, int width, int height);
    public static void DrawBorder3D(Graphics graphics, int x, int y, int width, int height, Border3DStyle style);
    public static void DrawBorder3D(Graphics graphics, int x, int y, int width, int height, Border3DStyle style, Border3DSide sides);
    private static void DrawBorderComplex(Graphics graphics, Rectangle bounds, Color color, ButtonBorderStyle style);
    internal static void DrawBorderSimple(IDeviceContext context, Rectangle bounds, Color color, ButtonBorderStyle style);
    public static void DrawButton(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawButton(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawCaptionButton(Graphics graphics, Rectangle rectangle, CaptionButton button, ButtonState state);
    public static void DrawCaptionButton(Graphics graphics, int x, int y, int width, int height, CaptionButton button, ButtonState state);
    public static void DrawCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawCheckBox(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawComboButton(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawComboButton(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawContainerGrabHandle(Graphics graphics, Rectangle bounds);
    private static void DrawFlatCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state);
    private static void DrawFlatCheckBox(Graphics graphics, Rectangle rectangle, Color foreground, Brush background, ButtonState state);
    public static void DrawFocusRectangle(Graphics graphics, Rectangle rectangle);
    public static void DrawFocusRectangle(Graphics graphics, Rectangle rectangle, Color foreColor, Color backColor);
    internal static void DrawHighContrastFocusRectangle(Graphics graphics, Rectangle rectangle, Color color);
    internal static void DrawBlackWhiteFocusRectangle(Graphics graphics, Rectangle rectangle, Color color);
    private static void DrawFocusRectangle(Graphics graphics, Rectangle rectangle, Color color, bool highContrast, bool blackAndWhite);
    private static void DrawFrameControl(Graphics graphics, int x, int y, int width, int height, DFC_TYPE kind, DFCS_STATE state, Color foreColor, Color backColor);
    public static void DrawGrabHandle(Graphics graphics, Rectangle rectangle, bool primary, bool enabled);
    public static void DrawGrid(Graphics graphics, Rectangle area, Size pixelsBetweenDots, Color backColor);
    internal static void DrawImageColorized(Graphics graphics, Image image, Rectangle destination, Color replaceBlack);
    [NullableContextAttribute("2")]
internal static bool IsImageTransparent(Image backgroundImage);
    internal static void DrawImageReplaceColor(Graphics g, Image image, Rectangle dest, Color oldColor, Color newColor);
    public static void DrawImageDisabled(Graphics graphics, Image image, int x, int y, Color background);
    internal static void DrawImageDisabled(Graphics graphics, Image image, Rectangle imageBounds, bool unscaledImage);
    internal static void EnforceHeaderCellDividerContrast(Graphics graphics, Rectangle bounds);
    public static void DrawLockedFrame(Graphics graphics, Rectangle rectangle, bool primary);
    public static void DrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph);
    public static void DrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph, Color foreColor, Color backColor);
    public static void DrawMenuGlyph(Graphics graphics, int x, int y, int width, int height, MenuGlyph glyph);
    public static void DrawMenuGlyph(Graphics graphics, int x, int y, int width, int height, MenuGlyph glyph, Color foreColor, Color backColor);
    public static void DrawMixedCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawMixedCheckBox(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawRadioButton(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawRadioButton(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style);
    public static void DrawReversibleLine(Point start, Point end, Color backColor);
    public static void DrawScrollButton(Graphics graphics, Rectangle rectangle, ScrollButton button, ButtonState state);
    public static void DrawScrollButton(Graphics graphics, int x, int y, int width, int height, ScrollButton button, ButtonState state);
    public static void DrawSelectionFrame(Graphics graphics, bool active, Rectangle outsideRect, Rectangle insideRect, Color backColor);
    public static void DrawSizeGrip(Graphics graphics, Color backColor, Rectangle bounds);
    public static void DrawSizeGrip(Graphics graphics, Color backColor, int x, int y, int width, int height);
    internal static void DrawSizeGrip(IDeviceContext deviceContext, Color backColor, int x, int y, int width, int height);
    public static void DrawStringDisabled(Graphics graphics, string s, Font font, Color color, RectangleF layoutRectangle, StringFormat format);
    public static void DrawStringDisabled(IDeviceContext dc, string s, Font font, Color color, Rectangle layoutRectangle, TextFormatFlags format);
    internal static void DrawStringDisabled(HDC dc, string s, Font font, Color color, Rectangle layoutRectangle, TextFormatFlags format, FONT_QUALITY quality);
    public static void DrawVisualStyleBorder(Graphics graphics, Rectangle bounds);
    public static void FillReversibleRectangle(Rectangle rectangle, Color backColor);
    internal static Font FontInPoints(Font font);
    private static int GetColorRop(Color color, int darkROP, int lightROP);
    private static Brush GetActiveBrush(Color backColor);
    private static Pen GetFocusPen(Color baseColor, bool odds, bool highContrast, bool blackAndWhite);
    private static Brush GetSelectedBrush(Color backColor);
    private static float InfinityToOne(float value);
    public static Color Light(Color baseColor, float percOfLightLight);
    public static Color Light(Color baseColor);
    public static Color LightLight(Color baseColor);
    internal static ColorMatrix MultiplyColorMatrix(Single[][] matrix1, Single[][] matrix2);
    internal static void PaintTableControlBorder(TableLayoutPanelCellBorderStyle borderStyle, Graphics g, Rectangle bound);
    internal static void PaintTableCellBorder(TableLayoutPanelCellBorderStyle borderStyle, Graphics g, Rectangle bound);
    internal static void InvertForeColorIfNeeded(Bitmap bitmap, Color backgroundColor);
    internal static Bitmap CreateBitmapWithInvertedForeColor(Bitmap bitmap, Color backgroundColor);
    private static ColorMatrix RemapBlackAndWhitePreserveTransparentMatrix(Color replaceBlack, Color replaceWhite);
    internal static TextFormatFlags ConvertAlignmentToTextFormat(ContentAlignment alignment);
    internal static StringFormat CreateStringFormat(Control control, ContentAlignment textAlign, bool showEllipsis, bool useMnemonic);
    internal static TextFormatFlags CreateTextFormatFlags(Control control, ContentAlignment alignment, bool showEllipsis, bool useMnemonic);
}
[FlagsAttribute]
public enum System.Windows.Forms.ControlStyles : Enum {
    public int value__;
    public static ControlStyles ContainerControl;
    public static ControlStyles UserPaint;
    public static ControlStyles Opaque;
    public static ControlStyles ResizeRedraw;
    public static ControlStyles FixedWidth;
    public static ControlStyles FixedHeight;
    public static ControlStyles StandardClick;
    public static ControlStyles Selectable;
    public static ControlStyles UserMouse;
    public static ControlStyles SupportsTransparentBackColor;
    public static ControlStyles StandardDoubleClick;
    public static ControlStyles AllPaintingInWmPaint;
    public static ControlStyles CacheText;
    public static ControlStyles EnableNotifyMessage;
    [EditorBrowsableAttribute("1")]
public static ControlStyles DoubleBuffer;
    public static ControlStyles OptimizedDoubleBuffer;
    public static ControlStyles UseTextForAccessibility;
}
public enum System.Windows.Forms.ControlUpdateMode : Enum {
    public int value__;
    public static ControlUpdateMode OnPropertyChanged;
    public static ControlUpdateMode Never;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ConvertEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DesiredType>k__BackingField;
    public object Value { get; public set; }
    public Type DesiredType { get; }
    public ConvertEventArgs(object value, Type desiredType);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public Type get_DesiredType();
}
public class System.Windows.Forms.ConvertEventHandler : MulticastDelegate {
    public ConvertEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ConvertEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConvertEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.CreateParams : object {
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClassStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Param>k__BackingField;
    public string ClassName { get; public set; }
    public string Caption { get; public set; }
    public int Style { get; public set; }
    public int ExStyle { get; public set; }
    public int ClassStyle { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public IntPtr Parent { get; public set; }
    public object Param { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public int get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(int value);
    [CompilerGeneratedAttribute]
public int get_ExStyle();
    [CompilerGeneratedAttribute]
public void set_ExStyle(int value);
    [CompilerGeneratedAttribute]
public int get_ClassStyle();
    [CompilerGeneratedAttribute]
public void set_ClassStyle(int value);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public IntPtr get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(IntPtr value);
    [CompilerGeneratedAttribute]
public object get_Param();
    [CompilerGeneratedAttribute]
public void set_Param(object value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.CurrencyManager : BindingManagerBase {
    private object dataSource;
    private IList list;
    private bool bound;
    private bool shouldBind;
    protected int listposition;
    private int lastGoodKnownRow;
    private bool pullingData;
    private bool inChangeRecordState;
    private bool suspendPushDataInCurrentChanged;
    private ItemChangedEventHandler onItemChanged;
    private ListChangedEventHandler onListChanged;
    private ItemChangedEventArgs resetEvent;
    private EventHandler onMetaDataChangedHandler;
    protected Type finalType;
    internal bool AllowAdd { get; }
    internal bool AllowEdit { get; }
    internal bool AllowRemove { get; }
    public int Count { get; }
    public object Current { get; }
    internal Type BindType { get; }
    internal object DataSource { get; }
    internal bool IsBinding { get; }
    internal bool ShouldBind { get; }
    public IList List { get; }
    public int Position { get; public set; }
    internal object Item { get; internal set; }
    internal CurrencyManager(object dataSource);
    public void add_ItemChanged(ItemChangedEventHandler value);
    public void remove_ItemChanged(ItemChangedEventHandler value);
    public void add_ListChanged(ListChangedEventHandler value);
    public void remove_ListChanged(ListChangedEventHandler value);
    internal bool get_AllowAdd();
    internal bool get_AllowEdit();
    internal bool get_AllowRemove();
    public virtual int get_Count();
    public virtual object get_Current();
    internal virtual Type get_BindType();
    internal virtual object get_DataSource();
    private protected virtual void SetDataSource(object dataSource);
    internal virtual bool get_IsBinding();
    internal bool get_ShouldBind();
    public IList get_List();
    public virtual int get_Position();
    public virtual void set_Position(int value);
    internal object get_Item(int index);
    internal void set_Item(int index, object value);
    public virtual void AddNew();
    public virtual void CancelCurrentEdit();
    private void ChangeRecordState(int newPosition, bool validating, bool endCurrentEdit, bool firePositionChange, bool pullData);
    protected void CheckEmpty();
    private bool CurrencyManager_PushData();
    private bool CurrencyManager_PullData();
    public virtual void RemoveAt(int index);
    public virtual void EndCurrentEdit();
    private void FindGoodRow();
    internal void SetSort(PropertyDescriptor property, ListSortDirection sortDirection);
    internal PropertyDescriptor GetSortProperty();
    internal ListSortDirection GetSortDirection();
    internal int Find(PropertyDescriptor property, object key, bool keepIndex);
    internal virtual string GetListName();
    protected internal virtual string GetListName(ArrayList listAccessors);
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties();
    private void List_ListChanged(object sender, ListChangedEventArgs e);
    public void add_MetaDataChanged(EventHandler value);
    public void remove_MetaDataChanged(EventHandler value);
    protected internal virtual void OnCurrentChanged(EventArgs e);
    protected internal virtual void OnCurrentItemChanged(EventArgs e);
    protected virtual void OnItemChanged(ItemChangedEventArgs e);
    private void OnListChanged(ListChangedEventArgs e);
    protected internal void OnMetaDataChanged(EventArgs e);
    protected virtual void OnPositionChanged(EventArgs e);
    public void Refresh();
    internal void Release();
    public virtual void ResumeBinding();
    public virtual void SuspendBinding();
    internal void UnwireEvents(IList list);
    protected virtual void UpdateIsBinding();
    private void UpdateIsBinding(bool raiseItemChangedEvent);
    private void UpdateLastGoodKnownRow(ListChangedEventArgs e);
    internal void WireEvents(IList list);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.CursorConverter")]
[EditorAttribute("System.Drawing.Design.CursorEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Windows.Forms.Cursor : object {
    private static Size s_cursorSize;
    private Byte[] _cursorData;
    private HCURSOR _handle;
    private Flags _flags;
    private PCWSTR _resourceId;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    private bool OwnHandle { get; }
    private bool IsWellKnown { get; }
    public static Rectangle Clip { get; public set; }
    public static Cursor Current { get; public set; }
    public IntPtr Handle { get; }
    public Point HotSpot { get; }
    public static Point Position { get; public set; }
    public Size Size { get; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    private HICON IHandle<Windows.Win32.UI.WindowsAndMessaging.HICON>.Handle { get; }
    private HANDLE IHandle<Windows.Win32.Foundation.HANDLE>.Handle { get; }
    internal Cursor(PCWSTR nResourceId);
    public Cursor(IntPtr handle);
    [NullableContextAttribute("1")]
public Cursor(string fileName);
    [NullableContextAttribute("1")]
public Cursor(Type type, string resource);
    [NullableContextAttribute("1")]
public Cursor(Stream stream);
    private static Cursor();
    private bool get_OwnHandle();
    private bool get_IsWellKnown();
    public static Rectangle get_Clip();
    public static void set_Clip(Rectangle value);
    public static Cursor get_Current();
    public static void set_Current(Cursor value);
    public IntPtr get_Handle();
    public Point get_HotSpot();
    public static Point get_Position();
    public static void set_Position(Point value);
    public Size get_Size();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    private sealed virtual override HICON IHandle<Windows.Win32.UI.WindowsAndMessaging.HICON>.get_Handle();
    private sealed virtual override HANDLE IHandle<Windows.Win32.Foundation.HANDLE>.get_Handle();
    public IntPtr CopyHandle();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [NullableContextAttribute("1")]
private void DrawImageCore(Graphics graphics, Rectangle imageRect, Rectangle targetRect, bool stretch);
    [NullableContextAttribute("1")]
public void Draw(Graphics g, Rectangle targetRect);
    [NullableContextAttribute("1")]
public void DrawStretched(Graphics g, Rectangle targetRect);
    protected virtual override void Finalize();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    public static void Hide();
    private Size GetIconSize(HICON iconHandle);
    [NullableContextAttribute("1")]
private void LoadPicture(Interface stream, string paramName);
    [NullableContextAttribute("1")]
internal Byte[] GetData();
    internal bool IsValid();
    public static void Show();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(Cursor left, Cursor right);
    public static bool op_Inequality(Cursor left, Cursor right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.CursorConverter : TypeConverter {
    private StandardValuesCollection _values;
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
private static PropertyInfo[] GetProperties();
    [NullableContextAttribute("1")]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.Cursors : object {
    [NullableAttribute("2")]
private static Cursor s_appStarting;
    [NullableAttribute("2")]
private static Cursor s_arrow;
    [NullableAttribute("2")]
private static Cursor s_cross;
    [NullableAttribute("2")]
private static Cursor s_defaultCursor;
    [NullableAttribute("2")]
private static Cursor s_iBeam;
    [NullableAttribute("2")]
private static Cursor s_no;
    [NullableAttribute("2")]
private static Cursor s_sizeAll;
    [NullableAttribute("2")]
private static Cursor s_sizeNESW;
    [NullableAttribute("2")]
private static Cursor s_sizeNS;
    [NullableAttribute("2")]
private static Cursor s_sizeNWSE;
    [NullableAttribute("2")]
private static Cursor s_sizeWE;
    [NullableAttribute("2")]
private static Cursor s_upArrow;
    [NullableAttribute("2")]
private static Cursor s_wait;
    [NullableAttribute("2")]
private static Cursor s_help;
    [NullableAttribute("2")]
private static Cursor s_hSplit;
    [NullableAttribute("2")]
private static Cursor s_vSplit;
    [NullableAttribute("2")]
private static Cursor s_noMove2D;
    [NullableAttribute("2")]
private static Cursor s_noMoveHoriz;
    [NullableAttribute("2")]
private static Cursor s_noMoveVert;
    [NullableAttribute("2")]
private static Cursor s_panEast;
    [NullableAttribute("2")]
private static Cursor s_panNE;
    [NullableAttribute("2")]
private static Cursor s_panNorth;
    [NullableAttribute("2")]
private static Cursor s_panNW;
    [NullableAttribute("2")]
private static Cursor s_panSE;
    [NullableAttribute("2")]
private static Cursor s_panSouth;
    [NullableAttribute("2")]
private static Cursor s_panSW;
    [NullableAttribute("2")]
private static Cursor s_panWest;
    [NullableAttribute("2")]
private static Cursor s_hand;
    public static Cursor AppStarting { get; }
    public static Cursor Arrow { get; }
    public static Cursor Cross { get; }
    public static Cursor Default { get; }
    public static Cursor IBeam { get; }
    public static Cursor No { get; }
    public static Cursor SizeAll { get; }
    public static Cursor SizeNESW { get; }
    public static Cursor SizeNS { get; }
    public static Cursor SizeNWSE { get; }
    public static Cursor SizeWE { get; }
    public static Cursor UpArrow { get; }
    public static Cursor WaitCursor { get; }
    public static Cursor Help { get; }
    public static Cursor Hand { get; }
    public static Cursor HSplit { get; }
    public static Cursor VSplit { get; }
    public static Cursor NoMove2D { get; }
    public static Cursor NoMoveHoriz { get; }
    public static Cursor NoMoveVert { get; }
    public static Cursor PanEast { get; }
    public static Cursor PanNE { get; }
    public static Cursor PanNorth { get; }
    public static Cursor PanNW { get; }
    public static Cursor PanSE { get; }
    public static Cursor PanSouth { get; }
    public static Cursor PanSW { get; }
    public static Cursor PanWest { get; }
    public static Cursor get_AppStarting();
    public static Cursor get_Arrow();
    public static Cursor get_Cross();
    public static Cursor get_Default();
    public static Cursor get_IBeam();
    public static Cursor get_No();
    public static Cursor get_SizeAll();
    public static Cursor get_SizeNESW();
    public static Cursor get_SizeNS();
    public static Cursor get_SizeNWSE();
    public static Cursor get_SizeWE();
    public static Cursor get_UpArrow();
    public static Cursor get_WaitCursor();
    public static Cursor get_Help();
    public static Cursor get_Hand();
    public static Cursor get_HSplit();
    public static Cursor get_VSplit();
    public static Cursor get_NoMove2D();
    public static Cursor get_NoMoveHoriz();
    public static Cursor get_NoMoveVert();
    public static Cursor get_PanEast();
    public static Cursor get_PanNE();
    public static Cursor get_PanNorth();
    public static Cursor get_PanNW();
    public static Cursor get_PanSE();
    public static Cursor get_PanSouth();
    public static Cursor get_PanSW();
    public static Cursor get_PanWest();
    private static Cursor GetCursor(Cursor& cursor, string resource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.DataFormats : object {
    internal static string TextConstant;
    internal static string UnicodeTextConstant;
    internal static string DibConstant;
    internal static string BitmapConstant;
    internal static string EmfConstant;
    internal static string WmfConstant;
    internal static string SymbolicLinkConstant;
    internal static string DifConstant;
    internal static string TiffConstant;
    internal static string OemTextConstant;
    internal static string PaletteConstant;
    internal static string PenDataConstant;
    internal static string RiffConstant;
    internal static string WaveAudioConstant;
    internal static string FileDropConstant;
    internal static string LocaleConstant;
    internal static string HtmlConstant;
    internal static string RtfConstant;
    internal static string CsvConstant;
    internal static string StringConstant;
    internal static string SerializableConstant;
    public static string Text;
    public static string UnicodeText;
    public static string Dib;
    public static string Bitmap;
    public static string EnhancedMetafile;
    public static string MetafilePict;
    public static string SymbolicLink;
    public static string Dif;
    public static string Tiff;
    public static string OemText;
    public static string Palette;
    public static string PenData;
    public static string Riff;
    public static string WaveAudio;
    public static string FileDrop;
    public static string Locale;
    public static string Html;
    public static string Rtf;
    public static string CommaSeparatedValue;
    public static string StringFormat;
    public static string Serializable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Format[] s_formatList;
    private static int s_formatCount;
    private static object s_internalSyncObject;
    private static DataFormats();
    public static Format GetFormat(string format);
    public static Format GetFormat(int id);
    [MemberNotNullAttribute("s_formatList")]
private static void EnsureFormatSpace(int size);
    [MemberNotNullAttribute("s_formatList")]
private static void EnsurePredefined();
}
[DefaultMemberAttribute("Item")]
[DesignerAttribute("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("CellContentClick")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
[DockingAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.ComponentEditor")]
[SRDescriptionAttribute("DescriptionDataGridView")]
public class System.Windows.Forms.DataGridView : Control {
    private static object s_allowUserToAddRowsChangedEvent;
    private static object s_allowUserToDeleteRowsChangedEvent;
    private static object s_allowUserToOrderColumnsChangedEvent;
    private static object s_allowUserToResizeColumnsChangedEvent;
    private static object s_allowUserToResizeRowsChangedEvent;
    private static object s_alternatingRowsDefaultCellStyleChangedEvent;
    private static object s_autoGenerateColumnsChangedEvent;
    private static object s_autosizeColumnModeChangedEvent;
    private static object s_autosizeColumnsModeChangedEvent;
    private static object s_autosizeRowsModeChangedEvent;
    private static object s_backgroundColorChangedEvent;
    private static object s_borderStyleChangedEvent;
    private static object s_cancelRowEditEvent;
    private static object s_cellBeginEditEvent;
    private static object s_cellBorderStyleChangedEvent;
    private static object s_cellClickEvent;
    private static object s_cellContentClickEvent;
    private static object s_cellContentDoubleClickEvent;
    private static object s_cellContextMenuStripChangedEvent;
    private static object s_cellContextMenuStripNeededEvent;
    private static object s_cellDoubleClickEvent;
    private static object s_cellEndEditEvent;
    private static object s_cellEnterEvent;
    private static object s_cellErrorTextChangedEvent;
    private static object s_cellErrorTextNeededEvent;
    private static object s_cellFormattingEvent;
    private static object s_cellLeaveEvent;
    private static object s_cellMouseClickEvent;
    private static object s_cellMouseDoubleClickEvent;
    private static object s_cellMouseDownEvent;
    private static object s_cellMouseEnterEvent;
    private static object s_cellMouseLeaveEvent;
    private static object s_cellMouseMoveEvent;
    private static object s_cellMouseUpEvent;
    private static object s_cellPaintingEvent;
    private static object s_cellParsingEvent;
    private static object s_cellStateChangedEvent;
    private static object s_cellStyleChangedEvent;
    private static object s_cellStyleContentChangedEvent;
    private static object s_cellTooltipTextChangedEvent;
    private static object s_cellTooltipTextNeededEvent;
    private static object s_cellValidatingEvent;
    private static object s_cellValidatedEvent;
    private static object s_cellValueChangedEvent;
    private static object s_cellValueNeededEvent;
    private static object s_cellValuePushedEvent;
    private static object s_columnAddedEvent;
    private static object s_columnContextMenuStripChangedEvent;
    private static object s_columnDataPropertyNameChangedEvent;
    private static object s_columnDefaultCellStyleChangedEvent;
    private static object s_columnDisplayIndexChangedEvent;
    private static object s_columnDividerWidthChangedEvent;
    private static object s_columnHeaderCellChangedEvent;
    private static object s_columnDividerDoubleClickEvent;
    private static object s_columnHeaderMouseClickEvent;
    private static object s_columnHeaderMouseDoubleClickEvent;
    private static object s_columnHeadersBorderStyleChangedEvent;
    private static object s_columnHeadersDefaultCellStyleChangedEvent;
    private static object s_columnHeadersHeightChangedEvent;
    private static object s_columnHeadersHeightSizeModeChangedEvent;
    private static object s_columnMinimumWidthChangedEvent;
    private static object s_columnNameChangedEvent;
    private static object s_columnRemovedEvent;
    private static object s_columnSortModeChangedEvent;
    private static object s_columnStateChangedEvent;
    private static object s_columnTooltipTextChangedEvent;
    private static object s_columnWidthChangedEvent;
    private static object s_currentCellChangedEvent;
    private static object s_currentCellDirtyStateChangedEvent;
    private static object s_dataBindingCompleteEvent;
    private static object s_dataErrorEvent;
    private static object s_dataMemberChangedEvent;
    private static object s_dataSourceChangedEvent;
    private static object s_defaultCellStyleChangedEvent;
    private static object s_defaultValuesNeededEvent;
    private static object s_editingControlShowingEvent;
    private static object s_editModeChangedEvent;
    private static object s_gridColorChangedEvent;
    private static object s_multiselectChangedEvent;
    private static object s_newRowNeededEvent;
    private static object s_readOnlyChangedEvent;
    private static object s_rowContextMenuStripChangedEvent;
    private static object s_rowContextMenuStripNeededEvent;
    private static object s_rowDefaultCellStyleChangedEvent;
    private static object s_rowDirtyStateNeededEvent;
    private static object s_rowDividerHeightChangedEvent;
    private static object s_rowEnterEvent;
    private static object s_rowErrorTextChangedEvent;
    private static object s_rowErrorTextNeededEvent;
    private static object s_rowHeaderCellChangedEvent;
    private static object s_rowDividerDoubleClickEvent;
    private static object s_rowHeaderMouseClickEvent;
    private static object s_rowHeaderMouseDoubleClickEvent;
    private static object s_rowHeadersBorderStyleChangedEvent;
    private static object s_rowHeadersDefaultCellStyleChangedEvent;
    private static object s_rowHeadersWidthChangedEvent;
    private static object s_rowHeadersWidthSizeModeChangedEvent;
    private static object s_rowHeightChangedEvent;
    private static object s_rowHeightInfoNeededEvent;
    private static object s_rowHeightInfoPushedEvent;
    private static object s_rowLeaveEvent;
    private static object s_rowMinimumHeightChangeEvent;
    private static object s_rowPostPaintEvent;
    private static object s_rowPrePaintEvent;
    private static object s_rowsAddedEvent;
    private static object s_rowsDefaultCellStyleChangedEvent;
    private static object s_rowsRemovedEvent;
    private static object s_rowStateChangedEvent;
    private static object s_rowUnsharedEvent;
    private static object s_rowValidatedEvent;
    private static object s_rowValidatingEvent;
    private static object s_scrollEvent;
    private static object s_selectionChangedEvent;
    private static object s_sortCompareEvent;
    private static object s_sortedEvent;
    private static object s_userAddedRowEvent;
    private static object s_userDeletedRowEvent;
    private static object s_userDeletingRowEvent;
    private static int State1_AllowUserToAddRows;
    private static int State1_AllowUserToDeleteRows;
    private static int State1_AllowUserToOrderColumns;
    private static int State1_ColumnHeadersVisible;
    private static int State1_RowHeadersVisible;
    private static int State1_ForwardCharMessage;
    private static int State1_LeavingWithTabKey;
    private static int State1_MultiSelect;
    private static int State1_IgnoringEditingChanges;
    private static int State1_AmbientForeColor;
    private static int State1_ScrolledSinceMouseDown;
    private static int State1_EditingControlHidden;
    private static int State1_StandardTab;
    private static int State1_EditingControlChanging;
    private static int State1_CurrentCellInEditMode;
    private static int State1_VirtualMode;
    private static int State1_EditedCellChanged;
    private static int State1_EditedRowChanged;
    private static int State1_NewRowEdited;
    private static int State1_ReadOnly;
    private static int State1_NewRowCreatedByEditing;
    private static int State1_TemporarilyResetCurrentCell;
    private static int State1_AutoGenerateColumns;
    private static int State1_CustomCursorSet;
    private static int State1_AmbientFont;
    private static int State1_AmbientColumnHeadersFont;
    private static int State1_AmbientRowHeadersFont;
    private static int State1_IsAutoSized;
    private static int State2_ShowEditingIcon;
    private static int State2_AllowUserToResizeColumns;
    private static int State2_AllowUserToResizeRows;
    private static int State2_MouseOverRemovedEditingCtrl;
    private static int State2_MouseOverRemovedEditingPanel;
    private static int State2_MouseEnterExpected;
    private static int State2_EnableHeadersVisualStyles;
    private static int State2_ShowCellErrors;
    private static int State2_ShowCellToolTips;
    private static int State2_ShowRowErrors;
    private static int State2_ShowColumnRelocationInsertion;
    private static int State2_RightToLeftMode;
    private static int State2_RightToLeftValid;
    private static int State2_CurrentCellWantsInputKey;
    private static int State2_StopRaisingVerticalScroll;
    private static int State2_StopRaisingHorizontalScroll;
    private static int State2_ReplacedCellSelected;
    private static int State2_ReplacedCellReadOnly;
    private static int State2_RaiseSelectionChanged;
    private static int State2_Initializing;
    private static int State2_AutoSizedWithoutHandle;
    private static int State2_IgnoreCursorChange;
    private static int State2_RowsCollectionClearedInSetCell;
    private static int State2_NextMouseUpIsDouble;
    private static int State2_InBindingContextChanged;
    private static int State2_AllowHorizontalScrollbar;
    private static int State2_UsedFillWeightsDirty;
    private static int State2_MessageFromEditingCtrls;
    private static int State2_CellMouseDownInContentBounds;
    private static int State2_DiscardEditingControl;
    private static int OperationTrackColResize;
    private static int OperationTrackRowResize;
    private static int OperationTrackColSelect;
    private static int OperationTrackRowSelect;
    private static int OperationTrackCellSelect;
    private static int OperationTrackColRelocation;
    private static int OperationInSort;
    private static int OperationTrackColHeadersResize;
    private static int OperationTrackRowHeadersResize;
    private static int OperationTrackMouseMoves;
    private static int OperationInRefreshColumns;
    private static int OperationInDisplayIndexAdjustments;
    private static int OperationLastEditCtrlClickDoubled;
    private static int OperationInMouseDown;
    private static int OperationInReadOnlyChange;
    private static int OperationInCellValidating;
    private static int OperationInBorderStyleChange;
    private static int OperationInCurrentCellChange;
    private static int OperationInAdjustFillingColumns;
    private static int OperationInAdjustFillingColumn;
    private static int OperationInDispose;
    private static int OperationInBeginEdit;
    private static int OperationInEndEdit;
    private static int OperationResizingOperationAboutToStart;
    private static int OperationTrackKeyboardColResize;
    private static int OperationMouseOperationMask;
    private static int OperationKeyboardOperationMask;
    private static Size s_dragSize;
    private static byte ColumnSizingHotZone;
    private static byte RowSizingHotZone;
    private static byte InsertionBarWidth;
    private static byte BulkPaintThreshold;
    private static int FocusRectOffset;
    private BitVector32 _dataGridViewState1;
    private BitVector32 _dataGridViewState2;
    private BitVector32 _dataGridViewOper;
    private static BorderStyle DefaultBorderStyle;
    private static DataGridViewAdvancedCellBorderStyle DefaultAdvancedCellBorderStyle;
    private static DataGridViewAdvancedCellBorderStyle DefaultAdvancedRowHeadersBorderStyle;
    private static DataGridViewAdvancedCellBorderStyle DefaultAdvancedColumnHeadersBorderStyle;
    private static DataGridViewSelectionMode DefaultSelectionMode;
    private static DataGridViewEditMode DefaultEditMode;
    private static DataGridViewAutoSizeRowCriteriaInternal InvalidDataGridViewAutoSizeRowCriteriaInternalMask;
    private Cursor _oldCursor;
    private HScrollBar _horizScrollBar;
    private VScrollBar _vertScrollBar;
    private DataGridViewHeaderCell _topLeftHeaderCell;
    private DataGridViewRow _rowTemplate;
    private DataGridViewRowCollection _dataGridViewRows;
    private DataGridViewColumnCollection _dataGridViewColumns;
    private DataGridViewCellStyle _placeholderCellStyle;
    private StringFormat _placeholderStringFormat;
    private object _uneditedFormattedValue;
    private Control _latestEditingControl;
    private Control _cachedEditingControl;
    private Panel _editingPanel;
    private DataGridViewEditingPanelAccessibleObject _editingPanelAccessibleObject;
    private Point _ptCurrentCell;
    private Point _ptCurrentCellCache;
    private Point _ptAnchorCell;
    private Point _ptMouseDownCell;
    private Point _ptMouseEnteredCell;
    private Point _ptToolTipCell;
    private Point _ptMouseDownGridCoord;
    private DataGridViewSelectionMode _selectionMode;
    private DataGridViewEditMode _editMode;
    private DataGridViewCellLinkedList _individualSelectedCells;
    private DataGridViewCellLinkedList _individualReadOnlyCells;
    private DataGridViewIntLinkedList _selectedBandIndexes;
    private DataGridViewIntLinkedList _selectedBandSnapshotIndexes;
    private DataGridViewCellStyle _defaultCellStyle;
    private DataGridViewCellStyle _columnHeadersDefaultCellStyle;
    private DataGridViewCellStyle _rowHeadersDefaultCellStyle;
    private DataGridViewCellStyle _rowsDefaultCellStyle;
    private DataGridViewCellStyle _alternatingRowsDefaultCellStyle;
    private ScrollBars _scrollBars;
    private LayoutData _layout;
    private Rectangle _normalClientRectangle;
    private List`1<DataGridViewRow> _lstRows;
    private int _availableWidthForFillColumns;
    private BorderStyle _borderStyle;
    private DataGridViewClipboardCopyMode _clipboardCopyMode;
    private static int MinimumRowHeadersWidth;
    private static int MinimumColumnHeadersHeight;
    private static int DefaultRowHeadersWidth;
    private static int MaxHeadersThickness;
    private static int UpperSize;
    private int _cachedRowHeadersWidth;
    private int _rowHeaderWidth;
    private static int DefaultColumnHeadersHeight;
    private int _columnHeadersHeight;
    private int _cachedColumnHeadersHeight;
    private DataGridViewAutoSizeRowsMode _autoSizeRowsMode;
    private DataGridViewAutoSizeColumnsMode _autoSizeColumnsMode;
    private DataGridViewColumnHeadersHeightSizeMode _columnHeadersHeightSizeMode;
    private DataGridViewRowHeadersWidthSizeMode _rowHeadersWidthSizeMode;
    private DataGridViewCellStyleChangedEventArgs _dgvcsce;
    private DataGridViewCellPaintingEventArgs _dgvcpe;
    private DataGridViewCellValueEventArgs _dgvcve;
    private DataGridViewRowHeightInfoNeededEventArgs _dgvrhine;
    private DataGridViewRowPostPaintEventArgs _dgvrpope;
    private DataGridViewRowPrePaintEventArgs _dgvrprpe;
    private int _horizontalOffset;
    private int _cumulativeVerticalWheelDelta;
    private int _cumulativeHorizontalWheelDelta;
    private int _trackColAnchor;
    private int _trackColumn;
    private int _trackColumnEdge;
    private int _trackRowAnchor;
    private int _trackRow;
    private int _trackRowEdge;
    private int _lastHeaderShadow;
    private int _currentColSplitBar;
    private int _lastColSplitBar;
    private int _currentRowSplitBar;
    private int _lastRowSplitBar;
    private int _mouseBarOffset;
    private int _noDimensionChangeCount;
    private int _noSelectionChangeCount;
    private int _noAutoSizeCount;
    private int _inBulkPaintCount;
    private int _inBulkLayoutCount;
    private int _inPerformLayoutCount;
    private int _keyboardResizeStep;
    private Rectangle _resizeClipRectangle;
    private Timer _vertScrollTimer;
    private Timer _horizScrollTimer;
    private Dictionary`2<Type, TypeConverter> _converters;
    private static Color s_defaultBackColor;
    private static Color s_defaultBackgroundColor;
    private Color _backgroundColor;
    private RECT[] _cachedScrollableRegion;
    private DataGridViewToolTip _toolTipControl;
    private static int s_propToolTip;
    private MouseClickInfo _lastMouseClickInfo;
    private ToolTipBuffer _toolTipBuffer;
    [CompilerGeneratedAttribute]
private DataGridViewAdvancedBorderStyle <AdvancedCellBorderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewAdvancedBorderStyle <AdvancedColumnHeadersBorderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewAdvancedBorderStyle <AdvancedRowHeadersBorderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewDataConnection <DataConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayedBandsData <DisplayedBandsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <EditingControl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstDisplayedScrollingColumnHiddenWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <GridPenColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewRowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewColumn <SortedColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private SortOrder <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VerticalScrollingOffset>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle { get; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToAddRowsDescr")]
public bool AllowUserToAddRows { get; public set; }
    internal bool AllowUserToAddRowsInternal { get; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToDeleteRowsDescr")]
public bool AllowUserToDeleteRows { get; public set; }
    internal bool AllowUserToDeleteRowsInternal { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToOrderColumnsDescr")]
public bool AllowUserToOrderColumns { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToResizeColumnsDescr")]
public bool AllowUserToResizeColumns { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToResizeRowsDescr")]
public bool AllowUserToResizeRows { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_AlternatingRowsDefaultCellStyleDescr")]
public DataGridViewCellStyle AlternatingRowsDefaultCellStyle { get; public set; }
    internal static bool ApplyVisualStylesToInnerCells { get; }
    internal bool ApplyVisualStylesToHeaderCells { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("True")]
public bool AutoGenerateColumns { get; public set; }
    public bool AutoSize { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_AutoSizeColumnsModeDescr")]
public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_AutoSizeRowsModeDescr")]
public DataGridViewAutoSizeRowsMode AutoSizeRowsMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewBackgroundColorDescr")]
public Color BackgroundColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_BorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    internal int BorderWidth { get; }
    protected bool CanEnableIme { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_CellBorderStyleDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewCellBorderStyle CellBorderStyle { get; public set; }
    internal bool CellMouseDownInContentBounds { get; internal set; }
    internal DataGridViewCellPaintingEventArgs CellPaintingEventArgs { get; }
    private DataGridViewCellStyleChangedEventArgs CellStyleChangedEventArgs { get; }
    internal DataGridViewCellValueEventArgs CellValueEventArgs { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ClipboardCopyModeDescr")]
public DataGridViewClipboardCopyMode ClipboardCopyMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("0")]
[EditorBrowsableAttribute("2")]
public int ColumnCount { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersBorderStyleDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersDefaultCellStyleDescr")]
[AmbientValueAttribute("")]
public DataGridViewCellStyle ColumnHeadersDefaultCellStyle { get; public set; }
    private DataGridViewCellStyle DefaultColumnHeadersDefaultCellStyle { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersHeightDescr")]
public int ColumnHeadersHeight { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersHeightSizeModeDescr")]
public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridViewColumnHeadersVisibleDescr")]
public bool ColumnHeadersVisible { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[MergablePropertyAttribute("False")]
public DataGridViewColumnCollection Columns { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CurrentCell { get; public set; }
    [BrowsableAttribute("False")]
public Point CurrentCellAddress { get; }
    private DataGridViewCell CurrentCellInternal { get; }
    private bool CurrentCellIsFirstVisibleCell { get; }
    private bool CurrentCellIsLastVisibleCell { get; }
    private bool CurrentCellIsEditedAndOnlySelectedCell { get; }
    [BrowsableAttribute("False")]
public DataGridViewRow CurrentRow { get; }
    unknown Cursor CursorInternal {internal set; }
    internal DataGridViewDataConnection DataConnection { get; private set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DataGridViewDataMemberDescr")]
public string DataMember { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("DataGridViewDataSourceDescr")]
public object DataSource { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_DefaultCellStyleDescr")]
[AmbientValueAttribute("")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    private DataGridViewCellStyle DefaultDefaultCellStyle { get; }
    private static SolidBrush DefaultForeBrush { get; }
    private static Color DefaultGridColor { get; }
    private static SolidBrush DefaultHeadersBackBrush { get; }
    private DataGridViewCellStyle DefaultRowHeadersDefaultCellStyle { get; }
    private static SolidBrush DefaultSelectionBackBrush { get; }
    private static SolidBrush DefaultSelectionForeBrush { get; }
    protected Size DefaultSize { get; }
    internal DisplayedBandsData DisplayedBandsInfo { get; }
    public Rectangle DisplayRectangle { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridView_EditModeDescr")]
public DataGridViewEditMode EditMode { get; public set; }
    internal Point MouseEnteredCellAddress { get; }
    private bool MouseOverEditingControl { get; }
    private bool MouseOverEditingPanel { get; }
    private bool MouseOverScrollBar { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Control EditingControl { get; private set; }
    internal AccessibleObject EditingControlAccessibleObject { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Panel EditingPanel { get; }
    internal DataGridViewEditingPanelAccessibleObject EditingPanelAccessibleObject { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridView_EnableHeadersVisualStylesDescr")]
public bool EnableHeadersVisualStyles { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell FirstDisplayedCell { get; public set; }
    private Point FirstDisplayedCellAddress { get; }
    internal int FirstDisplayedColumnIndex { get; }
    internal int FirstDisplayedRowIndex { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public int FirstDisplayedScrollingColumnHiddenWidth { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int FirstDisplayedScrollingColumnIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int FirstDisplayedScrollingRowIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewGridColorDescr")]
public Color GridColor { get; public set; }
    internal Color GridPenColor { get; private set; }
    internal int HorizontalOffset { get; internal set; }
    protected ScrollBar HorizontalScrollBar { get; }
    internal int HorizontalScrollBarHeight { get; }
    internal bool HorizontalScrollBarVisible { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int HorizontalScrollingOffset { get; public set; }
    private Timer HorizScrollTimer { get; }
    private bool InAdjustFillingColumns { get; }
    internal bool InBeginEdit { get; }
    internal bool InDisplayIndexAdjustments { get; internal set; }
    internal bool InEndEdit { get; }
    private DataGridViewCellStyle InheritedEditingCellStyle { get; }
    internal bool InInitialization { get; }
    internal bool InSortOperation { get; }
    [BrowsableAttribute("False")]
public bool IsCurrentCellDirty { get; }
    unknown bool IsCurrentCellDirtyInternal {private set; }
    [BrowsableAttribute("False")]
public bool IsCurrentCellInEditMode { get; }
    [BrowsableAttribute("False")]
public bool IsCurrentRowDirty { get; }
    unknown bool IsCurrentRowDirtyInternal {internal set; }
    private bool IsEscapeKeyEffective { get; }
    private bool IsMinimized { get; }
    internal ToolTip KeyboardToolTip { get; }
    internal LayoutData LayoutInfo { get; }
    internal Point MouseDownCellAddress { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridView_MultiSelectDescr")]
public bool MultiSelect { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int NewRowIndex { get; private set; }
    internal bool NoDimensionChangeAllowed { get; }
    private int NoSelectionChangeCount { get; private set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    internal DataGridViewCellStyle PlaceholderCellStyle { get; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    internal bool ResizingOperationAboutToStart { get; }
    internal bool RightToLeftInternal { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("0")]
public int RowCount { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowHeadersBorderStyleDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewHeaderBorderStyle RowHeadersBorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowHeadersDefaultCellStyleDescr")]
[AmbientValueAttribute("")]
public DataGridViewCellStyle RowHeadersDefaultCellStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridViewRowHeadersVisibleDescr")]
public bool RowHeadersVisible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridView_RowHeadersWidthDescr")]
public int RowHeadersWidth { get; public set; }
    unknown int RowHeadersWidthInternal {private set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowHeadersWidthSizeModeDescr")]
public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode { get; public set; }
    [BrowsableAttribute("False")]
public DataGridViewRowCollection Rows { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowsDefaultCellStyleDescr")]
public DataGridViewCellStyle RowsDefaultCellStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("DataGridView_RowTemplateDescr")]
[DesignerSerializationVisibilityAttribute("2")]
public DataGridViewRow RowTemplate { get; public set; }
    internal DataGridViewRow RowTemplateClone { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ScrollBarsDescr")]
public ScrollBars ScrollBars { get; public set; }
    [BrowsableAttribute("False")]
public DataGridViewSelectedCellCollection SelectedCells { get; }
    [BrowsableAttribute("False")]
public DataGridViewSelectedColumnCollection SelectedColumns { get; }
    [BrowsableAttribute("False")]
public DataGridViewSelectedRowCollection SelectedRows { get; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridView_SelectionModeDescr")]
public DataGridViewSelectionMode SelectionMode { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowCellErrorsDescr")]
public bool ShowCellErrors { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowCellToolTipsDescr")]
public bool ShowCellToolTips { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowEditingIconDescr")]
public bool ShowEditingIcon { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowRowErrorsDescr")]
public bool ShowRowErrors { get; public set; }
    internal bool SingleHorizontalBorderAdded { get; }
    internal bool SingleVerticalBorderAdded { get; }
    [BrowsableAttribute("False")]
public DataGridViewColumn SortedColumn { get; private set; }
    [BrowsableAttribute("False")]
public SortOrder SortOrder { get; private set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("DataGridView_StandardTabDescr")]
public bool StandardTab { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell Item { get; public set; }
    private string ToolTipPrivate { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewHeaderCell TopLeftHeaderCell { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Cursor UserSetCursor { get; }
    internal int VerticalOffset { get; internal set; }
    protected ScrollBar VerticalScrollBar { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int VerticalScrollingOffset { get; private set; }
    private Timer VertScrollTimer { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("DataGridViewVirtualModeDescr")]
public bool VirtualMode { get; public set; }
    private bool VisibleCellExists { get; }
    internal DataGridViewRowHeightInfoNeededEventArgs RowHeightInfoNeededEventArgs { get; }
    internal DataGridViewRowPostPaintEventArgs RowPostPaintEventArgs { get; }
    internal DataGridViewRowPrePaintEventArgs RowPrePaintEventArgs { get; }
    private static DataGridView();
    private int ScaleToCurrentDpi(int value);
    public virtual DataGridViewAdvancedBorderStyle get_AdjustedTopLeftHeaderBorderStyle();
    [CompilerGeneratedAttribute]
public DataGridViewAdvancedBorderStyle get_AdvancedCellBorderStyle();
    [CompilerGeneratedAttribute]
public DataGridViewAdvancedBorderStyle get_AdvancedColumnHeadersBorderStyle();
    [CompilerGeneratedAttribute]
public DataGridViewAdvancedBorderStyle get_AdvancedRowHeadersBorderStyle();
    public bool get_AllowUserToAddRows();
    public void set_AllowUserToAddRows(bool value);
    internal bool get_AllowUserToAddRowsInternal();
    public void add_AllowUserToAddRowsChanged(EventHandler value);
    public void remove_AllowUserToAddRowsChanged(EventHandler value);
    public bool get_AllowUserToDeleteRows();
    public void set_AllowUserToDeleteRows(bool value);
    internal bool get_AllowUserToDeleteRowsInternal();
    public void add_AllowUserToDeleteRowsChanged(EventHandler value);
    public void remove_AllowUserToDeleteRowsChanged(EventHandler value);
    public bool get_AllowUserToOrderColumns();
    public void set_AllowUserToOrderColumns(bool value);
    public void add_AllowUserToOrderColumnsChanged(EventHandler value);
    public void remove_AllowUserToOrderColumnsChanged(EventHandler value);
    public bool get_AllowUserToResizeColumns();
    public void set_AllowUserToResizeColumns(bool value);
    public void add_AllowUserToResizeColumnsChanged(EventHandler value);
    public void remove_AllowUserToResizeColumnsChanged(EventHandler value);
    public bool get_AllowUserToResizeRows();
    public void set_AllowUserToResizeRows(bool value);
    public void add_AllowUserToResizeRowsChanged(EventHandler value);
    public void remove_AllowUserToResizeRowsChanged(EventHandler value);
    public DataGridViewCellStyle get_AlternatingRowsDefaultCellStyle();
    public void set_AlternatingRowsDefaultCellStyle(DataGridViewCellStyle value);
    public void add_AlternatingRowsDefaultCellStyleChanged(EventHandler value);
    public void remove_AlternatingRowsDefaultCellStyleChanged(EventHandler value);
    internal static bool get_ApplyVisualStylesToInnerCells();
    internal bool get_ApplyVisualStylesToHeaderCells();
    public bool get_AutoGenerateColumns();
    public void set_AutoGenerateColumns(bool value);
    public void add_AutoGenerateColumnsChanged(EventHandler value);
    public void remove_AutoGenerateColumnsChanged(EventHandler value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public DataGridViewAutoSizeColumnsMode get_AutoSizeColumnsMode();
    public void set_AutoSizeColumnsMode(DataGridViewAutoSizeColumnsMode value);
    public void add_AutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler value);
    public void remove_AutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler value);
    public DataGridViewAutoSizeRowsMode get_AutoSizeRowsMode();
    public void set_AutoSizeRowsMode(DataGridViewAutoSizeRowsMode value);
    public void add_AutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public void remove_AutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public void add_BackgroundColorChanged(EventHandler value);
    public void remove_BackgroundColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    private bool ShouldSerializeBackgroundColor();
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public void add_BorderStyleChanged(EventHandler value);
    public void remove_BorderStyleChanged(EventHandler value);
    internal int get_BorderWidth();
    protected virtual bool get_CanEnableIme();
    public DataGridViewCellBorderStyle get_CellBorderStyle();
    public void set_CellBorderStyle(DataGridViewCellBorderStyle value);
    public void add_CellBorderStyleChanged(EventHandler value);
    public void remove_CellBorderStyleChanged(EventHandler value);
    internal bool get_CellMouseDownInContentBounds();
    internal void set_CellMouseDownInContentBounds(bool value);
    internal DataGridViewCellPaintingEventArgs get_CellPaintingEventArgs();
    private DataGridViewCellStyleChangedEventArgs get_CellStyleChangedEventArgs();
    internal DataGridViewCellValueEventArgs get_CellValueEventArgs();
    public DataGridViewClipboardCopyMode get_ClipboardCopyMode();
    public void set_ClipboardCopyMode(DataGridViewClipboardCopyMode value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public DataGridViewHeaderBorderStyle get_ColumnHeadersBorderStyle();
    public void set_ColumnHeadersBorderStyle(DataGridViewHeaderBorderStyle value);
    public void add_ColumnHeadersBorderStyleChanged(EventHandler value);
    public void remove_ColumnHeadersBorderStyleChanged(EventHandler value);
    public DataGridViewCellStyle get_ColumnHeadersDefaultCellStyle();
    public void set_ColumnHeadersDefaultCellStyle(DataGridViewCellStyle value);
    private DataGridViewCellStyle get_DefaultColumnHeadersDefaultCellStyle();
    public void add_ColumnHeadersDefaultCellStyleChanged(EventHandler value);
    public void remove_ColumnHeadersDefaultCellStyleChanged(EventHandler value);
    public int get_ColumnHeadersHeight();
    public void set_ColumnHeadersHeight(int value);
    public void add_ColumnHeadersHeightChanged(EventHandler value);
    public void remove_ColumnHeadersHeightChanged(EventHandler value);
    private bool ShouldSerializeColumnHeadersHeight();
    public DataGridViewColumnHeadersHeightSizeMode get_ColumnHeadersHeightSizeMode();
    public void set_ColumnHeadersHeightSizeMode(DataGridViewColumnHeadersHeightSizeMode value);
    public void add_ColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public void remove_ColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public bool get_ColumnHeadersVisible();
    public void set_ColumnHeadersVisible(bool value);
    public DataGridViewColumnCollection get_Columns();
    public DataGridViewCell get_CurrentCell();
    public void set_CurrentCell(DataGridViewCell value);
    public Point get_CurrentCellAddress();
    private DataGridViewCell get_CurrentCellInternal();
    private bool get_CurrentCellIsFirstVisibleCell();
    private bool get_CurrentCellIsLastVisibleCell();
    private bool get_CurrentCellIsEditedAndOnlySelectedCell();
    public DataGridViewRow get_CurrentRow();
    internal void set_CursorInternal(Cursor value);
    [CompilerGeneratedAttribute]
internal DataGridViewDataConnection get_DataConnection();
    [CompilerGeneratedAttribute]
private void set_DataConnection(DataGridViewDataConnection value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public void add_DataMemberChanged(EventHandler value);
    public void remove_DataMemberChanged(EventHandler value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    public DataGridViewCellStyle get_DefaultCellStyle();
    public void set_DefaultCellStyle(DataGridViewCellStyle value);
    private DataGridViewCellStyle get_DefaultDefaultCellStyle();
    public void add_DefaultCellStyleChanged(EventHandler value);
    public void remove_DefaultCellStyleChanged(EventHandler value);
    private static SolidBrush get_DefaultForeBrush();
    private static Color get_DefaultGridColor();
    private static SolidBrush get_DefaultHeadersBackBrush();
    private DataGridViewCellStyle get_DefaultRowHeadersDefaultCellStyle();
    private static SolidBrush get_DefaultSelectionBackBrush();
    private static SolidBrush get_DefaultSelectionForeBrush();
    protected virtual Size get_DefaultSize();
    [CompilerGeneratedAttribute]
internal DisplayedBandsData get_DisplayedBandsInfo();
    public virtual Rectangle get_DisplayRectangle();
    public DataGridViewEditMode get_EditMode();
    public void set_EditMode(DataGridViewEditMode value);
    public void add_EditModeChanged(EventHandler value);
    public void remove_EditModeChanged(EventHandler value);
    internal Point get_MouseEnteredCellAddress();
    private bool get_MouseOverEditingControl();
    private bool get_MouseOverEditingPanel();
    private bool get_MouseOverScrollBar();
    [CompilerGeneratedAttribute]
public Control get_EditingControl();
    [CompilerGeneratedAttribute]
private void set_EditingControl(Control value);
    internal AccessibleObject get_EditingControlAccessibleObject();
    public Panel get_EditingPanel();
    internal DataGridViewEditingPanelAccessibleObject get_EditingPanelAccessibleObject();
    public bool get_EnableHeadersVisualStyles();
    public void set_EnableHeadersVisualStyles(bool value);
    public DataGridViewCell get_FirstDisplayedCell();
    public void set_FirstDisplayedCell(DataGridViewCell value);
    private Point get_FirstDisplayedCellAddress();
    internal int get_FirstDisplayedColumnIndex();
    internal int get_FirstDisplayedRowIndex();
    [CompilerGeneratedAttribute]
public int get_FirstDisplayedScrollingColumnHiddenWidth();
    [CompilerGeneratedAttribute]
private void set_FirstDisplayedScrollingColumnHiddenWidth(int value);
    public int get_FirstDisplayedScrollingColumnIndex();
    public void set_FirstDisplayedScrollingColumnIndex(int value);
    public int get_FirstDisplayedScrollingRowIndex();
    public void set_FirstDisplayedScrollingRowIndex(int value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public Color get_GridColor();
    public void set_GridColor(Color value);
    public void add_GridColorChanged(EventHandler value);
    public void remove_GridColorChanged(EventHandler value);
    private bool ShouldSerializeGridColor();
    [CompilerGeneratedAttribute]
internal Color get_GridPenColor();
    [CompilerGeneratedAttribute]
private void set_GridPenColor(Color value);
    internal int get_HorizontalOffset();
    internal void set_HorizontalOffset(int value);
    protected ScrollBar get_HorizontalScrollBar();
    internal int get_HorizontalScrollBarHeight();
    internal bool get_HorizontalScrollBarVisible();
    public int get_HorizontalScrollingOffset();
    public void set_HorizontalScrollingOffset(int value);
    private Timer get_HorizScrollTimer();
    private bool get_InAdjustFillingColumns();
    internal bool get_InBeginEdit();
    internal bool get_InDisplayIndexAdjustments();
    internal void set_InDisplayIndexAdjustments(bool value);
    internal bool get_InEndEdit();
    private DataGridViewCellStyle get_InheritedEditingCellStyle();
    internal bool get_InInitialization();
    internal bool get_InSortOperation();
    public bool get_IsCurrentCellDirty();
    private void set_IsCurrentCellDirtyInternal(bool value);
    public bool get_IsCurrentCellInEditMode();
    public bool get_IsCurrentRowDirty();
    internal void set_IsCurrentRowDirtyInternal(bool value);
    private bool get_IsEscapeKeyEffective();
    private bool get_IsMinimized();
    private bool IsSharedCellReadOnly(DataGridViewCell dataGridViewCell, int rowIndex);
    internal bool IsSharedCellSelected(DataGridViewCell dataGridViewCell, int rowIndex);
    internal bool IsSharedCellVisible(DataGridViewCell dataGridViewCell, int rowIndex);
    internal ToolTip get_KeyboardToolTip();
    internal LayoutData get_LayoutInfo();
    internal Point get_MouseDownCellAddress();
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public void add_MultiSelectChanged(EventHandler value);
    public void remove_MultiSelectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public int get_NewRowIndex();
    [CompilerGeneratedAttribute]
private void set_NewRowIndex(int value);
    internal bool get_NoDimensionChangeAllowed();
    private int get_NoSelectionChangeCount();
    private void set_NoSelectionChangeCount(int value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    internal DataGridViewCellStyle get_PlaceholderCellStyle();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    private void ResetCurrentCell();
    internal bool get_ResizingOperationAboutToStart();
    internal bool get_RightToLeftInternal();
    public int get_RowCount();
    public void set_RowCount(int value);
    public DataGridViewHeaderBorderStyle get_RowHeadersBorderStyle();
    public void set_RowHeadersBorderStyle(DataGridViewHeaderBorderStyle value);
    public void add_RowHeadersBorderStyleChanged(EventHandler value);
    public void remove_RowHeadersBorderStyleChanged(EventHandler value);
    public DataGridViewCellStyle get_RowHeadersDefaultCellStyle();
    public void set_RowHeadersDefaultCellStyle(DataGridViewCellStyle value);
    public void add_RowHeadersDefaultCellStyleChanged(EventHandler value);
    public void remove_RowHeadersDefaultCellStyleChanged(EventHandler value);
    public bool get_RowHeadersVisible();
    public void set_RowHeadersVisible(bool value);
    public int get_RowHeadersWidth();
    public void set_RowHeadersWidth(int value);
    private void set_RowHeadersWidthInternal(int value);
    public void add_RowHeadersWidthChanged(EventHandler value);
    public void remove_RowHeadersWidthChanged(EventHandler value);
    private bool ShouldSerializeRowHeadersWidth();
    public DataGridViewRowHeadersWidthSizeMode get_RowHeadersWidthSizeMode();
    public void set_RowHeadersWidthSizeMode(DataGridViewRowHeadersWidthSizeMode value);
    public void add_RowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public void remove_RowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public DataGridViewRowCollection get_Rows();
    public DataGridViewCellStyle get_RowsDefaultCellStyle();
    public void set_RowsDefaultCellStyle(DataGridViewCellStyle value);
    public void add_RowsDefaultCellStyleChanged(EventHandler value);
    public void remove_RowsDefaultCellStyleChanged(EventHandler value);
    public DataGridViewRow get_RowTemplate();
    public void set_RowTemplate(DataGridViewRow value);
    private bool ShouldSerializeRowTemplate();
    internal DataGridViewRow get_RowTemplateClone();
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public DataGridViewSelectedCellCollection get_SelectedCells();
    public DataGridViewSelectedColumnCollection get_SelectedColumns();
    public DataGridViewSelectedRowCollection get_SelectedRows();
    public DataGridViewSelectionMode get_SelectionMode();
    public void set_SelectionMode(DataGridViewSelectionMode value);
    public bool get_ShowCellErrors();
    public void set_ShowCellErrors(bool value);
    public bool get_ShowCellToolTips();
    public void set_ShowCellToolTips(bool value);
    public bool get_ShowEditingIcon();
    public void set_ShowEditingIcon(bool value);
    public bool get_ShowRowErrors();
    public void set_ShowRowErrors(bool value);
    internal bool get_SingleHorizontalBorderAdded();
    internal bool get_SingleVerticalBorderAdded();
    [CompilerGeneratedAttribute]
public DataGridViewColumn get_SortedColumn();
    [CompilerGeneratedAttribute]
private void set_SortedColumn(DataGridViewColumn value);
    [CompilerGeneratedAttribute]
public SortOrder get_SortOrder();
    [CompilerGeneratedAttribute]
private void set_SortOrder(SortOrder value);
    public bool get_StandardTab();
    public void set_StandardTab(bool value);
    internal virtual bool get_SupportsUiaProviders();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public DataGridViewCell get_Item(int columnIndex, int rowIndex);
    public void set_Item(int columnIndex, int rowIndex, DataGridViewCell value);
    public DataGridViewCell get_Item(string columnName, int rowIndex);
    public void set_Item(string columnName, int rowIndex, DataGridViewCell value);
    [CompilerGeneratedAttribute]
private string get_ToolTipPrivate();
    [CompilerGeneratedAttribute]
private void set_ToolTipPrivate(string value);
    public DataGridViewHeaderCell get_TopLeftHeaderCell();
    public void set_TopLeftHeaderCell(DataGridViewHeaderCell value);
    public Cursor get_UserSetCursor();
    internal int get_VerticalOffset();
    internal void set_VerticalOffset(int value);
    protected ScrollBar get_VerticalScrollBar();
    [CompilerGeneratedAttribute]
public int get_VerticalScrollingOffset();
    [CompilerGeneratedAttribute]
private void set_VerticalScrollingOffset(int value);
    private Timer get_VertScrollTimer();
    public bool get_VirtualMode();
    public void set_VirtualMode(bool value);
    private bool get_VisibleCellExists();
    public void add_AutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler value);
    public void remove_AutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler value);
    public void add_CancelRowEdit(QuestionEventHandler value);
    public void remove_CancelRowEdit(QuestionEventHandler value);
    public void add_CellBeginEdit(DataGridViewCellCancelEventHandler value);
    public void remove_CellBeginEdit(DataGridViewCellCancelEventHandler value);
    public void add_CellClick(DataGridViewCellEventHandler value);
    public void remove_CellClick(DataGridViewCellEventHandler value);
    public void add_CellContentClick(DataGridViewCellEventHandler value);
    public void remove_CellContentClick(DataGridViewCellEventHandler value);
    public void add_CellContentDoubleClick(DataGridViewCellEventHandler value);
    public void remove_CellContentDoubleClick(DataGridViewCellEventHandler value);
    public void add_CellContextMenuStripChanged(DataGridViewCellEventHandler value);
    public void remove_CellContextMenuStripChanged(DataGridViewCellEventHandler value);
    public void add_CellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler value);
    public void remove_CellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler value);
    public void add_CellDoubleClick(DataGridViewCellEventHandler value);
    public void remove_CellDoubleClick(DataGridViewCellEventHandler value);
    public void add_CellEndEdit(DataGridViewCellEventHandler value);
    public void remove_CellEndEdit(DataGridViewCellEventHandler value);
    public void add_CellEnter(DataGridViewCellEventHandler value);
    public void remove_CellEnter(DataGridViewCellEventHandler value);
    public void add_CellErrorTextChanged(DataGridViewCellEventHandler value);
    public void remove_CellErrorTextChanged(DataGridViewCellEventHandler value);
    public void add_CellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler value);
    public void remove_CellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler value);
    public void add_CellFormatting(DataGridViewCellFormattingEventHandler value);
    public void remove_CellFormatting(DataGridViewCellFormattingEventHandler value);
    public void add_CellLeave(DataGridViewCellEventHandler value);
    public void remove_CellLeave(DataGridViewCellEventHandler value);
    public void add_CellMouseClick(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseClick(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseDown(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseDown(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseEnter(DataGridViewCellEventHandler value);
    public void remove_CellMouseEnter(DataGridViewCellEventHandler value);
    public void add_CellMouseLeave(DataGridViewCellEventHandler value);
    public void remove_CellMouseLeave(DataGridViewCellEventHandler value);
    public void add_CellMouseMove(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseMove(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseUp(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseUp(DataGridViewCellMouseEventHandler value);
    public void add_CellPainting(DataGridViewCellPaintingEventHandler value);
    public void remove_CellPainting(DataGridViewCellPaintingEventHandler value);
    public void add_CellParsing(DataGridViewCellParsingEventHandler value);
    public void remove_CellParsing(DataGridViewCellParsingEventHandler value);
    public void add_CellStateChanged(DataGridViewCellStateChangedEventHandler value);
    public void remove_CellStateChanged(DataGridViewCellStateChangedEventHandler value);
    public void add_CellStyleChanged(DataGridViewCellEventHandler value);
    public void remove_CellStyleChanged(DataGridViewCellEventHandler value);
    public void add_CellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler value);
    public void remove_CellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler value);
    public void add_CellToolTipTextChanged(DataGridViewCellEventHandler value);
    public void remove_CellToolTipTextChanged(DataGridViewCellEventHandler value);
    public void add_CellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler value);
    public void remove_CellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler value);
    public void add_CellValidated(DataGridViewCellEventHandler value);
    public void remove_CellValidated(DataGridViewCellEventHandler value);
    public void add_CellValidating(DataGridViewCellValidatingEventHandler value);
    public void remove_CellValidating(DataGridViewCellValidatingEventHandler value);
    public void add_CellValueChanged(DataGridViewCellEventHandler value);
    public void remove_CellValueChanged(DataGridViewCellEventHandler value);
    public void add_CellValueNeeded(DataGridViewCellValueEventHandler value);
    public void remove_CellValueNeeded(DataGridViewCellValueEventHandler value);
    public void add_CellValuePushed(DataGridViewCellValueEventHandler value);
    public void remove_CellValuePushed(DataGridViewCellValueEventHandler value);
    public void add_ColumnAdded(DataGridViewColumnEventHandler value);
    public void remove_ColumnAdded(DataGridViewColumnEventHandler value);
    public void add_ColumnContextMenuStripChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnContextMenuStripChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDataPropertyNameChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDataPropertyNameChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDisplayIndexChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDisplayIndexChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler value);
    public void remove_ColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler value);
    public void add_ColumnDividerWidthChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDividerWidthChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void remove_ColumnHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void add_ColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void remove_ColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void add_ColumnHeaderCellChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnHeaderCellChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnMinimumWidthChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnMinimumWidthChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnNameChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnNameChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnRemoved(DataGridViewColumnEventHandler value);
    public void remove_ColumnRemoved(DataGridViewColumnEventHandler value);
    public void add_ColumnSortModeChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnSortModeChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnStateChanged(DataGridViewColumnStateChangedEventHandler value);
    public void remove_ColumnStateChanged(DataGridViewColumnStateChangedEventHandler value);
    public void add_ColumnToolTipTextChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnToolTipTextChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnWidthChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnWidthChanged(DataGridViewColumnEventHandler value);
    public void add_CurrentCellChanged(EventHandler value);
    public void remove_CurrentCellChanged(EventHandler value);
    public void add_CurrentCellDirtyStateChanged(EventHandler value);
    public void remove_CurrentCellDirtyStateChanged(EventHandler value);
    public void add_DataBindingComplete(DataGridViewBindingCompleteEventHandler value);
    public void remove_DataBindingComplete(DataGridViewBindingCompleteEventHandler value);
    public void add_DataError(DataGridViewDataErrorEventHandler value);
    public void remove_DataError(DataGridViewDataErrorEventHandler value);
    public void add_DefaultValuesNeeded(DataGridViewRowEventHandler value);
    public void remove_DefaultValuesNeeded(DataGridViewRowEventHandler value);
    public void add_EditingControlShowing(DataGridViewEditingControlShowingEventHandler value);
    public void remove_EditingControlShowing(DataGridViewEditingControlShowingEventHandler value);
    public void add_NewRowNeeded(DataGridViewRowEventHandler value);
    public void remove_NewRowNeeded(DataGridViewRowEventHandler value);
    public void add_RowContextMenuStripChanged(DataGridViewRowEventHandler value);
    public void remove_RowContextMenuStripChanged(DataGridViewRowEventHandler value);
    public void add_RowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler value);
    public void remove_RowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler value);
    public void add_RowDefaultCellStyleChanged(DataGridViewRowEventHandler value);
    public void remove_RowDefaultCellStyleChanged(DataGridViewRowEventHandler value);
    public void add_RowDirtyStateNeeded(QuestionEventHandler value);
    public void remove_RowDirtyStateNeeded(QuestionEventHandler value);
    public void add_RowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler value);
    public void remove_RowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler value);
    public void add_RowDividerHeightChanged(DataGridViewRowEventHandler value);
    public void remove_RowDividerHeightChanged(DataGridViewRowEventHandler value);
    public void add_RowEnter(DataGridViewCellEventHandler value);
    public void remove_RowEnter(DataGridViewCellEventHandler value);
    public void add_RowErrorTextChanged(DataGridViewRowEventHandler value);
    public void remove_RowErrorTextChanged(DataGridViewRowEventHandler value);
    public void add_RowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler value);
    public void remove_RowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler value);
    public void add_RowHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void remove_RowHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void add_RowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void remove_RowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void add_RowHeaderCellChanged(DataGridViewRowEventHandler value);
    public void remove_RowHeaderCellChanged(DataGridViewRowEventHandler value);
    public void add_RowHeightChanged(DataGridViewRowEventHandler value);
    public void remove_RowHeightChanged(DataGridViewRowEventHandler value);
    public void add_RowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler value);
    public void remove_RowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler value);
    internal DataGridViewRowHeightInfoNeededEventArgs get_RowHeightInfoNeededEventArgs();
    public void add_RowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler value);
    public void remove_RowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler value);
    public void add_RowLeave(DataGridViewCellEventHandler value);
    public void remove_RowLeave(DataGridViewCellEventHandler value);
    public void add_RowMinimumHeightChanged(DataGridViewRowEventHandler value);
    public void remove_RowMinimumHeightChanged(DataGridViewRowEventHandler value);
    public void add_RowPostPaint(DataGridViewRowPostPaintEventHandler value);
    public void remove_RowPostPaint(DataGridViewRowPostPaintEventHandler value);
    internal DataGridViewRowPostPaintEventArgs get_RowPostPaintEventArgs();
    public void add_RowPrePaint(DataGridViewRowPrePaintEventHandler value);
    public void remove_RowPrePaint(DataGridViewRowPrePaintEventHandler value);
    internal DataGridViewRowPrePaintEventArgs get_RowPrePaintEventArgs();
    public void add_RowsAdded(DataGridViewRowsAddedEventHandler value);
    public void remove_RowsAdded(DataGridViewRowsAddedEventHandler value);
    public void add_RowsRemoved(DataGridViewRowsRemovedEventHandler value);
    public void remove_RowsRemoved(DataGridViewRowsRemovedEventHandler value);
    public void add_RowStateChanged(DataGridViewRowStateChangedEventHandler value);
    public void remove_RowStateChanged(DataGridViewRowStateChangedEventHandler value);
    public void add_RowUnshared(DataGridViewRowEventHandler value);
    public void remove_RowUnshared(DataGridViewRowEventHandler value);
    public void add_RowValidated(DataGridViewCellEventHandler value);
    public void remove_RowValidated(DataGridViewCellEventHandler value);
    public void add_RowValidating(DataGridViewCellCancelEventHandler value);
    public void remove_RowValidating(DataGridViewCellCancelEventHandler value);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_SortCompare(DataGridViewSortCompareEventHandler value);
    public void remove_SortCompare(DataGridViewSortCompareEventHandler value);
    public void add_Sorted(EventHandler value);
    public void remove_Sorted(EventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    public void add_UserAddedRow(DataGridViewRowEventHandler value);
    public void remove_UserAddedRow(DataGridViewRowEventHandler value);
    public void add_UserDeletedRow(DataGridViewRowEventHandler value);
    public void remove_UserDeletedRow(DataGridViewRowEventHandler value);
    public void add_UserDeletingRow(DataGridViewRowCancelEventHandler value);
    public void remove_UserDeletingRow(DataGridViewRowCancelEventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress);
    internal void ActivateToolTip(bool activate, string toolTipText, int columnIndex, int rowIndex);
    internal void AddNewRow(bool createdByEditing);
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn);
    private bool AdjustExpandingColumn(DataGridViewColumn dataGridViewColumn, int rowIndex);
    private bool AdjustExpandingColumns(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, int rowIndex);
    private int AdjustExpandingRow(int rowIndex, int columnIndex, bool fixedWidth);
    private void AdjustExpandingRows(int columnIndex, bool fixedWidth);
    internal void AdjustFillingColumn(DataGridViewColumn dataGridViewColumn, int width);
    private bool AdjustFillingColumns();
    private void AdjustShrinkingRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth, bool internalAutosizing);
    public bool AreAllCellsSelected(bool includeInvisibleCells);
    internal virtual void AssignParent(Control value);
    private void AutoGenerateDataBoundColumns(List`1<DataGridViewColumn> boundColumns);
    private bool AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, bool fixedHeight);
    public void AutoResizeColumn(int columnIndex);
    public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode);
    protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);
    public void AutoResizeColumnHeadersHeight();
    public void AutoResizeColumnHeadersHeight(int columnIndex);
    protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth);
    protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth);
    private bool AutoResizeColumnInternal(int columnIndex, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, bool fixedHeight);
    public void AutoResizeColumns();
    public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode);
    protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight);
    public void AutoResizeRow(int rowIndex);
    public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode);
    protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);
    public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);
    protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight);
    public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);
    protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight);
    private void AutoResizeRowInternal(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth, bool internalAutosizing);
    public void AutoResizeRows();
    public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode);
    protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth);
    protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);
    private void BeginColumnHeadersResize(int mouseY, int mouseBarOffset);
    private void BeginColumnRelocation(int mouseX, int index);
    private void BeginColumnResize(int x, int columnIndex);
    private void BeginMouseColumnResize(int mouseX, int mouseBarOffset, int index);
    private void BeginKeyboardColumnResize(int columnIndex);
    private Rectangle GetResizeClipRectangle(int columnIndex);
    public virtual bool BeginEdit(bool selectAll);
    private bool BeginEditInternal(bool selectAll);
    private void BeginRowHeadersResize(int mouseX, int mouseBarOffset);
    private void BeginRowResize(int mouseY, int mouseBarOffset, int index);
    private void BuildInheritedColumnHeaderCellStyle(DataGridViewCellStyle inheritedCellStyle, DataGridViewCell cell);
    private Rectangle CalcColRelocationFeedbackRect(int mouseX);
    private Rectangle CalcColResizeFeedbackRect(int mouseX);
    private Rectangle CalcRowResizeFeedbackRect(int mouseY);
    public bool CancelEdit();
    private bool CancelEdit(bool endEdit);
    private DataGridViewDataErrorEventArgs CancelEditPrivate();
    internal bool CancelToolTipPopup(ToolTip toolTip);
    private bool CanSort(DataGridViewColumn dataGridViewColumn);
    private bool IsSortable(DataGridViewColumn dataGridViewColumn);
    private bool CanValidateDataBoundDataGridViewCell(DataGridViewCell dataGridViewCurrentCell);
    private void CaptureMouse(Rectangle cursorClip);
    private void ClearRegionCache();
    public void ClearSelection();
    protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement);
    private bool ColumnEditable(int columnIndex);
    private bool ColumnNeedsDisplayedState(DataGridViewColumn dataGridViewColumn);
    private bool ColumnRelocationTarget(MouseEventArgs e, HitTestInfo hti, Int32& previousColumnIndex);
    private static bool ColumnsDisplayInOrder(int columnIndex1, int columnDisplayIndex1, int columnIndex2, int columnDisplayIndex2);
    public bool CommitEdit(DataGridViewDataErrorContexts context);
    private DataGridViewDataErrorEventArgs CommitEdit(DataGridViewCell& dataGridViewCurrentCell, DataGridViewDataErrorContexts context, DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave);
    private bool CommitEdit(DataGridViewDataErrorContexts context, bool forCurrentCellChange, bool forCurrentRowChange);
    private bool CommitEditForOperation(int columnIndex, int rowIndex, bool forCurrentCellChange);
    internal void CompleteCellsCollection(DataGridViewRow dataGridViewRow);
    private int ComputeFirstVisibleScrollingColumn();
    private int ComputeHeightOfFittingTrailingScrollingRows(int totalVisibleFrozenHeight);
    private int ComputeHeightOfScrolledOffRows();
    private int ComputeHeightOfTrailingScrollingRows();
    private bool ComputeLayout();
    private void ComputeLayoutShortcut(bool computeVisibleRows);
    private void ComputeVisibleColumns();
    private void ComputeVisibleRows();
    private Point ConvertCellToGridCoord(int columnIndex, int rowIndex, int x, int y);
    private void CorrectColumnDisplayIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn);
    private void CorrectColumnDisplayIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn);
    private void CorrectColumnFrozenState(DataGridViewColumn dataGridViewColumn, int anticipatedColumnIndex);
    private void CorrectColumnFrozenStates(DataGridViewColumn[] dataGridViewColumns);
    private void CorrectColumnFrozenStates(DataGridViewColumn dataGridViewColumn, bool frozenStateChanging);
    private void CorrectColumnFrozenStatesForMove(DataGridViewColumn dataGridViewColumn, int newDisplayIndex);
    private void CorrectColumnIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn);
    private void CorrectColumnIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn, int insertionCount);
    private void CorrectFocus(bool onlyIfGridHasFocus);
    private void CorrectRowFrozenState(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, int anticipatedRowIndex);
    private void CorrectRowFrozenStates(DataGridViewRow[] dataGridViewRows, int rowIndexInserted);
    private void CorrectRowFrozenStates(DataGridViewRow dataGridViewRow, int rowIndex, bool frozenStateChanging);
    private void CorrectRowIndexesAfterDeletion(int rowIndexDeleted);
    private void CorrectRowIndexesAfterInsertion(int rowIndexInserted, int insertionCount);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ControlCollection CreateControlsInstance();
    [EditorBrowsableAttribute("2")]
protected virtual DataGridViewColumnCollection CreateColumnsInstance();
    [EditorBrowsableAttribute("2")]
protected virtual DataGridViewRowCollection CreateRowsInstance();
    private RECT[] CreateScrollableRegion(Rectangle scroll);
    private void DiscardNewRow();
    private void DiscardZonesInScrollingArea(Rectangle& rectScrollingArea, int emptyBackgroundWidth, int emptyBackgroundHeight, int frozenVisibleRowsHeight, bool discardFrozenColumns, bool discardFrozenRows);
    public int DisplayedColumnCount(bool includePartialColumns);
    public int DisplayedRowCount(bool includePartialRow);
    protected virtual void Dispose(bool disposing);
    private void DrawColHeaderShadow(Graphics g, int mouseX);
    private void DrawColSplitBar(int mouseX);
    private void DrawRowSplitBar(int mouseY);
    private void DrawShadowRect(Rectangle r);
    private void DrawSplitBar(Rectangle r);
    private void EditingControls_CommonMouseEventHandler(object sender, MouseEventArgs e, DataGridViewMouseEvent dgvme);
    private void EditingControls_Click(object sender, EventArgs e);
    private void EditingControls_DoubleClick(object sender, EventArgs e);
    private void EditingControls_MouseClick(object sender, MouseEventArgs e);
    private void EditingControls_MouseDoubleClick(object sender, MouseEventArgs e);
    private void EditingControls_MouseDown(object sender, MouseEventArgs e);
    private void EditingControls_MouseEnter(object sender, EventArgs e);
    private void EditingControls_MouseLeave(object sender, EventArgs e);
    private void EditingControls_MouseMove(object sender, MouseEventArgs e);
    private void EditingControls_MouseUp(object sender, MouseEventArgs e);
    private void EndColumnHeadersResize(MouseEventArgs e);
    private void EndColumnRelocation(MouseEventArgs e, HitTestInfo hti);
    private void EndColumnResize(MouseEventArgs e);
    private void EndColumnResize(int x);
    public bool EndEdit();
    public bool EndEdit(DataGridViewDataErrorContexts context);
    private bool EndEdit(DataGridViewDataErrorContexts context, DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave, bool keepFocus, bool resetCurrentCell, bool resetAnchorCell);
    private void EndRowHeadersResize(MouseEventArgs e);
    private void EndRowResize(MouseEventArgs e);
    private void ExitBulkLayout(bool invalidInAdjustFillingColumns);
    private void ExitBulkPaint(int columnIndex, int rowIndex);
    private void FirstVisibleScrollingRowTempted(int rowIndex);
    private void FlushDisplayedChanged();
    private void FlushDisplayIndexChanged(bool raiseEvent);
    private void FlushSelectionChanged();
    protected virtual AccessibleObject GetAccessibilityObjectById(int objectId);
    internal TypeConverter GetCachedTypeConverter(Type type);
    internal Rectangle GetCellAdjustedDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow);
    public int GetCellCount(DataGridViewElementStates includeFilter);
    private bool GetCellCount_CellIncluded(DataGridViewCell dataGridViewCell, int rowIndex, bool displayedRequired, bool frozenRequired, bool resizableRequired, bool readOnlyRequired, bool visibleRequired);
    public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow);
    internal DataGridViewCell GetCellInternal(int columnIndex, int rowIndex);
    public virtual DataObject GetClipboardContent();
    private static void GetClipboardContentForHtml(StringBuilder sbContent, MemoryStream& utf8Stream);
    public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow);
    private Rectangle GetColumnDisplayRectanglePrivate(int columnIndex, bool cutOverflow);
    private int GetColumnIndexFromX(int x, Int32& xColumnLeftEdge);
    private static int GetColumnScrollRate(int xOffset);
    internal int GetColumnXFromIndex(int index);
    private int GetNegOffsetFromHorizontalOffset(int horizontalOffset);
    private bool GetOutOfBoundCorrectedHitTestInfo(HitTestInfo& hti, Int32& mouseX, Int32& mouseY, Int32& xOffset, Int32& yOffset);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow);
    private Rectangle GetRowDisplayRectanglePrivate(int rowIndex, bool cutOverflow);
    private int GetRowIndexFromY(int y, Int32& yRowTopEdge);
    private static int GetRowScrollRate(int yOffset);
    internal int GetRowYFromIndex(int index);
    private bool GetTabKeyEffective(bool shift, bool ctrl);
    public HitTestInfo HitTest(int x, int y);
    private void HorizScrollTimer_Tick(object sender, EventArgs e);
    private void HorizScrollTimerHandler();
    private bool InitializeEditingCellValue(DataGridViewCellStyle& dataGridViewCellStyle, DataGridViewCell& dataGridViewCell);
    private bool InitializeEditingControlValue(DataGridViewCellStyle& dataGridViewCellStyle, DataGridViewCell dataGridViewCell);
    public void InvalidateCell(DataGridViewCell dataGridViewCell);
    private void InvalidateCellPrivate(DataGridViewCell dataGridViewCell);
    public void InvalidateCell(int columnIndex, int rowIndex);
    private void InvalidateCellPrivate(int columnIndex, int rowIndex);
    public void InvalidateColumn(int columnIndex);
    internal void InvalidateColumnInternal(int columnIndex);
    private void InvalidateData();
    private void InvalidateInside();
    public void InvalidateRow(int rowIndex);
    private void InvalidateRowPrivate(int rowIndex);
    private void InvalidateRowHeights();
    private void InvalidateRows(int lo, int hi);
    private void InvalidateScrollBars();
    private bool IsColumnOutOfBounds(int columnIndex);
    private bool IsInnerCellOutOfBounds(int columnIndex, int rowIndex);
    private bool IsRowOutOfBounds(int rowIndex);
    protected virtual bool IsInputChar(char charCode);
    protected virtual bool IsInputKey(Keys keyData);
    private void LayoutScrollBars();
    private void MakeFirstDisplayedCellCurrentCell(bool includeNewRow);
    private static DataGridViewAutoSizeRowMode MapAutoSizeRowsModeToRowMode(DataGridViewAutoSizeRowsMode autoSizeRowsMode);
    private void MoveColumnHeadersOrRowResize(MouseEventArgs e);
    private void MapDataGridViewColumnToDataBoundField(DataGridViewColumn dataGridViewColumn);
    private void MoveColumnRelocation(MouseEventArgs e, HitTestInfo hti);
    private void MoveRowHeadersOrColumnResize(int x);
    public virtual void NotifyCurrentCellDirty(bool dirty);
    internal void OnAddedColumn(DataGridViewColumn dataGridViewColumn);
    internal void OnAddedRow_PreNotification(int rowIndex);
    internal void OnAddedRow_PostNotification(int rowIndex);
    internal void OnAddedRows_PreNotification(DataGridViewRow[] dataGridViewRows);
    internal void OnAddedRows_PostNotification(DataGridViewRow[] dataGridViewRows);
    internal void OnAddingColumn(DataGridViewColumn dataGridViewColumn);
    internal void OnAddingColumns(DataGridViewColumn[] dataGridViewColumns);
    internal void OnAddingRow(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, bool checkFrozenState);
    internal void OnAddingRows(DataGridViewRow[] dataGridViewRows, bool checkFrozenStates);
    internal void OnAdvancedBorderStyleChanged(DataGridViewAdvancedBorderStyle dgvabs);
    protected virtual void OnAllowUserToAddRowsChanged(EventArgs e);
    protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e);
    protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e);
    protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e);
    protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e);
    protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnAutoGenerateColumnsChanged(EventArgs e);
    internal void OnAutoSizeColumnModeChanged(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousInheritedMode);
    protected virtual void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e);
    protected virtual void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e);
    protected virtual void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e);
    protected virtual void OnBackgroundColorChanged(EventArgs e);
    internal void OnBandContextMenuStripChanged(DataGridViewBand dataGridViewBand);
    internal void OnBandDefaultCellStyleChanged(DataGridViewBand dataGridViewBand);
    internal void OnBandDividerThicknessChanged(DataGridViewBand dataGridViewBand);
    internal void OnBandHeaderCellChanged(DataGridViewBand dataGridViewBand);
    internal void OnBandMinimumThicknessChanged(DataGridViewBand dataGridViewBand);
    internal void OnBandThicknessChanged(DataGridViewBand dataGridViewBand);
    internal void OnBandThicknessChanging();
    protected virtual void OnBindingContextChanged(EventArgs e);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnCancelRowEdit(QuestionEventArgs e);
    protected virtual void OnCellBeginEdit(DataGridViewCellCancelEventArgs e);
    protected virtual void OnCellBorderStyleChanged(EventArgs e);
    internal void OnCellClickInternal(DataGridViewCellEventArgs e);
    protected virtual void OnCellClick(DataGridViewCellEventArgs e);
    internal void OnCellCommonChange(int columnIndex, int rowIndex);
    internal void OnCellContentClickInternal(DataGridViewCellEventArgs e);
    protected virtual void OnCellContentClick(DataGridViewCellEventArgs e);
    internal void OnCellContentDoubleClickInternal(DataGridViewCellEventArgs e);
    protected virtual void OnCellContentDoubleClick(DataGridViewCellEventArgs e);
    internal void OnCellContextMenuStripChanged(DataGridViewCell dataGridViewCell);
    protected virtual void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e);
    internal ContextMenuStrip OnCellContextMenuStripNeeded(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip);
    protected virtual void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e);
    protected virtual void OnCellDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnCellEndEdit(DataGridViewCellEventArgs e);
    internal void OnCellEnter(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex);
    protected virtual void OnCellEnter(DataGridViewCellEventArgs e);
    internal void OnCellErrorTextChanged(DataGridViewCell dataGridViewCell);
    protected virtual void OnCellErrorTextChanged(DataGridViewCellEventArgs e);
    internal string OnCellErrorTextNeeded(int columnIndex, int rowIndex, string errorText);
    protected virtual void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e);
    internal DataGridViewCellFormattingEventArgs OnCellFormatting(int columnIndex, int rowIndex, object val, Type formattedValueType, DataGridViewCellStyle cellStyle);
    protected virtual void OnCellFormatting(DataGridViewCellFormattingEventArgs e);
    internal void OnCellLeave(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex);
    protected virtual void OnCellLeave(DataGridViewCellEventArgs e);
    protected virtual void OnCellMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseDown(DataGridViewCellMouseEventArgs e);
    private void OnCellMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown);
    protected virtual void OnCellMouseEnter(DataGridViewCellEventArgs e);
    protected virtual void OnCellMouseLeave(DataGridViewCellEventArgs e);
    protected virtual void OnCellMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseUp(DataGridViewCellMouseEventArgs e);
    protected internal virtual void OnCellPainting(DataGridViewCellPaintingEventArgs e);
    internal DataGridViewCellParsingEventArgs OnCellParsing(int rowIndex, int columnIndex, object formattedValue, Type valueType, DataGridViewCellStyle cellStyle);
    protected virtual void OnCellParsing(DataGridViewCellParsingEventArgs e);
    private void OnCellSelectMouseMove(HitTestInfo hti);
    protected virtual void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e);
    internal void OnCellStyleChanged(DataGridViewCell dataGridViewCell);
    protected virtual void OnCellStyleChanged(DataGridViewCellEventArgs e);
    internal void OnCellStyleContentChanged(DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCellStylePropertyInternal property);
    protected virtual void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e);
    internal void OnCellToolTipTextChanged(DataGridViewCell dataGridViewCell);
    protected virtual void OnCellToolTipTextChanged(DataGridViewCellEventArgs e);
    internal string OnCellToolTipTextNeeded(int columnIndex, int rowIndex, string toolTipText);
    protected virtual void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e);
    internal void OnCellValidated(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex);
    protected virtual void OnCellValidated(DataGridViewCellEventArgs e);
    internal bool OnCellValidating(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context);
    protected virtual void OnCellValidating(DataGridViewCellValidatingEventArgs e);
    internal void OnCellValueChangedInternal(DataGridViewCellEventArgs e);
    protected virtual void OnCellValueChanged(DataGridViewCellEventArgs e);
    internal object OnCellValueNeeded(int columnIndex, int rowIndex);
    protected virtual void OnCellValueNeeded(DataGridViewCellValueEventArgs e);
    internal void OnCellValuePushed(int columnIndex, int rowIndex, object value);
    protected virtual void OnCellValuePushed(DataGridViewCellValueEventArgs e);
    internal void OnClearedRows();
    internal void OnClearingColumns();
    internal void OnClearingRows();
    protected virtual void OnColumnAdded(DataGridViewColumnEventArgs e);
    internal void OnColumnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea);
    internal void OnColumnCollectionChanged_PostNotification(DataGridViewColumn dataGridViewColumn);
    internal void OnColumnCommonChange(int columnIndex);
    protected virtual void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e);
    internal void OnColumnDataPropertyNameChanged(DataGridViewColumn dataGridViewColumn);
    protected virtual void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e);
    internal void OnColumnDisplayIndexChanged(DataGridViewColumn dataGridViewColumn);
    internal void OnColumnDisplayIndexChanging(DataGridViewColumn dataGridViewColumn, int newDisplayIndex);
    protected virtual void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e);
    internal void OnColumnDisplayIndexChanged_PreNotification();
    internal void OnColumnDisplayIndexChanged_PostNotification();
    protected virtual void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e);
    protected virtual void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e);
    internal void OnColumnFillWeightChanged(DataGridViewColumn dataGridViewColumn);
    internal void OnColumnFillWeightChanging(DataGridViewColumn dataGridViewColumn, float fillWeight);
    private void OnColumnGlobalAutoSize(int columnIndex);
    protected virtual void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e);
    private void OnColumnHeaderGlobalAutoSize(int columnIndex);
    protected virtual void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    private void OnColumnHeaderMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown);
    protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e);
    protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e);
    private void OnColumnHeadersGlobalAutoSize();
    protected virtual void OnColumnHeadersHeightChanged(EventArgs e);
    protected virtual void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e);
    internal void OnColumnHidden(DataGridViewColumn dataGridViewColumn);
    internal void OnColumnMinimumWidthChanging(DataGridViewColumn dataGridViewColumn, int minimumWidth);
    protected virtual void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e);
    internal void OnColumnNameChanged(DataGridViewColumn dataGridViewColumn);
    protected virtual void OnColumnNameChanged(DataGridViewColumnEventArgs e);
    internal void OnColumnRemoved(DataGridViewColumn dataGridViewColumn);
    protected virtual void OnColumnRemoved(DataGridViewColumnEventArgs e);
    private void OnColumnSelectMouseMove(HitTestInfo hti);
    private void OnColumnsGlobalAutoSize();
    internal void OnColumnSortModeChanged(DataGridViewColumn dataGridViewColumn);
    protected virtual void OnColumnSortModeChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e);
    internal void OnColumnToolTipTextChanged(DataGridViewColumn dataGridViewColumn);
    protected virtual void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnWidthChanged(DataGridViewColumnEventArgs e);
    internal void OnCommonCellContentClick(int columnIndex, int rowIndex, bool doubleClick);
    protected virtual void OnCurrentCellChanged(EventArgs e);
    protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e);
    protected virtual void OnCursorChanged(EventArgs e);
    internal void OnDataBindingComplete(ListChangedType listChangedType);
    protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e);
    protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e);
    internal void OnDataErrorInternal(DataGridViewDataErrorEventArgs e);
    internal void OnDataGridViewElementStateChanged(DataGridViewElement element, int index, DataGridViewElementStates elementState);
    internal void OnDataGridViewElementStateChanging(DataGridViewElement element, int index, DataGridViewElementStates elementState);
    protected virtual void OnDataMemberChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    private void OnDataSourceDisposed(object sender, EventArgs e);
    protected virtual void OnDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnDefaultValuesNeeded(DataGridViewRowEventArgs e);
    protected virtual void OnDoubleClick(EventArgs e);
    protected virtual void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e);
    protected virtual void OnEditModeChanged(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    private void OnGlobalAutoSize();
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnGridColorChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    internal void OnInsertedColumn_PreNotification(DataGridViewColumn dataGridViewColumn);
    internal void OnInsertedColumn_PostNotification(Point newCurrentCell);
    internal void OnInsertedRow_PreNotification(int rowIndex, int insertionCount);
    internal void OnInsertedRow_PostNotification(int rowIndex, Point newCurrentCell, bool lastInsertion);
    internal void OnInsertedRows_PreNotification(int rowIndex, DataGridViewRow[] dataGridViewRows);
    internal void OnInsertedRows_PostNotification(DataGridViewRow[] dataGridViewRows, Point newCurrentCell);
    internal void OnInsertingColumn(int columnIndexInserted, DataGridViewColumn dataGridViewColumn, Point& newCurrentCell);
    internal void OnInsertingRow(int rowIndexInserted, DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, Point& newCurrentCell, bool firstInsertion, int insertionCount, bool force);
    internal void OnInsertingRows(int rowIndexInserted, DataGridViewRow[] dataGridViewRows, Point& newCurrentCell);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyPress(KeyPressEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseClick(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    internal void OnMouseWheelInternal(MouseEventArgs e);
    protected virtual void OnMultiSelectChanged(EventArgs e);
    protected virtual void OnNewRowNeeded(DataGridViewRowEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    private bool IsGridFocusRectangleEnabled();
    private Rectangle GetGridRectangle();
    private Rectangle GetGridFocusRectangle();
    private void InvalidateGridFocusOnScroll(int change, ScrollOrientation orientation);
    private void InvalidateRectangleEdges(Rectangle rect);
    internal virtual void OnParentBecameInvisible();
    protected virtual void OnReadOnlyChanged(EventArgs e);
    internal void OnRemovedColumn_PreNotification(DataGridViewColumn dataGridViewColumn);
    internal void OnRemovedColumn_PostNotification(DataGridViewColumn dataGridViewColumn, Point newCurrentCell);
    internal void OnRemovedRow_PreNotification(int rowIndexDeleted);
    internal void OnRemovedRow_PostNotification(DataGridViewRow dataGridViewRow, Point newCurrentCell);
    internal void OnRemovingColumn(DataGridViewColumn dataGridViewColumn, Point& newCurrentCell, bool force);
    internal void OnRemovingRow(int rowIndexDeleted, Point& newCurrentCell, bool force);
    internal void OnReplacedCell(DataGridViewRow dataGridViewRow, int columnIndex);
    internal void OnReplacingCell(DataGridViewRow dataGridViewRow, int columnIndex);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    internal void OnRowCollectionChanged_PostNotification(bool recreateNewRow, bool allowSettingCurrentCell, CollectionChangeAction cca, DataGridViewRow dataGridViewRow, int rowIndex);
    protected virtual void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e);
    internal ContextMenuStrip OnRowContextMenuStripNeeded(int rowIndex, ContextMenuStrip contextMenuStrip);
    protected virtual void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e);
    protected virtual void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e);
    protected virtual void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e);
    protected virtual void OnRowDividerHeightChanged(DataGridViewRowEventArgs e);
    private void OnRowEnter(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex, bool canCreateNewRow, bool validationFailureOccurred);
    protected virtual void OnRowEnter(DataGridViewCellEventArgs e);
    internal void OnRowErrorTextChanged(DataGridViewRow dataGridViewRow);
    protected virtual void OnRowErrorTextChanged(DataGridViewRowEventArgs e);
    internal string OnRowErrorTextNeeded(int rowIndex, string errorText);
    protected virtual void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e);
    private void OnRowGlobalAutoSize(int rowIndex);
    protected virtual void OnRowHeaderCellChanged(DataGridViewRowEventArgs e);
    private void OnRowHeaderGlobalAutoSize(int rowIndex);
    protected virtual void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    private void OnRowHeaderMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown);
    protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e);
    protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e);
    private void OnRowHeadersGlobalAutoSize(bool expandingRows);
    protected virtual void OnRowHeadersWidthChanged(EventArgs e);
    protected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e);
    protected virtual void OnRowHeightChanged(DataGridViewRowEventArgs e);
    internal DataGridViewRowHeightInfoNeededEventArgs OnRowHeightInfoNeeded(int rowIndex, int height, int minimumHeight);
    protected virtual void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e);
    private bool OnRowHeightInfoPushed(int rowIndex, int height, int minimumHeight);
    protected virtual void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e);
    private void OnRowLeave(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex);
    protected virtual void OnRowLeave(DataGridViewCellEventArgs e);
    protected virtual void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e);
    protected internal virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e);
    protected internal virtual void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e);
    internal void OnRowsAddedInternal(int rowIndex, int rowCount);
    protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e);
    protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e);
    private void OnRowSelectMouseMove(HitTestInfo hti);
    private void OnRowsGlobalAutoSize();
    internal void OnRowsRemovedInternal(int rowIndex, int rowCount);
    protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e);
    protected virtual void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e);
    internal void OnRowUnshared(DataGridViewRow dataGridViewRow);
    protected virtual void OnRowUnshared(DataGridViewRowEventArgs e);
    private bool OnRowValidating(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex);
    protected virtual void OnRowValidating(DataGridViewCellCancelEventArgs e);
    private void OnRowValidated(DataGridViewCell& dataGridViewCell, int columnIndex, int rowIndex);
    protected virtual void OnRowValidated(DataGridViewCellEventArgs e);
    private void RefreshByCurrentPos(int oldValue, int newValue);
    private void OnScroll(ScrollEventType scrollEventType, int oldValue, int newValue, ScrollOrientation orientation);
    protected virtual void OnScroll(ScrollEventArgs e);
    protected virtual void OnSelectionChanged(EventArgs e);
    internal bool OnSortCompare(DataGridViewColumn dataGridViewSortedColumn, object value1, object value2, int rowIndex1, int rowIndex2, Int32& sortResult);
    protected virtual void OnSortCompare(DataGridViewSortCompareEventArgs e);
    protected virtual void OnSorted(EventArgs e);
    internal void OnSortGlyphDirectionChanged(DataGridViewColumnHeaderCell dataGridViewColumnHeaderCell);
    private void OnTopLeftHeaderMouseDown();
    protected virtual void OnUserAddedRow(DataGridViewRowEventArgs e);
    protected virtual void OnUserDeletedRow(DataGridViewRowEventArgs e);
    protected virtual void OnUserDeletingRow(DataGridViewRowCancelEventArgs e);
    private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    private void OnVisibleChangedPrivate();
    protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds);
    private void PaintBorder(Graphics g, Rectangle clipRect, Rectangle bounds);
    private void PaintColumnHeaders(Graphics g, Rectangle clipBounds, bool singleBorderAdded);
    private void PaintGrid(Graphics g, Rectangle gridBounds, Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded);
    private void PaintRows(Graphics g, Rectangle boundingRect, Rectangle clipRect, bool singleHorizontalBorderAdded);
    private void PaintTopLeftHeaderCell(Graphics g);
    private void PerformLayoutPrivate(bool useRowShortcut, bool computeVisibleRows, bool invalidInAdjustFillingColumns, bool repositionEditingControl);
    private void PopulateNewRowWithDefaultValues();
    private void PositionEditingControl(bool setLocation, bool setSize, bool setFocus);
    protected bool ProcessAKey(Keys keyData);
    protected bool ProcessDeleteKey(Keys keyData);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected bool ProcessDownKey(Keys keyData);
    private bool ProcessDownKeyInternal(Keys keyData, Boolean& moved);
    protected bool ProcessEndKey(Keys keyData);
    protected bool ProcessEnterKey(Keys keyData);
    protected bool ProcessEscapeKey(Keys keyData);
    protected bool ProcessF2Key(Keys keyData);
    protected bool ProcessF3Key(Keys keyData);
    protected bool ProcessHomeKey(Keys keyData);
    protected bool ProcessInsertKey(Keys keyData);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    protected virtual bool ProcessKeyPreview(Message& m);
    private Nullable`1<bool> ProcessColumnResize(Keys keyData, int step);
    protected bool ProcessControlShiftF10Keys(Keys keyData);
    protected bool ProcessLeftKey(Keys keyData);
    private bool ProcessLeftKeyPrivate(Keys keyData);
    private bool ProcessLeftMost(bool shift, int firstVisibleColumnIndex, int firstVisibleRowIndex);
    protected bool ProcessNextKey(Keys keyData);
    protected bool ProcessPriorKey(Keys keyData);
    protected bool ProcessRightKey(Keys keyData);
    private bool ProcessRightKeyPrivate(Keys keyData);
    private bool ProcessRightMost(bool shift, int lastVisibleColumnIndex, int firstVisibleRowIndex);
    protected bool ProcessSpaceKey(Keys keyData);
    protected bool ProcessTabKey(Keys keyData);
    protected virtual bool ProcessDataGridViewKey(KeyEventArgs e);
    protected bool ProcessUpKey(Keys keyData);
    protected bool ProcessZeroKey(Keys keyData);
    private void PushAllowUserToAddRows();
    private bool PushFormattedValue(DataGridViewCell& dataGridViewCurrentCell, object formattedValue, Exception& exception);
    private void RecordCellMouseClick(DataGridViewCellMouseEventArgs dgvcme);
    private void RefreshColumnsAndRows();
    private void RefreshColumns();
    public bool RefreshEdit();
    private void RefreshRows(bool scrollIntoView);
    private void ReleaseMouse();
    internal virtual void ReleaseUiaProvider(HWND handle);
    private void RemoveIndividualReadOnlyCellsInColumn(int columnIndex);
    private void RemoveIndividualReadOnlyCellsInRow(int rowIndex);
    private void RemoveIndividuallySelectedCells();
    private void RemoveIndividuallySelectedCells(int columnIndexException, int rowIndexException);
    private void RemoveIndividuallySelectedCellsInColumn(int columnIndex);
    private void RemoveIndividuallySelectedCellsInRow(int rowIndex);
    private void ResetBackgroundColor();
    private void ResetGridColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetText();
    private void ResetTrackingState();
    private void ResetKeyboardTrackingState();
    private bool IsMouseOperationActive();
    private bool IsKeyboardOperationActive();
    internal void ResetUIState(bool useRowShortcut, bool computeVisibleRows);
    private void RestoreRowsCachedThickness();
    private bool RowIsResizable(int rowIndex);
    private bool RowNeedsDisplayedState(int rowIndex, int lastDisplayedFrozenRowIndex, int lastDisplayedScrollingRowIndex);
    private void ScrollBar_MouseEnter(object sender, EventArgs e);
    private void ScrollBar_MouseLeave(object sender, EventArgs e);
    private bool ScrollColumnIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange);
    private void ScrollColumns(int columns);
    private bool ScrollIntoView(int columnIndex, int rowIndex, bool forCurrentCellChange);
    private void ScrollRectangles(RECT[] rects, int change);
    private bool ScrollRowIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange);
    private void ScrollRows(int rowCount, int deltaY, ScrollEventType scrollEventType);
    private void ScrollRowsByCount(int rows, ScrollEventType scrollEventType);
    private void ScrollRowsByHeight(int height);
    public void SelectAll();
    private DataGridViewCell SelectedCell(int index);
    private void SetColumnHeadersHeightInternal(int columnHeadersHeight, bool invalidInAdjustFillingColumns);
    protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);
    internal void SetCurrentCellAddressCoreInternal(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);
    private void SelectCellRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select);
    private void SelectCellUnorderedRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select);
    private void SelectColumnRange(int columnIndexFrom, int columnIndexTo, bool select);
    private void SelectRowRange(int rowIndexFrom, int rowIndexTo, bool select);
    internal void SetAccessibleObjectParent(AccessibleObject editingControlAccessibleObject);
    private bool SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    internal void SetReadOnlyCellCore(int columnIndex, int rowIndex, bool readOnly);
    internal void SetReadOnlyColumnCore(int columnIndex, bool readOnly);
    internal void SetReadOnlyRowCore(int rowIndex, bool readOnly);
    protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected);
    internal void SetSelectedCellCoreInternal(int columnIndex, int rowIndex, bool selected);
    protected virtual void SetSelectedColumnCore(int columnIndex, bool selected);
    internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected);
    private void SetSelectedElementCore(int columnIndex, int rowIndex, bool selected);
    protected virtual void SetSelectedRowCore(int rowIndex, bool selected);
    internal void SetSelectedRowCoreInternal(int rowIndex, bool selected);
    private bool ShouldSerializeAlternatingRowsDefaultCellStyle();
    private bool ShouldSerializeColumnHeadersDefaultCellStyle();
    private bool ShouldSerializeDefaultCellStyle();
    private bool ShouldSerializeRowHeadersDefaultCellStyle();
    private bool ShouldSerializeRowsDefaultCellStyle();
    public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction);
    public virtual void Sort(IComparer comparer);
    private void SortDataBoundDataGridView_PerformCheck(DataGridViewColumn dataGridViewColumn);
    private void SortInternal(IComparer comparer, DataGridViewColumn dataGridViewColumn, ListSortDirection direction);
    internal void SwapSortedRows(int rowIndex1, int rowIndex2);
    private void DataGridViewHScrolled(object sender, ScrollEventArgs se);
    private void DataGridViewVScrolled(object sender, ScrollEventArgs se);
    private bool TabToNextCell();
    private bool TabToPreviousCell();
    private void UnwireEditingControlEvents();
    private void UnwireScrollBarsEvents();
    public void UpdateCellErrorText(int columnIndex, int rowIndex);
    public void UpdateCellValue(int columnIndex, int rowIndex);
    private void UpdateColumnsDisplayedState(bool displayed);
    public void UpdateRowErrorText(int rowIndex);
    public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd);
    public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd);
    private void UpdateRowHeightInfoPrivate(int rowIndex, bool updateToEnd, bool invalidInAdjustFillingColumns);
    private void UpdateRowsDisplayedState(bool displayed);
    private void UpdateMouseEnteredCell(HitTestInfo hti, MouseEventArgs e);
    private void UpdateSelectedCellsBlock(int anchorColumnIndex, Int32& oldEdgeColumnIndex, int newEdgeColumnIndex, int anchorRowIndex, Int32& oldEdgeRowIndex, int newEdgeRowIndex);
    private void VertScrollTimer_Tick(object sender, EventArgs e);
    private void VertScrollTimerHandler();
    private void WireEditingControlEvents();
    private void WireScrollBarsEvents();
    internal virtual void WmContextMenu(Message& m);
    private void WmGetDlgCode(Message& m);
    private bool WmNotify(Message& m);
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewAdvancedBorderStyle : object {
    [NullableAttribute("2")]
private DataGridView _owner;
    private bool _all;
    private DataGridViewAdvancedCellBorderStyle _banned1;
    private DataGridViewAdvancedCellBorderStyle _banned2;
    private DataGridViewAdvancedCellBorderStyle _banned3;
    private DataGridViewAdvancedCellBorderStyle _top;
    private DataGridViewAdvancedCellBorderStyle _left;
    private DataGridViewAdvancedCellBorderStyle _right;
    private DataGridViewAdvancedCellBorderStyle _bottom;
    public DataGridViewAdvancedCellBorderStyle All { get; public set; }
    public DataGridViewAdvancedCellBorderStyle Bottom { get; public set; }
    unknown DataGridViewAdvancedCellBorderStyle BottomInternal {internal set; }
    public DataGridViewAdvancedCellBorderStyle Left { get; public set; }
    unknown DataGridViewAdvancedCellBorderStyle LeftInternal {internal set; }
    public DataGridViewAdvancedCellBorderStyle Right { get; public set; }
    unknown DataGridViewAdvancedCellBorderStyle RightInternal {internal set; }
    public DataGridViewAdvancedCellBorderStyle Top { get; public set; }
    unknown DataGridViewAdvancedCellBorderStyle TopInternal {internal set; }
    internal DataGridViewAdvancedBorderStyle(DataGridView owner);
    [NullableContextAttribute("2")]
internal DataGridViewAdvancedBorderStyle(DataGridView owner, DataGridViewAdvancedCellBorderStyle banned1, DataGridViewAdvancedCellBorderStyle banned2, DataGridViewAdvancedCellBorderStyle banned3);
    public DataGridViewAdvancedCellBorderStyle get_All();
    public void set_All(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Bottom();
    public void set_Bottom(DataGridViewAdvancedCellBorderStyle value);
    internal void set_BottomInternal(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Left();
    public void set_Left(DataGridViewAdvancedCellBorderStyle value);
    internal void set_LeftInternal(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Right();
    public void set_Right(DataGridViewAdvancedCellBorderStyle value);
    internal void set_RightInternal(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Top();
    public void set_Top(DataGridViewAdvancedCellBorderStyle value);
    internal void set_TopInternal(DataGridViewAdvancedCellBorderStyle value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum System.Windows.Forms.DataGridViewAdvancedCellBorderStyle : Enum {
    public int value__;
    public static DataGridViewAdvancedCellBorderStyle NotSet;
    public static DataGridViewAdvancedCellBorderStyle None;
    public static DataGridViewAdvancedCellBorderStyle Single;
    public static DataGridViewAdvancedCellBorderStyle Inset;
    public static DataGridViewAdvancedCellBorderStyle InsetDouble;
    public static DataGridViewAdvancedCellBorderStyle Outset;
    public static DataGridViewAdvancedCellBorderStyle OutsetDouble;
    public static DataGridViewAdvancedCellBorderStyle OutsetPartial;
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataGridViewAutoSizeColumnCriteriaInternal : Enum {
    public int value__;
    public static DataGridViewAutoSizeColumnCriteriaInternal NotSet;
    public static DataGridViewAutoSizeColumnCriteriaInternal None;
    public static DataGridViewAutoSizeColumnCriteriaInternal Header;
    public static DataGridViewAutoSizeColumnCriteriaInternal AllRows;
    public static DataGridViewAutoSizeColumnCriteriaInternal DisplayedRows;
    public static DataGridViewAutoSizeColumnCriteriaInternal Fill;
}
public enum System.Windows.Forms.DataGridViewAutoSizeColumnMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeColumnMode NotSet;
    public static DataGridViewAutoSizeColumnMode None;
    public static DataGridViewAutoSizeColumnMode AllCells;
    public static DataGridViewAutoSizeColumnMode AllCellsExceptHeader;
    public static DataGridViewAutoSizeColumnMode DisplayedCells;
    public static DataGridViewAutoSizeColumnMode DisplayedCellsExceptHeader;
    public static DataGridViewAutoSizeColumnMode ColumnHeader;
    public static DataGridViewAutoSizeColumnMode Fill;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewAutoSizeColumnMode <PreviousMode>k__BackingField;
    public DataGridViewColumn Column { get; }
    public DataGridViewAutoSizeColumnMode PreviousMode { get; }
    public DataGridViewAutoSizeColumnModeEventArgs(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousMode);
    [CompilerGeneratedAttribute]
public DataGridViewColumn get_Column();
    [CompilerGeneratedAttribute]
public DataGridViewAutoSizeColumnMode get_PreviousMode();
}
public class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler : MulticastDelegate {
    public DataGridViewAutoSizeColumnModeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewAutoSizeColumnModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeColumnModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DataGridViewAutoSizeColumnsMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeColumnsMode AllCells;
    public static DataGridViewAutoSizeColumnsMode AllCellsExceptHeader;
    public static DataGridViewAutoSizeColumnsMode DisplayedCells;
    public static DataGridViewAutoSizeColumnsMode DisplayedCellsExceptHeader;
    public static DataGridViewAutoSizeColumnsMode None;
    public static DataGridViewAutoSizeColumnsMode ColumnHeader;
    public static DataGridViewAutoSizeColumnsMode Fill;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewAutoSizeColumnMode[] <PreviousModes>k__BackingField;
    public DataGridViewAutoSizeColumnMode[] PreviousModes { get; }
    public DataGridViewAutoSizeColumnsModeEventArgs(DataGridViewAutoSizeColumnMode[] previousModes);
    [CompilerGeneratedAttribute]
public DataGridViewAutoSizeColumnMode[] get_PreviousModes();
}
public class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler : MulticastDelegate {
    public DataGridViewAutoSizeColumnsModeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewAutoSizeColumnsModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeColumnsModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <PreviousModeAutoSized>k__BackingField;
    public bool PreviousModeAutoSized { get; }
    public DataGridViewAutoSizeModeEventArgs(bool previousModeAutoSized);
    [CompilerGeneratedAttribute]
public bool get_PreviousModeAutoSized();
}
public class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler : MulticastDelegate {
    public DataGridViewAutoSizeModeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewAutoSizeModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataGridViewAutoSizeRowCriteriaInternal : Enum {
    public int value__;
    public static DataGridViewAutoSizeRowCriteriaInternal Header;
    public static DataGridViewAutoSizeRowCriteriaInternal AllColumns;
}
public enum System.Windows.Forms.DataGridViewAutoSizeRowMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeRowMode AllCells;
    public static DataGridViewAutoSizeRowMode AllCellsExceptHeader;
    public static DataGridViewAutoSizeRowMode RowHeader;
}
public enum System.Windows.Forms.DataGridViewAutoSizeRowsMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeRowsMode AllCells;
    public static DataGridViewAutoSizeRowsMode AllCellsExceptHeaders;
    public static DataGridViewAutoSizeRowsMode AllHeaders;
    public static DataGridViewAutoSizeRowsMode DisplayedCells;
    public static DataGridViewAutoSizeRowsMode DisplayedCellsExceptHeaders;
    public static DataGridViewAutoSizeRowsMode DisplayedHeaders;
    public static DataGridViewAutoSizeRowsMode None;
}
[FlagsAttribute]
internal enum System.Windows.Forms.DataGridViewAutoSizeRowsModeInternal : Enum {
    public int value__;
    public static DataGridViewAutoSizeRowsModeInternal None;
    public static DataGridViewAutoSizeRowsModeInternal Header;
    public static DataGridViewAutoSizeRowsModeInternal AllColumns;
    public static DataGridViewAutoSizeRowsModeInternal AllRows;
    public static DataGridViewAutoSizeRowsModeInternal DisplayedRows;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DynamicallyAccessedMembersAttribute("1")]
public class System.Windows.Forms.DataGridViewBand : DataGridViewElement {
    private static int s_propContextMenuStrip;
    private static int s_propDefaultCellStyle;
    private static int s_propDefaultHeaderCellType;
    private static int s_propDividerThickness;
    private static int s_propHeaderCell;
    private static int s_propUserData;
    internal static int MinBandThickness;
    internal static int MaxBandThickness;
    private int _thickness;
    private int _minimumThickness;
    [CompilerGeneratedAttribute]
private int <CachedThickness>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyStore <Properties>k__BackingField;
    internal int CachedThickness { get; internal set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [NullableAttribute("2")]
internal ContextMenuStrip ContextMenuStripInternal { get; internal set; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("False")]
public Type DefaultHeaderCellType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Displayed { get; internal set; }
    internal int DividerThickness { get; internal set; }
    [DefaultValueAttribute("False")]
public bool Frozen { get; public set; }
    [BrowsableAttribute("False")]
public bool HasDefaultCellStyle { get; }
    internal bool HasDefaultHeaderCellType { get; }
    internal bool HasHeaderCell { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected DataGridViewHeaderCell HeaderCellCore { get; protected set; }
    [BrowsableAttribute("False")]
public int Index { get; internal set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
public DataGridViewCellStyle InheritedStyle { get; }
    protected bool IsRow { get; }
    internal int MinimumThickness { get; internal set; }
    private protected PropertyStore Properties { get; private set; }
    [DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    unknown bool ReadOnlyInternal {internal set; }
    [BrowsableAttribute("True")]
public DataGridViewTriState Resizable { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    unknown bool SelectedInternal {internal set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    internal int Thickness { get; internal set; }
    internal int ThicknessInternal { get; internal set; }
    [DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    private static DataGridViewBand();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
internal int get_CachedThickness();
    [CompilerGeneratedAttribute]
internal void set_CachedThickness(int value);
    [NullableContextAttribute("2")]
public virtual ContextMenuStrip get_ContextMenuStrip();
    [NullableContextAttribute("2")]
public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    [NullableContextAttribute("2")]
internal ContextMenuStrip get_ContextMenuStripInternal();
    [NullableContextAttribute("2")]
internal void set_ContextMenuStripInternal(ContextMenuStrip value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public Type get_DefaultHeaderCellType();
    public void set_DefaultHeaderCellType(Type value);
    public virtual bool get_Displayed();
    internal virtual void set_Displayed(bool value);
    internal int get_DividerThickness();
    internal void set_DividerThickness(int value);
    public virtual bool get_Frozen();
    public virtual void set_Frozen(bool value);
    public bool get_HasDefaultCellStyle();
    internal bool get_HasDefaultHeaderCellType();
    internal bool get_HasHeaderCell();
    protected DataGridViewHeaderCell get_HeaderCellCore();
    protected void set_HeaderCellCore(DataGridViewHeaderCell value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    [NullableContextAttribute("2")]
public virtual DataGridViewCellStyle get_InheritedStyle();
    protected bool get_IsRow();
    internal int get_MinimumThickness();
    internal void set_MinimumThickness(int value);
    [CompilerGeneratedAttribute]
private protected PropertyStore get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(PropertyStore value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    internal void set_ReadOnlyInternal(bool value);
    public virtual DataGridViewTriState get_Resizable();
    public virtual void set_Resizable(DataGridViewTriState value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    internal void set_SelectedInternal(bool value);
    [NullableContextAttribute("2")]
public object get_Tag();
    [NullableContextAttribute("2")]
public void set_Tag(object value);
    internal int get_Thickness();
    internal void set_Thickness(int value);
    internal int get_ThicknessInternal();
    internal void set_ThicknessInternal(int value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual object Clone();
    private protected void CloneInternal(DataGridViewBand dataGridViewBand);
    private void DetachContextMenuStrip(object sender, EventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void GetHeightInfo(int rowIndex, Int32& height, Int32& minimumHeight);
    private void OnStateChanged(DataGridViewElementStates elementState);
    private void OnStateChanging(DataGridViewElementStates elementState);
    protected virtual void OnDataGridViewChanged();
    private bool ShouldSerializeDefaultHeaderCellType();
    internal bool ShouldSerializeResizable();
    public virtual string ToString();
}
public class System.Windows.Forms.DataGridViewBindingCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ListChangedType <ListChangedType>k__BackingField;
    public ListChangedType ListChangedType { get; }
    public DataGridViewBindingCompleteEventArgs(ListChangedType listChangedType);
    [CompilerGeneratedAttribute]
public ListChangedType get_ListChangedType();
}
public class System.Windows.Forms.DataGridViewBindingCompleteEventHandler : MulticastDelegate {
    public DataGridViewBindingCompleteEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewBindingCompleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewBindingCompleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DynamicallyAccessedMembersAttribute("1")]
public class System.Windows.Forms.DataGridViewButtonCell : DataGridViewCell {
    private static int s_propButtonCellFlatStyle;
    private static int s_propButtonCellState;
    private static int s_propButtonCellUseColumnTextForButtonValue;
    private static VisualStyleElement s_buttonElement;
    private static byte DATAGRIDVIEWBUTTONCELL_themeMargin;
    private static byte DATAGRIDVIEWBUTTONCELL_horizontalTextMargin;
    private static byte DATAGRIDVIEWBUTTONCELL_verticalTextMargin;
    private static byte DATAGRIDVIEWBUTTONCELL_textPadding;
    private static Rectangle s_rectThemeMargins;
    private static bool s_mouseInContentBounds;
    private static Type s_defaultFormattedValueType;
    private static Type s_defaultValueType;
    private static Type s_cellType;
    private ButtonState ButtonState { get; private set; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("8193")]
public Type EditType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FlatStyle FlatStyle { get; public set; }
    unknown FlatStyle FlatStyleInternal {internal set; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("False")]
public bool UseColumnTextForButtonValue { get; public set; }
    unknown bool UseColumnTextForButtonValueInternal {internal set; }
    public Type ValueType { get; }
    private static DataGridViewButtonCell();
    private ButtonState get_ButtonState();
    private void set_ButtonState(ButtonState value);
    [NullableContextAttribute("2")]
public virtual Type get_EditType();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    internal void set_FlatStyleInternal(FlatStyle value);
    public virtual Type get_FormattedValueType();
    public bool get_UseColumnTextForButtonValue();
    public void set_UseColumnTextForButtonValue(bool value);
    internal void set_UseColumnTextForButtonValueInternal(bool value);
    public virtual Type get_ValueType();
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    [NullableContextAttribute("2")]
private protected virtual string GetDefaultToolTipText();
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    private static Rectangle GetThemeMargins(Graphics g);
    [NullableContextAttribute("2")]
protected virtual object GetValue(int rowIndex);
    protected virtual bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e, int rowIndex);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics g, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    public virtual string ToString();
    private void UpdateButtonState(ButtonState newButtonState, int rowIndex);
}
[DynamicallyAccessedMembersAttribute("1")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewButtonColumn", "DataGridViewButtonColumn")]
public class System.Windows.Forms.DataGridViewButtonColumn : DataGridViewColumn {
    private static Type s_columnType;
    private string _text;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ButtonColumnFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ButtonColumnTextDescr")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ButtonColumnUseColumnTextForButtonValueDescr")]
public bool UseColumnTextForButtonValue { get; public set; }
    private static DataGridViewButtonColumn();
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_UseColumnTextForButtonValue();
    public void set_UseColumnTextForButtonValue(bool value);
    public virtual object Clone();
    private bool ShouldSerializeDefaultCellStyle();
    public virtual string ToString();
}
[TypeConverterAttribute("System.Windows.Forms.DataGridViewCellConverter")]
[DynamicallyAccessedMembersAttribute("8193")]
public abstract class System.Windows.Forms.DataGridViewCell : DataGridViewElement {
    private static TextFormatFlags TextFormatSupportedFlags;
    private static int ContrastThreshold;
    private static int HighContrastThreshold;
    private static int MaxToolTipLength;
    private static int MaxToolTipCutOff;
    private static byte FlagAreaNotSet;
    private static byte FlagDataArea;
    private static byte FlagErrorArea;
    internal static byte IconMarginWidth;
    internal static byte IconMarginHeight;
    private static byte IconsWidth;
    private static byte IconsHeight;
    private static bool s_isScalingInitialized;
    internal static byte s_iconsWidth;
    internal static byte s_iconsHeight;
    internal static int s_propCellValue;
    private static int s_propCellContextMenuStrip;
    private static int s_propCellErrorText;
    private static int s_propCellStyle;
    private static int s_propCellValueType;
    private static int s_propCellTag;
    private static int s_propCellToolTipText;
    private static int s_propCellAccessibilityObject;
    private static Bitmap s_errorBmp;
    private List`1<Rectangle> _nonEmptyNeighbors;
    private static Type s_stringType;
    private byte _flags;
    private bool _useDefaultToolTipText;
    [CompilerGeneratedAttribute]
private DataGridViewColumn <OwningColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewRow <OwningRow>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyStore <Properties>k__BackingField;
    [BrowsableAttribute("False")]
public AccessibleObject AccessibilityObject { get; }
    public int ColumnIndex { get; }
    [BrowsableAttribute("False")]
public Rectangle ContentBounds { get; }
    [DefaultValueAttribute("")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    private ContextMenuStrip ContextMenuStripInternal { get; private set; }
    private byte CurrentMouseLocation { get; private set; }
    [BrowsableAttribute("False")]
public object DefaultNewRowValue { get; }
    [BrowsableAttribute("False")]
public bool Displayed { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public object EditedFormattedValue { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DynamicallyAccessedMembersAttribute("8193")]
public Type EditType { get; }
    private static Bitmap ErrorBitmap { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Rectangle ErrorIconBounds { get; }
    [BrowsableAttribute("False")]
public string ErrorText { get; public set; }
    private string ErrorTextInternal { get; private set; }
    [BrowsableAttribute("False")]
public object FormattedValue { get; }
    [BrowsableAttribute("False")]
public Type FormattedValueType { get; }
    private TypeConverter FormattedValueTypeConverter { get; }
    [BrowsableAttribute("False")]
public bool Frozen { get; }
    private bool HasErrorText { get; }
    [BrowsableAttribute("False")]
public bool HasStyle { get; }
    internal bool HasToolTipText { get; }
    internal bool HasValue { get; }
    private protected bool HasValueType { get; }
    [BrowsableAttribute("False")]
public DataGridViewElementStates InheritedState { get; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle InheritedStyle { get; }
    internal bool IsAccessibilityObjectCreated { get; }
    internal bool IsParentAccessibilityObjectCreated { get; }
    [BrowsableAttribute("False")]
public bool IsInEditMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewColumn OwningColumn { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewRow OwningRow { get; internal set; }
    [BrowsableAttribute("False")]
public Size PreferredSize { get; }
    internal PropertyStore Properties { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ReadOnly { get; public set; }
    unknown bool ReadOnlyInternal {internal set; }
    [BrowsableAttribute("False")]
public bool Resizable { get; }
    [BrowsableAttribute("False")]
public int RowIndex { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    unknown bool SelectedInternal {internal set; }
    [BrowsableAttribute("False")]
public Size Size { get; }
    private protected Rectangle StdBorderWidths { get; }
    [BrowsableAttribute("True")]
public DataGridViewCellStyle Style { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ToolTipText { get; public set; }
    private string ToolTipTextInternal { get; private set; }
    [BrowsableAttribute("False")]
public object Value { get; public set; }
    [BrowsableAttribute("False")]
public Type ValueType { get; public set; }
    private TypeConverter ValueTypeConverter { get; }
    [BrowsableAttribute("False")]
public bool Visible { get; }
    private bool AccessibleRestructuringNeeded { get; }
    private static DataGridViewCell();
    protected virtual override void Finalize();
    public AccessibleObject get_AccessibilityObject();
    public int get_ColumnIndex();
    public Rectangle get_ContentBounds();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    private ContextMenuStrip get_ContextMenuStripInternal();
    private void set_ContextMenuStripInternal(ContextMenuStrip value);
    private byte get_CurrentMouseLocation();
    private void set_CurrentMouseLocation(byte value);
    public virtual object get_DefaultNewRowValue();
    public virtual bool get_Displayed();
    public object get_EditedFormattedValue();
    public virtual Type get_EditType();
    private static Bitmap get_ErrorBitmap();
    public Rectangle get_ErrorIconBounds();
    public string get_ErrorText();
    public void set_ErrorText(string value);
    private string get_ErrorTextInternal();
    private void set_ErrorTextInternal(string value);
    public object get_FormattedValue();
    public virtual Type get_FormattedValueType();
    private TypeConverter get_FormattedValueTypeConverter();
    public virtual bool get_Frozen();
    private bool get_HasErrorText();
    public bool get_HasStyle();
    internal bool get_HasToolTipText();
    internal bool get_HasValue();
    private protected virtual bool get_HasValueType();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.CanShowToolTipsNow();
    private sealed virtual override Rectangle System.Windows.Forms.IKeyboardToolTip.GetNativeScreenRectangle();
    private sealed virtual override IList`1<Rectangle> System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsHoveredWithMouse();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.HasRtlModeEnabled();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsToolTip();
    private sealed virtual override IWin32Window System.Windows.Forms.IKeyboardToolTip.GetOwnerWindow();
    private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnHooked(ToolTip toolTip);
    internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnUnhooked(ToolTip toolTip);
    internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    private sealed virtual override string System.Windows.Forms.IKeyboardToolTip.GetCaptionForTool(ToolTip toolTip);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.ShowsOwnToolTip();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsBeingTabbedTo();
    internal virtual bool IsBeingTabbedTo();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsChildrenToShowToolTips();
    public DataGridViewElementStates get_InheritedState();
    public DataGridViewCellStyle get_InheritedStyle();
    internal bool get_IsAccessibilityObjectCreated();
    internal bool get_IsParentAccessibilityObjectCreated();
    public bool get_IsInEditMode();
    [CompilerGeneratedAttribute]
public DataGridViewColumn get_OwningColumn();
    [CompilerGeneratedAttribute]
internal void set_OwningColumn(DataGridViewColumn value);
    [CompilerGeneratedAttribute]
public DataGridViewRow get_OwningRow();
    [CompilerGeneratedAttribute]
internal void set_OwningRow(DataGridViewRow value);
    public Size get_PreferredSize();
    [CompilerGeneratedAttribute]
internal PropertyStore get_Properties();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    internal void set_ReadOnlyInternal(bool value);
    public virtual bool get_Resizable();
    public int get_RowIndex();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    internal void set_SelectedInternal(bool value);
    public Size get_Size();
    private protected Rectangle get_StdBorderWidths();
    public DataGridViewCellStyle get_Style();
    public void set_Style(DataGridViewCellStyle value);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    private string get_ToolTipTextInternal();
    private void set_ToolTipTextInternal(string value);
    public object get_Value();
    public void set_Value(object value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    private TypeConverter get_ValueTypeConverter();
    public virtual bool get_Visible();
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewAdvancedBorderStyle AdjustCellBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    protected virtual Rectangle BorderWidths(DataGridViewAdvancedBorderStyle advancedBorderStyle);
    internal virtual void CacheEditingControl();
    internal DataGridViewElementStates CellStateFromColumnRowStates(DataGridViewElementStates rowState);
    protected virtual bool ClickUnsharesRow(DataGridViewCellEventArgs e);
    internal bool ClickUnsharesRowInternal(DataGridViewCellEventArgs e);
    internal void CloneInternal(DataGridViewCell dataGridViewCell);
    public virtual object Clone();
    internal static int ColorDistance(Color color1, Color color2);
    internal void ComputeBorderStyleCellStateAndCellBounds(int rowIndex, DataGridViewAdvancedBorderStyle& dgvabsEffective, DataGridViewElementStates& cellState, Rectangle& cellBounds);
    internal Rectangle ComputeErrorIconBounds(Rectangle cellValueBounds);
    protected virtual bool ContentClickUnsharesRow(DataGridViewCellEventArgs e);
    internal bool ContentClickUnsharesRowInternal(DataGridViewCellEventArgs e);
    protected virtual bool ContentDoubleClickUnsharesRow(DataGridViewCellEventArgs e);
    internal bool ContentDoubleClickUnsharesRowInternal(DataGridViewCellEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private void DetachContextMenuStrip(object sender, EventArgs e);
    [EditorBrowsableAttribute("2")]
public virtual void DetachEditingControl();
    private bool get_AccessibleRestructuringNeeded();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual bool DoubleClickUnsharesRow(DataGridViewCellEventArgs e);
    internal bool DoubleClickUnsharesRowInternal(DataGridViewCellEventArgs e);
    protected virtual bool EnterUnsharesRow(int rowIndex, bool throughMouseClick);
    internal bool EnterUnsharesRowInternal(int rowIndex, bool throughMouseClick);
    internal static void FormatPlainText(string s, bool csv, TextWriter output, Boolean& escapeApplied);
    internal static void FormatPlainTextAsHtml(string s, TextWriter output);
    private static Bitmap GetBitmap(string bitmapName);
    protected virtual object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    internal object GetClipboardContentInternal(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    internal ContextMenuStrip GetContextMenuStrip(int rowIndex);
    internal ValueTuple`2<Color, Color> GetContrastedColors(Color baseline);
    public Rectangle GetContentBounds(int rowIndex);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    private protected virtual string GetDefaultToolTipText();
    internal object GetEditedFormattedValue(object value, int rowIndex, DataGridViewCellStyle& dataGridViewCellStyle, DataGridViewDataErrorContexts context);
    public object GetEditedFormattedValue(int rowIndex, DataGridViewDataErrorContexts context);
    internal Rectangle GetErrorIconBounds(int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected internal virtual string GetErrorText(int rowIndex);
    internal object GetFormattedValue(int rowIndex, DataGridViewCellStyle& cellStyle, DataGridViewDataErrorContexts context);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    internal static DataGridViewFreeDimension GetFreeDimensionFromConstraint(Size constraintSize);
    internal int GetHeight(int rowIndex);
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewElementStates GetInheritedState(int rowIndex);
    public virtual DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);
    internal DataGridViewCellStyle GetInheritedStyleInternal(int rowIndex);
    internal int GetPreferredHeight(int rowIndex, int width);
    internal Size GetPreferredSize(int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    internal static int GetPreferredTextHeight(Graphics g, bool rightToLeft, string text, DataGridViewCellStyle cellStyle, int maxWidth, Boolean& widthTruncated);
    internal int GetPreferredWidth(int rowIndex, int height);
    protected virtual Size GetSize(int rowIndex);
    private protected string GetInternalToolTipText(int rowIndex);
    private string GetToolTipText(int rowIndex);
    private protected static string GetToolTipTextWithoutMnemonic(string toolTipText);
    protected virtual object GetValue(int rowIndex);
    internal object GetValueInternal(int rowIndex);
    [EditorBrowsableAttribute("2")]
public virtual void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle);
    protected virtual bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex);
    internal bool KeyDownUnsharesRowInternal(KeyEventArgs e, int rowIndex);
    public virtual bool KeyEntersEditMode(KeyEventArgs e);
    protected virtual bool KeyPressUnsharesRow(KeyPressEventArgs e, int rowIndex);
    internal bool KeyPressUnsharesRowInternal(KeyPressEventArgs e, int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    internal bool KeyUpUnsharesRowInternal(KeyEventArgs e, int rowIndex);
    protected virtual bool LeaveUnsharesRow(int rowIndex, bool throughMouseClick);
    internal bool LeaveUnsharesRowInternal(int rowIndex, bool throughMouseClick);
    [EditorBrowsableAttribute("2")]
public static int MeasureTextHeight(Graphics graphics, string text, Font font, int maxWidth, TextFormatFlags flags);
    [EditorBrowsableAttribute("2")]
public static int MeasureTextHeight(Graphics graphics, string text, Font font, int maxWidth, TextFormatFlags flags, Boolean& widthTruncated);
    [EditorBrowsableAttribute("2")]
public static Size MeasureTextPreferredSize(Graphics graphics, string text, Font font, float maxRatio, TextFormatFlags flags);
    [EditorBrowsableAttribute("2")]
public static Size MeasureTextSize(Graphics graphics, string text, Font font, TextFormatFlags flags);
    [EditorBrowsableAttribute("2")]
public static int MeasureTextWidth(Graphics graphics, string text, Font font, int maxHeight, TextFormatFlags flags);
    protected virtual bool MouseClickUnsharesRow(DataGridViewCellMouseEventArgs e);
    internal bool MouseClickUnsharesRowInternal(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseDoubleClickUnsharesRow(DataGridViewCellMouseEventArgs e);
    internal bool MouseDoubleClickUnsharesRowInternal(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    internal bool MouseDownUnsharesRowInternal(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    internal bool MouseEnterUnsharesRowInternal(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    internal bool MouseLeaveUnsharesRowInternal(int rowIndex);
    protected virtual bool MouseMoveUnsharesRow(DataGridViewCellMouseEventArgs e);
    internal bool MouseMoveUnsharesRowInternal(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    internal bool MouseUpUnsharesRowInternal(DataGridViewCellMouseEventArgs e);
    private void OnCellDataAreaMouseEnterInternal(int rowIndex);
    private void OnCellDataAreaMouseLeaveInternal();
    private void OnCellErrorAreaMouseEnterInternal(int rowIndex);
    private void OnCellErrorAreaMouseLeaveInternal();
    protected virtual void OnClick(DataGridViewCellEventArgs e);
    internal void OnClickInternal(DataGridViewCellEventArgs e);
    internal void OnCommonChange();
    protected virtual void OnContentClick(DataGridViewCellEventArgs e);
    internal void OnContentClickInternal(DataGridViewCellEventArgs e);
    protected virtual void OnContentDoubleClick(DataGridViewCellEventArgs e);
    internal void OnContentDoubleClickInternal(DataGridViewCellEventArgs e);
    protected virtual void OnDoubleClick(DataGridViewCellEventArgs e);
    internal void OnDoubleClickInternal(DataGridViewCellEventArgs e);
    protected virtual void OnEnter(int rowIndex, bool throughMouseClick);
    internal void OnEnterInternal(int rowIndex, bool throughMouseClick);
    internal void OnKeyDownInternal(KeyEventArgs e, int rowIndex);
    protected virtual void OnKeyDown(KeyEventArgs e, int rowIndex);
    internal void OnKeyPressInternal(KeyPressEventArgs e, int rowIndex);
    protected virtual void OnKeyPress(KeyPressEventArgs e, int rowIndex);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    internal void OnKeyUpInternal(KeyEventArgs e, int rowIndex);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    internal void OnLeaveInternal(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseClick(DataGridViewCellMouseEventArgs e);
    internal void OnMouseClickInternal(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    internal void OnMouseDoubleClickInternal(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    internal void OnMouseDownInternal(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseEnter(int rowIndex);
    internal void OnMouseEnterInternal(int rowIndex);
    protected virtual void OnMouseLeave(int rowIndex);
    internal void OnMouseLeaveInternal(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    internal void OnMouseMoveInternal(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    internal void OnMouseUpInternal(DataGridViewCellMouseEventArgs e);
    protected virtual void OnDataGridViewChanged();
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    internal void PaintInternal(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    internal static bool PaintBackground(DataGridViewPaintParts paintParts);
    internal static bool PaintBorder(DataGridViewPaintParts paintParts);
    protected virtual void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle bounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle);
    internal static bool PaintContentBackground(DataGridViewPaintParts paintParts);
    internal static bool PaintContentForeground(DataGridViewPaintParts paintParts);
    protected virtual void PaintErrorIcon(Graphics graphics, Rectangle clipBounds, Rectangle cellValueBounds, string errorText);
    private static void PaintErrorIcon(Graphics graphics, Rectangle iconBounds);
    internal void PaintErrorIcon(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Rectangle cellBounds, Rectangle cellValueBounds, string errorText);
    internal static bool PaintErrorIcon(DataGridViewPaintParts paintParts);
    internal static bool PaintFocus(DataGridViewPaintParts paintParts);
    internal static void PaintPadding(Graphics graphics, Rectangle bounds, DataGridViewCellStyle cellStyle, Brush br, bool rightToLeft);
    internal static bool PaintSelectionBackground(DataGridViewPaintParts paintParts);
    internal void PaintWork(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    internal object ParseFormattedValueInternal(Type valueType, object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    [EditorBrowsableAttribute("2")]
public virtual void PositionEditingControl(bool setLocation, bool setSize, Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    [EditorBrowsableAttribute("2")]
public virtual Rectangle PositionEditingPanel(Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    internal virtual void ReleaseUiaProvider();
    protected virtual bool SetValue(int rowIndex, object value);
    internal bool SetValueInternal(int rowIndex, object value);
    internal static bool TextFitsInBounds(Graphics graphics, string text, Font font, Size maxBounds, TextFormatFlags flags);
    public virtual string ToString();
    private static string TruncateToolTipText(string toolTipText);
    private void UpdateCurrentMouseLocation(DataGridViewCellMouseEventArgs e);
}
public enum System.Windows.Forms.DataGridViewCellBorderStyle : Enum {
    public int value__;
    public static DataGridViewCellBorderStyle Custom;
    public static DataGridViewCellBorderStyle Single;
    public static DataGridViewCellBorderStyle Raised;
    public static DataGridViewCellBorderStyle Sunken;
    public static DataGridViewCellBorderStyle None;
    public static DataGridViewCellBorderStyle SingleVertical;
    public static DataGridViewCellBorderStyle RaisedVertical;
    public static DataGridViewCellBorderStyle SunkenVertical;
    public static DataGridViewCellBorderStyle SingleHorizontal;
    public static DataGridViewCellBorderStyle RaisedHorizontal;
    public static DataGridViewCellBorderStyle SunkenHorizontal;
}
public class System.Windows.Forms.DataGridViewCellCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    [NullableContextAttribute("1")]
internal DataGridViewCellCancelEventArgs(DataGridViewCell dataGridViewCell);
    public DataGridViewCellCancelEventArgs(int columnIndex, int rowIndex);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellCancelEventHandler : MulticastDelegate {
    public DataGridViewCellCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewCellCollection : BaseCollection {
    private CollectionChangeEventHandler _onCollectionChanged;
    private List`1<DataGridViewCell> _items;
    private DataGridViewRow _owner;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewCell Item { get; public set; }
    public DataGridViewCell Item { get; public set; }
    public DataGridViewCellCollection(DataGridViewRow dataGridViewRow);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewCell get_Item(int index);
    public void set_Item(int index, DataGridViewCell value);
    public DataGridViewCell get_Item(string columnName);
    public void set_Item(string columnName, DataGridViewCell value);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public virtual int Add(DataGridViewCell dataGridViewCell);
    internal int AddInternal(DataGridViewCell dataGridViewCell);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual void AddRange(DataGridViewCell[] dataGridViewCells);
    public virtual void Clear();
    public void CopyTo(DataGridViewCell[] array, int index);
    public virtual bool Contains(DataGridViewCell dataGridViewCell);
    public int IndexOf(DataGridViewCell dataGridViewCell);
    public virtual void Insert(int index, DataGridViewCell dataGridViewCell);
    internal void InsertInternal(int index, DataGridViewCell dataGridViewCell);
    protected void OnCollectionChanged(CollectionChangeEventArgs e);
    public virtual void Remove(DataGridViewCell cell);
    public virtual void RemoveAt(int index);
    internal void RemoveAtInternal(int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs : DataGridViewCellEventArgs {
    [CompilerGeneratedAttribute]
private ContextMenuStrip <ContextMenuStrip>k__BackingField;
    public ContextMenuStrip ContextMenuStrip { get; public set; }
    public DataGridViewCellContextMenuStripNeededEventArgs(int columnIndex, int rowIndex);
    internal DataGridViewCellContextMenuStripNeededEventArgs(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip);
    [CompilerGeneratedAttribute]
public ContextMenuStrip get_ContextMenuStrip();
    [CompilerGeneratedAttribute]
public void set_ContextMenuStrip(ContextMenuStrip value);
}
public class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler : MulticastDelegate {
    public DataGridViewCellContextMenuStripNeededEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellContextMenuStripNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellContextMenuStripNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewCellConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs : DataGridViewCellEventArgs {
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    public string ErrorText { get; public set; }
    internal DataGridViewCellErrorTextNeededEventArgs(int columnIndex, int rowIndex, string errorText);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
}
public class System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler : MulticastDelegate {
    public DataGridViewCellErrorTextNeededEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellErrorTextNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellErrorTextNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    [NullableContextAttribute("1")]
internal DataGridViewCellEventArgs(DataGridViewCell dataGridViewCell);
    public DataGridViewCellEventArgs(int columnIndex, int rowIndex);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellEventHandler : MulticastDelegate {
    public DataGridViewCellEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellFormattingEventArgs : ConvertEventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewCellStyle <CellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FormattingApplied>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public DataGridViewCellStyle CellStyle { get; public set; }
    public int ColumnIndex { get; }
    public bool FormattingApplied { get; public set; }
    public int RowIndex { get; }
    public DataGridViewCellFormattingEventArgs(int columnIndex, int rowIndex, object value, Type desiredType, DataGridViewCellStyle cellStyle);
    [CompilerGeneratedAttribute]
public DataGridViewCellStyle get_CellStyle();
    [CompilerGeneratedAttribute]
public void set_CellStyle(DataGridViewCellStyle value);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public bool get_FormattingApplied();
    [CompilerGeneratedAttribute]
public void set_FormattingApplied(bool value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellFormattingEventHandler : MulticastDelegate {
    public DataGridViewCellFormattingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellFormattingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellFormattingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.DataGridViewCellLinkedList : object {
    [NullableAttribute("2")]
private DataGridViewCellLinkedListElement _lastAccessedElement;
    [NullableAttribute("2")]
private DataGridViewCellLinkedListElement _headElement;
    private int _count;
    private int _lastAccessedIndex;
    public DataGridViewCell Item { get; }
    public int Count { get; }
    public DataGridViewCell HeadCell { get; }
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public DataGridViewCell get_Item(int index);
    public int get_Count();
    public DataGridViewCell get_HeadCell();
    public void Add(DataGridViewCell dataGridViewCell);
    public void Clear();
    public bool Contains(DataGridViewCell dataGridViewCell);
    public bool Remove(DataGridViewCell dataGridViewCell);
    public int RemoveAllCellsAtBand(bool column, int bandIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewCellLinkedListElement : object {
    private DataGridViewCell dataGridViewCell;
    [NullableAttribute("2")]
private DataGridViewCellLinkedListElement next;
    public DataGridViewCell DataGridViewCell { get; }
    [NullableAttribute("2")]
public DataGridViewCellLinkedListElement Next { get; public set; }
    public DataGridViewCellLinkedListElement(DataGridViewCell dataGridViewCell);
    public DataGridViewCell get_DataGridViewCell();
    [NullableContextAttribute("2")]
public DataGridViewCellLinkedListElement get_Next();
    [NullableContextAttribute("2")]
public void set_Next(DataGridViewCellLinkedListElement value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewCellLinkedListEnumerator : object {
    private DataGridViewCellLinkedListElement _headElement;
    private DataGridViewCellLinkedListElement _current;
    private bool _reset;
    [NullableAttribute("1")]
private object System.Collections.IEnumerator.Current { get; }
    public DataGridViewCellLinkedListEnumerator(DataGridViewCellLinkedListElement headElement);
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Windows.Forms.DataGridViewCellMouseEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    [NullableContextAttribute("2")]
public DataGridViewCellMouseEventArgs(int columnIndex, int rowIndex, int localX, int localY, MouseEventArgs e);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellMouseEventHandler : MulticastDelegate {
    public DataGridViewCellMouseEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellMouseEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellMouseEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellPaintingEventArgs : HandledEventArgs {
    [NullableAttribute("1")]
private DataGridView _dataGridView;
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewAdvancedBorderStyle <AdvancedBorderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <CellBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClipBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FormattedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewCellStyle <CellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewPaintParts <PaintParts>k__BackingField;
    public Graphics Graphics { get; private set; }
    public DataGridViewAdvancedBorderStyle AdvancedBorderStyle { get; private set; }
    public Rectangle CellBounds { get; private set; }
    public Rectangle ClipBounds { get; private set; }
    public int RowIndex { get; private set; }
    public int ColumnIndex { get; private set; }
    public DataGridViewElementStates State { get; private set; }
    public object Value { get; private set; }
    public object FormattedValue { get; private set; }
    public string ErrorText { get; private set; }
    public DataGridViewCellStyle CellStyle { get; private set; }
    public DataGridViewPaintParts PaintParts { get; private set; }
    public DataGridViewCellPaintingEventArgs(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, int columnIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    [NullableContextAttribute("1")]
internal DataGridViewCellPaintingEventArgs(DataGridView dataGridView);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
private void set_Graphics(Graphics value);
    [CompilerGeneratedAttribute]
public DataGridViewAdvancedBorderStyle get_AdvancedBorderStyle();
    [CompilerGeneratedAttribute]
private void set_AdvancedBorderStyle(DataGridViewAdvancedBorderStyle value);
    [CompilerGeneratedAttribute]
public Rectangle get_CellBounds();
    [CompilerGeneratedAttribute]
private void set_CellBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClipBounds();
    [CompilerGeneratedAttribute]
private void set_ClipBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
private void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
private void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public DataGridViewElementStates get_State();
    [CompilerGeneratedAttribute]
private void set_State(DataGridViewElementStates value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    [CompilerGeneratedAttribute]
public object get_FormattedValue();
    [CompilerGeneratedAttribute]
private void set_FormattedValue(object value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
private void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public DataGridViewCellStyle get_CellStyle();
    [CompilerGeneratedAttribute]
private void set_CellStyle(DataGridViewCellStyle value);
    [CompilerGeneratedAttribute]
public DataGridViewPaintParts get_PaintParts();
    [CompilerGeneratedAttribute]
private void set_PaintParts(DataGridViewPaintParts value);
    public void Paint(Rectangle clipBounds, DataGridViewPaintParts paintParts);
    public void PaintBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground);
    public void PaintContent(Rectangle clipBounds);
    [NullableContextAttribute("1")]
internal void SetProperties(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, int columnIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
}
public class System.Windows.Forms.DataGridViewCellPaintingEventHandler : MulticastDelegate {
    public DataGridViewCellPaintingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellPaintingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellPaintingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellParsingEventArgs : ConvertEventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewCellStyle <InheritedCellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParsingApplied>k__BackingField;
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public DataGridViewCellStyle InheritedCellStyle { get; public set; }
    public bool ParsingApplied { get; public set; }
    public DataGridViewCellParsingEventArgs(int rowIndex, int columnIndex, object value, Type desiredType, DataGridViewCellStyle inheritedCellStyle);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public DataGridViewCellStyle get_InheritedCellStyle();
    [CompilerGeneratedAttribute]
public void set_InheritedCellStyle(DataGridViewCellStyle value);
    [CompilerGeneratedAttribute]
public bool get_ParsingApplied();
    [CompilerGeneratedAttribute]
public void set_ParsingApplied(bool value);
}
public class System.Windows.Forms.DataGridViewCellParsingEventHandler : MulticastDelegate {
    public DataGridViewCellParsingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellParsingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellParsingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewCell <Cell>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <StateChanged>k__BackingField;
    public DataGridViewCell Cell { get; }
    public DataGridViewElementStates StateChanged { get; }
    public DataGridViewCellStateChangedEventArgs(DataGridViewCell dataGridViewCell, DataGridViewElementStates stateChanged);
    [CompilerGeneratedAttribute]
public DataGridViewCell get_Cell();
    [CompilerGeneratedAttribute]
public DataGridViewElementStates get_StateChanged();
}
public class System.Windows.Forms.DataGridViewCellStateChangedEventHandler : MulticastDelegate {
    public DataGridViewCellStateChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("System.Windows.Forms.DataGridViewCellStyleConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataGridViewCellStyleEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Windows.Forms.DataGridViewCellStyle : object {
    private static int PropAlignment;
    private static int PropBackColor;
    private static int PropDataSourceNullValue;
    private static int PropFont;
    private static int PropForeColor;
    private static int PropFormat;
    private static int PropFormatProvider;
    private static int PropNullValue;
    private static int PropPadding;
    private static int PropSelectionBackColor;
    private static int PropSelectionForeColor;
    private static int PropTag;
    private static int PropWrapMode;
    private DataGridViewCellStyleScopes scope;
    private PropertyStore propertyStore;
    private DataGridView dataGridView;
    [SRDescriptionAttribute("DataGridViewCellStyleAlignmentDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public DataGridViewContentAlignment Alignment { get; public set; }
    unknown DataGridViewContentAlignment AlignmentInternal {internal set; }
    [SRCategoryAttribute("CatAppearance")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataSourceNullValue { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.FormatStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CatBehavior")]
[EditorBrowsableAttribute("2")]
public string Format { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public IFormatProvider FormatProvider { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsDataSourceNullValueDefault { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsFormatProviderDefault { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsNullValueDefault { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[SRCategoryAttribute("CatData")]
public object NullValue { get; public set; }
    [SRCategoryAttribute("CatLayout")]
public Padding Padding { get; public set; }
    unknown Padding PaddingInternal {internal set; }
    internal PropertyStore Properties { get; }
    internal DataGridViewCellStyleScopes Scope { get; internal set; }
    [SRCategoryAttribute("CatAppearance")]
public Color SelectionBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Color SelectionForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public DataGridViewTriState WrapMode { get; public set; }
    unknown DataGridViewTriState WrapModeInternal {internal set; }
    public DataGridViewCellStyle(DataGridViewCellStyle dataGridViewCellStyle);
    private static DataGridViewCellStyle();
    public DataGridViewContentAlignment get_Alignment();
    public void set_Alignment(DataGridViewContentAlignment value);
    internal void set_AlignmentInternal(DataGridViewContentAlignment value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public object get_DataSourceNullValue();
    public void set_DataSourceNullValue(object value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public string get_Format();
    public void set_Format(string value);
    public IFormatProvider get_FormatProvider();
    public void set_FormatProvider(IFormatProvider value);
    public bool get_IsDataSourceNullValueDefault();
    public bool get_IsFormatProviderDefault();
    public bool get_IsNullValueDefault();
    public object get_NullValue();
    public void set_NullValue(object value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    internal void set_PaddingInternal(Padding value);
    internal PropertyStore get_Properties();
    internal DataGridViewCellStyleScopes get_Scope();
    internal void set_Scope(DataGridViewCellStyleScopes value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    public object get_Tag();
    public void set_Tag(object value);
    public DataGridViewTriState get_WrapMode();
    public void set_WrapMode(DataGridViewTriState value);
    internal void set_WrapModeInternal(DataGridViewTriState value);
    internal void AddScope(DataGridView dataGridView, DataGridViewCellStyleScopes scope);
    public virtual void ApplyStyle(DataGridViewCellStyle dataGridViewCellStyle);
    public virtual DataGridViewCellStyle Clone();
    public virtual bool Equals(object o);
    internal DataGridViewCellStyleDifferences GetDifferencesFrom(DataGridViewCellStyle dgvcs);
    public virtual int GetHashCode();
    private void OnPropertyChanged(DataGridViewCellStylePropertyInternal property);
    internal void RemoveScope(DataGridViewCellStyleScopes scope);
    private bool ShouldSerializeBackColor();
    private bool ShouldSerializeFont();
    private bool ShouldSerializeForeColor();
    private bool ShouldSerializeFormatProvider();
    private bool ShouldSerializePadding();
    private bool ShouldSerializeSelectionBackColor();
    private bool ShouldSerializeSelectionForeColor();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
}
internal class System.Windows.Forms.DataGridViewCellStyleChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ChangeAffectsPreferredSize>k__BackingField;
    public bool ChangeAffectsPreferredSize { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ChangeAffectsPreferredSize();
    [CompilerGeneratedAttribute]
public void set_ChangeAffectsPreferredSize(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewCellStyle <CellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ChangeAffectsPreferredSize>k__BackingField;
    public DataGridViewCellStyle CellStyle { get; }
    public DataGridViewCellStyleScopes CellStyleScope { get; }
    internal bool ChangeAffectsPreferredSize { get; }
    internal DataGridViewCellStyleContentChangedEventArgs(DataGridViewCellStyle dataGridViewCellStyle, bool changeAffectsPreferredSize);
    [CompilerGeneratedAttribute]
public DataGridViewCellStyle get_CellStyle();
    public DataGridViewCellStyleScopes get_CellStyleScope();
    [CompilerGeneratedAttribute]
internal bool get_ChangeAffectsPreferredSize();
}
public class System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler : MulticastDelegate {
    public DataGridViewCellStyleContentChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellStyleContentChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellStyleContentChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellStyleConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum System.Windows.Forms.DataGridViewCellStyleDifferences : Enum {
    public int value__;
    public static DataGridViewCellStyleDifferences None;
    public static DataGridViewCellStyleDifferences AffectPreferredSize;
    public static DataGridViewCellStyleDifferences DoNotAffectPreferredSize;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewCellStyleScopes : Enum {
    public int value__;
    public static DataGridViewCellStyleScopes None;
    public static DataGridViewCellStyleScopes Cell;
    public static DataGridViewCellStyleScopes Column;
    public static DataGridViewCellStyleScopes Row;
    public static DataGridViewCellStyleScopes DataGridView;
    public static DataGridViewCellStyleScopes ColumnHeaders;
    public static DataGridViewCellStyleScopes RowHeaders;
    public static DataGridViewCellStyleScopes Rows;
    public static DataGridViewCellStyleScopes AlternatingRows;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs : DataGridViewCellEventArgs {
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    public string ToolTipText { get; public set; }
    internal DataGridViewCellToolTipTextNeededEventArgs(int columnIndex, int rowIndex, string toolTipText);
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
public void set_ToolTipText(string value);
}
public class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler : MulticastDelegate {
    public DataGridViewCellToolTipTextNeededEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellToolTipTextNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellToolTipTextNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellValidatingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FormattedValue>k__BackingField;
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    public object FormattedValue { get; }
    internal DataGridViewCellValidatingEventArgs(int columnIndex, int rowIndex, object formattedValue);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public object get_FormattedValue();
}
public class System.Windows.Forms.DataGridViewCellValidatingEventHandler : MulticastDelegate {
    public DataGridViewCellValidatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellValidatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellValidatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewCellValueEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public int ColumnIndex { get; private set; }
    public int RowIndex { get; private set; }
    public object Value { get; public set; }
    public DataGridViewCellValueEventArgs(int columnIndex, int rowIndex);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
private void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
private void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    internal void SetProperties(int columnIndex, int rowIndex, object value);
}
public class System.Windows.Forms.DataGridViewCellValueEventHandler : MulticastDelegate {
    public DataGridViewCellValueEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewCellValueEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellValueEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DynamicallyAccessedMembersAttribute("1")]
public class System.Windows.Forms.DataGridViewCheckBoxCell : DataGridViewCell {
    private static DataGridViewContentAlignment AnyLeft;
    private static DataGridViewContentAlignment AnyRight;
    private static DataGridViewContentAlignment AnyCenter;
    private static DataGridViewContentAlignment AnyBottom;
    private static DataGridViewContentAlignment AnyMiddle;
    private static VisualStyleElement CheckBoxElement;
    private static int PropButtonCellState;
    private static int PropTrueValue;
    private static int PropFalseValue;
    private static int PropFlatStyle;
    private static int PropIndeterminateValue;
    private static Bitmap checkImage;
    private static byte DATAGRIDVIEWCHECKBOXCELL_threeState;
    private static byte DATAGRIDVIEWCHECKBOXCELL_valueChanged;
    private static byte DATAGRIDVIEWCHECKBOXCELL_checked;
    private static byte DATAGRIDVIEWCHECKBOXCELL_indeterminate;
    private static byte DATAGRIDVIEWCHECKBOXCELL_margin;
    private byte flags;
    private static bool mouseInContentBounds;
    private static Type defaultCheckStateType;
    private static Type defaultBooleanType;
    private static Type cellType;
    public object EditingCellFormattedValue { get; public set; }
    public bool EditingCellValueChanged { get; public set; }
    private ButtonState ButtonState { get; private set; }
    [DynamicallyAccessedMembersAttribute("8193")]
public Type EditType { get; }
    [DefaultValueAttribute("")]
public object FalseValue { get; public set; }
    unknown object FalseValueInternal {internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FlatStyle FlatStyle { get; public set; }
    unknown FlatStyle FlatStyleInternal {internal set; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("")]
public object IndeterminateValue { get; public set; }
    unknown object IndeterminateValueInternal {internal set; }
    [DefaultValueAttribute("False")]
public bool ThreeState { get; public set; }
    unknown bool ThreeStateInternal {internal set; }
    private CheckState CheckState { get; }
    [DefaultValueAttribute("")]
public object TrueValue { get; public set; }
    unknown object TrueValueInternal {internal set; }
    public Type ValueType { get; public set; }
    public DataGridViewCheckBoxCell(bool threeState);
    private static DataGridViewCheckBoxCell();
    public virtual object get_EditingCellFormattedValue();
    public virtual void set_EditingCellFormattedValue(object value);
    public virtual bool get_EditingCellValueChanged();
    public virtual void set_EditingCellValueChanged(bool value);
    public virtual object GetEditingCellFormattedValue(DataGridViewDataErrorContexts context);
    public virtual void PrepareEditingCellForEdit(bool selectAll);
    private ButtonState get_ButtonState();
    private void set_ButtonState(ButtonState value);
    public virtual Type get_EditType();
    public object get_FalseValue();
    public void set_FalseValue(object value);
    internal void set_FalseValueInternal(object value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    internal void set_FlatStyleInternal(FlatStyle value);
    public virtual Type get_FormattedValueType();
    public object get_IndeterminateValue();
    public void set_IndeterminateValue(object value);
    internal void set_IndeterminateValueInternal(object value);
    public bool get_ThreeState();
    public void set_ThreeState(bool value);
    internal void set_ThreeStateInternal(bool value);
    private CheckState get_CheckState();
    public object get_TrueValue();
    public void set_TrueValue(object value);
    internal void set_TrueValueInternal(object value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual object Clone();
    private bool CommonContentClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual bool ContentClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual bool ContentDoubleClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    private protected virtual string GetDefaultToolTipText();
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    private void NotifyDataGridViewOfValueChange();
    private void OnCommonContentClick(DataGridViewCellEventArgs e);
    protected virtual void OnContentClick(DataGridViewCellEventArgs e);
    protected virtual void OnContentDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e, int rowIndex);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    private void NotifyUiaClient();
    private void NotifyMSAAClient(int columnIndex, int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics g, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    public virtual object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    private bool SwitchFormattedValue();
    public virtual string ToString();
    private void UpdateButtonState(ButtonState newButtonState, int rowIndex);
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewCheckBoxColumn", "DataGridViewCheckBoxColumn")]
public class System.Windows.Forms.DataGridViewCheckBoxColumn : DataGridViewColumn {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    private DataGridViewCheckBoxCell CheckBoxCellTemplate { get; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnFalseValueDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object FalseValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnIndeterminateValueDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object IndeterminateValue { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnThreeStateDescr")]
public bool ThreeState { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnTrueValueDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object TrueValue { get; public set; }
    public DataGridViewCheckBoxColumn(bool threeState);
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    private DataGridViewCheckBoxCell get_CheckBoxCellTemplate();
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public object get_IndeterminateValue();
    public void set_IndeterminateValue(object value);
    public bool get_ThreeState();
    public void set_ThreeState(bool value);
    public object get_TrueValue();
    public void set_TrueValue(object value);
    private bool ShouldSerializeDefaultCellStyle();
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewClipboardCopyMode : Enum {
    public int value__;
    public static DataGridViewClipboardCopyMode Disable;
    public static DataGridViewClipboardCopyMode EnableWithAutoHeaderText;
    public static DataGridViewClipboardCopyMode EnableWithoutHeaderText;
    public static DataGridViewClipboardCopyMode EnableAlwaysIncludeHeaderText;
}
[DesignerAttribute("System.Windows.Forms.Design.DataGridViewColumnDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignTimeVisibleAttribute("False")]
[DynamicallyAccessedMembersAttribute("1")]
[ToolboxItemAttribute("False")]
[TypeConverterAttribute("System.Windows.Forms.DataGridViewColumnConverter")]
public class System.Windows.Forms.DataGridViewColumn : DataGridViewBand {
    private static float DefaultFillWeight;
    private static int DefaultWidth;
    private static int DefaultMinColumnThickness;
    private static byte AutomaticSort;
    private static byte ProgrammaticSort;
    private static byte ColumnIsDataBound;
    private static byte ColumnIsBrowsableInternal;
    private static byte DisplayIndexHasChangedInternal;
    private byte _flags;
    private string _name;
    private int _displayIndex;
    private float _fillWeight;
    private float _usedFillWeight;
    private DataGridViewAutoSizeColumnMode _autoSizeMode;
    private string _dataPropertyName;
    private EventHandler _disposed;
    private static int s_propDataGridViewColumnValueType;
    [CompilerGeneratedAttribute]
private TypeConverter <BoundColumnConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BoundColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewCell <CellTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DesiredFillWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DesiredMinimumWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private ISite <Site>k__BackingField;
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridViewColumn_AutoSizeModeDescr")]
[RefreshPropertiesAttribute("2")]
public DataGridViewAutoSizeColumnMode AutoSizeMode { get; public set; }
    internal TypeConverter BoundColumnConverter { get; internal set; }
    internal int BoundColumnIndex { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Type CellType { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnContextMenuStripDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataGridViewColumnDataPropertyNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DataGridView_ColumnDataPropertyNameDescr")]
[SRCategoryAttribute("CatData")]
public string DataPropertyName { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    internal int DesiredFillWidth { get; internal set; }
    internal int DesiredMinimumWidth { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int DisplayIndex { get; public set; }
    internal bool DisplayIndexHasChanged { get; internal set; }
    unknown int DisplayIndexInternal {internal set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ColumnDividerWidthDescr")]
public int DividerWidth { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DataGridViewColumn_FillWeightDescr")]
public float FillWeight { get; public set; }
    unknown float FillWeightInternal {internal set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ColumnFrozenDescr")]
public bool Frozen { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewColumnHeaderCell HeaderCell { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnHeaderTextDescr")]
[LocalizableAttribute("True")]
public string HeaderText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewAutoSizeColumnMode InheritedAutoSizeMode { get; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle InheritedStyle { get; }
    internal bool IsBrowsableInternal { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsDataBound { get; }
    internal bool IsDataBoundInternal { get; internal set; }
    [DefaultValueAttribute("5")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ColumnMinimumWidthDescr")]
[RefreshPropertiesAttribute("2")]
public int MinimumWidth { get; public set; }
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnResizableDescr")]
public DataGridViewTriState Resizable { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ISite Site { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnSortModeDescr")]
public DataGridViewColumnSortMode SortMode { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnToolTipTextDescr")]
public string ToolTipText { get; public set; }
    internal float UsedFillWeight { get; internal set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Type ValueType { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnVisibleDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridView_ColumnWidthDescr")]
[RefreshPropertiesAttribute("2")]
public int Width { get; public set; }
    public DataGridViewColumn(DataGridViewCell cellTemplate);
    private static DataGridViewColumn();
    private static int ScaleToCurrentDpi(int value);
    public DataGridViewAutoSizeColumnMode get_AutoSizeMode();
    public void set_AutoSizeMode(DataGridViewAutoSizeColumnMode value);
    [CompilerGeneratedAttribute]
internal TypeConverter get_BoundColumnConverter();
    [CompilerGeneratedAttribute]
internal void set_BoundColumnConverter(TypeConverter value);
    [CompilerGeneratedAttribute]
internal int get_BoundColumnIndex();
    [CompilerGeneratedAttribute]
internal void set_BoundColumnIndex(int value);
    [CompilerGeneratedAttribute]
public virtual DataGridViewCell get_CellTemplate();
    [CompilerGeneratedAttribute]
public virtual void set_CellTemplate(DataGridViewCell value);
    public Type get_CellType();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public string get_DataPropertyName();
    public void set_DataPropertyName(string value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    private bool ShouldSerializeDefaultCellStyle();
    [CompilerGeneratedAttribute]
internal int get_DesiredFillWidth();
    [CompilerGeneratedAttribute]
internal void set_DesiredFillWidth(int value);
    [CompilerGeneratedAttribute]
internal int get_DesiredMinimumWidth();
    [CompilerGeneratedAttribute]
internal void set_DesiredMinimumWidth(int value);
    public int get_DisplayIndex();
    public void set_DisplayIndex(int value);
    internal bool get_DisplayIndexHasChanged();
    internal void set_DisplayIndexHasChanged(bool value);
    internal void set_DisplayIndexInternal(int value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    public int get_DividerWidth();
    public void set_DividerWidth(int value);
    public float get_FillWeight();
    public void set_FillWeight(float value);
    internal void set_FillWeightInternal(float value);
    public virtual bool get_Frozen();
    public virtual void set_Frozen(bool value);
    public DataGridViewColumnHeaderCell get_HeaderCell();
    public void set_HeaderCell(DataGridViewColumnHeaderCell value);
    public string get_HeaderText();
    public void set_HeaderText(string value);
    private bool ShouldSerializeHeaderText();
    public DataGridViewAutoSizeColumnMode get_InheritedAutoSizeMode();
    public virtual DataGridViewCellStyle get_InheritedStyle();
    internal bool get_IsBrowsableInternal();
    internal void set_IsBrowsableInternal(bool value);
    public bool get_IsDataBound();
    internal bool get_IsDataBoundInternal();
    internal void set_IsDataBoundInternal(bool value);
    public int get_MinimumWidth();
    public void set_MinimumWidth(int value);
    public string get_Name();
    public void set_Name(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual DataGridViewTriState get_Resizable();
    public virtual void set_Resizable(DataGridViewTriState value);
    [CompilerGeneratedAttribute]
public sealed virtual ISite get_Site();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Site(ISite value);
    public DataGridViewColumnSortMode get_SortMode();
    public void set_SortMode(DataGridViewColumnSortMode value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    internal float get_UsedFillWeight();
    internal void set_UsedFillWeight(float value);
    public Type get_ValueType();
    public void set_ValueType(Type value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public int get_Width();
    public void set_Width(int value);
    public virtual object Clone();
    private protected void CloneInternal(DataGridViewColumn dataGridViewColumn);
    protected virtual void Dispose(bool disposing);
    internal DataGridViewAutoSizeColumnMode GetInheritedAutoSizeMode(DataGridView dataGridView);
    public virtual int GetPreferredWidth(DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewColumnCollection : BaseCollection {
    private CollectionChangeEventHandler _onCollectionChanged;
    private List`1<DataGridViewColumn> _items;
    private List`1<DataGridViewColumn> _itemsSorted;
    private int _lastAccessedSortedIndex;
    private int _columnCountsVisible;
    private int _columnCountsVisibleSelected;
    private int _columnsWidthVisible;
    private int _columnsWidthVisibleFrozen;
    private static ColumnOrderComparer s_columnOrderComparer;
    [CompilerGeneratedAttribute]
private DataGridView <DataGridView>k__BackingField;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal static IComparer`1<DataGridViewColumn> ColumnCollectionOrderComparer { get; }
    protected ArrayList List { get; }
    protected DataGridView DataGridView { get; }
    public DataGridViewColumn Item { get; }
    public DataGridViewColumn Item { get; }
    public DataGridViewColumnCollection(DataGridView dataGridView);
    private static DataGridViewColumnCollection();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal static IComparer`1<DataGridViewColumn> get_ColumnCollectionOrderComparer();
    protected virtual ArrayList get_List();
    [CompilerGeneratedAttribute]
protected DataGridView get_DataGridView();
    public DataGridViewColumn get_Item(int index);
    public DataGridViewColumn get_Item(string columnName);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal int ActualDisplayIndexToColumnIndex(int actualDisplayIndex, DataGridViewElementStates includeFilter);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add(string columnName, string headerText);
    public virtual int Add(DataGridViewColumn dataGridViewColumn);
    public virtual void AddRange(DataGridViewColumn[] dataGridViewColumns);
    public virtual void Clear();
    internal int ColumnIndexToActualDisplayIndex(int columnIndex, DataGridViewElementStates includeFilter);
    public virtual bool Contains(DataGridViewColumn dataGridViewColumn);
    public virtual bool Contains(string columnName);
    public void CopyTo(DataGridViewColumn[] array, int index);
    internal bool DisplayInOrder(int columnIndex1, int columnIndex2);
    internal DataGridViewColumn GetColumnAtDisplayIndex(int displayIndex);
    internal int GetVisibleIndex(DataGridViewColumn column);
    public int GetColumnCount(DataGridViewElementStates includeFilter);
    internal int GetColumnCount(DataGridViewElementStates includeFilter, int fromColumnIndex, int toColumnIndex);
    private int GetColumnSortedIndex(DataGridViewColumn dataGridViewColumn);
    internal float GetColumnsFillWeight(DataGridViewElementStates includeFilter);
    public int GetColumnsWidth(DataGridViewElementStates includeFilter);
    public DataGridViewColumn GetFirstColumn(DataGridViewElementStates includeFilter);
    public DataGridViewColumn GetFirstColumn(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public DataGridViewColumn GetLastColumn(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public DataGridViewColumn GetNextColumn(DataGridViewColumn dataGridViewColumnStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public DataGridViewColumn GetPreviousColumn(DataGridViewColumn dataGridViewColumnStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int IndexOf(DataGridViewColumn dataGridViewColumn);
    public virtual void Insert(int columnIndex, DataGridViewColumn dataGridViewColumn);
    internal void InvalidateCachedColumnCount(DataGridViewElementStates includeFilter);
    internal void InvalidateCachedColumnCounts();
    internal void InvalidateCachedColumnsOrder();
    internal void InvalidateCachedColumnsWidth(DataGridViewElementStates includeFilter);
    internal void InvalidateCachedColumnsWidths();
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs e);
    private void OnCollectionChanged(CollectionChangeEventArgs ccea, bool changeIsInsertion, Point newCurrentCell);
    private void OnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea);
    private void OnCollectionChanged_PostNotification(CollectionChangeEventArgs ccea, bool changeIsInsertion, Point newCurrentCell);
    public virtual void Remove(DataGridViewColumn dataGridViewColumn);
    public virtual void Remove(string columnName);
    public virtual void RemoveAt(int index);
    internal void RemoveAtInternal(int index, bool force);
    private void UpdateColumnCaches(DataGridViewColumn dataGridViewColumn, bool adding);
    private void UpdateColumnOrderCache();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewColumnConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.Windows.Forms.DataGridViewColumnDesignTimeVisibleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    public static DataGridViewColumnDesignTimeVisibleAttribute Yes;
    public static DataGridViewColumnDesignTimeVisibleAttribute No;
    public static DataGridViewColumnDesignTimeVisibleAttribute Default;
    public bool Visible { get; }
    public DataGridViewColumnDesignTimeVisibleAttribute(bool visible);
    private static DataGridViewColumnDesignTimeVisibleAttribute();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs : HandledMouseEventArgs {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    public int ColumnIndex { get; }
    [NullableContextAttribute("2")]
public DataGridViewColumnDividerDoubleClickEventArgs(int columnIndex, HandledMouseEventArgs e);
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
}
public class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler : MulticastDelegate {
    public DataGridViewColumnDividerDoubleClickEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewColumnDividerDoubleClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewColumnDividerDoubleClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewColumnEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewColumn <Column>k__BackingField;
    public DataGridViewColumn Column { get; }
    public DataGridViewColumnEventArgs(DataGridViewColumn dataGridViewColumn);
    [CompilerGeneratedAttribute]
public DataGridViewColumn get_Column();
}
public class System.Windows.Forms.DataGridViewColumnEventHandler : MulticastDelegate {
    public DataGridViewColumnEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewColumnEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewColumnEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewColumnHeaderCell : DataGridViewHeaderCell {
    private static VisualStyleElement s_headerElement;
    private static byte SortGlyphSeparatorWidth;
    private static byte SortGlyphHorizontalMargin;
    private static byte SortGlyphWidth;
    private static byte SortGlyphHeight;
    private static byte HorizontalTextMarginLeft;
    private static byte HorizontalTextMarginRight;
    private static byte VerticalMargin;
    private static bool s_isScalingInitialized;
    private static byte s_sortGlyphSeparatorWidth;
    private static byte s_sortGlyphHorizontalMargin;
    private static byte s_sortGlyphWidth;
    private static byte s_sortGlyphHeight;
    private static Type s_cellType;
    private SortOrder _sortGlyphDirection;
    internal bool ContainsLocalValue { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public SortOrder SortGlyphDirection { get; public set; }
    unknown SortOrder SortGlyphDirectionInternal {internal set; }
    private static DataGridViewColumnHeaderCell();
    internal bool get_ContainsLocalValue();
    public SortOrder get_SortGlyphDirection();
    public void set_SortGlyphDirection(SortOrder value);
    internal void set_SortGlyphDirectionInternal(SortOrder value);
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics g, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object formattedValue, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool paint);
    private bool IsHighlighted();
    protected virtual bool SetValue(int rowIndex, object value);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode : Enum {
    public int value__;
    public static DataGridViewColumnHeadersHeightSizeMode EnableResizing;
    public static DataGridViewColumnHeadersHeightSizeMode DisableResizing;
    public static DataGridViewColumnHeadersHeightSizeMode AutoSize;
}
public enum System.Windows.Forms.DataGridViewColumnSortMode : Enum {
    public int value__;
    public static DataGridViewColumnSortMode NotSortable;
    public static DataGridViewColumnSortMode Automatic;
    public static DataGridViewColumnSortMode Programmatic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewColumnStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <StateChanged>k__BackingField;
    public DataGridViewColumn Column { get; }
    public DataGridViewElementStates StateChanged { get; }
    public DataGridViewColumnStateChangedEventArgs(DataGridViewColumn dataGridViewColumn, DataGridViewElementStates stateChanged);
    [CompilerGeneratedAttribute]
public DataGridViewColumn get_Column();
    [CompilerGeneratedAttribute]
public DataGridViewElementStates get_StateChanged();
}
public class System.Windows.Forms.DataGridViewColumnStateChangedEventHandler : MulticastDelegate {
    public DataGridViewColumnStateChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewColumnStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewColumnStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DynamicallyAccessedMembersAttribute("1")]
public class System.Windows.Forms.DataGridViewComboBoxCell : DataGridViewCell {
    private static int s_propComboBoxCellDataSource;
    private static int s_propComboBoxCellDisplayMember;
    private static int s_propComboBoxCellValueMember;
    private static int s_propComboBoxCellItems;
    private static int s_propComboBoxCellDropDownWidth;
    private static int s_propComboBoxCellMaxDropDownItems;
    private static int s_propComboBoxCellEditingComboBox;
    private static int s_propComboBoxCellValueMemberProp;
    private static int s_propComboBoxCellDisplayMemberProp;
    private static int s_propComboBoxCellDataManager;
    private static int s_propComboBoxCellColumnTemplate;
    private static int s_propComboBoxCellFlatStyle;
    private static int s_propComboBoxCellDisplayStyle;
    private static int s_propComboBoxCellDisplayStyleForCurrentCellOnly;
    private static byte Margin;
    private static byte NonXPTriangleHeight;
    private static byte NonXPTriangleWidth;
    private static byte HorizontalTextMarginLeft;
    private static byte VerticalTextMarginTopWithWrapping;
    private static byte VerticalTextMarginTopWithoutWrapping;
    private static byte IgnoreNextMouseClick;
    private static byte CellSorted;
    private static byte CellCreateItemsFromDataSource;
    private static byte CellAutoComplete;
    private static byte DataSourceInitializedHookedUp;
    private static byte DropDownHookedUp;
    internal static int DefaultMaxDropDownItems;
    private static Type s_defaultFormattedValueType;
    [DynamicallyAccessedMembersAttribute("8193")]
private static Type s_defaultEditType;
    private static Type s_defaultValueType;
    private static Type s_cellType;
    private byte _flags;
    private static bool s_mouseInDropDownButtonBounds;
    private static int s_cachedDropDownWidth;
    private static bool s_isScalingInitialized;
    private static int Offset2Pixels;
    private static int s_offset2X;
    private static int s_offset2Y;
    private static byte s_nonXPTriangleHeight;
    private static byte s_nonXPTriangleWidth;
    [DefaultValueAttribute("True")]
public bool AutoComplete { get; public set; }
    private CurrencyManager DataManager { get; private set; }
    public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
public string DisplayMember { get; public set; }
    unknown string DisplayMemberInternal {private set; }
    private PropertyDescriptor DisplayMemberProperty { get; private set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewComboBoxDisplayStyle DisplayStyle { get; public set; }
    unknown DataGridViewComboBoxDisplayStyle DisplayStyleInternal {internal set; }
    [DefaultValueAttribute("False")]
public bool DisplayStyleForCurrentCellOnly { get; public set; }
    unknown bool DisplayStyleForCurrentCellOnlyInternal {internal set; }
    private Type DisplayType { get; }
    private TypeConverter DisplayTypeConverter { get; }
    [DefaultValueAttribute("1")]
public int DropDownWidth { get; public set; }
    private DataGridViewComboBoxEditingControl EditingComboBox { get; private set; }
    [DynamicallyAccessedMembersAttribute("8193")]
public Type EditType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FlatStyle FlatStyle { get; public set; }
    unknown FlatStyle FlatStyleInternal {internal set; }
    public Type FormattedValueType { get; }
    internal bool HasItems { get; }
    [BrowsableAttribute("False")]
public ObjectCollection Items { get; }
    [DefaultValueAttribute("8")]
public int MaxDropDownItems { get; public set; }
    private bool PaintXPThemes { get; }
    private static bool PostXPThemesExist { get; }
    [DefaultValueAttribute("False")]
public bool Sorted { get; public set; }
    internal DataGridViewComboBoxColumn TemplateComboBoxColumn { get; internal set; }
    [DefaultValueAttribute("")]
public string ValueMember { get; public set; }
    unknown string ValueMemberInternal {private set; }
    private PropertyDescriptor ValueMemberProperty { get; private set; }
    public Type ValueType { get; }
    private bool CreateItemsFromDataSource { get; private set; }
    private static DataGridViewComboBoxCell();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual bool get_AutoComplete();
    public virtual void set_AutoComplete(bool value);
    private CurrencyManager get_DataManager();
    private void set_DataManager(CurrencyManager value);
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DisplayMember();
    public virtual void set_DisplayMember(string value);
    private void set_DisplayMemberInternal(string value);
    private PropertyDescriptor get_DisplayMemberProperty();
    private void set_DisplayMemberProperty(PropertyDescriptor value);
    public DataGridViewComboBoxDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(DataGridViewComboBoxDisplayStyle value);
    internal void set_DisplayStyleInternal(DataGridViewComboBoxDisplayStyle value);
    public bool get_DisplayStyleForCurrentCellOnly();
    public void set_DisplayStyleForCurrentCellOnly(bool value);
    internal void set_DisplayStyleForCurrentCellOnlyInternal(bool value);
    private Type get_DisplayType();
    private TypeConverter get_DisplayTypeConverter();
    public virtual int get_DropDownWidth();
    public virtual void set_DropDownWidth(int value);
    private DataGridViewComboBoxEditingControl get_EditingComboBox();
    private void set_EditingComboBox(DataGridViewComboBoxEditingControl value);
    public virtual Type get_EditType();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    internal void set_FlatStyleInternal(FlatStyle value);
    public virtual Type get_FormattedValueType();
    internal bool get_HasItems();
    public virtual ObjectCollection get_Items();
    public virtual int get_MaxDropDownItems();
    public virtual void set_MaxDropDownItems(int value);
    private bool get_PaintXPThemes();
    private static bool get_PostXPThemesExist();
    public virtual bool get_Sorted();
    public virtual void set_Sorted(bool value);
    internal DataGridViewComboBoxColumn get_TemplateComboBoxColumn();
    internal void set_TemplateComboBoxColumn(DataGridViewComboBoxColumn value);
    public virtual string get_ValueMember();
    public virtual void set_ValueMember(string value);
    private void set_ValueMemberInternal(string value);
    private PropertyDescriptor get_ValueMemberProperty();
    private void set_ValueMemberProperty(PropertyDescriptor value);
    public virtual Type get_ValueType();
    internal virtual void CacheEditingControl();
    private void CheckDropDownList(int x, int y, int rowIndex);
    private void CheckNoDataSource();
    private void ComboBox_DropDown(object sender, EventArgs e);
    public virtual object Clone();
    private bool get_CreateItemsFromDataSource();
    private void set_CreateItemsFromDataSource(bool value);
    private void DataSource_Disposed(object sender, EventArgs e);
    private void DataSource_Initialized(object sender, EventArgs e);
    public virtual void DetachEditingControl();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    private CurrencyManager GetDataManager(DataGridView dataGridView);
    private protected virtual string GetDefaultToolTipText();
    private int GetDropDownButtonHeight(Graphics graphics, DataGridViewCellStyle cellStyle);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    internal string GetItemDisplayText(object item);
    internal object GetItemDisplayValue(object item);
    internal ObjectCollection GetItems(DataGridView dataGridView);
    internal object GetItemValue(object item);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    private void InitializeComboBoxText();
    public virtual void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle);
    private void InitializeDisplayMemberPropertyDescriptor(string displayMember);
    private void InitializeValueMemberPropertyDescriptor(string valueMember);
    private object ItemFromComboBoxDataSource(PropertyDescriptor property, object key);
    private object ItemFromComboBoxItems(int rowIndex, string field, object key);
    public virtual bool KeyEntersEditMode(KeyEventArgs e);
    private bool LookupDisplayValue(int rowIndex, object value, Object& displayValue);
    private bool LookupValue(object formattedValue, Object& value);
    protected virtual void OnDataGridViewChanged();
    protected virtual void OnEnter(int rowIndex, bool throughMouseClick);
    private void OnItemsCollectionChanged();
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseEnter(int rowIndex);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    private bool OwnsEditingComboBox(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics g, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, Rectangle& dropDownButtonRect, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool computeDropDownButtonRect, bool paint);
    public virtual object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    internal virtual void ReleaseUiaProvider();
    public virtual string ToString();
    private void UnwireDataSource();
    private void WireDataSource(object dataSource);
}
[DesignerAttribute("System.Windows.Forms.Design.DataGridViewComboBoxColumnDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DynamicallyAccessedMembersAttribute("1")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewComboBoxColumn", "DataGridViewComboBoxColumn")]
public class System.Windows.Forms.DataGridViewComboBoxColumn : DataGridViewColumn {
    private static Type s_columnType;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnAutoCompleteDescr")]
public bool AutoComplete { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    private DataGridViewComboBoxCell ComboBoxCellTemplate { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDataSourceDescr")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDisplayMemberDescr")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string DisplayMember { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDisplayStyleDescr")]
public DataGridViewComboBoxDisplayStyle DisplayStyle { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr")]
public bool DisplayStyleForCurrentCellOnly { get; public set; }
    [DefaultValueAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDropDownWidthDescr")]
public int DropDownWidth { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnItemsDescr")]
public ObjectCollection Items { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnValueMemberDescr")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string ValueMember { get; public set; }
    [DefaultValueAttribute("8")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnMaxDropDownItemsDescr")]
public int MaxDropDownItems { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnSortedDescr")]
public bool Sorted { get; public set; }
    private static DataGridViewComboBoxColumn();
    public bool get_AutoComplete();
    public void set_AutoComplete(bool value);
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    private DataGridViewComboBoxCell get_ComboBoxCellTemplate();
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DisplayMember();
    public void set_DisplayMember(string value);
    public DataGridViewComboBoxDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(DataGridViewComboBoxDisplayStyle value);
    public bool get_DisplayStyleForCurrentCellOnly();
    public void set_DisplayStyleForCurrentCellOnly(bool value);
    public int get_DropDownWidth();
    public void set_DropDownWidth(int value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public ObjectCollection get_Items();
    public string get_ValueMember();
    public void set_ValueMember(string value);
    public int get_MaxDropDownItems();
    public void set_MaxDropDownItems(int value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public virtual object Clone();
    internal void OnItemsCollectionChanged();
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewComboBoxDisplayStyle : Enum {
    public int value__;
    public static DataGridViewComboBoxDisplayStyle ComboBox;
    public static DataGridViewComboBoxDisplayStyle DropDownButton;
    public static DataGridViewComboBoxDisplayStyle Nothing;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewComboBoxEditingControl : ComboBox {
    [NullableAttribute("2")]
private DataGridView _dataGridView;
    private bool _valueChanged;
    private int _rowIndex;
    [NullableAttribute("2")]
public DataGridView EditingControlDataGridView { get; public set; }
    public object EditingControlFormattedValue { get; public set; }
    public int EditingControlRowIndex { get; public set; }
    public bool EditingControlValueChanged { get; public set; }
    public Cursor EditingPanelCursor { get; }
    public bool RepositionEditingControlOnValueChange { get; }
    protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("2")]
public virtual DataGridView get_EditingControlDataGridView();
    [NullableContextAttribute("2")]
public virtual void set_EditingControlDataGridView(DataGridView value);
    public virtual object get_EditingControlFormattedValue();
    public virtual void set_EditingControlFormattedValue(object value);
    public virtual int get_EditingControlRowIndex();
    public virtual void set_EditingControlRowIndex(int value);
    public virtual bool get_EditingControlValueChanged();
    public virtual void set_EditingControlValueChanged(bool value);
    public virtual Cursor get_EditingPanelCursor();
    public virtual bool get_RepositionEditingControlOnValueChange();
    public virtual void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey);
    public virtual object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context);
    public virtual void PrepareEditingControlForEdit(bool selectAll);
    private void NotifyDataGridViewOfValueChange();
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    internal virtual void ReleaseUiaProvider(HWND handle);
}
public enum System.Windows.Forms.DataGridViewContentAlignment : Enum {
    public int value__;
    public static DataGridViewContentAlignment NotSet;
    public static DataGridViewContentAlignment TopLeft;
    public static DataGridViewContentAlignment TopCenter;
    public static DataGridViewContentAlignment TopRight;
    public static DataGridViewContentAlignment MiddleLeft;
    public static DataGridViewContentAlignment MiddleCenter;
    public static DataGridViewContentAlignment MiddleRight;
    public static DataGridViewContentAlignment BottomLeft;
    public static DataGridViewContentAlignment BottomCenter;
    public static DataGridViewContentAlignment BottomRight;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewDataErrorContexts : Enum {
    public int value__;
    public static DataGridViewDataErrorContexts Formatting;
    public static DataGridViewDataErrorContexts Display;
    public static DataGridViewDataErrorContexts PreferredSize;
    public static DataGridViewDataErrorContexts RowDeletion;
    public static DataGridViewDataErrorContexts Parsing;
    public static DataGridViewDataErrorContexts Commit;
    public static DataGridViewDataErrorContexts InitialValueRestoration;
    public static DataGridViewDataErrorContexts LeaveControl;
    public static DataGridViewDataErrorContexts CurrentCellChange;
    public static DataGridViewDataErrorContexts Scroll;
    public static DataGridViewDataErrorContexts ClipboardContent;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewDataErrorEventArgs : DataGridViewCellCancelEventArgs {
    private bool _throwException;
    [CompilerGeneratedAttribute]
private DataGridViewDataErrorContexts <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DataGridViewDataErrorContexts Context { get; }
    public Exception Exception { get; }
    public bool ThrowException { get; public set; }
    public DataGridViewDataErrorEventArgs(Exception exception, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context);
    [CompilerGeneratedAttribute]
public DataGridViewDataErrorContexts get_Context();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
}
public class System.Windows.Forms.DataGridViewDataErrorEventHandler : MulticastDelegate {
    public DataGridViewDataErrorEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewDataErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewDataErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewEditingControlShowingEventArgs : EventArgs {
    private DataGridViewCellStyle _cellStyle;
    [CompilerGeneratedAttribute]
private Control <Control>k__BackingField;
    public Control Control { get; }
    public DataGridViewCellStyle CellStyle { get; public set; }
    public DataGridViewEditingControlShowingEventArgs(Control control, DataGridViewCellStyle cellStyle);
    [CompilerGeneratedAttribute]
public Control get_Control();
    public DataGridViewCellStyle get_CellStyle();
    public void set_CellStyle(DataGridViewCellStyle value);
}
public class System.Windows.Forms.DataGridViewEditingControlShowingEventHandler : MulticastDelegate {
    public DataGridViewEditingControlShowingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewEditingControlShowingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewEditingControlShowingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DataGridViewEditMode : Enum {
    public int value__;
    public static DataGridViewEditMode EditOnEnter;
    public static DataGridViewEditMode EditOnKeystroke;
    public static DataGridViewEditMode EditOnKeystrokeOrF2;
    public static DataGridViewEditMode EditOnF2;
    public static DataGridViewEditMode EditProgrammatically;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewElement : object {
    [NullableAttribute("2")]
private DataGridView _dataGridView;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <State>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewElementStates State { get; internal set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridView DataGridView { get; internal set; }
    internal DataGridViewElement(DataGridViewElement dgveTemplate);
    [CompilerGeneratedAttribute]
public virtual DataGridViewElementStates get_State();
    [CompilerGeneratedAttribute]
internal virtual void set_State(DataGridViewElementStates value);
    internal bool StateIncludes(DataGridViewElementStates elementState);
    internal bool StateExcludes(DataGridViewElementStates elementState);
    [NullableContextAttribute("2")]
public DataGridView get_DataGridView();
    [NullableContextAttribute("2")]
internal void set_DataGridView(DataGridView value);
    protected virtual void OnDataGridViewChanged();
    protected void RaiseCellClick(DataGridViewCellEventArgs e);
    protected void RaiseCellContentClick(DataGridViewCellEventArgs e);
    protected void RaiseCellContentDoubleClick(DataGridViewCellEventArgs e);
    protected void RaiseCellValueChanged(DataGridViewCellEventArgs e);
    protected void RaiseDataError(DataGridViewDataErrorEventArgs e);
    protected void RaiseMouseWheel(MouseEventArgs e);
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewElementStates : Enum {
    public int value__;
    public static DataGridViewElementStates None;
    public static DataGridViewElementStates Displayed;
    public static DataGridViewElementStates Frozen;
    public static DataGridViewElementStates ReadOnly;
    public static DataGridViewElementStates Resizable;
    public static DataGridViewElementStates ResizableSet;
    public static DataGridViewElementStates Selected;
    public static DataGridViewElementStates Visible;
}
internal enum System.Windows.Forms.DataGridViewFreeDimension : Enum {
    public int value__;
    public static DataGridViewFreeDimension Both;
    public static DataGridViewFreeDimension Height;
    public static DataGridViewFreeDimension Width;
}
public enum System.Windows.Forms.DataGridViewHeaderBorderStyle : Enum {
    public int value__;
    public static DataGridViewHeaderBorderStyle Custom;
    public static DataGridViewHeaderBorderStyle Single;
    public static DataGridViewHeaderBorderStyle Raised;
    public static DataGridViewHeaderBorderStyle Sunken;
    public static DataGridViewHeaderBorderStyle None;
}
public class System.Windows.Forms.DataGridViewHeaderCell : DataGridViewCell {
    private static byte ThemeMargin;
    private static Type s_defaultFormattedValueType;
    private static Type s_defaultValueType;
    private static Type s_cellType;
    private static Rectangle s_rectThemeMargins;
    private static int s_propValueType;
    private static int s_propButtonState;
    private static int s_propFlipXPThemesBitmap;
    private static string AeroThemeFileName;
    protected ButtonState ButtonState { get; }
    unknown ButtonState ButtonStatePrivate {private set; }
    [BrowsableAttribute("False")]
public bool Displayed { get; }
    internal Bitmap FlipXPThemesBitmap { get; internal set; }
    public Type FormattedValueType { get; }
    [BrowsableAttribute("False")]
public bool Frozen { get; }
    private protected bool HasValueType { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
public bool Resizable { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    public Type ValueType { get; public set; }
    [BrowsableAttribute("False")]
public bool Visible { get; }
    private static DataGridViewHeaderCell();
    protected ButtonState get_ButtonState();
    private void set_ButtonStatePrivate(ButtonState value);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_Displayed();
    internal Bitmap get_FlipXPThemesBitmap();
    internal void set_FlipXPThemesBitmap(Bitmap value);
    public virtual Type get_FormattedValueType();
    public virtual bool get_Frozen();
    private protected virtual bool get_HasValueType();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual bool get_Resizable();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual bool get_Visible();
    public virtual object Clone();
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewElementStates GetInheritedState(int rowIndex);
    protected virtual Size GetSize(int rowIndex);
    internal static Rectangle GetThemeMargins(Graphics g);
    protected virtual object GetValue(int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseEnter(int rowIndex);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual string ToString();
    private void UpdateButtonState(ButtonState newButtonState, int rowIndex);
}
public enum System.Windows.Forms.DataGridViewHitTestType : Enum {
    public int value__;
    public static DataGridViewHitTestType None;
    public static DataGridViewHitTestType Cell;
    public static DataGridViewHitTestType ColumnHeader;
    public static DataGridViewHitTestType RowHeader;
    public static DataGridViewHitTestType TopLeftHeader;
    public static DataGridViewHitTestType HorizontalScrollBar;
    public static DataGridViewHitTestType VerticalScrollBar;
}
internal enum System.Windows.Forms.DataGridViewHitTestTypeCloseEdge : Enum {
    public int value__;
    public static DataGridViewHitTestTypeCloseEdge None;
    public static DataGridViewHitTestTypeCloseEdge Left;
    public static DataGridViewHitTestTypeCloseEdge Right;
    public static DataGridViewHitTestTypeCloseEdge Top;
    public static DataGridViewHitTestTypeCloseEdge Bottom;
}
public class System.Windows.Forms.DataGridViewImageCell : DataGridViewCell {
    private static int s_propImageCellDescription;
    private static int s_propImageCellLayout;
    private static Type s_defaultTypeImage;
    private static Type s_defaultTypeIcon;
    private static Type s_cellType;
    private static Bitmap s_errorBitmap;
    private static Icon s_errorIcon;
    private static byte CellValueIsIcon;
    private byte _flags;
    public object DefaultNewRowValue { get; }
    [DefaultValueAttribute("")]
public string Description { get; public set; }
    [DynamicallyAccessedMembersAttribute("8193")]
public Type EditType { get; }
    internal static Bitmap ErrorBitmap { get; }
    internal static Icon ErrorIcon { get; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewImageCellLayout ImageLayout { get; public set; }
    unknown DataGridViewImageCellLayout ImageLayoutInternal {internal set; }
    [DefaultValueAttribute("False")]
public bool ValueIsIcon { get; public set; }
    unknown bool ValueIsIconInternal {internal set; }
    public Type ValueType { get; public set; }
    public DataGridViewImageCell(bool valueIsIcon);
    private static DataGridViewImageCell();
    public virtual object get_DefaultNewRowValue();
    public string get_Description();
    public void set_Description(string value);
    public virtual Type get_EditType();
    internal static Bitmap get_ErrorBitmap();
    internal static Icon get_ErrorIcon();
    public virtual Type get_FormattedValueType();
    public DataGridViewImageCellLayout get_ImageLayout();
    public void set_ImageLayout(DataGridViewImageCellLayout value);
    internal void set_ImageLayoutInternal(DataGridViewImageCellLayout value);
    public bool get_ValueIsIcon();
    public void set_ValueIsIcon(bool value);
    internal void set_ValueIsIconInternal(bool value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    private protected virtual string GetDefaultToolTipText();
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    private Rectangle ImageBounds(Rectangle bounds, int imgWidth, int imgHeight, DataGridViewImageCellLayout imageLayout, DataGridViewCellStyle cellStyle);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics g, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewImageCellLayout : Enum {
    public int value__;
    public static DataGridViewImageCellLayout NotSet;
    public static DataGridViewImageCellLayout Normal;
    public static DataGridViewImageCellLayout Stretch;
    public static DataGridViewImageCellLayout Zoom;
}
[DynamicallyAccessedMembersAttribute("1")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewImageColumn", "DataGridViewImageColumn")]
public class System.Windows.Forms.DataGridViewImageColumn : DataGridViewColumn {
    private static Type s_columnType;
    private Image _image;
    private Icon _icon;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewImageColumn_DescriptionDescr")]
public string Description { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Icon Icon { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewImageColumn_ImageDescr")]
public Image Image { get; public set; }
    private DataGridViewImageCell ImageCellTemplate { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewImageColumn_ImageLayoutDescr")]
public DataGridViewImageCellLayout ImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ValuesAreIcons { get; public set; }
    public DataGridViewImageColumn(bool valuesAreIcons);
    private static DataGridViewImageColumn();
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public string get_Description();
    public void set_Description(string value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public Image get_Image();
    public void set_Image(Image value);
    private DataGridViewImageCell get_ImageCellTemplate();
    public DataGridViewImageCellLayout get_ImageLayout();
    public void set_ImageLayout(DataGridViewImageCellLayout value);
    public bool get_ValuesAreIcons();
    public void set_ValuesAreIcons(bool value);
    public virtual object Clone();
    private bool ShouldSerializeDefaultCellStyle();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.DataGridViewIntLinkedList : object {
    private DataGridViewIntLinkedListElement _lastAccessedElement;
    private DataGridViewIntLinkedListElement _headElement;
    private int _lastAccessedIndex;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Item { get; public set; }
    public int Count { get; private set; }
    public int HeadInt { get; }
    public DataGridViewIntLinkedList(DataGridViewIntLinkedList source);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Item(int index);
    public void set_Item(int index, int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public int get_HeadInt();
    public void Add(int integer);
    public void Clear();
    public bool Contains(int integer);
    public int IndexOf(int integer);
    public bool Remove(int integer);
    public void RemoveAt(int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewIntLinkedListElement : object {
    [CompilerGeneratedAttribute]
private int <Int>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewIntLinkedListElement <Next>k__BackingField;
    public int Int { get; public set; }
    public DataGridViewIntLinkedListElement Next { get; public set; }
    public DataGridViewIntLinkedListElement(int integer);
    [CompilerGeneratedAttribute]
public int get_Int();
    [CompilerGeneratedAttribute]
public void set_Int(int value);
    [CompilerGeneratedAttribute]
public DataGridViewIntLinkedListElement get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(DataGridViewIntLinkedListElement value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewIntLinkedListEnumerator : object {
    private DataGridViewIntLinkedListElement _headElement;
    [NullableAttribute("2")]
private DataGridViewIntLinkedListElement _current;
    private bool _reset;
    private object System.Collections.IEnumerator.Current { get; }
    public DataGridViewIntLinkedListEnumerator(DataGridViewIntLinkedListElement headElement);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Windows.Forms.DataGridViewLinkCell : DataGridViewCell {
    private static DataGridViewContentAlignment AnyLeft;
    private static DataGridViewContentAlignment AnyRight;
    private static DataGridViewContentAlignment AnyBottom;
    private static Type s_defaultFormattedValueType;
    private static Type s_defaultValueType;
    private static Type s_cellType;
    private static int s_propLinkCellActiveLinkColor;
    private static int s_propLinkCellLinkBehavior;
    private static int s_propLinkCellLinkColor;
    private static int s_propLinkCellLinkState;
    private static int s_propLinkCellTrackVisitedState;
    private static int s_propLinkCellUseColumnTextForLinkValue;
    private static int s_propLinkCellVisitedLinkColor;
    private static byte HorizontalTextMarginLeft;
    private static byte HorizontalTextMarginRight;
    private static byte VerticalTextMarginTop;
    private static byte VerticalTextMarginBottom;
    private bool _linkVisited;
    private bool _linkVisitedSet;
    private static Cursor s_dataGridViewCursor;
    public Color ActiveLinkColor { get; public set; }
    unknown Color ActiveLinkColorInternal {internal set; }
    [DynamicallyAccessedMembersAttribute("8193")]
public Type EditType { get; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LinkBehavior LinkBehavior { get; public set; }
    unknown LinkBehavior LinkBehaviorInternal {internal set; }
    public Color LinkColor { get; public set; }
    unknown Color LinkColorInternal {internal set; }
    private LinkState LinkState { get; private set; }
    public bool LinkVisited { get; public set; }
    [DefaultValueAttribute("True")]
public bool TrackVisitedState { get; public set; }
    unknown bool TrackVisitedStateInternal {internal set; }
    [DefaultValueAttribute("False")]
public bool UseColumnTextForLinkValue { get; public set; }
    unknown bool UseColumnTextForLinkValueInternal {internal set; }
    public Color VisitedLinkColor { get; public set; }
    unknown Color VisitedLinkColorInternal {internal set; }
    private Color HighContrastLinkColor { get; }
    public Type ValueType { get; }
    private static DataGridViewLinkCell();
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    internal void set_ActiveLinkColorInternal(Color value);
    private bool ShouldSerializeActiveLinkColor();
    public virtual Type get_EditType();
    public virtual Type get_FormattedValueType();
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    internal void set_LinkBehaviorInternal(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    internal void set_LinkColorInternal(Color value);
    private bool ShouldSerializeLinkColor();
    private LinkState get_LinkState();
    private void set_LinkState(LinkState value);
    public bool get_LinkVisited();
    public void set_LinkVisited(bool value);
    private bool ShouldSerializeLinkVisited();
    public bool get_TrackVisitedState();
    public void set_TrackVisitedState(bool value);
    internal void set_TrackVisitedStateInternal(bool value);
    public bool get_UseColumnTextForLinkValue();
    public void set_UseColumnTextForLinkValue(bool value);
    internal void set_UseColumnTextForLinkValueInternal(bool value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    internal void set_VisitedLinkColorInternal(Color value);
    private bool ShouldSerializeVisitedLinkColor();
    private Color get_HighContrastLinkColor();
    public virtual Type get_ValueType();
    public virtual object Clone();
    private bool LinkBoundsContainPoint(int x, int y, int rowIndex);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    private protected virtual string GetDefaultToolTipText();
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseMoveUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics g, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    public virtual string ToString();
}
[DynamicallyAccessedMembersAttribute("1")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewLinkColumn", "DataGridViewLinkColumn")]
public class System.Windows.Forms.DataGridViewLinkColumn : DataGridViewColumn {
    private static Type s_columnType;
    private string _text;
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnActiveLinkColorDescr")]
public Color ActiveLinkColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_LinkColumnLinkBehaviorDescr")]
public LinkBehavior LinkBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnLinkColorDescr")]
public Color LinkColor { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnTextDescr")]
public string Text { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_LinkColumnTrackVisitedStateDescr")]
public bool TrackVisitedState { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnUseColumnTextForLinkValueDescr")]
public bool UseColumnTextForLinkValue { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnVisitedLinkColorDescr")]
public Color VisitedLinkColor { get; public set; }
    private static DataGridViewLinkColumn();
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    private bool ShouldSerializeActiveLinkColor();
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    private bool ShouldSerializeLinkColor();
    public string get_Text();
    public void set_Text(string value);
    public bool get_TrackVisitedState();
    public void set_TrackVisitedState(bool value);
    public bool get_UseColumnTextForLinkValue();
    public void set_UseColumnTextForLinkValue(bool value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    private bool ShouldSerializeVisitedLinkColor();
    public virtual object Clone();
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewPaintParts : Enum {
    public int value__;
    public static DataGridViewPaintParts None;
    public static DataGridViewPaintParts All;
    public static DataGridViewPaintParts Background;
    public static DataGridViewPaintParts Border;
    public static DataGridViewPaintParts ContentBackground;
    public static DataGridViewPaintParts ContentForeground;
    public static DataGridViewPaintParts ErrorIcon;
    public static DataGridViewPaintParts Focus;
    public static DataGridViewPaintParts SelectionBackground;
}
[TypeConverterAttribute("System.Windows.Forms.DataGridViewRowConverter")]
public class System.Windows.Forms.DataGridViewRow : DataGridViewBand {
    private static Type s_rowType;
    private static int s_defaultHeight;
    private static int s_propRowErrorText;
    private static int s_propRowAccessibilityObject;
    private static DataGridViewAutoSizeRowCriteriaInternal InvalidDataGridViewAutoSizeRowCriteriaInternalMask;
    private static int DefaultMinRowThickness;
    private DataGridViewCellCollection _rowCells;
    [BrowsableAttribute("False")]
public AccessibleObject AccessibilityObject { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public DataGridViewCellCollection Cells { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowContextMenuStripDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public object DataBoundItem { get; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("False")]
public bool Displayed { get; }
    [DefaultValueAttribute("0")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowDividerHeightDescr")]
public int DividerHeight { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowErrorTextDescr")]
public string ErrorText { get; public set; }
    private static int DefaultHeight { get; }
    private string ErrorTextInternal { get; private set; }
    [BrowsableAttribute("False")]
public bool Frozen { get; public set; }
    private bool HasErrorText { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewRowHeaderCell HeaderCell { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowHeightDescr")]
public int Height { get; public set; }
    public DataGridViewCellStyle InheritedStyle { get; }
    internal bool IsAccessibilityObjectCreated { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsNewRow { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int MinimumHeight { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowResizableDescr")]
public DataGridViewTriState Resizable { get; public set; }
    public bool Selected { get; public set; }
    public DataGridViewElementStates State { get; }
    [BrowsableAttribute("False")]
public bool Visible { get; public set; }
    private static DataGridViewRow();
    public AccessibleObject get_AccessibilityObject();
    public DataGridViewCellCollection get_Cells();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public object get_DataBoundItem();
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public virtual bool get_Displayed();
    public int get_DividerHeight();
    public void set_DividerHeight(int value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    private static int get_DefaultHeight();
    private string get_ErrorTextInternal();
    private void set_ErrorTextInternal(string value);
    public virtual bool get_Frozen();
    public virtual void set_Frozen(bool value);
    private bool get_HasErrorText();
    public DataGridViewRowHeaderCell get_HeaderCell();
    public void set_HeaderCell(DataGridViewRowHeaderCell value);
    public int get_Height();
    public void set_Height(int value);
    public virtual DataGridViewCellStyle get_InheritedStyle();
    internal bool get_IsAccessibilityObjectCreated();
    public bool get_IsNewRow();
    public int get_MinimumHeight();
    public void set_MinimumHeight(int value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual DataGridViewTriState get_Resizable();
    public virtual void set_Resizable(DataGridViewTriState value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual DataGridViewElementStates get_State();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewAdvancedBorderStyle AdjustRowHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedRow, bool isLastVisibleRow);
    private void BuildInheritedRowHeaderCellStyle(DataGridViewCellStyle inheritedCellStyle);
    private void BuildInheritedRowStyle(int rowIndex, DataGridViewCellStyle inheritedRowStyle);
    public virtual object Clone();
    private void CloneCells(DataGridViewRow rowTemplate);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public void CreateCells(DataGridView dataGridView);
    public void CreateCells(DataGridView dataGridView, Object[] values);
    [EditorBrowsableAttribute("2")]
protected virtual DataGridViewCellCollection CreateCellsInstance();
    internal void DetachFromDataGridView();
    [EditorBrowsableAttribute("2")]
protected internal virtual void DrawFocus(Graphics graphics, Rectangle clipBounds, Rectangle bounds, int rowIndex, DataGridViewElementStates rowState, DataGridViewCellStyle cellStyle, bool cellsPaintSelectionBackground);
    public ContextMenuStrip GetContextMenuStrip(int rowIndex);
    internal bool GetDisplayed(int rowIndex);
    public string GetErrorText(int rowIndex);
    internal bool GetFrozen(int rowIndex);
    internal int GetHeight(int rowIndex);
    internal int GetMinimumHeight(int rowIndex);
    public virtual int GetPreferredHeight(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);
    internal bool GetReadOnly(int rowIndex);
    internal DataGridViewTriState GetResizable(int rowIndex);
    internal bool GetSelected(int rowIndex);
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewElementStates GetState(int rowIndex);
    internal bool GetVisible(int rowIndex);
    internal void OnSharedStateChanged(int sharedRowIndex, DataGridViewElementStates elementState);
    internal void OnSharedStateChanging(int sharedRowIndex, DataGridViewElementStates elementState);
    protected internal virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow);
    [EditorBrowsableAttribute("2")]
protected internal virtual void PaintCells(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, DataGridViewPaintParts paintParts);
    [EditorBrowsableAttribute("2")]
protected internal virtual void PaintHeader(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, DataGridViewPaintParts paintParts);
    private void ResetHeight();
    internal void ReleaseUiaProvider();
    internal void SetReadOnlyCellCore(DataGridViewCell dataGridViewCell, bool readOnly);
    public bool SetValues(Object[] values);
    internal bool SetValuesInternal(Object[] values);
    private bool ShouldSerializeHeight();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewRow <Row>k__BackingField;
    public DataGridViewRow Row { get; public set; }
    public DataGridViewRowCancelEventArgs(DataGridViewRow dataGridViewRow);
    [CompilerGeneratedAttribute]
public DataGridViewRow get_Row();
    [CompilerGeneratedAttribute]
public void set_Row(DataGridViewRow value);
}
public class System.Windows.Forms.DataGridViewRowCancelEventHandler : MulticastDelegate {
    public DataGridViewRowCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.DataGridViewRowCollectionCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.DataGridViewRowCollection : object {
    private CollectionChangeEventHandler onCollectionChanged;
    private RowArrayList items;
    private List`1<DataGridViewElementStates> rowStates;
    private int rowCountsVisible;
    private int rowCountsVisibleFrozen;
    private int rowCountsVisibleSelected;
    private int rowsHeightVisible;
    private int rowsHeightVisibleFrozen;
    private DataGridView dataGridView;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    internal bool IsCollectionChangedListenedTo { get; }
    protected ArrayList List { get; }
    internal ArrayList SharedList { get; }
    protected DataGridView DataGridView { get; }
    public DataGridViewRow Item { get; }
    public DataGridViewRowCollection(DataGridView dataGridView);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    internal bool get_IsCollectionChangedListenedTo();
    protected ArrayList get_List();
    internal ArrayList get_SharedList();
    public DataGridViewRow SharedRow(int rowIndex);
    protected DataGridView get_DataGridView();
    public DataGridViewRow get_Item(int index);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add();
    internal int AddInternal(bool newRow, Object[] values);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add(Object[] values);
    public virtual int Add(DataGridViewRow dataGridViewRow);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add(int count);
    internal int AddInternal(DataGridViewRow dataGridViewRow);
    public virtual int AddCopy(int indexSource);
    internal int AddCopyInternal(int indexSource, DataGridViewElementStates dgvesAdd, DataGridViewElementStates dgvesRemove, bool newRow);
    public virtual int AddCopies(int indexSource, int count);
    internal int AddCopiesInternal(int indexSource, int count);
    internal int AddCopiesInternal(int indexSource, int count, DataGridViewElementStates dgvesAdd, DataGridViewElementStates dgvesRemove);
    private int AddCopiesPrivate(DataGridViewRow rowTemplate, DataGridViewElementStates rowTemplateState, int count);
    private int AddDuplicateRow(DataGridViewRow rowTemplate, bool newRow);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual void AddRange(DataGridViewRow[] dataGridViewRows);
    public virtual void Clear();
    internal void ClearInternal(bool recreateNewRow);
    public virtual bool Contains(DataGridViewRow dataGridViewRow);
    public void CopyTo(DataGridViewRow[] array, int index);
    internal int DisplayIndexToRowIndex(int visibleRowIndex);
    public int GetFirstRow(DataGridViewElementStates includeFilter);
    public int GetFirstRow(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int GetLastRow(DataGridViewElementStates includeFilter);
    internal int GetNextRow(int indexStart, DataGridViewElementStates includeFilter, int skipRows);
    public int GetNextRow(int indexStart, DataGridViewElementStates includeFilter);
    public int GetNextRow(int indexStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int GetPreviousRow(int indexStart, DataGridViewElementStates includeFilter);
    public int GetPreviousRow(int indexStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int GetRowCount(DataGridViewElementStates includeFilter);
    internal int GetVisibleIndex(DataGridViewRow row);
    internal int GetRowCount(DataGridViewElementStates includeFilter, int fromRowIndex, int toRowIndex);
    public int GetRowsHeight(DataGridViewElementStates includeFilter);
    internal int GetRowsHeight(DataGridViewElementStates includeFilter, int fromRowIndex, int toRowIndex);
    private bool GetRowsHeightExceedLimit(DataGridViewElementStates includeFilter, int fromRowIndex, int toRowIndex, int heightLimit);
    public virtual DataGridViewElementStates GetRowState(int rowIndex);
    public int IndexOf(DataGridViewRow dataGridViewRow);
    public virtual void Insert(int rowIndex, Object[] values);
    public virtual void Insert(int rowIndex, DataGridViewRow dataGridViewRow);
    public virtual void Insert(int rowIndex, int count);
    internal void InsertInternal(int rowIndex, DataGridViewRow dataGridViewRow);
    internal void InsertInternal(int rowIndex, DataGridViewRow dataGridViewRow, bool force);
    public virtual void InsertCopy(int indexSource, int indexDestination);
    public virtual void InsertCopies(int indexSource, int indexDestination, int count);
    private void InsertCopiesPrivate(int indexSource, int indexDestination, int count);
    private void InsertCopiesPrivate(DataGridViewRow rowTemplate, DataGridViewElementStates rowTemplateState, int indexDestination, int count);
    private void InsertDuplicateRow(int indexDestination, DataGridViewRow rowTemplate, bool firstInsertion, Point& newCurrentCell);
    public virtual void InsertRange(int rowIndex, DataGridViewRow[] dataGridViewRows);
    internal void InvalidateCachedRowCount(DataGridViewElementStates includeFilter);
    internal void InvalidateCachedRowCounts();
    internal void InvalidateCachedRowsHeight(DataGridViewElementStates includeFilter);
    internal void InvalidateCachedRowsHeights();
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs e);
    private void OnCollectionChanged(CollectionChangeEventArgs e, int rowIndex, int rowCount);
    private void OnCollectionChanged(CollectionChangeEventArgs e, int rowIndex, int rowCount, bool changeIsDeletion, bool changeIsInsertion, bool recreateNewRow, Point newCurrentCell);
    private void OnCollectionChanged_PreNotification(CollectionChangeAction cca, int rowIndex, int rowCount, DataGridViewRow& dataGridViewRow, bool changeIsInsertion);
    private void OnCollectionChanged_PostNotification(CollectionChangeAction cca, int rowIndex, int rowCount, DataGridViewRow dataGridViewRow, bool changeIsDeletion, bool changeIsInsertion, bool recreateNewRow, Point newCurrentCell);
    public virtual void Remove(DataGridViewRow dataGridViewRow);
    public virtual void RemoveAt(int index);
    internal void RemoveAtInternal(int index, bool force);
    private static bool RowHasValueOrToolTipText(DataGridViewRow dataGridViewRow);
    internal bool RowIsSharable(int index);
    internal void SetRowState(int rowIndex, DataGridViewElementStates state, bool value);
    internal DataGridViewElementStates SharedRowState(int rowIndex);
    internal void Sort(IComparer customComparer, bool ascending);
    internal void SwapSortedRows(int rowIndex1, int rowIndex2);
    private void UnshareRow(int rowIndex);
    private void UpdateRowCaches(int rowIndex, DataGridViewRow& dataGridViewRow, bool adding);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextMenuStrip <ContextMenuStrip>k__BackingField;
    public int RowIndex { get; }
    public ContextMenuStrip ContextMenuStrip { get; public set; }
    public DataGridViewRowContextMenuStripNeededEventArgs(int rowIndex);
    internal DataGridViewRowContextMenuStripNeededEventArgs(int rowIndex, ContextMenuStrip contextMenuStrip);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public ContextMenuStrip get_ContextMenuStrip();
    [CompilerGeneratedAttribute]
public void set_ContextMenuStrip(ContextMenuStrip value);
}
public class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler : MulticastDelegate {
    public DataGridViewRowContextMenuStripNeededEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowContextMenuStripNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowContextMenuStripNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DataGridViewRowConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs : HandledMouseEventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public int RowIndex { get; }
    [NullableContextAttribute("1")]
public DataGridViewRowDividerDoubleClickEventArgs(int rowIndex, HandledMouseEventArgs e);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler : MulticastDelegate {
    public DataGridViewRowDividerDoubleClickEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowDividerDoubleClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowDividerDoubleClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    public int RowIndex { get; }
    public string ErrorText { get; public set; }
    internal DataGridViewRowErrorTextNeededEventArgs(int rowIndex, string errorText);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
}
public class System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler : MulticastDelegate {
    public DataGridViewRowErrorTextNeededEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowErrorTextNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowErrorTextNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewRow <Row>k__BackingField;
    public DataGridViewRow Row { get; }
    public DataGridViewRowEventArgs(DataGridViewRow dataGridViewRow);
    [CompilerGeneratedAttribute]
public DataGridViewRow get_Row();
}
public class System.Windows.Forms.DataGridViewRowEventHandler : MulticastDelegate {
    public DataGridViewRowEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowHeaderCell : DataGridViewHeaderCell {
    private static VisualStyleElement s_headerElement;
    private static ColorMap[] s_colorMap;
    private static Bitmap s_rightArrowBmp;
    private static Bitmap s_leftArrowBmp;
    private static Bitmap s_rightArrowStarBmp;
    private static Bitmap s_leftArrowStarBmp;
    private static Bitmap s_pencilLTRBmp;
    private static Bitmap s_pencilRTLBmp;
    private static Bitmap s_starBmp;
    private static Type s_cellType;
    private static byte RowHeaderIconMarginWidth;
    private static byte RowHeaderIconMarginHeight;
    private static byte ContentMarginWidth;
    private static byte HorizontalTextMarginLeft;
    private static byte HorizontalTextMarginRight;
    private static byte VerticalTextMargin;
    private static Bitmap LeftArrowBitmap { get; }
    private static Bitmap LeftArrowStarBitmap { get; }
    private static Bitmap PencilLTRBitmap { get; }
    private static Bitmap PencilRTLBitmap { get; }
    private static Bitmap RightArrowBitmap { get; }
    private static Bitmap RightArrowStarBitmap { get; }
    private static Bitmap StarBitmap { get; }
    private static DataGridViewRowHeaderCell();
    private static Bitmap get_LeftArrowBitmap();
    private static Bitmap get_LeftArrowStarBitmap();
    private static Bitmap get_PencilLTRBitmap();
    private static Bitmap get_PencilRTLBitmap();
    private static Bitmap get_RightArrowBitmap();
    private static Bitmap get_RightArrowStarBitmap();
    private static Bitmap get_StarBitmap();
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private static Bitmap GetArrowBitmap(bool rightToLeft);
    private static Bitmap GetArrowStarBitmap(bool rightToLeft);
    private static Bitmap GetBitmapFromIcon(string iconName);
    protected virtual object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected internal virtual string GetErrorText(int rowIndex);
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);
    private static Bitmap GetPencilBitmap(bool rightToLeft);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    private void PaintIcon(Graphics g, Bitmap bmp, Rectangle bounds, Color foreColor, Color backColor);
    protected virtual bool SetValue(int rowIndex, object value);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode : Enum {
    public int value__;
    public static DataGridViewRowHeadersWidthSizeMode EnableResizing;
    public static DataGridViewRowHeadersWidthSizeMode DisableResizing;
    public static DataGridViewRowHeadersWidthSizeMode AutoSizeToAllHeaders;
    public static DataGridViewRowHeadersWidthSizeMode AutoSizeToDisplayedHeaders;
    public static DataGridViewRowHeadersWidthSizeMode AutoSizeToFirstHeader;
}
public class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs : EventArgs {
    private int _height;
    private int _minimumHeight;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public int RowIndex { get; private set; }
    public int Height { get; public set; }
    public int MinimumHeight { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
private void set_RowIndex(int value);
    public int get_Height();
    public void set_Height(int value);
    public int get_MinimumHeight();
    public void set_MinimumHeight(int value);
    internal void SetProperties(int rowIndex, int height, int minimumHeight);
}
public class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler : MulticastDelegate {
    public DataGridViewRowHeightInfoNeededEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowHeightInfoNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowHeightInfoNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumHeight>k__BackingField;
    public int RowIndex { get; }
    public int Height { get; }
    public int MinimumHeight { get; }
    internal DataGridViewRowHeightInfoPushedEventArgs(int rowIndex, int height, int minimumHeight);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public int get_MinimumHeight();
}
public class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler : MulticastDelegate {
    public DataGridViewRowHeightInfoPushedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowHeightInfoPushedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowHeightInfoPushedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowPostPaintEventArgs : EventArgs {
    private DataGridView _dataGridView;
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClipBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <RowBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <State>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewCellStyle <InheritedRowStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstDisplayedRow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastVisibleRow>k__BackingField;
    public Graphics Graphics { get; private set; }
    public Rectangle ClipBounds { get; public set; }
    public Rectangle RowBounds { get; private set; }
    public int RowIndex { get; private set; }
    public DataGridViewElementStates State { get; private set; }
    [NullableAttribute("2")]
public string ErrorText { get; private set; }
    public DataGridViewCellStyle InheritedRowStyle { get; private set; }
    public bool IsFirstDisplayedRow { get; private set; }
    public bool IsLastVisibleRow { get; private set; }
    public DataGridViewRowPostPaintEventArgs(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow);
    internal DataGridViewRowPostPaintEventArgs(DataGridView dataGridView);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
private void set_Graphics(Graphics value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClipBounds();
    [CompilerGeneratedAttribute]
public void set_ClipBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_RowBounds();
    [CompilerGeneratedAttribute]
private void set_RowBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
private void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public DataGridViewElementStates get_State();
    [CompilerGeneratedAttribute]
private void set_State(DataGridViewElementStates value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public DataGridViewCellStyle get_InheritedRowStyle();
    [CompilerGeneratedAttribute]
private void set_InheritedRowStyle(DataGridViewCellStyle value);
    [CompilerGeneratedAttribute]
public bool get_IsFirstDisplayedRow();
    [CompilerGeneratedAttribute]
private void set_IsFirstDisplayedRow(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLastVisibleRow();
    [CompilerGeneratedAttribute]
private void set_IsLastVisibleRow(bool value);
    public void DrawFocus(Rectangle bounds, bool cellsPaintSelectionBackground);
    public void PaintCells(Rectangle clipBounds, DataGridViewPaintParts paintParts);
    public void PaintCellsBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground);
    public void PaintCellsContent(Rectangle clipBounds);
    public void PaintHeader(bool paintSelectionBackground);
    public void PaintHeader(DataGridViewPaintParts paintParts);
    internal void SetProperties(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow);
}
public class System.Windows.Forms.DataGridViewRowPostPaintEventHandler : MulticastDelegate {
    public DataGridViewRowPostPaintEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowPostPaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowPostPaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowPrePaintEventArgs : HandledEventArgs {
    private DataGridView _dataGridView;
    private DataGridViewPaintParts _paintParts;
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClipBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <RowBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <State>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewCellStyle <InheritedRowStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstDisplayedRow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastVisibleRow>k__BackingField;
    public Graphics Graphics { get; private set; }
    public Rectangle ClipBounds { get; public set; }
    public Rectangle RowBounds { get; private set; }
    public int RowIndex { get; private set; }
    public DataGridViewElementStates State { get; private set; }
    [NullableAttribute("2")]
public string ErrorText { get; private set; }
    public DataGridViewCellStyle InheritedRowStyle { get; private set; }
    public bool IsFirstDisplayedRow { get; private set; }
    public bool IsLastVisibleRow { get; private set; }
    public DataGridViewPaintParts PaintParts { get; public set; }
    public DataGridViewRowPrePaintEventArgs(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow);
    internal DataGridViewRowPrePaintEventArgs(DataGridView dataGridView);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
private void set_Graphics(Graphics value);
    [CompilerGeneratedAttribute]
public Rectangle get_ClipBounds();
    [CompilerGeneratedAttribute]
public void set_ClipBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public Rectangle get_RowBounds();
    [CompilerGeneratedAttribute]
private void set_RowBounds(Rectangle value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
private void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public DataGridViewElementStates get_State();
    [CompilerGeneratedAttribute]
private void set_State(DataGridViewElementStates value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public DataGridViewCellStyle get_InheritedRowStyle();
    [CompilerGeneratedAttribute]
private void set_InheritedRowStyle(DataGridViewCellStyle value);
    [CompilerGeneratedAttribute]
public bool get_IsFirstDisplayedRow();
    [CompilerGeneratedAttribute]
private void set_IsFirstDisplayedRow(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLastVisibleRow();
    [CompilerGeneratedAttribute]
private void set_IsLastVisibleRow(bool value);
    public DataGridViewPaintParts get_PaintParts();
    public void set_PaintParts(DataGridViewPaintParts value);
    public void DrawFocus(Rectangle bounds, bool cellsPaintSelectionBackground);
    public void PaintCells(Rectangle clipBounds, DataGridViewPaintParts paintParts);
    public void PaintCellsBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground);
    public void PaintCellsContent(Rectangle clipBounds);
    public void PaintHeader(bool paintSelectionBackground);
    public void PaintHeader(DataGridViewPaintParts paintParts);
    internal void SetProperties(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow);
}
public class System.Windows.Forms.DataGridViewRowPrePaintEventHandler : MulticastDelegate {
    public DataGridViewRowPrePaintEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowPrePaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowPrePaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowsAddedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    public int RowIndex { get; }
    public int RowCount { get; }
    public DataGridViewRowsAddedEventArgs(int rowIndex, int rowCount);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public int get_RowCount();
}
public class System.Windows.Forms.DataGridViewRowsAddedEventHandler : MulticastDelegate {
    public DataGridViewRowsAddedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowsAddedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowsAddedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowsRemovedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    public int RowIndex { get; }
    public int RowCount { get; }
    public DataGridViewRowsRemovedEventArgs(int rowIndex, int rowCount);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public int get_RowCount();
}
public class System.Windows.Forms.DataGridViewRowsRemovedEventHandler : MulticastDelegate {
    public DataGridViewRowsRemovedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowsRemovedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowsRemovedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewRowStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataGridViewRow <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewElementStates <StateChanged>k__BackingField;
    public DataGridViewRow Row { get; }
    public DataGridViewElementStates StateChanged { get; }
    public DataGridViewRowStateChangedEventArgs(DataGridViewRow dataGridViewRow, DataGridViewElementStates stateChanged);
    [CompilerGeneratedAttribute]
public DataGridViewRow get_Row();
    [CompilerGeneratedAttribute]
public DataGridViewElementStates get_StateChanged();
}
public class System.Windows.Forms.DataGridViewRowStateChangedEventHandler : MulticastDelegate {
    public DataGridViewRowStateChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewRowStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewSelectedCellCollection : BaseCollection {
    private List`1<DataGridViewCell> _items;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewCell Item { get; }
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewCell get_Item(int index);
    internal int Add(DataGridViewCell dataGridViewCell);
    internal void AddCellLinkedList(DataGridViewCellLinkedList dataGridViewCells);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public bool Contains(DataGridViewCell dataGridViewCell);
    public void CopyTo(DataGridViewCell[] array, int index);
    [EditorBrowsableAttribute("1")]
public void Insert(int index, DataGridViewCell dataGridViewCell);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewSelectedColumnCollection : BaseCollection {
    private List`1<DataGridViewColumn> _items;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewColumn Item { get; }
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewColumn get_Item(int index);
    internal int Add(DataGridViewColumn dataGridViewColumn);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public bool Contains(DataGridViewColumn dataGridViewColumn);
    public void CopyTo(DataGridViewColumn[] array, int index);
    [EditorBrowsableAttribute("1")]
public void Insert(int index, DataGridViewColumn dataGridViewColumn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewSelectedRowCollection : BaseCollection {
    private List`1<DataGridViewRow> _items;
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewRow Item { get; }
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewRow get_Item(int index);
    internal int Add(DataGridViewRow dataGridViewRow);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public bool Contains(DataGridViewRow dataGridViewRow);
    public void CopyTo(DataGridViewRow[] array, int index);
    [EditorBrowsableAttribute("1")]
public void Insert(int index, DataGridViewRow dataGridViewRow);
}
public enum System.Windows.Forms.DataGridViewSelectionMode : Enum {
    public int value__;
    public static DataGridViewSelectionMode CellSelect;
    public static DataGridViewSelectionMode FullRowSelect;
    public static DataGridViewSelectionMode FullColumnSelect;
    public static DataGridViewSelectionMode RowHeaderSelect;
    public static DataGridViewSelectionMode ColumnHeaderSelect;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewSortCompareEventArgs : HandledEventArgs {
    [CompilerGeneratedAttribute]
private object <CellValue1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CellValue2>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridViewColumn <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortResult>k__BackingField;
    public object CellValue1 { get; }
    public object CellValue2 { get; }
    public DataGridViewColumn Column { get; }
    public int RowIndex1 { get; }
    public int RowIndex2 { get; }
    public int SortResult { get; public set; }
    public DataGridViewSortCompareEventArgs(DataGridViewColumn dataGridViewColumn, object cellValue1, object cellValue2, int rowIndex1, int rowIndex2);
    [CompilerGeneratedAttribute]
public object get_CellValue1();
    [CompilerGeneratedAttribute]
public object get_CellValue2();
    [CompilerGeneratedAttribute]
public DataGridViewColumn get_Column();
    [CompilerGeneratedAttribute]
public int get_RowIndex1();
    [CompilerGeneratedAttribute]
public int get_RowIndex2();
    [CompilerGeneratedAttribute]
public int get_SortResult();
    [CompilerGeneratedAttribute]
public void set_SortResult(int value);
}
public class System.Windows.Forms.DataGridViewSortCompareEventHandler : MulticastDelegate {
    public DataGridViewSortCompareEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataGridViewSortCompareEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewSortCompareEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewTextBoxCell : DataGridViewCell {
    private static int PropTextBoxCellMaxInputLength;
    private static int PropTextBoxCellEditingTextBox;
    private static byte DATAGRIDVIEWTEXTBOXCELL_ignoreNextMouseClick;
    private static byte DATAGRIDVIEWTEXTBOXCELL_horizontalTextOffsetLeft;
    private static byte DATAGRIDVIEWTEXTBOXCELL_horizontalTextOffsetRight;
    private static byte DATAGRIDVIEWTEXTBOXCELL_horizontalTextMarginLeft;
    private static byte DATAGRIDVIEWTEXTBOXCELL_horizontalTextMarginRight;
    private static byte DATAGRIDVIEWTEXTBOXCELL_verticalTextOffsetTop;
    private static byte DATAGRIDVIEWTEXTBOXCELL_verticalTextOffsetBottom;
    private static byte DATAGRIDVIEWTEXTBOXCELL_verticalTextMarginTopWithWrapping;
    private static byte DATAGRIDVIEWTEXTBOXCELL_verticalTextMarginTopWithoutWrapping;
    private static byte DATAGRIDVIEWTEXTBOXCELL_verticalTextMarginBottom;
    private static int DATAGRIDVIEWTEXTBOXCELL_maxInputLength;
    private byte flagsState;
    private static Type defaultFormattedValueType;
    private static Type defaultValueType;
    private static Type cellType;
    private DataGridViewTextBoxEditingControl EditingTextBox { get; private set; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("32767")]
public int MaxInputLength { get; public set; }
    public Type ValueType { get; }
    private static DataGridViewTextBoxCell();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private DataGridViewTextBoxEditingControl get_EditingTextBox();
    private void set_EditingTextBox(DataGridViewTextBoxEditingControl value);
    public virtual Type get_FormattedValueType();
    public virtual int get_MaxInputLength();
    public virtual void set_MaxInputLength(int value);
    public virtual Type get_ValueType();
    internal virtual void CacheEditingControl();
    public virtual object Clone();
    [EditorBrowsableAttribute("2")]
public virtual void DetachEditingControl();
    private Rectangle GetAdjustedEditingControlBounds(Rectangle editingControlBounds, DataGridViewCellStyle cellStyle);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    private protected virtual string GetDefaultToolTipText();
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    public virtual void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool KeyEntersEditMode(KeyEventArgs e);
    protected virtual void OnEnter(int rowIndex, bool throughMouseClick);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseClick(DataGridViewCellMouseEventArgs e);
    private bool OwnsEditingTextBox(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    public virtual void PositionEditingControl(bool setLocation, bool setSize, Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewTextBoxColumn", "DataGridViewTextBoxColumn")]
public class System.Windows.Forms.DataGridViewTextBoxColumn : DataGridViewColumn {
    private static int ColumnMaxInputLength;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [DefaultValueAttribute("32767")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_TextBoxColumnMaxInputLengthDescr")]
public int MaxInputLength { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewColumnSortMode SortMode { get; public set; }
    private DataGridViewTextBoxCell TextBoxCellTemplate { get; }
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public int get_MaxInputLength();
    public void set_MaxInputLength(int value);
    public DataGridViewColumnSortMode get_SortMode();
    public void set_SortMode(DataGridViewColumnSortMode value);
    private DataGridViewTextBoxCell get_TextBoxCellTemplate();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewTextBoxEditingControl : TextBox {
    private static DataGridViewContentAlignment AnyTop;
    private static DataGridViewContentAlignment AnyRight;
    private static DataGridViewContentAlignment AnyCenter;
    [NullableAttribute("2")]
private DataGridView _dataGridView;
    private bool _valueChanged;
    private bool _repositionOnValueChange;
    private int _rowIndex;
    [NullableAttribute("2")]
public DataGridView EditingControlDataGridView { get; public set; }
    public object EditingControlFormattedValue { get; public set; }
    public int EditingControlRowIndex { get; public set; }
    public bool EditingControlValueChanged { get; public set; }
    public Cursor EditingPanelCursor { get; }
    public bool RepositionEditingControlOnValueChange { get; }
    protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("2")]
public virtual DataGridView get_EditingControlDataGridView();
    [NullableContextAttribute("2")]
public virtual void set_EditingControlDataGridView(DataGridView value);
    public virtual object get_EditingControlFormattedValue();
    public virtual void set_EditingControlFormattedValue(object value);
    public virtual int get_EditingControlRowIndex();
    public virtual void set_EditingControlRowIndex(int value);
    public virtual bool get_EditingControlValueChanged();
    public virtual void set_EditingControlValueChanged(bool value);
    public virtual Cursor get_EditingPanelCursor();
    public virtual bool get_RepositionEditingControlOnValueChange();
    public virtual void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey);
    public virtual object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context);
    public virtual void PrepareEditingControlForEdit(bool selectAll);
    private void NotifyDataGridViewOfValueChange();
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    internal virtual void ReleaseUiaProvider(HWND handle);
    private static HorizontalAlignment TranslateAlignment(DataGridViewContentAlignment align);
    protected virtual void OnHandleCreated(EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DataGridViewTopLeftHeaderCell : DataGridViewColumnHeaderCell {
    private static VisualStyleElement s_headerElement;
    private static byte DATAGRIDVIEWTOPLEFTHEADERCELL_horizontalTextMarginLeft;
    private static byte DATAGRIDVIEWTOPLEFTHEADERCELL_horizontalTextMarginRight;
    private static byte DATAGRIDVIEWTOPLEFTHEADERCELL_verticalTextMargin;
    private static DataGridViewTopLeftHeaderCell();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    private Rectangle PaintPrivate(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts, bool computeContentBounds, bool computeErrorIconBounds, bool paint);
    protected virtual void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle bounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewTriState : Enum {
    public int value__;
    public static DataGridViewTriState NotSet;
    public static DataGridViewTriState True;
    public static DataGridViewTriState False;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.DataGridViewUtilities : object {
    private static byte IconMarginWidth;
    private static byte IconMarginHeight;
    private static byte ContentMarginWidth;
    private static byte IconsWidth;
    private static byte IconsHeight;
    private static byte HorizontalTextMarginLeft;
    private static byte HorizontalTextMarginRight;
    private static byte VerticalTextMargin;
    internal static ContentAlignment ComputeDrawingContentAlignmentForCellStyleAlignment(DataGridViewContentAlignment alignment);
    internal static TextFormatFlags ComputeTextFormatFlagsForCellStyleAlignment(bool rightToLeft, DataGridViewContentAlignment alignment, DataGridViewTriState wrapMode);
    internal static Size GetPreferredRowHeaderSize(Graphics graphics, string val, DataGridViewCellStyle cellStyle, int borderAndPaddingWidths, int borderAndPaddingHeights, bool showRowErrors, bool showGlyph, Size constraintSize, TextFormatFlags flags);
    internal static Rectangle GetTextBounds(Rectangle cellBounds, string text, TextFormatFlags flags, DataGridViewCellStyle cellStyle);
    internal static Rectangle GetTextBounds(Rectangle cellBounds, string text, TextFormatFlags flags, DataGridViewCellStyle cellStyle, Font font);
    internal static Point GetTextLocation(Rectangle cellBounds, Size sizeText, TextFormatFlags flags, DataGridViewCellStyle cellStyle);
    internal static bool ValidTextFormatFlags(TextFormatFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ClassInterfaceAttribute("0")]
public class System.Windows.Forms.DataObject : object {
    private static string CF_DEPRECATED_FILENAME;
    private static string CF_DEPRECATED_FILENAMEW;
    private static string BitmapFullName;
    private static int DATA_S_SAMEFORMATETC;
    private static TYMED AllowedTymeds;
    private IDataObject _innerData;
    private static Byte[] s_serializedObjectID;
    internal DataObject(IDataObject data);
    internal DataObject(IDataObject data);
    public DataObject(object data);
    public DataObject(string format, object data);
    internal DataObject(string format, bool autoConvert, object data);
    private static DataObject();
    [NullableContextAttribute("0")]
internal static DataObject FromComPointer(IDataObject* data);
    public virtual object GetData(string format, bool autoConvert);
    public virtual object GetData(string format);
    public virtual object GetData(Type format);
    public virtual bool GetDataPresent(Type format);
    public virtual bool GetDataPresent(string format, bool autoConvert);
    public virtual bool GetDataPresent(string format);
    public virtual String[] GetFormats(bool autoConvert);
    public virtual String[] GetFormats();
    public virtual bool ContainsAudio();
    public virtual bool ContainsFileDropList();
    public virtual bool ContainsImage();
    public virtual bool ContainsText();
    public virtual bool ContainsText(TextDataFormat format);
    [NullableContextAttribute("2")]
public virtual Stream GetAudioStream();
    public virtual StringCollection GetFileDropList();
    [NullableContextAttribute("2")]
public virtual Image GetImage();
    public virtual string GetText();
    public virtual string GetText(TextDataFormat format);
    public virtual void SetAudio(Byte[] audioBytes);
    public virtual void SetAudio(Stream audioStream);
    public virtual void SetFileDropList(StringCollection filePaths);
    public virtual void SetImage(Image image);
    public virtual void SetText(string textData);
    public virtual void SetText(string textData, TextDataFormat format);
    private static string ConvertToDataFormats(TextDataFormat format);
    private static String[] GetMappedFormats(string format);
    private static bool GetTymedUseable(TYMED tymed);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(FORMATETC& pFormatetc, ADVF advf, IAdviseSink pAdvSink, Int32& pdwConnection);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(int dwConnection);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(IEnumSTATDATA& enumAdvise);
    private sealed virtual override IEnumFORMATETC System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(DATADIR dwDirection);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(FORMATETC& pformatetcIn, FORMATETC& pformatetcOut);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.GetData(FORMATETC& formatetc, STGMEDIUM& medium);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(FORMATETC& formatetc, STGMEDIUM& medium);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(FORMATETC& formatetc);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.SetData(FORMATETC& pFormatetcIn, STGMEDIUM& pmedium, bool fRelease);
    private static bool RestrictDeserializationToSafeTypes(string format);
    private HRESULT SaveDataToHGLOBAL(object data, string format, STGMEDIUM& medium);
    private static HRESULT SaveObjectToHGLOBAL(HGLOBAL& hglobal, object data, bool restrictSerialization);
    private static HRESULT SaveStreamToHGLOBAL(HGLOBAL& hglobal, Stream stream);
    private HRESULT SaveFileListToHGLOBAL(HGLOBAL hglobal, String[] files);
    private HRESULT SaveStringToHGLOBAL(HGLOBAL hglobal, string value, bool unicode);
    private static HRESULT SaveHtmlToHGLOBAL(HGLOBAL hglobal, string value);
    public virtual void SetData(string format, bool autoConvert, object data);
    public virtual void SetData(string format, object data);
    public virtual void SetData(Type format, object data);
    [NullableContextAttribute("2")]
public virtual void SetData(object data);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.GetDataHere(FORMATETC* pformatetc, STGMEDIUM* pmedium);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.QueryGetData(FORMATETC* pformatetc);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.GetCanonicalFormatEtc(FORMATETC* pformatectIn, FORMATETC* pformatetcOut);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, BOOL fRelease);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.EnumFormatEtc(UInt32 dwDirection, IEnumFORMATETC** ppenumFormatEtc);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.DAdvise(FORMATETC* pformatetc, UInt32 advf, IAdviseSink* pAdvSink, UInt32* pdwConnection);
    private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.DUnadvise(UInt32 dwConnection);
    [NullableContextAttribute("0")]
private sealed virtual override HRESULT Windows.Win32.System.Com.IDataObject.Interface.EnumDAdvise(IEnumSTATDATA** ppenumAdvise);
    [CompilerGeneratedAttribute]
internal static HBITMAP <System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere>g__GetCompatibleBitmap|49_0(Bitmap bitmap);
}
public enum System.Windows.Forms.DataSourceUpdateMode : Enum {
    public int value__;
    public static DataSourceUpdateMode OnValidation;
    public static DataSourceUpdateMode OnPropertyChanged;
    public static DataSourceUpdateMode Never;
}
internal class System.Windows.Forms.DataStreamFromComStream : Stream {
    private IStream* _comStream;
    public long Position { get; public set; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanRead { get; }
    public long Length { get; }
    public DataStreamFromComStream(IStream* comStream);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual bool get_CanRead();
    public virtual long get_Length();
    public virtual void Flush();
    [NullableContextAttribute("1")]
public virtual int Read(Byte[] buffer, int index, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    [NullableContextAttribute("1")]
public virtual void Write(Byte[] buffer, int index, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DateBoldEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <DaysToBold>k__BackingField;
    public DateTime StartDate { get; }
    public int Size { get; }
    public Int32[] DaysToBold { get; public set; }
    internal DateBoldEventArgs(DateTime start, int size);
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public Int32[] get_DaysToBold();
    [CompilerGeneratedAttribute]
public void set_DaysToBold(Int32[] value);
}
public class System.Windows.Forms.DateBoldEventHandler : MulticastDelegate {
    public DateBoldEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DateBoldEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DateBoldEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DateRangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    public DateTime Start { get; }
    public DateTime End { get; }
    public DateRangeEventArgs(DateTime start, DateTime end);
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public DateTime get_End();
}
public class System.Windows.Forms.DateRangeEventHandler : MulticastDelegate {
    public DateRangeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DateRangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DateRangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("ValueChanged")]
[DefaultBindingPropertyAttribute("Value")]
[DesignerAttribute("System.Windows.Forms.Design.DateTimePickerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionDateTimePicker")]
public class System.Windows.Forms.DateTimePicker : Control {
    protected static Color DefaultTitleBackColor;
    protected static Color DefaultTitleForeColor;
    protected static Color DefaultMonthBackColor;
    protected static Color DefaultTrailingForeColor;
    [NullableAttribute("1")]
private static object s_formatChangedEvent;
    [NullableAttribute("1")]
private static string s_dateTimePickerLocalizedControlTypeString;
    private static UInt32 TIMEFORMAT_NOUPDOWN;
    private EventHandler _onCloseUp;
    private EventHandler _onDropDown;
    private EventHandler _onValueChanged;
    private EventHandler _onRightToLeftLayoutChanged;
    private ExpandCollapseState _expandCollapseState;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DateTime MinDateTime;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DateTime MaxDateTime;
    private UInt32 _style;
    private short _prefHeightCache;
    private bool _validTime;
    private bool _userHasSetValue;
    private DateTime _value;
    private DateTime _creationTime;
    private DateTime _maxDateTime;
    private DateTime _minDateTime;
    private Color _calendarForeColor;
    private Color _calendarTitleBackColor;
    private Color _calendarTitleForeColor;
    private Color _calendarMonthBackground;
    private Color _calendarTrailingText;
    private Font _calendarFont;
    private FontHandleWrapper _calendarFontHandleWrapper;
    private string _customFormat;
    private DateTimePickerFormat _format;
    private bool _rightToLeftLayout;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarForeColorDescr")]
public Color CalendarForeColor { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("")]
[SRDescriptionAttribute("DateTimePickerCalendarFontDescr")]
public Font CalendarFont { get; public set; }
    private HFONT CalendarFontHandle { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarTitleBackColorDescr")]
public Color CalendarTitleBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarTitleForeColorDescr")]
public Color CalendarTitleForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarTrailingForeColorDescr")]
public Color CalendarTrailingForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarMonthBackgroundDescr")]
public Color CalendarMonthBackground { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DateTimePickerCheckedDescr")]
public bool Checked { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DateTimePickerCustomFormatDescr")]
public string CustomFormat { get; public set; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DateTimePickerDropDownAlignDescr")]
public LeftRightAlignment DropDownAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("DateTimePickerFormatDescr")]
public DateTimePickerFormat Format { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DateTimePickerMaxDateDescr")]
public DateTime MaxDate { get; public set; }
    public static DateTime MaximumDateTime { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DateTimePickerMinDateDescr")]
public DateTime MinDate { get; public set; }
    public static DateTime MinimumDateTime { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerShowNoneDescr")]
public bool ShowCheckBox { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerShowUpDownDescr")]
public bool ShowUpDown { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DateTimePickerValueDescr")]
public DateTime Value { get; public set; }
    private static DateTimePicker();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public Color get_CalendarForeColor();
    public void set_CalendarForeColor(Color value);
    [NullableContextAttribute("1")]
public Font get_CalendarFont();
    [NullableContextAttribute("1")]
public void set_CalendarFont(Font value);
    private HFONT get_CalendarFontHandle();
    public Color get_CalendarTitleBackColor();
    public void set_CalendarTitleBackColor(Color value);
    public Color get_CalendarTitleForeColor();
    public void set_CalendarTitleForeColor(Color value);
    public Color get_CalendarTrailingForeColor();
    public void set_CalendarTrailingForeColor(Color value);
    public Color get_CalendarMonthBackground();
    public void set_CalendarMonthBackground(Color value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    public string get_CustomFormat();
    public void set_CustomFormat(string value);
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public LeftRightAlignment get_DropDownAlign();
    public void set_DropDownAlign(LeftRightAlignment value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public DateTimePickerFormat get_Format();
    public void set_Format(DateTimePickerFormat value);
    public void add_FormatChanged(EventHandler value);
    public void remove_FormatChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    internal static DateTime EffectiveMinDate(DateTime minDate);
    internal static DateTime EffectiveMaxDate(DateTime maxDate);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    public static DateTime get_MaximumDateTime();
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public static DateTime get_MinimumDateTime();
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public int get_PreferredHeight();
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public bool get_ShowCheckBox();
    public void set_ShowCheckBox(bool value);
    public bool get_ShowUpDown();
    public void set_ShowUpDown(bool value);
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public DateTime get_Value();
    public void set_Value(DateTime value);
    public void add_CloseUp(EventHandler value);
    public void remove_CloseUp(EventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    public void add_DropDown(EventHandler value);
    public void remove_DropDown(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateHandle();
    protected virtual void DestroyHandle();
    [NullableContextAttribute("1")]
private static string FormatDateTime(DateTime value);
    internal virtual Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    protected virtual bool IsInputKey(Keys keyData);
    [NullableContextAttribute("1")]
protected virtual void OnCloseUp(EventArgs eventargs);
    [NullableContextAttribute("1")]
protected virtual void OnDropDown(EventArgs eventargs);
    [NullableContextAttribute("1")]
protected virtual void OnFormatChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnValueChanged(EventArgs eventargs);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    private void ResetCalendarForeColor();
    private void ResetCalendarFont();
    private void ResetCalendarMonthBackground();
    private void ResetCalendarTitleBackColor();
    private void ResetCalendarTitleForeColor();
    private void ResetCalendarTrailingForeColor();
    private void ResetFormat();
    private void ResetMaxDate();
    private void ResetMinDate();
    private void ResetValue();
    private void SetControlColor(UInt32 colorIndex, Color value);
    private void SetControlCalendarFont();
    private void SetAllControlColors();
    private void SetRange();
    private void SetRange(DateTime min, DateTime max);
    private void SetStyleBit(bool flag, UInt32 bit);
    private bool ShouldSerializeCalendarForeColor();
    private bool ShouldSerializeCalendarFont();
    private bool ShouldSerializeCalendarTitleBackColor();
    private bool ShouldSerializeCalendarTitleForeColor();
    private bool ShouldSerializeCalendarTrailingForeColor();
    private bool ShouldSerializeCalendarMonthBackground();
    private bool ShouldSerializeMaxDate();
    private bool ShouldSerializeMinDate();
    private bool ShouldSerializeValue();
    private bool ShouldSerializeFormat();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private void UpdateUpDown();
    [NullableContextAttribute("1")]
private void MarshaledUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    [NullableContextAttribute("1")]
private void UserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    private void WmDateTimeChange(Message& m);
    private void WmDropDown();
    [NullableContextAttribute("1")]
protected virtual void OnSystemColorsChanged(EventArgs e);
    private void WmReflectCommand(Message& m);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.DateTimePickerFormat : Enum {
    public int value__;
    public static DateTimePickerFormat Long;
    public static DateTimePickerFormat Short;
    public static DateTimePickerFormat Time;
    public static DateTimePickerFormat Custom;
}
public enum System.Windows.Forms.Day : Enum {
    public int value__;
    public static Day Monday;
    public static Day Tuesday;
    public static Day Wednesday;
    public static Day Thursday;
    public static Day Friday;
    public static Day Saturday;
    public static Day Sunday;
    public static Day Default;
}
internal class System.Windows.Forms.DCMapping : ValueType {
    private HDC _hdc;
    private int _savedState;
    public DCMapping(HDC hdc, Rectangle bounds);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.Design.ComponentEditorForm : Form {
    private IComponent _component;
    private Type[] _pageTypes;
    private ComponentEditorPageSite[] _pageSites;
    private Size _maxSize;
    private int _initialActivePage;
    private int _activePage;
    private bool _dirty;
    private bool _firstActivate;
    private Panel _pageHost;
    private PageSelector _selector;
    private ImageList _selectorImageList;
    private Button _okButton;
    private Button _cancelButton;
    private Button _applyButton;
    private Button _helpButton;
    private static int BUTTON_WIDTH;
    private static int BUTTON_HEIGHT;
    private static int BUTTON_PAD;
    private static int MIN_SELECTOR_WIDTH;
    private static int SELECTOR_PADDING;
    private static int STRIP_HEIGHT;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    public ComponentEditorForm(object component, Type[] pageTypes);
    internal virtual void ApplyChanges(bool lastApply);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    [NullableContextAttribute("2")]
public void add_AutoSizeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoSizeChanged(EventHandler value);
    private void OnButtonClick(object sender, EventArgs e);
    [MemberNotNullAttribute("_okButton")]
[MemberNotNullAttribute("_cancelButton")]
[MemberNotNullAttribute("_applyButton")]
[MemberNotNullAttribute("_helpButton")]
[MemberNotNullAttribute("_selectorImageList")]
[MemberNotNullAttribute("_selector")]
private void OnConfigureUI();
    protected virtual void OnActivated(EventArgs e);
    protected virtual void OnHelpRequested(HelpEventArgs e);
    [MemberNotNullAttribute("_pageSites")]
private void OnNewObjects();
    protected virtual void OnSelChangeSelector(object source, TreeViewEventArgs e);
    public virtual bool PreProcessMessage(Message& msg);
    internal virtual void SetDirty();
    public virtual DialogResult ShowForm();
    public virtual DialogResult ShowForm(int page);
    [NullableContextAttribute("2")]
public virtual DialogResult ShowForm(IWin32Window owner);
    [NullableContextAttribute("2")]
public virtual DialogResult ShowForm(IWin32Window owner, int page);
    private void ShowPageHelp();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.Design.ComponentEditorPage : Panel {
    private Icon _icon;
    [CompilerGeneratedAttribute]
private IComponentEditorPageSite <PageSite>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponent <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Loading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommitOnDeactivate>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    protected IComponentEditorPageSite PageSite { get; protected set; }
    protected IComponent Component { get; protected set; }
    protected bool FirstActivate { get; protected set; }
    protected bool LoadRequired { get; protected set; }
    protected int Loading { get; protected set; }
    public bool CommitOnDeactivate { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    [NullableAttribute("1")]
public Icon Icon { get; public set; }
    [NullableAttribute("1")]
public string Title { get; }
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
protected IComponentEditorPageSite get_PageSite();
    [CompilerGeneratedAttribute]
protected void set_PageSite(IComponentEditorPageSite value);
    [CompilerGeneratedAttribute]
protected IComponent get_Component();
    [CompilerGeneratedAttribute]
protected void set_Component(IComponent value);
    [CompilerGeneratedAttribute]
protected bool get_FirstActivate();
    [CompilerGeneratedAttribute]
protected void set_FirstActivate(bool value);
    [CompilerGeneratedAttribute]
protected bool get_LoadRequired();
    [CompilerGeneratedAttribute]
protected void set_LoadRequired(bool value);
    [CompilerGeneratedAttribute]
protected int get_Loading();
    [CompilerGeneratedAttribute]
protected void set_Loading(int value);
    [CompilerGeneratedAttribute]
public bool get_CommitOnDeactivate();
    [CompilerGeneratedAttribute]
public void set_CommitOnDeactivate(bool value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    [NullableContextAttribute("1")]
public Icon get_Icon();
    [NullableContextAttribute("1")]
public void set_Icon(Icon value);
    [NullableContextAttribute("1")]
public virtual string get_Title();
    public virtual void Activate();
    public virtual void ApplyChanges();
    public virtual void Deactivate();
    protected void EnterLoadingMode();
    protected void ExitLoadingMode();
    [NullableContextAttribute("1")]
public virtual Control GetControl();
    protected IComponent GetSelectedComponent();
    public virtual bool IsPageMessage(Message& msg);
    protected bool IsFirstActivate();
    protected bool IsLoading();
    protected abstract virtual void LoadComponent();
    public virtual void OnApplyComplete();
    protected virtual void ReloadComponent();
    protected abstract virtual void SaveComponent();
    protected virtual void SetDirty();
    public virtual void SetComponent(IComponent component);
    public virtual void SetSite(IComponentEditorPageSite site);
    public virtual void ShowHelp();
    public virtual bool SupportsHelp();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.Design.EventsTab : PropertyTab {
    [NullableAttribute("2")]
private IServiceProvider _serviceProvider;
    [NullableAttribute("2")]
private IDesignerHost _currentHost;
    private bool _hookedDesignerChanged;
    public string TabName { get; }
    public string HelpKeyword { get; }
    [NullableContextAttribute("2")]
public EventsTab(IServiceProvider sp);
    public virtual string get_TabName();
    public virtual string get_HelpKeyword();
    public virtual bool CanExtend(object extendee);
    private void OnActiveDesignerChanged(object sender, ActiveDesignerEventArgs e);
    public virtual PropertyDescriptor GetDefaultProperty(object obj);
    [NullableContextAttribute("2")]
private IEventBindingService GetEventBindingService(object object, ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes);
}
[NullableContextAttribute("1")]
[GuidAttribute("06A9C74B-5E32-4561-BE73-381B37869F4F")]
public interface System.Windows.Forms.Design.IUIService {
    public IDictionary Styles { get; }
    public abstract virtual IDictionary get_Styles();
    public abstract virtual bool CanShowComponentEditor(object component);
    public abstract virtual IWin32Window GetDialogOwnerWindow();
    public abstract virtual void SetUIDirty();
    public abstract virtual bool ShowComponentEditor(object component, IWin32Window parent);
    public abstract virtual DialogResult ShowDialog(Form form);
    public abstract virtual void ShowError(string message);
    public abstract virtual void ShowError(Exception ex);
    public abstract virtual void ShowError(Exception ex, string message);
    public abstract virtual void ShowMessage(string message);
    public abstract virtual void ShowMessage(string message, string caption);
    public abstract virtual DialogResult ShowMessage(string message, string caption, MessageBoxButtons buttons);
    public abstract virtual bool ShowToolWindow(Guid toolWindow);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.Design.IWindowsFormsEditorService {
    public abstract virtual void CloseDropDown();
    [NullableContextAttribute("2")]
public abstract virtual void DropDownControl(Control control);
    public abstract virtual DialogResult ShowDialog(Form dialog);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.Design.PropertyTab : object {
    private Bitmap _bitmap;
    private bool _checkedBitmap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Components>k__BackingField;
    public Bitmap Bitmap { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Components { get; public set; }
    public string TabName { get; }
    public string HelpKeyword { get; }
    public virtual Bitmap get_Bitmap();
    [CompilerGeneratedAttribute]
public virtual Object[] get_Components();
    [CompilerGeneratedAttribute]
public virtual void set_Components(Object[] value);
    public abstract virtual string get_TabName();
    public virtual string get_HelpKeyword();
    [NullableContextAttribute("1")]
public virtual bool CanExtend(object extendee);
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    [NullableContextAttribute("1")]
public virtual PropertyDescriptor GetDefaultProperty(object component);
    [NullableContextAttribute("1")]
public virtual PropertyDescriptorCollection GetProperties(object component);
    [NullableContextAttribute("1")]
public abstract virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes);
}
[FlagsAttribute]
public enum System.Windows.Forms.Design.ToolStripItemDesignerAvailability : Enum {
    public int value__;
    public static ToolStripItemDesignerAvailability None;
    public static ToolStripItemDesignerAvailability ToolStrip;
    public static ToolStripItemDesignerAvailability MenuStrip;
    public static ToolStripItemDesignerAvailability ContextMenuStrip;
    public static ToolStripItemDesignerAvailability StatusStrip;
    public static ToolStripItemDesignerAvailability All;
}
[AttributeUsageAttribute("4")]
public class System.Windows.Forms.Design.ToolStripItemDesignerAvailabilityAttribute : Attribute {
    [NullableAttribute("1")]
public static ToolStripItemDesignerAvailabilityAttribute Default;
    [CompilerGeneratedAttribute]
private ToolStripItemDesignerAvailability <ItemAdditionVisibility>k__BackingField;
    public ToolStripItemDesignerAvailability ItemAdditionVisibility { get; }
    public ToolStripItemDesignerAvailabilityAttribute(ToolStripItemDesignerAvailability visibility);
    private static ToolStripItemDesignerAvailabilityAttribute();
    [CompilerGeneratedAttribute]
public ToolStripItemDesignerAvailability get_ItemAdditionVisibility();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.Design.WindowsFormsComponentEditor : ComponentEditor {
    public virtual bool EditComponent(ITypeDescriptorContext context, object component);
    public bool EditComponent(object component, IWin32Window owner);
    [NullableContextAttribute("2")]
public virtual bool EditComponent(ITypeDescriptorContext context, object component, IWin32Window owner);
    protected virtual Type[] GetComponentEditorPages();
    protected virtual int GetInitialComponentEditorPageIndex();
}
public enum System.Windows.Forms.DialogResult : Enum {
    public int value__;
    public static DialogResult None;
    public static DialogResult OK;
    public static DialogResult Cancel;
    public static DialogResult Abort;
    public static DialogResult Retry;
    public static DialogResult Ignore;
    public static DialogResult Yes;
    public static DialogResult No;
    public static DialogResult TryAgain;
    public static DialogResult Continue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.DisplayInformation : object {
    private static bool s_highContrast;
    private static bool s_lowRes;
    private static bool s_highContrastSettingValid;
    private static bool s_lowResSettingValid;
    private static short s_bitsPerPixel;
    private static bool s_dropShadowSettingValid;
    private static bool s_dropShadowEnabled;
    private static bool s_menuAccessKeysUnderlinedValid;
    private static bool s_menuAccessKeysUnderlined;
    public static short BitsPerPixel { get; }
    public static bool LowResolution { get; }
    public static bool HighContrast { get; }
    public static bool IsDropShadowEnabled { get; }
    public static bool MenuAccessKeysUnderlined { get; }
    private static DisplayInformation();
    public static short get_BitsPerPixel();
    public static bool get_LowResolution();
    public static bool get_HighContrast();
    public static bool get_IsDropShadowEnabled();
    public static bool get_MenuAccessKeysUnderlined();
    private static void DisplaySettingsChanging(object obj, EventArgs ea);
    private static void UserPreferenceChanging(object obj, UserPreferenceChangingEventArgs e);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Forms.DockingAttribute : Attribute {
    [NullableAttribute("1")]
public static DockingAttribute Default;
    [CompilerGeneratedAttribute]
private DockingBehavior <DockingBehavior>k__BackingField;
    public DockingBehavior DockingBehavior { get; }
    public DockingAttribute(DockingBehavior dockingBehavior);
    private static DockingAttribute();
    [CompilerGeneratedAttribute]
public DockingBehavior get_DockingBehavior();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public enum System.Windows.Forms.DockingBehavior : Enum {
    public int value__;
    public static DockingBehavior Never;
    public static DockingBehavior Ask;
    public static DockingBehavior AutoDock;
}
[EditorAttribute("System.Windows.Forms.Design.DockEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public enum System.Windows.Forms.DockStyle : Enum {
    public int value__;
    public static DockStyle None;
    public static DockStyle Top;
    public static DockStyle Bottom;
    public static DockStyle Left;
    public static DockStyle Right;
    public static DockStyle Fill;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Items")]
[DefaultEventAttribute("SelectedItemChanged")]
[DefaultBindingPropertyAttribute("SelectedItem")]
[SRDescriptionAttribute("DescriptionDomainUpDown")]
public class System.Windows.Forms.DomainUpDown : UpDownBase {
    [NullableAttribute("1")]
private static string s_defaultValue;
    private DomainUpDownItemCollection _domainItems;
    [NullableAttribute("1")]
private string _stringValue;
    private int _domainIndex;
    private bool _sorted;
    private EventHandler _onSelectedItemChanged;
    private bool _inSort;
    [CompilerGeneratedAttribute]
private bool <Wrap>k__BackingField;
    [NullableAttribute("1")]
[SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DomainUpDownItemsDescr")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public DomainUpDownItemCollection Items { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DomainUpDownSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DomainUpDownSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DomainUpDownSortedDescr")]
public bool Sorted { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DomainUpDownWrapDescr")]
public bool Wrap { get; public set; }
    private static DomainUpDown();
    [NullableContextAttribute("1")]
public DomainUpDownItemCollection get_Items();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    internal virtual bool get_SupportsUiaProviders();
    [CompilerGeneratedAttribute]
public bool get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(bool value);
    public void add_SelectedItemChanged(EventHandler value);
    public void remove_SelectedItemChanged(EventHandler value);
    public virtual void DownButton();
    [NullableContextAttribute("1")]
internal int MatchIndex(string text, bool complete);
    [NullableContextAttribute("1")]
internal int MatchIndex(string text, bool complete, int startPosition);
    [NullableContextAttribute("1")]
protected virtual void OnChanged(object source, EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnTextBoxKeyPress(object source, KeyPressEventArgs e);
    [NullableContextAttribute("1")]
protected void OnSelectedItemChanged(object source, EventArgs e);
    private void SelectIndex(int index);
    private void SortDomainItems();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual void UpButton();
    protected virtual void UpdateEditText();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
}
public class System.Windows.Forms.DpiChangedEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private int <DeviceDpiOld>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeviceDpiNew>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <SuggestedRectangle>k__BackingField;
    public int DeviceDpiOld { get; }
    public int DeviceDpiNew { get; }
    public Rectangle SuggestedRectangle { get; }
    internal DpiChangedEventArgs(int old, Message m);
    [CompilerGeneratedAttribute]
public int get_DeviceDpiOld();
    [CompilerGeneratedAttribute]
public int get_DeviceDpiNew();
    [CompilerGeneratedAttribute]
public Rectangle get_SuggestedRectangle();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class System.Windows.Forms.DpiChangedEventHandler : MulticastDelegate {
    public DpiChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DpiChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DpiChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DragAction : Enum {
    public int value__;
    public static DragAction Continue;
    public static DragAction Drop;
    public static DragAction Cancel;
}
[FlagsAttribute]
public enum System.Windows.Forms.DragDropEffects : Enum {
    public int value__;
    public static DragDropEffects None;
    public static DragDropEffects Copy;
    public static DragDropEffects Move;
    public static DragDropEffects Link;
    public static DragDropEffects Scroll;
    public static DragDropEffects All;
}
internal class System.Windows.Forms.DragDropFormat : object {
    private short _format;
    private STGMEDIUM _medium;
    public STGMEDIUM Medium { get; }
    public DragDropFormat(short format, STGMEDIUM medium, bool copyData);
    public STGMEDIUM get_Medium();
    public STGMEDIUM GetData();
    public void RefreshData(short format, STGMEDIUM medium, bool copyData);
    private static STGMEDIUM CopyData(short format, STGMEDIUM mediumSource);
    private void ReleaseData();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.DragDropHelper : object {
    private static int DSH_ALLOWDROPDESCRIPTIONTEXT;
    internal static string CF_DRAGIMAGEBITS;
    internal static string CF_DROPDESCRIPTION;
    internal static string CF_INSHELLDRAGLOOP;
    internal static string CF_ISSHOWINGTEXT;
    internal static string CF_USINGDEFAULTDRAGIMAGE;
    [NullableContextAttribute("2")]
public static void ClearDropDescription(IDataObject dataObject);
    public static void DragEnter(IntPtr targetWindowHandle, DragEventArgs e);
    public static void DragEnter(IntPtr targetWindowHandle, IDataObject dataObject, Point& point, DROPEFFECT effect);
    public static void DragLeave();
    public static void DragOver(DragEventArgs e);
    public static void Drop(DragEventArgs e);
    private static bool GetBooleanFormat(IDataObject dataObject, string format);
    public static bool IsInDragLoop(IDataObject dataObject);
    public static bool IsInDragLoop(IDataObject dataObject);
    public static bool IsInDragLoopFormat(FORMATETC format);
    public static void ReleaseDragDropFormats(IDataObject comDataObject);
    private static void SetBooleanFormat(IDataObject dataObject, string format, bool value);
    public static void SetDragImage(IDataObject dataObject, GiveFeedbackEventArgs e);
    public static void SetDragImage(IDataObject dataObject, Bitmap dragImage, Point cursorOffset, bool usingDefaultDragImage);
    public static void SetDropDescription(DragEventArgs e);
    public static void SetDropDescription(IDataObject dataObject, DropImageType dropImageType, string message, string messageReplacementToken);
    public static void SetInDragLoop(IDataObject dataObject, bool inDragLoop);
    private static void SetIsShowingText(IDataObject dataObject, bool isShowingText);
    private static void SetUsingDefaultDragImage(IDataObject dataObject, bool usingDefaultDragImage);
    [NullableContextAttribute("2")]
private static bool TryGetDragDropHelper(TDragDropHelper& dragDropHelper);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DragEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDataObject <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <AllowedEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <Effect>k__BackingField;
    [CompilerGeneratedAttribute]
private DropImageType <DropImageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageReplacementToken>k__BackingField;
    public IDataObject Data { get; }
    public int KeyState { get; }
    public int X { get; }
    public int Y { get; }
    public DragDropEffects AllowedEffect { get; }
    public DragDropEffects Effect { get; public set; }
    public DropImageType DropImageType { get; public set; }
    public string Message { get; public set; }
    public string MessageReplacementToken { get; public set; }
    public DragEventArgs(IDataObject data, int keyState, int x, int y, DragDropEffects allowedEffect, DragDropEffects effect);
    public DragEventArgs(IDataObject data, int keyState, int x, int y, DragDropEffects allowedEffect, DragDropEffects effect, DropImageType dropImageType, string message, string messageReplacementToken);
    [CompilerGeneratedAttribute]
public IDataObject get_Data();
    [CompilerGeneratedAttribute]
public int get_KeyState();
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public DragDropEffects get_AllowedEffect();
    [CompilerGeneratedAttribute]
public DragDropEffects get_Effect();
    [CompilerGeneratedAttribute]
public void set_Effect(DragDropEffects value);
    [CompilerGeneratedAttribute]
public DropImageType get_DropImageType();
    [CompilerGeneratedAttribute]
public void set_DropImageType(DropImageType value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_MessageReplacementToken();
    [CompilerGeneratedAttribute]
public void set_MessageReplacementToken(string value);
    [NullableContextAttribute("1")]
internal DragEventArgs Clone();
    internal bool Equals(DragEventArgs dragEventArgs);
}
public class System.Windows.Forms.DragEventHandler : MulticastDelegate {
    public DragEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DragEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DragEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.DrawingEventArgs : object {
    [NullableAttribute("2")]
private Graphics _graphics;
    private HDC _hdc;
    private HPALETTE _oldPalette;
    [CompilerGeneratedAttribute]
private DrawingEventFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ClipRectangle>k__BackingField;
    internal DrawingEventFlags Flags { get; private set; }
    internal Rectangle ClipRectangle { get; }
    internal bool IsStateClean { get; }
    internal HDC HDC { get; }
    internal Graphics Graphics { get; }
    public DrawingEventArgs(Graphics graphics, Rectangle clipRect, DrawingEventFlags flags);
    public DrawingEventArgs(HDC dc, Rectangle clipRect, DrawingEventFlags flags);
    [CompilerGeneratedAttribute]
internal DrawingEventFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(DrawingEventFlags value);
    [CompilerGeneratedAttribute]
internal Rectangle get_ClipRectangle();
    internal bool get_IsStateClean();
    internal HDC get_HDC();
    internal Graphics get_Graphics();
    internal Graphics GetOrCreateGraphicsInternal(Action`1<Graphics> creationAction);
    internal HDC GetHDC();
    [NullableContextAttribute("2")]
internal Graphics GetGraphics(bool create);
    internal void Dispose(bool disposing);
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
internal static void CheckGraphicsForState(Graphics graphics, DrawingEventFlags flags);
}
[FlagsAttribute]
internal enum System.Windows.Forms.DrawingEventFlags : Enum {
    public ushort value__;
    public static DrawingEventFlags GraphicsStateUnclean;
    public static DrawingEventFlags SaveState;
    public static DrawingEventFlags CheckState;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DrawItemEventArgs : EventArgs {
    private DrawingEventArgs _event;
    private Color _backColor;
    private Color _foreColor;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private DrawItemState <State>k__BackingField;
    public Graphics Graphics { get; }
    [NullableAttribute("2")]
public Font Font { get; }
    public Rectangle Bounds { get; }
    public int Index { get; }
    public DrawItemState State { get; }
    public Color ForeColor { get; }
    public Color BackColor { get; }
    internal Graphics GraphicsInternal { get; }
    internal HDC HDC { get; }
    private bool System.Windows.Forms.IGraphicsHdcProvider.IsGraphicsStateClean { get; }
    public DrawItemEventArgs(Graphics graphics, Font font, Rectangle rect, int index, DrawItemState state);
    public DrawItemEventArgs(Graphics graphics, Font font, Rectangle rect, int index, DrawItemState state, Color foreColor, Color backColor);
    [NullableContextAttribute("2")]
internal DrawItemEventArgs(HDC hdc, Font font, Rectangle rect, UInt32 index, ODS_FLAGS state);
    [NullableContextAttribute("2")]
internal DrawItemEventArgs(HDC hdc, Font font, Rectangle rect, UInt32 index, ODS_FLAGS state, Color foreColor, Color backColor);
    public Graphics get_Graphics();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Font get_Font();
    public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public DrawItemState get_State();
    public Color get_ForeColor();
    public Color get_BackColor();
    public virtual void DrawBackground();
    public virtual void DrawFocusRectangle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal Graphics get_GraphicsInternal();
    internal HDC get_HDC();
    private sealed virtual override IntPtr System.Drawing.IDeviceContext.GetHdc();
    private sealed virtual override void System.Drawing.IDeviceContext.ReleaseHdc();
    private sealed virtual override HDC System.Windows.Forms.IGraphicsHdcProvider.GetHDC();
    [NullableContextAttribute("2")]
private sealed virtual override Graphics System.Windows.Forms.IGraphicsHdcProvider.GetGraphics(bool create);
    private sealed virtual override bool System.Windows.Forms.IGraphicsHdcProvider.get_IsGraphicsStateClean();
}
public class System.Windows.Forms.DrawItemEventHandler : MulticastDelegate {
    public DrawItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DrawItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.DrawItemState : Enum {
    public int value__;
    public static DrawItemState Checked;
    public static DrawItemState ComboBoxEdit;
    public static DrawItemState Default;
    public static DrawItemState Disabled;
    public static DrawItemState Focus;
    public static DrawItemState Grayed;
    public static DrawItemState HotLight;
    public static DrawItemState Inactive;
    public static DrawItemState NoAccelerator;
    public static DrawItemState NoFocusRect;
    public static DrawItemState Selected;
    public static DrawItemState None;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DrawListViewColumnHeaderEventArgs : EventArgs {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItemStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DrawDefault>k__BackingField;
    [NullableAttribute("1")]
public Graphics Graphics { get; }
    public Rectangle Bounds { get; }
    public int ColumnIndex { get; }
    public ColumnHeader Header { get; }
    public ListViewItemStates State { get; }
    public Color ForeColor { get; }
    public Color BackColor { get; }
    public Font Font { get; }
    public bool DrawDefault { get; public set; }
    public DrawListViewColumnHeaderEventArgs(Graphics graphics, Rectangle bounds, int columnIndex, ColumnHeader header, ListViewItemStates state, Color foreColor, Color backColor, Font font);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public ColumnHeader get_Header();
    [CompilerGeneratedAttribute]
public ListViewItemStates get_State();
    [CompilerGeneratedAttribute]
public Color get_ForeColor();
    [CompilerGeneratedAttribute]
public Color get_BackColor();
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public bool get_DrawDefault();
    [CompilerGeneratedAttribute]
public void set_DrawDefault(bool value);
    public void DrawBackground();
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
}
public class System.Windows.Forms.DrawListViewColumnHeaderEventHandler : MulticastDelegate {
    public DrawListViewColumnHeaderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DrawListViewColumnHeaderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawListViewColumnHeaderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DrawListViewItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItemStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DrawDefault>k__BackingField;
    public Graphics Graphics { get; }
    public ListViewItem Item { get; }
    public Rectangle Bounds { get; }
    public int ItemIndex { get; }
    public ListViewItemStates State { get; }
    public bool DrawDefault { get; public set; }
    public DrawListViewItemEventArgs(Graphics graphics, ListViewItem item, Rectangle bounds, int itemIndex, ListViewItemStates state);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
public ListViewItemStates get_State();
    [CompilerGeneratedAttribute]
public bool get_DrawDefault();
    [CompilerGeneratedAttribute]
public void set_DrawDefault(bool value);
    public void DrawBackground();
    public void DrawFocusRectangle();
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
    private Rectangle UpdateBounds(Rectangle originalBounds, bool drawText);
}
public class System.Windows.Forms.DrawListViewItemEventHandler : MulticastDelegate {
    public DrawListViewItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DrawListViewItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawListViewItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DrawListViewSubItemEventArgs : EventArgs {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewSubItem <SubItem>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItemStates <ItemState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DrawDefault>k__BackingField;
    [NullableAttribute("1")]
public Graphics Graphics { get; }
    public Rectangle Bounds { get; }
    public ListViewItem Item { get; }
    public ListViewSubItem SubItem { get; }
    public int ItemIndex { get; }
    public int ColumnIndex { get; }
    public ColumnHeader Header { get; }
    public ListViewItemStates ItemState { get; }
    public bool DrawDefault { get; public set; }
    public DrawListViewSubItemEventArgs(Graphics graphics, Rectangle bounds, ListViewItem item, ListViewSubItem subItem, int itemIndex, int columnIndex, ColumnHeader header, ListViewItemStates itemState);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
    [CompilerGeneratedAttribute]
public ListViewSubItem get_SubItem();
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public ColumnHeader get_Header();
    [CompilerGeneratedAttribute]
public ListViewItemStates get_ItemState();
    [CompilerGeneratedAttribute]
public bool get_DrawDefault();
    [CompilerGeneratedAttribute]
public void set_DrawDefault(bool value);
    public void DrawBackground();
    public void DrawFocusRectangle(Rectangle bounds);
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
}
public class System.Windows.Forms.DrawListViewSubItemEventHandler : MulticastDelegate {
    public DrawListViewSubItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DrawListViewSubItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawListViewSubItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DrawMode : Enum {
    public int value__;
    public static DrawMode Normal;
    public static DrawMode OwnerDrawFixed;
    public static DrawMode OwnerDrawVariable;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.DrawToolTipEventArgs : EventArgs {
    private Color _backColor;
    private Color _foreColor;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private IWin32Window <AssociatedWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <AssociatedControl>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [NullableAttribute("1")]
public Graphics Graphics { get; }
    public IWin32Window AssociatedWindow { get; }
    public Control AssociatedControl { get; }
    public Rectangle Bounds { get; }
    public string ToolTipText { get; }
    public Font Font { get; }
    public DrawToolTipEventArgs(Graphics graphics, IWin32Window associatedWindow, Control associatedControl, Rectangle bounds, string toolTipText, Color backColor, Color foreColor, Font font);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public IWin32Window get_AssociatedWindow();
    [CompilerGeneratedAttribute]
public Control get_AssociatedControl();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
public Font get_Font();
    public void DrawBackground();
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
    public void DrawBorder();
}
public class System.Windows.Forms.DrawToolTipEventHandler : MulticastDelegate {
    public DrawToolTipEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DrawToolTipEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawToolTipEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.DrawTreeNodeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeNodeStates <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DrawDefault>k__BackingField;
    public Graphics Graphics { get; }
    [NullableAttribute("2")]
public TreeNode Node { get; }
    public Rectangle Bounds { get; }
    public TreeNodeStates State { get; }
    public bool DrawDefault { get; public set; }
    public DrawTreeNodeEventArgs(Graphics graphics, TreeNode node, Rectangle bounds, TreeNodeStates state);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TreeNode get_Node();
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public TreeNodeStates get_State();
    [CompilerGeneratedAttribute]
public bool get_DrawDefault();
    [CompilerGeneratedAttribute]
public void set_DrawDefault(bool value);
}
public class System.Windows.Forms.DrawTreeNodeEventHandler : MulticastDelegate {
    public DrawTreeNodeEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DrawTreeNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawTreeNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DropImageType : Enum {
    public int value__;
    public static DropImageType Invalid;
    public static DropImageType None;
    public static DropImageType Copy;
    public static DropImageType Move;
    public static DropImageType Link;
    public static DropImageType Label;
    public static DropImageType Warning;
    public static DropImageType NoImage;
}
internal class System.Windows.Forms.DropSource : object {
    [NullableAttribute("1")]
private ISupportOleDropSource _peer;
    [NullableAttribute("1")]
private IDataObject _dataObject;
    private HWND _lastHwndTarget;
    [NullableAttribute("2")]
private GiveFeedbackEventArgs _lastGiveFeedbacEventArgs;
    [NullableContextAttribute("1")]
public DropSource(ISupportOleDropSource peer, IDataObject dataObject, Bitmap dragImage, Point cursorOffset, bool useDefaultDragImage);
    public sealed virtual HRESULT QueryContinueDrag(BOOL fEscapePressed, MODIFIERKEYS_FLAGS grfKeyState);
    public sealed virtual HRESULT GiveFeedback(DROPEFFECT dwEffect);
    public sealed virtual HRESULT DragEnterTarget(HWND hwndTarget);
    public sealed virtual HRESULT DragLeaveTarget();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <GiveFeedback>g__UpdateDragImage|6_0(GiveFeedbackEventArgs e, IDataObject dataObject, HWND lastHwndTarget);
}
internal class System.Windows.Forms.DropTarget : object {
    [NullableAttribute("2")]
private IDataObject _lastDataObject;
    private DragDropEffects _lastEffect;
    [NullableAttribute("2")]
private DragEventArgs _lastDragEventArgs;
    private IntPtr _hwndTarget;
    [NullableAttribute("1")]
private IDropTarget _owner;
    [NullableContextAttribute("1")]
public DropTarget(IDropTarget owner);
    private void ClearDropDescription();
    private DragEventArgs CreateDragEventArgs(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT pdwEffect);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDropTarget.Interface.DragEnter(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDropTarget.Interface.DragOver(MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDropTarget.Interface.DragLeave();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDropTarget.Interface.Drop(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    [NullableContextAttribute("1")]
private void UpdateDropDescription(DragEventArgs e);
}
public enum System.Windows.Forms.ErrorBlinkStyle : Enum {
    public int value__;
    public static ErrorBlinkStyle BlinkIfDifferentError;
    public static ErrorBlinkStyle AlwaysBlink;
    public static ErrorBlinkStyle NeverBlink;
}
public enum System.Windows.Forms.ErrorIconAlignment : Enum {
    public int value__;
    public static ErrorIconAlignment TopLeft;
    public static ErrorIconAlignment TopRight;
    public static ErrorIconAlignment MiddleLeft;
    public static ErrorIconAlignment MiddleRight;
    public static ErrorIconAlignment BottomLeft;
    public static ErrorIconAlignment BottomRight;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProvidePropertyAttribute("IconPadding", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("IconAlignment", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("Error", "System.Windows.Forms.Control")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
[SRDescriptionAttribute("DescriptionErrorProvider")]
public class System.Windows.Forms.ErrorProvider : Component {
    private Dictionary`2<Control, ControlItem> _items;
    private Dictionary`2<Control, ErrorWindow> _windows;
    private Icon _icon;
    [NullableAttribute("2")]
private IconRegion _region;
    private int _itemIdCounter;
    private int _blinkRate;
    private ErrorBlinkStyle _blinkStyle;
    private bool _showIcon;
    private bool _inSetErrorManager;
    private bool _setErrorManagerOnEndInit;
    private bool _initializing;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Icon t_defaultIcon;
    private static int DefaultBlinkRate;
    private static ErrorBlinkStyle DefaultBlinkStyle;
    private static ErrorIconAlignment DefaultIconAlignment;
    [NullableAttribute("2")]
private ContainerControl _parentControl;
    [NullableAttribute("2")]
private object _dataSource;
    [NullableAttribute("2")]
private string _dataMember;
    [NullableAttribute("2")]
private BindingManagerBase _errorManager;
    private EventHandler _currentChanged;
    [NullableAttribute("2")]
private EventHandler _propChangedEvent;
    [NullableAttribute("2")]
private EventHandler _onRightToLeftChanged;
    private bool _rightToLeft;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [NullableAttribute("2")]
unknown ISite Site {public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ErrorProviderBlinkStyleDescr")]
public ErrorBlinkStyle BlinkStyle { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ErrorProviderContainerControlDescr")]
public ContainerControl ContainerControl { get; public set; }
    public bool HasErrors { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public bool RightToLeft { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("ErrorProviderDataSourceDescr")]
public object DataSource { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ErrorProviderDataMemberDescr")]
public string DataMember { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("250")]
[SRDescriptionAttribute("ErrorProviderBlinkRateDescr")]
[RefreshPropertiesAttribute("2")]
public int BlinkRate { get; public set; }
    private static Icon DefaultIcon { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderIconDescr")]
public Icon Icon { get; public set; }
    internal IconRegion Region { get; }
    public ErrorProvider(ContainerControl parentControl);
    public ErrorProvider(IContainer container);
    [NullableContextAttribute("2")]
public virtual void set_Site(ISite value);
    public ErrorBlinkStyle get_BlinkStyle();
    public void set_BlinkStyle(ErrorBlinkStyle value);
    [NullableContextAttribute("2")]
public ContainerControl get_ContainerControl();
    [NullableContextAttribute("2")]
public void set_ContainerControl(ContainerControl value);
    public bool get_HasErrors();
    public virtual bool get_RightToLeft();
    public virtual void set_RightToLeft(bool value);
    [NullableContextAttribute("2")]
public void add_RightToLeftChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_RightToLeftChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Tag(object value);
    [NullableContextAttribute("2")]
private void SetErrorManager(object newDataSource, string newDataMember, bool force);
    [NullableContextAttribute("2")]
public object get_DataSource();
    [NullableContextAttribute("2")]
public void set_DataSource(object value);
    private bool ShouldSerializeDataSource();
    [NullableContextAttribute("2")]
public string get_DataMember();
    [NullableContextAttribute("2")]
public void set_DataMember(string value);
    private bool ShouldSerializeDataMember();
    [NullableContextAttribute("2")]
public void BindToDataAndErrors(object newDataSource, string newDataMember);
    [NullableContextAttribute("2")]
private void WireEvents(BindingManagerBase listManager);
    [NullableContextAttribute("2")]
private void UnwireEvents(BindingManagerBase listManager);
    private void ErrorManager_BindingComplete(object sender, BindingCompleteEventArgs e);
    private void ErrorManager_BindingsChanged(object sender, CollectionChangeEventArgs e);
    private void ParentControl_BindingContextChanged(object sender, EventArgs e);
    public void UpdateBinding();
    private void ErrorManager_ItemChanged(object sender, ItemChangedEventArgs e);
    private void ErrorManager_CurrentChanged(object sender, EventArgs e);
    public int get_BlinkRate();
    public void set_BlinkRate(int value);
    private static Icon get_DefaultIcon();
    public Icon get_Icon();
    public void set_Icon(Icon value);
    internal IconRegion get_Region();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private void EndInitCore();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private void DataSource_Initialized(object sender, EventArgs e);
    public void Clear();
    [NullableContextAttribute("2")]
public sealed virtual bool CanExtend(object extendee);
    protected virtual void Dispose(bool disposing);
    private void DisposeRegion();
    private ControlItem EnsureControlItem(Control control);
    internal ErrorWindow EnsureErrorWindow(Control parent);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderErrorDescr")]
public string GetError(Control control);
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderIconAlignmentDescr")]
public ErrorIconAlignment GetIconAlignment(Control control);
    [DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderIconPaddingDescr")]
public int GetIconPadding(Control control);
    private void ResetIcon();
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    public void SetError(Control control, string value);
    public void SetIconAlignment(Control control, ErrorIconAlignment value);
    public void SetIconPadding(Control control, int padding);
    private bool ShouldSerializeIcon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.FeatureSupport : object {
    public static bool IsPresent(string featureClassName, string featureConstName);
    public static bool IsPresent(string featureClassName, string featureConstName, Version minimumVersion);
    public static Version GetVersionPresent(string featureClassName, string featureConstName);
    public virtual bool IsPresent(object feature);
    public virtual bool IsPresent(object feature, Version minimumVersion);
    public abstract virtual Version GetVersionPresent(object feature);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("FileOk")]
[DefaultPropertyAttribute("FileName")]
public abstract class System.Windows.Forms.FileDialog : CommonDialog {
    private static int FileBufferSize;
    private static Char[] s_wildcards;
    protected static object EventFileOk;
    private protected OPEN_FILENAME_FLAGS _fileNameFlags;
    private protected FILEOPENDIALOGOPTIONS _dialogOptions;
    [NullableAttribute("2")]
private string _title;
    [NullableAttribute("2")]
private string _initialDirectory;
    [NullableAttribute("2")]
private string _defaultExtension;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _fileNames;
    [NullableAttribute("2")]
private string _filter;
    private bool _ignoreSecondFileOkNotification;
    private int _okNotificationCount;
    [NullableAttribute("2")]
private Char[] _charBuffer;
    private HWND _dialogHWnd;
    [CompilerGeneratedAttribute]
private bool <AddExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ClientGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilterIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMultiDottedExtensions>k__BackingField;
    private FileDialogCustomPlacesCollection _customPlaces;
    [CompilerGeneratedAttribute]
private bool <AutoUpgradeEnabled>k__BackingField;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDaddExtensionDescr")]
public bool AddExtension { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FileDialogAddToRecentDescr")]
public bool AddToRecent { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDcheckFileExistsDescr")]
public bool CheckFileExists { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDcheckPathExistsDescr")]
public bool CheckPathExists { get; public set; }
    [LocalizableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Nullable`1<Guid> ClientGuid { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FDdefaultExtDescr")]
public string DefaultExt { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDdereferenceLinksDescr")]
public bool DereferenceLinks { get; public set; }
    private protected string DialogCaption { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FDfileNameDescr")]
public string FileName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FDFileNamesDescr")]
public String[] FileNames { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FDfilterDescr")]
public string Filter { get; public set; }
    private String[] FilterExtensions { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("FDfilterIndexDescr")]
public int FilterIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.InitialDirectoryEditor, System.Windows.Forms.Design, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("FDinitialDirDescr")]
public string InitialDirectory { get; public set; }
    protected IntPtr Instance { get; }
    protected int Options { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDrestoreDirectoryDescr")]
public bool RestoreDirectory { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FileDialogShowHiddenFilesDescr")]
public bool ShowHiddenFiles { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDsupportMultiDottedExtensionsDescr")]
public bool SupportMultiDottedExtensions { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FDtitleDescr")]
public string Title { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDvalidateNamesDescr")]
public bool ValidateNames { get; public set; }
    private protected bool SettingsSupportVistaDialog { get; }
    internal bool UseVistaDialogInternal { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FileDialogCustomPlacesCollection CustomPlaces { get; }
    [DefaultValueAttribute("True")]
public bool AutoUpgradeEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FileDialogOkRequiresInteractionDescr")]
public bool OkRequiresInteraction { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FileDialogShowPinnedPlacesDescr")]
public bool ShowPinnedPlaces { get; public set; }
    private static FileDialog();
    [CompilerGeneratedAttribute]
public bool get_AddExtension();
    [CompilerGeneratedAttribute]
public void set_AddExtension(bool value);
    public bool get_AddToRecent();
    public void set_AddToRecent(bool value);
    public virtual bool get_CheckFileExists();
    public virtual void set_CheckFileExists(bool value);
    public bool get_CheckPathExists();
    public void set_CheckPathExists(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ClientGuid();
    [CompilerGeneratedAttribute]
public void set_ClientGuid(Nullable`1<Guid> value);
    public string get_DefaultExt();
    public void set_DefaultExt(string value);
    public bool get_DereferenceLinks();
    public void set_DereferenceLinks(bool value);
    private protected string get_DialogCaption();
    public string get_FileName();
    public void set_FileName(string value);
    public String[] get_FileNames();
    public string get_Filter();
    public void set_Filter(string value);
    private String[] get_FilterExtensions();
    [CompilerGeneratedAttribute]
public int get_FilterIndex();
    [CompilerGeneratedAttribute]
public void set_FilterIndex(int value);
    public string get_InitialDirectory();
    public void set_InitialDirectory(string value);
    protected virtual IntPtr get_Instance();
    protected int get_Options();
    public bool get_RestoreDirectory();
    public void set_RestoreDirectory(bool value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    public bool get_ShowHiddenFiles();
    public void set_ShowHiddenFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultiDottedExtensions();
    [CompilerGeneratedAttribute]
public void set_SupportMultiDottedExtensions(bool value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_ValidateNames();
    public void set_ValidateNames(bool value);
    public void add_FileOk(CancelEventHandler value);
    public void remove_FileOk(CancelEventHandler value);
    [NullableContextAttribute("0")]
private bool DoFileOk(OPENFILENAME* lpOFN);
    [NullableContextAttribute("2")]
private protected static bool FileExists(string fileName);
    [NullableContextAttribute("0")]
private static String[] GetMultiselectFiles(ReadOnlySpan`1<char> fileBuffer);
    private protected bool GetOption(OPEN_FILENAME_FLAGS option);
    protected virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    [NullableContextAttribute("2")]
private static string MakeFilterString(string s, bool dereferenceLinks);
    protected void OnFileOk(CancelEventArgs e);
    private bool ProcessFileNames(String[] fileNames);
    private protected static bool MessageBoxWithFocusRestore(string message, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
    private protected virtual bool PromptUserIfAppropriate(string fileName);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hWndOwner);
    private bool RunDialogOld(HWND owner);
    [NullableContextAttribute("0")]
private protected abstract virtual bool RunFileDialog(OPENFILENAME* ofn);
    private protected void SetOption(OPEN_FILENAME_FLAGS option, bool value);
    public virtual string ToString();
    private protected virtual bool get_SettingsSupportVistaDialog();
    internal bool get_UseVistaDialogInternal();
    [NullableContextAttribute("0")]
private protected abstract virtual ComScope`1<IFileDialog> CreateVistaDialog();
    private bool TryRunDialogVista(HWND hWndOwner, Boolean& returnValue);
    [NullableContextAttribute("0")]
private void OnBeforeVistaDialog(IFileDialog* dialog);
    private FILEOPENDIALOGOPTIONS GetOptions();
    [NullableContextAttribute("0")]
private protected abstract virtual String[] ProcessVistaFiles(IFileDialog* dialog);
    [NullableContextAttribute("0")]
private bool HandleVistaFileOk(IFileDialog* dialog);
    [NullableContextAttribute("0")]
private void SetFileTypes(IFileDialog* dialog);
    private static COMDLG_FILTERSPEC[] GetFilterItems(string filter);
    [NullableContextAttribute("0")]
private protected static string GetFilePathFromShellItem(IShellItem* item);
    public FileDialogCustomPlacesCollection get_CustomPlaces();
    [CompilerGeneratedAttribute]
public bool get_AutoUpgradeEnabled();
    [CompilerGeneratedAttribute]
public void set_AutoUpgradeEnabled(bool value);
    public bool get_OkRequiresInteraction();
    public void set_OkRequiresInteraction(bool value);
    public bool get_ShowPinnedPlaces();
    public void set_ShowPinnedPlaces(bool value);
}
public enum System.Windows.Forms.FixedPanel : Enum {
    public int value__;
    public static FixedPanel None;
    public static FixedPanel Panel1;
    public static FixedPanel Panel2;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.FlatButtonAppearanceConverter")]
public class System.Windows.Forms.FlatButtonAppearance : object {
    private ButtonBase _owner;
    private int _borderSize;
    private Color _borderColor;
    private Color _checkedBackColor;
    private Color _mouseDownBackColor;
    private Color _mouseOverBackColor;
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonBorderSizeDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("1")]
public int BorderSize { get; public set; }
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonBorderColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonCheckedBackColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color CheckedBackColor { get; public set; }
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonMouseDownBackColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color MouseDownBackColor { get; public set; }
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonMouseOverBackColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color MouseOverBackColor { get; public set; }
    internal FlatButtonAppearance(ButtonBase owner);
    public int get_BorderSize();
    public void set_BorderSize(int value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_CheckedBackColor();
    public void set_CheckedBackColor(Color value);
    public Color get_MouseDownBackColor();
    public void set_MouseDownBackColor(Color value);
    public Color get_MouseOverBackColor();
    public void set_MouseOverBackColor(Color value);
}
internal class System.Windows.Forms.FlatButtonAppearanceConverter : ExpandableObjectConverter {
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("The Type of value cannot be statically discovered. The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public enum System.Windows.Forms.FlatStyle : Enum {
    public int value__;
    public static FlatStyle Flat;
    public static FlatStyle Popup;
    public static FlatStyle Standard;
    public static FlatStyle System;
}
public enum System.Windows.Forms.FlowDirection : Enum {
    public int value__;
    public static FlowDirection LeftToRight;
    public static FlowDirection TopDown;
    public static FlowDirection RightToLeft;
    public static FlowDirection BottomUp;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProvidePropertyAttribute("FlowBreak", "System.Windows.Forms.Control")]
[DefaultPropertyAttribute("FlowDirection")]
[DesignerAttribute("System.Windows.Forms.Design.FlowLayoutPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DockingAttribute("1")]
[SRDescriptionAttribute("DescriptionFlowLayoutPanel")]
public class System.Windows.Forms.FlowLayoutPanel : Panel {
    private FlowLayoutSettings _flowLayoutSettings;
    public LayoutEngine LayoutEngine { get; }
    [SRDescriptionAttribute("FlowPanelFlowDirectionDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public FlowDirection FlowDirection { get; public set; }
    [SRDescriptionAttribute("FlowPanelWrapContentsDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public bool WrapContents { get; public set; }
    public virtual LayoutEngine get_LayoutEngine();
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public bool get_WrapContents();
    public void set_WrapContents(bool value);
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object obj);
    [DefaultValueAttribute("False")]
[DisplayNameAttribute("FlowBreak")]
public bool GetFlowBreak(Control control);
    [DisplayNameAttribute("FlowBreak")]
public void SetFlowBreak(Control control, bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("FlowDirection")]
public class System.Windows.Forms.FlowLayoutSettings : LayoutSettings {
    public LayoutEngine LayoutEngine { get; }
    [SRDescriptionAttribute("FlowPanelFlowDirectionDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public FlowDirection FlowDirection { get; public set; }
    [SRDescriptionAttribute("FlowPanelWrapContentsDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
public bool WrapContents { get; public set; }
    internal FlowLayoutSettings(IArrangedElement owner);
    public virtual LayoutEngine get_LayoutEngine();
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public bool get_WrapContents();
    public void set_WrapContents(bool value);
    public void SetFlowBreak(object child, bool value);
    public bool GetFlowBreak(object child);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("HelpRequest")]
[DefaultPropertyAttribute("SelectedPath")]
[DesignerAttribute("System.Windows.Forms.Design.FolderBrowserDialogDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionFolderBrowserDialog")]
public class System.Windows.Forms.FolderBrowserDialog : CommonDialog {
    private SpecialFolder _rootFolder;
    private string _descriptionText;
    private string _selectedPath;
    private string _initialDirectory;
    private FILEOPENDIALOGOPTIONS _options;
    [CompilerGeneratedAttribute]
private bool <AutoUpgradeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNewFolderButton>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ClientGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDescriptionForTitle>k__BackingField;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FolderBrowserDialogAddToRecent")]
public bool AddToRecent { get; public set; }
    [DefaultValueAttribute("True")]
public bool AutoUpgradeEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FolderBrowserDialogOkRequiresInteraction")]
public bool OkRequiresInteraction { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FolderBrowserDialogShowHiddenFiles")]
public bool ShowHiddenFiles { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FolderBrowserDialogShowPinnedPlaces")]
public bool ShowPinnedPlaces { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("False")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogShowNewFolderButton")]
public bool ShowNewFolderButton { get; public set; }
    [LocalizableAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Nullable`1<Guid> ClientGuid { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.SelectedPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogSelectedPath")]
public string SelectedPath { get; public set; }
    [SRCategoryAttribute("CatFolderBrowsing")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.InitialDirectoryEditor, System.Windows.Forms.Design, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("FDinitialDirDescr")]
public string InitialDirectory { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("False")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogRootFolder")]
[TypeConverterAttribute("System.Windows.Forms.SpecialFolderEnumConverter")]
public SpecialFolder RootFolder { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogDescription")]
public string Description { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogUseDescriptionForTitle")]
public bool UseDescriptionForTitle { get; public set; }
    private bool UseVistaDialogInternal { get; }
    public bool get_AddToRecent();
    public void set_AddToRecent(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoUpgradeEnabled();
    [CompilerGeneratedAttribute]
public void set_AutoUpgradeEnabled(bool value);
    [NullableContextAttribute("2")]
public void add_HelpRequest(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_HelpRequest(EventHandler value);
    public bool get_OkRequiresInteraction();
    public void set_OkRequiresInteraction(bool value);
    public bool get_ShowHiddenFiles();
    public void set_ShowHiddenFiles(bool value);
    public bool get_ShowPinnedPlaces();
    public void set_ShowPinnedPlaces(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowNewFolderButton();
    [CompilerGeneratedAttribute]
public void set_ShowNewFolderButton(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ClientGuid();
    [CompilerGeneratedAttribute]
public void set_ClientGuid(Nullable`1<Guid> value);
    public string get_SelectedPath();
    public void set_SelectedPath(string value);
    public string get_InitialDirectory();
    public void set_InitialDirectory(string value);
    public SpecialFolder get_RootFolder();
    public void set_RootFolder(SpecialFolder value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDescriptionForTitle();
    [CompilerGeneratedAttribute]
public void set_UseDescriptionForTitle(bool value);
    private bool get_UseVistaDialogInternal();
    [MemberNotNullAttribute("_descriptionText")]
[MemberNotNullAttribute("_selectedPath")]
[MemberNotNullAttribute("_initialDirectory")]
public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hwndOwner);
    private bool TryRunDialogVista(HWND owner, Boolean& returnValue);
    [NullableContextAttribute("0")]
private void SetDialogProperties(IFileOpenDialog* dialog);
    private bool GetOption(FILEOPENDIALOGOPTIONS option);
    private void SetOption(FILEOPENDIALOGOPTIONS option, bool value);
    [NullableContextAttribute("0")]
private void GetResult(IFileOpenDialog* dialog);
    private bool RunDialogOld(HWND owner);
    [UnmanagedCallersOnlyAttribute]
private static int FolderBrowserDialog_BrowseCallbackProc(HWND hwnd, UInt32 msg, LPARAM lParam, LPARAM lpData);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Windows.Forms.FontCache : RefCountedCache`3<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> {
    private object _lock;
    public FontCache(int softLimit, int hardLimit);
    public Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> GetEntry(Font font, FONT_QUALITY quality);
    public virtual Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> GetEntry(ValueTuple`2<Font, FONT_QUALITY> key);
    protected virtual CacheEntry<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> CreateEntry(ValueTuple`2<Font, FONT_QUALITY> key, bool cached);
    protected virtual bool IsMatch(ValueTuple`2<Font, FONT_QUALITY> key, CacheEntry<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("Apply")]
[DefaultPropertyAttribute("Font")]
[SRDescriptionAttribute("DescriptionFontDialog")]
public class System.Windows.Forms.FontDialog : CommonDialog {
    protected static object EventApply;
    private static int defaultMinSize;
    private static int defaultMaxSize;
    private CF options;
    [NullableAttribute("2")]
private Font font;
    private Color color;
    private int minSize;
    private int maxSize;
    private bool showColor;
    private bool usingDefaultIndirectColor;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowSimulationsDescr")]
public bool AllowSimulations { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowVectorFontsDescr")]
public bool AllowVectorFonts { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowVerticalFontsDescr")]
public bool AllowVerticalFonts { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowScriptChangeDescr")]
public bool AllowScriptChange { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("FnDcolorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDfixedPitchOnlyDescr")]
public bool FixedPitchOnly { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("FnDfontDescr")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDfontMustExistDescr")]
public bool FontMustExist { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("FnDmaxSizeDescr")]
public int MaxSize { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("FnDminSizeDescr")]
public int MinSize { get; public set; }
    protected int Options { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDscriptsOnlyDescr")]
public bool ScriptsOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDshowApplyDescr")]
public bool ShowApply { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDshowColorDescr")]
public bool ShowColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDshowEffectsDescr")]
public bool ShowEffects { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    private static FontDialog();
    public bool get_AllowSimulations();
    public void set_AllowSimulations(bool value);
    public bool get_AllowVectorFonts();
    public void set_AllowVectorFonts(bool value);
    public bool get_AllowVerticalFonts();
    public void set_AllowVerticalFonts(bool value);
    public bool get_AllowScriptChange();
    public void set_AllowScriptChange(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public bool get_FixedPitchOnly();
    public void set_FixedPitchOnly(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public bool get_FontMustExist();
    public void set_FontMustExist(bool value);
    public int get_MaxSize();
    public void set_MaxSize(int value);
    public int get_MinSize();
    public void set_MinSize(int value);
    protected int get_Options();
    public bool get_ScriptsOnly();
    public void set_ScriptsOnly(bool value);
    public bool get_ShowApply();
    public void set_ShowApply(bool value);
    public bool get_ShowColor();
    public void set_ShowColor(bool value);
    public bool get_ShowEffects();
    public void set_ShowEffects(bool value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    [NullableContextAttribute("2")]
public void add_Apply(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Apply(EventHandler value);
    internal bool GetOption(CF option);
    protected virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    protected virtual void OnApply(EventArgs e);
    public virtual void Reset();
    private void ResetFont();
    protected virtual bool RunDialog(IntPtr hWndOwner);
    internal void SetOption(CF option, bool value);
    private bool ShouldSerializeFont();
    public virtual string ToString();
    private void UpdateColor(int rgb);
    private void UpdateFont(LOGFONT& lf);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ToolboxItemFilterAttribute("System.Windows.Forms.Control.TopLevel")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DesignerAttribute("System.Windows.Forms.Design.FormDocumentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[DefaultEventAttribute("Load")]
[InitializationEventAttribute("Load")]
[DesignerCategoryAttribute("Form")]
public class System.Windows.Forms.Form : ContainerControl {
    [NullableAttribute("1")]
private static object EVENT_ACTIVATED;
    [NullableAttribute("1")]
private static object EVENT_CLOSING;
    [NullableAttribute("1")]
private static object EVENT_CLOSED;
    [NullableAttribute("1")]
private static object EVENT_FORMCLOSING;
    [NullableAttribute("1")]
private static object EVENT_FORMCLOSED;
    [NullableAttribute("1")]
private static object EVENT_DEACTIVATE;
    [NullableAttribute("1")]
private static object EVENT_LOAD;
    [NullableAttribute("1")]
private static object EVENT_MDI_CHILD_ACTIVATE;
    [NullableAttribute("1")]
private static object EVENT_INPUTLANGCHANGE;
    [NullableAttribute("1")]
private static object EVENT_INPUTLANGCHANGEREQUEST;
    [NullableAttribute("1")]
private static object EVENT_MENUSTART;
    [NullableAttribute("1")]
private static object EVENT_MENUCOMPLETE;
    [NullableAttribute("1")]
private static object EVENT_MAXIMUMSIZECHANGED;
    [NullableAttribute("1")]
private static object EVENT_MINIMUMSIZECHANGED;
    [NullableAttribute("1")]
private static object EVENT_HELPBUTTONCLICKED;
    [NullableAttribute("1")]
private static object EVENT_SHOWN;
    [NullableAttribute("1")]
private static object EVENT_RESIZEBEGIN;
    [NullableAttribute("1")]
private static object EVENT_RESIZEEND;
    [NullableAttribute("1")]
private static object EVENT_RIGHTTOLEFTLAYOUTCHANGED;
    [NullableAttribute("1")]
private static object EVENT_DPI_CHANGED;
    private static Section FormStateAllowTransparency;
    private static Section FormStateBorderStyle;
    private static Section FormStateTaskBar;
    private static Section FormStateControlBox;
    private static Section FormStateKeyPreview;
    private static Section FormStateLayered;
    private static Section FormStateMaximizeBox;
    private static Section FormStateMinimizeBox;
    private static Section FormStateHelpButton;
    private static Section FormStateStartPos;
    private static Section FormStateWindowState;
    private static Section FormStateShowWindowOnCreate;
    private static Section FormStateAutoScaling;
    private static Section FormStateSetClientSize;
    private static Section FormStateTopMost;
    private static Section FormStateSWCalled;
    private static Section FormStateMdiChildMax;
    private static Section FormStateRenderSizeGrip;
    private static Section FormStateSizeGripStyle;
    private static Section FormStateIsWindowActivated;
    private static Section FormStateIsTextEmpty;
    private static Section FormStateIsActive;
    private static Section FormStateIconSet;
    private static Section FormStateExCalledClosing;
    private static Section FormStateExUpdateMenuHandlesSuspendCount;
    private static Section FormStateExUpdateMenuHandlesDeferred;
    private static Section FormStateExUseMdiChildProc;
    private static Section FormStateExCalledOnLoad;
    private static Section FormStateExCalledMakeVisible;
    private static Section FormStateExCalledCreateControl;
    private static Section FormStateExAutoSize;
    private static Section FormStateExInUpdateMdiControlStrip;
    private static Section FormStateExShowIcon;
    private static Section FormStateExMnemonicProcessed;
    private static Section FormStateExInScale;
    private static Section FormStateExInModalSizingLoop;
    private static Section FormStateExSettingAutoScale;
    private static Section FormStateExWindowBoundsWidthIsClientSize;
    private static Section FormStateExWindowBoundsHeightIsClientSize;
    private static Section FormStateExWindowClosing;
    private static int SizeGripSize;
    private static Icon defaultIcon;
    [NullableAttribute("1")]
private static object internalSyncObject;
    private static int PropAcceptButton;
    private static int PropCancelButton;
    private static int PropDefaultButton;
    private static int PropDialogOwner;
    private static int PropOwner;
    private static int PropOwnedForms;
    private static int PropMaximizedBounds;
    private static int PropOwnedFormsCount;
    private static int PropMinTrackSizeWidth;
    private static int PropMinTrackSizeHeight;
    private static int PropMaxTrackSizeWidth;
    private static int PropMaxTrackSizeHeight;
    private static int PropFormMdiParent;
    private static int PropActiveMdiChild;
    private static int PropFormerlyActiveMdiChild;
    private static int PropMdiChildFocusable;
    private static int PropDummyMdiMenu;
    private static int PropMainMenuStrip;
    private static int PropMdiWindowListStrip;
    private static int PropMdiControlStrip;
    private static int PropOpacity;
    private static int PropTransparencyKey;
    private BitVector32 _formState;
    private BitVector32 _formStateEx;
    private Icon _icon;
    private Icon _smallIcon;
    private Size _autoScaleBaseSize;
    private Size _minAutoSize;
    private Rectangle _restoredWindowBounds;
    private BoundsSpecified _restoredWindowBoundsSpecified;
    private DialogResult _dialogResult;
    private MdiClient _ctlClient;
    private NativeWindow _ownerWindow;
    private bool _rightToLeftLayout;
    private Rectangle _restoreBounds;
    private CloseReason _closeReason;
    private VisualStyleRenderer _sizeGripRenderer;
    private Dictionary`2<int, Size> _dpiFormSizes;
    private bool _processingDpiChanged;
    private bool _inRecreateHandle;
    [NullableAttribute("1")]
private static object EVENT_MAXIMIZEDBOUNDSCHANGED;
    [CompilerGeneratedAttribute]
private bool <MdiChildrenMinimizedAnchorBottom>k__BackingField;
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("FormAcceptButtonDescr")]
public IButtonControl AcceptButton { get; public set; }
    internal bool Active { get; internal set; }
    public static Form ActiveForm { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormActiveMDIChildDescr")]
public Form ActiveMdiChild { get; }
    internal Form ActiveMdiChildInternal { get; internal set; }
    private Form FormerlyActiveMdiChild { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAllowTransparencyDescr")]
public bool AllowTransparency { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("FormAutoScaleDescr")]
[ObsoleteAttribute("This property has been deprecated. Use the AutoScaleMode property instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScale { get; public set; }
    [LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScaleBaseSize { get; public set; }
    [LocalizableAttribute("True")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoValidate AutoValidate { get; public set; }
    public Color BackColor { get; public set; }
    private bool CalledClosing { get; private set; }
    private bool CalledCreateControl { get; private set; }
    private bool CalledMakeVisible { get; private set; }
    private bool CalledOnLoad { get; private set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("FormBorderStyleDescr")]
public FormBorderStyle FormBorderStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("FormCancelButtonDescr")]
public IButtonControl CancelButton { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public Size ClientSize { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormControlBoxDescr")]
public bool ControlBox { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    internal CloseReason CloseReason { get; internal set; }
    [NullableAttribute("1")]
internal static Icon DefaultIcon { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormDesktopBoundsDescr")]
public Rectangle DesktopBounds { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormDesktopLocationDescr")]
public Point DesktopLocation { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormDialogResultDescr")]
public DialogResult DialogResult { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormHelpButtonDescr")]
public bool HelpButton { get; public set; }
    [AmbientValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormIconDescr")]
public Icon Icon { get; public set; }
    private bool IsClosing { get; private set; }
    private bool IsMaximized { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormIsMDIChildDescr")]
[MemberNotNullWhenAttribute("True", "MdiParentInternal")]
public bool IsMdiChild { get; }
    internal bool IsMdiChildFocusable { get; internal set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormIsMDIContainerDescr")]
[MemberNotNullWhenAttribute("True", "MdiClient")]
public bool IsMdiContainer { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsRestrictedWindow { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormKeyPreviewDescr")]
public bool KeyPreview { get; public set; }
    [SettingsBindableAttribute("True")]
public Point Location { get; public set; }
    protected Rectangle MaximizedBounds { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormMaximumSizeDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("System.Drawing.Size", "0, 0")]
public Size MaximumSize { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FormMenuStripDescr")]
[TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
public MenuStrip MainMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Padding Margin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormMinimumSizeDescr")]
[RefreshPropertiesAttribute("2")]
public Size MinimumSize { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormMaximizeBoxDescr")]
public bool MaximizeBox { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormMDIChildrenDescr")]
public Form[] MdiChildren { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormMdiChildrenMinimizedAnchorBottomDescr")]
public bool MdiChildrenMinimizedAnchorBottom { get; public set; }
    internal MdiClient MdiClient { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormMDIParentDescr")]
public Form MdiParent { get; public set; }
    private Form MdiParentInternal { get; private set; }
    private MdiWindowListStrip MdiWindowListStrip { get; private set; }
    private MdiControlStrip MdiControlStrip { get; private set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormMinimizeBoxDescr")]
public bool MinimizeBox { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormModalDescr")]
public bool Modal { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[SRDescriptionAttribute("FormOpacityDescr")]
[DefaultValueAttribute("1")]
public double Opacity { get; public set; }
    private byte OpacityAsByte { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormOwnedFormsDescr")]
public Form[] OwnedForms { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormOwnerDescr")]
public Form Owner { get; public set; }
    internal Form OwnerInternal { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Rectangle RestoreBounds { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    internal Control ParentInternal { get; internal set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormShowInTaskbarDescr")]
public bool ShowInTaskbar { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormShowIconDescr")]
public bool ShowIcon { get; public set; }
    internal SHOW_WINDOW_CMD ShowParams { get; }
    [BrowsableAttribute("False")]
protected bool ShowWithoutActivation { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("False")]
public Size Size { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("FormSizeGripStyleDescr")]
public SizeGripStyle SizeGripStyle { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("FormStartPositionDescr")]
public FormStartPosition StartPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int TabIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
private IHandle`1<HWND> TaskbarOwner { get; }
    [NullableAttribute("1")]
[SettingsBindableAttribute("True")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool TopLevel { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormTopMostDescr")]
public bool TopMost { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormTransparencyKeyDescr")]
public Color TransparencyKey { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("FormWindowStateDescr")]
public FormWindowState WindowState { get; public set; }
    [NullableAttribute("1")]
internal string WindowText { get; internal set; }
    internal bool SupportsUiaProviders { get; }
    private static Form();
    public IButtonControl get_AcceptButton();
    public void set_AcceptButton(IButtonControl value);
    internal bool get_Active();
    internal void set_Active(bool value);
    public static Form get_ActiveForm();
    public Form get_ActiveMdiChild();
    internal Form get_ActiveMdiChildInternal();
    internal void set_ActiveMdiChildInternal(Form value);
    private Form get_FormerlyActiveMdiChild();
    private void set_FormerlyActiveMdiChild(Form value);
    public bool get_AllowTransparency();
    public void set_AllowTransparency(bool value);
    public bool get_AutoScale();
    public void set_AutoScale(bool value);
    public virtual Size get_AutoScaleBaseSize();
    public virtual void set_AutoScaleBaseSize(Size value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    private bool get_CalledClosing();
    private void set_CalledClosing(bool value);
    private bool get_CalledCreateControl();
    private void set_CalledCreateControl(bool value);
    private bool get_CalledMakeVisible();
    private void set_CalledMakeVisible(bool value);
    private bool get_CalledOnLoad();
    private void set_CalledOnLoad(bool value);
    public FormBorderStyle get_FormBorderStyle();
    public void set_FormBorderStyle(FormBorderStyle value);
    public IButtonControl get_CancelButton();
    public void set_CancelButton(IButtonControl value);
    public Size get_ClientSize();
    public void set_ClientSize(Size value);
    public bool get_ControlBox();
    public void set_ControlBox(bool value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    internal CloseReason get_CloseReason();
    internal void set_CloseReason(CloseReason value);
    [NullableContextAttribute("1")]
internal static Icon get_DefaultIcon();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    public Rectangle get_DesktopBounds();
    public void set_DesktopBounds(Rectangle value);
    public Point get_DesktopLocation();
    public void set_DesktopLocation(Point value);
    public DialogResult get_DialogResult();
    public void set_DialogResult(DialogResult value);
    public bool get_HelpButton();
    public void set_HelpButton(bool value);
    public void add_HelpButtonClicked(CancelEventHandler value);
    public void remove_HelpButtonClicked(CancelEventHandler value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    private bool get_IsClosing();
    private void set_IsClosing(bool value);
    private bool get_IsMaximized();
    [MemberNotNullWhenAttribute("True", "MdiParentInternal")]
public bool get_IsMdiChild();
    internal bool get_IsMdiChildFocusable();
    internal void set_IsMdiChildFocusable(bool value);
    [MemberNotNullWhenAttribute("True", "MdiClient")]
public bool get_IsMdiContainer();
    [MemberNotNullWhenAttribute("True", "MdiClient")]
public void set_IsMdiContainer(bool value);
    public bool get_IsRestrictedWindow();
    public bool get_KeyPreview();
    public void set_KeyPreview(bool value);
    public Point get_Location();
    public void set_Location(Point value);
    protected Rectangle get_MaximizedBounds();
    protected void set_MaximizedBounds(Rectangle value);
    public void add_MaximizedBoundsChanged(EventHandler value);
    public void remove_MaximizedBoundsChanged(EventHandler value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    private void UpdateMaximumSize(Size value, bool updateFormSize);
    public void add_MaximumSizeChanged(EventHandler value);
    public void remove_MaximumSizeChanged(EventHandler value);
    public MenuStrip get_MainMenuStrip();
    public void set_MainMenuStrip(MenuStrip value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public void add_MarginChanged(EventHandler value);
    public void remove_MarginChanged(EventHandler value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    private void UpdateMinimumSize(Size value, bool updateFormSize);
    public void add_MinimumSizeChanged(EventHandler value);
    public void remove_MinimumSizeChanged(EventHandler value);
    public bool get_MaximizeBox();
    public void set_MaximizeBox(bool value);
    [NullableContextAttribute("1")]
public Form[] get_MdiChildren();
    [CompilerGeneratedAttribute]
public bool get_MdiChildrenMinimizedAnchorBottom();
    [CompilerGeneratedAttribute]
public void set_MdiChildrenMinimizedAnchorBottom(bool value);
    internal MdiClient get_MdiClient();
    public Form get_MdiParent();
    public void set_MdiParent(Form value);
    private Form get_MdiParentInternal();
    private void set_MdiParentInternal(Form value);
    private MdiWindowListStrip get_MdiWindowListStrip();
    private void set_MdiWindowListStrip(MdiWindowListStrip value);
    private MdiControlStrip get_MdiControlStrip();
    private void set_MdiControlStrip(MdiControlStrip value);
    public bool get_MinimizeBox();
    public void set_MinimizeBox(bool value);
    public bool get_Modal();
    public double get_Opacity();
    public void set_Opacity(double value);
    private byte get_OpacityAsByte();
    [NullableContextAttribute("1")]
public Form[] get_OwnedForms();
    public Form get_Owner();
    public void set_Owner(Form value);
    internal Form get_OwnerInternal();
    public Rectangle get_RestoreBounds();
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    internal virtual Control get_ParentInternal();
    internal virtual void set_ParentInternal(Control value);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public bool get_ShowIcon();
    public void set_ShowIcon(bool value);
    internal virtual SHOW_WINDOW_CMD get_ShowParams();
    protected virtual bool get_ShowWithoutActivation();
    public Size get_Size();
    public void set_Size(Size value);
    public SizeGripStyle get_SizeGripStyle();
    public void set_SizeGripStyle(SizeGripStyle value);
    public FormStartPosition get_StartPosition();
    public void set_StartPosition(FormStartPosition value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
private IHandle`1<HWND> get_TaskbarOwner();
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public bool get_TopLevel();
    public void set_TopLevel(bool value);
    public bool get_TopMost();
    public void set_TopMost(bool value);
    public Color get_TransparencyKey();
    public void set_TransparencyKey(Color value);
    internal void AdjustFormPosition();
    [EditorBrowsableAttribute("2")]
protected virtual void SetVisibleCore(bool value);
    public FormWindowState get_WindowState();
    public void set_WindowState(FormWindowState value);
    [NullableContextAttribute("1")]
internal virtual string get_WindowText();
    [NullableContextAttribute("1")]
internal virtual void set_WindowText(string value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public void add_Closing(CancelEventHandler value);
    public void remove_Closing(CancelEventHandler value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public void add_Deactivate(EventHandler value);
    public void remove_Deactivate(EventHandler value);
    public void add_FormClosing(FormClosingEventHandler value);
    public void remove_FormClosing(FormClosingEventHandler value);
    public void add_FormClosed(FormClosedEventHandler value);
    public void remove_FormClosed(FormClosedEventHandler value);
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public void add_MdiChildActivate(EventHandler value);
    public void remove_MdiChildActivate(EventHandler value);
    public void add_MenuComplete(EventHandler value);
    public void remove_MenuComplete(EventHandler value);
    public void add_MenuStart(EventHandler value);
    public void remove_MenuStart(EventHandler value);
    public void add_InputLanguageChanged(InputLanguageChangedEventHandler value);
    public void remove_InputLanguageChanged(InputLanguageChangedEventHandler value);
    public void add_InputLanguageChanging(InputLanguageChangingEventHandler value);
    public void remove_InputLanguageChanging(InputLanguageChangingEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_Shown(EventHandler value);
    public void remove_Shown(EventHandler value);
    public void Activate();
    protected void ActivateMdiChild(Form form);
    public void AddOwnedForm(Form ownedForm);
    private static float AdjustScale(float scale);
    [EditorBrowsableAttribute("2")]
protected virtual void AdjustFormScrollbars(bool displayScrollbars);
    private void AdjustSystemMenu(HMENU hmenu);
    private void AdjustSystemMenu();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method has been deprecated. Use the ApplyAutoScaling method instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
protected void ApplyAutoScaling();
    private void ApplyClientSize();
    internal virtual void AssignParent(Control value);
    internal bool CheckCloseDialog(bool closingOnly);
    public void Close();
    private Size ComputeWindowSize(Size clientSize);
    private Size ComputeWindowSize(Size clientSize, WINDOW_STYLE style, WINDOW_EX_STYLE exStyle);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    [NullableContextAttribute("1")]
internal virtual void AfterControlRemoved(Control control, Control oldParent);
    [EditorBrowsableAttribute("2")]
protected virtual void CreateHandle();
    private void DeactivateMdiChild();
    [EditorBrowsableAttribute("2")]
protected virtual void DefWndProc(Message& m);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
private void FillInCreateParamsBorderIcons(CreateParams cp);
    [NullableContextAttribute("1")]
private void FillInCreateParamsBorderStyles(CreateParams cp);
    [NullableContextAttribute("1")]
private void FillInCreateParamsStartPosition(CreateParams cp);
    [NullableContextAttribute("1")]
private void FillInCreateParamsWindowState(CreateParams cp);
    private protected virtual bool FocusInternal();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method has been deprecated. Use the AutoScaleDimensions property instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
public static SizeF GetAutoScaleSize(Font font);
    private void CallShownEvent();
    internal virtual bool CanSelectCore();
    internal bool CanRecreateHandle();
    internal virtual bool CanProcessMnemonic();
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected void CenterToParent();
    protected void CenterToScreen();
    private void InvalidateMergedMenu();
    public void LayoutMdi(MdiLayout value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnActivated(EventArgs e);
    private protected virtual void OnAutoScaleModeChanged();
    [NullableContextAttribute("1")]
protected virtual void OnBackgroundImageChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBackgroundImageLayoutChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnClosing(CancelEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnClosed(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnFormClosing(FormClosingEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnFormClosed(FormClosedEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDeactivate(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnEnter(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHelpButtonClicked(CancelEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLayout(LayoutEventArgs levent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMaximizedBoundsChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMaximumSizeChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMinimumSizeChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnInputLanguageChanged(InputLanguageChangedEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnInputLanguageChanging(InputLanguageChangingEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnVisibleChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMdiChildActivate(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMenuStart(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMenuComplete(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnResize(EventArgs e);
    [NullableContextAttribute("1")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
protected virtual void OnDpiChanged(DpiChangedEventArgs e);
    public void add_DpiChanged(DpiChangedEventHandler value);
    public void remove_DpiChanged(DpiChangedEventHandler value);
    private void WmDpiChanged(Message& m);
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("2")]
protected virtual bool OnGetDpiScaledSize(int deviceDpiOld, int deviceDpiNew, Size& desiredSize);
    private void WmGetDpiScaledSize(Message& m);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnShown(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal void PerformOnInputLanguageChanged(InputLanguageChangedEventArgs iplevent);
    [NullableContextAttribute("1")]
internal void PerformOnInputLanguageChanging(InputLanguageChangingEventArgs iplcevent);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual bool ProcessDialogKey(Keys keyData);
    [EditorBrowsableAttribute("2")]
protected virtual bool ProcessDialogChar(char charCode);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected virtual bool ProcessTabKey(bool forward);
    internal void RaiseFormClosedOnAppExit();
    internal bool RaiseFormClosingOnAppExit();
    internal virtual void RecreateHandleCore();
    public void RemoveOwnedForm(Form ownedForm);
    private void ResetIcon();
    private void ResetTransparencyKey();
    public void add_ResizeBegin(EventHandler value);
    public void remove_ResizeBegin(EventHandler value);
    public void add_ResizeEnd(EventHandler value);
    public void remove_ResizeEnd(EventHandler value);
    private void ResumeLayoutFromMinimize();
    private void RestoreWindowBoundsIfNecessary();
    private void ResumeUpdateMenuHandles();
    protected virtual void Select(bool directed, bool forward);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float x, float y);
    protected virtual void ScaleMinMaxSize(float xScaleFactor, float yScaleFactor, bool updateContainerSize);
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void SetDefaultButton(IButtonControl button);
    [EditorBrowsableAttribute("2")]
protected virtual void SetClientSizeCore(int x, int y);
    public void SetDesktopBounds(int x, int y, int width, int height);
    public void SetDesktopLocation(int x, int y);
    public void Show(IWin32Window owner);
    public DialogResult ShowDialog();
    public DialogResult ShowDialog(IWin32Window owner);
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeAutoScaleBaseSize();
    private static bool ShouldSerializeClientSize();
    private bool ShouldSerializeIcon();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeLocation();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeSize();
    [EditorBrowsableAttribute("1")]
internal bool ShouldSerializeTransparencyKey();
    internal virtual bool get_SupportsUiaProviders();
    private void SuspendLayoutForMinimize();
    private void SuspendUpdateMenuHandles();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private void UpdateAutoScaleBaseSize();
    private void UpdateRenderSizeGrip();
    protected virtual void UpdateDefaultButton();
    private void UpdateHandleWithOwner();
    private void UpdateLayered();
    private void UpdateMenuHandles(bool recreateMenu);
    internal void UpdateFormStyles();
    [NullableContextAttribute("1")]
private static Type FindClosestStockType(Type type);
    private void UpdateToolStrip();
    private void UpdateMdiControlStrip(bool maximized);
    internal void UpdateMdiWindowListStrip();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnResizeBegin(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnResizeEnd(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnStyleChanged(EventArgs e);
    private void UpdateWindowIcon(bool redrawFrame);
    private void UpdateWindowState();
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren();
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren(ValidationConstraints validationConstraints);
    private void WmActivate(Message& m);
    private void WmEnterSizeMove();
    private void WmExitSizeMove();
    private void WmCreate(Message& m);
    private void WmClose(Message& m);
    private void WmEnterMenuLoop(Message& m);
    private void WmEraseBkgnd(Message& m);
    private void WmExitMenuLoop(Message& m);
    private void WmGetMinMaxInfo(Message& m);
    private void WmGetMinMaxInfoHelper(Message& m, Size minTrack, Size maxTrack, Rectangle maximizedBounds);
    private void WmMdiActivate(Message& m);
    private void WmNcButtonDown(Message& m);
    private void WmNCDestroy(Message& m);
    private void WmNCHitTest(Message& m);
    private void WmShowWindow(Message& m);
    private void WmSysCommand(Message& m);
    private void WmSize(Message& m);
    private void WmWindowPosChanged(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.Formatter : object {
    private static Type stringType;
    private static Type booleanType;
    private static Type checkStateType;
    private static object parseMethodNotFound;
    private static object defaultDataSourceNullValue;
    private static Formatter();
    [NullableContextAttribute("2")]
public static object FormatObject(object value, Type targetType, TypeConverter sourceConverter, TypeConverter targetConverter, string formatString, IFormatProvider formatInfo, object formattedNullValue, object dataSourceNullValue);
    [NullableContextAttribute("2")]
private static object FormatObjectInternal(object value, Type targetType, TypeConverter sourceConverter, TypeConverter targetConverter, string formatString, IFormatProvider formatInfo, object formattedNullValue);
    [NullableContextAttribute("2")]
public static object ParseObject(object value, Type targetType, Type sourceType, TypeConverter targetConverter, TypeConverter sourceConverter, IFormatProvider formatInfo, object formattedNullValue, object dataSourceNullValue);
    [NullableContextAttribute("2")]
private static object ParseObjectInternal(object value, Type targetType, Type sourceType, TypeConverter targetConverter, TypeConverter sourceConverter, IFormatProvider formatInfo, object formattedNullValue);
    private static object ChangeType(object value, Type type, IFormatProvider formatInfo);
    [NullableContextAttribute("2")]
private static bool EqualsFormattedNullValue(object value, object formattedNullValue, IFormatProvider formatInfo);
    private static string GetCantConvertMessage(object value, Type targetType);
    private static CultureInfo GetFormatterCulture(IFormatProvider formatInfo);
    [NullableContextAttribute("2")]
public static object InvokeStringParseMethod(object value, Type targetType, IFormatProvider formatInfo);
    [NullableContextAttribute("2")]
public static bool IsNullData(object value, object dataSourceNullValue);
    [NullableContextAttribute("2")]
public static object NullData(Type type, object dataSourceNullValue);
    private static Type NullableUnwrap(Type type);
    [NullableContextAttribute("2")]
private static TypeConverter NullableUnwrap(TypeConverter typeConverter);
    public static object GetDefaultDataSourceNullValue(Type type);
}
public enum System.Windows.Forms.FormBorderStyle : Enum {
    public int value__;
    public static FormBorderStyle None;
    public static FormBorderStyle FixedSingle;
    public static FormBorderStyle Fixed3D;
    public static FormBorderStyle FixedDialog;
    public static FormBorderStyle Sizable;
    public static FormBorderStyle FixedToolWindow;
    public static FormBorderStyle SizableToolWindow;
}
public class System.Windows.Forms.FormClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CloseReason <CloseReason>k__BackingField;
    public CloseReason CloseReason { get; }
    public FormClosedEventArgs(CloseReason closeReason);
    [CompilerGeneratedAttribute]
public CloseReason get_CloseReason();
}
public class System.Windows.Forms.FormClosedEventHandler : MulticastDelegate {
    public FormClosedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, FormClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.FormClosingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private CloseReason <CloseReason>k__BackingField;
    public CloseReason CloseReason { get; }
    public FormClosingEventArgs(CloseReason closeReason, bool cancel);
    [CompilerGeneratedAttribute]
public CloseReason get_CloseReason();
}
public class System.Windows.Forms.FormClosingEventHandler : MulticastDelegate {
    public FormClosingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, FormClosingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormClosingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.FormCollection : ReadOnlyCollectionBase {
    internal static object CollectionSyncRoot;
    [NullableAttribute("2")]
public Form Item { get; }
    [NullableAttribute("2")]
public Form Item { get; }
    private static FormCollection();
    [NullableContextAttribute("2")]
public virtual Form get_Item(string name);
    [NullableContextAttribute("2")]
public virtual Form get_Item(int index);
    internal void Add(Form form);
    internal bool Contains(Form form);
    internal void Remove(Form form);
}
public enum System.Windows.Forms.FormStartPosition : Enum {
    public int value__;
    public static FormStartPosition Manual;
    public static FormStartPosition CenterScreen;
    public static FormStartPosition WindowsDefaultLocation;
    public static FormStartPosition WindowsDefaultBounds;
    public static FormStartPosition CenterParent;
}
public enum System.Windows.Forms.FormWindowState : Enum {
    public int value__;
    public static FormWindowState Normal;
    public static FormWindowState Minimized;
    public static FormWindowState Maximized;
}
public enum System.Windows.Forms.FrameStyle : Enum {
    public int value__;
    public static FrameStyle Dashed;
    public static FrameStyle Thick;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.GdiCache : object {
    [ThreadStaticAttribute]
private static ScreenDcCache s_dcCache;
    [NullableAttribute("1")]
private static FontCache s_fontCache;
    private static GdiCache();
    public static ScreenDcScope GetScreenHdc();
    public static ScreenGraphicsScope GetScreenDCGraphics();
    public static Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> GetHFONT(Font font, FONT_QUALITY quality);
    public static Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> GetHFONT(Font font, FONT_QUALITY quality, HDC hdc);
}
[FlagsAttribute]
public enum System.Windows.Forms.GetChildAtPointSkip : Enum {
    public int value__;
    public static GetChildAtPointSkip None;
    public static GetChildAtPointSkip Invisible;
    public static GetChildAtPointSkip Disabled;
    public static GetChildAtPointSkip Transparent;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.GiveFeedbackEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DragDropEffects <Effect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCursors>k__BackingField;
    [CompilerGeneratedAttribute]
private Bitmap <DragImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <CursorOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultDragImage>k__BackingField;
    public DragDropEffects Effect { get; }
    public bool UseDefaultCursors { get; public set; }
    public Bitmap DragImage { get; public set; }
    public Point CursorOffset { get; public set; }
    public bool UseDefaultDragImage { get; public set; }
    public GiveFeedbackEventArgs(DragDropEffects effect, bool useDefaultCursors);
    public GiveFeedbackEventArgs(DragDropEffects effect, bool useDefaultCursors, Bitmap dragImage, Point cursorOffset, bool useDefaultDragImage);
    [CompilerGeneratedAttribute]
public DragDropEffects get_Effect();
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCursors();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCursors(bool value);
    [CompilerGeneratedAttribute]
public Bitmap get_DragImage();
    [CompilerGeneratedAttribute]
public void set_DragImage(Bitmap value);
    [CompilerGeneratedAttribute]
public Point get_CursorOffset();
    [CompilerGeneratedAttribute]
public void set_CursorOffset(Point value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultDragImage();
    [CompilerGeneratedAttribute]
public void set_UseDefaultDragImage(bool value);
    [NullableContextAttribute("1")]
internal GiveFeedbackEventArgs Clone();
    internal bool Equals(GiveFeedbackEventArgs giveFeedbackEventArgs);
}
public class System.Windows.Forms.GiveFeedbackEventHandler : MulticastDelegate {
    public GiveFeedbackEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, GiveFeedbackEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GiveFeedbackEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.GridItem : object {
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [NullableAttribute("1")]
public GridItemCollection GridItems { get; }
    public GridItemType GridItemType { get; }
    public string Label { get; }
    public GridItem Parent { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public object Value { get; }
    public bool Expandable { get; }
    public bool Expanded { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [NullableContextAttribute("1")]
public abstract virtual GridItemCollection get_GridItems();
    public abstract virtual GridItemType get_GridItemType();
    public abstract virtual string get_Label();
    public abstract virtual GridItem get_Parent();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
    public abstract virtual object get_Value();
    public virtual bool get_Expandable();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public abstract virtual bool Select();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.GridItemCollection : object {
    public static GridItemCollection Empty;
    private protected IReadOnlyList`1<GridItem> _entries;
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public GridItem Item { get; }
    [NullableAttribute("2")]
public GridItem Item { get; }
    internal GridItemCollection(IReadOnlyList`1<GridItem> entries);
    private static GridItemCollection();
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public GridItem get_Item(int index);
    public GridItem get_Item(string label);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public enum System.Windows.Forms.GridItemType : Enum {
    public int value__;
    public static GridItemType Property;
    public static GridItemType Category;
    public static GridItemType ArrayValue;
    public static GridItemType Root;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultEventAttribute("Enter")]
[DefaultPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.GroupBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionGroupBox")]
public class System.Windows.Forms.GroupBox : Control {
    private int _fontHeight;
    private Font _cachedFont;
    private FlatStyle _flatStyle;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected Padding DefaultPadding { get; }
    protected Size DefaultSize { get; }
    public Rectangle DisplayRectangle { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ButtonFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    private bool OwnerDraw { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[LocalizableAttribute("True")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    internal bool SupportsUseCompatibleTextRendering { get; }
    internal bool SupportsUiaProviders { get; }
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual Padding get_DefaultPadding();
    protected virtual Size get_DefaultSize();
    public virtual Rectangle get_DisplayRectangle();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    private bool get_OwnerDraw();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    internal virtual bool get_SupportsUseCompatibleTextRendering();
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
private void DrawGroupBox(PaintEventArgs e);
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private void WmEraseBkgnd(Message& m);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Windows.Forms.GroupBoxRenderer : object {
    [ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    [NullableAttribute("1")]
private static VisualStyleElement s_groupBoxElement;
    private static int TextOffset;
    private static int BoxHeaderWidth;
    [CompilerGeneratedAttribute]
private static bool <RenderMatchingApplicationState>k__BackingField;
    public static bool RenderMatchingApplicationState { get; public set; }
    private static bool RenderWithVisualStyles { get; }
    private static GroupBoxRenderer();
    [CompilerGeneratedAttribute]
public static bool get_RenderMatchingApplicationState();
    [CompilerGeneratedAttribute]
public static void set_RenderMatchingApplicationState(bool value);
    private static bool get_RenderWithVisualStyles();
    public static bool IsBackgroundPartiallyTransparent(GroupBoxState state);
    [NullableContextAttribute("1")]
public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    [NullableContextAttribute("1")]
public static void DrawGroupBox(Graphics g, Rectangle bounds, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, Color textColor, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, TextFormatFlags flags, GroupBoxState state);
    internal static void DrawGroupBox(IDeviceContext deviceContext, Rectangle bounds, string groupBoxText, Font font, TextFormatFlags flags, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, Color textColor, TextFormatFlags flags, GroupBoxState state);
    internal static void DrawGroupBox(IDeviceContext deviceContext, Rectangle bounds, string groupBoxText, Font font, Color textColor, TextFormatFlags flags, GroupBoxState state);
    [NullableContextAttribute("1")]
private static void DrawThemedGroupBoxNoText(Graphics g, Rectangle bounds, GroupBoxState state);
    private static void DrawThemedGroupBoxWithText(IDeviceContext deviceContext, Rectangle bounds, string groupBoxText, Font font, Color textColor, TextFormatFlags flags, GroupBoxState state);
    [NullableContextAttribute("1")]
private static void DrawUnthemedGroupBoxNoText(Graphics g, Rectangle bounds);
    private static void DrawUnthemedGroupBoxWithText(IDeviceContext deviceContext, Rectangle bounds, string groupBoxText, Font font, Color textColor, TextFormatFlags flags);
    private static Color DefaultTextColor(GroupBoxState state);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(int state);
}
public class System.Windows.Forms.HandledMouseEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public HandledMouseEventArgs(MouseButtons button, int clicks, int x, int y, int delta);
    internal HandledMouseEventArgs(MouseButtons button, int clicks, Point location, int delta);
    public HandledMouseEventArgs(MouseButtons button, int clicks, int x, int y, int delta, bool defaultHandledValue);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Windows.Forms.Help : object {
    internal static TraceSwitch WindowsFormsHelpTrace;
    private static int HTML10HELP;
    private static int HTMLFILE;
    public static void ShowHelp(Control parent, string url);
    public static void ShowHelp(Control parent, string url, HelpNavigator navigator);
    public static void ShowHelp(Control parent, string url, string keyword);
    public static void ShowHelp(Control parent, string url, HelpNavigator command, object parameter);
    public static void ShowHelpIndex(Control parent, string url);
    [NullableContextAttribute("1")]
public static void ShowPopup(Control parent, string caption, Point location);
    private static void ShowHTML10Help(Control parent, string url, HelpNavigator command, object param);
    private static void ShowHTMLFile(Control parent, string url, HelpNavigator command, object param);
    private static Uri Resolve(string partialUri);
    private static int GetHelpFileType(string url);
    private static HH MapCommandToHTMLCommand(HelpNavigator command, string param, Object& htmlParam);
}
public class System.Windows.Forms.HelpEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Point <MousePos>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public Point MousePos { get; }
    public bool Handled { get; public set; }
    public HelpEventArgs(Point mousePos);
    [CompilerGeneratedAttribute]
public Point get_MousePos();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.Windows.Forms.HelpEventHandler : MulticastDelegate {
    public HelpEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, HelpEventArgs hlpevent);
    public virtual IAsyncResult BeginInvoke(object sender, HelpEventArgs hlpevent, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.HelpInfo : object {
    public static int HelpFileOption;
    public static int HelpKeywordOption;
    public static int HelpNavigatorOption;
    public static int HelpObjectOption;
    [CompilerGeneratedAttribute]
private int <Option>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpNavigator <Navigator>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Param>k__BackingField;
    public int Option { get; }
    public string HelpFilePath { get; }
    public string Keyword { get; }
    public HelpNavigator Navigator { get; }
    [NullableAttribute("2")]
public object Param { get; }
    public HelpInfo(string helpfilepath);
    public HelpInfo(string helpfilepath, string keyword);
    public HelpInfo(string helpfilepath, HelpNavigator navigator);
    public HelpInfo(string helpfilepath, HelpNavigator navigator, object param);
    [CompilerGeneratedAttribute]
public int get_Option();
    [CompilerGeneratedAttribute]
public string get_HelpFilePath();
    [CompilerGeneratedAttribute]
public string get_Keyword();
    [CompilerGeneratedAttribute]
public HelpNavigator get_Navigator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Param();
    public virtual string ToString();
}
public enum System.Windows.Forms.HelpNavigator : Enum {
    public int value__;
    public static HelpNavigator Topic;
    public static HelpNavigator TableOfContents;
    public static HelpNavigator Index;
    public static HelpNavigator Find;
    public static HelpNavigator AssociateIndex;
    public static HelpNavigator KeywordIndex;
    public static HelpNavigator TopicId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProvidePropertyAttribute("HelpString", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("HelpKeyword", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("HelpNavigator", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("ShowHelp", "System.Windows.Forms.Control")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionHelpProvider")]
public class System.Windows.Forms.HelpProvider : Component {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Control, string> _helpStrings;
    private Dictionary`2<Control, bool> _showHelp;
    private List`1<Control> _boundControls;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Control, string> _keywords;
    private Dictionary`2<Control, HelpNavigator> _navigators;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <HelpNamespace>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [NullableAttribute("2")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.HelpNamespaceEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("HelpProviderHelpNamespaceDescr")]
public string HelpNamespace { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_HelpNamespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_HelpNamespace(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Tag(object value);
    [NullableContextAttribute("2")]
public virtual bool CanExtend(object target);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderHelpKeywordDescr")]
public virtual string GetHelpKeyword(Control ctl);
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderNavigatorDescr")]
public virtual HelpNavigator GetHelpNavigator(Control ctl);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderHelpStringDescr")]
public virtual string GetHelpString(Control ctl);
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderShowHelpDescr")]
public virtual bool GetShowHelp(Control ctl);
    private void OnControlHelp(object sender, HelpEventArgs hevent);
    private void OnQueryAccessibilityHelp(object sender, QueryAccessibilityHelpEventArgs e);
    public virtual void SetHelpString(Control ctl, string helpString);
    public virtual void SetHelpKeyword(Control ctl, string keyword);
    public virtual void SetHelpNavigator(Control ctl, HelpNavigator navigator);
    public virtual void SetShowHelp(Control ctl, bool value);
    internal bool ShouldSerializeShowHelp(Control ctl);
    public virtual void ResetShowHelp(Control ctl);
    private void UpdateEventBinding(Control ctl);
    public virtual string ToString();
}
public enum System.Windows.Forms.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Center;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SRDescriptionAttribute("DescriptionHScrollBar")]
public class System.Windows.Forms.HScrollBar : ScrollBar {
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.HScrollProperties : ScrollProperties {
    private protected SCROLLBAR_CONSTANTS Orientation { get; }
    [NullableContextAttribute("2")]
public HScrollProperties(ScrollableControl container);
    private protected virtual int GetPageSize(ScrollableControl parent);
    private protected virtual SCROLLBAR_CONSTANTS get_Orientation();
    private protected virtual int GetHorizontalDisplayPosition(ScrollableControl parent);
    private protected virtual int GetVerticalDisplayPosition(ScrollableControl parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.HtmlDocument : object {
    internal static object s_eventClick;
    internal static object s_eventContextMenuShowing;
    internal static object s_eventFocusing;
    internal static object s_eventLosingFocus;
    internal static object s_eventMouseDown;
    internal static object s_eventMouseLeave;
    internal static object s_eventMouseMove;
    internal static object s_eventMouseOver;
    internal static object s_eventMouseUp;
    internal static object s_eventStop;
    private IHTMLDocument2 _htmlDocument2;
    private HtmlShimManager _shimManager;
    internal IHTMLDocument2 NativeHtmlDocument2 { get; }
    [NullableAttribute("2")]
private HtmlDocumentShim DocumentShim { get; }
    private HtmlShimManager ShimManager { get; }
    [NullableAttribute("2")]
public HtmlElement ActiveElement { get; }
    [NullableAttribute("2")]
public HtmlElement Body { get; }
    public string Domain { get; public set; }
    public string Title { get; public set; }
    [NullableAttribute("2")]
public Uri Url { get; }
    [NullableAttribute("2")]
public HtmlWindow Window { get; }
    public Color BackColor { get; public set; }
    public Color ForeColor { get; public set; }
    public Color LinkColor { get; public set; }
    public Color ActiveLinkColor { get; public set; }
    public Color VisitedLinkColor { get; public set; }
    public bool Focused { get; }
    public object DomDocument { get; }
    public string Cookie { get; public set; }
    public bool RightToLeft { get; public set; }
    public string Encoding { get; public set; }
    public string DefaultEncoding { get; }
    public HtmlElementCollection All { get; }
    public HtmlElementCollection Links { get; }
    public HtmlElementCollection Images { get; }
    public HtmlElementCollection Forms { get; }
    internal HtmlDocument(HtmlShimManager shimManager, IHTMLDocument doc);
    private static HtmlDocument();
    internal IHTMLDocument2 get_NativeHtmlDocument2();
    [NullableContextAttribute("2")]
private HtmlDocumentShim get_DocumentShim();
    private HtmlShimManager get_ShimManager();
    [NullableContextAttribute("2")]
public HtmlElement get_ActiveElement();
    [NullableContextAttribute("2")]
public HtmlElement get_Body();
    public string get_Domain();
    public void set_Domain(string value);
    public string get_Title();
    public void set_Title(string value);
    [NullableContextAttribute("2")]
public Uri get_Url();
    [NullableContextAttribute("2")]
public HtmlWindow get_Window();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    public bool get_Focused();
    public object get_DomDocument();
    public string get_Cookie();
    public void set_Cookie(string value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_DefaultEncoding();
    public HtmlElementCollection get_All();
    public HtmlElementCollection get_Links();
    public HtmlElementCollection get_Images();
    public HtmlElementCollection get_Forms();
    public void Write(string text);
    public void ExecCommand(string command, bool showUI, object value);
    [EditorBrowsableAttribute("2")]
public void Focus();
    public HtmlElement GetElementById(string id);
    [NullableContextAttribute("2")]
public HtmlElement GetElementFromPoint(Point point);
    public HtmlElementCollection GetElementsByTagName(string tagName);
    [NullableContextAttribute("2")]
public HtmlDocument OpenNew(bool replaceInHistory);
    public HtmlElement CreateElement(string elementTag);
    public object InvokeScript(string scriptName, Object[] args);
    public object InvokeScript(string scriptName);
    public void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void DetachEventHandler(string eventName, EventHandler eventHandler);
    [NullableContextAttribute("2")]
public void add_Click(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Click(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_ContextMenuShowing(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ContextMenuShowing(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_Focusing(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Focusing(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_LosingFocus(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_LosingFocus(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseDown(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseDown(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseLeave(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseLeave(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseMove(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseMove(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseOver(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseOver(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseUp(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseUp(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void add_Stop(HtmlElementEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Stop(HtmlElementEventHandler value);
    private static Color ColorFromObject(object oColor);
    [NullableContextAttribute("2")]
public static bool op_Equality(HtmlDocument left, HtmlDocument right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(HtmlDocument left, HtmlDocument right);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
public class System.Windows.Forms.HtmlElement : object {
    internal static object s_eventClick;
    internal static object s_eventDoubleClick;
    internal static object s_eventDrag;
    internal static object s_eventDragEnd;
    internal static object s_eventDragLeave;
    internal static object s_eventDragOver;
    internal static object s_eventFocusing;
    internal static object s_eventGotFocus;
    internal static object s_eventLosingFocus;
    internal static object s_eventLostFocus;
    internal static object s_eventKeyDown;
    internal static object s_eventKeyPress;
    internal static object s_eventKeyUp;
    internal static object s_eventMouseDown;
    internal static object s_eventMouseEnter;
    internal static object s_eventMouseLeave;
    internal static object s_eventMouseMove;
    internal static object s_eventMouseOver;
    internal static object s_eventMouseUp;
    private IHTMLElement _htmlElement;
    private HtmlShimManager _shimManager;
    public HtmlElementCollection All { get; }
    public HtmlElementCollection Children { get; }
    public bool CanHaveChildren { get; }
    public Rectangle ClientRectangle { get; }
    public HtmlDocument Document { get; }
    public bool Enabled { get; public set; }
    private HtmlElementShim ElementShim { get; }
    public HtmlElement FirstChild { get; }
    public string Id { get; public set; }
    public string InnerHtml { get; public set; }
    public string InnerText { get; public set; }
    public string Name { get; public set; }
    private IHTMLElement NativeHtmlElement { get; }
    public HtmlElement NextSibling { get; }
    public Rectangle OffsetRectangle { get; }
    public HtmlElement OffsetParent { get; }
    public string OuterHtml { get; public set; }
    public string OuterText { get; public set; }
    public HtmlElement Parent { get; }
    public Rectangle ScrollRectangle { get; }
    public int ScrollLeft { get; public set; }
    public int ScrollTop { get; public set; }
    private HtmlShimManager ShimManager { get; }
    public string Style { get; public set; }
    public string TagName { get; }
    public short TabIndex { get; public set; }
    public object DomElement { get; }
    internal HtmlElement(HtmlShimManager shimManager, IHTMLElement element);
    private static HtmlElement();
    public HtmlElementCollection get_All();
    public HtmlElementCollection get_Children();
    public bool get_CanHaveChildren();
    public Rectangle get_ClientRectangle();
    public HtmlDocument get_Document();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    private HtmlElementShim get_ElementShim();
    public HtmlElement get_FirstChild();
    public string get_Id();
    public void set_Id(string value);
    public string get_InnerHtml();
    public void set_InnerHtml(string value);
    public string get_InnerText();
    public void set_InnerText(string value);
    public string get_Name();
    public void set_Name(string value);
    private IHTMLElement get_NativeHtmlElement();
    public HtmlElement get_NextSibling();
    public Rectangle get_OffsetRectangle();
    public HtmlElement get_OffsetParent();
    public string get_OuterHtml();
    public void set_OuterHtml(string value);
    public string get_OuterText();
    public void set_OuterText(string value);
    public HtmlElement get_Parent();
    public Rectangle get_ScrollRectangle();
    public int get_ScrollLeft();
    public void set_ScrollLeft(int value);
    public int get_ScrollTop();
    public void set_ScrollTop(int value);
    private HtmlShimManager get_ShimManager();
    public string get_Style();
    public void set_Style(string value);
    public string get_TagName();
    public short get_TabIndex();
    public void set_TabIndex(short value);
    public object get_DomElement();
    public HtmlElement AppendChild(HtmlElement newElement);
    public void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void DetachEventHandler(string eventName, EventHandler eventHandler);
    public void Focus();
    public string GetAttribute(string attributeName);
    public HtmlElementCollection GetElementsByTagName(string tagName);
    public HtmlElement InsertAdjacentElement(HtmlElementInsertionOrientation orient, HtmlElement newElement);
    public object InvokeMember(string methodName);
    public object InvokeMember(string methodName, Object[] parameter);
    public void RemoveFocus();
    public void RaiseEvent(string eventName);
    public void ScrollIntoView(bool alignWithTop);
    public void SetAttribute(string attributeName, string value);
    public void add_Click(HtmlElementEventHandler value);
    public void remove_Click(HtmlElementEventHandler value);
    public void add_DoubleClick(HtmlElementEventHandler value);
    public void remove_DoubleClick(HtmlElementEventHandler value);
    public void add_Drag(HtmlElementEventHandler value);
    public void remove_Drag(HtmlElementEventHandler value);
    public void add_DragEnd(HtmlElementEventHandler value);
    public void remove_DragEnd(HtmlElementEventHandler value);
    public void add_DragLeave(HtmlElementEventHandler value);
    public void remove_DragLeave(HtmlElementEventHandler value);
    public void add_DragOver(HtmlElementEventHandler value);
    public void remove_DragOver(HtmlElementEventHandler value);
    public void add_Focusing(HtmlElementEventHandler value);
    public void remove_Focusing(HtmlElementEventHandler value);
    public void add_GotFocus(HtmlElementEventHandler value);
    public void remove_GotFocus(HtmlElementEventHandler value);
    public void add_LosingFocus(HtmlElementEventHandler value);
    public void remove_LosingFocus(HtmlElementEventHandler value);
    public void add_LostFocus(HtmlElementEventHandler value);
    public void remove_LostFocus(HtmlElementEventHandler value);
    public void add_KeyDown(HtmlElementEventHandler value);
    public void remove_KeyDown(HtmlElementEventHandler value);
    public void add_KeyPress(HtmlElementEventHandler value);
    public void remove_KeyPress(HtmlElementEventHandler value);
    public void add_KeyUp(HtmlElementEventHandler value);
    public void remove_KeyUp(HtmlElementEventHandler value);
    public void add_MouseMove(HtmlElementEventHandler value);
    public void remove_MouseMove(HtmlElementEventHandler value);
    public void add_MouseDown(HtmlElementEventHandler value);
    public void remove_MouseDown(HtmlElementEventHandler value);
    public void add_MouseOver(HtmlElementEventHandler value);
    public void remove_MouseOver(HtmlElementEventHandler value);
    public void add_MouseUp(HtmlElementEventHandler value);
    public void remove_MouseUp(HtmlElementEventHandler value);
    public void add_MouseEnter(HtmlElementEventHandler value);
    public void remove_MouseEnter(HtmlElementEventHandler value);
    public void add_MouseLeave(HtmlElementEventHandler value);
    public void remove_MouseLeave(HtmlElementEventHandler value);
    public static bool op_Equality(HtmlElement left, HtmlElement right);
    public static bool op_Inequality(HtmlElement left, HtmlElement right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.HtmlElementCollection : object {
    [NullableAttribute("2")]
private IHTMLElementCollection htmlElementCollection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HtmlElement[] elementsArray;
    private HtmlShimManager shimManager;
    [NullableAttribute("2")]
private IHTMLElementCollection NativeHtmlElementCollection { get; }
    [NullableAttribute("2")]
public HtmlElement Item { get; }
    [NullableAttribute("2")]
public HtmlElement Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal HtmlElementCollection(HtmlShimManager shimManager);
    internal HtmlElementCollection(HtmlShimManager shimManager, IHTMLElementCollection elements);
    internal HtmlElementCollection(HtmlShimManager shimManager, HtmlElement[] array);
    [NullableContextAttribute("2")]
private IHTMLElementCollection get_NativeHtmlElementCollection();
    [NullableContextAttribute("2")]
public HtmlElement get_Item(int index);
    public HtmlElement get_Item(string elementId);
    public HtmlElementCollection GetElementsByName(string name);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.HtmlElementErrorEventArgs : EventArgs {
    private string _urlString;
    [NullableAttribute("2")]
private Uri _url;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string Description { get; }
    public bool Handled { get; public set; }
    public int LineNumber { get; }
    public Uri Url { get; }
    internal HtmlElementErrorEventArgs(string description, string urlString, int lineNumber);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    public Uri get_Url();
}
public class System.Windows.Forms.HtmlElementErrorEventHandler : MulticastDelegate {
    public HtmlElementErrorEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, HtmlElementErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HtmlElementErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.HtmlElementEventArgs : EventArgs {
    private HtmlShimManager _shimManager;
    [CompilerGeneratedAttribute]
private IHTMLEventObj <NativeHTMLEventObj>k__BackingField;
    private IHTMLEventObj NativeHTMLEventObj { get; }
    public MouseButtons MouseButtonsPressed { get; }
    public Point ClientMousePosition { get; }
    public Point OffsetMousePosition { get; }
    public Point MousePosition { get; }
    public bool BubbleEvent { get; public set; }
    public int KeyPressedCode { get; }
    public bool AltKeyPressed { get; }
    public bool CtrlKeyPressed { get; }
    public bool ShiftKeyPressed { get; }
    public string EventType { get; }
    public bool ReturnValue { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public HtmlElement FromElement { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public HtmlElement ToElement { get; }
    internal HtmlElementEventArgs(HtmlShimManager shimManager, IHTMLEventObj eventObj);
    [CompilerGeneratedAttribute]
private IHTMLEventObj get_NativeHTMLEventObj();
    public MouseButtons get_MouseButtonsPressed();
    public Point get_ClientMousePosition();
    public Point get_OffsetMousePosition();
    public Point get_MousePosition();
    public bool get_BubbleEvent();
    public void set_BubbleEvent(bool value);
    public int get_KeyPressedCode();
    public bool get_AltKeyPressed();
    public bool get_CtrlKeyPressed();
    public bool get_ShiftKeyPressed();
    public string get_EventType();
    public bool get_ReturnValue();
    public void set_ReturnValue(bool value);
    [NullableContextAttribute("2")]
public HtmlElement get_FromElement();
    [NullableContextAttribute("2")]
public HtmlElement get_ToElement();
}
public class System.Windows.Forms.HtmlElementEventHandler : MulticastDelegate {
    public HtmlElementEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, HtmlElementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HtmlElementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.HtmlElementInsertionOrientation : Enum {
    public int value__;
    public static HtmlElementInsertionOrientation BeforeBegin;
    public static HtmlElementInsertionOrientation AfterBegin;
    public static HtmlElementInsertionOrientation BeforeEnd;
    public static HtmlElementInsertionOrientation AfterEnd;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.HtmlHistory : object {
    private IOmHistory htmlHistory;
    private bool disposed;
    private IOmHistory NativeOmHistory { get; }
    public int Length { get; }
    public object DomHistory { get; }
    internal HtmlHistory(IOmHistory history);
    private IOmHistory get_NativeOmHistory();
    public sealed virtual void Dispose();
    public int get_Length();
    public void Back(int numberBack);
    public void Forward(int numberForward);
    public void Go(Uri url);
    public void Go(string urlString);
    public void Go(int relativePosition);
    public object get_DomHistory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.HtmlShim : object {
    [NullableAttribute("2")]
private EventHandlerList _events;
    private int _eventCount;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<EventHandler, HtmlToClrEventProxy> _attachedEventList;
    private EventHandlerList Events { get; }
    [NullableAttribute("2")]
public IHTMLWindow2 AssociatedWindow { get; }
    private EventHandlerList get_Events();
    public abstract virtual void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void AddHandler(object key, Delegate value);
    protected HtmlToClrEventProxy AddEventProxy(string eventName, EventHandler eventHandler);
    [NullableContextAttribute("2")]
public abstract virtual IHTMLWindow2 get_AssociatedWindow();
    public abstract virtual void ConnectToEvents();
    public abstract virtual void DetachEventHandler(string eventName, EventHandler eventHandler);
    public virtual void DisconnectFromEvents();
    protected abstract virtual object GetEventSender();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void FireEvent(object key, EventArgs e);
    protected virtual void OnEventHandlerAdded();
    protected virtual void OnEventHandlerRemoved();
    public void RemoveHandler(object key, Delegate value);
    protected HtmlToClrEventProxy RemoveEventProxy(EventHandler eventHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.HtmlShimManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<HtmlWindow, HtmlWindowShim> htmlWindowShims;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<HtmlElement, HtmlElementShim> htmlElementShims;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<HtmlDocument, HtmlDocumentShim> _htmlDocumentShims;
    public void AddDocumentShim(HtmlDocument doc);
    public void AddWindowShim(HtmlWindow window);
    public void AddElementShim(HtmlElement element);
    internal HtmlDocumentShim GetDocumentShim(HtmlDocument document);
    internal HtmlElementShim GetElementShim(HtmlElement element);
    internal HtmlWindowShim GetWindowShim(HtmlWindow window);
    private void OnShimAdded(HtmlShim addedShim);
    internal void OnWindowUnloaded(HtmlWindow unloadedWindow);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.HtmlToClrEventProxy : object {
    private EventHandler eventHandler;
    private IReflect typeIReflectImplementation;
    private string eventName;
    public string EventName { get; }
    private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    public HtmlToClrEventProxy(object sender, string eventName, EventHandler eventHandler);
    public string get_EventName();
    [DispIdAttribute("0")]
public void OnHtmlEvent();
    private void InvokeClrEvent();
    private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
    [DynamicallyAccessedMembersAttribute("96")]
private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8191")]
private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8191")]
private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    [NullableContextAttribute("2")]
[DynamicallyAccessedMembersAttribute("24")]
private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("24")]
private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("1536")]
private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("1536")]
private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    [NullableContextAttribute("2")]
[DynamicallyAccessedMembersAttribute("1536")]
private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    [NullableContextAttribute("2")]
[DynamicallyAccessedMembersAttribute("-1")]
private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
}
public class System.Windows.Forms.HtmlWindow : object {
    internal static object s_eventError;
    internal static object s_eventGotFocus;
    internal static object s_eventLoad;
    internal static object s_eventLostFocus;
    internal static object s_eventResize;
    internal static object s_eventScroll;
    internal static object s_eventUnload;
    private HtmlShimManager _shimManager;
    private IHTMLWindow2 _htmlWindow2;
    internal IHTMLWindow2 NativeHtmlWindow { get; }
    private HtmlShimManager ShimManager { get; }
    private HtmlWindowShim WindowShim { get; }
    public HtmlDocument Document { get; }
    public object DomWindow { get; }
    public HtmlWindowCollection Frames { get; }
    public HtmlHistory History { get; }
    public bool IsClosed { get; }
    public string Name { get; public set; }
    public HtmlWindow Opener { get; }
    public HtmlWindow Parent { get; }
    public Point Position { get; }
    public Size Size { get; public set; }
    public string StatusBarText { get; public set; }
    public Uri Url { get; }
    public HtmlElement WindowFrameElement { get; }
    internal HtmlWindow(HtmlShimManager shimManager, IHTMLWindow2 win);
    private static HtmlWindow();
    internal IHTMLWindow2 get_NativeHtmlWindow();
    private HtmlShimManager get_ShimManager();
    private HtmlWindowShim get_WindowShim();
    public HtmlDocument get_Document();
    public object get_DomWindow();
    public HtmlWindowCollection get_Frames();
    public HtmlHistory get_History();
    public bool get_IsClosed();
    public string get_Name();
    public void set_Name(string value);
    public HtmlWindow get_Opener();
    public HtmlWindow get_Parent();
    public Point get_Position();
    public Size get_Size();
    public void set_Size(Size value);
    public string get_StatusBarText();
    public void set_StatusBarText(string value);
    public Uri get_Url();
    public HtmlElement get_WindowFrameElement();
    public void Alert(string message);
    public void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void Close();
    public bool Confirm(string message);
    public void DetachEventHandler(string eventName, EventHandler eventHandler);
    public void Focus();
    public void MoveTo(int x, int y);
    public void MoveTo(Point point);
    public void Navigate(Uri url);
    public void Navigate(string urlString);
    public HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry);
    public HtmlWindow Open(Uri url, string target, string windowOptions, bool replaceEntry);
    public HtmlWindow OpenNew(string urlString, string windowOptions);
    public HtmlWindow OpenNew(Uri url, string windowOptions);
    public string Prompt(string message, string defaultInputValue);
    public void RemoveFocus();
    public void ResizeTo(int width, int height);
    public void ResizeTo(Size size);
    public void ScrollTo(int x, int y);
    public void ScrollTo(Point point);
    public void add_Error(HtmlElementErrorEventHandler value);
    public void remove_Error(HtmlElementErrorEventHandler value);
    public void add_GotFocus(HtmlElementEventHandler value);
    public void remove_GotFocus(HtmlElementEventHandler value);
    public void add_Load(HtmlElementEventHandler value);
    public void remove_Load(HtmlElementEventHandler value);
    public void add_LostFocus(HtmlElementEventHandler value);
    public void remove_LostFocus(HtmlElementEventHandler value);
    public void add_Resize(HtmlElementEventHandler value);
    public void remove_Resize(HtmlElementEventHandler value);
    public void add_Scroll(HtmlElementEventHandler value);
    public void remove_Scroll(HtmlElementEventHandler value);
    public void add_Unload(HtmlElementEventHandler value);
    public void remove_Unload(HtmlElementEventHandler value);
    public static bool op_Equality(HtmlWindow left, HtmlWindow right);
    public static bool op_Inequality(HtmlWindow left, HtmlWindow right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.HtmlWindowCollection : object {
    private IHTMLFramesCollection2 htmlFramesCollection2;
    private HtmlShimManager shimManager;
    private IHTMLFramesCollection2 NativeHTMLFramesCollection2 { get; }
    [NullableAttribute("2")]
public HtmlWindow Item { get; }
    [NullableAttribute("2")]
public HtmlWindow Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal HtmlWindowCollection(HtmlShimManager shimManager, IHTMLFramesCollection2 collection);
    private IHTMLFramesCollection2 get_NativeHTMLFramesCollection2();
    [NullableContextAttribute("2")]
public HtmlWindow get_Item(int index);
    public HtmlWindow get_Item(string windowId);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("2")]
public interface System.Windows.Forms.IBindableComponent {
    [NullableAttribute("1")]
public ControlBindingsCollection DataBindings { get; }
    public BindingContext BindingContext { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual ControlBindingsCollection get_DataBindings();
    public abstract virtual BindingContext get_BindingContext();
    public abstract virtual void set_BindingContext(BindingContext value);
}
public interface System.Windows.Forms.IButtonControl {
    public DialogResult DialogResult { get; public set; }
    public abstract virtual DialogResult get_DialogResult();
    public abstract virtual void set_DialogResult(DialogResult value);
    public abstract virtual void NotifyDefault(bool value);
    public abstract virtual void PerformClick();
}
[NullableContextAttribute("2")]
internal interface System.Windows.Forms.ICommandBindingTargetProvider {
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public bool Enabled { get; public set; }
    protected Nullable`1<bool> PreviousEnabledStatus { get; protected set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommandChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommandChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommandCanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommandCanExecuteChanged(EventHandler value);
    public abstract virtual ICommand get_Command();
    public abstract virtual void set_Command(ICommand value);
    public abstract virtual object get_CommandParameter();
    public abstract virtual void set_CommandParameter(object value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    protected abstract virtual Nullable`1<bool> get_PreviousEnabledStatus();
    protected abstract virtual void set_PreviousEnabledStatus(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
protected abstract virtual void RaiseCommandChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected abstract virtual void RaiseCommandCanExecuteChanged(EventArgs e);
    protected static void CommandSetter(ICommandBindingTargetProvider commandComponent, ICommand newCommand, ICommand& commandBackingField);
    [NullableContextAttribute("1")]
protected static void RequestCommandExecute(ICommandBindingTargetProvider commandComponent);
    private void CommandSetter(ICommand newCommand, ICommand& commandBackingField);
    [NullableContextAttribute("1")]
private void CommandCanExecuteChangedProc(object sender, EventArgs e);
}
public interface System.Windows.Forms.ICommandExecutor {
    public abstract virtual void Execute();
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IComponentEditorPageSite {
    public abstract virtual Control GetControl();
    public abstract virtual void SetDirty();
}
[NullableContextAttribute("2")]
public interface System.Windows.Forms.IContainerControl {
    public Control ActiveControl { get; public set; }
    public abstract virtual Control get_ActiveControl();
    public abstract virtual void set_ActiveControl(Control value);
    [NullableContextAttribute("1")]
public abstract virtual bool ActivateControl(Control active);
}
[NullableContextAttribute("2")]
[SRDescriptionAttribute("ICurrencyManagerProviderDescr")]
public interface System.Windows.Forms.ICurrencyManagerProvider {
    public CurrencyManager CurrencyManager { get; }
    public abstract virtual CurrencyManager get_CurrencyManager();
    public abstract virtual CurrencyManager GetRelatedCurrencyManager(string dataMember);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IDataGridColumnStyleEditingNotificationService {
    public abstract virtual void ColumnStartedEditing(Control editingControl);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IDataGridViewEditingCell {
    public object EditingCellFormattedValue { get; public set; }
    public bool EditingCellValueChanged { get; public set; }
    public abstract virtual object get_EditingCellFormattedValue();
    public abstract virtual void set_EditingCellFormattedValue(object value);
    public abstract virtual bool get_EditingCellValueChanged();
    public abstract virtual void set_EditingCellValueChanged(bool value);
    public abstract virtual object GetEditingCellFormattedValue(DataGridViewDataErrorContexts context);
    public abstract virtual void PrepareEditingCellForEdit(bool selectAll);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IDataGridViewEditingControl {
    [NullableAttribute("2")]
public DataGridView EditingControlDataGridView { get; public set; }
    public object EditingControlFormattedValue { get; public set; }
    public int EditingControlRowIndex { get; public set; }
    public bool EditingControlValueChanged { get; public set; }
    public Cursor EditingPanelCursor { get; }
    public bool RepositionEditingControlOnValueChange { get; }
    [NullableContextAttribute("2")]
public abstract virtual DataGridView get_EditingControlDataGridView();
    [NullableContextAttribute("2")]
public abstract virtual void set_EditingControlDataGridView(DataGridView value);
    public abstract virtual object get_EditingControlFormattedValue();
    public abstract virtual void set_EditingControlFormattedValue(object value);
    public abstract virtual int get_EditingControlRowIndex();
    public abstract virtual void set_EditingControlRowIndex(int value);
    public abstract virtual bool get_EditingControlValueChanged();
    public abstract virtual void set_EditingControlValueChanged(bool value);
    public abstract virtual Cursor get_EditingPanelCursor();
    public abstract virtual bool get_RepositionEditingControlOnValueChange();
    public abstract virtual void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle);
    public abstract virtual bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey);
    public abstract virtual object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context);
    public abstract virtual void PrepareEditingControlForEdit(bool selectAll);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IDataObject {
    public abstract virtual object GetData(string format, bool autoConvert);
    public abstract virtual object GetData(string format);
    public abstract virtual object GetData(Type format);
    public abstract virtual void SetData(string format, bool autoConvert, object data);
    public abstract virtual void SetData(string format, object data);
    public abstract virtual void SetData(Type format, object data);
    [NullableContextAttribute("2")]
public abstract virtual void SetData(object data);
    public abstract virtual bool GetDataPresent(string format, bool autoConvert);
    public abstract virtual bool GetDataPresent(string format);
    public abstract virtual bool GetDataPresent(Type format);
    public abstract virtual String[] GetFormats(bool autoConvert);
    public abstract virtual String[] GetFormats();
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IDropTarget {
    public abstract virtual void OnDragEnter(DragEventArgs e);
    public abstract virtual void OnDragLeave(EventArgs e);
    public abstract virtual void OnDragDrop(DragEventArgs e);
    public abstract virtual void OnDragOver(DragEventArgs e);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IFeatureSupport {
    public abstract virtual bool IsPresent(object feature);
    public abstract virtual bool IsPresent(object feature, Version minimumVersion);
    public abstract virtual Version GetVersionPresent(object feature);
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.IFileReaderService {
    public abstract virtual Stream OpenFileFromSource(string relativePath);
}
[NullableContextAttribute("1")]
internal interface System.Windows.Forms.IKeyboardToolTip {
    public abstract virtual bool CanShowToolTipsNow();
    public abstract virtual Rectangle GetNativeScreenRectangle();
    public abstract virtual IList`1<Rectangle> GetNeighboringToolsRectangles();
    public abstract virtual bool IsHoveredWithMouse();
    public abstract virtual bool HasRtlModeEnabled();
    public abstract virtual bool AllowsToolTip();
    [NullableContextAttribute("2")]
public abstract virtual IWin32Window GetOwnerWindow();
    public abstract virtual void OnHooked(ToolTip toolTip);
    public abstract virtual void OnUnhooked(ToolTip toolTip);
    public abstract virtual string GetCaptionForTool(ToolTip toolTip);
    public abstract virtual bool ShowsOwnToolTip();
    public abstract virtual bool IsBeingTabbedTo();
    public abstract virtual bool AllowsChildrenToShowToolTips();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ImageIndexConverter : Int32Converter {
    [CompilerGeneratedAttribute]
private string <ParentImageListProperty>k__BackingField;
    protected bool IncludeNoneAsStandardValue { get; }
    internal string ParentImageListProperty { get; internal set; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    [CompilerGeneratedAttribute]
internal string get_ParentImageListProperty();
    [CompilerGeneratedAttribute]
internal void set_ParentImageListProperty(string value);
    [NullableContextAttribute("2")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    [NullableContextAttribute("2")]
public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    [NullableContextAttribute("2")]
public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ImageKeyConverter : StringConverter {
    private string _parentImageListProperty;
    protected bool IncludeNoneAsStandardValue { get; }
    internal string ParentImageListProperty { get; internal set; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    internal string get_ParentImageListProperty();
    internal void set_ParentImageListProperty(string value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [NullableContextAttribute("2")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    [NullableContextAttribute("2")]
public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    [NullableContextAttribute("2")]
public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum System.Windows.Forms.ImageLayout : Enum {
    public int value__;
    public static ImageLayout None;
    public static ImageLayout Tile;
    public static ImageLayout Center;
    public static ImageLayout Stretch;
    public static ImageLayout Zoom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ImageListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[DefaultPropertyAttribute("Images")]
[TypeConverterAttribute("System.Windows.Forms.ImageListConverter")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ImageListCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionImageList")]
public class System.Windows.Forms.ImageList : Component {
    private static Color s_fakeTransparencyColor;
    private static Size s_defaultImageSize;
    private static int MaxDimension;
    private static int s_maxImageWidth;
    private static int s_maxImageHeight;
    private static bool s_isScalingInitialized;
    [NullableAttribute("2")]
private NativeImageList _nativeImageList;
    private ColorDepth _colorDepth;
    private Size _imageSize;
    [NullableAttribute("2")]
private ImageCollection _imageCollection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Original> _originals;
    [NullableAttribute("2")]
private EventHandler _recreateHandler;
    [NullableAttribute("2")]
private EventHandler _changeHandler;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <TransparentColor>k__BackingField;
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ImageListColorDepthDescr")]
public ColorDepth ColorDepth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ImageListHandleDescr")]
public IntPtr Handle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ImageListHandleCreatedDescr")]
[MemberNotNullWhenAttribute("True", "_nativeImageList")]
public bool HandleCreated { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ImageListImagesDescr")]
[MergablePropertyAttribute("False")]
public ImageCollection Images { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ImageListSizeDescr")]
public Size ImageSize { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ImageListImageStreamDescr")]
public ImageListStreamer ImageStream { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ImageListTransparentColorDescr")]
public Color TransparentColor { get; public set; }
    private bool UseTransparentColor { get; }
    private HIMAGELIST IHandle<Windows.Win32.UI.Controls.HIMAGELIST>.Handle { get; }
    internal HIMAGELIST HIMAGELIST { get; }
    public ImageList(IContainer container);
    private static ImageList();
    public ColorDepth get_ColorDepth();
    public void set_ColorDepth(ColorDepth value);
    private bool ShouldSerializeColorDepth();
    private void ResetColorDepth();
    public IntPtr get_Handle();
    [MemberNotNullWhenAttribute("True", "_nativeImageList")]
public bool get_HandleCreated();
    public ImageCollection get_Images();
    public Size get_ImageSize();
    public void set_ImageSize(Size value);
    private bool ShouldSerializeImageSize();
    [NullableContextAttribute("2")]
public ImageListStreamer get_ImageStream();
    [NullableContextAttribute("2")]
public void set_ImageStream(ImageListStreamer value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public Color get_TransparentColor();
    [CompilerGeneratedAttribute]
public void set_TransparentColor(Color value);
    private bool get_UseTransparentColor();
    [NullableContextAttribute("2")]
public void add_RecreateHandle(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_RecreateHandle(EventHandler value);
    [NullableContextAttribute("2")]
internal void add_ChangeHandle(EventHandler value);
    [NullableContextAttribute("2")]
internal void remove_ChangeHandle(EventHandler value);
    private Bitmap CreateBitmap(Original original, Boolean& ownsBitmap);
    private int AddIconToHandle(Original original, Icon icon);
    private int AddToHandle(Bitmap bitmap);
    [MemberNotNullAttribute("_nativeImageList")]
private void CreateHandle();
    private void DestroyHandle();
    protected virtual void Dispose(bool disposing);
    public void Draw(Graphics g, Point pt, int index);
    public void Draw(Graphics g, int x, int y, int index);
    public void Draw(Graphics g, int x, int y, int width, int height, int index);
    private static void CopyBitmapData(BitmapData sourceData, BitmapData targetData);
    private static bool BitmapHasAlpha(BitmapData bmpData);
    private Bitmap GetBitmap(int index);
    private void OnRecreateHandle(EventArgs eventargs);
    private void OnChangeHandle(EventArgs eventargs);
    private void PerformRecreateHandle(string reason);
    private void ResetImageSize();
    private void ResetTransparentColor();
    private bool ShouldSerializeTransparentColor();
    public virtual string ToString();
    private sealed virtual override HIMAGELIST IHandle<Windows.Win32.UI.Controls.HIMAGELIST>.get_Handle();
    internal HIMAGELIST get_HIMAGELIST();
}
internal class System.Windows.Forms.ImageListConverter : ComponentConverter {
    [NullableContextAttribute("2")]
public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ImageListStreamer : object {
    private static object s_syncObject;
    [NullableAttribute("2")]
private ImageList _imageList;
    [NullableAttribute("2")]
private NativeImageList _nativeImageList;
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> HeaderMagic { get; }
    internal ImageListStreamer(ImageList il);
    private ImageListStreamer(SerializationInfo info, StreamingContext context);
    internal ImageListStreamer(Stream stream);
    private static ImageListStreamer();
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_HeaderMagic();
    [NullableContextAttribute("0")]
private static Byte[] Compress(ReadOnlySpan`1<byte> input);
    private static Byte[] Decompress(Byte[] input);
    private void Deserialize(Byte[] data);
    public sealed virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    internal void GetObjectData(Stream stream);
    [NullableContextAttribute("2")]
internal NativeImageList GetNativeImageList();
    private bool WriteImageList(Stream stream);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal static class System.Windows.Forms.ImageListUtils : object {
    [NullableContextAttribute("2")]
public static PropertyDescriptor GetImageListProperty(PropertyDescriptor currentComponent, Object& instance);
}
public static class System.Windows.Forms.ImeContext : object {
    private static HIMC originalImeContext;
    public static void Disable(IntPtr handle);
    public static void Enable(IntPtr handle);
    public static ImeMode GetImeMode(IntPtr handle);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
internal static void TraceImeStatus(Control ctl);
    [ConditionalAttribute("DEBUG")]
private static void TraceImeStatus(IntPtr handle);
    public static bool IsOpen(IntPtr handle);
    public static void SetImeStatus(ImeMode imeMode, IntPtr handle);
    public static void SetOpenStatus(bool open, IntPtr handle);
}
public enum System.Windows.Forms.ImeMode : Enum {
    public int value__;
    public static ImeMode Inherit;
    public static ImeMode NoControl;
    public static ImeMode On;
    public static ImeMode Off;
    public static ImeMode Disable;
    public static ImeMode Hiragana;
    public static ImeMode Katakana;
    public static ImeMode KatakanaHalf;
    public static ImeMode AlphaFull;
    public static ImeMode Alpha;
    public static ImeMode HangulFull;
    public static ImeMode Hangul;
    public static ImeMode Close;
    public static ImeMode OnHalf;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Windows.Forms.ImeModeConversion : ValueType {
    [NullableAttribute("2")]
private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_imeModeConversionBits;
    [CompilerGeneratedAttribute]
private IME_CONVERSION_MODE <SetBits>k__BackingField;
    [CompilerGeneratedAttribute]
private IME_CONVERSION_MODE <ClearBits>k__BackingField;
    internal static int ImeDisabled;
    internal static int ImeDirectInput;
    internal static int ImeClosed;
    internal static int ImeNativeInput;
    internal static int ImeNativeFullHiragana;
    internal static int ImeNativeHalfHiragana;
    internal static int ImeNativeFullKatakana;
    internal static int ImeNativeHalfKatakana;
    internal static int ImeAlphaFull;
    internal static int ImeAlphaHalf;
    private static ImeMode[] japaneseTable;
    private static ImeMode[] koreanTable;
    private static ImeMode[] chineseTable;
    private static ImeMode[] unsupportedTable;
    internal IME_CONVERSION_MODE SetBits { get; internal set; }
    internal IME_CONVERSION_MODE ClearBits { get; internal set; }
    internal static ImeMode[] ChineseTable { get; }
    internal static ImeMode[] JapaneseTable { get; }
    internal static ImeMode[] KoreanTable { get; }
    internal static ImeMode[] UnsupportedTable { get; }
    internal static ImeMode[] InputLanguageTable { get; }
    public static Dictionary`2<ImeMode, ImeModeConversion> ImeModeConversionBits { get; }
    public static bool IsCurrentConversionTableSupported { get; }
    private static ImeModeConversion();
    [CompilerGeneratedAttribute]
internal IME_CONVERSION_MODE get_SetBits();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SetBits(IME_CONVERSION_MODE value);
    [CompilerGeneratedAttribute]
internal IME_CONVERSION_MODE get_ClearBits();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClearBits(IME_CONVERSION_MODE value);
    internal static ImeMode[] get_ChineseTable();
    internal static ImeMode[] get_JapaneseTable();
    internal static ImeMode[] get_KoreanTable();
    internal static ImeMode[] get_UnsupportedTable();
    internal static ImeMode[] get_InputLanguageTable();
    public static Dictionary`2<ImeMode, ImeModeConversion> get_ImeModeConversionBits();
    public static bool get_IsCurrentConversionTableSupported();
}
public interface System.Windows.Forms.IMessageFilter {
    public abstract virtual bool PreFilterMessage(Message& m);
}
internal interface System.Windows.Forms.IMessageModifyAndFilter {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.InputLanguage : object {
    private IntPtr _handle;
    private static string KeyboardLayoutsRegistryPath;
    private static string UserProfileRegistryPath;
    public CultureInfo Culture { get; }
    public static InputLanguage CurrentInputLanguage { get; public set; }
    public static InputLanguage DefaultInputLanguage { get; }
    public IntPtr Handle { get; }
    public static InputLanguageCollection InstalledInputLanguages { get; }
    public string LayoutName { get; }
    internal string LayoutId { get; }
    private string LanguageTag { get; }
    internal InputLanguage(IntPtr handle);
    public CultureInfo get_Culture();
    public static InputLanguage get_CurrentInputLanguage();
    public static void set_CurrentInputLanguage(InputLanguage value);
    public static InputLanguage get_DefaultInputLanguage();
    public IntPtr get_Handle();
    public static InputLanguageCollection get_InstalledInputLanguages();
    public string get_LayoutName();
    internal string get_LayoutId();
    private string get_LanguageTag();
    internal static InputLanguageChangedEventArgs CreateInputLanguageChangedEventArgs(Message m);
    internal static InputLanguageChangingEventArgs CreateInputLanguageChangingEventArgs(Message m);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public static InputLanguage FromCulture(CultureInfo culture);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.InputLanguageChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private InputLanguage <InputLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <CharSet>k__BackingField;
    public InputLanguage InputLanguage { get; }
    public CultureInfo Culture { get; }
    public byte CharSet { get; }
    public InputLanguageChangedEventArgs(CultureInfo culture, byte charSet);
    public InputLanguageChangedEventArgs(InputLanguage inputLanguage, byte charSet);
    [CompilerGeneratedAttribute]
public InputLanguage get_InputLanguage();
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public byte get_CharSet();
}
public class System.Windows.Forms.InputLanguageChangedEventHandler : MulticastDelegate {
    public InputLanguageChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, InputLanguageChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InputLanguageChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.InputLanguageChangingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private InputLanguage <InputLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SysCharSet>k__BackingField;
    public InputLanguage InputLanguage { get; }
    public CultureInfo Culture { get; }
    public bool SysCharSet { get; }
    public InputLanguageChangingEventArgs(CultureInfo culture, bool sysCharSet);
    public InputLanguageChangingEventArgs(InputLanguage inputLanguage, bool sysCharSet);
    [CompilerGeneratedAttribute]
public InputLanguage get_InputLanguage();
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public bool get_SysCharSet();
}
public class System.Windows.Forms.InputLanguageChangingEventHandler : MulticastDelegate {
    public InputLanguageChangingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, InputLanguageChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InputLanguageChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.InputLanguageCollection : ReadOnlyCollectionBase {
    public InputLanguage Item { get; }
    internal InputLanguageCollection(InputLanguage[] value);
    public InputLanguage get_Item(int index);
    [NullableContextAttribute("2")]
public bool Contains(InputLanguage value);
    public void CopyTo(InputLanguage[] array, int index);
    [NullableContextAttribute("2")]
public int IndexOf(InputLanguage value);
}
public enum System.Windows.Forms.InsertKeyMode : Enum {
    public int value__;
    public static InsertKeyMode Default;
    public static InsertKeyMode Insert;
    public static InsertKeyMode Overwrite;
}
internal enum System.Windows.Forms.Internal.TextPaddingOptions : Enum {
    public int value__;
    public static TextPaddingOptions GlyphOverhangPadding;
    public static TextPaddingOptions NoPadding;
    public static TextPaddingOptions LeftAndRightPadding;
}
public class System.Windows.Forms.InvalidateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Rectangle <InvalidRect>k__BackingField;
    public Rectangle InvalidRect { get; }
    public InvalidateEventArgs(Rectangle invalidRect);
    [CompilerGeneratedAttribute]
public Rectangle get_InvalidRect();
}
public class System.Windows.Forms.InvalidateEventHandler : MulticastDelegate {
    public InvalidateEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, InvalidateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InvalidateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
internal interface System.Windows.Forms.IOwnedObject`1 {
    public TOwner Owner { get; }
    public abstract virtual TOwner get_Owner();
}
[NullableContextAttribute("1")]
internal interface System.Windows.Forms.ISupportOleDropSource {
    public abstract virtual void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent);
    public abstract virtual void OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
}
[NullableContextAttribute("2")]
internal interface System.Windows.Forms.ISupportToolStripPanel {
    public ToolStripPanelRow ToolStripPanelRow { get; public set; }
    public ToolStripPanelCell ToolStripPanelCell { get; }
    public bool Stretch { get; public set; }
    public bool IsCurrentlyDragging { get; }
    public abstract virtual ToolStripPanelRow get_ToolStripPanelRow();
    public abstract virtual void set_ToolStripPanelRow(ToolStripPanelRow value);
    public abstract virtual ToolStripPanelCell get_ToolStripPanelCell();
    public abstract virtual bool get_Stretch();
    public abstract virtual void set_Stretch(bool value);
    public abstract virtual bool get_IsCurrentlyDragging();
    public abstract virtual void BeginDrag();
    public abstract virtual void EndDrag();
}
public enum System.Windows.Forms.ItemActivation : Enum {
    public int value__;
    public static ItemActivation Standard;
    public static ItemActivation OneClick;
    public static ItemActivation TwoClick;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ItemArray : object {
    private static int s_lastMask;
    private ListControl _listControl;
    private List`1<Entry> _entries;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyList`1<Entry> Entries { get; }
    public int Version { get; private set; }
    public int Count { get; }
    public ItemArray(ListControl listControl);
    private static ItemArray();
    internal IReadOnlyList`1<Entry> get_Entries();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    public object Add(object item);
    public void Clear();
    public static int CreateMask();
    public int GetActualIndex(int virtualIndex, int stateMask);
    public int get_Count();
    public int GetCount(int stateMask);
    public IEnumerator GetEnumerator(int stateMask);
    public IEnumerator GetEnumerator(int stateMask, bool anyBit);
    public object GetItem(int virtualIndex, int stateMask);
    internal Entry GetEntryObject(int virtualIndex, int stateMask);
    public bool GetState(int index, int stateMask);
    [NullableContextAttribute("2")]
public int IndexOf(object item, int stateMask);
    public void Insert(int index, object item);
    public void InsertEntry(int index, Entry item);
    public void Remove(object item);
    public void RemoveAt(int index);
    public void SetItem(int index, object item);
    public void SetState(int index, int stateMask, bool value);
    public static Entry GetEntry(object element);
    public int BinarySearch(Entry element);
    public void Sort();
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.Generic.IComparer<System.Windows.Forms.ItemArray.Entry>.Compare(Entry entry1, Entry entry2);
}
public enum System.Windows.Forms.ItemBoundsPortion : Enum {
    public int value__;
    public static ItemBoundsPortion Entire;
    public static ItemBoundsPortion Icon;
    public static ItemBoundsPortion Label;
    public static ItemBoundsPortion ItemOnly;
}
public class System.Windows.Forms.ItemChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; }
    internal ItemChangedEventArgs(int index);
    [CompilerGeneratedAttribute]
public int get_Index();
}
public class System.Windows.Forms.ItemChangedEventHandler : MulticastDelegate {
    public ItemChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ItemChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ItemCheckedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    public ListViewItem Item { get; }
    public ItemCheckedEventArgs(ListViewItem item);
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
}
public class System.Windows.Forms.ItemCheckedEventHandler : MulticastDelegate {
    public ItemCheckedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ItemCheckedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemCheckedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ItemCheckEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckState <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckState <CurrentValue>k__BackingField;
    public int Index { get; }
    public CheckState NewValue { get; public set; }
    public CheckState CurrentValue { get; }
    public ItemCheckEventArgs(int index, CheckState newCheckValue, CheckState currentValue);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public CheckState get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(CheckState value);
    [CompilerGeneratedAttribute]
public CheckState get_CurrentValue();
}
public class System.Windows.Forms.ItemCheckEventHandler : MulticastDelegate {
    public ItemCheckEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ItemCheckEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemCheckEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ItemDragEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MouseButtons <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public MouseButtons Button { get; }
    public object Item { get; }
    public ItemDragEventArgs(MouseButtons button);
    public ItemDragEventArgs(MouseButtons button, object item);
    [CompilerGeneratedAttribute]
public MouseButtons get_Button();
    [CompilerGeneratedAttribute]
public object get_Item();
}
public class System.Windows.Forms.ItemDragEventHandler : MulticastDelegate {
    public ItemDragEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ItemDragEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemDragEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.Windows.Forms.IWin32Window {
    public IntPtr Handle { get; }
    public abstract virtual IntPtr get_Handle();
}
public interface System.Windows.Forms.IWindowTarget {
    public abstract virtual void OnHandleChange(IntPtr newHandle);
    public abstract virtual void OnMessage(Message& m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.KeyboardToolTipStateMachine : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static KeyboardToolTipStateMachine s_instance;
    private ToolToTipDictionary _toolToTip;
    private SmState _currentState;
    [NullableAttribute("2")]
private IKeyboardToolTip _currentTool;
    private InternalStateMachineTimer _timer;
    [NullableAttribute("2")]
private SendOrPostCallback _refocusDelayExpirationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<IKeyboardToolTip> _lastFocusedTool;
    public static KeyboardToolTipStateMachine Instance { get; }
    [NullableAttribute("2")]
internal IKeyboardToolTip LastFocusedTool { get; }
    public static KeyboardToolTipStateMachine get_Instance();
    private SmState Transition(IKeyboardToolTip tool, ToolTip tooltip, SmEvent event);
    public void ResetStateMachine(ToolTip toolTip);
    public void Hook(IKeyboardToolTip tool, ToolTip toolTip);
    public void NotifyAboutMouseEnter(IKeyboardToolTip sender);
    private bool IsToolTracked(IKeyboardToolTip sender);
    public void NotifyAboutLostFocus(IKeyboardToolTip sender);
    public void NotifyAboutGotFocus(IKeyboardToolTip sender);
    public void Unhook(IKeyboardToolTip tool, ToolTip toolTip);
    public void NotifyAboutFormDeactivation(ToolTip sender);
    [NullableContextAttribute("2")]
internal IKeyboardToolTip get_LastFocusedTool();
    private SmState HideAndStartWaitingForRefocus(IKeyboardToolTip tool, ToolTip toolTip);
    private SmState StartWaitingForRefocus(IKeyboardToolTip tool);
    private SmState SetupReshowTimer(IKeyboardToolTip tool, ToolTip toolTip);
    private SmState ShowToolTip(IKeyboardToolTip tool, ToolTip toolTip);
    private SmState SetupInitShowTimer(IKeyboardToolTip tool, ToolTip toolTip);
    private void StartTimer(int interval, EventHandler eventHandler);
    private EventHandler GetOneRunTickHandler(Action`1<Timer> handler);
    private void Transit(SmEvent event, IKeyboardToolTip source);
    internal static void HidePersistentTooltip();
    private void HidePersistent();
    private SmState FullFsmReset();
    private void ResetTimer();
    [NullableContextAttribute("2")]
private void Reset(ToolTip toolTipToReset);
    internal static void Reset();
    private void StartTracking(IKeyboardToolTip tool, ToolTip toolTip);
    private void StopTracking(IKeyboardToolTip tool, ToolTip toolTip);
    private void OnFormDeactivation(ToolTip sender);
    [CompilerGeneratedAttribute]
private void <ShowToolTip>b__24_0(Timer sender);
    [CompilerGeneratedAttribute]
private void <SetupInitShowTimer>b__25_0(Timer sender);
}
public class System.Windows.Forms.KeyEventArgs : EventArgs {
    private bool _suppressKeyPress;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private Keys <KeyData>k__BackingField;
    public bool Alt { get; }
    public bool Control { get; }
    public bool Handled { get; public set; }
    public Keys KeyCode { get; }
    public int KeyValue { get; }
    public Keys KeyData { get; }
    public Keys Modifiers { get; }
    public bool Shift { get; }
    public bool SuppressKeyPress { get; public set; }
    public KeyEventArgs(Keys keyData);
    public virtual bool get_Alt();
    public bool get_Control();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    public Keys get_KeyCode();
    public int get_KeyValue();
    [CompilerGeneratedAttribute]
public Keys get_KeyData();
    public Keys get_Modifiers();
    public virtual bool get_Shift();
    public bool get_SuppressKeyPress();
    public void set_SuppressKeyPress(bool value);
}
public class System.Windows.Forms.KeyEventHandler : MulticastDelegate {
    public KeyEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, KeyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KeyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.KeyPressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private char <KeyChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public char KeyChar { get; public set; }
    public bool Handled { get; public set; }
    public KeyPressEventArgs(char keyChar);
    [CompilerGeneratedAttribute]
public char get_KeyChar();
    [CompilerGeneratedAttribute]
public void set_KeyChar(char value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.Windows.Forms.KeyPressEventHandler : MulticastDelegate {
    public KeyPressEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, KeyPressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KeyPressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
[TypeConverterAttribute("System.Windows.Forms.KeysConverter")]
[EditorAttribute("System.Windows.Forms.Design.ShortcutKeysEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public enum System.Windows.Forms.Keys : Enum {
    public int value__;
    public static Keys KeyCode;
    public static Keys Modifiers;
    public static Keys None;
    public static Keys LButton;
    public static Keys RButton;
    public static Keys Cancel;
    public static Keys MButton;
    public static Keys XButton1;
    public static Keys XButton2;
    public static Keys Back;
    public static Keys Tab;
    public static Keys LineFeed;
    public static Keys Clear;
    public static Keys Return;
    public static Keys Enter;
    public static Keys ShiftKey;
    public static Keys ControlKey;
    public static Keys Menu;
    public static Keys Pause;
    public static Keys Capital;
    public static Keys CapsLock;
    public static Keys KanaMode;
    public static Keys HanguelMode;
    public static Keys HangulMode;
    public static Keys JunjaMode;
    public static Keys FinalMode;
    public static Keys HanjaMode;
    public static Keys KanjiMode;
    public static Keys Escape;
    public static Keys IMEConvert;
    public static Keys IMENonconvert;
    public static Keys IMEAccept;
    public static Keys IMEAceept;
    public static Keys IMEModeChange;
    public static Keys Space;
    public static Keys Prior;
    public static Keys PageUp;
    public static Keys Next;
    public static Keys PageDown;
    public static Keys End;
    public static Keys Home;
    public static Keys Left;
    public static Keys Up;
    public static Keys Right;
    public static Keys Down;
    public static Keys Select;
    public static Keys Print;
    public static Keys Execute;
    public static Keys Snapshot;
    public static Keys PrintScreen;
    public static Keys Insert;
    public static Keys Delete;
    public static Keys Help;
    public static Keys D0;
    public static Keys D1;
    public static Keys D2;
    public static Keys D3;
    public static Keys D4;
    public static Keys D5;
    public static Keys D6;
    public static Keys D7;
    public static Keys D8;
    public static Keys D9;
    public static Keys A;
    public static Keys B;
    public static Keys C;
    public static Keys D;
    public static Keys E;
    public static Keys F;
    public static Keys G;
    public static Keys H;
    public static Keys I;
    public static Keys J;
    public static Keys K;
    public static Keys L;
    public static Keys M;
    public static Keys N;
    public static Keys O;
    public static Keys P;
    public static Keys Q;
    public static Keys R;
    public static Keys S;
    public static Keys T;
    public static Keys U;
    public static Keys V;
    public static Keys W;
    public static Keys X;
    public static Keys Y;
    public static Keys Z;
    public static Keys LWin;
    public static Keys RWin;
    public static Keys Apps;
    public static Keys Sleep;
    public static Keys NumPad0;
    public static Keys NumPad1;
    public static Keys NumPad2;
    public static Keys NumPad3;
    public static Keys NumPad4;
    public static Keys NumPad5;
    public static Keys NumPad6;
    public static Keys NumPad7;
    public static Keys NumPad8;
    public static Keys NumPad9;
    public static Keys Multiply;
    public static Keys Add;
    public static Keys Separator;
    public static Keys Subtract;
    public static Keys Decimal;
    public static Keys Divide;
    public static Keys F1;
    public static Keys F2;
    public static Keys F3;
    public static Keys F4;
    public static Keys F5;
    public static Keys F6;
    public static Keys F7;
    public static Keys F8;
    public static Keys F9;
    public static Keys F10;
    public static Keys F11;
    public static Keys F12;
    public static Keys F13;
    public static Keys F14;
    public static Keys F15;
    public static Keys F16;
    public static Keys F17;
    public static Keys F18;
    public static Keys F19;
    public static Keys F20;
    public static Keys F21;
    public static Keys F22;
    public static Keys F23;
    public static Keys F24;
    public static Keys NumLock;
    public static Keys Scroll;
    public static Keys LShiftKey;
    public static Keys RShiftKey;
    public static Keys LControlKey;
    public static Keys RControlKey;
    public static Keys LMenu;
    public static Keys RMenu;
    public static Keys BrowserBack;
    public static Keys BrowserForward;
    public static Keys BrowserRefresh;
    public static Keys BrowserStop;
    public static Keys BrowserSearch;
    public static Keys BrowserFavorites;
    public static Keys BrowserHome;
    public static Keys VolumeMute;
    public static Keys VolumeDown;
    public static Keys VolumeUp;
    public static Keys MediaNextTrack;
    public static Keys MediaPreviousTrack;
    public static Keys MediaStop;
    public static Keys MediaPlayPause;
    public static Keys LaunchMail;
    public static Keys SelectMedia;
    public static Keys LaunchApplication1;
    public static Keys LaunchApplication2;
    public static Keys OemSemicolon;
    public static Keys Oem1;
    public static Keys Oemplus;
    public static Keys Oemcomma;
    public static Keys OemMinus;
    public static Keys OemPeriod;
    public static Keys OemQuestion;
    public static Keys Oem2;
    public static Keys Oemtilde;
    public static Keys Oem3;
    public static Keys OemOpenBrackets;
    public static Keys Oem4;
    public static Keys OemPipe;
    public static Keys Oem5;
    public static Keys OemCloseBrackets;
    public static Keys Oem6;
    public static Keys OemQuotes;
    public static Keys Oem7;
    public static Keys Oem8;
    public static Keys OemBackslash;
    public static Keys Oem102;
    public static Keys ProcessKey;
    public static Keys Packet;
    public static Keys Attn;
    public static Keys Crsel;
    public static Keys Exsel;
    public static Keys EraseEof;
    public static Keys Play;
    public static Keys Zoom;
    public static Keys NoName;
    public static Keys Pa1;
    public static Keys OemClear;
    public static Keys Shift;
    public static Keys Control;
    public static Keys Alt;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.KeysConverter : TypeConverter {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<CultureInfo, List`1<string>> _cultureToDisplayOrder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<CultureInfo, Dictionary`2<string, Keys>> _cultureToKeyName;
    [NullableAttribute("2")]
private StandardValuesCollection _values;
    private Dictionary`2<CultureInfo, Dictionary`2<string, Keys>> CultureToKeyName { get; }
    private Dictionary`2<CultureInfo, List`1<string>> CultureToDisplayOrder { get; }
    [MemberNotNullAttribute("_cultureToDisplayOrder")]
[MemberNotNullAttribute("_cultureToKeyName")]
private void Initialize();
    private void AddLocalizedKeyNames(CultureInfo cultureInfo);
    private Dictionary`2<CultureInfo, Dictionary`2<string, Keys>> get_CultureToKeyName();
    private Dictionary`2<CultureInfo, List`1<string>> get_CultureToDisplayOrder();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [NullableContextAttribute("2")]
public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(object a, object b);
    [NullableContextAttribute("2")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private IList`1<string> GetDisplayOrder(CultureInfo culture);
    private IDictionary`2<string, Keys> GetKeyNames(CultureInfo culture);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    [NullableContextAttribute("2")]
public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    [NullableContextAttribute("2")]
public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    [CompilerGeneratedAttribute]
internal static void <AddLocalizedKeyNames>g__AddKey|4_0(string key, Keys value, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <AddLocalizedKeyNames>g__AddLocalizedKey|4_1(string keyName, Keys value, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
private Enum[] <ConvertTo>g__GetTermKeys|13_0(Keys key, <>c__DisplayClass13_0& );
    [CompilerGeneratedAttribute]
private string <ConvertTo>g__GetTermsString|13_1(Keys key, <>c__DisplayClass13_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Text")]
[DefaultBindingPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.LabelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionLabel")]
public class System.Windows.Forms.Label : Control {
    [NullableAttribute("1")]
private static object s_eventTextAlignChanged;
    private static Section s_stateUseMnemonic;
    private static Section s_stateAutoSize;
    private static Section s_stateAnimating;
    private static Section s_stateFlatStyle;
    private static Section s_stateBorderStyle;
    private static Section s_stateAutoEllipsis;
    private static int s_propImageList;
    private static int s_propImage;
    private static int s_propTextAlign;
    private static int s_propImageAlign;
    private static int s_propImageIndex;
    private BitVector32 _labelState;
    private int _requestedHeight;
    private int _requestedWidth;
    private MeasureTextCache _textMeasurementCache;
    internal bool _showToolTip;
    private ToolTip _textToolTip;
    private bool _controlToolTip;
    private AutomationLiveSetting _liveSetting;
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("LabelAutoSizeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[SRDescriptionAttribute("LabelAutoEllipsisDescr")]
public bool AutoEllipsis { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("LabelBackgroundImageDescr")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("LabelBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    internal bool CanUseTextRenderer { get; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Padding DefaultMargin { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ButtonFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonImageDescr")]
[SRCategoryAttribute("CatAppearance")]
public Image Image { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("-1")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public int ImageIndex { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public string ImageKey { get; public set; }
    [NullableAttribute("1")]
internal LabelImageIndexer ImageIndexer { get; internal set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ButtonImageListDescr")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
public ImageList ImageList { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonImageAlignDescr")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment ImageAlign { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("LiveRegionAutomationLiveSettingDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutomationLiveSetting LiveSetting { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [NullableAttribute("1")]
internal MeasureTextCache MeasureTextCache { get; }
    internal bool OwnerDraw { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("LabelPreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("LabelPreferredWidthDescr")]
public int PreferredWidth { get; }
    [ObsoleteAttribute("This property has been deprecated. Use BackColor instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
protected bool RenderTransparent { get; protected set; }
    private bool SelfSizing { get; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [SRDescriptionAttribute("LabelTextAlignDescr")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment TextAlign { get; public set; }
    [NullableAttribute("1")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SettingsBindableAttribute("True")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    internal bool SupportsUseCompatibleTextRendering { get; }
    [SRDescriptionAttribute("LabelUseMnemonicDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public bool UseMnemonic { get; public set; }
    internal bool IsMnemonicsListenerAxSourced { get; }
    internal bool SupportsUiaProviders { get; }
    private static Label();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public bool get_AutoEllipsis();
    public void set_AutoEllipsis(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    internal virtual bool get_CanUseTextRenderer();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultSize();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public Image get_Image();
    public void set_Image(Image value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    [NullableContextAttribute("1")]
internal LabelImageIndexer get_ImageIndexer();
    [NullableContextAttribute("1")]
internal void set_ImageIndexer(LabelImageIndexer value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public sealed virtual AutomationLiveSetting get_LiveSetting();
    public sealed virtual void set_LiveSetting(AutomationLiveSetting value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    [NullableContextAttribute("1")]
internal MeasureTextCache get_MeasureTextCache();
    internal virtual bool get_OwnerDraw();
    public virtual int get_PreferredHeight();
    public virtual int get_PreferredWidth();
    protected virtual bool get_RenderTransparent();
    protected virtual void set_RenderTransparent(bool value);
    private bool get_SelfSizing();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextAlignChanged(EventHandler value);
    public void remove_TextAlignChanged(EventHandler value);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    internal virtual bool get_SupportsUseCompatibleTextRendering();
    public bool get_UseMnemonic();
    public void set_UseMnemonic(bool value);
    internal void AdjustSize();
    internal void Animate();
    internal void StopAnimate();
    private void Animate(bool animate);
    [NullableContextAttribute("1")]
protected Rectangle CalcImageRenderBounds(Image image, Rectangle r, ContentAlignment align);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
internal virtual StringFormat CreateStringFormat();
    private TextFormatFlags CreateTextFormatFlags();
    private protected TextFormatFlags CreateTextFormatFlags(Size constrainingSize);
    [NullableContextAttribute("1")]
private void DetachImageList(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
private void DrawImage(PaintEventArgs e, Image image, Rectangle r, ContentAlignment align);
    [NullableContextAttribute("1")]
protected void DrawImage(Graphics g, Image image, Rectangle r, ContentAlignment align);
    [NullableContextAttribute("1")]
private void DrawImageInternal(Graphics g, Image image, Rectangle r, ContentAlignment align);
    private Size GetBordersAndPadding();
    public virtual Size GetPreferredSize(Size proposedSize);
    internal virtual bool UseGDIMeasuring();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    private int GetLeadingTextPaddingFromTextFormatFlags();
    [NullableContextAttribute("1")]
private void ImageListRecreateHandle(object sender, EventArgs e);
    internal virtual bool get_IsMnemonicsListenerAxSourced();
    private bool IsOwnerDraw();
    [NullableContextAttribute("1")]
protected virtual void OnMouseEnter(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
private void OnFrameChanged(object o, EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnTextChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnTextAlignChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaddingChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    internal virtual void OnAutoEllipsisChanged();
    [NullableContextAttribute("1")]
protected virtual void OnEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnParentChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnVisibleChanged(EventArgs e);
    private protected virtual void PrintToMetaFileRecursive(HDC hDC, IntPtr lParam, Rectangle bounds);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void ResetImage();
    private bool ShouldSerializeImage();
    [NullableContextAttribute("1")]
internal virtual void SetToolTip(ToolTip toolTip);
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.LabelEditEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelEdit>k__BackingField;
    public int Item { get; }
    public string Label { get; }
    public bool CancelEdit { get; public set; }
    public LabelEditEventArgs(int item);
    public LabelEditEventArgs(int item, string label);
    [CompilerGeneratedAttribute]
public int get_Item();
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public bool get_CancelEdit();
    [CompilerGeneratedAttribute]
public void set_CancelEdit(bool value);
}
public class System.Windows.Forms.LabelEditEventHandler : MulticastDelegate {
    public LabelEditEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, LabelEditEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LabelEditEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Layout.ArrangedElementCollection : object {
    internal static ArrangedElementCollection Empty;
    [CompilerGeneratedAttribute]
private List`1<IArrangedElement> <InnerList>k__BackingField;
    private protected List`1<IArrangedElement> InnerList { get; }
    internal IArrangedElement Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    internal ArrangedElementCollection(List`1<IArrangedElement> innerList);
    private ArrangedElementCollection(int size);
    private static ArrangedElementCollection();
    [CompilerGeneratedAttribute]
private protected List`1<IArrangedElement> get_InnerList();
    internal virtual IArrangedElement get_Item(int index);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private protected void MoveElement(IArrangedElement element, int fromIndex, int toIndex);
    private static void Copy(ArrangedElementCollection sourceList, int sourceIndex, ArrangedElementCollection destinationList, int destinationIndex, int length);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    public virtual bool get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.Layout.CommonProperties : object {
    private static int _layoutStateProperty;
    private static int _specifiedBoundsProperty;
    private static int _preferredSizeCacheProperty;
    private static int _paddingProperty;
    private static int _marginProperty;
    private static int _minimumSizeProperty;
    private static int _maximumSizeProperty;
    private static int _layoutBoundsProperty;
    internal static ContentAlignment DefaultAlignment;
    internal static AnchorStyles DefaultAnchor;
    internal static bool DefaultAutoSize;
    internal static DockStyle DefaultDock;
    internal static Padding DefaultMargin;
    internal static Size DefaultMinimumSize;
    internal static Size DefaultMaximumSize;
    private static Section _dockAndAnchorNeedsLayoutSection;
    private static Section _dockAndAnchorSection;
    private static Section _dockModeSection;
    private static Section _autoSizeSection;
    private static Section _BoxStretchInternalSection;
    private static Section _anchorNeverShrinksSection;
    private static Section _flowBreakSection;
    private static Section _selfAutoSizingSection;
    private static Section _autoSizeModeSection;
    private static CommonProperties();
    internal static void ClearMaximumSize(IArrangedElement element);
    internal static bool GetAutoSize(IArrangedElement element);
    internal static Padding GetMargin(IArrangedElement element);
    internal static Size GetMaximumSize(IArrangedElement element, Size defaultMaximumSize);
    internal static Size GetMinimumSize(IArrangedElement element, Size defaultMinimumSize);
    internal static Padding GetPadding(IArrangedElement element, Padding defaultPadding);
    internal static Rectangle GetSpecifiedBounds(IArrangedElement element);
    internal static void ResetPadding(IArrangedElement element);
    internal static void SetAutoSize(IArrangedElement element, bool value);
    internal static void SetMargin(IArrangedElement element, Padding value);
    internal static void SetMaximumSize(IArrangedElement element, Size value);
    internal static void SetMinimumSize(IArrangedElement element, Size value);
    internal static void SetPadding(IArrangedElement element, Padding value);
    internal static void UpdateSpecifiedBounds(IArrangedElement element, int x, int y, int width, int height, BoundsSpecified specified);
    internal static void UpdateSpecifiedBounds(IArrangedElement element, int x, int y, int width, int height);
    internal static void xClearPreferredSizeCache(IArrangedElement element);
    internal static void xClearAllPreferredSizeCaches(IArrangedElement start);
    internal static Size xGetPreferredSizeCache(IArrangedElement element);
    internal static void xSetPreferredSizeCache(IArrangedElement element, Size value);
    internal static AutoSizeMode GetAutoSizeMode(IArrangedElement element);
    internal static bool GetNeedsDockAndAnchorLayout(IArrangedElement element);
    internal static bool GetNeedsAnchorLayout(IArrangedElement element);
    internal static bool GetNeedsDockLayout(IArrangedElement element);
    internal static bool GetSelfAutoSizeInDefaultLayout(IArrangedElement element);
    internal static void SetAutoSizeMode(IArrangedElement element, AutoSizeMode mode);
    internal static bool ShouldSelfSize(IArrangedElement element);
    internal static void SetSelfAutoSizeInDefaultLayout(IArrangedElement element, bool value);
    internal static AnchorStyles xGetAnchor(IArrangedElement element);
    internal static bool xGetAutoSizedAndAnchored(IArrangedElement element);
    internal static DockStyle xGetDock(IArrangedElement element);
    internal static void xSetAnchor(IArrangedElement element, AnchorStyles value);
    internal static void xSetDock(IArrangedElement element, DockStyle value);
    private static AnchorStyles xTranslateAnchorValue(AnchorStyles anchor);
    internal static bool GetFlowBreak(IArrangedElement element);
    internal static void SetFlowBreak(IArrangedElement element, bool value);
    internal static Size GetLayoutBounds(IArrangedElement element);
    internal static void SetLayoutBounds(IArrangedElement element, Size value);
    internal static bool HasLayoutBounds(IArrangedElement element);
    internal static BitVector32 GetLayoutState(IArrangedElement element);
    internal static void SetLayoutState(IArrangedElement element, BitVector32 state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.Layout.DefaultLayout : LayoutEngine {
    internal static DefaultLayout Instance;
    private static int s_layoutInfoProperty;
    private static int s_cachedBoundsProperty;
    private static DefaultLayout();
    private static void LayoutAutoSizedControls(IArrangedElement container);
    private static Rectangle GetGrowthBounds(IArrangedElement element, Size newSize);
    private static GrowthDirection GetGrowthDirection(IArrangedElement element);
    private static Rectangle GetAnchorDestination(IArrangedElement element, Rectangle displayRect, bool measureOnly);
    private static Rectangle ComputeAnchoredBoundsV2(IArrangedElement element, Rectangle displayRectangle);
    private static Rectangle ComputeAnchoredBounds(IArrangedElement element, Rectangle displayRect, bool measureOnly);
    internal static bool UseAnchorLayoutV2(IArrangedElement element);
    private static void LayoutAnchoredControls(IArrangedElement container, bool updateAnchorInfoIfNeeded);
    private static Size LayoutDockedControls(IArrangedElement container, bool measureOnly);
    private static void TryCalculatePreferredSizeDockedControl(IArrangedElement element, Rectangle newElementBounds, bool measureOnly, Size& preferredSize, Rectangle& remainingBounds);
    private static Size GetVerticalDockedSize(IArrangedElement element, Size remainingSize, bool measureOnly);
    private static Size GetHorizontalDockedSize(IArrangedElement element, Size remainingSize, bool measureOnly);
    private static Size xGetDockedSize(IArrangedElement element, Size constraints);
    private protected virtual bool LayoutCore(IArrangedElement container, LayoutEventArgs args);
    private static bool TryCalculatePreferredSize(IArrangedElement container, bool measureOnly, Size& preferredSize);
    private static void UpdateAnchorsIteratively(Control control);
    private static void UpdateAnchorInfo(IArrangedElement element);
    internal static void UpdateAnchorInfoV2(Control control);
    public static AnchorStyles GetAnchor(IArrangedElement element);
    public static void SetAnchor(IArrangedElement element, AnchorStyles value);
    public static DockStyle GetDock(IArrangedElement element);
    public static void SetDock(IArrangedElement element, DockStyle value);
    public static void ScaleAnchorInfo(IArrangedElement element, SizeF factor);
    private static Rectangle GetCachedBounds(IArrangedElement element);
    [NullableContextAttribute("2")]
private static bool HasCachedBounds(IArrangedElement container);
    private static void ApplyCachedBounds(IArrangedElement container);
    private static void ClearCachedBounds(IArrangedElement container);
    private static void SetCachedBounds(IArrangedElement element, Rectangle bounds);
    internal static AnchorInfo GetAnchorInfo(IArrangedElement element);
    internal static void SetAnchorInfo(IArrangedElement element, AnchorInfo value);
    private protected virtual void InitLayoutCore(IArrangedElement element, BoundsSpecified specified);
    internal virtual Size GetPreferredSize(IArrangedElement container, Size proposedBounds);
    private static Size GetAnchorPreferredSize(IArrangedElement container);
    public static bool IsAnchored(AnchorStyles anchor, AnchorStyles desiredAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.Layout.FlowLayout : LayoutEngine {
    internal static FlowLayout Instance;
    private static int s_wrapContentsProperty;
    private static int s_flowDirectionProperty;
    private static FlowLayout();
    private protected virtual bool LayoutCore(IArrangedElement container, LayoutEventArgs args);
    internal virtual Size GetPreferredSize(IArrangedElement container, Size proposedConstraints);
    private static ContainerProxy CreateContainerProxy(IArrangedElement container, FlowDirection flowDirection);
    private static Size TryCalculatePreferredSize(IArrangedElement container, Rectangle displayRect, bool measureOnly);
    private static void LayoutRow(ContainerProxy containerProxy, ElementProxy elementProxy, int startIndex, int endIndex, Rectangle rowBounds);
    private static Size MeasureRow(ContainerProxy containerProxy, ElementProxy elementProxy, int startIndex, Rectangle displayRectangle, Int32& breakIndex);
    private static Size TryCalculatePreferredSizeRow(ContainerProxy containerProxy, ElementProxy elementProxy, int startIndex, int endIndex, Rectangle rowBounds, Int32& breakIndex, bool measureOnly);
    public static bool GetWrapContents(IArrangedElement container);
    public static void SetWrapContents(IArrangedElement container, bool value);
    public static FlowDirection GetFlowDirection(IArrangedElement container);
    public static void SetFlowDirection(IArrangedElement container, FlowDirection value);
    [ConditionalAttribute("DEBUG_VERIFY_ALIGNMENT")]
private static void Debug_VerifyAlignment(IArrangedElement container, FlowDirection flowDirection);
}
[NullableContextAttribute("1")]
internal interface System.Windows.Forms.Layout.IArrangedElement {
    public Rectangle Bounds { get; }
    public Rectangle DisplayRectangle { get; }
    public bool ParticipatesInLayout { get; }
    public PropertyStore Properties { get; }
    [NullableAttribute("2")]
public IArrangedElement Container { get; }
    public ArrangedElementCollection Children { get; }
    public abstract virtual Rectangle get_Bounds();
    public abstract virtual void SetBounds(Rectangle bounds, BoundsSpecified specified);
    public abstract virtual Size GetPreferredSize(Size proposedSize);
    public abstract virtual Rectangle get_DisplayRectangle();
    public abstract virtual bool get_ParticipatesInLayout();
    public abstract virtual PropertyStore get_Properties();
    public abstract virtual void PerformLayout(IArrangedElement affectedElement, string propertyName);
    [NullableContextAttribute("2")]
public abstract virtual IArrangedElement get_Container();
    public abstract virtual ArrangedElementCollection get_Children();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.Layout.LayoutEngine : object {
    internal static IArrangedElement CastToArrangedElement(object obj);
    internal virtual Size GetPreferredSize(IArrangedElement container, Size proposedConstraints);
    public virtual void InitLayout(object child, BoundsSpecified specified);
    private protected virtual void InitLayoutCore(IArrangedElement element, BoundsSpecified bounds);
    internal virtual void ProcessSuspendedLayoutEventArgs(IArrangedElement container, LayoutEventArgs args);
    public virtual bool Layout(object container, LayoutEventArgs layoutEventArgs);
    private protected virtual bool LayoutCore(IArrangedElement container, LayoutEventArgs layoutEventArgs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.Layout.LayoutTransaction : object {
    private Control _controlToLayout;
    private bool _resumeLayout;
    public LayoutTransaction(Control controlToLayout, IArrangedElement controlCausingLayout, string property);
    public LayoutTransaction(Control controlToLayout, IArrangedElement controlCausingLayout, string property, bool resumeLayout);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public static IDisposable CreateTransactionIf(bool condition, Control controlToLayout, IArrangedElement elementCausingLayout, string property);
    public static void DoLayout(IArrangedElement elementToLayout, IArrangedElement elementCausingLayout, string property);
    public static void DoLayoutIf(bool condition, IArrangedElement elementToLayout, IArrangedElement elementCausingLayout, string property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.Layout.LayoutUtils : object {
    public static Size s_maxSize;
    public static Size s_invalidSize;
    public static Rectangle s_maxRectangle;
    public static ContentAlignment AnyTop;
    public static ContentAlignment AnyBottom;
    public static ContentAlignment AnyLeft;
    public static ContentAlignment AnyRight;
    public static ContentAlignment AnyCenter;
    public static ContentAlignment AnyMiddle;
    public static AnchorStyles HorizontalAnchorStyles;
    public static AnchorStyles VerticalAnchorStyles;
    private static AnchorStyles[] s_dockingToAnchor;
    public static string TestString;
    private static LayoutUtils();
    [NullableContextAttribute("2")]
public static Size OldGetLargestStringSizeInCollection(Font font, ICollection objects);
    public static int ContentAlignmentToIndex(ContentAlignment alignment);
    private static byte xContentAlignmentToIndex(int threeBitFlag);
    public static Size ConvertZeroToUnbounded(Size size);
    public static Padding ClampNegativePaddingToZero(Padding padding);
    private static AnchorStyles GetOppositeAnchor(AnchorStyles anchor);
    public static TextImageRelation GetOppositeTextImageRelation(TextImageRelation relation);
    public static Size UnionSizes(Size a, Size b);
    public static Size IntersectSizes(Size a, Size b);
    public static bool IsIntersectHorizontally(Rectangle rect1, Rectangle rect2);
    public static bool IsIntersectVertically(Rectangle rect1, Rectangle rect2);
    internal static AnchorStyles GetUnifiedAnchor(IArrangedElement element);
    public static Rectangle AlignAndStretch(Size fitThis, Rectangle withinThis, AnchorStyles anchorStyles);
    public static Rectangle Align(Size alignThis, Rectangle withinThis, AnchorStyles anchorStyles);
    public static Rectangle Align(Size alignThis, Rectangle withinThis, ContentAlignment align);
    public static Rectangle HAlign(Size alignThis, Rectangle withinThis, AnchorStyles anchorStyles);
    private static Rectangle HAlign(Size alignThis, Rectangle withinThis, ContentAlignment align);
    public static Rectangle VAlign(Size alignThis, Rectangle withinThis, AnchorStyles anchorStyles);
    public static Rectangle VAlign(Size alignThis, Rectangle withinThis, ContentAlignment align);
    public static Size Stretch(Size stretchThis, Size withinThis, AnchorStyles anchorStyles);
    public static Rectangle InflateRect(Rectangle rect, Padding padding);
    public static Rectangle DeflateRect(Rectangle rect, Padding padding);
    public static Size AddAlignedRegion(Size textSize, Size imageSize, TextImageRelation relation);
    public static Size AddAlignedRegionCore(Size currentSize, Size contentSize, bool vertical);
    public static Padding FlipPadding(Padding padding);
    public static Point FlipPoint(Point point);
    public static Rectangle FlipRectangle(Rectangle rect);
    public static Rectangle FlipRectangleIf(bool condition, Rectangle rect);
    public static Size FlipSize(Size size);
    public static Size FlipSizeIf(bool condition, Size size);
    public static bool IsHorizontalAlignment(ContentAlignment align);
    public static bool IsHorizontalRelation(TextImageRelation relation);
    public static bool IsVerticalAlignment(ContentAlignment align);
    public static bool IsVerticalRelation(TextImageRelation relation);
    public static bool IsZeroWidthOrHeight(Rectangle rectangle);
    public static bool IsZeroWidthOrHeight(Size size);
    public static bool AreWidthAndHeightLarger(Size size1, Size size2);
    public static void SplitRegion(Rectangle bounds, Size specifiedContent, AnchorStyles region1Align, Rectangle& region1, Rectangle& region2);
    public static void ExpandRegionsToFillBounds(Rectangle bounds, AnchorStyles region1Align, Rectangle& region1, Rectangle& region2);
    public static Size SubAlignedRegion(Size currentSize, Size contentSize, TextImageRelation relation);
    public static Size SubAlignedRegionCore(Size currentSize, Size contentSize, bool vertical);
    private static Rectangle SubstituteSpecifiedBounds(Rectangle originalBounds, Rectangle substitutionBounds, AnchorStyles specified);
    public static Rectangle RTLTranslate(Rectangle bounds, Rectangle withinBounds);
}
internal class System.Windows.Forms.Layout.NullLayoutTransaction : ValueType {
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.Layout.PropertyNames : object {
    public static string Alignment;
    public static string Anchor;
    public static string AutoScroll;
    public static string AutoSize;
    public static string Appearance;
    public static string AutoEllipsis;
    public static string BorderStyle;
    public static string CellBorderStyle;
    public static string Bounds;
    public static string CheckAlign;
    public static string ChildIndex;
    public static string ColumnHeadersHeight;
    public static string ColumnHeadersVisible;
    public static string Columns;
    public static string ColumnSpan;
    public static string ColumnStyles;
    public static string Controls;
    public static string Dock;
    public static string DisplayRectangle;
    public static string DisplayStyle;
    public static string DrawMode;
    public static string DropDownButtonWidth;
    public static string FlatAppearanceBorderSize;
    public static string FlatStyle;
    public static string FlowBreak;
    public static string FlowDirection;
    public static string Font;
    public static string GripStyle;
    public static string GrowStyle;
    public static string Image;
    public static string ImageIndex;
    public static string ImageScaling;
    public static string ImageScalingSize;
    public static string ImageKey;
    public static string ImageAlign;
    public static string Items;
    public static string LayoutSettings;
    public static string LinkArea;
    public static string Links;
    public static string LayoutStyle;
    public static string Location;
    public static string Margin;
    public static string MaximumSize;
    public static string MinimumSize;
    public static string Multiline;
    public static string Orientation;
    public static string PreferredSize;
    public static string Padding;
    public static string Parent;
    public static string RightToLeft;
    public static string RightToLeftLayout;
    public static string RowHeadersVisible;
    public static string RowHeadersWidth;
    public static string Rows;
    public static string RowSpan;
    public static string RowStyles;
    public static string Renderer;
    public static string ScrollBars;
    public static string Size;
    public static string ShowDropDownArrow;
    public static string ShowImageMargin;
    public static string ShowCheckMargin;
    public static string Spring;
    public static string Style;
    public static string TableIndex;
    public static string Text;
    public static string TextAlign;
    public static string TextImageRelation;
    public static string UseCompatibleTextRendering;
    public static string Visible;
    public static string WordWrap;
    public static string WrapContents;
}
internal class System.Windows.Forms.Layout.TableLayout : LayoutEngine {
    internal static TableLayout Instance;
    private static int _containerInfoProperty;
    private static int _layoutInfoProperty;
    private static String[] _propertiesWhichInvalidateCache;
    private static TableLayout();
    private static int GetMedian(int low, int hi);
    private static void Sort(LayoutInfo[] array, IComparer`1<LayoutInfo> comparer);
    internal static TableLayoutSettings CreateSettings(IArrangedElement owner);
    internal virtual void ProcessSuspendedLayoutEventArgs(IArrangedElement container, LayoutEventArgs args);
    private protected virtual bool LayoutCore(IArrangedElement container, LayoutEventArgs args);
    internal virtual Size GetPreferredSize(IArrangedElement container, Size proposedConstraints);
    private static void EnsureRowAndColumnAssignments(IArrangedElement container, ContainerInfo containerInfo, bool doNotCache);
    private static void ExpandLastElement(ContainerInfo containerInfo, Size usedSpace, Size totalSpace);
    private static void AssignRowsAndColumns(ContainerInfo containerInfo);
    private static bool xAssignRowsAndColumns(ContainerInfo containerInfo, LayoutInfo[] childrenInfo, int maxColumns, int maxRows, TableLayoutPanelGrowStyle growStyle);
    private static LayoutInfo GetNextLayoutInfo(LayoutInfo[] layoutInfo, Int32& index, bool absolutelyPositioned);
    private static bool IsCursorPastInsertionPoint(LayoutInfo fixedLayoutInfo, int insertionRow, int insertionCol);
    private static bool IsOverlappingWithReservationGrid(LayoutInfo fixedLayoutInfo, ReservationGrid reservationGrid, int currentRow);
    private static void AdvanceUntilFits(int maxColumns, ReservationGrid reservationGrid, LayoutInfo layoutInfo, Int32& colStop);
    private static void GetColStartAndStop(int maxColumns, LayoutInfo layoutInfo, Int32& colStop);
    private static bool ScanRowForOverlap(int maxColumns, ReservationGrid reservationGrid, LayoutInfo layoutInfo, int stopCol, int rowOffset);
    private static Size ApplyStyles(ContainerInfo containerInfo, Size proposedConstraints, bool measureOnly);
    private static void InitializeStrips(Strip[] strips, IList styles);
    private static int InflateColumns(ContainerInfo containerInfo, Size proposedConstraints, bool measureOnly);
    private static int InflateRows(ContainerInfo containerInfo, Size proposedConstraints, int expandLastElementWidth, bool measureOnly);
    private static Size GetElementSize(IArrangedElement element, Size proposedConstraints);
    internal static int SumStrips(Strip[] strips, int start, int span);
    private static void DistributeSize(IList styles, Strip[] strips, int start, int stop, int min, int max, int cellBorderWidth);
    private static void xDistributeSize(IList styles, Strip[] strips, int start, int stop, int desiredLength, SizeProxy sizeProxy, int cellBorderWidth);
    private static bool IsAbsolutelySized(int index, IList styles);
    private static int DistributeStyles(int cellBorderWidth, IList styles, Strip[] strips, int maxSize, bool dontHonorConstraint);
    private static void SetElementBounds(ContainerInfo containerInfo, RectangleF displayRectF);
    internal static IArrangedElement GetControlFromPosition(IArrangedElement container, int column, int row);
    internal static TableLayoutPanelCellPosition GetPositionFromControl(IArrangedElement container, IArrangedElement child);
    internal static LayoutInfo GetLayoutInfo(IArrangedElement element);
    internal static void SetLayoutInfo(IArrangedElement element, LayoutInfo value);
    internal static bool HasCachedAssignments(ContainerInfo containerInfo);
    internal static void ClearCachedAssignments(ContainerInfo containerInfo);
    internal static ContainerInfo GetContainerInfo(IArrangedElement container);
    [ConditionalAttribute("DEBUG_LAYOUT")]
private static void Debug_VerifyAssignmentsAreCurrent(IArrangedElement container, ContainerInfo containerInfo);
    [ConditionalAttribute("DEBUG_LAYOUT")]
private static void Debug_VerifyNoOverlapping(IArrangedElement container);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [NullableContextAttribute("2")]
public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("2")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static string GetAttributeValue(XmlNode node, string attribute);
    private static int GetAttributeValue(XmlNode node, string attribute, int valueIfNotFound);
    private static void ParseControls(TableLayoutSettings settings, XmlNodeList controlXmlFragments);
    private static void ParseStyles(TableLayoutSettings settings, XmlNodeList controlXmlFragments, bool columns);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.LayoutEventArgs : EventArgs {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<IComponent> _affectedComponent;
    [CompilerGeneratedAttribute]
private string <AffectedProperty>k__BackingField;
    public IComponent AffectedComponent { get; }
    public Control AffectedControl { get; }
    public string AffectedProperty { get; }
    public LayoutEventArgs(IComponent affectedComponent, string affectedProperty);
    public LayoutEventArgs(Control affectedControl, string affectedProperty);
    public IComponent get_AffectedComponent();
    public Control get_AffectedControl();
    [CompilerGeneratedAttribute]
public string get_AffectedProperty();
}
public class System.Windows.Forms.LayoutEventHandler : MulticastDelegate {
    public LayoutEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, LayoutEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LayoutEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.LayoutSettings : object {
    [CompilerGeneratedAttribute]
private IArrangedElement <Owner>k__BackingField;
    public LayoutEngine LayoutEngine { get; }
    internal IArrangedElement Owner { get; }
    internal LayoutSettings(IArrangedElement owner);
    public virtual LayoutEngine get_LayoutEngine();
    [CompilerGeneratedAttribute]
internal IArrangedElement get_Owner();
}
public enum System.Windows.Forms.LeftRightAlignment : Enum {
    public int value__;
    public static LeftRightAlignment Left;
    public static LeftRightAlignment Right;
}
[TypeConverterAttribute("System.Windows.Forms.LinkArea/LinkAreaConverter")]
public class System.Windows.Forms.LinkArea : ValueType {
    private int start;
    private int length;
    public int Start { get; public set; }
    public int Length { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsEmpty { get; }
    public LinkArea(int start, int length);
    [IsReadOnlyAttribute]
public int get_Start();
    public void set_Start(int value);
    [IsReadOnlyAttribute]
public int get_Length();
    public void set_Length(int value);
    [IsReadOnlyAttribute]
public bool get_IsEmpty();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object o);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(LinkArea other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(LinkArea linkArea1, LinkArea linkArea2);
    public static bool op_Inequality(LinkArea linkArea1, LinkArea linkArea2);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
public enum System.Windows.Forms.LinkBehavior : Enum {
    public int value__;
    public static LinkBehavior SystemDefault;
    public static LinkBehavior AlwaysUnderline;
    public static LinkBehavior HoverUnderline;
    public static LinkBehavior NeverUnderline;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.LinkClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <LinkLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinkStart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkText>k__BackingField;
    public int LinkLength { get; }
    public int LinkStart { get; }
    public string LinkText { get; }
    public LinkClickedEventArgs(string linkText);
    public LinkClickedEventArgs(string linkText, int linkStart, int linkLength);
    [CompilerGeneratedAttribute]
public int get_LinkLength();
    [CompilerGeneratedAttribute]
public int get_LinkStart();
    [CompilerGeneratedAttribute]
public string get_LinkText();
}
public class System.Windows.Forms.LinkClickedEventHandler : MulticastDelegate {
    public LinkClickedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, LinkClickedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LinkClickedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.LinkConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("LinkClicked")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionLinkLabel")]
public class System.Windows.Forms.LinkLabel : Label {
    private static object s_eventLinkClicked;
    private static Color s_iedisabledLinkColor;
    private static LinkComparer s_linkComparer;
    private DialogResult _dialogResult;
    private Color _linkColor;
    private Color _activeLinkColor;
    private Color _visitedLinkColor;
    private Color _disabledLinkColor;
    [NullableAttribute("2")]
private Font _linkFont;
    [NullableAttribute("2")]
private Font _hoverLinkFont;
    private bool _textLayoutValid;
    private bool _receivedDoubleClick;
    private List`1<Link> _links;
    [NullableAttribute("2")]
private Link _focusLink;
    [NullableAttribute("2")]
private LinkCollection _linkCollection;
    [NullableAttribute("2")]
private Region _textRegion;
    [NullableAttribute("2")]
private Cursor _overrideCursor;
    private bool _processingOnGotFocus;
    private LinkBehavior _linkBehavior;
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelActiveLinkColorDescr")]
public Color ActiveLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelDisabledLinkColorDescr")]
public Color DisabledLinkColor { get; public set; }
    [NullableAttribute("2")]
private Link FocusLink { get; private set; }
    private static Color IELinkColor { get; }
    private static Color IEActiveLinkColor { get; }
    private static Color IEVisitedLinkColor { get; }
    private Color IEDisabledLinkColor { get; }
    private Rectangle ClientRectWithPadding { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FlatStyle FlatStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.LinkAreaEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("LinkLabelLinkAreaDescr")]
public LinkArea LinkArea { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("LinkLabelLinkBehaviorDescr")]
public LinkBehavior LinkBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelLinkColorDescr")]
public Color LinkColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public LinkCollection Links { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelLinkVisitedDescr")]
public bool LinkVisited { get; public set; }
    internal bool OwnerDraw { get; }
    [NullableAttribute("2")]
protected Cursor OverrideCursor { get; protected set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool TabStop { get; public set; }
    [RefreshPropertiesAttribute("2")]
public string Text { get; public set; }
    [RefreshPropertiesAttribute("2")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelVisitedLinkColorDescr")]
public Color VisitedLinkColor { get; public set; }
    internal bool CanUseTextRenderer { get; }
    private DialogResult System.Windows.Forms.IButtonControl.DialogResult { get; private set; }
    [RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    internal bool SupportsUiaProviders { get; }
    private static LinkLabel();
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public Color get_DisabledLinkColor();
    public void set_DisabledLinkColor(Color value);
    [NullableContextAttribute("2")]
private Link get_FocusLink();
    [NullableContextAttribute("2")]
private void set_FocusLink(Link value);
    private static Color get_IELinkColor();
    private static Color get_IEActiveLinkColor();
    private static Color get_IEVisitedLinkColor();
    private Color get_IEDisabledLinkColor();
    private Rectangle get_ClientRectWithPadding();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public LinkArea get_LinkArea();
    public void set_LinkArea(LinkArea value);
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public LinkCollection get_Links();
    public bool get_LinkVisited();
    public void set_LinkVisited(bool value);
    internal virtual bool get_OwnerDraw();
    [NullableContextAttribute("2")]
protected Cursor get_OverrideCursor();
    [NullableContextAttribute("2")]
protected void set_OverrideCursor(Cursor value);
    [NullableContextAttribute("2")]
public void add_TabStopChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TabStopChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    [NullableContextAttribute("2")]
public void add_LinkClicked(LinkLabelLinkClickedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_LinkClicked(LinkLabelLinkClickedEventHandler value);
    internal static Rectangle CalcTextRenderBounds(Rectangle textRect, Rectangle clientRect, ContentAlignment align);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal virtual void ReleaseUiaProvider(HWND handle);
    protected virtual void CreateHandle();
    internal virtual bool get_CanUseTextRenderer();
    internal virtual bool UseGDIMeasuring();
    private static int ConvertToCharIndex(int index, string text);
    private void EnsureRun(Graphics g);
    internal virtual StringFormat CreateStringFormat();
    private CharacterRange[] AdjustCharacterRangesForSurrogateChars();
    private bool IsOneLink();
    [NullableContextAttribute("2")]
protected Link PointInLink(int x, int y);
    [NullableContextAttribute("2")]
private void InvalidateLink(Link link);
    private void InvalidateLinkFonts();
    private void InvalidateTextLayout();
    private bool LinkInText(int start, int length);
    private sealed virtual override DialogResult System.Windows.Forms.IButtonControl.get_DialogResult();
    private sealed virtual override void System.Windows.Forms.IButtonControl.set_DialogResult(DialogResult value);
    private sealed virtual override void System.Windows.Forms.IButtonControl.NotifyDefault(bool value);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnLinkClicked(LinkLabelLinkClickedEventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnAutoSizeChanged(EventArgs e);
    internal virtual void OnAutoEllipsisChanged();
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    private void PaintLink(PaintEventArgs e, Link link, SolidBrush foreBrush, SolidBrush linkBrush, Font linkFont, Font hoverLinkFont, bool optimizeBackgroundRendering, RectangleF finalrect);
    private void PaintLinkBackground(Graphics g);
    private sealed virtual override void System.Windows.Forms.IButtonControl.PerformClick();
    protected virtual bool ProcessDialogKey(Keys keyData);
    private bool FocusNextLink(bool forward);
    private int GetNextLinkIndex(int focusIndex, bool forward);
    private void ResetLinkArea();
    internal void ResetActiveLinkColor();
    internal void ResetDisabledLinkColor();
    internal void ResetLinkColor();
    private void ResetVisitedLinkColor();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void Select(bool directed, bool forward);
    internal bool ShouldSerializeActiveLinkColor();
    internal bool ShouldSerializeDisabledLinkColor();
    private bool ShouldSerializeLinkArea();
    internal bool ShouldSerializeLinkColor();
    private bool ShouldSerializeUseCompatibleTextRendering();
    private bool ShouldSerializeVisitedLinkColor();
    private void UpdateAccessibilityLink(Link focusLink);
    private void ValidateNoOverlappingLinks();
    private void UpdateSelectability();
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    internal virtual bool get_SupportsUiaProviders();
    private void WmSetCursor(Message& m);
    protected virtual void WndProc(Message& msg);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.LinkLabelLinkClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Link <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButtons <Button>k__BackingField;
    public Link Link { get; }
    public MouseButtons Button { get; }
    public LinkLabelLinkClickedEventArgs(Link link);
    public LinkLabelLinkClickedEventArgs(Link link, MouseButtons button);
    [CompilerGeneratedAttribute]
public Link get_Link();
    [CompilerGeneratedAttribute]
public MouseButtons get_Button();
}
public class System.Windows.Forms.LinkLabelLinkClickedEventHandler : MulticastDelegate {
    public LinkLabelLinkClickedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, LinkLabelLinkClickedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LinkLabelLinkClickedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.LinkState : Enum {
    public int value__;
    public static LinkState Normal;
    public static LinkState Hover;
    public static LinkState Active;
    public static LinkState Visited;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.LinkUtilities : object {
    private static Color s_ielinkColor;
    private static Color s_ieactiveLinkColor;
    private static Color s_ievisitedLinkColor;
    private static string IESettingsRegPath;
    public static string IEMainRegPath;
    private static string IEAnchorColor;
    private static string IEAnchorColorVisited;
    private static string IEAnchorColorHover;
    public static Color IELinkColor { get; }
    public static Color IEActiveLinkColor { get; }
    public static Color IEVisitedLinkColor { get; }
    private static LinkUtilities();
    private static Color GetIEColor(string name);
    public static Color get_IELinkColor();
    public static Color get_IEActiveLinkColor();
    public static Color get_IEVisitedLinkColor();
    public static Color GetVisitedLinkColor();
    public static LinkBehavior GetIELinkBehavior();
    public static void EnsureLinkFonts(Font baseFont, LinkBehavior link, Font& linkFont, Font& hoverLinkFont, bool isActive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListBindingConverter : TypeConverter {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Type[] s_ctorTypes;
    [NullableAttribute("2")]
private static String[] s_ctorParamProps;
    private static Type[] ConstructorParamaterTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] ConstructorParameterProperties { get; }
    private static Type[] get_ConstructorParamaterTypes();
    private static String[] get_ConstructorParameterProperties();
    [NullableContextAttribute("2")]
public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    [NullableContextAttribute("2")]
public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    private static InstanceDescriptor GetInstanceDescriptorFromValues(Binding b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ListBindingHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Attribute[] browsableAttribute;
    private static Attribute[] BrowsableAttributeList { get; }
    private static Attribute[] get_BrowsableAttributeList();
    [NullableContextAttribute("2")]
public static object GetList(object list);
    [NullableContextAttribute("2")]
public static object GetList(object dataSource, string dataMember);
    public static string GetListName(object list, PropertyDescriptor[] listAccessors);
    public static PropertyDescriptorCollection GetListItemProperties(object list);
    public static PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    [NullableContextAttribute("2")]
public static PropertyDescriptorCollection GetListItemProperties(object dataSource, string dataMember, PropertyDescriptor[] listAccessors);
    [NullableContextAttribute("2")]
public static Type GetListItemType(object list);
    [ExcludeFromCodeCoverageAttribute]
private static object CreateInstanceOfType(Type type);
    [NullableContextAttribute("2")]
public static Type GetListItemType(object dataSource, string dataMember);
    private static string GetListNameFromType(Type type);
    private static PropertyDescriptorCollection GetListItemPropertiesByType(Type type, PropertyDescriptor[] listAccessors, int startIndex);
    private static PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable iEnumerable, PropertyDescriptor[] listAccessors, int startIndex);
    private static Type GetListItemTypeByEnumerable(IEnumerable iEnumerable);
    private static PropertyDescriptorCollection GetListItemPropertiesByInstance(object target, PropertyDescriptor[] listAccessors, int startIndex);
    private static bool IsListBasedType(Type type);
    private static PropertyInfo GetTypedIndexer(Type type);
    private static PropertyDescriptorCollection GetListItemPropertiesByType(Type type);
    private static PropertyDescriptorCollection GetListItemPropertiesByEnumerable(IEnumerable enumerable);
    private static object GetFirstItemByEnumerable(IEnumerable enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DefaultPropertyAttribute("Items")]
[DefaultBindingPropertyAttribute("SelectedValue")]
[SRDescriptionAttribute("DescriptionListBox")]
public class System.Windows.Forms.ListBox : ListControl {
    public static int NoMatches;
    public static int DefaultItemHeight;
    private static object EVENT_SELECTEDINDEXCHANGED;
    private static object EVENT_DRAWITEM;
    private static object EVENT_MEASUREITEM;
    [NullableAttribute("2")]
private SelectedObjectCollection _selectedItems;
    [NullableAttribute("2")]
private SelectedIndexCollection _selectedIndices;
    [NullableAttribute("2")]
private ObjectCollection _itemsCollection;
    private int _itemHeight;
    private int _columnWidth;
    private static int s_defaultListBoxItemHeight;
    private int _requestedHeight;
    private int _topIndex;
    private int _horizontalExtent;
    private int _maxWidth;
    private int _updateCount;
    private bool _sorted;
    private bool _scrollAlwaysVisible;
    private bool _integralHeight;
    private bool _integralHeightAdjust;
    private bool _multiColumn;
    private bool _horizontalScrollbar;
    private bool _useTabStops;
    private bool _useCustomTabOffsets;
    private bool _fontIsChanged;
    private bool _doubleClickFired;
    private bool _selectedValueChangedFired;
    private DrawMode _drawMode;
    private BorderStyle _borderStyle;
    private SelectionMode _selectionMode;
    private SelectionMode _cachedSelectionMode;
    private bool _selectionModeChanging;
    [NullableAttribute("2")]
private AccessibleObject _focusedItem;
    private int _itemsCount;
    [NullableAttribute("2")]
private IntegerCollection _customTabOffsets;
    private static int defaultListItemStartPos;
    private static int defaultListItemBorderHeight;
    private static int defaultListItemPaddingBuffer;
    internal int scaledListItemStartPosition;
    internal int scaledListItemBordersHeight;
    internal int scaledListItemPaddingBuffer;
    public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("ListBoxBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("ListBoxColumnWidthDescr")]
public int ColumnWidth { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
public bool UseCustomTabOffsets { get; public set; }
    private static int DefaultListBoxItemHeight { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListBoxDrawModeDescr")]
[RefreshPropertiesAttribute("2")]
public DrawMode DrawMode { get; public set; }
    internal int FocusedIndex { get; }
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxHorizontalExtentDescr")]
public int HorizontalExtent { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxHorizontalScrollbarDescr")]
public bool HorizontalScrollbar { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxIntegralHeightDescr")]
[RefreshPropertiesAttribute("2")]
public bool IntegralHeight { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxItemHeightDescr")]
[RefreshPropertiesAttribute("2")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public ObjectCollection Items { get; }
    internal int MaxItemWidth { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListBoxMultiColumnDescr")]
public bool MultiColumn { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxPreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxScrollIsVisibleDescr")]
public bool ScrollAlwaysVisible { get; public set; }
    protected bool AllowSelection { get; }
    [BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedIndicesDescr")]
public SelectedIndexCollection SelectedIndices { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedItemsDescr")]
public SelectedObjectCollection SelectedItems { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListBoxSelectionModeDescr")]
public SelectionMode SelectionMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListBoxSortedDescr")]
public bool Sorted { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxTopIndexDescr")]
public int TopIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListBoxUseTabStopsDescr")]
public bool UseTabStops { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ListBoxCustomTabOffsetsDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public IntegerCollection CustomTabOffsets { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private static ListBox();
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    private void PrepareForDrawing();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public int get_ColumnWidth();
    public void set_ColumnWidth(int value);
    protected virtual CreateParams get_CreateParams();
    public bool get_UseCustomTabOffsets();
    public void set_UseCustomTabOffsets(bool value);
    private static int get_DefaultListBoxItemHeight();
    protected virtual Size get_DefaultSize();
    public virtual DrawMode get_DrawMode();
    public virtual void set_DrawMode(DrawMode value);
    internal int get_FocusedIndex();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public int get_HorizontalExtent();
    public void set_HorizontalExtent(int value);
    public bool get_HorizontalScrollbar();
    public void set_HorizontalScrollbar(bool value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public virtual int get_ItemHeight();
    public virtual void set_ItemHeight(int value);
    public ObjectCollection get_Items();
    private bool ItemsCountIsChanged();
    internal virtual int get_MaxItemWidth();
    public bool get_MultiColumn();
    public void set_MultiColumn(bool value);
    public int get_PreferredHeight();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    public bool get_ScrollAlwaysVisible();
    public void set_ScrollAlwaysVisible(bool value);
    protected virtual bool get_AllowSelection();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public SelectedIndexCollection get_SelectedIndices();
    [NullableContextAttribute("2")]
public object get_SelectedItem();
    [NullableContextAttribute("2")]
public void set_SelectedItem(object value);
    public SelectedObjectCollection get_SelectedItems();
    public virtual SelectionMode get_SelectionMode();
    public virtual void set_SelectionMode(SelectionMode value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    internal virtual bool get_SupportsUiaProviders();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public void add_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextChanged(EventHandler value);
    public int get_TopIndex();
    public void set_TopIndex(int value);
    public bool get_UseTabStops();
    public void set_UseTabStops(bool value);
    public IntegerCollection get_CustomTabOffsets();
    [ObsoleteAttribute("This method has been deprecated.  There is no replacement.  https://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void AddItemsCore(Object[] value);
    [NullableContextAttribute("2")]
public void add_Click(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Click(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseClick(MouseEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public void add_PaddingChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_PaddingChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void add_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_MeasureItem(MeasureItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MeasureItem(MeasureItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_SelectedIndexChanged(EventHandler value);
    public void BeginUpdate();
    private void CheckIndex(int index);
    private void CheckNoDataSource();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ObjectCollection CreateItemCollection();
    internal virtual int ComputeMaxItemWidth(int oldMax);
    private void ClearListItemAccessibleObjects();
    public void ClearSelected();
    public void EndUpdate();
    public int FindString(string s);
    public int FindString(string s, int startIndex);
    public int FindStringExact(string s);
    public int FindStringExact(string s, int startIndex);
    private bool FocusedItemIsChanged();
    public int GetItemHeight(int index);
    public Rectangle GetItemRectangle(int index);
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    public bool GetSelected(int index);
    private bool GetSelectedInternal(int index);
    public int IndexFromPoint(Point p);
    public int IndexFromPoint(int x, int y);
    private int NativeAdd(object item);
    private void NativeClear();
    [SkipLocalsInitAttribute]
internal string NativeGetItemText(int index);
    private int NativeInsert(int index, object item);
    private void NativeRemoveAt(int index);
    private void NativeSetSelected(int index, bool value);
    private void NativeUpdateSelection();
    protected virtual void OnChangeUICues(UICuesEventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedValueChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnDisplayMemberChanged(EventArgs e);
    public virtual void Refresh();
    protected virtual void RefreshItems();
    protected virtual void RefreshItem(int index);
    internal virtual void ReleaseUiaProvider(HWND handle);
    private void RemoveListItemAccessibleObjectAt(int index);
    public virtual void ResetBackColor();
    public virtual void ResetForeColor();
    private void ResetItemHeight();
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void SetItemsCore(IList value);
    protected virtual void SetItemCore(int index, object value);
    public void SetSelected(int index, bool value);
    private bool ShouldSerializeItemHeight();
    protected virtual void Sort();
    public virtual string ToString();
    private void UpdateFontCache();
    private void UpdateHorizontalExtent();
    private void UpdateMaxItemWidth(object item, bool removing);
    private void UpdateCustomTabOffsets();
    private void WmPrint(Message& m);
    protected virtual void WmReflectCommand(Message& m);
    private void WmReflectDrawItem(Message& m);
    private void WmReflectMeasureItem(Message& m);
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[LookupBindingPropertiesAttribute("DataSource", "DisplayMember", "ValueMember", "SelectedValue")]
public abstract class System.Windows.Forms.ListControl : Control {
    [NullableAttribute("1")]
private static object s_dataSourceChangedEvent;
    [NullableAttribute("1")]
private static object s_displayMemberChangedEvent;
    [NullableAttribute("1")]
private static object s_valueMemberChangedEvent;
    [NullableAttribute("1")]
private static object s_selectedValueChangedEvent;
    [NullableAttribute("1")]
private static object s_formatInfoChangedEvent;
    [NullableAttribute("1")]
private static object s_formatStringChangedEvent;
    [NullableAttribute("1")]
private static object s_formattingEnabledChangedEvent;
    [NullableAttribute("1")]
private static object s_formatEvent;
    private object _dataSource;
    private CurrencyManager _dataManager;
    private BindingMemberInfo _displayMember;
    private BindingMemberInfo _valueMember;
    [NullableAttribute("1")]
private string _formatString;
    private IFormatProvider _formatInfo;
    private bool _formattingEnabled;
    private TypeConverter _displayMemberConverter;
    private static TypeConverter _stringTypeConverter;
    private bool _isDataSourceInitialized;
    private bool _isDataSourceInitEventHooked;
    private bool _inSetDataConnection;
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("ListControlDataSourceDescr")]
public object DataSource { get; public set; }
    protected CurrencyManager DataManager { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListControlDisplayMemberDescr")]
public string DisplayMember { get; public set; }
    private TypeConverter DisplayMemberConverter { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("")]
public IFormatProvider FormatInfo { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListControlFormatStringDescr")]
[EditorAttribute("System.Windows.Forms.Design.FormatStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public string FormatString { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListControlFormattingEnabledDescr")]
public bool FormattingEnabled { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListControlValueMemberDescr")]
public string ValueMember { get; public set; }
    protected bool AllowSelection { get; }
    public int SelectedIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListControlSelectedValueDescr")]
[BindableAttribute("True")]
public object SelectedValue { get; public set; }
    private protected bool BindingFieldEmpty { get; }
    private static ListControl();
    public object get_DataSource();
    public void set_DataSource(object value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    protected CurrencyManager get_DataManager();
    [NullableContextAttribute("1")]
public string get_DisplayMember();
    [NullableContextAttribute("1")]
public void set_DisplayMember(string value);
    public void add_DisplayMemberChanged(EventHandler value);
    public void remove_DisplayMemberChanged(EventHandler value);
    private TypeConverter get_DisplayMemberConverter();
    public void add_Format(ListControlConvertEventHandler value);
    public void remove_Format(ListControlConvertEventHandler value);
    public IFormatProvider get_FormatInfo();
    public void set_FormatInfo(IFormatProvider value);
    public void add_FormatInfoChanged(EventHandler value);
    public void remove_FormatInfoChanged(EventHandler value);
    [NullableContextAttribute("1")]
public string get_FormatString();
    [NullableContextAttribute("1")]
public void set_FormatString(string value);
    public void add_FormatStringChanged(EventHandler value);
    public void remove_FormatStringChanged(EventHandler value);
    public bool get_FormattingEnabled();
    public void set_FormattingEnabled(bool value);
    public void add_FormattingEnabledChanged(EventHandler value);
    public void remove_FormattingEnabledChanged(EventHandler value);
    [NullableContextAttribute("1")]
private static bool BindingMemberInfoInDataManager(CurrencyManager dataManager, BindingMemberInfo bindingMemberInfo);
    [NullableContextAttribute("1")]
public string get_ValueMember();
    [NullableContextAttribute("1")]
public void set_ValueMember(string value);
    public void add_ValueMemberChanged(EventHandler value);
    public void remove_ValueMemberChanged(EventHandler value);
    protected virtual bool get_AllowSelection();
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    public object get_SelectedValue();
    public void set_SelectedValue(object value);
    public void add_SelectedValueChanged(EventHandler value);
    public void remove_SelectedValueChanged(EventHandler value);
    [NullableContextAttribute("1")]
private void DataManager_PositionChanged(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void DataManager_ItemChanged(object sender, ItemChangedEventArgs e);
    protected object FilterItemOnProperty(object item);
    protected object FilterItemOnProperty(object item, string field);
    private protected bool get_BindingFieldEmpty();
    private protected int FindStringInternal(string str, IList items, int startIndex, bool exact, bool ignoreCase);
    public string GetItemText(object item);
    protected virtual bool IsInputKey(Keys keyData);
    [NullableContextAttribute("1")]
protected virtual void OnBindingContextChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDataSourceChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDisplayMemberChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFormat(ListControlConvertEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFormatInfoChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFormatStringChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFormattingEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSelectedIndexChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnValueMemberChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSelectedValueChanged(EventArgs e);
    protected abstract virtual void RefreshItem(int index);
    protected virtual void RefreshItems();
    [NullableContextAttribute("1")]
private void DataSourceDisposed(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void DataSourceInitialized(object sender, EventArgs e);
    private void SetDataConnection(object newDataSource, BindingMemberInfo newDisplayMember, bool force);
    private void UnwireDataSource();
    private void WireDataSource();
    [NullableContextAttribute("1")]
protected abstract virtual void SetItemsCore(IList items);
    [NullableContextAttribute("1")]
protected virtual void SetItemCore(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListControlConvertEventArgs : ConvertEventArgs {
    [CompilerGeneratedAttribute]
private object <ListItem>k__BackingField;
    public object ListItem { get; }
    public ListControlConvertEventArgs(object value, Type desiredType, object listItem);
    [CompilerGeneratedAttribute]
public object get_ListItem();
}
public class System.Windows.Forms.ListControlConvertEventHandler : MulticastDelegate {
    public ListControlConvertEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ListControlConvertEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListControlConvertEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("CollectionChanged")]
internal class System.Windows.Forms.ListManagerBindingsCollection : BindingsCollection {
    private BindingManagerBase _bindingManagerBase;
    internal ListManagerBindingsCollection(BindingManagerBase bindingManagerBase);
    protected virtual void AddCore(Binding dataBinding);
    protected virtual void ClearCore();
    protected virtual void RemoveCore(Binding dataBinding);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Items")]
[DefaultEventAttribute("SelectedIndexChanged")]
[SRDescriptionAttribute("DescriptionListView")]
public class System.Windows.Forms.ListView : Control {
    private static int MASK_HITTESTFLAG;
    [NullableAttribute("1")]
private static object EVENT_CACHEVIRTUALITEMS;
    [NullableAttribute("1")]
private static object EVENT_COLUMNREORDERED;
    [NullableAttribute("1")]
private static object EVENT_COLUMNWIDTHCHANGED;
    [NullableAttribute("1")]
private static object EVENT_COLUMNWIDTHCHANGING;
    [NullableAttribute("1")]
private static object EVENT_DRAWCOLUMNHEADER;
    [NullableAttribute("1")]
private static object EVENT_DRAWITEM;
    [NullableAttribute("1")]
private static object EVENT_DRAWSUBITEM;
    [NullableAttribute("1")]
private static object EVENT_ITEMSELECTIONCHANGED;
    [NullableAttribute("1")]
private static object EVENT_RETRIEVEVIRTUALITEM;
    [NullableAttribute("1")]
private static object EVENT_SEARCHFORVIRTUALITEM;
    [NullableAttribute("1")]
private static object EVENT_SELECTEDINDEXCHANGED;
    [NullableAttribute("1")]
private static object EVENT_VIRTUALITEMSSELECTIONRANGECHANGED;
    [NullableAttribute("1")]
private static object EVENT_RIGHTTOLEFTLAYOUTCHANGED;
    [NullableAttribute("1")]
private static object EVENT_GROUPCOLLAPSEDSTATECHANGED;
    [NullableAttribute("1")]
private static object EVENT_GROUPTASKLINKCLICK;
    private ItemActivation _activation;
    private ListViewAlignment _alignStyle;
    private BorderStyle _borderStyle;
    private ColumnHeaderStyle _headerStyle;
    private SortOrder _sorting;
    private View _viewStyle;
    private string _toolTipCaption;
    private static int LISTVIEWSTATE_ownerDraw;
    private static int LISTVIEWSTATE_allowColumnReorder;
    private static int LISTVIEWSTATE_autoArrange;
    private static int LISTVIEWSTATE_checkBoxes;
    private static int LISTVIEWSTATE_fullRowSelect;
    private static int LISTVIEWSTATE_gridLines;
    private static int LISTVIEWSTATE_hideSelection;
    private static int LISTVIEWSTATE_hotTracking;
    private static int LISTVIEWSTATE_labelEdit;
    private static int LISTVIEWSTATE_labelWrap;
    private static int LISTVIEWSTATE_multiSelect;
    private static int LISTVIEWSTATE_scrollable;
    private static int LISTVIEWSTATE_hoverSelection;
    private static int LISTVIEWSTATE_nonclickHdr;
    private static int LISTVIEWSTATE_inLabelEdit;
    private static int LISTVIEWSTATE_showItemToolTips;
    private static int LISTVIEWSTATE_backgroundImageTiled;
    private static int LISTVIEWSTATE_columnClicked;
    private static int LISTVIEWSTATE_doubleclickFired;
    private static int LISTVIEWSTATE_mouseUpFired;
    private static int LISTVIEWSTATE_expectingMouseUp;
    private static int LISTVIEWSTATE_showGroups;
    private static int LISTVIEWSTATE_handleDestroyed;
    private static int LISTVIEWSTATE_virtualMode;
    private static int LISTVIEWSTATE_headerControlTracking;
    private static int LISTVIEWSTATE_itemCollectionChangedInMouseDown;
    private static int LISTVIEWSTATE_flipViewToLargeIconAndSmallIcon;
    private static int LISTVIEWSTATE_headerDividerDblClick;
    private static int LISTVIEWSTATE_columnResizeCancelled;
    private static int LISTVIEWSTATE1_insertingItemsNatively;
    private static int LISTVIEWSTATE1_cancelledColumnWidthChanging;
    private static int LISTVIEWSTATE1_disposingImageLists;
    private static int LISTVIEWSTATE1_useCompatibleStateImageBehavior;
    private static int LISTVIEWSTATE1_selectedIndexChangedSkipped;
    private static int LISTVIEWSTATE1_clearingInnerListOnDispose;
    private static int LVLABELEDITTIMER;
    private static int LVTOOLTIPTRACKING;
    private static int MAXTILECOLUMNS;
    private BitVector32 _listViewState;
    private BitVector32 _listViewState1;
    private Color _odCacheForeColor;
    private Color _odCacheBackColor;
    [NullableAttribute("1")]
private Font _odCacheFont;
    private HFONT _odCacheFontHandle;
    private FontHandleWrapper _odCacheFontHandleWrapper;
    private ImageList _imageListLarge;
    private ImageList _imageListSmall;
    private ImageList _imageListState;
    private ImageList _imageListGroup;
    private MouseButtons _downButton;
    private int _itemCount;
    private int _columnIndex;
    private ListViewItem _selectedItem;
    private int _topIndex;
    private bool _hoveredAlready;
    private bool _rightToLeftLayout;
    private int _virtualListSize;
    private ListViewGroup _defaultGroup;
    private ListViewGroup _focusedGroup;
    [NullableAttribute("1")]
private Dictionary`2<int, ListViewItem> _listItemsTable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ListViewItem> _listViewItems;
    private Size _tileSize;
    private static int PropDelayedUpdateItems;
    private int _updateCounter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ColumnHeader[] _columnHeaders;
    [NullableAttribute("1")]
private ListViewItemCollection _listItemCollection;
    [NullableAttribute("1")]
private ColumnHeaderCollection _columnHeaderCollection;
    private CheckedIndexCollection _checkedIndexCollection;
    private CheckedListViewItemCollection _checkedListViewItemCollection;
    private SelectedListViewItemCollection _selectedListViewItemCollection;
    private SelectedIndexCollection _selectedIndexCollection;
    private ListViewGroupCollection _groups;
    private ListViewInsertionMark _insertionMark;
    private LabelEditEventHandler _onAfterLabelEdit;
    private LabelEditEventHandler _onBeforeLabelEdit;
    private ColumnClickEventHandler _onColumnClick;
    private EventHandler _onItemActivate;
    private ItemCheckedEventHandler _onItemChecked;
    private ItemDragEventHandler _onItemDrag;
    private ItemCheckEventHandler _onItemCheck;
    private ListViewItemMouseHoverEventHandler _onItemMouseHover;
    private int _nextID;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ListViewItem> _savedSelectedItems;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ListViewItem> _savedCheckedItems;
    private IComparer _listItemSorter;
    private ListViewItem _prevHoveredItem;
    private bool _blockLabelEdit;
    private ListViewLabelEditNativeWindow _labelEdit;
    [NullableAttribute("1")]
private string _backgroundImageFileName;
    private int _bkImgFileNamesCount;
    private String[] _bkImgFileNames;
    private static int BKIMGARRAYSIZE;
    private ColumnHeader _columnHeaderClicked;
    private int _columnHeaderClickedWidth;
    private int _newWidthForColumnWidthChangingCancelled;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ToolTip <KeyboardToolTip>k__BackingField;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewActivationDescr")]
public ItemActivation Activation { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListViewAlignmentDescr")]
public ListViewAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewAllowColumnReorderDescr")]
public bool AllowColumnReorder { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewAutoArrangeDescr")]
public bool AutoArrange { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewBackgroundImageTiledDescr")]
public bool BackgroundImageTiled { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("borderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewCheckBoxesDescr")]
public bool CheckBoxes { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedIndexCollection CheckedIndices { get; }
    [NullableAttribute("1")]
internal ToolTip KeyboardToolTip { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedListViewItemCollection CheckedItems { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListViewColumnsDescr")]
[LocalizableAttribute("True")]
[MergablePropertyAttribute("False")]
public ColumnHeaderCollection Columns { get; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    [NullableAttribute("1")]
internal ListViewGroup DefaultGroup { get; }
    protected Size DefaultSize { get; }
    protected bool DoubleBuffered { get; protected set; }
    internal bool ExpectingMouseUp { get; }
    internal ListViewGroup FocusedGroup { get; internal set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewFocusedItemDescr")]
public ListViewItem FocusedItem { get; public set; }
    public Color ForeColor { get; public set; }
    private bool FlipViewToLargeIconAndSmallIcon { get; private set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewFullRowSelectDescr")]
public bool FullRowSelect { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewGridLinesDescr")]
public bool GridLines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewGroupImageListDescr")]
public ImageList GroupImageList { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListViewGroupsDescr")]
[MergablePropertyAttribute("False")]
public ListViewGroupCollection Groups { get; }
    internal bool GroupsDisplayed { get; }
    internal bool GroupsEnabled { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewHeaderStyleDescr")]
public ColumnHeaderStyle HeaderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewHideSelectionDescr")]
public bool HideSelection { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewHotTrackingDescr")]
public bool HotTracking { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewHoverSelectDescr")]
public bool HoverSelection { get; public set; }
    internal bool InsertingItemsNatively { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewInsertionMarkDescr")]
public ListViewInsertionMark InsertionMark { get; }
    private bool ItemCollectionChangedInMouseDown { get; private set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListViewItemsDescr")]
[MergablePropertyAttribute("False")]
public ListViewItemCollection Items { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewLabelEditDescr")]
public bool LabelEdit { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListViewLabelWrapDescr")]
public bool LabelWrap { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewLargeImageListDescr")]
public ImageList LargeImageList { get; public set; }
    internal bool ListViewHandleDestroyed { get; internal set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewItemSorterDescr")]
public IComparer ListViewItemSorter { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewMultiSelectDescr")]
public bool MultiSelect { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewOwnerDrawDescr")]
public bool OwnerDraw { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewScrollableDescr")]
public bool Scrollable { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SelectedIndexCollection SelectedIndices { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewSelectedItemsDescr")]
public SelectedListViewItemCollection SelectedItems { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewShowGroupsDescr")]
public bool ShowGroups { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewSmallImageListDescr")]
public ImageList SmallImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewShowItemToolTipsDescr")]
public bool ShowItemToolTips { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewSortingDescr")]
public SortOrder Sorting { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewStateImageListDescr")]
public ImageList StateImageList { get; public set; }
    internal bool SupportsListViewSubItems { get; }
    internal bool SupportsUiaProviders { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("ListViewTileSizeDescr")]
public Size TileSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewTopItemDescr")]
public ListViewItem TopItem { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("True")]
public bool UseCompatibleStateImageBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewViewDescr")]
public View View { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ListViewVirtualListSizeDescr")]
public int VirtualListSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ListViewVirtualModeDescr")]
public bool VirtualMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private bool ClearingInnerListOnDispose { get; private set; }
    private static ListView();
    public ItemActivation get_Activation();
    public void set_Activation(ItemActivation value);
    public ListViewAlignment get_Alignment();
    public void set_Alignment(ListViewAlignment value);
    public bool get_AllowColumnReorder();
    public void set_AllowColumnReorder(bool value);
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public bool get_BackgroundImageTiled();
    public void set_BackgroundImageTiled(bool value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public bool get_CheckBoxes();
    public void set_CheckBoxes(bool value);
    [NullableContextAttribute("1")]
public CheckedIndexCollection get_CheckedIndices();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal ToolTip get_KeyboardToolTip();
    [NullableContextAttribute("1")]
public CheckedListViewItemCollection get_CheckedItems();
    [NullableContextAttribute("1")]
public ColumnHeaderCollection get_Columns();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    [NullableContextAttribute("1")]
internal ListViewGroup get_DefaultGroup();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    internal bool get_ExpectingMouseUp();
    internal ListViewGroup get_FocusedGroup();
    internal void set_FocusedGroup(ListViewGroup value);
    public ListViewItem get_FocusedItem();
    public void set_FocusedItem(ListViewItem value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    private bool get_FlipViewToLargeIconAndSmallIcon();
    private void set_FlipViewToLargeIconAndSmallIcon(bool value);
    public bool get_FullRowSelect();
    public void set_FullRowSelect(bool value);
    public bool get_GridLines();
    public void set_GridLines(bool value);
    public ImageList get_GroupImageList();
    public void set_GroupImageList(ImageList value);
    [NullableContextAttribute("1")]
public ListViewGroupCollection get_Groups();
    internal bool get_GroupsDisplayed();
    internal bool get_GroupsEnabled();
    public ColumnHeaderStyle get_HeaderStyle();
    public void set_HeaderStyle(ColumnHeaderStyle value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public bool get_HotTracking();
    public void set_HotTracking(bool value);
    public bool get_HoverSelection();
    public void set_HoverSelection(bool value);
    internal bool get_InsertingItemsNatively();
    [NullableContextAttribute("1")]
public ListViewInsertionMark get_InsertionMark();
    private bool get_ItemCollectionChangedInMouseDown();
    private void set_ItemCollectionChangedInMouseDown(bool value);
    [NullableContextAttribute("1")]
public ListViewItemCollection get_Items();
    public bool get_LabelEdit();
    public void set_LabelEdit(bool value);
    public bool get_LabelWrap();
    public void set_LabelWrap(bool value);
    public ImageList get_LargeImageList();
    public void set_LargeImageList(ImageList value);
    internal bool get_ListViewHandleDestroyed();
    internal void set_ListViewHandleDestroyed(bool value);
    public IComparer get_ListViewItemSorter();
    public void set_ListViewItemSorter(IComparer value);
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public bool get_OwnerDraw();
    public void set_OwnerDraw(bool value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public bool get_Scrollable();
    public void set_Scrollable(bool value);
    [NullableContextAttribute("1")]
public SelectedIndexCollection get_SelectedIndices();
    [NullableContextAttribute("1")]
public SelectedListViewItemCollection get_SelectedItems();
    public bool get_ShowGroups();
    public void set_ShowGroups(bool value);
    public ImageList get_SmallImageList();
    public void set_SmallImageList(ImageList value);
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    public SortOrder get_Sorting();
    public void set_Sorting(SortOrder value);
    public ImageList get_StateImageList();
    public void set_StateImageList(ImageList value);
    internal bool get_SupportsListViewSubItems();
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public Size get_TileSize();
    public void set_TileSize(Size value);
    private bool ShouldSerializeTileSize();
    public ListViewItem get_TopItem();
    public void set_TopItem(ListViewItem value);
    public bool get_UseCompatibleStateImageBehavior();
    public void set_UseCompatibleStateImageBehavior(bool value);
    public View get_View();
    public void set_View(View value);
    public int get_VirtualListSize();
    public void set_VirtualListSize(int value);
    public bool get_VirtualMode();
    public void set_VirtualMode(bool value);
    public void add_AfterLabelEdit(LabelEditEventHandler value);
    public void remove_AfterLabelEdit(LabelEditEventHandler value);
    public void add_BeforeLabelEdit(LabelEditEventHandler value);
    public void remove_BeforeLabelEdit(LabelEditEventHandler value);
    public void add_CacheVirtualItems(CacheVirtualItemsEventHandler value);
    public void remove_CacheVirtualItems(CacheVirtualItemsEventHandler value);
    public void add_ColumnClick(ColumnClickEventHandler value);
    public void remove_ColumnClick(ColumnClickEventHandler value);
    public void add_GroupTaskLinkClick(EventHandler`1<ListViewGroupEventArgs> value);
    public void remove_GroupTaskLinkClick(EventHandler`1<ListViewGroupEventArgs> value);
    public void add_ColumnReordered(ColumnReorderedEventHandler value);
    public void remove_ColumnReordered(ColumnReorderedEventHandler value);
    public void add_ColumnWidthChanged(ColumnWidthChangedEventHandler value);
    public void remove_ColumnWidthChanged(ColumnWidthChangedEventHandler value);
    public void add_ColumnWidthChanging(ColumnWidthChangingEventHandler value);
    public void remove_ColumnWidthChanging(ColumnWidthChangingEventHandler value);
    public void add_DrawColumnHeader(DrawListViewColumnHeaderEventHandler value);
    public void remove_DrawColumnHeader(DrawListViewColumnHeaderEventHandler value);
    public void add_DrawItem(DrawListViewItemEventHandler value);
    public void remove_DrawItem(DrawListViewItemEventHandler value);
    public void add_DrawSubItem(DrawListViewSubItemEventHandler value);
    public void remove_DrawSubItem(DrawListViewSubItemEventHandler value);
    public void add_ItemActivate(EventHandler value);
    public void remove_ItemActivate(EventHandler value);
    public void add_ItemCheck(ItemCheckEventHandler value);
    public void remove_ItemCheck(ItemCheckEventHandler value);
    public void add_ItemChecked(ItemCheckedEventHandler value);
    public void remove_ItemChecked(ItemCheckedEventHandler value);
    public void add_ItemDrag(ItemDragEventHandler value);
    public void remove_ItemDrag(ItemDragEventHandler value);
    public void add_ItemMouseHover(ListViewItemMouseHoverEventHandler value);
    public void remove_ItemMouseHover(ListViewItemMouseHoverEventHandler value);
    public void add_ItemSelectionChanged(ListViewItemSelectionChangedEventHandler value);
    public void remove_ItemSelectionChanged(ListViewItemSelectionChangedEventHandler value);
    public void add_GroupCollapsedStateChanged(EventHandler`1<ListViewGroupEventArgs> value);
    public void remove_GroupCollapsedStateChanged(EventHandler`1<ListViewGroupEventArgs> value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_RetrieveVirtualItem(RetrieveVirtualItemEventHandler value);
    public void remove_RetrieveVirtualItem(RetrieveVirtualItemEventHandler value);
    public void add_SearchForVirtualItem(SearchForVirtualItemEventHandler value);
    public void remove_SearchForVirtualItem(SearchForVirtualItemEventHandler value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void add_VirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventHandler value);
    public void remove_VirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventHandler value);
    internal void AnnounceColumnHeader(Point point);
    private void ApplyUpdateCachedItems();
    public void ArrangeIcons(ListViewAlignment value);
    public void ArrangeIcons();
    private void AttachGroupImageListHandlers();
    private void AttachLargeImageListHandlers();
    private void AttachSmallImageListListHandlers();
    private void AttachStateImageListHandlers();
    public void AutoResizeColumns(ColumnHeaderAutoResizeStyle headerAutoResize);
    public void AutoResizeColumn(int columnIndex, ColumnHeaderAutoResizeStyle headerAutoResize);
    public void BeginUpdate();
    [NullableContextAttribute("1")]
internal void CacheSelectedStateForItem(ListViewItem lvi, bool selected);
    private void CancelPendingLabelEdit();
    private void CleanPreviousBackgroundImageFiles();
    public void Clear();
    private int CompareFunc(IntPtr lparam1, IntPtr lparam2, IntPtr lparamSort);
    private int CompensateColumnHeaderResize(Message m, bool columnResizeCancelled);
    private int CompensateColumnHeaderResize(int columnIndex, bool columnResizeCancelled);
    protected virtual void CreateHandle();
    private void CustomDraw(Message& m);
    private static void DeleteFileName(string fileName);
    [NullableContextAttribute("1")]
private void DetachImageList(object sender, EventArgs e);
    private void DetachGroupImageListHandlers();
    private void DetachLargeImageListHandlers();
    private void DetachSmallImageListListHandlers();
    private void DetachStateImageListHandlers();
    protected virtual void Dispose(bool disposing);
    private bool get_ClearingInnerListOnDispose();
    private void set_ClearingInnerListOnDispose(bool value);
    public void EndUpdate();
    private void EnsureDefaultGroup();
    public void EnsureVisible(int index);
    [NullableContextAttribute("1")]
public ListViewItem FindItemWithText(string text);
    [NullableContextAttribute("1")]
public ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex);
    [NullableContextAttribute("1")]
public ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);
    public ListViewItem FindNearestItem(SearchDirectionHint dir, Point point);
    public ListViewItem FindNearestItem(SearchDirectionHint searchDirection, int x, int y);
    [NullableContextAttribute("1")]
private ListViewItem FindItem(bool isTextSearch, string text, bool isPrefixSearch, Point pt, SearchDirectionHint dir, int startIndex, bool includeSubItemsInSearch);
    private void ForceCheckBoxUpdate();
    private int GenerateUniqueID();
    [NullableContextAttribute("1")]
internal int GetDisplayIndex(ListViewItem item, int lastIndex);
    [NullableContextAttribute("1")]
internal int GetColumnIndex(ColumnHeader ch);
    public ListViewItem GetItemAt(int x, int y);
    [NullableContextAttribute("1")]
internal int GetNativeGroupId(ListViewItem item);
    [NullableContextAttribute("1")]
internal virtual ToolInfoWrapper`1<Control> GetToolInfoWrapper(TOOLTIP_FLAGS flags, string caption, ToolTip tooltip);
    internal void GetSubItemAt(int x, int y, Int32& iItem, Int32& iSubItem);
    internal Point GetItemPosition(int index);
    internal LIST_VIEW_ITEM_STATE_FLAGS GetItemState(int index);
    internal LIST_VIEW_ITEM_STATE_FLAGS GetItemState(int index, LIST_VIEW_ITEM_STATE_FLAGS mask);
    public Rectangle GetItemRect(int index);
    public Rectangle GetItemRect(int index, ItemBoundsPortion portion);
    private Rectangle GetItemRectOrEmpty(int index);
    internal Rectangle GetSubItemRect(int itemIndex, int subItemIndex);
    internal Rectangle GetSubItemRect(int itemIndex, int subItemIndex, ItemBoundsPortion portion);
    [NullableContextAttribute("1")]
private void GroupImageListChangedHandle(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void GroupImageListRecreateHandle(object sender, EventArgs e);
    [NullableContextAttribute("1")]
public ListViewHitTestInfo HitTest(Point point);
    [NullableContextAttribute("1")]
public ListViewHitTestInfo HitTest(int x, int y);
    [NullableContextAttribute("1")]
private void NotifyAboutGotFocus(ListViewItem listViewItem);
    private void NotifyAboutLostFocus(ListViewItem listViewItem);
    private void InvalidateColumnHeaders();
    [NullableContextAttribute("1")]
internal ColumnHeader InsertColumn(int index, ColumnHeader ch, bool refreshSubItems);
    [NullableContextAttribute("1")]
private int InsertColumnNative(int index, ColumnHeader ch);
    [NullableContextAttribute("1")]
internal void InsertGroupInListView(int index, ListViewGroup group);
    [NullableContextAttribute("1")]
private void InsertGroupNative(int index, ListViewGroup group);
    [NullableContextAttribute("1")]
private void InsertItems(int displayIndex, ListViewItem[] items, bool checkHosting);
    [NullableContextAttribute("1")]
private int InsertItemsNative(int index, ListViewItem[] items);
    protected virtual bool IsInputKey(Keys keyData);
    [NullableContextAttribute("1")]
private void LargeImageListRecreateHandle(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void LargeImageListChangedHandle(object sender, EventArgs e);
    [NullableContextAttribute("1")]
internal void ListViewItemToolTipChanged(ListViewItem item);
    [NullableContextAttribute("1")]
protected virtual void OnAfterLabelEdit(LabelEditEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBackgroundImageChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseHover(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBeforeLabelEdit(LabelEditEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnCacheVirtualItems(CacheVirtualItemsEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGroupCollapsedStateChanged(ListViewGroupEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnColumnClick(ColumnClickEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGroupTaskLinkClick(ListViewGroupEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnColumnReordered(ColumnReorderedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnColumnWidthChanged(ColumnWidthChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnColumnWidthChanging(ColumnWidthChangingEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDrawColumnHeader(DrawListViewColumnHeaderEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDrawItem(DrawListViewItemEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDrawSubItem(DrawListViewSubItemEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLostFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnItemActivate(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnItemCheck(ItemCheckEventArgs ice);
    [NullableContextAttribute("1")]
protected virtual void OnItemChecked(ItemCheckedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnItemDrag(ItemDragEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnItemMouseHover(ListViewItemMouseHoverEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnItemSelectionChanged(ListViewItemSelectionChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnParentChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnResize(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRetrieveVirtualItem(RetrieveVirtualItemEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSearchForVirtualItem(SearchForVirtualItemEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSelectedIndexChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSystemColorsChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnVirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventArgs e);
    private void PositionHeader();
    private void RealizeAllSubItems();
    protected void RealizeProperties();
    [EditorBrowsableAttribute("2")]
public void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);
    internal virtual void ReleaseUiaProvider(HWND handle);
    [NullableContextAttribute("1")]
internal void RemoveGroupFromListView(ListViewGroup group);
    [NullableContextAttribute("1")]
private void RemoveGroupNative(ListViewGroup group);
    private void Scroll(int fromLVItem, int toLVItem);
    private void SetBackgroundImage();
    [NullableContextAttribute("1")]
internal void SetColumnInfo(LVCOLUMNW_MASK mask, ColumnHeader ch);
    internal void SetColumnWidth(int columnIndex, ColumnHeaderAutoResizeStyle headerAutoResize);
    private void SetColumnWidth(int index, int width);
    [NullableContextAttribute("1")]
private void SetDisplayIndices(Int32[] indices);
    [NullableContextAttribute("1")]
internal void UpdateSavedCheckedItems(ListViewItem item, bool addItem);
    [NullableContextAttribute("1")]
internal virtual void SetToolTip(ToolTip toolTip);
    internal void SetItemImage(int itemIndex, int imageIndex);
    internal void SetItemIndentCount(int index, int indentCount);
    internal void SetItemPosition(int index, int x, int y);
    internal void SetItemState(int index, LIST_VIEW_ITEM_STATE_FLAGS state, LIST_VIEW_ITEM_STATE_FLAGS mask);
    [NullableContextAttribute("1")]
internal void SetItemText(int itemIndex, int subItemIndex, string text);
    [NullableContextAttribute("1")]
private void SetItemText(int itemIndex, int subItemIndex, string text, LVITEMW& lvItem);
    internal void SetSelectionMark(int itemIndex);
    [NullableContextAttribute("1")]
private void SmallImageListRecreateHandle(object sender, EventArgs e);
    public void Sort();
    [NullableContextAttribute("1")]
private void StateImageListRecreateHandle(object sender, EventArgs e);
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal void UpdateListViewItemsLocations();
    private void UpdateColumnWidths(ColumnHeaderAutoResizeStyle headerAutoResize);
    protected void UpdateExtendedStyles();
    [NullableContextAttribute("1")]
internal void UpdateGroupNative(ListViewGroup group);
    [NullableContextAttribute("1")]
private IntPtr SendGroupMessage(ListViewGroup group, UInt32 msg, IntPtr lParam, LVGF additionalMask);
    internal void UpdateGroupView();
    private void UpdateTileView();
    private void WmNmClick();
    private void WmNmDblClick();
    private void WmMouseDown(Message& m, MouseButtons button, int clicks);
    private bool WmNotify(Message& m);
    [NullableContextAttribute("1")]
private Font GetListHeaderFont();
    private int GetIndexOfClickedItem();
    private LVHITTESTINFO SetupHitTestInfo();
    private void Unhook();
    private int UpdateGroupCollapse(MessageId clickType);
    internal void RecreateHandleInternal();
    private void WmReflectNotify(Message& m);
    private void WmPrint(Message& m);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
}
public enum System.Windows.Forms.ListViewAlignment : Enum {
    public int value__;
    public static ListViewAlignment Default;
    public static ListViewAlignment Top;
    public static ListViewAlignment Left;
    public static ListViewAlignment SnapToGrid;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.ListViewGroupConverter")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Header")]
public class System.Windows.Forms.ListViewGroup : object {
    [NullableAttribute("2")]
private string _header;
    private HorizontalAlignment _headerAlignment;
    [NullableAttribute("2")]
private string _footer;
    private HorizontalAlignment _footerAlignment;
    private ListViewGroupCollapsedState _collapsedState;
    [NullableAttribute("2")]
private string _subtitle;
    [NullableAttribute("2")]
private string _taskLink;
    [NullableAttribute("2")]
private ListViewItemCollection _items;
    private static int s_nextID;
    private static int s_nextHeader;
    [NullableAttribute("2")]
private ListViewGroupImageIndexer _imageIndexer;
    [NullableAttribute("2")]
private AccessibleObject _accessibilityObject;
    [CompilerGeneratedAttribute]
private bool <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ListView <ListView>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    internal AccessibleObject AccessibilityObject { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
public string Header { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
public HorizontalAlignment HeaderAlignment { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
public string Footer { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
public HorizontalAlignment FooterAlignment { get; public set; }
    internal bool Focused { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
public ListViewGroupCollapsedState CollapsedState { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
public string Subtitle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
public string TaskLink { get; public set; }
    [DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("ListView.GroupImageList")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
public int TitleImageIndex { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("0")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("ListView.GroupImageList")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
public string TitleImageKey { get; public set; }
    internal ListViewGroupImageIndexer ImageIndexer { get; }
    internal int ID { get; }
    [BrowsableAttribute("False")]
public ListViewItemCollection Items { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ListView ListView { get; internal set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ListViewGroupNameDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    private ListViewGroup(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public ListViewGroup(string key, string headerText);
    [NullableContextAttribute("2")]
public ListViewGroup(string header);
    [NullableContextAttribute("2")]
public ListViewGroup(string header, HorizontalAlignment headerAlignment);
    private static ListViewGroup();
    internal AccessibleObject get_AccessibilityObject();
    public string get_Header();
    public void set_Header(string value);
    public HorizontalAlignment get_HeaderAlignment();
    public void set_HeaderAlignment(HorizontalAlignment value);
    public string get_Footer();
    public void set_Footer(string value);
    public HorizontalAlignment get_FooterAlignment();
    public void set_FooterAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
internal bool get_Focused();
    [CompilerGeneratedAttribute]
internal void set_Focused(bool value);
    public ListViewGroupCollapsedState get_CollapsedState();
    public void set_CollapsedState(ListViewGroupCollapsedState value);
    public string get_Subtitle();
    public void set_Subtitle(string value);
    public string get_TaskLink();
    public void set_TaskLink(string value);
    public int get_TitleImageIndex();
    public void set_TitleImageIndex(int value);
    public string get_TitleImageKey();
    public void set_TitleImageKey(string value);
    internal ListViewGroupImageIndexer get_ImageIndexer();
    [CompilerGeneratedAttribute]
internal int get_ID();
    public ListViewItemCollection get_Items();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ListView get_ListView();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ListView(ListView value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Tag(object value);
    private void Deserialize(SerializationInfo info);
    internal ListViewGroupCollapsedState GetNativeCollapsedState();
    internal void ReleaseUiaProvider();
    internal void SetCollapsedStateInternal(ListViewGroupCollapsedState state);
    public virtual string ToString();
    private void UpdateListView();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum System.Windows.Forms.ListViewGroupCollapsedState : Enum {
    public int value__;
    public static ListViewGroupCollapsedState Default;
    public static ListViewGroupCollapsedState Expanded;
    public static ListViewGroupCollapsedState Collapsed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.ListViewGroupCollection : object {
    private ListView _listView;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ListViewGroup> _list;
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private List`1<ListViewGroup> List { get; }
    public ListViewGroup Item { get; public set; }
    [NullableAttribute("2")]
public ListViewGroup Item { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    internal ListViewGroupCollection(ListView listView);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private List`1<ListViewGroup> get_List();
    public ListViewGroup get_Item(int index);
    public void set_Item(int index, ListViewGroup value);
    public ListViewGroup get_Item(string key);
    public void set_Item(string key, ListViewGroup value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewGroup Add(string key, string headerText);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    public void AddRange(ListViewGroup[] groups);
    public void AddRange(ListViewGroupCollection groups);
    private void CheckListViewItems(ListViewGroup group);
    public sealed virtual void Clear();
    public bool Contains(ListViewGroup value);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(ListViewGroup value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public void Insert(int index, ListViewGroup group);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private void MoveGroupItems(ListViewGroup group);
    public void Remove(ListViewGroup group);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual void RemoveAt(int index);
    private void ThrowInvalidOperationExceptionIfVirtualMode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewGroupConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Windows.Forms.ListViewGroupEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <GroupIndex>k__BackingField;
    public int GroupIndex { get; }
    public ListViewGroupEventArgs(int groupIndex);
    [CompilerGeneratedAttribute]
public int get_GroupIndex();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewGroupImageIndexer : Indexer {
    [NullableAttribute("1")]
private ListViewGroup _owner;
    public ImageList ImageList { get; public set; }
    [NullableContextAttribute("1")]
public ListViewGroupImageIndexer(ListViewGroup group);
    public virtual ImageList get_ImageList();
    public virtual void set_ImageList(ImageList value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.ListViewGroupItemCollection : object {
    private ListViewGroup _group;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ListViewItem> _items;
    public int Count { get; }
    private List`1<ListViewItem> Items { get; }
    public bool OwnerIsVirtualListView { get; }
    public bool OwnerIsDesignMode { get; }
    public ListViewItem Item { get; public set; }
    public ListViewGroupItemCollection(ListViewGroup group);
    public sealed virtual int get_Count();
    private List`1<ListViewItem> get_Items();
    public sealed virtual bool get_OwnerIsVirtualListView();
    public sealed virtual bool get_OwnerIsDesignMode();
    public sealed virtual ListViewItem get_Item(int index);
    public sealed virtual void set_Item(int index, ListViewItem value);
    public sealed virtual ListViewItem Add(ListViewItem value);
    public sealed virtual void AddRange(ListViewItem[] items);
    private void CheckListViewItem(ListViewItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ListViewItem item);
    public sealed virtual void CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(ListViewItem item);
    public sealed virtual ListViewItem Insert(int index, ListViewItem item);
    private static void MoveToGroup(ListViewItem item, ListViewGroup newGroup);
    public sealed virtual void Remove(ListViewItem item);
    public sealed virtual void RemoveAt(int index);
    private static void UpdateNativeListViewItem(ListViewItem item);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListViewHitTestInfo : object {
    [CompilerGeneratedAttribute]
private ListViewHitTestLocations <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewSubItem <SubItem>k__BackingField;
    public ListViewHitTestLocations Location { get; }
    public ListViewItem Item { get; }
    public ListViewSubItem SubItem { get; }
    public ListViewHitTestInfo(ListViewItem hitItem, ListViewSubItem hitSubItem, ListViewHitTestLocations hitLocation);
    [CompilerGeneratedAttribute]
public ListViewHitTestLocations get_Location();
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
    [CompilerGeneratedAttribute]
public ListViewSubItem get_SubItem();
}
[FlagsAttribute]
public enum System.Windows.Forms.ListViewHitTestLocations : Enum {
    public int value__;
    public static ListViewHitTestLocations None;
    public static ListViewHitTestLocations AboveClientArea;
    public static ListViewHitTestLocations BelowClientArea;
    public static ListViewHitTestLocations LeftOfClientArea;
    public static ListViewHitTestLocations RightOfClientArea;
    public static ListViewHitTestLocations Image;
    public static ListViewHitTestLocations StateImage;
    public static ListViewHitTestLocations Label;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListViewInsertionMark : object {
    private ListView _listView;
    private int _index;
    private Color _color;
    private bool _appearsAfterItem;
    public bool AppearsAfterItem { get; public set; }
    public Rectangle Bounds { get; }
    public Color Color { get; public set; }
    public int Index { get; public set; }
    internal ListViewInsertionMark(ListView listView);
    public bool get_AppearsAfterItem();
    public void set_AppearsAfterItem(bool value);
    public Rectangle get_Bounds();
    public Color get_Color();
    public void set_Color(Color value);
    public int get_Index();
    public void set_Index(int value);
    public int NearestIndex(Point pt);
    internal void UpdateListView();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.ListViewItemConverter")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Text")]
[DynamicallyAccessedMembersAttribute("1")]
public class System.Windows.Forms.ListViewItem : object {
    private static int MaxSubItems;
    private static Section s_stateSelectedSection;
    private static Section s_stateImageMaskSet;
    private static Section s_stateWholeRowOneStyleSection;
    private static Section s_savedStateImageIndexSection;
    private static Section s_subItemCountSection;
    private int _indentCount;
    private Point _position;
    [NullableAttribute("2")]
internal ListView _listView;
    [NullableAttribute("2")]
internal ListViewGroup _group;
    [NullableAttribute("2")]
private string _groupName;
    [NullableAttribute("2")]
private ListViewSubItemCollection _listViewSubItemCollection;
    private List`1<ListViewSubItem> _subItems;
    private int _lastIndex;
    internal int ID;
    private BitVector32 _state;
    [NullableAttribute("2")]
private ListViewItemImageIndexer _imageIndexer;
    private string _toolTipText;
    [NullableAttribute("2")]
private object _userData;
    [NullableAttribute("2")]
private AccessibleObject _accessibilityObject;
    private View _accessibilityObjectView;
    internal AccessibleObject AccessibilityObject { get; }
    private bool IsAccessibilityObjectCreated { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
public bool Checked { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool Focused { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public Font Font { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public Color ForeColor { get; public set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
public ListViewGroup Group { get; public set; }
    [DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ListViewItemImageIndexDescr")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
public int ImageIndex { get; public set; }
    internal ListViewItemImageIndexer ImageIndexer { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("0")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
public string ImageKey { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
public ImageList ImageList { get; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("ListViewItemIndentCountDescr")]
[SRCategoryAttribute("CatDisplay")]
public int IndentCount { get; public set; }
    [BrowsableAttribute("False")]
public int Index { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
public ListView ListView { get; }
    [LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Point Position { get; public set; }
    internal LIST_VIEW_ITEM_STATE_FLAGS RawStateImageIndex { get; }
    private int SavedStateImageIndex { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    [LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("ListViewItemStateImageIndexDescr")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RelatedImageListAttribute("ListView.StateImageList")]
public int StateImageIndex { get; public set; }
    internal bool StateImageSet { get; }
    internal bool StateSelected { get; internal set; }
    private int SubItemCount { get; private set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewItemSubItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListViewSubItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public ListViewSubItemCollection SubItems { get; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
public string ToolTipText { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public bool UseItemStyleForSubItems { get; public set; }
    private bool AllowsToolTips { get; }
    protected ListViewItem(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public ListViewItem(string text);
    [NullableContextAttribute("2")]
public ListViewItem(string text, int imageIndex);
    public ListViewItem(String[] items);
    public ListViewItem(String[] items, int imageIndex);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, int imageIndex, Color foreColor, Color backColor, Font font);
    public ListViewItem(ListViewSubItem[] subItems, int imageIndex);
    [NullableContextAttribute("2")]
public ListViewItem(ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(string text, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(string text, int imageIndex, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, int imageIndex, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, int imageIndex, Color foreColor, Color backColor, Font font, ListViewGroup group);
    public ListViewItem(ListViewSubItem[] subItems, int imageIndex, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(string text, string imageKey);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, string imageKey);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, string imageKey, Color foreColor, Color backColor, Font font);
    public ListViewItem(ListViewSubItem[] subItems, string imageKey);
    [NullableContextAttribute("2")]
public ListViewItem(string text, string imageKey, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, string imageKey, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(String[] items, string imageKey, Color foreColor, Color backColor, Font font, ListViewGroup group);
    [NullableContextAttribute("2")]
public ListViewItem(ListViewSubItem[] subItems, string imageKey, ListViewGroup group);
    private static ListViewItem();
    internal virtual AccessibleObject get_AccessibilityObject();
    private bool get_IsAccessibilityObjectCreated();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Rectangle get_Bounds();
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_Focused();
    public void set_Focused(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    [NullableContextAttribute("2")]
public ListViewGroup get_Group();
    [NullableContextAttribute("2")]
public void set_Group(ListViewGroup value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    internal ListViewItemImageIndexer get_ImageIndexer();
    public string get_ImageKey();
    public void set_ImageKey(string value);
    [NullableContextAttribute("2")]
public ImageList get_ImageList();
    public int get_IndentCount();
    public void set_IndentCount(int value);
    public int get_Index();
    [NullableContextAttribute("2")]
public ListView get_ListView();
    public string get_Name();
    public void set_Name(string value);
    public Point get_Position();
    public void set_Position(Point value);
    internal LIST_VIEW_ITEM_STATE_FLAGS get_RawStateImageIndex();
    private int get_SavedStateImageIndex();
    private void set_SavedStateImageIndex(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public int get_StateImageIndex();
    public void set_StateImageIndex(int value);
    internal bool get_StateImageSet();
    internal bool get_StateSelected();
    internal void set_StateSelected(bool value);
    private int get_SubItemCount();
    private void set_SubItemCount(int value);
    public ListViewSubItemCollection get_SubItems();
    [NullableContextAttribute("2")]
public object get_Tag();
    [NullableContextAttribute("2")]
public void set_Tag(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_UseItemStyleForSubItems();
    public void set_UseItemStyleForSubItems(bool value);
    public void BeginEdit();
    public virtual object Clone();
    public virtual void EnsureVisible();
    [NullableContextAttribute("2")]
public ListViewItem FindNearestItem(SearchDirectionHint searchDirection);
    public Rectangle GetBounds(ItemBoundsPortion portion);
    [NullableContextAttribute("2")]
public ListViewSubItem GetSubItemAt(int x, int y);
    internal void Host(ListView parent, int id, int index);
    internal void ReleaseUiaProvider();
    internal void UpdateGroupFromName();
    internal void UpdateStateToListView(int index);
    internal void UpdateStateToListView(int index, LVITEMW& lvItem, bool updateOwner);
    internal void UpdateStateFromListView(int displayIndex, bool checkSelection);
    internal void UnHost(bool checkSelection);
    internal void UnHost(int displayIndex, bool checkSelection);
    public virtual void Remove();
    protected virtual void Deserialize(SerializationInfo info, StreamingContext context);
    protected virtual void Serialize(SerializationInfo info, StreamingContext context);
    internal void SetItemIndex(ListView listView, int index);
    internal static bool ShouldSerializeText();
    private bool ShouldSerializePosition();
    public virtual string ToString();
    internal void InvalidateListView();
    internal void UpdateSubItems(int index);
    internal void UpdateSubItems(int index, int oldCount);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private bool get_AllowsToolTips();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsChildrenToShowToolTips();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsToolTip();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.CanShowToolTipsNow();
    private sealed virtual override string System.Windows.Forms.IKeyboardToolTip.GetCaptionForTool(ToolTip toolTip);
    private sealed virtual override Rectangle System.Windows.Forms.IKeyboardToolTip.GetNativeScreenRectangle();
    private sealed virtual override IList`1<Rectangle> System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles();
    [NullableContextAttribute("2")]
private sealed virtual override IWin32Window System.Windows.Forms.IKeyboardToolTip.GetOwnerWindow();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.HasRtlModeEnabled();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsBeingTabbedTo();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsHoveredWithMouse();
    private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnHooked(ToolTip toolTip);
    private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnUnhooked(ToolTip toolTip);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.ShowsOwnToolTip();
    internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    private Rectangle GetNativeRectangle(int index);
    private static Rectangle GetDetailsListRectangle(Point point, ListViewItem item, Rectangle itemBounds);
    private Rectangle GetTileRectangle(Point point, ListViewItem item, Rectangle itemBounds);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListViewItemConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewItemImageIndexer : Indexer {
    [NullableAttribute("1")]
private ListViewItem _owner;
    public ImageList ImageList { get; public set; }
    [NullableContextAttribute("1")]
public ListViewItemImageIndexer(ListViewItem item);
    public virtual ImageList get_ImageList();
    public virtual void set_ImageList(ImageList value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListViewItemMouseHoverEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    public ListViewItem Item { get; }
    public ListViewItemMouseHoverEventArgs(ListViewItem item);
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
}
public class System.Windows.Forms.ListViewItemMouseHoverEventHandler : MulticastDelegate {
    public ListViewItemMouseHoverEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ListViewItemMouseHoverEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListViewItemMouseHoverEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ListViewItemSelectionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    public ListViewItem Item { get; }
    public int ItemIndex { get; }
    public bool IsSelected { get; }
    public ListViewItemSelectionChangedEventArgs(ListViewItem item, int itemIndex, bool isSelected);
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
}
public class System.Windows.Forms.ListViewItemSelectionChangedEventHandler : MulticastDelegate {
    public ListViewItemSelectionChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ListViewItemSelectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListViewItemSelectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ListViewItemStateImageIndexConverter : ImageIndexConverter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    [NullableContextAttribute("1")]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[FlagsAttribute]
public enum System.Windows.Forms.ListViewItemStates : Enum {
    public int value__;
    public static ListViewItemStates Checked;
    public static ListViewItemStates Default;
    public static ListViewItemStates Focused;
    public static ListViewItemStates Grayed;
    public static ListViewItemStates Hot;
    public static ListViewItemStates Indeterminate;
    public static ListViewItemStates Marked;
    public static ListViewItemStates Selected;
    public static ListViewItemStates ShowKeyboardCues;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewLabelEditAccessibleObject : AccessibleObject {
    private static string LIST_VIEW_LABEL_EDIT_AUTOMATION_ID;
    private ListView _owningListView;
    private WeakReference`1<ListViewLabelEditNativeWindow> _labelEdit;
    private ListViewLabelEditUiaTextProvider _textProvider;
    [NullableAttribute("2")]
private Int32[] _runtimeId;
    private protected string AutomationId { get; }
    internal IRawElementProviderFragmentRoot FragmentRoot { get; }
    [NullableAttribute("2")]
internal IRawElementProviderSimple HostRawElementProvider { get; }
    [NullableAttribute("2")]
public string Name { get; }
    internal Int32[] RuntimeId { get; }
    internal ITextRangeProvider DocumentRangeInternal { get; }
    internal SupportedTextSelection SupportedTextSelectionInternal { get; }
    public ListViewLabelEditAccessibleObject(ListView owningListView, ListViewLabelEditNativeWindow labelEdit);
    private protected virtual string get_AutomationId();
    [NullableContextAttribute("2")]
internal virtual IRawElementProviderFragment FragmentNavigate(NavigateDirection direction);
    internal virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    [NullableContextAttribute("2")]
internal virtual object GetPropertyValue(UIA propertyID);
    [NullableContextAttribute("2")]
internal virtual IRawElementProviderSimple get_HostRawElementProvider();
    internal virtual bool IsPatternSupported(UIA patternId);
    [NullableContextAttribute("2")]
public virtual string get_Name();
    internal virtual Int32[] get_RuntimeId();
    internal virtual ITextRangeProvider get_DocumentRangeInternal();
    internal virtual ITextRangeProvider[] GetTextSelection();
    internal virtual ITextRangeProvider[] GetTextVisibleRanges();
    internal virtual ITextRangeProvider GetTextRangeFromChild(IRawElementProviderSimple childElement);
    [NullableContextAttribute("2")]
internal virtual ITextRangeProvider GetTextRangeFromPoint(Point screenLocation);
    internal virtual SupportedTextSelection get_SupportedTextSelectionInternal();
    [NullableContextAttribute("2")]
internal virtual ITextRangeProvider GetTextCaretRange(BOOL& isActive);
    internal virtual ITextRangeProvider GetRangeFromAnnotation(IRawElementProviderSimple annotationElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewLabelEditNativeWindow : NativeWindow {
    private static UInt32 TextSelectionChanged;
    private ListView _owningListView;
    [NullableAttribute("2")]
private AccessibleObject _accessibilityObject;
    [NullableAttribute("2")]
private WINEVENTPROC _winEventProcCallback;
    private HWINEVENTHOOK _valueChangeHook;
    private HWINEVENTHOOK _textSelectionChangedHook;
    private bool _winEventHooksInstalled;
    public AccessibleObject AccessibilityObject { get; }
    private bool IsAccessibilityObjectCreated { get; }
    public bool IsHandleCreated { get; }
    public ListViewLabelEditNativeWindow(ListView owningListView);
    public AccessibleObject get_AccessibilityObject();
    private void InstallWinEventHooks();
    private bool get_IsAccessibilityObjectCreated();
    public bool get_IsHandleCreated();
    protected virtual void OnHandleChange();
    public virtual void ReleaseHandle();
    private void WinEventProcCallback(HWINEVENTHOOK hWinEventHook, UInt32 eventId, HWND hwnd, int idObject, int idChild, UInt32 idEventThread, UInt32 dwmsEventTime);
    private void WmGetObject(Message& m);
    protected virtual void WndProc(Message& m);
    [CompilerGeneratedAttribute]
private AccessibleObject <WmGetObject>g__EnsureWinEventHooksInstalledAndGetAccessibilityObject|19_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewLabelEditUiaTextProvider : UiaTextProvider2 {
    private static int OwnerChildEditLineIndex;
    private static int OwnerChildEditLinesCount;
    private IHandle`1<HWND> _owningChildEdit;
    private AccessibleObject _owningChildEditAccessibilityObject;
    private ListView _owningListView;
    public Rectangle BoundingRectangle { get; }
    public ITextRangeProvider DocumentRange { get; }
    public int FirstVisibleLine { get; }
    public bool IsMultiline { get; }
    public bool IsReadingRTL { get; }
    public bool IsReadOnly { get; }
    public bool IsScrollable { get; }
    public int LinesCount { get; }
    public int LinesPerPage { get; }
    public LOGFONTW Logfont { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public string Text { get; }
    public int TextLength { get; }
    public WINDOW_EX_STYLE WindowExStyle { get; }
    public WINDOW_STYLE WindowStyle { get; }
    public ListViewLabelEditUiaTextProvider(ListView owner, ListViewLabelEditNativeWindow childEdit, AccessibleObject childEditAccessibilityObject);
    public virtual Rectangle get_BoundingRectangle();
    public virtual ITextRangeProvider get_DocumentRange();
    public virtual int get_FirstVisibleLine();
    public virtual bool get_IsMultiline();
    public virtual bool get_IsReadingRTL();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsScrollable();
    public virtual int get_LinesCount();
    public virtual int get_LinesPerPage();
    public virtual LOGFONTW get_Logfont();
    public virtual SupportedTextSelection get_SupportedTextSelection();
    public virtual string get_Text();
    public virtual int get_TextLength();
    public virtual WINDOW_EX_STYLE get_WindowExStyle();
    public virtual WINDOW_STYLE get_WindowStyle();
    [NullableContextAttribute("2")]
public virtual ITextRangeProvider GetCaretRange(BOOL& isActive);
    public virtual int GetLineFromCharIndex(int charIndex);
    public virtual int GetLineIndex(int line);
    public virtual Point GetPositionFromChar(int charIndex);
    public virtual Point GetPositionFromCharForUpperRightCorner(int startCharIndex, string text);
    public virtual ITextRangeProvider[] GetSelection();
    public virtual void GetVisibleRangePoints(Int32& visibleStart, Int32& visibleEnd);
    public virtual ITextRangeProvider[] GetVisibleRanges();
    public virtual bool LineScroll(int charactersHorizontal, int linesVertical);
    public virtual Point PointToScreen(Point pt);
    public virtual ITextRangeProvider RangeFromAnnotation(IRawElementProviderSimple annotationElement);
    public virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    [NullableContextAttribute("2")]
public virtual ITextRangeProvider RangeFromPoint(Point screenLocation);
    public virtual Rectangle RectangleToScreen(Rectangle rect);
    public virtual void SetSelection(int start, int end);
    private int GetCharIndexFromPosition(Point pt);
    private RECT GetFormattingRectangle();
    private Point GetPositionFromCharIndex(int index);
    private bool GetTextExtentPoint32(char item, Size& size);
    [CompilerGeneratedAttribute]
internal static bool <GetVisibleRangePoints>g__IsDegenerate|42_0(Rectangle rect);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ListViewSubItemConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelected>k__BackingField;
    public int StartIndex { get; }
    public int EndIndex { get; }
    public bool IsSelected { get; }
    public ListViewVirtualItemsSelectionRangeChangedEventArgs(int startIndex, int endIndex, bool isSelected);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public int get_EndIndex();
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
}
public class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler : MulticastDelegate {
    public ListViewVirtualItemsSelectionRangeChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ListViewVirtualItemsSelectionRangeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListViewVirtualItemsSelectionRangeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultEventAttribute("MaskInputRejected")]
[DefaultBindingPropertyAttribute("Text")]
[DefaultPropertyAttribute("Mask")]
[DesignerAttribute("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionMaskedTextBox")]
public class System.Windows.Forms.MaskedTextBox : TextBoxBase {
    private static bool forward;
    private static bool backward;
    private static string nullMask;
    private static object EVENT_MASKINPUTREJECTED;
    private static object EVENT_VALIDATIONCOMPLETED;
    private static object EVENT_TEXTALIGNCHANGED;
    private static object EVENT_ISOVERWRITEMODECHANGED;
    private static object EVENT_MASKCHANGED;
    private static char systemPwdChar;
    private static byte imeConversionNone;
    private static byte imeConversionUpdate;
    private static byte imeConversionCompleted;
    private int _lastSelLength;
    private int _caretTestPos;
    private static int IME_ENDING_COMPOSITION;
    private static int IME_COMPLETING;
    private static int HANDLE_KEY_PRESS;
    private static int IS_NULL_MASK;
    private static int QUERY_BASE_TEXT;
    private static int REJECT_INPUT_ON_FIRST_FAILURE;
    private static int HIDE_PROMPT_ON_LEAVE;
    private static int BEEP_ON_ERROR;
    private static int USE_SYSTEM_PASSWORD_CHAR;
    private static int INSERT_TOGGLED;
    private static int CUTCOPYINCLUDEPROMPT;
    private static int CUTCOPYINCLUDELITERALS;
    private char _passwordChar;
    [NullableAttribute("2")]
private Type _validatingType;
    [NullableAttribute("2")]
private IFormatProvider _formatProvider;
    private MaskedTextProvider _maskedTextProvider;
    private InsertKeyMode _insertMode;
    private HorizontalAlignment _textAlign;
    private BitVector32 _flagState;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AcceptsTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxAllowPromptAsInputDescr")]
[DefaultValueAttribute("True")]
public bool AllowPromptAsInput { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxAsciiOnlyDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("False")]
public bool AsciiOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxBeepOnErrorDescr")]
[DefaultValueAttribute("False")]
public bool BeepOnError { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanUndo { get; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxCultureDescr")]
[RefreshPropertiesAttribute("2")]
public CultureInfo Culture { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxCutCopyMaskFormat")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MaskFormat CutCopyMaskFormat { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IFormatProvider FormatProvider { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxHidePromptOnLeaveDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("False")]
public bool HidePromptOnLeave { get; public set; }
    private bool IncludeLiterals { get; private set; }
    private bool IncludePrompt { get; private set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxInsertKeyModeDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public InsertKeyMode InsertKeyMode { get; public set; }
    [BrowsableAttribute("False")]
public bool IsOverwriteMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] Lines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxMaskDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Mask { get; public set; }
    [BrowsableAttribute("False")]
public bool MaskCompleted { get; }
    [BrowsableAttribute("False")]
public bool MaskFull { get; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public MaskedTextProvider MaskedTextProvider { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int MaxLength { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute(" ")]
public char PasswordChar { get; public set; }
    private protected bool PasswordProtect { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MaskedTextBoxPromptCharDescr")]
[RefreshPropertiesAttribute("2")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("_")]
public char PromptChar { get; public set; }
    public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxRejectInputOnFirstFailureDescr")]
[DefaultValueAttribute("False")]
public bool RejectInputOnFirstFailure { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxResetOnPrompt")]
[DefaultValueAttribute("True")]
public bool ResetOnPrompt { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxResetOnSpace")]
[DefaultValueAttribute("True")]
public bool ResetOnSpace { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxSkipLiterals")]
[DefaultValueAttribute("True")]
public bool SkipLiterals { get; public set; }
    public string SelectedText { get; public set; }
    private static char SystemPasswordChar { get; }
    internal bool SupportsUiaProviders { get; }
    [EditorAttribute("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("2")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    private string TextOutput { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxTextAlignDescr")]
public HorizontalAlignment TextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxTextMaskFormat")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MaskFormat TextMaskFormat { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxUseSystemPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("False")]
public bool UseSystemPasswordChar { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public Type ValidatingType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool WordWrap { get; public set; }
    public MaskedTextBox(string mask);
    public MaskedTextBox(MaskedTextProvider maskedTextProvider);
    private static MaskedTextBox();
    [MemberNotNullAttribute("_maskedTextProvider")]
private void Initialize(MaskedTextProvider maskedTextProvider);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_AllowPromptAsInput();
    public void set_AllowPromptAsInput(bool value);
    [NullableContextAttribute("2")]
public void add_AcceptsTabChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AcceptsTabChanged(EventHandler value);
    public bool get_AsciiOnly();
    public void set_AsciiOnly(bool value);
    public bool get_BeepOnError();
    public void set_BeepOnError(bool value);
    public bool get_CanUndo();
    protected virtual CreateParams get_CreateParams();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public MaskFormat get_CutCopyMaskFormat();
    public void set_CutCopyMaskFormat(MaskFormat value);
    [NullableContextAttribute("2")]
public IFormatProvider get_FormatProvider();
    [NullableContextAttribute("2")]
public void set_FormatProvider(IFormatProvider value);
    public bool get_HidePromptOnLeave();
    public void set_HidePromptOnLeave(bool value);
    private bool get_IncludeLiterals();
    private void set_IncludeLiterals(bool value);
    private bool get_IncludePrompt();
    private void set_IncludePrompt(bool value);
    public InsertKeyMode get_InsertKeyMode();
    public void set_InsertKeyMode(InsertKeyMode value);
    protected virtual bool IsInputKey(Keys keyData);
    public bool get_IsOverwriteMode();
    [NullableContextAttribute("2")]
public void add_IsOverwriteModeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_IsOverwriteModeChanged(EventHandler value);
    public String[] get_Lines();
    public void set_Lines(String[] value);
    public string get_Mask();
    public void set_Mask(string value);
    [NullableContextAttribute("2")]
public void add_MaskChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_MaskChanged(EventHandler value);
    public bool get_MaskCompleted();
    public bool get_MaskFull();
    [NullableContextAttribute("2")]
public MaskedTextProvider get_MaskedTextProvider();
    [NullableContextAttribute("2")]
public void add_MaskInputRejected(MaskInputRejectedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MaskInputRejected(MaskInputRejectedEventHandler value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    [NullableContextAttribute("2")]
public void add_MultilineChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_MultilineChanged(EventHandler value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    private protected virtual bool get_PasswordProtect();
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_RejectInputOnFirstFailure();
    public void set_RejectInputOnFirstFailure(bool value);
    public bool get_ResetOnPrompt();
    public void set_ResetOnPrompt(bool value);
    public bool get_ResetOnSpace();
    public void set_ResetOnSpace(bool value);
    public bool get_SkipLiterals();
    public void set_SkipLiterals(bool value);
    public virtual string get_SelectedText();
    public virtual void set_SelectedText(string value);
    [NullableContextAttribute("2")]
internal virtual void SetSelectedTextInternal(string value, bool clearUndo);
    private void ImeComplete();
    private void ImeNotify(NOTIFY_IME_INDEX action);
    private void SetEditControlPasswordChar(char pwdChar);
    private static char get_SystemPasswordChar();
    internal virtual bool get_SupportsUiaProviders();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual int get_TextLength();
    private string get_TextOutput();
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    [NullableContextAttribute("2")]
public void add_TextAlignChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextAlignChanged(EventHandler value);
    public MaskFormat get_TextMaskFormat();
    public void set_TextMaskFormat(MaskFormat value);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public void add_TypeValidationCompleted(TypeValidationEventHandler value);
    [NullableContextAttribute("2")]
public void remove_TypeValidationCompleted(TypeValidationEventHandler value);
    public bool get_UseSystemPasswordChar();
    public void set_UseSystemPasswordChar(bool value);
    [NullableContextAttribute("2")]
public Type get_ValidatingType();
    [NullableContextAttribute("2")]
public void set_ValidatingType(Type value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    [EditorBrowsableAttribute("1")]
public void ClearUndo();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateHandle();
    private void Delete(Keys keyCode, int startPosition, int selectionLen);
    public virtual char GetCharFromPosition(Point pt);
    public virtual int GetCharIndexFromPosition(Point pt);
    internal virtual int GetEndPosition();
    [EditorBrowsableAttribute("1")]
public int GetFirstCharIndexOfCurrentLine();
    [EditorBrowsableAttribute("1")]
public int GetFirstCharIndexFromLine(int lineNumber);
    private string GetFormattedDisplayString();
    [EditorBrowsableAttribute("1")]
public virtual int GetLineFromCharIndex(int index);
    public virtual Point GetPositionFromCharIndex(int index);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    private string GetSelectedText();
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnIsOverwriteModeChanged(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaskChanged(EventArgs e);
    private void OnMaskInputRejected(MaskInputRejectedEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void OnMultilineChanged(EventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    private void OnTypeValidationCompleted(TypeValidationEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    private void Replace(string text, int startPosition, int selectionLen);
    [NullableContextAttribute("2")]
private void PasteInt(string text);
    [NullableContextAttribute("2")]
private object PerformTypeValidation(CancelEventArgs e);
    private bool PlaceChar(char ch, int startPosition, int length, bool overwrite, MaskedTextResultHint& hint);
    private bool PlaceChar(MaskedTextProvider provider, char ch, int startPosition, int length, bool overwrite, MaskedTextResultHint& hint);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected internal virtual bool ProcessKeyMessage(Message& m);
    private void ResetCulture();
    [EditorBrowsableAttribute("1")]
public void ScrollToCaret();
    private void SetMaskedTextProvider(MaskedTextProvider newProvider);
    private void SetMaskedTextProvider(MaskedTextProvider newProvider, string textOnInitializingMask);
    private void SetText();
    private void SetWindowText();
    private void SetWindowText(string text, bool raiseTextChangedEvent, bool preserveCaret);
    private bool ShouldSerializeCulture();
    [EditorBrowsableAttribute("1")]
public void Undo();
    [NullableContextAttribute("2")]
public object ValidateText();
    private bool WmClear();
    private bool WmCopy();
    private bool WmImeComposition(Message& m);
    private bool WmImeStartComposition();
    private void WmPaste();
    private void WmPrint(Message& m);
    protected virtual void WndProc(Message& m);
    private void WmKillFocus();
    private void WmSetFocus();
}
public enum System.Windows.Forms.MaskFormat : Enum {
    public int value__;
    public static MaskFormat IncludePrompt;
    public static MaskFormat IncludeLiterals;
    public static MaskFormat IncludePromptAndLiterals;
    public static MaskFormat ExcludePromptAndLiterals;
}
public class System.Windows.Forms.MaskInputRejectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private MaskedTextResultHint <RejectionHint>k__BackingField;
    public int Position { get; }
    public MaskedTextResultHint RejectionHint { get; }
    public MaskInputRejectedEventArgs(int position, MaskedTextResultHint rejectionHint);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public MaskedTextResultHint get_RejectionHint();
}
public class System.Windows.Forms.MaskInputRejectedEventHandler : MulticastDelegate {
    public MaskInputRejectedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MaskInputRejectedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MaskInputRejectedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.Windows.Forms.MdiClient : Control {
    private List`1<Form> _children;
    [NullableAttribute("2")]
[LocalizableAttribute("True")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected CreateParams CreateParams { get; }
    public Form[] MdiChildren { get; }
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    protected virtual CreateParams get_CreateParams();
    public Form[] get_MdiChildren();
    protected virtual ControlCollection CreateControlsInstance();
    public void LayoutMdi(MdiLayout value);
    protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void SetWindowRgn();
    internal virtual bool ShouldSerializeBackColor();
    private static bool ShouldSerializeLocation();
    internal virtual bool ShouldSerializeSize();
    protected virtual void WndProc(Message& m);
    internal virtual void OnInvokedSetScrollPosition(object sender, EventArgs e);
    private void OnIdle(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MdiControlStrip : MenuStrip {
    private ToolStripMenuItem _system;
    private ToolStripMenuItem _close;
    private ToolStripMenuItem _minimize;
    private ToolStripMenuItem _restore;
    [NullableAttribute("2")]
private MenuStrip _mergedMenu;
    private IWin32Window _target;
    public ToolStripMenuItem Close { get; }
    [NullableAttribute("2")]
internal MenuStrip MergedMenu { get; internal set; }
    public MdiControlStrip(IWin32Window target);
    public ToolStripMenuItem get_Close();
    [NullableContextAttribute("2")]
internal MenuStrip get_MergedMenu();
    [NullableContextAttribute("2")]
internal void set_MergedMenu(MenuStrip value);
    private Image GetTargetWindowIcon();
    private bool GetTargetWindowIconVisibility();
    public void updateIcon();
    protected internal virtual void OnItemAdded(ToolStripItemEventArgs e);
    private void OnTargetWindowDisposed(object sender, EventArgs e);
    private void OnTargetWindowHandleRecreated(object sender, EventArgs e);
    private void OnSystemMenuDropDownOpening(object sender, EventArgs e);
    private void OnSystemMenuDoubleClick(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void UnhookTarget();
}
public enum System.Windows.Forms.MdiLayout : Enum {
    public int value__;
    public static MdiLayout Cascade;
    public static MdiLayout TileHorizontal;
    public static MdiLayout TileVertical;
    public static MdiLayout ArrangeIcons;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MdiWindowDialog : Form {
    private ListBox _itemList;
    private Button _okButton;
    private Button _cancelButton;
    private TableLayoutPanel _okCancelTableLayoutPanel;
    [NullableAttribute("2")]
private Form _active;
    [NullableAttribute("2")]
public Form ActiveChildForm { get; }
    [NullableContextAttribute("2")]
public Form get_ActiveChildForm();
    public void SetItems(Form active, Form[] all);
    private void ItemList_doubleClick(object source, EventArgs e);
    private void ItemList_selectedIndexChanged(object source, EventArgs e);
    [MemberNotNullAttribute("_itemList")]
[MemberNotNullAttribute("_okButton")]
[MemberNotNullAttribute("_cancelButton")]
[MemberNotNullAttribute("_okCancelTableLayoutPanel")]
private void InitializeComponent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MdiWindowListItemConverter : ComponentConverter {
    public MdiWindowListItemConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MdiWindowListStrip : MenuStrip {
    private Form _mdiParent;
    private ToolStripMenuItem _mergeItem;
    private MenuStrip _mergedMenu;
    [NullableAttribute("1")]
internal ToolStripMenuItem MergeItem { get; }
    internal MenuStrip MergedMenu { get; internal set; }
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
internal ToolStripMenuItem get_MergeItem();
    internal MenuStrip get_MergedMenu();
    internal void set_MergedMenu(MenuStrip value);
    [NullableContextAttribute("1")]
public void PopulateItems(Form mdiParent, ToolStripMenuItem mdiMergeItem, bool includeSeparator);
    [NullableContextAttribute("1")]
private void OnMoreWindowsMenuItemClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnWindowListItemClick(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.MeasureItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemWidth>k__BackingField;
    public Graphics Graphics { get; }
    public int Index { get; }
    public int ItemHeight { get; public set; }
    public int ItemWidth { get; public set; }
    public MeasureItemEventArgs(Graphics graphics, int index);
    public MeasureItemEventArgs(Graphics graphics, int index, int itemHeight);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_ItemHeight();
    [CompilerGeneratedAttribute]
public void set_ItemHeight(int value);
    [CompilerGeneratedAttribute]
public int get_ItemWidth();
    [CompilerGeneratedAttribute]
public void set_ItemWidth(int value);
}
public class System.Windows.Forms.MeasureItemEventHandler : MulticastDelegate {
    public MeasureItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MeasureItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MeasureItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.MenuGlyph : Enum {
    public int value__;
    public static MenuGlyph Arrow;
    public static MenuGlyph Checkmark;
    public static MenuGlyph Bullet;
    public static MenuGlyph Min;
    public static MenuGlyph Max;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[SRDescriptionAttribute("DescriptionMenuStrip")]
public class System.Windows.Forms.MenuStrip : ToolStrip {
    private ToolStripMenuItem _mdiWindowListItem;
    [NullableAttribute("1")]
private static object EventMenuActivate;
    [NullableAttribute("1")]
private static object EventMenuDeactivate;
    internal bool KeyboardActive { get; internal set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripCanOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
public bool CanOverflow { get; public set; }
    protected bool DefaultShowItemToolTips { get; }
    protected Padding DefaultGripMargin { get; }
    protected Size DefaultSize { get; }
    protected Padding DefaultPadding { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripGripStyle GripStyle { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripShowItemToolTipsDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool ShowItemToolTips { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripStretchDescr")]
public bool Stretch { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[SRDescriptionAttribute("MenuStripMdiWindowListItem")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.MdiWindowListItemConverter")]
public ToolStripMenuItem MdiWindowListItem { get; public set; }
    private static MenuStrip();
    internal virtual bool get_KeyboardActive();
    internal virtual void set_KeyboardActive(bool value);
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    protected virtual bool get_DefaultShowItemToolTips();
    protected virtual Padding get_DefaultGripMargin();
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultPadding();
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public void add_MenuActivate(EventHandler value);
    public void remove_MenuActivate(EventHandler value);
    public void add_MenuDeactivate(EventHandler value);
    public void remove_MenuDeactivate(EventHandler value);
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    public bool get_Stretch();
    public void set_Stretch(bool value);
    public ToolStripMenuItem get_MdiWindowListItem();
    public void set_MdiWindowListItem(ToolStripMenuItem value);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    internal virtual ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction, bool rtlAware);
    [NullableContextAttribute("1")]
protected virtual void OnMenuActivate(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMenuDeactivate(EventArgs e);
    internal bool OnMenuKey();
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MenuTimer : object {
    [NullableAttribute("1")]
private Timer _autoMenuExpandTimer;
    private ToolStripMenuItem currentItem;
    private ToolStripMenuItem _fromItem;
    private bool _inTransition;
    private int _quickShow;
    private int _slowShow;
    private ToolStripMenuItem CurrentItem { get; private set; }
    public bool InTransition { get; public set; }
    private ToolStripMenuItem get_CurrentItem();
    private void set_CurrentItem(ToolStripMenuItem value);
    public bool get_InTransition();
    public void set_InTransition(bool value);
    [NullableContextAttribute("1")]
public void Start(ToolStripMenuItem item);
    private void StartCore(ToolStripMenuItem item);
    [NullableContextAttribute("1")]
public void Transition(ToolStripMenuItem fromItem, ToolStripMenuItem toItem);
    public void Cancel();
    public void Cancel(ToolStripMenuItem item);
    private void CancelCore();
    private void EndTransition(bool forceClose);
    [NullableContextAttribute("1")]
internal void HandleToolStripMouseLeave(ToolStrip toolStrip);
    [NullableContextAttribute("1")]
private void OnTick(object sender, EventArgs e);
}
public enum System.Windows.Forms.MergeAction : Enum {
    public int value__;
    public static MergeAction Append;
    public static MergeAction Insert;
    public static MergeAction Replace;
    public static MergeAction Remove;
    public static MergeAction MatchOnly;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MergeHistory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<MergeHistoryItem> _mergeHistoryItemsStack;
    [CompilerGeneratedAttribute]
private ToolStrip <MergedToolStrip>k__BackingField;
    public Stack`1<MergeHistoryItem> MergeHistoryItemsStack { get; }
    public ToolStrip MergedToolStrip { get; }
    public MergeHistory(ToolStrip mergedToolStrip);
    public Stack`1<MergeHistoryItem> get_MergeHistoryItemsStack();
    [CompilerGeneratedAttribute]
public ToolStrip get_MergedToolStrip();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MergeHistoryItem : object {
    [CompilerGeneratedAttribute]
private MergeAction <MergeAction>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripItem <TargetItem>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreviousIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripItemCollection <PreviousIndexCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripItemCollection <IndexCollection>k__BackingField;
    public MergeAction MergeAction { get; }
    public ToolStripItem TargetItem { get; public set; }
    public int Index { get; public set; }
    public int PreviousIndex { get; public set; }
    public ToolStripItemCollection PreviousIndexCollection { get; public set; }
    public ToolStripItemCollection IndexCollection { get; public set; }
    public MergeHistoryItem(MergeAction mergeAction);
    [CompilerGeneratedAttribute]
public MergeAction get_MergeAction();
    [CompilerGeneratedAttribute]
public ToolStripItem get_TargetItem();
    [CompilerGeneratedAttribute]
public void set_TargetItem(ToolStripItem value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_PreviousIndex();
    [CompilerGeneratedAttribute]
public void set_PreviousIndex(int value);
    [CompilerGeneratedAttribute]
public ToolStripItemCollection get_PreviousIndexCollection();
    [CompilerGeneratedAttribute]
public void set_PreviousIndexCollection(ToolStripItemCollection value);
    [CompilerGeneratedAttribute]
public ToolStripItemCollection get_IndexCollection();
    [CompilerGeneratedAttribute]
public void set_IndexCollection(ToolStripItemCollection value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.MessageBox : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static HelpInfo[] t_helpInfoTable;
    internal static HelpInfo HelpInfo { get; }
    internal static HelpInfo get_HelpInfo();
    private static MESSAGEBOX_STYLE GetMessageBoxStyle(IWin32Window owner, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, bool showHelp);
    private static void PopHelpInfo();
    [NullableContextAttribute("1")]
private static void PushHelpInfo(HelpInfo hpi);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, bool displayHelpButton);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath);
    [NullableContextAttribute("1")]
public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, string keyword);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, string keyword);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator, object param);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator, object param);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons);
    public static DialogResult Show(string text, string caption);
    public static DialogResult Show(string text);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons);
    public static DialogResult Show(IWin32Window owner, string text, string caption);
    public static DialogResult Show(IWin32Window owner, string text);
    private static DialogResult ShowCore(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, HelpInfo hpi);
    private static DialogResult ShowCore(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, bool showHelp);
}
public enum System.Windows.Forms.MessageBoxButtons : Enum {
    public int value__;
    public static MessageBoxButtons OK;
    public static MessageBoxButtons OKCancel;
    public static MessageBoxButtons AbortRetryIgnore;
    public static MessageBoxButtons YesNoCancel;
    public static MessageBoxButtons YesNo;
    public static MessageBoxButtons RetryCancel;
    public static MessageBoxButtons CancelTryContinue;
}
public enum System.Windows.Forms.MessageBoxDefaultButton : Enum {
    public int value__;
    public static MessageBoxDefaultButton Button1;
    public static MessageBoxDefaultButton Button2;
    public static MessageBoxDefaultButton Button3;
    public static MessageBoxDefaultButton Button4;
}
public enum System.Windows.Forms.MessageBoxIcon : Enum {
    public int value__;
    public static MessageBoxIcon None;
    public static MessageBoxIcon Hand;
    public static MessageBoxIcon Question;
    public static MessageBoxIcon Exclamation;
    public static MessageBoxIcon Asterisk;
    public static MessageBoxIcon Stop;
    public static MessageBoxIcon Error;
    public static MessageBoxIcon Warning;
    public static MessageBoxIcon Information;
}
[FlagsAttribute]
public enum System.Windows.Forms.MessageBoxOptions : Enum {
    public int value__;
    public static MessageBoxOptions ServiceNotification;
    public static MessageBoxOptions DefaultDesktopOnly;
    public static MessageBoxOptions RightAlign;
    public static MessageBoxOptions RtlReading;
}
public class System.Windows.Forms.MethodInvoker : MulticastDelegate {
    public MethodInvoker(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("SelectionRange")]
[DefaultEventAttribute("DateChanged")]
[DefaultBindingPropertyAttribute("SelectionRange")]
[DesignerAttribute("System.Windows.Forms.Design.MonthCalendarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionMonthCalendar")]
public class System.Windows.Forms.MonthCalendar : Control {
    private static Color s_defaultTitleBackColor;
    private static Color s_defaultTitleForeColor;
    private static Color s_trailingForeColor;
    private static int MonthsInYear;
    private static int InsertWidthSize;
    private static int InsertHeightSize;
    private static Day DefaultFirstDayOfWeek;
    private static int DefaultMaxSelectionCount;
    private static int DefaultScrollChange;
    private static Size s_defaultSingleMonthSize;
    private static int MaxScrollChange;
    private static int ExtraPadding;
    private int _scaledExtraPadding;
    private Color _titleBackColor;
    private Color _titleForeColor;
    private Color _trailingForeColor;
    private bool _showToday;
    private bool _showTodayCircle;
    private bool _showWeekNumbers;
    private bool _rightToLeftLayout;
    private Size _dimensions;
    private int _maxSelectionCount;
    private DateTime _maxDate;
    private DateTime _minDate;
    private int _scrollChange;
    private bool _todayDateSet;
    private DateTime _todaysDate;
    private DateTime _selectionStart;
    private DateTime _selectionEnd;
    private DateTime _focusedDate;
    [NullableAttribute("2")]
private SelectionRange _currentDisplayRange;
    private Day _firstDayOfWeek;
    private MONTH_CALDENDAR_MESSAGES_VIEW _mcCurView;
    private MONTH_CALDENDAR_MESSAGES_VIEW _mcOldView;
    private Int32[] _monthsOfYear;
    private int _datesToBoldMonthly;
    private List`1<DateTime> _boldDates;
    private List`1<DateTime> _annualBoldDates;
    private List`1<DateTime> _monthlyBoldDates;
    [NullableAttribute("2")]
private DateRangeEventHandler _onDateChanged;
    [NullableAttribute("2")]
private DateRangeEventHandler _onDateSelected;
    [NullableAttribute("2")]
private EventHandler _onRightToLeftLayoutChanged;
    [NullableAttribute("2")]
private EventHandler _onCalendarViewChanged;
    [NullableAttribute("2")]
private EventHandler _onDisplayRangeChanged;
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("MonthCalendarAnnuallyBoldedDatesDescr")]
public DateTime[] AnnuallyBoldedDates { get; public set; }
    [SRDescriptionAttribute("MonthCalendarMonthBackColorDescr")]
public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [LocalizableAttribute("True")]
public DateTime[] BoldedDates { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("MonthCalendarDimensionsDescr")]
public Size CalendarDimensions { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Padding DefaultMargin { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MonthCalendarFirstDayOfWeekDescr")]
public Day FirstDayOfWeek { get; public set; }
    [SRDescriptionAttribute("MonthCalendarForeColorDescr")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarMaxDateDescr")]
public DateTime MaxDate { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("7")]
[SRDescriptionAttribute("MonthCalendarMaxSelectionCountDescr")]
public int MaxSelectionCount { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarMinDateDescr")]
public DateTime MinDate { get; public set; }
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("MonthCalendarMonthlyBoldedDatesDescr")]
public DateTime[] MonthlyBoldedDates { get; public set; }
    private static DateTime Now { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("MonthCalendarScrollChangeDescr")]
public int ScrollChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarSelectionEndDescr")]
public DateTime SelectionEnd { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarSelectionStartDescr")]
public DateTime SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarSelectionRangeDescr")]
[BindableAttribute("True")]
public SelectionRange SelectionRange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("MonthCalendarShowTodayDescr")]
public bool ShowToday { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("MonthCalendarShowTodayCircleDescr")]
public bool ShowTodayCircle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("MonthCalendarShowWeekNumbersDescr")]
public bool ShowWeekNumbers { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarSingleMonthSizeDescr")]
public Size SingleMonthSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("False")]
public Size Size { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarTodayDateDescr")]
public DateTime TodayDate { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarTodayDateSetDescr")]
public bool TodayDateSet { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MonthCalendarTitleBackColorDescr")]
public Color TitleBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MonthCalendarTitleForeColorDescr")]
public Color TitleForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MonthCalendarTrailingForeColorDescr")]
public Color TrailingForeColor { get; public set; }
    private static MonthCalendar();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    private void PrepareForDrawing();
    public DateTime[] get_AnnuallyBoldedDates();
    public void set_AnnuallyBoldedDates(DateTime[] value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public DateTime[] get_BoldedDates();
    public void set_BoldedDates(DateTime[] value);
    public Size get_CalendarDimensions();
    public void set_CalendarDimensions(Size value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    [NullableContextAttribute("0")]
internal void FillMonthDayStates(Span`1<UInt32> monthDayStates, SelectionRange displayRange);
    public Day get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(Day value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    [NullableContextAttribute("2")]
public void add_ImeModeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ImeModeChanged(EventHandler value);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    public int get_MaxSelectionCount();
    public void set_MaxSelectionCount(int value);
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public DateTime[] get_MonthlyBoldedDates();
    public void set_MonthlyBoldedDates(DateTime[] value);
    private static DateTime get_Now();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public void add_PaddingChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_ScrollChange();
    public void set_ScrollChange(int value);
    public DateTime get_SelectionEnd();
    public void set_SelectionEnd(DateTime value);
    public DateTime get_SelectionStart();
    public void set_SelectionStart(DateTime value);
    public SelectionRange get_SelectionRange();
    public void set_SelectionRange(SelectionRange value);
    public bool get_ShowToday();
    public void set_ShowToday(bool value);
    public bool get_ShowTodayCircle();
    public void set_ShowTodayCircle(bool value);
    public bool get_ShowWeekNumbers();
    public void set_ShowWeekNumbers(bool value);
    public Size get_SingleMonthSize();
    public Size get_Size();
    public void set_Size(Size value);
    internal virtual bool get_SupportsUiaProviders();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public void add_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextChanged(EventHandler value);
    public DateTime get_TodayDate();
    public void set_TodayDate(DateTime value);
    public bool get_TodayDateSet();
    public Color get_TitleBackColor();
    public void set_TitleBackColor(Color value);
    public Color get_TitleForeColor();
    public void set_TitleForeColor(Color value);
    public Color get_TrailingForeColor();
    public void set_TrailingForeColor(Color value);
    public void AddAnnuallyBoldedDate(DateTime date);
    public void AddBoldedDate(DateTime date);
    public void AddMonthlyBoldedDate(DateTime date);
    [NullableContextAttribute("2")]
private void add_CalendarViewChanged(EventHandler value);
    [NullableContextAttribute("2")]
private void remove_CalendarViewChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_Click(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Click(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DateChanged(DateRangeEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DateChanged(DateRangeEventHandler value);
    [NullableContextAttribute("2")]
public void add_DateSelected(DateRangeEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DateSelected(DateRangeEventHandler value);
    [NullableContextAttribute("2")]
private void add_DisplayRangeChanged(EventHandler value);
    [NullableContextAttribute("2")]
private void remove_DisplayRangeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseDoubleClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseDoubleClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void add_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void add_RightToLeftLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_RightToLeftLayoutChanged(EventHandler value);
    private void AdjustSize();
    [NullableContextAttribute("0")]
private void WriteBoldDates(Span`1<int> boldDates);
    private static bool CompareDayAndMonth(DateTime t1, DateTime t2);
    protected virtual void CreateHandle();
    private static string FormatDate(DateTime value);
    public SelectionRange GetDisplayRange(bool visible);
    private static HitArea GetHitArea(MCHITTESTINFO_HIT_FLAGS hit);
    private static int GetIndexInMonths(DateTime startDate, DateTime currentDate);
    private Size GetMinReqRect();
    private Size GetMinReqRect(int newDimensionLength, bool updateRows, bool updateCols);
    private SelectionRange GetMonthRange(UInt32 flag);
    private static int GetMonthsCountOfRange(SelectionRange displayRange);
    private int GetPreferredHeight(int height, bool updateRows);
    private int GetPreferredWidth(int width, bool updateCols);
    public HitTestInfo HitTest(int x, int y);
    public HitTestInfo HitTest(Point point);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    private void OnCalendarViewChanged(EventArgs e);
    protected virtual void OnDateChanged(DateRangeEventArgs drevent);
    protected virtual void OnDateSelected(DateRangeEventArgs drevent);
    protected virtual void OnGotFocus(EventArgs e);
    private void OnDisplayRangeChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    internal virtual void ReleaseUiaProvider(HWND handle);
    public void RemoveAllAnnuallyBoldedDates();
    public void RemoveAllBoldedDates();
    public void RemoveAllMonthlyBoldedDates();
    public void RemoveAnnuallyBoldedDate(DateTime date);
    public void RemoveBoldedDate(DateTime date);
    public void RemoveMonthlyBoldedDate(DateTime date);
    private void ResetAnnuallyBoldedDates();
    private void ResetBoldedDates();
    private void ResetCalendarDimensions();
    private void ResetMaxDate();
    private void ResetMinDate();
    private void ResetMonthlyBoldedDates();
    private void ResetSelectionRange();
    private void ResetTrailingForeColor();
    private void ResetTitleForeColor();
    private void ResetTitleBackColor();
    private void ResetTodayDate();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void SetControlColor(UInt32 colorIndex, Color value);
    private void SetRange();
    private void SetRange(DateTime minDate, DateTime maxDate);
    public void SetCalendarDimensions(int x, int y);
    public void SetDate(DateTime date);
    private void SetMonthViewBoldedDates();
    public void SetSelectionRange(DateTime date1, DateTime date2);
    private void SetSelRange(DateTime lower, DateTime upper);
    private bool ShouldSerializeAnnuallyBoldedDates();
    private bool ShouldSerializeBoldedDates();
    private bool ShouldSerializeCalendarDimensions();
    private bool ShouldSerializeTrailingForeColor();
    private bool ShouldSerializeTitleForeColor();
    private bool ShouldSerializeTitleBackColor();
    private bool ShouldSerializeMonthlyBoldedDates();
    private bool ShouldSerializeMaxDate();
    private bool ShouldSerializeMinDate();
    private bool ShouldSerializeSelectionRange();
    private bool ShouldSerializeTodayDate();
    public virtual string ToString();
    public void UpdateBoldedDates();
    private void UpdateDisplayRange();
    private void UpdateTodayDate();
    private void MarshaledUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    private void UserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    private void WmDateChanged(Message& m);
    private void WmDateBold(Message& m);
    private void WmCalViewChanged(Message& m);
    private void WmDateSelected(Message& m);
    private static void WmGetDlgCode(Message& m);
    private void WmReflectCommand(Message& m);
    protected virtual void WndProc(Message& m);
}
[FlagsAttribute]
public enum System.Windows.Forms.MouseButtons : Enum {
    public int value__;
    public static MouseButtons Left;
    public static MouseButtons None;
    public static MouseButtons Right;
    public static MouseButtons Middle;
    public static MouseButtons XButton1;
    public static MouseButtons XButton2;
}
public class System.Windows.Forms.MouseEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MouseButtons <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Clicks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delta>k__BackingField;
    public MouseButtons Button { get; }
    public int Clicks { get; }
    public int X { get; }
    public int Y { get; }
    public int Delta { get; }
    public Point Location { get; }
    public MouseEventArgs(MouseButtons button, int clicks, int x, int y, int delta);
    internal MouseEventArgs(MouseButtons button, int clicks, Point location, int delta);
    [CompilerGeneratedAttribute]
public MouseButtons get_Button();
    [CompilerGeneratedAttribute]
public int get_Clicks();
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public int get_Delta();
    public Point get_Location();
}
public class System.Windows.Forms.MouseEventHandler : MulticastDelegate {
    public MouseEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MouseEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MouseEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.MouseHoverTimer : object {
    [NullableAttribute("1")]
private Timer _mouseHoverTimer;
    private ToolStripItem _currentItem;
    public void Start(ToolStripItem item);
    public void Cancel();
    public void Cancel(ToolStripItem item);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
private void OnTick(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.NativeWindow : MarshalByRefObject {
    private static TraceSwitch WndProcChoice;
    private static int InitializedFlags;
    private static int UseDebuggableWndProc;
    [ThreadStaticAttribute]
private static bool t_anyHandleCreated;
    private static bool s_anyHandleCreatedInApp;
    [ThreadStaticAttribute]
private static byte t_wndProcFlags;
    [ThreadStaticAttribute]
private static byte t_userSetProcFlags;
    private static byte s_userSetProcFlagsForApp;
    private static short s_globalID;
    private static Dictionary`2<HWND, GCHandle> s_windowHandles;
    private static Dictionary`2<short, HWND> s_windowIds;
    private static object s_internalSyncObject;
    private static object s_createWindowSyncObject;
    [NullableAttribute("2")]
private WNDPROC _windowProc;
    [NullableAttribute("0")]
private Void* _windowProcHandle;
    private static IntPtr s_defaultWindowProc;
    [NullableAttribute("0")]
private Void* _priorWindowProcHandle;
    private bool _suppressedGC;
    private bool _ownHandle;
    [NullableAttribute("2")]
private NativeWindow _nextWindow;
    private WeakReference _weakThisPtr;
    [CompilerGeneratedAttribute]
private DPI_AWARENESS_CONTEXT <DpiAwarenessContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HWND <HWND>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NativeWindow <PreviousWindow>k__BackingField;
    internal DPI_AWARENESS_CONTEXT DpiAwarenessContext { get; }
    internal static bool AnyHandleCreated { get; }
    public IntPtr Handle { get; }
    internal HWND HWND { get; private set; }
    private HWND IHandle<Windows.Win32.Foundation.HWND>.Handle { get; }
    [NullableAttribute("2")]
internal NativeWindow PreviousWindow { get; private set; }
    internal static IntPtr DefaultWindowProc { get; }
    private static int WndProcFlags { get; }
    internal static bool WndProcShouldBeDebuggable { get; }
    private static NativeWindow();
    [CompilerGeneratedAttribute]
internal DPI_AWARENESS_CONTEXT get_DpiAwarenessContext();
    protected virtual override void Finalize();
    internal void ForceExitMessageLoop();
    internal static bool get_AnyHandleCreated();
    public sealed virtual IntPtr get_Handle();
    [CompilerGeneratedAttribute]
internal HWND get_HWND();
    [CompilerGeneratedAttribute]
private void set_HWND(HWND value);
    private sealed virtual override HWND IHandle<Windows.Win32.Foundation.HWND>.get_Handle();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal NativeWindow get_PreviousWindow();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PreviousWindow(NativeWindow value);
    internal static IntPtr get_DefaultWindowProc();
    private static int get_WndProcFlags();
    internal static bool get_WndProcShouldBeDebuggable();
    private static void AddWindowToTable(HWND handle, NativeWindow window);
    internal static short CreateWindowId(IHandle`1<HWND> handle);
    public void AssignHandle(IntPtr handle);
    internal void AssignHandle(HWND hwnd, bool assignUniqueID);
    private LRESULT Callback(HWND hWnd, MessageId msg, WPARAM wparam, LPARAM lparam);
    private void CheckReleased();
    public virtual void CreateHandle(CreateParams cp);
    public void DefWndProc(Message& m);
    public virtual void DestroyHandle();
    [NullableContextAttribute("2")]
public static NativeWindow FromHandle(IntPtr handle);
    [NullableContextAttribute("2")]
private static NativeWindow GetWindowFromTable(HWND handle);
    internal static HWND GetHandleFromWindowId(short id);
    protected virtual void OnHandleChange();
    [PrePrepareMethodAttribute]
private static void OnShutdown(object sender, EventArgs e);
    protected virtual void OnThreadException(Exception e);
    public virtual void ReleaseHandle();
    private void ReleaseHandle(bool handleValid);
    private static void RemoveWindowFromDictionary(HWND hwnd, NativeWindow window);
    internal static void RemoveWindowFromIDTable(short id);
    internal static void SetUnhandledExceptionModeInternal(UnhandledExceptionMode mode, bool threadScope);
    private void UnSubclass();
    protected virtual void WndProc(Message& m);
    protected virtual void WmDpiChangedAfterParent(Message& m);
    protected virtual void WmDpiChangedBeforeParent(Message& m);
}
public class System.Windows.Forms.NavigateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Forward>k__BackingField;
    public bool Forward { get; }
    public NavigateEventArgs(bool isForward);
    [CompilerGeneratedAttribute]
public bool get_Forward();
}
public class System.Windows.Forms.NavigateEventHandler : MulticastDelegate {
    public NavigateEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NavigateEventArgs ne);
    public virtual IAsyncResult BeginInvoke(object sender, NavigateEventArgs ne, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.NodeLabelEditEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelEdit>k__BackingField;
    public TreeNode Node { get; }
    public string Label { get; }
    public bool CancelEdit { get; public set; }
    public NodeLabelEditEventArgs(TreeNode node);
    public NodeLabelEditEventArgs(TreeNode node, string label);
    [CompilerGeneratedAttribute]
public TreeNode get_Node();
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public bool get_CancelEdit();
    [CompilerGeneratedAttribute]
public void set_CancelEdit(bool value);
}
public class System.Windows.Forms.NodeLabelEditEventHandler : MulticastDelegate {
    public NodeLabelEditEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NodeLabelEditEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NodeLabelEditEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.NoneExcludedImageIndexConverter : ImageIndexConverter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Text")]
[DefaultEventAttribute("MouseDoubleClick")]
[DesignerAttribute("System.Windows.Forms.Design.NotifyIconDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionNotifyIcon")]
public class System.Windows.Forms.NotifyIcon : Component {
    internal static int MaxTextSize;
    [NullableAttribute("1")]
private static object EVENT_MOUSEDOWN;
    [NullableAttribute("1")]
private static object EVENT_MOUSEMOVE;
    [NullableAttribute("1")]
private static object EVENT_MOUSEUP;
    [NullableAttribute("1")]
private static object EVENT_CLICK;
    [NullableAttribute("1")]
private static object EVENT_DOUBLECLICK;
    [NullableAttribute("1")]
private static object EVENT_MOUSECLICK;
    [NullableAttribute("1")]
private static object EVENT_MOUSEDOUBLECLICK;
    [NullableAttribute("1")]
private static object EVENT_BALLOONTIPSHOWN;
    [NullableAttribute("1")]
private static object EVENT_BALLOONTIPCLICKED;
    [NullableAttribute("1")]
private static object EVENT_BALLOONTIPCLOSED;
    private static int WM_TRAYMOUSEMESSAGE;
    private static MessageId WM_TASKBARCREATED;
    [NullableAttribute("1")]
private object _syncObj;
    private Icon _icon;
    [NullableAttribute("1")]
private string _text;
    private UInt32 _id;
    private bool _added;
    [NullableAttribute("1")]
private NotifyIconNativeWindow _window;
    private ContextMenuStrip _contextMenuStrip;
    private ToolTipIcon _balloonTipIcon;
    [NullableAttribute("1")]
private string _balloonTipText;
    [NullableAttribute("1")]
private string _balloonTipTitle;
    private static UInt32 s_nextId;
    private object _userData;
    private bool _doubleClick;
    private bool _visible;
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconBalloonTipTextDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string BalloonTipText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("NotifyIconBalloonTipIconDescr")]
public ToolTipIcon BalloonTipIcon { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconBalloonTipTitleDescr")]
public string BalloonTipTitle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("NotifyIconMenuDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconIconDescr")]
public Icon Icon { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconTextDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("NotifyIconVisDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [NullableContextAttribute("1")]
public NotifyIcon(IContainer container);
    private static NotifyIcon();
    [NullableContextAttribute("1")]
public string get_BalloonTipText();
    [NullableContextAttribute("1")]
public void set_BalloonTipText(string value);
    public ToolTipIcon get_BalloonTipIcon();
    public void set_BalloonTipIcon(ToolTipIcon value);
    [NullableContextAttribute("1")]
public string get_BalloonTipTitle();
    [NullableContextAttribute("1")]
public void set_BalloonTipTitle(string value);
    public void add_BalloonTipClicked(EventHandler value);
    public void remove_BalloonTipClicked(EventHandler value);
    public void add_BalloonTipClosed(EventHandler value);
    public void remove_BalloonTipClosed(EventHandler value);
    public void add_BalloonTipShown(EventHandler value);
    public void remove_BalloonTipShown(EventHandler value);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    [NullableContextAttribute("1")]
public string get_Text();
    [NullableContextAttribute("1")]
public void set_Text(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public object get_Tag();
    public void set_Tag(object value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    protected virtual void Dispose(bool disposing);
    private void OnBalloonTipClicked();
    private void OnBalloonTipClosed();
    private void OnBalloonTipShown();
    [NullableContextAttribute("1")]
private void OnClick(EventArgs e);
    [NullableContextAttribute("1")]
private void OnDoubleClick(EventArgs e);
    [NullableContextAttribute("1")]
private void OnMouseClick(MouseEventArgs mea);
    [NullableContextAttribute("1")]
private void OnMouseDoubleClick(MouseEventArgs mea);
    [NullableContextAttribute("1")]
private void OnMouseDown(MouseEventArgs e);
    [NullableContextAttribute("1")]
private void OnMouseMove(MouseEventArgs e);
    [NullableContextAttribute("1")]
private void OnMouseUp(MouseEventArgs e);
    public void ShowBalloonTip(int timeout);
    [NullableContextAttribute("1")]
public void ShowBalloonTip(int timeout, string tipTitle, string tipText, ToolTipIcon tipIcon);
    private void ShowContextMenu();
    private void UpdateIcon(bool showIconInTray);
    private void WmMouseDown(MouseButtons button, int clicks);
    private void WmMouseMove();
    private void WmMouseUp(MouseButtons button);
    private void WmTaskbarCreated();
    private void WndProc(Message& msg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("ValueChanged")]
[DefaultBindingPropertyAttribute("Value")]
[SRDescriptionAttribute("DescriptionNumericUpDown")]
public class System.Windows.Forms.NumericUpDown : UpDownBase {
    [DecimalConstantAttribute("0", "0", "0", "0", "0")]
private static decimal DefaultValue;
    [DecimalConstantAttribute("0", "0", "0", "0", "0")]
private static decimal DefaultMinimum;
    [DecimalConstantAttribute("0", "0", "0", "0", "100")]
private static decimal DefaultMaximum;
    private static int DefaultDecimalPlaces;
    [DecimalConstantAttribute("0", "0", "0", "0", "1")]
private static decimal DefaultIncrement;
    private static bool DefaultThousandsSeparator;
    private static bool DefaultHexadecimal;
    private static int InvalidValue;
    private int _decimalPlaces;
    private decimal _increment;
    private bool _thousandsSeparator;
    private decimal _minimum;
    private decimal _maximum;
    private bool _hexadecimal;
    private decimal _currentValue;
    private bool _currentValueChanged;
    [NullableAttribute("2")]
private EventHandler _onValueChanged;
    private bool _initializing;
    [NullableAttribute("2")]
private NumericUpDownAccelerationCollection _accelerations;
    private int _accelerationsCurrentIndex;
    private long _buttonPressedStartTime;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public NumericUpDownAccelerationCollection Accelerations { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("NumericUpDownDecimalPlacesDescr")]
public int DecimalPlaces { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("NumericUpDownHexadecimalDescr")]
public bool Hexadecimal { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("NumericUpDownIncrementDescr")]
public decimal Increment { get; public set; }
    [SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("NumericUpDownMaximumDescr")]
public decimal Maximum { get; public set; }
    [SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("NumericUpDownMinimumDescr")]
public decimal Minimum { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [MemberNotNullWhenAttribute("True", "_accelerations")]
private bool Spinning { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("NumericUpDownThousandsSeparatorDescr")]
public bool ThousandsSeparator { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("NumericUpDownValueDescr")]
public decimal Value { get; public set; }
    internal bool SupportsUiaProviders { get; }
    private static NumericUpDown();
    public NumericUpDownAccelerationCollection get_Accelerations();
    public int get_DecimalPlaces();
    public void set_DecimalPlaces(int value);
    public bool get_Hexadecimal();
    public void set_Hexadecimal(bool value);
    public decimal get_Increment();
    public void set_Increment(decimal value);
    public decimal get_Maximum();
    public void set_Maximum(decimal value);
    public decimal get_Minimum();
    public void set_Minimum(decimal value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public void add_PaddingChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_PaddingChanged(EventHandler value);
    [MemberNotNullWhenAttribute("True", "_accelerations")]
private bool get_Spinning();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public void add_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextChanged(EventHandler value);
    public bool get_ThousandsSeparator();
    public void set_ThousandsSeparator(bool value);
    public decimal get_Value();
    public void set_Value(decimal value);
    [NullableContextAttribute("2")]
public void add_ValueChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ValueChanged(EventHandler value);
    public sealed virtual void BeginInit();
    private decimal Constrain(decimal value);
    public virtual void DownButton();
    public sealed virtual void EndInit();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnTextBoxKeyPress(object source, KeyPressEventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    internal virtual void OnStartTimer();
    internal virtual void OnStopTimer();
    protected void ParseEditText();
    private void SetNextAcceleration();
    private void ResetIncrement();
    private void ResetMaximum();
    private void ResetMinimum();
    private void ResetValue();
    private bool ShouldSerializeIncrement();
    private bool ShouldSerializeMaximum();
    private bool ShouldSerializeMinimum();
    private bool ShouldSerializeValue();
    private void StartAcceleration();
    private void StopAcceleration();
    internal virtual bool get_SupportsUiaProviders();
    public virtual string ToString();
    public virtual void UpButton();
    private string GetNumberText(decimal num);
    protected virtual void UpdateEditText();
    protected virtual void ValidateEditText();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    private int GetLargestDigit(int start, int end);
}
public class System.Windows.Forms.NumericUpDownAcceleration : object {
    private int _seconds;
    private decimal _increment;
    public int Seconds { get; public set; }
    public decimal Increment { get; public set; }
    public NumericUpDownAcceleration(int seconds, decimal increment);
    public int get_Seconds();
    public void set_Seconds(int value);
    public decimal get_Increment();
    public void set_Increment(decimal value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.NumericUpDownAccelerationCollection : MarshalByRefObject {
    private List`1<NumericUpDownAcceleration> _items;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NumericUpDownAcceleration Item { get; }
    public sealed virtual void Add(NumericUpDownAcceleration acceleration);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NumericUpDownAcceleration acceleration);
    public sealed virtual void CopyTo(NumericUpDownAcceleration[] array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(NumericUpDownAcceleration acceleration);
    private sealed virtual override IEnumerator`1<NumericUpDownAcceleration> System.Collections.Generic.IEnumerable<System.Windows.Forms.NumericUpDownAcceleration>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void AddRange(NumericUpDownAcceleration[] accelerations);
    public NumericUpDownAcceleration get_Item(int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.OpacityConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SRDescriptionAttribute("DescriptionOpenFileDialog")]
public class System.Windows.Forms.OpenFileDialog : FileDialog {
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("OFDcheckFileExistsDescr")]
public bool CheckFileExists { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OFDmultiSelectDescr")]
public bool Multiselect { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OFDreadOnlyCheckedDescr")]
public bool ReadOnlyChecked { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("OpenFileDialogSelectReadOnlyDescr")]
public bool SelectReadOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OpenFileDialogShowPreviewDescr")]
public bool ShowPreview { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OFDshowReadOnlyDescr")]
public bool ShowReadOnly { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string SafeFileName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] SafeFileNames { get; }
    private protected bool SettingsSupportVistaDialog { get; }
    public virtual bool get_CheckFileExists();
    public virtual void set_CheckFileExists(bool value);
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    public bool get_ReadOnlyChecked();
    public void set_ReadOnlyChecked(bool value);
    public bool get_SelectReadOnly();
    public void set_SelectReadOnly(bool value);
    public bool get_ShowPreview();
    public void set_ShowPreview(bool value);
    public bool get_ShowReadOnly();
    public void set_ShowReadOnly(bool value);
    public Stream OpenFile();
    public virtual void Reset();
    [NullableContextAttribute("0")]
private protected virtual bool RunFileDialog(OPENFILENAME* ofn);
    [NullableContextAttribute("0")]
private protected virtual String[] ProcessVistaFiles(IFileDialog* dialog);
    [NullableContextAttribute("0")]
private protected virtual ComScope`1<IFileDialog> CreateVistaDialog();
    public string get_SafeFileName();
    public String[] get_SafeFileNames();
    private protected virtual bool get_SettingsSupportVistaDialog();
}
public enum System.Windows.Forms.Orientation : Enum {
    public int value__;
    public static Orientation Horizontal;
    public static Orientation Vertical;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.OSFeature : FeatureSupport {
    public static object LayeredWindows;
    public static object Themes;
    [NullableAttribute("2")]
private static OSFeature _feature;
    public static OSFeature Feature { get; }
    private static OSFeature();
    public static OSFeature get_Feature();
    public virtual Version GetVersionPresent(object feature);
    public static bool IsPresent(SystemParameter enumVal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.OwnedObjectExtensions : object {
    [ExtensionAttribute]
public static bool TryGetOwnerAs(IOwnedObject`1<TOwner> ownedObject, TAs& ownerAs);
    [ExtensionAttribute]
public static bool IsOwnerHandleCreated(IOwnedObject`1<TOwner> ownedObject, TAs& ownerAs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.OwnerDrawPropertyBag : MarshalByRefObject {
    private FontHandleWrapper _fontWrapper;
    [NullableAttribute("1")]
private static object s_internalSyncObject;
    [CompilerGeneratedAttribute]
private Font <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BackColor>k__BackingField;
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    internal HFONT FontHandle { get; }
    [NullableContextAttribute("1")]
protected OwnerDrawPropertyBag(SerializationInfo info, StreamingContext context);
    private static OwnerDrawPropertyBag();
    [CompilerGeneratedAttribute]
public Font get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(Font value);
    [CompilerGeneratedAttribute]
public Color get_ForeColor();
    [CompilerGeneratedAttribute]
public void set_ForeColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(Color value);
    internal HFONT get_FontHandle();
    public virtual bool IsEmpty();
    [NullableContextAttribute("1")]
public static OwnerDrawPropertyBag Copy(OwnerDrawPropertyBag value);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Document")]
[SRDescriptionAttribute("DescriptionPageSetupDialog")]
public class System.Windows.Forms.PageSetupDialog : CommonDialog {
    private PrintDocument _printDocument;
    private PageSettings _pageSettings;
    private PrinterSettings _printerSettings;
    private Margins _minMargins;
    [CompilerGeneratedAttribute]
private bool <AllowMargins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPaper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPrinter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMetric>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNetwork>k__BackingField;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowMarginsDescr")]
public bool AllowMargins { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowOrientationDescr")]
public bool AllowOrientation { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowPaperDescr")]
public bool AllowPaper { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowPrinterDescr")]
public bool AllowPrinter { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PDdocumentDescr")]
public PrintDocument Document { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PSDenableMetricDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool EnableMetric { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("PSDminMarginsDescr")]
public Margins MinMargins { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PSDpageSettingsDescr")]
public PageSettings PageSettings { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PSDprinterSettingsDescr")]
public PrinterSettings PrinterSettings { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PSDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDshowNetworkDescr")]
public bool ShowNetwork { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowMargins();
    [CompilerGeneratedAttribute]
public void set_AllowMargins(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowOrientation();
    [CompilerGeneratedAttribute]
public void set_AllowOrientation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPaper();
    [CompilerGeneratedAttribute]
public void set_AllowPaper(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPrinter();
    [CompilerGeneratedAttribute]
public void set_AllowPrinter(bool value);
    public PrintDocument get_Document();
    public void set_Document(PrintDocument value);
    [CompilerGeneratedAttribute]
public bool get_EnableMetric();
    [CompilerGeneratedAttribute]
public void set_EnableMetric(bool value);
    public Margins get_MinMargins();
    public void set_MinMargins(Margins value);
    public PageSettings get_PageSettings();
    public void set_PageSettings(PageSettings value);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    [CompilerGeneratedAttribute]
public bool get_ShowHelp();
    [CompilerGeneratedAttribute]
public void set_ShowHelp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowNetwork();
    [CompilerGeneratedAttribute]
public void set_ShowNetwork(bool value);
    private PSD GetFlags();
    public virtual void Reset();
    private void ResetMinMargins();
    private bool ShouldSerializeMinMargins();
    [NullableContextAttribute("1")]
private static void UpdateSettings(PAGESETUPDLGW data, PageSettings pageSettings, PrinterSettings printerSettings);
    protected virtual bool RunDialog(IntPtr hwndOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.PaintEventArgs : EventArgs {
    private DrawingEventArgs _event;
    [NullableAttribute("2")]
private GraphicsState _savedGraphicsState;
    public Rectangle ClipRectangle { get; }
    public Graphics Graphics { get; }
    internal Graphics GraphicsInternal { get; }
    internal HDC HDC { get; }
    private bool System.Windows.Forms.IGraphicsHdcProvider.IsGraphicsStateClean { get; }
    public PaintEventArgs(Graphics graphics, Rectangle clipRect);
    internal PaintEventArgs(PaintEventArgs e, Rectangle clipRect);
    internal PaintEventArgs(Graphics graphics, Rectangle clipRect, DrawingEventFlags flags);
    internal PaintEventArgs(HDC hdc, Rectangle clipRect, DrawingEventFlags flags);
    protected virtual override void Finalize();
    public Rectangle get_ClipRectangle();
    public Graphics get_Graphics();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void ResetGraphics();
    private void SaveStateIfNeeded(Graphics graphics);
    internal Graphics get_GraphicsInternal();
    internal HDC get_HDC();
    private sealed virtual override IntPtr System.Drawing.IDeviceContext.GetHdc();
    private sealed virtual override void System.Drawing.IDeviceContext.ReleaseHdc();
    private sealed virtual override HDC System.Windows.Forms.IGraphicsHdcProvider.GetHDC();
    [NullableContextAttribute("2")]
private sealed virtual override Graphics System.Windows.Forms.IGraphicsHdcProvider.GetGraphics(bool create);
    private sealed virtual override bool System.Windows.Forms.IGraphicsHdcProvider.get_IsGraphicsStateClean();
}
public class System.Windows.Forms.PaintEventHandler : MulticastDelegate {
    public PaintEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("BorderStyle")]
[DefaultEventAttribute("Paint")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.PanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionPanel")]
public class System.Windows.Forms.Panel : ScrollableControl {
    private BorderStyle _borderStyle;
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("PanelBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    internal bool SupportsUiaProviders { get; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    internal virtual bool get_SupportsUiaProviders();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnResize(EventArgs eventargs);
    private protected virtual void PrintToMetaFileRecursive(HDC hDC, IntPtr lParam, Rectangle bounds);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
}
[DefaultPropertyAttribute("Image")]
[DefaultBindingPropertyAttribute("Image")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.PictureBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionPictureBox")]
public class System.Windows.Forms.PictureBox : Control {
    private static bool s_useWebRequest;
    private BorderStyle _borderStyle;
    private Image _image;
    private PictureBoxSizeMode _sizeMode;
    private Size _savedSize;
    private bool _currentlyAnimating;
    private AsyncOperation _currentAsyncLoadOperation;
    private FileStream _fileStream;
    private string _imageLocation;
    private Image _initialImage;
    private Image errorImage;
    private int _contentLength;
    private int _totalBytesRead;
    private MemoryStream _tempDownloadStream;
    private static int ReadBlockSize;
    private Byte[] _readBuffer;
    private ImageInstallationType _imageInstallationType;
    private SendOrPostCallback _loadCompletedDelegate;
    private SendOrPostCallback _loadProgressDelegate;
    private bool _handleValid;
    private object _internalSyncObject;
    private Image _defaultInitialImage;
    private Image _defaultErrorImage;
    [ThreadStaticAttribute]
private static Image t_defaultInitialImageForThread;
    [ThreadStaticAttribute]
private static Image t_defaultErrorImageForThread;
    private static object s_loadCompletedKey;
    private static object s_loadProgressChangedKey;
    private static int AsyncOperationInProgressState;
    private static int CancellationPendingState;
    private static int UseDefaultInitialImageState;
    private static int UseDefaultErrorImageState;
    private static int WaitOnLoadState;
    private static int NeedToLoadImageLocationState;
    private static int InInitializationState;
    private BitVector32 _pictureBoxState;
    private StreamReader _localImageStreamReader;
    private Stream _uriImageStream;
    private static object EVENT_SIZEMODECHANGED;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("PictureBoxBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("PictureBoxErrorImageDescr")]
public Image ErrorImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("PictureBoxImageDescr")]
public Image Image { get; public set; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("PictureBoxImageLocationDescr")]
public string ImageLocation { get; public set; }
    private Rectangle ImageRectangle { get; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("PictureBoxInitialImageDescr")]
public Image InitialImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("PictureBoxSizeModeDescr")]
[RefreshPropertiesAttribute("2")]
public PictureBoxSizeMode SizeMode { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PictureBoxWaitOnLoadDescr")]
public bool WaitOnLoad { get; public set; }
    private static PictureBox();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    private static Uri CalculateUri(string path);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxCancelAsyncDescr")]
public void CancelAsync();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    public Image get_ErrorImage();
    public void set_ErrorImage(Image value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public Image get_Image();
    public void set_Image(Image value);
    public string get_ImageLocation();
    public void set_ImageLocation(string value);
    private Rectangle get_ImageRectangle();
    private Rectangle ImageRectangleFromSizeMode(PictureBoxSizeMode mode);
    public Image get_InitialImage();
    public void set_InitialImage(Image value);
    private void InstallNewImage(Image value, ImageInstallationType installationType);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoad0Descr")]
public void Load();
    private void LoadImageViaWebClient();
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoad1Descr")]
public void Load(string url);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoadAsync0Descr")]
public void LoadAsync();
    private void LoadFromFileAsync();
    private void StartLoadViaWebRequest();
    private void PostCompleted(Exception error, bool cancelled);
    private void LoadCompletedDelegate(object arg);
    private void LoadProgressDelegate(object arg);
    private void GetResponseCallback(IAsyncResult result);
    private void ReadCallBack(IAsyncResult result);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoadAsync1Descr")]
public void LoadAsync(string url);
    public void add_LoadCompleted(AsyncCompletedEventHandler value);
    public void remove_LoadCompleted(AsyncCompletedEventHandler value);
    public void add_LoadProgressChanged(ProgressChangedEventHandler value);
    public void remove_LoadProgressChanged(ProgressChangedEventHandler value);
    private void ResetInitialImage();
    private void ResetErrorImage();
    private void ResetImage();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    private bool ShouldSerializeInitialImage();
    private bool ShouldSerializeErrorImage();
    private bool ShouldSerializeImage();
    public PictureBoxSizeMode get_SizeMode();
    public void set_SizeMode(PictureBoxSizeMode value);
    public void add_SizeModeChanged(EventHandler value);
    public void remove_SizeModeChanged(EventHandler value);
    internal virtual bool get_SupportsUiaProviders();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    private void AdjustSize();
    private void Animate();
    private void StopAnimate();
    private void Animate(bool animate);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    private void DisposeImageStream();
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    protected virtual void OnEnabledChanged(EventArgs e);
    private void OnFrameChanged(object o, EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnLoadCompleted(AsyncCompletedEventArgs e);
    protected virtual void OnLoadProgressChanged(ProgressChangedEventArgs e);
    protected virtual void OnPaint(PaintEventArgs pe);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnSizeModeChanged(EventArgs e);
    public virtual string ToString();
    public bool get_WaitOnLoad();
    public void set_WaitOnLoad(bool value);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private static bool UseWebRequest();
}
public enum System.Windows.Forms.PictureBoxSizeMode : Enum {
    public int value__;
    public static PictureBoxSizeMode Normal;
    public static PictureBoxSizeMode StretchImage;
    public static PictureBoxSizeMode AutoSize;
    public static PictureBoxSizeMode CenterImage;
    public static PictureBoxSizeMode Zoom;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.PopupEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private IWin32Window <AssociatedWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Control <AssociatedControl>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <ToolTipSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBalloon>k__BackingField;
    public IWin32Window AssociatedWindow { get; }
    public Control AssociatedControl { get; }
    public Size ToolTipSize { get; public set; }
    public bool IsBalloon { get; }
    public PopupEventArgs(IWin32Window associatedWindow, Control associatedControl, bool isBalloon, Size size);
    [CompilerGeneratedAttribute]
public IWin32Window get_AssociatedWindow();
    [CompilerGeneratedAttribute]
public Control get_AssociatedControl();
    [CompilerGeneratedAttribute]
public Size get_ToolTipSize();
    [CompilerGeneratedAttribute]
public void set_ToolTipSize(Size value);
    [CompilerGeneratedAttribute]
public bool get_IsBalloon();
}
public class System.Windows.Forms.PopupEventHandler : MulticastDelegate {
    public PopupEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PopupEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PopupEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.PowerLineStatus : Enum {
    public int value__;
    public static PowerLineStatus Offline;
    public static PowerLineStatus Online;
    public static PowerLineStatus Unknown;
}
public enum System.Windows.Forms.PowerState : Enum {
    public int value__;
    public static PowerState Suspend;
    public static PowerState Hibernate;
}
public class System.Windows.Forms.PowerStatus : object {
    private SYSTEM_POWER_STATUS _systemPowerStatus;
    public PowerLineStatus PowerLineStatus { get; }
    public BatteryChargeStatus BatteryChargeStatus { get; }
    public int BatteryFullLifetime { get; }
    public float BatteryLifePercent { get; }
    public int BatteryLifeRemaining { get; }
    public PowerLineStatus get_PowerLineStatus();
    public BatteryChargeStatus get_BatteryChargeStatus();
    public int get_BatteryFullLifetime();
    public float get_BatteryLifePercent();
    public int get_BatteryLifeRemaining();
    private void UpdateSystemPowerStatus();
}
public enum System.Windows.Forms.PreProcessControlState : Enum {
    public int value__;
    public static PreProcessControlState MessageProcessed;
    public static PreProcessControlState MessageNeeded;
    public static PreProcessControlState MessageNotNeeded;
}
public class System.Windows.Forms.PreviewKeyDownEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Keys <KeyData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInputKey>k__BackingField;
    public Keys KeyData { get; }
    public bool Alt { get; }
    public bool Control { get; }
    public Keys KeyCode { get; }
    public int KeyValue { get; }
    public Keys Modifiers { get; }
    public bool Shift { get; }
    public bool IsInputKey { get; public set; }
    public PreviewKeyDownEventArgs(Keys keyData);
    [CompilerGeneratedAttribute]
public Keys get_KeyData();
    public bool get_Alt();
    public bool get_Control();
    public Keys get_KeyCode();
    public int get_KeyValue();
    public Keys get_Modifiers();
    public bool get_Shift();
    [CompilerGeneratedAttribute]
public bool get_IsInputKey();
    [CompilerGeneratedAttribute]
public void set_IsInputKey(bool value);
}
public class System.Windows.Forms.PreviewKeyDownEventHandler : MulticastDelegate {
    public PreviewKeyDownEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PreviewKeyDownEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PreviewKeyDownEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.PrintControllerWithStatusDialog : PrintController {
    private PrintController _underlyingController;
    [NullableAttribute("2")]
private PrintDocument _document;
    [NullableAttribute("2")]
private BackgroundThread _backgroundThread;
    private int _pageNumber;
    private string _dialogTitle;
    public bool IsPreview { get; }
    public PrintControllerWithStatusDialog(PrintController underlyingController);
    public PrintControllerWithStatusDialog(PrintController underlyingController, string dialogTitle);
    public virtual bool get_IsPreview();
    public virtual void OnStartPrint(PrintDocument document, PrintEventArgs e);
    public virtual Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPrint(PrintDocument document, PrintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Document")]
[SRDescriptionAttribute("DescriptionPrintDialog")]
[DesignerAttribute("System.Windows.Forms.Design.PrintDialogDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.PrintDialog : CommonDialog {
    private static PD printRangeMask;
    [NullableAttribute("2")]
private PrinterSettings _printerSettings;
    [NullableAttribute("2")]
private PrintDocument _printDocument;
    private bool _allowCurrentPage;
    private bool _allowPages;
    private bool _allowPrintToFile;
    private bool _allowSelection;
    private bool _printToFile;
    private bool _showHelp;
    private bool _showNetwork;
    [CompilerGeneratedAttribute]
private bool <UseEXDialog>k__BackingField;
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDallowCurrentPageDescr")]
public bool AllowCurrentPage { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDallowPagesDescr")]
public bool AllowSomePages { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PDallowPrintToFileDescr")]
public bool AllowPrintToFile { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDallowSelectionDescr")]
public bool AllowSelection { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PDdocumentDescr")]
public PrintDocument Document { get; public set; }
    private PageSettings PageSettings { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PDprinterSettingsDescr")]
public PrinterSettings PrinterSettings { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDprintToFileDescr")]
public bool PrintToFile { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PDshowNetworkDescr")]
public bool ShowNetwork { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDuseEXDialog")]
public bool UseEXDialog { get; public set; }
    public bool get_AllowCurrentPage();
    public void set_AllowCurrentPage(bool value);
    public bool get_AllowSomePages();
    public void set_AllowSomePages(bool value);
    public bool get_AllowPrintToFile();
    public void set_AllowPrintToFile(bool value);
    public bool get_AllowSelection();
    public void set_AllowSelection(bool value);
    [NullableContextAttribute("2")]
public PrintDocument get_Document();
    [NullableContextAttribute("2")]
public void set_Document(PrintDocument value);
    private PageSettings get_PageSettings();
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    public bool get_PrintToFile();
    public void set_PrintToFile(bool value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    public bool get_ShowNetwork();
    public void set_ShowNetwork(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseEXDialog();
    [CompilerGeneratedAttribute]
public void set_UseEXDialog(bool value);
    private PD GetFlags();
    public virtual void Reset();
    internal static PRINTDLGEX CreatePRINTDLGEX();
    protected virtual bool RunDialog(IntPtr hwndOwner);
    private bool ShowPrintDialog(IntPtr hwndOwner);
    private bool ShowPrintDialog(IntPtr hwndOwner, PRINTDLGEX data);
    private static void UpdatePrinterSettings(IntPtr hDevMode, IntPtr hDevNames, short copies, PD flags, PrinterSettings settings, PageSettings pageSettings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Document")]
[SRDescriptionAttribute("DescriptionPrintPreviewControl")]
public class System.Windows.Forms.PrintPreviewControl : Control {
    private static int ScrollSmallChange;
    private static double DefaultZoom;
    private static int Border;
    [NullableAttribute("2")]
private PrintDocument _document;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private PreviewPageInfo[] _pageInfo;
    private int _startPage;
    private int _rows;
    private int _columns;
    private bool _autoZoom;
    private Size _virtualSize;
    private Point _position;
    private int _focusHOffset;
    private int _focusVOffset;
    private HScrollBar _hScrollBar;
    private VScrollBar _vScrollBar;
    private bool _scrollLayoutPending;
    private bool _layoutOk;
    private Size _imageSize;
    private Point _screenDPI;
    private double _zoom;
    private bool _pageInfoCalcPending;
    private bool _exceptionPrinting;
    [CompilerGeneratedAttribute]
private bool <UseAntiAlias>k__BackingField;
    private static object EVENT_STARTPAGECHANGED;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PrintPreviewAntiAliasDescr")]
public bool UseAntiAlias { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PrintPreviewAutoZoomDescr")]
public bool AutoZoom { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("PrintPreviewZoomDescr")]
[DefaultValueAttribute("0,3")]
public double Zoom { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PrintPreviewDocumentDescr")]
public PrintDocument Document { get; public set; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("PrintPreviewRowsDescr")]
[SRCategoryAttribute("CatBehavior")]
public int Rows { get; public set; }
    [DefaultValueAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("PrintPreviewColumnsDescr")]
public int Columns { get; public set; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("PrintPreviewStartPageDescr")]
[SRCategoryAttribute("CatBehavior")]
public int StartPage { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[DispIdAttribute("-516")]
public bool TabStop { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWithScrollbarsVirtualSizeDescr")]
private Size VirtualSize { get; private set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWithScrollbarsPositionDescr")]
private Point Position { get; private set; }
    internal double VerticalViewSize { get; }
    internal double HorizontalViewSize { get; }
    private Rectangle InnerClientRectangle { get; }
    private Rectangle InsideRectangle { get; }
    private Rectangle FocusRectangle { get; }
    private Rectangle ResizeBoxRectangle { get; }
    private static PrintPreviewControl();
    [CompilerGeneratedAttribute]
public bool get_UseAntiAlias();
    [CompilerGeneratedAttribute]
public void set_UseAntiAlias(bool value);
    public bool get_AutoZoom();
    public void set_AutoZoom(bool value);
    public double get_Zoom();
    public void set_Zoom(double value);
    [NullableContextAttribute("2")]
public PrintDocument get_Document();
    [NullableContextAttribute("2")]
public void set_Document(PrintDocument value);
    public int get_Rows();
    public void set_Rows(int value);
    public int get_Columns();
    public void set_Columns(int value);
    public int get_StartPage();
    public void set_StartPage(int value);
    [NullableContextAttribute("2")]
public void add_StartPageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_StartPageChanged(EventHandler value);
    protected virtual void OnStartPageChanged(EventArgs e);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public void add_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    internal virtual bool ShouldSerializeBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    internal virtual bool ShouldSerializeForeColor();
    internal virtual bool get_SupportsUiaProviders();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnResize(EventArgs eventargs);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
    private Size get_VirtualSize();
    private void set_VirtualSize(Size value);
    private Point get_Position();
    private void set_Position(Point value);
    internal double get_VerticalViewSize();
    internal double get_HorizontalViewSize();
    private Rectangle get_InnerClientRectangle();
    private Rectangle get_InsideRectangle();
    private Rectangle get_FocusRectangle();
    private Rectangle get_ResizeBoxRectangle();
    private void ComputeLayout();
    private void ComputePreview();
    private void InvalidateLayout();
    public void InvalidatePreview();
    private void CalculatePageInfo();
    private void DrawMessage(Graphics g, Rectangle rect, bool isExceptionPrinting, bool isHighContrast);
    private void DrawPages(Graphics g, Rectangle rect, PreviewPageInfo[] pages, Brush backBrush);
    private void PaintResizeBox(PaintEventArgs e, bool isHighContrast);
    private void PaintFocus(PaintEventArgs e, bool isHighContrast);
    private Color GetBackColor(bool isHighContract);
    private static int PixelsToPhysical(int pixels, int dpi);
    private static Size PixelsToPhysical(Size pixels, Point dpi);
    private static int PhysicalToPixels(int physicalSize, int dpi);
    private static Size PhysicalToPixels(Size physical, Point dpi);
    private void SetPositionNoInvalidate(Point value);
    internal void SetVirtualSizeNoInvalidate(Size value);
    private void LayoutScrollBars();
    private void scrollBar_ValueChanged(object sender, EventArgs e);
    private void WmKeyDown(Message& msg);
    protected virtual void WndProc(Message& m);
    [CompilerGeneratedAttribute]
internal static int <SetPositionNoInvalidate>g__Clamp|107_0(int value, int min, int max);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`2<bool, bool> <LayoutScrollBars>g__IsScrollNeeded|109_0(Size displaySize);
    [CompilerGeneratedAttribute]
internal static void <LayoutScrollBars>g__AdjustScroll|109_1(ScrollBar scrollBar, int virtualDimension, int displayDimension, int offset);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("System.ComponentModel.Design.ComponentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignTimeVisibleAttribute("True")]
[DefaultPropertyAttribute("Document")]
[ToolboxItemFilterAttribute("System.Windows.Forms.Control.TopLevel")]
[ToolboxItemAttribute("True")]
[SRDescriptionAttribute("DescriptionPrintPreviewDialog")]
public class System.Windows.Forms.PrintPreviewDialog : Form {
    [NullableAttribute("1")]
private PrintPreviewControl _previewControl;
    [NullableAttribute("1")]
private ToolStrip _toolStrip1;
    [NullableAttribute("1")]
private ToolStripNumericUpDown _pageCounterItem;
    [NullableAttribute("1")]
private NumericUpDown _pageCounter;
    [NullableAttribute("1")]
private ToolStripButton _printToolStripButton;
    [NullableAttribute("1")]
private ToolStripSplitButton _zoomToolStripSplitButton;
    [NullableAttribute("1")]
private ToolStripMenuItem _autoToolStripMenuItem;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem1;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem2;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem3;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem4;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem5;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem6;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem7;
    [NullableAttribute("1")]
private ToolStripMenuItem _toolStripMenuItem8;
    [NullableAttribute("1")]
private ToolStripSeparator _separatorToolStripSeparator;
    [NullableAttribute("1")]
private PrintPreviewDialogToolStripButton _onePageToolStripButton;
    [NullableAttribute("1")]
private PrintPreviewDialogToolStripButton _twoPagesToolStripButton;
    [NullableAttribute("1")]
private PrintPreviewDialogToolStripButton _threePagesToolStripButton;
    [NullableAttribute("1")]
private PrintPreviewDialogToolStripButton _fourPagesToolStripButton;
    [NullableAttribute("1")]
private PrintPreviewDialogToolStripButton _sixPagesToolStripButton;
    [NullableAttribute("1")]
private ToolStripSeparator _separatorToolStripSeparator1;
    [NullableAttribute("1")]
private ToolStripButton _closeToolStripButton;
    [NullableAttribute("1")]
private ToolStripLabel _pageToolStripLabel;
    [NullableAttribute("1")]
private ImageList _imageList;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public IButtonControl AcceptButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScale { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AutoValidate AutoValidate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public IButtonControl CancelButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool ControlBox { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FormBorderStyle FormBorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool HelpButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Icon Icon { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsMdiContainer { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool KeyPreview { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size MaximumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool MaximizeBox { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Padding Margin { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Size MinimumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size Size { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FormStartPosition StartPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TopMost { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color TransparencyKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool UseWaitCursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FormWindowState WindowState { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AccessibleRole AccessibleRole { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string AccessibleDescription { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string AccessibleName { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ControlBindingsCollection DataBindings { get; }
    protected Size DefaultMinimumSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Point Location { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Tag { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool RightToLeftLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockStyle Dock { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockPaddingEdges DockPadding { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PrintPreviewAntiAliasDescr")]
public bool UseAntiAlias { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property has been deprecated. Use the AutoScaleDimensions property instead.  https://go.microsoft.com/fwlink/?linkid=14202")]
public Size AutoScaleBaseSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PrintPreviewDocumentDescr")]
public PrintDocument Document { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool MinimizeBox { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("PrintPreviewPrintPreviewControlDescr")]
[BrowsableAttribute("False")]
public PrintPreviewControl PrintPreviewControl { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public double Opacity { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool ShowInTaskbar { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorBrowsableAttribute("1")]
public SizeGripStyle SizeGripStyle { get; public set; }
    public IButtonControl get_AcceptButton();
    public void set_AcceptButton(IButtonControl value);
    public bool get_AutoScale();
    public void set_AutoScale(bool value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public IButtonControl get_CancelButton();
    public void set_CancelButton(IButtonControl value);
    public bool get_ControlBox();
    public void set_ControlBox(bool value);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    public FormBorderStyle get_FormBorderStyle();
    public void set_FormBorderStyle(FormBorderStyle value);
    public bool get_HelpButton();
    public void set_HelpButton(bool value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public bool get_IsMdiContainer();
    public void set_IsMdiContainer(bool value);
    public bool get_KeyPreview();
    public void set_KeyPreview(bool value);
    public Size get_MaximumSize();
    public void set_MaximumSize(Size value);
    public void add_MaximumSizeChanged(EventHandler value);
    public void remove_MaximumSizeChanged(EventHandler value);
    public bool get_MaximizeBox();
    public void set_MaximizeBox(bool value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public void add_MarginChanged(EventHandler value);
    public void remove_MarginChanged(EventHandler value);
    public Size get_MinimumSize();
    public void set_MinimumSize(Size value);
    public void add_MinimumSizeChanged(EventHandler value);
    public void remove_MinimumSizeChanged(EventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public Size get_Size();
    public void set_Size(Size value);
    public void add_SizeChanged(EventHandler value);
    public void remove_SizeChanged(EventHandler value);
    public FormStartPosition get_StartPosition();
    public void set_StartPosition(FormStartPosition value);
    public bool get_TopMost();
    public void set_TopMost(bool value);
    public Color get_TransparencyKey();
    public void set_TransparencyKey(Color value);
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
    public FormWindowState get_WindowState();
    public void set_WindowState(FormWindowState value);
    public AccessibleRole get_AccessibleRole();
    public void set_AccessibleRole(AccessibleRole value);
    public string get_AccessibleDescription();
    public void set_AccessibleDescription(string value);
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    [NullableContextAttribute("1")]
public ControlBindingsCollection get_DataBindings();
    protected virtual Size get_DefaultMinimumSize();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    [NullableContextAttribute("1")]
public virtual Cursor get_Cursor();
    [NullableContextAttribute("1")]
public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    [NullableContextAttribute("1")]
public DockPaddingEdges get_DockPadding();
    public bool get_UseAntiAlias();
    public void set_UseAntiAlias(bool value);
    public virtual Size get_AutoScaleBaseSize();
    public virtual void set_AutoScaleBaseSize(Size value);
    public PrintDocument get_Document();
    public void set_Document(PrintDocument value);
    public bool get_MinimizeBox();
    public void set_MinimizeBox(bool value);
    [NullableContextAttribute("1")]
public PrintPreviewControl get_PrintPreviewControl();
    public double get_Opacity();
    public void set_Opacity(double value);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public SizeGripStyle get_SizeGripStyle();
    public void set_SizeGripStyle(SizeGripStyle value);
    [MemberNotNullAttribute("_toolStrip1")]
[MemberNotNullAttribute("_printToolStripButton")]
[MemberNotNullAttribute("_zoomToolStripSplitButton")]
[MemberNotNullAttribute("_autoToolStripMenuItem")]
[MemberNotNullAttribute("_toolStripMenuItem1")]
[MemberNotNullAttribute("_toolStripMenuItem2")]
[MemberNotNullAttribute("_toolStripMenuItem3")]
[MemberNotNullAttribute("_toolStripMenuItem4")]
[MemberNotNullAttribute("_toolStripMenuItem5")]
[MemberNotNullAttribute("_toolStripMenuItem6")]
[MemberNotNullAttribute("_toolStripMenuItem7")]
[MemberNotNullAttribute("_toolStripMenuItem8")]
[MemberNotNullAttribute("_separatorToolStripSeparator")]
[MemberNotNullAttribute("_onePageToolStripButton")]
[MemberNotNullAttribute("_twoPagesToolStripButton")]
[MemberNotNullAttribute("_threePagesToolStripButton")]
[MemberNotNullAttribute("_fourPagesToolStripButton")]
[MemberNotNullAttribute("_sixPagesToolStripButton")]
[MemberNotNullAttribute("_separatorToolStripSeparator1")]
[MemberNotNullAttribute("_closeToolStripButton")]
[MemberNotNullAttribute("_pageCounterItem")]
[MemberNotNullAttribute("_pageCounter")]
[MemberNotNullAttribute("_pageToolStripLabel")]
private void InitForm();
    [NullableContextAttribute("1")]
protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void CreateHandle();
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessTabKey(bool forward);
    internal virtual bool ShouldSerializeAutoScaleBaseSize();
    internal virtual bool ShouldSerializeText();
    [NullableContextAttribute("1")]
private void OncloseToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void previewControl_StartPageChanged(object sender, EventArgs e);
    private void CheckZoomMenu(ToolStripMenuItem toChecked);
    [NullableContextAttribute("1")]
private void ZoomAuto(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom500(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom250(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom150(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom100(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom75(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom50(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom25(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void Zoom10(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
private void OncloseToolStripButtonPaint(object sender, PaintEventArgs e);
    [NullableContextAttribute("1")]
private void OnprintToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnzoomToolStripSplitButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnonepageToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OntwopagesToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnthreepagesToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnfourpagesToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void OnsixpagesToolStripButtonClick(object sender, EventArgs e);
    [NullableContextAttribute("1")]
private void UpdownMove(object sender, EventArgs eventargs);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <ProcessDialogKey>g__PerformPageToolStripButtonClick|274_0(PrintPreviewDialogToolStripButton pageToolStripButton);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ProfessionalColors : object {
    [ThreadStaticAttribute]
private static ProfessionalColorTable t_professionalColorTable;
    [ThreadStaticAttribute]
private static string t_colorScheme;
    [ThreadStaticAttribute]
private static object t_colorFreshnessKey;
    [NullableAttribute("1")]
internal static ProfessionalColorTable ColorTable { get; }
    internal static string ColorScheme { get; }
    internal static object ColorFreshnessKey { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightDescr")]
public static Color ButtonSelectedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightBorderDescr")]
public static Color ButtonSelectedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightDescr")]
public static Color ButtonPressedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightBorderDescr")]
public static Color ButtonPressedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightDescr")]
public static Color ButtonCheckedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightBorderDescr")]
public static Color ButtonCheckedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedBorderDescr")]
public static Color ButtonPressedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedBorderDescr")]
public static Color ButtonSelectedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientBeginDescr")]
public static Color ButtonCheckedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientMiddleDescr")]
public static Color ButtonCheckedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientEndDescr")]
public static Color ButtonCheckedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientBeginDescr")]
public static Color ButtonSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientMiddleDescr")]
public static Color ButtonSelectedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientEndDescr")]
public static Color ButtonSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientBeginDescr")]
public static Color ButtonPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientMiddleDescr")]
public static Color ButtonPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientEndDescr")]
public static Color ButtonPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckBackgroundDescr")]
public static Color CheckBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckSelectedBackgroundDescr")]
public static Color CheckSelectedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckPressedBackgroundDescr")]
public static Color CheckPressedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripDarkDescr")]
public static Color GripDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripLightDescr")]
public static Color GripLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientBeginDescr")]
public static Color ImageMarginGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientMiddleDescr")]
public static Color ImageMarginGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientEndDescr")]
public static Color ImageMarginGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientBeginDescr")]
public static Color ImageMarginRevealedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientMiddleDescr")]
public static Color ImageMarginRevealedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientEndDescr")]
public static Color ImageMarginRevealedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientBeginDescr")]
public static Color MenuStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientEndDescr")]
public static Color MenuStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuBorderDescr")]
public static Color MenuBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedDescr")]
public static Color MenuItemSelected { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemBorderDescr")]
public static Color MenuItemBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientBeginDescr")]
public static Color MenuItemSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientEndDescr")]
public static Color MenuItemSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientBeginDescr")]
public static Color MenuItemPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientMiddleDescr")]
public static Color MenuItemPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientEndDescr")]
public static Color MenuItemPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientBeginDescr")]
public static Color RaftingContainerGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientEndDescr")]
public static Color RaftingContainerGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorDarkDescr")]
public static Color SeparatorDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorLightDescr")]
public static Color SeparatorLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripBorderDescr")]
public static Color StatusStripBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientBeginDescr")]
public static Color StatusStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientEndDescr")]
public static Color StatusStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripBorderDescr")]
public static Color ToolStripBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripDropDownBackgroundDescr")]
public static Color ToolStripDropDownBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientBeginDescr")]
public static Color ToolStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientMiddleDescr")]
public static Color ToolStripGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientEndDescr")]
public static Color ToolStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientBeginDescr")]
public static Color ToolStripContentPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientEndDescr")]
public static Color ToolStripContentPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientBeginDescr")]
public static Color ToolStripPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientEndDescr")]
public static Color ToolStripPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientBeginDescr")]
public static Color OverflowButtonGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientMiddleDescr")]
public static Color OverflowButtonGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientEndDescr")]
public static Color OverflowButtonGradientEnd { get; }
    private static ProfessionalColors();
    [NullableContextAttribute("1")]
internal static ProfessionalColorTable get_ColorTable();
    internal static string get_ColorScheme();
    internal static object get_ColorFreshnessKey();
    public static Color get_ButtonSelectedHighlight();
    public static Color get_ButtonSelectedHighlightBorder();
    public static Color get_ButtonPressedHighlight();
    public static Color get_ButtonPressedHighlightBorder();
    public static Color get_ButtonCheckedHighlight();
    public static Color get_ButtonCheckedHighlightBorder();
    public static Color get_ButtonPressedBorder();
    public static Color get_ButtonSelectedBorder();
    public static Color get_ButtonCheckedGradientBegin();
    public static Color get_ButtonCheckedGradientMiddle();
    public static Color get_ButtonCheckedGradientEnd();
    public static Color get_ButtonSelectedGradientBegin();
    public static Color get_ButtonSelectedGradientMiddle();
    public static Color get_ButtonSelectedGradientEnd();
    public static Color get_ButtonPressedGradientBegin();
    public static Color get_ButtonPressedGradientMiddle();
    public static Color get_ButtonPressedGradientEnd();
    public static Color get_CheckBackground();
    public static Color get_CheckSelectedBackground();
    public static Color get_CheckPressedBackground();
    public static Color get_GripDark();
    public static Color get_GripLight();
    public static Color get_ImageMarginGradientBegin();
    public static Color get_ImageMarginGradientMiddle();
    public static Color get_ImageMarginGradientEnd();
    public static Color get_ImageMarginRevealedGradientBegin();
    public static Color get_ImageMarginRevealedGradientMiddle();
    public static Color get_ImageMarginRevealedGradientEnd();
    public static Color get_MenuStripGradientBegin();
    public static Color get_MenuStripGradientEnd();
    public static Color get_MenuBorder();
    public static Color get_MenuItemSelected();
    public static Color get_MenuItemBorder();
    public static Color get_MenuItemSelectedGradientBegin();
    public static Color get_MenuItemSelectedGradientEnd();
    public static Color get_MenuItemPressedGradientBegin();
    public static Color get_MenuItemPressedGradientMiddle();
    public static Color get_MenuItemPressedGradientEnd();
    public static Color get_RaftingContainerGradientBegin();
    public static Color get_RaftingContainerGradientEnd();
    public static Color get_SeparatorDark();
    public static Color get_SeparatorLight();
    public static Color get_StatusStripBorder();
    public static Color get_StatusStripGradientBegin();
    public static Color get_StatusStripGradientEnd();
    public static Color get_ToolStripBorder();
    public static Color get_ToolStripDropDownBackground();
    public static Color get_ToolStripGradientBegin();
    public static Color get_ToolStripGradientMiddle();
    public static Color get_ToolStripGradientEnd();
    public static Color get_ToolStripContentPanelGradientBegin();
    public static Color get_ToolStripContentPanelGradientEnd();
    public static Color get_ToolStripPanelGradientBegin();
    public static Color get_ToolStripPanelGradientEnd();
    public static Color get_OverflowButtonGradientBegin();
    public static Color get_OverflowButtonGradientMiddle();
    public static Color get_OverflowButtonGradientEnd();
    [NullableContextAttribute("1")]
private static void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    private static void SetScheme();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ProfessionalColorTable : object {
    [NullableAttribute("2")]
private Dictionary`2<KnownColors, Color> _professionalRGB;
    private bool _usingSystemColors;
    private bool _useSystemColors;
    [NullableAttribute("2")]
private string _lastKnownColorScheme;
    private static string OliveColorScheme;
    private static string NormalColorScheme;
    private static string SilverColorScheme;
    private static string RoyaleColorScheme;
    private static string LunaFileName;
    private static string RoyaleFileName;
    private static string AeroFileName;
    [NullableAttribute("2")]
private object _colorFreshnessKey;
    private Dictionary`2<KnownColors, Color> ColorTable { get; }
    public bool UseSystemColors { get; public set; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightDescr")]
public Color ButtonSelectedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightBorderDescr")]
public Color ButtonSelectedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightDescr")]
public Color ButtonPressedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightBorderDescr")]
public Color ButtonPressedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightDescr")]
public Color ButtonCheckedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightBorderDescr")]
public Color ButtonCheckedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedBorderDescr")]
public Color ButtonPressedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedBorderDescr")]
public Color ButtonSelectedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientBeginDescr")]
public Color ButtonCheckedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientMiddleDescr")]
public Color ButtonCheckedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientEndDescr")]
public Color ButtonCheckedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientBeginDescr")]
public Color ButtonSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientMiddleDescr")]
public Color ButtonSelectedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientEndDescr")]
public Color ButtonSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientBeginDescr")]
public Color ButtonPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientMiddleDescr")]
public Color ButtonPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientEndDescr")]
public Color ButtonPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckBackgroundDescr")]
public Color CheckBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckSelectedBackgroundDescr")]
public Color CheckSelectedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckPressedBackgroundDescr")]
public Color CheckPressedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripDarkDescr")]
public Color GripDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripLightDescr")]
public Color GripLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientBeginDescr")]
public Color ImageMarginGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientMiddleDescr")]
public Color ImageMarginGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientEndDescr")]
public Color ImageMarginGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientBeginDescr")]
public Color ImageMarginRevealedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientMiddleDescr")]
public Color ImageMarginRevealedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientEndDescr")]
public Color ImageMarginRevealedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientBeginDescr")]
public Color MenuStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientEndDescr")]
public Color MenuStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedDescr")]
public Color MenuItemSelected { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemBorderDescr")]
public Color MenuItemBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuBorderDescr")]
public Color MenuBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientBeginDescr")]
public Color MenuItemSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientEndDescr")]
public Color MenuItemSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientBeginDescr")]
public Color MenuItemPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientMiddleDescr")]
public Color MenuItemPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientEndDescr")]
public Color MenuItemPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientBeginDescr")]
public Color RaftingContainerGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientEndDescr")]
public Color RaftingContainerGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorDarkDescr")]
public Color SeparatorDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorLightDescr")]
public Color SeparatorLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripBorderDescr")]
public Color StatusStripBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientBeginDescr")]
public Color StatusStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientEndDescr")]
public Color StatusStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripBorderDescr")]
public Color ToolStripBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripDropDownBackgroundDescr")]
public Color ToolStripDropDownBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientBeginDescr")]
public Color ToolStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientMiddleDescr")]
public Color ToolStripGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientEndDescr")]
public Color ToolStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientBeginDescr")]
public Color ToolStripContentPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientEndDescr")]
public Color ToolStripContentPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientBeginDescr")]
public Color ToolStripPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientEndDescr")]
public Color ToolStripPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientBeginDescr")]
public Color OverflowButtonGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientMiddleDescr")]
public Color OverflowButtonGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientEndDescr")]
public Color OverflowButtonGradientEnd { get; }
    internal Color ComboBoxButtonGradientBegin { get; }
    internal Color ComboBoxButtonGradientEnd { get; }
    internal Color ComboBoxButtonSelectedGradientBegin { get; }
    internal Color ComboBoxButtonSelectedGradientEnd { get; }
    internal Color ComboBoxButtonPressedGradientBegin { get; }
    internal Color ComboBoxButtonPressedGradientEnd { get; }
    internal Color ComboBoxButtonOnOverflow { get; }
    internal Color ComboBoxBorder { get; }
    internal Color TextBoxBorder { get; }
    private Dictionary`2<KnownColors, Color> get_ColorTable();
    public bool get_UseSystemColors();
    public void set_UseSystemColors(bool value);
    private Color FromKnownColor(KnownColors color);
    private void ResetRGBTable();
    public virtual Color get_ButtonSelectedHighlight();
    public virtual Color get_ButtonSelectedHighlightBorder();
    public virtual Color get_ButtonPressedHighlight();
    public virtual Color get_ButtonPressedHighlightBorder();
    public virtual Color get_ButtonCheckedHighlight();
    public virtual Color get_ButtonCheckedHighlightBorder();
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckSelectedBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_MenuBorder();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_StatusStripBorder();
    public virtual Color get_StatusStripGradientBegin();
    public virtual Color get_StatusStripGradientEnd();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientMiddle();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_ToolStripContentPanelGradientBegin();
    public virtual Color get_ToolStripContentPanelGradientEnd();
    public virtual Color get_ToolStripPanelGradientBegin();
    public virtual Color get_ToolStripPanelGradientEnd();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientMiddle();
    public virtual Color get_OverflowButtonGradientEnd();
    internal Color get_ComboBoxButtonGradientBegin();
    internal Color get_ComboBoxButtonGradientEnd();
    internal Color get_ComboBoxButtonSelectedGradientBegin();
    internal Color get_ComboBoxButtonSelectedGradientEnd();
    internal Color get_ComboBoxButtonPressedGradientBegin();
    internal Color get_ComboBoxButtonPressedGradientEnd();
    internal Color get_ComboBoxButtonOnOverflow();
    internal Color get_ComboBoxBorder();
    internal Color get_TextBoxBorder();
    private static Color GetAlphaBlendedColor(Graphics g, Color src, Color dest, int alpha);
    [NullableContextAttribute("2")]
private static Color GetAlphaBlendedColorHighRes(Graphics graphics, Color src, Color dest, int alpha);
    private static void InitCommonColors(Dictionary`2& rgbTable);
    private void InitSystemColors(Dictionary`2& rgbTable);
    private static void InitOliveLunaColors(Dictionary`2& rgbTable);
    private static void InitSilverLunaColors(Dictionary`2& rgbTable);
    private static void InitRoyaleColors(Dictionary`2& rgbTable);
    private void InitThemedColors(Dictionary`2& rgbTable);
    private static void InitBlueLunaColors(Dictionary`2& rgbTable);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Value")]
[DefaultBindingPropertyAttribute("Value")]
[SRDescriptionAttribute("DescriptionProgressBar")]
public class System.Windows.Forms.ProgressBar : Control {
    private int _minimum;
    private int _maximum;
    private int _step;
    private int _value;
    private int _marqueeAnimationSpeed;
    private static Color s_defaultForeColor;
    private ProgressBarStyle _style;
    private EventHandler _onRightToLeftLayoutChanged;
    private bool _rightToLeftLayout;
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStyleDescr")]
public ProgressBarStyle Style { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarMarqueeAnimationSpeed")]
public int MarqueeAnimationSpeed { get; public set; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMaximumDescr")]
public int Maximum { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMinimumDescr")]
public int Minimum { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("10")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStepDescr")]
public int Step { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ProgressBarValueDescr")]
public int Value { get; public set; }
    internal bool SupportsUiaProviders { get; }
    private static ProgressBar();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public ProgressBarStyle get_Style();
    public void set_Style(ProgressBarStyle value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_MarqueeAnimationSpeed();
    public void set_MarqueeAnimationSpeed(int value);
    private void StartMarquee();
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    [NullableContextAttribute("1")]
protected virtual void OnBackColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnForeColorChanged(EventArgs e);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public int get_Step();
    public void set_Step(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_Value();
    public void set_Value(int value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected virtual void CreateHandle();
    public void Increment(int value);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    public void PerformStep();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeForeColor();
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private void UpdatePos();
    [NullableContextAttribute("1")]
private void UserPreferenceChangedHandler(object o, UserPreferenceChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ProgressBarRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    public static bool IsSupported { get; }
    public static int ChunkThickness { get; }
    public static int ChunkSpaceThickness { get; }
    public static bool get_IsSupported();
    public static void DrawHorizontalBar(Graphics g, Rectangle bounds);
    public static void DrawVerticalBar(Graphics g, Rectangle bounds);
    public static void DrawHorizontalChunks(Graphics g, Rectangle bounds);
    public static void DrawVerticalChunks(Graphics g, Rectangle bounds);
    public static int get_ChunkThickness();
    public static int get_ChunkSpaceThickness();
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(VisualStyleElement element);
}
public enum System.Windows.Forms.ProgressBarStyle : Enum {
    public int value__;
    public static ProgressBarStyle Blocks;
    public static ProgressBarStyle Continuous;
    public static ProgressBarStyle Marquee;
}
[DesignerAttribute("System.Windows.Forms.Design.PropertyGridDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionPropertyGrid")]
public class System.Windows.Forms.PropertyGrid : ContainerControl {
    private HelpPane _helpPane;
    private int _helpPaneSizeRatio;
    private int _commandsPaneSizeRatio;
    private CommandsPane _commandsPane;
    private ToolStrip _toolStrip;
    private bool _helpVisible;
    private bool _toolbarVisible;
    private ImageList _normalButtonImages;
    private ImageList _largeButtonImages;
    private bool _largeButtons;
    private Bitmap _alphaBitmap;
    private Bitmap _categoryBitmap;
    private Bitmap _propertyPageBitmap;
    private List`1<TabInfo> _tabs;
    private TabInfo _selectedTab;
    private bool _tabsDirty;
    private bool _drawFlatToolBar;
    private Dictionary`2<string, GridEntry> _viewTabProperties;
    private ToolStripButton[] _viewSortButtons;
    private int _selectedViewSort;
    private PropertySort _propertySortValue;
    private ToolStripButton _viewPropertyPagesButton;
    private ToolStripSeparator _separator1;
    private ToolStripSeparator _separator2;
    private PropertyGridView _gridView;
    private IDesignerHost _designerHost;
    private IDesignerEventService _designerEventService;
    private Dictionary`2<int, int> _designerSelections;
    private GridEntry _defaultEntry;
    private GridEntry _rootEntry;
    private GridEntryCollection _currentEntries;
    private Object[] _selectedObjects;
    private int _paintFrozen;
    private Color _lineColor;
    private Color _categoryForegroundColor;
    private Color _categorySplitterColor;
    private Color _viewBorderColor;
    private Color _selectedItemWithFocusForeColor;
    private Color _selectedItemWithFocusBackColor;
    private bool _canShowVisualStyleGlyphs;
    private AttributeCollection _browsableAttributes;
    private SnappableControl _targetMove;
    private int _dividerMoveY;
    private static int CyDivider;
    private static int s_cyDivider;
    private static int MinGridHeight;
    private static int PropertiesTabIndex;
    private static int EventsTabIndex;
    private static int CategorySortButtonIndex;
    private static int AlphaSortButtonIndex;
    private static int NoSortButtonIndex;
    private static int ToolStripButtonPaddingY;
    private int _toolStripButtonPaddingY;
    private static Size s_defaultLargeButtonSize;
    private static Size s_defaultNormalButtonSize;
    private static Size s_largeButtonSize;
    private static Size s_normalButtonSize;
    private static bool s_isScalingInitialized;
    private string _propertyName;
    private int _copyDataMessage;
    private Flags _flags;
    private ComponentEventHandler _onComponentAdded;
    private ComponentEventHandler _onComponentRemoved;
    private ComponentChangedEventHandler _onComponentChanged;
    private ConnectionPointCookie[] _connectionPointCookies;
    private static object s_propertyValueChangedEvent;
    private static object s_comComponentNameChangedEvent;
    private static object s_propertyTabChangedEvent;
    private static object s_selectedGridItemChangedEvent;
    private static object s_propertySortChangedEvent;
    private static object s_selectedObjectsChangedEvent;
    [CompilerGeneratedAttribute]
private bool <HasCustomLineColor>k__BackingField;
    internal IDesignerHost ActiveDesigner { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public AttributeCollection BrowsableAttributes { get; public set; }
    private bool CanCopy { get; }
    private bool CanCut { get; }
    private bool CanPaste { get; }
    private bool CanUndo { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("PropertyGridCanShowCommandsDesc")]
public bool CanShowCommands { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCategoryForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlText")]
public Color CategoryForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsBackColorDesc")]
public Color CommandsBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsForeColorDesc")]
public Color CommandsForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsLinkColorDesc")]
public Color CommandsLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsActiveLinkColorDesc")]
public Color CommandsActiveLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsDisabledLinkColorDesc")]
public Color CommandsDisabledLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsBorderColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlDark")]
public Color CommandsBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool CommandsVisible { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PropertyGridCommandsVisibleIfAvailable")]
public bool CommandsVisibleIfAvailable { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public Point ContextMenuDefaultLocation { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Type DefaultTabType { get; }
    protected bool DrawFlatToolbar { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    private bool FreezePainting { get; private set; }
    internal AccessibleObject HelpPaneAccessibleObject { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridHelpBackColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Control")]
public Color HelpBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridHelpForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlText")]
public Color HelpForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridHelpBorderColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlDark")]
public Color HelpBorderColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("PropertyGridHelpVisibleDesc")]
public bool HelpVisible { get; public set; }
    internal AccessibleObject CommandsPaneAccessibleObject { get; }
    internal AccessibleObject GridViewAccessibleObject { get; }
    internal bool GridViewVisible { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridSelectedItemWithFocusBackColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Highlight")]
public Color SelectedItemWithFocusBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridSelectedItemWithFocusForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "HighlightText")]
public Color SelectedItemWithFocusForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridDisabledItemForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "GrayText")]
public Color DisabledItemForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCategorySplitterColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Control")]
public Color CategorySplitterColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCanShowVisualStyleGlyphsDesc")]
[DefaultValueAttribute("True")]
public bool CanShowVisualStyleGlyphs { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridLineColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "InactiveBorder")]
public Color LineColor { get; public set; }
    internal bool HasCustomLineColor { get; private set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("PropertyGridPropertySortDesc")]
public PropertySort PropertySort { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public PropertyTabCollection PropertyTabs { get; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("PropertyGridSelectedObjectDesc")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.PropertyGrid/SelectedObjectConverter")]
public object SelectedObject { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Object[] SelectedObjects { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public PropertyTab SelectedTab { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public GridItem SelectedGridItem { get; public set; }
    protected internal bool ShowFocusCues { get; }
    public ISite Site { get; public set; }
    internal bool SortedByCategories { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridLargeButtonsDesc")]
[DefaultValueAttribute("False")]
public bool LargeButtons { get; public set; }
    internal AccessibleObject ToolbarAccessibleObject { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PropertyGridToolbarVisibleDesc")]
public bool ToolbarVisible { get; public set; }
    protected ToolStripRenderer ToolStripRenderer { get; protected set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridViewBackColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Window")]
public Color ViewBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridViewForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "WindowText")]
public Color ViewForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridViewBorderColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlDark")]
public Color ViewBorderColor { get; public set; }
    private bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.InPropertySet { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Bitmap SortByPropertyImage { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Bitmap SortByCategoryImage { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Bitmap ShowPropertyPageImage { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    internal bool SupportsUiaProviders { get; }
    internal bool SupportsUseCompatibleTextRendering { get; }
    private static PropertyGrid();
    private bool GetFlag(Flags flag);
    private void SetFlag(Flags flag, bool value);
    internal IDesignerHost get_ActiveDesigner();
    internal void set_ActiveDesigner(IDesignerHost value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public AttributeCollection get_BrowsableAttributes();
    public void set_BrowsableAttributes(AttributeCollection value);
    private bool get_CanCopy();
    private bool get_CanCut();
    private bool get_CanPaste();
    private bool get_CanUndo();
    public virtual bool get_CanShowCommands();
    public Color get_CategoryForeColor();
    public void set_CategoryForeColor(Color value);
    public Color get_CommandsBackColor();
    public void set_CommandsBackColor(Color value);
    public Color get_CommandsForeColor();
    public void set_CommandsForeColor(Color value);
    public Color get_CommandsLinkColor();
    public void set_CommandsLinkColor(Color value);
    public Color get_CommandsActiveLinkColor();
    public void set_CommandsActiveLinkColor(Color value);
    public Color get_CommandsDisabledLinkColor();
    public void set_CommandsDisabledLinkColor(Color value);
    public Color get_CommandsBorderColor();
    public void set_CommandsBorderColor(Color value);
    public virtual bool get_CommandsVisible();
    public virtual bool get_CommandsVisibleIfAvailable();
    public virtual void set_CommandsVisibleIfAvailable(bool value);
    public Point get_ContextMenuDefaultLocation();
    public ControlCollection get_Controls();
    protected virtual Size get_DefaultSize();
    protected virtual Type get_DefaultTabType();
    protected bool get_DrawFlatToolbar();
    protected void set_DrawFlatToolbar(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    private bool get_FreezePainting();
    private void set_FreezePainting(bool value);
    internal AccessibleObject get_HelpPaneAccessibleObject();
    public Color get_HelpBackColor();
    public void set_HelpBackColor(Color value);
    public Color get_HelpForeColor();
    public void set_HelpForeColor(Color value);
    public Color get_HelpBorderColor();
    public void set_HelpBorderColor(Color value);
    public virtual bool get_HelpVisible();
    public virtual void set_HelpVisible(bool value);
    internal AccessibleObject get_CommandsPaneAccessibleObject();
    internal AccessibleObject get_GridViewAccessibleObject();
    internal bool get_GridViewVisible();
    public Color get_SelectedItemWithFocusBackColor();
    public void set_SelectedItemWithFocusBackColor(Color value);
    public Color get_SelectedItemWithFocusForeColor();
    public void set_SelectedItemWithFocusForeColor(Color value);
    public Color get_DisabledItemForeColor();
    public void set_DisabledItemForeColor(Color value);
    public Color get_CategorySplitterColor();
    public void set_CategorySplitterColor(Color value);
    public bool get_CanShowVisualStyleGlyphs();
    public void set_CanShowVisualStyleGlyphs(bool value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    [CompilerGeneratedAttribute]
internal bool get_HasCustomLineColor();
    [CompilerGeneratedAttribute]
private void set_HasCustomLineColor(bool value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public PropertySort get_PropertySort();
    public void set_PropertySort(PropertySort value);
    public PropertyTabCollection get_PropertyTabs();
    public object get_SelectedObject();
    public void set_SelectedObject(object value);
    public Object[] get_SelectedObjects();
    public void set_SelectedObjects(Object[] value);
    public PropertyTab get_SelectedTab();
    public GridItem get_SelectedGridItem();
    public void set_SelectedGridItem(GridItem value);
    protected internal virtual bool get_ShowFocusCues();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    internal bool get_SortedByCategories();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public bool get_LargeButtons();
    public void set_LargeButtons(bool value);
    internal AccessibleObject get_ToolbarAccessibleObject();
    public virtual bool get_ToolbarVisible();
    public virtual void set_ToolbarVisible(bool value);
    protected ToolStripRenderer get_ToolStripRenderer();
    protected void set_ToolStripRenderer(ToolStripRenderer value);
    public Color get_ViewBackColor();
    public void set_ViewBackColor(Color value);
    public Color get_ViewForeColor();
    public void set_ViewForeColor(Color value);
    public Color get_ViewBorderColor();
    public void set_ViewBorderColor(Color value);
    private int AddImage(Bitmap image);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_PropertyValueChanged(PropertyValueChangedEventHandler value);
    public void remove_PropertyValueChanged(PropertyValueChangedEventHandler value);
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.add_ComComponentNameChanged(ComponentRenameEventHandler value);
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.remove_ComComponentNameChanged(ComponentRenameEventHandler value);
    public void add_PropertyTabChanged(PropertyTabChangedEventHandler value);
    public void remove_PropertyTabChanged(PropertyTabChangedEventHandler value);
    public void add_PropertySortChanged(EventHandler value);
    public void remove_PropertySortChanged(EventHandler value);
    public void add_SelectedGridItemChanged(SelectedGridItemChangedEventHandler value);
    public void remove_SelectedGridItemChanged(SelectedGridItemChangedEventHandler value);
    public void add_SelectedObjectsChanged(EventHandler value);
    public void remove_SelectedObjectsChanged(EventHandler value);
    internal void AddTab(Type tabType, PropertyTabScope scope, object object, bool setupToolbar);
    public void CollapseAllGridItems();
    private void ClearCachedProperties();
    internal void ClearCachedValues();
    internal void ClearTabs(PropertyTabScope tabScope);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private PropertyGridView CreateGridView(IServiceProvider serviceProvider);
    [ConditionalAttribute("DEBUG")]
internal void CheckInCreate();
    private static ToolStripSeparator CreateSeparatorButton();
    protected virtual PropertyTab CreatePropertyTab(Type tabType);
    private PropertyTab CreateTab(Type tabType, IDesignerHost host);
    private ToolStripButton CreatePushButton(string toolTipText, int imageIndex, EventHandler eventHandler, bool useRadioButtonRole);
    private void DisplayCommandsPane();
    protected virtual void Dispose(bool disposing);
    internal virtual void ReleaseUiaProvider(HWND handle);
    private void DividerDraw(int y);
    private SnappableControl DividerInside(int y);
    private int DividerLimitHigh(SnappableControl target);
    private int DividerLimitMove(SnappableControl target, int y);
    private static void DrawXorBar(Control targetControl, Rectangle rcFrame);
    private bool EnablePropPageButton(object obj);
    private void EnableTabs();
    private void EnsureLargeButtons();
    private void AddLargeImage(Bitmap originalBitmap);
    private sealed virtual override bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.EnsurePendingChangesCommitted();
    public void ExpandAllGridItems();
    private static IEnumerable`1<Type> GetCommonTabs(Object[] components, PropertyTabScope tabScope);
    internal GridEntry GetDefaultGridEntry();
    internal Control GetElementFromPoint(Point point);
    private object GetUnwrappedObject(int index);
    internal GridEntryCollection GetCurrentEntries();
    internal bool HavePropertyEntriesChanged();
    private sealed virtual override bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.get_InPropertySet();
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.DropDownDone();
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.HandleF4();
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.SaveState(RegistryKey key);
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.LoadState(RegistryKey key);
    private void OnActiveDesignerChanged(object sender, ActiveDesignerEventArgs e);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IPropertyNotifySink.Interface.OnChanged(int dispID);
    private void OnChildMouseMove(object sender, MouseEventArgs e);
    private void OnChildMouseDown(object sender, MouseEventArgs e);
    private void OnComponentAdded(object sender, ComponentEventArgs e);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    internal void OnGridViewMouseWheel(MouseEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    private void OnLayoutInternal(bool dividerOnly);
    protected virtual void OnMouseDown(MouseEventArgs me);
    protected virtual void OnMouseMove(MouseEventArgs me);
    protected virtual void OnMouseUp(MouseEventArgs me);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IPropertyNotifySink.Interface.OnRequestEdit(int dispID);
    protected virtual void OnResize(EventArgs e);
    private void OnButtonClick(object sender, EventArgs e);
    protected void OnComComponentNameChanged(ComponentRenameEventArgs e);
    protected void OnNotifyPropertyValueUIItemsChanged(object sender, EventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
    protected virtual void OnPropertySortChanged(EventArgs e);
    protected virtual void OnPropertyTabChanged(PropertyTabChangedEventArgs e);
    protected virtual void OnPropertyValueChanged(PropertyValueChangedEventArgs e);
    internal void OnPropertyValueSet(GridItem changedItem, object oldValue);
    internal void OnSelectedGridItemChanged(GridEntry oldEntry, GridEntry newEntry);
    protected virtual void OnSelectedGridItemChanged(SelectedGridItemChangedEventArgs e);
    protected virtual void OnSelectedObjectsChanged(EventArgs e);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
    private void OnTransactionOpened(object sender, EventArgs e);
    private void OnTypeDescriptorRefreshed(RefreshEventArgs e);
    private void OnTypeDescriptorRefreshedInvoke(RefreshEventArgs e);
    private void OnViewSortButtonClick(object sender, EventArgs e);
    private void OnViewTabButtonClick(object sender, EventArgs e);
    private void OnViewPropertyPagesButtonClick(object sender, EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual void Refresh();
    private void Refresh(bool clearCached);
    internal void RefreshProperties(bool clearCached);
    public void RefreshTabs(PropertyTabScope tabScope);
    internal void ReleaseTab(Type tabType, object component);
    internal void RemoveTabs(PropertyTabScope classification, bool setupToolbar);
    internal void RemoveTab(int tabIndex, bool setupToolbar);
    internal void RemoveTab(Type tabType);
    private void ResetCommandsBackColor();
    private void ResetCommandsForeColor();
    private void ResetCommandsLinkColor();
    private void ResetCommandsActiveLinkColor();
    private void ResetCommandsDisabledLinkColor();
    private void ResetHelpBackColor();
    private void ResetHelpForeColor();
    internal void ReplaceSelectedObject(object oldObject, object newObject);
    public void ResetSelectedProperty();
    private void SaveSelectedTabIndex();
    private bool TryGetSavedTabIndex(Int32& selectedTabIndex);
    private void SetHotCommandColors();
    internal void SetStatusBox(string title, string description);
    private void SelectViewTabButton(ToolStripButton button, bool updateSelection);
    private bool SelectViewTabButtonDefault(ToolStripButton button);
    private void SetSelectState(int state);
    private void SetToolStripRenderer();
    private void SetupToolbar();
    private void SetupToolbar(bool fullRebuild);
    protected void ShowEventsButton(bool value);
    protected virtual Bitmap get_SortByPropertyImage();
    protected virtual Bitmap get_SortByCategoryImage();
    protected virtual Bitmap get_ShowPropertyPageImage();
    private bool ShouldSerializeCommandsBackColor();
    private bool ShouldSerializeCommandsForeColor();
    private bool ShouldSerializeCommandsLinkColor();
    private bool ShouldSerializeCommandsActiveLinkColor();
    private bool ShouldSerializeCommandsDisabledLinkColor();
    private void SinkPropertyNotifyEvents();
    private bool ShouldForwardChildMouseMessage(Control child, MouseEventArgs e, Point& point);
    private void UpdatePropertiesViewTabVisibility();
    internal void UpdateSelection();
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    internal virtual bool get_SupportsUiaProviders();
    internal virtual bool get_SupportsUseCompatibleTextRendering();
    internal virtual bool AllowsKeyboardToolTip();
    internal bool WantsTab(bool forward);
    protected virtual void OnSystemColorsChanged(EventArgs e);
    private void RescaleConstants();
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.ArrayElementGridEntry : GridEntry {
    protected int _index;
    public GridItemType GridItemType { get; }
    public bool IsValueEditable { get; }
    [NullableAttribute("1")]
public string PropertyLabel { get; }
    public Type PropertyType { get; }
    public object PropertyValue { get; public set; }
    public bool ShouldRenderReadOnly { get; }
    [NullableContextAttribute("1")]
public ArrayElementGridEntry(PropertyGrid ownerGrid, GridEntry parent, int index);
    public virtual GridItemType get_GridItemType();
    public virtual bool get_IsValueEditable();
    [NullableContextAttribute("1")]
public virtual string get_PropertyLabel();
    public virtual Type get_PropertyType();
    public virtual object get_PropertyValue();
    public virtual void set_PropertyValue(object value);
    public virtual bool get_ShouldRenderReadOnly();
}
internal class System.Windows.Forms.PropertyGridInternal.AttributeTypeSorter : object {
    [NullableAttribute("1")]
private static ConditionalWeakTable`2<Attribute, string> s_typeIds;
    private static AttributeTypeSorter();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(object x, object y);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(Attribute x, Attribute y);
    [NullableContextAttribute("1")]
private static string GetTypeIdString(Attribute attribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.CategoryGridEntry : GridEntry {
    private string _name;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, bool> s_categoryStates;
    private static object s_lock;
    internal bool HasValue { get; }
    public int PropertyDepth { get; }
    protected Color BackgroundColor { get; }
    protected Color LabelTextColor { get; }
    public bool Expandable { get; }
    unknown bool InternalExpanded {internal set; }
    public GridItemType GridItemType { get; }
    [NullableAttribute("2")]
public string HelpKeyword { get; }
    public string PropertyLabel { get; }
    internal int PropertyLabelIndent { get; }
    public Type PropertyType { get; }
    public CategoryGridEntry(PropertyGrid ownerGrid, GridEntry parent, string name, IEnumerable`1<GridEntry> children);
    private static CategoryGridEntry();
    internal virtual bool get_HasValue();
    protected virtual void Dispose(bool disposing);
    public virtual void DisposeChildren();
    public virtual int get_PropertyDepth();
    protected virtual GridEntryAccessibleObject GetAccessibilityObject();
    protected virtual Color get_BackgroundColor();
    protected virtual Color get_LabelTextColor();
    public virtual bool get_Expandable();
    internal virtual void set_InternalExpanded(bool value);
    public virtual GridItemType get_GridItemType();
    [NullableContextAttribute("2")]
public virtual string get_HelpKeyword();
    public virtual string get_PropertyLabel();
    internal virtual int get_PropertyLabelIndent();
    public virtual string GetPropertyTextValue(object o);
    public virtual Type get_PropertyType();
    internal virtual object GetValueOwnerInternal();
    protected virtual bool CreateChildren(bool diffOldChildren);
    public virtual string GetTestingInfo();
    public virtual void PaintLabel(Graphics g, Rectangle rect, Rectangle clipRect, bool selected, bool paintFullLabel);
    public virtual void PaintValue(Graphics g, Rectangle rect, Rectangle clipRect, PaintValueFlags paintFlags, string text);
    internal virtual bool SendNotification(GridEntry entry, Notify notification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.CommandsPane : SnappableControl {
    [NullableAttribute("2")]
private object _component;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private DesignerVerb[] _verbs;
    [NullableAttribute("2")]
private LinkLabel _label;
    private bool _allowVisible;
    private int _optimalHeight;
    public bool AllowVisible { get; public set; }
    public Rectangle DisplayRectangle { get; }
    public LinkLabel Label { get; }
    public bool WouldBeVisible { get; }
    internal bool SupportsUiaProviders { get; }
    internal CommandsPane(PropertyGrid owner);
    public virtual bool get_AllowVisible();
    public virtual void set_AllowVisible(bool value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Rectangle get_DisplayRectangle();
    public LinkLabel get_Label();
    public virtual bool get_WouldBeVisible();
    public virtual int GetOptimalHeight(int width);
    public virtual int SnapHeightRequest(int request);
    internal virtual bool get_SupportsUiaProviders();
    private void LinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    private void OnCommandChanged(object sender, EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    internal void SetColors(Color background, Color normalText, Color link, Color activeLink, Color visitedLink, Color disabledLink);
    public void FocusLabel();
    public virtual void SetVerbs(object component, DesignerVerb[] verbs);
    private void InitializeLabelLinks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.DetailsButton : Button {
    private GridErrorDialog _parent;
    public bool Expanded { get; }
    public DetailsButton(GridErrorDialog form);
    public bool get_Expanded();
    protected virtual AccessibleObject CreateAccessibilityInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.DropDownButton : Button {
    private bool _useComboBoxTheme;
    [CompilerGeneratedAttribute]
private bool <IgnoreMouse>k__BackingField;
    public bool IgnoreMouse { get; public set; }
    internal bool SupportsUiaProviders { get; }
    unknown bool UseComboBoxTheme {public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreMouse();
    [CompilerGeneratedAttribute]
public void set_IgnoreMouse(bool value);
    internal virtual bool get_SupportsUiaProviders();
    public void set_UseComboBoxTheme(bool value);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
    internal void PerformButtonClick();
    private void SetAccessibleName();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal virtual ButtonBaseAdapter CreateStandardAdapter();
}
internal abstract class System.Windows.Forms.PropertyGridInternal.GridEntry : GridItem {
    [CompilerGeneratedAttribute]
private static Point <InvalidPoint>k__BackingField;
    private static BooleanSwitch s_pbrsAssertPropsSwitch;
    [CompilerGeneratedAttribute]
private static AttributeTypeSorter <AttributeTypeSorter>k__BackingField;
    [CompilerGeneratedAttribute]
private static IComparer <DisplayNameComparer>k__BackingField;
    private static char s_passwordReplaceChar;
    private static int MaximumLengthOfPropertyString;
    private EventEntry _eventList;
    private CacheItems _cacheItems;
    protected TypeConverter _typeConverter;
    [CompilerGeneratedAttribute]
private UITypeEditor <Editor>k__BackingField;
    private GridEntry _parent;
    private GridEntryCollection _children;
    private int _propertyDepth;
    private bool _hasFocus;
    private Rectangle _outlineRect;
    private Flags _flags;
    protected PropertySort _propertySort;
    private Point _labelTipPoint;
    private Point _valueTipPoint;
    private static object s_valueClickEvent;
    private static object s_labelClickEvent;
    private static object s_outlineClickEvent;
    private static object s_valueDoubleClickEvent;
    private static object s_labelDoubleClickEvent;
    private static object s_outlineDoubleClickEvent;
    private static object s_recreateChildrenEvent;
    private GridEntryAccessibleObject _accessibleObject;
    private bool _lastPaintWithExplorerStyle;
    [CompilerGeneratedAttribute]
private PropertyGrid <OwnerGrid>k__BackingField;
    protected static Point InvalidPoint { get; }
    internal static AttributeTypeSorter AttributeTypeSorter { get; }
    protected static IComparer DisplayNameComparer { get; }
    protected UITypeEditor Editor { get; protected set; }
    protected int OutlineIconPadding { get; }
    private bool ColorInversionNeededInHighContrast { get; }
    public AccessibleObject AccessibilityObject { get; }
    public bool AllowMerge { get; }
    protected AttributeCollection Attributes { get; }
    protected Color BackgroundColor { get; }
    protected Color LabelTextColor { get; }
    public AttributeCollection BrowsableAttributes { get; public set; }
    public IComponent Component { get; }
    protected IComponentChangeService ComponentChangeService { get; }
    public IContainer Container { get; }
    protected GridEntryCollection ChildCollection { get; protected set; }
    public int ChildCount { get; }
    public GridEntryCollection Children { get; }
    public PropertyTab OwnerTab { get; }
    internal GridEntry DefaultChild { get; internal set; }
    internal IDesignerHost DesignerHost { get; internal set; }
    internal bool Disposed { get; }
    internal bool Enumerable { get; }
    public bool Expandable { get; }
    public bool Expanded { get; public set; }
    internal bool ForceReadOnly { get; }
    internal bool InternalExpanded { get; internal set; }
    public Flags EntryFlags { get; }
    public bool HasFocus { get; public set; }
    public string FullLabel { get; }
    public GridItemCollection GridItems { get; }
    internal PropertyGridView OwnerGridView { get; internal set; }
    public GridItemType GridItemType { get; }
    internal bool HasValue { get; }
    public string HelpKeyword { get; }
    public bool IsCustomPaint { get; }
    public bool IsExpandable { get; public set; }
    public bool IsTextEditable { get; }
    public bool IsValueEditable { get; }
    public object Instance { get; }
    public string Label { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    internal int PropertyLabelIndent { get; }
    internal string LabelToolTipText { get; }
    public bool NeedsDropDownButton { get; }
    public bool NeedsModalEditorButton { get; }
    public PropertyGrid OwnerGrid { get; }
    public Rectangle OutlineRectangle { get; }
    public GridEntry ParentGridEntry { get; public set; }
    public GridItem Parent { get; }
    public string PropertyCategory { get; }
    public int PropertyDepth { get; }
    public string PropertyDescription { get; }
    public string PropertyLabel { get; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public object PropertyValue { get; public set; }
    public bool ShouldRenderPassword { get; }
    public bool ShouldRenderReadOnly { get; }
    internal TypeConverter TypeConverter { get; }
    internal UITypeEditor UITypeEditor { get; }
    public object Value { get; }
    internal Point ValueToolTipLocation { get; internal set; }
    internal int VisibleChildCount { get; }
    protected GridEntry(PropertyGrid ownerGrid, GridEntry parent);
    private static GridEntry();
    [CompilerGeneratedAttribute]
protected static Point get_InvalidPoint();
    [CompilerGeneratedAttribute]
internal static AttributeTypeSorter get_AttributeTypeSorter();
    [CompilerGeneratedAttribute]
protected static IComparer get_DisplayNameComparer();
    [CompilerGeneratedAttribute]
protected UITypeEditor get_Editor();
    [CompilerGeneratedAttribute]
protected void set_Editor(UITypeEditor value);
    private static Color InvertColor(Color color);
    protected int get_OutlineIconPadding();
    private bool get_ColorInversionNeededInHighContrast();
    public AccessibleObject get_AccessibilityObject();
    protected virtual GridEntryAccessibleObject GetAccessibilityObject();
    public virtual bool get_AllowMerge();
    protected virtual AttributeCollection get_Attributes();
    protected virtual Color get_BackgroundColor();
    protected virtual Color get_LabelTextColor();
    public virtual AttributeCollection get_BrowsableAttributes();
    public virtual void set_BrowsableAttributes(AttributeCollection value);
    public virtual IComponent get_Component();
    protected virtual IComponentChangeService get_ComponentChangeService();
    public virtual IContainer get_Container();
    protected GridEntryCollection get_ChildCollection();
    protected void set_ChildCollection(GridEntryCollection value);
    public int get_ChildCount();
    public virtual GridEntryCollection get_Children();
    public virtual PropertyTab get_OwnerTab();
    internal virtual GridEntry get_DefaultChild();
    internal virtual void set_DefaultChild(GridEntry value);
    internal virtual IDesignerHost get_DesignerHost();
    internal virtual void set_DesignerHost(IDesignerHost value);
    internal bool get_Disposed();
    internal virtual bool get_Enumerable();
    public virtual bool get_Expandable();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    internal virtual bool get_ForceReadOnly();
    protected void SetForceReadOnlyFlag();
    internal virtual bool get_InternalExpanded();
    internal virtual void set_InternalExpanded(bool value);
    public Flags get_EntryFlags();
    protected void ClearFlags();
    public bool get_HasFocus();
    public void set_HasFocus(bool value);
    public string get_FullLabel();
    public virtual GridItemCollection get_GridItems();
    internal virtual PropertyGridView get_OwnerGridView();
    internal virtual void set_OwnerGridView(PropertyGridView value);
    public virtual GridItemType get_GridItemType();
    internal virtual bool get_HasValue();
    public virtual string get_HelpKeyword();
    public bool get_IsCustomPaint();
    public bool get_IsExpandable();
    public void set_IsExpandable(bool value);
    public bool get_IsTextEditable();
    public virtual bool get_IsValueEditable();
    public sealed virtual object get_Instance();
    public virtual string get_Label();
    public virtual PropertyDescriptor get_PropertyDescriptor();
    internal virtual int get_PropertyLabelIndent();
    internal virtual Point GetLabelToolTipLocation(int mouseX, int mouseY);
    internal virtual string get_LabelToolTipText();
    public virtual bool get_NeedsDropDownButton();
    public bool get_NeedsModalEditorButton();
    [CompilerGeneratedAttribute]
public PropertyGrid get_OwnerGrid();
    public Rectangle get_OutlineRectangle();
    public void ResetOutlineRectangle();
    public GridEntry get_ParentGridEntry();
    public void set_ParentGridEntry(GridEntry value);
    public virtual GridItem get_Parent();
    public virtual string get_PropertyCategory();
    public virtual int get_PropertyDepth();
    public virtual string get_PropertyDescription();
    public virtual string get_PropertyLabel();
    public virtual string get_PropertyName();
    public virtual Type get_PropertyType();
    public virtual object get_PropertyValue();
    public virtual void set_PropertyValue(object value);
    public bool get_ShouldRenderPassword();
    public virtual bool get_ShouldRenderReadOnly();
    internal virtual TypeConverter get_TypeConverter();
    internal virtual UITypeEditor get_UITypeEditor();
    public sealed virtual object get_Value();
    internal Point get_ValueToolTipLocation();
    internal void set_ValueToolTipLocation(Point value);
    internal int get_VisibleChildCount();
    public void AddOnLabelClick(EventHandler h);
    public void AddOnLabelDoubleClick(EventHandler h);
    public void AddOnValueClick(EventHandler h);
    public void AddOnValueDoubleClick(EventHandler h);
    public void AddOnOutlineClick(EventHandler h);
    public void AddOnOutlineDoubleClick(EventHandler h);
    public void AddOnRecreateChildren(GridEntryRecreateChildrenEventHandler h);
    internal void ClearCachedValues(bool clearChildren);
    public object ConvertTextToValue(string text);
    internal static GridEntry CreateRootGridEntry(PropertyGridView view, Object[] objects, IServiceProvider baseProvider, IDesignerHost currentHost, PropertyTab tab, PropertySort initialSortType);
    protected virtual bool CreateChildren(bool useExistingChildren);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void ReleaseUiaProvider();
    public virtual void DisposeChildren();
    protected virtual override void Finalize();
    internal virtual void EditPropertyValue(PropertyGridView gridView);
    internal bool EqualsIgnoreParent(GridEntry entry);
    public virtual bool Equals(object obj);
    private object FindPropertyValue(string propertyName, Type propertyType);
    internal int GetChildIndex(GridEntry entry);
    public virtual IComponent[] GetComponents();
    protected int GetLabelTextWidth(string text, Graphics graphics, Font font);
    public int GetValueTextWidth(string text, Graphics graphics, Font font);
    public object GetValueOwner();
    internal virtual object GetValueOwnerInternal();
    public virtual string GetTestingInfo();
    private GridEntry[] GetChildEntries();
    public virtual void ResetPropertyValue();
    public virtual bool CanResetPropertyValue();
    public virtual bool DoubleClickPropertyValue();
    public virtual string GetPropertyTextValue();
    public virtual string GetPropertyTextValue(object value);
    public virtual Object[] GetPropertyValueList();
    public virtual int GetHashCode();
    protected bool GetFlagSet(Flags flags);
    protected Font GetFont(bool boldFont);
    public virtual object GetService(Type serviceType);
    public virtual void PaintLabel(Graphics g, Rectangle rect, Rectangle clipRect, bool selected, bool paintFullLabel);
    private void PaintOutlineGlyph(Graphics g, Rectangle r);
    public virtual void PaintValue(Graphics g, Rectangle rect, Rectangle clipRect, PaintValueFlags paintFlags, string text);
    public virtual bool OnComponentChanging();
    public virtual void OnComponentChanged();
    public virtual bool OnMouseClick(int x, int y, int count, MouseButtons button);
    protected void OnOutlineClick(EventArgs e);
    internal bool OnValueReturnKey();
    protected void SetFlag(Flags flag, bool value);
    public virtual bool Select();
    internal bool ShouldSerializePropertyValue();
    private static PropertyDescriptor[] SortParenProperties(PropertyDescriptor[] props);
    protected virtual bool SendNotification(object owner, Notify notification);
    internal virtual bool SendNotification(GridEntry entry, Notify notification);
    internal bool SendNotificationToParent(Notify type);
    protected void RecreateChildren();
    protected void RecreateChildren(int oldCount);
    public void Refresh();
    public void RemoveOnLabelClick(EventHandler handler);
    public void RemoveOnLabelDoubleClick(EventHandler handler);
    public void RemoveOnValueClick(EventHandler handler);
    public void RemoveOnValueDoubleClick(EventHandler handler);
    public void RemoveOnOutlineClick(EventHandler handler);
    public void RemoveOnOutlineDoubleClick(EventHandler handler);
    public void RemoveOnRecreateChildren(GridEntryRecreateChildrenEventHandler handler);
    private void ResetState();
    public bool SetPropertyTextValue(string text);
    public virtual string ToString();
    protected virtual void AddEventHandler(object key, Delegate handler);
    protected virtual void RaiseEvent(object key, EventArgs e);
    protected virtual Delegate GetEventHandler(object key);
    protected virtual void RemoveEventHandler(object key, Delegate handler);
    protected virtual void RemoveEventHandlers();
    [CompilerGeneratedAttribute]
private void <PaintOutlineGlyph>g__PaintOutlineWithExplorerTreeStyle|217_0(Graphics g, Rectangle r, HWND hwnd);
    [CompilerGeneratedAttribute]
private void <PaintOutlineGlyph>g__RedrawExplorerTreeViewClosedGlyph|217_2(Graphics graphics, VisualStyleRenderer explorerTreeRenderer, Rectangle rectangle, HWND hwnd);
    [CompilerGeneratedAttribute]
private void <PaintOutlineGlyph>g__PaintOutlineWithClassicStyle|217_1(Graphics g, Rectangle r);
    [CompilerGeneratedAttribute]
internal static bool <PaintValue>g__HasMultipleLines|218_0(string value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Windows.Forms.PropertyGridInternal.GridEntryCollection : NonNullCollection`1<GridEntry> {
    private bool _disposeItems;
    public GridEntryCollection(IEnumerable`1<GridEntry> items, bool disposeItems);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.GridEntryComparer : object {
    [CompilerGeneratedAttribute]
private static GridEntryComparer <Default>k__BackingField;
    public static GridEntryComparer Default { get; }
    private static GridEntryComparer();
    [CompilerGeneratedAttribute]
public static GridEntryComparer get_Default();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(GridEntry x, GridEntry y);
}
internal class System.Windows.Forms.PropertyGridInternal.GridEntryRecreateChildrenEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <NewChildCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldChildCount>k__BackingField;
    public int NewChildCount { get; }
    public int OldChildCount { get; }
    public GridEntryRecreateChildrenEventArgs(int oldCount, int newCount);
    [CompilerGeneratedAttribute]
public int get_NewChildCount();
    [CompilerGeneratedAttribute]
public int get_OldChildCount();
}
internal class System.Windows.Forms.PropertyGridInternal.GridEntryRecreateChildrenEventHandler : MulticastDelegate {
    public GridEntryRecreateChildrenEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GridEntryRecreateChildrenEventArgs rce);
    public virtual IAsyncResult BeginInvoke(object sender, GridEntryRecreateChildrenEventArgs rce, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.GridErrorDialog : Form {
    private TableLayoutPanel _overarchingTableLayoutPanel;
    private TableLayoutPanel _buttonTableLayoutPanel;
    private PictureBox _pictureBox;
    private Label _messageLabel;
    private DetailsButton _detailsButton;
    private Button _cancelButton;
    private Button _okButton;
    private TableLayoutPanel _pictureLabelTableLayoutPanel;
    private TextBox _detailsTextBox;
    private Bitmap _expandImage;
    private Bitmap _collapseImage;
    private PropertyGrid _ownerGrid;
    [CompilerGeneratedAttribute]
private bool <DetailsButtonExpanded>k__BackingField;
    public bool DetailsButtonExpanded { get; private set; }
    unknown string Details {public set; }
    unknown string Message {public set; }
    private static bool IsRTLResources { get; }
    public GridErrorDialog(PropertyGrid owner);
    [CompilerGeneratedAttribute]
public bool get_DetailsButtonExpanded();
    [CompilerGeneratedAttribute]
private void set_DetailsButtonExpanded(bool value);
    public void set_Details(string value);
    public void set_Message(string value);
    private void DetailsClick(object sender, EventArgs devent);
    private static bool get_IsRTLResources();
    [MemberNotNullAttribute("_messageLabel")]
[MemberNotNullAttribute("_pictureBox")]
[MemberNotNullAttribute("_detailsButton")]
[MemberNotNullAttribute("_okButton")]
[MemberNotNullAttribute("_cancelButton")]
[MemberNotNullAttribute("_buttonTableLayoutPanel")]
[MemberNotNullAttribute("_pictureLabelTableLayoutPanel")]
[MemberNotNullAttribute("_overarchingTableLayoutPanel")]
[MemberNotNullAttribute("_detailsTextBox")]
private void InitializeComponent();
    private void OnButtonClick(object s, EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.GridToolTip : Control {
    private Control[] _controls;
    [NullableAttribute("2")]
private string _toolTipText;
    private bool _dontShow;
    private static int MaximumToolTipLength;
    [NullableAttribute("2")]
public string ToolTip { get; public set; }
    protected CreateParams CreateParams { get; }
    internal GridToolTip(Control[] controls);
    [NullableContextAttribute("2")]
public string get_ToolTip();
    [NullableContextAttribute("2")]
public void set_ToolTip(string value);
    protected virtual CreateParams get_CreateParams();
    private ToolInfoWrapper`1<Control> GetTOOLINFO(Control c);
    private void OnControlCreateHandle(object sender, EventArgs e);
    private void OnControlDestroyHandle(object sender, EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("2")]
private void SetupToolTip(Control control);
    public void Reset();
    protected virtual void WndProc(Message& msg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.HelpPane : SnappableControl {
    private Label _titleLabel;
    private Label _descriptionLabel;
    [NullableAttribute("2")]
private string _fullDescription;
    private int _lineHeight;
    private bool _needUpdateUIWithFont;
    protected static int BorderSize;
    protected static int DefaultWidth;
    protected static int DefaultHeight;
    protected static int MinimumLines;
    private int _borderSize;
    private Rectangle _lastClientRectangle;
    public int Lines { get; public set; }
    internal bool SupportsUiaProviders { get; }
    internal HelpPane(PropertyGrid owner);
    public virtual int get_Lines();
    public virtual void set_Lines(int value);
    public virtual int GetOptimalHeight(int width);
    internal virtual void LayoutWindow();
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private void SetLabelBounds();
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    public virtual void SetDescription(string title, string description);
    public virtual int SnapHeightRequest(int newHeight);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal virtual bool get_SupportsUiaProviders();
    internal void UpdateTextRenderingEngine();
    private void UpdateUIWithFont();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.ImmutablePropertyDescriptorGridEntry : PropertyDescriptorGridEntry {
    internal bool IsPropertyReadOnly { get; }
    public object PropertyValue { get; public set; }
    public bool ShouldRenderReadOnly { get; }
    private GridEntry InstanceParentGridEntry { get; }
    internal ImmutablePropertyDescriptorGridEntry(PropertyGrid ownerGrid, GridEntry parent, PropertyDescriptor propertyInfo, bool hide);
    internal virtual bool get_IsPropertyReadOnly();
    public virtual object get_PropertyValue();
    public virtual void set_PropertyValue(object value);
    protected virtual bool SendNotification(object owner, Notify notification);
    public virtual bool get_ShouldRenderReadOnly();
    private GridEntry get_InstanceParentGridEntry();
}
[NullableContextAttribute("1")]
public interface System.Windows.Forms.PropertyGridInternal.IRootGridEntry {
    public AttributeCollection BrowsableAttributes { get; public set; }
    public abstract virtual AttributeCollection get_BrowsableAttributes();
    public abstract virtual void set_BrowsableAttributes(AttributeCollection value);
    public abstract virtual void ResetBrowsableAttributes();
    public abstract virtual void ShowCategories(bool showCategories);
}
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor[] _descriptors;
    private Nullable`1<bool> _localizable;
    private Nullable`1<bool> _readOnly;
    private Nullable`1<bool> _canReset;
    private MultiMergeCollection _collection;
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public string DisplayName { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public PropertyDescriptor Item { get; }
    public MergePropertyDescriptor(PropertyDescriptor[] descriptors);
    public virtual Type get_ComponentType();
    [RequiresUnreferencedCodeAttribute("PropertyDescriptor's PropertyType cannot be statically discovered.")]
public virtual TypeConverter get_Converter();
    public virtual string get_DisplayName();
    public virtual bool get_IsLocalizable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public PropertyDescriptor get_Item(int index);
    public virtual bool CanResetValue(object component);
    private static object CopyValue(object value);
    protected virtual AttributeCollection CreateAttributeCollection();
    private object GetPropertyOwnerForComponent(Array a, int i);
    [RequiresUnreferencedCodeAttribute("Editors registered in TypeDescriptor.AddEditorTable may be trimmed. PropertyDescriptor's PropertyType cannot be statically discovered.")]
public virtual object GetEditor(Type editorBaseType);
    public virtual object GetValue(object component);
    public object GetValue(Array components, Boolean& allEqual);
    internal Object[] GetValues(Array components);
    public virtual void ResetValue(object component);
    private void SetCollectionValues(Array a, IList listValue);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.MultiPropertyDescriptorGridEntry : PropertyDescriptorGridEntry {
    private MergePropertyDescriptor _mergedDescriptor;
    private Object[] _objects;
    [NullableAttribute("2")]
public IContainer Container { get; }
    public bool Expandable { get; }
    unknown object PropertyValue {public set; }
    public MultiPropertyDescriptorGridEntry(PropertyGrid ownerGrid, GridEntry parent, Object[] objectArray, PropertyDescriptor[] propertyDescriptors, bool hide);
    [NullableContextAttribute("2")]
public virtual IContainer get_Container();
    public virtual bool get_Expandable();
    public virtual void set_PropertyValue(object value);
    protected virtual bool CreateChildren(bool diffOldChildren);
    internal virtual object GetValueOwnerInternal();
    public virtual IComponent[] GetComponents();
    public virtual string GetPropertyTextValue(object value);
    internal virtual bool SendNotification(GridEntry entry, Notify notification);
    protected virtual void NotifyParentsOfChanges(GridEntry entry);
    [NullableContextAttribute("2")]
protected virtual bool SendNotification(object owner, Notify notification);
    private static bool OwnersEqual(object owner1, object owner2);
    public virtual bool OnComponentChanging();
    public virtual void OnComponentChanged();
}
internal class System.Windows.Forms.PropertyGridInternal.MultiSelectRootGridEntry : SingleSelectRootGridEntry {
    [NullableAttribute("1")]
private static PropertyDescriptorComparer s_propertyComparer;
    internal bool ForceReadOnly { get; }
    [NullableContextAttribute("1")]
internal MultiSelectRootGridEntry(PropertyGridView view, Object[] target, IServiceProvider baseProvider, IDesignerHost host, PropertyTab tab, PropertySort sortType);
    private static MultiSelectRootGridEntry();
    internal virtual bool get_ForceReadOnly();
    protected virtual bool CreateChildren(bool diffOldChildren);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.PropertyGridInternal.PropertiesTab : PropertyTab {
    public string TabName { get; }
    public string HelpKeyword { get; }
    public virtual string get_TabName();
    public virtual string get_HelpKeyword();
    public virtual PropertyDescriptor GetDefaultProperty(object obj);
    public virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    [NullableContextAttribute("2")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes);
}
internal class System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry : GridEntry {
    private PropertyDescriptor _propertyDescriptor;
    private TypeConverter _exceptionConverter;
    private UITypeEditor _exceptionEditor;
    private bool _isSerializeContentsProperty;
    private Nullable`1<bool> _parensAroundName;
    private IPropertyValueUIService _propertyValueUIService;
    protected IEventBindingService _eventBindings;
    private bool _propertyValueUIServiceChecked;
    private PropertyValueUIItem[] _propertyValueUIItems;
    private Rectangle[] _uiItemRects;
    private bool _readOnlyVerified;
    private bool _forceRenderReadOnly;
    private string _helpKeyword;
    private string _toolTipText;
    private bool _hide;
    private static int s_scaledImageSizeX;
    private static int s_scaledImageSizeY;
    private static bool s_isScalingInitialized;
    private static int ImageSize;
    private static IEventBindingService s_targetBindingService;
    private static IComponent s_targetComponent;
    private static EventDescriptor s_targetEventdesc;
    public bool AllowMerge { get; }
    protected AttributeCollection Attributes { get; }
    public string HelpKeyword { get; }
    internal string LabelToolTipText { get; }
    internal bool Enumerable { get; }
    internal bool IsPropertyReadOnly { get; }
    public bool IsValueEditable { get; }
    public bool NeedsDropDownButton { get; }
    internal bool ParensAroundName { get; }
    public string PropertyCategory { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public string PropertyDescription { get; }
    public string PropertyLabel { get; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public object PropertyValue { get; public set; }
    private IPropertyValueUIService PropertyValueUIService { get; }
    public bool ShouldRenderReadOnly { get; }
    internal TypeConverter TypeConverter { get; }
    internal UITypeEditor UITypeEditor { get; }
    internal PropertyDescriptorGridEntry(PropertyGrid ownerGrid, GridEntry parent, bool hide);
    internal PropertyDescriptorGridEntry(PropertyGrid ownerGrid, GridEntry parent, PropertyDescriptor propertyDescriptor, bool hide);
    private static PropertyDescriptorGridEntry();
    public virtual bool get_AllowMerge();
    protected virtual AttributeCollection get_Attributes();
    public virtual string get_HelpKeyword();
    internal virtual string get_LabelToolTipText();
    internal virtual bool get_Enumerable();
    internal virtual bool get_IsPropertyReadOnly();
    public virtual bool get_IsValueEditable();
    public virtual bool get_NeedsDropDownButton();
    internal bool get_ParensAroundName();
    public virtual string get_PropertyCategory();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public virtual string get_PropertyDescription();
    public virtual string get_PropertyLabel();
    public virtual string get_PropertyName();
    public virtual Type get_PropertyType();
    public virtual object get_PropertyValue();
    public virtual void set_PropertyValue(object value);
    private IPropertyValueUIService get_PropertyValueUIService();
    public virtual bool get_ShouldRenderReadOnly();
    internal virtual TypeConverter get_TypeConverter();
    internal virtual UITypeEditor get_UITypeEditor();
    internal virtual void EditPropertyValue(PropertyGridView gridView);
    internal virtual Point GetLabelToolTipLocation(int mouseX, int mouseY);
    private object GetPropertyValue(object owner);
    protected void Initialize(PropertyDescriptor propertyDescriptor);
    protected virtual void NotifyParentsOfChanges(GridEntry entry);
    protected virtual bool SendNotification(object owner, Notify type);
    public virtual void OnComponentChanged();
    public virtual bool OnMouseClick(int x, int y, int count, MouseButtons button);
    public virtual void PaintLabel(Graphics g, Rectangle rect, Rectangle clipRect, bool selected, bool paintFullLabel);
    private object SetPropertyValue(object owner, object value, bool reset, string undoText);
    protected void SetPropertyValueCore(object owner, object newValue);
    protected bool ViewEvent(object owner, string newHandler, EventDescriptor eventDescriptor, bool alwaysNavigate);
    private static void ShowCodeIdle(object sender, EventArgs e);
    protected virtual GridEntryAccessibleObject GetAccessibilityObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.PropertyGridInternal.PropertyGridCommands : object {
    protected static Guid wfcMenuGroup;
    protected static Guid wfcMenuCommand;
    public static CommandID Reset;
    public static CommandID Description;
    public static CommandID Hide;
    public static CommandID Commands;
    private static PropertyGridCommands();
}
internal class System.Windows.Forms.PropertyGridInternal.PropertyGridView : Control {
    [CompilerGeneratedAttribute]
private static Point <InvalidPoint>k__BackingField;
    private static TraceSwitch s_gridViewDebugPaint;
    private static int EditIndent;
    private static int OutlineIndent;
    private static int OutlineSize;
    private int _outlineSize;
    private static int OutlineSizeExplorerTreeStyle;
    private int _outlineSizeExplorerTreeStyle;
    private static int PaintWidth;
    private int _paintWidth;
    private static int PaintIndent;
    private int _paintIndent;
    private static int MaxListBoxHeight;
    private int _maxListBoxHeight;
    private static int RowLabel;
    private static int RowValue;
    internal static short GdiPlusSpace;
    internal static int MaxRecurseExpand;
    private static int DotDotDotIconWidth;
    private static int DotDotDotIconHeight;
    private static int DownArrowIconWidth;
    private static int DownArrowIconHeight;
    private static int Offset2Pixels;
    private int _offset2Units;
    [CompilerGeneratedAttribute]
private static Point <InvalidPosition>k__BackingField;
    private Font _boldFont;
    private Color _grayTextColor;
    private bool _grayTextColorModified;
    private GridEntryCollection _allGridEntries;
    [CompilerGeneratedAttribute]
private int <TotalProperties>k__BackingField;
    private int _visibleRows;
    private int _labelWidth;
    public double _labelRatio;
    private short _requiredLabelPaintMargin;
    private int _selectedRow;
    private GridEntry _selectedGridEntry;
    private int _tipInfo;
    private GridViewTextBox _editTextBox;
    private DropDownButton _dropDownButton;
    private DropDownButton _dialogButton;
    private GridViewListBox _listBox;
    private DropDownHolder _dropDownHolder;
    private Rectangle _lastClientRect;
    private Control _currentEditor;
    private ScrollBar _scrollBar;
    private GridToolTip _toolTip;
    private GridErrorDialog _errorDialog;
    private Flags _flags;
    private ErrorState _errorState;
    private Point _location;
    private string _originalTextValue;
    private int _cumulativeVerticalWheelDelta;
    private long _rowSelectTime;
    private Point _rowSelectPos;
    private Point _lastMouseDown;
    private int _lastMouseMove;
    private GridEntry _lastClickedEntry;
    private IServiceProvider _serviceProvider;
    private IHelpService _topHelpService;
    private IHelpService _helpService;
    private EventHandler _valueClick;
    private EventHandler _labelClick;
    private EventHandler _outlineClick;
    private EventHandler _valueDoubleClick;
    private EventHandler _labelDoubleClick;
    private GridEntryRecreateChildrenEventHandler _recreateChildren;
    private int _cachedRowHeight;
    private GridPositionData _positionData;
    [CompilerGeneratedAttribute]
private PropertyGrid <OwnerGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private GridEntryCollection <TopLevelGridEntries>k__BackingField;
    private static Point InvalidPoint { get; }
    private static Point InvalidPosition { get; }
    public int TotalProperties { get; private set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool CanCopy { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool CanCut { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool CanPaste { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool CanUndo { get; }
    internal DropDownButton DropDownButton { get; }
    internal Button DialogButton { get; }
    private GridViewTextBox EditTextBox { get; }
    internal AccessibleObject EditAccessibleObject { get; }
    internal GridViewListBox DropDownListBox { get; }
    internal AccessibleObject DropDownListBoxAccessibleObject { get; }
    internal bool DrawValuesRightToLeft { get; }
    internal DropDownHolder DropDownControlHolder { get; }
    internal bool DropDownVisible { get; }
    public bool FocusInside { get; }
    internal Color GrayTextColor { get; internal set; }
    private GridErrorDialog ErrorDialog { get; }
    private bool HasEntries { get; }
    unknown int LabelPaintMargin {internal set; }
    private bool EditTextBoxNeedsCommit { get; }
    public PropertyGrid OwnerGrid { get; private set; }
    private int RowHeight { get; }
    public Point ContextMenuDefaultLocation { get; }
    private ScrollBar ScrollBar { get; }
    internal GridEntry SelectedGridEntry { get; internal set; }
    public IServiceProvider ServiceProvider { get; public set; }
    internal bool SupportsUiaProviders { get; }
    private int TipColumn { get; private set; }
    private int TipRow { get; private set; }
    private GridToolTip ToolTip { get; }
    internal GridEntryCollection TopLevelGridEntries { get; private set; }
    public Color LineColor { get; }
    public Color SelectedItemWithFocusForeColor { get; }
    public Color SelectedItemWithFocusBackColor { get; }
    public int LabelWidth { get; }
    internal bool IsExplorerTreeSupported { get; }
    public int OutlineIconSize { get; }
    internal bool IsEditTextBoxCreated { get; }
    public int GridEntryHeight { get; }
    public static int SplitterWidth { get; }
    public int TotalWidth { get; }
    public int ValuePaintIndent { get; }
    public int ValuePaintWidth { get; }
    public static int ValueStringIndent { get; }
    public int ValueWidth { get; }
    public static int DefaultOutlineIndent { get; }
    public bool InPropertySet { get; private set; }
    public Color TextColor { get; }
    public PropertyGridView(IServiceProvider serviceProvider, PropertyGrid propertyGrid);
    private static PropertyGridView();
    [CompilerGeneratedAttribute]
private static Point get_InvalidPoint();
    [CompilerGeneratedAttribute]
private static Point get_InvalidPosition();
    [CompilerGeneratedAttribute]
public int get_TotalProperties();
    [CompilerGeneratedAttribute]
private void set_TotalProperties(int value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public bool get_CanCopy();
    public bool get_CanCut();
    public bool get_CanPaste();
    public bool get_CanUndo();
    internal DropDownButton get_DropDownButton();
    internal Button get_DialogButton();
    private GridViewTextBox get_EditTextBox();
    internal AccessibleObject get_EditAccessibleObject();
    internal GridViewListBox get_DropDownListBox();
    internal AccessibleObject get_DropDownListBoxAccessibleObject();
    internal bool get_DrawValuesRightToLeft();
    internal DropDownHolder get_DropDownControlHolder();
    internal bool get_DropDownVisible();
    public bool get_FocusInside();
    internal Color get_GrayTextColor();
    internal void set_GrayTextColor(Color value);
    private GridErrorDialog get_ErrorDialog();
    private bool get_HasEntries();
    internal void set_LabelPaintMargin(int value);
    private bool get_EditTextBoxNeedsCommit();
    [CompilerGeneratedAttribute]
public PropertyGrid get_OwnerGrid();
    [CompilerGeneratedAttribute]
private void set_OwnerGrid(PropertyGrid value);
    private int get_RowHeight();
    public Point get_ContextMenuDefaultLocation();
    private ScrollBar get_ScrollBar();
    internal GridEntry get_SelectedGridEntry();
    internal void set_SelectedGridEntry(GridEntry value);
    public IServiceProvider get_ServiceProvider();
    public void set_ServiceProvider(IServiceProvider value);
    internal virtual bool get_SupportsUiaProviders();
    private int get_TipColumn();
    private void set_TipColumn(int value);
    private int get_TipRow();
    private void set_TipRow(int value);
    private GridToolTip get_ToolTip();
    [CompilerGeneratedAttribute]
internal GridEntryCollection get_TopLevelGridEntries();
    [CompilerGeneratedAttribute]
private void set_TopLevelGridEntries(GridEntryCollection value);
    internal GridEntryCollection AccessibilityGetGridEntries();
    internal Rectangle AccessibilityGetGridEntryBounds(GridEntry gridEntry);
    internal int AccessibilityGetGridEntryChildID(GridEntry gridEntry);
    internal void AccessibilitySelect(GridEntry entry);
    private void AddGridEntryEvents(GridEntryCollection entries, int startIndex, int count);
    private static void AdjustOrigin(Graphics g, Point newOrigin, Rectangle& r);
    private void CancelSplitterMove();
    internal GridPositionData CaptureGridPositionData();
    private void ClearGridEntryEvents(GridEntryCollection entries, int startIndex, int count);
    public void ClearGridEntries();
    public sealed virtual void CloseDropDown();
    private void CloseDropDownInternal(bool resetFocus);
    private void CommonEditorHide(bool always);
    private void CommonEditorSetup(Control control);
    private void CommonEditorUse(Control control, Rectangle targetRectangle);
    private static int CountPropertiesFromOutline(GridEntryCollection entries);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private Bitmap CreateResizedBitmap(string icon, int width, int height);
    private void CreateUI();
    protected virtual void Dispose(bool disposing);
    public void DoCopyCommand();
    public void DoCutCommand();
    public void DoPasteCommand();
    public void DoUndoCommand();
    private static int GetEntryLabelIndent(GridEntry gridEntry);
    private int GetEntryLabelLength(Graphics g, GridEntry gridEntry);
    private bool IsEntryLabelLong(Graphics g, GridEntry gridEntry);
    private void DrawLabel(Graphics g, int row, Rectangle rect, bool selected, bool longLabelrequest, Rectangle clipRect);
    private void DrawValue(Graphics g, int row, Rectangle clipRect);
    private void F4Selection(bool popupModalDialog);
    public void DoubleClickRow(int row, bool toggleExpand, int type);
    public Font GetBaseFont();
    public Font GetBoldFont();
    public Color get_LineColor();
    public Color get_SelectedItemWithFocusForeColor();
    public Color get_SelectedItemWithFocusBackColor();
    public int get_LabelWidth();
    internal bool get_IsExplorerTreeSupported();
    public int get_OutlineIconSize();
    internal bool get_IsEditTextBoxCreated();
    public int get_GridEntryHeight();
    internal int GetPropertyLocation(string propertyName, bool getXY, bool rowValue);
    public sealed virtual object GetService(Type classService);
    public static int get_SplitterWidth();
    public int get_TotalWidth();
    public int get_ValuePaintIndent();
    public int get_ValuePaintWidth();
    public static int get_ValueStringIndent();
    public int get_ValueWidth();
    public sealed virtual void DropDownControl(Control control);
    public void DropDownUpdate();
    public bool EnsurePendingChangesCommitted();
    private bool FilterEditWndProc(Message& m);
    private bool FilterReadOnlyEditKeyPress(char keyChar);
    public bool WillFilterKeyPress(char charPressed);
    public void FilterKeyPress(char keyChar);
    private GridEntry FindEquivalentGridEntry(GridEntryCollection gridEntries);
    private Point FindPosition(int x, int y);
    private GridEntryCollection GetAllGridEntries(bool updateCache);
    private static int GetCurrentValueIndex(GridEntry gridEntry);
    public static int get_DefaultOutlineIndent();
    public int GetScrollOffset();
    private static GridEntryCollection GetGridEntryHierarchy(GridEntry gridEntry);
    private GridEntry GetGridEntryFromRow(int row);
    private GridEntry GetGridEntryFromOffset(int offset);
    private static int GetGridEntriesFromOutline(GridEntryCollection entries, int current, int target, GridEntry[] targetEntries);
    private Size GetOurSize();
    public Rectangle GetRectangle(int row, int flRow);
    internal int GetRowFromGridEntry(GridEntry gridEntry);
    public bool get_InPropertySet();
    private void set_InPropertySet(bool value);
    private bool GetScrollbarHidden();
    public string GetTestingInfo(int entry);
    public Color get_TextColor();
    private void LayoutWindow(bool invalidate);
    internal void InvalidateGridEntryValue(GridEntry ge);
    private void InvalidateRow(int row);
    private void InvalidateRows(int startRow, int endRow);
    private void InvalidateRows(int startRow, int endRow, int type);
    protected virtual bool IsInputKey(Keys keyData);
    private bool IsMyChild(Control control);
    private bool IsScrollValueValid(int newValue);
    internal static bool IsSiblingControl(Control control1, Control control2);
    private void MoveSplitterTo(int xPosition);
    private void OnButtonClick(object sender, EventArgs e);
    private void OnButtonKeyDown(object sender, KeyEventArgs ke);
    private void OnChildLostFocus(object sender, EventArgs e);
    private void OnDropDownButtonGotFocus(object sender, EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    private void OnListChange(object sender, EventArgs e);
    private void OnListMouseUp(object sender, MouseEventArgs me);
    private void OnListClick(object sender, EventArgs e);
    private void OnListDrawItem(object sender, DrawItemEventArgs e);
    private void OnListKeyDown(object sender, KeyEventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void OnEditChange(object sender, EventArgs e);
    private void OnEditGotFocus(object sender, EventArgs e);
    private bool ProcessEnumUpAndDown(GridEntry entry, Keys keyCode, bool closeDropDown);
    private void OnEditKeyDown(object sender, KeyEventArgs e);
    private void OnEditKeyPress(object sender, KeyPressEventArgs e);
    private void OnEditLostFocus(object sender, EventArgs e);
    private void OnEditMouseDown(object sender, MouseEventArgs e);
    private bool OnEscape(Control sender);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void OnKeyDown(object sender, KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnMove(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs pevent);
    protected virtual void OnPaint(PaintEventArgs e);
    private void OnGridEntryLabelDoubleClick(object s, EventArgs e);
    private void OnGridEntryValueDoubleClick(object s, EventArgs e);
    private void OnGridEntryLabelClick(object sender, EventArgs e);
    private void OnGridEntryOutlineClick(object sender, EventArgs e);
    private void OnGridEntryValueClick(object sender, EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    private void OnRecreateChildren(object s, GridEntryRecreateChildrenEventArgs e);
    protected virtual void OnResize(EventArgs e);
    private void OnScroll(object sender, ScrollEventArgs e);
    private void OnSysColorChange(object sender, UserPreferenceChangedEventArgs e);
    public void PopupEditor(int row);
    internal static void PositionTooltip(Control parent, GridToolTip toolTip, Rectangle itemRect);
    protected virtual bool ProcessDialogKey(Keys keyData);
    private void RecalculateProperties();
    internal void RecursivelyExpand(GridEntry gridEntry, bool initialize, bool expand, int maxExpands);
    public virtual void Refresh();
    public void Refresh(bool fullRefresh);
    private void Refresh(bool fullRefresh, int startRow, int endRow);
    public void Reset();
    private static void ResetOrigin(Graphics g);
    internal void RestoreHierarchyState(List`1<GridEntryCollection> expandedItems);
    internal static List`1<GridEntryCollection> SaveHierarchyState(GridEntryCollection entries, List`1<GridEntryCollection> expandedItems);
    private bool ScrollRows(int newOffset);
    internal void SelectGridEntry(GridEntry entry, bool pageIn);
    private void SelectRow(int row);
    public void SetConstants();
    private void SetCommitError(ErrorState error);
    private void SetCommitError(ErrorState error, bool capture);
    internal void SetExpand(GridEntry entry, bool value);
    private void SetFlag(Flags flag, bool value);
    public void SetScrollOffset(int offset);
    internal bool CommitEditTextBox();
    private bool CommitValue(object value);
    internal bool CommitValue(GridEntry entry, object value, bool closeDropDown);
    private bool CommitText(string text);
    internal virtual void ReleaseUiaProvider(HWND handle);
    internal void ReverseFocus();
    private bool SetScrollbarLength();
    public sealed virtual DialogResult ShowDialog(Form dialog);
    private void ShowFormatExceptionMessage(string propertyName, Exception ex);
    internal void ShowInvalidMessage(string propertyName, Exception ex);
    private bool SplitterInside(int x);
    private void TabSelection();
    internal void RemoveSelectedEntryHelpAttributes();
    private void UpdateHelpAttributes(GridEntry oldEntry, GridEntry newEntry);
    private static void UpdateHelpAttributes(IHelpService helpService, GridEntry entry, bool addAsF1);
    private void UpdateUIBasedOnFont(bool layoutRequired);
    private bool UnfocusSelection();
    private void UpdateResetCommand(GridEntry gridEntry);
    internal bool WantsTab(bool forward);
    private bool WmNotify(Message& m);
    protected virtual void WndProc(Message& m);
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    private void RescaleConstants();
    [CompilerGeneratedAttribute]
internal static Bitmap <CreateResizedBitmap>g__GetBitmapFromIcon|165_0(string iconName, int iconWidth, int iconHeight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry : GridEntry {
    [NullableAttribute("2")]
private string _valueClassName;
    [NullableAttribute("2")]
private GridEntry _defaultEntry;
    private IDesignerHost _host;
    private IServiceProvider _baseProvider;
    private PropertyTab _ownerTab;
    private PropertyGridView _ownerGridView;
    [NullableAttribute("2")]
private AttributeCollection _browsableAttributes;
    [NullableAttribute("2")]
private IComponentChangeService _changeService;
    protected bool _forceReadOnlyChecked;
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    protected object Target { get; private set; }
    public AttributeCollection BrowsableAttributes { get; public set; }
    [NullableAttribute("2")]
protected IComponentChangeService ComponentChangeService { get; }
    public PropertyTab OwnerTab { get; }
    [NullableAttribute("2")]
internal GridEntry DefaultChild { get; internal set; }
    internal IDesignerHost DesignerHost { get; internal set; }
    internal bool ForceReadOnly { get; }
    internal PropertyGridView OwnerGridView { get; internal set; }
    public GridItemType GridItemType { get; }
    [NullableAttribute("2")]
public string HelpKeyword { get; }
    [NullableAttribute("2")]
public string PropertyLabel { get; }
    public object PropertyValue { get; public set; }
    internal SingleSelectRootGridEntry(PropertyGridView ownerGridView, object target, IServiceProvider baseProvider, IDesignerHost host, PropertyTab ownerTab, PropertySort sortType);
    [CompilerGeneratedAttribute]
protected object get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(object value);
    public virtual AttributeCollection get_BrowsableAttributes();
    public virtual void set_BrowsableAttributes(AttributeCollection value);
    [NullableContextAttribute("2")]
protected virtual IComponentChangeService get_ComponentChangeService();
    public virtual PropertyTab get_OwnerTab();
    [NullableContextAttribute("2")]
internal sealed virtual GridEntry get_DefaultChild();
    [NullableContextAttribute("2")]
internal sealed virtual void set_DefaultChild(GridEntry value);
    internal sealed virtual IDesignerHost get_DesignerHost();
    internal sealed virtual void set_DesignerHost(IDesignerHost value);
    internal virtual bool get_ForceReadOnly();
    internal virtual PropertyGridView get_OwnerGridView();
    internal virtual void set_OwnerGridView(PropertyGridView value);
    public virtual GridItemType get_GridItemType();
    [NullableContextAttribute("2")]
public virtual string get_HelpKeyword();
    [NullableContextAttribute("2")]
public virtual string get_PropertyLabel();
    public virtual object get_PropertyValue();
    public virtual void set_PropertyValue(object value);
    protected virtual bool CreateChildren(bool diffOldChildren);
    protected virtual void Dispose(bool disposing);
    public virtual object GetService(Type serviceType);
    public sealed virtual void ResetBrowsableAttributes();
    public virtual void ShowCategories(bool sortByCategories);
    protected void CategorizePropertyEntries();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridToolStrip : ToolStrip {
    private PropertyGrid _parentPropertyGrid;
    internal bool SupportsUiaProviders { get; }
    public PropertyGridToolStrip(PropertyGrid parentPropertyGrid);
    internal virtual bool get_SupportsUiaProviders();
    protected virtual AccessibleObject CreateAccessibilityInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyGridToolStripButton : ToolStripButton {
    private PropertyGrid _owningPropertyGrid;
    private bool _selectItemEnabled;
    internal PropertyGridToolStripButton(PropertyGrid propertyGrid, bool selectItemEnabled);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private void DrawDashedBorer(Graphics graphics);
    private void DrawHightContrastDashedBorer(Graphics graphics);
    protected virtual void OnPaint(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.PropertyManager : BindingManagerBase {
    [NullableAttribute("2")]
private object _dataSource;
    [NullableAttribute("2")]
private string _propName;
    [NullableAttribute("2")]
private PropertyDescriptor _propInfo;
    private bool _bound;
    [NullableAttribute("2")]
public object Current { get; }
    internal Type BindType { get; }
    [NullableAttribute("2")]
internal object DataSource { get; }
    internal bool IsBinding { get; }
    public int Position { get; public set; }
    public int Count { get; }
    internal PropertyManager(object dataSource);
    internal PropertyManager(object dataSource, string propName);
    [NullableContextAttribute("2")]
public virtual object get_Current();
    private void PropertyChanged(object sender, EventArgs ea);
    [NullableContextAttribute("2")]
private protected virtual void SetDataSource(object dataSource);
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    internal virtual Type get_BindType();
    internal virtual string GetListName();
    public virtual void SuspendBinding();
    public virtual void ResumeBinding();
    protected internal virtual string GetListName(ArrayList listAccessors);
    public virtual void CancelCurrentEdit();
    public virtual void EndCurrentEdit();
    protected virtual void UpdateIsBinding();
    protected internal virtual void OnCurrentChanged(EventArgs ea);
    protected internal virtual void OnCurrentItemChanged(EventArgs ea);
    [NullableContextAttribute("2")]
internal virtual object get_DataSource();
    internal virtual bool get_IsBinding();
    public virtual int get_Position();
    public virtual void set_Position(int value);
    public virtual int get_Count();
    public virtual void AddNew();
    public virtual void RemoveAt(int index);
}
public enum System.Windows.Forms.PropertySort : Enum {
    public int value__;
    public static PropertySort NoSort;
    public static PropertySort Alphabetical;
    public static PropertySort Categorized;
    public static PropertySort CategorizedAlphabetical;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.PropertyStore : object {
    private static int s_currentKey;
    private IntegerEntry[] _intEntries;
    private ObjectEntry[] _objEntries;
    public bool ContainsInteger(int key);
    public bool ContainsObject(int key);
    public static int CreateKey();
    public Color GetColor(int key);
    public Color GetColor(int key, Boolean& found);
    public Padding GetPadding(int key, Boolean& found);
    public Size GetSize(int key, Boolean& found);
    public Rectangle GetRectangle(int key, Boolean& found);
    public int GetInteger(int key);
    public int GetInteger(int key, Boolean& found);
    public object GetObject(int key);
    public bool TryGetObject(int key, T& value);
    public bool ContainsObjectThatIsNotNull(int key);
    public object GetObject(int key, Boolean& found);
    [MemberNotNullWhenAttribute("True", "_intEntries")]
private bool LocateIntegerEntry(short entryKey, Int32& index);
    [MemberNotNullWhenAttribute("True", "_objEntries")]
private bool LocateObjectEntry(short entryKey, Int32& index);
    public void RemoveInteger(int key);
    public void RemoveObject(int key);
    public void SetColor(int key, Color value);
    public void SetPadding(int key, Padding value);
    public void SetRectangle(int key, Rectangle value);
    public void SetSize(int key, Size value);
    public void SetInteger(int key, int value);
    public void SetObject(int key, object value);
    private static short SplitKey(int key, Int16& element);
    [ConditionalAttribute("DEBUG_PROPERTYSTORE")]
private void Debug_VerifyLocateIntegerEntry(int index, short entryKey, int length);
    [ConditionalAttribute("DEBUG_PROPERTYSTORE")]
private void Debug_VerifyLocateObjectEntry(int index, short entryKey, int length);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.PropertyTabChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PropertyTab <OldTab>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTab <NewTab>k__BackingField;
    public PropertyTab OldTab { get; }
    public PropertyTab NewTab { get; }
    public PropertyTabChangedEventArgs(PropertyTab oldTab, PropertyTab newTab);
    [CompilerGeneratedAttribute]
public PropertyTab get_OldTab();
    [CompilerGeneratedAttribute]
public PropertyTab get_NewTab();
}
public class System.Windows.Forms.PropertyTabChangedEventHandler : MulticastDelegate {
    public PropertyTabChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object s, PropertyTabChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object s, PropertyTabChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.PropertyValueChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GridItem <ChangedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    public GridItem ChangedItem { get; }
    public object OldValue { get; }
    public PropertyValueChangedEventArgs(GridItem changedItem, object oldValue);
    [CompilerGeneratedAttribute]
public GridItem get_ChangedItem();
    [CompilerGeneratedAttribute]
public object get_OldValue();
}
public class System.Windows.Forms.PropertyValueChangedEventHandler : MulticastDelegate {
    public PropertyValueChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object s, PropertyValueChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object s, PropertyValueChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.QueryAccessibilityHelpEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <HelpNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    public string HelpNamespace { get; public set; }
    public string HelpString { get; public set; }
    public string HelpKeyword { get; public set; }
    public QueryAccessibilityHelpEventArgs(string helpNamespace, string helpString, string helpKeyword);
    [CompilerGeneratedAttribute]
public string get_HelpNamespace();
    [CompilerGeneratedAttribute]
public void set_HelpNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_HelpString();
    [CompilerGeneratedAttribute]
public void set_HelpString(string value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
}
public class System.Windows.Forms.QueryAccessibilityHelpEventHandler : MulticastDelegate {
    public QueryAccessibilityHelpEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, QueryAccessibilityHelpEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryAccessibilityHelpEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.QueryContinueDragEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <KeyState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EscapePressed>k__BackingField;
    [CompilerGeneratedAttribute]
private DragAction <Action>k__BackingField;
    public int KeyState { get; }
    public bool EscapePressed { get; }
    public DragAction Action { get; public set; }
    public QueryContinueDragEventArgs(int keyState, bool escapePressed, DragAction action);
    [CompilerGeneratedAttribute]
public int get_KeyState();
    [CompilerGeneratedAttribute]
public bool get_EscapePressed();
    [CompilerGeneratedAttribute]
public DragAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(DragAction value);
}
public class System.Windows.Forms.QueryContinueDragEventHandler : MulticastDelegate {
    public QueryContinueDragEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, QueryContinueDragEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryContinueDragEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.QuestionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Response>k__BackingField;
    public bool Response { get; public set; }
    public QuestionEventArgs(bool response);
    [CompilerGeneratedAttribute]
public bool get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(bool value);
}
public class System.Windows.Forms.QuestionEventHandler : MulticastDelegate {
    public QuestionEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, QuestionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QuestionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Checked")]
[DefaultEventAttribute("CheckedChanged")]
[DefaultBindingPropertyAttribute("Checked")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerAttribute("System.Windows.Forms.Design.RadioButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionRadioButton")]
public class System.Windows.Forms.RadioButton : ButtonBase {
    private static object EVENT_CHECKEDCHANGED;
    private static ContentAlignment AnyRight;
    private bool _firstfocus;
    private bool _isChecked;
    private bool _autoCheck;
    private ContentAlignment _checkAlign;
    private Appearance _appearance;
    private static int FlatSystemStylePaddingWidth;
    private static int FlatSystemStyleMinimumHeight;
    internal int _flatSystemStylePaddingWidth;
    internal int _flatSystemStyleMinimumHeight;
    private static object EVENT_APPEARANCECHANGED;
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("RadioButtonAutoCheckDescr")]
public bool AutoCheck { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RadioButtonAppearanceDescr")]
public Appearance Appearance { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("RadioButtonCheckAlignDescr")]
public ContentAlignment CheckAlign { get; public set; }
    [BindableAttribute("True")]
[SettingsBindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("RadioButtonCheckedDescr")]
public bool Checked { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    internal Rectangle OverChangeRectangle { get; }
    internal Rectangle DownChangeRectangle { get; }
    internal bool SupportsUiaProviders { get; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ContentAlignment TextAlign { get; public set; }
    private static RadioButton();
    public bool get_AutoCheck();
    public void set_AutoCheck(bool value);
    public Appearance get_Appearance();
    public void set_Appearance(Appearance value);
    [NullableContextAttribute("2")]
public void add_AppearanceChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AppearanceChanged(EventHandler value);
    public ContentAlignment get_CheckAlign();
    public void set_CheckAlign(ContentAlignment value);
    public bool get_Checked();
    public void set_Checked(bool value);
    [NullableContextAttribute("2")]
public void add_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseDoubleClick(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseDoubleClick(MouseEventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    internal virtual Rectangle get_OverChangeRectangle();
    internal virtual Rectangle get_DownChangeRectangle();
    internal virtual bool get_SupportsUiaProviders();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    [NullableContextAttribute("2")]
public void add_CheckedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CheckedChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    private void PerformAutoUpdates(bool tabbedInto);
    private void WipeTabStops(bool tabbedInto);
    internal virtual ButtonBaseAdapter CreateFlatAdapter();
    internal virtual ButtonBaseAdapter CreatePopupAdapter();
    internal virtual ButtonBaseAdapter CreateStandardAdapter();
    private void OnAppearanceChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    public void PerformClick();
    protected internal virtual bool ProcessMnemonic(char charCode);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.RadioButtonRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    private static VisualStyleElement s_radioElement;
    [CompilerGeneratedAttribute]
private static bool <RenderMatchingApplicationState>k__BackingField;
    public static bool RenderMatchingApplicationState { get; public set; }
    private static bool RenderWithVisualStyles { get; }
    private static RadioButtonRenderer();
    [CompilerGeneratedAttribute]
public static bool get_RenderMatchingApplicationState();
    [CompilerGeneratedAttribute]
public static void set_RenderMatchingApplicationState(bool value);
    private static bool get_RenderWithVisualStyles();
    public static bool IsBackgroundPartiallyTransparent(RadioButtonState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, RadioButtonState state);
    internal static void DrawRadioButtonWithVisualStyles(HDC hdc, Point glyphLocation, RadioButtonState state, HWND hwnd);
    internal static void DrawRadioButton(Graphics graphics, Point glyphLocation, RadioButtonState state, HWND hwnd);
    [NullableContextAttribute("2")]
public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, bool focused, RadioButtonState state);
    [NullableContextAttribute("2")]
public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, bool focused, RadioButtonState state);
    [NullableContextAttribute("2")]
internal static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, bool focused, RadioButtonState state, HWND hwnd);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, Image image, Rectangle imageBounds, bool focused, RadioButtonState state);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, RadioButtonState state);
    internal static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, RadioButtonState state, HWND hwnd);
    public static Size GetGlyphSize(Graphics g, RadioButtonState state);
    internal static Size GetGlyphSize(HDC hdc, RadioButtonState state, HWND hwnd);
    internal static ButtonState ConvertToButtonState(RadioButtonState state);
    internal static RadioButtonState ConvertFromButtonState(ButtonState state, bool isHot);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(int state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ReadOnlyControlCollection : ControlCollection {
    private bool _isReadOnly;
    public bool IsReadOnly { get; }
    [NullableContextAttribute("1")]
public ReadOnlyControlCollection(Control owner, bool isReadOnly);
    public virtual void Add(Control value);
    internal virtual void AddInternal(Control value);
    public virtual void Clear();
    [NullableContextAttribute("1")]
internal virtual void RemoveInternal(Control value);
    public virtual void RemoveByKey(string key);
    public virtual bool get_IsReadOnly();
}
[ExtensionAttribute]
internal static class System.Windows.Forms.RegistryKeyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetMUIString(RegistryKey key, string keyName, string fallbackKeyName);
}
internal class System.Windows.Forms.RelatedCurrencyManager : CurrencyManager {
    private BindingManagerBase parentManager;
    private string dataField;
    private PropertyDescriptor fieldInfo;
    private static List`1<BindingManagerBase> IgnoreItemChangedTable;
    internal RelatedCurrencyManager(BindingManagerBase parentManager, string dataField);
    private static RelatedCurrencyManager();
    internal void Bind(BindingManagerBase parentManager, string dataField);
    private void UnwireParentManager(BindingManagerBase bmb);
    private void WireParentManager(BindingManagerBase bmb);
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties();
    internal virtual string GetListName();
    protected internal virtual string GetListName(ArrayList listAccessors);
    private void ParentManager_MetaDataChanged(object sender, EventArgs e);
    private void ParentManager_CurrentItemChanged(object sender, EventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class System.Windows.Forms.RelatedImageListAttribute : Attribute {
    private string _relatedImageList;
    public string RelatedImageList { get; }
    public RelatedImageListAttribute(string relatedImageList);
    public string get_RelatedImageList();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.RelatedPropertyManager : PropertyManager {
    private BindingManagerBase _parentManager;
    private PropertyDescriptor _fieldInfo;
    internal Type BindType { get; }
    [NullableAttribute("2")]
public object Current { get; }
    internal RelatedPropertyManager(BindingManagerBase parentManager, string dataField);
    [MemberNotNullAttribute("_parentManager")]
[MemberNotNullAttribute("_fieldInfo")]
private void Bind(BindingManagerBase parentManager, string dataField);
    internal virtual string GetListName();
    protected internal virtual string GetListName(ArrayList listAccessors);
    internal virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    private void ParentManager_CurrentItemChanged(object sender, EventArgs e);
    private void Refresh();
    internal virtual Type get_BindType();
    [NullableContextAttribute("2")]
public virtual object get_Current();
    private static object GetCurrentOrNull(BindingManagerBase parentManager);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.RetrieveVirtualItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ItemIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ListViewItem <Item>k__BackingField;
    public int ItemIndex { get; }
    public ListViewItem Item { get; public set; }
    public RetrieveVirtualItemEventArgs(int itemIndex);
    [CompilerGeneratedAttribute]
public int get_ItemIndex();
    [CompilerGeneratedAttribute]
public ListViewItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(ListViewItem value);
}
public class System.Windows.Forms.RetrieveVirtualItemEventHandler : MulticastDelegate {
    public RetrieveVirtualItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, RetrieveVirtualItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RetrieveVirtualItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.RichTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionRichTextBox")]
public class System.Windows.Forms.RichTextBox : TextBoxBase {
    [NullableAttribute("2")]
private static TraceSwitch s_richTextDbg;
    internal static int INPUT;
    internal static int OUTPUT;
    internal static int DIRECTIONMASK;
    internal static int ANSI;
    internal static int UNICODE;
    internal static int FORMATMASK;
    internal static int TEXTLF;
    internal static int TEXTCRLF;
    internal static int RTF;
    internal static int KINDMASK;
    private static IntPtr s_moduleHandle;
    private static string SZ_RTF_TAG;
    private static int CHAR_BUFFER_LEN;
    private static object EVENT_HSCROLL;
    private static object EVENT_LINKACTIVATE;
    private static object EVENT_IMECHANGE;
    private static object EVENT_PROTECTED;
    private static object EVENT_REQUESTRESIZE;
    private static object EVENT_SELCHANGE;
    private static object EVENT_VSCROLL;
    private int _bulletIndent;
    private int _rightMargin;
    [NullableAttribute("2")]
private string _textRtf;
    [NullableAttribute("2")]
private string _textPlain;
    private Color _selectionBackColorToSetOnHandleCreated;
    private RichTextBoxLanguageOptions _languageOption;
    private static int s_logPixelsX;
    private static int s_logPixelsY;
    [NullableAttribute("2")]
private Stream _editStream;
    private float _zoomMultiplier;
    private int _curSelStart;
    private int _curSelEnd;
    private short _curSelType;
    [NullableAttribute("2")]
private object _oleCallback;
    [NullableAttribute("2")]
private static Int32[] s_shortcutsToDisable;
    private static int s_richEditMajorVersion;
    private BitVector32 _richTextBoxFlags;
    private static Section autoWordSelectionSection;
    private static Section showSelBarSection;
    private static Section autoUrlDetectSection;
    private static Section fInCtorSection;
    private static Section protectedErrorSection;
    private static Section linkcursorSection;
    private static Section allowOleDropSection;
    private static Section suppressTextChangedEventSection;
    private static Section callOnContentsResizedSection;
    private static Section richTextShortcutsEnabledSection;
    private static Section allowOleObjectsSection;
    private static Section scrollBarsSection;
    private static Section enableAutoDragDropSection;
    private static TraceSwitch RichTextDbg { get; }
    [BrowsableAttribute("False")]
public bool AllowDrop { get; public set; }
    internal bool AllowOleObjects { get; internal set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxAutoWordSelection")]
public bool AutoWordSelection { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxBulletIndent")]
public int BulletIndent { get; public set; }
    private bool CallOnContentsResized { get; private set; }
    internal bool CanRaiseTextChangedEvent { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxCanRedoDescr")]
public bool CanRedo { get; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("RichTextBoxDetectURLs")]
public bool DetectUrls { get; public set; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxEnableAutoDragDrop")]
public bool EnableAutoDragDrop { get; public set; }
    public Color ForeColor { get; public set; }
    public Font Font { get; public set; }
    private bool InConstructor { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public RichTextBoxLanguageOptions LanguageOption { get; public set; }
    private bool LinkCursor { get; private set; }
    [DefaultValueAttribute("2147483647")]
public int MaxLength { get; public set; }
    [DefaultValueAttribute("True")]
public bool Multiline { get; public set; }
    private bool ProtectedError { get; private set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxRedoActionNameDescr")]
public string RedoActionName { get; }
    [DefaultValueAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool RichTextShortcutsEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxRightMargin")]
public int RightMargin { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxRTF")]
[RefreshPropertiesAttribute("1")]
public string Rtf { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxScrollBars")]
public RichTextBoxScrollBars ScrollBars { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelAlignment")]
public HorizontalAlignment SelectionAlignment { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelBullet")]
public bool SelectionBullet { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelCharOffset")]
public int SelectionCharOffset { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelColor")]
public Color SelectionColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelBackColor")]
public Color SelectionBackColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelFont")]
public Font SelectionFont { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelHangingIndent")]
public int SelectionHangingIndent { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelIndent")]
public int SelectionIndent { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxSelProtected")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool SelectionProtected { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelRTF")]
public string SelectedRtf { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelRightIndent")]
public int SelectionRightIndent { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelTabs")]
public Int32[] SelectionTabs { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelText")]
public string SelectedText { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelTypeDescr")]
public RichTextBoxSelectionTypes SelectionType { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxSelMargin")]
public bool ShowSelectionMargin { get; public set; }
    [LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
public string Text { get; public set; }
    private bool SuppressTextChangedEvent { get; private set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxUndoActionNameDescr")]
public string UndoActionName { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxZoomFactor")]
public float ZoomFactor { get; public set; }
    private static RichTextBox();
    private static TraceSwitch get_RichTextDbg();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    internal bool get_AllowOleObjects();
    internal void set_AllowOleObjects(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public bool get_AutoWordSelection();
    public void set_AutoWordSelection(bool value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public int get_BulletIndent();
    public void set_BulletIndent(int value);
    private bool get_CallOnContentsResized();
    private void set_CallOnContentsResized(bool value);
    internal virtual bool get_CanRaiseTextChangedEvent();
    public bool get_CanRedo();
    protected virtual CreateParams get_CreateParams();
    public bool get_DetectUrls();
    public void set_DetectUrls(bool value);
    protected virtual Size get_DefaultSize();
    public bool get_EnableAutoDragDrop();
    public void set_EnableAutoDragDrop(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    private bool get_InConstructor();
    private void set_InConstructor(bool value);
    public RichTextBoxLanguageOptions get_LanguageOption();
    public void set_LanguageOption(RichTextBoxLanguageOptions value);
    private bool get_LinkCursor();
    private void set_LinkCursor(bool value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    private bool get_ProtectedError();
    private void set_ProtectedError(bool value);
    private protected virtual void RaiseAccessibilityTextChangedEvent();
    public string get_RedoActionName();
    public bool get_RichTextShortcutsEnabled();
    public void set_RichTextShortcutsEnabled(bool value);
    public int get_RightMargin();
    public void set_RightMargin(int value);
    [NullableContextAttribute("2")]
public string get_Rtf();
    [NullableContextAttribute("2")]
public void set_Rtf(string value);
    public RichTextBoxScrollBars get_ScrollBars();
    public void set_ScrollBars(RichTextBoxScrollBars value);
    public HorizontalAlignment get_SelectionAlignment();
    public void set_SelectionAlignment(HorizontalAlignment value);
    public bool get_SelectionBullet();
    public void set_SelectionBullet(bool value);
    public int get_SelectionCharOffset();
    public void set_SelectionCharOffset(int value);
    public Color get_SelectionColor();
    public void set_SelectionColor(Color value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    [NullableContextAttribute("2")]
public Font get_SelectionFont();
    [NullableContextAttribute("2")]
public void set_SelectionFont(Font value);
    public int get_SelectionHangingIndent();
    public void set_SelectionHangingIndent(int value);
    public int get_SelectionIndent();
    public void set_SelectionIndent(int value);
    public virtual int get_SelectionLength();
    public virtual void set_SelectionLength(int value);
    public bool get_SelectionProtected();
    public void set_SelectionProtected(bool value);
    public string get_SelectedRtf();
    public void set_SelectedRtf(string value);
    public int get_SelectionRightIndent();
    public void set_SelectionRightIndent(int value);
    public Int32[] get_SelectionTabs();
    public void set_SelectionTabs(Int32[] value);
    public virtual string get_SelectedText();
    public virtual void set_SelectedText(string value);
    public RichTextBoxSelectionTypes get_SelectionType();
    public bool get_ShowSelectionMargin();
    public void set_ShowSelectionMargin(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private bool get_SuppressTextChangedEvent();
    private void set_SuppressTextChangedEvent(bool value);
    public virtual int get_TextLength();
    public string get_UndoActionName();
    private static string GetEditorActionName(int actionID);
    public float get_ZoomFactor();
    public void set_ZoomFactor(float value);
    [NullableContextAttribute("2")]
public void add_ContentsResized(ContentsResizedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ContentsResized(ContentsResizedEventHandler value);
    [NullableContextAttribute("2")]
public void add_DragDrop(DragEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DragDrop(DragEventHandler value);
    [NullableContextAttribute("2")]
public void add_DragEnter(DragEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DragEnter(DragEventHandler value);
    [NullableContextAttribute("2")]
public void add_DragLeave(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DragLeave(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DragOver(DragEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DragOver(DragEventHandler value);
    [NullableContextAttribute("2")]
public void add_GiveFeedback(GiveFeedbackEventHandler value);
    [NullableContextAttribute("2")]
public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    [NullableContextAttribute("2")]
public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    [NullableContextAttribute("2")]
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    [NullableContextAttribute("2")]
public void add_HScroll(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_HScroll(EventHandler value);
    [NullableContextAttribute("2")]
public void add_LinkClicked(LinkClickedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_LinkClicked(LinkClickedEventHandler value);
    [NullableContextAttribute("2")]
public void add_ImeChange(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ImeChange(EventHandler value);
    [NullableContextAttribute("2")]
public void add_Protected(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Protected(EventHandler value);
    [NullableContextAttribute("2")]
public void add_SelectionChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_SelectionChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_VScroll(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_VScroll(EventHandler value);
    public bool CanPaste(Format clipFormat);
    [EditorBrowsableAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    private int EditStreamProc(IntPtr dwCookie, IntPtr buf, int cb, Int32& transferred);
    public int Find(string str);
    public int Find(string str, RichTextBoxFinds options);
    public int Find(string str, int start, RichTextBoxFinds options);
    public int Find(string str, int start, int end, RichTextBoxFinds options);
    public int Find(Char[] characterSet);
    public int Find(Char[] characterSet, int start);
    public int Find(Char[] characterSet, int start, int end);
    private void ForceHandleCreate();
    private bool InternalSetForeColor(Color value);
    private CHARFORMAT2W GetCharFormat(bool fSelection);
    private RichTextBoxSelectionAttribute GetCharFormat(CFM mask, CFE effect);
    [NullableContextAttribute("2")]
private Font GetCharFormatFont(bool selectionOnly);
    public virtual int GetCharIndexFromPosition(Point pt);
    private static bool GetCharInCharSet(char c, Char[] charSet, bool negate);
    public virtual int GetLineFromCharIndex(int index);
    public virtual Point GetPositionFromCharIndex(int index);
    private bool GetProtectedError();
    public void LoadFile(string path);
    public void LoadFile(string path, RichTextBoxStreamType fileType);
    public void LoadFile(Stream data, RichTextBoxStreamType fileType);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnContentsResized(ContentsResizedEventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnHScroll(EventArgs e);
    protected virtual void OnLinkClicked(LinkClickedEventArgs e);
    protected virtual void OnImeChange(EventArgs e);
    protected virtual void OnProtected(EventArgs e);
    protected virtual void OnSelectionChanged(EventArgs e);
    protected virtual void OnVScroll(EventArgs e);
    public void Paste(Format clipFormat);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    public void Redo();
    public void SaveFile(string path);
    public void SaveFile(string path, RichTextBoxStreamType fileType);
    public void SaveFile(Stream data, RichTextBoxStreamType fileType);
    private void SendZoomFactor(float zoom);
    private bool SetCharFormat(CFM mask, CFE effect, RichTextBoxSelectionAttribute charFormat);
    private bool SetCharFormat(SCF charRange, CHARFORMAT2W cf);
    private void SetCharFormatFont(bool selectionOnly, Font value);
    private static void SetupLogPixels();
    private static int Pixel2Twip(int v, bool xDirection);
    private static int Twip2Pixel(int v, bool xDirection);
    private void StreamIn(string str, SF flags);
    private void StreamIn(Stream data, SF flags);
    private string StreamOut(SF flags);
    private void StreamOut(Stream data, SF flags, bool includeCrLfs);
    private string GetTextEx(GT flags);
    private void UpdateOleCallback();
    private void UserPreferenceChangedHandler(object o, UserPreferenceChangedEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual object CreateRichEditOleCallback();
    private void EnLinkMsgHandler(Message& m);
    private string CharRangeToString(CHARRANGE c);
    internal virtual void UpdateMaxLength();
    private void WmReflectCommand(Message& m);
    internal void WmReflectNotify(Message& m);
    private void WmSelectionChange(SELCHANGE selChange);
    private void WmSetFont(Message& m);
    protected virtual void WndProc(Message& m);
}
internal static class System.Windows.Forms.RichTextBoxConstants : object {
    internal static int RTB_HORIZ;
    internal static int RTB_VERT;
    internal static int RTB_FORCE;
}
[FlagsAttribute]
public enum System.Windows.Forms.RichTextBoxFinds : Enum {
    public int value__;
    public static RichTextBoxFinds None;
    public static RichTextBoxFinds WholeWord;
    public static RichTextBoxFinds MatchCase;
    public static RichTextBoxFinds NoHighlight;
    public static RichTextBoxFinds Reverse;
}
[FlagsAttribute]
public enum System.Windows.Forms.RichTextBoxLanguageOptions : Enum {
    public int value__;
    public static RichTextBoxLanguageOptions AutoFont;
    public static RichTextBoxLanguageOptions AutoFontSizeAdjust;
    public static RichTextBoxLanguageOptions AutoKeyboard;
    public static RichTextBoxLanguageOptions DualFont;
    public static RichTextBoxLanguageOptions ImeAlwaysSendNotify;
    public static RichTextBoxLanguageOptions ImeCancelComplete;
    public static RichTextBoxLanguageOptions UIFonts;
}
public enum System.Windows.Forms.RichTextBoxScrollBars : Enum {
    public int value__;
    public static RichTextBoxScrollBars None;
    public static RichTextBoxScrollBars Horizontal;
    public static RichTextBoxScrollBars Vertical;
    public static RichTextBoxScrollBars Both;
    public static RichTextBoxScrollBars ForcedHorizontal;
    public static RichTextBoxScrollBars ForcedVertical;
    public static RichTextBoxScrollBars ForcedBoth;
}
public enum System.Windows.Forms.RichTextBoxSelectionAttribute : Enum {
    public int value__;
    public static RichTextBoxSelectionAttribute Mixed;
    public static RichTextBoxSelectionAttribute None;
    public static RichTextBoxSelectionAttribute All;
}
[FlagsAttribute]
public enum System.Windows.Forms.RichTextBoxSelectionTypes : Enum {
    public int value__;
    public static RichTextBoxSelectionTypes Empty;
    public static RichTextBoxSelectionTypes Text;
    public static RichTextBoxSelectionTypes Object;
    public static RichTextBoxSelectionTypes MultiChar;
    public static RichTextBoxSelectionTypes MultiObject;
}
public enum System.Windows.Forms.RichTextBoxStreamType : Enum {
    public int value__;
    public static RichTextBoxStreamType RichText;
    public static RichTextBoxStreamType PlainText;
    public static RichTextBoxStreamType RichNoOleObjs;
    public static RichTextBoxStreamType TextTextOleObjs;
    public static RichTextBoxStreamType UnicodePlainText;
}
public enum System.Windows.Forms.RichTextBoxWordPunctuations : Enum {
    public int value__;
    public static RichTextBoxWordPunctuations Level1;
    public static RichTextBoxWordPunctuations Level2;
    public static RichTextBoxWordPunctuations Custom;
    public static RichTextBoxWordPunctuations All;
}
public enum System.Windows.Forms.RightToLeft : Enum {
    public int value__;
    public static RightToLeft No;
    public static RightToLeft Yes;
    public static RightToLeft Inherit;
}
public class System.Windows.Forms.RowStyle : TableLayoutStyle {
    public float Height { get; public set; }
    public RowStyle(SizeType sizeType);
    public RowStyle(SizeType sizeType, float height);
    public float get_Height();
    public void set_Height(float value);
}
internal class System.Windows.Forms.RTLAwareMessageBox : object {
    public static bool IsRTLResources { get; }
    [NullableContextAttribute("2")]
public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static bool get_IsRTLResources();
}
[DesignerAttribute("System.Windows.Forms.Design.SaveFileDialogDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionSaveFileDialog")]
public class System.Windows.Forms.SaveFileDialog : FileDialog {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("SaveFileDialogCheckWriteAccess")]
public bool CheckWriteAccess { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SaveFileDialogCreatePrompt")]
public bool CreatePrompt { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("SaveFileDialogExpandedMode")]
public bool ExpandedMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("SaveFileDialogOverWritePrompt")]
public bool OverwritePrompt { get; public set; }
    public bool get_CheckWriteAccess();
    public void set_CheckWriteAccess(bool value);
    public bool get_CreatePrompt();
    public void set_CreatePrompt(bool value);
    public bool get_ExpandedMode();
    public void set_ExpandedMode(bool value);
    public bool get_OverwritePrompt();
    public void set_OverwritePrompt(bool value);
    [NullableContextAttribute("1")]
public Stream OpenFile();
    [NullableContextAttribute("1")]
private bool PromptFileCreate(string fileName);
    [NullableContextAttribute("1")]
private bool PromptFileOverwrite(string fileName);
    [NullableContextAttribute("1")]
private protected virtual bool PromptUserIfAppropriate(string fileName);
    public virtual void Reset();
    private protected virtual bool RunFileDialog(OPENFILENAME* ofn);
    private protected virtual String[] ProcessVistaFiles(IFileDialog* dialog);
    private protected virtual ComScope`1<IFileDialog> CreateVistaDialog();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.Screen : object {
    private HMONITOR _hmonitor;
    private Rectangle _bounds;
    private Rectangle _workingArea;
    private bool _primary;
    private string _deviceName;
    private int _bitDepth;
    private static object s_syncLock;
    private static int s_desktopChangedCount;
    private int _currentDesktopChangedCount;
    private static HMONITOR PRIMARY_MONITOR;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Screen[] s_screens;
    public static Screen[] AllScreens { get; }
    public int BitsPerPixel { get; }
    public Rectangle Bounds { get; }
    public string DeviceName { get; }
    public bool Primary { get; }
    [NullableAttribute("2")]
public static Screen PrimaryScreen { get; }
    public Rectangle WorkingArea { get; }
    private static int DesktopChangedCount { get; }
    internal Screen(HMONITOR monitor);
    internal Screen(HMONITOR monitor, HDC hdc);
    private static Screen();
    public static Screen[] get_AllScreens();
    public int get_BitsPerPixel();
    public Rectangle get_Bounds();
    public string get_DeviceName();
    public bool get_Primary();
    [NullableContextAttribute("2")]
public static Screen get_PrimaryScreen();
    public Rectangle get_WorkingArea();
    private static int get_DesktopChangedCount();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static Screen FromPoint(Point point);
    public static Screen FromRectangle(Rectangle rect);
    public static Screen FromControl(Control control);
    public static Screen FromHandle(IntPtr hwnd);
    public static Rectangle GetWorkingArea(Point pt);
    public static Rectangle GetWorkingArea(Rectangle rect);
    public static Rectangle GetWorkingArea(Control ctl);
    public static Rectangle GetBounds(Point pt);
    public static Rectangle GetBounds(Rectangle rect);
    public static Rectangle GetBounds(Control ctl);
    public virtual int GetHashCode();
    private static void OnDisplaySettingsChanging(object sender, EventArgs e);
    private static void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    public virtual string ToString();
}
internal class System.Windows.Forms.ScreenDcCache : object {
    [NullableAttribute("1")]
private IntPtr[] _itemsCache;
    public ScreenDcCache(int cacheSpace);
    public ScreenDcScope Acquire();
    private void Release(HDC hdc);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [ConditionalAttribute("DEBUG")]
private static void ValidateHdc(HDC hdc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ScrollableControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ScrollableControl : Control {
    [NullableAttribute("2")]
internal static TraceSwitch s_autoScrolling;
    protected static int ScrollStateAutoScrolling;
    protected static int ScrollStateHScrollVisible;
    protected static int ScrollStateVScrollVisible;
    protected static int ScrollStateUserHasScrolled;
    protected static int ScrollStateFullDrag;
    private Size _userAutoScrollMinSize;
    private Rectangle _displayRect;
    private Size _scrollMargin;
    private Size _requestedScrollMargin;
    private Point _scrollPosition;
    [NullableAttribute("2")]
private DockPaddingEdges _dockPadding;
    private int _scrollState;
    [NullableAttribute("2")]
private VScrollProperties _verticalScroll;
    [NullableAttribute("2")]
private HScrollProperties _horizontalScroll;
    private static object s_scrollEvent;
    private bool _resetRTLHScrollValue;
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormAutoScrollDescr")]
public bool AutoScroll { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormAutoScrollMarginDescr")]
public Size AutoScrollMargin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormAutoScrollPositionDescr")]
public Point AutoScrollPosition { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormAutoScrollMinSizeDescr")]
public Size AutoScrollMinSize { get; public set; }
    protected CreateParams CreateParams { get; }
    public Rectangle DisplayRectangle { get; }
    private Rectangle System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle { get; }
    protected bool HScroll { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ScrollableControlHorizontalScrollDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public HScrollProperties HorizontalScroll { get; }
    protected bool VScroll { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ScrollableControlVerticalScrollDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public VScrollProperties VerticalScroll { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockPaddingEdges DockPadding { get; }
    private static ScrollableControl();
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Point get_AutoScrollPosition();
    public void set_AutoScrollPosition(Point value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    protected virtual CreateParams get_CreateParams();
    public virtual Rectangle get_DisplayRectangle();
    private sealed virtual override Rectangle System.Windows.Forms.Layout.IArrangedElement.get_DisplayRectangle();
    protected bool get_HScroll();
    protected void set_HScroll(bool value);
    public HScrollProperties get_HorizontalScroll();
    protected bool get_VScroll();
    protected void set_VScroll(bool value);
    public VScrollProperties get_VerticalScroll();
    public DockPaddingEdges get_DockPadding();
    [EditorBrowsableAttribute("2")]
protected virtual void AdjustFormScrollbars(bool displayScrollbars);
    private bool ApplyScrollbarChanges(Rectangle display);
    private Rectangle GetDisplayRectInternal();
    [EditorBrowsableAttribute("2")]
protected bool GetScrollState(int bit);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLayout(LayoutEventArgs levent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnVisibleChanged(EventArgs e);
    internal void ScaleDockPadding(float dx, float dy);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    internal void SetDisplayFromScrollProps(int x, int y);
    protected void SetDisplayRectLocation(int x, int y);
    [NullableContextAttribute("2")]
public void ScrollControlIntoView(Control activeControl);
    protected virtual Point ScrollToControl(Control activeControl);
    private int ScrollThumbPosition(SCROLLBAR_CONSTANTS fnBar);
    [NullableContextAttribute("2")]
public void add_Scroll(ScrollEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Scroll(ScrollEventHandler value);
    protected virtual void OnScroll(ScrollEventArgs se);
    private void ResetAutoScrollMargin();
    private void ResetAutoScrollMinSize();
    private static void ResetScrollProperties(ScrollProperties scrollProperties);
    public void SetAutoScrollMargin(int x, int y);
    private bool SetVisibleScrollbars(bool horiz, bool vert);
    private bool SetDisplayRectangleSize(int width, int height);
    protected void SetScrollState(int bit, bool value);
    private bool ShouldSerializeAutoScrollPosition();
    private bool ShouldSerializeAutoScrollMargin();
    private bool ShouldSerializeAutoScrollMinSize();
    private void SyncScrollbars(bool autoScroll);
    private void OnSetScrollPosition(object sender, EventArgs e);
    private void UpdateFullDrag();
    private void WmVScroll(Message& m);
    private void WmHScroll(Message& m);
    private void WmOnScroll(Message& m, int oldValue, int value, ScrollOrientation scrollOrientation);
    private void WmSettingChange(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("Scroll")]
public abstract class System.Windows.Forms.ScrollBar : Control {
    [NullableAttribute("1")]
private static object s_scrollEvent;
    [NullableAttribute("1")]
private static object s_valueChangedEvent;
    private int _minimum;
    private int _maximum;
    private int _smallChange;
    private int _largeChange;
    private int _value;
    private ScrollOrientation _scrollOrientation;
    private int _wheelDelta;
    [CompilerGeneratedAttribute]
private bool <ScaleScrollBarForDpiChange>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Padding DefaultMargin { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[SRDescriptionAttribute("ScrollBarLargeChangeDescr")]
[RefreshPropertiesAttribute("2")]
public int LargeChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("ScrollBarMaximumDescr")]
[RefreshPropertiesAttribute("2")]
public int Maximum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("ScrollBarMinimumDescr")]
[RefreshPropertiesAttribute("2")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("ScrollBarSmallChangeDescr")]
public int SmallChange { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ScrollBarValueDescr")]
public int Value { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[SRDescriptionAttribute("ControlDpiChangeScale")]
public bool ScaleScrollBarForDpiChange { get; public set; }
    private static ScrollBar();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Padding get_DefaultMargin();
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    internal virtual bool get_SupportsUiaProviders();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_Value();
    public void set_Value(int value);
    [CompilerGeneratedAttribute]
public bool get_ScaleScrollBarForDpiChange();
    [CompilerGeneratedAttribute]
public void set_ScaleScrollBarForDpiChange(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    internal virtual HBRUSH InitializeDCForWmCtlColor(HDC dc, MessageId msg);
    [NullableContextAttribute("1")]
protected virtual void OnEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnScroll(ScrollEventArgs se);
    [NullableContextAttribute("1")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnValueChanged(EventArgs e);
    private int ReflectPosition(int position);
    [NullableContextAttribute("1")]
public virtual string ToString();
    protected void UpdateScrollInfo();
    private void WmReflectScroll(Message& m);
    private void DoScroll(ScrollEventType type);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ScrollBarRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static void DrawArrowButton(Graphics g, Rectangle bounds, ScrollBarArrowButtonState state);
    public static void DrawHorizontalThumb(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawVerticalThumb(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawHorizontalThumbGrip(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawVerticalThumbGrip(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawRightHorizontalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawLeftHorizontalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawUpperVerticalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawLowerVerticalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawSizeBox(Graphics g, Rectangle bounds, ScrollBarSizeBoxState state);
    public static Size GetThumbGripSize(Graphics g, ScrollBarState state);
    public static Size GetSizeBoxSize(Graphics g, ScrollBarState state);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(VisualStyleElement element, int state);
}
public enum System.Windows.Forms.ScrollBars : Enum {
    public int value__;
    public static ScrollBars None;
    public static ScrollBars Horizontal;
    public static ScrollBars Vertical;
    public static ScrollBars Both;
}
public enum System.Windows.Forms.ScrollButton : Enum {
    public int value__;
    public static ScrollButton Down;
    public static ScrollButton Left;
    public static ScrollButton Right;
    public static ScrollButton Up;
    public static ScrollButton Min;
    public static ScrollButton Max;
}
public class System.Windows.Forms.ScrollEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ScrollEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollOrientation <ScrollOrientation>k__BackingField;
    public ScrollEventType Type { get; }
    public int NewValue { get; public set; }
    public int OldValue { get; }
    public ScrollOrientation ScrollOrientation { get; }
    public ScrollEventArgs(ScrollEventType type, int newValue);
    public ScrollEventArgs(ScrollEventType type, int newValue, ScrollOrientation scroll);
    public ScrollEventArgs(ScrollEventType type, int oldValue, int newValue);
    public ScrollEventArgs(ScrollEventType type, int oldValue, int newValue, ScrollOrientation scroll);
    [CompilerGeneratedAttribute]
public ScrollEventType get_Type();
    [CompilerGeneratedAttribute]
public int get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(int value);
    [CompilerGeneratedAttribute]
public int get_OldValue();
    [CompilerGeneratedAttribute]
public ScrollOrientation get_ScrollOrientation();
}
public class System.Windows.Forms.ScrollEventHandler : MulticastDelegate {
    public ScrollEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ScrollEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScrollEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ScrollEventType : Enum {
    public int value__;
    public static ScrollEventType SmallDecrement;
    public static ScrollEventType SmallIncrement;
    public static ScrollEventType LargeDecrement;
    public static ScrollEventType LargeIncrement;
    public static ScrollEventType ThumbPosition;
    public static ScrollEventType ThumbTrack;
    public static ScrollEventType First;
    public static ScrollEventType Last;
    public static ScrollEventType EndScroll;
}
public enum System.Windows.Forms.ScrollOrientation : Enum {
    public int value__;
    public static ScrollOrientation HorizontalScroll;
    public static ScrollOrientation VerticalScroll;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.ScrollProperties : object {
    internal int _minimum;
    internal int _maximum;
    internal int _smallChange;
    internal int _largeChange;
    internal int _value;
    internal bool _maximumSetExternally;
    internal bool _smallChangeSetExternally;
    internal bool _largeChangeSetExternally;
    private ScrollableControl _parent;
    internal bool _visible;
    private bool _enabled;
    protected ScrollableControl ParentControl { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ScrollBarEnableDescr")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[SRDescriptionAttribute("ScrollBarLargeChangeDescr")]
[RefreshPropertiesAttribute("2")]
public int LargeChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("ScrollBarMaximumDescr")]
[RefreshPropertiesAttribute("2")]
public int Maximum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("ScrollBarMinimumDescr")]
[RefreshPropertiesAttribute("2")]
public int Minimum { get; public set; }
    private protected SCROLLBAR_CONSTANTS Orientation { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("ScrollBarSmallChangeDescr")]
public int SmallChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ScrollBarValueDescr")]
public int Value { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ScrollBarVisibleDescr")]
public bool Visible { get; public set; }
    protected ScrollProperties(ScrollableControl container);
    protected ScrollableControl get_ParentControl();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    [NullableContextAttribute("1")]
private protected abstract virtual int GetPageSize(ScrollableControl parent);
    private protected abstract virtual SCROLLBAR_CONSTANTS get_Orientation();
    [NullableContextAttribute("1")]
private protected abstract virtual int GetHorizontalDisplayPosition(ScrollableControl parent);
    [NullableContextAttribute("1")]
private protected abstract virtual int GetVerticalDisplayPosition(ScrollableControl parent);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    public int get_Value();
    public void set_Value(int value);
    public bool get_Visible();
    public void set_Visible(bool value);
    internal void UpdateScrollInfo();
    private void UpdateDisplayPosition();
}
public enum System.Windows.Forms.SearchDirectionHint : Enum {
    public int value__;
    public static SearchDirectionHint Up;
    public static SearchDirectionHint Down;
    public static SearchDirectionHint Left;
    public static SearchDirectionHint Right;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.SearchForVirtualItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsTextSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrefixSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubItemsInSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <StartingPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchDirectionHint <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    public bool IsTextSearch { get; }
    public bool IsPrefixSearch { get; }
    public bool IncludeSubItemsInSearch { get; }
    public int Index { get; public set; }
    public string Text { get; }
    public Point StartingPoint { get; }
    public SearchDirectionHint Direction { get; }
    public int StartIndex { get; }
    public SearchForVirtualItemEventArgs(bool isTextSearch, bool isPrefixSearch, bool includeSubItemsInSearch, string text, Point startingPoint, SearchDirectionHint direction, int startIndex);
    [CompilerGeneratedAttribute]
public bool get_IsTextSearch();
    [CompilerGeneratedAttribute]
public bool get_IsPrefixSearch();
    [CompilerGeneratedAttribute]
public bool get_IncludeSubItemsInSearch();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public Point get_StartingPoint();
    [CompilerGeneratedAttribute]
public SearchDirectionHint get_Direction();
    [CompilerGeneratedAttribute]
public int get_StartIndex();
}
public class System.Windows.Forms.SearchForVirtualItemEventHandler : MulticastDelegate {
    public SearchForVirtualItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SearchForVirtualItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SearchForVirtualItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.SecurityIDType : Enum {
    public int value__;
    public static SecurityIDType User;
    public static SecurityIDType Group;
    public static SecurityIDType Domain;
    public static SecurityIDType Alias;
    public static SecurityIDType WellKnownGroup;
    public static SecurityIDType DeletedAccount;
    public static SecurityIDType Invalid;
    public static SecurityIDType Unknown;
    public static SecurityIDType Computer;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.SelectedGridItemChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GridItem <OldSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private GridItem <NewSelection>k__BackingField;
    public GridItem OldSelection { get; }
    public GridItem NewSelection { get; }
    public SelectedGridItemChangedEventArgs(GridItem oldSel, GridItem newSel);
    [CompilerGeneratedAttribute]
public GridItem get_OldSelection();
    [CompilerGeneratedAttribute]
public GridItem get_NewSelection();
}
public class System.Windows.Forms.SelectedGridItemChangedEventHandler : MulticastDelegate {
    public SelectedGridItemChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SelectedGridItemChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SelectedGridItemChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.SelectionMode : Enum {
    public int value__;
    public static SelectionMode None;
    public static SelectionMode One;
    public static SelectionMode MultiSimple;
    public static SelectionMode MultiExtended;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.SelectionRangeConverter")]
public class System.Windows.Forms.SelectionRange : object {
    private DateTime start;
    private DateTime end;
    public DateTime End { get; public set; }
    public DateTime Start { get; public set; }
    public SelectionRange(DateTime lower, DateTime upper);
    public SelectionRange(SelectionRange range);
    public DateTime get_End();
    public void set_End(DateTime value);
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.SelectionRangeConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("The Type of value cannot be statically discovered. The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.SendKeys : object {
    private static int UnknownGrouping;
    private static KeywordVk[] s_keywords;
    private static int ShiftKeyPressed;
    private static int CtrlKeyPressed;
    private static int AltKeyPressed;
    private static bool s_stopHook;
    private static HHOOK s_hhook;
    private static Queue`1<SKEvent> s_events;
    private static object s_lock;
    private static bool s_startNewChar;
    private static SKWindow s_messageWindow;
    private static Nullable`1<SendMethodTypes> s_sendMethod;
    private static Nullable`1<bool> s_hookSupported;
    private static bool s_capslockChanged;
    private static bool s_numlockChanged;
    private static bool s_scrollLockChanged;
    private static bool s_kanaChanged;
    private static SendKeys();
    private static void AddEvent(SKEvent skevent);
    [NullableContextAttribute("0")]
private static bool AddSimpleKey(char character, int repeat, HWND hwnd, ValueTuple`3<int, int, int> haveKeys, bool startNewChar, int cGrp);
    private static void AddMsgsForVK(int vk, int repeat, bool altnoctrldown, HWND hwnd);
    [NullableContextAttribute("0")]
private static void CancelMods(ValueTuple`3& haveKeys, int level, HWND hwnd);
    private static void InstallHook();
    private static void TestHook();
    [UnmanagedCallersOnlyAttribute]
private static LRESULT EmptyHookCallback(int nCode, WPARAM wparam, LPARAM lparam);
    private static void LoadSendMethodFromConfig();
    private static void JournalCancel();
    [NullableContextAttribute("0")]
private static void GetKeyboardState(Span`1<byte> keystate);
    [NullableContextAttribute("0")]
private static void SetKeyboardState(ReadOnlySpan`1<byte> keystate);
    private static void ClearKeyboardState();
    private static int MatchKeyword(string keyword);
    private static void OnThreadExit(object sender, EventArgs e);
    private static void ParseKeys(string keys, HWND hwnd);
    [NullableContextAttribute("0")]
private static void SendInput(ReadOnlySpan`1<byte> oldKeyboardState, SKEvent[] previousEvents);
    [NullableContextAttribute("2")]
private static void AddCancelModifiersForPreviousEvents(SKEvent[] previousEvents);
    private static bool IsExtendedKey(SKEvent skEvent);
    private static void ClearGlobalKeys();
    private static void CheckGlobalKeys(SKEvent skEvent);
    private static void ResetKeyboardUsingSendInput(int INPUTSize);
    public static void Send(string keys);
    private static void Send(string keys, Control control, bool wait);
    public static void SendWait(string keys);
    private static void SendWait(string keys, Control control);
    public static void Flush();
    private static void UninstallJournalingHook();
}
public enum System.Windows.Forms.Shortcut : Enum {
    public int value__;
    public static Shortcut None;
    public static Shortcut CtrlA;
    public static Shortcut CtrlB;
    public static Shortcut CtrlC;
    public static Shortcut CtrlD;
    public static Shortcut CtrlE;
    public static Shortcut CtrlF;
    public static Shortcut CtrlG;
    public static Shortcut CtrlH;
    public static Shortcut CtrlI;
    public static Shortcut CtrlJ;
    public static Shortcut CtrlK;
    public static Shortcut CtrlL;
    public static Shortcut CtrlM;
    public static Shortcut CtrlN;
    public static Shortcut CtrlO;
    public static Shortcut CtrlP;
    public static Shortcut CtrlQ;
    public static Shortcut CtrlR;
    public static Shortcut CtrlS;
    public static Shortcut CtrlT;
    public static Shortcut CtrlU;
    public static Shortcut CtrlV;
    public static Shortcut CtrlW;
    public static Shortcut CtrlX;
    public static Shortcut CtrlY;
    public static Shortcut CtrlZ;
    public static Shortcut CtrlShiftA;
    public static Shortcut CtrlShiftB;
    public static Shortcut CtrlShiftC;
    public static Shortcut CtrlShiftD;
    public static Shortcut CtrlShiftE;
    public static Shortcut CtrlShiftF;
    public static Shortcut CtrlShiftG;
    public static Shortcut CtrlShiftH;
    public static Shortcut CtrlShiftI;
    public static Shortcut CtrlShiftJ;
    public static Shortcut CtrlShiftK;
    public static Shortcut CtrlShiftL;
    public static Shortcut CtrlShiftM;
    public static Shortcut CtrlShiftN;
    public static Shortcut CtrlShiftO;
    public static Shortcut CtrlShiftP;
    public static Shortcut CtrlShiftQ;
    public static Shortcut CtrlShiftR;
    public static Shortcut CtrlShiftS;
    public static Shortcut CtrlShiftT;
    public static Shortcut CtrlShiftU;
    public static Shortcut CtrlShiftV;
    public static Shortcut CtrlShiftW;
    public static Shortcut CtrlShiftX;
    public static Shortcut CtrlShiftY;
    public static Shortcut CtrlShiftZ;
    public static Shortcut F1;
    public static Shortcut F2;
    public static Shortcut F3;
    public static Shortcut F4;
    public static Shortcut F5;
    public static Shortcut F6;
    public static Shortcut F7;
    public static Shortcut F8;
    public static Shortcut F9;
    public static Shortcut F10;
    public static Shortcut F11;
    public static Shortcut F12;
    public static Shortcut ShiftF1;
    public static Shortcut ShiftF2;
    public static Shortcut ShiftF3;
    public static Shortcut ShiftF4;
    public static Shortcut ShiftF5;
    public static Shortcut ShiftF6;
    public static Shortcut ShiftF7;
    public static Shortcut ShiftF8;
    public static Shortcut ShiftF9;
    public static Shortcut ShiftF10;
    public static Shortcut ShiftF11;
    public static Shortcut ShiftF12;
    public static Shortcut CtrlF1;
    public static Shortcut CtrlF2;
    public static Shortcut CtrlF3;
    public static Shortcut CtrlF4;
    public static Shortcut CtrlF5;
    public static Shortcut CtrlF6;
    public static Shortcut CtrlF7;
    public static Shortcut CtrlF8;
    public static Shortcut CtrlF9;
    public static Shortcut CtrlF10;
    public static Shortcut CtrlF11;
    public static Shortcut CtrlF12;
    public static Shortcut CtrlShiftF1;
    public static Shortcut CtrlShiftF2;
    public static Shortcut CtrlShiftF3;
    public static Shortcut CtrlShiftF4;
    public static Shortcut CtrlShiftF5;
    public static Shortcut CtrlShiftF6;
    public static Shortcut CtrlShiftF7;
    public static Shortcut CtrlShiftF8;
    public static Shortcut CtrlShiftF9;
    public static Shortcut CtrlShiftF10;
    public static Shortcut CtrlShiftF11;
    public static Shortcut CtrlShiftF12;
    public static Shortcut Ins;
    public static Shortcut CtrlIns;
    public static Shortcut ShiftIns;
    public static Shortcut Del;
    public static Shortcut CtrlDel;
    public static Shortcut ShiftDel;
    public static Shortcut AltRightArrow;
    public static Shortcut AltLeftArrow;
    public static Shortcut AltUpArrow;
    public static Shortcut AltDownArrow;
    public static Shortcut AltBksp;
    public static Shortcut AltF1;
    public static Shortcut AltF2;
    public static Shortcut AltF3;
    public static Shortcut AltF4;
    public static Shortcut AltF5;
    public static Shortcut AltF6;
    public static Shortcut AltF7;
    public static Shortcut AltF8;
    public static Shortcut AltF9;
    public static Shortcut AltF10;
    public static Shortcut AltF11;
    public static Shortcut AltF12;
    public static Shortcut Alt0;
    public static Shortcut Alt1;
    public static Shortcut Alt2;
    public static Shortcut Alt3;
    public static Shortcut Alt4;
    public static Shortcut Alt5;
    public static Shortcut Alt6;
    public static Shortcut Alt7;
    public static Shortcut Alt8;
    public static Shortcut Alt9;
    public static Shortcut Ctrl0;
    public static Shortcut Ctrl1;
    public static Shortcut Ctrl2;
    public static Shortcut Ctrl3;
    public static Shortcut Ctrl4;
    public static Shortcut Ctrl5;
    public static Shortcut Ctrl6;
    public static Shortcut Ctrl7;
    public static Shortcut Ctrl8;
    public static Shortcut Ctrl9;
    public static Shortcut CtrlShift0;
    public static Shortcut CtrlShift1;
    public static Shortcut CtrlShift2;
    public static Shortcut CtrlShift3;
    public static Shortcut CtrlShift4;
    public static Shortcut CtrlShift5;
    public static Shortcut CtrlShift6;
    public static Shortcut CtrlShift7;
    public static Shortcut CtrlShift8;
    public static Shortcut CtrlShift9;
}
public enum System.Windows.Forms.SizeGripStyle : Enum {
    public int value__;
    public static SizeGripStyle Auto;
    public static SizeGripStyle Show;
    public static SizeGripStyle Hide;
}
public enum System.Windows.Forms.SizeType : Enum {
    public int value__;
    public static SizeType AutoSize;
    public static SizeType Absolute;
    public static SizeType Percent;
}
public enum System.Windows.Forms.SortOrder : Enum {
    public int value__;
    public static SortOrder None;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.SpecialFolderEnumConverter : EnumConverter {
    protected IComparer Comparer { get; }
    public SpecialFolderEnumConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    protected virtual IComparer get_Comparer();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultEventAttribute("SplitterMoved")]
[DockingAttribute("2")]
[DesignerAttribute("System.Windows.Forms.Design.SplitContainerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionSplitContainer")]
public class System.Windows.Forms.SplitContainer : ContainerControl {
    private static int DrawStart;
    private static int DrawMove;
    private static int DrawEnd;
    private int _borderSize;
    private Orientation _orientation;
    private BorderStyle _borderStyle;
    private FixedPanel _fixedPanel;
    private int _panel1MinSize;
    private int _newPanel1MinSize;
    private int _panel2MinSize;
    private int _newPanel2MinSize;
    private bool _tabStop;
    private int _panelSize;
    private Rectangle _splitterRect;
    private int _splitterInc;
    private int _splitterDistance;
    private int _splitterWidth;
    private int _newSplitterWidth;
    private int _splitDistance;
    private int _lastDrawSplit;
    private int _initialSplitterDistance;
    private Rectangle _initialSplitterRectangle;
    private Point _anchor;
    private bool _splitBegin;
    private bool _splitMove;
    private bool _splitBreak;
    private Cursor _overrideCursor;
    private Control _nextActiveControl;
    private bool _callBaseVersion;
    private bool _splitterFocused;
    private bool _splitterClick;
    private bool _splitterDrag;
    private double _ratioWidth;
    private double _ratioHeight;
    private bool _resizeCalled;
    private bool _splitContainerScaling;
    private bool _setSplitterDistance;
    [NullableAttribute("1")]
private static object s_eventMoving;
    [NullableAttribute("1")]
private static object s_eventMoved;
    private SplitContainerMessageFilter _splitContainerMessageFilter;
    private bool _selectNextControl;
    private bool _initializing;
    [CompilerGeneratedAttribute]
private bool <IsSplitterFixed>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SplitterPanel <Panel1>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SplitterPanel <Panel2>k__BackingField;
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormAutoScrollDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point AutoScrollOffset { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size AutoScrollMinSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size AutoScrollMargin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormAutoScrollPositionDescr")]
public Point AutoScrollPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ContainerControlBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("SplitterBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [NullableAttribute("1")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    public DockStyle Dock { get; public set; }
    protected Size DefaultSize { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("SplitContainerFixedPanelDescr")]
public FixedPanel FixedPanel { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerIsSplitterFixedDescr")]
public bool IsSplitterFixed { get; public set; }
    private bool IsSplitterMovable { get; }
    internal bool IsContainerControl { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerOrientationDescr")]
public Orientation Orientation { get; public set; }
    private Cursor OverrideCursor { get; private set; }
    private bool CollapsedMode { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("SplitContainerPanel1Descr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public SplitterPanel Panel1 { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SplitContainerPanel1CollapsedDescr")]
public bool Panel1Collapsed { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SplitContainerPanel2CollapsedDescr")]
public bool Panel2Collapsed { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("25")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerPanel1MinSizeDescr")]
[RefreshPropertiesAttribute("1")]
public int Panel1MinSize { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("SplitContainerPanel2Descr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public SplitterPanel Panel2 { get; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("25")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerPanel2MinSizeDescr")]
[RefreshPropertiesAttribute("1")]
public int Panel2MinSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SettingsBindableAttribute("True")]
[SRDescriptionAttribute("SplitContainerSplitterDistanceDescr")]
[DefaultValueAttribute("50")]
public int SplitterDistance { get; public set; }
    private int SplitterDistanceInternal { get; private set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerSplitterIncrementDescr")]
public int SplitterIncrement { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("SplitContainerSplitterRectangleDescr")]
[BrowsableAttribute("False")]
public Rectangle SplitterRectangle { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("SplitContainerSplitterWidthDescr")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("4")]
public int SplitterWidth { get; public set; }
    private int SplitterWidthInternal { get; }
    internal bool SupportsUiaProviders { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    private static SplitContainer();
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual Point get_AutoScrollOffset();
    public virtual void set_AutoScrollOffset(Point value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Point get_AutoScrollPosition();
    public void set_AutoScrollPosition(Point value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual BindingContext get_BindingContext();
    public virtual void set_BindingContext(BindingContext value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    [NullableContextAttribute("1")]
public ControlCollection get_Controls();
    public void add_ControlAdded(ControlEventHandler value);
    public void remove_ControlAdded(ControlEventHandler value);
    public void add_ControlRemoved(ControlEventHandler value);
    public void remove_ControlRemoved(ControlEventHandler value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    protected virtual Size get_DefaultSize();
    public FixedPanel get_FixedPanel();
    public void set_FixedPanel(FixedPanel value);
    [CompilerGeneratedAttribute]
public bool get_IsSplitterFixed();
    [CompilerGeneratedAttribute]
public void set_IsSplitterFixed(bool value);
    private bool get_IsSplitterMovable();
    internal virtual bool get_IsContainerControl();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private Cursor get_OverrideCursor();
    private void set_OverrideCursor(Cursor value);
    private bool get_CollapsedMode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SplitterPanel get_Panel1();
    [NullableContextAttribute("1")]
private void CollapsePanel(SplitterPanel p, bool collapsing);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public bool get_Panel1Collapsed();
    public void set_Panel1Collapsed(bool value);
    public bool get_Panel2Collapsed();
    public void set_Panel2Collapsed(bool value);
    public int get_Panel1MinSize();
    public void set_Panel1MinSize(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SplitterPanel get_Panel2();
    public int get_Panel2MinSize();
    public void set_Panel2MinSize(int value);
    public int get_SplitterDistance();
    public void set_SplitterDistance(int value);
    private int get_SplitterDistanceInternal();
    private void set_SplitterDistanceInternal(int value);
    public int get_SplitterIncrement();
    public void set_SplitterIncrement(int value);
    public Rectangle get_SplitterRectangle();
    public int get_SplitterWidth();
    public void set_SplitterWidth(int value);
    private int get_SplitterWidthInternal();
    internal virtual bool get_SupportsUiaProviders();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_SplitterMoving(SplitterCancelEventHandler value);
    public void remove_SplitterMoving(SplitterCancelEventHandler value);
    public void add_SplitterMoved(SplitterEventHandler value);
    public void remove_SplitterMoved(SplitterEventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnKeyUp(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLayout(LayoutEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLostFocus(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseMove(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseDown(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseUp(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMove(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
public void OnSplitterMoving(SplitterCancelEventArgs e);
    [NullableContextAttribute("1")]
public void OnSplitterMoved(SplitterEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    private void ApplyPanel1MinSize(int value);
    private void ApplyPanel2MinSize(int value);
    private void ApplySplitterWidth(int value);
    private void ApplySplitterDistance();
    private Rectangle CalcSplitLine(int splitSize, int minWeight);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    private void DrawSplitBar(int mode);
    [NullableContextAttribute("1")]
private void DrawFocus(Graphics g, Rectangle r);
    private void DrawSplitHelper(int splitSize);
    private int GetSplitterDistance(int x, int y);
    private bool ProcessArrowKey(bool forward);
    private void RepaintSplitterRect();
    private void SetSplitterRect(bool vertical);
    private void ResizeSplitContainer();
    [EditorBrowsableAttribute("2")]
protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void Select(bool directed, bool forward);
    private bool SelectNextControlInContainer(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    private bool SelectNextControlInPanel(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    [NullableContextAttribute("1")]
private static void SelectNextActiveControl(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    [NullableContextAttribute("1")]
private void SetInnerMostBorder(SplitContainer sc);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void SplitBegin(int x, int y);
    private void SplitMove(int x, int y);
    private void SplitEnd(bool accept);
    private void UpdateSplitter();
    private void WmSetCursor(Message& m);
    internal virtual Rectangle GetToolNativeScreenRectangle();
    [NullableContextAttribute("1")]
internal virtual void AfterControlRemoved(Control control, Control oldParent);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessTabKey(bool forward);
    [NullableContextAttribute("1")]
protected virtual void OnMouseCaptureChanged(EventArgs e);
    protected virtual void WndProc(Message& msg);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultEventAttribute("SplitterMoved")]
[DefaultPropertyAttribute("Dock")]
[SRDescriptionAttribute("DescriptionSplitter")]
[DesignerAttribute("System.Windows.Forms.Design.SplitterDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.Splitter : Control {
    private static int DRAW_START;
    private static int DRAW_MOVE;
    private static int DRAW_END;
    private static int defaultWidth;
    private BorderStyle _borderStyle;
    private int _minSize;
    private int _minExtra;
    private Point _anchor;
    private Control _splitTarget;
    private int _splitSize;
    private int _splitterThickness;
    private int _initTargetSize;
    private int _lastDrawSplit;
    private int _maxSize;
    [NullableAttribute("1")]
private static object EVENT_MOVING;
    [NullableAttribute("1")]
private static object EVENT_MOVED;
    private SplitterMessageFilter _splitterMessageFilter;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    protected Size DefaultSize { get; }
    [NullableAttribute("1")]
protected Cursor DefaultCursor { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("SplitterBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    private bool Horizontal { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("SplitterMinExtraDescr")]
public int MinExtra { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("SplitterMinSizeDescr")]
public int MinSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("SplitterSplitPositionDescr")]
public int SplitPosition { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    private static Splitter();
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    protected virtual Size get_DefaultSize();
    [NullableContextAttribute("1")]
protected virtual Cursor get_DefaultCursor();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    private bool get_Horizontal();
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_MinExtra();
    public void set_MinExtra(int value);
    public int get_MinSize();
    public void set_MinSize(int value);
    public int get_SplitPosition();
    public void set_SplitPosition(int value);
    internal virtual bool get_SupportsUiaProviders();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_SplitterMoving(SplitterEventHandler value);
    public void remove_SplitterMoving(SplitterEventHandler value);
    public void add_SplitterMoved(SplitterEventHandler value);
    public void remove_SplitterMoved(SplitterEventHandler value);
    private void DrawSplitBar(int mode);
    [NullableContextAttribute("1")]
private Rectangle CalcSplitLine(Control splitTarget, int splitSize, int minWeight);
    private int CalcSplitSize();
    [NullableContextAttribute("1")]
private SplitData CalcSplitBounds();
    private void DrawSplitHelper(int splitSize);
    private Control FindTarget();
    [NullableContextAttribute("1")]
private int GetSplitSize(Control splitTarget, int x, int y);
    [NullableContextAttribute("1")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseDown(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseMove(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseUp(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSplitterMoving(SplitterEventArgs sevent);
    [NullableContextAttribute("1")]
protected virtual void OnSplitterMoved(SplitterEventArgs sevent);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void SplitBegin(int x, int y);
    private void SplitEnd(bool accept);
    private void ApplySplitPosition();
    [NullableContextAttribute("1")]
private void SplitMove(Control splitTarget, int x, int y);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class System.Windows.Forms.SplitterCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private int <MouseCursorX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MouseCursorY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SplitX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SplitY>k__BackingField;
    public int MouseCursorX { get; }
    public int MouseCursorY { get; }
    public int SplitX { get; public set; }
    public int SplitY { get; public set; }
    public SplitterCancelEventArgs(int mouseCursorX, int mouseCursorY, int splitX, int splitY);
    [CompilerGeneratedAttribute]
public int get_MouseCursorX();
    [CompilerGeneratedAttribute]
public int get_MouseCursorY();
    [CompilerGeneratedAttribute]
public int get_SplitX();
    [CompilerGeneratedAttribute]
public void set_SplitX(int value);
    [CompilerGeneratedAttribute]
public int get_SplitY();
    [CompilerGeneratedAttribute]
public void set_SplitY(int value);
}
public class System.Windows.Forms.SplitterCancelEventHandler : MulticastDelegate {
    public SplitterCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SplitterCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SplitterCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.SplitterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SplitX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SplitY>k__BackingField;
    public int X { get; }
    public int Y { get; }
    public int SplitX { get; public set; }
    public int SplitY { get; public set; }
    public SplitterEventArgs(int x, int y, int splitX, int splitY);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public int get_SplitX();
    [CompilerGeneratedAttribute]
public void set_SplitX(int value);
    [CompilerGeneratedAttribute]
public int get_SplitY();
    [CompilerGeneratedAttribute]
public void set_SplitY(int value);
}
public class System.Windows.Forms.SplitterEventHandler : MulticastDelegate {
    public SplitterEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, SplitterEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SplitterEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DockingAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.SplitterPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.SplitterPanel : Panel {
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SplitContainer <Owner>k__BackingField;
    internal bool Collapsed { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[LocalizableAttribute("False")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public AnchorStyles Anchor { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public BorderStyle BorderStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DockStyle Dock { get; public set; }
    [NullableAttribute("1")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DockPaddingEdges DockPadding { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHeightDescr")]
public int Height { get; public set; }
    internal int HeightInternal { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Point Location { get; public set; }
    protected Padding DefaultMargin { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size MinimumSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size MaximumSize { get; public set; }
    [NullableAttribute("1")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [NullableAttribute("1")]
internal SplitContainer Owner { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Control Parent { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size Size { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int TabIndex { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool TabStop { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWidthDescr")]
public int Width { get; public set; }
    internal int WidthInternal { get; internal set; }
    [NullableContextAttribute("1")]
public SplitterPanel(SplitContainer owner);
    [CompilerGeneratedAttribute]
internal bool get_Collapsed();
    [CompilerGeneratedAttribute]
internal void set_Collapsed(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public AnchorStyles get_Anchor();
    public void set_Anchor(AnchorStyles value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    [NullableContextAttribute("1")]
public DockPaddingEdges get_DockPadding();
    public int get_Height();
    public void set_Height(int value);
    internal int get_HeightInternal();
    internal void set_HeightInternal(int value);
    public Point get_Location();
    public void set_Location(Point value);
    protected virtual Padding get_DefaultMargin();
    public Size get_MinimumSize();
    public void set_MinimumSize(Size value);
    public Size get_MaximumSize();
    public void set_MaximumSize(Size value);
    [NullableContextAttribute("1")]
public string get_Name();
    [NullableContextAttribute("1")]
public void set_Name(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal SplitContainer get_Owner();
    public Control get_Parent();
    public void set_Parent(Control value);
    public Size get_Size();
    public void set_Size(Size value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public int get_Width();
    public void set_Width(int value);
    internal int get_WidthInternal();
    internal void set_WidthInternal(int value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.SRDescriptionAttribute : DescriptionAttribute {
    private bool _replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SRDescriptionAttribute("DescriptionStatusStrip")]
public class System.Windows.Forms.StatusStrip : ToolStrip {
    private static AnchorStyles AllAnchor;
    private static AnchorStyles HorizontalAnchor;
    private static AnchorStyles VerticalAnchor;
    private BitVector32 state;
    private static int stateSizingGrip;
    private static int stateCalledSpringTableLayout;
    private static int gripWidth;
    [NullableAttribute("2")]
private RightToLeftLayoutGrip rtlLayoutGrip;
    private Orientation lastOrientation;
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripCanOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
public bool CanOverflow { get; public set; }
    protected bool DefaultShowItemToolTips { get; }
    protected Size DefaultSize { get; }
    protected Padding DefaultPadding { get; }
    protected DockStyle DefaultDock { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripGripStyle GripStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripLayoutStyle LayoutStyle { get; public set; }
    [BrowsableAttribute("False")]
public Padding Padding { get; public set; }
    private Control RTLGrip { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripShowItemToolTipsDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool ShowItemToolTips { get; public set; }
    private bool ShowSizingGrip { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("StatusStripSizingGripDescr")]
public bool SizingGrip { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle SizeGripBounds { get; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripStretchDescr")]
public bool Stretch { get; public set; }
    private TableLayoutSettings TableLayoutSettings { get; }
    internal bool SupportsUiaProviders { get; }
    private static StatusStrip();
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    protected virtual bool get_DefaultShowItemToolTips();
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultPadding();
    protected virtual DockStyle get_DefaultDock();
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public ToolStripLayoutStyle get_LayoutStyle();
    public void set_LayoutStyle(ToolStripLayoutStyle value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    [NullableContextAttribute("2")]
public void add_PaddingChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_PaddingChanged(EventHandler value);
    private Control get_RTLGrip();
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    private bool get_ShowSizingGrip();
    public bool get_SizingGrip();
    public void set_SizingGrip(bool value);
    public Rectangle get_SizeGripBounds();
    public bool get_Stretch();
    public void set_Stretch(bool value);
    private TableLayoutSettings get_TableLayoutSettings();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("2")]
protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    protected virtual void Dispose(bool disposing);
    private void EnsureRightToLeftGrip();
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    internal virtual bool get_SupportsUiaProviders();
    protected virtual void SetDisplayedItems();
    internal virtual void ResetRenderMode();
    internal virtual bool ShouldSerializeRenderMode();
    protected virtual void OnSpringTableLayoutCore();
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.StringSource : object {
    [NullableAttribute("1")]
private String[] strings;
    private int current;
    private int size;
    private IAutoComplete2* _autoComplete2;
    [NullableContextAttribute("1")]
public StringSource(String[] strings);
    [NullableContextAttribute("1")]
public bool Bind(IHandle`1<HWND> edit, AUTOCOMPLETEOPTIONS options);
    public void ReleaseAutoComplete();
    [NullableContextAttribute("1")]
public void RefreshList(String[] newSource);
    public sealed virtual HRESULT Clone(IEnumString** ppenum);
    public sealed virtual HRESULT Next(UInt32 celt, PWSTR* rgelt, UInt32* pceltFetched);
    public sealed virtual HRESULT Skip(UInt32 celt);
    public sealed virtual HRESULT Reset();
}
public enum System.Windows.Forms.StructFormat : Enum {
    public int value__;
    public static StructFormat Ansi;
    public static StructFormat Unicode;
    public static StructFormat Auto;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.SystemInformation : object {
    private static bool s_checkMultiMonitorSupport;
    private static bool s_multiMonitorSupport;
    private static bool s_highContrast;
    private static bool s_systemEventsAttached;
    private static bool s_systemEventsDirty;
    private static HWINSTA s_processWinStation;
    private static bool s_isUserInteractive;
    [NullableAttribute("2")]
private static PowerStatus s_powerStatus;
    public static bool DragFullWindows { get; }
    public static bool HighContrast { get; }
    public static int MouseWheelScrollLines { get; }
    public static Size PrimaryMonitorSize { get; }
    public static int VerticalScrollBarWidth { get; }
    public static int HorizontalScrollBarHeight { get; }
    public static int CaptionHeight { get; }
    public static Size BorderSize { get; }
    public static Size FixedFrameBorderSize { get; }
    public static int VerticalScrollBarThumbHeight { get; }
    public static int HorizontalScrollBarThumbWidth { get; }
    public static Size IconSize { get; }
    public static Size CursorSize { get; }
    public static Font MenuFont { get; }
    public static int MenuHeight { get; }
    public static PowerStatus PowerStatus { get; }
    public static Rectangle WorkingArea { get; }
    public static int KanjiWindowHeight { get; }
    [EditorBrowsableAttribute("1")]
public static bool MousePresent { get; }
    public static int VerticalScrollBarArrowHeight { get; }
    public static int HorizontalScrollBarArrowWidth { get; }
    public static bool DebugOS { get; }
    public static bool MouseButtonsSwapped { get; }
    public static Size MinimumWindowSize { get; }
    public static Size CaptionButtonSize { get; }
    public static Size FrameBorderSize { get; }
    public static Size MinWindowTrackSize { get; }
    public static Size DoubleClickSize { get; }
    public static int DoubleClickTime { get; }
    public static Size IconSpacingSize { get; }
    public static bool RightAlignedMenus { get; }
    public static bool PenWindows { get; }
    public static bool DbcsEnabled { get; }
    public static int MouseButtons { get; }
    public static bool Secure { get; }
    public static Size Border3DSize { get; }
    public static Size MinimizedWindowSpacingSize { get; }
    public static Size SmallIconSize { get; }
    public static int ToolWindowCaptionHeight { get; }
    public static Size ToolWindowCaptionButtonSize { get; }
    public static Size MenuButtonSize { get; }
    public static ArrangeStartingPosition ArrangeStartingPosition { get; }
    public static ArrangeDirection ArrangeDirection { get; }
    public static Size MinimizedWindowSize { get; }
    public static Size MaxWindowTrackSize { get; }
    public static Size PrimaryMonitorMaximizedWindowSize { get; }
    public static bool Network { get; }
    public static bool TerminalServerSession { get; }
    public static BootMode BootMode { get; }
    public static Size DragSize { get; }
    public static bool ShowSounds { get; }
    public static Size MenuCheckSize { get; }
    public static bool MidEastEnabled { get; }
    internal static bool MultiMonitorSupport { get; }
    public static bool NativeMouseWheelSupport { get; }
    public static bool MouseWheelPresent { get; }
    public static Rectangle VirtualScreen { get; }
    public static int MonitorCount { get; }
    public static bool MonitorsSameDisplayFormat { get; }
    public static string ComputerName { get; }
    public static string UserDomainName { get; }
    public static bool UserInteractive { get; }
    public static string UserName { get; }
    public static bool IsDropShadowEnabled { get; }
    public static bool IsFlatMenuEnabled { get; }
    public static bool IsFontSmoothingEnabled { get; }
    public static int FontSmoothingContrast { get; }
    public static int FontSmoothingType { get; }
    public static int IconHorizontalSpacing { get; }
    public static int IconVerticalSpacing { get; }
    public static bool IsIconTitleWrappingEnabled { get; }
    public static bool MenuAccessKeysUnderlined { get; }
    public static int KeyboardDelay { get; }
    public static bool IsKeyboardPreferred { get; }
    public static int KeyboardSpeed { get; }
    public static Size MouseHoverSize { get; }
    public static int MouseHoverTime { get; }
    public static int MouseSpeed { get; }
    public static bool IsSnapToDefaultEnabled { get; }
    public static LeftRightAlignment PopupMenuAlignment { get; }
    public static bool IsMenuFadeEnabled { get; }
    public static int MenuShowDelay { get; }
    public static bool IsComboBoxAnimationEnabled { get; }
    public static bool IsTitleBarGradientEnabled { get; }
    public static bool IsHotTrackingEnabled { get; }
    public static bool IsListBoxSmoothScrollingEnabled { get; }
    public static bool IsMenuAnimationEnabled { get; }
    public static bool IsSelectionFadeEnabled { get; }
    public static bool IsToolTipAnimationEnabled { get; }
    public static bool UIEffectsEnabled { get; }
    public static bool IsActiveWindowTrackingEnabled { get; }
    public static int ActiveWindowTrackingDelay { get; }
    public static bool IsMinimizeRestoreAnimationEnabled { get; }
    public static int BorderMultiplierFactor { get; }
    public static int CaretBlinkTime { get; }
    public static int CaretWidth { get; }
    public static int MouseWheelScrollDelta { get; }
    public static int VerticalFocusThickness { get; }
    public static int HorizontalFocusThickness { get; }
    public static int VerticalResizeBorderThickness { get; }
    public static int HorizontalResizeBorderThickness { get; }
    public static ScreenOrientation ScreenOrientation { get; }
    public static int SizingBorderWidth { get; }
    public static Size SmallCaptionButtonSize { get; }
    public static Size MenuBarButtonSize { get; }
    private static SystemInformation();
    public static bool get_DragFullWindows();
    public static bool get_HighContrast();
    public static int get_MouseWheelScrollLines();
    public static Size get_PrimaryMonitorSize();
    public static int get_VerticalScrollBarWidth();
    public static int GetVerticalScrollBarWidthForDpi(int dpi);
    public static int get_HorizontalScrollBarHeight();
    public static int GetHorizontalScrollBarHeightForDpi(int dpi);
    public static int get_CaptionHeight();
    public static Size get_BorderSize();
    public static Size GetBorderSizeForDpi(int dpi);
    public static Size get_FixedFrameBorderSize();
    public static int get_VerticalScrollBarThumbHeight();
    public static int get_HorizontalScrollBarThumbWidth();
    public static Size get_IconSize();
    public static Size get_CursorSize();
    public static Font get_MenuFont();
    public static Font GetMenuFontForDpi(int dpi);
    private static Font GetMenuFontHelper(UInt32 dpi, bool useDpi);
    public static int get_MenuHeight();
    public static PowerStatus get_PowerStatus();
    public static Rectangle get_WorkingArea();
    public static int get_KanjiWindowHeight();
    public static bool get_MousePresent();
    public static int get_VerticalScrollBarArrowHeight();
    public static int VerticalScrollBarArrowHeightForDpi(int dpi);
    public static int get_HorizontalScrollBarArrowWidth();
    public static int GetHorizontalScrollBarArrowWidthForDpi(int dpi);
    public static bool get_DebugOS();
    public static bool get_MouseButtonsSwapped();
    public static Size get_MinimumWindowSize();
    public static Size get_CaptionButtonSize();
    public static Size get_FrameBorderSize();
    public static Size get_MinWindowTrackSize();
    public static Size get_DoubleClickSize();
    public static int get_DoubleClickTime();
    public static Size get_IconSpacingSize();
    public static bool get_RightAlignedMenus();
    public static bool get_PenWindows();
    public static bool get_DbcsEnabled();
    public static int get_MouseButtons();
    public static bool get_Secure();
    public static Size get_Border3DSize();
    public static Size get_MinimizedWindowSpacingSize();
    public static Size get_SmallIconSize();
    public static int get_ToolWindowCaptionHeight();
    public static Size get_ToolWindowCaptionButtonSize();
    public static Size get_MenuButtonSize();
    public static ArrangeStartingPosition get_ArrangeStartingPosition();
    public static ArrangeDirection get_ArrangeDirection();
    public static Size get_MinimizedWindowSize();
    public static Size get_MaxWindowTrackSize();
    public static Size get_PrimaryMonitorMaximizedWindowSize();
    public static bool get_Network();
    public static bool get_TerminalServerSession();
    public static BootMode get_BootMode();
    public static Size get_DragSize();
    public static bool get_ShowSounds();
    public static Size get_MenuCheckSize();
    public static bool get_MidEastEnabled();
    internal static bool get_MultiMonitorSupport();
    public static bool get_NativeMouseWheelSupport();
    public static bool get_MouseWheelPresent();
    public static Rectangle get_VirtualScreen();
    public static int get_MonitorCount();
    public static bool get_MonitorsSameDisplayFormat();
    public static string get_ComputerName();
    public static string get_UserDomainName();
    public static bool get_UserInteractive();
    public static string get_UserName();
    private static void EnsureSystemEvents();
    private static void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    public static bool get_IsDropShadowEnabled();
    public static bool get_IsFlatMenuEnabled();
    public static bool get_IsFontSmoothingEnabled();
    public static int get_FontSmoothingContrast();
    public static int get_FontSmoothingType();
    public static int get_IconHorizontalSpacing();
    public static int get_IconVerticalSpacing();
    public static bool get_IsIconTitleWrappingEnabled();
    public static bool get_MenuAccessKeysUnderlined();
    public static int get_KeyboardDelay();
    public static bool get_IsKeyboardPreferred();
    public static int get_KeyboardSpeed();
    public static Size get_MouseHoverSize();
    public static int get_MouseHoverTime();
    public static int get_MouseSpeed();
    public static bool get_IsSnapToDefaultEnabled();
    public static LeftRightAlignment get_PopupMenuAlignment();
    public static bool get_IsMenuFadeEnabled();
    public static int get_MenuShowDelay();
    public static bool get_IsComboBoxAnimationEnabled();
    public static bool get_IsTitleBarGradientEnabled();
    public static bool get_IsHotTrackingEnabled();
    public static bool get_IsListBoxSmoothScrollingEnabled();
    public static bool get_IsMenuAnimationEnabled();
    public static bool get_IsSelectionFadeEnabled();
    public static bool get_IsToolTipAnimationEnabled();
    public static bool get_UIEffectsEnabled();
    public static bool get_IsActiveWindowTrackingEnabled();
    public static int get_ActiveWindowTrackingDelay();
    public static bool get_IsMinimizeRestoreAnimationEnabled();
    public static int get_BorderMultiplierFactor();
    public static int get_CaretBlinkTime();
    public static int get_CaretWidth();
    public static int get_MouseWheelScrollDelta();
    public static int get_VerticalFocusThickness();
    public static int get_HorizontalFocusThickness();
    public static int get_VerticalResizeBorderThickness();
    public static int get_HorizontalResizeBorderThickness();
    public static ScreenOrientation get_ScreenOrientation();
    public static int get_SizingBorderWidth();
    public static Size get_SmallCaptionButtonSize();
    public static Size get_MenuBarButtonSize();
    internal static bool InLockedTerminalSession();
    private static Size GetSize(SYSTEM_METRICS_INDEX x, SYSTEM_METRICS_INDEX y);
}
public enum System.Windows.Forms.SystemParameter : Enum {
    public int value__;
    public static SystemParameter DropShadow;
    public static SystemParameter FlatMenu;
    public static SystemParameter FontSmoothingContrastMetric;
    public static SystemParameter FontSmoothingTypeMetric;
    public static SystemParameter MenuFadeEnabled;
    public static SystemParameter SelectionFade;
    public static SystemParameter ToolTipAnimationMetric;
    public static SystemParameter UIEffects;
    public static SystemParameter CaretWidthMetric;
    public static SystemParameter VerticalFocusThicknessMetric;
    public static SystemParameter HorizontalFocusThicknessMetric;
}
public enum System.Windows.Forms.TabAlignment : Enum {
    public int value__;
    public static TabAlignment Top;
    public static TabAlignment Bottom;
    public static TabAlignment Left;
    public static TabAlignment Right;
}
public enum System.Windows.Forms.TabAppearance : Enum {
    public int value__;
    public static TabAppearance Normal;
    public static TabAppearance Buttons;
    public static TabAppearance FlatButtons;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("TabPages")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DesignerAttribute("System.Windows.Forms.Design.TabControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTabControl")]
public class System.Windows.Forms.TabControl : Control {
    private static Size DefaultItemSize;
    private static Point DefaultPaddingPoint;
    private TabPageCollection _tabCollection;
    private TabAlignment _alignment;
    private TabDrawMode _drawMode;
    [NullableAttribute("2")]
private ImageList _imageList;
    private Size _itemSize;
    private Point _padding;
    private TabSizeMode _sizeMode;
    private TabAppearance _appearance;
    private Rectangle _cachedDisplayRect;
    private bool _currentlyScaling;
    private int _selectedIndex;
    [NullableAttribute("2")]
private string _controlTipText;
    private bool _handleInTable;
    [NullableAttribute("2")]
private EventHandler _onSelectedIndexChanged;
    [NullableAttribute("2")]
private DrawItemEventHandler _onDrawItem;
    private static object s_deselectingEvent;
    private static object s_deselectedEvent;
    private static object s_selectingEvent;
    private static object s_selectedEvent;
    private static object s_rightToLeftLayoutChangedEvent;
    private BitVector32 _tabControlState;
    private static string TabBaseReLayoutMessageName;
    private MessageId _tabBaseReLayoutMessage;
    private List`1<TabPage> _tabPages;
    private int _lastSelection;
    private short _windowId;
    private bool _rightToLeftLayout;
    private bool _skipUpdateSize;
    private ToolTipBuffer _toolTipBuffer;
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("TabBaseAlignmentDescr")]
public TabAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TabBaseAppearanceDescr")]
public TabAppearance Appearance { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    protected CreateParams CreateParams { get; }
    public Rectangle DisplayRectangle { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TabBaseDrawModeDescr")]
public TabDrawMode DrawMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TabBaseHotTrackDescr")]
public bool HotTrack { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TabBaseImageListDescr")]
public ImageList ImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabBaseItemSizeDescr")]
public Size ItemSize { get; public set; }
    private bool InsertingItem { get; private set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TabBaseMultilineDescr")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabBasePaddingDescr")]
public Point Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TabBaseRowCountDescr")]
public int RowCount { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("selectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TabControlSelectedTabDescr")]
public TabPage SelectedTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TabBaseSizeModeDescr")]
[RefreshPropertiesAttribute("2")]
public TabSizeMode SizeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabBaseShowToolTipsDescr")]
public bool ShowToolTips { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TabBaseTabCountDescr")]
public int TabCount { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TabControlTabsDescr")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Windows.Forms.Design.TabPageCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public TabPageCollection TabPages { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    private static TabControl();
    public TabAlignment get_Alignment();
    public void set_Alignment(TabAlignment value);
    public TabAppearance get_Appearance();
    public void set_Appearance(TabAppearance value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public void add_BackColorChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackColorChanged(EventHandler value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageLayoutChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    [NullableContextAttribute("2")]
public void add_ForeColorChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ForeColorChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    public virtual Rectangle get_DisplayRectangle();
    public TabDrawMode get_DrawMode();
    public void set_DrawMode(TabDrawMode value);
    public bool get_HotTrack();
    public void set_HotTrack(bool value);
    [NullableContextAttribute("2")]
public ImageList get_ImageList();
    [NullableContextAttribute("2")]
public void set_ImageList(ImageList value);
    public Size get_ItemSize();
    public void set_ItemSize(Size value);
    private bool get_InsertingItem();
    private void set_InsertingItem(bool value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public Point get_Padding();
    public void set_Padding(Point value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_RowCount();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    [NullableContextAttribute("2")]
public TabPage get_SelectedTab();
    [NullableContextAttribute("2")]
public void set_SelectedTab(TabPage value);
    public TabSizeMode get_SizeMode();
    public void set_SizeMode(TabSizeMode value);
    public bool get_ShowToolTips();
    public void set_ShowToolTips(bool value);
    internal virtual bool get_SupportsUiaProviders();
    public int get_TabCount();
    public TabPageCollection get_TabPages();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public void add_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DrawItem(DrawItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_RightToLeftLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_RightToLeftLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_Selecting(TabControlCancelEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Selecting(TabControlCancelEventHandler value);
    [NullableContextAttribute("2")]
public void add_Selected(TabControlEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Selected(TabControlEventHandler value);
    [NullableContextAttribute("2")]
public void add_Deselecting(TabControlCancelEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Deselecting(TabControlCancelEventHandler value);
    [NullableContextAttribute("2")]
public void add_Deselected(TabControlEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Deselected(TabControlEventHandler value);
    [NullableContextAttribute("2")]
public void add_Paint(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Paint(PaintEventHandler value);
    private int AddTabPage(TabPage tabPage);
    private int AddNativeTabPage(TabPage tabPage);
    internal void ApplyItemSize();
    internal void BeginUpdate();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ControlCollection CreateControlsInstance();
    protected virtual void CreateHandle();
    private void DetachImageList(object sender, EventArgs e);
    public void DeselectTab(int index);
    public void DeselectTab(TabPage tabPage);
    public void DeselectTab(string tabPageName);
    protected virtual void Dispose(bool disposing);
    internal void EndUpdate();
    internal void EndUpdate(bool invalidate);
    [NullableContextAttribute("2")]
internal int FindTabPage(TabPage tabPage);
    public Control GetControl(int index);
    internal TabPage GetTabPage(int index);
    protected virtual Object[] GetItems();
    protected virtual Object[] GetItems(Type baseType);
    internal TabPage[] GetTabPages();
    public Rectangle GetTabRect(int index);
    protected string GetToolTipText(object item);
    private void ImageListRecreateHandle(object sender, EventArgs e);
    internal void Insert(int index, TabPage tabPage);
    private void InsertItem(int index, TabPage tabPage);
    protected virtual bool IsInputKey(Keys keyData);
    [NullableContextAttribute("2")]
private static void NotifyAboutFocusState(TabPage selectedTab, bool focused);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs ke);
    internal virtual void OnParentHandleRecreated();
    protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelecting(TabControlCancelEventArgs e);
    protected virtual void OnSelected(TabControlEventArgs e);
    protected virtual void OnDeselecting(TabControlCancelEventArgs e);
    protected virtual void OnDeselected(TabControlEventArgs e);
    protected virtual bool ProcessKeyPreview(Message& m);
    internal void UpdateSize();
    protected virtual void OnFontChanged(EventArgs e);
    internal virtual void RecreateHandleCore();
    protected void RemoveAll();
    private void RemoveTabPage(int index);
    private void ResetItemSize();
    private void ResetPadding();
    private void ResizePages();
    internal virtual void SetToolTip(ToolTip toolTip);
    private void SetTabPage(int index, TabPage value);
    public void SelectTab(int index);
    public void SelectTab(TabPage tabPage);
    public void SelectTab(string tabPageName);
    private void SelectNextTab(KeyEventArgs ke, bool forward);
    internal virtual bool ShouldPerformContainerValidation();
    private bool ShouldSerializeItemSize();
    private bool ShouldSerializePadding();
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected void UpdateTabSelection(bool updateFocus);
    protected virtual void OnStyleChanged(EventArgs e);
    internal void UpdateTab(TabPage tabPage);
    private void WmNeedText(Message& m);
    private void WmReflectDrawItem(Message& m);
    private bool WmSelChange();
    private bool WmSelChanging();
    private void WmTabBaseReLayout();
    protected virtual void WndProc(Message& m);
    private bool GetState(State state);
    private void SetState(State state, bool value);
    private int SendMessage(UInt32 msg, int wParam, TabPage tabPage);
    private static void PrefixAmpersands(String& value);
    [CompilerGeneratedAttribute]
private void <WmSelChange>b__214_0();
}
public enum System.Windows.Forms.TabControlAction : Enum {
    public int value__;
    public static TabControlAction Selecting;
    public static TabControlAction Selected;
    public static TabControlAction Deselecting;
    public static TabControlAction Deselected;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TabControlCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private TabPage <TabPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabPageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TabControlAction <Action>k__BackingField;
    public TabPage TabPage { get; }
    public int TabPageIndex { get; }
    public TabControlAction Action { get; }
    public TabControlCancelEventArgs(TabPage tabPage, int tabPageIndex, bool cancel, TabControlAction action);
    [CompilerGeneratedAttribute]
public TabPage get_TabPage();
    [CompilerGeneratedAttribute]
public int get_TabPageIndex();
    [CompilerGeneratedAttribute]
public TabControlAction get_Action();
}
public class System.Windows.Forms.TabControlCancelEventHandler : MulticastDelegate {
    public TabControlCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TabControlCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TabControlCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TabControlEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TabPage <TabPage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TabPageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TabControlAction <Action>k__BackingField;
    public TabPage TabPage { get; }
    public int TabPageIndex { get; }
    public TabControlAction Action { get; }
    public TabControlEventArgs(TabPage tabPage, int tabPageIndex, TabControlAction action);
    [CompilerGeneratedAttribute]
public TabPage get_TabPage();
    [CompilerGeneratedAttribute]
public int get_TabPageIndex();
    [CompilerGeneratedAttribute]
public TabControlAction get_Action();
}
public class System.Windows.Forms.TabControlEventHandler : MulticastDelegate {
    public TabControlEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TabControlEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TabControlEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.TabDrawMode : Enum {
    public int value__;
    public static TabDrawMode Normal;
    public static TabDrawMode OwnerDrawFixed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.TableLayoutCellPaintEventArgs : PaintEventArgs {
    [CompilerGeneratedAttribute]
private Rectangle <CellBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    public Rectangle CellBounds { get; }
    public int Column { get; }
    public int Row { get; }
    public TableLayoutCellPaintEventArgs(Graphics g, Rectangle clipRectangle, Rectangle cellBounds, int column, int row);
    internal TableLayoutCellPaintEventArgs(PaintEventArgs e, Rectangle clipRectangle, Rectangle cellBounds, int column, int row);
    [CompilerGeneratedAttribute]
public Rectangle get_CellBounds();
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public int get_Row();
}
public class System.Windows.Forms.TableLayoutCellPaintEventHandler : MulticastDelegate {
    public TableLayoutCellPaintEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TableLayoutCellPaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TableLayoutCellPaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.TableLayoutColumnStyleCollection : TableLayoutStyleCollection {
    internal string PropertyName { get; }
    public ColumnStyle Item { get; public set; }
    internal TableLayoutColumnStyleCollection(IArrangedElement Owner);
    internal virtual string get_PropertyName();
    public int Add(ColumnStyle columnStyle);
    public void Insert(int index, ColumnStyle columnStyle);
    public ColumnStyle get_Item(int index);
    public void set_Item(int index, ColumnStyle value);
    public void Remove(ColumnStyle columnStyle);
    public bool Contains(ColumnStyle columnStyle);
    public int IndexOf(ColumnStyle columnStyle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ListBindableAttribute("False")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.TableLayoutControlCollectionCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.TableLayoutControlCollection : ControlCollection {
    [CompilerGeneratedAttribute]
private TableLayoutPanel <Container>k__BackingField;
    public TableLayoutPanel Container { get; }
    public TableLayoutControlCollection(TableLayoutPanel container);
    [CompilerGeneratedAttribute]
public TableLayoutPanel get_Container();
    public virtual void Add(Control control, int column, int row);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProvidePropertyAttribute("ColumnSpan", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("RowSpan", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("Row", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("Column", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("CellPosition", "System.Windows.Forms.Control")]
[DefaultPropertyAttribute("ColumnCount")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.TableLayoutPanelCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DockingAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.TableLayoutPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTableLayoutPanel")]
public class System.Windows.Forms.TableLayoutPanel : Panel {
    private TableLayoutSettings _tableLayoutSettings;
    private static object s_eventCellPaint;
    public LayoutEngine LayoutEngine { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public TableLayoutSettings LayoutSettings { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[LocalizableAttribute("True")]
public BorderStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TableLayoutPanelCellBorderStyleDescr")]
[LocalizableAttribute("True")]
public TableLayoutPanelCellBorderStyle CellBorderStyle { get; public set; }
    private int CellBorderWidth { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ControlControlsDescr")]
public TableLayoutControlCollection Controls { get; }
    [SRDescriptionAttribute("GridPanelColumnsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
public int ColumnCount { get; public set; }
    [SRDescriptionAttribute("TableLayoutPanelGrowStyleDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TableLayoutPanelGrowStyle GrowStyle { get; public set; }
    [SRDescriptionAttribute("GridPanelRowsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
public int RowCount { get; public set; }
    [SRDescriptionAttribute("GridPanelRowStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("Rows")]
[MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
public TableLayoutRowStyleCollection RowStyles { get; }
    [SRDescriptionAttribute("GridPanelColumnStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("Columns")]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public TableLayoutColumnStyleCollection ColumnStyles { get; }
    private static TableLayoutPanel();
    public virtual LayoutEngine get_LayoutEngine();
    public TableLayoutSettings get_LayoutSettings();
    public void set_LayoutSettings(TableLayoutSettings value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public TableLayoutPanelCellBorderStyle get_CellBorderStyle();
    public void set_CellBorderStyle(TableLayoutPanelCellBorderStyle value);
    private int get_CellBorderWidth();
    public TableLayoutControlCollection get_Controls();
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public TableLayoutPanelGrowStyle get_GrowStyle();
    public void set_GrowStyle(TableLayoutPanelGrowStyle value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public TableLayoutRowStyleCollection get_RowStyles();
    public TableLayoutColumnStyleCollection get_ColumnStyles();
    [EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    private bool ShouldSerializeControls();
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object obj);
    [SRDescriptionAttribute("GridPanelGetColumnSpanDescr")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("ColumnSpan")]
public int GetColumnSpan(Control control);
    public void SetColumnSpan(Control control, int value);
    [SRDescriptionAttribute("GridPanelGetRowSpanDescr")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("RowSpan")]
public int GetRowSpan(Control control);
    public void SetRowSpan(Control control, int value);
    [DefaultValueAttribute("-1")]
[SRDescriptionAttribute("GridPanelRowDescr")]
[SRCategoryAttribute("CatLayout")]
[DesignerSerializationVisibilityAttribute("0")]
[DisplayNameAttribute("Row")]
public int GetRow(Control control);
    public void SetRow(Control control, int row);
    [DefaultValueAttribute("System.Windows.Forms.TableLayoutPanelCellPosition", "-1,-1")]
[SRDescriptionAttribute("GridPanelCellPositionDescr")]
[SRCategoryAttribute("CatLayout")]
[DesignerSerializationVisibilityAttribute("0")]
[DisplayNameAttribute("Cell")]
public TableLayoutPanelCellPosition GetCellPosition(Control control);
    public void SetCellPosition(Control control, TableLayoutPanelCellPosition position);
    [DefaultValueAttribute("-1")]
[SRDescriptionAttribute("GridPanelColumnDescr")]
[SRCategoryAttribute("CatLayout")]
[DesignerSerializationVisibilityAttribute("0")]
[DisplayNameAttribute("Column")]
public int GetColumn(Control control);
    public void SetColumn(Control control, int column);
    [NullableContextAttribute("2")]
public Control GetControlFromPosition(int column, int row);
    [NullableContextAttribute("2")]
public TableLayoutPanelCellPosition GetPositionFromControl(Control control);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Int32[] GetColumnWidths();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Int32[] GetRowHeights();
    [NullableContextAttribute("2")]
public void add_CellPaint(TableLayoutCellPaintEventHandler value);
    [NullableContextAttribute("2")]
public void remove_CellPaint(TableLayoutCellPaintEventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnCellPaint(TableLayoutCellPaintEventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    private void ScaleAbsoluteStyles(SizeF factor);
}
public enum System.Windows.Forms.TableLayoutPanelCellBorderStyle : Enum {
    public int value__;
    public static TableLayoutPanelCellBorderStyle None;
    public static TableLayoutPanelCellBorderStyle Single;
    public static TableLayoutPanelCellBorderStyle Inset;
    public static TableLayoutPanelCellBorderStyle InsetDouble;
    public static TableLayoutPanelCellBorderStyle Outset;
    public static TableLayoutPanelCellBorderStyle OutsetDouble;
    public static TableLayoutPanelCellBorderStyle OutsetPartial;
}
[TypeConverterAttribute("System.Windows.Forms.TableLayoutPanelCellPositionTypeConverter")]
public class System.Windows.Forms.TableLayoutPanelCellPosition : ValueType {
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Row { get; public set; }
    public int Column { get; public set; }
    public TableLayoutPanelCellPosition(int column, int row);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Row();
    [CompilerGeneratedAttribute]
public void set_Row(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object other);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(TableLayoutPanelCellPosition other);
    public static bool op_Equality(TableLayoutPanelCellPosition p1, TableLayoutPanelCellPosition p2);
    public static bool op_Inequality(TableLayoutPanelCellPosition p1, TableLayoutPanelCellPosition p2);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.TableLayoutPanelCellPositionTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    [RequiresUnreferencedCodeAttribute("The Type of value cannot be statically discovered")]
[DynamicDependencyAttribute("33", "System.ComponentModel.BrowsableAttribute")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public enum System.Windows.Forms.TableLayoutPanelGrowStyle : Enum {
    public int value__;
    public static TableLayoutPanelGrowStyle FixedSize;
    public static TableLayoutPanelGrowStyle AddRows;
    public static TableLayoutPanelGrowStyle AddColumns;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.TableLayoutRowStyleCollection : TableLayoutStyleCollection {
    internal string PropertyName { get; }
    public RowStyle Item { get; public set; }
    internal TableLayoutRowStyleCollection(IArrangedElement Owner);
    internal virtual string get_PropertyName();
    public int Add(RowStyle rowStyle);
    public void Insert(int index, RowStyle rowStyle);
    public RowStyle get_Item(int index);
    public void set_Item(int index, RowStyle value);
    public void Remove(RowStyle rowStyle);
    public bool Contains(RowStyle rowStyle);
    public int IndexOf(RowStyle rowStyle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter")]
public class System.Windows.Forms.TableLayoutSettings : LayoutSettings {
    private static Int32[] borderStyleToOffset;
    private TableLayoutPanelCellBorderStyle _borderStyle;
    [NullableAttribute("2")]
private TableLayoutSettingsStub _stub;
    public LayoutEngine LayoutEngine { get; }
    private TableLayout TableLayout { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TableLayoutPanelCellBorderStyleDescr")]
internal TableLayoutPanelCellBorderStyle CellBorderStyle { get; internal set; }
    [DefaultValueAttribute("0")]
internal int CellBorderWidth { get; }
    [SRDescriptionAttribute("GridPanelColumnsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
public int ColumnCount { get; public set; }
    [SRDescriptionAttribute("GridPanelRowsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
public int RowCount { get; public set; }
    [SRDescriptionAttribute("GridPanelRowStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
public TableLayoutRowStyleCollection RowStyles { get; }
    [SRDescriptionAttribute("GridPanelColumnStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
public TableLayoutColumnStyleCollection ColumnStyles { get; }
    [SRDescriptionAttribute("TableLayoutPanelGrowStyleDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TableLayoutPanelGrowStyle GrowStyle { get; public set; }
    [MemberNotNullWhenAttribute("True", "_stub")]
internal bool IsStub { get; }
    internal TableLayoutSettings(IArrangedElement owner);
    private TableLayoutSettings(SerializationInfo serializationInfo, StreamingContext context);
    private static TableLayoutSettings();
    public virtual LayoutEngine get_LayoutEngine();
    private TableLayout get_TableLayout();
    internal TableLayoutPanelCellBorderStyle get_CellBorderStyle();
    internal void set_CellBorderStyle(TableLayoutPanelCellBorderStyle value);
    internal int get_CellBorderWidth();
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public TableLayoutRowStyleCollection get_RowStyles();
    public TableLayoutColumnStyleCollection get_ColumnStyles();
    public TableLayoutPanelGrowStyle get_GrowStyle();
    public void set_GrowStyle(TableLayoutPanelGrowStyle value);
    [MemberNotNullWhenAttribute("True", "_stub")]
internal bool get_IsStub();
    internal void ApplySettings(TableLayoutSettings settings);
    public int GetColumnSpan(object control);
    public void SetColumnSpan(object control, int value);
    public int GetRowSpan(object control);
    public void SetRowSpan(object control, int value);
    [SRDescriptionAttribute("GridPanelRowDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public int GetRow(object control);
    public void SetRow(object control, int row);
    [SRDescriptionAttribute("TableLayoutSettingsGetCellPositionDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public TableLayoutPanelCellPosition GetCellPosition(object control);
    [SRDescriptionAttribute("TableLayoutSettingsSetCellPositionDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public void SetCellPosition(object control, TableLayoutPanelCellPosition cellPosition);
    [SRDescriptionAttribute("GridPanelColumnDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public int GetColumn(object control);
    public void SetColumn(object control, int column);
    private void SetCellPosition(object control, int row, int column, bool rowSpecified, bool colSpecified);
    [NullableContextAttribute("2")]
internal IArrangedElement GetControlFromPosition(int column, int row);
    [NullableContextAttribute("2")]
internal TableLayoutPanelCellPosition GetPositionFromControl(IArrangedElement element);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    internal List`1<ControlInformation> GetControlsInformation();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("System.Windows.Forms.TableLayoutSettings/StyleConverter")]
public abstract class System.Windows.Forms.TableLayoutStyle : object {
    private IArrangedElement _owner;
    private SizeType _sizeType;
    private float _size;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SizeType SizeType { get; public set; }
    internal float Size { get; internal set; }
    internal IArrangedElement Owner { get; internal set; }
    public SizeType get_SizeType();
    public void set_SizeType(SizeType value);
    internal float get_Size();
    internal void set_Size(float value);
    private bool ShouldSerializeSize();
    internal IArrangedElement get_Owner();
    internal void set_Owner(IArrangedElement value);
    internal void SetSize(float size);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.StyleCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public abstract class System.Windows.Forms.TableLayoutStyleCollection : object {
    private IArrangedElement _owner;
    [NullableAttribute("1")]
private List`1<TableLayoutStyle> _innerList;
    internal IArrangedElement Owner { get; }
    internal string PropertyName { get; }
    private object System.Collections.IList.Item { get; private set; }
    [NullableAttribute("1")]
public TableLayoutStyle Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    internal TableLayoutStyleCollection(IArrangedElement owner);
    internal IArrangedElement get_Owner();
    internal virtual string get_PropertyName();
    private sealed virtual override int System.Collections.IList.Add(object style);
    [NullableContextAttribute("1")]
public int Add(TableLayoutStyle style);
    private sealed virtual override void System.Collections.IList.Insert(int index, object style);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    [NullableContextAttribute("1")]
public TableLayoutStyle get_Item(int index);
    [NullableContextAttribute("1")]
public void set_Item(int index, TableLayoutStyle value);
    private sealed virtual override void System.Collections.IList.Remove(object style);
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.Contains(object style);
    private sealed virtual override int System.Collections.IList.IndexOf(object style);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int startIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
private static void EnsureNotOwned(TableLayoutStyle style);
    [NullableContextAttribute("1")]
internal void EnsureOwnership(IArrangedElement owner);
    private void PerformLayoutIfOwned();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.TabPageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultEventAttribute("Click")]
[DefaultPropertyAttribute("Text")]
public class System.Windows.Forms.TabPage : Panel {
    private Indexer _imageIndexer;
    [NullableAttribute("1")]
private string _toolTipText;
    private bool _enterFired;
    private bool _leaveFired;
    private bool _useVisualStyleBackColor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ToolTip> _associatedToolTips;
    private ToolTip _externalToolTip;
    [NullableAttribute("1")]
private ToolTip _internalToolTip;
    private TabAccessibleObject _tabAccessibilityObject;
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[LocalizableAttribute("False")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [NullableAttribute("1")]
internal Indexer ImageIndexer { get; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("TabItemImageIndexDescr")]
public int ImageIndex { get; public set; }
    [NullableAttribute("1")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TabItemImageIndexDescr")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockStyle Dock { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TabItemUseVisualStyleBackColorDescr")]
public bool UseVisualStyleBackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Point Location { get; public set; }
    [DefaultValueAttribute("System.Drawing.Size", "0, 0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size MaximumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size MinimumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size PreferredSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int TabIndex { get; public set; }
    internal bool RenderTransparencyWithVisualStyles { get; }
    internal bool SupportsUiaProviders { get; }
    [NullableAttribute("1")]
internal TabAccessibleObject TabAccessibilityObject { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
[LocalizableAttribute("True")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public string Text { get; public set; }
    [NullableAttribute("1")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabItemToolTipTextDescr")]
public string ToolTipText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    public TabPage(string text);
    internal virtual bool AllowsKeyboardToolTip();
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
protected virtual ControlCollection CreateControlsInstance();
    [NullableContextAttribute("1")]
private protected virtual string GetCaptionForTool(ToolTip toolTip);
    [NullableContextAttribute("1")]
private protected virtual IList`1<Rectangle> GetNeighboringToolsRectangles();
    private protected virtual bool IsHoveredWithMouse();
    [NullableContextAttribute("1")]
internal Indexer get_ImageIndexer();
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    [NullableContextAttribute("1")]
public string get_ImageKey();
    [NullableContextAttribute("1")]
public void set_ImageKey(string value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public bool get_UseVisualStyleBackColor();
    public void set_UseVisualStyleBackColor(bool value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public Size get_PreferredSize();
    public int get_TabIndex();
    public void set_TabIndex(int value);
    internal virtual bool get_RenderTransparencyWithVisualStyles();
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
internal TabAccessibleObject get_TabAccessibilityObject();
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [NullableContextAttribute("1")]
public string get_ToolTipText();
    [NullableContextAttribute("1")]
public void set_ToolTipText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    internal virtual void AssignParent(Control value);
    public static TabPage GetTabPageOfComponent(object comp);
    internal Rectangle GetPageRectangle();
    internal virtual Rectangle GetToolNativeScreenRectangle();
    [NullableContextAttribute("1")]
internal void FireLeave(EventArgs e);
    [NullableContextAttribute("1")]
internal void FireEnter(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnEnter(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLeave(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    internal virtual void ReleaseUiaProvider(HWND handle);
    [NullableContextAttribute("1")]
internal virtual void RemoveToolTip(ToolTip toolTip);
    [NullableContextAttribute("1")]
internal virtual void SetToolTip(ToolTip toolTip);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeLocation();
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal void UpdateParent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.TabRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static void DrawTabItem(Graphics g, Rectangle bounds, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, bool focused, TabItemState state);
    [NullableContextAttribute("2")]
public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TabItemState state);
    [NullableContextAttribute("2")]
public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, bool focused, TabItemState state);
    [NullableContextAttribute("2")]
public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TextFormatFlags flags, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, Image image, Rectangle imageRectangle, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, Image image, Rectangle imageRectangle, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TextFormatFlags flags, Image image, Rectangle imageRectangle, bool focused, TabItemState state);
    public static void DrawTabPage(Graphics g, Rectangle bounds);
    internal static void DrawTabPage(IDeviceContext deviceContext, Rectangle bounds);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(VisualStyleElement element, int state);
}
public enum System.Windows.Forms.TabSizeMode : Enum {
    public int value__;
    public static TabSizeMode Normal;
    public static TabSizeMode FillToRight;
    public static TabSizeMode Fixed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialog : object {
    private static UInt32 ContinueButtonClickHandlingMessage;
    [NullableAttribute("2")]
private TaskDialogPage _boundPage;
    private Queue`1<TaskDialogPage> _waitingNavigationPages;
    private IntPtr _instanceHandlePtr;
    private HWND _handle;
    [NullableAttribute("2")]
private WindowSubclassHandler _windowSubclassHandler;
    private bool _raisedPageCreated;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
private ValueTuple`2<int, int> _buttonClickNavigationCounter;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<ValueTuple`2<TaskDialogButton, int>> _resultButton;
    private bool _suppressButtonClickedEvent;
    private bool _isInNavigate;
    private bool _ignoreButtonClickedNotifications;
    private bool _buttonClickedProgrammatically;
    private bool _receivedDestroyedNotification;
    [CompilerGeneratedAttribute]
private int <RadioButtonClickedStackCount>k__BackingField;
    public IntPtr Handle { get; }
    internal bool IsShown { get; }
    internal bool IsHandleCreated { get; }
    internal bool InvokeRequired { get; }
    internal int RadioButtonClickedStackCount { get; internal set; }
    public sealed virtual IntPtr get_Handle();
    internal bool get_IsShown();
    internal bool get_IsHandleCreated();
    internal bool get_InvokeRequired();
    [CompilerGeneratedAttribute]
internal int get_RadioButtonClickedStackCount();
    [CompilerGeneratedAttribute]
internal void set_RadioButtonClickedStackCount(int value);
    private static void FreeConfig(IntPtr ptrToFree);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT HandleTaskDialogNativeCallback(HWND hwnd, TASKDIALOG_NOTIFICATIONS msg, IntPtr wParam, IntPtr lParam, IntPtr lpRefData);
    [NullableContextAttribute("2")]
private static bool IsTaskDialogButtonCommitting(TaskDialogButton button);
    private static TaskDialogButton CreatePlaceholderButton(TaskDialogResult result);
    public static TaskDialogButton ShowDialog(TaskDialogPage page, TaskDialogStartupLocation startupLocation);
    public static TaskDialogButton ShowDialog(IWin32Window owner, TaskDialogPage page, TaskDialogStartupLocation startupLocation);
    public static TaskDialogButton ShowDialog(IntPtr hwndOwner, TaskDialogPage page, TaskDialogStartupLocation startupLocation);
    private TaskDialogButton ShowDialogInternal(IntPtr hwndOwner, TaskDialogPage page, TaskDialogStartupLocation startupLocation);
    public void Close();
    internal void SwitchProgressBarMode(bool marqueeProgressBar);
    internal void SetProgressBarMarquee(bool enableMarquee, int animationSpeed);
    internal void SetProgressBarRange(int min, int max);
    internal void SetProgressBarPosition(int pos);
    internal void SetProgressBarState(UInt32 state);
    internal void ClickCheckBox(bool isChecked, bool focus);
    internal void SetButtonElevationRequiredState(int buttonID, bool requiresElevation);
    internal void SetButtonEnabled(int buttonID, bool enable);
    internal void SetRadioButtonEnabled(int radioButtonID, bool enable);
    internal void ClickButton(int buttonID, bool checkWaitingForNavigation);
    internal void ClickRadioButton(int radioButtonID);
    [NullableContextAttribute("2")]
internal void UpdateTextElement(TASKDIALOG_ELEMENTS element, string text);
    internal void UpdateIconElement(TASKDIALOG_ICON_ELEMENTS element, IntPtr icon);
    [NullableContextAttribute("2")]
internal void UpdateCaption(string caption);
    private HRESULT HandleTaskDialogCallback(HWND hWnd, TASKDIALOG_NOTIFICATIONS notification, IntPtr wParam, IntPtr lParam);
    internal void Navigate(TaskDialogPage page);
    [NullableContextAttribute("0")]
private void BindPageAndAllocateConfig(TaskDialogPage page, IntPtr hwndOwner, TaskDialogStartupLocation startupLocation, IntPtr& ptrToFree, TASKDIALOGCONFIG*& ptrTaskDialogConfig);
    private void SubclassWindow();
    private void UnsubclassWindow();
    private void DenyIfBound();
    private void DenyIfDialogNotUpdatable(bool checkWaitingForNavigation);
    private static bool CanCatchCallbackException();
    private static void HandleCallbackException(Exception e);
    private void SendTaskDialogMessage(TASKDIALOG_MESSAGES message, WPARAM wParam, LPARAM lParam, bool checkWaitingForNavigation);
    private void UpdateWindowSize();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Char* <BindPageAndAllocateConfig>g__MarshalString|52_2(string str, <>c__DisplayClass52_0& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <BindPageAndAllocateConfig>g__Align|52_0(Byte*& currentPtr, Nullable`1<int> alignment);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static long <BindPageAndAllocateConfig>g__SizeOfString|52_1(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogButton : TaskDialogControl {
    private Nullable`1<TaskDialogResult> _standardButtonResult;
    private bool _enabled;
    private bool _showShieldIcon;
    private bool _visible;
    [NullableAttribute("2")]
private string _text;
    private int _customButtonID;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Click;
    [CompilerGeneratedAttribute]
private bool <AllowCloseDialog>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TaskDialogButtonCollection <Collection>k__BackingField;
    public static TaskDialogButton OK { get; }
    public static TaskDialogButton Cancel { get; }
    public static TaskDialogButton Abort { get; }
    public static TaskDialogButton Retry { get; }
    public static TaskDialogButton Ignore { get; }
    public static TaskDialogButton Yes { get; }
    public static TaskDialogButton No { get; }
    public static TaskDialogButton Close { get; }
    public static TaskDialogButton Help { get; }
    public static TaskDialogButton TryAgain { get; }
    public static TaskDialogButton Continue { get; }
    public bool AllowCloseDialog { get; public set; }
    public bool Enabled { get; public set; }
    public bool ShowShieldIcon { get; public set; }
    public bool Visible { get; public set; }
    [NullableAttribute("2")]
public string Text { get; public set; }
    internal bool IsCreatable { get; }
    internal bool IsStandardButton { get; }
    internal TaskDialogResult StandardButtonResult { get; }
    internal int ButtonID { get; }
    [NullableAttribute("2")]
internal TaskDialogButtonCollection Collection { get; internal set; }
    [NullableContextAttribute("2")]
public TaskDialogButton(string text, bool enabled, bool allowCloseDialog);
    internal TaskDialogButton(TaskDialogResult standardButtonResult);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Click(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Click(EventHandler value);
    public static TaskDialogButton get_OK();
    public static TaskDialogButton get_Cancel();
    public static TaskDialogButton get_Abort();
    public static TaskDialogButton get_Retry();
    public static TaskDialogButton get_Ignore();
    public static TaskDialogButton get_Yes();
    public static TaskDialogButton get_No();
    public static TaskDialogButton get_Close();
    public static TaskDialogButton get_Help();
    public static TaskDialogButton get_TryAgain();
    public static TaskDialogButton get_Continue();
    [CompilerGeneratedAttribute]
public bool get_AllowCloseDialog();
    [CompilerGeneratedAttribute]
public void set_AllowCloseDialog(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_ShowShieldIcon();
    public void set_ShowShieldIcon(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    [NullableContextAttribute("2")]
public string get_Text();
    [NullableContextAttribute("2")]
public void set_Text(string value);
    internal virtual bool get_IsCreatable();
    internal bool get_IsStandardButton();
    internal TaskDialogResult get_StandardButtonResult();
    internal int get_ButtonID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal TaskDialogButtonCollection get_Collection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Collection(TaskDialogButtonCollection value);
    [NullableContextAttribute("2")]
public static bool op_Equality(TaskDialogButton b1, TaskDialogButton b2);
    [NullableContextAttribute("2")]
public static bool op_Inequality(TaskDialogButton b1, TaskDialogButton b2);
    private static TDCBF GetStandardButtonFlagForResult(TaskDialogResult result);
    public void PerformClick();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal TASKDIALOG_FLAGS Bind(TaskDialogPage page, int customButtonID);
    internal bool HandleButtonClicked();
    [NullableContextAttribute("2")]
internal virtual string GetResultingText();
    internal TDCBF GetStandardButtonFlag();
    private protected virtual void ApplyInitializationCore();
    private protected virtual void UnbindCore();
    private protected void OnClick(EventArgs e);
    private bool CanUpdate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Windows.Forms.TaskDialogButtonCollection : Collection`1<TaskDialogButton> {
    private HashSet`1<TaskDialogButton> _itemSet;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TaskDialogPage <BoundPage>k__BackingField;
    [NullableAttribute("2")]
internal TaskDialogPage BoundPage { get; internal set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal TaskDialogPage get_BoundPage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_BoundPage(TaskDialogPage value);
    public TaskDialogButton Add(string text, bool enabled, bool allowCloseDialog);
    protected virtual void SetItem(int index, TaskDialogButton item);
    protected virtual void InsertItem(int index, TaskDialogButton item);
    protected virtual void RemoveItem(int index);
    protected virtual void ClearItems();
    private void DenyIfHasOtherCollection(TaskDialogButton item);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogCommandLinkButton : TaskDialogButton {
    private string _descriptionText;
    public string DescriptionText { get; public set; }
    public TaskDialogCommandLinkButton(string text, string descriptionText, bool enabled, bool allowCloseDialog);
    public string get_DescriptionText();
    public void set_DescriptionText(string value);
    internal virtual string GetResultingText();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.TaskDialogControl : object {
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskDialogPage <BoundPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCreated>k__BackingField;
    public object Tag { get; public set; }
    public TaskDialogPage BoundPage { get; private set; }
    internal bool IsCreatable { get; }
    internal bool IsCreated { get; private set; }
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public TaskDialogPage get_BoundPage();
    [CompilerGeneratedAttribute]
private void set_BoundPage(TaskDialogPage value);
    internal virtual bool get_IsCreatable();
    [CompilerGeneratedAttribute]
internal bool get_IsCreated();
    [CompilerGeneratedAttribute]
private void set_IsCreated(bool value);
    [NullableContextAttribute("1")]
internal TASKDIALOG_FLAGS Bind(TaskDialogPage page);
    internal void Unbind();
    internal void ApplyInitialization();
    private protected virtual TASKDIALOG_FLAGS BindCore();
    private protected virtual void UnbindCore();
    private protected virtual void ApplyInitializationCore();
    private protected void DenyIfBound();
    private protected void DenyIfWaitingForInitialization();
    private protected void DenyIfNotBoundOrWaitingForInitialization();
    private protected void DenyIfBoundAndNotCreated();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogExpander : TaskDialogControl {
    private string _text;
    private string _expandedButtonText;
    private string _collapsedButtonText;
    private TaskDialogExpanderPosition _expanderPosition;
    private bool _expanded;
    private bool _updateTextOnInitialization;
    [CompilerGeneratedAttribute]
private EventHandler ExpandedChanged;
    public string Text { get; public set; }
    public string ExpandedButtonText { get; public set; }
    public string CollapsedButtonText { get; public set; }
    public bool Expanded { get; public set; }
    public TaskDialogExpanderPosition Position { get; public set; }
    internal bool IsCreatable { get; }
    public TaskDialogExpander(string text);
    [CompilerGeneratedAttribute]
public void add_ExpandedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ExpandedChanged(EventHandler value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ExpandedButtonText();
    public void set_ExpandedButtonText(string value);
    public string get_CollapsedButtonText();
    public void set_CollapsedButtonText(string value);
    public bool get_Expanded();
    public void set_Expanded(bool value);
    public TaskDialogExpanderPosition get_Position();
    public void set_Position(TaskDialogExpanderPosition value);
    internal virtual bool get_IsCreatable();
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal void HandleExpandoButtonClicked(bool expanded);
    private protected virtual TASKDIALOG_FLAGS BindCore();
    private protected virtual void ApplyInitializationCore();
    [NullableContextAttribute("1")]
private void OnExpandedChanged(EventArgs e);
}
public enum System.Windows.Forms.TaskDialogExpanderPosition : Enum {
    public int value__;
    public static TaskDialogExpanderPosition AfterText;
    public static TaskDialogExpanderPosition AfterFootnote;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogFootnote : TaskDialogControl {
    private string _text;
    private TaskDialogIcon _icon;
    private bool _boundIconIsFromHandle;
    private bool _updateTextOnInitialization;
    public string Text { get; public set; }
    public TaskDialogIcon Icon { get; public set; }
    internal bool IsCreatable { get; }
    public TaskDialogFootnote(string text);
    [NullableContextAttribute("1")]
public static TaskDialogFootnote op_Implicit(string footnoteText);
    public string get_Text();
    public void set_Text(string value);
    public TaskDialogIcon get_Icon();
    public void set_Icon(TaskDialogIcon value);
    internal virtual bool get_IsCreatable();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
internal TASKDIALOG_FLAGS Bind(TaskDialogPage page, IconUnion& icon);
    private protected virtual TASKDIALOG_FLAGS BindCore();
    private protected virtual void ApplyInitializationCore();
    private protected virtual void UnbindCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogIcon : object {
    public static TaskDialogIcon None;
    public static TaskDialogIcon Information;
    public static TaskDialogIcon Warning;
    public static TaskDialogIcon Error;
    public static TaskDialogIcon Shield;
    public static TaskDialogIcon ShieldBlueBar;
    public static TaskDialogIcon ShieldGrayBar;
    public static TaskDialogIcon ShieldWarningYellowBar;
    public static TaskDialogIcon ShieldErrorRedBar;
    public static TaskDialogIcon ShieldSuccessGreenBar;
    private Nullable`1<TaskDialogStandardIcon> _standardIcon;
    [NullableAttribute("2")]
private Icon _ownedIcon;
    private Nullable`1<IntPtr> _iconHandle;
    public IntPtr IconHandle { get; }
    internal TaskDialogStandardIcon StandardIcon { get; }
    internal bool IsStandardIcon { get; }
    internal bool IsHandleIcon { get; }
    public TaskDialogIcon(Bitmap image);
    public TaskDialogIcon(Icon icon);
    public TaskDialogIcon(IntPtr iconHandle);
    private TaskDialogIcon(Icon icon, bool takeOwnership);
    private TaskDialogIcon(TaskDialogStandardIcon standardIcon);
    private static TaskDialogIcon();
    public sealed virtual void Dispose();
    public IntPtr get_IconHandle();
    internal TaskDialogStandardIcon get_StandardIcon();
    internal bool get_IsStandardIcon();
    internal bool get_IsHandleIcon();
    private static Icon BitmapToIcon(Bitmap bitmap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogLinkClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <LinkHref>k__BackingField;
    public string LinkHref { get; }
    public TaskDialogLinkClickedEventArgs(string linkHref);
    [CompilerGeneratedAttribute]
public string get_LinkHref();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogPage : object {
    private static int CustomButtonStartID;
    private static int RadioButtonStartID;
    [NullableAttribute("1")]
private TaskDialogButtonCollection _buttons;
    [NullableAttribute("1")]
private TaskDialogRadioButtonCollection _radioButtons;
    private TaskDialogVerificationCheckBox _checkBox;
    private TaskDialogExpander _expander;
    private TaskDialogFootnote _footnote;
    private TaskDialogProgressBar _progressBar;
    private TASKDIALOG_FLAGS _flags;
    private TaskDialogIcon _icon;
    private string _caption;
    private string _heading;
    private string _text;
    private bool _boundIconIsFromHandle;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskDialogButton[] _boundCustomButtons;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, TaskDialogButton> _boundStandardButtonsByID;
    private bool _appliedInitialization;
    private bool _updateHeadingOnInitialization;
    private bool _updateTextOnInitialization;
    [CompilerGeneratedAttribute]
private EventHandler Created;
    [CompilerGeneratedAttribute]
private EventHandler Destroyed;
    [CompilerGeneratedAttribute]
private EventHandler HelpRequest;
    [CompilerGeneratedAttribute]
private TaskDialogButton <DefaultButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLinks>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<TaskDialogLinkClickedEventArgs> LinkClicked;
    [CompilerGeneratedAttribute]
private TaskDialog <BoundDialog>k__BackingField;
    [NullableAttribute("1")]
public TaskDialogButtonCollection Buttons { get; public set; }
    public TaskDialogButton DefaultButton { get; public set; }
    [NullableAttribute("1")]
public TaskDialogRadioButtonCollection RadioButtons { get; public set; }
    public TaskDialogVerificationCheckBox Verification { get; public set; }
    public TaskDialogExpander Expander { get; public set; }
    public TaskDialogFootnote Footnote { get; public set; }
    public TaskDialogProgressBar ProgressBar { get; public set; }
    public string Caption { get; public set; }
    public string Heading { get; public set; }
    public string Text { get; public set; }
    public TaskDialogIcon Icon { get; public set; }
    public bool AllowCancel { get; public set; }
    public bool RightToLeftLayout { get; public set; }
    public bool AllowMinimize { get; public set; }
    public bool SizeToContent { get; public set; }
    public bool EnableLinks { get; public set; }
    public TaskDialog BoundDialog { get; private set; }
    internal bool WaitingForInitialization { get; }
    [CompilerGeneratedAttribute]
public void add_Created(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Created(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Destroyed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Destroyed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_HelpRequest(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HelpRequest(EventHandler value);
    [NullableContextAttribute("1")]
public TaskDialogButtonCollection get_Buttons();
    [NullableContextAttribute("1")]
public void set_Buttons(TaskDialogButtonCollection value);
    [CompilerGeneratedAttribute]
public TaskDialogButton get_DefaultButton();
    [CompilerGeneratedAttribute]
public void set_DefaultButton(TaskDialogButton value);
    [NullableContextAttribute("1")]
public TaskDialogRadioButtonCollection get_RadioButtons();
    [NullableContextAttribute("1")]
public void set_RadioButtons(TaskDialogRadioButtonCollection value);
    public TaskDialogVerificationCheckBox get_Verification();
    public void set_Verification(TaskDialogVerificationCheckBox value);
    public TaskDialogExpander get_Expander();
    public void set_Expander(TaskDialogExpander value);
    public TaskDialogFootnote get_Footnote();
    public void set_Footnote(TaskDialogFootnote value);
    public TaskDialogProgressBar get_ProgressBar();
    public void set_ProgressBar(TaskDialogProgressBar value);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_Heading();
    public void set_Heading(string value);
    public string get_Text();
    public void set_Text(string value);
    public TaskDialogIcon get_Icon();
    public void set_Icon(TaskDialogIcon value);
    public bool get_AllowCancel();
    public void set_AllowCancel(bool value);
    public bool get_RightToLeftLayout();
    public void set_RightToLeftLayout(bool value);
    public bool get_AllowMinimize();
    public void set_AllowMinimize(bool value);
    public bool get_SizeToContent();
    public void set_SizeToContent(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableLinks();
    [CompilerGeneratedAttribute]
public void set_EnableLinks(bool value);
    [CompilerGeneratedAttribute]
public void add_LinkClicked(EventHandler`1<TaskDialogLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LinkClicked(EventHandler`1<TaskDialogLinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public TaskDialog get_BoundDialog();
    [CompilerGeneratedAttribute]
private void set_BoundDialog(TaskDialog value);
    internal bool get_WaitingForInitialization();
    [NullableContextAttribute("1")]
public void Navigate(TaskDialogPage page);
    internal static bool IsNativeStringNullOrEmpty(string str);
    [NullableContextAttribute("0")]
internal static ValueTuple`2<IconUnion, Nullable`1<bool>> GetIconValue(TaskDialogIcon icon);
    internal void DenyIfBound();
    internal void DenyIfWaitingForInitialization();
    internal TaskDialogButton GetBoundButtonByID(int buttonID);
    internal TaskDialogRadioButton GetBoundRadioButtonByID(int buttonID);
    internal void Validate();
    [NullableContextAttribute("1")]
internal void Bind(TaskDialog owner, TASKDIALOG_FLAGS& flags, TDCBF& buttonFlags, IEnumerable`1& customButtonElements, IEnumerable`1& radioButtonElements, IconUnion& mainIcon, IconUnion& footnoteIcon, Int32& defaultButtonID, Int32& defaultRadioButtonID);
    internal void Unbind();
    internal void ApplyInitialization();
    [NullableContextAttribute("1")]
protected internal void OnCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected internal void OnDestroyed(EventArgs e);
    [NullableContextAttribute("1")]
protected internal void OnHelpRequest(EventArgs e);
    [NullableContextAttribute("1")]
protected internal void OnLinkClicked(TaskDialogLinkClickedEventArgs e);
    private bool GetFlag(TASKDIALOG_FLAGS flag);
    private void SetFlag(TASKDIALOG_FLAGS flag, bool value);
}
public class System.Windows.Forms.TaskDialogProgressBar : TaskDialogControl {
    private TaskDialogProgressBarState _state;
    private TaskDialogProgressBarState _stateWhenBound;
    private int _minimum;
    private int _maximum;
    private int _value;
    private int _marqueeSpeed;
    public TaskDialogProgressBarState State { get; public set; }
    public int Minimum { get; public set; }
    public int Maximum { get; public set; }
    public int Value { get; public set; }
    public int MarqueeSpeed { get; public set; }
    internal bool IsCreatable { get; }
    public TaskDialogProgressBar(TaskDialogProgressBarState state);
    public TaskDialogProgressBarState get_State();
    public void set_State(TaskDialogProgressBarState value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Value();
    public void set_Value(int value);
    public int get_MarqueeSpeed();
    public void set_MarqueeSpeed(int value);
    internal virtual bool get_IsCreatable();
    private static bool ProgressBarStateIsMarquee(TaskDialogProgressBarState state);
    private static UInt32 GetNativeProgressBarState(TaskDialogProgressBarState state);
    private protected virtual TASKDIALOG_FLAGS BindCore();
    private protected virtual void ApplyInitializationCore();
    private void UpdateState(TaskDialogProgressBarState previousState, bool isInitialization);
}
public enum System.Windows.Forms.TaskDialogProgressBarState : Enum {
    public int value__;
    public static TaskDialogProgressBarState Normal;
    public static TaskDialogProgressBarState Paused;
    public static TaskDialogProgressBarState Error;
    public static TaskDialogProgressBarState Marquee;
    public static TaskDialogProgressBarState MarqueePaused;
    public static TaskDialogProgressBarState None;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogRadioButton : TaskDialogControl {
    private string _text;
    private int _radioButtonID;
    private bool _enabled;
    private bool _checked;
    private TaskDialogRadioButtonCollection _collection;
    private bool _ignoreRadioButtonClickedNotification;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    public bool Enabled { get; public set; }
    public string Text { get; public set; }
    public bool Checked { get; public set; }
    internal int RadioButtonID { get; }
    internal TaskDialogRadioButtonCollection Collection { get; internal set; }
    public TaskDialogRadioButton(string text);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Checked();
    public void set_Checked(bool value);
    internal int get_RadioButtonID();
    internal TaskDialogRadioButtonCollection get_Collection();
    internal void set_Collection(TaskDialogRadioButtonCollection value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
internal TASKDIALOG_FLAGS Bind(TaskDialogPage page, int radioButtonID);
    internal void HandleRadioButtonClicked();
    private protected virtual void UnbindCore();
    private protected virtual void ApplyInitializationCore();
    private bool CanUpdate();
    [NullableContextAttribute("1")]
private void OnCheckedChanged(EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Windows.Forms.TaskDialogRadioButtonCollection : Collection`1<TaskDialogRadioButton> {
    private HashSet`1<TaskDialogRadioButton> _itemSet;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TaskDialogPage <BoundPage>k__BackingField;
    [NullableAttribute("2")]
internal TaskDialogPage BoundPage { get; internal set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal TaskDialogPage get_BoundPage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_BoundPage(TaskDialogPage value);
    public TaskDialogRadioButton Add(string text);
    protected virtual void SetItem(int index, TaskDialogRadioButton item);
    protected virtual void InsertItem(int index, TaskDialogRadioButton item);
    protected virtual void RemoveItem(int index);
    protected virtual void ClearItems();
    private void DenyIfHasOtherCollection(TaskDialogRadioButton item);
}
internal enum System.Windows.Forms.TaskDialogResult : Enum {
    public int value__;
    public static TaskDialogResult None;
    public static TaskDialogResult OK;
    public static TaskDialogResult Cancel;
    public static TaskDialogResult Abort;
    public static TaskDialogResult Retry;
    public static TaskDialogResult Ignore;
    public static TaskDialogResult Yes;
    public static TaskDialogResult No;
    public static TaskDialogResult Close;
    public static TaskDialogResult Help;
    public static TaskDialogResult TryAgain;
    public static TaskDialogResult Continue;
}
internal enum System.Windows.Forms.TaskDialogStandardIcon : Enum {
    public int value__;
    public static TaskDialogStandardIcon None;
    public static TaskDialogStandardIcon Information;
    public static TaskDialogStandardIcon Warning;
    public static TaskDialogStandardIcon Error;
    public static TaskDialogStandardIcon Shield;
    public static TaskDialogStandardIcon ShieldBlueBar;
    public static TaskDialogStandardIcon ShieldGrayBar;
    public static TaskDialogStandardIcon ShieldWarningYellowBar;
    public static TaskDialogStandardIcon ShieldErrorRedBar;
    public static TaskDialogStandardIcon ShieldSuccessGreenBar;
}
public enum System.Windows.Forms.TaskDialogStartupLocation : Enum {
    public int value__;
    public static TaskDialogStartupLocation CenterScreen;
    public static TaskDialogStartupLocation CenterOwner;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TaskDialogVerificationCheckBox : TaskDialogControl {
    private string _text;
    private bool _checked;
    [CompilerGeneratedAttribute]
private EventHandler CheckedChanged;
    public string Text { get; public set; }
    public bool Checked { get; public set; }
    internal bool IsCreatable { get; }
    public TaskDialogVerificationCheckBox(string text, bool isChecked);
    [CompilerGeneratedAttribute]
public void add_CheckedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CheckedChanged(EventHandler value);
    [NullableContextAttribute("1")]
public static TaskDialogVerificationCheckBox op_Implicit(string verificationText);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Checked();
    public void set_Checked(bool value);
    internal virtual bool get_IsCreatable();
    internal void Focus();
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal void HandleCheckBoxClicked(bool checked);
    private protected virtual TASKDIALOG_FLAGS BindCore();
    [NullableContextAttribute("1")]
private void OnCheckedChanged(EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.TextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTextBox")]
public class System.Windows.Forms.TextBox : TextBoxBase {
    private static object EVENT_TEXTALIGNCHANGED;
    private bool _acceptsReturn;
    private char _passwordChar;
    private bool _useSystemPasswordChar;
    private CharacterCasing _characterCasing;
    private ScrollBars _scrollBars;
    private HorizontalAlignment _textAlign;
    private bool _selectionSet;
    private AutoCompleteMode _autoCompleteMode;
    private AutoCompleteSource _autoCompleteSource;
    [NullableAttribute("2")]
private AutoCompleteStringCollection _autoCompleteCustomSource;
    private bool _fromHandleCreate;
    [NullableAttribute("2")]
private StringSource _stringSource;
    private string _placeholderText;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsReturnDescr")]
public bool AcceptsReturn { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteSourceDescr")]
[TypeConverterAttribute("System.Windows.Forms.TextBoxAutoCompleteSourceConverter")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxCharacterCasingDescr")]
public CharacterCasing CharacterCasing { get; public set; }
    public bool Multiline { get; public set; }
    private protected bool PasswordProtect { get; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute(" ")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
public char PasswordChar { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxScrollBarsDescr")]
public ScrollBars ScrollBars { get; public set; }
    internal bool SupportsUiaProviders { get; }
    public string Text { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxTextAlignDescr")]
public HorizontalAlignment TextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxUseSystemPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
public bool UseSystemPasswordChar { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TextBoxPlaceholderTextDescr")]
public string PlaceholderText { get; public set; }
    private static TextBox();
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public CharacterCasing get_CharacterCasing();
    public void set_CharacterCasing(CharacterCasing value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    private protected virtual bool get_PasswordProtect();
    protected virtual CreateParams get_CreateParams();
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    internal virtual bool get_SupportsUiaProviders();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    public bool get_UseSystemPasswordChar();
    public void set_UseSystemPasswordChar(bool value);
    [NullableContextAttribute("2")]
public void add_TextAlignChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextAlignChanged(EventHandler value);
    protected virtual void Dispose(bool disposing);
    protected virtual bool IsInputKey(Keys keyData);
    private void OnAutoCompleteCustomSourceChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    [NullableContextAttribute("2")]
public void Paste(string text);
    private protected virtual void SelectInternal(int start, int length, int textLen);
    private String[] GetStringsForAutoComplete();
    private void SetAutoComplete(bool reset);
    private void ResetAutoComplete(bool force);
    private void ResetAutoCompleteCustomSource();
    private void WmPrint(Message& m);
    public virtual string get_PlaceholderText();
    public virtual void set_PlaceholderText(string value);
    private void DrawPlaceholderText(HDC hdc);
    protected virtual void WndProc(Message& m);
    private bool ShouldRenderPlaceHolderText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.TextBoxAutoCompleteSourceConverter : EnumConverter {
    public TextBoxAutoCompleteSourceConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultEventAttribute("TextChanged")]
[DefaultBindingPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.TextBoxBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.TextBoxBase : Control {
    private static int autoSize;
    private static int hideSelection;
    private static int multiline;
    private static int modified;
    private static int readOnly;
    private static int acceptsTab;
    private static int wordWrap;
    private static int creatingHandle;
    private static int codeUpdateText;
    private static int shortcutsEnabled;
    private static int scrollToCaretOnHandleCreated;
    private static int setSelectionOnHandleCreated;
    [NullableAttribute("1")]
private static object EVENT_ACCEPTSTABCHANGED;
    [NullableAttribute("1")]
private static object EVENT_BORDERSTYLECHANGED;
    [NullableAttribute("1")]
private static object EVENT_HIDESELECTIONCHANGED;
    [NullableAttribute("1")]
private static object EVENT_MODIFIEDCHANGED;
    [NullableAttribute("1")]
private static object EVENT_MULTILINECHANGED;
    [NullableAttribute("1")]
private static object EVENT_READONLYCHANGED;
    private BorderStyle _borderStyle;
    private int _maxLength;
    private int _requestedHeight;
    private bool _integralHeightAdjust;
    private int _selectionStart;
    private int _selectionLength;
    private bool _doubleClickFired;
    private static Int32[] s_shortcutsToDisable;
    private BitVector32 _textBoxFlags;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsTabDescr")]
public bool AcceptsTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxShortcutsEnabledDescr")]
public bool ShortcutsEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxAutoSizeDescr")]
[RefreshPropertiesAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-501")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("TextBoxBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    internal bool CanRaiseTextChangedEvent { get; }
    protected bool CanEnableIme { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxCanUndoDescr")]
public bool CanUndo { get; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [NullableAttribute("1")]
protected Cursor DefaultCursor { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-513")]
[SRDescriptionAttribute("ControlForeColorDescr")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxHideSelectionDescr")]
public bool HideSelection { get; public set; }
    protected ImeMode ImeModeBase { get; protected set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[DesignerSerializationVisibilityAttribute("0")]
[MergablePropertyAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxLinesDescr")]
[EditorAttribute("System.Windows.Forms.Design.StringArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public String[] Lines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("32767")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxModifiedDescr")]
public bool Modified { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMultilineDescr")]
[RefreshPropertiesAttribute("1")]
public bool Multiline { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private protected bool PasswordProtect { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxPreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TextBoxReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [NullableAttribute("1")]
[LocalizableAttribute("True")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [NullableAttribute("1")]
internal string WindowText { get; internal set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxWordWrapDescr")]
public bool WordWrap { get; public set; }
    private static TextBoxBase();
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public void add_AcceptsTabChanged(EventHandler value);
    public void remove_AcceptsTabChanged(EventHandler value);
    public virtual bool get_ShortcutsEnabled();
    public virtual void set_ShortcutsEnabled(bool value);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public void add_BorderStyleChanged(EventHandler value);
    public void remove_BorderStyleChanged(EventHandler value);
    internal virtual bool get_CanRaiseTextChangedEvent();
    protected virtual bool get_CanEnableIme();
    public bool get_CanUndo();
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    [NullableContextAttribute("1")]
protected virtual Cursor get_DefaultCursor();
    protected virtual Size get_DefaultSize();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public void add_HideSelectionChanged(EventHandler value);
    public void remove_HideSelectionChanged(EventHandler value);
    protected virtual ImeMode get_ImeModeBase();
    protected virtual void set_ImeModeBase(ImeMode value);
    [NullableContextAttribute("1")]
public String[] get_Lines();
    [NullableContextAttribute("1")]
public void set_Lines(String[] value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public bool get_Modified();
    public void set_Modified(bool value);
    public void add_ModifiedChanged(EventHandler value);
    public void remove_ModifiedChanged(EventHandler value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    public void add_MultilineChanged(EventHandler value);
    public void remove_MultilineChanged(EventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    private protected virtual bool get_PasswordProtect();
    public int get_PreferredHeight();
    internal virtual Size GetPreferredSizeCore(Size proposedConstraints);
    internal void GetSelectionStartAndLength(Int32& start, Int32& length);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_SelectedText();
    [NullableContextAttribute("1")]
public virtual void set_SelectedText(string value);
    internal virtual void SetSelectedTextInternal(string text, bool clearUndo);
    public virtual int get_SelectionLength();
    public virtual void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public virtual int get_TextLength();
    [NullableContextAttribute("1")]
internal virtual string get_WindowText();
    [NullableContextAttribute("1")]
internal virtual void set_WindowText(string value);
    internal void ForceWindowText(string value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    private void AdjustHeight(bool returnIfAnchored);
    public void AppendText(string text);
    public void Clear();
    public void ClearUndo();
    protected bool ContainsNavigationKeyCode(Keys keyCode);
    public void Copy();
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateHandle();
    public void Cut();
    internal virtual int GetEndPosition();
    protected virtual bool IsInputKey(Keys keyData);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleDestroyed(EventArgs e);
    public void Paste();
    protected virtual bool ProcessDialogKey(Keys keyData);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnAcceptsTabChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBorderStyleChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHideSelectionChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnModifiedChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseUp(MouseEventArgs mevent);
    [NullableContextAttribute("1")]
protected virtual void OnMultilineChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaddingChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnReadOnlyChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnTextChanged(EventArgs e);
    private protected virtual void RaiseAccessibilityTextChangedEvent();
    public virtual char GetCharFromPosition(Point pt);
    public virtual int GetCharIndexFromPosition(Point pt);
    public virtual int GetLineFromCharIndex(int index);
    public virtual Point GetPositionFromCharIndex(int index);
    public int GetFirstCharIndexFromLine(int lineNumber);
    public int GetFirstCharIndexOfCurrentLine();
    public void ScrollToCaret();
    public void DeselectAll();
    public void Select(int start, int length);
    private protected virtual void SelectInternal(int start, int length, int textLen);
    public void SelectAll();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private static void Swap(Int32& n1, Int32& n2);
    internal void AdjustSelectionStartAndEnd(int selStart, int selLength, Int32& start, Int32& end, int textLen);
    internal void SetSelectionOnHandle();
    [NullableContextAttribute("1")]
private static void ToUnicodeOffsets(string str, Int32& start, Int32& end);
    [NullableContextAttribute("1")]
internal static void ToDbcsOffsets(string str, Int32& start, Int32& end);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public void Undo();
    internal virtual void UpdateMaxLength();
    internal virtual HBRUSH InitializeDCForWmCtlColor(HDC dc, MessageId msg);
    private void WmReflectCommand(Message& m);
    private void WmSetFont(Message& m);
    private void WmGetDlgCode(Message& m);
    private void WmTextBoxContextMenu(Message& m);
    protected virtual void WndProc(Message& m);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Windows.Forms.TextBoxRenderer : object {
    [ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    [NullableAttribute("1")]
private static VisualStyleElement s_textBoxElement;
    public static bool IsSupported { get; }
    private static TextBoxRenderer();
    public static bool get_IsSupported();
    [NullableContextAttribute("1")]
private static void DrawBackground(Graphics g, Rectangle bounds, TextBoxState state);
    [NullableContextAttribute("1")]
public static void DrawTextBox(Graphics g, Rectangle bounds, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, Rectangle textBounds, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, TextFormatFlags flags, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, Rectangle textBounds, TextFormatFlags flags, TextBoxState state);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(int state);
}
public enum System.Windows.Forms.TextDataFormat : Enum {
    public int value__;
    public static TextDataFormat Text;
    public static TextDataFormat UnicodeText;
    public static TextDataFormat Rtf;
    public static TextDataFormat Html;
    public static TextDataFormat CommaSeparatedValue;
}
[ExtensionAttribute]
internal static class System.Windows.Forms.TextExtensions : object {
    private static float ItalicPaddingFactor;
    internal static int GdiUnsupportedFlagMask;
    [ConditionalAttribute("DEBUG")]
private static void ValidateFlags(DRAW_TEXT_FORMAT flags);
    private static ValueTuple`2<DRAW_TEXT_FORMAT, TextPaddingOptions> SplitTextFormatFlags(TextFormatFlags flags);
    [ExtensionAttribute]
public static void DrawText(HDC hdc, ReadOnlySpan`1<char> text, Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> font, Rectangle bounds, Color foreColor, TextFormatFlags flags, Color backColor);
    [ExtensionAttribute]
public static DRAWTEXTPARAMS GetTextMargins(Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> font, TextPaddingOptions padding);
    [ExtensionAttribute]
public static Rectangle AdjustForVerticalAlignment(HDC hdc, ReadOnlySpan`1<char> text, Rectangle bounds, DRAW_TEXT_FORMAT flags, DRAWTEXTPARAMS* dtparams);
    [ExtensionAttribute]
public static Size MeasureText(HDC hdc, ReadOnlySpan`1<char> text, Scope<HFONT, Data, ValueTuple`2<Font, FONT_QUALITY>> font, Size proposedSize, TextFormatFlags flags);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Size GetTextExtent(HDC hdc, string text, HFONT hfont);
}
[FlagsAttribute]
public enum System.Windows.Forms.TextFormatFlags : Enum {
    public int value__;
    public static TextFormatFlags Bottom;
    public static TextFormatFlags EndEllipsis;
    public static TextFormatFlags ExpandTabs;
    public static TextFormatFlags ExternalLeading;
    public static TextFormatFlags Default;
    public static TextFormatFlags HidePrefix;
    public static TextFormatFlags HorizontalCenter;
    public static TextFormatFlags Internal;
    public static TextFormatFlags Left;
    [ObsoleteAttribute("ModifyString mutates strings and should be avoided. It will be blocked in a future release.")]
public static TextFormatFlags ModifyString;
    public static TextFormatFlags NoClipping;
    public static TextFormatFlags NoPrefix;
    public static TextFormatFlags NoFullWidthCharacterBreak;
    public static TextFormatFlags PathEllipsis;
    public static TextFormatFlags PrefixOnly;
    public static TextFormatFlags Right;
    public static TextFormatFlags RightToLeft;
    public static TextFormatFlags SingleLine;
    public static TextFormatFlags TextBoxControl;
    public static TextFormatFlags Top;
    public static TextFormatFlags VerticalCenter;
    public static TextFormatFlags WordBreak;
    public static TextFormatFlags WordEllipsis;
    public static TextFormatFlags PreserveGraphicsClipping;
    public static TextFormatFlags PreserveGraphicsTranslateTransform;
    public static TextFormatFlags GlyphOverhangPadding;
    public static TextFormatFlags NoPadding;
    public static TextFormatFlags LeftAndRightPadding;
}
public enum System.Windows.Forms.TextImageRelation : Enum {
    public int value__;
    public static TextImageRelation Overlay;
    public static TextImageRelation ImageBeforeText;
    public static TextImageRelation TextBeforeImage;
    public static TextImageRelation ImageAboveText;
    public static TextImageRelation TextAboveImage;
}
public static class System.Windows.Forms.TextRenderer : object {
    [CompilerGeneratedAttribute]
private static FONT_QUALITY <DefaultQuality>k__BackingField;
    [CompilerGeneratedAttribute]
private static Size <MaxSize>k__BackingField;
    internal static FONT_QUALITY DefaultQuality { get; }
    internal static Size MaxSize { get; }
    private static TextRenderer();
    [CompilerGeneratedAttribute]
internal static FONT_QUALITY get_DefaultQuality();
    [CompilerGeneratedAttribute]
internal static Size get_MaxSize();
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor);
    [NullableContextAttribute("1")]
public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Point pt, Color foreColor);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor);
    [NullableContextAttribute("1")]
public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Point pt, Color foreColor, Color backColor);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Point pt, Color foreColor, TextFormatFlags flags);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor);
    public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Rectangle bounds, Color foreColor);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor);
    public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Rectangle bounds, Color foreColor, Color backColor);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags);
    [NullableContextAttribute("2")]
public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);
    private static void DrawTextInternal(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags);
    internal static void DrawTextInternal(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);
    [NullableContextAttribute("2")]
internal static void DrawTextInternal(PaintEventArgs e, string text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags);
    [NullableContextAttribute("2")]
internal static void DrawTextInternal(PaintEventArgs e, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);
    [NullableContextAttribute("2")]
internal static void DrawTextInternal(HDC hdc, string text, Font font, Rectangle bounds, Color foreColor, FONT_QUALITY fontQuality, TextFormatFlags flags);
    private static void DrawTextInternal(HDC hdc, ReadOnlySpan`1<char> text, Font font, Rectangle bounds, Color foreColor, FONT_QUALITY fontQuality, Color backColor, TextFormatFlags flags);
    private static TextFormatFlags BlockModifyString(TextFormatFlags flags);
    [NullableContextAttribute("2")]
public static Size MeasureText(string text, Font font);
    public static Size MeasureText(ReadOnlySpan`1<char> text, Font font);
    [NullableContextAttribute("2")]
public static Size MeasureText(string text, Font font, Size proposedSize);
    public static Size MeasureText(ReadOnlySpan`1<char> text, Font font, Size proposedSize);
    [NullableContextAttribute("2")]
public static Size MeasureText(string text, Font font, Size proposedSize, TextFormatFlags flags);
    public static Size MeasureText(ReadOnlySpan`1<char> text, Font font, Size proposedSize, TextFormatFlags flags);
    [NullableContextAttribute("2")]
public static Size MeasureText(IDeviceContext dc, string text, Font font);
    public static Size MeasureText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font);
    [NullableContextAttribute("2")]
public static Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize);
    public static Size MeasureText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Size proposedSize);
    [NullableContextAttribute("2")]
public static Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize, TextFormatFlags flags);
    public static Size MeasureText(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Size proposedSize, TextFormatFlags flags);
    private static Size MeasureTextInternal(ReadOnlySpan`1<char> text, Font font, Size proposedSize, TextFormatFlags flags);
    private static Size MeasureTextInternal(IDeviceContext dc, ReadOnlySpan`1<char> text, Font font, Size proposedSize, TextFormatFlags flags);
    internal static Color DisabledTextColor(Color backColor);
    [NullableContextAttribute("2")]
internal static FONT_QUALITY FontQualityFromTextRenderingHint(IDeviceContext deviceContext);
    private static FONT_QUALITY GetDefaultFontQuality();
    [NullableContextAttribute("1")]
internal static ApplyGraphicsProperties GetApplyStateFlags(IDeviceContext deviceContext, TextFormatFlags textFormatFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ThreadExceptionDialog : Form {
    private static string DownBitmapName;
    private static string UpBitmapName;
    private static int MAXWIDTH;
    private static int MAXHEIGHT;
    private static int PADDINGWIDTH;
    private static int PADDINGHEIGHT;
    private static int MAXTEXTWIDTH;
    private static int MAXTEXTHEIGHT;
    private static int BUTTONTOPPADDING;
    private static int BUTTONDETAILS_LEFTPADDING;
    private static int MESSAGE_TOPPADDING;
    private static int HEIGHTPADDING;
    private static int BUTTONWIDTH;
    private static int BUTTONHEIGHT;
    private static int BUTTONALIGNMENTWIDTH;
    private static int BUTTONALIGNMENTPADDING;
    private static int DETAILSWIDTHPADDING;
    private static int DETAILSHEIGHT;
    private static int PICTUREWIDTH;
    private static int PICTUREHEIGHT;
    private static int EXCEPTIONMESSAGEVERTICALPADDING;
    private int _scaledMaxWidth;
    private int _scaledMaxHeight;
    private int _scaledPaddingWidth;
    private int _scaledPaddingHeight;
    private int _scaledMaxTextWidth;
    private int _scaledMaxTextHeight;
    private int _scaledButtonTopPadding;
    private int _scaledButtonDetailsLeftPadding;
    private int _scaledMessageTopPadding;
    private int _scaledButtonWidth;
    private int _scaledButtonHeight;
    private int _scaledButtonAlignmentWidth;
    private int _scaledButtonAlignmentPadding;
    private int _scaledDetailsWidthPadding;
    private int _scaledDetailsHeight;
    private int _scaledPictureWidth;
    private int _scaledPictureHeight;
    private int _scaledExceptionMessageVerticalPadding;
    private PictureBox _pictureBox;
    private Label _message;
    private Button _continueButton;
    private Button _quitButton;
    private Button _detailsButton;
    private Button _helpButton;
    private TextBox _details;
    [NullableAttribute("2")]
private Bitmap _expandImage;
    [NullableAttribute("2")]
private Bitmap _collapseImage;
    private bool _detailsVisible;
    private int _scaledHeightPadding;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    public ThreadExceptionDialog(Exception t);
    private void ThreadExceptionDialog_DpiChanged(object sender, DpiChangedEventArgs e);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    [NullableContextAttribute("2")]
public void add_AutoSizeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoSizeChanged(EventHandler value);
    private void DetailsClick(object sender, EventArgs eventargs);
    private static string Trim(string s);
}
public enum System.Windows.Forms.TickStyle : Enum {
    public int value__;
    public static TickStyle None;
    public static TickStyle TopLeft;
    public static TickStyle BottomRight;
    public static TickStyle Both;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Interval")]
[DefaultEventAttribute("Tick")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionTimer")]
public class System.Windows.Forms.Timer : Component {
    private int _interval;
    private bool _enabled;
    [NullableAttribute("2")]
private protected EventHandler _onTimer;
    private GCHandle _timerRoot;
    [NullableAttribute("2")]
private TimerNativeWindow _timerWindow;
    private object _syncObj;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TimerEnabledDescr")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("TimerIntervalDescr")]
public int Interval { get; public set; }
    public Timer(IContainer container);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Tag(object value);
    public void add_Tick(EventHandler value);
    public void remove_Tick(EventHandler value);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public int get_Interval();
    public void set_Interval(int value);
    protected virtual void OnTick(EventArgs e);
    public void Start();
    public void Stop();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ToolStripCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Items")]
[SRDescriptionAttribute("DescriptionToolStrip")]
[DefaultEventAttribute("ItemClicked")]
public class System.Windows.Forms.ToolStrip : ScrollableControl {
    private static Size s_onePixel;
    internal static Point s_invalidMouseEnter;
    [NullableAttribute("2")]
private ToolStripItemCollection _toolStripItemCollection;
    [NullableAttribute("2")]
private ToolStripOverflowButton _toolStripOverflowButton;
    [NullableAttribute("2")]
private ToolStripGrip _toolStripGrip;
    [NullableAttribute("2")]
private ToolStripItemCollection _displayedItems;
    [NullableAttribute("2")]
private ToolStripItemCollection _overflowItems;
    [NullableAttribute("2")]
private ToolStripDropTargetManager _dropTargetManager;
    private HWND _hwndThatLostFocus;
    [NullableAttribute("2")]
private ToolStripItem _lastMouseActiveItem;
    [NullableAttribute("2")]
private ToolStripItem _lastMouseDownedItem;
    private LayoutEngine _layoutEngine;
    private ToolStripLayoutStyle _layoutStyle;
    private Rectangle _lastInsertionMarkRect;
    [NullableAttribute("2")]
private ImageList _imageList;
    private ToolStripGripStyle _toolStripGripStyle;
    private int _toolStripState;
    private bool _showItemToolTips;
    [NullableAttribute("2")]
private MouseHoverTimer _mouseHoverTimer;
    [NullableAttribute("2")]
private ToolStripItem _currentlyActiveTooltipItem;
    [NullableAttribute("2")]
private NativeWindow _dropDownOwnerWindow;
    private byte _mouseDownID;
    [NullableAttribute("2")]
private ToolStripRenderer _renderer;
    private Type _currentRendererType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Keys, ToolStripMenuItem> _shortcuts;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<MergeHistory> _mergeHistoryStack;
    private ToolStripDropDownDirection _toolStripDropDownDirection;
    private Size _largestDisplayedItemSize;
    [NullableAttribute("2")]
private CachedItemHdcInfo _cachedItemHdcInfo;
    private bool _alreadyHooked;
    private Size _imageScalingSize;
    private static int IconDimension;
    private static int s_iconWidth;
    private static int s_iconHeight;
    [NullableAttribute("2")]
private Font _defaultFont;
    [NullableAttribute("2")]
private RestoreFocusMessageFilter _restoreFocusFilter;
    private static Padding s_defaultPadding;
    private static Padding s_defaultGripMargin;
    private Padding _scaledDefaultPadding;
    private Padding _scaledDefaultGripMargin;
    private Point _mouseEnterWhenShown;
    private static int InsertionBeamWidth;
    internal static int s_insertionBeamWidth;
    private static object s_eventPaintGrip;
    private static object s_eventLayoutCompleted;
    private static object s_eventItemAdded;
    private static object s_eventItemRemoved;
    private static object s_eventLayoutStyleChanged;
    private static object s_eventRendererChanged;
    private static object s_eventItemClicked;
    private static object s_eventLocationChanging;
    private static object s_eventBeginDrag;
    private static object s_eventEndDrag;
    private static int s_propBindingContext;
    private static int s_propTextDirection;
    private static int s_propToolTip;
    private static int s_propToolStripPanelCell;
    internal static int STATE_CANOVERFLOW;
    internal static int STATE_ALLOWITEMREORDER;
    internal static int STATE_DISPOSINGITEMS;
    internal static int STATE_MENUAUTOEXPAND;
    internal static int STATE_MENUAUTOEXPANDDEFAULT;
    internal static int STATE_SCROLLBUTTONS;
    internal static int STATE_USEDEFAULTRENDERER;
    internal static int STATE_ALLOWMERGE;
    internal static int STATE_RAFTING;
    internal static int STATE_STRETCH;
    internal static int STATE_LOCATIONCHANGING;
    internal static int STATE_DRAGGING;
    internal static int STATE_HASVISIBLEITEMS;
    internal static int STATE_SUSPENDCAPTURE;
    internal static int STATE_LASTMOUSEDOWNEDITEMCAPTURE;
    internal static int STATE_MENUACTIVE;
    [NullableAttribute("2")]
internal static TraceSwitch s_selectionDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_dropTargetDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_layoutDebugSwitch;
    [NullableAttribute("2")]
internal static TraceSwitch s_mouseActivateDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_mergeDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_snapFocusDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_flickerDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_itemReorderDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_mdiMergeDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_menuAutoExpandDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_controlTabDebug;
    [NullableAttribute("2")]
internal Action`2<int, int> _rescaleConstsCallbackDelegate;
    [CompilerGeneratedAttribute]
private List`1<ToolStripDropDown> <ActiveDropDowns>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDropTarget <ItemReorderDropTarget>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISupportOleDropSource <ItemReorderDropSource>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LayoutSettings <LayoutSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LayoutRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    internal List`1<ToolStripDropDown> ActiveDropDowns { get; }
    internal bool KeyboardActive { get; internal set; }
    internal bool AllItemsVisible { get; internal set; }
    [DefaultValueAttribute("True")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Point AutoScrollPosition { get; public set; }
    public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripAllowItemReorderDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AllowItemReorder { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripAllowMergeDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AllowMerge { get; public set; }
    public AnchorStyles Anchor { get; public set; }
    [SRDescriptionAttribute("ToolStripBackColorDescr")]
[SRCategoryAttribute("CatAppearance")]
public Color BackColor { get; public set; }
    [NullableAttribute("2")]
public BindingContext BindingContext { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripCanOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
public bool CanOverflow { get; public set; }
    internal bool CanHotTrack { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool CausesValidation { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    public Font Font { get; public set; }
    protected Size DefaultSize { get; }
    protected Padding DefaultPadding { get; }
    protected Padding DefaultMargin { get; }
    protected DockStyle DefaultDock { get; }
    protected Padding DefaultGripMargin { get; }
    protected bool DefaultShowItemToolTips { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ToolStripDefaultDropDownDirectionDescr")]
[SRCategoryAttribute("CatBehavior")]
public ToolStripDropDownDirection DefaultDropDownDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    internal NativeWindow DropDownOwnerWindow { get; }
    internal ToolStripDropTargetManager DropTargetManager { get; internal set; }
    protected internal ToolStripItemCollection DisplayedItems { get; }
    public Rectangle DisplayRectangle { get; }
    [BrowsableAttribute("False")]
public Color ForeColor { get; public set; }
    private bool HasKeyboardInput { get; }
    internal ToolStripGrip Grip { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripGripStyleDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripGripStyle GripStyle { get; public set; }
    [BrowsableAttribute("False")]
public ToolStripGripDisplayStyle GripDisplayStyle { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripGripDisplayStyleDescr")]
public Padding GripMargin { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle GripRectangle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasChildren { get; }
    internal bool HasVisibleItems { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public HScrollProperties HorizontalScroll { get; }
    [DefaultValueAttribute("System.Drawing.Size", "16,16")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripImageScalingSizeDescr")]
public Size ImageScalingSize { get; public set; }
    internal Size ImageScalingSizeInternal { get; internal set; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripImageListDescr")]
[BrowsableAttribute("False")]
public ImageList ImageList { get; public set; }
    internal bool IsMnemonicsListenerAxSourced { get; }
    [MemberNotNullWhenAttribute("True", "ToolStripPanelRow")]
internal bool IsInToolStripPanel { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsCurrentlyDragging { get; }
    private bool IsLocationChanging { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ToolStripItemsDescr")]
[MergablePropertyAttribute("False")]
public ToolStripItemCollection Items { get; }
    private CachedItemHdcInfo ItemHdcInfo { get; }
    [BrowsableAttribute("False")]
public bool IsDropDown { get; }
    internal bool IsDisposingItems { get; }
    [NullableAttribute("2")]
internal IDropTarget ItemReorderDropTarget { get; internal set; }
    [NullableAttribute("2")]
internal ISupportOleDropSource ItemReorderDropSource { get; internal set; }
    internal bool IsInDesignMode { get; }
    internal bool IsSelectionSuspended { get; }
    [NullableAttribute("2")]
internal ToolStripItem LastMouseDownedItem { get; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public LayoutSettings LayoutSettings { get; public set; }
    [SRDescriptionAttribute("ToolStripLayoutStyle")]
[SRCategoryAttribute("CatLayout")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripLayoutStyle LayoutStyle { get; public set; }
    internal bool LayoutRequired { get; internal set; }
    public LayoutEngine LayoutEngine { get; }
    protected internal Size MaxItemSize { get; }
    internal bool MenuAutoExpand { get; internal set; }
    internal Stack`1<MergeHistory> MergeHistoryStack { get; }
    private MouseHoverTimer MouseHoverTimer { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public ToolStripOverflowButton OverflowButton { get; }
    internal ToolStripItemCollection OverflowItems { get; }
    [BrowsableAttribute("False")]
public Orientation Orientation { get; private set; }
    internal RestoreFocusMessageFilter RestoreFocusFilter { get; }
    [NullableAttribute("2")]
internal ToolStripPanelCell ToolStripPanelCell { get; }
    [NullableAttribute("2")]
internal ToolStripPanelRow ToolStripPanelRow { get; }
    [NullableAttribute("2")]
private ToolStripPanelCell System.Windows.Forms.ISupportToolStripPanel.ToolStripPanelCell { get; }
    [NullableAttribute("2")]
private ToolStripPanelRow System.Windows.Forms.ISupportToolStripPanel.ToolStripPanelRow { get; private set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripStretchDescr")]
public bool Stretch { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer Renderer { get; public set; }
    [SRDescriptionAttribute("ToolStripRenderModeDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripRenderMode RenderMode { get; public set; }
    internal bool ShowKeyboardCuesInternal { get; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripShowItemToolTipsDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool ShowItemToolTips { get; public set; }
    internal Dictionary`2<Keys, ToolStripMenuItem> Shortcuts { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    internal ToolTip ToolTip { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripTextDirectionDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripTextDirection TextDirection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public VScrollProperties VerticalScroll { get; }
    private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    private bool System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout { get; }
    public ToolStrip(ToolStripItem[] items);
    private static ToolStrip();
    [CompilerGeneratedAttribute]
internal List`1<ToolStripDropDown> get_ActiveDropDowns();
    internal virtual bool get_KeyboardActive();
    internal virtual void set_KeyboardActive(bool value);
    internal virtual bool get_AllItemsVisible();
    internal virtual void set_AllItemsVisible(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    [NullableContextAttribute("2")]
public void add_AutoSizeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoSizeChanged(EventHandler value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public Point get_AutoScrollPosition();
    public void set_AutoScrollPosition(Point value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public bool get_AllowItemReorder();
    public void set_AllowItemReorder(bool value);
    public bool get_AllowMerge();
    public void set_AllowMerge(bool value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public void add_BeginDrag(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BeginDrag(EventHandler value);
    [NullableContextAttribute("2")]
public virtual BindingContext get_BindingContext();
    [NullableContextAttribute("2")]
public virtual void set_BindingContext(BindingContext value);
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    internal bool get_CanHotTrack();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    [NullableContextAttribute("2")]
public void add_CausesValidationChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CausesValidationChanged(EventHandler value);
    public ControlCollection get_Controls();
    [NullableContextAttribute("2")]
public void add_ControlAdded(ControlEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ControlAdded(ControlEventHandler value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    [NullableContextAttribute("2")]
public void add_CursorChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CursorChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_ControlRemoved(ControlEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ControlRemoved(ControlEventHandler value);
    [NullableContextAttribute("2")]
public void add_EndDrag(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_EndDrag(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultPadding();
    protected virtual Padding get_DefaultMargin();
    protected virtual DockStyle get_DefaultDock();
    protected virtual Padding get_DefaultGripMargin();
    protected virtual bool get_DefaultShowItemToolTips();
    public virtual ToolStripDropDownDirection get_DefaultDropDownDirection();
    public virtual void set_DefaultDropDownDirection(ToolStripDropDownDirection value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    internal virtual NativeWindow get_DropDownOwnerWindow();
    internal ToolStripDropTargetManager get_DropTargetManager();
    internal void set_DropTargetManager(ToolStripDropTargetManager value);
    protected internal virtual ToolStripItemCollection get_DisplayedItems();
    public virtual Rectangle get_DisplayRectangle();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    [NullableContextAttribute("2")]
public void add_ForeColorChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ForeColorChanged(EventHandler value);
    private bool get_HasKeyboardInput();
    internal ToolStripGrip get_Grip();
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public ToolStripGripDisplayStyle get_GripDisplayStyle();
    public Padding get_GripMargin();
    public void set_GripMargin(Padding value);
    public Rectangle get_GripRectangle();
    public bool get_HasChildren();
    internal bool get_HasVisibleItems();
    internal void set_HasVisibleItems(bool value);
    public HScrollProperties get_HorizontalScroll();
    public Size get_ImageScalingSize();
    public void set_ImageScalingSize(Size value);
    internal virtual Size get_ImageScalingSizeInternal();
    internal virtual void set_ImageScalingSizeInternal(Size value);
    [NullableContextAttribute("2")]
public ImageList get_ImageList();
    [NullableContextAttribute("2")]
public void set_ImageList(ImageList value);
    internal virtual bool get_IsMnemonicsListenerAxSourced();
    [MemberNotNullWhenAttribute("True", "ToolStripPanelRow")]
internal bool get_IsInToolStripPanel();
    public sealed virtual bool get_IsCurrentlyDragging();
    private bool get_IsLocationChanging();
    public virtual ToolStripItemCollection get_Items();
    [NullableContextAttribute("2")]
public void add_ItemAdded(ToolStripItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ItemAdded(ToolStripItemEventHandler value);
    [NullableContextAttribute("2")]
public void add_ItemClicked(ToolStripItemClickedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ItemClicked(ToolStripItemClickedEventHandler value);
    private CachedItemHdcInfo get_ItemHdcInfo();
    [NullableContextAttribute("2")]
public void add_ItemRemoved(ToolStripItemEventHandler value);
    [NullableContextAttribute("2")]
public void remove_ItemRemoved(ToolStripItemEventHandler value);
    public bool get_IsDropDown();
    internal bool get_IsDisposingItems();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IDropTarget get_ItemReorderDropTarget();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ItemReorderDropTarget(IDropTarget value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ISupportOleDropSource get_ItemReorderDropSource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ItemReorderDropSource(ISupportOleDropSource value);
    internal bool get_IsInDesignMode();
    internal bool get_IsSelectionSuspended();
    [NullableContextAttribute("2")]
internal ToolStripItem get_LastMouseDownedItem();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LayoutSettings get_LayoutSettings();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LayoutSettings(LayoutSettings value);
    public ToolStripLayoutStyle get_LayoutStyle();
    public void set_LayoutStyle(ToolStripLayoutStyle value);
    [NullableContextAttribute("2")]
public void add_LayoutCompleted(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_LayoutCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal bool get_LayoutRequired();
    [CompilerGeneratedAttribute]
internal void set_LayoutRequired(bool value);
    [NullableContextAttribute("2")]
public void add_LayoutStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_LayoutStyleChanged(EventHandler value);
    public virtual LayoutEngine get_LayoutEngine();
    internal void add_LocationChanging(ToolStripLocationCancelEventHandler value);
    internal void remove_LocationChanging(ToolStripLocationCancelEventHandler value);
    protected internal virtual Size get_MaxItemSize();
    internal bool get_MenuAutoExpand();
    internal void set_MenuAutoExpand(bool value);
    internal Stack`1<MergeHistory> get_MergeHistoryStack();
    private MouseHoverTimer get_MouseHoverTimer();
    public ToolStripOverflowButton get_OverflowButton();
    internal ToolStripItemCollection get_OverflowItems();
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
private void set_Orientation(Orientation value);
    [NullableContextAttribute("2")]
public void add_PaintGrip(PaintEventHandler value);
    [NullableContextAttribute("2")]
public void remove_PaintGrip(PaintEventHandler value);
    internal RestoreFocusMessageFilter get_RestoreFocusFilter();
    [NullableContextAttribute("2")]
internal ToolStripPanelCell get_ToolStripPanelCell();
    [NullableContextAttribute("2")]
internal ToolStripPanelRow get_ToolStripPanelRow();
    [NullableContextAttribute("2")]
private sealed virtual override ToolStripPanelCell System.Windows.Forms.ISupportToolStripPanel.get_ToolStripPanelCell();
    [NullableContextAttribute("2")]
private sealed virtual override ToolStripPanelRow System.Windows.Forms.ISupportToolStripPanel.get_ToolStripPanelRow();
    [NullableContextAttribute("2")]
private sealed virtual override void System.Windows.Forms.ISupportToolStripPanel.set_ToolStripPanelRow(ToolStripPanelRow value);
    public sealed virtual bool get_Stretch();
    public sealed virtual void set_Stretch(bool value);
    internal virtual bool get_SupportsUiaProviders();
    public ToolStripRenderer get_Renderer();
    public void set_Renderer(ToolStripRenderer value);
    [NullableContextAttribute("2")]
public void add_RendererChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_RendererChanged(EventHandler value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    internal bool get_ShowKeyboardCuesInternal();
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    internal Dictionary`2<Keys, ToolStripMenuItem> get_Shortcuts();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    internal ToolTip get_ToolTip();
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public VScrollProperties get_VerticalScroll();
    private sealed virtual override void System.Windows.Forms.ISupportToolStripPanel.BeginDrag();
    [NullableContextAttribute("2")]
internal virtual void ChangeSelection(ToolStripItem nextItem);
    [NullableContextAttribute("2")]
protected virtual LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle layoutStyle);
    [NullableContextAttribute("2")]
protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    private void ClearAllSelections();
    [NullableContextAttribute("2")]
private void ClearAllSelectionsExcept(ToolStripItem item);
    internal void ClearInsertionMark();
    private void ClearLastMouseDownedItem();
    protected virtual void Dispose(bool disposing);
    internal void DoLayoutIfHandleCreated(ToolStripItemEventArgs e);
    private bool DeferOverflowDropDownLayout();
    private sealed virtual override void System.Windows.Forms.ISupportToolStripPanel.EndDrag();
    [NullableContextAttribute("2")]
internal ToolStripOverflow GetOverflow();
    internal byte GetMouseId();
    [NullableContextAttribute("2")]
internal virtual ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction, bool rtlAware);
    [NullableContextAttribute("2")]
public virtual ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction);
    [NullableContextAttribute("2")]
private ToolStripItem GetNextItemHorizontal(ToolStripItem start, bool forward);
    [NullableContextAttribute("2")]
private ToolStripItem GetNextItemVertical(ToolStripItem selectedItem, bool down);
    internal virtual Size GetPreferredSizeCore(Size proposedSize);
    internal static Size GetPreferredSizeHorizontal(IArrangedElement container, Size proposedConstraints);
    internal static Size GetPreferredSizeVertical(IArrangedElement container);
    private static Size GetPreferredItemSize(ToolStripItem item);
    [NullableContextAttribute("2")]
internal ToolStripItem GetSelectedItem();
    internal bool GetToolStripState(int flag);
    [NullableContextAttribute("2")]
internal virtual ToolStrip GetToplevelOwnerToolStrip();
    internal virtual Control GetOwnerControl();
    private void HandleMouseLeave();
    internal void HandleItemClick(ToolStripItem dismissingItem);
    internal virtual void HandleItemClicked(ToolStripItem dismissingItem);
    private void HookStaticEvents(bool hook);
    private void InitializeRenderer(ToolStripRenderer renderer);
    private void InvalidateLayout();
    internal void InvalidateTextItems();
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual bool IsInputChar(char charCode);
    private static bool IsPseudoMnemonic(char charCode, string text);
    internal void InvokePaintItem(ToolStripItem item);
    private void ImageListRecreateHandle(object sender, EventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    internal bool ProcessCmdKeyInternal(Message& m, Keys keyData);
    private protected virtual void PrintToMetaFileRecursive(HDC hDC, IntPtr lParam, Rectangle bounds);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected virtual bool ProcessDialogKey(Keys keyData);
    internal virtual void ProcessDuplicateMnemonic(ToolStripItem item, char charCode);
    protected internal virtual bool ProcessMnemonic(char charCode);
    private bool ProcessMnemonicInternal(char charCode);
    private bool ProcessTabKey(bool forward);
    internal virtual bool ProcessArrowKey(Keys keyCode);
    private bool ProcessLeftRightArrowKey(bool right);
    [NullableContextAttribute("2")]
internal void NotifySelectionChange(ToolStripItem item);
    private void OnDefaultRendererChanged(object sender, EventArgs e);
    protected virtual void OnBeginDrag(EventArgs e);
    protected virtual void OnEndDrag(EventArgs e);
    protected virtual void OnDockChanged(EventArgs e);
    protected virtual void OnRendererChanged(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    internal void OnDefaultFontChanged();
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected internal virtual void OnItemAdded(ToolStripItemEventArgs e);
    protected virtual void OnItemClicked(ToolStripItemClickedEventArgs e);
    protected internal virtual void OnItemRemoved(ToolStripItemEventArgs e);
    internal void OnItemVisibleChanged(ToolStripItemEventArgs e, bool performLayout);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnLayoutCompleted(EventArgs e);
    protected virtual void OnLayoutStyleChanged(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    internal virtual void OnLocationChanging(ToolStripLocationCancelEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs mea);
    protected virtual void OnMouseMove(MouseEventArgs mea);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseCaptureChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mea);
    protected virtual void OnPaint(PaintEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    private void EraseCorners(PaintEventArgs e, Region transparentRegion);
    protected internal virtual void OnPaintGrip(PaintEventArgs e);
    protected virtual void OnScroll(ScrollEventArgs se);
    private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    protected virtual void OnTabStopChanged(EventArgs e);
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    internal virtual void ResetScaling(int newDpi);
    internal void PaintInsertionMark(Graphics g);
    internal void PaintInsertionMark(Rectangle insertionRect);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public Control GetChildAtPoint(Point point);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue);
    [NullableContextAttribute("2")]
internal virtual Control GetFirstChildControlInTabOrder(bool forward);
    [NullableContextAttribute("2")]
public ToolStripItem GetItemAt(int x, int y);
    [NullableContextAttribute("2")]
public ToolStripItem GetItemAt(Point point);
    internal virtual void ReleaseUiaProvider(HWND handle);
    internal virtual void ReleaseToolStripItemsProviders(ToolStripItemCollection items);
    private void RestoreFocusInternal(bool wasInMenuMode);
    internal void RestoreFocusInternal();
    [EditorBrowsableAttribute("2")]
protected virtual void RestoreFocus();
    internal virtual void ResetRenderMode();
    [EditorBrowsableAttribute("1")]
public void ResetMinimumSize();
    private void ResetGripMargin();
    internal void ResumeCaptureMode();
    internal void SuspendCaptureMode();
    internal virtual void ScrollInternal(int delta);
    protected internal void SetItemLocation(ToolStripItem item, Point location);
    protected static void SetItemParent(ToolStripItem item, ToolStrip parent);
    protected virtual void SetVisibleCore(bool visible);
    internal bool ShouldSelectItem();
    protected virtual void Select(bool directed, bool forward);
    [NullableContextAttribute("2")]
internal ToolStripItem SelectNextToolStripItem(ToolStripItem start, bool forward);
    internal void SetFocusUnsafe();
    private void SetupGrip();
    [EditorBrowsableAttribute("1")]
public void SetAutoScrollMargin(int x, int y);
    internal void SetLargestItemSize(Size size);
    protected virtual void SetDisplayedItems();
    internal void SetToolStripState(int flag, bool value);
    internal void SnapMouseLocation();
    private void SnapFocus(HWND otherHwnd);
    internal void SnapFocusChange(ToolStrip otherToolStrip);
    private bool ShouldSerializeDefaultDropDownDirection();
    internal virtual bool ShouldSerializeLayoutStyle();
    internal virtual bool ShouldSerializeMinimumSize();
    private bool ShouldSerializeGripMargin();
    internal virtual bool ShouldSerializeRenderMode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
internal void UpdateToolTip(ToolStripItem item, bool refresh);
    private void UpdateLayoutStyle(DockStyle newDock);
    private void UpdateLayoutStyle(Orientation newRaftingRowOrientation);
    private void UpdateOrientation(Orientation newOrientation);
    protected virtual void WndProc(Message& m);
    private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.SetBounds(Rectangle bounds, BoundsSpecified specified);
    private sealed virtual override bool System.Windows.Forms.Layout.IArrangedElement.get_ParticipatesInLayout();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ControlCollection CreateControlsInstance();
    internal void OnItemAddedInternal(ToolStripItem item);
    internal void OnItemRemovedInternal(ToolStripItem item);
    internal virtual bool AllowsChildrenToShowToolTips();
    internal virtual bool ShowsOwnKeyboardToolTip();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripArrowRenderEventArgs : EventArgs {
    private Color _arrowColor;
    private bool _arrowColorChanged;
    [CompilerGeneratedAttribute]
private Rectangle <ArrowRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <DefaultArrowColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrowDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ToolStripItem <Item>k__BackingField;
    public Rectangle ArrowRectangle { get; public set; }
    public Color ArrowColor { get; public set; }
    internal Color DefaultArrowColor { get; internal set; }
    public ArrowDirection Direction { get; public set; }
    public Graphics Graphics { get; }
    [NullableAttribute("2")]
public ToolStripItem Item { get; }
    public ToolStripArrowRenderEventArgs(Graphics g, ToolStripItem toolStripItem, Rectangle arrowRectangle, Color arrowColor, ArrowDirection arrowDirection);
    [CompilerGeneratedAttribute]
public Rectangle get_ArrowRectangle();
    [CompilerGeneratedAttribute]
public void set_ArrowRectangle(Rectangle value);
    public Color get_ArrowColor();
    public void set_ArrowColor(Color value);
    [CompilerGeneratedAttribute]
internal Color get_DefaultArrowColor();
    [CompilerGeneratedAttribute]
internal void set_DefaultArrowColor(Color value);
    [CompilerGeneratedAttribute]
public ArrowDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(ArrowDirection value);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ToolStripItem get_Item();
}
public class System.Windows.Forms.ToolStripArrowRenderEventHandler : MulticastDelegate {
    public ToolStripArrowRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripArrowRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripArrowRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("1")]
public class System.Windows.Forms.ToolStripButton : ToolStripItem {
    private CheckState _checkState;
    private CheckState _prevCheckState;
    private static int StandardButtonWidth;
    private int _standardButtonWidth;
    [NullableAttribute("1")]
private static object s_checkedChangedEvent;
    [NullableAttribute("1")]
private static object s_checkStateChangedEvent;
    [CompilerGeneratedAttribute]
private bool <CheckOnClick>k__BackingField;
    [DefaultValueAttribute("True")]
public bool AutoToolTip { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripButtonCheckOnClickDescr")]
public bool CheckOnClick { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripButtonCheckedDescr")]
public bool Checked { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("CheckBoxCheckStateDescr")]
public CheckState CheckState { get; public set; }
    protected bool DefaultAutoToolTip { get; }
    internal int DeviceDpi { get; internal set; }
    public ToolStripButton(string text);
    public ToolStripButton(Image image);
    public ToolStripButton(string text, Image image);
    public ToolStripButton(string text, Image image, EventHandler onClick);
    public ToolStripButton(string text, Image image, EventHandler onClick, string name);
    private static ToolStripButton();
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckOnClick();
    [CompilerGeneratedAttribute]
public void set_CheckOnClick(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    public void add_CheckedChanged(EventHandler value);
    public void remove_CheckedChanged(EventHandler value);
    public void add_CheckStateChanged(EventHandler value);
    public void remove_CheckStateChanged(EventHandler value);
    protected virtual bool get_DefaultAutoToolTip();
    internal virtual int get_DeviceDpi();
    internal virtual void set_DeviceDpi(int value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    private void Initialize();
    [NullableContextAttribute("1")]
protected virtual void OnCheckedChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnCheckStateChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnClick(EventArgs e);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("7")]
[DefaultPropertyAttribute("Items")]
public class System.Windows.Forms.ToolStripComboBox : ToolStripControlHost {
    internal static object s_eventDropDown;
    internal static object s_eventDropDownClosed;
    internal static object s_eventDropDownStyleChanged;
    internal static object s_eventSelectedIndexChanged;
    internal static object s_eventSelectionChangeCommitted;
    internal static object s_eventTextUpdate;
    private static Padding s_dropDownPadding;
    private static Padding s_padding;
    private Padding _scaledDropDownPadding;
    private Padding _scaledPadding;
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteSourceDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ComboBox ComboBox { get; }
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownHeightDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("106")]
public int DropDownHeight { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxStyleDescr")]
[RefreshPropertiesAttribute("2")]
public ComboBoxStyle DropDownStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownWidthDescr")]
public int DropDownWidth { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxDroppedDownDescr")]
public bool DroppedDown { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxIntegralHeightDescr")]
public bool IntegralHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public ObjectCollection Items { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("8")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxDropDownItemsDescr")]
public int MaxDropDownItems { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ComboBoxSortedDescr")]
public bool Sorted { get; public set; }
    [NullableContextAttribute("2")]
public ToolStripComboBox(string name);
    [EditorBrowsableAttribute("1")]
public ToolStripComboBox(Control c);
    private static ToolStripComboBox();
    private static Control CreateControlInstance();
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public ComboBox get_ComboBox();
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    [NullableContextAttribute("2")]
public void add_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDown(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDown(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDownClosed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownClosed(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDownStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownStyleChanged(EventHandler value);
    public int get_DropDownHeight();
    public void set_DropDownHeight(int value);
    public ComboBoxStyle get_DropDownStyle();
    public void set_DropDownStyle(ComboBoxStyle value);
    public int get_DropDownWidth();
    public void set_DropDownWidth(int value);
    public bool get_DroppedDown();
    public void set_DroppedDown(bool value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public ObjectCollection get_Items();
    public int get_MaxDropDownItems();
    public void set_MaxDropDownItems(int value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    [NullableContextAttribute("2")]
public void add_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_SelectedIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public object get_SelectedItem();
    [NullableContextAttribute("2")]
public void set_SelectedItem(object value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    [NullableContextAttribute("2")]
public void add_TextUpdate(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextUpdate(EventHandler value);
    public void BeginUpdate();
    public void EndUpdate();
    [NullableContextAttribute("2")]
public int FindString(string s);
    [NullableContextAttribute("2")]
public int FindString(string s, int startIndex);
    [NullableContextAttribute("2")]
public int FindStringExact(string s);
    [NullableContextAttribute("2")]
public int FindStringExact(string s, int startIndex);
    public int GetItemHeight(int index);
    public void Select(int start, int length);
    public void SelectAll();
    public virtual Size GetPreferredSize(Size constrainingSize);
    private void HandleDropDown(object sender, EventArgs e);
    private void HandleDropDownClosed(object sender, EventArgs e);
    private void HandleDropDownStyleChanged(object sender, EventArgs e);
    private void HandleSelectedIndexChanged(object sender, EventArgs e);
    private void HandleSelectionChangeCommitted(object sender, EventArgs e);
    private void HandleTextUpdate(object sender, EventArgs e);
    protected virtual void OnDropDown(EventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    protected virtual void OnDropDownStyleChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectionChangeCommitted(EventArgs e);
    protected virtual void OnTextUpdate(EventArgs e);
    [NullableContextAttribute("2")]
protected virtual void OnSubscribeControlEvents(Control control);
    [NullableContextAttribute("2")]
protected virtual void OnUnsubscribeControlEvents(Control control);
    private bool ShouldSerializeDropDownWidth();
    internal virtual bool ShouldSerializeFont();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripContainerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("ToolStripContainerDesc")]
public class System.Windows.Forms.ToolStripContainer : ContainerControl {
    [NullableAttribute("1")]
private ToolStripPanel _topPanel;
    [NullableAttribute("1")]
private ToolStripPanel _bottomPanel;
    [NullableAttribute("1")]
private ToolStripPanel _leftPanel;
    [NullableAttribute("1")]
private ToolStripPanel _rightPanel;
    [NullableAttribute("1")]
private ToolStripContentPanel _contentPanel;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerBottomToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel BottomToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerBottomToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool BottomToolStripPanelVisible { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerContentPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripContentPanel ContentPanel { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ForeColor { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerLeftToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel LeftToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerLeftToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool LeftToolStripPanelVisible { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerRightToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel RightToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerRightToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool RightToolStripPanelVisible { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerTopToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel TopToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerTopToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool TopToolStripPanelVisible { get; public set; }
    [NullableAttribute("1")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public Image get_BackgroundImage();
    public void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("1")]
public ToolStripPanel get_BottomToolStripPanel();
    public bool get_BottomToolStripPanelVisible();
    public void set_BottomToolStripPanelVisible(bool value);
    [NullableContextAttribute("1")]
public ToolStripContentPanel get_ContentPanel();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Cursor get_Cursor();
    [NullableContextAttribute("1")]
public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    [NullableContextAttribute("1")]
public ToolStripPanel get_LeftToolStripPanel();
    public bool get_LeftToolStripPanelVisible();
    public void set_LeftToolStripPanelVisible(bool value);
    [NullableContextAttribute("1")]
public ToolStripPanel get_RightToolStripPanel();
    public bool get_RightToolStripPanelVisible();
    public void set_RightToolStripPanelVisible(bool value);
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public ToolStripPanel get_TopToolStripPanel();
    public bool get_TopToolStripPanelVisible();
    public void set_TopToolStripPanelVisible(bool value);
    [NullableContextAttribute("1")]
public ControlCollection get_Controls();
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    [NullableContextAttribute("1")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSizeChanged(EventArgs e);
    internal virtual void RecreateHandleCore();
    internal virtual bool AllowsKeyboardToolTip();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripContentPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("Load")]
[DockingAttribute("0")]
[InitializationEventAttribute("Load")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.ToolStripContentPanel : Panel {
    private ToolStripRendererSwitcher _rendererSwitcher;
    private BitVector32 _state;
    private static int s_stateLastDoubleBuffer;
    [NullableAttribute("1")]
private static object EventRendererChanged;
    [NullableAttribute("1")]
private static object EventLoad;
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[LocalizableAttribute("False")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DockStyle Dock { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Point Location { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size MinimumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size MaximumSize { get; public set; }
    [NullableAttribute("1")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int TabIndex { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [NullableAttribute("1")]
private ToolStripRendererSwitcher RendererSwitcher { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer Renderer { get; public set; }
    [SRDescriptionAttribute("ToolStripRenderModeDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripRenderMode RenderMode { get; public set; }
    private static ToolStripContentPanel();
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    [NullableContextAttribute("1")]
public string get_Name();
    [NullableContextAttribute("1")]
public void set_Name(string value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    [NullableContextAttribute("1")]
private ToolStripRendererSwitcher get_RendererSwitcher();
    [NullableContextAttribute("1")]
public ToolStripRenderer get_Renderer();
    [NullableContextAttribute("1")]
public void set_Renderer(ToolStripRenderer value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public void add_RendererChanged(EventHandler value);
    public void remove_RendererChanged(EventHandler value);
    [NullableContextAttribute("1")]
private void HandleRendererChanged(object sender, EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRendererChanged(EventArgs e);
    private void ResetRenderMode();
    private bool ShouldSerializeRenderMode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripContentPanelRenderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripContentPanel <ToolStripContentPanel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public Graphics Graphics { get; }
    public ToolStripContentPanel ToolStripContentPanel { get; }
    public bool Handled { get; public set; }
    public ToolStripContentPanelRenderEventArgs(Graphics g, ToolStripContentPanel contentPanel);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public ToolStripContentPanel get_ToolStripContentPanel();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.Windows.Forms.ToolStripContentPanelRenderEventHandler : MulticastDelegate {
    public ToolStripContentPanelRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripContentPanelRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripContentPanelRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripControlHost : ToolStripItem {
    private Control _control;
    private int _suspendSyncSizeCount;
    private ContentAlignment _controlAlign;
    private bool _inSetVisibleCore;
    internal static object s_gotFocusEvent;
    internal static object s_lostFocusEvent;
    internal static object s_keyDownEvent;
    internal static object s_keyPressEvent;
    internal static object s_keyUpEvent;
    internal static object s_enterEvent;
    internal static object s_leaveEvent;
    internal static object s_validatedEvent;
    internal static object s_validatingEvent;
    public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageDescr")]
[DefaultValueAttribute("")]
public Image BackgroundImage { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageLayoutDescr")]
public ImageLayout BackgroundImageLayout { get; public set; }
    public bool CanSelect { get; }
    [SRCategoryAttribute("CatFocus")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ControlCausesValidationDescr")]
public bool CausesValidation { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
public ContentAlignment ControlAlign { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control Control { get; }
    private Control ControlInternal { get; }
    [NullableAttribute("2")]
internal AccessibleObject ControlAccessibilityObject { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemDisplayStyle DisplayStyle { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool DoubleClickEnabled { get; public set; }
    public Font Font { get; public set; }
    public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public bool Focused { get; }
    public Color ForeColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image Image { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemImageScaling ImageScaling { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ImageTransparentColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContentAlignment ImageAlign { get; public set; }
    public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    public bool Selected { get; }
    public Size Size { get; public set; }
    [NullableAttribute("2")]
[EditorBrowsableAttribute("2")]
public ISite Site { get; public set; }
    [DefaultValueAttribute("")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContentAlignment TextAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripTextDirection TextDirection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public TextImageRelation TextImageRelation { get; public set; }
    public ToolStripControlHost(Control c);
    public ToolStripControlHost(Control c, string name);
    private static ToolStripControlHost();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual bool get_CanSelect();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public ContentAlignment get_ControlAlign();
    public void set_ControlAlign(ContentAlignment value);
    public Control get_Control();
    private Control get_ControlInternal();
    [NullableContextAttribute("2")]
internal AccessibleObject get_ControlAccessibilityObject();
    protected virtual Size get_DefaultSize();
    public ToolStripItemDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(ToolStripItemDisplayStyle value);
    [NullableContextAttribute("2")]
public void add_DisplayStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DisplayStyleChanged(EventHandler value);
    public bool get_DoubleClickEnabled();
    public void set_DoubleClickEnabled(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    [NullableContextAttribute("2")]
public void add_Enter(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Enter(EventHandler value);
    public virtual bool get_Focused();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    [NullableContextAttribute("2")]
public void add_GotFocus(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_GotFocus(EventHandler value);
    [NullableContextAttribute("2")]
public virtual Image get_Image();
    [NullableContextAttribute("2")]
public virtual void set_Image(Image value);
    public ToolStripItemImageScaling get_ImageScaling();
    public void set_ImageScaling(ToolStripItemImageScaling value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    [NullableContextAttribute("2")]
public void add_Leave(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Leave(EventHandler value);
    [NullableContextAttribute("2")]
public void add_LostFocus(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_LostFocus(EventHandler value);
    [NullableContextAttribute("2")]
public void add_KeyDown(KeyEventHandler value);
    [NullableContextAttribute("2")]
public void remove_KeyDown(KeyEventHandler value);
    [NullableContextAttribute("2")]
public void add_KeyPress(KeyPressEventHandler value);
    [NullableContextAttribute("2")]
public void remove_KeyPress(KeyPressEventHandler value);
    [NullableContextAttribute("2")]
public void add_KeyUp(KeyEventHandler value);
    [NullableContextAttribute("2")]
public void remove_KeyUp(KeyEventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    public virtual bool get_Selected();
    public virtual Size get_Size();
    public virtual void set_Size(Size value);
    [NullableContextAttribute("2")]
public virtual ISite get_Site();
    [NullableContextAttribute("2")]
public virtual void set_Site(ISite value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public ContentAlignment get_TextAlign();
    public void set_TextAlign(ContentAlignment value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    [NullableContextAttribute("2")]
public void add_Validating(CancelEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Validating(CancelEventHandler value);
    [NullableContextAttribute("2")]
public void add_Validated(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_Validated(EventHandler value);
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("2")]
public void Focus();
    public virtual Size GetPreferredSize(Size constrainingSize);
    private void HandleClick(object sender, EventArgs e);
    private void HandleBackColorChanged(object sender, EventArgs e);
    private void HandleDoubleClick(object sender, EventArgs e);
    private void HandleDragDrop(object sender, DragEventArgs e);
    private void HandleDragEnter(object sender, DragEventArgs e);
    private void HandleDragLeave(object sender, EventArgs e);
    private void HandleDragOver(object sender, DragEventArgs e);
    private void HandleEnter(object sender, EventArgs e);
    private void HandleEnabledChanged(object sender, EventArgs e);
    private void HandleForeColorChanged(object sender, EventArgs e);
    private void HandleGiveFeedback(object sender, GiveFeedbackEventArgs e);
    private void HandleGotFocus(object sender, EventArgs e);
    private void HandleLocationChanged(object sender, EventArgs e);
    private void HandleLostFocus(object sender, EventArgs e);
    private void HandleKeyDown(object sender, KeyEventArgs e);
    private void HandleKeyPress(object sender, KeyPressEventArgs e);
    private void HandleKeyUp(object sender, KeyEventArgs e);
    private void HandleLeave(object sender, EventArgs e);
    private void HandleMouseDown(object sender, MouseEventArgs e);
    private void HandleMouseEnter(object sender, EventArgs e);
    private void HandleMouseLeave(object sender, EventArgs e);
    private void HandleMouseHover(object sender, EventArgs e);
    private void HandleMouseMove(object sender, MouseEventArgs e);
    private void HandleMouseUp(object sender, MouseEventArgs e);
    private void HandlePaint(object sender, PaintEventArgs e);
    private void HandleQueryAccessibilityHelp(object sender, QueryAccessibilityHelpEventArgs e);
    private void HandleQueryContinueDrag(object sender, QueryContinueDragEventArgs e);
    private void HandleRightToLeftChanged(object sender, EventArgs e);
    private void HandleResize(object sender, EventArgs e);
    private void HandleTextChanged(object sender, EventArgs e);
    private void HandleControlVisibleChanged(object sender, EventArgs e);
    private void HandleValidating(object sender, CancelEventArgs e);
    private void HandleValidated(object sender, EventArgs e);
    internal virtual void OnAccessibleDescriptionChanged(EventArgs e);
    internal virtual void OnAccessibleNameChanged(EventArgs e);
    internal virtual void OnAccessibleDefaultActionDescriptionChanged(EventArgs e);
    internal virtual void OnAccessibleRoleChanged(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnBoundsChanged();
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual void OnLayout(LayoutEventArgs e);
    [NullableContextAttribute("2")]
protected virtual void OnParentChanged(ToolStrip oldParent, ToolStrip newParent);
    [NullableContextAttribute("2")]
protected virtual void OnSubscribeControlEvents(Control control);
    [NullableContextAttribute("2")]
protected virtual void OnUnsubscribeControlEvents(Control control);
    protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnValidated(EventArgs e);
    [NullableContextAttribute("2")]
private static ReadOnlyControlCollection GetControlCollection(ToolStrip toolStrip);
    private void SyncControlParent();
    protected virtual void OnHostedControlResize(EventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void SetVisibleCore(bool visible);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    private void SuspendSizeSync();
    internal virtual void ReleaseUiaProvider();
    private void ResumeSizeSync();
    internal virtual bool ShouldSerializeBackColor();
    internal virtual bool ShouldSerializeForeColor();
    internal virtual bool ShouldSerializeFont();
    internal virtual bool ShouldSerializeRightToLeft();
    internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    protected virtual AccessibleObject CreateAccessibilityInstance();
}
internal class System.Windows.Forms.ToolStripCustomIComparer : object {
    [NullableContextAttribute("2")]
public sealed virtual int Compare(ToolStrip x, ToolStrip y);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ToolStripDropDown : ToolStrip {
    private ToolStripItem ownerItem;
    private bool isAutoGenerated;
    private bool dropShadowEnabled;
    private bool autoClose;
    private bool autoSize;
    private int countDropDownItemsAssignedTo;
    private BitVector32 state;
    private Point displayLocation;
    private bool saveSourceControl;
    private ToolStripDropDownDirection childDropDownDirection;
    private ToolStripDropDownCloseReason closeReason;
    private static int PropOpacity;
    private static int PropSourceControl;
    [NullableAttribute("1")]
private static object EventOpening;
    [NullableAttribute("1")]
private static object EventOpened;
    [NullableAttribute("1")]
private static object EventClosed;
    [NullableAttribute("1")]
private static object EventClosing;
    private static Padding defaultPadding;
    private Padding scaledDefaultPadding;
    internal static TraceSwitch DropDownActivateDebug;
    internal static TraceSwitch DropDownDebugBounds;
    private static int stateLayered;
    private static int stateAllowTransparency;
    private static int stateNotWorkingAreaConstrained;
    private static int stateInSetVisibleCore;
    private bool _sendingActivateMessage;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowItemReorder { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAllowTransparencyDescr")]
public bool AllowTransparency { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AnchorStyles Anchor { get; public set; }
    [DefaultValueAttribute("True")]
public bool AutoSize { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripDropDownAutoCloseDescr")]
public bool AutoClose { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CanOverflow { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected Padding DefaultPadding { get; }
    protected bool DefaultShowItemToolTips { get; }
    protected DockStyle DefaultDock { get; }
    public ToolStripDropDownDirection DefaultDropDownDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public DockStyle Dock { get; public set; }
    [NullableAttribute("1")]
internal NativeWindow DropDownOwnerWindow { get; }
    public bool DropShadowEnabled { get; public set; }
    [NullableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ToolStripGripDisplayStyle GripDisplayStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Rectangle GripRectangle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding GripMargin { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ToolStripGripStyle GripStyle { get; public set; }
    [BrowsableAttribute("False")]
public bool IsAutoGenerated { get; }
    internal bool IsAssignedToDropDownItem { get; }
    internal Size ImageScalingSizeInternal { get; internal set; }
    internal bool KeyboardActive { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Point Location { get; public set; }
    protected internal Size MaxItemSize { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[SRDescriptionAttribute("FormOpacityDescr")]
[DefaultValueAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public double Opacity { get; public set; }
    private byte OpacityAsByte { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ToolStripOverflowButton OverflowButton { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public ToolStripItem OwnerItem { get; public set; }
    internal ToolStripDropDownItem OwnerDropDownItem { get; }
    internal ToolStrip OwnerToolStrip { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public Region Region { get; public set; }
    internal bool RequiresScrollButtons { get; internal set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    private bool RightToLeftInherited { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Stretch { get; public set; }
    internal Control SourceControlInternal { get; internal set; }
    internal SHOW_WINDOW_CMD ShowParams { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripTextDirectionDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripTextDirection TextDirection { get; public set; }
    protected bool TopMost { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool TopLevel { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int TabIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlVisibleDescr")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Visible { get; public set; }
    internal bool WorkingAreaConstrained { get; internal set; }
    internal bool IsFirstDropDown { get; }
    [NullableContextAttribute("1")]
internal ToolStripDropDown(ToolStripItem ownerItem);
    [NullableContextAttribute("1")]
internal ToolStripDropDown(ToolStripItem ownerItem, bool isAutoGenerated);
    private static ToolStripDropDown();
    public bool get_AllowItemReorder();
    public void set_AllowItemReorder(bool value);
    public bool get_AllowTransparency();
    public void set_AllowTransparency(bool value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public bool get_AutoClose();
    public void set_AutoClose(bool value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual Padding get_DefaultPadding();
    protected virtual bool get_DefaultShowItemToolTips();
    protected virtual DockStyle get_DefaultDock();
    public virtual ToolStripDropDownDirection get_DefaultDropDownDirection();
    public virtual void set_DefaultDropDownDirection(ToolStripDropDownDirection value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    [NullableContextAttribute("1")]
internal virtual NativeWindow get_DropDownOwnerWindow();
    public bool get_DropShadowEnabled();
    public void set_DropShadowEnabled(bool value);
    public void add_Closed(ToolStripDropDownClosedEventHandler value);
    public void remove_Closed(ToolStripDropDownClosedEventHandler value);
    public void add_Closing(ToolStripDropDownClosingEventHandler value);
    public void remove_Closing(ToolStripDropDownClosingEventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public ToolStripGripDisplayStyle get_GripDisplayStyle();
    public Rectangle get_GripRectangle();
    public Padding get_GripMargin();
    public void set_GripMargin(Padding value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public bool get_IsAutoGenerated();
    internal bool get_IsAssignedToDropDownItem();
    internal virtual Size get_ImageScalingSizeInternal();
    internal virtual void set_ImageScalingSizeInternal(Size value);
    internal virtual bool get_KeyboardActive();
    internal virtual void set_KeyboardActive(bool value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_Opening(CancelEventHandler value);
    public void remove_Opening(CancelEventHandler value);
    public void add_Opened(EventHandler value);
    public void remove_Opened(EventHandler value);
    protected internal virtual Size get_MaxItemSize();
    public double get_Opacity();
    public void set_Opacity(double value);
    private byte get_OpacityAsByte();
    [NullableContextAttribute("1")]
public ToolStripOverflowButton get_OverflowButton();
    public ToolStripItem get_OwnerItem();
    public void set_OwnerItem(ToolStripItem value);
    internal ToolStripDropDownItem get_OwnerDropDownItem();
    internal ToolStrip get_OwnerToolStrip();
    public Region get_Region();
    public void set_Region(Region value);
    public void add_RegionChanged(EventHandler value);
    public void remove_RegionChanged(EventHandler value);
    internal virtual bool get_RequiresScrollButtons();
    internal virtual void set_RequiresScrollButtons(bool value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    private bool get_RightToLeftInherited();
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public bool get_Stretch();
    public void set_Stretch(bool value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    internal Control get_SourceControlInternal();
    internal void set_SourceControlInternal(Control value);
    internal virtual SHOW_WINDOW_CMD get_ShowParams();
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    protected virtual bool get_TopMost();
    public bool get_TopLevel();
    public void set_TopLevel(bool value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public bool get_Visible();
    public void set_Visible(bool value);
    internal bool get_WorkingAreaConstrained();
    internal void set_WorkingAreaConstrained(bool value);
    internal void AssignToDropDownItem();
    internal void AdjustSize();
    private void ApplyTopMost(bool topMost);
    protected virtual void Dispose(bool disposing);
    private void CancelAutoExpand();
    internal virtual bool CanProcessMnemonic();
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style);
    protected virtual void CreateHandle();
    public void Close();
    private void ResetCloseReason();
    internal void SetCloseReason(ToolStripDropDownCloseReason reason);
    public void Close(ToolStripDropDownCloseReason reason);
    internal Rectangle GetDropDownBounds(Rectangle suggestedBounds);
    internal Rectangle CalculateDropDownLocation(Point start, ToolStripDropDownDirection dropDownDirection);
    internal Size GetSuggestedSize();
    internal virtual ToolStrip GetToplevelOwnerToolStrip();
    internal ToolStripItem GetToplevelOwnerItem();
    [NullableContextAttribute("1")]
internal virtual void HandleItemClicked(ToolStripItem dismissingItem);
    internal virtual void Initialize();
    [NullableContextAttribute("1")]
protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnItemClicked(ToolStripItemClickedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLayout(LayoutEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnOpening(CancelEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnOpened(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnVisibleChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnParentChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseUp(MouseEventArgs mea);
    [NullableContextAttribute("1")]
internal void OnOwnerItemFontChanged(EventArgs e);
    internal void SelectPreviousToolStrip();
    internal virtual bool ProcessArrowKey(Keys keyCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    [EditorBrowsableAttribute("2")]
protected virtual bool ProcessDialogChar(char charCode);
    protected internal virtual bool ProcessMnemonic(char charCode);
    [NullableContextAttribute("1")]
internal virtual void ProcessDuplicateMnemonic(ToolStripItem item, char charCode);
    internal virtual void RecreateHandleCore();
    private void ResetDropShadowEnabled();
    private void ReparentToActiveToolStripWindow();
    private void ReparentToDropDownOwnerWindow();
    internal virtual void ResetScaling(int newDpi);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    internal void SetAutoGeneratedInternal(bool autoGenerated);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    private void SetTopLevelStyle(bool value);
    protected virtual void SetVisibleCore(bool visible);
    private bool ShouldSerializeDefaultDropDownDirection();
    private void UpdateLayered();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void Show();
    [NullableContextAttribute("1")]
public void Show(Control control, Point position);
    [NullableContextAttribute("1")]
public void Show(Control control, Point position, ToolStripDropDownDirection direction);
    [NullableContextAttribute("1")]
public void Show(Control control, int x, int y);
    public void Show(Point screenLocation);
    public void Show(Point position, ToolStripDropDownDirection direction);
    public void Show(int x, int y);
    private void ShowCore();
    private bool ShouldSerializeDropShadowEnabled();
    internal virtual bool ShouldSerializeLayoutStyle();
    internal void UnassignDropDownItem();
    protected virtual void WndProc(Message& m);
    internal void DismissAll();
    private void DismissActiveDropDowns();
    private void WmNCActivate(Message& m);
    internal bool get_IsFirstDropDown();
    [NullableContextAttribute("1")]
internal ToolStripDropDown GetFirstDropDown();
    [NullableContextAttribute("1")]
internal static ToolStripDropDown GetFirstDropDown(ToolStrip start);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("9")]
public class System.Windows.Forms.ToolStripDropDownButton : ToolStripDropDownItem {
    private bool _showDropDownArrow;
    private byte _openMouseId;
    [DefaultValueAttribute("True")]
public bool AutoToolTip { get; public set; }
    protected bool DefaultAutoToolTip { get; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripDropDownButtonShowDropDownArrowDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool ShowDropDownArrow { get; public set; }
    [NullableContextAttribute("2")]
public ToolStripDropDownButton(string text);
    [NullableContextAttribute("2")]
public ToolStripDropDownButton(Image image);
    [NullableContextAttribute("2")]
public ToolStripDropDownButton(string text, Image image);
    [NullableContextAttribute("2")]
public ToolStripDropDownButton(string text, Image image, EventHandler onClick);
    [NullableContextAttribute("2")]
public ToolStripDropDownButton(string text, Image image, EventHandler onClick, string name);
    [NullableContextAttribute("2")]
public ToolStripDropDownButton(string text, Image image, ToolStripItem[] dropDownItems);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    protected virtual bool get_DefaultAutoToolTip();
    public bool get_ShowDropDownArrow();
    public void set_ShowDropDownArrow(bool value);
    private protected virtual ToolStripItemInternalLayout CreateInternalLayout();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    private void Initialize();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual bool ProcessMnemonic(char charCode);
}
public class System.Windows.Forms.ToolStripDropDownClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ToolStripDropDownCloseReason <CloseReason>k__BackingField;
    public ToolStripDropDownCloseReason CloseReason { get; }
    public ToolStripDropDownClosedEventArgs(ToolStripDropDownCloseReason reason);
    [CompilerGeneratedAttribute]
public ToolStripDropDownCloseReason get_CloseReason();
}
public class System.Windows.Forms.ToolStripDropDownClosedEventHandler : MulticastDelegate {
    public ToolStripDropDownClosedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripDropDownClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripDropDownClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripDropDownCloseReason : Enum {
    public int value__;
    public static ToolStripDropDownCloseReason AppFocusChange;
    public static ToolStripDropDownCloseReason AppClicked;
    public static ToolStripDropDownCloseReason ItemClicked;
    public static ToolStripDropDownCloseReason Keyboard;
    public static ToolStripDropDownCloseReason CloseCalled;
}
public class System.Windows.Forms.ToolStripDropDownClosingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private ToolStripDropDownCloseReason <CloseReason>k__BackingField;
    public ToolStripDropDownCloseReason CloseReason { get; }
    public ToolStripDropDownClosingEventArgs(ToolStripDropDownCloseReason reason);
    [CompilerGeneratedAttribute]
public ToolStripDropDownCloseReason get_CloseReason();
}
public class System.Windows.Forms.ToolStripDropDownClosingEventHandler : MulticastDelegate {
    public ToolStripDropDownClosingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripDropDownClosingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripDropDownClosingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripDropDownDirection : Enum {
    public int value__;
    public static ToolStripDropDownDirection AboveLeft;
    public static ToolStripDropDownDirection AboveRight;
    public static ToolStripDropDownDirection BelowLeft;
    public static ToolStripDropDownDirection BelowRight;
    public static ToolStripDropDownDirection Left;
    public static ToolStripDropDownDirection Right;
    public static ToolStripDropDownDirection Default;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripMenuItemDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("DropDownItems")]
public abstract class System.Windows.Forms.ToolStripDropDownItem : ToolStripItem {
    [NullableAttribute("2")]
private ToolStripDropDown _dropDown;
    private ToolStripDropDownDirection _toolStripDropDownDirection;
    [NullableAttribute("2")]
private ToolTip _hookedKeyboardTooltip;
    private static object EventDropDownShow;
    private static object EventDropDownHide;
    private static object EventDropDownOpened;
    private static object EventDropDownClosed;
    private static object EventDropDownItemClicked;
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ToolStripDropDownDescr")]
public ToolStripDropDown DropDown { get; public set; }
    internal Rectangle DropDownButtonArea { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ToolStripDropDownItemDropDownDirectionDescr")]
[SRCategoryAttribute("CatBehavior")]
public ToolStripDropDownDirection DropDownDirection { get; public set; }
    protected internal Point DropDownLocation { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ToolStripDropDownItemsDescr")]
public ToolStripItemCollection DropDownItems { get; }
    [BrowsableAttribute("False")]
public bool HasDropDownItems { get; }
    [BrowsableAttribute("False")]
public bool HasDropDown { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Pressed { get; }
    internal bool OppositeDropDownAlign { get; }
    [NullableContextAttribute("2")]
protected ToolStripDropDownItem(string text, Image image, EventHandler onClick);
    [NullableContextAttribute("2")]
protected ToolStripDropDownItem(string text, Image image, EventHandler onClick, string name);
    [NullableContextAttribute("2")]
protected ToolStripDropDownItem(string text, Image image, ToolStripItem[] dropDownItems);
    private static ToolStripDropDownItem();
    public ToolStripDropDown get_DropDown();
    public void set_DropDown(ToolStripDropDown value);
    internal virtual Rectangle get_DropDownButtonArea();
    public ToolStripDropDownDirection get_DropDownDirection();
    public void set_DropDownDirection(ToolStripDropDownDirection value);
    [NullableContextAttribute("2")]
public void add_DropDownClosed(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownClosed(EventHandler value);
    protected internal virtual Point get_DropDownLocation();
    [NullableContextAttribute("2")]
public void add_DropDownOpening(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownOpening(EventHandler value);
    [NullableContextAttribute("2")]
public void add_DropDownOpened(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownOpened(EventHandler value);
    public ToolStripItemCollection get_DropDownItems();
    [NullableContextAttribute("2")]
public void add_DropDownItemClicked(ToolStripItemClickedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DropDownItemClicked(ToolStripItemClickedEventHandler value);
    public virtual bool get_HasDropDownItems();
    public bool get_HasDropDown();
    public virtual bool get_Pressed();
    internal virtual bool get_OppositeDropDownAlign();
    internal virtual void AutoHide(ToolStripItem otherItemBeingSelected);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    private Rectangle DropDownDirectionToDropDownBounds(ToolStripDropDownDirection dropDownDirection, Rectangle dropDownBounds);
    private void DropDown_Closed(object sender, ToolStripDropDownClosedEventArgs e);
    private void DropDown_Opened(object sender, EventArgs e);
    private void DropDown_ItemClicked(object sender, ToolStripItemClickedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private Rectangle GetDropDownBounds(ToolStripDropDownDirection dropDownDirection);
    public void HideDropDown();
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnBoundsChanged();
    protected virtual void OnRightToLeftChanged(EventArgs e);
    internal virtual void OnImageScalingSizeChanged(EventArgs e);
    protected virtual void OnDropDownHide(EventArgs e);
    protected virtual void OnDropDownShow(EventArgs e);
    protected internal virtual void OnDropDownOpened(EventArgs e);
    protected internal virtual void OnDropDownClosed(EventArgs e);
    protected internal virtual void OnDropDownItemClicked(ToolStripItemClickedEventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    internal virtual void ReleaseUiaProvider();
    private ToolStripDropDownDirection RTLTranslateDropDownDirection(ToolStripDropDownDirection dropDownDirection, RightToLeft rightToLeft);
    public void ShowDropDown();
    internal void ShowDropDown(bool mousePush);
    private void ShowDropDownInternal();
    private bool ShouldSerializeDropDown();
    private bool ShouldSerializeDropDownDirection();
    private bool ShouldSerializeDropDownItems();
    internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    internal virtual void ToolStrip_RescaleConstants(int oldDpi, int newDpi);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripDropDownItemAccessibleObject : ToolStripItemAccessibleObject {
    [NullableAttribute("1")]
private ToolStripDropDownItem _owner;
    public AccessibleRole Role { get; }
    internal ExpandCollapseState ExpandCollapseState { get; }
    [NullableContextAttribute("1")]
public ToolStripDropDownItemAccessibleObject(ToolStripDropDownItem item);
    public virtual AccessibleRole get_Role();
    public virtual void DoDefaultAction();
    internal virtual bool IsIAccessibleExSupported();
    internal virtual bool IsPatternSupported(UIA patternId);
    internal virtual object GetPropertyValue(UIA propertyID);
    internal virtual void Expand();
    internal virtual void Collapse();
    internal virtual ExpandCollapseState get_ExpandCollapseState();
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
    [NullableContextAttribute("1")]
internal int GetChildFragmentIndex(ToolStripItemAccessibleObject child);
    internal int GetChildFragmentCount();
    internal AccessibleObject GetChildFragment(int index, NavigateDirection direction);
    internal virtual IRawElementProviderFragment FragmentNavigate(NavigateDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ToolStripDropDownMenu : ToolStripDropDown {
    private static Padding ImagePadding;
    private static Padding TextPadding;
    private static Padding CheckPadding;
    private static Padding ArrowPadding;
    private static int DefaultImageMarginWidth;
    private static int DefaultImageAndCheckMarginWidth;
    private static int ArrowSize;
    private Size _maxItemSize;
    private Rectangle _checkRectangle;
    private Rectangle _imageRectangle;
    private Rectangle _arrowRectangle;
    private Rectangle _textRectangle;
    private Rectangle _imageMarginBounds;
    private int _paddingToTrim;
    private int _tabWidth;
    [NullableAttribute("2")]
private ToolStripScrollButton _upScrollButton;
    [NullableAttribute("2")]
private ToolStripScrollButton _downScrollButton;
    private int _scrollAmount;
    private int _indexOfFirstDisplayedItem;
    private BitVector32 _state;
    private static int stateShowImageMargin;
    private static int stateShowCheckMargin;
    private static int stateMaxItemSizeValid;
    private static Size DefaultImageSize;
    private Size _scaledDefaultImageSize;
    private int _scaledDefaultImageMarginWidth;
    private int _scaledDefaultImageAndCheckMarginWidth;
    private Padding _scaledImagePadding;
    private Padding _scaledTextPadding;
    private Padding _scaledCheckPadding;
    private Padding _scaledArrowPadding;
    private int _scaledArrowSize;
    internal bool AllItemsVisible { get; internal set; }
    internal Rectangle ArrowRectangle { get; }
    internal Rectangle CheckRectangle { get; }
    protected Padding DefaultPadding { get; }
    public Rectangle DisplayRectangle { get; }
    internal ToolStripScrollButton DownScrollButton { get; }
    internal Rectangle ImageRectangle { get; }
    internal int PaddingToTrim { get; internal set; }
    internal Rectangle ImageMargin { get; }
    public LayoutEngine LayoutEngine { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripLayoutStyle LayoutStyle { get; public set; }
    protected internal Size MaxItemSize { get; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripDropDownMenuShowImageMarginDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool ShowImageMargin { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripDropDownMenuShowCheckMarginDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool ShowCheckMargin { get; public set; }
    internal Rectangle TextRectangle { get; }
    internal ToolStripScrollButton UpScrollButton { get; }
    internal bool RequiresScrollButtons { get; internal set; }
    internal ToolStripDropDownMenu(ToolStripItem ownerItem, bool isAutoGenerated);
    private static ToolStripDropDownMenu();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    internal virtual bool get_AllItemsVisible();
    internal virtual void set_AllItemsVisible(bool value);
    internal Rectangle get_ArrowRectangle();
    internal Rectangle get_CheckRectangle();
    protected virtual Padding get_DefaultPadding();
    public virtual Rectangle get_DisplayRectangle();
    internal ToolStripScrollButton get_DownScrollButton();
    internal Rectangle get_ImageRectangle();
    internal int get_PaddingToTrim();
    internal void set_PaddingToTrim(int value);
    internal Rectangle get_ImageMargin();
    public virtual LayoutEngine get_LayoutEngine();
    public ToolStripLayoutStyle get_LayoutStyle();
    public void set_LayoutStyle(ToolStripLayoutStyle value);
    protected internal virtual Size get_MaxItemSize();
    public bool get_ShowImageMargin();
    public void set_ShowImageMargin(bool value);
    public bool get_ShowCheckMargin();
    public void set_ShowCheckMargin(bool value);
    internal Rectangle get_TextRectangle();
    internal ToolStripScrollButton get_UpScrollButton();
    internal static ToolStripDropDownMenu FromHMenu(HMENU hmenu, IWin32Window targetWindow);
    private void CalculateInternalLayoutMetrics();
    [NullableContextAttribute("2")]
internal virtual void ChangeSelection(ToolStripItem nextItem);
    [NullableContextAttribute("2")]
protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    [NullableContextAttribute("2")]
internal virtual ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction, bool rtlAware);
    internal virtual void Initialize();
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    internal virtual void ReleaseToolStripItemsProviders(ToolStripItemCollection items);
    internal virtual void ResetScaling(int newDpi);
    internal virtual bool get_RequiresScrollButtons();
    internal virtual void set_RequiresScrollButtons(bool value);
    internal void ResetScrollPosition();
    internal void RestoreScrollPosition();
    internal virtual void ScrollInternal(int delta);
    internal void ScrollInternal(bool up);
    protected virtual void SetDisplayedItems();
    private void UpdateScrollButtonLocations();
    private void UpdateScrollButtonStatus();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripDropTargetManager : object {
    [NullableAttribute("2")]
private IDropTarget _lastDropTarget;
    private ToolStrip _owner;
    [NullableAttribute("2")]
internal static TraceSwitch DragDropDebug;
    public ToolStrip Owner { get; }
    public ToolStripDropTargetManager(ToolStrip owner);
    public ToolStrip get_Owner();
    public void EnsureRegistered();
    public void EnsureUnRegistered();
    [NullableContextAttribute("2")]
private ToolStripItem FindItemAtPoint(int x, int y);
    public sealed virtual void OnDragEnter(DragEventArgs e);
    public sealed virtual void OnDragOver(DragEventArgs e);
    public sealed virtual void OnDragLeave(EventArgs e);
    public sealed virtual void OnDragDrop(DragEventArgs e);
    private void SetAcceptDrops(bool accept);
    private void UpdateDropTarget(IDropTarget newTarget, DragEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripGrip : ToolStripButton {
    [NullableAttribute("2")]
private Cursor _oldCursor;
    private Point _startLocation;
    private bool _movingToolStrip;
    private Point _lastEndLocation;
    private static Size s_dragSize;
    private static Padding _defaultPadding;
    private static int GripThicknessDefault;
    private static int GripThicknessVisualStylesEnabled;
    private Padding _scaledDefaultPadding;
    private int _scaledGripThickness;
    private int _scaledGripThicknessVisualStylesEnabled;
    [CompilerGeneratedAttribute]
private int <GripThickness>k__BackingField;
    protected internal Padding DefaultMargin { get; }
    public bool CanSelect { get; }
    internal int GripThickness { get; private set; }
    [MemberNotNullWhenAttribute("True", "ToolStripPanelRow")]
internal bool MovingToolStrip { get; internal set; }
    [NullableAttribute("2")]
private ToolStripPanelRow ToolStripPanelRow { get; }
    private static ToolStripGrip();
    protected internal virtual Padding get_DefaultMargin();
    public virtual bool get_CanSelect();
    [CompilerGeneratedAttribute]
internal int get_GripThickness();
    [CompilerGeneratedAttribute]
private void set_GripThickness(int value);
    [MemberNotNullWhenAttribute("True", "ToolStripPanelRow")]
internal bool get_MovingToolStrip();
    [MemberNotNullWhenAttribute("True", "ToolStripPanelRow")]
internal void set_MovingToolStrip(bool value);
    [NullableContextAttribute("2")]
private ToolStripPanelRow get_ToolStripPanelRow();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    private static bool LeftMouseButtonIsDown();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs mea);
    protected virtual void OnMouseMove(MouseEventArgs mea);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mea);
    internal virtual void ToolStrip_RescaleConstants(int oldDpi, int newDpi);
}
public enum System.Windows.Forms.ToolStripGripDisplayStyle : Enum {
    public int value__;
    public static ToolStripGripDisplayStyle Horizontal;
    public static ToolStripGripDisplayStyle Vertical;
}
public class System.Windows.Forms.ToolStripGripRenderEventArgs : ToolStripRenderEventArgs {
    public Rectangle GripBounds { get; }
    public ToolStripGripDisplayStyle GripDisplayStyle { get; }
    public ToolStripGripStyle GripStyle { get; }
    [NullableContextAttribute("1")]
public ToolStripGripRenderEventArgs(Graphics g, ToolStrip toolStrip);
    public Rectangle get_GripBounds();
    public ToolStripGripDisplayStyle get_GripDisplayStyle();
    public ToolStripGripStyle get_GripStyle();
}
public class System.Windows.Forms.ToolStripGripRenderEventHandler : MulticastDelegate {
    public ToolStripGripRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripGripRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripGripRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripGripStyle : Enum {
    public int value__;
    public static ToolStripGripStyle Hidden;
    public static ToolStripGripStyle Visible;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripHighContrastRenderer : ToolStripSystemRenderer {
    private static int GRIP_PADDING;
    private BitVector32 _options;
    private static int s_optionsDottedBorder;
    private static int s_optionsDottedGrip;
    private static int s_optionsFillWhenSelected;
    public bool DottedBorder { get; }
    public bool DottedGrip { get; }
    public bool FillWhenSelected { get; }
    [NullableAttribute("2")]
internal ToolStripRenderer RendererOverride { get; }
    public ToolStripHighContrastRenderer(bool systemRenderMode);
    private static ToolStripHighContrastRenderer();
    public bool get_DottedBorder();
    public bool get_DottedGrip();
    public bool get_FillWhenSelected();
    [NullableContextAttribute("2")]
internal virtual ToolStripRenderer get_RendererOverride();
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderStatusStripSizingGrip(ToolStripRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderItemText(ToolStripItemTextRenderEventArgs e);
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    private void RenderToolStripBackgroundInternal(ToolStripRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    internal static bool IsHighContrastWhiteOnBlack();
    protected virtual void OnRenderItemImage(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    private static void RenderItemInternalFilled(ToolStripItemRenderEventArgs e);
    private static void RenderItemInternalFilled(ToolStripItemRenderEventArgs e, bool pressFill);
    private static void DrawHightContrastDashedBorder(Graphics graphics, ToolStripItem item);
    private void RenderItemImageOfLowColorDepth(ToolStripItemImageRenderEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignTimeVisibleAttribute("False")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripItemDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("Click")]
[ToolboxItemAttribute("False")]
[DefaultPropertyAttribute("Text")]
public abstract class System.Windows.Forms.ToolStripItem : BindableComponent {
    internal static TraceSwitch s_mouseDebugging;
    private Rectangle _bounds;
    private PropertyStore _propertyStore;
    private ToolStripItemAlignment _alignment;
    private ToolStrip _parent;
    private ToolStrip _owner;
    private ToolStripItemOverflow _overflow;
    private ToolStripItemPlacement _placement;
    private ContentAlignment _imageAlign;
    private ContentAlignment _textAlign;
    private TextImageRelation _textImageRelation;
    private ToolStripItemImageIndexer _imageIndexer;
    private ToolStripItemInternalLayout _toolStripItemInternalLayout;
    private BitVector32 _state;
    private string _toolTipText;
    private Color _imageTransparentColor;
    private ToolStripItemImageScaling _imageScaling;
    private Size _cachedTextSize;
    private static Padding s_defaultMargin;
    private static Padding s_defaultStatusStripMargin;
    private Padding _scaledDefaultMargin;
    private Padding _scaledDefaultStatusStripMargin;
    private ToolStripItemDisplayStyle _displayStyle;
    private ICommand _command;
    private object _commandParameter;
    [NullableAttribute("1")]
private static ArrangedElementCollection s_emptyChildCollection;
    [NullableAttribute("1")]
internal static object s_mouseDownEvent;
    [NullableAttribute("1")]
internal static object s_mouseEnterEvent;
    [NullableAttribute("1")]
internal static object s_mouseLeaveEvent;
    [NullableAttribute("1")]
internal static object s_mouseHoverEvent;
    [NullableAttribute("1")]
internal static object s_mouseMoveEvent;
    [NullableAttribute("1")]
internal static object s_mouseUpEvent;
    [NullableAttribute("1")]
internal static object s_clickEvent;
    [NullableAttribute("1")]
internal static object s_doubleClickEvent;
    [NullableAttribute("1")]
internal static object s_dragDropEvent;
    [NullableAttribute("1")]
internal static object s_dragEnterEvent;
    [NullableAttribute("1")]
internal static object s_dragLeaveEvent;
    [NullableAttribute("1")]
internal static object s_dragOverEvent;
    [NullableAttribute("1")]
internal static object s_displayStyleChangedEvent;
    [NullableAttribute("1")]
internal static object s_enabledChangedEvent;
    [NullableAttribute("1")]
internal static object s_internalEnabledChangedEvent;
    [NullableAttribute("1")]
internal static object s_fontChangedEvent;
    [NullableAttribute("1")]
internal static object s_foreColorChangedEvent;
    [NullableAttribute("1")]
internal static object s_backColorChangedEvent;
    [NullableAttribute("1")]
internal static object s_giveFeedbackEvent;
    [NullableAttribute("1")]
internal static object s_queryContinueDragEvent;
    [NullableAttribute("1")]
internal static object s_queryAccessibilityHelpEvent;
    [NullableAttribute("1")]
internal static object s_locationChangedEvent;
    [NullableAttribute("1")]
internal static object s_rightToLeftChangedEvent;
    [NullableAttribute("1")]
internal static object s_visibleChangedEvent;
    [NullableAttribute("1")]
internal static object s_availableChangedEvent;
    [NullableAttribute("1")]
internal static object s_ownerChangedEvent;
    [NullableAttribute("1")]
internal static object s_paintEvent;
    [NullableAttribute("1")]
internal static object s_textChangedEvent;
    [NullableAttribute("1")]
internal static object s_commandChangedEvent;
    [NullableAttribute("1")]
internal static object s_commandParameterChangedEvent;
    [NullableAttribute("1")]
internal static object s_commandCanExecuteChangedEvent;
    private static int s_nameProperty;
    private static int s_textProperty;
    private static int s_backColorProperty;
    private static int s_foreColorProperty;
    private static int s_imageProperty;
    private static int s_fontProperty;
    private static int s_rightToLeftProperty;
    private static int s_tagProperty;
    private static int s_accessibilityProperty;
    private static int s_accessibleNameProperty;
    private static int s_accessibleRoleProperty;
    private static int s_accessibleDefaultActionDescriptionProperty;
    private static int s_accessibleDescriptionProperty;
    private static int s_textDirectionProperty;
    private static int s_mirroredImageProperty;
    private static int s_backgroundImageProperty;
    private static int s_backgroundImageLayoutProperty;
    private static int s_mergeActionProperty;
    private static int s_mergeIndexProperty;
    private static int s_stateAllowDrop;
    private static int s_stateVisible;
    private static int s_stateEnabled;
    private static int s_stateMouseDownAndNoDrag;
    private static int s_stateAutoSize;
    private static int s_statePressed;
    private static int s_stateSelected;
    private static int s_stateConstructing;
    private static int s_stateDisposed;
    private static int s_stateCurrentlyAnimatingImage;
    private static int s_stateDoubleClickEnabled;
    private static int s_stateAutoToolTip;
    private static int s_stateSupportsRightClick;
    private static int s_stateSupportsItemClick;
    private static int s_stateRightToLeftAutoMirrorImage;
    private static int s_stateInvalidMirroredImage;
    private static int s_stateSupportsSpaceKey;
    private static int s_stateMouseDownAndUpMustBeInSameItem;
    private static int s_stateSupportsDisabledHotTracking;
    private static int s_stateUseAmbientMargin;
    private static int s_stateDisposing;
    private long _lastClickTime;
    private int _deviceDpi;
    [NullableAttribute("1")]
internal Font _defaultFont;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <System.Windows.Forms.ICommandBindingTargetProvider.PreviousEnabledStatus>k__BackingField;
    internal bool IsAccessibilityObjectCreated { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolStripItemAccessibilityObjectDescr")]
public AccessibleObject AccessibilityObject { get; }
    [SRCategoryAttribute("CatAccessibility")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolStripItemAccessibleDefaultActionDescr")]
public string AccessibleDefaultActionDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemAccessibleDescriptionDescr")]
public string AccessibleDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemAccessibleNameDescr")]
public string AccessibleName { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripItemAccessibleRoleDescr")]
public AccessibleRole AccessibleRole { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripItemAlignmentDescr")]
public ToolStripItemAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatDragDrop")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripItemAllowDropDescr")]
[EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemAutoSizeDescr")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripItemAutoToolTipDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AutoToolTip { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ToolStripItemAvailableDescr")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Available { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageDescr")]
[DefaultValueAttribute("")]
public Image BackgroundImage { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("CommandComponentCommandDescr")]
public ICommand Command { get; public set; }
    [BindableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("CommandComponentCommandParameterDescr")]
public object CommandParameter { get; public set; }
    internal int DeviceDpi { get; internal set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageLayoutDescr")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    internal Rectangle ClientBounds { get; }
    [BrowsableAttribute("False")]
public Rectangle ContentRectangle { get; }
    [BrowsableAttribute("False")]
public bool CanSelect { get; }
    internal bool CanKeyboardSelect { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    protected bool DefaultAutoToolTip { get; }
    protected internal Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    protected Size DefaultSize { get; }
    protected ToolStripItemDisplayStyle DefaultDisplayStyle { get; }
    protected internal bool DismissWhenClicked { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemDisplayStyleDescr")]
public ToolStripItemDisplayStyle DisplayStyle { get; public set; }
    [EditorBrowsableAttribute("2")]
private static RightToLeft DefaultRightToLeft { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripItemDoubleClickedEnabledDescr")]
public bool DoubleClickEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemEnabledDescr")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemForeColorDescr")]
public Color ForeColor { get; public set; }
    [NullableAttribute("1")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemFontDescr")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int Height { get; public set; }
    [NullableAttribute("1")]
private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    private IArrangedElement System.Windows.Forms.Layout.IArrangedElement.Container { get; }
    private Rectangle System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle { get; }
    private bool System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout { get; }
    [NullableAttribute("1")]
private PropertyStore System.Windows.Forms.Layout.IArrangedElement.Properties { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageAlignDescr")]
public ContentAlignment ImageAlign { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageDescr")]
public Image Image { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageTransparentColorDescr")]
public Color ImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("ToolStripItemImageIndexDescr")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[RelatedImageListAttribute("Owner.ImageList")]
public int ImageIndex { get; public set; }
    [NullableAttribute("1")]
internal ToolStripItemImageIndexer ImageIndexer { get; }
    [NullableAttribute("1")]
[SRDescriptionAttribute("ToolStripItemImageKeyDescr")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ToolStripImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[RelatedImageListAttribute("Owner.ImageList")]
public string ImageKey { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemImageScalingDescr")]
public ToolStripItemImageScaling ImageScaling { get; public set; }
    [NullableAttribute("1")]
internal ToolStripItemInternalLayout InternalLayout { get; }
    internal bool IsForeColorSet { get; }
    internal bool IsInDesignMode { get; }
    [BrowsableAttribute("False")]
public bool IsDisposed { get; }
    [BrowsableAttribute("False")]
public bool IsOnDropDown { get; }
    [BrowsableAttribute("False")]
public bool IsOnOverflow { get; }
    internal bool IsMnemonicsListenerAxSourced { get; }
    [SRDescriptionAttribute("ToolStripItemMarginDescr")]
[SRCategoryAttribute("CatLayout")]
public Padding Margin { get; public set; }
    [SRDescriptionAttribute("ToolStripMergeActionDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public MergeAction MergeAction { get; public set; }
    [SRDescriptionAttribute("ToolStripMergeIndexDescr")]
[DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatLayout")]
public int MergeIndex { get; public set; }
    internal bool MouseDownAndUpMustBeInSameItem { get; internal set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStrip Owner { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItem OwnerItem { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal ToolStrip Parent { get; protected internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripItemOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
public ToolStripItemOverflow Overflow { get; public set; }
    [SRDescriptionAttribute("ToolStripItemPaddingDescr")]
[SRCategoryAttribute("CatLayout")]
public Padding Padding { get; public set; }
    internal ToolStrip ParentInternal { get; internal set; }
    [BrowsableAttribute("False")]
public ToolStripItemPlacement Placement { get; }
    internal Size PreferredImageSize { get; }
    [NullableAttribute("1")]
internal PropertyStore Properties { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Pressed { get; }
    internal Color RawBackColor { get; }
    internal ToolStripRenderer Renderer { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemRightToLeftAutoMirrorImageDescr")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    internal Image MirroredImage { get; }
    private Nullable`1<bool> System.Windows.Forms.ICommandBindingTargetProvider.PreviousEnabledStatus { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; }
    protected internal bool ShowKeyboardCues { get; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemSizeDescr")]
public Size Size { get; public set; }
    internal bool SupportsRightClick { get; internal set; }
    internal bool SupportsItemClick { get; internal set; }
    internal bool SupportsSpaceKey { get; internal set; }
    internal bool SupportsDisabledHotTracking { get; internal set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemTagDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemTextDescr")]
public string Text { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemTextAlignDescr")]
public ContentAlignment TextAlign { get; public set; }
    [SRDescriptionAttribute("ToolStripTextDirectionDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripTextDirection TextDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemTextImageRelationDescr")]
[SRCategoryAttribute("CatAppearance")]
public TextImageRelation TextImageRelation { get; public set; }
    [SRDescriptionAttribute("ToolStripItemToolTipTextDescr")]
[SRCategoryAttribute("CatBehavior")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
public string ToolTipText { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemVisibleDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int Width { get; public set; }
    internal static long DoubleClickTicks { get; }
    internal ToolStrip RootToolStrip { get; }
    internal bool IsParentAccessibilityObjectCreated { get; }
    protected ToolStripItem(string text, Image image, EventHandler onClick);
    protected ToolStripItem(string text, Image image, EventHandler onClick, string name);
    private static ToolStripItem();
    internal bool get_IsAccessibilityObjectCreated();
    [NullableContextAttribute("1")]
public AccessibleObject get_AccessibilityObject();
    public string get_AccessibleDefaultActionDescription();
    public void set_AccessibleDefaultActionDescription(string value);
    public string get_AccessibleDescription();
    public void set_AccessibleDescription(string value);
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public AccessibleRole get_AccessibleRole();
    public void set_AccessibleRole(AccessibleRole value);
    public ToolStripItemAlignment get_Alignment();
    public void set_Alignment(ToolStripItemAlignment value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public bool get_Available();
    public void set_Available(bool value);
    public void add_AvailableChanged(EventHandler value);
    public void remove_AvailableChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public sealed virtual ICommand get_Command();
    public sealed virtual void set_Command(ICommand value);
    public sealed virtual void add_CommandCanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CommandCanExecuteChanged(EventHandler value);
    public sealed virtual void add_CommandChanged(EventHandler value);
    public sealed virtual void remove_CommandChanged(EventHandler value);
    public sealed virtual object get_CommandParameter();
    public sealed virtual void set_CommandParameter(object value);
    public void add_CommandParameterChanged(EventHandler value);
    public void remove_CommandParameterChanged(EventHandler value);
    internal virtual int get_DeviceDpi();
    internal virtual void set_DeviceDpi(int value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Rectangle get_Bounds();
    internal Rectangle get_ClientBounds();
    public Rectangle get_ContentRectangle();
    public virtual bool get_CanSelect();
    internal virtual bool get_CanKeyboardSelect();
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public AnchorStyles get_Anchor();
    public void set_Anchor(AnchorStyles value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    protected virtual bool get_DefaultAutoToolTip();
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    protected virtual Size get_DefaultSize();
    protected virtual ToolStripItemDisplayStyle get_DefaultDisplayStyle();
    protected internal virtual bool get_DismissWhenClicked();
    public virtual ToolStripItemDisplayStyle get_DisplayStyle();
    public virtual void set_DisplayStyle(ToolStripItemDisplayStyle value);
    public void add_DisplayStyleChanged(EventHandler value);
    public void remove_DisplayStyleChanged(EventHandler value);
    private static RightToLeft get_DefaultRightToLeft();
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public bool get_DoubleClickEnabled();
    public void set_DoubleClickEnabled(bool value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    internal void add_InternalEnabledChanged(EventHandler value);
    internal void remove_InternalEnabledChanged(EventHandler value);
    private void EnsureParentDropTargetRegistered();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public int get_Height();
    public void set_Height(int value);
    [NullableContextAttribute("1")]
private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    private sealed virtual override IArrangedElement System.Windows.Forms.Layout.IArrangedElement.get_Container();
    private sealed virtual override Rectangle System.Windows.Forms.Layout.IArrangedElement.get_DisplayRectangle();
    private sealed virtual override bool System.Windows.Forms.Layout.IArrangedElement.get_ParticipatesInLayout();
    [NullableContextAttribute("1")]
private sealed virtual override PropertyStore System.Windows.Forms.Layout.IArrangedElement.get_Properties();
    private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.SetBounds(Rectangle bounds, BoundsSpecified specified);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.PerformLayout(IArrangedElement container, string propertyName);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    [NullableContextAttribute("1")]
internal ToolStripItemImageIndexer get_ImageIndexer();
    [NullableContextAttribute("1")]
public string get_ImageKey();
    [NullableContextAttribute("1")]
public void set_ImageKey(string value);
    public ToolStripItemImageScaling get_ImageScaling();
    public void set_ImageScaling(ToolStripItemImageScaling value);
    [NullableContextAttribute("1")]
internal ToolStripItemInternalLayout get_InternalLayout();
    internal bool get_IsForeColorSet();
    internal bool get_IsInDesignMode();
    public bool get_IsDisposed();
    public bool get_IsOnDropDown();
    public bool get_IsOnOverflow();
    internal virtual bool get_IsMnemonicsListenerAxSourced();
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public MergeAction get_MergeAction();
    public void set_MergeAction(MergeAction value);
    public int get_MergeIndex();
    public void set_MergeIndex(int value);
    internal bool get_MouseDownAndUpMustBeInSameItem();
    internal void set_MouseDownAndUpMustBeInSameItem(bool value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public string get_Name();
    public void set_Name(string value);
    public ToolStrip get_Owner();
    public void set_Owner(ToolStrip value);
    public ToolStripItem get_OwnerItem();
    public void add_OwnerChanged(EventHandler value);
    public void remove_OwnerChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected internal ToolStrip get_Parent();
    protected internal void set_Parent(ToolStrip value);
    public ToolStripItemOverflow get_Overflow();
    public void set_Overflow(ToolStripItemOverflow value);
    public virtual Padding get_Padding();
    public virtual void set_Padding(Padding value);
    internal ToolStrip get_ParentInternal();
    internal void set_ParentInternal(ToolStrip value);
    public ToolStripItemPlacement get_Placement();
    internal Size get_PreferredImageSize();
    [NullableContextAttribute("1")]
internal PropertyStore get_Properties();
    public virtual bool get_Pressed();
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    internal Color get_RawBackColor();
    internal ToolStripRenderer get_Renderer();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    internal Image get_MirroredImage();
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<bool> System.Windows.Forms.ICommandBindingTargetProvider.get_PreviousEnabledStatus();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Forms.ICommandBindingTargetProvider.set_PreviousEnabledStatus(Nullable`1<bool> value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public virtual bool get_Selected();
    protected internal virtual bool get_ShowKeyboardCues();
    public virtual Size get_Size();
    public virtual void set_Size(Size value);
    internal bool get_SupportsRightClick();
    internal void set_SupportsRightClick(bool value);
    internal bool get_SupportsItemClick();
    internal void set_SupportsItemClick(bool value);
    internal bool get_SupportsSpaceKey();
    internal void set_SupportsSpaceKey(bool value);
    internal bool get_SupportsDisabledHotTracking();
    internal void set_SupportsDisabledHotTracking(bool value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public int get_Width();
    public void set_Width(int value);
    internal void AccessibilityNotifyClients(AccessibleEvents accEvent);
    private void Animate();
    private void StopAnimate();
    private void Animate(bool animate);
    internal bool BeginDragForItemReorder();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [NullableContextAttribute("1")]
private protected virtual ToolStripItemInternalLayout CreateInternalLayout();
    protected virtual void Dispose(bool disposing);
    internal static long get_DoubleClickTicks();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects, Bitmap dragImage, Point cursorOffset, bool useDefaultDragImage);
    [NullableContextAttribute("1")]
internal Interface CreateDropSource(IDataObject dataObject, Bitmap dragImage, Point cursorOffset, bool useDefaultDragImage);
    internal void FireEvent(ToolStripItemEventType met);
    [NullableContextAttribute("1")]
internal void FireEvent(EventArgs e, ToolStripItemEventType met);
    [NullableContextAttribute("1")]
internal void FireEventInteractive(EventArgs e, ToolStripItemEventType met);
    private Font GetOwnerFont();
    public ToolStrip GetCurrentParent();
    internal ToolStripDropDown GetCurrentParentDropDown();
    public virtual Size GetPreferredSize(Size constrainingSize);
    internal Size GetTextSize();
    public void Invalidate();
    public void Invalidate(Rectangle r);
    [NullableContextAttribute("1")]
internal void InvalidateItemLayout(string affectedProperty);
    internal void InvalidateImageListImage();
    internal void InvokePaint();
    protected internal virtual bool IsInputKey(Keys keyData);
    protected internal virtual bool IsInputChar(char charCode);
    [NullableContextAttribute("1")]
private void HandleClick(EventArgs e);
    [NullableContextAttribute("1")]
private void HandleDoubleClick(EventArgs e);
    [NullableContextAttribute("1")]
private void HandlePaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
private void HandleMouseEnter(EventArgs e);
    [NullableContextAttribute("1")]
private void HandleMouseMove(MouseEventArgs mea);
    [NullableContextAttribute("1")]
private void HandleMouseHover(EventArgs e);
    private void HandleLeave();
    [NullableContextAttribute("1")]
private void HandleMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
private void HandleMouseDown(MouseEventArgs e);
    [NullableContextAttribute("1")]
private void HandleMouseUp(MouseEventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnAccessibleDescriptionChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnAccessibleNameChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnAccessibleDefaultActionDescriptionChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal virtual void OnAccessibleRoleChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnBoundsChanged();
    [NullableContextAttribute("1")]
protected virtual void OnClick(EventArgs e);
    [NullableContextAttribute("1")]
protected internal virtual void OnLayout(LayoutEventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs dragEvent);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs dragEvent);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs dragEvent);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.ISupportOleDropSource.OnGiveFeedback(GiveFeedbackEventArgs giveFeedbackEventArgs);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.ISupportOleDropSource.OnQueryContinueDrag(QueryContinueDragEventArgs queryContinueDragEventArgs);
    [NullableContextAttribute("1")]
private void OnAnimationFrameChanged(object o, EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnAvailableChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnCommandChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnCommandCanExecuteChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnCommandParameterChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRequestCommandExecute(EventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.ICommandBindingTargetProvider.RaiseCommandChanged(EventArgs e);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.ICommandBindingTargetProvider.RaiseCommandCanExecuteChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragEnter(DragEventArgs dragEvent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragOver(DragEventArgs dragEvent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragLeave(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDragDrop(DragEventArgs dragEvent);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnDisplayStyleChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnGiveFeedback(GiveFeedbackEventArgs giveFeedbackEvent);
    [NullableContextAttribute("1")]
internal virtual void OnImageScalingSizeChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs queryContinueDragEvent);
    [NullableContextAttribute("1")]
protected virtual void OnDoubleClick(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal void OnInternalEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnForeColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLocationChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseEnter(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseMove(MouseEventArgs mea);
    [NullableContextAttribute("1")]
protected virtual void OnMouseHover(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseLeave(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseDown(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnMouseUp(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentBackColorChanged(EventArgs e);
    protected virtual void OnParentChanged(ToolStrip oldParent, ToolStrip newParent);
    [NullableContextAttribute("1")]
protected internal virtual void OnParentEnabledChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected internal virtual void OnOwnerFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnParentForeColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected internal virtual void OnParentRightToLeftChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnOwnerChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
internal void OnOwnerTextDirectionChanged();
    [NullableContextAttribute("1")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnVisibleChanged(EventArgs e);
    public void PerformClick();
    internal void Push(bool push);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    [NullableContextAttribute("1")]
internal void RaiseCancelEvent(object key, CancelEventArgs e);
    [NullableContextAttribute("1")]
internal void RaiseDragEvent(object key, DragEventArgs e);
    [NullableContextAttribute("1")]
internal void RaiseKeyEvent(object key, KeyEventArgs e);
    [NullableContextAttribute("1")]
internal void RaiseKeyPressEvent(object key, KeyPressEventArgs e);
    [NullableContextAttribute("1")]
internal void RaiseMouseEvent(object key, MouseEventArgs e);
    [NullableContextAttribute("1")]
internal void RaisePaintEvent(object key, PaintEventArgs e);
    [NullableContextAttribute("1")]
internal void RaiseQueryContinueDragEvent(object key, QueryContinueDragEventArgs e);
    internal virtual void ReleaseUiaProvider();
    private void ResetToolTipText();
    internal virtual void ToolStrip_RescaleConstants(int oldDpi, int newDpi);
    internal void RescaleConstantsInternal(int newDpi);
    public void Select();
    internal void Select(bool forceRaiseAccessibilityFocusChanged);
    internal void SetOwner(ToolStrip newOwner);
    protected virtual void SetVisibleCore(bool visible);
    protected internal virtual void SetBounds(Rectangle bounds);
    internal void SetBounds(int x, int y, int width, int height);
    internal void SetPlacement(ToolStripItemPlacement placement);
    internal void SetAmbientMargin();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeImageTransparentColor();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeBackColor();
    private bool ShouldSerializeDisplayStyle();
    private bool ShouldSerializeToolTipText();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeForeColor();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeFont();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializePadding();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeMargin();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeVisible();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeImage();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeImageKey();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeImageIndex();
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeRightToLeft();
    private bool ShouldSerializeTextDirection();
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetDisplayStyle();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetFont();
    [EditorBrowsableAttribute("1")]
public virtual void ResetImage();
    [EditorBrowsableAttribute("1")]
private void ResetImageTransparentColor();
    [EditorBrowsableAttribute("1")]
public void ResetMargin();
    [EditorBrowsableAttribute("1")]
public void ResetPadding();
    [EditorBrowsableAttribute("1")]
public virtual void ResetRightToLeft();
    [EditorBrowsableAttribute("1")]
public virtual void ResetTextDirection();
    internal Point TranslatePoint(Point fromPoint, ToolStripPointType fromPointType, ToolStripPointType toPointType);
    internal static bool GetIsOffscreenPropertyValue(Nullable`1<ToolStripItemPlacement> toolStripItemPlacement, Rectangle bounds);
    internal ToolStrip get_RootToolStrip();
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal void Unselect();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.CanShowToolTipsNow();
    private sealed virtual override Rectangle System.Windows.Forms.IKeyboardToolTip.GetNativeScreenRectangle();
    [NullableContextAttribute("1")]
private sealed virtual override IList`1<Rectangle> System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsHoveredWithMouse();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.HasRtlModeEnabled();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsToolTip();
    [NullableContextAttribute("1")]
private sealed virtual override IWin32Window System.Windows.Forms.IKeyboardToolTip.GetOwnerWindow();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnHooked(ToolTip toolTip);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnUnhooked(ToolTip toolTip);
    [NullableContextAttribute("1")]
private sealed virtual override string System.Windows.Forms.IKeyboardToolTip.GetCaptionForTool(ToolTip toolTip);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.ShowsOwnToolTip();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsBeingTabbedTo();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsChildrenToShowToolTips();
    [NullableContextAttribute("1")]
internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    [NullableContextAttribute("1")]
internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    internal bool get_IsParentAccessibilityObjectCreated();
    internal virtual bool IsBeingTabbedTo();
    internal bool TryGetExplicitlySetFont(Font& local);
    [CompilerGeneratedAttribute]
private bool <ReleaseUiaProvider>g__TryGetAccessibilityObject|540_0(AccessibleObject& accessibleObject);
}
public enum System.Windows.Forms.ToolStripItemAlignment : Enum {
    public int value__;
    public static ToolStripItemAlignment Left;
    public static ToolStripItemAlignment Right;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripItemClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ToolStripItem <ClickedItem>k__BackingField;
    public ToolStripItem ClickedItem { get; }
    public ToolStripItemClickedEventArgs(ToolStripItem clickedItem);
    [CompilerGeneratedAttribute]
public ToolStripItem get_ClickedItem();
}
public class System.Windows.Forms.ToolStripItemClickedEventHandler : MulticastDelegate {
    public ToolStripItemClickedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripItemClickedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemClickedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.ToolStripCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.ToolStripItemCollection : ArrangedElementCollection {
    [NullableAttribute("2")]
private ToolStrip _owner;
    private bool _itemsCollection;
    private bool _isReadOnly;
    private int _lastAccessedIndex;
    public ToolStripItem Item { get; }
    [NullableAttribute("2")]
public ToolStripItem Item { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    [NullableContextAttribute("2")]
internal ToolStripItemCollection(ToolStrip owner, bool itemsCollection);
    [NullableContextAttribute("2")]
internal ToolStripItemCollection(ToolStrip owner, bool itemsCollection, bool isReadOnly);
    public ToolStripItemCollection(ToolStrip owner, ToolStripItem[] value);
    public virtual ToolStripItem get_Item(int index);
    [NullableContextAttribute("2")]
public virtual ToolStripItem get_Item(string key);
    public ToolStripItem Add(string text);
    public ToolStripItem Add(Image image);
    [NullableContextAttribute("2")]
public ToolStripItem Add(string text, Image image);
    [NullableContextAttribute("2")]
public ToolStripItem Add(string text, Image image, EventHandler onClick);
    public int Add(ToolStripItem value);
    public void AddRange(ToolStripItem[] toolStripItems);
    public void AddRange(ToolStripItemCollection toolStripItems);
    public bool Contains(ToolStripItem value);
    public virtual void Clear();
    [NullableContextAttribute("2")]
public virtual bool ContainsKey(string key);
    private void CheckCanAddOrInsertItem(ToolStripItem value);
    public ToolStripItem[] Find(string key, bool searchAllChildren);
    private static void FindInternal(string key, bool searchAllChildren, ToolStripItemCollection itemsToLookIn, List`1<ToolStripItem> foundItems);
    public virtual bool get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Insert(int index, ToolStripItem value);
    public int IndexOf(ToolStripItem value);
    [NullableContextAttribute("2")]
public virtual int IndexOfKey(string key);
    private bool IsValidIndex(int index);
    private void OnAfterRemove(ToolStripItem item);
    public void Remove(ToolStripItem value);
    public void RemoveAt(int index);
    [NullableContextAttribute("2")]
public virtual void RemoveByKey(string key);
    public void CopyTo(ToolStripItem[] array, int index);
    internal void MoveItem(ToolStripItem value);
    internal void MoveItem(int index, ToolStripItem value);
    private void SetOwner(ToolStripItem item);
}
public enum System.Windows.Forms.ToolStripItemDisplayStyle : Enum {
    public int value__;
    public static ToolStripItemDisplayStyle None;
    public static ToolStripItemDisplayStyle Text;
    public static ToolStripItemDisplayStyle Image;
    public static ToolStripItemDisplayStyle ImageAndText;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ToolStripItem <Item>k__BackingField;
    public ToolStripItem Item { get; }
    public ToolStripItemEventArgs(ToolStripItem item);
    [CompilerGeneratedAttribute]
public ToolStripItem get_Item();
}
public class System.Windows.Forms.ToolStripItemEventHandler : MulticastDelegate {
    public ToolStripItemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Windows.Forms.ToolStripItemEventType : Enum {
    public int value__;
    public static ToolStripItemEventType Paint;
    public static ToolStripItemEventType LocationChanged;
    public static ToolStripItemEventType MouseUp;
    public static ToolStripItemEventType MouseDown;
    public static ToolStripItemEventType MouseMove;
    public static ToolStripItemEventType MouseEnter;
    public static ToolStripItemEventType MouseLeave;
    public static ToolStripItemEventType MouseHover;
    public static ToolStripItemEventType Click;
    public static ToolStripItemEventType DoubleClick;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripItemImageRenderEventArgs : ToolStripItemRenderEventArgs {
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <ImageRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShiftOnPress>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageAttributes <ImageAttributes>k__BackingField;
    public Image Image { get; }
    public Rectangle ImageRectangle { get; }
    internal bool ShiftOnPress { get; internal set; }
    internal ImageAttributes ImageAttributes { get; internal set; }
    [NullableContextAttribute("1")]
public ToolStripItemImageRenderEventArgs(Graphics g, ToolStripItem item, Rectangle imageRectangle);
    [NullableContextAttribute("1")]
public ToolStripItemImageRenderEventArgs(Graphics g, ToolStripItem item, Image image, Rectangle imageRectangle);
    [CompilerGeneratedAttribute]
public Image get_Image();
    [CompilerGeneratedAttribute]
public Rectangle get_ImageRectangle();
    [CompilerGeneratedAttribute]
internal bool get_ShiftOnPress();
    [CompilerGeneratedAttribute]
internal void set_ShiftOnPress(bool value);
    [CompilerGeneratedAttribute]
internal ImageAttributes get_ImageAttributes();
    [CompilerGeneratedAttribute]
internal void set_ImageAttributes(ImageAttributes value);
}
public class System.Windows.Forms.ToolStripItemImageRenderEventHandler : MulticastDelegate {
    public ToolStripItemImageRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripItemImageRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemImageRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripItemImageScaling : Enum {
    public int value__;
    public static ToolStripItemImageScaling None;
    public static ToolStripItemImageScaling SizeToFit;
}
public enum System.Windows.Forms.ToolStripItemOverflow : Enum {
    public int value__;
    public static ToolStripItemOverflow Never;
    public static ToolStripItemOverflow Always;
    public static ToolStripItemOverflow AsNeeded;
}
public enum System.Windows.Forms.ToolStripItemPlacement : Enum {
    public int value__;
    public static ToolStripItemPlacement Main;
    public static ToolStripItemPlacement Overflow;
    public static ToolStripItemPlacement None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripItemRenderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripItem <Item>k__BackingField;
    public Graphics Graphics { get; }
    public ToolStripItem Item { get; }
    [NullableAttribute("2")]
public ToolStrip ToolStrip { get; }
    public ToolStripItemRenderEventArgs(Graphics g, ToolStripItem item);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public ToolStripItem get_Item();
    [NullableContextAttribute("2")]
public ToolStrip get_ToolStrip();
}
public class System.Windows.Forms.ToolStripItemRenderEventHandler : MulticastDelegate {
    public ToolStripItemRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripItemRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Windows.Forms.ToolStripItemStates : Enum {
    public int value__;
    public static ToolStripItemStates None;
    public static ToolStripItemStates Selected;
    public static ToolStripItemStates Focused;
    public static ToolStripItemStates Hot;
    public static ToolStripItemStates Pressed;
    public static ToolStripItemStates Disabled;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripItemTextRenderEventArgs : ToolStripItemRenderEventArgs {
    private Color _textColor;
    private bool _textColorChanged;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <DefaultTextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Font <TextFont>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <TextRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private TextFormatFlags <TextFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripTextDirection <TextDirection>k__BackingField;
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    internal Color DefaultTextColor { get; internal set; }
    public Font TextFont { get; public set; }
    public Rectangle TextRectangle { get; public set; }
    public TextFormatFlags TextFormat { get; public set; }
    public ToolStripTextDirection TextDirection { get; public set; }
    [NullableContextAttribute("1")]
public ToolStripItemTextRenderEventArgs(Graphics g, ToolStripItem item, string text, Rectangle textRectangle, Color textColor, Font textFont, TextFormatFlags format);
    [NullableContextAttribute("1")]
public ToolStripItemTextRenderEventArgs(Graphics g, ToolStripItem item, string text, Rectangle textRectangle, Color textColor, Font textFont, ContentAlignment textAlign);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    [CompilerGeneratedAttribute]
internal Color get_DefaultTextColor();
    [CompilerGeneratedAttribute]
internal void set_DefaultTextColor(Color value);
    [CompilerGeneratedAttribute]
public Font get_TextFont();
    [CompilerGeneratedAttribute]
public void set_TextFont(Font value);
    [CompilerGeneratedAttribute]
public Rectangle get_TextRectangle();
    [CompilerGeneratedAttribute]
public void set_TextRectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public TextFormatFlags get_TextFormat();
    [CompilerGeneratedAttribute]
public void set_TextFormat(TextFormatFlags value);
    [CompilerGeneratedAttribute]
public ToolStripTextDirection get_TextDirection();
    [CompilerGeneratedAttribute]
public void set_TextDirection(ToolStripTextDirection value);
}
public class System.Windows.Forms.ToolStripItemTextRenderEventHandler : MulticastDelegate {
    public ToolStripItemTextRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripItemTextRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemTextRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("1")]
public class System.Windows.Forms.ToolStripLabel : ToolStripItem {
    private LinkBehavior _linkBehavior;
    private bool _isLink;
    private bool _linkVisited;
    private Color _linkColor;
    private Color _activeLinkColor;
    private Color _visitedLinkColor;
    [NullableAttribute("2")]
private Font _hoverLinkFont;
    [NullableAttribute("2")]
private Font _linkFont;
    [NullableAttribute("2")]
private Cursor _lastCursor;
    public bool CanSelect { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripLabelIsLinkDescr")]
public bool IsLink { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelActiveLinkColorDescr")]
public Color ActiveLinkColor { get; public set; }
    private static Color IELinkColor { get; }
    private static Color IEActiveLinkColor { get; }
    private static Color IEVisitedLinkColor { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripLabelLinkBehaviorDescr")]
public LinkBehavior LinkBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelLinkColorDescr")]
public Color LinkColor { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelLinkVisitedDescr")]
public bool LinkVisited { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelVisitedLinkColorDescr")]
public Color VisitedLinkColor { get; public set; }
    [NullableContextAttribute("2")]
public ToolStripLabel(string text);
    [NullableContextAttribute("2")]
public ToolStripLabel(Image image);
    [NullableContextAttribute("2")]
public ToolStripLabel(string text, Image image);
    [NullableContextAttribute("2")]
public ToolStripLabel(string text, Image image, bool isLink);
    [NullableContextAttribute("2")]
public ToolStripLabel(string text, Image image, bool isLink, EventHandler onClick);
    [NullableContextAttribute("2")]
public ToolStripLabel(string text, Image image, bool isLink, EventHandler onClick, string name);
    public virtual bool get_CanSelect();
    public bool get_IsLink();
    public void set_IsLink(bool value);
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    private static Color get_IELinkColor();
    private static Color get_IEActiveLinkColor();
    private static Color get_IEVisitedLinkColor();
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public bool get_LinkVisited();
    public void set_LinkVisited(bool value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    private void InvalidateLinkFonts();
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    private void ResetActiveLinkColor();
    private void ResetLinkColor();
    private void ResetVisitedLinkColor();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeActiveLinkColor();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeLinkColor();
    [EditorBrowsableAttribute("1")]
private bool ShouldSerializeVisitedLinkColor();
    private protected virtual ToolStripItemInternalLayout CreateInternalLayout();
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnPaint(PaintEventArgs e);
    internal void PaintText(Graphics g);
    protected internal virtual bool ProcessMnemonic(char charCode);
}
public enum System.Windows.Forms.ToolStripLayoutStyle : Enum {
    public int value__;
    public static ToolStripLayoutStyle StackWithOverflow;
    public static ToolStripLayoutStyle HorizontalStackWithOverflow;
    public static ToolStripLayoutStyle VerticalStackWithOverflow;
    public static ToolStripLayoutStyle Flow;
    public static ToolStripLayoutStyle Table;
}
internal class System.Windows.Forms.ToolStripLocationCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private Point <NewLocation>k__BackingField;
    public Point NewLocation { get; }
    public ToolStripLocationCancelEventArgs(Point newLocation, bool value);
    [CompilerGeneratedAttribute]
public Point get_NewLocation();
}
internal class System.Windows.Forms.ToolStripLocationCancelEventHandler : MulticastDelegate {
    public ToolStripLocationCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripLocationCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripLocationCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.ToolStripManager : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static WeakRefCollection t_toolStripWeakArrayList;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static WeakRefCollection t_toolStripPanelWeakArrayList;
    [ThreadStaticAttribute]
private static bool t_initialized;
    [NullableAttribute("2")]
private static Font s_defaultFont;
    private static ConcurrentDictionary`2<int, Font> s_defaultFontCache;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Delegate[] t_staticEventHandlers;
    private static int StaticEventDefaultRendererChanged;
    private static int StaticEventCount;
    private static object s_internalSyncObject;
    [CompilerGeneratedAttribute]
private static int <CurrentDpi>k__BackingField;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static ToolStripRenderer t_defaultRenderer;
    internal static Type s_systemRendererType;
    internal static Type s_professionalRendererType;
    private static bool s_visualStylesEnabledIfPossible;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Type t_currentRendererType;
    internal static Font DefaultFont { get; }
    internal static int CurrentDpi { get; internal set; }
    internal static WeakRefCollection ToolStrips { get; }
    private static Type CurrentRendererType { get; private set; }
    private static Type s_defaultRendererType { get; }
    public static ToolStripRenderer Renderer { get; public set; }
    public static ToolStripManagerRenderMode RenderMode { get; public set; }
    public static bool VisualStylesEnabled { get; public set; }
    internal static WeakRefCollection ToolStripPanels { get; }
    internal static bool ShowMenuFocusCues { get; }
    private static ToolStripManager();
    private static void InitializeThread();
    internal static Font get_DefaultFont();
    [CompilerGeneratedAttribute]
internal static int get_CurrentDpi();
    [CompilerGeneratedAttribute]
internal static void set_CurrentDpi(int value);
    internal static WeakRefCollection get_ToolStrips();
    [NullableContextAttribute("2")]
private static void AddEventHandler(int key, Delegate value);
    public static ToolStrip FindToolStrip(string toolStripName);
    internal static ToolStrip FindToolStrip(Form owningForm, string toolStripName);
    private static bool CanChangeSelection(ToolStrip start, ToolStrip toolStrip);
    private static bool ChangeSelection(ToolStrip start, ToolStrip toolStrip);
    [NullableContextAttribute("2")]
private static Delegate GetEventHandler(int key);
    private static bool IsOnSameWindow(Control control1, Control control2);
    internal static bool IsThreadUsingToolStrips();
    private static void OnUserPreferenceChanging(object sender, UserPreferenceChangingEventArgs e);
    internal static void NotifyMenuModeChange(bool invalidateText, bool activationChange);
    internal static void PruneToolStripList();
    [NullableContextAttribute("2")]
private static void RemoveEventHandler(int key, Delegate value);
    internal static bool SelectNextToolStrip(ToolStrip start, bool forward);
    private static Type get_CurrentRendererType();
    private static void set_CurrentRendererType(Type value);
    private static Type get_s_defaultRendererType();
    public static ToolStripRenderer get_Renderer();
    public static void set_Renderer(ToolStripRenderer value);
    [NullableContextAttribute("2")]
public static void add_RendererChanged(EventHandler value);
    [NullableContextAttribute("2")]
public static void remove_RendererChanged(EventHandler value);
    public static ToolStripManagerRenderMode get_RenderMode();
    public static void set_RenderMode(ToolStripManagerRenderMode value);
    public static bool get_VisualStylesEnabled();
    public static void set_VisualStylesEnabled(bool value);
    internal static ToolStripRenderer CreateRenderer(ToolStripManagerRenderMode renderMode);
    internal static ToolStripRenderer CreateRenderer(ToolStripRenderMode renderMode);
    internal static WeakRefCollection get_ToolStripPanels();
    internal static ToolStripPanel ToolStripPanelFromPoint(Control draggedControl, Point screenLocation);
    public static void LoadSettings(Form targetForm);
    public static void LoadSettings(Form targetForm, string key);
    public static void SaveSettings(Form sourceForm);
    public static void SaveSettings(Form sourceForm, string key);
    internal static bool get_ShowMenuFocusCues();
    public static bool IsValidShortcut(Keys shortcut);
    internal static bool IsMenuKey(Keys keyData);
    public static bool IsShortcutDefined(Keys shortcut);
    internal static bool ProcessCmdKey(Message& m, Keys keyData);
    internal static bool ProcessShortcut(Message& m, Keys shortcut);
    internal static bool ProcessMenuKey(Message& m);
    internal static MenuStrip GetMainMenuStrip(Control control);
    private static MenuStrip GetFirstMenuStripRecursive(ControlCollection controlsToLookIn);
    private static ToolStripItem FindMatch(ToolStripItem source, ToolStripItemCollection destinationItems);
    internal static List`1<ToolStrip> FindMergeableToolStrips(ContainerControl container);
    private static bool IsSpecialMDIStrip(ToolStrip toolStrip);
    public static bool Merge(ToolStrip sourceToolStrip, ToolStrip targetToolStrip);
    private static void MergeRecursive(ToolStripItem source, ToolStripItemCollection destinationItems, Stack`1<MergeHistoryItem> history);
    public static bool Merge(ToolStrip sourceToolStrip, string targetName);
    internal static bool RevertMergeInternal(ToolStrip targetToolStrip, ToolStrip sourceToolStrip, bool revertMDIControls);
    public static bool RevertMerge(ToolStrip targetToolStrip);
    public static bool RevertMerge(ToolStrip targetToolStrip, ToolStrip sourceToolStrip);
    public static bool RevertMerge(string targetName);
}
public enum System.Windows.Forms.ToolStripManagerRenderMode : Enum {
    public int value__;
    [BrowsableAttribute("False")]
public static ToolStripManagerRenderMode Custom;
    public static ToolStripManagerRenderMode System;
    public static ToolStripManagerRenderMode Professional;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("6")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ToolStripMenuItemCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ToolStripMenuItem : ToolStripDropDownItem {
    private static MenuTimer s_menuTimer;
    private static int s_propShortcutKeys;
    private static int s_propCheckState;
    private static int s_propMdiForm;
    private bool _checkOnClick;
    private bool _showShortcutKeys;
    [NullableAttribute("2")]
private ToolStrip _lastOwner;
    private int _nativeMenuCommandID;
    [NullableAttribute("0")]
private HandleRef`1<HWND> _targetWindowHandle;
    private HMENU _nativeMenuHandle;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Image t_indeterminateCheckedImage;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Image t_checkedImage;
    [NullableAttribute("2")]
private string _shortcutKeyDisplayString;
    [NullableAttribute("2")]
private string _cachedShortcutText;
    private Size _cachedShortcutSize;
    private static Padding s_defaultPadding;
    private static Padding s_defaultDropDownPadding;
    private static Size s_checkMarkBitmapSize;
    private Padding _scaledDefaultPadding;
    private Padding _scaledDefaultDropDownPadding;
    private Size _scaledCheckMarkBitmapSize;
    private byte _openMouseId;
    private static object s_eventCheckedChanged;
    private static object s_eventCheckStateChanged;
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    public bool Enabled { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckedDescr")]
public bool Checked { get; public set; }
    [NullableAttribute("2")]
internal Image CheckedImage { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripButtonCheckOnClickDescr")]
public bool CheckOnClick { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckStateDescr")]
public CheckState CheckState { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripItemOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
public ToolStripItemOverflow Overflow { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MenuItemShortCutDescr")]
public Keys ShortcutKeys { get; public set; }
    [NullableAttribute("2")]
[SRDescriptionAttribute("ToolStripMenuItemShortcutKeyDisplayStringDescr")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
public string ShortcutKeyDisplayString { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("MenuItemShowShortCutDescr")]
public bool ShowShortcutKeys { get; public set; }
    internal bool IsTopLevel { get; }
    [BrowsableAttribute("False")]
public bool IsMdiWindowListEntry { get; }
    internal static MenuTimer MenuTimer { get; }
    [NullableAttribute("2")]
internal Form MdiForm { get; }
    internal int DeviceDpi { get; internal set; }
    [NullableContextAttribute("2")]
public ToolStripMenuItem(string text);
    [NullableContextAttribute("2")]
public ToolStripMenuItem(Image image);
    [NullableContextAttribute("2")]
public ToolStripMenuItem(string text, Image image);
    [NullableContextAttribute("2")]
public ToolStripMenuItem(string text, Image image, EventHandler onClick);
    [NullableContextAttribute("2")]
public ToolStripMenuItem(string text, Image image, EventHandler onClick, string name);
    [NullableContextAttribute("2")]
public ToolStripMenuItem(string text, Image image, ToolStripItem[] dropDownItems);
    [NullableContextAttribute("2")]
public ToolStripMenuItem(string text, Image image, EventHandler onClick, Keys shortcutKeys);
    internal ToolStripMenuItem(Form mdiForm);
    internal ToolStripMenuItem(HMENU hmenu, int nativeMenuCommandId, IWin32Window targetWindow);
    private static ToolStripMenuItem();
    internal virtual void AutoHide(ToolStripItem otherItemBeingSelected);
    private void ClearShortcutCache();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    private protected virtual ToolStripItemInternalLayout CreateInternalLayout();
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    private void Initialize();
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    [NullableContextAttribute("2")]
internal Image get_CheckedImage();
    private static Bitmap GetBitmapFromIcon(string iconName, Size desiredIconSize);
    public bool get_CheckOnClick();
    public void set_CheckOnClick(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    [NullableContextAttribute("2")]
public void add_CheckedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CheckedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_CheckStateChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_CheckStateChanged(EventHandler value);
    public ToolStripItemOverflow get_Overflow();
    public void set_Overflow(ToolStripItemOverflow value);
    public Keys get_ShortcutKeys();
    public void set_ShortcutKeys(Keys value);
    [NullableContextAttribute("2")]
public string get_ShortcutKeyDisplayString();
    [NullableContextAttribute("2")]
public void set_ShortcutKeyDisplayString(string value);
    public bool get_ShowShortcutKeys();
    public void set_ShowShortcutKeys(bool value);
    internal bool get_IsTopLevel();
    public bool get_IsMdiWindowListEntry();
    internal static MenuTimer get_MenuTimer();
    [NullableContextAttribute("2")]
internal Form get_MdiForm();
    internal ToolStripMenuItem Clone();
    internal virtual int get_DeviceDpi();
    internal virtual void set_DeviceDpi(int value);
    protected virtual void Dispose(bool disposing);
    private bool GetNativeMenuItemEnabled();
    [NullableContextAttribute("2")]
private string GetNativeMenuItemTextAndShortcut();
    [NullableContextAttribute("2")]
private Image GetNativeMenuItemImage();
    internal Size GetShortcutTextSize();
    [NullableContextAttribute("2")]
internal string GetShortcutText();
    internal void HandleAutoExpansion();
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnCheckStateChanged(EventArgs e);
    protected virtual void OnDropDownHide(EventArgs e);
    protected virtual void OnDropDownShow(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    internal void OnMenuAutoExpand();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    private void OnMouseButtonStateChange(MouseEventArgs e, bool isMouseDown);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnOwnerChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected internal virtual void SetBounds(Rectangle rect);
    internal void SetNativeTargetWindow(IWin32Window window);
    internal void SetNativeTargetMenu(HMENU hmenu);
    [NullableContextAttribute("2")]
internal static string ShortcutToText(Keys shortcutKeys, string shortcutKeyDisplayString);
    internal virtual bool IsBeingTabbedTo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripNumericUpDown : ToolStripControlHost {
    private ToolStripNumericUpDownControl _numericUpDownControl;
    public NumericUpDown NumericUpDownControl { get; }
    public NumericUpDown get_NumericUpDownControl();
    private static Control CreateControlInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripOverflow : ToolStripDropDown {
    [NullableAttribute("2")]
internal static TraceSwitch PopupLayoutDebug;
    [NullableAttribute("2")]
private ToolStripOverflowButton ownerItem;
    protected internal ToolStripItemCollection DisplayedItems { get; }
    public ToolStripItemCollection Items { get; }
    [NullableAttribute("2")]
private ToolStrip ParentToolStrip { get; }
    private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    [NullableAttribute("2")]
private IArrangedElement System.Windows.Forms.Layout.IArrangedElement.Container { get; }
    private bool System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout { get; }
    private PropertyStore System.Windows.Forms.Layout.IArrangedElement.Properties { get; }
    public LayoutEngine LayoutEngine { get; }
    public ToolStripOverflow(ToolStripItem parentItem);
    protected internal virtual ToolStripItemCollection get_DisplayedItems();
    public virtual ToolStripItemCollection get_Items();
    [NullableContextAttribute("2")]
private ToolStrip get_ParentToolStrip();
    private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    [NullableContextAttribute("2")]
private sealed virtual override IArrangedElement System.Windows.Forms.Layout.IArrangedElement.get_Container();
    private sealed virtual override bool System.Windows.Forms.Layout.IArrangedElement.get_ParticipatesInLayout();
    private sealed virtual override PropertyStore System.Windows.Forms.Layout.IArrangedElement.get_Properties();
    private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.SetBounds(Rectangle bounds, BoundsSpecified specified);
    public virtual LayoutEngine get_LayoutEngine();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void SetDisplayedItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("0")]
public class System.Windows.Forms.ToolStripOverflowButton : ToolStripDropDownButton {
    private ToolStrip _parentToolStrip;
    private static bool isScalingInitialized;
    private static int MAX_WIDTH;
    private static int MAX_HEIGHT;
    private static int maxWidth;
    private static int maxHeight;
    protected internal Padding DefaultMargin { get; }
    public bool HasDropDownItems { get; }
    internal bool OppositeDropDownAlign { get; }
    internal ToolStrip ParentToolStrip { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    internal ToolStripOverflowButton(ToolStrip parentToolStrip);
    private static ToolStripOverflowButton();
    protected virtual void Dispose(bool disposing);
    protected internal virtual Padding get_DefaultMargin();
    public virtual bool get_HasDropDownItems();
    internal virtual bool get_OppositeDropDownAlign();
    internal ToolStrip get_ParentToolStrip();
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected internal virtual void SetBounds(Rectangle bounds);
    protected virtual void OnPaint(PaintEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxBitmapAttribute("System.Windows.Forms.ToolStripPanel", "ToolStripPanel_standalone")]
public class System.Windows.Forms.ToolStripPanel : ContainerControl {
    private Orientation _orientation;
    private static Padding s_rowMargin;
    private Padding _scaledRowMargin;
    [NullableAttribute("2")]
private ToolStripRendererSwitcher _rendererSwitcher;
    private BitVector32 _state;
    [NullableAttribute("2")]
private ToolStripContainer _owner;
    [NullableAttribute("2")]
internal static TraceSwitch s_toolStripPanelDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_toolStripPanelFeedbackDebug;
    [NullableAttribute("2")]
internal static TraceSwitch s_toolStripPanelMissingRowDebug;
    private static int s_propToolStripPanelRowCollection;
    private static int s_stateLocked;
    private static int s_stateBeginInit;
    private static int s_stateChangingZOrder;
    private static int s_stateInJoin;
    private static int s_stateEndInit;
    private static int s_stateLayoutSuspended;
    private static int s_stateRightToLeftChanged;
    internal static Padding s_dragMargin;
    private static object s_eventRendererChanged;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static FeedbackRectangle feedbackRect;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [DefaultValueAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    protected Padding DefaultPadding { get; }
    protected Padding DefaultMargin { get; }
    public Padding RowMargin { get; public set; }
    public DockStyle Dock { get; public set; }
    internal Rectangle DragBounds { get; }
    internal bool IsInDesignMode { get; }
    public LayoutEngine LayoutEngine { get; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool Locked { get; public set; }
    public Orientation Orientation { get; public set; }
    private ToolStripRendererSwitcher RendererSwitcher { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer Renderer { get; public set; }
    [SRDescriptionAttribute("ToolStripRenderModeDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripRenderMode RenderMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ToolStripPanelRowsDescr")]
internal ToolStripPanelRowCollection RowsInternal { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolStripPanelRowsDescr")]
public ToolStripPanelRow[] Rows { get; }
    internal bool SupportsUiaProviders { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int TabIndex { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [NullableAttribute("2")]
private static FeedbackRectangle CurrentFeedbackRect { get; private set; }
    private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    internal ToolStripPanel(ToolStripContainer owner);
    private static ToolStripPanel();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    [NullableContextAttribute("2")]
public void add_AutoSizeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoSizeChanged(EventHandler value);
    protected virtual Padding get_DefaultPadding();
    protected virtual Padding get_DefaultMargin();
    public Padding get_RowMargin();
    public void set_RowMargin(Padding value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    internal Rectangle get_DragBounds();
    internal bool get_IsInDesignMode();
    public virtual LayoutEngine get_LayoutEngine();
    public bool get_Locked();
    public void set_Locked(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private ToolStripRendererSwitcher get_RendererSwitcher();
    public ToolStripRenderer get_Renderer();
    public void set_Renderer(ToolStripRenderer value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    [NullableContextAttribute("2")]
public void add_RendererChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_RendererChanged(EventHandler value);
    internal ToolStripPanelRowCollection get_RowsInternal();
    public ToolStripPanelRow[] get_Rows();
    internal virtual bool get_SupportsUiaProviders();
    public int get_TabIndex();
    public void set_TabIndex(int value);
    [NullableContextAttribute("2")]
public void add_TabIndexChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    [NullableContextAttribute("2")]
public void add_TabStopChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [NullableContextAttribute("2")]
public void add_TextChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextChanged(EventHandler value);
    public void BeginInit();
    public void EndInit();
    private ToolStripPanelRowCollection CreateToolStripPanelRowCollection();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ControlCollection CreateControlsInstance();
    protected virtual void Dispose(bool disposing);
    private void InitFlowLayout();
    private Point GetStartLocation(ToolStrip toolStripToDrag);
    private void HandleRendererChanged(object sender, EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnControlAdded(ControlEventArgs e);
    protected virtual void OnControlRemoved(ControlEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    internal virtual void OnLayoutSuspended();
    internal virtual void OnLayoutResuming(bool resumeLayout);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnRendererChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnDockChanged(EventArgs e);
    internal void PerformUpdate();
    internal void PerformUpdate(bool forceLayout);
    private void ResetRenderMode();
    private bool ShouldSerializeRenderMode();
    private bool ShouldSerializeDock();
    private void JoinControls();
    private void JoinControls(bool forceLayout);
    private void GiveToolStripPanelFeedback(ToolStrip toolStripToDrag, Point screenLocation);
    internal static void ClearDragFeedback();
    [NullableContextAttribute("2")]
private static FeedbackRectangle get_CurrentFeedbackRect();
    [NullableContextAttribute("2")]
private static void set_CurrentFeedbackRect(FeedbackRectangle value);
    public void Join(ToolStrip toolStripToDrag);
    public void Join(ToolStrip toolStripToDrag, int row);
    public void Join(ToolStrip toolStripToDrag, int x, int y);
    public void Join(ToolStrip toolStripToDrag, Point location);
    [NullableContextAttribute("2")]
internal void MoveControl(ToolStrip toolStripToDrag, Point screenLocation);
    private void MoveInsideContainer(ToolStrip toolStripToDrag, Point clientLocation);
    private void MoveOutsideContainer(ToolStrip toolStripToDrag, Point screenLocation);
    [NullableContextAttribute("2")]
public ToolStripPanelRow PointToRow(Point clientLocation);
    [ConditionalAttribute("DEBUG")]
private void Debug_VerifyOneToOneCellRowControlMatchup();
    [ConditionalAttribute("DEBUG")]
private void Debug_PrintRows();
    [ConditionalAttribute("DEBUG")]
private void Debug_VerifyCountRows();
    [ConditionalAttribute("DEBUG")]
private void Debug_VerifyNoOverlaps();
    private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    [CompilerGeneratedAttribute]
internal static object <Debug_VerifyNoOverlaps>g__GetRow|139_0(ISupportToolStripPanel draggedToolStrip, ToolStripPanelRowCollection rows);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripPanelCell : ArrangedElement {
    private ToolStrip _wrappedToolStrip;
    [NullableAttribute("2")]
private ToolStripPanelRow _parent;
    private Size _maxSize;
    private bool _currentlySizing;
    private bool _currentlyDragging;
    private bool _restoreOnVisibleChanged;
    private Rectangle _cachedBounds;
    public Rectangle CachedBounds { get; public set; }
    public Control Control { get; }
    public bool ControlInDesignMode { get; }
    public IArrangedElement InnerElement { get; }
    public ISupportToolStripPanel DraggedControl { get; }
    [NullableAttribute("2")]
public ToolStripPanelRow ToolStripPanelRow { get; public set; }
    public bool Visible { get; public set; }
    public Size MaximumSize { get; }
    public LayoutEngine LayoutEngine { get; }
    public ToolStripPanelCell(Control control);
    public ToolStripPanelCell(ToolStripPanelRow parent, Control control);
    public Rectangle get_CachedBounds();
    public void set_CachedBounds(Rectangle value);
    public Control get_Control();
    public bool get_ControlInDesignMode();
    public IArrangedElement get_InnerElement();
    public ISupportToolStripPanel get_DraggedControl();
    [NullableContextAttribute("2")]
public ToolStripPanelRow get_ToolStripPanelRow();
    [NullableContextAttribute("2")]
public void set_ToolStripPanelRow(ToolStripPanelRow value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public Size get_MaximumSize();
    public virtual LayoutEngine get_LayoutEngine();
    [NullableContextAttribute("2")]
protected virtual IArrangedElement GetContainer();
    public int Grow(int growBy);
    private int GrowVertical(int growBy);
    private int GrowHorizontal(int growBy);
    protected virtual void Dispose(bool disposing);
    protected virtual ArrangedElementCollection GetChildren();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void SetBoundsCore(Rectangle bounds, BoundsSpecified specified);
    public int Shrink(int shrinkBy);
    private static int ShrinkHorizontal(int shrinkBy);
    private static int ShrinkVertical(int shrinkBy);
    private void OnToolStripLocationChanging(object sender, ToolStripLocationCancelEventArgs e);
    private void OnToolStripVisibleChanged(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripPanelRenderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripPanel <ToolStripPanel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public Graphics Graphics { get; }
    public ToolStripPanel ToolStripPanel { get; }
    public bool Handled { get; public set; }
    public ToolStripPanelRenderEventArgs(Graphics g, ToolStripPanel toolStripPanel);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public ToolStripPanel get_ToolStripPanel();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.Windows.Forms.ToolStripPanelRenderEventHandler : MulticastDelegate {
    public ToolStripPanelRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripPanelRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripPanelRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.ToolStripPanelRow : Component {
    private Rectangle _bounds;
    private BitVector32 _state;
    private int _suspendCount;
    [NullableAttribute("2")]
private ToolStripPanelRowManager _rowManager;
    private static int MinAllowedWidth;
    private int _minAllowedWidth;
    private static int s_stateVisible;
    private static int s_stateDisposing;
    private static int s_stateLocked;
    private static int s_stateInitialized;
    private static int s_stateCachedBoundsMode;
    private static int s_stateInLayout;
    private static int s_propControlsCollection;
    [NullableAttribute("2")]
internal static TraceSwitch s_toolStripPanelRowCreationDebug;
    [CompilerGeneratedAttribute]
private PropertyStore <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStripPanel <ToolStripPanel>k__BackingField;
    [NullableAttribute("2")]
internal static TraceSwitch ToolStripPanelMouseDebug;
    public Rectangle Bounds { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlControlsDescr")]
public Control[] Controls { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlControlsDescr")]
internal ToolStripPanelRowControlCollection ControlsInternal { get; }
    internal ArrangedElementCollection Cells { get; }
    internal bool CachedBoundsMode { get; internal set; }
    private ToolStripPanelRowManager RowManager { get; }
    protected Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    public Rectangle DisplayRectangle { get; }
    public LayoutEngine LayoutEngine { get; }
    internal bool Locked { get; }
    private bool Initialized { get; private set; }
    public Padding Margin { get; public set; }
    public Padding Padding { get; public set; }
    internal Control ParentInternal { get; }
    internal PropertyStore Properties { get; }
    public ToolStripPanel ToolStripPanel { get; }
    internal bool Visible { get; }
    public Orientation Orientation { get; }
    private ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.Children { get; }
    private IArrangedElement System.Windows.Forms.Layout.IArrangedElement.Container { get; }
    private Rectangle System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle { get; }
    private bool System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout { get; }
    private PropertyStore System.Windows.Forms.Layout.IArrangedElement.Properties { get; }
    internal Rectangle DragBounds { get; }
    public ToolStripPanelRow(ToolStripPanel parent);
    internal ToolStripPanelRow(ToolStripPanel parent, bool visible);
    private static ToolStripPanelRow();
    public sealed virtual Rectangle get_Bounds();
    public Control[] get_Controls();
    internal ToolStripPanelRowControlCollection get_ControlsInternal();
    internal ArrangedElementCollection get_Cells();
    internal bool get_CachedBoundsMode();
    internal void set_CachedBoundsMode(bool value);
    private ToolStripPanelRowManager get_RowManager();
    protected virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    public Rectangle get_DisplayRectangle();
    public LayoutEngine get_LayoutEngine();
    internal bool get_Locked();
    private bool get_Initialized();
    private void set_Initialized(bool value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public virtual Padding get_Padding();
    public virtual void set_Padding(Padding value);
    internal Control get_ParentInternal();
    [CompilerGeneratedAttribute]
internal PropertyStore get_Properties();
    [CompilerGeneratedAttribute]
public ToolStripPanel get_ToolStripPanel();
    internal bool get_Visible();
    public Orientation get_Orientation();
    public bool CanMove(ToolStrip toolStripToDrag);
    private ToolStripPanelRowControlCollection CreateControlsInstance();
    protected virtual void Dispose(bool disposing);
    protected internal virtual void OnControlAdded(Control control, int index);
    protected internal virtual void OnOrientationChanged();
    protected void OnBoundsChanged(Rectangle oldBounds, Rectangle newBounds);
    protected internal virtual void OnControlRemoved(Control control, int index);
    internal Size GetMinimumSize(ToolStrip toolStrip);
    private void ApplyCachedBounds();
    protected virtual void OnLayout(LayoutEventArgs e);
    private void OnLayoutHorizontalPostFix();
    private void OnLayoutVerticalPostFix();
    private void SetBounds(Rectangle bounds);
    private void SuspendLayout();
    private void ResumeLayout(bool performLayout);
    private sealed virtual override ArrangedElementCollection System.Windows.Forms.Layout.IArrangedElement.get_Children();
    private sealed virtual override IArrangedElement System.Windows.Forms.Layout.IArrangedElement.get_Container();
    private sealed virtual override Rectangle System.Windows.Forms.Layout.IArrangedElement.get_DisplayRectangle();
    private sealed virtual override bool System.Windows.Forms.Layout.IArrangedElement.get_ParticipatesInLayout();
    private sealed virtual override PropertyStore System.Windows.Forms.Layout.IArrangedElement.get_Properties();
    private sealed virtual override Size System.Windows.Forms.Layout.IArrangedElement.GetPreferredSize(Size constrainingSize);
    private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.SetBounds(Rectangle bounds, BoundsSpecified specified);
    private sealed virtual override void System.Windows.Forms.Layout.IArrangedElement.PerformLayout(IArrangedElement container, string propertyName);
    internal Rectangle get_DragBounds();
    internal void MoveControl(ToolStrip movingControl, Point startClientLocation, Point endClientLocation);
    internal void JoinRow(ToolStrip toolStripToDrag, Point locationToDrag);
    internal void LeaveRow(ToolStrip toolStripToDrag);
}
internal enum System.Windows.Forms.ToolStripPointType : Enum {
    public int value__;
    public static ToolStripPointType ToolStripCoords;
    public static ToolStripPointType ScreenCoords;
    public static ToolStripPointType ToolStripItemCoords;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripProfessionalLowResolutionRenderer : ToolStripProfessionalRenderer {
    [NullableAttribute("2")]
internal ToolStripRenderer RendererOverride { get; }
    [NullableContextAttribute("2")]
internal virtual ToolStripRenderer get_RendererOverride();
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    private static void RenderToolStripBorderInternal(ToolStripRenderEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripProfessionalRenderer : ToolStripRenderer {
    private static int GRIP_PADDING;
    private int gripPadding;
    private static int ICON_WELL_GRADIENT_WIDTH;
    private int iconWellGradientWidth;
    private static Size onePix;
    private bool isScalingInitialized;
    private static int OVERFLOW_BUTTON_WIDTH;
    private static int OVERFLOW_ARROW_WIDTH;
    private static int OVERFLOW_ARROW_HEIGHT;
    private static int OVERFLOW_ARROW_OFFSETY;
    private int overflowButtonWidth;
    private int overflowArrowWidth;
    private int overflowArrowHeight;
    private int overflowArrowOffsetY;
    private static int DROP_DOWN_MENU_ITEM_PAINT_PADDING_SIZE;
    private Padding scaledDropDownMenuItemPaintPadding;
    [NullableAttribute("2")]
private ProfessionalColorTable professionalColorTable;
    private bool roundedEdges;
    [NullableAttribute("2")]
private ToolStripRenderer toolStripHighContrastRenderer;
    [NullableAttribute("2")]
private ToolStripRenderer toolStripLowResolutionRenderer;
    public ProfessionalColorTable ColorTable { get; }
    [NullableAttribute("2")]
internal ToolStripRenderer RendererOverride { get; }
    internal ToolStripRenderer HighContrastRenderer { get; }
    internal ToolStripRenderer LowResolutionRenderer { get; }
    public bool RoundedEdges { get; public set; }
    private bool UseSystemColors { get; }
    internal ToolStripProfessionalRenderer(bool isDefault);
    public ToolStripProfessionalRenderer(ProfessionalColorTable professionalColorTable);
    private static ToolStripProfessionalRenderer();
    public ProfessionalColorTable get_ColorTable();
    [NullableContextAttribute("2")]
internal virtual ToolStripRenderer get_RendererOverride();
    internal ToolStripRenderer get_HighContrastRenderer();
    internal ToolStripRenderer get_LowResolutionRenderer();
    public bool get_RoundedEdges();
    public void set_RoundedEdges(bool value);
    private bool get_UseSystemColors();
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderItemText(ToolStripItemTextRenderEventArgs e);
    protected virtual void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderItemImage(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderToolStripPanelBackground(ToolStripPanelRenderEventArgs e);
    protected virtual void OnRenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e);
    internal virtual Region GetTransparentRegion(ToolStrip toolStrip);
    private void RenderOverflowButtonEffectsOverBorder(ToolStripRenderEventArgs e);
    private static void FillWithDoubleGradient(Color beginColor, Color middleColor, Color endColor, Graphics g, Rectangle bounds, int firstGradientWidth, int secondGradientWidth, LinearGradientMode mode, bool flipHorizontal);
    private void RenderStatusStripBorder(ToolStripRenderEventArgs e);
    private void RenderStatusStripBackground(ToolStripRenderEventArgs e);
    private void RenderCheckBackground(ToolStripItemImageRenderEventArgs e);
    private void RenderPressedGradient(Graphics g, Rectangle bounds);
    private void RenderMenuStripBackground(ToolStripRenderEventArgs e);
    private static void RenderLabelInternal(ToolStripItemRenderEventArgs e);
    private static void RenderBackgroundGradient(Graphics g, Control control, Color beginColor, Color endColor);
    private static void RenderBackgroundGradient(Graphics g, Control control, Color beginColor, Color endColor, Orientation orientation);
    private void RenderToolStripBackgroundInternal(ToolStripRenderEventArgs e);
    private void RenderToolStripDropDownBackground(ToolStripRenderEventArgs e);
    private void RenderToolStripDropDownBorder(ToolStripRenderEventArgs e);
    private void RenderOverflowBackground(ToolStripItemRenderEventArgs e, bool rightToLeft);
    private void RenderToolStripCurve(ToolStripRenderEventArgs e);
    private void RenderSelectedButtonFill(Graphics g, Rectangle bounds);
    private void RenderCheckedButtonFill(Graphics g, Rectangle bounds);
    private void RenderSeparatorInternal(Graphics g, ToolStripItem item, Rectangle bounds, bool vertical);
    private void RenderPressedButtonFill(Graphics g, Rectangle bounds);
    private void RenderItemInternal(ToolStripItemRenderEventArgs e, bool useHotBorder);
    private void ScaleObjectSizesIfNeeded(int currentDeviceDpi);
    private static Point RenderArrowInternal(Graphics g, Rectangle dropDownRect, ArrowDirection direction, Brush brush);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Value")]
public class System.Windows.Forms.ToolStripProgressBar : ToolStripControlHost {
    [NullableAttribute("1")]
internal static object EventRightToLeftLayoutChanged;
    private static Padding defaultMargin;
    private static Padding defaultStatusStripMargin;
    private Padding scaledDefaultMargin;
    private Padding scaledDefaultStatusStripMargin;
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ProgressBar ProgressBar { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarMarqueeAnimationSpeed")]
public int MarqueeAnimationSpeed { get; public set; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMaximumDescr")]
public int Maximum { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMinimumDescr")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("10")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStepDescr")]
public int Step { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStyleDescr")]
public ProgressBarStyle Style { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ProgressBarValueDescr")]
public int Value { get; public set; }
    public ToolStripProgressBar(string name);
    private static ToolStripProgressBar();
    [NullableContextAttribute("1")]
public ProgressBar get_ProgressBar();
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    public int get_MarqueeAnimationSpeed();
    public void set_MarqueeAnimationSpeed(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_Step();
    public void set_Step(int value);
    public ProgressBarStyle get_Style();
    public void set_Style(ProgressBarStyle value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public int get_Value();
    public void set_Value(int value);
    [NullableContextAttribute("1")]
private static Control CreateControlInstance();
    [NullableContextAttribute("1")]
private void HandleRightToLeftLayoutChanged(object sender, EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnSubscribeControlEvents(Control control);
    protected virtual void OnUnsubscribeControlEvents(Control control);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public void add_OwnerChanged(EventHandler value);
    public void remove_OwnerChanged(EventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void Increment(int value);
    public void PerformStep();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Windows.Forms.ToolStripRenderer : object {
    private static object EventRenderSplitButtonBackground;
    private static object EventRenderItemBackground;
    private static object EventRenderItemImage;
    private static object EventRenderItemText;
    private static object EventRenderToolStripBackground;
    private static object EventRenderGrip;
    private static object EventRenderButtonBackground;
    private static object EventRenderLabelBackground;
    private static object EventRenderMenuItemBackground;
    private static object EventRenderDropDownButtonBackground;
    private static object EventRenderOverflowButtonBackground;
    private static object EventRenderImageMargin;
    private static object EventRenderBorder;
    private static object EventRenderArrow;
    private static object EventRenderToolStripStatusLabelBackground;
    private static object EventRenderSeparator;
    private static object EventRenderItemCheck;
    private static object EventRenderToolStripPanelBackground;
    private static object EventRenderToolStripContentPanelBackground;
    private static object EventRenderStatusStripSizingGrip;
    [NullableAttribute("2")]
private static ColorMatrix s_disabledImageColorMatrix;
    [NullableAttribute("2")]
private EventHandlerList _events;
    private bool _isAutoGenerated;
    private static bool isScalingInitialized;
    internal int previousDeviceDpi;
    private static int OFFSET_2PIXELS;
    private static int OFFSET_4PIXELS;
    protected static int Offset2X;
    protected static int Offset2Y;
    private static int offset4X;
    private static int offset4Y;
    private static Rectangle[] baseSizeGripRectangles;
    private static ColorMatrix DisabledImageColorMatrix { get; }
    private EventHandlerList Events { get; }
    internal bool IsAutoGenerated { get; }
    [NullableAttribute("2")]
internal ToolStripRenderer RendererOverride { get; }
    internal ToolStripRenderer(bool isAutoGenerated);
    private static ToolStripRenderer();
    private static ColorMatrix get_DisabledImageColorMatrix();
    private EventHandlerList get_Events();
    internal bool get_IsAutoGenerated();
    [NullableContextAttribute("2")]
internal virtual ToolStripRenderer get_RendererOverride();
    public void add_RenderArrow(ToolStripArrowRenderEventHandler value);
    public void remove_RenderArrow(ToolStripArrowRenderEventHandler value);
    public void add_RenderToolStripBackground(ToolStripRenderEventHandler value);
    public void remove_RenderToolStripBackground(ToolStripRenderEventHandler value);
    public void add_RenderToolStripPanelBackground(ToolStripPanelRenderEventHandler value);
    public void remove_RenderToolStripPanelBackground(ToolStripPanelRenderEventHandler value);
    public void add_RenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventHandler value);
    public void remove_RenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventHandler value);
    public void add_RenderToolStripBorder(ToolStripRenderEventHandler value);
    public void remove_RenderToolStripBorder(ToolStripRenderEventHandler value);
    public void add_RenderButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderDropDownButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderDropDownButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderOverflowButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderOverflowButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderGrip(ToolStripGripRenderEventHandler value);
    public void remove_RenderGrip(ToolStripGripRenderEventHandler value);
    public void add_RenderItemBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderItemBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderItemImage(ToolStripItemImageRenderEventHandler value);
    public void remove_RenderItemImage(ToolStripItemImageRenderEventHandler value);
    public void add_RenderItemCheck(ToolStripItemImageRenderEventHandler value);
    public void remove_RenderItemCheck(ToolStripItemImageRenderEventHandler value);
    public void add_RenderItemText(ToolStripItemTextRenderEventHandler value);
    public void remove_RenderItemText(ToolStripItemTextRenderEventHandler value);
    public void add_RenderImageMargin(ToolStripRenderEventHandler value);
    public void remove_RenderImageMargin(ToolStripRenderEventHandler value);
    public void add_RenderLabelBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderLabelBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderMenuItemBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderMenuItemBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderToolStripStatusLabelBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderToolStripStatusLabelBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderStatusStripSizingGrip(ToolStripRenderEventHandler value);
    public void remove_RenderStatusStripSizingGrip(ToolStripRenderEventHandler value);
    public void add_RenderSplitButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderSplitButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderSeparator(ToolStripSeparatorRenderEventHandler value);
    public void remove_RenderSeparator(ToolStripSeparatorRenderEventHandler value);
    private void AddHandler(object key, Delegate value);
    private void RemoveHandler(object key, Delegate value);
    public static Image CreateDisabledImage(Image normalImage);
    public void DrawArrow(ToolStripArrowRenderEventArgs e);
    public void DrawToolStripBackground(ToolStripRenderEventArgs e);
    public void DrawGrip(ToolStripGripRenderEventArgs e);
    public void DrawItemBackground(ToolStripItemRenderEventArgs e);
    public void DrawImageMargin(ToolStripRenderEventArgs e);
    public void DrawLabelBackground(ToolStripItemRenderEventArgs e);
    public void DrawButtonBackground(ToolStripItemRenderEventArgs e);
    public void DrawToolStripBorder(ToolStripRenderEventArgs e);
    public void DrawDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    public void DrawOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    public void DrawItemImage(ToolStripItemImageRenderEventArgs e);
    public void DrawItemCheck(ToolStripItemImageRenderEventArgs e);
    public void DrawItemText(ToolStripItemTextRenderEventArgs e);
    public void DrawMenuItemBackground(ToolStripItemRenderEventArgs e);
    public void DrawSplitButton(ToolStripItemRenderEventArgs e);
    public void DrawToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    public void DrawStatusStripSizingGrip(ToolStripRenderEventArgs e);
    public void DrawSeparator(ToolStripSeparatorRenderEventArgs e);
    public void DrawToolStripPanelBackground(ToolStripPanelRenderEventArgs e);
    public void DrawToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e);
    internal virtual Region GetTransparentRegion(ToolStrip toolStrip);
    protected internal virtual void Initialize(ToolStrip toolStrip);
    protected internal virtual void InitializePanel(ToolStripPanel toolStripPanel);
    protected internal virtual void InitializeContentPanel(ToolStripContentPanel contentPanel);
    protected internal virtual void InitializeItem(ToolStripItem item);
    protected static void ScaleArrowOffsetsIfNeeded();
    protected static void ScaleArrowOffsetsIfNeeded(int dpi);
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderItemImage(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderItemText(ToolStripItemTextRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderToolStripPanelBackground(ToolStripPanelRenderEventArgs e);
    protected virtual void OnRenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e);
    protected virtual void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderStatusStripSizingGrip(ToolStripRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
    internal static bool ShouldPaintBackground(Control control);
    private static Image CreateDisabledImage(Image normalImage, ImageAttributes imgAttrib);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripRendererSwitcher : object {
    private static int stateUseDefaultRenderer;
    private static int stateAttachedRendererChanged;
    [NullableAttribute("2")]
private ToolStripRenderer _renderer;
    private Type _currentRendererType;
    private BitVector32 _state;
    private ToolStripRenderMode _defaultRenderMode;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler RendererChanged;
    public ToolStripRenderer Renderer { get; public set; }
    public ToolStripRenderMode RenderMode { get; public set; }
    public ToolStripRendererSwitcher(Control owner, ToolStripRenderMode defaultRenderMode);
    public ToolStripRendererSwitcher(Control owner);
    private static ToolStripRendererSwitcher();
    public ToolStripRenderer get_Renderer();
    public void set_Renderer(ToolStripRenderer value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_RendererChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_RendererChanged(EventHandler value);
    private void OnRendererChanged(EventArgs e);
    private void OnDefaultRendererChanged(object sender, EventArgs e);
    private void OnControlDisposed(object sender, EventArgs e);
    private void OnControlVisibleChanged(object sender, EventArgs e);
    public bool ShouldSerializeRenderMode();
    public void ResetRenderMode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripRenderEventArgs : EventArgs {
    private Color _backColor;
    [CompilerGeneratedAttribute]
private Graphics <Graphics>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <AffectedBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStrip <ToolStrip>k__BackingField;
    public Graphics Graphics { get; }
    public Rectangle AffectedBounds { get; }
    public ToolStrip ToolStrip { get; }
    public Color BackColor { get; }
    public Rectangle ConnectedArea { get; }
    public ToolStripRenderEventArgs(Graphics g, ToolStrip toolStrip);
    public ToolStripRenderEventArgs(Graphics g, ToolStrip toolStrip, Rectangle affectedBounds, Color backColor);
    [CompilerGeneratedAttribute]
public Graphics get_Graphics();
    [CompilerGeneratedAttribute]
public Rectangle get_AffectedBounds();
    [CompilerGeneratedAttribute]
public ToolStrip get_ToolStrip();
    public Color get_BackColor();
    public Rectangle get_ConnectedArea();
}
public class System.Windows.Forms.ToolStripRenderEventHandler : MulticastDelegate {
    public ToolStripRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripRenderMode : Enum {
    public int value__;
    [BrowsableAttribute("False")]
public static ToolStripRenderMode Custom;
    public static ToolStripRenderMode System;
    public static ToolStripRenderMode Professional;
    public static ToolStripRenderMode ManagerRenderMode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripScrollButton : ToolStripControlHost {
    private bool _up;
    private static Size defaultBitmapSize;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Bitmap t_upScrollImage;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static Bitmap t_downScrollImage;
    private static int AUTOSCROLL_UPDATE;
    private static int AUTOSCROLL_PAUSE;
    [NullableAttribute("2")]
private Timer _mouseDownTimer;
    protected internal Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    private static Image DownImage { get; }
    internal StickyLabel Label { get; }
    private static Image UpImage { get; }
    private Timer MouseDownTimer { get; }
    public ToolStripScrollButton(bool up);
    private static ToolStripScrollButton();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private static Control CreateControlInstance(bool up);
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    private static Image get_DownImage();
    internal StickyLabel get_Label();
    private static Image get_UpImage();
    private Timer get_MouseDownTimer();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    private void UnsubscribeAll();
    private void OnAutoScrollAccelerate(object sender, EventArgs e);
    private void OnInitialAutoScrollMouseDown(object sender, EventArgs e);
    public virtual Size GetPreferredSize(Size constrainingSize);
    private void Scroll();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("5")]
public class System.Windows.Forms.ToolStripSeparator : ToolStripItem {
    private static int SeparatorThickness;
    private static int SeparatorHeight;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoToolTip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    public bool CanSelect { get; }
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool DoubleClickEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemDisplayStyle DisplayStyle { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContentAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image Image { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public int ImageIndex { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ImageTransparentColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemImageScaling ImageScaling { get; public set; }
    private bool IsVertical { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContentAlignment TextAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripTextDirection TextDirection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public TextImageRelation TextImageRelation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string ToolTipText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual bool get_CanSelect();
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    public bool get_DoubleClickEnabled();
    public void set_DoubleClickEnabled(bool value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public ToolStripItemDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(ToolStripItemDisplayStyle value);
    public void add_DisplayStyleChanged(EventHandler value);
    public void remove_DisplayStyleChanged(EventHandler value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    [NullableContextAttribute("1")]
public string get_ImageKey();
    [NullableContextAttribute("1")]
public void set_ImageKey(string value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public ToolStripItemImageScaling get_ImageScaling();
    public void set_ImageScaling(ToolStripItemImageScaling value);
    private bool get_IsVertical();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public ContentAlignment get_TextAlign();
    public void set_TextAlign(ContentAlignment value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    [NullableContextAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeForeColor();
    protected internal virtual void SetBounds(Rectangle rect);
}
public class System.Windows.Forms.ToolStripSeparatorRenderEventArgs : ToolStripItemRenderEventArgs {
    [CompilerGeneratedAttribute]
private bool <Vertical>k__BackingField;
    public bool Vertical { get; }
    [NullableContextAttribute("1")]
public ToolStripSeparatorRenderEventArgs(Graphics g, ToolStripSeparator separator, bool vertical);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
}
public class System.Windows.Forms.ToolStripSeparatorRenderEventHandler : MulticastDelegate {
    public ToolStripSeparatorRenderEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ToolStripSeparatorRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripSeparatorRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripSettings : ApplicationSettingsBase {
    [UserScopedSettingAttribute]
[DefaultSettingValueAttribute("true")]
public bool IsDefault { get; public set; }
    [UserScopedSettingAttribute]
public string ItemOrder { get; public set; }
    [UserScopedSettingAttribute]
public string Name { get; public set; }
    [UserScopedSettingAttribute]
[DefaultSettingValueAttribute("0,0")]
public Point Location { get; public set; }
    [UserScopedSettingAttribute]
[DefaultSettingValueAttribute("0,0")]
public Size Size { get; public set; }
    [UserScopedSettingAttribute]
public string ToolStripPanelName { get; public set; }
    [UserScopedSettingAttribute]
[DefaultSettingValueAttribute("true")]
public bool Visible { get; public set; }
    [NullableContextAttribute("1")]
internal ToolStripSettings(string settingsKey);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public string get_ItemOrder();
    public void set_ItemOrder(string value);
    public string get_Name();
    public void set_Name(string value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public string get_ToolStripPanelName();
    public void set_ToolStripPanelName(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual void Save();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripSettingsManager : object {
    private Form form;
    private string formKey;
    internal ToolStripSettingsManager(Form owner, string formKey);
    internal void Load();
    internal void Save();
    internal static string GetItemOrder(ToolStrip toolStrip);
    private void ApplySettings(List`1<SettingsStub> toolStripSettingsToApply);
    private static void ApplyToolStripSettings(ToolStrip toolStrip, SettingsStub settings, Dictionary`2<string, ToolStrip> itemLocationHash);
    [GeneratedRegexAttribute("\S+")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
private static Regex ContiguousNonWhitespace();
    private Dictionary`2<string, ToolStrip> BuildItemOriginationHash();
    private void FindControls(bool searchAllChildren, ControlCollection controlsToLookIn, List`1<T> foundControls);
    private string GetSettingsKey(ToolStrip toolStrip);
    private static void ResumeAllLayout(Control start, bool performLayout);
    private static void SuspendAllLayout(Control start);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("9")]
[DefaultEventAttribute("ButtonClick")]
public class System.Windows.Forms.ToolStripSplitButton : ToolStripDropDownItem {
    [NullableAttribute("2")]
private ToolStripItem _defaultItem;
    [NullableAttribute("2")]
private ToolStripSplitButtonButton _splitButtonButton;
    private Rectangle _dropDownButtonBounds;
    [NullableAttribute("2")]
private ToolStripSplitButtonButtonLayout _splitButtonButtonLayout;
    private int _dropDownButtonWidth;
    private int _splitterWidth;
    private Rectangle _splitterBounds;
    private byte _openMouseId;
    private long _lastClickTime;
    private static int DefaultDropDownWidth;
    private static object s_eventDefaultItemChanged;
    private static object s_eventButtonClick;
    private static object s_eventButtonDoubleClick;
    private static bool s_isScalingInitialized;
    private static int s_scaledDropDownButtonWidth;
    [DefaultValueAttribute("True")]
public bool AutoToolTip { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle ButtonBounds { get; }
    [BrowsableAttribute("False")]
public bool ButtonPressed { get; }
    [BrowsableAttribute("False")]
public bool ButtonSelected { get; }
    protected bool DefaultAutoToolTip { get; }
    [NullableAttribute("2")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public ToolStripItem DefaultItem { get; public set; }
    protected internal bool DismissWhenClicked { get; }
    internal Rectangle DropDownButtonArea { get; }
    [BrowsableAttribute("False")]
public Rectangle DropDownButtonBounds { get; }
    [BrowsableAttribute("False")]
public bool DropDownButtonPressed { get; }
    [BrowsableAttribute("False")]
public bool DropDownButtonSelected { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripSplitButtonDropDownButtonWidthDescr")]
public int DropDownButtonWidth { get; public set; }
    private static int DefaultDropDownButtonWidth { get; }
    private ToolStripSplitButtonButton SplitButtonButton { get; }
    internal ToolStripItemInternalLayout SplitButtonButtonLayout { get; }
    [SRDescriptionAttribute("ToolStripSplitButtonSplitterWidthDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
internal int SplitterWidth { get; internal set; }
    [BrowsableAttribute("False")]
public Rectangle SplitterBounds { get; }
    [NullableContextAttribute("2")]
public ToolStripSplitButton(string text);
    [NullableContextAttribute("2")]
public ToolStripSplitButton(Image image);
    [NullableContextAttribute("2")]
public ToolStripSplitButton(string text, Image image);
    [NullableContextAttribute("2")]
public ToolStripSplitButton(string text, Image image, EventHandler onClick);
    [NullableContextAttribute("2")]
public ToolStripSplitButton(string text, Image image, EventHandler onClick, string name);
    [NullableContextAttribute("2")]
public ToolStripSplitButton(string text, Image image, ToolStripItem[] dropDownItems);
    private static ToolStripSplitButton();
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public Rectangle get_ButtonBounds();
    public bool get_ButtonPressed();
    public bool get_ButtonSelected();
    [NullableContextAttribute("2")]
public void add_ButtonClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ButtonClick(EventHandler value);
    [NullableContextAttribute("2")]
public void add_ButtonDoubleClick(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ButtonDoubleClick(EventHandler value);
    protected virtual bool get_DefaultAutoToolTip();
    [NullableContextAttribute("2")]
public ToolStripItem get_DefaultItem();
    [NullableContextAttribute("2")]
public void set_DefaultItem(ToolStripItem value);
    [NullableContextAttribute("2")]
public void add_DefaultItemChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_DefaultItemChanged(EventHandler value);
    protected internal virtual bool get_DismissWhenClicked();
    internal virtual Rectangle get_DropDownButtonArea();
    public Rectangle get_DropDownButtonBounds();
    public bool get_DropDownButtonPressed();
    public bool get_DropDownButtonSelected();
    public int get_DropDownButtonWidth();
    public void set_DropDownButtonWidth(int value);
    private static int get_DefaultDropDownButtonWidth();
    private ToolStripSplitButtonButton get_SplitButtonButton();
    internal ToolStripItemInternalLayout get_SplitButtonButtonLayout();
    internal int get_SplitterWidth();
    internal void set_SplitterWidth(int value);
    public Rectangle get_SplitterBounds();
    private void CalculateLayout();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    private protected virtual ToolStripItemInternalLayout CreateInternalLayout();
    public virtual Size GetPreferredSize(Size constrainingSize);
    private void InvalidateSplitButtonLayout();
    private void Initialize();
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void OnButtonClick(EventArgs e);
    public virtual void OnButtonDoubleClick(EventArgs e);
    protected virtual void OnDefaultItemChanged(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    public void PerformButtonClick();
    [EditorBrowsableAttribute("1")]
public virtual void ResetDropDownButtonWidth();
    private void SetDropDownButtonBounds(Rectangle rect);
    [EditorBrowsableAttribute("1")]
internal virtual bool ShouldSerializeDropDownButtonWidth();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripSplitStackDragDropHandler : object {
    private ToolStrip _owner;
    public ToolStripSplitStackDragDropHandler(ToolStrip owner);
    public sealed virtual void OnDragEnter(DragEventArgs e);
    public sealed virtual void OnDragLeave(EventArgs e);
    public sealed virtual void OnDragDrop(DragEventArgs e);
    public sealed virtual void OnDragOver(DragEventArgs e);
    public sealed virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    public sealed virtual void OnQueryContinueDrag(QueryContinueDragEventArgs e);
    private void OnDropItem(ToolStripItem droppedItem, Point ownerClientAreaRelativeDropPoint);
    private bool ShowItemDropPoint(Point ownerClientAreaRelativeDropPoint);
    private int GetItemInsertionIndex(Point ownerClientAreaRelativeDropPoint);
    private RelativeLocation ComparePositions(Rectangle orig, Point check);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolStripSplitStackLayout : LayoutEngine {
    private Point noMansLand;
    private Rectangle displayRectangle;
    [NullableAttribute("2")]
internal static TraceSwitch DebugLayoutTraceSwitch;
    [CompilerGeneratedAttribute]
private int <BackwardsWalkingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ForwardsWalkingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverflowSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverflowRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolStrip <ToolStrip>k__BackingField;
    protected int BackwardsWalkingIndex { get; protected set; }
    protected int ForwardsWalkingIndex { get; protected set; }
    private Size OverflowButtonSize { get; }
    private int OverflowSpace { get; private set; }
    private bool OverflowRequired { get; private set; }
    public ToolStrip ToolStrip { get; }
    internal ToolStripSplitStackLayout(ToolStrip owner);
    [CompilerGeneratedAttribute]
protected int get_BackwardsWalkingIndex();
    [CompilerGeneratedAttribute]
protected void set_BackwardsWalkingIndex(int value);
    [CompilerGeneratedAttribute]
protected int get_ForwardsWalkingIndex();
    [CompilerGeneratedAttribute]
protected void set_ForwardsWalkingIndex(int value);
    private Size get_OverflowButtonSize();
    [CompilerGeneratedAttribute]
private int get_OverflowSpace();
    [CompilerGeneratedAttribute]
private void set_OverflowSpace(int value);
    [CompilerGeneratedAttribute]
private bool get_OverflowRequired();
    [CompilerGeneratedAttribute]
private void set_OverflowRequired(bool value);
    [CompilerGeneratedAttribute]
public ToolStrip get_ToolStrip();
    private void CalculatePlacementsHorizontal();
    private void CalculatePlacementsVertical();
    internal virtual Size GetPreferredSize(IArrangedElement container, Size proposedConstraints);
    private void InvalidateLayout();
    private protected virtual bool LayoutCore(IArrangedElement container, LayoutEventArgs layoutEventArgs);
    private bool LayoutHorizontal();
    private bool LayoutVertical();
    private void SetItemLocation(ToolStripItem item, Point itemLocation, Size itemSize);
    private void PlaceItems();
    private void ResetItemPlacements();
    private int SendNextItemToOverflow(int spaceNeeded, bool horizontal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("8")]
public class System.Windows.Forms.ToolStripStatusLabel : ToolStripLabel {
    private static Padding defaultMargin;
    private Padding _scaledDefaultMargin;
    private Border3DStyle _borderStyle;
    private ToolStripStatusLabelBorderSides _borderSides;
    private bool _spring;
    private AutomationLiveSetting _liveSetting;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public ToolStripItemAlignment Alignment { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripStatusLabelBorderStyleDescr")]
[SRCategoryAttribute("CatAppearance")]
public Border3DStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripStatusLabelBorderSidesDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripStatusLabelBorderSides BorderSides { get; public set; }
    protected internal Padding DefaultMargin { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripStatusLabelSpringDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool Spring { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("LiveRegionAutomationLiveSettingDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutomationLiveSetting LiveSetting { get; public set; }
    [NullableContextAttribute("2")]
public ToolStripStatusLabel(string text);
    [NullableContextAttribute("2")]
public ToolStripStatusLabel(Image image);
    [NullableContextAttribute("2")]
public ToolStripStatusLabel(string text, Image image);
    [NullableContextAttribute("2")]
public ToolStripStatusLabel(string text, Image image, EventHandler onClick);
    [NullableContextAttribute("2")]
public ToolStripStatusLabel(string text, Image image, EventHandler onClick, string name);
    private static ToolStripStatusLabel();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    private protected virtual ToolStripItemInternalLayout CreateInternalLayout();
    public ToolStripItemAlignment get_Alignment();
    public void set_Alignment(ToolStripItemAlignment value);
    public Border3DStyle get_BorderStyle();
    public void set_BorderStyle(Border3DStyle value);
    public ToolStripStatusLabelBorderSides get_BorderSides();
    public void set_BorderSides(ToolStripStatusLabelBorderSides value);
    private void Initialize();
    protected internal virtual Padding get_DefaultMargin();
    public bool get_Spring();
    public void set_Spring(bool value);
    public sealed virtual AutomationLiveSetting get_LiveSetting();
    public sealed virtual void set_LiveSetting(AutomationLiveSetting value);
    protected virtual void OnTextChanged(EventArgs e);
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnPaint(PaintEventArgs e);
}
[EditorAttribute("System.Windows.Forms.Design.BorderSidesEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[FlagsAttribute]
public enum System.Windows.Forms.ToolStripStatusLabelBorderSides : Enum {
    public int value__;
    public static ToolStripStatusLabelBorderSides All;
    public static ToolStripStatusLabelBorderSides Bottom;
    public static ToolStripStatusLabelBorderSides Left;
    public static ToolStripStatusLabelBorderSides Right;
    public static ToolStripStatusLabelBorderSides Top;
    public static ToolStripStatusLabelBorderSides None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.ToolStripSystemRenderer : ToolStripRenderer {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_renderer;
    [NullableAttribute("2")]
private ToolStripRenderer _toolStripHighContrastRenderer;
    [NullableAttribute("2")]
internal ToolStripRenderer RendererOverride { get; }
    internal ToolStripRenderer HighContrastRenderer { get; }
    [NullableAttribute("2")]
private static VisualStyleRenderer VisualStyleRenderer { get; }
    internal ToolStripSystemRenderer(bool isDefault);
    [NullableContextAttribute("2")]
internal virtual ToolStripRenderer get_RendererOverride();
    internal ToolStripRenderer get_HighContrastRenderer();
    [NullableContextAttribute("2")]
private static VisualStyleRenderer get_VisualStyleRenderer();
    private static void FillBackground(Graphics g, Rectangle bounds, Color backColor);
    private static int GetItemState(ToolStripItem item);
    [NullableContextAttribute("2")]
private static int GetSplitButtonDropDownItemState(ToolStripSplitButton item);
    [NullableContextAttribute("2")]
private static int GetSplitButtonItemState(ToolStripSplitButton item);
    [NullableContextAttribute("2")]
private static ToolBarState GetSplitButtonToolBarState(ToolStripSplitButton button, bool dropDownButton);
    private static ToolBarState GetToolBarState(ToolStripItem item);
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
    private static void RenderItemInternal(ToolStripItemRenderEventArgs e);
    private static void RenderSeparatorInternal(Graphics g, ToolStripItem item, Rectangle bounds, bool vertical);
    private static void RenderSmall3DBorderInternal(Graphics g, Rectangle bounds, ToolBarState state, bool rightToLeft);
    private static void RenderStatusStripBorder(ToolStripRenderEventArgs e);
    private static void RenderStatusStripBackground(ToolStripRenderEventArgs e);
    private static void RenderLabelInternal(ToolStripItemRenderEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ToolStripItemDesignerAvailabilityAttribute("7")]
public class System.Windows.Forms.ToolStripTextBox : ToolStripControlHost {
    internal static object s_eventTextBoxTextAlignChanged;
    internal static object s_eventAcceptsTabChanged;
    internal static object s_eventBorderStyleChanged;
    internal static object s_eventHideSelectionChanged;
    internal static object s_eventReadOnlyChanged;
    internal static object s_eventMultilineChanged;
    internal static object s_eventModifiedChanged;
    private static Padding s_defaultMargin;
    private static Padding s_defaultDropDownMargin;
    private Padding _scaledDefaultMargin;
    private Padding _scaledDefaultDropDownMargin;
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected internal Padding DefaultMargin { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TextBox TextBox { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsTabDescr")]
public bool AcceptsTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsReturnDescr")]
public bool AcceptsReturn { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteSourceDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("TextBoxBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxCanUndoDescr")]
public bool CanUndo { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxCharacterCasingDescr")]
public CharacterCasing CharacterCasing { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxHideSelectionDescr")]
public bool HideSelection { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxLinesDescr")]
[EditorAttribute("System.Windows.Forms.Design.StringArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public String[] Lines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("32767")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxModifiedDescr")]
public bool Modified { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMultilineDescr")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxShortcutsEnabledDescr")]
public bool ShortcutsEnabled { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxTextAlignDescr")]
public HorizontalAlignment TextBoxTextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxWordWrapDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool WordWrap { get; public set; }
    [NullableContextAttribute("2")]
public ToolStripTextBox(string name);
    [EditorBrowsableAttribute("1")]
public ToolStripTextBox(Control c);
    private static ToolStripTextBox();
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultSize();
    public TextBox get_TextBox();
    private static Control CreateControlInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    private void HandleAcceptsTabChanged(object sender, EventArgs e);
    private void HandleBorderStyleChanged(object sender, EventArgs e);
    private void HandleHideSelectionChanged(object sender, EventArgs e);
    private void HandleModifiedChanged(object sender, EventArgs e);
    private void HandleMultilineChanged(object sender, EventArgs e);
    private void HandleReadOnlyChanged(object sender, EventArgs e);
    private void HandleTextBoxTextAlignChanged(object sender, EventArgs e);
    protected virtual void OnAcceptsTabChanged(EventArgs e);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnHideSelectionChanged(EventArgs e);
    protected virtual void OnModifiedChanged(EventArgs e);
    protected virtual void OnMultilineChanged(EventArgs e);
    protected virtual void OnReadOnlyChanged(EventArgs e);
    [NullableContextAttribute("2")]
protected virtual void OnSubscribeControlEvents(Control control);
    [NullableContextAttribute("2")]
protected virtual void OnUnsubscribeControlEvents(Control control);
    internal virtual bool ShouldSerializeFont();
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public bool get_CanUndo();
    public CharacterCasing get_CharacterCasing();
    public void set_CharacterCasing(CharacterCasing value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public String[] get_Lines();
    public void set_Lines(String[] value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public bool get_Modified();
    public void set_Modified(bool value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_ShortcutsEnabled();
    public void set_ShortcutsEnabled(bool value);
    public int get_TextLength();
    public HorizontalAlignment get_TextBoxTextAlign();
    public void set_TextBoxTextAlign(HorizontalAlignment value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    [NullableContextAttribute("2")]
public void add_AcceptsTabChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AcceptsTabChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_BorderStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BorderStyleChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_HideSelectionChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_HideSelectionChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_ModifiedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ModifiedChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MultilineChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_MultilineChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_ReadOnlyChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_ReadOnlyChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void add_TextBoxTextAlignChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_TextBoxTextAlignChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void AppendText(string text);
    public void Clear();
    public void ClearUndo();
    public void Copy();
    public void Cut();
    public void DeselectAll();
    public char GetCharFromPosition(Point pt);
    public int GetCharIndexFromPosition(Point pt);
    public int GetFirstCharIndexFromLine(int lineNumber);
    public int GetFirstCharIndexOfCurrentLine();
    public int GetLineFromCharIndex(int index);
    public Point GetPositionFromCharIndex(int index);
    public void Paste();
    public void ScrollToCaret();
    public void Select(int start, int length);
    public void SelectAll();
    public void Undo();
}
public enum System.Windows.Forms.ToolStripTextDirection : Enum {
    public int value__;
    public static ToolStripTextDirection Inherit;
    public static ToolStripTextDirection Horizontal;
    public static ToolStripTextDirection Vertical90;
    public static ToolStripTextDirection Vertical270;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ProvidePropertyAttribute("ToolTip", "System.Windows.Forms.Control")]
[DefaultEventAttribute("Popup")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionToolTip")]
public class System.Windows.Forms.ToolTip : Component {
    internal static int DefaultDelay;
    private static int ReshowRatio;
    private static int AutoPopRatio;
    private static int InfiniteDelay;
    private static int BalloonOffsetX;
    private static int LocationIndexTop;
    private static int LocationIndexRight;
    private static int LocationIndexBottom;
    private static int LocationIndexLeft;
    private static int LocationTotal;
    private Dictionary`2<Control, TipInfo> _tools;
    private Int32[] _delayTimes;
    private bool _auto;
    private bool _showAlways;
    private ToolTipNativeWindow _window;
    [NullableAttribute("2")]
private Control _topLevelControl;
    private bool active;
    private Color _backColor;
    private Color _foreColor;
    private bool _isBalloon;
    private bool _isDisposing;
    private string _toolTipTitle;
    private ToolTipIcon _toolTipIcon;
    [NullableAttribute("2")]
private ToolTipTimer _timer;
    private Dictionary`2<HWND, Control> _owners;
    private bool _stripAmpersands;
    private bool _useAnimation;
    private bool _useFading;
    private int _originalPopupDelay;
    private bool _trackPosition;
    [NullableAttribute("2")]
private PopupEventHandler _onPopup;
    [NullableAttribute("2")]
private DrawToolTipEventHandler _onDraw;
    private HashSet`1<Control> _created;
    private bool _cancelled;
    [CompilerGeneratedAttribute]
private bool <IsActivatedByKeyboard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OwnerDraw>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPersistent>k__BackingField;
    [SRDescriptionAttribute("ToolTipActiveDescr")]
[DefaultValueAttribute("True")]
public bool Active { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipAutomaticDelayDescr")]
[DefaultValueAttribute("500")]
public int AutomaticDelay { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipAutoPopDelayDescr")]
public int AutoPopDelay { get; public set; }
    [SRDescriptionAttribute("ToolTipBackColorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "Info")]
public Color BackColor { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRDescriptionAttribute("ToolTipForeColorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "InfoText")]
public Color ForeColor { get; public set; }
    private HWND IHandle<Windows.Win32.Foundation.HWND>.Handle { get; }
    internal HWND HWND { get; }
    internal IntPtr Handle { get; }
    internal bool IsActivatedByKeyboard { get; internal set; }
    [SRDescriptionAttribute("ToolTipIsBalloonDescr")]
[DefaultValueAttribute("False")]
public bool IsBalloon { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipInitialDelayDescr")]
public int InitialDelay { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolTipOwnerDrawDescr")]
public bool OwnerDraw { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipReshowDelayDescr")]
public int ReshowDelay { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolTipShowAlwaysDescr")]
public bool ShowAlways { get; public set; }
    [SRDescriptionAttribute("ToolTipStripAmpersandsDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool StripAmpersands { get; public set; }
    [NullableAttribute("2")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolTipToolTipIconDescr")]
public ToolTipIcon ToolTipIcon { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ToolTipTitleDescr")]
public string ToolTipTitle { get; public set; }
    [NullableAttribute("2")]
private Control TopLevelControl { get; }
    [SRDescriptionAttribute("ToolTipUseAnimationDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool UseAnimation { get; public set; }
    [SRDescriptionAttribute("ToolTipUseFadingDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool UseFading { get; public set; }
    internal bool IsPersistent { get; internal set; }
    public ToolTip(IContainer cont);
    public bool get_Active();
    public void set_Active(bool value);
    internal void HideToolTip(IKeyboardToolTip currentTool);
    public int get_AutomaticDelay();
    public void set_AutomaticDelay(int value);
    internal string GetCaptionForTool(Control tool);
    public int get_AutoPopDelay();
    public void set_AutoPopDelay(int value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    protected virtual CreateParams get_CreateParams();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    private sealed virtual override HWND IHandle<Windows.Win32.Foundation.HWND>.get_Handle();
    internal HWND get_HWND();
    internal IntPtr get_Handle();
    [CompilerGeneratedAttribute]
internal bool get_IsActivatedByKeyboard();
    [CompilerGeneratedAttribute]
internal void set_IsActivatedByKeyboard(bool value);
    public bool get_IsBalloon();
    public void set_IsBalloon(bool value);
    private bool IsWindowActive(IWin32Window window);
    public int get_InitialDelay();
    public void set_InitialDelay(int value);
    [CompilerGeneratedAttribute]
public bool get_OwnerDraw();
    [CompilerGeneratedAttribute]
public void set_OwnerDraw(bool value);
    public int get_ReshowDelay();
    public void set_ReshowDelay(int value);
    public bool get_ShowAlways();
    public void set_ShowAlways(bool value);
    public bool get_StripAmpersands();
    public void set_StripAmpersands(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Tag(object value);
    public ToolTipIcon get_ToolTipIcon();
    public void set_ToolTipIcon(ToolTipIcon value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    [NullableContextAttribute("2")]
private Control get_TopLevelControl();
    public bool get_UseAnimation();
    public void set_UseAnimation(bool value);
    public bool get_UseFading();
    public void set_UseFading(bool value);
    [NullableContextAttribute("2")]
public void add_Draw(DrawToolTipEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Draw(DrawToolTipEventHandler value);
    [NullableContextAttribute("2")]
public void add_Popup(PopupEventHandler value);
    [NullableContextAttribute("2")]
public void remove_Popup(PopupEventHandler value);
    private void AdjustBaseFromAuto();
    private void AnnounceText(Control tool, string text);
    private void HandleCreated(object sender, EventArgs eventargs);
    private void HandleDestroyed(object sender, EventArgs eventargs);
    private void OnDraw(DrawToolTipEventArgs e);
    private void OnPopup(PopupEventArgs e);
    private void TopLevelCreated(object sender, EventArgs eventargs);
    private void TopLevelDestroyed(object sender, EventArgs eventargs);
    public sealed virtual bool CanExtend(object target);
    private void ClearTopLevelControlEvents();
    private void CreateHandle();
    private void CreateAllRegions();
    private void DestroyAllRegions();
    private void SetToolInfo(Control control, string caption);
    private void CreateRegion(Control control);
    private void MouseMove(object sender, MouseEventArgs me);
    internal void DestroyHandle();
    private void DestroyRegion(Control control);
    protected virtual void Dispose(bool disposing);
    internal int GetDelayTime(UInt32 type);
    internal bool GetHandleCreated();
    private ToolInfoWrapper`1<Control> GetTOOLINFO(Control control, string caption);
    [NullableContextAttribute("0")]
private ToolInfoWrapper`1<HandleRef`1<HWND>> GetWinTOOLINFO(IWin32Window window);
    [NullableContextAttribute("2")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolTipToolTipDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string GetToolTip(Control control);
    private HWND GetWindowFromPoint(Point screenCoords, Boolean& success);
    private void OnTopLevelPropertyChanged(object s, EventArgs e);
    private void RecreateHandle();
    public void RemoveAll();
    private void SetDelayTime(UInt32 type, int time);
    public void SetToolTip(Control control, string caption);
    private void SetToolTipInternal(Control control, TipInfo info);
    private void SetToolTipToControl(Control associatedControl);
    [CompilerGeneratedAttribute]
internal bool get_IsPersistent();
    [CompilerGeneratedAttribute]
internal void set_IsPersistent(bool value);
    private bool ShouldSerializeAutomaticDelay();
    private bool ShouldSerializeAutoPopDelay();
    private bool ShouldSerializeInitialDelay();
    private bool ShouldSerializeReshowDelay();
    private void ShowTooltip(string text, IWin32Window window, int duration);
    public void Show(string text, IWin32Window window);
    public void Show(string text, IWin32Window window, int duration);
    public void Show(string text, IWin32Window window, Point point);
    public void Show(string text, IWin32Window window, Point point, int duration);
    public void Show(string text, IWin32Window window, int x, int y);
    public void Show(string text, IWin32Window window, int x, int y, int duration);
    internal void ShowKeyboardToolTip(string text, IKeyboardToolTip tool, int duration);
    private bool TryGetBubbleSize(IWin32Window ownerWindow, Size& bubbleSize);
    private Point GetOptimalToolTipPosition(IKeyboardToolTip tool, Rectangle toolRectangle, int width, int height);
    private static bool IsCompetingLocationBetter(long originalLocationClippedArea, long originalLocationWeight, long originalLocationAreaWithinTopControl, int originalIndex, long competingLocationClippedArea, long competingLocationWeight, long competingLocationAreaWithinTopControl, int competingIndex, bool rtlEnabled);
    private void SetTrackPosition(int pointX, int pointY);
    public void Hide(IWin32Window win);
    private void BaseFormDeactivate(object sender, EventArgs e);
    private void HideAllToolTips();
    private void SetTool(IWin32Window window, string text, Type type, Point position);
    private void StartTimer(IWin32Window owner, int interval);
    protected void StopTimer();
    private void TimerHandler(object source, EventArgs args);
    protected virtual override void Finalize();
    public virtual string ToString();
    private void Reposition(Point tipPosition, Size tipSize);
    private HWND GetCurrentToolHwnd();
    [NullableContextAttribute("2")]
private IWin32Window GetCurrentToolWindow();
    private void WmMove();
    private void WmMouseActivate(Message& message);
    private void WmWindowFromPoint(Message& message);
    private void WmShow();
    private bool WmWindowPosChanged();
    private void WmWindowPosChanging(Message& message);
    private void WmPop();
    private void WndProc(Message& message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.ToolTipBuffer : ValueType {
    private Char[] _buffer;
    public IntPtr Buffer { get; }
    public IntPtr get_Buffer();
    public void SetText(string text);
}
public enum System.Windows.Forms.ToolTipIcon : Enum {
    public int value__;
    public static ToolTipIcon None;
    public static ToolTipIcon Info;
    public static ToolTipIcon Warning;
    public static ToolTipIcon Error;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.TraceSwitchExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void TraceVerbose(TraceSwitch traceSwitch, string message);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void TraceVerbose(TraceSwitch traceSwitch, TraceVerboseInterpolatedStringHandler& message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("Scroll")]
[DefaultBindingPropertyAttribute("Value")]
[DesignerAttribute("System.Windows.Forms.Design.TrackBarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTrackBar")]
public class System.Windows.Forms.TrackBar : Control {
    [NullableAttribute("1")]
private static object s_scrollEvent;
    [NullableAttribute("1")]
private static object s_valueChangedEvent;
    [NullableAttribute("1")]
private static object s_rightToLeftChangedEvent;
    private bool _autoSize;
    private int _largeChange;
    private int _maximum;
    private int _minimum;
    private Orientation _orientation;
    private int _value;
    private int _smallChange;
    private int _tickFrequency;
    private TickStyle _tickStyle;
    private int _requestedDim;
    private bool _autoDrawTicks;
    private int _cumulativeWheelData;
    private bool _initializing;
    private bool _rightToLeftLayout;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TrackBarAutoSizeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("5")]
[SRDescriptionAttribute("TrackBarLargeChangeDescr")]
public int LargeChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("TrackBarMaximumDescr")]
public int Maximum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("TrackBarMinimumDescr")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TrackBarOrientationDescr")]
public Orientation Orientation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private static int PreferredDimension { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("TrackBarSmallChangeDescr")]
public int SmallChange { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TrackBarTickStyleDescr")]
public TickStyle TickStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("TrackBarTickFrequencyDescr")]
public int TickFrequency { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[SRDescriptionAttribute("TrackBarValueDescr")]
public int Value { get; public set; }
    private static TrackBar();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    private static int get_PreferredDimension();
    private void RedrawControl();
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    internal virtual bool get_SupportsUiaProviders();
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public TickStyle get_TickStyle();
    public void set_TickStyle(TickStyle value);
    public int get_TickFrequency();
    public void set_TickFrequency(int value);
    public int get_Value();
    public void set_Value(int value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_Scroll(EventHandler value);
    public void remove_Scroll(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    private void AdjustSize();
    public sealed virtual void BeginInit();
    private void ConstrainValue();
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateHandle();
    private void DrawTicks();
    public sealed virtual void EndInit();
    private void GetTrackBarValue();
    protected virtual bool IsInputKey(Keys keyData);
    [NullableContextAttribute("1")]
protected virtual void OnHandleCreated(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnScroll(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnValueChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBackColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnSystemColorsChanged(EventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public void SetRange(int minValue, int maxValue);
    private void SetTrackBarPosition();
    private bool ShouldAutoDrawTicks();
    private bool ShouldRecreateHandle();
    [NullableContextAttribute("1")]
public virtual string ToString();
    protected virtual void WndProc(Message& m);
    [CompilerGeneratedAttribute]
private void <get_CreateParams>g__EnableAutoTicksIfRequired|37_0(<>c__DisplayClass37_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.TrackBarRenderer : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    private static int lineWidth;
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static void DrawHorizontalTrack(Graphics g, Rectangle bounds);
    public static void DrawVerticalTrack(Graphics g, Rectangle bounds);
    public static void DrawHorizontalThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawVerticalThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawLeftPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawRightPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawTopPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawBottomPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawHorizontalTicks(Graphics g, Rectangle bounds, int numTicks, EdgeStyle edgeStyle);
    public static void DrawVerticalTicks(Graphics g, Rectangle bounds, int numTicks, EdgeStyle edgeStyle);
    public static Size GetLeftPointingThumbSize(Graphics g, TrackBarThumbState state);
    public static Size GetRightPointingThumbSize(Graphics g, TrackBarThumbState state);
    public static Size GetTopPointingThumbSize(Graphics g, TrackBarThumbState state);
    public static Size GetBottomPointingThumbSize(Graphics g, TrackBarThumbState state);
    [MemberNotNullAttribute("t_visualStyleRenderer")]
private static void InitializeRenderer(VisualStyleElement element, int state);
}
[TypeConverterAttribute("System.Windows.Forms.TreeNodeConverter")]
[DefaultPropertyAttribute("Text")]
[DynamicallyAccessedMembersAttribute("1")]
public class System.Windows.Forms.TreeNode : MarshalByRefObject {
    internal static int SHIFTVAL;
    private static TVIS CHECKED;
    private static TVIS UNCHECKED;
    private static int ALLOWEDIMAGES;
    internal static int MAX_TREENODES_OPS;
    internal OwnerDrawPropertyBag propBag;
    internal IntPtr _handle;
    internal string text;
    internal string name;
    private static int TREENODESTATE_isChecked;
    private BitVector32 treeNodeState;
    private TreeNodeImageIndexer imageIndexer;
    private TreeNodeImageIndexer selectedImageIndexer;
    private TreeNodeImageIndexer stateImageIndexer;
    private string toolTipText;
    private ContextMenuStrip _contextMenuStrip;
    internal bool nodesCleared;
    private TreeNodeAccessibleObject _accessibleObject;
    internal int index;
    internal int childCount;
    internal TreeNode[] children;
    internal TreeNode parent;
    internal TreeView treeView;
    private bool expandOnRealization;
    private bool collapseOnRealization;
    private TreeNodeCollection nodes;
    private object userData;
    private static TVITEM_MASK InsertMask;
    internal TreeNodeImageIndexer ImageIndexer { get; }
    internal TreeNodeImageIndexer SelectedImageIndexer { get; }
    internal TreeNodeImageIndexer StateImageIndexer { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    internal Rectangle RowBounds { get; }
    internal bool CheckedStateInternal { get; internal set; }
    internal bool CheckedInternal { get; internal set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeCheckedDescr")]
[DefaultValueAttribute("False")]
public bool Checked { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ControlContextMenuDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
public TreeNode FirstNode { get; }
    private TreeNode FirstVisibleParent { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeForeColorDescr")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
public string FullPath { get; }
    [BrowsableAttribute("False")]
public IntPtr Handle { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeImageIndexDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("-1")]
[RelatedImageListAttribute("TreeView.ImageList")]
public int ImageIndex { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeImageKeyDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageKeyConverter")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("TreeView.ImageList")]
public string ImageKey { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeIndexDescr")]
public int Index { get; }
    [BrowsableAttribute("False")]
public bool IsEditing { get; }
    [BrowsableAttribute("False")]
public bool IsExpanded { get; }
    [BrowsableAttribute("False")]
public bool IsSelected { get; }
    [BrowsableAttribute("False")]
public bool IsVisible { get; }
    [BrowsableAttribute("False")]
public TreeNode LastNode { get; }
    [BrowsableAttribute("False")]
public int Level { get; }
    [BrowsableAttribute("False")]
public TreeNode NextNode { get; }
    [BrowsableAttribute("False")]
public TreeNode NextVisibleNode { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeNodeFontDescr")]
[DefaultValueAttribute("")]
public Font NodeFont { get; public set; }
    [ListBindableAttribute("False")]
[BrowsableAttribute("False")]
public TreeNodeCollection Nodes { get; }
    [BrowsableAttribute("False")]
public TreeNode Parent { get; }
    [BrowsableAttribute("False")]
public TreeNode PrevNode { get; }
    [BrowsableAttribute("False")]
public TreeNode PrevVisibleNode { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeSelectedImageIndexDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageIndexConverter")]
[DefaultValueAttribute("-1")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RelatedImageListAttribute("TreeView.ImageList")]
public int SelectedImageIndex { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeSelectedImageKeyDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageKeyConverter")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RelatedImageListAttribute("TreeView.ImageList")]
public string SelectedImageKey { get; public set; }
    internal TVIS State { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeStateImageKeyDescr")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("TreeView.StateImageList")]
public string StateImageKey { get; public set; }
    [LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeStateImageIndexDescr")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("TreeView.StateImageList")]
public int StateImageIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeTextDescr")]
public string Text { get; public set; }
    [LocalizableAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeToolTipTextDescr")]
[DefaultValueAttribute("")]
public string ToolTipText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeNodeNameDescr")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public TreeView TreeView { get; }
    internal TreeNodeAccessibleObject AccessibilityObject { get; }
    private bool AllowToolTips { get; }
    internal TreeNode(TreeView treeView);
    public TreeNode(string text);
    public TreeNode(string text, TreeNode[] children);
    public TreeNode(string text, int imageIndex, int selectedImageIndex);
    public TreeNode(string text, int imageIndex, int selectedImageIndex, TreeNode[] children);
    protected TreeNode(SerializationInfo serializationInfo, StreamingContext context);
    internal TreeNodeImageIndexer get_ImageIndexer();
    internal TreeNodeImageIndexer get_SelectedImageIndexer();
    internal TreeNodeImageIndexer get_StateImageIndexer();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Rectangle get_Bounds();
    internal Rectangle get_RowBounds();
    internal bool get_CheckedStateInternal();
    internal void set_CheckedStateInternal(bool value);
    internal bool get_CheckedInternal();
    internal void set_CheckedInternal(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public TreeNode get_FirstNode();
    private TreeNode get_FirstVisibleParent();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public string get_FullPath();
    public IntPtr get_Handle();
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public int get_Index();
    public bool get_IsEditing();
    public bool get_IsExpanded();
    public bool get_IsSelected();
    public bool get_IsVisible();
    public TreeNode get_LastNode();
    public int get_Level();
    public TreeNode get_NextNode();
    public TreeNode get_NextVisibleNode();
    public Font get_NodeFont();
    public void set_NodeFont(Font value);
    public TreeNodeCollection get_Nodes();
    public TreeNode get_Parent();
    public TreeNode get_PrevNode();
    public TreeNode get_PrevVisibleNode();
    public int get_SelectedImageIndex();
    public void set_SelectedImageIndex(int value);
    public string get_SelectedImageKey();
    public void set_SelectedImageKey(string value);
    internal TVIS get_State();
    public string get_StateImageKey();
    public void set_StateImageKey(string value);
    public int get_StateImageIndex();
    public void set_StateImageIndex(int value);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public string get_Name();
    public void set_Name(string value);
    public TreeView get_TreeView();
    internal TreeNodeAccessibleObject get_AccessibilityObject();
    internal int AddSorted(TreeNode node);
    public static TreeNode FromHandle(TreeView tree, IntPtr handle);
    private void SortChildren(TreeView parentTreeView);
    public void BeginEdit();
    internal void Clear();
    public virtual object Clone();
    private void CollapseInternal(bool ignoreChildren);
    public void Collapse(bool ignoreChildren);
    public void Collapse();
    private void DoCollapse(TreeView tv);
    protected virtual void Deserialize(SerializationInfo serializationInfo, StreamingContext context);
    public void EndEdit(bool cancel);
    internal void EnsureCapacity(int num);
    private void EnsureStateImageValue();
    public void EnsureVisible();
    public void Expand();
    public void ExpandAll();
    internal TreeView FindTreeView();
    internal List`1<TreeNode> GetSelfAndChildNodes();
    private void GetFullPath(StringBuilder path, string pathSeparator);
    public int GetNodeCount(bool includeSubTrees);
    internal void CheckParentingCycle(TreeNode candidateToAdd);
    internal void InsertNodeAt(int index, TreeNode node);
    private void InvalidateHostTree();
    internal void Realize(bool insertFirst);
    public void Remove();
    internal void Remove(bool notify);
    internal virtual void ReleaseUiaProvider();
    private void RemovePropBagIfEmpty();
    private void ResetExpandedState(TreeView tv);
    private bool ShouldSerializeBackColor();
    private bool ShouldSerializeForeColor();
    protected virtual void Serialize(SerializationInfo si, StreamingContext context);
    public void Toggle();
    public virtual string ToString();
    private void UpdateNode(TVITEM_MASK mask);
    internal void UpdateImage();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsChildrenToShowToolTips();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.AllowsToolTip();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.CanShowToolTipsNow();
    [NullableContextAttribute("1")]
private sealed virtual override string System.Windows.Forms.IKeyboardToolTip.GetCaptionForTool(ToolTip toolTip);
    private sealed virtual override Rectangle System.Windows.Forms.IKeyboardToolTip.GetNativeScreenRectangle();
    [NullableContextAttribute("1")]
private sealed virtual override IList`1<Rectangle> System.Windows.Forms.IKeyboardToolTip.GetNeighboringToolsRectangles();
    [NullableContextAttribute("1")]
private sealed virtual override IWin32Window System.Windows.Forms.IKeyboardToolTip.GetOwnerWindow();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.HasRtlModeEnabled();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsBeingTabbedTo();
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.IsHoveredWithMouse();
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnHooked(ToolTip toolTip);
    [NullableContextAttribute("1")]
private sealed virtual override void System.Windows.Forms.IKeyboardToolTip.OnUnhooked(ToolTip toolTip);
    private sealed virtual override bool System.Windows.Forms.IKeyboardToolTip.ShowsOwnToolTip();
    private bool get_AllowToolTips();
    [NullableContextAttribute("1")]
internal virtual void OnKeyboardToolTipHook(ToolTip toolTip);
    [NullableContextAttribute("1")]
internal virtual void OnKeyboardToolTipUnhook(ToolTip toolTip);
    private Rectangle RectangleToScreen(Rectangle bounds);
    [CompilerGeneratedAttribute]
internal static void <GetSelfAndChildNodes>g__AggregateChildNodesToList|154_0(TreeNode parentNode, <>c__DisplayClass154_0& );
    [CompilerGeneratedAttribute]
internal static bool <UpdateNode>g__IsSpecialImageIndex|171_0(int actualIndex);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Windows.Forms.TreeNodeCollection : object {
    [NullableAttribute("1")]
private TreeNode _owner;
    private int _lastAccessedIndex;
    [CompilerGeneratedAttribute]
private int <FixedIndex>k__BackingField;
    internal int FixedIndex { get; internal set; }
    [NullableAttribute("1")]
public TreeNode Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public TreeNode Item { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    [NullableContextAttribute("1")]
internal TreeNodeCollection(TreeNode owner);
    [CompilerGeneratedAttribute]
internal int get_FixedIndex();
    [CompilerGeneratedAttribute]
internal void set_FixedIndex(int value);
    [NullableContextAttribute("1")]
public virtual TreeNode get_Item(int index);
    [NullableContextAttribute("1")]
public virtual void set_Item(int index, TreeNode value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual TreeNode get_Item(string key);
    public sealed virtual int get_Count();
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("1")]
public virtual TreeNode Add(string text);
    public virtual TreeNode Add(string key, string text);
    public virtual TreeNode Add(string key, string text, int imageIndex);
    public virtual TreeNode Add(string key, string text, string imageKey);
    public virtual TreeNode Add(string key, string text, int imageIndex, int selectedImageIndex);
    public virtual TreeNode Add(string key, string text, string imageKey, string selectedImageKey);
    [NullableContextAttribute("1")]
public virtual void AddRange(TreeNode[] nodes);
    [NullableContextAttribute("1")]
public TreeNode[] Find(string key, bool searchAllChildren);
    [NullableContextAttribute("1")]
private static List`1<TreeNode> FindInternal(string key, bool searchAllChildren, TreeNodeCollection treeNodeCollectionToLookIn, List`1<TreeNode> foundTreeNodes);
    [NullableContextAttribute("1")]
public virtual int Add(TreeNode node);
    [NullableContextAttribute("1")]
private int AddInternal(TreeNode node, int delta);
    private sealed virtual override int System.Collections.IList.Add(object node);
    [NullableContextAttribute("1")]
public bool Contains(TreeNode node);
    public virtual bool ContainsKey(string key);
    private sealed virtual override bool System.Collections.IList.Contains(object node);
    [NullableContextAttribute("1")]
public int IndexOf(TreeNode node);
    private sealed virtual override int System.Collections.IList.IndexOf(object node);
    public virtual int IndexOfKey(string key);
    [NullableContextAttribute("1")]
public virtual void Insert(int index, TreeNode node);
    private sealed virtual override void System.Collections.IList.Insert(int index, object node);
    [NullableContextAttribute("1")]
public virtual TreeNode Insert(int index, string text);
    public virtual TreeNode Insert(int index, string key, string text);
    public virtual TreeNode Insert(int index, string key, string text, int imageIndex);
    public virtual TreeNode Insert(int index, string key, string text, string imageKey);
    public virtual TreeNode Insert(int index, string key, string text, int imageIndex, int selectedImageIndex);
    public virtual TreeNode Insert(int index, string key, string text, string imageKey, string selectedImageKey);
    private bool IsValidIndex(int index);
    public virtual void Clear();
    [NullableContextAttribute("1")]
public sealed virtual void CopyTo(Array dest, int index);
    [NullableContextAttribute("1")]
public void Remove(TreeNode node);
    private sealed virtual override void System.Collections.IList.Remove(object node);
    public virtual void RemoveAt(int index);
    public virtual void RemoveByKey(string key);
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeNodeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeNodeMouseClickEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    public TreeNode Node { get; }
    public TreeNodeMouseClickEventArgs(TreeNode node, MouseButtons button, int clicks, int x, int y);
    [CompilerGeneratedAttribute]
public TreeNode get_Node();
}
public class System.Windows.Forms.TreeNodeMouseClickEventHandler : MulticastDelegate {
    public TreeNodeMouseClickEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TreeNodeMouseClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeNodeMouseClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeNodeMouseHoverEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    public TreeNode Node { get; }
    public TreeNodeMouseHoverEventArgs(TreeNode node);
    [CompilerGeneratedAttribute]
public TreeNode get_Node();
}
public class System.Windows.Forms.TreeNodeMouseHoverEventHandler : MulticastDelegate {
    public TreeNodeMouseHoverEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TreeNodeMouseHoverEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeNodeMouseHoverEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.TreeNodeStates : Enum {
    public int value__;
    public static TreeNodeStates Checked;
    public static TreeNodeStates Default;
    public static TreeNodeStates Focused;
    public static TreeNodeStates Grayed;
    public static TreeNodeStates Hot;
    public static TreeNodeStates Indeterminate;
    public static TreeNodeStates Marked;
    public static TreeNodeStates Selected;
    public static TreeNodeStates ShowKeyboardCues;
}
[DefaultPropertyAttribute("Nodes")]
[DefaultEventAttribute("AfterSelect")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.TreeViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTreeView")]
public class System.Windows.Forms.TreeView : Control {
    private static int MaxIndent;
    private static string backSlash;
    private static int DefaultTreeViewIndent;
    private DrawTreeNodeEventHandler onDrawNode;
    private NodeLabelEditEventHandler onBeforeLabelEdit;
    private NodeLabelEditEventHandler onAfterLabelEdit;
    private TreeViewCancelEventHandler onBeforeCheck;
    private TreeViewEventHandler onAfterCheck;
    private TreeViewCancelEventHandler onBeforeCollapse;
    private TreeViewEventHandler onAfterCollapse;
    private TreeViewCancelEventHandler onBeforeExpand;
    private TreeViewEventHandler onAfterExpand;
    private TreeViewCancelEventHandler onBeforeSelect;
    private TreeViewEventHandler onAfterSelect;
    private ItemDragEventHandler onItemDrag;
    private TreeNodeMouseHoverEventHandler onNodeMouseHover;
    private EventHandler onRightToLeftLayoutChanged;
    internal TreeNode selectedNode;
    private Indexer imageIndexer;
    private Indexer selectedImageIndexer;
    private bool setOddHeight;
    private TreeNode prevHoveredNode;
    private bool hoveredAlready;
    private bool rightToLeftLayout;
    private IntPtr _mouseDownNode;
    private static int TREEVIEWSTATE_hideSelection;
    private static int TREEVIEWSTATE_labelEdit;
    private static int TREEVIEWSTATE_scrollable;
    private static int TREEVIEWSTATE_checkBoxes;
    private static int TREEVIEWSTATE_showLines;
    private static int TREEVIEWSTATE_showPlusMinus;
    private static int TREEVIEWSTATE_showRootLines;
    private static int TREEVIEWSTATE_sorted;
    private static int TREEVIEWSTATE_hotTracking;
    private static int TREEVIEWSTATE_fullRowSelect;
    private static int TREEVIEWSTATE_showNodeToolTips;
    private static int TREEVIEWSTATE_doubleclickFired;
    private static int TREEVIEWSTATE_mouseUpFired;
    private static int TREEVIEWSTATE_showTreeViewContextMenu;
    private static int TREEVIEWSTATE_lastControlValidated;
    private static int TREEVIEWSTATE_stopResizeWindowMsgs;
    private static int TREEVIEWSTATE_ignoreSelects;
    private static int TREEVIEWSTATE_doubleBufferedPropertySet;
    private BitVector32 treeViewState;
    private static bool isScalingInitialized;
    private static Nullable`1<Size> scaledStateImageSize;
    private ImageList imageList;
    private int indent;
    private int itemHeight;
    private string pathSeparator;
    private BorderStyle borderStyle;
    internal TreeNodeCollection nodes;
    internal TreeNode editNode;
    internal TreeNode root;
    internal Dictionary`2<IntPtr, TreeNode> _nodesByHandle;
    internal bool nodesCollectionClear;
    private MouseButtons downButton;
    private TreeViewDrawMode drawMode;
    private ImageList internalStateImageList;
    private TreeNode topNode;
    private ImageList stateImageList;
    private Color lineColor;
    private string controlToolTipText;
    private IComparer treeViewNodeSorter;
    private TreeNodeMouseClickEventHandler onNodeMouseClick;
    private TreeNodeMouseClickEventHandler onNodeMouseDoubleClick;
    private ToolTipBuffer _toolTipBuffer;
    [CompilerGeneratedAttribute]
private ToolTip <KeyboardToolTip>k__BackingField;
    private static Nullable`1<Size> ScaledStateImageSize { get; }
    internal Indexer ImageIndexer { get; }
    internal Indexer SelectedImageIndexer { get; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("borderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewCheckBoxesDescr")]
public bool CheckBoxes { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewFullRowSelectDescr")]
public bool FullRowSelect { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewHideSelectionDescr")]
public bool HideSelection { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewHotTrackingDescr")]
public bool HotTracking { get; public set; }
    [DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("TreeViewImageIndexDescr")]
[RelatedImageListAttribute("ImageList")]
public int ImageIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TreeViewImageKeyDescr")]
[RelatedImageListAttribute("ImageList")]
public string ImageKey { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TreeViewImageListDescr")]
[RefreshPropertiesAttribute("2")]
public ImageList ImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TreeViewStateImageListDescr")]
public ImageList StateImageList { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeViewIndentDescr")]
public int Indent { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeViewItemHeightDescr")]
public int ItemHeight { get; public set; }
    internal ToolTip KeyboardToolTip { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewLabelEditDescr")]
public bool LabelEdit { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeViewLineColorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TreeViewNodesDescr")]
[MergablePropertyAttribute("False")]
public TreeNodeCollection Nodes { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TreeViewDrawModeDescr")]
public TreeViewDrawMode DrawMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("\")]
[SRDescriptionAttribute("TreeViewPathSeparatorDescr")]
public string PathSeparator { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewScrollableDescr")]
public bool Scrollable { get; public set; }
    [DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("TreeViewSelectedImageIndexDescr")]
[RelatedImageListAttribute("ImageList")]
public int SelectedImageIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TreeViewSelectedImageKeyDescr")]
[RelatedImageListAttribute("ImageList")]
public string SelectedImageKey { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewSelectedNodeDescr")]
public TreeNode SelectedNode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewShowLinesDescr")]
public bool ShowLines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewShowShowNodeToolTipsDescr")]
public bool ShowNodeToolTips { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewShowPlusMinusDescr")]
public bool ShowPlusMinus { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewShowRootLinesDescr")]
public bool ShowRootLines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewSortedDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Sorted { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewNodeSorterDescr")]
public IComparer TreeViewNodeSorter { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewTopNodeDescr")]
public TreeNode TopNode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewVisibleCountDescr")]
public int VisibleCount { get; }
    internal bool SupportsUiaProviders { get; }
    private static Nullable`1<Size> get_ScaledStateImageSize();
    internal Indexer get_ImageIndexer();
    internal Indexer get_SelectedImageIndexer();
    internal virtual void ReleaseUiaProvider(HWND handle);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public bool get_CheckBoxes();
    public void set_CheckBoxes(bool value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_FullRowSelect();
    public void set_FullRowSelect(bool value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public bool get_HotTracking();
    public void set_HotTracking(bool value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    private void AttachImageListHandlers();
    private void DetachImageListHandlers();
    private void AttachStateImageListHandlers();
    private void DetachStateImageListHandlers();
    public ImageList get_StateImageList();
    public void set_StateImageList(ImageList value);
    public int get_Indent();
    public void set_Indent(int value);
    public int get_ItemHeight();
    public void set_ItemHeight(int value);
    [CompilerGeneratedAttribute]
internal ToolTip get_KeyboardToolTip();
    public bool get_LabelEdit();
    public void set_LabelEdit(bool value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public TreeNodeCollection get_Nodes();
    public TreeViewDrawMode get_DrawMode();
    public void set_DrawMode(TreeViewDrawMode value);
    public string get_PathSeparator();
    public void set_PathSeparator(string value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public bool get_Scrollable();
    public void set_Scrollable(bool value);
    public int get_SelectedImageIndex();
    public void set_SelectedImageIndex(int value);
    public string get_SelectedImageKey();
    public void set_SelectedImageKey(string value);
    public TreeNode get_SelectedNode();
    public void set_SelectedNode(TreeNode value);
    public bool get_ShowLines();
    public void set_ShowLines(bool value);
    public bool get_ShowNodeToolTips();
    public void set_ShowNodeToolTips(bool value);
    public bool get_ShowPlusMinus();
    public void set_ShowPlusMinus(bool value);
    public bool get_ShowRootLines();
    public void set_ShowRootLines(bool value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public IComparer get_TreeViewNodeSorter();
    public void set_TreeViewNodeSorter(IComparer value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public TreeNode get_TopNode();
    public void set_TopNode(TreeNode value);
    public int get_VisibleCount();
    public void add_BeforeLabelEdit(NodeLabelEditEventHandler value);
    public void remove_BeforeLabelEdit(NodeLabelEditEventHandler value);
    public void add_AfterLabelEdit(NodeLabelEditEventHandler value);
    public void remove_AfterLabelEdit(NodeLabelEditEventHandler value);
    public void add_BeforeCheck(TreeViewCancelEventHandler value);
    public void remove_BeforeCheck(TreeViewCancelEventHandler value);
    public void add_AfterCheck(TreeViewEventHandler value);
    public void remove_AfterCheck(TreeViewEventHandler value);
    public void add_BeforeCollapse(TreeViewCancelEventHandler value);
    public void remove_BeforeCollapse(TreeViewCancelEventHandler value);
    public void add_AfterCollapse(TreeViewEventHandler value);
    public void remove_AfterCollapse(TreeViewEventHandler value);
    public void add_BeforeExpand(TreeViewCancelEventHandler value);
    public void remove_BeforeExpand(TreeViewCancelEventHandler value);
    public void add_AfterExpand(TreeViewEventHandler value);
    public void remove_AfterExpand(TreeViewEventHandler value);
    public void add_DrawNode(DrawTreeNodeEventHandler value);
    public void remove_DrawNode(DrawTreeNodeEventHandler value);
    public void add_ItemDrag(ItemDragEventHandler value);
    public void remove_ItemDrag(ItemDragEventHandler value);
    public void add_NodeMouseHover(TreeNodeMouseHoverEventHandler value);
    public void remove_NodeMouseHover(TreeNodeMouseHoverEventHandler value);
    public void add_BeforeSelect(TreeViewCancelEventHandler value);
    public void remove_BeforeSelect(TreeViewCancelEventHandler value);
    public void add_AfterSelect(TreeViewEventHandler value);
    public void remove_AfterSelect(TreeViewEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_NodeMouseClick(TreeNodeMouseClickEventHandler value);
    public void remove_NodeMouseClick(TreeNodeMouseClickEventHandler value);
    public void add_NodeMouseDoubleClick(TreeNodeMouseClickEventHandler value);
    public void remove_NodeMouseDoubleClick(TreeNodeMouseClickEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void BeginUpdate();
    public void CollapseAll();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateHandle();
    private void DetachImageList(object sender, EventArgs e);
    private void DetachStateImageList(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    public void EndUpdate();
    public void ExpandAll();
    internal void ForceScrollbarUpdate(bool delayed);
    internal virtual void SetToolTip(ToolTip toolTip);
    public TreeViewHitTestInfo HitTest(Point pt);
    public TreeViewHitTestInfo HitTest(int x, int y);
    internal bool TreeViewBeforeCheck(TreeNode node, TreeViewAction actionTaken);
    internal void TreeViewAfterCheck(TreeNode node, TreeViewAction actionTaken);
    public int GetNodeCount(bool includeSubTrees);
    public TreeNode GetNodeAt(Point pt);
    public TreeNode GetNodeAt(int x, int y);
    private void ImageListRecreateHandle(object sender, EventArgs e);
    private static void UpdateImagesRecursive(TreeNode node);
    private void ImageListChangedHandle(object sender, EventArgs e);
    private static void NotifyAboutGotFocus(TreeNode treeNode);
    private static void NotifyAboutLostFocus(TreeNode treeNode);
    private void StateImageListRecreateHandle(object sender, EventArgs e);
    private void StateImageListChangedHandle(object sender, EventArgs e);
    protected virtual bool IsInputKey(Keys keyData);
    internal TreeNode NodeFromHandle(IntPtr handle);
    protected virtual void OnDrawNode(DrawTreeNodeEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    private void UpdateNativeStateImageList();
    private void SetStateImageList(IntPtr handle);
    private void DestroyNativeStateImageList(bool reset);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnBeforeLabelEdit(NodeLabelEditEventArgs e);
    protected virtual void OnAfterLabelEdit(NodeLabelEditEventArgs e);
    protected virtual void OnBeforeCheck(TreeViewCancelEventArgs e);
    protected virtual void OnAfterCheck(TreeViewEventArgs e);
    protected internal virtual void OnBeforeCollapse(TreeViewCancelEventArgs e);
    protected internal virtual void OnAfterCollapse(TreeViewEventArgs e);
    protected virtual void OnBeforeExpand(TreeViewCancelEventArgs e);
    protected virtual void OnAfterExpand(TreeViewEventArgs e);
    protected virtual void OnItemDrag(ItemDragEventArgs e);
    protected virtual void OnNodeMouseHover(TreeNodeMouseHoverEventArgs e);
    protected virtual void OnBeforeSelect(TreeViewCancelEventArgs e);
    protected virtual void OnAfterSelect(TreeViewEventArgs e);
    protected virtual void OnNodeMouseClick(TreeNodeMouseClickEventArgs e);
    protected virtual void OnNodeMouseDoubleClick(TreeNodeMouseClickEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    private void RefreshNodes();
    private void ResetIndent();
    private void ResetItemHeight();
    private bool ShouldSerializeIndent();
    private bool ShouldSerializeItemHeight();
    private bool ShouldSerializeSelectedImageIndex();
    private bool ShouldSerializeImageIndex();
    public void Sort();
    internal virtual bool get_SupportsUiaProviders();
    public virtual string ToString();
    private void TvnBeginDrag(MouseButtons buttons, NMTREEVIEW* nmtv);
    private IntPtr TvnExpanding(NMTREEVIEW* nmtv);
    private void TvnExpanded(NMTREEVIEW* nmtv);
    private IntPtr TvnSelecting(NMTREEVIEW* nmtv);
    private void TvnSelected(NMTREEVIEW* nmtv);
    private IntPtr TvnBeginLabelEdit(NMTVDISPINFOW nmtvdi);
    private IntPtr TvnEndLabelEdit(NMTVDISPINFOW nmtvdi);
    internal virtual void UpdateStylesCore();
    private void UpdateTreeViewExtendedStyles();
    private static void UpdateCheckedState(TreeNode node, bool update);
    private void WmMouseDown(Message& m, MouseButtons button, int clicks);
    private void CustomDraw(Message& m);
    protected OwnerDrawPropertyBag GetItemRenderStyles(TreeNode node, int state);
    internal virtual ToolInfoWrapper`1<Control> GetToolInfoWrapper(TOOLTIP_FLAGS flags, string caption, ToolTip tooltip);
    private bool WmShowToolTip(Message& m);
    private void WmNeedText(Message& m);
    private void WmNotify(Message& m);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void ShowContextMenu(TreeNode treeNode);
    private void ContextMenuStripClosing(object sender, ToolStripDropDownClosingEventArgs e);
    private void UnhookNodes();
    private void WmPrint(Message& m);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.TreeViewAction : Enum {
    public int value__;
    public static TreeViewAction Unknown;
    public static TreeViewAction ByKeyboard;
    public static TreeViewAction ByMouse;
    public static TreeViewAction Collapse;
    public static TreeViewAction Expand;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeViewCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeViewAction <Action>k__BackingField;
    public TreeNode Node { get; }
    public TreeViewAction Action { get; }
    public TreeViewCancelEventArgs(TreeNode node, bool cancel, TreeViewAction action);
    [CompilerGeneratedAttribute]
public TreeNode get_Node();
    [CompilerGeneratedAttribute]
public TreeViewAction get_Action();
}
public class System.Windows.Forms.TreeViewCancelEventHandler : MulticastDelegate {
    public TreeViewCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TreeViewCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeViewCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.TreeViewDrawMode : Enum {
    public int value__;
    public static TreeViewDrawMode Normal;
    public static TreeViewDrawMode OwnerDrawText;
    public static TreeViewDrawMode OwnerDrawAll;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeViewEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeViewAction <Action>k__BackingField;
    public TreeNode Node { get; }
    public TreeViewAction Action { get; }
    public TreeViewEventArgs(TreeNode node);
    public TreeViewEventArgs(TreeNode node, TreeViewAction action);
    [CompilerGeneratedAttribute]
public TreeNode get_Node();
    [CompilerGeneratedAttribute]
public TreeViewAction get_Action();
}
public class System.Windows.Forms.TreeViewEventHandler : MulticastDelegate {
    public TreeViewEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TreeViewEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeViewEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeViewHitTestInfo : object {
    private TreeViewHitTestLocations loc;
    private TreeNode node;
    public TreeViewHitTestLocations Location { get; }
    public TreeNode Node { get; }
    public TreeViewHitTestInfo(TreeNode hitNode, TreeViewHitTestLocations hitLocation);
    public TreeViewHitTestLocations get_Location();
    public TreeNode get_Node();
}
[FlagsAttribute]
public enum System.Windows.Forms.TreeViewHitTestLocations : Enum {
    public int value__;
    public static TreeViewHitTestLocations None;
    public static TreeViewHitTestLocations Image;
    public static TreeViewHitTestLocations Label;
    public static TreeViewHitTestLocations Indent;
    public static TreeViewHitTestLocations AboveClientArea;
    public static TreeViewHitTestLocations BelowClientArea;
    public static TreeViewHitTestLocations LeftOfClientArea;
    public static TreeViewHitTestLocations RightOfClientArea;
    public static TreeViewHitTestLocations RightOfLabel;
    public static TreeViewHitTestLocations StateImage;
    public static TreeViewHitTestLocations PlusMinus;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TreeViewImageIndexConverter : ImageIndexConverter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Windows.Forms.TreeViewImageKeyConverter : ImageKeyConverter {
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.Triangle : object {
    private static double TRI_HEIGHT_RATIO;
    private static double TRI_WIDTH_RATIO;
    public static void Paint(Graphics g, Rectangle bounds, TriangleDirection dir, Brush backBr, Pen backPen1, Pen backPen2, Pen backPen3, bool opaque);
    private static Point[] BuildTrianglePoints(TriangleDirection dir, Rectangle bounds);
    private static void OffsetPoints(Point[] points, int xOffset, int yOffset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.TypedControlCollection : ReadOnlyControlCollection {
    private Type _typeOfControl;
    private Control _ownerControl;
    public TypedControlCollection(Control owner, Type typeOfControl, bool isReadOnly);
    public TypedControlCollection(Control owner, Type typeOfControl);
    [NullableContextAttribute("2")]
public virtual void Add(Control value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.TypeValidationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Type <ValidatingType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValidInput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public Type ValidatingType { get; }
    public bool IsValidInput { get; }
    public string Message { get; }
    public object ReturnValue { get; }
    public bool Cancel { get; public set; }
    public TypeValidationEventArgs(Type validatingType, bool isValidInput, object returnValue, string message);
    [CompilerGeneratedAttribute]
public Type get_ValidatingType();
    [CompilerGeneratedAttribute]
public bool get_IsValidInput();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public object get_ReturnValue();
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class System.Windows.Forms.TypeValidationEventHandler : MulticastDelegate {
    public TypeValidationEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TypeValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TypeValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.UICues : Enum {
    public int value__;
    public static UICues ShowFocus;
    public static UICues ShowKeyboard;
    public static UICues Shown;
    public static UICues ChangeFocus;
    public static UICues ChangeKeyboard;
    public static UICues Changed;
    public static UICues None;
}
public class System.Windows.Forms.UICuesEventArgs : EventArgs {
    private UICues _uicues;
    public bool ShowFocus { get; }
    public bool ShowKeyboard { get; }
    public bool ChangeFocus { get; }
    public bool ChangeKeyboard { get; }
    public UICues Changed { get; }
    public UICuesEventArgs(UICues uicues);
    public bool get_ShowFocus();
    public bool get_ShowKeyboard();
    public bool get_ChangeFocus();
    public bool get_ChangeKeyboard();
    public UICues get_Changed();
}
public class System.Windows.Forms.UICuesEventHandler : MulticastDelegate {
    public UICuesEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, UICuesEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UICuesEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.UnhandledExceptionMode : Enum {
    public int value__;
    public static UnhandledExceptionMode Automatic;
    public static UnhandledExceptionMode ThrowException;
    public static UnhandledExceptionMode CatchException;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.UpDownBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.UpDownBase : ContainerControl {
    private static int DefaultWheelScrollLinesPerPage;
    private static int DefaultButtonsWidth;
    private static int DefaultControlWidth;
    private static int ThemedBorderWidth;
    private static BorderStyle DefaultBorderStyle;
    private static LeftRightAlignment DefaultUpDownAlign;
    private static int DefaultTimerInterval;
    internal UpDownEdit _upDownEdit;
    internal UpDownButtons _upDownButtons;
    private LeftRightAlignment _upDownAlign;
    private BorderStyle _borderStyle;
    private int _wheelDelta;
    private bool _doubleClickFired;
    internal int _defaultButtonsWidth;
    [CompilerGeneratedAttribute]
private bool <ChangingText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InterceptArrowKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserEdit>k__BackingField;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    public Color BackColor { get; public set; }
    [NullableAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("UpDownBaseBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected bool ChangingText { get; protected set; }
    [NullableAttribute("2")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DockPaddingEdges DockPadding { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlFocusedDescr")]
public bool Focused { get; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("UpDownBaseInterceptArrowKeysDescr")]
public bool InterceptArrowKeys { get; public set; }
    public Size MaximumSize { get; public set; }
    public Size MinimumSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("UpDownBasePreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("UpDownBaseReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [LocalizableAttribute("True")]
public string Text { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("UpDownBaseTextAlignDescr")]
public HorizontalAlignment TextAlign { get; public set; }
    internal TextBox TextBox { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("UpDownBaseAlignmentDescr")]
public LeftRightAlignment UpDownAlign { get; public set; }
    internal UpDownButtons UpDownButtonsInternal { get; }
    protected bool UserEdit { get; protected set; }
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    [NullableContextAttribute("2")]
public void add_AutoSizeChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("2")]
public virtual Image get_BackgroundImage();
    [NullableContextAttribute("2")]
public virtual void set_BackgroundImage(Image value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("2")]
public void add_BackgroundImageLayoutChanged(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    [CompilerGeneratedAttribute]
protected bool get_ChangingText();
    [CompilerGeneratedAttribute]
protected void set_ChangingText(bool value);
    [NullableContextAttribute("2")]
public virtual ContextMenuStrip get_ContextMenuStrip();
    [NullableContextAttribute("2")]
public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public DockPaddingEdges get_DockPadding();
    public virtual bool get_Focused();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_InterceptArrowKeys();
    [CompilerGeneratedAttribute]
public void set_InterceptArrowKeys(bool value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    [NullableContextAttribute("2")]
public void add_MouseEnter(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseEnter(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseLeave(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseLeave(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseHover(EventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseHover(EventHandler value);
    [NullableContextAttribute("2")]
public void add_MouseMove(MouseEventHandler value);
    [NullableContextAttribute("2")]
public void remove_MouseMove(MouseEventHandler value);
    public int get_PreferredHeight();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    internal TextBox get_TextBox();
    public LeftRightAlignment get_UpDownAlign();
    public void set_UpDownAlign(LeftRightAlignment value);
    internal UpDownButtons get_UpDownButtonsInternal();
    [CompilerGeneratedAttribute]
protected bool get_UserEdit();
    [CompilerGeneratedAttribute]
protected void set_UserEdit(bool value);
    public abstract virtual void DownButton();
    internal virtual Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight);
    internal virtual void ReleaseUiaProvider(HWND handle);
    protected virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);
    protected virtual void OnChanged(object source, EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnTextBoxKeyDown(object source, KeyEventArgs e);
    protected virtual void OnTextBoxKeyPress(object source, KeyPressEventArgs e);
    protected virtual void OnTextBoxLostFocus(object source, EventArgs e);
    protected virtual void OnTextBoxResize(object source, EventArgs e);
    protected virtual void OnTextBoxTextChanged(object source, EventArgs e);
    internal virtual void OnStartTimer();
    internal virtual void OnStopTimer();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    private void OnUpDown(object source, UpDownEventArgs e);
    private void PositionControls();
    public void Select(int start, int length);
    private MouseEventArgs TranslateMouseEvent(Control child, MouseEventArgs e);
    public abstract virtual void UpButton();
    protected abstract virtual void UpdateEditText();
    private void UserPreferenceChanged(object sender, UserPreferenceChangedEventArgs pref);
    protected virtual void ValidateEditText();
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
    internal virtual void SetToolTip(ToolTip toolTip);
}
public class System.Windows.Forms.UpDownEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ButtonID>k__BackingField;
    public int ButtonID { get; }
    public UpDownEventArgs(int buttonPushed);
    [CompilerGeneratedAttribute]
public int get_ButtonID();
}
public class System.Windows.Forms.UpDownEventHandler : MulticastDelegate {
    public UpDownEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object source, UpDownEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, UpDownEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.UserControlDocumentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[DesignerAttribute("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerCategoryAttribute("UserControl")]
[DefaultEventAttribute("Load")]
public class System.Windows.Forms.UserControl : ContainerControl {
    [NullableAttribute("1")]
private static object EVENT_LOAD;
    private BorderStyle _borderStyle;
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoValidate AutoValidate { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("UserControlBorderStyleDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public BorderStyle BorderStyle { get; public set; }
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    private static UserControl();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren();
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren(ValidationConstraints validationConstraints);
    private bool FocusInside();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnResize(EventArgs e);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnMouseDown(MouseEventArgs e);
    private void WmSetFocus(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
[FlagsAttribute]
public enum System.Windows.Forms.ValidationConstraints : Enum {
    public int value__;
    public static ValidationConstraints None;
    public static ValidationConstraints Selectable;
    public static ValidationConstraints Enabled;
    public static ValidationConstraints Visible;
    public static ValidationConstraints TabStop;
    public static ValidationConstraints ImmediateChildren;
}
public enum System.Windows.Forms.View : Enum {
    public int value__;
    public static View LargeIcon;
    public static View Details;
    public static View SmallIcon;
    public static View List;
    public static View Tile;
}
public enum System.Windows.Forms.VisualStyles.BackgroundType : Enum {
    public int value__;
    public static BackgroundType ImageFile;
    public static BackgroundType BorderFill;
    public static BackgroundType None;
}
public enum System.Windows.Forms.VisualStyles.BooleanProperty : Enum {
    public int value__;
    public static BooleanProperty Transparent;
    public static BooleanProperty AutoSize;
    public static BooleanProperty BorderOnly;
    public static BooleanProperty Composited;
    public static BooleanProperty BackgroundFill;
    public static BooleanProperty GlyphTransparent;
    public static BooleanProperty GlyphOnly;
    public static BooleanProperty AlwaysShowSizingBar;
    public static BooleanProperty MirrorImage;
    public static BooleanProperty UniformSizing;
    public static BooleanProperty IntegralSizing;
    public static BooleanProperty SourceGrow;
    public static BooleanProperty SourceShrink;
}
public enum System.Windows.Forms.VisualStyles.BorderType : Enum {
    public int value__;
    public static BorderType Rectangle;
    public static BorderType RoundedRectangle;
    public static BorderType Ellipse;
}
public enum System.Windows.Forms.VisualStyles.CheckBoxState : Enum {
    public int value__;
    public static CheckBoxState UncheckedNormal;
    public static CheckBoxState UncheckedHot;
    public static CheckBoxState UncheckedPressed;
    public static CheckBoxState UncheckedDisabled;
    public static CheckBoxState CheckedNormal;
    public static CheckBoxState CheckedHot;
    public static CheckBoxState CheckedPressed;
    public static CheckBoxState CheckedDisabled;
    public static CheckBoxState MixedNormal;
    public static CheckBoxState MixedHot;
    public static CheckBoxState MixedPressed;
    public static CheckBoxState MixedDisabled;
}
public enum System.Windows.Forms.VisualStyles.ColorProperty : Enum {
    public int value__;
    public static ColorProperty BorderColor;
    public static ColorProperty FillColor;
    public static ColorProperty TextColor;
    public static ColorProperty EdgeLightColor;
    public static ColorProperty EdgeHighlightColor;
    public static ColorProperty EdgeShadowColor;
    public static ColorProperty EdgeDarkShadowColor;
    public static ColorProperty EdgeFillColor;
    public static ColorProperty TransparentColor;
    public static ColorProperty GradientColor1;
    public static ColorProperty GradientColor2;
    public static ColorProperty GradientColor3;
    public static ColorProperty GradientColor4;
    public static ColorProperty GradientColor5;
    public static ColorProperty ShadowColor;
    public static ColorProperty GlowColor;
    public static ColorProperty TextBorderColor;
    public static ColorProperty TextShadowColor;
    public static ColorProperty GlyphTextColor;
    public static ColorProperty GlyphTransparentColor;
    public static ColorProperty FillColorHint;
    public static ColorProperty BorderColorHint;
    public static ColorProperty AccentColorHint;
}
public enum System.Windows.Forms.VisualStyles.ComboBoxState : Enum {
    public int value__;
    public static ComboBoxState Normal;
    public static ComboBoxState Hot;
    public static ComboBoxState Pressed;
    public static ComboBoxState Disabled;
}
public enum System.Windows.Forms.VisualStyles.ContentAlignment : Enum {
    public int value__;
    public static ContentAlignment Left;
    public static ContentAlignment Center;
    public static ContentAlignment Right;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.EdgeEffects : Enum {
    public int value__;
    public static EdgeEffects None;
    public static EdgeEffects FillInterior;
    public static EdgeEffects Flat;
    public static EdgeEffects Soft;
    public static EdgeEffects Mono;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.Edges : Enum {
    public int value__;
    public static Edges Left;
    public static Edges Top;
    public static Edges Right;
    public static Edges Bottom;
    public static Edges Diagonal;
}
public enum System.Windows.Forms.VisualStyles.EdgeStyle : Enum {
    public int value__;
    public static EdgeStyle Raised;
    public static EdgeStyle Sunken;
    public static EdgeStyle Etched;
    public static EdgeStyle Bump;
}
public enum System.Windows.Forms.VisualStyles.EnumProperty : Enum {
    public int value__;
    public static EnumProperty BackgroundType;
    public static EnumProperty BorderType;
    public static EnumProperty FillType;
    public static EnumProperty SizingType;
    public static EnumProperty HorizontalAlignment;
    public static EnumProperty ContentAlignment;
    public static EnumProperty VerticalAlignment;
    public static EnumProperty OffsetType;
    public static EnumProperty IconEffect;
    public static EnumProperty TextShadowType;
    public static EnumProperty ImageLayout;
    public static EnumProperty GlyphType;
    public static EnumProperty ImageSelectType;
    public static EnumProperty GlyphFontSizingType;
    public static EnumProperty TrueSizeScalingType;
}
public enum System.Windows.Forms.VisualStyles.FilenameProperty : Enum {
    public int value__;
    public static FilenameProperty ImageFile;
    public static FilenameProperty ImageFile1;
    public static FilenameProperty ImageFile2;
    public static FilenameProperty ImageFile3;
    public static FilenameProperty ImageFile4;
    public static FilenameProperty ImageFile5;
    public static FilenameProperty StockImageFile;
    public static FilenameProperty GlyphImageFile;
}
public enum System.Windows.Forms.VisualStyles.FillType : Enum {
    public int value__;
    public static FillType Solid;
    public static FillType VerticalGradient;
    public static FillType HorizontalGradient;
    public static FillType RadialGradient;
    public static FillType TileImage;
}
public enum System.Windows.Forms.VisualStyles.FontProperty : Enum {
    public int value__;
    public static FontProperty TextFont;
    public static FontProperty GlyphFont;
}
public enum System.Windows.Forms.VisualStyles.GlyphFontSizingType : Enum {
    public int value__;
    public static GlyphFontSizingType None;
    public static GlyphFontSizingType Size;
    public static GlyphFontSizingType Dpi;
}
public enum System.Windows.Forms.VisualStyles.GlyphType : Enum {
    public int value__;
    public static GlyphType None;
    public static GlyphType ImageGlyph;
    public static GlyphType FontGlyph;
}
public enum System.Windows.Forms.VisualStyles.GroupBoxState : Enum {
    public int value__;
    public static GroupBoxState Normal;
    public static GroupBoxState Disabled;
}
internal enum System.Windows.Forms.VisualStyles.HeaderItemState : Enum {
    public int value__;
    public static HeaderItemState Normal;
    public static HeaderItemState Hot;
    public static HeaderItemState Pressed;
}
public enum System.Windows.Forms.VisualStyles.HitTestCode : Enum {
    public int value__;
    public static HitTestCode Nowhere;
    public static HitTestCode Client;
    public static HitTestCode Left;
    public static HitTestCode Right;
    public static HitTestCode Top;
    public static HitTestCode Bottom;
    public static HitTestCode TopLeft;
    public static HitTestCode TopRight;
    public static HitTestCode BottomLeft;
    public static HitTestCode BottomRight;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.HitTestOptions : Enum {
    public int value__;
    public static HitTestOptions BackgroundSegment;
    public static HitTestOptions FixedBorder;
    public static HitTestOptions Caption;
    public static HitTestOptions ResizingBorderLeft;
    public static HitTestOptions ResizingBorderTop;
    public static HitTestOptions ResizingBorderRight;
    public static HitTestOptions ResizingBorderBottom;
    public static HitTestOptions ResizingBorder;
    public static HitTestOptions SizingTemplate;
    public static HitTestOptions SystemSizingMargins;
}
public enum System.Windows.Forms.VisualStyles.HorizontalAlign : Enum {
    public int value__;
    public static HorizontalAlign Left;
    public static HorizontalAlign Center;
    public static HorizontalAlign Right;
}
public enum System.Windows.Forms.VisualStyles.IconEffect : Enum {
    public int value__;
    public static IconEffect None;
    public static IconEffect Glow;
    public static IconEffect Shadow;
    public static IconEffect Pulse;
    public static IconEffect Alpha;
}
public enum System.Windows.Forms.VisualStyles.ImageOrientation : Enum {
    public int value__;
    public static ImageOrientation Vertical;
    public static ImageOrientation Horizontal;
}
public enum System.Windows.Forms.VisualStyles.ImageSelectType : Enum {
    public int value__;
    public static ImageSelectType None;
    public static ImageSelectType Size;
    public static ImageSelectType Dpi;
}
public enum System.Windows.Forms.VisualStyles.IntegerProperty : Enum {
    public int value__;
    public static IntegerProperty ImageCount;
    public static IntegerProperty AlphaLevel;
    public static IntegerProperty BorderSize;
    public static IntegerProperty RoundCornerWidth;
    public static IntegerProperty RoundCornerHeight;
    public static IntegerProperty GradientRatio1;
    public static IntegerProperty GradientRatio2;
    public static IntegerProperty GradientRatio3;
    public static IntegerProperty GradientRatio4;
    public static IntegerProperty GradientRatio5;
    public static IntegerProperty ProgressChunkSize;
    public static IntegerProperty ProgressSpaceSize;
    public static IntegerProperty Saturation;
    public static IntegerProperty TextBorderSize;
    public static IntegerProperty AlphaThreshold;
    public static IntegerProperty Width;
    public static IntegerProperty Height;
    public static IntegerProperty GlyphIndex;
    public static IntegerProperty TrueSizeStretchMark;
    public static IntegerProperty MinDpi1;
    public static IntegerProperty MinDpi2;
    public static IntegerProperty MinDpi3;
    public static IntegerProperty MinDpi4;
    public static IntegerProperty MinDpi5;
}
public enum System.Windows.Forms.VisualStyles.MarginProperty : Enum {
    public int value__;
    public static MarginProperty SizingMargins;
    public static MarginProperty ContentMargins;
    public static MarginProperty CaptionMargins;
}
public enum System.Windows.Forms.VisualStyles.OffsetType : Enum {
    public int value__;
    public static OffsetType TopLeft;
    public static OffsetType TopRight;
    public static OffsetType TopMiddle;
    public static OffsetType BottomLeft;
    public static OffsetType BottomRight;
    public static OffsetType BottomMiddle;
    public static OffsetType MiddleLeft;
    public static OffsetType MiddleRight;
    public static OffsetType LeftOfCaption;
    public static OffsetType RightOfCaption;
    public static OffsetType LeftOfLastButton;
    public static OffsetType RightOfLastButton;
    public static OffsetType AboveLastButton;
    public static OffsetType BelowLastButton;
}
public enum System.Windows.Forms.VisualStyles.PointProperty : Enum {
    public int value__;
    public static PointProperty Offset;
    public static PointProperty TextShadowOffset;
    public static PointProperty MinSize;
    public static PointProperty MinSize1;
    public static PointProperty MinSize2;
    public static PointProperty MinSize3;
    public static PointProperty MinSize4;
    public static PointProperty MinSize5;
}
public enum System.Windows.Forms.VisualStyles.PushButtonState : Enum {
    public int value__;
    public static PushButtonState Normal;
    public static PushButtonState Hot;
    public static PushButtonState Pressed;
    public static PushButtonState Disabled;
    public static PushButtonState Default;
}
public enum System.Windows.Forms.VisualStyles.RadioButtonState : Enum {
    public int value__;
    public static RadioButtonState UncheckedNormal;
    public static RadioButtonState UncheckedHot;
    public static RadioButtonState UncheckedPressed;
    public static RadioButtonState UncheckedDisabled;
    public static RadioButtonState CheckedNormal;
    public static RadioButtonState CheckedHot;
    public static RadioButtonState CheckedPressed;
    public static RadioButtonState CheckedDisabled;
}
public enum System.Windows.Forms.VisualStyles.ScrollBarArrowButtonState : Enum {
    public int value__;
    public static ScrollBarArrowButtonState UpNormal;
    public static ScrollBarArrowButtonState UpHot;
    public static ScrollBarArrowButtonState UpPressed;
    public static ScrollBarArrowButtonState UpDisabled;
    public static ScrollBarArrowButtonState DownNormal;
    public static ScrollBarArrowButtonState DownHot;
    public static ScrollBarArrowButtonState DownPressed;
    public static ScrollBarArrowButtonState DownDisabled;
    public static ScrollBarArrowButtonState LeftNormal;
    public static ScrollBarArrowButtonState LeftHot;
    public static ScrollBarArrowButtonState LeftPressed;
    public static ScrollBarArrowButtonState LeftDisabled;
    public static ScrollBarArrowButtonState RightNormal;
    public static ScrollBarArrowButtonState RightHot;
    public static ScrollBarArrowButtonState RightPressed;
    public static ScrollBarArrowButtonState RightDisabled;
}
public enum System.Windows.Forms.VisualStyles.ScrollBarSizeBoxState : Enum {
    public int value__;
    public static ScrollBarSizeBoxState RightAlign;
    public static ScrollBarSizeBoxState LeftAlign;
}
public enum System.Windows.Forms.VisualStyles.ScrollBarState : Enum {
    public int value__;
    public static ScrollBarState Normal;
    public static ScrollBarState Hot;
    public static ScrollBarState Pressed;
    public static ScrollBarState Disabled;
}
public enum System.Windows.Forms.VisualStyles.SizingType : Enum {
    public int value__;
    public static SizingType FixedSize;
    public static SizingType Stretch;
    public static SizingType Tile;
}
public enum System.Windows.Forms.VisualStyles.StringProperty : Enum {
    public int value__;
    public static StringProperty Text;
}
public enum System.Windows.Forms.VisualStyles.TabItemState : Enum {
    public int value__;
    public static TabItemState Normal;
    public static TabItemState Hot;
    public static TabItemState Selected;
    public static TabItemState Disabled;
}
public enum System.Windows.Forms.VisualStyles.TextBoxState : Enum {
    public int value__;
    public static TextBoxState Normal;
    public static TextBoxState Hot;
    public static TextBoxState Selected;
    public static TextBoxState Disabled;
    public static TextBoxState Readonly;
    public static TextBoxState Assist;
}
public enum System.Windows.Forms.VisualStyles.TextShadowType : Enum {
    public int value__;
    public static TextShadowType None;
    public static TextShadowType Single;
    public static TextShadowType Continuous;
}
public enum System.Windows.Forms.VisualStyles.ToolBarState : Enum {
    public int value__;
    public static ToolBarState Normal;
    public static ToolBarState Hot;
    public static ToolBarState Pressed;
    public static ToolBarState Disabled;
    public static ToolBarState Checked;
    public static ToolBarState HotChecked;
}
public enum System.Windows.Forms.VisualStyles.TrackBarThumbState : Enum {
    public int value__;
    public static TrackBarThumbState Normal;
    public static TrackBarThumbState Hot;
    public static TrackBarThumbState Pressed;
    public static TrackBarThumbState Disabled;
}
public enum System.Windows.Forms.VisualStyles.TrueSizeScalingType : Enum {
    public int value__;
    public static TrueSizeScalingType None;
    public static TrueSizeScalingType Size;
    public static TrueSizeScalingType Dpi;
}
public enum System.Windows.Forms.VisualStyles.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.VisualStyles.VisualStyleElement : object {
    internal static int Count;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private int <State>k__BackingField;
    public string ClassName { get; }
    public int Part { get; }
    public int State { get; }
    private VisualStyleElement(string className, int part, int state);
    public static VisualStyleElement CreateElement(string className, int part, int state);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public int get_Part();
    [CompilerGeneratedAttribute]
public int get_State();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Windows.Forms.VisualStyles.VisualStyleInformation : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static VisualStyleRenderer t_visualStyleRenderer;
    public static bool IsSupportedByOS { get; }
    public static bool IsEnabledByUser { get; }
    internal static string ThemeFilename { get; }
    public static string ColorScheme { get; }
    public static string Size { get; }
    public static string DisplayName { get; }
    public static string Company { get; }
    public static string Author { get; }
    public static string Copyright { get; }
    public static string Url { get; }
    public static string Version { get; }
    public static string Description { get; }
    public static bool SupportsFlatMenus { get; }
    public static int MinimumColorDepth { get; }
    public static Color TextControlBorder { get; }
    public static Color ControlHighlightHot { get; }
    public static bool get_IsSupportedByOS();
    public static bool get_IsEnabledByUser();
    internal static string get_ThemeFilename();
    public static string get_ColorScheme();
    public static string get_Size();
    public static string get_DisplayName();
    public static string get_Company();
    public static string get_Author();
    public static string get_Copyright();
    public static string get_Url();
    public static string get_Version();
    public static string get_Description();
    public static bool get_SupportsFlatMenus();
    public static int get_MinimumColorDepth();
    public static Color get_TextControlBorder();
    public static Color get_ControlHighlightHot();
    private static VisualStyleRenderer SetParameters(VisualStyleElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.VisualStyles.VisualStyleRenderer : object {
    private HRESULT _lastHResult;
    private static int NumberOfPossibleClasses;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ThreadStaticAttribute]
private static Dictionary`2<string, ThemeHandle> t_themeHandles;
    [ThreadStaticAttribute]
private static long t_threadCacheVersion;
    private static long s_globalCacheVersion;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private int <State>k__BackingField;
    private static bool AreClientAreaVisualStylesSupported { get; }
    public static bool IsSupported { get; }
    public string Class { get; private set; }
    public int Part { get; private set; }
    public int State { get; private set; }
    public IntPtr Handle { get; }
    private HTHEME IHandle<Windows.Win32.UI.Controls.HTHEME>.Handle { get; }
    internal HTHEME HTHEME { get; }
    public int LastHResult { get; }
    private static VisualStyleRenderer();
    public VisualStyleRenderer(VisualStyleElement element);
    public VisualStyleRenderer(string className, int part, int state);
    private static bool get_AreClientAreaVisualStylesSupported();
    public static bool get_IsSupported();
    public static bool IsElementDefined(VisualStyleElement element);
    internal static bool IsCombinationDefined(string className, int part);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
private void set_Class(string value);
    [CompilerGeneratedAttribute]
public int get_Part();
    [CompilerGeneratedAttribute]
private void set_Part(int value);
    [CompilerGeneratedAttribute]
public int get_State();
    [CompilerGeneratedAttribute]
private void set_State(int value);
    public IntPtr get_Handle();
    private sealed virtual override HTHEME IHandle<Windows.Win32.UI.Controls.HTHEME>.get_Handle();
    internal HTHEME get_HTHEME();
    public void SetParameters(VisualStyleElement element);
    public void SetParameters(string className, int part, int state);
    public void DrawBackground(IDeviceContext dc, Rectangle bounds);
    internal void DrawBackground(HDC dc, Rectangle bounds, HWND hwnd);
    public void DrawBackground(IDeviceContext dc, Rectangle bounds, Rectangle clipRectangle);
    internal void DrawBackground(HDC dc, Rectangle bounds, Rectangle clipRectangle, HWND hwnd);
    public Rectangle DrawEdge(IDeviceContext dc, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects);
    internal Rectangle DrawEdge(HDC dc, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects);
    public void DrawImage(Graphics g, Rectangle bounds, Image image);
    public void DrawImage(Graphics g, Rectangle bounds, ImageList imageList, int imageIndex);
    public void DrawParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl);
    public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw);
    public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw, bool drawDisabled);
    public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw, bool drawDisabled, TextFormatFlags flags);
    [NullableContextAttribute("2")]
internal void DrawText(HDC dc, Rectangle bounds, string textToDraw, bool drawDisabled, TextFormatFlags flags);
    public Rectangle GetBackgroundContentRectangle(IDeviceContext dc, Rectangle bounds);
    internal Rectangle GetBackgroundContentRectangle(HDC dc, Rectangle bounds);
    public Rectangle GetBackgroundExtent(IDeviceContext dc, Rectangle contentBounds);
    public Region GetBackgroundRegion(IDeviceContext dc, Rectangle bounds);
    public bool GetBoolean(BooleanProperty prop);
    public Color GetColor(ColorProperty prop);
    public int GetEnumValue(EnumProperty prop);
    public string GetFilename(FilenameProperty prop);
    public Font GetFont(IDeviceContext dc, FontProperty prop);
    public int GetInteger(IntegerProperty prop);
    public Size GetPartSize(IDeviceContext dc, ThemeSizeType type);
    internal Size GetPartSize(HDC dc, ThemeSizeType type, HWND hwnd);
    public Size GetPartSize(IDeviceContext dc, Rectangle bounds, ThemeSizeType type);
    public Point GetPoint(PointProperty prop);
    public Padding GetMargins(IDeviceContext dc, MarginProperty prop);
    public string GetString(StringProperty prop);
    public Rectangle GetTextExtent(IDeviceContext dc, string textToDraw, TextFormatFlags flags);
    public Rectangle GetTextExtent(IDeviceContext dc, Rectangle bounds, string textToDraw, TextFormatFlags flags);
    public TextMetrics GetTextMetrics(IDeviceContext dc);
    public HitTestCode HitTestBackground(IDeviceContext dc, Rectangle backgroundRectangle, Point pt, HitTestOptions options);
    public HitTestCode HitTestBackground(Graphics g, Rectangle backgroundRectangle, Region region, Point pt, HitTestOptions options);
    public HitTestCode HitTestBackground(IDeviceContext dc, Rectangle backgroundRectangle, IntPtr hRgn, Point pt, HitTestOptions options);
    public bool IsBackgroundPartiallyTransparent();
    public int get_LastHResult();
    private static void OnUserPreferenceChanging(object sender, UserPreferenceChangingEventArgs ea);
    private static void RefreshCache();
    private static HTHEME GetHandle(string className);
    private static HTHEME GetHandle(string className, bool throwExceptionOnFail);
    private static OpenThemeDataScope OpenThemeData(HWND hwnd, string classList);
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.VisualStyleState : Enum {
    public int value__;
    public static VisualStyleState NoneEnabled;
    public static VisualStyleState ClientAreaEnabled;
    public static VisualStyleState NonClientAreaEnabled;
    public static VisualStyleState ClientAndNonClientAreasEnabled;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[SRDescriptionAttribute("DescriptionVScrollBar")]
public class System.Windows.Forms.VScrollBar : ScrollBar {
    private static int DefaultHeight;
    [NullableAttribute("1")]
protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    [NullableContextAttribute("1")]
protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.VScrollProperties : ScrollProperties {
    private protected SCROLLBAR_CONSTANTS Orientation { get; }
    [NullableContextAttribute("2")]
public VScrollProperties(ScrollableControl container);
    private protected virtual int GetPageSize(ScrollableControl parent);
    private protected virtual SCROLLBAR_CONSTANTS get_Orientation();
    private protected virtual int GetHorizontalDisplayPosition(ScrollableControl parent);
    private protected virtual int GetVerticalDisplayPosition(ScrollableControl parent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Url")]
[DefaultEventAttribute("DocumentCompleted")]
[DockingAttribute("2")]
[SRDescriptionAttribute("DescriptionWebBrowser")]
[DesignerAttribute("System.Windows.Forms.Design.WebBrowserDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.WebBrowser : WebBrowserBase {
    private IWebBrowser2 _axIWebBrowser2;
    private ConnectionPointCookie _cookie;
    private Stream _documentStreamToSetOnLoad;
    private WebBrowserEncryptionLevel _encryptionLevel;
    private object _objectForScripting;
    private WebBrowserEvent _webBrowserEvent;
    [NullableAttribute("1")]
internal string _statusText;
    private static int WEBBROWSERSTATE_webBrowserShortcutsEnabled;
    private static int WEBBROWSERSTATE_documentStreamJustSet;
    private static int WEBBROWSERSTATE_isWebBrowserContextMenuEnabled;
    private static int WEBBROWSERSTATE_canGoBack;
    private static int WEBBROWSERSTATE_canGoForward;
    private static int WEBBROWSERSTATE_scrollbarsEnabled;
    private static int WEBBROWSERSTATE_allowNavigation;
    private BitVector32 _webBrowserState;
    [CompilerGeneratedAttribute]
private EventHandler CanGoBackChanged;
    [CompilerGeneratedAttribute]
private EventHandler CanGoForwardChanged;
    [CompilerGeneratedAttribute]
private WebBrowserDocumentCompletedEventHandler DocumentCompleted;
    [CompilerGeneratedAttribute]
private EventHandler DocumentTitleChanged;
    [CompilerGeneratedAttribute]
private EventHandler EncryptionLevelChanged;
    [CompilerGeneratedAttribute]
private EventHandler FileDownload;
    [CompilerGeneratedAttribute]
private WebBrowserNavigatedEventHandler Navigated;
    [CompilerGeneratedAttribute]
private WebBrowserNavigatingEventHandler Navigating;
    [CompilerGeneratedAttribute]
private CancelEventHandler NewWindow;
    [CompilerGeneratedAttribute]
private WebBrowserProgressChangedEventHandler ProgressChanged;
    [CompilerGeneratedAttribute]
private EventHandler StatusTextChanged;
    private HtmlShimManager htmlShimManager;
    [SRDescriptionAttribute("WebBrowserAllowNavigationDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool AllowNavigation { get; public set; }
    [SRDescriptionAttribute("WebBrowserAllowWebBrowserDropDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool AllowWebBrowserDrop { get; public set; }
    [SRDescriptionAttribute("WebBrowserScriptErrorsSuppressedDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
public bool ScriptErrorsSuppressed { get; public set; }
    internal bool SupportsUiaProviders { get; }
    [SRDescriptionAttribute("WebBrowserWebBrowserShortcutsEnabledDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool WebBrowserShortcutsEnabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanGoBack { get; }
    internal bool CanGoBackInternal { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanGoForward { get; }
    internal bool CanGoForwardInternal { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HtmlDocument Document { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Stream DocumentStream { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DocumentText { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DocumentTitle { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DocumentType { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebBrowserEncryptionLevel EncryptionLevel { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsBusy { get; }
    [SRDescriptionAttribute("WebBrowserIsOfflineDescr")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsOffline { get; }
    [SRDescriptionAttribute("WebBrowserIsWebBrowserContextMenuEnabledDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool IsWebBrowserContextMenuEnabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object ObjectForScripting { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebBrowserReadyState ReadyState { get; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string StatusText { get; }
    [SRDescriptionAttribute("WebBrowserUrlDescr")]
[BindableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.WebBrowserUriTypeConverter")]
[DefaultValueAttribute("")]
public Uri Url { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Version Version { get; }
    [SRDescriptionAttribute("WebBrowserScrollBarsEnabledDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool ScrollBarsEnabled { get; public set; }
    public bool Focused { get; }
    protected Size DefaultSize { get; }
    [NullableAttribute("1")]
internal HtmlShimManager ShimManager { get; }
    private bool IsValidUrl { get; }
    [NullableAttribute("1")]
private IWebBrowser2 AxIWebBrowser2 { get; }
    public bool get_AllowNavigation();
    public void set_AllowNavigation(bool value);
    public bool get_AllowWebBrowserDrop();
    public void set_AllowWebBrowserDrop(bool value);
    public bool get_ScriptErrorsSuppressed();
    public void set_ScriptErrorsSuppressed(bool value);
    internal virtual bool get_SupportsUiaProviders();
    public bool get_WebBrowserShortcutsEnabled();
    public void set_WebBrowserShortcutsEnabled(bool value);
    public bool get_CanGoBack();
    internal bool get_CanGoBackInternal();
    internal void set_CanGoBackInternal(bool value);
    public bool get_CanGoForward();
    internal bool get_CanGoForwardInternal();
    internal void set_CanGoForwardInternal(bool value);
    public HtmlDocument get_Document();
    public Stream get_DocumentStream();
    public void set_DocumentStream(Stream value);
    [NullableContextAttribute("1")]
public string get_DocumentText();
    [NullableContextAttribute("1")]
public void set_DocumentText(string value);
    [NullableContextAttribute("1")]
public string get_DocumentTitle();
    [NullableContextAttribute("1")]
public string get_DocumentType();
    public WebBrowserEncryptionLevel get_EncryptionLevel();
    public bool get_IsBusy();
    public bool get_IsOffline();
    public bool get_IsWebBrowserContextMenuEnabled();
    public void set_IsWebBrowserContextMenuEnabled(bool value);
    public object get_ObjectForScripting();
    public void set_ObjectForScripting(object value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public WebBrowserReadyState get_ReadyState();
    [NullableContextAttribute("1")]
public virtual string get_StatusText();
    public Uri get_Url();
    public void set_Url(Uri value);
    [NullableContextAttribute("1")]
public Version get_Version();
    public bool GoBack();
    public bool GoForward();
    public void GoHome();
    public void GoSearch();
    public void Navigate(Uri url);
    [NullableContextAttribute("1")]
public void Navigate(string urlString);
    public void Navigate(Uri url, string targetFrameName);
    [NullableContextAttribute("1")]
public void Navigate(string urlString, string targetFrameName);
    public void Navigate(Uri url, bool newWindow);
    [NullableContextAttribute("1")]
public void Navigate(string urlString, bool newWindow);
    public void Navigate(Uri url, string targetFrameName, Byte[] postData, string additionalHeaders);
    public void Navigate(string urlString, string targetFrameName, Byte[] postData, string additionalHeaders);
    public void Print();
    public virtual void Refresh();
    public void Refresh(WebBrowserRefreshOption opt);
    public bool get_ScrollBarsEnabled();
    public void set_ScrollBarsEnabled(bool value);
    public void ShowPageSetupDialog();
    public void ShowPrintDialog();
    public void ShowPrintPreviewDialog();
    public void ShowPropertiesDialog();
    public void ShowSaveAsDialog();
    public void Stop();
    [CompilerGeneratedAttribute]
public void add_CanGoBackChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CanGoBackChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_CanGoForwardChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CanGoForwardChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DocumentCompleted(WebBrowserDocumentCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DocumentCompleted(WebBrowserDocumentCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DocumentTitleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DocumentTitleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_EncryptionLevelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EncryptionLevelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_FileDownload(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FileDownload(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigated(WebBrowserNavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(WebBrowserNavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigating(WebBrowserNavigatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(WebBrowserNavigatingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NewWindow(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NewWindow(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ProgressChanged(WebBrowserProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProgressChanged(WebBrowserProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_StatusTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StatusTextChanged(EventHandler value);
    public virtual bool get_Focused();
    protected virtual void Dispose(bool disposing);
    protected virtual Size get_DefaultSize();
    [NullableContextAttribute("1")]
protected virtual void AttachInterfaces(object nativeActiveXObject);
    protected virtual void DetachInterfaces();
    [NullableContextAttribute("1")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateSink();
    protected virtual void DetachSink();
    [NullableContextAttribute("1")]
protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
    [NullableContextAttribute("1")]
protected virtual void OnCanGoBackChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnCanGoForwardChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDocumentCompleted(WebBrowserDocumentCompletedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnDocumentTitleChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnEncryptionLevelChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnFileDownload(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnNavigated(WebBrowserNavigatedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnNavigating(WebBrowserNavigatingEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnNewWindow(CancelEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnProgressChanged(WebBrowserProgressChangedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnStatusTextChanged(EventArgs e);
    [NullableContextAttribute("1")]
internal HtmlShimManager get_ShimManager();
    [NullableContextAttribute("1")]
private string ReadyNavigateToUrl(string urlString);
    [NullableContextAttribute("1")]
private string ReadyNavigateToUrl(Uri url);
    private void PerformNavigateHelper(string urlString, bool newWindow, string targetFrameName, Byte[] postData, string headers);
    private void PerformNavigate2(Object& URL, Object& flags, Object& targetFrameName, Object& postData, Object& headers);
    private bool ShouldSerializeDocumentText();
    private bool get_IsValidUrl();
    private bool ShouldSerializeUrl();
    private bool ShowContextMenu(Point location);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
private IWebBrowser2 get_AxIWebBrowser2();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultPropertyAttribute("Name")]
[DefaultEventAttribute("Enter")]
[DesignerAttribute("System.Windows.Forms.Design.AxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.WebBrowserBase : Control {
    private AXState _axState;
    private AXState _axReloadingState;
    private AXEditMode _axEditMode;
    private BitVector32 _axHostState;
    private SelectionStyle _selectionStyle;
    private WebBrowserSiteBase _axSite;
    private ContainerControl _containingControl;
    private HWND _hwndFocus;
    private EventHandler _selectionChangeHandler;
    private Guid _clsid;
    private Interface _axOleObject;
    private Interface _axOleInPlaceObject;
    private Interface _axOleInPlaceActiveObject;
    private Interface _axOleControl;
    private WebBrowserBaseNativeWindow _axWindow;
    private Size _webBrowserBaseChangingSize;
    private WebBrowserContainer _wbContainer;
    private bool _ignoreDialogKeys;
    internal WebBrowserContainer container;
    internal object _activeXInstance;
    [CompilerGeneratedAttribute]
private int <NoComponentChangeEvents>k__BackingField;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object ActiveXInstance { get; }
    unknown ISite Site {public set; }
    internal AXState ActiveXState { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
internal ContainerControl ContainingControl { get; }
    internal bool IsUserMode { get; }
    internal int NoComponentChangeEvents { get; internal set; }
    [NullableAttribute("1")]
internal WebBrowserSiteBase ActiveXSite { get; }
    [NullableAttribute("1")]
private EventHandler SelectionChangeHandler { get; }
    private bool EditMode { get; }
    internal Interface AXInPlaceObject { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[LocalizableAttribute("False")]
public RightToLeft RightToLeft { get; public set; }
    [NullableAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool UseWaitCursor { get; public set; }
    [NullableContextAttribute("1")]
internal WebBrowserBase(string clsidString);
    public object get_ActiveXInstance();
    [NullableContextAttribute("1")]
protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
    [NullableContextAttribute("1")]
protected virtual void AttachInterfaces(object nativeActiveXObject);
    protected virtual void DetachInterfaces();
    protected virtual void CreateSink();
    protected virtual void DetachSink();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    public virtual void set_Site(ISite value);
    internal virtual void OnBoundsUpdate(int x, int y, int width, int height);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual bool PreProcessMessage(Message& msg);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
protected virtual void OnParentChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnVisibleChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnGotFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnLostFocus(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    internal virtual bool CanSelectCore();
    internal virtual bool AllowsKeyboardToolTip();
    [NullableContextAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnForeColorChanged(EventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void Dispose(bool disposing);
    internal AXState get_ActiveXState();
    internal void set_ActiveXState(AXState value);
    internal bool GetAXHostState(int mask);
    internal void SetAXHostState(int mask, bool value);
    internal IntPtr GetHandleNoCreate();
    internal void TransitionUpTo(AXState state);
    internal void TransitionDownTo(AXState state);
    internal bool DoVerb(OLEIVERB verb);
    internal ContainerControl get_ContainingControl();
    [NullableContextAttribute("1")]
internal WebBrowserContainer CreateWebBrowserContainer();
    [NullableContextAttribute("1")]
internal WebBrowserContainer GetParentContainer();
    internal void SetEditMode(AXEditMode em);
    internal void SetSelectionStyle(SelectionStyle selectionStyle);
    internal void AddSelectionHandler();
    internal bool RemoveSelectionHandler();
    internal void AttachWindow(HWND hwnd);
    internal bool get_IsUserMode();
    internal void MakeDirty();
    [CompilerGeneratedAttribute]
internal int get_NoComponentChangeEvents();
    [CompilerGeneratedAttribute]
internal void set_NoComponentChangeEvents(int value);
    private void StartEvents();
    private void StopEvents();
    private void TransitionFromPassiveToLoaded();
    private void TransitionFromLoadedToPassive();
    private void TransitionFromLoadedToRunning();
    private void TransitionFromRunningToLoaded();
    private void TransitionFromRunningToInPlaceActive();
    private void TransitionFromInPlaceActiveToRunning();
    private void TransitionFromInPlaceActiveToUIActive();
    private void TransitionFromUIActiveToInPlaceActive();
    [NullableContextAttribute("1")]
internal WebBrowserSiteBase get_ActiveXSite();
    private void AttachInterfacesInternal();
    private void DetachInterfacesInternal();
    [NullableContextAttribute("1")]
private EventHandler get_SelectionChangeHandler();
    [NullableContextAttribute("1")]
private void OnNewSelection(object sender, EventArgs e);
    private Size SetExtent(int width, int height);
    private Size GetExtent();
    private void HiMetric2Pixel(Size& sz);
    private void Pixel2hiMetric(Size& sz);
    private bool get_EditMode();
    internal ContainerControl FindContainerControlInternal();
    private void AmbientChanged(int dispid);
    internal Interface get_AXInPlaceObject();
    protected virtual Size get_DefaultSize();
    protected virtual bool IsInputChar(char charCode);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    [NullableContextAttribute("1")]
public virtual Font get_Font();
    [NullableContextAttribute("1")]
public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    [NullableContextAttribute("1")]
public virtual Cursor get_Cursor();
    [NullableContextAttribute("1")]
public virtual void set_Cursor(Cursor value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    [NullableContextAttribute("1")]
public virtual string get_Text();
    [NullableContextAttribute("1")]
public virtual void set_Text(string value);
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_MouseCaptureChanged(EventHandler value);
    public void remove_MouseCaptureChanged(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
}
internal class System.Windows.Forms.WebBrowserContainer : object {
    [NullableAttribute("1")]
private WebBrowserBase parent;
    [NullableAttribute("2")]
private IContainer assocContainer;
    [NullableAttribute("2")]
private WebBrowserBase siteUIActive;
    [NullableAttribute("2")]
private WebBrowserBase siteActive;
    [NullableAttribute("1")]
private HashSet`1<Control> containerCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Control> components;
    [NullableAttribute("2")]
private WebBrowserBase _controlInEditMode;
    [NullableContextAttribute("1")]
internal WebBrowserContainer(WebBrowserBase parent);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IParseDisplayName.Interface.ParseDisplayName(IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleContainer.Interface.ParseDisplayName(IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleContainer.Interface.EnumObjects(UInt32 grfFlags, IEnumUnknown** ppenum);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleContainer.Interface.LockContainer(BOOL fLock);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.GetBorder(RECT* lprectBorder);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.RequestBorderSpace(RECT* pborderwidths);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.SetBorderSpace(RECT* pborderwidths);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.SetActiveObject(IOleInPlaceActiveObject* pActiveObject, PCWSTR pszObjName);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.InsertMenus(HMENU hmenuShared, OLEMENUGROUPWIDTHS* lpMenuWidths);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.SetMenu(HMENU hmenuShared, IntPtr holemenu, HWND hwndActiveObject);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.RemoveMenus(HMENU hmenuShared);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.SetStatusText(PCWSTR pszStatusText);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.EnableModeless(BOOL fEnable);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceFrame.Interface.TranslateAccelerator(MSG* lpmsg, ushort wID);
    [NullableContextAttribute("1")]
private void ListAXControls(List`1<object> list, bool fuseOcx);
    private HashSet`1<Control> GetComponents();
    [NullableContextAttribute("2")]
private IContainer GetParentsContainer();
    [NullableContextAttribute("2")]
private IContainer GetParentIContainer();
    [NullableContextAttribute("2")]
private void FillComponentsTable(IContainer container);
    [NullableContextAttribute("1")]
private void GetAllChildren(Control ctl);
    [NullableContextAttribute("1")]
private bool RegisterControl(WebBrowserBase ctl);
    [NullableContextAttribute("1")]
private void OnComponentRemoved(object sender, ComponentEventArgs e);
    [NullableContextAttribute("1")]
internal void AddControl(Control ctl);
    [NullableContextAttribute("1")]
internal void RemoveControl(Control ctl);
    [NullableContextAttribute("1")]
internal static WebBrowserContainer FindContainerForControl(WebBrowserBase ctl);
    [NullableContextAttribute("1")]
internal static string GetNameForControl(Control ctl);
    [NullableContextAttribute("1")]
internal void OnUIActivate(WebBrowserBase site);
    [NullableContextAttribute("1")]
internal void OnUIDeactivate(WebBrowserBase site);
    [NullableContextAttribute("1")]
internal void OnInPlaceDeactivate(WebBrowserBase site);
    [NullableContextAttribute("1")]
internal void OnExitEditMode(WebBrowserBase ctl);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceUIWindow.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceUIWindow.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceUIWindow.Interface.GetBorder(RECT* lprectBorder);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceUIWindow.Interface.RequestBorderSpace(RECT* pborderwidths);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceUIWindow.Interface.SetBorderSpace(RECT* pborderwidths);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceUIWindow.Interface.SetActiveObject(IOleInPlaceActiveObject* pActiveObject, PCWSTR pszObjName);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.ContextSensitiveHelp(BOOL fEnterMode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.WebBrowserDocumentCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public Uri Url { get; }
    public WebBrowserDocumentCompletedEventArgs(Uri url);
    [CompilerGeneratedAttribute]
public Uri get_Url();
}
public class System.Windows.Forms.WebBrowserDocumentCompletedEventHandler : MulticastDelegate {
    public WebBrowserDocumentCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, WebBrowserDocumentCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserDocumentCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.WebBrowserEncryptionLevel : Enum {
    public int value__;
    public static WebBrowserEncryptionLevel Insecure;
    public static WebBrowserEncryptionLevel Mixed;
    public static WebBrowserEncryptionLevel Unknown;
    public static WebBrowserEncryptionLevel Bit40;
    public static WebBrowserEncryptionLevel Bit56;
    public static WebBrowserEncryptionLevel Fortezza;
    public static WebBrowserEncryptionLevel Bit128;
}
internal static class System.Windows.Forms.WebBrowserHelper : object {
    internal static int sinkAttached;
    internal static int manualUpdate;
    internal static int setClientSiteFirst;
    internal static int addedSelectionHandler;
    internal static int siteProcessedInputKey;
    internal static int inTransition;
    internal static int processingKeyUp;
    internal static int isMaskEdit;
    internal static int recomputeContainingControl;
    private static int logPixelsX;
    private static int logPixelsY;
    private static int HMperInch;
    internal static Guid windowsMediaPlayer_Clsid;
    internal static Guid comctlImageCombo_Clsid;
    internal static Guid maskEdit_Clsid;
    internal static MessageId REGMSG_MSG;
    internal static int REGMSG_RETVAL;
    internal static int LogPixelsX { get; }
    internal static int LogPixelsY { get; }
    private static WebBrowserHelper();
    internal static int Pix2HM(int pix, int logP);
    internal static int HM2Pix(int hm, int logP);
    internal static int get_LogPixelsX();
    internal static int get_LogPixelsY();
    [NullableContextAttribute("1")]
internal static ISelectionService GetSelectionService(Control ctl);
    internal static RECT GetClipRect();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.WebBrowserNavigatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public Uri Url { get; }
    public WebBrowserNavigatedEventArgs(Uri url);
    [CompilerGeneratedAttribute]
public Uri get_Url();
}
public class System.Windows.Forms.WebBrowserNavigatedEventHandler : MulticastDelegate {
    public WebBrowserNavigatedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, WebBrowserNavigatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserNavigatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.WebBrowserNavigatingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameName>k__BackingField;
    public Uri Url { get; }
    public string TargetFrameName { get; }
    public WebBrowserNavigatingEventArgs(Uri url, string targetFrameName);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public string get_TargetFrameName();
}
public class System.Windows.Forms.WebBrowserNavigatingEventHandler : MulticastDelegate {
    public WebBrowserNavigatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, WebBrowserNavigatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserNavigatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.WebBrowserProgressChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private long <CurrentProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumProgress>k__BackingField;
    public long CurrentProgress { get; }
    public long MaximumProgress { get; }
    public WebBrowserProgressChangedEventArgs(long currentProgress, long maximumProgress);
    [CompilerGeneratedAttribute]
public long get_CurrentProgress();
    [CompilerGeneratedAttribute]
public long get_MaximumProgress();
}
public class System.Windows.Forms.WebBrowserProgressChangedEventHandler : MulticastDelegate {
    public WebBrowserProgressChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, WebBrowserProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.WebBrowserReadyState : Enum {
    public int value__;
    public static WebBrowserReadyState Uninitialized;
    public static WebBrowserReadyState Loading;
    public static WebBrowserReadyState Loaded;
    public static WebBrowserReadyState Interactive;
    public static WebBrowserReadyState Complete;
}
public enum System.Windows.Forms.WebBrowserRefreshOption : Enum {
    public int value__;
    public static WebBrowserRefreshOption Normal;
    public static WebBrowserRefreshOption IfExpired;
    public static WebBrowserRefreshOption Continue;
    public static WebBrowserRefreshOption Completely;
}
public class System.Windows.Forms.WebBrowserSiteBase : object {
    [NullableAttribute("1")]
private WebBrowserBase host;
    [NullableAttribute("2")]
private ConnectionPointCookie connectionPoint;
    [NullableAttribute("1")]
internal WebBrowserBase Host { get; }
    [NullableContextAttribute("1")]
internal WebBrowserSiteBase(WebBrowserBase h);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
internal WebBrowserBase get_Host();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.OnControlInfoChanged();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.LockInPlaceActive(BOOL fLock);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.GetExtendedControl(IDispatch** ppDisp);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.TransformCoords(POINTL* pPtlHimetric, PointF* pPtfContainer, UInt32 dwFlags);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.TranslateAccelerator(MSG* pMsg, KEYMODIFIERS grfModifiers);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.OnFocus(BOOL fGotFocus);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleControlSite.Interface.ShowPropertyFrame();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleClientSite.Interface.SaveObject();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleClientSite.Interface.GetMoniker(UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker** ppmk);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleClientSite.Interface.GetContainer(IOleContainer** ppContainer);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleClientSite.Interface.ShowObject();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleClientSite.Interface.OnShowWindow(BOOL fShow);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleClientSite.Interface.RequestNewObjectLayout();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.ContextSensitiveHelp(BOOL fEnterMode);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.CanInPlaceActivate();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.OnInPlaceActivate();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.OnUIActivate();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, RECT* lprcPosRect, RECT* lprcClipRect, OLEINPLACEFRAMEINFO* lpFrameInfo);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.Scroll(SIZE scrollExtant);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.OnUIDeactivate(BOOL fUndoable);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.OnInPlaceDeactivate();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.DiscardUndoState();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.DeactivateAndUndo();
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleInPlaceSite.Interface.OnPosRectChange(RECT* lprcPosRect);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.ISimpleFrameSite.Interface.PreMessageFilter(HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT* plResult, UInt32* pdwCookie);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.ISimpleFrameSite.Interface.PostMessageFilter(HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT* plResult, UInt32 dwCookie);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IPropertyNotifySink.Interface.OnChanged(int dispid);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IPropertyNotifySink.Interface.OnRequestEdit(int dispid);
    internal virtual void OnPropertyChanged(int dispid);
    internal void StartEvents();
    internal void StopEvents();
    private HRESULT OnActiveXRectChange(RECT* lprcPosRect);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.GetWindow(HWND* phwnd);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IOleWindow.Interface.ContextSensitiveHelp(BOOL fEnterMode);
}
internal class System.Windows.Forms.WebBrowserUriTypeConverter : UriTypeConverter {
    [NullableContextAttribute("2")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[ExtensionAttribute]
internal static class System.Windows.Forms.Win32WindowExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static WINDOW_EX_STYLE GetExtendedStyle(IWin32Window window);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.WinCategoryAttribute : CategoryAttribute {
    public WinCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
    private static object GetSRObject(string name);
}
public class System.Windows.Forms.WindowsFormsSection : object {
    public bool JitDebugging { get; public set; }
    [NullableContextAttribute("1")]
internal static WindowsFormsSection GetSection();
    public bool get_JitDebugging();
    public void set_JitDebugging(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.WindowsFormsSynchronizationContext : SynchronizationContext {
    private Control _controlToSendTo;
    private WeakReference _destinationThread;
    [ThreadStaticAttribute]
private static bool t_doNotAutoInstall;
    [ThreadStaticAttribute]
private static bool t_inSyncContextInstallation;
    [ThreadStaticAttribute]
private static SynchronizationContext t_previousSyncContext;
    private Thread DestinationThread { get; private set; }
    [EditorBrowsableAttribute("2")]
public static bool AutoInstall { get; public set; }
    private WindowsFormsSynchronizationContext(Control marshalingControl, Thread destinationThread);
    private Thread get_DestinationThread();
    private void set_DestinationThread(Thread value);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public virtual void Send(SendOrPostCallback d, object state);
    [NullableContextAttribute("1")]
public virtual void Post(SendOrPostCallback d, object state);
    [NullableContextAttribute("1")]
public virtual SynchronizationContext CreateCopy();
    public static bool get_AutoInstall();
    public static void set_AutoInstall(bool value);
    internal static void InstallIfNeeded();
    public static void Uninstall();
    internal static void Uninstall(bool turnOffAutoInstall);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class System.Windows.Forms.WindowsFormsUtils : object {
    public static ContentAlignment AnyRightAlign;
    public static ContentAlignment AnyLeftAlign;
    public static ContentAlignment AnyTopAlign;
    public static ContentAlignment AnyBottomAlign;
    public static ContentAlignment AnyMiddleAlign;
    public static ContentAlignment AnyCenterAlign;
    public static Point LastCursorPoint { get; }
    public static Point get_LastCursorPoint();
    public static bool ContainsMnemonic(string text);
    internal static Rectangle ConstrainToScreenWorkingAreaBounds(Rectangle bounds);
    internal static Rectangle ConstrainToScreenBounds(Rectangle bounds);
    internal static Rectangle ConstrainToBounds(Rectangle constrainingBounds, Rectangle bounds);
    internal static string EscapeTextWithAmpersands(string text);
    [NullableContextAttribute("1")]
internal static string GetControlInformation(HWND hwnd);
    public static char GetMnemonic(string text, bool convertToUpperCase);
    public static string TextWithoutMnemonics(string text);
    [NullableContextAttribute("1")]
public static Point TranslatePoint(Point point, Control fromControl, Control toControl);
    public static bool SafeCompareStrings(string string1, string string2, bool ignoreCase);
    [NullableContextAttribute("1")]
public static string GetComponentName(IComponent component, string defaultNameValue);
}
internal class System.Windows.Forms.WindowSubclassHandler : object {
    private HWND _handle;
    private bool _opened;
    private bool _disposed;
    private Void* _originalWindowProc;
    [NullableAttribute("1")]
private WNDPROC _windowProcDelegate;
    private Void* _windowProcDelegatePtr;
    public WindowSubclassHandler(HWND hwnd);
    public void Open();
    public sealed virtual void Dispose();
    public void KeepCallbackDelegateAlive();
    protected virtual void Dispose(bool disposing);
    protected virtual void WndProc(Message& m);
    [NullableContextAttribute("1")]
protected virtual bool CanCatchWndProcException(Exception exception);
    [NullableContextAttribute("1")]
protected virtual void HandleWndProcException(Exception exception);
    private LRESULT NativeWndProc(HWND hWnd, MessageId msg, WPARAM wParam, LPARAM lParam);
}
internal static class System.Windows.Forms.WinFormsMetadataUpdateHandler : object {
    internal static void UpdateApplication(Type[] types);
}
