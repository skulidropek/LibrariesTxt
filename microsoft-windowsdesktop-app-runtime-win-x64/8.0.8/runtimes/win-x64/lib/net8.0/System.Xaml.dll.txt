internal static class FxResources.System.Xaml.SR : object {
}
internal class MS.Internal.Serialization.StringValueSerializer : ValueSerializer {
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
}
internal class MS.Internal.Serialization.TypeConverterValueSerializer : ValueSerializer {
    private TypeConverter converter;
    public TypeConverterValueSerializer(TypeConverter converter);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
}
[AttributeUsageAttribute("5628")]
internal class MS.Internal.WindowsBase.FriendAccessAllowedAttribute : Attribute {
}
internal static class MS.Internal.Xaml.Context.ContextServices : object {
    public static object GetTargetProperty(ObjectWriterContext xamlContext);
}
internal class MS.Internal.Xaml.Context.FixupTarget : object {
    [CompilerGeneratedAttribute]
private XamlMember <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <InstanceType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemporaryCollectionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndInstanceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndInstanceLinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private FixupTargetKeyHolder <KeyHolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstanceIsOnTheStack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstanceWasGotten>k__BackingField;
    public XamlMember Property { get; public set; }
    public object Instance { get; public set; }
    public string InstanceName { get; public set; }
    public XamlType InstanceType { get; public set; }
    public int TemporaryCollectionIndex { get; public set; }
    public int EndInstanceLineNumber { get; public set; }
    public int EndInstanceLinePosition { get; public set; }
    public FixupTargetKeyHolder KeyHolder { get; public set; }
    public bool InstanceIsOnTheStack { get; public set; }
    public bool InstanceWasGotten { get; public set; }
    [CompilerGeneratedAttribute]
public XamlMember get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(XamlMember value);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(object value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public XamlType get_InstanceType();
    [CompilerGeneratedAttribute]
public void set_InstanceType(XamlType value);
    [CompilerGeneratedAttribute]
public int get_TemporaryCollectionIndex();
    [CompilerGeneratedAttribute]
public void set_TemporaryCollectionIndex(int value);
    [CompilerGeneratedAttribute]
public int get_EndInstanceLineNumber();
    [CompilerGeneratedAttribute]
public void set_EndInstanceLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_EndInstanceLinePosition();
    [CompilerGeneratedAttribute]
public void set_EndInstanceLinePosition(int value);
    [CompilerGeneratedAttribute]
public FixupTargetKeyHolder get_KeyHolder();
    [CompilerGeneratedAttribute]
public void set_KeyHolder(FixupTargetKeyHolder value);
    [CompilerGeneratedAttribute]
public bool get_InstanceIsOnTheStack();
    [CompilerGeneratedAttribute]
public void set_InstanceIsOnTheStack(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstanceWasGotten();
    [CompilerGeneratedAttribute]
public void set_InstanceWasGotten(bool value);
    private sealed virtual override XamlException MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo(XamlException ex);
}
internal class MS.Internal.Xaml.Context.FixupTargetKeyHolder : object {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    public object Key { get; public set; }
    public FixupTargetKeyHolder(object key);
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(object value);
}
internal enum MS.Internal.Xaml.Context.FixupType : Enum {
    public int value__;
    public static FixupType MarkupExtensionFirstRun;
    public static FixupType MarkupExtensionRerun;
    public static FixupType PropertyValue;
    public static FixupType ObjectInitializationValue;
    public static FixupType UnresolvedChildren;
}
internal interface MS.Internal.Xaml.Context.ICheckIfInitialized {
    public abstract virtual bool IsFullyInitialized(object obj);
}
internal class MS.Internal.Xaml.Context.NameFixupGraph : object {
    private Dictionary`2<object, FrugalObjectList`1<NameFixupToken>> _dependenciesByParentObject;
    private Dictionary`2<object, NameFixupToken> _dependenciesByChildObject;
    private Dictionary`2<string, FrugalObjectList`1<NameFixupToken>> _dependenciesByName;
    private Queue`1<NameFixupToken> _resolvedTokensPendingProcessing;
    private NameFixupToken _deferredRootProvideValue;
    private HashSet`1<object> _uninitializedObjectsAtParseEnd;
    public bool HasResolvedTokensPendingProcessing { get; }
    public void AddDependency(NameFixupToken fixupToken);
    public bool HasUnresolvedChildren(object parent);
    public bool HasUnresolvedOrPendingChildren(object instance);
    public bool WasUninitializedAtEndOfParse(object instance);
    public void GetDependentNames(object instance, List`1<string> result);
    public void ResolveDependenciesTo(object instance, string name);
    public bool get_HasResolvedTokensPendingProcessing();
    public NameFixupToken GetNextResolvedTokenPendingProcessing();
    public void IsOffTheStack(object instance, string name, int lineNumber, int linePosition);
    public void AddEndOfParseDependency(object childThatHasUnresolvedChildren, FixupTarget parentObject);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Context.NameFixupGraph/<GetRemainingSimpleFixups>d__18")]
public IEnumerable`1<NameFixupToken> GetRemainingSimpleFixups();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Context.NameFixupGraph/<GetRemainingReparses>d__19")]
public IEnumerable`1<NameFixupToken> GetRemainingReparses();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Context.NameFixupGraph/<GetRemainingObjectDependencies>d__20")]
public IEnumerable`1<NameFixupToken> GetRemainingObjectDependencies();
    private bool FindDependencies(NameFixupToken inEdge, List`1<NameFixupToken> alreadyTraversed);
    private void RemoveTokenByParent(NameFixupToken token);
    private static void AddToMultiDict(Dictionary`2<TKey, FrugalObjectList`1<NameFixupToken>> dict, TKey key, NameFixupToken value);
    private static void ThrowProvideValueCycle(IEnumerable`1<NameFixupToken> markupExtensionTokens);
}
internal class MS.Internal.Xaml.Context.NameFixupToken : object {
    private List`1<string> _names;
    private List`1<INameScopeDictionary> _nameScopeDictionaryList;
    [CompilerGeneratedAttribute]
private bool <CanAssignDirectly>k__BackingField;
    [CompilerGeneratedAttribute]
private FixupType <FixupType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private FixupTarget <Target>k__BackingField;
    private XamlRuntime _runtime;
    private ObjectWriterContext _targetContext;
    [CompilerGeneratedAttribute]
private XamlSavedContext <SavedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ReferencedObject>k__BackingField;
    public bool CanAssignDirectly { get; public set; }
    public FixupType FixupType { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    public FixupTarget Target { get; public set; }
    public XamlRuntime Runtime { get; public set; }
    public ObjectWriterContext TargetContext { get; }
    public XamlSavedContext SavedContext { get; public set; }
    public List`1<INameScopeDictionary> NameScopeDictionaryList { get; }
    public List`1<string> NeededNames { get; }
    public object ReferencedObject { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CanAssignDirectly();
    [CompilerGeneratedAttribute]
public void set_CanAssignDirectly(bool value);
    [CompilerGeneratedAttribute]
public FixupType get_FixupType();
    [CompilerGeneratedAttribute]
public void set_FixupType(FixupType value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public FixupTarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(FixupTarget value);
    public XamlRuntime get_Runtime();
    public void set_Runtime(XamlRuntime value);
    public ObjectWriterContext get_TargetContext();
    [CompilerGeneratedAttribute]
public XamlSavedContext get_SavedContext();
    [CompilerGeneratedAttribute]
public void set_SavedContext(XamlSavedContext value);
    public List`1<INameScopeDictionary> get_NameScopeDictionaryList();
    public List`1<string> get_NeededNames();
    [CompilerGeneratedAttribute]
public object get_ReferencedObject();
    [CompilerGeneratedAttribute]
public void set_ReferencedObject(object value);
    internal object ResolveName(string name);
    private sealed virtual override XamlException MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo(XamlException ex);
}
internal class MS.Internal.Xaml.Context.ObjectWriterContext : XamlContext {
    private XamlContextStack`1<ObjectWriterFrame> _stack;
    private object _rootInstance;
    private ServiceProviderContext _serviceProviderContext;
    private XamlRuntime _runtime;
    private int _savedDepth;
    private bool _nameResolutionComplete;
    private XamlObjectWriterSettings _settings;
    private List`1<NameScopeInitializationCompleteSubscriber> _nameScopeInitializationCompleteSubscribers;
    [CompilerGeneratedAttribute]
private ICheckIfInitialized <IsInitializedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber_StartObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition_StartObject>k__BackingField;
    public Assembly LocalAssembly { get; protected set; }
    internal ICheckIfInitialized IsInitializedCallback { get; internal set; }
    internal bool NameResolutionComplete { get; internal set; }
    internal XamlRuntime Runtime { get; }
    internal ServiceProviderContext ServiceProviderContext { get; }
    public int Depth { get; }
    public int SavedDepth { get; }
    public int LiveDepth { get; }
    public XamlType CurrentType { get; public set; }
    public XamlType ParentType { get; }
    public XamlType GrandParentType { get; }
    public XamlMember CurrentProperty { get; public set; }
    public XamlMember ParentProperty { get; }
    public XamlMember GrandParentProperty { get; }
    public object CurrentInstance { get; public set; }
    public object ParentInstance { get; }
    public object GrandParentInstance { get; }
    public object CurrentCollection { get; public set; }
    public object ParentCollection { get; }
    public bool CurrentWasAssignedAtCreation { get; public set; }
    public bool CurrentIsObjectFromMember { get; public set; }
    public bool ParentIsObjectFromMember { get; }
    public bool GrandParentIsObjectFromMember { get; }
    unknown bool CurrentIsPropertyValueSet {public set; }
    public bool ParentIsPropertyValueSet { get; public set; }
    public bool CurrentIsTypeConvertedObject { get; public set; }
    public Dictionary`2<XamlMember, object> CurrentPreconstructionPropertyValues { get; }
    public bool CurrentHasPreconstructionPropertyValuesDictionary { get; }
    public Dictionary`2<XamlMember, object> ParentPreconstructionPropertyValues { get; }
    public HashSet`1<XamlMember> CurrentAssignedProperties { get; }
    public HashSet`1<XamlMember> ParentAssignedProperties { get; }
    public string CurrentInstanceRegisteredName { get; public set; }
    public string ParentInstanceRegisteredName { get; public set; }
    public Uri BaseUri { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    public Uri SourceBamlUri { get; }
    public int LineNumber_StartObject { get; public set; }
    public int LinePosition_StartObject { get; public set; }
    public INameScopeDictionary CurrentNameScope { get; }
    public INameScopeDictionary ParentNameScope { get; }
    public INameScopeDictionary GrandParentNameScope { get; }
    public INameScopeDictionary RootNameScope { get; }
    public Object[] CurrentCtorArgs { get; public set; }
    public object CurrentKey { get; }
    public bool CurrentIsKeySet { get; }
    public object ParentKey { get; public set; }
    public bool CurrentKeyIsUnconverted { get; public set; }
    unknown bool ParentKeyIsUnconverted {public set; }
    public bool ParentShouldConvertChildKeys { get; public set; }
    public bool GrandParentShouldConvertChildKeys { get; public set; }
    public bool ParentShouldNotConvertChildKeys { get; public set; }
    public bool GrandParentShouldNotConvertChildKeys { get; }
    public object RootInstance { get; }
    public IEnumerable`1<INameScopeDictionary> StackWalkOfNameScopes { get; }
    public ObjectWriterContext(XamlSavedContext savedContext, XamlObjectWriterSettings settings, INameScope rootNameScope, XamlRuntime runtime);
    public ObjectWriterContext(XamlSchemaContext schemaContext, XamlObjectWriterSettings settings, INameScope rootNameScope, XamlRuntime runtime);
    public virtual Assembly get_LocalAssembly();
    protected virtual void set_LocalAssembly(Assembly value);
    [CompilerGeneratedAttribute]
internal ICheckIfInitialized get_IsInitializedCallback();
    [CompilerGeneratedAttribute]
internal void set_IsInitializedCallback(ICheckIfInitialized value);
    internal bool get_NameResolutionComplete();
    internal void set_NameResolutionComplete(bool value);
    internal XamlRuntime get_Runtime();
    internal Type ServiceProvider_Resolve(string qName);
    internal XamlType ServiceProvider_ResolveXamlType(string qName);
    internal AmbientPropertyValue ServiceProvider_GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    internal object ServiceProvider_GetFirstAmbientValue(XamlType[] types);
    internal IEnumerable`1<AmbientPropertyValue> ServiceProvider_GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    internal IEnumerable`1<object> ServiceProvider_GetAllAmbientValues(XamlType[] types);
    internal IEnumerable`1<AmbientPropertyValue> ServiceProvider_GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
    internal XamlObjectWriterSettings ServiceProvider_GetSettings();
    public virtual void AddNamespacePrefix(string prefix, string xamlNS);
    public virtual string FindNamespaceByPrefix(string prefix);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Context.ObjectWriterContext/<GetNamespacePrefixes>d__32")]
public virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
    public XamlException WithLineInfo(XamlException ex);
    internal ServiceProviderContext get_ServiceProviderContext();
    internal XamlType GetDestinationType();
    private List`1<AmbientPropertyValue> FindAmbientValues(IEnumerable`1<XamlType> ceilingTypesEnumerable, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties, bool stopAfterFirst);
    private List`1<object> FindAmbientValues(XamlType[] types, bool stopAfterFirst);
    public void PushScope();
    public void LiftScope();
    public void UnLiftScope();
    public void PopScope();
    public int get_Depth();
    public int get_SavedDepth();
    public int get_LiveDepth();
    public XamlType get_CurrentType();
    public void set_CurrentType(XamlType value);
    public XamlType get_ParentType();
    public XamlType get_GrandParentType();
    public XamlMember get_CurrentProperty();
    public void set_CurrentProperty(XamlMember value);
    public XamlMember get_ParentProperty();
    public XamlMember get_GrandParentProperty();
    public object get_CurrentInstance();
    public void set_CurrentInstance(object value);
    public object get_ParentInstance();
    public object get_GrandParentInstance();
    public object get_CurrentCollection();
    public void set_CurrentCollection(object value);
    public object get_ParentCollection();
    public bool get_CurrentWasAssignedAtCreation();
    public void set_CurrentWasAssignedAtCreation(bool value);
    public bool get_CurrentIsObjectFromMember();
    public void set_CurrentIsObjectFromMember(bool value);
    public bool get_ParentIsObjectFromMember();
    public bool get_GrandParentIsObjectFromMember();
    public void set_CurrentIsPropertyValueSet(bool value);
    public bool get_ParentIsPropertyValueSet();
    public void set_ParentIsPropertyValueSet(bool value);
    public bool get_CurrentIsTypeConvertedObject();
    public void set_CurrentIsTypeConvertedObject(bool value);
    public Dictionary`2<XamlMember, object> get_CurrentPreconstructionPropertyValues();
    public bool get_CurrentHasPreconstructionPropertyValuesDictionary();
    public Dictionary`2<XamlMember, object> get_ParentPreconstructionPropertyValues();
    public HashSet`1<XamlMember> get_CurrentAssignedProperties();
    public HashSet`1<XamlMember> get_ParentAssignedProperties();
    public string get_CurrentInstanceRegisteredName();
    public void set_CurrentInstanceRegisteredName(string value);
    public string get_ParentInstanceRegisteredName();
    public void set_ParentInstanceRegisteredName(string value);
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public void set_LinePosition(int value);
    public Uri get_SourceBamlUri();
    [CompilerGeneratedAttribute]
public int get_LineNumber_StartObject();
    [CompilerGeneratedAttribute]
public void set_LineNumber_StartObject(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition_StartObject();
    [CompilerGeneratedAttribute]
public void set_LinePosition_StartObject(int value);
    public INameScopeDictionary get_CurrentNameScope();
    public INameScopeDictionary get_ParentNameScope();
    public INameScopeDictionary get_GrandParentNameScope();
    public INameScopeDictionary get_RootNameScope();
    public Object[] get_CurrentCtorArgs();
    public void set_CurrentCtorArgs(Object[] value);
    public object get_CurrentKey();
    public bool get_CurrentIsKeySet();
    public object get_ParentKey();
    public void set_ParentKey(object value);
    public bool get_CurrentKeyIsUnconverted();
    public void set_CurrentKeyIsUnconverted(bool value);
    public void set_ParentKeyIsUnconverted(bool value);
    public bool get_ParentShouldConvertChildKeys();
    public void set_ParentShouldConvertChildKeys(bool value);
    public bool get_GrandParentShouldConvertChildKeys();
    public void set_GrandParentShouldConvertChildKeys(bool value);
    public bool get_ParentShouldNotConvertChildKeys();
    public void set_ParentShouldNotConvertChildKeys(bool value);
    public bool get_GrandParentShouldNotConvertChildKeys();
    public object get_RootInstance();
    private ObjectWriterFrame GetTopFrame();
    private INameScopeDictionary LookupNameScopeDictionary(ObjectWriterFrame frame);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Context.ObjectWriterContext/<get_StackWalkOfNameScopes>d__170")]
public IEnumerable`1<INameScopeDictionary> get_StackWalkOfNameScopes();
    public bool IsOnTheLiveStack(object instance);
    private INameScopeDictionary HuntAroundForARootNameScope(ObjectWriterFrame rootFrame);
    public XamlSavedContext GetSavedContext(SavedContextType savedContextType);
    public object ResolveName(string name, Boolean& isFullyInitialized);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope();
    internal void AddNameScopeInitializationCompleteSubscriber(EventHandler handler);
    internal void RemoveNameScopeInitializationCompleteSubscriber(EventHandler handler);
    internal void RaiseNameScopeInitializationCompleteEvent();
}
[DebuggerDisplayAttribute("{ToString()}")]
internal class MS.Internal.Xaml.Context.ObjectWriterFrame : XamlCommonFrame {
    private ObjectWriterFrameFlags _flags;
    private Dictionary`2<XamlMember, object> _preconstructionPropertyValues;
    private HashSet`1<XamlMember> _assignedProperties;
    private object _key;
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private INameScopeDictionary <NameScopeDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <PositionalCtorArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceRegisteredName>k__BackingField;
    public object Instance { get; public set; }
    public object Collection { get; public set; }
    public bool WasAssignedAtCreation { get; public set; }
    public bool IsObjectFromMember { get; public set; }
    public bool IsPropertyValueSet { get; public set; }
    public bool IsKeySet { get; private set; }
    public bool IsTypeConvertedObject { get; public set; }
    public bool KeyIsUnconverted { get; public set; }
    public bool ShouldConvertChildKeys { get; public set; }
    public bool ShouldNotConvertChildKeys { get; public set; }
    public INameScopeDictionary NameScopeDictionary { get; public set; }
    public Object[] PositionalCtorArgs { get; public set; }
    public object Key { get; public set; }
    public string InstanceRegisteredName { get; public set; }
    public Dictionary`2<XamlMember, object> PreconstructionPropertyValues { get; }
    public bool HasPreconstructionPropertyValuesDictionary { get; }
    public HashSet`1<XamlMember> AssignedProperties { get; }
    public ObjectWriterFrame(ObjectWriterFrame source);
    public virtual void Reset();
    public virtual XamlFrame Clone();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(object value);
    [CompilerGeneratedAttribute]
public object get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(object value);
    public bool get_WasAssignedAtCreation();
    public void set_WasAssignedAtCreation(bool value);
    public bool get_IsObjectFromMember();
    public void set_IsObjectFromMember(bool value);
    public bool get_IsPropertyValueSet();
    public void set_IsPropertyValueSet(bool value);
    public bool get_IsKeySet();
    private void set_IsKeySet(bool value);
    public bool get_IsTypeConvertedObject();
    public void set_IsTypeConvertedObject(bool value);
    public bool get_KeyIsUnconverted();
    public void set_KeyIsUnconverted(bool value);
    public bool get_ShouldConvertChildKeys();
    public void set_ShouldConvertChildKeys(bool value);
    public bool get_ShouldNotConvertChildKeys();
    public void set_ShouldNotConvertChildKeys(bool value);
    [CompilerGeneratedAttribute]
public INameScopeDictionary get_NameScopeDictionary();
    [CompilerGeneratedAttribute]
public void set_NameScopeDictionary(INameScopeDictionary value);
    [CompilerGeneratedAttribute]
public Object[] get_PositionalCtorArgs();
    [CompilerGeneratedAttribute]
public void set_PositionalCtorArgs(Object[] value);
    public object get_Key();
    public void set_Key(object value);
    [CompilerGeneratedAttribute]
public string get_InstanceRegisteredName();
    [CompilerGeneratedAttribute]
public void set_InstanceRegisteredName(string value);
    public Dictionary`2<XamlMember, object> get_PreconstructionPropertyValues();
    public bool get_HasPreconstructionPropertyValuesDictionary();
    public HashSet`1<XamlMember> get_AssignedProperties();
    private bool GetFlag(ObjectWriterFrameFlags flag);
    private void SetFlag(ObjectWriterFrameFlags flag, bool value);
}
internal abstract class MS.Internal.Xaml.Context.XamlCommonFrame : XamlFrame {
    internal Dictionary`2<string, string> _namespaces;
    [CompilerGeneratedAttribute]
private XamlType <XamlType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <Member>k__BackingField;
    public Dictionary`2<string, string> Namespaces { get; }
    public XamlType XamlType { get; public set; }
    public XamlMember Member { get; public set; }
    public XamlCommonFrame(XamlCommonFrame source);
    public Dictionary`2<string, string> get_Namespaces();
    public virtual void Reset();
    [CompilerGeneratedAttribute]
public XamlType get_XamlType();
    [CompilerGeneratedAttribute]
public void set_XamlType(XamlType value);
    [CompilerGeneratedAttribute]
public XamlMember get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(XamlMember value);
    public void AddNamespace(string prefix, string xamlNs);
    public void SetNamespaces(Dictionary`2<string, string> namespaces);
    public bool TryGetNamespaceByPrefix(string prefix, String& xamlNs);
    public IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
}
internal class MS.Internal.Xaml.Context.XamlContextStack`1 : object {
    private int _depth;
    private T _currentFrame;
    private T _recycledFrame;
    private Func`1<T> _creationDelegate;
    public T CurrentFrame { get; }
    public T PreviousFrame { get; }
    public T PreviousPreviousFrame { get; }
    public int Depth { get; public set; }
    public string Frames { get; }
    public XamlContextStack`1(Func`1<T> creationDelegate);
    public XamlContextStack`1(XamlContextStack`1<T> source, bool copy);
    private void Grow();
    public T get_CurrentFrame();
    public T get_PreviousFrame();
    public T get_PreviousPreviousFrame();
    public T GetFrame(int depth);
    public void PushScope();
    public void PopScope();
    public int get_Depth();
    public void set_Depth(int value);
    public void Trim();
    public string get_Frames();
    private void ShowFrame(StringBuilder sb, T iteratorFrame);
}
internal abstract class MS.Internal.Xaml.Context.XamlFrame : object {
    private int _depth;
    private XamlFrame _previous;
    public int Depth { get; }
    public XamlFrame Previous { get; public set; }
    protected XamlFrame(XamlFrame source);
    public virtual XamlFrame Clone();
    public abstract virtual void Reset();
    public int get_Depth();
    public XamlFrame get_Previous();
    public void set_Previous(XamlFrame value);
}
internal class MS.Internal.Xaml.Context.XamlObjectWriterFactory : object {
    private XamlSavedContext _savedContext;
    private XamlObjectWriterSettings _parentSettings;
    public XamlObjectWriterFactory(ObjectWriterContext context);
    public sealed virtual XamlObjectWriter GetXamlObjectWriter(XamlObjectWriterSettings settings);
    public sealed virtual XamlObjectWriterSettings GetParentSettings();
}
internal class MS.Internal.Xaml.Context.XamlParserContext : XamlContext {
    private XamlContextStack`1<XamlParserFrame> _stack;
    private Dictionary`2<string, string> _prescopeNamespaces;
    [CompilerGeneratedAttribute]
private bool <AllowProtectedMembersOnRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, string> <XmlNamespaceResolver>k__BackingField;
    public bool AllowProtectedMembersOnRoot { get; public set; }
    public Func`2<string, string> XmlNamespaceResolver { get; public set; }
    public XamlType CurrentType { get; public set; }
    internal BracketModeParseParameters CurrentBracketModeParseParameters { get; internal set; }
    internal ParameterInfo[] CurrentLongestConstructorOfMarkupExtension { get; internal set; }
    internal Dictionary`2<string, SpecialBracketCharacters> CurrentEscapeCharacterMapForMarkupExtension { get; internal set; }
    public string CurrentTypeNamespace { get; public set; }
    public bool CurrentInContainerDirective { get; public set; }
    public XamlMember CurrentMember { get; public set; }
    public int CurrentArgCount { get; public set; }
    public bool CurrentForcedToUseConstructor { get; public set; }
    public bool CurrentInItemsProperty { get; }
    public bool CurrentInInitProperty { get; }
    public bool CurrentInUnknownContent { get; }
    public bool CurrentInImplicitArray { get; public set; }
    public bool CurrentInCollectionFromMember { get; public set; }
    public XamlType CurrentPreviousChildType { get; public set; }
    public bool CurrentTypeIsRoot { get; }
    public XamlParserContext(XamlSchemaContext schemaContext, Assembly localAssembly);
    [CompilerGeneratedAttribute]
public bool get_AllowProtectedMembersOnRoot();
    [CompilerGeneratedAttribute]
public void set_AllowProtectedMembersOnRoot(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_XmlNamespaceResolver();
    [CompilerGeneratedAttribute]
public void set_XmlNamespaceResolver(Func`2<string, string> value);
    public virtual void AddNamespacePrefix(string prefix, string xamlNS);
    public string FindNamespaceByPrefixInParseStack(string prefix);
    public virtual string FindNamespaceByPrefix(string prefix);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Context.XamlParserContext/<GetNamespacePrefixes>d__14")]
public virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
    internal virtual bool IsVisible(XamlMember member, XamlType rootObjectType);
    public void PushScope();
    public void PopScope();
    internal void InitBracketCharacterCacheForType(XamlType extensionType);
    internal void InitLongestConstructor(XamlType xamlType);
    public XamlType get_CurrentType();
    public void set_CurrentType(XamlType value);
    internal BracketModeParseParameters get_CurrentBracketModeParseParameters();
    internal void set_CurrentBracketModeParseParameters(BracketModeParseParameters value);
    internal ParameterInfo[] get_CurrentLongestConstructorOfMarkupExtension();
    internal void set_CurrentLongestConstructorOfMarkupExtension(ParameterInfo[] value);
    internal Dictionary`2<string, SpecialBracketCharacters> get_CurrentEscapeCharacterMapForMarkupExtension();
    internal void set_CurrentEscapeCharacterMapForMarkupExtension(Dictionary`2<string, SpecialBracketCharacters> value);
    public string get_CurrentTypeNamespace();
    public void set_CurrentTypeNamespace(string value);
    public bool get_CurrentInContainerDirective();
    public void set_CurrentInContainerDirective(bool value);
    public XamlMember get_CurrentMember();
    public void set_CurrentMember(XamlMember value);
    public int get_CurrentArgCount();
    public void set_CurrentArgCount(int value);
    public bool get_CurrentForcedToUseConstructor();
    public void set_CurrentForcedToUseConstructor(bool value);
    public bool get_CurrentInItemsProperty();
    public bool get_CurrentInInitProperty();
    public bool get_CurrentInUnknownContent();
    public bool get_CurrentInImplicitArray();
    public void set_CurrentInImplicitArray(bool value);
    public bool get_CurrentInCollectionFromMember();
    public void set_CurrentInCollectionFromMember(bool value);
    public XamlType get_CurrentPreviousChildType();
    public void set_CurrentPreviousChildType(XamlType value);
    public bool CurrentMemberIsWriteVisible();
    public bool get_CurrentTypeIsRoot();
}
internal class MS.Internal.Xaml.Context.XamlParserFrame : XamlCommonFrame {
    [CompilerGeneratedAttribute]
private XamlType <PreviousChildType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CtorArgCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcedToUseConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InCollectionFromMember>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InImplicitArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InContainerDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <LongestConstructorOfCurrentMarkupExtensionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SpecialBracketCharacters> <EscapeCharacterMapForMarkupExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private BracketModeParseParameters <BracketModeParseParameters>k__BackingField;
    public XamlType PreviousChildType { get; public set; }
    public int CtorArgCount { get; public set; }
    public bool ForcedToUseConstructor { get; public set; }
    public bool InCollectionFromMember { get; public set; }
    public bool InImplicitArray { get; public set; }
    public bool InContainerDirective { get; public set; }
    public string TypeNamespace { get; public set; }
    public ParameterInfo[] LongestConstructorOfCurrentMarkupExtensionType { get; public set; }
    public Dictionary`2<string, SpecialBracketCharacters> EscapeCharacterMapForMarkupExtension { get; public set; }
    public BracketModeParseParameters BracketModeParseParameters { get; public set; }
    public virtual void Reset();
    [CompilerGeneratedAttribute]
public XamlType get_PreviousChildType();
    [CompilerGeneratedAttribute]
public void set_PreviousChildType(XamlType value);
    [CompilerGeneratedAttribute]
public int get_CtorArgCount();
    [CompilerGeneratedAttribute]
public void set_CtorArgCount(int value);
    [CompilerGeneratedAttribute]
public bool get_ForcedToUseConstructor();
    [CompilerGeneratedAttribute]
public void set_ForcedToUseConstructor(bool value);
    [CompilerGeneratedAttribute]
public bool get_InCollectionFromMember();
    [CompilerGeneratedAttribute]
public void set_InCollectionFromMember(bool value);
    [CompilerGeneratedAttribute]
public bool get_InImplicitArray();
    [CompilerGeneratedAttribute]
public void set_InImplicitArray(bool value);
    [CompilerGeneratedAttribute]
public bool get_InContainerDirective();
    [CompilerGeneratedAttribute]
public void set_InContainerDirective(bool value);
    [CompilerGeneratedAttribute]
public string get_TypeNamespace();
    [CompilerGeneratedAttribute]
public void set_TypeNamespace(string value);
    [CompilerGeneratedAttribute]
public ParameterInfo[] get_LongestConstructorOfCurrentMarkupExtensionType();
    [CompilerGeneratedAttribute]
public void set_LongestConstructorOfCurrentMarkupExtensionType(ParameterInfo[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, SpecialBracketCharacters> get_EscapeCharacterMapForMarkupExtension();
    [CompilerGeneratedAttribute]
public void set_EscapeCharacterMapForMarkupExtension(Dictionary`2<string, SpecialBracketCharacters> value);
    [CompilerGeneratedAttribute]
public BracketModeParseParameters get_BracketModeParseParameters();
    [CompilerGeneratedAttribute]
public void set_BracketModeParseParameters(BracketModeParseParameters value);
}
internal class MS.Internal.Xaml.NodeStreamSorter : object {
    private XamlParserContext _context;
    private XamlXmlReaderSettings _settings;
    private IEnumerator`1<XamlNode> _source;
    private Queue`1<XamlNode> _buffer;
    private XamlNode _current;
    private ReorderInfo[] _sortingInfoArray;
    private XamlNode[] _originalNodesInOrder;
    private Dictionary`2<string, string> _xmlnsDictionary;
    private List`1<SeenCtorDirectiveFlags> _seenStack;
    private int _startObjectDepth;
    private List`1<int> _moveList;
    private bool HaveSeenInstancingProperty { get; private set; }
    private bool HaveSeenOutOfOrderCtorDirective { get; private set; }
    public XamlNode Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public NodeStreamSorter(XamlParserContext context, XamlPullParser parser, XamlXmlReaderSettings settings, Dictionary`2<string, string> xmlnsDictionary);
    private void InitializeObjectFrameStack();
    private void StartObjectFrame();
    private void EndObjectFrame();
    private bool get_HaveSeenInstancingProperty();
    private void set_HaveSeenInstancingProperty(bool value);
    private bool get_HaveSeenOutOfOrderCtorDirective();
    private void set_HaveSeenOutOfOrderCtorDirective(bool value);
    public sealed virtual XamlNode get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    private void StartNewNodeStreamWithSettingsPreamble();
    private void EnqueueInitialExtraXmlNses();
    private void EnqueueInitialXmlState();
    private void EnqueueOneXmlDirectiveProperty(XamlMember xmlDirectiveProperty, string textValue);
    private void ReadAheadAndSortCtorProperties();
    private void ReadAheadToEndObjectOrFirstPropertyElement();
    private void ReadAheadToEndOfAttributes();
    private void ReadAheadToFirstInstancingProperty();
    private bool CheckForOutOfOrderCtorDirectives(XamlNode node);
    private bool IsCtorDirective(XamlMember member);
    private bool IsInstancingMember(XamlMember member);
    private void SortContentsOfReadAheadBuffer();
    private void BuildSortingBuffer();
    private void ReloadSortedBuffer();
    private void MoveList_Process();
    private bool MoveList_RemoveStartMemberIndexWithGreatestDepth(Int32& deepestCtorIdx, Int32& deepestDepth);
    private void SortMembers(int start);
    private bool AdvanceToNextInstancingMember(int current, int depth, Int32& end);
    private bool AdvanceToNextCtorDirective(int current, int depth, Int32& end);
    private int AdvanceOverNoninstancingDirectives(int start, int depth);
    private void SwapRanges(int beginning, int middle, int end);
    private bool AdvanceTo(int start, XamlNodeType nodeType, int searchDepth, Int32& end);
    private bool BackupTo(int start, XamlNodeType nodeType, int searchDepth, Int32& end);
}
internal class MS.Internal.Xaml.Parser.BracketModeParseParameters : object {
    [CompilerGeneratedAttribute]
private int <CurrentConstructorParam>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConstructorParams>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConstructorParsingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBracketEscapeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<char> <BracketCharacterStack>k__BackingField;
    internal int CurrentConstructorParam { get; internal set; }
    internal int MaxConstructorParams { get; internal set; }
    internal bool IsConstructorParsingMode { get; internal set; }
    internal bool IsBracketEscapeMode { get; internal set; }
    internal Stack`1<char> BracketCharacterStack { get; internal set; }
    internal BracketModeParseParameters(XamlParserContext context);
    [CompilerGeneratedAttribute]
internal int get_CurrentConstructorParam();
    [CompilerGeneratedAttribute]
internal void set_CurrentConstructorParam(int value);
    [CompilerGeneratedAttribute]
internal int get_MaxConstructorParams();
    [CompilerGeneratedAttribute]
internal void set_MaxConstructorParams(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsConstructorParsingMode();
    [CompilerGeneratedAttribute]
internal void set_IsConstructorParsingMode(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsBracketEscapeMode();
    [CompilerGeneratedAttribute]
internal void set_IsBracketEscapeMode(bool value);
    [CompilerGeneratedAttribute]
internal Stack`1<char> get_BracketCharacterStack();
    [CompilerGeneratedAttribute]
internal void set_BracketCharacterStack(Stack`1<char> value);
}
internal class MS.Internal.Xaml.Parser.GenericTypeNameParser : object {
    private GenericTypeNameScanner _scanner;
    private string _inputText;
    private Func`2<string, string> _prefixResolver;
    private Stack`1<TypeNameFrame> _stack;
    public GenericTypeNameParser(Func`2<string, string> prefixResolver);
    public static XamlTypeName ParseIfTrivalName(string text, Func`2<string, string> prefixResolver, String& error);
    public XamlTypeName ParseName(string text, String& error);
    public IList`1<XamlTypeName> ParseList(string text, String& error);
    private void P_XamlTypeName();
    private void P_SimpleTypeName();
    private void P_TypeParameters();
    private void P_XamlTypeNameList();
    private void P_NameListExt();
    private void P_RepeatingSubscript();
    private void ThrowOnBadInput();
    private void StartStack();
    private void Callout_FoundName(string prefix, string name);
    private void Callout_EndOfType();
    private void Callout_Subscript(string subscript);
    private XamlTypeName CollectNameFromStack();
    private IList`1<XamlTypeName> CollectNameListFromStack();
}
internal class MS.Internal.Xaml.Parser.GenericTypeNameScanner : Sample_StringParserBase {
    public static char Space;
    public static char OpenParen;
    public static char CloseParen;
    public static char Comma;
    public static char OpenBracket;
    public static char CloseBracket;
    public static char Colon;
    private GenericTypeNameScannerToken _token;
    private string _tokenText;
    private State _state;
    private GenericTypeNameScannerToken _pushedBackSymbol;
    private int _multiCharTokenStartIdx;
    private int _multiCharTokenLength;
    private char _lastChar;
    public GenericTypeNameScannerToken Token { get; }
    public string MultiCharTokenText { get; }
    public char ErrorCurrentChar { get; }
    public GenericTypeNameScanner(string text);
    public GenericTypeNameScannerToken get_Token();
    public string get_MultiCharTokenText();
    public char get_ErrorCurrentChar();
    public void Read();
    internal static int ParseSubscriptSegment(string subscript, Int32& pos);
    internal static string StripSubscript(string typeName, String& subscript);
    private void State_Start();
    private void State_InName();
    private void State_InSubscript();
    private void StartMultiCharToken();
    private void AddToMultiCharToken();
    private string CollectMultiCharToken();
}
internal enum MS.Internal.Xaml.Parser.GenericTypeNameScannerToken : Enum {
    public int value__;
    public static GenericTypeNameScannerToken NONE;
    public static GenericTypeNameScannerToken ERROR;
    public static GenericTypeNameScannerToken OPEN;
    public static GenericTypeNameScannerToken CLOSE;
    public static GenericTypeNameScannerToken COLON;
    public static GenericTypeNameScannerToken COMMA;
    public static GenericTypeNameScannerToken SUBSCRIPT;
    public static GenericTypeNameScannerToken NAME;
}
internal class MS.Internal.Xaml.Parser.MePullParser : object {
    private XamlParserContext _context;
    private string _originalText;
    private MeScanner _tokenizer;
    private string _brokenRule;
    private int LineNumber { get; }
    private int LinePosition { get; }
    public MePullParser(XamlParserContext stack);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<Parse>d__6")]
public IEnumerable`1<XamlNode> Parse(string text, int lineNumber, int linePosition);
    private void SetBrokenRuleString(string ruleString);
    private bool Expect(MeTokenType token, string ruleString);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<P_MarkupExtension>d__9")]
private IEnumerable`1<XamlNode> P_MarkupExtension(Found f);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<P_Arguments>d__10")]
private IEnumerable`1<XamlNode> P_Arguments(Found f);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<P_PositionalArgs>d__11")]
private IEnumerable`1<XamlNode> P_PositionalArgs(Found f);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<P_NamedArgs>d__12")]
private IEnumerable`1<XamlNode> P_NamedArgs(Found f);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<P_Value>d__13")]
private IEnumerable`1<XamlNode> P_Value(Found f);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.MePullParser/<P_NamedArg>d__14")]
private IEnumerable`1<XamlNode> P_NamedArg(Found f);
    private void NextToken();
    private int get_LineNumber();
    private int get_LinePosition();
    private XamlNode Logic_StartElement(XamlType xamlType, string xamlNamespace);
    private XamlNode Logic_EndObject();
    private XamlNode Logic_StartMember();
    private XamlNode Logic_EndMember();
    private XamlNode Logic_StartPositionalParameters();
    private XamlNode Logic_EndPositionalParameters();
    private XamlNode Logic_Text();
}
internal class MS.Internal.Xaml.Parser.MeScanner : object {
    public static char Space;
    public static char OpenCurlie;
    public static char CloseCurlie;
    public static char Comma;
    public static char EqualSign;
    public static char Quote1;
    public static char Quote2;
    public static char Backslash;
    public static char NullChar;
    private XamlParserContext _context;
    private string _inputText;
    private int _idx;
    private MeTokenType _token;
    private XamlType _tokenXamlType;
    private XamlMember _tokenProperty;
    private string _tokenNamespace;
    private string _tokenText;
    private StringState _state;
    private bool _hasTrailingWhitespace;
    private int _lineNumber;
    private int _startPosition;
    private string _currentParameterName;
    private SpecialBracketCharacters _currentSpecialBracketCharacters;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Namespace { get; }
    public MeTokenType Token { get; }
    public XamlType TokenType { get; }
    public XamlMember TokenProperty { get; }
    public string TokenText { get; }
    public bool IsAtEndOfInput { get; }
    public bool HasTrailingWhitespace { get; }
    private char CurrentChar { get; }
    private char NextChar { get; }
    public MeScanner(XamlParserContext context, string text, int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_Namespace();
    public MeTokenType get_Token();
    public XamlType get_TokenType();
    public XamlMember get_TokenProperty();
    public string get_TokenText();
    public bool get_IsAtEndOfInput();
    public bool get_HasTrailingWhitespace();
    public void Read();
    private static string RemoveEscapes(string value);
    private void ResolveTypeName(string longName);
    private void ResolvePropertyName(string longName);
    private string ReadString();
    private char get_CurrentChar();
    private char get_NextChar();
    private bool Advance();
    private static bool IsWhitespaceChar(char ch);
    private void AdvanceOverWhitespace();
    private void PushBack();
    private SpecialBracketCharacters GetBracketCharacterForProperty(string propertyName);
}
internal enum MS.Internal.Xaml.Parser.MeTokenType : Enum {
    public int value__;
    public static MeTokenType None;
    public static MeTokenType Open;
    public static MeTokenType Close;
    public static MeTokenType EqualSign;
    public static MeTokenType Comma;
    public static MeTokenType TypeName;
    public static MeTokenType PropertyName;
    public static MeTokenType String;
    public static MeTokenType QuotedMarkupExtension;
}
internal class MS.Internal.Xaml.Parser.NamespacePrefixLookup : object {
    private List`1<NamespaceDeclaration> _newNamespaces;
    private Func`2<string, string> _nsResolver;
    private int n;
    public NamespacePrefixLookup(IEnumerable`1& newNamespaces, Func`2<string, string> nsResolver);
    public sealed virtual string LookupPrefix(string ns);
}
internal class MS.Internal.Xaml.Parser.Sample_StringParserBase : object {
    protected static char NullChar;
    protected string _inputText;
    protected int _idx;
    protected char CurrentChar { get; }
    public bool IsAtEndOfInput { get; }
    public Sample_StringParserBase(string text);
    protected char get_CurrentChar();
    public bool get_IsAtEndOfInput();
    protected bool Advance();
    protected static bool IsWhitespaceChar(char ch);
    protected bool AdvanceOverWhitespace();
}
internal enum MS.Internal.Xaml.Parser.ScannerAttributeKind : Enum {
    public int value__;
    public static ScannerAttributeKind Namespace;
    public static ScannerAttributeKind CtorDirective;
    public static ScannerAttributeKind Name;
    public static ScannerAttributeKind Directive;
    public static ScannerAttributeKind XmlSpace;
    public static ScannerAttributeKind Event;
    public static ScannerAttributeKind Property;
    public static ScannerAttributeKind AttachableProperty;
    public static ScannerAttributeKind Unknown;
}
internal enum MS.Internal.Xaml.Parser.ScannerNodeType : Enum {
    public int value__;
    public static ScannerNodeType NONE;
    public static ScannerNodeType ELEMENT;
    public static ScannerNodeType EMPTYELEMENT;
    public static ScannerNodeType ATTRIBUTE;
    public static ScannerNodeType DIRECTIVE;
    public static ScannerNodeType PREFIXDEFINITION;
    public static ScannerNodeType PROPERTYELEMENT;
    public static ScannerNodeType EMPTYPROPERTYELEMENT;
    public static ScannerNodeType TEXT;
    public static ScannerNodeType ENDTAG;
}
internal class MS.Internal.Xaml.Parser.SpecialBracketCharacters : object {
    private string _startChars;
    private string _endChars;
    private static ISet`1<char> _restrictedCharSet;
    private bool _initializing;
    private StringBuilder _startCharactersStringBuilder;
    private StringBuilder _endCharactersStringBuilder;
    internal string StartBracketCharacters { get; }
    internal string EndBracketCharacters { get; }
    internal SpecialBracketCharacters(IReadOnlyDictionary`2<char, char> attributeList);
    private static SpecialBracketCharacters();
    internal void AddBracketCharacters(char openingBracket, char closingBracket);
    private void Tokenize(IReadOnlyDictionary`2<char, char> attributeList);
    private bool IsValidBracketCharacter(char openingBracket, char closingBracket);
    internal bool IsSpecialCharacter(char ch);
    internal bool StartsEscapeSequence(char ch);
    internal bool EndsEscapeSequence(char ch);
    internal bool Match(char start, char end);
    internal string get_StartBracketCharacters();
    internal string get_EndBracketCharacters();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
}
internal class MS.Internal.Xaml.Parser.TypeNameFrame : object {
    private List`1<XamlTypeName> _typeArgs;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public List`1<XamlTypeName> TypeArgs { get; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public List`1<XamlTypeName> get_TypeArgs();
    public void AllocateTypeArgs();
}
[DebuggerDisplayAttribute("{Name.ScopedName}='{Value}'  {Kind}")]
internal class MS.Internal.Xaml.Parser.XamlAttribute : object {
    private string _xmlnsDefinitionPrefix;
    private string _xmlnsDefinitionUri;
    [CompilerGeneratedAttribute]
private XamlPropertyName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ScannerAttributeKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public XamlPropertyName Name { get; private set; }
    public string Value { get; private set; }
    public ScannerAttributeKind Kind { get; private set; }
    public XamlMember Property { get; private set; }
    public int LineNumber { get; private set; }
    public int LinePosition { get; private set; }
    public string XmlNsPrefixDefined { get; }
    public string XmlNsUriDefined { get; }
    public XamlAttribute(XamlPropertyName propName, string val, IXmlLineInfo lineInfo);
    [CompilerGeneratedAttribute]
public XamlPropertyName get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(XamlPropertyName value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public ScannerAttributeKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ScannerAttributeKind value);
    [CompilerGeneratedAttribute]
public XamlMember get_Property();
    [CompilerGeneratedAttribute]
private void set_Property(XamlMember value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
    public void Initialize(XamlParserContext context, XamlType tagType, string ownerNamespace, bool tagIsRoot);
    public string get_XmlNsPrefixDefined();
    public string get_XmlNsUriDefined();
    internal bool CheckIsXmlNamespaceDefinition(String& definingPrefix, String& uri);
    private XamlMember GetXamlAttributeProperty(XamlParserContext context, XamlPropertyName propName, XamlType tagType, string tagNamespace, bool tagIsRoot);
}
internal abstract class MS.Internal.Xaml.Parser.XamlName : object {
    public static char PlusSign;
    public static char UnderScore;
    public static char Dot;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    protected string _prefix;
    protected string _namespace;
    public string Name { get; protected set; }
    public string ScopedName { get; }
    public string Prefix { get; }
    public string Namespace { get; }
    public XamlName(string name);
    public XamlName(string prefix, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    public abstract virtual string get_ScopedName();
    public string get_Prefix();
    public string get_Namespace();
    public static bool ContainsDot(string name);
    public static bool IsValidXamlName(string name);
    public static bool IsValidNameStartChar(char ch);
    public static bool IsValidNameChar(char ch);
    public static bool IsValidQualifiedNameChar(char ch);
    public static bool IsValidQualifiedNameCharPlus(char ch);
}
internal class MS.Internal.Xaml.Parser.XamlPropertyName : XamlName {
    public XamlName Owner;
    public string ScopedName { get; }
    public string OwnerName { get; }
    public bool IsDotted { get; }
    private XamlPropertyName(XamlName owner, string prefix, string name);
    public static XamlPropertyName Parse(string longName);
    public static XamlPropertyName Parse(string longName, string namespaceURI);
    public virtual string get_ScopedName();
    public string get_OwnerName();
    public bool get_IsDotted();
}
internal class MS.Internal.Xaml.Parser.XamlPullParser : object {
    private XamlParserContext _context;
    private XamlScanner _xamlScanner;
    private XamlXmlReaderSettings _settings;
    private static string ElementRuleException;
    private static string EmptyElementRuleException;
    private static string StartElementRuleException;
    private static string ElementBodyRuleException;
    private static string PropertyElementRuleException;
    private static string EmptyPropertyElementRuleException;
    private static string NonemptyPropertyElementRuleException;
    private XamlTypeName arrayType;
    private XamlType _arrayExtensionType;
    private XamlMember _arrayTypeMember;
    private XamlMember _itemsTypeMember;
    private int LineNumber { get; }
    private int LinePosition { get; }
    private bool ProvideLineInfo { get; }
    private XamlType ArrayExtensionType { get; }
    private XamlMember ArrayTypeMember { get; }
    private XamlMember ItemsTypeMember { get; }
    public XamlPullParser(XamlParserContext context, XamlScanner scanner, XamlXmlReaderSettings settings);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<Parse>d__11")]
public IEnumerable`1<XamlNode> Parse();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_Element>d__12")]
public IEnumerable`1<XamlNode> P_Element();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_EmptyElement>d__13")]
public IEnumerable`1<XamlNode> P_EmptyElement();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_StartElement>d__14")]
public IEnumerable`1<XamlNode> P_StartElement();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_ElementBody>d__15")]
public IEnumerable`1<XamlNode> P_ElementBody();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_PropertyElement>d__16")]
public IEnumerable`1<XamlNode> P_PropertyElement();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_EmptyPropertyElement>d__17")]
public IEnumerable`1<XamlNode> P_EmptyPropertyElement();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_NonemptyPropertyElement>d__18")]
public IEnumerable`1<XamlNode> P_NonemptyPropertyElement();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_ElementContent>d__19")]
public IEnumerable`1<XamlNode> P_ElementContent();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<P_PropertyContent>d__20")]
public IEnumerable`1<XamlNode> P_PropertyContent();
    private int get_LineNumber();
    private int get_LinePosition();
    private bool get_ProvideLineInfo();
    private XamlNode Logic_LineInfo();
    private XamlNode Logic_PrefixDefinition();
    private XamlNode Logic_StartObject(XamlType xamlType, string xamlNamespace);
    private XamlNode Logic_EndObject();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<LogicStream_Attribute>d__31")]
private IEnumerable`1<XamlNode> LogicStream_Attribute();
    private XamlNode Logic_EndOfAttributes();
    private XamlNode Logic_StartMember(XamlMember member);
    private XamlNode Logic_EndMember();
    private XamlNode Logic_StartContentProperty(XamlMember property);
    private XamlNode Logic_StartInitProperty(XamlType ownerType);
    private string Logic_ApplyFinalTextTrimming(XamlText text);
    private XamlNode Logic_StartGetObjectFromMember(XamlType realType);
    private XamlNode Logic_StartItemsProperty(XamlType collectionType);
    private XamlType get_ArrayExtensionType();
    private XamlMember get_ArrayTypeMember();
    private XamlMember get_ItemsTypeMember();
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Parser.XamlPullParser/<LogicStream_CheckForStartGetCollectionFromMember>d__50")]
private IEnumerable`1<XamlNode> LogicStream_CheckForStartGetCollectionFromMember();
    private bool Logic_IsDiscardableWhitespace(XamlText text);
    private static bool CanAcceptString(XamlMember property);
}
internal class MS.Internal.Xaml.Parser.XamlQualifiedName : XamlName {
    public string ScopedName { get; }
    public XamlQualifiedName(string prefix, string name);
    public virtual string get_ScopedName();
    internal static bool IsNameValid(string name);
    internal static bool IsNameValid_WithPlus(string name);
    public static bool Parse(string longName, String& prefix, String& name);
}
internal class MS.Internal.Xaml.Parser.XamlScanner : object {
    private XmlReader _xmlReader;
    private IXmlLineInfo _xmlLineInfo;
    private XamlScannerStack _scannerStack;
    private XamlParserContext _parserContext;
    private XamlText _accumulatedText;
    private List`1<XamlAttribute> _attributes;
    private int _nextAttribute;
    private XamlScannerNode _currentNode;
    private Queue`1<XamlScannerNode> _readNodesQueue;
    private XamlXmlReaderSettings _settings;
    private XamlAttribute _typeArgumentAttribute;
    private bool _hasKeyAttribute;
    public ScannerNodeType PeekNodeType { get; }
    public XamlType PeekType { get; }
    public ScannerNodeType NodeType { get; }
    public XamlType Type { get; }
    public XamlMember PropertyAttribute { get; }
    public XamlText PropertyAttributeText { get; }
    public bool IsCtorForcingMember { get; }
    public XamlMember PropertyElement { get; }
    public XamlText TextContent { get; }
    public bool IsXDataText { get; }
    public bool HasKeyAttribute { get; }
    public string Prefix { get; }
    public string Namespace { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    private XamlText AccumulatedText { get; }
    private bool HaveAccumulatedText { get; }
    private bool HaveUnprocessedAttributes { get; }
    internal XamlScanner(XamlParserContext context, XmlReader xmlReader, XamlXmlReaderSettings settings);
    public void Read();
    public ScannerNodeType get_PeekNodeType();
    public XamlType get_PeekType();
    public ScannerNodeType get_NodeType();
    public XamlType get_Type();
    public XamlMember get_PropertyAttribute();
    public XamlText get_PropertyAttributeText();
    public bool get_IsCtorForcingMember();
    public XamlMember get_PropertyElement();
    public XamlText get_TextContent();
    public bool get_IsXDataText();
    public bool get_HasKeyAttribute();
    public string get_Prefix();
    public string get_Namespace();
    public int get_LineNumber();
    public int get_LinePosition();
    private void LoadQueue();
    private void DoXmlRead();
    private void ProcessCurrentXmlNode();
    private XamlText get_AccumulatedText();
    private void ClearAccumulatedText();
    private bool get_HaveAccumulatedText();
    private void ReadElement();
    private void ReadObjectElement(XamlName name, bool isEmptyTag);
    private void ReadObjectElement_NoNamespace(XamlName name, XamlScannerNode node);
    private void ReadObjectElement_DirectiveProperty(XamlMember dirProperty, XamlScannerNode node);
    private bool ReadObjectElement_Object(string xmlns, string name, XamlScannerNode node);
    private void ReadPropertyElement(XamlPropertyName name, XamlType tagType, string tagNamespace, bool isEmptyTag);
    private void ReadEndElement();
    private void ReadText();
    private void ReadWhitespace();
    private void ReadNone();
    private void ReadInnerXDataSection();
    private XamlType CreateErrorXamlType(XamlName name, string xmlns);
    private void PreprocessAttributes();
    private void PreprocessForTypeArguments(List`1<XamlAttribute> attrList);
    private void PostprocessAttributes(XamlScannerNode node);
    private void StripUidProperty();
    private bool get_HaveUnprocessedAttributes();
    private void EnqueueAnotherAttribute(bool isEmptyTag);
    private void EnqueueAnyText();
    private void EnqueueTextNode();
    private void EnqueuePrefixDefinition(XamlAttribute attr);
    private bool IsXDataElement(string xmlns, string name);
    private XamlException LineInfo(XamlException e);
}
internal class MS.Internal.Xaml.Parser.XamlScannerFrame : object {
    [CompilerGeneratedAttribute]
private XamlType <XamlType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <XamlProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlSpacePreserve>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeNamespace>k__BackingField;
    public XamlType XamlType { get; public set; }
    public XamlMember XamlProperty { get; public set; }
    public bool XmlSpacePreserve { get; public set; }
    public bool InContent { get; public set; }
    public string TypeNamespace { get; public set; }
    public XamlScannerFrame(XamlType xamlType, string ns);
    [CompilerGeneratedAttribute]
public XamlType get_XamlType();
    [CompilerGeneratedAttribute]
public void set_XamlType(XamlType value);
    [CompilerGeneratedAttribute]
public XamlMember get_XamlProperty();
    [CompilerGeneratedAttribute]
public void set_XamlProperty(XamlMember value);
    [CompilerGeneratedAttribute]
public bool get_XmlSpacePreserve();
    [CompilerGeneratedAttribute]
public void set_XmlSpacePreserve(bool value);
    [CompilerGeneratedAttribute]
public bool get_InContent();
    [CompilerGeneratedAttribute]
public void set_InContent(bool value);
    [CompilerGeneratedAttribute]
public string get_TypeNamespace();
    [CompilerGeneratedAttribute]
public void set_TypeNamespace(string value);
}
[DebuggerDisplayAttribute("{NodeType}")]
internal class MS.Internal.Xaml.Parser.XamlScannerNode : object {
    [CompilerGeneratedAttribute]
private ScannerNodeType <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <PropertyAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlText <PropertyAttributeText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCtorForcingMember>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <PropertyElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmptyTag>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlText <TextContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsXDataText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public ScannerNodeType NodeType { get; public set; }
    public XamlType Type { get; public set; }
    public string TypeNamespace { get; public set; }
    public XamlMember PropertyAttribute { get; public set; }
    public XamlText PropertyAttributeText { get; public set; }
    public bool IsCtorForcingMember { get; public set; }
    public XamlMember PropertyElement { get; public set; }
    public bool IsEmptyTag { get; public set; }
    public XamlText TextContent { get; public set; }
    public bool IsXDataText { get; public set; }
    public string Prefix { get; public set; }
    public int LineNumber { get; private set; }
    public int LinePosition { get; private set; }
    public XamlScannerNode(IXmlLineInfo lineInfo);
    public XamlScannerNode(XamlAttribute attr);
    [CompilerGeneratedAttribute]
public ScannerNodeType get_NodeType();
    [CompilerGeneratedAttribute]
public void set_NodeType(ScannerNodeType value);
    [CompilerGeneratedAttribute]
public XamlType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(XamlType value);
    [CompilerGeneratedAttribute]
public string get_TypeNamespace();
    [CompilerGeneratedAttribute]
public void set_TypeNamespace(string value);
    [CompilerGeneratedAttribute]
public XamlMember get_PropertyAttribute();
    [CompilerGeneratedAttribute]
public void set_PropertyAttribute(XamlMember value);
    [CompilerGeneratedAttribute]
public XamlText get_PropertyAttributeText();
    [CompilerGeneratedAttribute]
public void set_PropertyAttributeText(XamlText value);
    [CompilerGeneratedAttribute]
public bool get_IsCtorForcingMember();
    [CompilerGeneratedAttribute]
public void set_IsCtorForcingMember(bool value);
    [CompilerGeneratedAttribute]
public XamlMember get_PropertyElement();
    [CompilerGeneratedAttribute]
public void set_PropertyElement(XamlMember value);
    [CompilerGeneratedAttribute]
public bool get_IsEmptyTag();
    [CompilerGeneratedAttribute]
public void set_IsEmptyTag(bool value);
    [CompilerGeneratedAttribute]
public XamlText get_TextContent();
    [CompilerGeneratedAttribute]
public void set_TextContent(XamlText value);
    [CompilerGeneratedAttribute]
public bool get_IsXDataText();
    [CompilerGeneratedAttribute]
public void set_IsXDataText(bool value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
}
internal class MS.Internal.Xaml.Parser.XamlScannerStack : object {
    private Stack`1<XamlScannerFrame> _stack;
    public int Depth { get; }
    public XamlType CurrentType { get; }
    public string CurrentTypeNamespace { get; }
    public XamlMember CurrentProperty { get; public set; }
    public bool CurrentXmlSpacePreserve { get; public set; }
    public bool CurrentlyInContent { get; public set; }
    public void Push(XamlType type, string ns);
    public void Pop();
    public int get_Depth();
    public XamlType get_CurrentType();
    public string get_CurrentTypeNamespace();
    public XamlMember get_CurrentProperty();
    public void set_CurrentProperty(XamlMember value);
    public bool get_CurrentXmlSpacePreserve();
    public void set_CurrentXmlSpacePreserve(bool value);
    public bool get_CurrentlyInContent();
    public void set_CurrentlyInContent(bool value);
}
[DebuggerDisplayAttribute("{Text}")]
internal class MS.Internal.Xaml.Parser.XamlText : object {
    private static char SPACE;
    private static char NEWLINE;
    private static char RETURN;
    private static char TAB;
    private static char OPENCURLIE;
    private static char CLOSECURLIE;
    private static string ME_ESCAPE;
    private static string RETURN_STRING;
    private StringBuilder _sb;
    private bool _isSpacePreserve;
    private bool _isWhiteSpaceOnly;
    private static CodePointRange[] EastAsianCodePointRanges;
    public bool IsEmpty { get; }
    public string Text { get; }
    public string AttributeText { get; }
    public bool IsSpacePreserved { get; }
    public bool IsWhiteSpaceOnly { get; }
    public bool LooksLikeAMarkupExtension { get; }
    public XamlText(bool spacePreserve);
    private static XamlText();
    public bool get_IsEmpty();
    public string get_Text();
    public string get_AttributeText();
    public bool get_IsSpacePreserved();
    public bool get_IsWhiteSpaceOnly();
    public void Paste(string text, bool trimLeadingWhitespace, bool convertCRLFtoLF);
    public bool get_LooksLikeAMarkupExtension();
    private static bool IsWhitespace(string text);
    private static bool IsWhitespaceChar(char ch);
    private static string CollapseWhitespace(string text);
    public static string TrimLeadingWhitespace(string source);
    public static string TrimTrailingWhitespace(string source);
    private static bool HasSurroundingEastAsianChars(int start, int end, string text);
    private static int ComputeUnicodeScalarValue(int takeOneIdx, int takeTwoIdx, string text);
    private static bool IsEastAsianCodePoint(int unicodeScalarValue);
}
internal class MS.Internal.Xaml.Parser.XamlUnexpectedParseException : XamlParseException {
    public XamlUnexpectedParseException(string message);
    public XamlUnexpectedParseException(string message, Exception innerException);
    public XamlUnexpectedParseException(XamlScanner xamlScanner, ScannerNodeType nodetype, string parseRule);
    protected XamlUnexpectedParseException(SerializationInfo info, StreamingContext context);
}
internal class MS.Internal.Xaml.Runtime.ClrObjectRuntime : XamlRuntime {
    private bool _ignoreCanConvert;
    private bool _isWriter;
    [CompilerGeneratedAttribute]
private IAddLineInfo <LineInfo>k__BackingField;
    public IAddLineInfo LineInfo { get; public set; }
    public ClrObjectRuntime(XamlRuntimeSettings settings, bool isWriter);
    [CompilerGeneratedAttribute]
public virtual IAddLineInfo get_LineInfo();
    [CompilerGeneratedAttribute]
public virtual void set_LineInfo(IAddLineInfo value);
    private static Exception UnwrapTargetInvocationException(Exception e);
    public virtual object CreateInstance(XamlType xamlType, Object[] args);
    protected virtual object CreateInstanceWithCtor(XamlType xamlType, Object[] args);
    public virtual object CreateWithFactoryMethod(XamlType xamlType, string methodName, Object[] args);
    protected virtual object InvokeFactoryMethod(Type type, string methodName, Object[] args);
    protected MethodInfo GetFactoryMethod(Type type, string methodName, Object[] args, BindingFlags flags);
    protected MethodBase BindToMethod(BindingFlags bindingFlags, MethodBase[] candidates, Object[] args);
    public virtual object CreateFromValue(ServiceProviderContext serviceContext, XamlValueConverter`1<TypeConverter> ts, object value, XamlMember property);
    public virtual bool CanConvertToString(IValueSerializerContext context, ValueSerializer serializer, object instance);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, TypeConverter converter);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, TypeConverter converter, Type type);
    public virtual string ConvertToString(IValueSerializerContext context, ValueSerializer serializer, object instance);
    public virtual T ConvertToValue(ITypeDescriptorContext context, TypeConverter converter, object instance);
    public virtual object GetValue(object obj, XamlMember property, bool failIfWriteOnly);
    protected virtual object GetValue(XamlMember member, object obj);
    public virtual void SetValue(object inst, XamlMember property, object value);
    protected virtual void SetValue(XamlMember member, object obj, object value);
    public virtual void Add(object collection, XamlType collectionType, object value, XamlType valueXamlType);
    public virtual void AddToDictionary(object collection, XamlType dictionaryType, object value, XamlType valueXamlType, object key);
    public virtual IList`1<object> GetCollectionItems(object collection, XamlType collectionType);
    public virtual IEnumerable`1<DictionaryEntry> GetDictionaryItems(object dictionary, XamlType dictionaryType);
    public virtual int AttachedPropertyCount(object instance);
    public virtual KeyValuePair`2[] GetAttachedProperties(object instance);
    public virtual void SetConnectionId(object root, int connectionId, object instance);
    public virtual void InitializationGuard(XamlType xamlType, object obj, bool begin);
    public virtual object CallProvideValue(MarkupExtension me, IServiceProvider serviceProvider);
    public virtual void SetUriBase(XamlType xamlType, object obj, Uri baseUri);
    public virtual void SetXmlInstance(object inst, XamlMember property, XData xData);
    public virtual TConverterBase GetConverterInstance(XamlValueConverter`1<TConverterBase> converter);
    public virtual object DeferredLoad(ServiceProviderContext serviceContext, XamlValueConverter`1<XamlDeferringLoader> deferringLoader, XamlReader deferredContent);
    public virtual XamlReader DeferredSave(IServiceProvider serviceContext, XamlValueConverter`1<XamlDeferringLoader> deferringLoader, object value);
    public virtual ShouldSerializeResult ShouldSerialize(XamlMember member, object instance);
    private object CreateObjectWithTypeConverter(ServiceProviderContext serviceContext, XamlValueConverter`1<TypeConverter> ts, object value);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string methodName);
    internal XamlRuntimeSettings GetSettings();
    private XamlException CreateException(string message);
    private XamlException CreateException(string message, Exception innerException);
    private IEnumerator GetItems(object collection, XamlType collectionType);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Runtime.ClrObjectRuntime/<DictionaryEntriesFromIDictionaryEnumerator>d__45")]
private static IEnumerable`1<DictionaryEntry> DictionaryEntriesFromIDictionaryEnumerator(IDictionaryEnumerator enumerator);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Runtime.ClrObjectRuntime/<DictionaryEntriesFromIEnumerator>d__46")]
private static IEnumerable`1<DictionaryEntry> DictionaryEntriesFromIEnumerator(IEnumerator enumerator);
    [IteratorStateMachineAttribute("MS.Internal.Xaml.Runtime.ClrObjectRuntime/<DictionaryEntriesFromIEnumeratorKvp>d__47`2")]
private static IEnumerable`1<DictionaryEntry> DictionaryEntriesFromIEnumeratorKvp(IEnumerator`1<KeyValuePair`2<TKey, TValue>> enumerator);
}
internal class MS.Internal.Xaml.Runtime.DynamicMethodRuntime : ClrObjectRuntime {
    private static BindingFlags BF_AllInstanceMembers;
    private static BindingFlags BF_AllStaticMembers;
    private static MethodInfo s_GetTypeFromHandleMethod;
    private static MethodInfo s_InvokeMemberMethod;
    private Assembly _localAssembly;
    private Type _localType;
    private XamlSchemaContext _schemaContext;
    private Dictionary`2<MethodInfo, PropertyGetDelegate> _propertyGetDelegates;
    private Dictionary`2<MethodInfo, PropertySetDelegate> _propertySetDelegates;
    private Dictionary`2<MethodBase, FactoryDelegate> _factoryDelegates;
    private Dictionary`2<Type, object> _converterInstances;
    private Dictionary`2<Type, DelegateCreator> _delegateCreators;
    private DelegateCreator _delegateCreatorWithoutHelper;
    private Dictionary`2<MethodInfo, PropertyGetDelegate> PropertyGetDelegates { get; }
    private Dictionary`2<MethodInfo, PropertySetDelegate> PropertySetDelegates { get; }
    private Dictionary`2<MethodBase, FactoryDelegate> FactoryDelegates { get; }
    private Dictionary`2<Type, object> ConverterInstances { get; }
    private Dictionary`2<Type, DelegateCreator> DelegateCreators { get; }
    internal DynamicMethodRuntime(XamlRuntimeSettings settings, XamlSchemaContext schemaContext, XamlAccessLevel accessLevel);
    private Dictionary`2<MethodInfo, PropertyGetDelegate> get_PropertyGetDelegates();
    private Dictionary`2<MethodInfo, PropertySetDelegate> get_PropertySetDelegates();
    private Dictionary`2<MethodBase, FactoryDelegate> get_FactoryDelegates();
    private Dictionary`2<Type, object> get_ConverterInstances();
    private Dictionary`2<Type, DelegateCreator> get_DelegateCreators();
    public virtual TConverterBase GetConverterInstance(XamlValueConverter`1<TConverterBase> ts);
    public virtual object CreateFromValue(ServiceProviderContext serviceContext, XamlValueConverter`1<TypeConverter> ts, object value, XamlMember property);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string methodName);
    protected virtual object CreateInstanceWithCtor(XamlType xamlType, Object[] args);
    private object CreateInstanceWithCtor(Type type, Object[] args);
    protected virtual object InvokeFactoryMethod(Type type, string methodName, Object[] args);
    protected virtual object GetValue(XamlMember member, object obj);
    protected virtual void SetValue(XamlMember member, object obj, object value);
    private DelegateCreator CreateDelegateCreator(Type targetType);
    private DelegateCreator CreateDelegateCreatorWithoutHelper();
    private FactoryDelegate CreateFactoryDelegate(ConstructorInfo ctor);
    private FactoryDelegate CreateFactoryDelegate(MethodInfo factory);
    private LocalBuilder[] LoadArguments(ILGenerator ilGenerator, MethodBase method);
    private void UnloadArguments(ILGenerator ilGenerator, LocalBuilder[] locals);
    private PropertyGetDelegate CreateGetDelegate(MethodInfo getter);
    private PropertySetDelegate CreateSetDelegate(MethodInfo setter);
    private DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] argTypes);
    private Type GetTargetType(MethodInfo instanceMethod);
    private static void Emit_Call(ILGenerator ilGenerator, MethodInfo method);
    private static void Emit_CastTo(ILGenerator ilGenerator, Type toType);
    private static void Emit_BoxIfValueType(ILGenerator ilGenerator, Type type);
    private static void Emit_ConstInt(ILGenerator ilGenerator, int value);
    private void Emit_LateBoundInvoke(ILGenerator ilGenerator, Type targetType, string methodName, BindingFlags bindingFlags, short targetArgNum, Int16[] paramArgNums);
    private void Emit_TypeOf(ILGenerator ilGenerator, Type type);
}
internal interface MS.Internal.Xaml.Runtime.IAddLineInfo {
    public abstract virtual XamlException WithLineInfo(XamlException ex);
}
internal class MS.Internal.Xaml.Runtime.PartialTrustTolerantRuntime : XamlRuntime {
    private bool _memberAccessPermissionDenied;
    private ClrObjectRuntime _transparentRuntime;
    private ClrObjectRuntime _elevatedRuntime;
    private XamlAccessLevel _accessLevel;
    private XamlSchemaContext _schemaContext;
    public IAddLineInfo LineInfo { get; public set; }
    private bool MemberAccessPermissionDenied { get; private set; }
    public PartialTrustTolerantRuntime(XamlRuntimeSettings runtimeSettings, XamlAccessLevel accessLevel, XamlSchemaContext schemaContext);
    public virtual IAddLineInfo get_LineInfo();
    public virtual void set_LineInfo(IAddLineInfo value);
    public virtual void Add(object collection, XamlType collectionType, object value, XamlType valueXamlType);
    public virtual void AddToDictionary(object collection, XamlType dictionaryType, object value, XamlType valueXamlType, object key);
    public virtual object CallProvideValue(MarkupExtension me, IServiceProvider serviceProvider);
    public virtual object CreateFromValue(ServiceProviderContext serviceContext, XamlValueConverter`1<TypeConverter> ts, object value, XamlMember property);
    public virtual int AttachedPropertyCount(object instance);
    public virtual KeyValuePair`2[] GetAttachedProperties(object instance);
    public virtual bool CanConvertToString(IValueSerializerContext context, ValueSerializer serializer, object instance);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, TypeConverter converter);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, TypeConverter converter, Type type);
    public virtual string ConvertToString(IValueSerializerContext context, ValueSerializer serializer, object instance);
    public virtual T ConvertToValue(ITypeDescriptorContext context, TypeConverter converter, object instance);
    public virtual object CreateInstance(XamlType xamlType, Object[] args);
    public virtual object CreateWithFactoryMethod(XamlType xamlType, string methodName, Object[] args);
    public virtual object DeferredLoad(ServiceProviderContext serviceContext, XamlValueConverter`1<XamlDeferringLoader> deferringLoader, XamlReader deferredContent);
    public virtual XamlReader DeferredSave(IServiceProvider context, XamlValueConverter`1<XamlDeferringLoader> deferringLoader, object value);
    public virtual TConverterBase GetConverterInstance(XamlValueConverter`1<TConverterBase> converter);
    public virtual object GetValue(object obj, XamlMember property, bool failIfWriteOnly);
    public virtual void InitializationGuard(XamlType xamlType, object obj, bool begin);
    public virtual void SetConnectionId(object root, int connectionId, object instance);
    public virtual void SetUriBase(XamlType xamlType, object obj, Uri baseUri);
    public virtual void SetValue(object obj, XamlMember property, object value);
    public virtual void SetXmlInstance(object inst, XamlMember property, XData xData);
    public virtual ShouldSerializeResult ShouldSerialize(XamlMember member, object instance);
    public virtual IList`1<object> GetCollectionItems(object collection, XamlType collectionType);
    public virtual IEnumerable`1<DictionaryEntry> GetDictionaryItems(object dictionary, XamlType dictionaryType);
    private bool get_MemberAccessPermissionDenied();
    private void set_MemberAccessPermissionDenied(bool value);
    private void EnsureElevatedRuntime();
    private static bool HasDefaultInvoker(XamlType xamlType);
    private static bool HasDefaultInvoker(XamlMember xamlMember);
    private static bool IsDefaultConverter(XamlValueConverter`1<TConverterBase> converter);
}
internal abstract class MS.Internal.Xaml.Runtime.XamlRuntime : object {
    public IAddLineInfo LineInfo { get; public set; }
    public abstract virtual IAddLineInfo get_LineInfo();
    public abstract virtual void set_LineInfo(IAddLineInfo value);
    public abstract virtual object CreateInstance(XamlType xamlType, Object[] args);
    public abstract virtual object CreateWithFactoryMethod(XamlType xamlType, string methodName, Object[] args);
    public abstract virtual object CreateFromValue(ServiceProviderContext serviceContext, XamlValueConverter`1<TypeConverter> ts, object value, XamlMember property);
    public abstract virtual bool CanConvertToString(IValueSerializerContext context, ValueSerializer serializer, object instance);
    public abstract virtual bool CanConvertFrom(ITypeDescriptorContext context, TypeConverter converter);
    public abstract virtual bool CanConvertTo(ITypeDescriptorContext context, TypeConverter converter, Type type);
    public abstract virtual string ConvertToString(IValueSerializerContext context, ValueSerializer serializer, object instance);
    public abstract virtual T ConvertToValue(ITypeDescriptorContext context, TypeConverter converter, object instance);
    public abstract virtual object DeferredLoad(ServiceProviderContext serviceContext, XamlValueConverter`1<XamlDeferringLoader> deferringLoader, XamlReader deferredContent);
    public abstract virtual XamlReader DeferredSave(IServiceProvider context, XamlValueConverter`1<XamlDeferringLoader> deferringLoader, object value);
    public object GetValue(object obj, XamlMember property);
    public abstract virtual object GetValue(object obj, XamlMember property, bool failIfWriteOnly);
    public abstract virtual void SetValue(object obj, XamlMember property, object value);
    public abstract virtual void SetUriBase(XamlType xamlType, object obj, Uri baseUri);
    public abstract virtual void SetXmlInstance(object inst, XamlMember property, XData xData);
    public abstract virtual void Add(object collection, XamlType collectionType, object value, XamlType valueXamlType);
    public abstract virtual void AddToDictionary(object collection, XamlType dictionaryType, object value, XamlType valueXamlType, object key);
    public abstract virtual IList`1<object> GetCollectionItems(object collection, XamlType collectionType);
    public abstract virtual IEnumerable`1<DictionaryEntry> GetDictionaryItems(object dictionary, XamlType dictionaryType);
    public abstract virtual int AttachedPropertyCount(object instance);
    public abstract virtual KeyValuePair`2[] GetAttachedProperties(object instance);
    public abstract virtual void SetConnectionId(object root, int connectionId, object instance);
    public abstract virtual void InitializationGuard(XamlType xamlType, object obj, bool begin);
    public abstract virtual object CallProvideValue(MarkupExtension me, IServiceProvider serviceProvider);
    public abstract virtual ShouldSerializeResult ShouldSerialize(XamlMember member, object instance);
    public abstract virtual TConverterBase GetConverterInstance(XamlValueConverter`1<TConverterBase> converter);
}
internal class MS.Internal.Xaml.Runtime.XamlRuntimeSettings : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreCanConvert>k__BackingField;
    public bool IgnoreCanConvert { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreCanConvert();
    [CompilerGeneratedAttribute]
public void set_IgnoreCanConvert(bool value);
}
[FriendAccessAllowedAttribute]
internal class MS.Internal.Xaml.SecurityCriticalDataForSet`1 : ValueType {
    private T _value;
    internal T Value { get; internal set; }
    internal SecurityCriticalDataForSet`1(T value);
    internal T get_Value();
    internal void set_Value(T value);
}
internal class MS.Internal.Xaml.ServiceProviderContext : object {
    private ObjectWriterContext _xamlContext;
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    private Uri System.Windows.Markup.IUriContext.BaseUri { get; private set; }
    private XamlSchemaContext System.Xaml.IXamlSchemaContextProvider.SchemaContext { get; }
    private object System.Windows.Markup.IProvideValueTarget.TargetObject { get; }
    private object System.Windows.Markup.IProvideValueTarget.TargetProperty { get; }
    private object System.Xaml.IRootObjectProvider.RootObject { get; }
    private bool System.Xaml.IXamlNameResolver.IsFixupTokenAvailable { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ServiceProviderContext(ObjectWriterContext context);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override Type System.Windows.Markup.IXamlTypeResolver.Resolve(string qName);
    private sealed virtual override Uri System.Windows.Markup.IUriContext.get_BaseUri();
    private sealed virtual override void System.Windows.Markup.IUriContext.set_BaseUri(Uri value);
    private sealed virtual override AmbientPropertyValue System.Xaml.IAmbientProvider.GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    private sealed virtual override object System.Xaml.IAmbientProvider.GetFirstAmbientValue(XamlType[] types);
    private sealed virtual override IEnumerable`1<AmbientPropertyValue> System.Xaml.IAmbientProvider.GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    private sealed virtual override IEnumerable`1<object> System.Xaml.IAmbientProvider.GetAllAmbientValues(XamlType[] types);
    private sealed virtual override IEnumerable`1<AmbientPropertyValue> System.Xaml.IAmbientProvider.GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
    private sealed virtual override XamlSchemaContext System.Xaml.IXamlSchemaContextProvider.get_SchemaContext();
    private sealed virtual override object System.Windows.Markup.IProvideValueTarget.get_TargetObject();
    private sealed virtual override object System.Windows.Markup.IProvideValueTarget.get_TargetProperty();
    private sealed virtual override object System.Xaml.IRootObjectProvider.get_RootObject();
    private sealed virtual override string System.Xaml.IXamlNamespaceResolver.GetNamespace(string prefix);
    private sealed virtual override IEnumerable`1<NamespaceDeclaration> System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes();
    private sealed virtual override bool System.Xaml.IXamlNameResolver.get_IsFixupTokenAvailable();
    private sealed virtual override object System.Xaml.IXamlNameResolver.Resolve(string name);
    private sealed virtual override object System.Xaml.IXamlNameResolver.Resolve(string name, Boolean& isFullyInitialized);
    private sealed virtual override object System.Xaml.IXamlNameResolver.GetFixupToken(IEnumerable`1<string> names);
    private sealed virtual override object System.Xaml.IXamlNameResolver.GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly);
    private sealed virtual override IEnumerable`1<KeyValuePair`2<string, object>> System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope();
    private sealed virtual override void System.Xaml.IXamlNameResolver.add_OnNameScopeInitializationComplete(EventHandler value);
    private sealed virtual override void System.Xaml.IXamlNameResolver.remove_OnNameScopeInitializationComplete(EventHandler value);
    public sealed virtual Type GetDestinationType();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
internal abstract class MS.Internal.Xaml.XamlContext : object {
    private XamlSchemaContext _schemaContext;
    private Func`2<string, string> _resolvePrefixCachedDelegate;
    protected Assembly _localAssembly;
    public XamlSchemaContext SchemaContext { get; }
    public Assembly LocalAssembly { get; protected set; }
    internal Func`2<string, string> ResolvePrefixCachedDelegate { get; }
    protected XamlContext(XamlSchemaContext schemaContext);
    public XamlSchemaContext get_SchemaContext();
    public virtual Assembly get_LocalAssembly();
    protected virtual void set_LocalAssembly(Assembly value);
    public XamlMember GetXamlProperty(XamlType xamlType, string propertyName, XamlType rootObjectType);
    public XamlMember GetXamlAttachableProperty(XamlType xamlType, string propertyName);
    public XamlMember GetDottedProperty(XamlType tagType, string tagNamespace, XamlPropertyName propName, bool tagIsRoot);
    public string GetAttributeNamespace(XamlPropertyName propName, string tagNamespace);
    public XamlMember GetNoDotAttributeProperty(XamlType tagType, XamlPropertyName propName, string tagNamespace, string propUsageNamespace, bool tagIsRoot);
    public abstract virtual void AddNamespacePrefix(string prefix, string xamlNamespace);
    public abstract virtual string FindNamespaceByPrefix(string prefix);
    public abstract virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
    private XamlType GetXamlTypeOrUnknown(XamlTypeName typeName);
    internal XamlType GetXamlType(XamlName typeName);
    internal XamlType GetXamlType(XamlName typeName, bool returnUnknownTypesOnFailure);
    internal XamlTypeName GetXamlTypeName(XamlName typeName);
    internal XamlType GetXamlType(XamlTypeName typeName);
    internal XamlType GetXamlType(XamlTypeName typeName, bool returnUnknownTypesOnFailure);
    internal XamlType GetXamlType(XamlTypeName typeName, bool returnUnknownTypesOnFailure, bool skipVisibilityCheck);
    internal Func`2<string, string> get_ResolvePrefixCachedDelegate();
    private string ResolveXamlNameNS(XamlName name);
    internal XamlType ResolveXamlType(string qName, bool skipVisibilityCheck);
    internal XamlMember ResolveDirectiveProperty(string xamlNS, string name);
    internal virtual bool IsVisible(XamlMember member, XamlType rootObjectType);
    private XamlMember CreateUnknownMember(XamlType declaringType, string name);
    private XamlMember CreateUnknownAttachableMember(XamlType declaringType, string name);
    private bool PropertyTypeMatchesGenericTagType(XamlType tagType, string tagNs, string propNs, string propTypeName);
    private XamlMember GetInstanceOrAttachableProperty(XamlType tagType, string propName, XamlType rootTagType);
    private XamlType GetXamlType(string ns, string name, IList`1<XamlType> typeArguments);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string APSException { get; }
    internal static string AddCollection { get; }
    internal static string AddDictionary { get; }
    internal static string AmbiguousCollectionItemType { get; }
    internal static string AmbiguousDictionaryItemType { get; }
    internal static string Animation_ChildMustBeKeyFrame { get; }
    internal static string Animation_InvalidAnimationUsingKeyFramesDuration { get; }
    internal static string Animation_InvalidBaseValue { get; }
    internal static string Animation_InvalidResolvedKeyTimes { get; }
    internal static string Animation_InvalidTimeKeyTime { get; }
    internal static string Animation_Invalid_DefaultValue { get; }
    internal static string Animation_NoTextChildren { get; }
    internal static string ArgumentRequired { get; }
    internal static string ArrayAddNotImplemented { get; }
    internal static string AssemblyTagMissing { get; }
    internal static string AttachableEventNotImplemented { get; }
    internal static string AttachableMemberNotFound { get; }
    internal static string AttachedPropOnFwdRefTC { get; }
    internal static string AttachedPropertyOnDictionaryKey { get; }
    internal static string AttachedPropertyOnTypeConvertedOrStringProperty { get; }
    internal static string AttributeUnhandledKind { get; }
    internal static string BadInternalsVisibleTo1 { get; }
    internal static string BadInternalsVisibleTo2 { get; }
    internal static string BadMethod { get; }
    internal static string BadStateObjectWriter { get; }
    internal static string BadXmlnsCompat { get; }
    internal static string BadXmlnsDefinition { get; }
    internal static string BadXmlnsPrefix { get; }
    internal static string BuilderStackNotEmptyOnClose { get; }
    internal static string CanConvertFromFailed { get; }
    internal static string CanConvertToFailed { get; }
    internal static string CannotAddPositionalParameters { get; }
    internal static string CannotConvertStringToType { get; }
    internal static string CannotConvertType { get; }
    internal static string CannotCreateBadEventDelegate { get; }
    internal static string CannotCreateBadType { get; }
    internal static string CannotFindAssembly { get; }
    internal static string CannotModifyReadOnlyContainer { get; }
    internal static string CannotReassignSchemaContext { get; }
    internal static string CannotResolveTypeForFactoryMethod { get; }
    internal static string CannotRetrievePartsOfWriteOnlyContainer { get; }
    internal static string CannotSetBaseUri { get; }
    internal static string CannotSetSchemaContext { get; }
    internal static string CannotSetSchemaContextNull { get; }
    internal static string CannotWriteClosedWriter { get; }
    internal static string CannotWriteXmlSpacePreserveOnMember { get; }
    internal static string CantAssignRootInstance { get; }
    internal static string CantCreateUnknownType { get; }
    internal static string CantGetWriteonlyProperty { get; }
    internal static string CantSetReadonlyProperty { get; }
    internal static string CantSetUnknownProperty { get; }
    internal static string CloseInsideTemplate { get; }
    internal static string CloseXamlWriterBeforeReading { get; }
    internal static string CollectionCannotContainNulls { get; }
    internal static string CollectionNumberOfElementsMustBeLessOrEqualTo { get; }
    internal static string Collection_BadType { get; }
    internal static string Collection_CopyTo_ArrayCannotBeMultidimensional { get; }
    internal static string Collection_CopyTo_IndexGreaterThanOrEqualToArrayLength { get; }
    internal static string Collection_CopyTo_NumberOfElementsExceedsArrayLength { get; }
    internal static string ConstructImplicitType { get; }
    internal static string ConstructorInvocation { get; }
    internal static string ConstructorNotFoundForGivenPositionalParameters { get; }
    internal static string ConvertFromException { get; }
    internal static string ConvertToException { get; }
    internal static string ConverterMustDeriveFromBase { get; }
    internal static string DefaultAttachablePropertyStoreCannotAddInstance { get; }
    internal static string DeferredLoad { get; }
    internal static string DeferredPropertyNotCollected { get; }
    internal static string DeferredSave { get; }
    internal static string DeferringLoaderInstanceNull { get; }
    internal static string DependsOnMissing { get; }
    internal static string DictionaryFirstChanceException { get; }
    internal static string DirectiveGetter { get; }
    internal static string DirectiveMustBeString { get; }
    internal static string DirectiveNotAtRoot { get; }
    internal static string DirectiveNotFound { get; }
    internal static string DuplicateMemberSet { get; }
    internal static string DuplicateXmlnsCompat { get; }
    internal static string DuplicateXmlnsCompatAcrossAssemblies { get; }
    internal static string Enum_Invalid { get; }
    internal static string Enumerator_VerifyContext { get; }
    internal static string EventCannotBeAssigned { get; }
    internal static string ExpandPositionalParametersWithReadOnlyProperties { get; }
    internal static string ExpandPositionalParametersWithoutUnderlyingType { get; }
    internal static string ExpandPositionalParametersinTypeWithNoDefaultConstructor { get; }
    internal static string ExpectedLoadPermission { get; }
    internal static string ExpectedObjectMarkupInfo { get; }
    internal static string ExpectedQualifiedAssemblyName { get; }
    internal static string ExpectedQualifiedTypeName { get; }
    internal static string FactoryReturnedNull { get; }
    internal static string FileFormatException { get; }
    internal static string FileFormatExceptionWithFileName { get; }
    internal static string FileNotFoundExceptionMessage { get; }
    internal static string ForwardRefDirectives { get; }
    internal static string Freezable_CantBeFrozen { get; }
    internal static string FrugalList_CannotPromoteBeyondArray { get; }
    internal static string FrugalList_TargetMapCannotHoldAllData { get; }
    internal static string GetConverterInstance { get; }
    internal static string GetItemsException { get; }
    internal static string GetItemsReturnedNull { get; }
    internal static string GetObjectNull { get; }
    internal static string GetTargetTypeOnNonAttachableMember { get; }
    internal static string GetValue { get; }
    internal static string GetterOrSetterRequired { get; }
    internal static string IncorrectGetterParamNum { get; }
    internal static string IncorrectSetterParamNum { get; }
    internal static string InitializationGuard { get; }
    internal static string InitializationSyntaxWithoutTypeConverter { get; }
    internal static string InvalidCharInTypeName { get; }
    internal static string InvalidClosingBracketCharacers { get; }
    internal static string InvalidEvent { get; }
    internal static string InvalidExpression { get; }
    internal static string InvalidPermissionStateValue { get; }
    internal static string InvalidPermissionType { get; }
    internal static string InvalidTypeArgument { get; }
    internal static string InvalidTypeListString { get; }
    internal static string InvalidTypeString { get; }
    internal static string InvalidXamlMemberName { get; }
    internal static string LateConstructionDirective { get; }
    internal static string LineNumberAndPosition { get; }
    internal static string LineNumberOnly { get; }
    internal static string ListNotIList { get; }
    internal static string MalformedBracketCharacters { get; }
    internal static string MalformedPropertyName { get; }
    internal static string MarkupExtensionArrayBadType { get; }
    internal static string MarkupExtensionArrayType { get; }
    internal static string MarkupExtensionBadStatic { get; }
    internal static string MarkupExtensionNoContext { get; }
    internal static string MarkupExtensionStaticMember { get; }
    internal static string MarkupExtensionTypeName { get; }
    internal static string MarkupExtensionTypeNameBad { get; }
    internal static string MarkupExtensionWithDuplicateArity { get; }
    internal static string MemberHasInvalidXamlName { get; }
    internal static string MemberIsInternal { get; }
    internal static string MethodInvocation { get; }
    internal static string MissingAssemblyName { get; }
    internal static string MissingCase { get; }
    internal static string MissingCaseXamlNodes { get; }
    internal static string MissingComma1 { get; }
    internal static string MissingComma2 { get; }
    internal static string MissingImplicitProperty { get; }
    internal static string MissingImplicitPropertyTypeCase { get; }
    internal static string MissingKey { get; }
    internal static string MissingLookPropertyBit { get; }
    internal static string MissingNameProvider { get; }
    internal static string MissingNameResolver { get; }
    internal static string MissingPropertyCaseClrType { get; }
    internal static string MissingTagInNamespace { get; }
    internal static string MissingTypeConverter { get; }
    internal static string MustBeOfType { get; }
    internal static string MustHaveName { get; }
    internal static string MustNotCallSetter { get; }
    internal static string NameNotFound { get; }
    internal static string NameScopeDuplicateNamesNotAllowed { get; }
    internal static string NameScopeException { get; }
    internal static string NameScopeInvalidIdentifierName { get; }
    internal static string NameScopeNameNotEmptyString { get; }
    internal static string NameScopeNameNotFound { get; }
    internal static string NameScopeOnRootInstance { get; }
    internal static string NamespaceDeclarationCannotBeXml { get; }
    internal static string NamespaceDeclarationNamespaceCannotBeNull { get; }
    internal static string NamespaceDeclarationPrefixCannotBeNull { get; }
    internal static string NamespaceNotFound { get; }
    internal static string NoAddMethodFound { get; }
    internal static string NoAttributeUsage { get; }
    internal static string NoConstructor { get; }
    internal static string NoConstructorWithNArugments { get; }
    internal static string NoDefaultConstructor { get; }
    internal static string NoElementUsage { get; }
    internal static string NoPropertyInCurrentFrame_EM { get; }
    internal static string NoPropertyInCurrentFrame_EM_noType { get; }
    internal static string NoPropertyInCurrentFrame_GO { get; }
    internal static string NoPropertyInCurrentFrame_GO_noType { get; }
    internal static string NoPropertyInCurrentFrame_NS { get; }
    internal static string NoPropertyInCurrentFrame_SO { get; }
    internal static string NoPropertyInCurrentFrame_V { get; }
    internal static string NoPropertyInCurrentFrame_V_noType { get; }
    internal static string NoSuchConstructor { get; }
    internal static string NoTypeInCurrentFrame_EO { get; }
    internal static string NoTypeInCurrentFrame_SM { get; }
    internal static string NonMEWithPositionalParameters { get; }
    internal static string NotAmbientProperty { get; }
    internal static string NotAmbientType { get; }
    internal static string NotAssignableFrom { get; }
    internal static string NotDeclaringTypeAttributeProperty { get; }
    internal static string NotSupportedOnDirective { get; }
    internal static string NotSupportedOnUnknownMember { get; }
    internal static string NotSupportedOnUnknownType { get; }
    internal static string ObjectNotTcOrMe { get; }
    internal static string ObjectReaderAttachedPropertyNotFound { get; }
    internal static string ObjectReaderDictionaryMethod1NotFound { get; }
    internal static string ObjectReaderInstanceDescriptorIncompatibleArgumentTypes { get; }
    internal static string ObjectReaderInstanceDescriptorIncompatibleArguments { get; }
    internal static string ObjectReaderInstanceDescriptorInvalidMethod { get; }
    internal static string ObjectReaderMultidimensionalArrayNotSupported { get; }
    internal static string ObjectReaderNoDefaultConstructor { get; }
    internal static string ObjectReaderNoMatchingConstructor { get; }
    internal static string ObjectReaderTypeCannotRoundtrip { get; }
    internal static string ObjectReaderTypeIsNested { get; }
    internal static string ObjectReaderTypeNotAllowed { get; }
    internal static string ObjectReaderXamlNamePropertyMustBeString { get; }
    internal static string ObjectReaderXamlNameScopeResultsInClonedObject { get; }
    internal static string ObjectReaderXamlNamedElementAlreadyRegistered { get; }
    internal static string ObjectReader_TypeNotVisible { get; }
    internal static string ObjectWriterTypeNotAllowed { get; }
    internal static string OnlySupportedOnCollections { get; }
    internal static string OnlySupportedOnCollectionsAndDictionaries { get; }
    internal static string OnlySupportedOnDictionaries { get; }
    internal static string OpenPropertyInCurrentFrame_EO { get; }
    internal static string OpenPropertyInCurrentFrame_SM { get; }
    internal static string ParameterCannotBeNegative { get; }
    internal static string ParentlessPropertyElement { get; }
    internal static string ParserAssemblyLoadVersionMismatch { get; }
    internal static string ParserAttributeArgsHigh { get; }
    internal static string ParserAttributeArgsLow { get; }
    internal static string PositionalParamsWrongLength { get; }
    internal static string PrefixNotFound { get; }
    internal static string PrefixNotInFrames { get; }
    internal static string PropertyDoesNotTakeText { get; }
    internal static string PropertyNotImplemented { get; }
    internal static string ProvideValue { get; }
    internal static string ProvideValueCycle { get; }
    internal static string QuoteCharactersOutOfPlace { get; }
    internal static string ReferenceIsNull { get; }
    internal static string SavedContextSchemaContextMismatch { get; }
    internal static string SavedContextSchemaContextNull { get; }
    internal static string SchemaContextNotInitialized { get; }
    internal static string SchemaContextNull { get; }
    internal static string SecurityExceptionForSettingSandboxExternalToTrue { get; }
    internal static string SecurityXmlMissingAttribute { get; }
    internal static string SecurityXmlUnexpectedTag { get; }
    internal static string SecurityXmlUnexpectedValue { get; }
    internal static string ServiceTypeAlreadyAdded { get; }
    internal static string SetConnectionId { get; }
    internal static string SetOnlyProperty { get; }
    internal static string SetTargetTypeOnNonAttachableMember { get; }
    internal static string SetUriBase { get; }
    internal static string SetValue { get; }
    internal static string SetXmlInstance { get; }
    internal static string SettingPropertiesIsNotAllowed { get; }
    internal static string ShouldOverrideMethod { get; }
    internal static string ShouldSerializeFailed { get; }
    internal static string SimpleFixupsMustHaveOneName { get; }
    internal static string StringEmpty { get; }
    internal static string StringIsNullOrEmpty { get; }
    internal static string TemplateNotCollected { get; }
    internal static string ThreadAlreadyStarted { get; }
    internal static string ToStringNull { get; }
    internal static string TokenizerHelperEmptyToken { get; }
    internal static string TokenizerHelperExtraDataEncountered { get; }
    internal static string TokenizerHelperMissingEndQuote { get; }
    internal static string TokenizerHelperPrematureStringTermination { get; }
    internal static string TooManyAttributes { get; }
    internal static string TooManyAttributesOnType { get; }
    internal static string TooManyTypeConverterAttributes { get; }
    internal static string TransitiveForwardRefDirectives { get; }
    internal static string TypeConverterFailed { get; }
    internal static string TypeConverterFailed2 { get; }
    internal static string TypeHasInvalidXamlName { get; }
    internal static string TypeHasNoContentProperty { get; }
    internal static string TypeMetadataCannotChangeAfterUse { get; }
    internal static string TypeNameCannotHavePeriod { get; }
    internal static string TypeNotFound { get; }
    internal static string TypeNotPublic { get; }
    internal static string UnclosedQuote { get; }
    internal static string UnexpectedClose { get; }
    internal static string UnexpectedConstructorArg { get; }
    internal static string UnexpectedNodeType { get; }
    internal static string UnexpectedParameterType { get; }
    internal static string UnexpectedToken { get; }
    internal static string UnexpectedTokenAfterME { get; }
    internal static string UnhandledBoolTypeBit { get; }
    internal static string UnknownAttributeProperty { get; }
    internal static string UnknownMember { get; }
    internal static string UnknownMemberOnUnknownType { get; }
    internal static string UnknownMemberSimple { get; }
    internal static string UnknownType { get; }
    internal static string UnresolvedForwardReferences { get; }
    internal static string UnresolvedNamespace { get; }
    internal static string UriNotFound { get; }
    internal static string UsableDuringInitializationOnME { get; }
    internal static string ValueInArrayIsNull { get; }
    internal static string ValueMustBeFollowedByEndMember { get; }
    internal static string Visual_ArgumentOutOfRange { get; }
    internal static string WhiteSpaceInCollection { get; }
    internal static string WhitespaceAfterME { get; }
    internal static string WriterIsClosed { get; }
    internal static string XCRChoiceAfterFallback { get; }
    internal static string XCRChoiceNotFound { get; }
    internal static string XCRChoiceOnlyInAC { get; }
    internal static string XCRCompatCycle { get; }
    internal static string XCRDuplicatePreserve { get; }
    internal static string XCRDuplicateProcessContent { get; }
    internal static string XCRDuplicateWildcardPreserve { get; }
    internal static string XCRDuplicateWildcardProcessContent { get; }
    internal static string XCRFallbackOnlyInAC { get; }
    internal static string XCRInvalidACChild { get; }
    internal static string XCRInvalidAttribInElement { get; }
    internal static string XCRInvalidFormat { get; }
    internal static string XCRInvalidPreserve { get; }
    internal static string XCRInvalidProcessContent { get; }
    internal static string XCRInvalidRequiresAttribute { get; }
    internal static string XCRInvalidXMLName { get; }
    internal static string XCRMultipleFallbackFound { get; }
    internal static string XCRMustUnderstandFailed { get; }
    internal static string XCRNSPreserveNotIgnorable { get; }
    internal static string XCRNSProcessContentNotIgnorable { get; }
    internal static string XCRRequiresAttribNotFound { get; }
    internal static string XCRUndefinedPrefix { get; }
    internal static string XCRUnknownCompatAttrib { get; }
    internal static string XCRUnknownCompatElement { get; }
    internal static string XClassMustMatchRootInstance { get; }
    internal static string XamlFactoryInvalidXamlNode { get; }
    internal static string XamlMarkupExtensionWriterCannotSetSchemaContext { get; }
    internal static string XamlMarkupExtensionWriterCannotWriteNonstringValue { get; }
    internal static string XamlMarkupExtensionWriterDuplicateMember { get; }
    internal static string XamlMarkupExtensionWriterInputInvalid { get; }
    internal static string XamlTypeNameCannotGetPrefix { get; }
    internal static string XamlTypeNameNameIsNullOrEmpty { get; }
    internal static string XamlTypeNameNamespaceIsNull { get; }
    internal static string XamlXmlWriterCannotWriteNonstringValue { get; }
    internal static string XamlXmlWriterDuplicateMember { get; }
    internal static string XamlXmlWriterIsObjectFromMemberSetForArraysOrNonCollections { get; }
    internal static string XamlXmlWriterNamespaceAlreadyHasPrefixInCurrentScope { get; }
    internal static string XamlXmlWriterPrefixAlreadyDefinedInCurrentScope { get; }
    internal static string XamlXmlWriterWriteNotSupportedInCurrentState { get; }
    internal static string XamlXmlWriterWriteObjectNotSupportedInCurrentState { get; }
    internal static string XaslTypePropertiesNotImplemented { get; }
    internal static string XmlDataNull { get; }
    internal static string XmlValueNotReader { get; }
    internal static string XmlnsCompatCycle { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_APSException();
    internal static string get_AddCollection();
    internal static string get_AddDictionary();
    internal static string get_AmbiguousCollectionItemType();
    internal static string get_AmbiguousDictionaryItemType();
    internal static string get_Animation_ChildMustBeKeyFrame();
    internal static string get_Animation_InvalidAnimationUsingKeyFramesDuration();
    internal static string get_Animation_InvalidBaseValue();
    internal static string get_Animation_InvalidResolvedKeyTimes();
    internal static string get_Animation_InvalidTimeKeyTime();
    internal static string get_Animation_Invalid_DefaultValue();
    internal static string get_Animation_NoTextChildren();
    internal static string get_ArgumentRequired();
    internal static string get_ArrayAddNotImplemented();
    internal static string get_AssemblyTagMissing();
    internal static string get_AttachableEventNotImplemented();
    internal static string get_AttachableMemberNotFound();
    internal static string get_AttachedPropOnFwdRefTC();
    internal static string get_AttachedPropertyOnDictionaryKey();
    internal static string get_AttachedPropertyOnTypeConvertedOrStringProperty();
    internal static string get_AttributeUnhandledKind();
    internal static string get_BadInternalsVisibleTo1();
    internal static string get_BadInternalsVisibleTo2();
    internal static string get_BadMethod();
    internal static string get_BadStateObjectWriter();
    internal static string get_BadXmlnsCompat();
    internal static string get_BadXmlnsDefinition();
    internal static string get_BadXmlnsPrefix();
    internal static string get_BuilderStackNotEmptyOnClose();
    internal static string get_CanConvertFromFailed();
    internal static string get_CanConvertToFailed();
    internal static string get_CannotAddPositionalParameters();
    internal static string get_CannotConvertStringToType();
    internal static string get_CannotConvertType();
    internal static string get_CannotCreateBadEventDelegate();
    internal static string get_CannotCreateBadType();
    internal static string get_CannotFindAssembly();
    internal static string get_CannotModifyReadOnlyContainer();
    internal static string get_CannotReassignSchemaContext();
    internal static string get_CannotResolveTypeForFactoryMethod();
    internal static string get_CannotRetrievePartsOfWriteOnlyContainer();
    internal static string get_CannotSetBaseUri();
    internal static string get_CannotSetSchemaContext();
    internal static string get_CannotSetSchemaContextNull();
    internal static string get_CannotWriteClosedWriter();
    internal static string get_CannotWriteXmlSpacePreserveOnMember();
    internal static string get_CantAssignRootInstance();
    internal static string get_CantCreateUnknownType();
    internal static string get_CantGetWriteonlyProperty();
    internal static string get_CantSetReadonlyProperty();
    internal static string get_CantSetUnknownProperty();
    internal static string get_CloseInsideTemplate();
    internal static string get_CloseXamlWriterBeforeReading();
    internal static string get_CollectionCannotContainNulls();
    internal static string get_CollectionNumberOfElementsMustBeLessOrEqualTo();
    internal static string get_Collection_BadType();
    internal static string get_Collection_CopyTo_ArrayCannotBeMultidimensional();
    internal static string get_Collection_CopyTo_IndexGreaterThanOrEqualToArrayLength();
    internal static string get_Collection_CopyTo_NumberOfElementsExceedsArrayLength();
    internal static string get_ConstructImplicitType();
    internal static string get_ConstructorInvocation();
    internal static string get_ConstructorNotFoundForGivenPositionalParameters();
    internal static string get_ConvertFromException();
    internal static string get_ConvertToException();
    internal static string get_ConverterMustDeriveFromBase();
    internal static string get_DefaultAttachablePropertyStoreCannotAddInstance();
    internal static string get_DeferredLoad();
    internal static string get_DeferredPropertyNotCollected();
    internal static string get_DeferredSave();
    internal static string get_DeferringLoaderInstanceNull();
    internal static string get_DependsOnMissing();
    internal static string get_DictionaryFirstChanceException();
    internal static string get_DirectiveGetter();
    internal static string get_DirectiveMustBeString();
    internal static string get_DirectiveNotAtRoot();
    internal static string get_DirectiveNotFound();
    internal static string get_DuplicateMemberSet();
    internal static string get_DuplicateXmlnsCompat();
    internal static string get_DuplicateXmlnsCompatAcrossAssemblies();
    internal static string get_Enum_Invalid();
    internal static string get_Enumerator_VerifyContext();
    internal static string get_EventCannotBeAssigned();
    internal static string get_ExpandPositionalParametersWithReadOnlyProperties();
    internal static string get_ExpandPositionalParametersWithoutUnderlyingType();
    internal static string get_ExpandPositionalParametersinTypeWithNoDefaultConstructor();
    internal static string get_ExpectedLoadPermission();
    internal static string get_ExpectedObjectMarkupInfo();
    internal static string get_ExpectedQualifiedAssemblyName();
    internal static string get_ExpectedQualifiedTypeName();
    internal static string get_FactoryReturnedNull();
    internal static string get_FileFormatException();
    internal static string get_FileFormatExceptionWithFileName();
    internal static string get_FileNotFoundExceptionMessage();
    internal static string get_ForwardRefDirectives();
    internal static string get_Freezable_CantBeFrozen();
    internal static string get_FrugalList_CannotPromoteBeyondArray();
    internal static string get_FrugalList_TargetMapCannotHoldAllData();
    internal static string get_GetConverterInstance();
    internal static string get_GetItemsException();
    internal static string get_GetItemsReturnedNull();
    internal static string get_GetObjectNull();
    internal static string get_GetTargetTypeOnNonAttachableMember();
    internal static string get_GetValue();
    internal static string get_GetterOrSetterRequired();
    internal static string get_IncorrectGetterParamNum();
    internal static string get_IncorrectSetterParamNum();
    internal static string get_InitializationGuard();
    internal static string get_InitializationSyntaxWithoutTypeConverter();
    internal static string get_InvalidCharInTypeName();
    internal static string get_InvalidClosingBracketCharacers();
    internal static string get_InvalidEvent();
    internal static string get_InvalidExpression();
    internal static string get_InvalidPermissionStateValue();
    internal static string get_InvalidPermissionType();
    internal static string get_InvalidTypeArgument();
    internal static string get_InvalidTypeListString();
    internal static string get_InvalidTypeString();
    internal static string get_InvalidXamlMemberName();
    internal static string get_LateConstructionDirective();
    internal static string get_LineNumberAndPosition();
    internal static string get_LineNumberOnly();
    internal static string get_ListNotIList();
    internal static string get_MalformedBracketCharacters();
    internal static string get_MalformedPropertyName();
    internal static string get_MarkupExtensionArrayBadType();
    internal static string get_MarkupExtensionArrayType();
    internal static string get_MarkupExtensionBadStatic();
    internal static string get_MarkupExtensionNoContext();
    internal static string get_MarkupExtensionStaticMember();
    internal static string get_MarkupExtensionTypeName();
    internal static string get_MarkupExtensionTypeNameBad();
    internal static string get_MarkupExtensionWithDuplicateArity();
    internal static string get_MemberHasInvalidXamlName();
    internal static string get_MemberIsInternal();
    internal static string get_MethodInvocation();
    internal static string get_MissingAssemblyName();
    internal static string get_MissingCase();
    internal static string get_MissingCaseXamlNodes();
    internal static string get_MissingComma1();
    internal static string get_MissingComma2();
    internal static string get_MissingImplicitProperty();
    internal static string get_MissingImplicitPropertyTypeCase();
    internal static string get_MissingKey();
    internal static string get_MissingLookPropertyBit();
    internal static string get_MissingNameProvider();
    internal static string get_MissingNameResolver();
    internal static string get_MissingPropertyCaseClrType();
    internal static string get_MissingTagInNamespace();
    internal static string get_MissingTypeConverter();
    internal static string get_MustBeOfType();
    internal static string get_MustHaveName();
    internal static string get_MustNotCallSetter();
    internal static string get_NameNotFound();
    internal static string get_NameScopeDuplicateNamesNotAllowed();
    internal static string get_NameScopeException();
    internal static string get_NameScopeInvalidIdentifierName();
    internal static string get_NameScopeNameNotEmptyString();
    internal static string get_NameScopeNameNotFound();
    internal static string get_NameScopeOnRootInstance();
    internal static string get_NamespaceDeclarationCannotBeXml();
    internal static string get_NamespaceDeclarationNamespaceCannotBeNull();
    internal static string get_NamespaceDeclarationPrefixCannotBeNull();
    internal static string get_NamespaceNotFound();
    internal static string get_NoAddMethodFound();
    internal static string get_NoAttributeUsage();
    internal static string get_NoConstructor();
    internal static string get_NoConstructorWithNArugments();
    internal static string get_NoDefaultConstructor();
    internal static string get_NoElementUsage();
    internal static string get_NoPropertyInCurrentFrame_EM();
    internal static string get_NoPropertyInCurrentFrame_EM_noType();
    internal static string get_NoPropertyInCurrentFrame_GO();
    internal static string get_NoPropertyInCurrentFrame_GO_noType();
    internal static string get_NoPropertyInCurrentFrame_NS();
    internal static string get_NoPropertyInCurrentFrame_SO();
    internal static string get_NoPropertyInCurrentFrame_V();
    internal static string get_NoPropertyInCurrentFrame_V_noType();
    internal static string get_NoSuchConstructor();
    internal static string get_NoTypeInCurrentFrame_EO();
    internal static string get_NoTypeInCurrentFrame_SM();
    internal static string get_NonMEWithPositionalParameters();
    internal static string get_NotAmbientProperty();
    internal static string get_NotAmbientType();
    internal static string get_NotAssignableFrom();
    internal static string get_NotDeclaringTypeAttributeProperty();
    internal static string get_NotSupportedOnDirective();
    internal static string get_NotSupportedOnUnknownMember();
    internal static string get_NotSupportedOnUnknownType();
    internal static string get_ObjectNotTcOrMe();
    internal static string get_ObjectReaderAttachedPropertyNotFound();
    internal static string get_ObjectReaderDictionaryMethod1NotFound();
    internal static string get_ObjectReaderInstanceDescriptorIncompatibleArgumentTypes();
    internal static string get_ObjectReaderInstanceDescriptorIncompatibleArguments();
    internal static string get_ObjectReaderInstanceDescriptorInvalidMethod();
    internal static string get_ObjectReaderMultidimensionalArrayNotSupported();
    internal static string get_ObjectReaderNoDefaultConstructor();
    internal static string get_ObjectReaderNoMatchingConstructor();
    internal static string get_ObjectReaderTypeCannotRoundtrip();
    internal static string get_ObjectReaderTypeIsNested();
    internal static string get_ObjectReaderTypeNotAllowed();
    internal static string get_ObjectReaderXamlNamePropertyMustBeString();
    internal static string get_ObjectReaderXamlNameScopeResultsInClonedObject();
    internal static string get_ObjectReaderXamlNamedElementAlreadyRegistered();
    internal static string get_ObjectReader_TypeNotVisible();
    internal static string get_ObjectWriterTypeNotAllowed();
    internal static string get_OnlySupportedOnCollections();
    internal static string get_OnlySupportedOnCollectionsAndDictionaries();
    internal static string get_OnlySupportedOnDictionaries();
    internal static string get_OpenPropertyInCurrentFrame_EO();
    internal static string get_OpenPropertyInCurrentFrame_SM();
    internal static string get_ParameterCannotBeNegative();
    internal static string get_ParentlessPropertyElement();
    internal static string get_ParserAssemblyLoadVersionMismatch();
    internal static string get_ParserAttributeArgsHigh();
    internal static string get_ParserAttributeArgsLow();
    internal static string get_PositionalParamsWrongLength();
    internal static string get_PrefixNotFound();
    internal static string get_PrefixNotInFrames();
    internal static string get_PropertyDoesNotTakeText();
    internal static string get_PropertyNotImplemented();
    internal static string get_ProvideValue();
    internal static string get_ProvideValueCycle();
    internal static string get_QuoteCharactersOutOfPlace();
    internal static string get_ReferenceIsNull();
    internal static string get_SavedContextSchemaContextMismatch();
    internal static string get_SavedContextSchemaContextNull();
    internal static string get_SchemaContextNotInitialized();
    internal static string get_SchemaContextNull();
    internal static string get_SecurityExceptionForSettingSandboxExternalToTrue();
    internal static string get_SecurityXmlMissingAttribute();
    internal static string get_SecurityXmlUnexpectedTag();
    internal static string get_SecurityXmlUnexpectedValue();
    internal static string get_ServiceTypeAlreadyAdded();
    internal static string get_SetConnectionId();
    internal static string get_SetOnlyProperty();
    internal static string get_SetTargetTypeOnNonAttachableMember();
    internal static string get_SetUriBase();
    internal static string get_SetValue();
    internal static string get_SetXmlInstance();
    internal static string get_SettingPropertiesIsNotAllowed();
    internal static string get_ShouldOverrideMethod();
    internal static string get_ShouldSerializeFailed();
    internal static string get_SimpleFixupsMustHaveOneName();
    internal static string get_StringEmpty();
    internal static string get_StringIsNullOrEmpty();
    internal static string get_TemplateNotCollected();
    internal static string get_ThreadAlreadyStarted();
    internal static string get_ToStringNull();
    internal static string get_TokenizerHelperEmptyToken();
    internal static string get_TokenizerHelperExtraDataEncountered();
    internal static string get_TokenizerHelperMissingEndQuote();
    internal static string get_TokenizerHelperPrematureStringTermination();
    internal static string get_TooManyAttributes();
    internal static string get_TooManyAttributesOnType();
    internal static string get_TooManyTypeConverterAttributes();
    internal static string get_TransitiveForwardRefDirectives();
    internal static string get_TypeConverterFailed();
    internal static string get_TypeConverterFailed2();
    internal static string get_TypeHasInvalidXamlName();
    internal static string get_TypeHasNoContentProperty();
    internal static string get_TypeMetadataCannotChangeAfterUse();
    internal static string get_TypeNameCannotHavePeriod();
    internal static string get_TypeNotFound();
    internal static string get_TypeNotPublic();
    internal static string get_UnclosedQuote();
    internal static string get_UnexpectedClose();
    internal static string get_UnexpectedConstructorArg();
    internal static string get_UnexpectedNodeType();
    internal static string get_UnexpectedParameterType();
    internal static string get_UnexpectedToken();
    internal static string get_UnexpectedTokenAfterME();
    internal static string get_UnhandledBoolTypeBit();
    internal static string get_UnknownAttributeProperty();
    internal static string get_UnknownMember();
    internal static string get_UnknownMemberOnUnknownType();
    internal static string get_UnknownMemberSimple();
    internal static string get_UnknownType();
    internal static string get_UnresolvedForwardReferences();
    internal static string get_UnresolvedNamespace();
    internal static string get_UriNotFound();
    internal static string get_UsableDuringInitializationOnME();
    internal static string get_ValueInArrayIsNull();
    internal static string get_ValueMustBeFollowedByEndMember();
    internal static string get_Visual_ArgumentOutOfRange();
    internal static string get_WhiteSpaceInCollection();
    internal static string get_WhitespaceAfterME();
    internal static string get_WriterIsClosed();
    internal static string get_XCRChoiceAfterFallback();
    internal static string get_XCRChoiceNotFound();
    internal static string get_XCRChoiceOnlyInAC();
    internal static string get_XCRCompatCycle();
    internal static string get_XCRDuplicatePreserve();
    internal static string get_XCRDuplicateProcessContent();
    internal static string get_XCRDuplicateWildcardPreserve();
    internal static string get_XCRDuplicateWildcardProcessContent();
    internal static string get_XCRFallbackOnlyInAC();
    internal static string get_XCRInvalidACChild();
    internal static string get_XCRInvalidAttribInElement();
    internal static string get_XCRInvalidFormat();
    internal static string get_XCRInvalidPreserve();
    internal static string get_XCRInvalidProcessContent();
    internal static string get_XCRInvalidRequiresAttribute();
    internal static string get_XCRInvalidXMLName();
    internal static string get_XCRMultipleFallbackFound();
    internal static string get_XCRMustUnderstandFailed();
    internal static string get_XCRNSPreserveNotIgnorable();
    internal static string get_XCRNSProcessContentNotIgnorable();
    internal static string get_XCRRequiresAttribNotFound();
    internal static string get_XCRUndefinedPrefix();
    internal static string get_XCRUnknownCompatAttrib();
    internal static string get_XCRUnknownCompatElement();
    internal static string get_XClassMustMatchRootInstance();
    internal static string get_XamlFactoryInvalidXamlNode();
    internal static string get_XamlMarkupExtensionWriterCannotSetSchemaContext();
    internal static string get_XamlMarkupExtensionWriterCannotWriteNonstringValue();
    internal static string get_XamlMarkupExtensionWriterDuplicateMember();
    internal static string get_XamlMarkupExtensionWriterInputInvalid();
    internal static string get_XamlTypeNameCannotGetPrefix();
    internal static string get_XamlTypeNameNameIsNullOrEmpty();
    internal static string get_XamlTypeNameNamespaceIsNull();
    internal static string get_XamlXmlWriterCannotWriteNonstringValue();
    internal static string get_XamlXmlWriterDuplicateMember();
    internal static string get_XamlXmlWriterIsObjectFromMemberSetForArraysOrNonCollections();
    internal static string get_XamlXmlWriterNamespaceAlreadyHasPrefixInCurrentScope();
    internal static string get_XamlXmlWriterPrefixAlreadyDefinedInCurrentScope();
    internal static string get_XamlXmlWriterWriteNotSupportedInCurrentState();
    internal static string get_XamlXmlWriterWriteObjectNotSupportedInCurrentState();
    internal static string get_XaslTypePropertiesNotImplemented();
    internal static string get_XmlDataNull();
    internal static string get_XmlValueNotReader();
    internal static string get_XmlnsCompatCycle();
}
[ObsoleteAttribute("This is not used by the XAML parser. Please look at XamlSetMarkupExtensionAttribute.")]
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public AcceptedMarkupExtensionExpressionTypeAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[AttributeUsageAttribute("196")]
public class System.Windows.Markup.AmbientAttribute : Attribute {
}
[TypeForwardedFromAttribute("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ContentPropertyAttribute("Items")]
[MarkupExtensionReturnTypeAttribute("System.Array")]
public class System.Windows.Markup.ArrayExtension : MarkupExtension {
    private ArrayList _arrayList;
    private Type _arrayType;
    [ConstructorArgumentAttribute("type")]
public Type Type { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public IList Items { get; }
    public ArrayExtension(Type arrayType);
    public ArrayExtension(Array elements);
    public void AddChild(object value);
    public void AddText(string text);
    public Type get_Type();
    public void set_Type(Type value);
    public IList get_Items();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[AttributeUsageAttribute("128")]
public class System.Windows.Markup.ConstructorArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ArgumentName>k__BackingField;
    public string ArgumentName { get; }
    public ConstructorArgumentAttribute(string argumentName);
    [CompilerGeneratedAttribute]
public string get_ArgumentName();
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.ContentPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ContentPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.ContentWrapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ContentWrapper>k__BackingField;
    public Type ContentWrapper { get; }
    public object TypeId { get; }
    public ContentWrapperAttribute(Type contentWrapper);
    [CompilerGeneratedAttribute]
public Type get_ContentWrapper();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Windows.Markup.DateTimeOffsetConverter2 : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.DateTimeValueSerializer : ValueSerializer {
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("192")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.DependsOnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public object TypeId { get; }
    public string Name { get; }
    public DependsOnAttribute(string name);
    public virtual object get_TypeId();
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.DictionaryKeyPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public DictionaryKeyPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Windows.Markup.IComponentConnector {
    public abstract virtual void Connect(int connectionId, object target);
    public abstract virtual void InitializeComponent();
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Windows.Markup.INameScope {
    public abstract virtual void RegisterName(string name, object scopedElement);
    public abstract virtual void UnregisterName(string name);
    public abstract virtual object FindName(string name);
}
public interface System.Windows.Markup.INameScopeDictionary {
}
[TypeForwardedFromAttribute("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Windows.Markup.IProvideValueTarget {
    public object TargetObject { get; }
    public object TargetProperty { get; }
    public abstract virtual object get_TargetObject();
    public abstract virtual object get_TargetProperty();
}
public interface System.Windows.Markup.IQueryAmbient {
    public abstract virtual bool IsAmbientPropertyAvailable(string propertyName);
}
[TypeForwardedFromAttribute("PresentationCore, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Windows.Markup.IUriContext {
    public Uri BaseUri { get; public set; }
    public abstract virtual Uri get_BaseUri();
    public abstract virtual void set_BaseUri(Uri value);
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Windows.Markup.IValueSerializerContext {
    public abstract virtual ValueSerializer GetValueSerializerFor(Type type);
    public abstract virtual ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor);
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public interface System.Windows.Markup.IXamlTypeResolver {
    public abstract virtual Type Resolve(string qualifiedTypeName);
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Windows.Markup.MarkupExtension : object {
    public abstract virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("128")]
public class System.Windows.Markup.MarkupExtensionBracketCharactersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private char <OpeningBracket>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ClosingBracket>k__BackingField;
    public char OpeningBracket { get; }
    public char ClosingBracket { get; }
    public MarkupExtensionBracketCharactersAttribute(char openingBracket, char closingBracket);
    [CompilerGeneratedAttribute]
public char get_OpeningBracket();
    [CompilerGeneratedAttribute]
public char get_ClosingBracket();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.MarkupExtensionReturnTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExpressionType>k__BackingField;
    public Type ReturnType { get; }
    [ObsoleteAttribute("This is not used by the XAML parser. Please look at XamlSetMarkupExtensionAttribute.")]
public Type ExpressionType { get; }
    public MarkupExtensionReturnTypeAttribute(Type returnType);
    [ObsoleteAttribute("The expressionType argument is not used by the XAML parser. To specify the expected return type, use MarkupExtensionReturnTypeAttribute(Type). To specify custom handling for expression types, use XamlSetMarkupExtensionAttribute.")]
public MarkupExtensionReturnTypeAttribute(Type returnType, Type expressionType);
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
public Type get_ExpressionType();
}
public abstract class System.Windows.Markup.MemberDefinition : object {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class System.Windows.Markup.NameReferenceConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.NameScopePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; }
    public Type Type { get; }
    public NameScopePropertyAttribute(string name);
    public NameScopePropertyAttribute(string name, Type type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[TypeForwardedFromAttribute("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.Markup.NullExtension : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Windows.Markup.PropertyDefinition : MemberDefinition {
    private IList`1<Attribute> attributes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Modifier>k__BackingField;
    public string Name { get; public set; }
    [TypeConverterAttribute("System.Xaml.Schema.XamlTypeTypeConverter")]
public XamlType Type { get; public set; }
    [DefaultValueAttribute("")]
public string Modifier { get; public set; }
    public IList`1<Attribute> Attributes { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public XamlType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(XamlType value);
    [CompilerGeneratedAttribute]
public string get_Modifier();
    [CompilerGeneratedAttribute]
public void set_Modifier(string value);
    public IList`1<Attribute> get_Attributes();
}
[ContentPropertyAttribute("Name")]
public class System.Windows.Markup.Reference : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ConstructorArgumentAttribute("name")]
public string Name { get; public set; }
    public Reference(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("1")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.RootNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Namespace { get; }
    public RootNamespaceAttribute(string nameSpace);
    [CompilerGeneratedAttribute]
public string get_Namespace();
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.RuntimeNamePropertyAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public RuntimeNamePropertyAttribute(string name);
    public string get_Name();
}
[TypeForwardedFromAttribute("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[TypeConverterAttribute("System.Windows.Markup.StaticExtensionConverter")]
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.Markup.StaticExtension : MarkupExtension {
    private string _member;
    private Type _memberType;
    [ConstructorArgumentAttribute("member")]
public string Member { get; public set; }
    [DefaultValueAttribute("")]
public Type MemberType { get; public set; }
    public StaticExtension(string member);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    private bool GetFieldOrPropertyValue(Type type, string name, Object& value);
    public string get_Member();
    public void set_Member(string value);
    public Type get_MemberType();
    public void set_MemberType(Type value);
}
internal class System.Windows.Markup.StaticExtensionConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.TrimSurroundingWhitespaceAttribute : Attribute {
}
[TypeForwardedFromAttribute("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[TypeConverterAttribute("System.Windows.Markup.TypeExtensionConverter")]
[MarkupExtensionReturnTypeAttribute("System.Type")]
public class System.Windows.Markup.TypeExtension : MarkupExtension {
    private string _typeName;
    private Type _type;
    [DesignerSerializationVisibilityAttribute("0")]
public string TypeName { get; public set; }
    [DefaultValueAttribute("")]
[ConstructorArgumentAttribute("type")]
public Type Type { get; public set; }
    public TypeExtension(string typeName);
    public TypeExtension(Type type);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public string get_TypeName();
    public void set_TypeName(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
internal class System.Windows.Markup.TypeExtensionConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.UidPropertyAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public UidPropertyAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.UsableDuringInitializationAttribute : Attribute {
    private bool _usable;
    public bool Usable { get; }
    public UsableDuringInitializationAttribute(bool usable);
    public bool get_Usable();
}
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Windows.Markup.ValueSerializer : object {
    private static object _valueSerializersLock;
    private static Hashtable _valueSerializers;
    private static ValueSerializer();
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context);
    public static ValueSerializer GetSerializerFor(Type type);
    public static ValueSerializer GetSerializerFor(PropertyDescriptor descriptor);
    public static ValueSerializer GetSerializerFor(Type type, IValueSerializerContext context);
    public static ValueSerializer GetSerializerFor(PropertyDescriptor descriptor, IValueSerializerContext context);
    protected Exception GetConvertToException(object value, Type destinationType);
    protected Exception GetConvertFromException(object value);
    private static void TypeDescriptorRefreshed(RefreshEventArgs args);
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.WhitespaceSignificantCollectionAttribute : Attribute {
}
[AttributeUsageAttribute("132")]
public class System.Windows.Markup.XamlDeferLoadAttribute : Attribute {
    private string _contentTypeName;
    private string _loaderTypeName;
    [CompilerGeneratedAttribute]
private Type <LoaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ContentType>k__BackingField;
    public string LoaderTypeName { get; }
    public string ContentTypeName { get; }
    public Type LoaderType { get; private set; }
    public Type ContentType { get; private set; }
    public XamlDeferLoadAttribute(Type loaderType, Type contentType);
    public XamlDeferLoadAttribute(string loaderType, string contentType);
    public string get_LoaderTypeName();
    public string get_ContentTypeName();
    [CompilerGeneratedAttribute]
public Type get_LoaderType();
    [CompilerGeneratedAttribute]
private void set_LoaderType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(Type value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XamlSetMarkupExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XamlSetMarkupExtensionHandler>k__BackingField;
    public string XamlSetMarkupExtensionHandler { get; private set; }
    public XamlSetMarkupExtensionAttribute(string xamlSetMarkupExtensionHandler);
    [CompilerGeneratedAttribute]
public string get_XamlSetMarkupExtensionHandler();
    [CompilerGeneratedAttribute]
private void set_XamlSetMarkupExtensionHandler(string value);
}
public class System.Windows.Markup.XamlSetMarkupExtensionEventArgs : XamlSetValueEventArgs {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <CurrentType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    public MarkupExtension MarkupExtension { get; }
    public IServiceProvider ServiceProvider { get; private set; }
    internal XamlType CurrentType { get; internal set; }
    internal object TargetObject { get; private set; }
    public XamlSetMarkupExtensionEventArgs(XamlMember member, MarkupExtension value, IServiceProvider serviceProvider);
    internal XamlSetMarkupExtensionEventArgs(XamlMember member, MarkupExtension value, IServiceProvider serviceProvider, object targetObject);
    public MarkupExtension get_MarkupExtension();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    [CompilerGeneratedAttribute]
internal XamlType get_CurrentType();
    [CompilerGeneratedAttribute]
internal void set_CurrentType(XamlType value);
    [CompilerGeneratedAttribute]
internal object get_TargetObject();
    [CompilerGeneratedAttribute]
private void set_TargetObject(object value);
    public virtual void CallBase();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XamlSetTypeConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XamlSetTypeConverterHandler>k__BackingField;
    public string XamlSetTypeConverterHandler { get; private set; }
    public XamlSetTypeConverterAttribute(string xamlSetTypeConverterHandler);
    [CompilerGeneratedAttribute]
public string get_XamlSetTypeConverterHandler();
    [CompilerGeneratedAttribute]
private void set_XamlSetTypeConverterHandler(string value);
}
public class System.Windows.Markup.XamlSetTypeConverterEventArgs : XamlSetValueEventArgs {
    [CompilerGeneratedAttribute]
private TypeConverter <TypeConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeDescriptorContext <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <CurrentType>k__BackingField;
    public TypeConverter TypeConverter { get; private set; }
    public ITypeDescriptorContext ServiceProvider { get; private set; }
    public CultureInfo CultureInfo { get; private set; }
    internal object TargetObject { get; private set; }
    internal XamlType CurrentType { get; internal set; }
    public XamlSetTypeConverterEventArgs(XamlMember member, TypeConverter typeConverter, object value, ITypeDescriptorContext serviceProvider, CultureInfo cultureInfo);
    internal XamlSetTypeConverterEventArgs(XamlMember member, TypeConverter typeConverter, object value, ITypeDescriptorContext serviceProvider, CultureInfo cultureInfo, object targetObject);
    [CompilerGeneratedAttribute]
public TypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
private void set_TypeConverter(TypeConverter value);
    [CompilerGeneratedAttribute]
public ITypeDescriptorContext get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(ITypeDescriptorContext value);
    [CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
private void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
internal object get_TargetObject();
    [CompilerGeneratedAttribute]
private void set_TargetObject(object value);
    [CompilerGeneratedAttribute]
internal XamlType get_CurrentType();
    [CompilerGeneratedAttribute]
internal void set_CurrentType(XamlType value);
    public virtual void CallBase();
}
public class System.Windows.Markup.XamlSetValueEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private XamlMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public XamlMember Member { get; }
    public object Value { get; }
    public bool Handled { get; public set; }
    public XamlSetValueEventArgs(XamlMember member, object value);
    [CompilerGeneratedAttribute]
public XamlMember get_Member();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    public virtual void CallBase();
}
[ContentPropertyAttribute("Text")]
public class System.Windows.Markup.XData : object {
    private XmlReader _reader;
    private string _text;
    public string Text { get; public set; }
    public object XmlReader { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    public object get_XmlReader();
    public void set_XmlReader(object value);
}
[AttributeUsageAttribute("4")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.XmlLangPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public XmlLangPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[AttributeUsageAttribute("1")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.XmlnsCompatibleWithAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <OldNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewNamespace>k__BackingField;
    public string OldNamespace { get; }
    public string NewNamespace { get; }
    public XmlnsCompatibleWithAttribute(string oldNamespace, string newNamespace);
    [CompilerGeneratedAttribute]
public string get_OldNamespace();
    [CompilerGeneratedAttribute]
public string get_NewNamespace();
}
[AttributeUsageAttribute("1")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.XmlnsDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public string XmlNamespace { get; }
    public string ClrNamespace { get; }
    public string AssemblyName { get; public set; }
    public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public string get_ClrNamespace();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
}
[AttributeUsageAttribute("1")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.XmlnsPrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string XmlNamespace { get; }
    public string Prefix { get; }
    public XmlnsPrefixAttribute(string xmlNamespace, string prefix);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public string get_Prefix();
}
public class System.Xaml.AmbientPropertyValue : object {
    private XamlMember _property;
    private object _value;
    public object Value { get; }
    public XamlMember RetrievedProperty { get; }
    public AmbientPropertyValue(XamlMember property, object value);
    public object get_Value();
    public XamlMember get_RetrievedProperty();
}
public class System.Xaml.AttachableMemberIdentifier : object {
    private Type declaringType;
    private string memberName;
    public string MemberName { get; }
    public Type DeclaringType { get; }
    public AttachableMemberIdentifier(Type declaringType, string memberName);
    public string get_MemberName();
    public Type get_DeclaringType();
    public static bool op_Inequality(AttachableMemberIdentifier left, AttachableMemberIdentifier right);
    public static bool op_Equality(AttachableMemberIdentifier left, AttachableMemberIdentifier right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AttachableMemberIdentifier other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class System.Xaml.AttachablePropertyServices : object {
    private static DefaultAttachedPropertyStore attachedProperties;
    private static AttachablePropertyServices();
    public static int GetAttachedPropertyCount(object instance);
    public static void CopyPropertiesTo(object instance, KeyValuePair`2[] array, int index);
    public static bool RemoveProperty(object instance, AttachableMemberIdentifier name);
    public static void SetProperty(object instance, AttachableMemberIdentifier name, object value);
    public static bool TryGetProperty(object instance, AttachableMemberIdentifier name, Object& value);
    public static bool TryGetProperty(object instance, AttachableMemberIdentifier name, T& value);
}
[FlagsAttribute]
internal enum System.Xaml.BoolMemberBits : Enum {
    public int value__;
    public static BoolMemberBits ReadOnly;
    public static BoolMemberBits WriteOnly;
    public static BoolMemberBits Event;
    public static BoolMemberBits Unknown;
    public static BoolMemberBits Ambient;
    public static BoolMemberBits ReadPublic;
    public static BoolMemberBits WritePublic;
    public static BoolMemberBits Default;
    public static BoolMemberBits Directive;
    public static BoolMemberBits AllValid;
}
[FlagsAttribute]
internal enum System.Xaml.BoolTypeBits : Enum {
    public int value__;
    public static BoolTypeBits Constructible;
    public static BoolTypeBits XmlData;
    public static BoolTypeBits MarkupExtension;
    public static BoolTypeBits Nullable;
    public static BoolTypeBits NameScope;
    public static BoolTypeBits ConstructionRequiresArguments;
    public static BoolTypeBits Public;
    public static BoolTypeBits Unknown;
    public static BoolTypeBits TrimSurroundingWhitespace;
    public static BoolTypeBits WhitespaceSignificantCollection;
    public static BoolTypeBits UsableDuringInitialization;
    public static BoolTypeBits Ambient;
    public static BoolTypeBits Default;
    public static BoolTypeBits AllValid;
}
internal static class System.Xaml.CriticalExceptions : object {
    internal static bool IsCriticalException(Exception ex);
    internal static Exception Unwrap(Exception ex);
}
internal enum System.Xaml.DeferringMode : Enum {
    public int value__;
    public static DeferringMode Off;
    public static DeferringMode TemplateStarting;
    public static DeferringMode TemplateDeferring;
    public static DeferringMode TemplateReady;
}
internal class System.Xaml.DeferringWriter : XamlWriter {
    private DeferringMode _mode;
    private bool _handled;
    private ObjectWriterContext _context;
    private XamlNodeList _deferredList;
    private XamlWriter _deferredWriter;
    private IXamlLineInfoConsumer _deferredLineInfoConsumer;
    private int _deferredTreeDepth;
    public bool Handled { get; }
    public DeferringMode Mode { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool ShouldProvideLineInfo { get; }
    public DeferringWriter(ObjectWriterContext context);
    public void Clear();
    public bool get_Handled();
    public DeferringMode get_Mode();
    public XamlNodeList CollectTemplateList();
    public virtual void WriteGetObject();
    public virtual void WriteStartObject(XamlType xamlType);
    private void WriteObject(XamlType xamlType, bool fromMember, string methodName);
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteEndMember();
    public virtual void WriteValue(object value);
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    protected virtual void Dispose(bool disposing);
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual void SetLineInfo(int lineNumber, int linePosition);
    public sealed virtual bool get_ShouldProvideLineInfo();
    private void StartDeferredList();
}
internal class System.Xaml.EventConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    internal static void GetRootObjectAndDelegateType(ITypeDescriptorContext context, Object& rootObject, Type& delegateType);
}
internal class System.Xaml.GCNotificationToken : object {
    private WaitCallback callback;
    private object state;
    private GCNotificationToken(WaitCallback callback, object state);
    protected virtual override void Finalize();
    internal static void RegisterCallback(WaitCallback callback, object state);
}
internal class System.Xaml.HandleAttributeCallback : MulticastDelegate {
    public HandleAttributeCallback(object object, IntPtr method);
    public virtual void Invoke(int elementDepth);
    public virtual IAsyncResult BeginInvoke(int elementDepth, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xaml.HandleElementCallback : MulticastDelegate {
    public HandleElementCallback(object object, IntPtr method);
    public virtual void Invoke(int elementDepth, Boolean& more);
    public virtual IAsyncResult BeginInvoke(int elementDepth, Boolean& more, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& more, IAsyncResult result);
}
public interface System.Xaml.IAmbientProvider {
    public abstract virtual AmbientPropertyValue GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    public abstract virtual object GetFirstAmbientValue(XamlType[] types);
    public abstract virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    public abstract virtual IEnumerable`1<object> GetAllAmbientValues(XamlType[] types);
    public abstract virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
}
public interface System.Xaml.IAttachedPropertyStore {
    public int PropertyCount { get; }
    public abstract virtual int get_PropertyCount();
    public abstract virtual void CopyPropertiesTo(KeyValuePair`2[] array, int index);
    public abstract virtual bool RemoveProperty(AttachableMemberIdentifier attachableMemberIdentifier);
    public abstract virtual void SetProperty(AttachableMemberIdentifier attachableMemberIdentifier, object value);
    public abstract virtual bool TryGetProperty(AttachableMemberIdentifier attachableMemberIdentifier, Object& value);
}
public interface System.Xaml.IDestinationTypeProvider {
    public abstract virtual Type GetDestinationType();
}
public interface System.Xaml.INamespacePrefixLookup {
    public abstract virtual string LookupPrefix(string ns);
}
public interface System.Xaml.IRootObjectProvider {
    public object RootObject { get; }
    public abstract virtual object get_RootObject();
}
internal class System.Xaml.IsXmlNamespaceSupportedCallback : MulticastDelegate {
    public IsXmlNamespaceSupportedCallback(object object, IntPtr method);
    public virtual bool Invoke(string xmlNamespace, String& newXmlNamespace);
    public virtual IAsyncResult BeginInvoke(string xmlNamespace, String& newXmlNamespace, AsyncCallback callback, object object);
    public virtual bool EndInvoke(String& newXmlNamespace, IAsyncResult result);
}
public interface System.Xaml.IXamlIndexingReader {
    public int Count { get; }
    public int CurrentIndex { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual int get_CurrentIndex();
    public abstract virtual void set_CurrentIndex(int value);
}
public interface System.Xaml.IXamlLineInfo {
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool get_HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public interface System.Xaml.IXamlLineInfoConsumer {
    public bool ShouldProvideLineInfo { get; }
    public abstract virtual void SetLineInfo(int lineNumber, int linePosition);
    public abstract virtual bool get_ShouldProvideLineInfo();
}
public interface System.Xaml.IXamlNameProvider {
    public abstract virtual string GetName(object value);
}
public interface System.Xaml.IXamlNameResolver {
    public bool IsFixupTokenAvailable { get; }
    public abstract virtual bool get_IsFixupTokenAvailable();
    public abstract virtual object Resolve(string name);
    public abstract virtual object Resolve(string name, Boolean& isFullyInitialized);
    public abstract virtual object GetFixupToken(IEnumerable`1<string> names);
    public abstract virtual object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnNameScopeInitializationComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnNameScopeInitializationComplete(EventHandler value);
}
public interface System.Xaml.IXamlNamespaceResolver {
    public abstract virtual string GetNamespace(string prefix);
    public abstract virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
}
public interface System.Xaml.IXamlObjectWriterFactory {
    public abstract virtual XamlObjectWriterSettings GetParentSettings();
    public abstract virtual XamlObjectWriter GetXamlObjectWriter(XamlObjectWriterSettings settings);
}
public interface System.Xaml.IXamlSchemaContextProvider {
    public XamlSchemaContext SchemaContext { get; }
    public abstract virtual XamlSchemaContext get_SchemaContext();
}
internal class System.Xaml.LineInfo : object {
    private int _lineNumber;
    private int _linePosition;
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal LineInfo(int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
}
internal static class System.Xaml.LooseTypeExtensions : object {
    private static string WindowsBase;
    private static Byte[] WindowsBaseToken;
    private static LooseTypeExtensions();
    internal static bool AssemblyQualifiedNameEquals(Type t1, Type t2);
    private static bool IsWindowsBaseToSystemXamlComparison(Assembly a1, Assembly a2, AssemblyName name1, AssemblyName name2);
    internal static bool IsAssemblyQualifiedNameAssignableFrom(Type t1, Type t2);
    private static bool LooselyImplementInterface(Type t, Type interfaceType);
    private static bool IsLooseSubClassOf(Type t1, Type t2);
}
internal class System.Xaml.MS.Impl.ArrayItemList`1 : FrugalListBase`1<T> {
    private static int MINSIZE;
    private static int GROWTH;
    private static int LARGEGROWTH;
    private T[] _entries;
    public int Capacity { get; }
    public ArrayItemList`1(int size);
    public ArrayItemList`1(ICollection collection);
    public ArrayItemList`1(ICollection`1<T> collection);
    public virtual int get_Capacity();
    public virtual FrugalListStoreState Add(T value);
    public virtual void Clear();
    public virtual bool Contains(T value);
    public virtual int IndexOf(T value);
    public virtual void Insert(int index, T value);
    public virtual void SetAt(int index, T value);
    public virtual bool Remove(T value);
    public virtual void RemoveAt(int index);
    public virtual T EntryAt(int index);
    public virtual void Promote(FrugalListBase`1<T> oldList);
    public void Promote(SixItemList`1<T> oldList);
    public void Promote(ArrayItemList`1<T> oldList);
    public virtual T[] ToArray();
    public virtual void CopyTo(T[] array, int index);
    public virtual object Clone();
    private void SetCount(int value);
    public virtual Compacter<T> NewCompacter(int newCount);
}
[DebuggerDisplayAttribute("{ClrNamespace} {Assembly.FullName}")]
internal class System.Xaml.MS.Impl.AssemblyNamespacePair : object {
    private WeakReference _assembly;
    private string _clrNamespace;
    public Assembly Assembly { get; }
    public string ClrNamespace { get; }
    public AssemblyNamespacePair(Assembly asm, string clrNamespace);
    public Assembly get_Assembly();
    public string get_ClrNamespace();
}
internal abstract class System.Xaml.MS.Impl.FrugalListBase`1 : object {
    protected int _count;
    public int Count { get; }
    public int Capacity { get; }
    public int get_Count();
    internal void TrustedSetCount(int newCount);
    public abstract virtual int get_Capacity();
    public abstract virtual FrugalListStoreState Add(T value);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(T value);
    public abstract virtual int IndexOf(T value);
    public abstract virtual void Insert(int index, T value);
    public abstract virtual void SetAt(int index, T value);
    public abstract virtual bool Remove(T value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual T EntryAt(int index);
    public abstract virtual void Promote(FrugalListBase`1<T> newList);
    public abstract virtual T[] ToArray();
    public abstract virtual void CopyTo(T[] array, int index);
    public abstract virtual object Clone();
    public virtual Compacter<T> NewCompacter(int newCount);
}
internal enum System.Xaml.MS.Impl.FrugalListStoreState : Enum {
    public int value__;
    public static FrugalListStoreState Success;
    public static FrugalListStoreState SingleItemList;
    public static FrugalListStoreState ThreeItemList;
    public static FrugalListStoreState SixItemList;
    public static FrugalListStoreState Array;
}
[DefaultMemberAttribute("Item")]
internal class System.Xaml.MS.Impl.FrugalObjectList`1 : object {
    internal FrugalListBase`1<T> _listStore;
    public int Capacity { get; public set; }
    public int Count { get; }
    public T Item { get; public set; }
    public FrugalObjectList`1(int size);
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Count();
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public int Add(T value);
    public void Clear();
    public bool Contains(T value);
    public int IndexOf(T value);
    public void Insert(int index, T value);
    public bool Remove(T value);
    public void RemoveAt(int index);
    public void EnsureIndex(int index);
    public T[] ToArray();
    public void CopyTo(T[] array, int index);
    public FrugalObjectList`1<T> Clone();
}
[DefaultMemberAttribute("Item")]
internal class System.Xaml.MS.Impl.FrugalStructList`1 : ValueType {
    internal FrugalListBase`1<T> _listStore;
    public int Capacity { get; public set; }
    public int Count { get; }
    public T Item { get; public set; }
    public FrugalStructList`1(int size);
    public FrugalStructList`1(ICollection collection);
    public FrugalStructList`1(ICollection`1<T> collection);
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Count();
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public int Add(T value);
    public void Clear();
    public bool Contains(T value);
    public int IndexOf(T value);
    public void Insert(int index, T value);
    public bool Remove(T value);
    public void RemoveAt(int index);
    public void EnsureIndex(int index);
    public T[] ToArray();
    public void CopyTo(T[] array, int index);
    public FrugalStructList`1<T> Clone();
}
internal static class System.Xaml.MS.Impl.KnownStrings : object {
    public static string XmlPrefix;
    public static string XmlNsPrefix;
    public static string Preserve;
    public static string Default;
    public static string UriClrNamespace;
    public static string UriAssembly;
    public static string Get;
    public static string Set;
    public static string Add;
    public static string Handler;
    public static string Extension;
    public static string IsReadOnly;
    public static string ShouldSerialize;
    public static char GraveQuote;
    public static char NestedTypeDelimiter;
    public static string GetEnumerator;
    public static string NullableOfT;
    public static string LocalPrefix;
    public static string DefaultPrefix;
    public static string ReferenceName;
    public static Char[] WhitespaceChars;
    public static char SpaceChar;
    public static char TabChar;
    public static char NewlineChar;
    public static char ReturnChar;
    public static string CreateDelegateHelper;
    public static string CreateDelegate;
    public static string InvokeMember;
    public static string GetTypeFromHandle;
    public static string Member;
    public static string Property;
    private static KnownStrings();
}
internal static class System.Xaml.MS.Impl.KS : object {
    public static bool Eq(string a, string b);
    public static bool Eq(ReadOnlySpan`1<char> a, ReadOnlySpan`1<char> b);
    public static int IndexOf(string src, string chars);
    public static int IndexOf(string src, char ch);
    public static bool EndsWith(string src, string target);
    public static bool StartsWith(string src, string target);
    public static string Fmt(string formatString, Object[] otherArgs);
}
internal class System.Xaml.MS.Impl.PositionalParameterDescriptor : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasText>k__BackingField;
    public object Value { get; public set; }
    public bool WasText { get; public set; }
    public PositionalParameterDescriptor(object value, bool wasText);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_WasText();
    [CompilerGeneratedAttribute]
public void set_WasText(bool value);
}
internal class System.Xaml.MS.Impl.SingleItemList`1 : FrugalListBase`1<T> {
    private static int SIZE;
    private T _loneEntry;
    public int Capacity { get; }
    public virtual int get_Capacity();
    public virtual FrugalListStoreState Add(T value);
    public virtual void Clear();
    public virtual bool Contains(T value);
    public virtual int IndexOf(T value);
    public virtual void Insert(int index, T value);
    public virtual void SetAt(int index, T value);
    public virtual bool Remove(T value);
    public virtual void RemoveAt(int index);
    public virtual T EntryAt(int index);
    public virtual void Promote(FrugalListBase`1<T> oldList);
    public void Promote(SingleItemList`1<T> oldList);
    public virtual T[] ToArray();
    public virtual void CopyTo(T[] array, int index);
    public virtual object Clone();
    private void SetCount(int value);
}
internal class System.Xaml.MS.Impl.SixItemList`1 : FrugalListBase`1<T> {
    private static int SIZE;
    private T _entry0;
    private T _entry1;
    private T _entry2;
    private T _entry3;
    private T _entry4;
    private T _entry5;
    public int Capacity { get; }
    public virtual int get_Capacity();
    public virtual FrugalListStoreState Add(T value);
    public virtual void Clear();
    public virtual bool Contains(T value);
    public virtual int IndexOf(T value);
    public virtual void Insert(int index, T value);
    public virtual void SetAt(int index, T value);
    public virtual bool Remove(T value);
    public virtual void RemoveAt(int index);
    public virtual T EntryAt(int index);
    public virtual void Promote(FrugalListBase`1<T> oldList);
    public void Promote(ThreeItemList`1<T> oldList);
    public void Promote(SixItemList`1<T> oldList);
    public virtual T[] ToArray();
    public virtual void CopyTo(T[] array, int index);
    public virtual object Clone();
    private void SetCount(int value);
}
internal class System.Xaml.MS.Impl.ThreeItemList`1 : FrugalListBase`1<T> {
    private static int SIZE;
    private T _entry0;
    private T _entry1;
    private T _entry2;
    public int Capacity { get; }
    public virtual int get_Capacity();
    public virtual FrugalListStoreState Add(T value);
    public virtual void Clear();
    public virtual bool Contains(T value);
    public virtual int IndexOf(T value);
    public virtual void Insert(int index, T value);
    public virtual void SetAt(int index, T value);
    public virtual bool Remove(T value);
    public virtual void RemoveAt(int index);
    public virtual T EntryAt(int index);
    public virtual void Promote(FrugalListBase`1<T> oldList);
    public void Promote(SingleItemList`1<T> oldList);
    public void Promote(ThreeItemList`1<T> oldList);
    public virtual T[] ToArray();
    public virtual void CopyTo(T[] array, int index);
    public virtual object Clone();
    private void SetCount(int value);
}
internal class System.Xaml.MS.Impl.XmlNsInfo : object {
    private IList`1<XmlNsDefinition> _nsDefs;
    private ConcurrentDictionary`2<string, IList`1<string>> _clrToXmlNs;
    private ICollection`1<AssemblyName> _internalsVisibleTo;
    private Dictionary`2<string, string> _oldToNewNs;
    private Dictionary`2<string, string> _prefixes;
    private string _rootNamespace;
    private WeakReference _assembly;
    private IList`1<CustomAttributeData> _attributeData;
    private bool _fullyQualifyAssemblyName;
    internal Assembly Assembly { get; }
    internal IList`1<XmlNsDefinition> NsDefs { get; }
    internal ConcurrentDictionary`2<string, IList`1<string>> ClrToXmlNs { get; }
    internal ICollection`1<AssemblyName> InternalsVisibleTo { get; }
    internal Dictionary`2<string, string> OldToNewNs { get; }
    internal Dictionary`2<string, string> Prefixes { get; }
    internal string RootNamespace { get; }
    internal XmlNsInfo(Assembly assembly, bool fullyQualifyAssemblyName);
    internal Assembly get_Assembly();
    internal IList`1<XmlNsDefinition> get_NsDefs();
    internal ConcurrentDictionary`2<string, IList`1<string>> get_ClrToXmlNs();
    internal ICollection`1<AssemblyName> get_InternalsVisibleTo();
    internal Dictionary`2<string, string> get_OldToNewNs();
    internal Dictionary`2<string, string> get_Prefixes();
    internal string get_RootNamespace();
    private void EnsureReflectionOnlyAttributeData();
    internal static string GetPreferredPrefix(string prefix1, string prefix2);
    private IList`1<XmlNsDefinition> LoadNsDefs();
    private void LoadNsDefHelper(IList`1<XmlNsDefinition> result, string xmlns, string clrns, Assembly assembly);
    private ConcurrentDictionary`2<string, IList`1<string>> LoadClrToXmlNs();
    private ICollection`1<AssemblyName> LoadInternalsVisibleTo();
    private void LoadInternalsVisibleToHelper(List`1<AssemblyName> result, string assemblyName, Assembly assembly);
    private Dictionary`2<string, string> LoadOldToNewNs();
    private void LoadOldToNewNsHelper(Dictionary`2<string, string> result, string oldns, string newns, Assembly assembly);
    private Dictionary`2<string, string> LoadPrefixes();
    private void LoadPrefixesHelper(Dictionary`2<string, string> result, string xmlns, string prefix, Assembly assembly);
    private string LoadRootNamespace();
    private void MakeListsImmutable(IDictionary`2<string, IList`1<string>> dict);
}
[DefaultMemberAttribute("Item")]
internal class System.Xaml.NameScope : object {
    private HybridDictionary _nameMap;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public sealed virtual void RegisterName(string name, object scopedElement);
    public sealed virtual void UnregisterName(string name);
    public sealed virtual object FindName(string name);
    private IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
}
internal class System.Xaml.NameScopeDictionary : object {
    private HybridDictionary _nameMap;
    private INameScope _underlyingNameScope;
    private FrugalObjectList`1<string> _names;
    internal INameScope UnderlyingNameScope { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    private object System.Collections.Generic.IDictionary<System.String,System.Object>.Item { get; private set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get; }
    public NameScopeDictionary(INameScope underlyingNameScope);
    public sealed virtual void RegisterName(string name, object scopedElement);
    public sealed virtual void UnregisterName(string name);
    public sealed virtual object FindName(string name);
    internal INameScope get_UnderlyingNameScope();
    private IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override object System.Collections.Generic.IDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.set_Item(string key, object value);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values();
}
[DebuggerDisplayAttribute("Prefix={Prefix} Namespace={Namespace}")]
public class System.Xaml.NamespaceDeclaration : object {
    private string prefix;
    private string ns;
    public string Prefix { get; }
    public string Namespace { get; }
    public NamespaceDeclaration(string ns, string prefix);
    public string get_Prefix();
    public string get_Namespace();
}
internal static class System.Xaml.NameValidationHelper : object {
    internal static bool IsValidIdentifierName(string name);
}
internal class System.Xaml.NullableReference`1 : ValueType {
    private static object s_NullSentinel;
    private static object s_NotPresentSentinel;
    private object _value;
    public bool IsNotPresent { get; public set; }
    public bool IsSet { get; }
    public bool IsSetVolatile { get; }
    public T Value { get; public set; }
    private static NullableReference`1();
    public bool get_IsNotPresent();
    public void set_IsNotPresent(bool value);
    public bool get_IsSet();
    public bool get_IsSetVolatile();
    public T get_Value();
    public void set_Value(T value);
    public void SetIfNull(T value);
    public void SetVolatile(T value);
}
internal abstract class System.Xaml.ReaderBaseDelegate : XamlReader {
    protected XamlSchemaContext _schemaContext;
    protected XamlNode _currentNode;
    protected LineInfo _currentLineInfo;
    protected bool _hasLineInfo;
    public XamlNodeType NodeType { get; }
    public bool IsEof { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlMember Member { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool HasLineInfo { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    protected ReaderBaseDelegate(XamlSchemaContext schemaContext);
    public virtual XamlNodeType get_NodeType();
    public virtual bool get_IsEof();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual XamlMember get_Member();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual bool get_HasLineInfo();
    public void set_HasLineInfo(bool value);
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
internal class System.Xaml.ReaderDelegate : ReaderBaseDelegate {
    private XamlNodeNextDelegate _nextDelegate;
    public ReaderDelegate(XamlSchemaContext schemaContext, XamlNodeNextDelegate next, bool hasLineInfo);
    public virtual bool Read();
}
internal class System.Xaml.ReaderMultiIndexDelegate : ReaderBaseDelegate {
    private static XamlNode s_StartOfStream;
    private static XamlNode s_EndOfStream;
    private XamlNodeIndexDelegate _indexDelegate;
    private int _count;
    private int _idx;
    public int Count { get; }
    public int CurrentIndex { get; public set; }
    public ReaderMultiIndexDelegate(XamlSchemaContext schemaContext, XamlNodeIndexDelegate indexDelegate, int count, bool hasLineInfo);
    private static ReaderMultiIndexDelegate();
    public virtual bool Read();
    public sealed virtual int get_Count();
    public sealed virtual int get_CurrentIndex();
    public sealed virtual void set_CurrentIndex(int value);
}
internal static class System.Xaml.ReflectionHelper : object {
    private static string SystemReflectionAssemblyName;
    internal static string MscorlibReflectionAssemblyName;
    private static Hashtable _loadedAssembliesHash;
    private static ReflectionHelper();
    internal static Type GetQualifiedType(string typeName);
    internal static bool IsNullableType(Type type);
    internal static bool IsInternalType(Type type);
    internal static bool IsPublicType(Type type);
    internal static Type GetFrameworkType(string assemblyName, Type type);
    internal static Type GetSystemType(Type type);
    internal static string GetTypeConverterAttributeData(Type type, Type& converterType);
    internal static string GetTypeConverterAttributeData(MemberInfo mi, Type& converterType);
    private static string GetCustomAttributeData(MemberInfo mi, Type attrType, Type& typeValue);
    private static string GetCustomAttributeData(IList`1<CustomAttributeData> list, Type attrType, Type& typeValue, bool allowTypeAlso, bool allowZeroArgs);
    internal static string GetCustomAttributeData(Type t, Type attrType, bool allowTypeAlso, Boolean& attributeDataFound, Type& typeValue);
    private static string GetCustomAttributeData(CustomAttributeData cad, Type attrType, Type& typeValue, bool allowTypeAlso, bool noArgs, bool zeroArgsAllowed);
    internal static void ResetCacheForAssembly(string assemblyName);
    internal static Assembly LoadAssembly(string assemblyName, string assemblyPath);
    internal static Assembly GetAlreadyLoadedAssembly(string assemblyNameLookup);
    private static Assembly LoadAssemblyHelper(string assemblyGivenName, string assemblyPath);
}
internal class System.Xaml.Replacements.DateTimeConverter2 : TypeConverter {
    private DateTimeValueSerializer _dateTimeValueSerializer;
    private IValueSerializerContext _valueSerializerContext;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Xaml.Replacements.DateTimeValueSerializerContext : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public sealed virtual ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor);
    public sealed virtual ValueSerializer GetValueSerializerFor(Type type);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual object GetService(Type serviceType);
}
internal static class System.Xaml.Replacements.StringHelpers : object {
    public static String[] SplitTypeList(string typeList);
}
internal class System.Xaml.Replacements.TypeListConverter : TypeConverter {
    private static TypeTypeConverter typeTypeConverter;
    private static TypeListConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class System.Xaml.Replacements.TypeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    private static string ConvertTypeToString(ITypeDescriptorContext context, Type type);
    private static TService GetService(ITypeDescriptorContext context);
}
internal class System.Xaml.Replacements.TypeUriConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
internal static class System.Xaml.SafeSecurityHelper : object {
    private static Dictionary`2<object, AssemblyName> _assemblies;
    private static object syncObject;
    private static bool _isGCCallbackPending;
    private static WaitCallback _cleanupCollectedAssemblies;
    internal static string IMAGE;
    private static SafeSecurityHelper();
    internal static Assembly GetLoadedAssembly(AssemblyName assemblyName);
    private static AssemblyName GetAssemblyName(Assembly assembly);
    private static void CleanupCollectedAssemblies(object state);
    internal static bool IsSameKeyToken(Byte[] reqKeyToken, Byte[] curKeyToken);
}
internal enum System.Xaml.SavedContextType : Enum {
    public int value__;
    public static SavedContextType Template;
    public static SavedContextType ReparseValue;
    public static SavedContextType ReparseMarkupExtension;
}
[FlagsAttribute]
public enum System.Xaml.Schema.AllowedMemberLocations : Enum {
    public int value__;
    public static AllowedMemberLocations None;
    public static AllowedMemberLocations Attribute;
    public static AllowedMemberLocations MemberElement;
    public static AllowedMemberLocations Any;
}
internal static class System.Xaml.Schema.BuiltInValueConverter : object {
    private static XamlValueConverter`1<TypeConverter> s_String;
    private static XamlValueConverter`1<TypeConverter> s_Object;
    private static XamlValueConverter`1<TypeConverter> s_Int32;
    private static XamlValueConverter`1<TypeConverter> s_Int16;
    private static XamlValueConverter`1<TypeConverter> s_Int64;
    private static XamlValueConverter`1<TypeConverter> s_UInt32;
    private static XamlValueConverter`1<TypeConverter> s_UInt16;
    private static XamlValueConverter`1<TypeConverter> s_UInt64;
    private static XamlValueConverter`1<TypeConverter> s_Boolean;
    private static XamlValueConverter`1<TypeConverter> s_Double;
    private static XamlValueConverter`1<TypeConverter> s_Single;
    private static XamlValueConverter`1<TypeConverter> s_Byte;
    private static XamlValueConverter`1<TypeConverter> s_SByte;
    private static XamlValueConverter`1<TypeConverter> s_Char;
    private static XamlValueConverter`1<TypeConverter> s_Decimal;
    private static XamlValueConverter`1<TypeConverter> s_TimeSpan;
    private static XamlValueConverter`1<TypeConverter> s_Guid;
    private static XamlValueConverter`1<TypeConverter> s_Type;
    private static XamlValueConverter`1<TypeConverter> s_TypeList;
    private static XamlValueConverter`1<TypeConverter> s_DateTime;
    private static XamlValueConverter`1<TypeConverter> s_DateTimeOffset;
    private static XamlValueConverter`1<TypeConverter> s_CultureInfo;
    private static XamlValueConverter`1<ValueSerializer> s_StringSerializer;
    private static XamlValueConverter`1<TypeConverter> s_Delegate;
    private static XamlValueConverter`1<TypeConverter> s_Uri;
    internal static XamlValueConverter`1<TypeConverter> Int32 { get; }
    internal static XamlValueConverter`1<TypeConverter> String { get; }
    internal static XamlValueConverter`1<TypeConverter> Object { get; }
    internal static XamlValueConverter`1<TypeConverter> Event { get; }
    internal static XamlValueConverter`1<TypeConverter> get_Int32();
    internal static XamlValueConverter`1<TypeConverter> get_String();
    internal static XamlValueConverter`1<TypeConverter> get_Object();
    internal static XamlValueConverter`1<TypeConverter> get_Event();
    internal static XamlValueConverter`1<TypeConverter> GetTypeConverter(Type targetType);
    internal static XamlValueConverter`1<ValueSerializer> GetValueSerializer(Type targetType);
}
internal class System.Xaml.Schema.BuiltInValueConverter`1 : XamlValueConverter`1<TConverterBase> {
    private Func`1<TConverterBase> _factory;
    internal bool IsPublic { get; }
    internal BuiltInValueConverter`1(Type converterType, Func`1<TConverterBase> factory);
    internal virtual bool get_IsPublic();
    protected virtual TConverterBase CreateInstance();
}
internal static class System.Xaml.Schema.ClrNamespaceUriParser : object {
    public static string GetUri(string clrNs, string assemblyName);
    public static bool TryParseUri(string uriInput, String& clrNs, String& assemblyName);
}
internal static class System.Xaml.Schema.CollectionReflector : object {
    private static Type[] s_typeOfObjectArray;
    private static Type[] s_typeOfTwoObjectArray;
    private static MethodInfo s_getEnumeratorMethod;
    private static MethodInfo s_listAddMethod;
    private static MethodInfo s_dictionaryAddMethod;
    private static Type[] TypeOfObjectArray { get; }
    private static Type[] TypeOfTwoObjectArray { get; }
    private static MethodInfo IEnumerableGetEnumeratorMethod { get; }
    private static MethodInfo IListAddMethod { get; }
    private static MethodInfo IDictionaryAddMethod { get; }
    internal static XamlCollectionKind LookupCollectionKind(Type type, MethodInfo& addMethod);
    internal static MethodInfo LookupAddMethod(Type type, XamlCollectionKind collectionKind);
    private static bool TryGetICollectionAdder(Type type, MethodInfo& addMethod);
    private static bool TryGetCollectionAdder(Type type, bool mayBeICollection, MethodInfo& addMethod);
    private static bool TryGetIDictionaryAdder(Type type, MethodInfo& addMethod);
    private static bool TryGetDictionaryAdder(Type type, bool mayBeIDictionary, MethodInfo& addMethod);
    internal static MethodInfo GetAddMethod(Type type, Type contentType);
    internal static MethodInfo GetEnumeratorMethod(Type type);
    internal static MethodInfo GetIsReadOnlyMethod(Type collectionType, Type itemType);
    private static MethodInfo LookupEnumeratorMethod(Type type);
    private static Type GetGenericInterface(Type type, Type interfaceType, Boolean& hasMultiple);
    private static MethodInfo GetAddMethod(Type type, int paramCount, Boolean& hasMoreThanOne);
    private static BindingFlags GetBindingFlags(Type type);
    private static MethodInfo GetMethod(Type type, string name, Type[] argTypes);
    private static MethodInfo GetPublicMethod(Type type, string name, int argCount);
    private static Type[] get_TypeOfObjectArray();
    private static Type[] get_TypeOfTwoObjectArray();
    private static MethodInfo get_IEnumerableGetEnumeratorMethod();
    private static MethodInfo get_IListAddMethod();
    private static MethodInfo get_IDictionaryAddMethod();
}
internal class System.Xaml.Schema.MemberReflector : Reflector {
    private static DesignerSerializationVisibility VisibilityInvalid;
    private static DesignerSerializationVisibility VisibilityNone;
    private static MemberReflector s_UnknownReflector;
    private NullableReference`1<string> _constructorArgument;
    private NullableReference`1<XamlValueConverter`1<XamlDeferringLoader>> _deferringLoader;
    private NullableReference`1<object> _defaultValue;
    private NullableReference`1<MethodInfo> _getter;
    private NullableReference`1<MethodInfo> _setter;
    private NullableReference`1<XamlValueConverter`1<TypeConverter>> _typeConverter;
    private NullableReference`1<XamlValueConverter`1<ValueSerializer>> _valueSerializer;
    private DesignerSerializationVisibility _designerSerializationVisibility;
    private int _memberBits;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<char, char> <MarkupExtensionBracketCharactersArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MarkupExtensionBracketCharactersArgumentIsSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XamlMember> <DependsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMemberInvoker <Invoker>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <UnderlyingMember>k__BackingField;
    internal static MemberReflector UnknownReflector { get; }
    internal string ConstructorArgument { get; internal set; }
    internal bool ConstructorArgumentIsSet { get; }
    internal IReadOnlyDictionary`2<char, char> MarkupExtensionBracketCharactersArgument { get; internal set; }
    internal bool MarkupExtensionBracketCharactersArgumentIsSet { get; internal set; }
    internal object DefaultValue { get; internal set; }
    internal bool DefaultValueIsNotPresent { get; internal set; }
    internal bool DefaultValueIsSet { get; }
    internal XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; internal set; }
    internal bool DeferringLoaderIsSet { get; }
    internal IList`1<XamlMember> DependsOn { get; internal set; }
    internal Nullable`1<DesignerSerializationVisibility> SerializationVisibility { get; internal set; }
    internal bool DesignerSerializationVisibilityIsSet { get; }
    internal MethodInfo Getter { get; internal set; }
    internal bool GetterIsSet { get; }
    internal XamlMemberInvoker Invoker { get; internal set; }
    internal bool IsUnknown { get; }
    internal MethodInfo Setter { get; internal set; }
    internal bool SetterIsSet { get; }
    internal XamlType Type { get; internal set; }
    internal XamlType TargetType { get; internal set; }
    internal XamlValueConverter`1<TypeConverter> TypeConverter { get; internal set; }
    internal bool TypeConverterIsSet { get; }
    internal MemberInfo UnderlyingMember { get; internal set; }
    internal XamlValueConverter`1<ValueSerializer> ValueSerializer { get; internal set; }
    internal bool ValueSerializerIsSet { get; }
    protected MemberInfo Member { get; }
    internal MemberReflector(bool isEvent);
    internal MemberReflector(MethodInfo getter, MethodInfo setter, bool isEvent);
    internal MemberReflector(XamlType type, XamlValueConverter`1<TypeConverter> typeConverter);
    internal static MemberReflector get_UnknownReflector();
    internal string get_ConstructorArgument();
    internal void set_ConstructorArgument(string value);
    internal bool get_ConstructorArgumentIsSet();
    [CompilerGeneratedAttribute]
internal IReadOnlyDictionary`2<char, char> get_MarkupExtensionBracketCharactersArgument();
    [CompilerGeneratedAttribute]
internal void set_MarkupExtensionBracketCharactersArgument(IReadOnlyDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
internal bool get_MarkupExtensionBracketCharactersArgumentIsSet();
    [CompilerGeneratedAttribute]
internal void set_MarkupExtensionBracketCharactersArgumentIsSet(bool value);
    internal object get_DefaultValue();
    internal void set_DefaultValue(object value);
    internal bool get_DefaultValueIsNotPresent();
    internal void set_DefaultValueIsNotPresent(bool value);
    internal bool get_DefaultValueIsSet();
    internal XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    internal void set_DeferringLoader(XamlValueConverter`1<XamlDeferringLoader> value);
    internal bool get_DeferringLoaderIsSet();
    [CompilerGeneratedAttribute]
internal IList`1<XamlMember> get_DependsOn();
    [CompilerGeneratedAttribute]
internal void set_DependsOn(IList`1<XamlMember> value);
    internal Nullable`1<DesignerSerializationVisibility> get_SerializationVisibility();
    internal void set_SerializationVisibility(Nullable`1<DesignerSerializationVisibility> value);
    internal bool get_DesignerSerializationVisibilityIsSet();
    internal MethodInfo get_Getter();
    internal void set_Getter(MethodInfo value);
    internal bool get_GetterIsSet();
    [CompilerGeneratedAttribute]
internal XamlMemberInvoker get_Invoker();
    [CompilerGeneratedAttribute]
internal void set_Invoker(XamlMemberInvoker value);
    internal bool get_IsUnknown();
    internal MethodInfo get_Setter();
    internal void set_Setter(MethodInfo value);
    internal bool get_SetterIsSet();
    [CompilerGeneratedAttribute]
internal XamlType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(XamlType value);
    [CompilerGeneratedAttribute]
internal XamlType get_TargetType();
    [CompilerGeneratedAttribute]
internal void set_TargetType(XamlType value);
    internal XamlValueConverter`1<TypeConverter> get_TypeConverter();
    internal void set_TypeConverter(XamlValueConverter`1<TypeConverter> value);
    internal bool get_TypeConverterIsSet();
    [CompilerGeneratedAttribute]
internal MemberInfo get_UnderlyingMember();
    [CompilerGeneratedAttribute]
internal void set_UnderlyingMember(MemberInfo value);
    internal XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    internal void set_ValueSerializer(XamlValueConverter`1<ValueSerializer> value);
    internal bool get_ValueSerializerIsSet();
    internal Nullable`1<bool> GetFlag(BoolMemberBits flag);
    internal void SetFlag(BoolMemberBits flag, bool value);
    internal static bool IsInternalVisibleTo(MethodInfo method, Assembly accessingAssembly, XamlSchemaContext schemaContext);
    internal static bool IsProtectedVisibleTo(MethodInfo method, Type derivedType, XamlSchemaContext schemaContext);
    internal static bool GenericArgumentsAreVisibleTo(MethodInfo method, Assembly accessingAssembly, XamlSchemaContext schemaContext);
    protected virtual MemberInfo get_Member();
}
internal class System.Xaml.Schema.ReferenceEqualityTuple`2 : Tuple`2<T1, T2> {
    public ReferenceEqualityTuple`2(T1 item1, T2 item2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Xaml.Schema.ReferenceEqualityTuple`3 : Tuple`3<T1, T2, T3> {
    public ReferenceEqualityTuple`3(T1 item1, T2 item2, T3 item3);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class System.Xaml.Schema.Reflector : object {
    protected NullableReference`1<ICustomAttributeProvider> _attributeProvider;
    protected IList`1<CustomAttributeData> _attributeData;
    internal ICustomAttributeProvider CustomAttributeProvider { get; internal set; }
    internal bool CustomAttributeProviderIsSet { get; }
    internal bool CustomAttributeProviderIsSetVolatile { get; }
    protected MemberInfo Member { get; }
    internal ICustomAttributeProvider get_CustomAttributeProvider();
    internal void set_CustomAttributeProvider(ICustomAttributeProvider value);
    internal void SetCustomAttributeProviderVolatile(ICustomAttributeProvider value);
    internal bool get_CustomAttributeProviderIsSet();
    internal bool get_CustomAttributeProviderIsSetVolatile();
    protected abstract virtual MemberInfo get_Member();
    public bool IsAttributePresent(Type attributeType);
    public string GetAttributeString(Type attributeType, Boolean& checkedInherited);
    public IReadOnlyDictionary`2<char, char> GetBracketCharacterAttributes(Type attributeType);
    public Nullable`1<T> GetAttributeValue(Type attributeType);
    public Type GetAttributeType(Type attributeType);
    public Type[] GetAttributeTypes(Type attributeType, int count);
    public List`1<T> GetAllAttributeContents(Type attributeType);
    protected static Nullable`1<bool> GetFlag(int bitMask, int bitToCheck);
    protected static int GetValidMask(int flagMask);
    protected static void SetFlag(Int32& bitMask, int bitToSet, bool value);
    protected static void SetBit(Int32& flags, int mask);
    private static bool TypesAreEqual(Type userType, Type builtInType);
    private ReadOnlyDictionary`2<char, char> TokenizeBracketCharacters(Type attributeType);
    private Type ExtractType(CustomAttributeData cad);
    private Type[] ExtractTypes(CustomAttributeData cad, int count);
    private Type ExtractType(CustomAttributeTypedArgument arg);
    private T Extract(CustomAttributeData cad);
    protected void EnsureAttributeData();
    private CustomAttributeData GetAttribute(Type attributeType);
    private void GetAttributes(Type attributeType, IList`1<CustomAttributeData> cads);
    protected void ThrowInvalidMetadata(CustomAttributeData cad, int expectedCount, Type expectedType);
}
internal static class System.Xaml.Schema.SafeReflectionInvoker : object {
    private static Assembly SystemXaml;
    private static SafeReflectionInvoker();
    public static bool IsInSystemXaml(Type type);
    internal static bool IsSystemXamlNonPublic(MethodInfo method);
}
public enum System.Xaml.Schema.ShouldSerializeResult : Enum {
    public int value__;
    public static ShouldSerializeResult Default;
    public static ShouldSerializeResult True;
    public static ShouldSerializeResult False;
}
internal class System.Xaml.Schema.TypeReflector : Reflector {
    private static XamlCollectionKind XamlCollectionKindInvalid;
    private static BindingFlags AllProperties_BF;
    private static BindingFlags AttachableProperties_BF;
    private static TypeReflector s_UnknownReflector;
    private ThreadSafeDictionary`2<string, XamlMember> _nonAttachableMemberCache;
    private ThreadSafeDictionary`2<string, XamlMember> _attachableMemberCache;
    private int _boolTypeBits;
    private ThreadSafeDictionary`2<int, IList`1<XamlType>> _positionalParameterTypes;
    private ConcurrentDictionary`2<XamlDirective, XamlMember> _aliasedProperties;
    private XamlCollectionKind _collectionKind;
    private NullableReference`1<XamlMember> _contentProperty;
    private NullableReference`1<XamlMember> _runtimeNameProperty;
    private NullableReference`1<XamlMember> _xmlLangProperty;
    private NullableReference`1<XamlMember> _dictionaryKeyProperty;
    private NullableReference`1<XamlMember> _uidProperty;
    private NullableReference`1<MethodInfo> _isReadOnlyMethod;
    private NullableReference`1<XamlValueConverter`1<TypeConverter>> _typeConverter;
    private NullableReference`1<XamlValueConverter`1<ValueSerializer>> _valueSerializer;
    private NullableReference`1<XamlValueConverter`1<XamlDeferringLoader>> _deferringLoader;
    private NullableReference`1<EventHandler`1<XamlSetMarkupExtensionEventArgs>> _xamlSetMarkupExtensionHandler;
    private NullableReference`1<EventHandler`1<XamlSetTypeConverterEventArgs>> _xamlSetTypeConverterHandler;
    private NullableReference`1<MethodInfo> _addMethod;
    private NullableReference`1<XamlType> _baseType;
    private NullableReference`1<MethodInfo> _getEnumeratorMethod;
    [CompilerGeneratedAttribute]
private IList`1<XamlType> <AllowedContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XamlType> <ContentWrappers>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<XamlMember> <ExcludedReadOnlyMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlTypeInvoker <Invoker>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <MarkupExtensionReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, IList`1<XamlType>> <ReflectedPositionalParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    internal static TypeReflector UnknownReflector { get; }
    internal IList`1<XamlType> AllowedContentTypes { get; internal set; }
    internal ThreadSafeDictionary`2<string, XamlMember> AttachableMembers { get; }
    internal XamlType BaseType { get; internal set; }
    internal bool BaseTypeIsSet { get; }
    internal XamlCollectionKind CollectionKind { get; internal set; }
    internal bool CollectionKindIsSet { get; }
    internal XamlMember ContentProperty { get; internal set; }
    internal bool ContentPropertyIsSet { get; }
    internal IList`1<XamlType> ContentWrappers { get; internal set; }
    internal XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; internal set; }
    internal bool DeferringLoaderIsSet { get; }
    internal ICollection`1<XamlMember> ExcludedReadOnlyMembers { get; internal set; }
    internal XamlType KeyType { get; internal set; }
    internal XamlTypeInvoker Invoker { get; internal set; }
    internal MethodInfo IsReadOnlyMethod { get; internal set; }
    internal bool IsReadOnlyMethodIsSet { get; }
    internal bool IsUnknown { get; }
    internal XamlType ItemType { get; internal set; }
    internal XamlType MarkupExtensionReturnType { get; internal set; }
    internal ThreadSafeDictionary`2<string, XamlMember> Members { get; }
    internal Dictionary`2<int, IList`1<XamlType>> ReflectedPositionalParameters { get; internal set; }
    internal XamlValueConverter`1<TypeConverter> TypeConverter { get; internal set; }
    internal bool TypeConverterIsSet { get; }
    internal Type UnderlyingType { get; internal set; }
    internal XamlValueConverter`1<ValueSerializer> ValueSerializer { get; internal set; }
    internal bool ValueSerializerIsSet { get; }
    internal EventHandler`1<XamlSetMarkupExtensionEventArgs> XamlSetMarkupExtensionHandler { get; internal set; }
    internal bool XamlSetMarkupExtensionHandlerIsSet { get; }
    internal EventHandler`1<XamlSetTypeConverterEventArgs> XamlSetTypeConverterHandler { get; internal set; }
    internal bool XamlSetTypeConverterHandlerIsSet { get; }
    internal MethodInfo AddMethod { get; internal set; }
    internal bool AddMethodIsSet { get; }
    internal MethodInfo GetEnumeratorMethod { get; internal set; }
    internal bool GetEnumeratorMethodIsSet { get; }
    protected MemberInfo Member { get; }
    public TypeReflector(Type underlyingType);
    internal static TypeReflector get_UnknownReflector();
    internal static bool IsVisibleTo(Type type, Assembly accessingAssembly, XamlSchemaContext schemaContext);
    internal static bool IsInternal(Type type);
    internal static bool IsPublicOrInternal(MethodBase method);
    [CompilerGeneratedAttribute]
internal IList`1<XamlType> get_AllowedContentTypes();
    [CompilerGeneratedAttribute]
internal void set_AllowedContentTypes(IList`1<XamlType> value);
    internal ThreadSafeDictionary`2<string, XamlMember> get_AttachableMembers();
    internal XamlType get_BaseType();
    internal void set_BaseType(XamlType value);
    internal bool get_BaseTypeIsSet();
    internal XamlCollectionKind get_CollectionKind();
    internal void set_CollectionKind(XamlCollectionKind value);
    internal bool get_CollectionKindIsSet();
    internal XamlMember get_ContentProperty();
    internal void set_ContentProperty(XamlMember value);
    internal bool get_ContentPropertyIsSet();
    [CompilerGeneratedAttribute]
internal IList`1<XamlType> get_ContentWrappers();
    [CompilerGeneratedAttribute]
internal void set_ContentWrappers(IList`1<XamlType> value);
    internal XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    internal void set_DeferringLoader(XamlValueConverter`1<XamlDeferringLoader> value);
    internal bool get_DeferringLoaderIsSet();
    [CompilerGeneratedAttribute]
internal ICollection`1<XamlMember> get_ExcludedReadOnlyMembers();
    [CompilerGeneratedAttribute]
internal void set_ExcludedReadOnlyMembers(ICollection`1<XamlMember> value);
    [CompilerGeneratedAttribute]
internal XamlType get_KeyType();
    [CompilerGeneratedAttribute]
internal void set_KeyType(XamlType value);
    [CompilerGeneratedAttribute]
internal XamlTypeInvoker get_Invoker();
    [CompilerGeneratedAttribute]
internal void set_Invoker(XamlTypeInvoker value);
    internal MethodInfo get_IsReadOnlyMethod();
    internal void set_IsReadOnlyMethod(MethodInfo value);
    internal bool get_IsReadOnlyMethodIsSet();
    internal bool get_IsUnknown();
    [CompilerGeneratedAttribute]
internal XamlType get_ItemType();
    [CompilerGeneratedAttribute]
internal void set_ItemType(XamlType value);
    [CompilerGeneratedAttribute]
internal XamlType get_MarkupExtensionReturnType();
    [CompilerGeneratedAttribute]
internal void set_MarkupExtensionReturnType(XamlType value);
    internal ThreadSafeDictionary`2<string, XamlMember> get_Members();
    [CompilerGeneratedAttribute]
internal Dictionary`2<int, IList`1<XamlType>> get_ReflectedPositionalParameters();
    [CompilerGeneratedAttribute]
internal void set_ReflectedPositionalParameters(Dictionary`2<int, IList`1<XamlType>> value);
    internal XamlValueConverter`1<TypeConverter> get_TypeConverter();
    internal void set_TypeConverter(XamlValueConverter`1<TypeConverter> value);
    internal bool get_TypeConverterIsSet();
    [CompilerGeneratedAttribute]
internal Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
internal void set_UnderlyingType(Type value);
    internal XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    internal void set_ValueSerializer(XamlValueConverter`1<ValueSerializer> value);
    internal bool get_ValueSerializerIsSet();
    internal EventHandler`1<XamlSetMarkupExtensionEventArgs> get_XamlSetMarkupExtensionHandler();
    internal void set_XamlSetMarkupExtensionHandler(EventHandler`1<XamlSetMarkupExtensionEventArgs> value);
    internal bool get_XamlSetMarkupExtensionHandlerIsSet();
    internal EventHandler`1<XamlSetTypeConverterEventArgs> get_XamlSetTypeConverterHandler();
    internal void set_XamlSetTypeConverterHandler(EventHandler`1<XamlSetTypeConverterEventArgs> value);
    internal bool get_XamlSetTypeConverterHandlerIsSet();
    internal bool TryGetPositionalParameters(int paramCount, IList`1& result);
    internal IList`1<XamlType> TryAddPositionalParameters(int paramCount, IList`1<XamlType> paramList);
    internal bool TryGetAliasedProperty(XamlDirective directive, XamlMember& member);
    internal void TryAddAliasedProperty(XamlDirective directive, XamlMember member);
    internal MethodInfo get_AddMethod();
    internal void set_AddMethod(MethodInfo value);
    internal bool get_AddMethodIsSet();
    internal MethodInfo get_GetEnumeratorMethod();
    internal void set_GetEnumeratorMethod(MethodInfo value);
    internal bool get_GetEnumeratorMethodIsSet();
    internal static XamlMember LookupNameScopeProperty(XamlType xamlType);
    internal PropertyInfo LookupProperty(string name);
    internal EventInfo LookupEvent(string name);
    internal void LookupAllMembers(ICollection`1& newProperties, ICollection`1& newEvents, List`1& knownMembers);
    internal IList`1<PropertyInfo> LookupRemainingProperties();
    private IList`1<PropertyInfo> FilterProperties(PropertyInfo[] propList, List`1<XamlMember> knownMembers, bool skipKnownNegatives);
    private ICollection`1<EventInfo> FilterEvents(EventInfo[] eventList, List`1<XamlMember> knownMembers);
    private PropertyInfo GetNonIndexerProperty(string name);
    private static bool IsPrivate(PropertyInfo pi);
    private static bool IsPrivate(EventInfo ei);
    private static bool IsPrivateOrNull(MethodInfo mi);
    private void PickAttachablePropertyAccessors(List`1<MethodInfo> getters, List`1<MethodInfo> setters, MethodInfo& getter, MethodInfo& setter);
    private MethodInfo PickAttachableEventAdder(IEnumerable`1<MethodInfo> adders);
    internal bool LookupAttachableProperty(string name, MethodInfo& getter, MethodInfo& setter);
    internal MethodInfo LookupAttachableEvent(string name);
    private void LookupAllStaticAccessors(Dictionary`2& getters, Dictionary`2& setters, Dictionary`2& adders);
    private void LookupAllStaticAccessorsHelper(MethodInfo[] allMethods, Dictionary`2<string, List`1<MethodInfo>> getters, Dictionary`2<string, List`1<MethodInfo>> setters, Dictionary`2<string, List`1<MethodInfo>> adders, bool isUnderlyingTypePublic);
    private List`1<MethodInfo> LookupStaticAdders(string name);
    private List`1<MethodInfo> LookupStaticGetters(string name);
    private List`1<MethodInfo> LookupStaticSetters(string name);
    private void PrioritizeAccessors(MemberInfo[] accessors, bool isEvent, bool isGetter, List`1& preferredAccessors, List`1& otherAccessors);
    private bool IsAttachablePropertyAccessor(bool isEvent, bool isGetter, MethodInfo accessor);
    private static void AddToMultiDict(Dictionary`2<string, List`1<MethodInfo>> dict, string name, MethodInfo value, bool isUnderlyingTypePublic);
    private bool IsAttachablePropertyGetter(MethodInfo mi, String& name);
    private bool IsAttachablePropertyGetter(MethodInfo mi);
    private bool IsAttachablePropertySetter(MethodInfo mi, String& name);
    private bool IsAttachablePropertySetter(MethodInfo mi);
    private bool IsAttachableEventAdder(MethodInfo mi, String& name);
    private bool IsAttachableEventAdder(MethodInfo mi);
    internal IList`1<XamlMember> LookupAllAttachableMembers(XamlSchemaContext schemaContext);
    private void GetOrCreateAttachableProperties(XamlSchemaContext schemaContext, List`1<XamlMember> result, Dictionary`2<string, List`1<MethodInfo>> getters, Dictionary`2<string, List`1<MethodInfo>> setters);
    private void GetOrCreateAttachableEvents(XamlSchemaContext schemaContext, List`1<XamlMember> result, Dictionary`2<string, List`1<MethodInfo>> adders);
    internal Nullable`1<bool> GetFlag(BoolTypeBits typeBit);
    internal void SetFlag(BoolTypeBits typeBit, bool value);
    protected virtual MemberInfo get_Member();
    private static object GetCustomAttribute(Type attrType, Type reflectedType);
    private static TypeVisibility GetVisibility(Type type);
}
public enum System.Xaml.Schema.XamlCollectionKind : Enum {
    public byte value__;
    public static XamlCollectionKind None;
    public static XamlCollectionKind Collection;
    public static XamlCollectionKind Dictionary;
    public static XamlCollectionKind Array;
}
public class System.Xaml.Schema.XamlMemberInvoker : object {
    private static XamlMemberInvoker s_Directive;
    private static XamlMemberInvoker s_Unknown;
    private static Object[] s_emptyObjectArray;
    private XamlMember _member;
    private NullableReference`1<MethodInfo> _shouldSerializeMethod;
    public static XamlMemberInvoker UnknownInvoker { get; }
    public MethodInfo UnderlyingGetter { get; }
    public MethodInfo UnderlyingSetter { get; }
    internal static XamlMemberInvoker DirectiveInvoker { get; }
    private bool IsUnknown { get; }
    public XamlMemberInvoker(XamlMember member);
    private static XamlMemberInvoker();
    public static XamlMemberInvoker get_UnknownInvoker();
    public MethodInfo get_UnderlyingGetter();
    public MethodInfo get_UnderlyingSetter();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    internal static XamlMemberInvoker get_DirectiveInvoker();
    public virtual ShouldSerializeResult ShouldSerializeValue(object instance);
    private static bool IsSystemXamlNonPublic(ThreeValuedBool& methodIsSystemXamlNonPublic, MethodInfo method);
    private bool get_IsUnknown();
    private void ThrowIfUnknown();
}
internal class System.Xaml.Schema.XamlNamespace : object {
    public XamlSchemaContext SchemaContext;
    private List`1<AssemblyNamespacePair> _assemblyNamespaces;
    private ConcurrentDictionary`2<string, XamlType> _typeCache;
    private ICollection`1<XamlType> _allPublicTypes;
    [CompilerGeneratedAttribute]
private bool <IsClrNamespace>k__BackingField;
    public bool IsClrNamespace { get; private set; }
    public bool IsResolved { get; }
    internal int RevisionNumber { get; }
    public XamlNamespace(XamlSchemaContext schemaContext);
    public XamlNamespace(XamlSchemaContext schemaContext, string clrNs, string assemblyName);
    [CompilerGeneratedAttribute]
public bool get_IsClrNamespace();
    [CompilerGeneratedAttribute]
private void set_IsClrNamespace(bool value);
    private void Initialize();
    public bool get_IsResolved();
    public ICollection`1<XamlType> GetAllXamlTypes();
    public XamlType GetXamlType(string typeName, XamlType[] typeArgs);
    private XamlType TryGetXamlType(string typeName);
    private XamlType TryGetXamlType(string typeName, Type[] typeArgs);
    private static Type MakeArrayType(Type elementType, string subscript);
    private static string MangleGenericTypeName(string typeName, int paramNum);
    private Type[] ConvertArrayOfXamlTypesToTypes(XamlType[] typeArgs);
    internal int get_RevisionNumber();
    private Type TryGetType(string typeName);
    private ICollection`1<XamlType> LookupAllTypes();
    private List`1<AssemblyNamespacePair> GetClrNamespacePair(string clrNs, string assemblyName);
    private Type SearchAssembliesForShortName(string shortName);
    internal void AddAssemblyNamespacePair(AssemblyNamespacePair pair);
    private string GetTypeExtensionName(string typeName);
}
public class System.Xaml.Schema.XamlTypeInvoker : object {
    private static XamlTypeInvoker s_Unknown;
    private static Object[] s_emptyObjectArray;
    private Dictionary`2<XamlType, MethodInfo> _addMethods;
    [CompilerGeneratedAttribute]
private MethodInfo <EnumeratorMethod>k__BackingField;
    private XamlType _xamlType;
    private Action`1<object> _constructorDelegate;
    private ThreeValuedBool _isPublic;
    private ThreeValuedBool _isInSystemXaml;
    internal MethodInfo EnumeratorMethod { get; internal set; }
    public static XamlTypeInvoker UnknownInvoker { get; }
    public EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get; }
    public EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get; }
    private bool IsInSystemXaml { get; }
    private bool IsPublic { get; }
    private bool IsUnknown { get; }
    public XamlTypeInvoker(XamlType type);
    private static XamlTypeInvoker();
    [CompilerGeneratedAttribute]
internal MethodInfo get_EnumeratorMethod();
    [CompilerGeneratedAttribute]
internal void set_EnumeratorMethod(MethodInfo value);
    public static XamlTypeInvoker get_UnknownInvoker();
    public EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler();
    public EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler();
    public virtual void AddToCollection(object instance, object item);
    public virtual void AddToDictionary(object instance, object key, object item);
    public virtual object CreateInstance(Object[] arguments);
    public virtual MethodInfo GetAddMethod(XamlType contentType);
    public virtual MethodInfo GetEnumeratorMethod();
    public virtual IEnumerator GetItems(object instance);
    private bool get_IsInSystemXaml();
    private bool get_IsPublic();
    private bool get_IsUnknown();
    private void ThrowIfUnknown();
}
[DebuggerDisplayAttribute("{ToString()}")]
public class System.Xaml.Schema.XamlTypeName : object {
    private List`1<XamlTypeName> _typeArguments;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public IList`1<XamlTypeName> TypeArguments { get; }
    internal List`1<XamlTypeName> TypeArgumentsList { get; }
    internal bool HasTypeArgs { get; }
    public XamlTypeName(string xamlNamespace, string name);
    public XamlTypeName(string xamlNamespace, string name, IEnumerable`1<XamlTypeName> typeArguments);
    public XamlTypeName(XamlType xamlType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    public IList`1<XamlTypeName> get_TypeArguments();
    internal List`1<XamlTypeName> get_TypeArgumentsList();
    public virtual string ToString();
    public string ToString(INamespacePrefixLookup prefixLookup);
    public static string ToString(IList`1<XamlTypeName> typeNameList, INamespacePrefixLookup prefixLookup);
    public static XamlTypeName Parse(string typeName, IXamlNamespaceResolver namespaceResolver);
    public static IList`1<XamlTypeName> ParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver);
    public static bool TryParse(string typeName, IXamlNamespaceResolver namespaceResolver, XamlTypeName& result);
    public static bool TryParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver, IList`1& result);
    internal bool get_HasTypeArgs();
    internal static string ConvertListToStringInternal(IList`1<XamlTypeName> typeNameList, Func`2<string, string> prefixGenerator);
    internal static void ConvertListToStringInternal(StringBuilder result, IList`1<XamlTypeName> typeNameList, Func`2<string, string> prefixGenerator);
    internal static XamlTypeName ParseInternal(string typeName, Func`2<string, string> prefixResolver, String& error);
    internal static IList`1<XamlTypeName> ParseListInternal(string typeNameList, Func`2<string, string> prefixResolver, String& error);
    internal string ConvertToStringInternal(Func`2<string, string> prefixGenerator);
    internal void ConvertToStringInternal(StringBuilder result, Func`2<string, string> prefixGenerator);
}
public class System.Xaml.Schema.XamlTypeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    internal static string ConvertXamlTypeToString(ITypeDescriptorContext context, XamlType xamlType);
    private static XamlType ConvertStringToXamlType(ITypeDescriptorContext context, string typeName);
    private static TService GetService(ITypeDescriptorContext context);
    private static XamlType GetXamlTypeOrUnknown(XamlSchemaContext schemaContext, XamlTypeName typeName);
}
public class System.Xaml.Schema.XamlValueConverter`1 : object {
    private TConverterBase _instance;
    private ThreeValuedBool _isPublic;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _instanceIsSet;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <TargetType>k__BackingField;
    public string Name { get; }
    public Type ConverterType { get; }
    public XamlType TargetType { get; }
    public TConverterBase ConverterInstance { get; }
    internal bool IsPublic { get; }
    public XamlValueConverter`1(Type converterType, XamlType targetType);
    public XamlValueConverter`1(Type converterType, XamlType targetType, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public XamlType get_TargetType();
    public TConverterBase get_ConverterInstance();
    public virtual string ToString();
    internal virtual bool get_IsPublic();
    protected virtual TConverterBase CreateInstance();
    private string GetDefaultName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XamlValueConverter`1<TConverterBase> other);
    public static bool op_Equality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2);
    public static bool op_Inequality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2);
}
internal enum System.Xaml.ThreeValuedBool : Enum {
    public byte value__;
    public static ThreeValuedBool NotSet;
    public static ThreeValuedBool False;
    public static ThreeValuedBool True;
}
internal static class System.Xaml.TypeConverterHelper : object {
    private static CultureInfo invariantEnglishUS;
    internal static CultureInfo InvariantEnglishUS { get; }
    private static TypeConverterHelper();
    internal static CultureInfo get_InvariantEnglishUS();
    internal static Type GetConverterType(Type type);
    private static Type GetConverterTypeFromName(string converterName);
    private static TypeConverter GetCoreConverterFromCoreType(Type type);
    internal static TypeConverter GetCoreConverterFromCustomType(Type type);
    internal static TypeConverter GetTypeConverter(Type type);
}
internal class System.Xaml.WeakRefKey : WeakReference {
    private int _hashCode;
    public WeakRefKey(object target);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(WeakRefKey left, WeakRefKey right);
    public static bool op_Inequality(WeakRefKey left, WeakRefKey right);
}
internal class System.Xaml.WriterDelegate : XamlWriter {
    private XamlNodeAddDelegate _addDelegate;
    private XamlLineInfoAddDelegate _addLineInfoDelegate;
    private XamlSchemaContext _schemaContext;
    public XamlSchemaContext SchemaContext { get; }
    public bool ShouldProvideLineInfo { get; }
    public WriterDelegate(XamlNodeAddDelegate add, XamlLineInfoAddDelegate addlineInfoDelegate, XamlSchemaContext xamlSchemaContext);
    public virtual void WriteGetObject();
    public virtual void WriteStartObject(XamlType xamlType);
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember member);
    public virtual void WriteEndMember();
    public virtual void WriteValue(object value);
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    protected virtual void Dispose(bool disposing);
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual void SetLineInfo(int lineNumber, int linePosition);
    public sealed virtual bool get_ShouldProvideLineInfo();
    private void ThrowIsDisposed();
}
public class System.Xaml.XamlBackgroundReader : XamlReader {
    private EventWaitHandle _providerFullEvent;
    private EventWaitHandle _dataReceivedEvent;
    private XamlNode[] _incoming;
    private int _inIdx;
    private XamlNode[] _outgoing;
    private int _outIdx;
    private int _outValid;
    private XamlNode _currentNode;
    private XamlReader _wrappedReader;
    private XamlReader _internalReader;
    private XamlWriter _writer;
    private bool _wrappedReaderHasLineInfo;
    private int _lineNumber;
    private int _linePosition;
    private Thread _thread;
    private Exception _caughtException;
    internal bool IncomingFull { get; }
    internal bool OutgoingEmpty { get; }
    public XamlNodeType NodeType { get; }
    public bool IsEof { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlMember Member { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlBackgroundReader(XamlReader wrappedReader);
    private void Initialize(XamlReader wrappedReader, int bufferSize);
    public void StartThread();
    public void StartThread(string threadName);
    private void XamlReaderThreadStart(object none);
    internal bool get_IncomingFull();
    internal bool get_OutgoingEmpty();
    private void SwapBuffers();
    private void AddToBuffer(XamlNode node);
    private void Add(XamlNodeType nodeType, object data);
    private void AddLineInfo(int lineNumber, int linePosition);
    private XamlNode Next();
    private XamlNode Next_ProcessLineInfo();
    private void InterruptableTransform(XamlReader reader, XamlWriter writer, bool closeWriter);
    public virtual bool Read();
    public virtual XamlNodeType get_NodeType();
    public virtual bool get_IsEof();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual XamlMember get_Member();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Xaml.XamlDeferringLoader : object {
    public abstract virtual object Load(XamlReader xamlReader, IServiceProvider serviceProvider);
    public abstract virtual XamlReader Save(object value, IServiceProvider serviceProvider);
}
public class System.Xaml.XamlDirective : XamlMember {
    private AllowedMemberLocations _allowedLocation;
    private ReadOnlyCollection`1<string> _xamlNamespaces;
    public AllowedMemberLocations AllowedLocation { get; }
    internal XamlDirective(ReadOnlyCollection`1<string> immutableXamlNamespaces, string name, AllowedMemberLocations allowedLocation, MemberReflector reflector);
    public XamlDirective(IEnumerable`1<string> xamlNamespaces, string name, XamlType xamlType, XamlValueConverter`1<TypeConverter> typeConverter, AllowedMemberLocations allowedLocation);
    public XamlDirective(string xamlNamespace, string name);
    public AllowedMemberLocations get_AllowedLocation();
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual IList`1<string> GetXamlNamespaces();
    internal static bool NamespacesAreEqual(XamlDirective directive1, XamlDirective directive2);
    protected sealed virtual XamlMemberInvoker LookupInvoker();
    protected sealed virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected sealed virtual IList`1<XamlMember> LookupDependsOn();
    protected sealed virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected sealed virtual bool LookupIsAmbient();
    protected sealed virtual bool LookupIsEvent();
    protected sealed virtual bool LookupIsReadOnly();
    protected sealed virtual bool LookupIsReadPublic();
    protected sealed virtual bool LookupIsUnknown();
    protected sealed virtual bool LookupIsWriteOnly();
    protected sealed virtual bool LookupIsWritePublic();
    protected sealed virtual XamlType LookupTargetType();
    protected sealed virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected sealed virtual XamlType LookupType();
    protected sealed virtual MethodInfo LookupUnderlyingGetter();
    protected sealed virtual MemberInfo LookupUnderlyingMember();
    protected sealed virtual MethodInfo LookupUnderlyingSetter();
}
public class System.Xaml.XamlDuplicateMemberException : XamlException {
    [CompilerGeneratedAttribute]
private XamlMember <DuplicateMember>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <ParentType>k__BackingField;
    public XamlMember DuplicateMember { get; public set; }
    public XamlType ParentType { get; public set; }
    public XamlDuplicateMemberException(XamlMember member, XamlType type);
    public XamlDuplicateMemberException(string message);
    public XamlDuplicateMemberException(string message, Exception innerException);
    protected XamlDuplicateMemberException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public XamlMember get_DuplicateMember();
    [CompilerGeneratedAttribute]
public void set_DuplicateMember(XamlMember value);
    [CompilerGeneratedAttribute]
public XamlType get_ParentType();
    [CompilerGeneratedAttribute]
public void set_ParentType(XamlType value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlException : Exception {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public string Message { get; }
    public int LineNumber { get; protected set; }
    public int LinePosition { get; protected set; }
    public XamlException(string message, Exception innerException, int lineNumber, int linePosition);
    public XamlException(string message, Exception innerException);
    public XamlException(string message);
    protected XamlException(SerializationInfo info, StreamingContext context);
    internal void SetLineInfo(int lineNumber, int linePosition);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
protected void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
protected void set_LinePosition(int value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlInternalException : XamlException {
    private static string MessagePrefix;
    public XamlInternalException(string message);
    public XamlInternalException(string message, Exception innerException);
    protected XamlInternalException(SerializationInfo info, StreamingContext context);
}
public static class System.Xaml.XamlLanguage : object {
    public static string Xaml2006Namespace;
    public static string Xml1998Namespace;
    internal static string SWMNamespace;
    internal static string PreferredPrefix;
    private static string x_AsyncRecords;
    private static string x_Arguments;
    private static string x_Class;
    private static string x_ClassModifier;
    private static string x_Code;
    private static string x_ConnectionId;
    private static string x_FactoryMethod;
    private static string x_FieldModifier;
    private static string x_Initialization;
    private static string x_Items;
    private static string x_Key;
    private static string x_Members;
    private static string x_ClassAttributes;
    private static string x_Name;
    private static string x_PositionalParameters;
    private static string x_Shared;
    private static string x_Subclass;
    private static string x_SynchronousMode;
    private static string x_TypeArguments;
    private static string x_Uid;
    private static string x_UnknownContent;
    private static string xml_Space;
    private static string xml_Lang;
    private static string xml_Base;
    private static ReadOnlyCollection`1<string> s_xamlNamespaces;
    private static ReadOnlyCollection`1<string> s_xmlNamespaces;
    private static Lazy`1<XamlSchemaContext> s_schemaContext;
    private static Lazy`1<XamlType> s_array;
    private static Lazy`1<XamlType> s_null;
    private static Lazy`1<XamlType> s_reference;
    private static Lazy`1<XamlType> s_static;
    private static Lazy`1<XamlType> s_type;
    private static Lazy`1<XamlType> s_string;
    private static Lazy`1<XamlType> s_double;
    private static Lazy`1<XamlType> s_int32;
    private static Lazy`1<XamlType> s_boolean;
    private static Lazy`1<XamlType> s_member;
    private static Lazy`1<XamlType> s_property;
    private static Lazy`1<XamlType> s_xDataHolder;
    private static Lazy`1<XamlType> s_object;
    private static Lazy`1<XamlType> s_listOfObject;
    private static Lazy`1<XamlType> s_listOfMembers;
    private static Lazy`1<XamlType> s_listOfAttributes;
    private static Lazy`1<XamlType> s_markupExtension;
    private static Lazy`1<XamlType> s_iNameScope;
    private static Lazy`1<XamlType> s_iXmlSerializable;
    private static Lazy`1<XamlType> s_positionalParameterDescriptor;
    private static Lazy`1<XamlType> s_char;
    private static Lazy`1<XamlType> s_single;
    private static Lazy`1<XamlType> s_byte;
    private static Lazy`1<XamlType> s_int16;
    private static Lazy`1<XamlType> s_int64;
    private static Lazy`1<XamlType> s_decimal;
    private static Lazy`1<XamlType> s_uri;
    private static Lazy`1<XamlType> s_timespan;
    private static Lazy`1<ReadOnlyCollection`1<XamlType>> s_allTypes;
    private static Lazy`1<XamlDirective> s_asyncRecords;
    private static Lazy`1<XamlDirective> s_arguments;
    private static Lazy`1<XamlDirective> s_class;
    private static Lazy`1<XamlDirective> s_classModifier;
    private static Lazy`1<XamlDirective> s_code;
    private static Lazy`1<XamlDirective> s_connectionId;
    private static Lazy`1<XamlDirective> s_factoryMethod;
    private static Lazy`1<XamlDirective> s_fieldModifier;
    private static Lazy`1<XamlDirective> s_items;
    private static Lazy`1<XamlDirective> s_initialization;
    private static Lazy`1<XamlDirective> s_key;
    private static Lazy`1<XamlDirective> s_members;
    private static Lazy`1<XamlDirective> s_classAttributes;
    private static Lazy`1<XamlDirective> s_name;
    private static Lazy`1<XamlDirective> s_positionalParameters;
    private static Lazy`1<XamlDirective> s_shared;
    private static Lazy`1<XamlDirective> s_subclass;
    private static Lazy`1<XamlDirective> s_synchronousMode;
    private static Lazy`1<XamlDirective> s_typeArguments;
    private static Lazy`1<XamlDirective> s_uid;
    private static Lazy`1<XamlDirective> s_unknownContent;
    private static Lazy`1<XamlDirective> s_base;
    private static Lazy`1<XamlDirective> s_lang;
    private static Lazy`1<XamlDirective> s_space;
    private static Lazy`1<ReadOnlyCollection`1<XamlDirective>> s_allDirectives;
    public static IList`1<string> XamlNamespaces { get; }
    public static IList`1<string> XmlNamespaces { get; }
    public static XamlType Array { get; }
    public static XamlType Member { get; }
    public static XamlType Null { get; }
    public static XamlType Property { get; }
    public static XamlType Reference { get; }
    public static XamlType Static { get; }
    public static XamlType Type { get; }
    public static XamlType String { get; }
    public static XamlType Double { get; }
    public static XamlType Int32 { get; }
    public static XamlType Boolean { get; }
    public static XamlType XData { get; }
    public static XamlType Object { get; }
    public static XamlType Char { get; }
    public static XamlType Single { get; }
    public static XamlType Byte { get; }
    public static XamlType Int16 { get; }
    public static XamlType Int64 { get; }
    public static XamlType Decimal { get; }
    public static XamlType Uri { get; }
    public static XamlType TimeSpan { get; }
    public static ReadOnlyCollection`1<XamlType> AllTypes { get; }
    public static XamlDirective Arguments { get; }
    public static XamlDirective AsyncRecords { get; }
    public static XamlDirective Class { get; }
    public static XamlDirective ClassModifier { get; }
    public static XamlDirective Code { get; }
    public static XamlDirective ConnectionId { get; }
    public static XamlDirective FactoryMethod { get; }
    public static XamlDirective FieldModifier { get; }
    public static XamlDirective Items { get; }
    public static XamlDirective Initialization { get; }
    public static XamlDirective Key { get; }
    public static XamlDirective Members { get; }
    public static XamlDirective ClassAttributes { get; }
    public static XamlDirective Name { get; }
    public static XamlDirective PositionalParameters { get; }
    public static XamlDirective Shared { get; }
    public static XamlDirective Subclass { get; }
    public static XamlDirective SynchronousMode { get; }
    public static XamlDirective TypeArguments { get; }
    public static XamlDirective Uid { get; }
    public static XamlDirective UnknownContent { get; }
    public static XamlDirective Base { get; }
    public static XamlDirective Lang { get; }
    public static XamlDirective Space { get; }
    public static ReadOnlyCollection`1<XamlDirective> AllDirectives { get; }
    internal static XamlType MarkupExtension { get; }
    internal static XamlType INameScope { get; }
    internal static XamlType PositionalParameterDescriptor { get; }
    internal static XamlType IXmlSerializable { get; }
    private static XamlLanguage();
    public static IList`1<string> get_XamlNamespaces();
    public static IList`1<string> get_XmlNamespaces();
    public static XamlType get_Array();
    public static XamlType get_Member();
    public static XamlType get_Null();
    public static XamlType get_Property();
    public static XamlType get_Reference();
    public static XamlType get_Static();
    public static XamlType get_Type();
    public static XamlType get_String();
    public static XamlType get_Double();
    public static XamlType get_Int32();
    public static XamlType get_Boolean();
    public static XamlType get_XData();
    public static XamlType get_Object();
    public static XamlType get_Char();
    public static XamlType get_Single();
    public static XamlType get_Byte();
    public static XamlType get_Int16();
    public static XamlType get_Int64();
    public static XamlType get_Decimal();
    public static XamlType get_Uri();
    public static XamlType get_TimeSpan();
    public static ReadOnlyCollection`1<XamlType> get_AllTypes();
    public static XamlDirective get_Arguments();
    public static XamlDirective get_AsyncRecords();
    public static XamlDirective get_Class();
    public static XamlDirective get_ClassModifier();
    public static XamlDirective get_Code();
    public static XamlDirective get_ConnectionId();
    public static XamlDirective get_FactoryMethod();
    public static XamlDirective get_FieldModifier();
    public static XamlDirective get_Items();
    public static XamlDirective get_Initialization();
    public static XamlDirective get_Key();
    public static XamlDirective get_Members();
    public static XamlDirective get_ClassAttributes();
    public static XamlDirective get_Name();
    public static XamlDirective get_PositionalParameters();
    public static XamlDirective get_Shared();
    public static XamlDirective get_Subclass();
    public static XamlDirective get_SynchronousMode();
    public static XamlDirective get_TypeArguments();
    public static XamlDirective get_Uid();
    public static XamlDirective get_UnknownContent();
    public static XamlDirective get_Base();
    public static XamlDirective get_Lang();
    public static XamlDirective get_Space();
    public static ReadOnlyCollection`1<XamlDirective> get_AllDirectives();
    internal static XamlType get_MarkupExtension();
    internal static XamlType get_INameScope();
    internal static XamlType get_PositionalParameterDescriptor();
    internal static XamlType get_IXmlSerializable();
    internal static string TypeAlias(Type type);
    internal static XamlDirective LookupXamlDirective(string name);
    internal static XamlType LookupXamlType(string typeNamespace, string typeName);
    internal static Type LookupClrNamespaceType(AssemblyNamespacePair nsPair, string typeName);
    internal static XamlDirective LookupXmlDirective(string name);
    private static ReadOnlyCollection`1<XamlType> GetAllTypes();
    private static ReadOnlyCollection`1<XamlDirective> GetAllDirectives();
    private static XamlSchemaContext GetSchemaContext();
    private static XamlDirective GetXamlDirective(string name);
    private static XamlDirective GetXamlDirective(string name, AllowedMemberLocations allowedLocation, MemberReflector reflector);
    private static XamlDirective GetXamlDirective(string name, XamlType xamlType, XamlValueConverter`1<TypeConverter> typeConverter, AllowedMemberLocations allowedLocation);
    private static XamlDirective GetXmlDirective(string name);
    private static XamlType GetXamlType(Type type);
}
internal class System.Xaml.XamlLineInfoAddDelegate : MulticastDelegate {
    public XamlLineInfoAddDelegate(object object, IntPtr method);
    public virtual void Invoke(int lineNumber, int linePosition);
    public virtual IAsyncResult BeginInvoke(int lineNumber, int linePosition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xaml.XamlMarkupExtensionWriter : XamlWriter {
    private StringBuilder sb;
    private Stack`1<Node> nodes;
    private WriterState currentState;
    private XamlXmlWriter xamlXmlWriter;
    private XamlXmlWriterSettings settings;
    private XamlMarkupExtensionWriterSettings meSettings;
    private bool failed;
    public XamlSchemaContext SchemaContext { get; }
    public string MarkupExtensionString { get; }
    public bool Failed { get; }
    public XamlMarkupExtensionWriter(XamlXmlWriter xamlXmlWriter);
    public XamlMarkupExtensionWriter(XamlXmlWriter xamlXmlWriter, XamlMarkupExtensionWriterSettings meSettings);
    private void Initialize(XamlXmlWriter xamlXmlWriter);
    protected virtual void Dispose(bool disposing);
    public virtual XamlSchemaContext get_SchemaContext();
    public void Reset();
    public string get_MarkupExtensionString();
    public bool get_Failed();
    private string LookupPrefix(XamlType type);
    private string LookupPrefix(XamlMember property);
    private void CheckMemberForUniqueness(Node objectNode, XamlMember property);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteGetObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteEndMember();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteValue(object value);
}
internal class System.Xaml.XamlMarkupExtensionWriterSettings : object {
    [CompilerGeneratedAttribute]
private bool <ContinueWritingWhenPrefixIsNotFound>k__BackingField;
    public bool ContinueWritingWhenPrefixIsNotFound { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ContinueWritingWhenPrefixIsNotFound();
    [CompilerGeneratedAttribute]
public void set_ContinueWritingWhenPrefixIsNotFound(bool value);
}
public class System.Xaml.XamlMember : object {
    private string _name;
    private XamlType _declaringType;
    private MemberType _memberType;
    private ThreeValuedBool _isNameValid;
    private MemberReflector _reflector;
    private NullableReference`1<MemberInfo> _underlyingMember;
    public XamlType DeclaringType { get; }
    public XamlMemberInvoker Invoker { get; }
    public bool IsUnknown { get; }
    public bool IsReadPublic { get; }
    public bool IsWritePublic { get; }
    public string Name { get; }
    public bool IsNameValid { get; }
    public string PreferredXamlNamespace { get; }
    public XamlType TargetType { get; }
    public XamlType Type { get; }
    public XamlValueConverter`1<TypeConverter> TypeConverter { get; }
    public XamlValueConverter`1<ValueSerializer> ValueSerializer { get; }
    public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; }
    public MemberInfo UnderlyingMember { get; }
    internal NullableReference`1<MemberInfo> UnderlyingMemberInternal { get; }
    public bool IsReadOnly { get; }
    public bool IsWriteOnly { get; }
    public bool IsAttachable { get; }
    public bool IsEvent { get; }
    public bool IsDirective { get; }
    public IList`1<XamlMember> DependsOn { get; }
    public bool IsAmbient { get; }
    public DesignerSerializationVisibility SerializationVisibility { get; }
    public IReadOnlyDictionary`2<char, char> MarkupExtensionBracketCharacters { get; }
    internal string ConstructorArgument { get; }
    internal object DefaultValue { get; }
    internal MethodInfo Getter { get; }
    internal bool HasDefaultValue { get; }
    internal bool HasSerializationVisibility { get; }
    internal MethodInfo Setter { get; }
    private bool IsReadPublicIgnoringType { get; }
    private bool IsWritePublicIgnoringType { get; }
    private bool AreAttributesAvailable { get; }
    private XamlSchemaContext SchemaContext { get; }
    public XamlMember(string name, XamlType declaringType, bool isAttachable);
    public XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext);
    public XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    internal XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker, MemberReflector reflector);
    public XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext);
    public XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    internal XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker, MemberReflector reflector);
    public XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext);
    public XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    internal XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext, XamlMemberInvoker invoker, MemberReflector reflector);
    public XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext);
    public XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    internal XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext, XamlMemberInvoker invoker, MemberReflector reflector);
    internal XamlMember(string name, MemberReflector reflector);
    public XamlType get_DeclaringType();
    public XamlMemberInvoker get_Invoker();
    public bool get_IsUnknown();
    public bool get_IsReadPublic();
    public bool get_IsWritePublic();
    public string get_Name();
    public bool get_IsNameValid();
    public string get_PreferredXamlNamespace();
    public XamlType get_TargetType();
    public XamlType get_Type();
    public XamlValueConverter`1<TypeConverter> get_TypeConverter();
    public XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    public MemberInfo get_UnderlyingMember();
    internal NullableReference`1<MemberInfo> get_UnderlyingMemberInternal();
    public bool get_IsReadOnly();
    public bool get_IsWriteOnly();
    public bool get_IsAttachable();
    public bool get_IsEvent();
    public bool get_IsDirective();
    public virtual IList`1<string> GetXamlNamespaces();
    public virtual string ToString();
    public IList`1<XamlMember> get_DependsOn();
    public bool get_IsAmbient();
    public DesignerSerializationVisibility get_SerializationVisibility();
    public IReadOnlyDictionary`2<char, char> get_MarkupExtensionBracketCharacters();
    internal string get_ConstructorArgument();
    internal object get_DefaultValue();
    internal MethodInfo get_Getter();
    internal bool get_HasDefaultValue();
    internal bool get_HasSerializationVisibility();
    internal MethodInfo get_Setter();
    internal bool IsReadVisibleTo(Assembly accessingAssembly, Type accessingType);
    internal bool IsWriteVisibleTo(Assembly accessingAssembly, Type accessingType);
    protected virtual XamlMemberInvoker LookupInvoker();
    protected virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected virtual IList`1<XamlMember> LookupDependsOn();
    private Nullable`1<DesignerSerializationVisibility> LookupSerializationVisibility();
    protected virtual bool LookupIsAmbient();
    protected virtual bool LookupIsEvent();
    protected virtual bool LookupIsReadPublic();
    protected virtual bool LookupIsReadOnly();
    protected virtual bool LookupIsUnknown();
    protected virtual bool LookupIsWriteOnly();
    protected virtual bool LookupIsWritePublic();
    protected virtual XamlType LookupTargetType();
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual XamlValueConverter`1<ValueSerializer> LookupValueSerializer();
    protected virtual IReadOnlyDictionary`2<char, char> LookupMarkupExtensionBracketCharacters();
    protected virtual XamlType LookupType();
    protected virtual MethodInfo LookupUnderlyingGetter();
    protected virtual MethodInfo LookupUnderlyingSetter();
    protected virtual MemberInfo LookupUnderlyingMember();
    private bool get_IsReadPublicIgnoringType();
    private bool get_IsWritePublicIgnoringType();
    private static void ValidateGetter(MethodInfo method, string argumentName);
    private static void ValidateSetter(MethodInfo method, string argumentName);
    private bool get_AreAttributesAvailable();
    private XamlSchemaContext get_SchemaContext();
    private static bool GetDefaultFlag(BoolMemberBits flagBit);
    private void CreateReflector();
    private void EnsureDefaultValue();
    private void EnsureReflector();
    private bool GetFlag(BoolMemberBits flagBit);
    private bool LookupBooleanValue(BoolMemberBits flag);
    private string LookupConstructorArgument();
    private Type LookupSystemType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XamlMember other);
    public static bool op_Equality(XamlMember xamlMember1, XamlMember xamlMember2);
    public static bool op_Inequality(XamlMember xamlMember1, XamlMember xamlMember2);
}
[DebuggerDisplayAttribute("{ToString()}")]
internal class System.Xaml.XamlNode : ValueType {
    private XamlNodeType _nodeType;
    private InternalNodeType _internalNodeType;
    private object _data;
    public XamlNodeType NodeType { get; }
    public NamespaceDeclaration NamespaceDeclaration { get; }
    public XamlType XamlType { get; }
    public object Value { get; }
    public XamlMember Member { get; }
    public LineInfo LineInfo { get; }
    internal bool IsEof { get; }
    internal bool IsEndOfAttributes { get; }
    internal bool IsLineInfo { get; }
    public XamlNode(XamlNodeType nodeType);
    public XamlNode(XamlNodeType nodeType, object data);
    public XamlNode(InternalNodeType internalNodeType);
    public XamlNode(LineInfo lineInfo);
    public XamlNodeType get_NodeType();
    public virtual string ToString();
    public NamespaceDeclaration get_NamespaceDeclaration();
    public XamlType get_XamlType();
    public object get_Value();
    public XamlMember get_Member();
    public LineInfo get_LineInfo();
    internal bool get_IsEof();
    internal bool get_IsEndOfAttributes();
    internal bool get_IsLineInfo();
    internal static bool IsEof_Helper(XamlNodeType nodeType, object data);
}
internal class System.Xaml.XamlNodeAddDelegate : MulticastDelegate {
    public XamlNodeAddDelegate(object object, IntPtr method);
    public virtual void Invoke(XamlNodeType nodeType, object data);
    public virtual IAsyncResult BeginInvoke(XamlNodeType nodeType, object data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xaml.XamlNodeIndexDelegate : MulticastDelegate {
    public XamlNodeIndexDelegate(object object, IntPtr method);
    public virtual XamlNode Invoke(int idx);
    public virtual IAsyncResult BeginInvoke(int idx, AsyncCallback callback, object object);
    public virtual XamlNode EndInvoke(IAsyncResult result);
}
public class System.Xaml.XamlNodeList : object {
    private List`1<XamlNode> _nodeList;
    private bool _readMode;
    private XamlWriter _writer;
    private bool _hasLineInfo;
    public XamlWriter Writer { get; }
    public int Count { get; }
    public XamlNodeList(XamlSchemaContext schemaContext);
    public XamlNodeList(XamlSchemaContext schemaContext, int size);
    private void Initialize(XamlSchemaContext schemaContext, int size);
    public XamlWriter get_Writer();
    public XamlReader GetReader();
    private void Add(XamlNodeType nodeType, object data);
    private void AddLineInfo(int lineNumber, int linePosition);
    private XamlNode Index(int idx);
    public void Clear();
    public int get_Count();
}
internal class System.Xaml.XamlNodeNextDelegate : MulticastDelegate {
    public XamlNodeNextDelegate(object object, IntPtr method);
    public virtual XamlNode Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual XamlNode EndInvoke(IAsyncResult result);
}
public class System.Xaml.XamlNodeQueue : object {
    private Queue`1<XamlNode> _nodeQueue;
    private XamlNode _endOfStreamNode;
    private ReaderDelegate _reader;
    private XamlWriter _writer;
    private bool _hasLineInfo;
    public XamlReader Reader { get; }
    public XamlWriter Writer { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public XamlNodeQueue(XamlSchemaContext schemaContext);
    public XamlReader get_Reader();
    public XamlWriter get_Writer();
    public bool get_IsEmpty();
    public int get_Count();
    private void Add(XamlNodeType nodeType, object data);
    private void AddLineInfo(int lineNumber, int linePosition);
    private XamlNode Next();
}
public enum System.Xaml.XamlNodeType : Enum {
    public byte value__;
    public static XamlNodeType None;
    public static XamlNodeType StartObject;
    public static XamlNodeType GetObject;
    public static XamlNodeType EndObject;
    public static XamlNodeType StartMember;
    public static XamlNodeType EndMember;
    public static XamlNodeType Value;
    public static XamlNodeType NamespaceDeclaration;
}
public class System.Xaml.XamlObjectEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SourceBamlUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ElementLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ElementLinePosition>k__BackingField;
    public object Instance { get; private set; }
    public Uri SourceBamlUri { get; private set; }
    public int ElementLineNumber { get; private set; }
    public int ElementLinePosition { get; private set; }
    public XamlObjectEventArgs(object instance);
    internal XamlObjectEventArgs(object instance, Uri sourceBamlUri, int elementLineNumber, int elementLinePosition);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
    [CompilerGeneratedAttribute]
public Uri get_SourceBamlUri();
    [CompilerGeneratedAttribute]
private void set_SourceBamlUri(Uri value);
    [CompilerGeneratedAttribute]
public int get_ElementLineNumber();
    [CompilerGeneratedAttribute]
private void set_ElementLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ElementLinePosition();
    [CompilerGeneratedAttribute]
private void set_ElementLinePosition(int value);
}
public class System.Xaml.XamlObjectReader : XamlReader {
    private XamlObjectReaderSettings settings;
    private XamlSchemaContext schemaContext;
    private XamlNode currentXamlNode;
    private object currentInstance;
    private Stack`1<MarkupInfo> nodes;
    public XamlNodeType NodeType { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlType Type { get; }
    public XamlMember Member { get; }
    public object Value { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool IsEof { get; }
    public object Instance { get; }
    public XamlObjectReader(object instance);
    public XamlObjectReader(object instance, XamlObjectReaderSettings settings);
    public XamlObjectReader(object instance, XamlSchemaContext schemaContext);
    public XamlObjectReader(object instance, XamlSchemaContext schemaContext, XamlObjectReaderSettings settings);
    public virtual bool Read();
    public virtual XamlNodeType get_NodeType();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlType get_Type();
    public virtual XamlMember get_Member();
    public virtual object get_Value();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual bool get_IsEof();
    public virtual object get_Instance();
    internal static DesignerSerializationVisibility GetSerializationVisibility(XamlMember member);
    internal static string GetConstructorArgument(XamlMember member);
    internal static bool GetDefaultValue(XamlMember member, Object& value);
}
public class System.Xaml.XamlObjectReaderException : XamlException {
    public XamlObjectReaderException(string message);
    public XamlObjectReaderException(string message, Exception innerException);
    protected XamlObjectReaderException(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlObjectReaderSettings : XamlReaderSettings {
    [CompilerGeneratedAttribute]
private bool <RequireExplicitContentVisibility>k__BackingField;
    public bool RequireExplicitContentVisibility { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireExplicitContentVisibility();
    [CompilerGeneratedAttribute]
public void set_RequireExplicitContentVisibility(bool value);
}
public class System.Xaml.XamlObjectWriter : XamlWriter {
    private object _lastInstance;
    private bool _inDispose;
    private ObjectWriterContext _context;
    private DeferringWriter _deferringWriter;
    private EventHandler`1<XamlObjectEventArgs> _afterBeginInitHandler;
    private EventHandler`1<XamlObjectEventArgs> _beforePropertiesHandler;
    private EventHandler`1<XamlObjectEventArgs> _afterPropertiesHandler;
    private EventHandler`1<XamlObjectEventArgs> _afterEndInitHandler;
    private EventHandler`1<XamlSetValueEventArgs> _xamlSetValueHandler;
    private object _rootObjectInstance;
    private bool _skipDuplicatePropertyCheck;
    private NameFixupGraph _nameFixupGraph;
    private Dictionary`2<object, List`1<PendingCollectionAdd>> _pendingCollectionAdds;
    private INameScope _rootNamescope;
    private bool _skipProvideValueOnRoot;
    private bool _nextNodeMustBeEndMember;
    private bool _preferUnconvertedDictionaryKeys;
    private Dictionary`2<object, ObjectWriterContext> _pendingKeyConversionContexts;
    private NameFixupGraph NameFixupGraph { get; }
    private Dictionary`2<object, List`1<PendingCollectionAdd>> PendingCollectionAdds { get; }
    private Dictionary`2<object, ObjectWriterContext> PendingKeyConversionContexts { get; }
    private XamlRuntime Runtime { get; }
    public INameScope RootNameScope { get; }
    public object Result { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool ShouldProvideLineInfo { get; }
    public XamlObjectWriter(XamlSchemaContext schemaContext);
    public XamlObjectWriter(XamlSchemaContext schemaContext, XamlObjectWriterSettings settings);
    internal XamlObjectWriter(XamlSavedContext savedContext, XamlObjectWriterSettings settings);
    private void Initialize(XamlSchemaContext schemaContext, XamlSavedContext savedContext, XamlObjectWriterSettings settings);
    private XamlRuntime CreateRuntime(XamlObjectWriterSettings settings, XamlSchemaContext schemaContext);
    protected virtual void OnAfterBeginInit(object value);
    protected virtual void OnBeforeProperties(object value);
    protected virtual void OnAfterProperties(object value);
    protected virtual void OnAfterEndInit(object value);
    protected virtual bool OnSetValue(object eventSender, XamlMember member, object value);
    private NameFixupGraph get_NameFixupGraph();
    private bool HasUnresolvedChildren(object parent);
    private Dictionary`2<object, List`1<PendingCollectionAdd>> get_PendingCollectionAdds();
    private Dictionary`2<object, ObjectWriterContext> get_PendingKeyConversionContexts();
    private XamlRuntime get_Runtime();
    private void TryCreateParentInstance(ObjectWriterContext ctx);
    public virtual void WriteGetObject();
    public virtual void WriteStartObject(XamlType xamlType);
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteEndMember();
    public virtual void WriteValue(object value);
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public void Clear();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
    public INameScope get_RootNameScope();
    public virtual object get_Result();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual void SetLineInfo(int lineNumber, int linePosition);
    public sealed virtual bool get_ShouldProvideLineInfo();
    private sealed virtual override XamlException MS.Internal.Xaml.Runtime.IAddLineInfo.WithLineInfo(XamlException ex);
    private object GetKeyFromInstance(object instance, XamlType instanceType, IAddLineInfo lineInfo);
    private XamlType GetXamlType(Type clrType);
    private bool IsConstructionDirective(XamlMember xamlMember);
    private bool IsTextConstructionDirective(XamlMember xamlMember);
    private bool IsDirectiveAllowedOnNullInstance(XamlMember xamlMember, XamlType xamlType);
    private void Logic_CreateAndAssignToParentStart(ObjectWriterContext ctx);
    private void Logic_ConvertPositionalParamsToArgs(ObjectWriterContext ctx);
    private void Logic_CreateFromInitializationValue(ObjectWriterContext ctx);
    private object Logic_CreateFromValue(ObjectWriterContext ctx, XamlValueConverter`1<TypeConverter> typeConverter, object value, XamlMember property, string targetName);
    private object Logic_CreateFromValue(ObjectWriterContext ctx, XamlValueConverter`1<TypeConverter> typeConverter, object value, XamlMember property, string targetName, IAddLineInfo lineInfo);
    private bool Logic_CreatePropertyValueFromValue(ObjectWriterContext ctx);
    private bool Logic_ShouldConvertKey(ObjectWriterContext ctx);
    private static bool IsBuiltInGenericDictionary(Type type);
    private void Logic_BeginInit(ObjectWriterContext ctx);
    private void Logic_EndInit(ObjectWriterContext ctx);
    private void Logic_DeferProvideValue(ObjectWriterContext ctx);
    private void Logic_DuplicatePropertyCheck(ObjectWriterContext ctx, XamlMember property, bool onParent);
    private void Logic_ApplyCurrentPreconstructionPropertyValues(ObjectWriterContext ctx);
    private void Logic_ApplyCurrentPreconstructionPropertyValues(ObjectWriterContext ctx, bool skipDirectives);
    private object Logic_PushAndPopAProvideValueStackFrame(ObjectWriterContext ctx, XamlMember prop, MarkupExtension me, bool useIRME);
    private void Logic_ApplyPropertyValue(ObjectWriterContext ctx, XamlMember prop, object value, bool onParent);
    private void Logic_CheckBaseUri(ObjectWriterContext ctx, string value);
    private void Logic_AssignProvidedValue(ObjectWriterContext ctx);
    private bool Logic_ProvideValue(ObjectWriterContext ctx);
    private void Logic_PendCurrentFixupToken_SetValue(ObjectWriterContext ctx, NameFixupToken token);
    private void Logic_CheckAssignmentToParentStart(ObjectWriterContext ctx);
    private void Logic_DoAssignmentToParentCollection(ObjectWriterContext ctx);
    private bool Logic_WillParentCollectionAdd(ObjectWriterContext ctx, Type type, bool excludeObjectType);
    private void Logic_AddToParentDictionary(ObjectWriterContext ctx, object key, object value);
    private bool Logic_PendAssignmentToParentCollection(ObjectWriterContext ctx, object key, bool keyIsSet);
    private void Logic_DoAssignmentToParentProperty(ObjectWriterContext ctx);
    private void Logic_PendKeyFixupToken(ObjectWriterContext ctx, NameFixupToken token);
    private void Logic_RegisterName_OnCurrent(ObjectWriterContext ctx, string name);
    private void Logic_RegisterName_OnParent(ObjectWriterContext ctx, string name);
    private void RegisterName(ObjectWriterContext ctx, string name, object inst, XamlType xamlType, INameScope nameScope, INameScope parentNameScope, bool isRoot);
    private void Logic_SetConnectionId(ObjectWriterContext ctx, int connectionId, object instance);
    private void SetValue(object inst, XamlMember property, object value);
    private void Logic_ValidateXClass(ObjectWriterContext ctx, object value);
    private void Logic_AddDependencyForUnresolvedChildren(ObjectWriterContext ctx, XamlSavedContext deferredMarkupExtensionContext);
    private NameFixupToken GetTokenForUnresolvedChildren(object childThatHasUnresolvedChildren, XamlMember property, XamlSavedContext deferredMarkupExtensionContext);
    private void CompleteNameReferences();
    private void ThrowUnresolvedRefs(IEnumerable`1<NameFixupToken> unresolvedRefs);
    private void TriggerNameResolution(object instance, string name);
    private sealed virtual override bool MS.Internal.Xaml.Context.ICheckIfInitialized.IsFullyInitialized(object instance);
    private void CompleteDeferredInitialization(FixupTarget target);
    private void ProcessNameFixup(NameFixupToken token, bool nameResolutionIsComplete);
    private void ProcessNameFixup_Simple(NameFixupToken token);
    private void ProcessNameFixup_Reparse(NameFixupToken token, bool nameResolutionIsComplete);
    private void ProcessNameFixup_UpdatePendingAddKey(NameFixupToken token, object key);
    private void ProcessNameFixup_UpdatePendingAddItem(NameFixupToken token, object item);
    private void ExecutePendingAdds(XamlType instanceType, object instance);
}
public class System.Xaml.XamlObjectWriterException : XamlException {
    public XamlObjectWriterException(string message);
    public XamlObjectWriterException(string message, Exception innerException);
    protected XamlObjectWriterException(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlObjectWriterSettings : XamlWriterSettings {
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <AfterBeginInitHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <BeforePropertiesHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <AfterPropertiesHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <AfterEndInitHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlSetValueEventArgs> <XamlSetValueHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RootObjectInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCanConvert>k__BackingField;
    [CompilerGeneratedAttribute]
private INameScope <ExternalNameScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDuplicatePropertyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RegisterNamesOnExternalNamescope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipProvideValueOnRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferUnconvertedDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SourceBamlUri>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlAccessLevel <AccessLevel>k__BackingField;
    public EventHandler`1<XamlObjectEventArgs> AfterBeginInitHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> BeforePropertiesHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterPropertiesHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterEndInitHandler { get; public set; }
    public EventHandler`1<XamlSetValueEventArgs> XamlSetValueHandler { get; public set; }
    public object RootObjectInstance { get; public set; }
    public bool IgnoreCanConvert { get; public set; }
    public INameScope ExternalNameScope { get; public set; }
    public bool SkipDuplicatePropertyCheck { get; public set; }
    public bool RegisterNamesOnExternalNamescope { get; public set; }
    public bool SkipProvideValueOnRoot { get; public set; }
    public bool PreferUnconvertedDictionaryKeys { get; public set; }
    public Uri SourceBamlUri { get; public set; }
    public XamlAccessLevel AccessLevel { get; public set; }
    public XamlObjectWriterSettings(XamlObjectWriterSettings settings);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_AfterBeginInitHandler();
    [CompilerGeneratedAttribute]
public void set_AfterBeginInitHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_BeforePropertiesHandler();
    [CompilerGeneratedAttribute]
public void set_BeforePropertiesHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_AfterPropertiesHandler();
    [CompilerGeneratedAttribute]
public void set_AfterPropertiesHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_AfterEndInitHandler();
    [CompilerGeneratedAttribute]
public void set_AfterEndInitHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlSetValueEventArgs> get_XamlSetValueHandler();
    [CompilerGeneratedAttribute]
public void set_XamlSetValueHandler(EventHandler`1<XamlSetValueEventArgs> value);
    [CompilerGeneratedAttribute]
public object get_RootObjectInstance();
    [CompilerGeneratedAttribute]
public void set_RootObjectInstance(object value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCanConvert();
    [CompilerGeneratedAttribute]
public void set_IgnoreCanConvert(bool value);
    [CompilerGeneratedAttribute]
public INameScope get_ExternalNameScope();
    [CompilerGeneratedAttribute]
public void set_ExternalNameScope(INameScope value);
    [CompilerGeneratedAttribute]
public bool get_SkipDuplicatePropertyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDuplicatePropertyCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_RegisterNamesOnExternalNamescope();
    [CompilerGeneratedAttribute]
public void set_RegisterNamesOnExternalNamescope(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipProvideValueOnRoot();
    [CompilerGeneratedAttribute]
public void set_SkipProvideValueOnRoot(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferUnconvertedDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_PreferUnconvertedDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public Uri get_SourceBamlUri();
    [CompilerGeneratedAttribute]
public void set_SourceBamlUri(Uri value);
    [CompilerGeneratedAttribute]
public XamlAccessLevel get_AccessLevel();
    [CompilerGeneratedAttribute]
public void set_AccessLevel(XamlAccessLevel value);
    internal XamlObjectWriterSettings StripDelegates();
}
public class System.Xaml.XamlParseException : XamlException {
    internal XamlParseException(MeScanner meScanner, string message);
    internal XamlParseException(XamlScanner xamlScanner, string message);
    internal XamlParseException(int lineNumber, int linePosition, string message);
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
    protected XamlParseException(SerializationInfo info, StreamingContext context);
}
internal class System.Xaml.XamlPropertySet : object {
    private Dictionary`2<XamlMember, bool> dictionary;
    public bool Contains(XamlMember member);
    public void Add(XamlMember member);
}
public abstract class System.Xaml.XamlReader : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public XamlNodeType NodeType { get; }
    public bool IsEof { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlMember Member { get; }
    public XamlSchemaContext SchemaContext { get; }
    protected bool IsDisposed { get; private set; }
    public abstract virtual bool Read();
    public abstract virtual XamlNodeType get_NodeType();
    public abstract virtual bool get_IsEof();
    public abstract virtual NamespaceDeclaration get_Namespace();
    public abstract virtual XamlType get_Type();
    public abstract virtual object get_Value();
    public abstract virtual XamlMember get_Member();
    public abstract virtual XamlSchemaContext get_SchemaContext();
    public virtual void Skip();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    protected virtual void Dispose(bool disposing);
    public void Close();
    public virtual XamlReader ReadSubtree();
    private void SkipFromTo(XamlNodeType startNodeType, XamlNodeType endNodeType);
}
public class System.Xaml.XamlReaderSettings : object {
    [CompilerGeneratedAttribute]
private bool <AllowProtectedMembersOnRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProvideLineInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <LocalAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUidsOnPropertyElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValuesMustBeString>k__BackingField;
    public bool AllowProtectedMembersOnRoot { get; public set; }
    public bool ProvideLineInfo { get; public set; }
    public Uri BaseUri { get; public set; }
    public Assembly LocalAssembly { get; public set; }
    public bool IgnoreUidsOnPropertyElements { get; public set; }
    public bool ValuesMustBeString { get; public set; }
    public XamlReaderSettings(XamlReaderSettings settings);
    [CompilerGeneratedAttribute]
public bool get_AllowProtectedMembersOnRoot();
    [CompilerGeneratedAttribute]
public void set_AllowProtectedMembersOnRoot(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProvideLineInfo();
    [CompilerGeneratedAttribute]
public void set_ProvideLineInfo(bool value);
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public Assembly get_LocalAssembly();
    [CompilerGeneratedAttribute]
public void set_LocalAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUidsOnPropertyElements();
    [CompilerGeneratedAttribute]
public void set_IgnoreUidsOnPropertyElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValuesMustBeString();
    [CompilerGeneratedAttribute]
public void set_ValuesMustBeString(bool value);
    private void InitializeProvideLineInfo();
}
internal class System.Xaml.XamlSavedContext : object {
    private XamlSchemaContext _context;
    private XamlContextStack`1<ObjectWriterFrame> _stack;
    private SavedContextType _savedContextType;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    public SavedContextType SaveContextType { get; }
    public XamlContextStack`1<ObjectWriterFrame> Stack { get; }
    public XamlSchemaContext SchemaContext { get; }
    public Uri BaseUri { get; private set; }
    public XamlSavedContext(SavedContextType savedContextType, ObjectWriterContext owContext, XamlContextStack`1<ObjectWriterFrame> stack);
    public SavedContextType get_SaveContextType();
    public XamlContextStack`1<ObjectWriterFrame> get_Stack();
    public XamlSchemaContext get_SchemaContext();
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
private void set_BaseUri(Uri value);
}
public class System.Xaml.XamlSchemaContext : object {
    private static int ConcurrencyLevel;
    private static int DictionaryCapacity;
    private ReadOnlyCollection`1<Assembly> _referenceAssemblies;
    private object _syncExaminingAssemblies;
    private IList`1<string> _nonClrNamespaces;
    private ConcurrentDictionary`2<string, string> _preferredPrefixes;
    private ConcurrentDictionary`2<string, string> _xmlNsCompatDict;
    private ConcurrentDictionary`2<Type, XamlType> _masterTypeList;
    private ConcurrentDictionary`2<ReferenceEqualityTuple`3<Type, XamlType, Type>, object> _masterValueConverterList;
    private ConcurrentDictionary`2<ReferenceEqualityTuple`2<MemberInfo, MemberInfo>, XamlMember> _masterMemberList;
    private ConcurrentDictionary`2<XamlType, Dictionary`2<string, SpecialBracketCharacters>> _masterBracketCharacterCache;
    private XamlSchemaContextSettings _settings;
    private ConcurrentDictionary`2<string, XamlNamespace> _namespaceByUriList;
    private ConcurrentDictionary`2<Assembly, XmlNsInfo> _xmlnsInfo;
    private ConcurrentDictionary`2<WeakRefKey, XmlNsInfo> _xmlnsInfoForDynamicAssemblies;
    private ConcurrentDictionary`2<Assembly, XmlNsInfo> _xmlnsInfoForUnreferencedAssemblies;
    private AssemblyLoadHandler _assemblyLoadHandler;
    private IList`1<Assembly> _unexaminedAssemblies;
    private bool _isGCCallbackPending;
    private object _syncAccessingUnexaminedAssemblies;
    private AssemblyName[] _referenceAssemblyNames;
    private ConcurrentDictionary`2<string, string> XmlNsCompatDict { get; }
    private ConcurrentDictionary`2<XamlType, Dictionary`2<string, SpecialBracketCharacters>> MasterBracketCharacterCache { get; }
    private ConcurrentDictionary`2<Type, XamlType> MasterTypeList { get; }
    private ConcurrentDictionary`2<ReferenceEqualityTuple`3<Type, XamlType, Type>, object> MasterValueConverterList { get; }
    private ConcurrentDictionary`2<ReferenceEqualityTuple`2<MemberInfo, MemberInfo>, XamlMember> MasterMemberList { get; }
    public bool SupportMarkupExtensionsWithDuplicateArity { get; }
    public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }
    public IList`1<Assembly> ReferenceAssemblies { get; }
    private ConcurrentDictionary`2<Assembly, XmlNsInfo> XmlnsInfo { get; }
    private ConcurrentDictionary`2<WeakRefKey, XmlNsInfo> XmlnsInfoForDynamicAssemblies { get; }
    private ConcurrentDictionary`2<string, XamlNamespace> NamespaceByUriList { get; }
    private ConcurrentDictionary`2<Assembly, XmlNsInfo> XmlnsInfoForUnreferencedAssemblies { get; }
    public XamlSchemaContext(XamlSchemaContextSettings settings);
    public XamlSchemaContext(IEnumerable`1<Assembly> referenceAssemblies);
    public XamlSchemaContext(IEnumerable`1<Assembly> referenceAssemblies, XamlSchemaContextSettings settings);
    protected virtual override void Finalize();
    public virtual ICollection`1<XamlType> GetAllXamlTypes(string xamlNamespace);
    public virtual IEnumerable`1<string> GetAllXamlNamespaces();
    public virtual string GetPreferredPrefix(string xmlns);
    private string GetPrefixForClrNs(string clrNs, string assemblyName);
    private void InitializePreferredPrefixes();
    private void UpdatePreferredPrefixes(XmlNsInfo newNamespaces, ConcurrentDictionary`2<string, string> prefixDict);
    public virtual XamlDirective GetXamlDirective(string xamlNamespace, string name);
    public XamlType GetXamlType(XamlTypeName xamlTypeName);
    protected internal virtual XamlType GetXamlType(string xamlNamespace, string name, XamlType[] typeArguments);
    private ConcurrentDictionary`2<string, string> get_XmlNsCompatDict();
    public virtual bool TryGetCompatibleXamlNamespace(string xamlNamespace, String& compatibleNamespace);
    private string GetCompatibleNamespace(string oldNs);
    private ConcurrentDictionary`2<XamlType, Dictionary`2<string, SpecialBracketCharacters>> get_MasterBracketCharacterCache();
    private ConcurrentDictionary`2<Type, XamlType> get_MasterTypeList();
    private ConcurrentDictionary`2<ReferenceEqualityTuple`3<Type, XamlType, Type>, object> get_MasterValueConverterList();
    private ConcurrentDictionary`2<ReferenceEqualityTuple`2<MemberInfo, MemberInfo>, XamlMember> get_MasterMemberList();
    public virtual XamlType GetXamlType(Type type);
    internal XamlType GetXamlType(Type type, string alias);
    internal Dictionary`2<string, SpecialBracketCharacters> InitBracketCharacterCacheForType(XamlType type);
    private Dictionary`2<string, SpecialBracketCharacters> BuildBracketCharacterCacheForType(XamlType type);
    protected internal XamlValueConverter`1<TConverterBase> GetValueConverter(Type converterType, XamlType targetType);
    internal virtual XamlMember GetProperty(PropertyInfo pi);
    internal virtual XamlMember GetEvent(EventInfo ei);
    internal virtual XamlMember GetAttachableProperty(string name, MethodInfo getter, MethodInfo setter);
    internal virtual XamlMember GetAttachableEvent(string name, MethodInfo adder);
    public bool get_SupportMarkupExtensionsWithDuplicateArity();
    public bool get_FullyQualifyAssemblyNamesInClrNamespaces();
    public IList`1<Assembly> get_ReferenceAssemblies();
    private ConcurrentDictionary`2<Assembly, XmlNsInfo> get_XmlnsInfo();
    private ConcurrentDictionary`2<WeakRefKey, XmlNsInfo> get_XmlnsInfoForDynamicAssemblies();
    private ConcurrentDictionary`2<string, XamlNamespace> get_NamespaceByUriList();
    private ConcurrentDictionary`2<Assembly, XmlNsInfo> get_XmlnsInfoForUnreferencedAssemblies();
    internal bool AreInternalsVisibleTo(Assembly fromAssembly, Assembly toAssembly);
    private static void CleanupCollectedAssemblies(object schemaContextWeakRef);
    private void CleanupCollectedAssemblies();
    private void RegisterAssemblyCleanup();
    private IEnumerable`1<XmlNsInfo> EnumerateXmlnsInfos();
    [IteratorStateMachineAttribute("System.Xaml.XamlSchemaContext/<EnumerateStaticAndDynamicXmlnsInfos>d__74")]
private IEnumerable`1<XmlNsInfo> EnumerateStaticAndDynamicXmlnsInfos();
    internal string GetRootNamespace(Assembly asm);
    internal ReadOnlyCollection`1<string> GetXamlNamespaces(XamlType type);
    private XamlNamespace GetXamlNamespace(string xmlns);
    private XmlNsInfo GetXmlNsInfo(Assembly assembly);
    private ReadOnlyCollection`1<string> GetXmlNsMappings(Assembly assembly, string clrNs);
    private void InitializeAssemblyLoadHook();
    private void SchemaContextAssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args);
    private void UpdateXmlNsInfo();
    private bool UpdateXmlNsInfo(XmlNsInfo nsInfo);
    private bool UpdateNamespaceByUriList(XmlNsInfo nsInfo);
    internal static string GetAssemblyShortName(Assembly assembly);
    internal static ConcurrentDictionary`2<K, V> CreateDictionary();
    internal static ConcurrentDictionary`2<K, V> CreateDictionary(IEqualityComparer`1<K> comparer);
    internal static V TryAdd(ConcurrentDictionary`2<K, V> dictionary, K key, V value);
    internal static V TryUpdate(ConcurrentDictionary`2<K, V> dictionary, K key, V value, V comparand);
    protected internal virtual Assembly OnAssemblyResolve(string assemblyName);
    private Assembly ResolveReferenceAssembly(string assemblyName);
    private static bool AssemblySatisfiesReference(AssemblyName assemblyName, AssemblyName reference);
    private Assembly ResolveAssembly(string assemblyName);
}
public class System.Xaml.XamlSchemaContextSettings : object {
    [CompilerGeneratedAttribute]
private bool <SupportMarkupExtensionsWithDuplicateArity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullyQualifyAssemblyNamesInClrNamespaces>k__BackingField;
    public bool SupportMarkupExtensionsWithDuplicateArity { get; public set; }
    public bool FullyQualifyAssemblyNamesInClrNamespaces { get; public set; }
    public XamlSchemaContextSettings(XamlSchemaContextSettings settings);
    [CompilerGeneratedAttribute]
public bool get_SupportMarkupExtensionsWithDuplicateArity();
    [CompilerGeneratedAttribute]
public void set_SupportMarkupExtensionsWithDuplicateArity(bool value);
    [CompilerGeneratedAttribute]
public bool get_FullyQualifyAssemblyNamesInClrNamespaces();
    [CompilerGeneratedAttribute]
public void set_FullyQualifyAssemblyNamesInClrNamespaces(bool value);
}
public class System.Xaml.XamlSchemaException : XamlException {
    public XamlSchemaException(string message);
    public XamlSchemaException(string message, Exception innerException);
    protected XamlSchemaException(SerializationInfo info, StreamingContext context);
}
public static class System.Xaml.XamlServices : object {
    public static object Parse(string xaml);
    public static object Load(string fileName);
    public static object Load(Stream stream);
    public static object Load(TextReader textReader);
    public static object Load(XmlReader xmlReader);
    public static object Load(XamlReader xamlReader);
    public static void Transform(XamlReader xamlReader, XamlWriter xamlWriter);
    public static void Transform(XamlReader xamlReader, XamlWriter xamlWriter, bool closeWriter);
    public static string Save(object instance);
    public static void Save(string fileName, object instance);
    public static void Save(Stream stream, object instance);
    public static void Save(TextWriter writer, object instance);
    public static void Save(XmlWriter writer, object instance);
    public static void Save(XamlWriter writer, object instance);
}
internal class System.Xaml.XamlSubreader : XamlReader {
    private XamlReader _reader;
    private IXamlLineInfo _lineInfoReader;
    private bool _done;
    private bool _firstRead;
    private bool _rootIsStartMember;
    private int _depth;
    private bool IsEmpty { get; }
    public XamlNodeType NodeType { get; }
    public bool IsEof { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlMember Member { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlSubreader(XamlReader reader);
    public virtual bool Read();
    private bool get_IsEmpty();
    public virtual XamlNodeType get_NodeType();
    public virtual bool get_IsEof();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual XamlMember get_Member();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private bool LimitedRead();
}
public class System.Xaml.XamlType : object {
    private string _name;
    private XamlSchemaContext _schemaContext;
    private IList`1<XamlType> _typeArguments;
    private TypeReflector _reflector;
    private NullableReference`1<Type> _underlyingType;
    private ReadOnlyCollection`1<string> _namespaces;
    private ThreeValuedBool _isNameValid;
    public XamlType BaseType { get; }
    public XamlTypeInvoker Invoker { get; }
    public bool IsNameValid { get; }
    public bool IsUnknown { get; }
    public string Name { get; }
    public string PreferredXamlNamespace { get; }
    public IList`1<XamlType> TypeArguments { get; }
    public Type UnderlyingType { get; }
    internal NullableReference`1<Type> UnderlyingTypeInternal { get; }
    public bool ConstructionRequiresArguments { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsGeneric { get; }
    public bool IsMarkupExtension { get; }
    public bool IsNameScope { get; }
    public bool IsNullable { get; }
    public bool IsPublic { get; }
    public bool IsUsableDuringInitialization { get; }
    public bool IsWhitespaceSignificantCollection { get; }
    public bool IsXData { get; }
    public bool TrimSurroundingWhitespace { get; }
    public bool IsAmbient { get; }
    public XamlType KeyType { get; }
    public XamlType ItemType { get; }
    public IList`1<XamlType> AllowedContentTypes { get; }
    public IList`1<XamlType> ContentWrappers { get; }
    public XamlValueConverter`1<TypeConverter> TypeConverter { get; }
    public XamlValueConverter`1<ValueSerializer> ValueSerializer { get; }
    public XamlMember ContentProperty { get; }
    public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; }
    public XamlType MarkupExtensionReturnType { get; }
    public XamlSchemaContext SchemaContext { get; }
    internal bool IsUsableAsReadOnly { get; }
    internal MethodInfo IsReadOnlyMethod { get; }
    internal EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get; }
    internal EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get; }
    internal MethodInfo AddMethod { get; }
    internal MethodInfo GetEnumeratorMethod { get; }
    private bool AreAttributesAvailable { get; }
    private BindingFlags ConstructorBindingFlags { get; }
    protected XamlType(string typeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext);
    public XamlType(string unknownTypeNamespace, string unknownTypeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext);
    public XamlType(Type underlyingType, XamlSchemaContext schemaContext);
    public XamlType(Type underlyingType, XamlSchemaContext schemaContext, XamlTypeInvoker invoker);
    internal XamlType(string alias, Type underlyingType, XamlSchemaContext schemaContext, XamlTypeInvoker invoker, TypeReflector reflector);
    public XamlType get_BaseType();
    public XamlTypeInvoker get_Invoker();
    public bool get_IsNameValid();
    public bool get_IsUnknown();
    public string get_Name();
    public string get_PreferredXamlNamespace();
    public IList`1<XamlType> get_TypeArguments();
    public Type get_UnderlyingType();
    internal NullableReference`1<Type> get_UnderlyingTypeInternal();
    public bool get_ConstructionRequiresArguments();
    public bool get_IsArray();
    public bool get_IsCollection();
    public bool get_IsConstructible();
    public bool get_IsDictionary();
    public bool get_IsGeneric();
    public bool get_IsMarkupExtension();
    public bool get_IsNameScope();
    public bool get_IsNullable();
    public bool get_IsPublic();
    public bool get_IsUsableDuringInitialization();
    public bool get_IsWhitespaceSignificantCollection();
    public bool get_IsXData();
    public bool get_TrimSurroundingWhitespace();
    public bool get_IsAmbient();
    public XamlType get_KeyType();
    public XamlType get_ItemType();
    public IList`1<XamlType> get_AllowedContentTypes();
    public IList`1<XamlType> get_ContentWrappers();
    public XamlValueConverter`1<TypeConverter> get_TypeConverter();
    public XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    public XamlMember get_ContentProperty();
    public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    public XamlType get_MarkupExtensionReturnType();
    public XamlSchemaContext get_SchemaContext();
    public XamlMember GetMember(string name);
    public ICollection`1<XamlMember> GetAllMembers();
    public XamlMember GetAliasedProperty(XamlDirective directive);
    public XamlMember GetAttachableMember(string name);
    public ICollection`1<XamlMember> GetAllAttachableMembers();
    public virtual bool CanAssignTo(XamlType xamlType);
    public IList`1<XamlType> GetPositionalParameters(int parameterCount);
    public virtual IList`1<string> GetXamlNamespaces();
    public virtual string ToString();
    internal bool get_IsUsableAsReadOnly();
    internal MethodInfo get_IsReadOnlyMethod();
    internal EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler();
    internal EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler();
    internal MethodInfo get_AddMethod();
    internal MethodInfo get_GetEnumeratorMethod();
    internal string GetQualifiedName();
    internal bool IsVisibleTo(Assembly accessingAssembly);
    internal ICollection`1<XamlMember> GetAllExcludedReadOnlyMembers();
    internal IEnumerable`1<ConstructorInfo> GetConstructors();
    internal ConstructorInfo GetConstructor(Type[] paramTypes);
    protected virtual XamlMember LookupAliasedProperty(XamlDirective directive);
    protected virtual IList`1<XamlType> LookupAllowedContentTypes();
    protected virtual XamlType LookupBaseType();
    protected virtual XamlCollectionKind LookupCollectionKind();
    protected virtual bool LookupConstructionRequiresArguments();
    protected virtual XamlMember LookupContentProperty();
    protected virtual IList`1<XamlType> LookupContentWrappers();
    protected virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected virtual bool LookupIsConstructible();
    protected virtual XamlTypeInvoker LookupInvoker();
    protected virtual bool LookupIsMarkupExtension();
    protected virtual bool LookupIsNameScope();
    protected virtual bool LookupIsNullable();
    protected virtual bool LookupIsUnknown();
    protected virtual bool LookupIsWhitespaceSignificantCollection();
    protected virtual XamlType LookupKeyType();
    protected virtual XamlType LookupItemType();
    protected virtual XamlType LookupMarkupExtensionReturnType();
    protected virtual IEnumerable`1<XamlMember> LookupAllAttachableMembers();
    protected virtual IEnumerable`1<XamlMember> LookupAllMembers();
    protected virtual XamlMember LookupMember(string name, bool skipReadOnlyCheck);
    protected virtual XamlMember LookupAttachableMember(string name);
    protected virtual IList`1<XamlType> LookupPositionalParameters(int parameterCount);
    protected virtual Type LookupUnderlyingType();
    protected virtual bool LookupIsPublic();
    protected virtual bool LookupIsXData();
    protected virtual bool LookupIsAmbient();
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual XamlValueConverter`1<ValueSerializer> LookupValueSerializer();
    protected virtual bool LookupTrimSurroundingWhitespace();
    protected virtual bool LookupUsableDuringInitialization();
    protected virtual EventHandler`1<XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler();
    protected virtual EventHandler`1<XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler();
    private bool get_AreAttributesAvailable();
    private BindingFlags get_ConstructorBindingFlags();
    private void AppendTypeName(StringBuilder sb, bool forceNsInitialization);
    private void CreateReflector();
    private void EnsureReflector();
    private XamlCollectionKind GetCollectionKind();
    private bool GetFlag(BoolTypeBits flagBit);
    private XamlMember GetPropertyOrUnknown(string propertyName, bool skipReadOnlyCheck);
    private static bool GetDefaultFlag(BoolTypeBits flagBit);
    [IteratorStateMachineAttribute("System.Xaml.XamlType/<GetPublicAndInternalConstructors>d__151")]
private IEnumerable`1<ConstructorInfo> GetPublicAndInternalConstructors();
    internal static ReadOnlyCollection`1<T> GetReadOnly(IList`1<T> list);
    private static ReadOnlyCollection`1<XamlType> GetTypeArguments(IList`1<XamlType> typeArguments);
    private static ReadOnlyCollection`1<XamlType> GetTypeArguments(Type type, XamlSchemaContext schemaContext);
    private static string GetTypeName(Type type);
    private bool IsNullableGeneric();
    private ICollection`1<XamlMember> LookupAllExcludedReadOnlyMembers();
    private Dictionary`2<int, IList`1<XamlType>> LookupAllPositionalParameters();
    private bool LookupBooleanValue(BoolTypeBits typeBit);
    private bool TryGetAttributeString(Type attributeType, String& result);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XamlType other);
    public static bool op_Equality(XamlType xamlType1, XamlType xamlType2);
    public static bool op_Inequality(XamlType xamlType1, XamlType xamlType2);
    private static bool TypeArgumentsAreEqual(XamlType xamlType1, XamlType xamlType2);
}
public abstract class System.Xaml.XamlWriter : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public XamlSchemaContext SchemaContext { get; }
    protected bool IsDisposed { get; private set; }
    public abstract virtual void WriteGetObject();
    public abstract virtual void WriteStartObject(XamlType type);
    public abstract virtual void WriteEndObject();
    public abstract virtual void WriteStartMember(XamlMember xamlMember);
    public abstract virtual void WriteEndMember();
    public abstract virtual void WriteValue(object value);
    public abstract virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public abstract virtual XamlSchemaContext get_SchemaContext();
    public void WriteNode(XamlReader reader);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public void Close();
}
public class System.Xaml.XamlWriterSettings : object {
    public XamlWriterSettings(XamlWriterSettings settings);
}
public class System.Xaml.XamlXmlReader : XamlReader {
    private XamlParserContext _context;
    private IEnumerator`1<XamlNode> _nodeStream;
    private XamlNode _current;
    private LineInfo _currentLineInfo;
    private XamlNode _endOfStreamNode;
    private XamlXmlReaderSettings _mergedSettings;
    public XamlNodeType NodeType { get; }
    public bool IsEof { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlMember Member { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlXmlReader(XmlReader xmlReader);
    public XamlXmlReader(XmlReader xmlReader, XamlXmlReaderSettings settings);
    public XamlXmlReader(XmlReader xmlReader, XamlSchemaContext schemaContext);
    public XamlXmlReader(XmlReader xmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(string fileName);
    public XamlXmlReader(string fileName, XamlXmlReaderSettings settings);
    public XamlXmlReader(string fileName, XamlSchemaContext schemaContext);
    public XamlXmlReader(string fileName, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(Stream stream);
    public XamlXmlReader(Stream stream, XamlXmlReaderSettings settings);
    public XamlXmlReader(Stream stream, XamlSchemaContext schemaContext);
    public XamlXmlReader(Stream stream, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(TextReader textReader);
    public XamlXmlReader(TextReader textReader, XamlXmlReaderSettings settings);
    public XamlXmlReader(TextReader textReader, XamlSchemaContext schemaContext);
    public XamlXmlReader(TextReader textReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    private XmlReader CreateXmlReader(string fileName, XamlXmlReaderSettings settings);
    private XmlReader CreateXmlReader(Stream stream, XamlXmlReaderSettings settings);
    private XmlReader CreateXmlReader(TextReader textReader, XamlXmlReaderSettings settings);
    private void Initialize(XmlReader givenXmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public virtual bool Read();
    public virtual XamlNodeType get_NodeType();
    public virtual bool get_IsEof();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual XamlMember get_Member();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private void ThrowIfDisposed();
    internal bool IsXmlNamespaceSupported(string xmlNamespace, String& newXmlNamespace);
}
public class System.Xaml.XamlXmlReaderSettings : XamlReaderSettings {
    [CompilerGeneratedAttribute]
private string <XmlLang>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlSpacePreserve>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipXmlCompatibilityProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    internal Dictionary`2<string, string> _xmlnsDictionary;
    public string XmlLang { get; public set; }
    public bool XmlSpacePreserve { get; public set; }
    public bool SkipXmlCompatibilityProcessing { get; public set; }
    public bool CloseInput { get; public set; }
    public XamlXmlReaderSettings(XamlXmlReaderSettings settings);
    [CompilerGeneratedAttribute]
public string get_XmlLang();
    [CompilerGeneratedAttribute]
public void set_XmlLang(string value);
    [CompilerGeneratedAttribute]
public bool get_XmlSpacePreserve();
    [CompilerGeneratedAttribute]
public void set_XmlSpacePreserve(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipXmlCompatibilityProcessing();
    [CompilerGeneratedAttribute]
public void set_SkipXmlCompatibilityProcessing(bool value);
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
}
public class System.Xaml.XamlXmlWriter : XamlWriter {
    private WriterState currentState;
    private XmlWriter output;
    private XamlXmlWriterSettings settings;
    private Stack`1<Frame> namespaceScopes;
    private Stack`1<List`1<XamlNode>> meNodesStack;
    private XamlMarkupExtensionWriter meWriter;
    private PositionalParameterStateInfo ppStateInfo;
    private string deferredValue;
    private bool deferredValueIsME;
    private bool isFirstElementOfWhitespaceSignificantCollection;
    private XamlSchemaContext schemaContext;
    private Dictionary`2<string, string> prefixAssignmentHistory;
    public XamlXmlWriterSettings Settings { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlXmlWriter(Stream stream, XamlSchemaContext schemaContext);
    public XamlXmlWriter(Stream stream, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public XamlXmlWriter(TextWriter textWriter, XamlSchemaContext schemaContext);
    public XamlXmlWriter(TextWriter textWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public XamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext);
    public XamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    private void InitializeXamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    protected virtual void Dispose(bool disposing);
    public void Flush();
    public virtual void WriteGetObject();
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteEndMember();
    public virtual void WriteValue(object value);
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public XamlXmlWriterSettings get_Settings();
    public virtual XamlSchemaContext get_SchemaContext();
    private void CheckIsDisposed();
    private static bool StringStartsWithCurly(string s);
    internal static bool IsImplicit(XamlMember xamlMember);
    internal static bool HasSignificantWhitespace(string s);
    internal static bool ContainsLeadingSpace(string s);
    internal static bool ContainsTrailingSpace(string s);
    internal static bool ContainsConsecutiveInnerSpaces(string s);
    internal static bool ContainsWhitespaceThatIsNotSpace(string s);
    private static void WriteXmlSpace(XamlXmlWriter writer);
    private static XamlType GetContainingXamlType(XamlXmlWriter writer);
    private void AssignNamespacePrefix(string ns, string prefix);
    private bool IsShadowed(string ns, string prefix);
    private string FindPrefix(IList`1<string> namespaces, String& chosenNamespace);
    internal string LookupPrefix(IList`1<string> namespaces, String& chosenNamespace);
    private bool IsPrefixEverUsedForAnotherNamespace(string prefix, string ns);
    private string DefinePrefix(string ns);
    private void CheckMemberForUniqueness(XamlMember property);
    private void WriteDeferredNamespaces(XamlNodeType nodeType);
    private void WriteTypeArguments(XamlType type);
    private void WriteUndefinedNamespaces(XamlType type);
    private bool TypeArgumentsContainNamespaceThatNeedsDefinition(XamlType type);
    private string BuildTypeArgumentsString(IList`1<XamlType> typeArguments);
    private string ConvertXamlTypeToString(XamlType typeArgument);
    private void ConvertXamlTypeToStringHelper(XamlType type, StringBuilder builder);
    internal static string GetTypeName(XamlType type);
}
public class System.Xaml.XamlXmlWriterException : XamlException {
    public XamlXmlWriterException(string message);
    public XamlXmlWriterException(string message, Exception innerException);
    protected XamlXmlWriterException(SerializationInfo info, StreamingContext context);
}
public class System.Xaml.XamlXmlWriterSettings : XamlWriterSettings {
    [CompilerGeneratedAttribute]
private bool <AssumeValidInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    public bool AssumeValidInput { get; public set; }
    public bool CloseOutput { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AssumeValidInput();
    [CompilerGeneratedAttribute]
public void set_AssumeValidInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    public XamlXmlWriterSettings Copy();
}
internal class System.Xaml.XmlCompatibilityReader : XmlWrappingReader {
    private bool _inAttribute;
    private string _currentName;
    private IsXmlNamespaceSupportedCallback _namespaceCallback;
    private Dictionary`2<string, object> _knownNamespaces;
    private Dictionary`2<string, string> _namespaceMap;
    private Dictionary`2<string, object> _subsumingNamespaces;
    private Dictionary`2<string, HandleElementCallback> _elementHandler;
    private Dictionary`2<string, HandleAttributeCallback> _attributeHandler;
    private int _depthOffset;
    private int _ignoredAttributeCount;
    private int _attributePosition;
    private string _compatibilityUri;
    private string _alternateContent;
    private string _choice;
    private string _fallback;
    private string _requires;
    private string _ignorable;
    private string _mustUnderstand;
    private string _processContent;
    private string _preserveElements;
    private string _preserveAttributes;
    private CompatibilityScope _compatibilityScope;
    private bool isPreviousElementEmpty;
    private int previousElementDepth;
    private static string XmlnsDeclaration;
    private static string MarkupCompatibilityURI;
    private static String[] _predefinedNamespaces;
    public string Value { get; }
    public string NamespaceURI { get; }
    public int Depth { get; }
    public bool HasAttributes { get; }
    public int AttributeCount { get; }
    unknown bool Normalization {public set; }
    internal Encoding Encoding { get; }
    private CompatibilityScope Scope { get; }
    private string AlternateContent { get; }
    private string Choice { get; }
    private string Fallback { get; }
    private string Requires { get; }
    private string Ignorable { get; }
    private string MustUnderstand { get; }
    private string ProcessContent { get; }
    private string PreserveElements { get; }
    private string PreserveAttributes { get; }
    private string CompatibilityUri { get; }
    public XmlCompatibilityReader(XmlReader baseReader);
    public XmlCompatibilityReader(XmlReader baseReader, IsXmlNamespaceSupportedCallback isXmlNamespaceSupported);
    public XmlCompatibilityReader(XmlReader baseReader, IsXmlNamespaceSupportedCallback isXmlNamespaceSupported, IEnumerable`1<string> supportedNamespaces);
    public XmlCompatibilityReader(XmlReader baseReader, IEnumerable`1<string> supportedNamespaces);
    private static XmlCompatibilityReader();
    public void DeclareNamespaceCompatibility(string newNamespace, string oldNamespace);
    public virtual bool Read();
    private bool ReadStartElement(Boolean& more);
    private bool ReadEndElement(Boolean& more);
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string LookupNamespace(string prefix);
    public virtual string get_Value();
    public virtual string get_NamespaceURI();
    public virtual int get_Depth();
    public virtual bool get_HasAttributes();
    public virtual int get_AttributeCount();
    public void set_Normalization(bool value);
    internal Encoding get_Encoding();
    private void SaveReaderPosition();
    private void RestoreReaderPosition();
    private string GetMappedNamespace(string namespaceName);
    private string MapNewNamespace(string namespaceName);
    private bool IsSubsumingNamespace(string namespaceName);
    private void AddSubsumingNamespace(string namespaceName);
    private bool IsNamespaceKnown(string namespaceName);
    private void AddKnownNamespace(string namespaceName);
    private bool ShouldIgnoreNamespace(string namespaceName);
    [IteratorStateMachineAttribute("System.Xaml.XmlCompatibilityReader/<ParseContentToNamespaceElementPair>d__40")]
private IEnumerable`1<NamespaceElementPair> ParseContentToNamespaceElementPair(string content, string callerContext);
    [IteratorStateMachineAttribute("System.Xaml.XmlCompatibilityReader/<PrefixesToNamespaces>d__41")]
private IEnumerable`1<string> PrefixesToNamespaces(string prefixes);
    private bool SkipToKnownAttribute();
    private void ScanForCompatibility(int elementDepth);
    private void ScanForEndCompatibility(int elementDepth);
    private void PushScope(int elementDepth);
    private void PopScope();
    private void HandleAlternateContent(int elementDepth, Boolean& more);
    private void HandleChoice(int elementDepth, Boolean& more);
    private void HandleFallback(int elementDepth, Boolean& more);
    private void HandleIgnorable(int elementDepth);
    private void HandleMustUnderstand(int elementDepth);
    private void HandleProcessContent(int elementDepth);
    private void HandlePreserveElements(int elementDepth);
    private void HandlePreserveAttributes(int elementDepth);
    private void Error(string message, Object[] args);
    private CompatibilityScope get_Scope();
    private string get_AlternateContent();
    private string get_Choice();
    private string get_Fallback();
    private string get_Requires();
    private string get_Ignorable();
    private string get_MustUnderstand();
    private string get_ProcessContent();
    private string get_PreserveElements();
    private string get_PreserveAttributes();
    private string get_CompatibilityUri();
}
[DefaultMemberAttribute("Item")]
internal class System.Xaml.XmlWrappingReader : XmlReader {
    protected XmlReader _reader;
    protected IXmlLineInfo _readerAsIXmlLineInfo;
    protected IXmlNamespaceResolver _readerAsResolver;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool CanResolveEntity { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    protected XmlReader Reader { get; protected set; }
    internal XmlWrappingReader(XmlReader baseReader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool get_CanResolveEntity();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    protected virtual void Dispose(bool disposing);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    protected XmlReader get_Reader();
    protected void set_Reader(XmlReader value);
}
