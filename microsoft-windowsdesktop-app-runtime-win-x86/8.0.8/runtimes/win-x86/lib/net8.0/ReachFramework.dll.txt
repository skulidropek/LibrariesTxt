internal static class FxResources.ReachFramework.SR : object {
}
internal class Microsoft.Internal.AlphaFlattener.BrushProxy : object {
    private static BrushProxy _blackBrush;
    private static BrushProxy _whiteBrush;
    private Brush _brush;
    private ImageProxy _image;
    private double _opacity;
    private BrushProxy _opacityMask;
    private Rect _bounds;
    private Color _beforeDrawing;
    private Color _afterDrawing;
    private Primitive _drawing;
    private bool _drawingBrushChanged;
    private ArrayList _brushList;
    private bool _opacityOnly;
    private static BrushProxy s_EmptyBrush;
    public Brush Brush { get; }
    public double Opacity { get; public set; }
    public BrushProxy OpacityMask { get; public set; }
    public Color BeforeFill { get; }
    public Color AfterFill { get; }
    public ArrayList BrushList { get; }
    public bool OpacityOnly { get; public set; }
    public BrushTypes BrushType { get; }
    public static BrushProxy EmptyBrush { get; }
    private BrushProxy(Brush brush);
    private static BrushProxy();
    public virtual string ToString();
    public bool MakeBrushAbsolute(Rect bounds);
    public void AddTo(BrushProxy bp);
    public BrushProxy Clone();
    public BrushProxy PushOpacity(double opacity, BrushProxy opacityMask);
    public bool IsOpaque();
    public bool IsTransparent();
    public void ApplyTransform(Matrix trans);
    public BrushProxy ApplyTransformCopy(Matrix trans);
    public BrushProxy BlendBrush(BrushProxy brushB);
    public BitmapSource CreateBrushImage_ID(Matrix mat, int width, int height);
    public Byte[] CreateBrushImage(Matrix mat, int width, int height);
    public Brush GetRealBrush();
    public void UpdateRealBrush(bool selfContained);
    public int GetBrushDepth();
    public double GetDrawingCost(Size size);
    public bool IsWhite();
    public void CloneRealBrush();
    public bool IsViewportCoverBounds(Rect bounds);
    public bool IsTiled(Rect bounds);
    public Primitive GetDrawingPrimitive();
    public void DrawGeometry(DrawingContext dc, Pen pen, Geometry geo);
    private Brush BuildBrush();
    private Rect GetBrushFillBounds();
    private static DrawingBrush CreateDrawingBrush(Drawing drawing, Rect bounds);
    private Brush BuildOpacityBrush();
    private Brush BuildRegularBrush();
    private bool IsDrawingOpaque(Primitive p, Geometry viewbox, Matrix transform);
    private bool IsDrawingTransparent(Primitive p, Geometry viewbox, Matrix drawingToWorldTransformHint);
    internal static bool IsTileCompleteCover(TileBrush brush);
    private BrushProxy BlendImage(Color color, bool pre);
    private BrushProxy BlendDrawingBrush(Color color, bool after);
    private BrushProxy BlendTileBrush(Color color, bool pre);
    private BrushProxy BlendComplexColor(Color color, bool pre);
    private Color BlendStopColor(Color color, Color stopColor, bool pre);
    private static int CalculateBlendingStopCount(GradientBrush brush, int firstIndex, int secondIndex);
    private BrushProxy BlendGradient(Color color, bool pre, ColorInterpolationMode interpolationMode);
    private BrushProxy BlendBrushList(BrushProxy b, bool first);
    private static bool Supercede(Brush brushA, Brush brushB);
    private BrushProxy BlendImageBrush(BrushProxy brushB, bool pre);
    private static GradientStopCollection BlendGradientStops(GradientBrush a, bool opacityOnlyA, GradientBrush b, bool opacityOnlyB);
    private BrushProxy BlendLinearGradientBrush(BrushProxy brushB);
    private BrushProxy BlendRadialGradientBrush(BrushProxy brushB);
    public static bool IsOpaqueWhite(Brush brush);
    public static bool IsOpaqueBlack(Brush brush);
    private static BrushProxy CreateBrushCore(Brush brush, Rect bounds);
    public static BrushProxy CreateColorBrush(Color color);
    public static BrushProxy CreateBrush(Brush brush, Rect bounds);
    public static BrushProxy CreateOpacityMaskBrush(Brush brush, Rect bounds);
    public static BrushProxy CreateUserBrush(Brush brush, Rect bounds, Matrix brushToWorldTransformHint, TreeWalkProgress treeWalkProgress);
    public static bool IsEmpty(Brush brush);
    public static Brush ReduceBrush(Brush brush, Rect bounds, Matrix brushToWorldTransformHint, Size pageSize, TreeWalkProgress treeWalkProgress);
    public static BrushProxy BlendBrush(BrushProxy one, BrushProxy two);
    public static BrushProxy BlendColorWithBrush(bool opacityOnly, Color colorA, BrushProxy brushB, bool reverse);
    public Brush get_Brush();
    public double get_Opacity();
    public void set_Opacity(double value);
    public BrushProxy get_OpacityMask();
    public void set_OpacityMask(BrushProxy value);
    public Color get_BeforeFill();
    public Color get_AfterFill();
    public ArrayList get_BrushList();
    public bool get_OpacityOnly();
    public void set_OpacityOnly(bool value);
    public BrushTypes get_BrushType();
    public static BrushProxy get_EmptyBrush();
}
internal class Microsoft.Internal.AlphaFlattener.BrushProxyDecomposer : object {
    private ILegacyDevice _dc;
    private bool _costing;
    private double _cost;
    public BrushProxyDecomposer(ILegacyDevice dc);
    private bool LinearFillGeometry(BrushProxy linear, BrushProxy other, bool pre, ArrayList brushes, int from, Geometry shape);
    private bool RadialFillGeometry(BrushProxy radial, BrushProxy other, bool pre, ArrayList brushes, int from, Geometry shape);
    private bool FillGeometry(BrushProxy one, ArrayList brushes, int from, Geometry geometry);
    private bool BetterRasterize(BrushProxy brush, Geometry shape);
    private void RasterizeGeometry(BrushProxy brush, Geometry shape);
    private static double DrawGeometryCost(Brush b, Pen p, Geometry g);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Comment(string message);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Push(double opacity, BrushProxy opacityMask);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Pop();
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGeometry(BrushProxy brush, PenProxy pen, Geometry geometry, Geometry clip, Matrix brushTrans, ProxyDrawingFlags flags);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans);
    private sealed virtual override bool Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGlyphs(GlyphRun glyphrun, Geometry clip, Matrix trans, BrushProxy foreground);
}
internal class Microsoft.Internal.AlphaFlattener.CanvasPrimitive : Primitive {
    private ArrayList _children;
    public ArrayList Children { get; }
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public ArrayList get_Children();
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual BrushProxy BlendBrush(BrushProxy brush);
    public virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public virtual bool get_IsOpaque();
    public virtual bool get_IsTransparent();
    protected virtual void CloneMembers();
    protected virtual Rect GetBoundsCore();
    protected virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.Cluster : object {
    private List`1<int> m_primitives;
    private Rect m_bounds;
    private int m_lowestPrimitive;
    public void Render(List`1<PrimitiveInfo> commands, IProxyDrawingContext dc);
    public static void CheckForRasterization(List`1<Cluster> clusters, List`1<PrimitiveInfo> commands);
    public static List`1<Cluster> CalculateCluster(List`1<PrimitiveInfo> commands, int count, bool disjoint, List`1[] oldUnderlay);
    private static PrimitiveIntersectAction GetPrimitiveIntersectAction();
    private void Add(int i, List`1[] underlay, List`1<PrimitiveInfo> commands, Boolean[] addedPrimitives);
    private void MergeWith(Cluster c);
    private bool BetterRasterize(List`1<PrimitiveInfo> commands);
    private static bool CalculateClusterCore(List`1<PrimitiveInfo> commands, int count, bool disjoint, List`1[] oldUnderlay, List`1<Cluster> transparentCluster, Boolean[] addedPrimitives);
}
internal static class Microsoft.Internal.AlphaFlattener.Configuration : object {
    public static bool ForceAlphaOpaque;
    public static bool BlendAlphaWithWhite;
    public static double GradientDecompositionDensity;
    public static bool DisplayPageDebugHeader;
    public static int DecompositionDepth;
    public static int MaximumTransparencyLayer;
    public static int RasterizationDPI;
    public static string OutputFile;
    public static int MaxGradientSteps;
    private static Configuration();
    public static bool SetValue(string key, object val);
    internal static double RasterizationCost(double width, double height);
    internal static double RasterizationCost(double size);
}
internal class Microsoft.Internal.AlphaFlattener.Coordinate : object {
    public double value;
    public int index;
    public bool active;
    public Coordinate top;
    public Coordinate bottom;
    public Coordinate(double v, int i);
}
internal class Microsoft.Internal.AlphaFlattener.CoordinateSearcher : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Internal.AlphaFlattener.DisplayList : object {
    public bool m_DisJoint;
    public double m_width;
    public double m_height;
    protected List`1<PrimitiveInfo> _commands;
    public Rect Item { get; }
    public List`1<PrimitiveInfo> Commands { get; }
    public DisplayList(bool disJoint, double width, double height);
    internal static bool IsWhitePrimitive(Primitive p);
    public void RecordPrimitive(Primitive p);
    public Rect get_Item(int index);
    private static bool OrderedInsert(List`1<int> list, int n);
    public void ReportOverlapping(int one, int two);
    public void CalculateIntersections(int count);
    public List`1<PrimitiveInfo> get_Commands();
}
internal class Microsoft.Internal.AlphaFlattener.DisplayListDrawingContext : object {
    private Flattener _flattener;
    private double _opacity;
    private BrushProxy _opacityMask;
    private Matrix _transform;
    private Geometry _clip;
    private Stack _pushedStack;
    public DisplayListDrawingContext(Flattener flattener, double opacity, BrushProxy opacityMask, Matrix trans, Geometry clip);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Comment(string message);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Push(double opacity, BrushProxy opacityMask);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Pop();
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGeometry(BrushProxy brush, PenProxy pen, Geometry geometry, Geometry clip, Matrix brushTrans, ProxyDrawingFlags flags);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans);
    private sealed virtual override bool Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGlyphs(GlyphRun glyphrun, Geometry clip, Matrix trans, BrushProxy foreground);
}
internal class Microsoft.Internal.AlphaFlattener.FillVisual : DrawingVisual {
    public FillVisual(BrushProxy brush, Matrix mat, int width, int height);
}
internal class Microsoft.Internal.AlphaFlattener.Flattener : object {
    private IProxyDrawingContext _dc;
    private DisplayList _dl;
    public Flattener(bool disJoint, double width, double height);
    public void AddPrimitive(Primitive p);
    public void TreeFlatten(Primitive tree, Geometry clip, Matrix transform, double opacity, BrushProxy opacityMask);
    public void AlphaFlatten(IProxyDrawingContext dc, bool disjoint);
    private void DeleteCommand(int i);
    private static bool BlendCommands(PrimitiveInfo pi, PrimitiveInfo pj);
    private static void SwitchCommands(List`1<PrimitiveInfo> commands, int i, PrimitiveInfo pi, int j, PrimitiveInfo pj, bool disconnect);
    private static void PushTransparencyDown(List`1<PrimitiveInfo> commands, int j);
    private static bool ConvertTransparentOnOpaque(List`1<PrimitiveInfo> commands, int i);
    private static void ReduceTie(PrimitiveInfo pi, List`1<PrimitiveInfo> commands, int i);
    private static List`1[] CopyUnderlay(int count, List`1<PrimitiveInfo> commands);
    private void DisplayListOptimization(List`1<PrimitiveInfo> commands, int count, bool disjoint);
    private void AlphaRender(Primitive primitive, List`1<int> overlapping, int overlapHasTransparency, bool disjoint, string desp);
    public static void Convert(Primitive tree, ILegacyDevice dc, double width, double height, double dpix, double dpiy, Nullable`1<OutputQuality> quality);
}
internal class Microsoft.Internal.AlphaFlattener.GeometryAnalyzer : CapacityStreamGeometryContext {
    private int _count;
    private Matrix _transform;
    private TraversalDirection _rectDirection;
    private Rect _rect;
    private Point _rectFirstPointUntransformed;
    private Point _rectLastPoint;
    private int _rectCornerCount;
    private int _lineSegmentCount;
    private int EstimatedPointCount { get; }
    private bool IsRectangle { get; }
    private bool IsLineSegment { get; }
    private GeometryAnalyzer(Matrix transform, Nullable`1<Rect> checkRectangular);
    public static void Analyze(PathGeometryData geometryData, Int32& estimatedPointCount);
    public static void Analyze(PathGeometryData geometryData, Nullable`1<Rect> checkRectangular, Int32& estimatedPointCount, Boolean& isRectangle, Boolean& isLineSegment);
    private int get_EstimatedPointCount();
    private bool get_IsRectangle();
    private bool get_IsLineSegment();
    private void FinishAnalysis();
    private bool IsRectangleCorner(Point point);
    private void CheckRectangleStart(Point point);
    private void CheckRectanglePoint(Point point);
    private void SetNotRectangle();
    private void AddLineSegments(int count);
    private void SetNotLineSegment();
    private static TraversalDirection GetDirection(Vector vector);
    private static bool ArePerpendicularDirections(TraversalDirection d1, TraversalDirection d2);
    public virtual void BeginFigure(Point startPoint, bool isFilled, bool isClosed);
    public virtual void LineTo(Point point, bool isStroked, bool isSmoothJoin);
    public virtual void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin);
    public virtual void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin);
    public virtual void PolyLineTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyQuadraticBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    internal virtual void SetClosedState(bool closed);
    internal virtual void SetFigureCount(int figureCount);
    internal virtual void SetSegmentCount(int segmentCount);
}
internal class Microsoft.Internal.AlphaFlattener.GeometryPrimitive : Primitive {
    private BrushProxy _brush;
    private PenProxy _pen;
    private Geometry _geometry;
    private Geometry _widenGeometry;
    private static double MyFlatteningTolerance;
    public BrushProxy Brush { get; public set; }
    public PenProxy Pen { get; public set; }
    public Geometry Geometry { get; public set; }
    public Geometry WidenGeometry { get; }
    protected Geometry WidenGeometryCore { get; protected set; }
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public void Widen();
    private static void GetTilingInformation(TileBrush brush, Rect bounds, Rect& startTile, Int32& startScaleX, Int32& startScaleY, Int32& scaleFlipX, Int32& scaleFlipY, Int32& rowCount, Int32& columnCount);
    public Primitive UnfoldDrawingBrush();
    public BrushProxy get_Brush();
    public void set_Brush(BrushProxy value);
    public PenProxy get_Pen();
    public void set_Pen(PenProxy value);
    public Geometry get_Geometry();
    public void set_Geometry(Geometry value);
    public virtual Geometry get_WidenGeometry();
    protected Geometry get_WidenGeometryCore();
    protected void set_WidenGeometryCore(Geometry value);
    private void AbsorbOpacity();
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual BrushProxy BlendBrush(BrushProxy brushA);
    public virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public virtual bool get_IsOpaque();
    public virtual bool get_IsTransparent();
    public virtual void ApplyTransform();
    public virtual bool Optimize();
    public virtual double GetOpacity();
    public virtual void PushOpacity(double opacity, BrushProxy opacityMask);
    protected virtual void CloneMembers();
    protected virtual Rect GetBoundsCore();
    protected virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.GlyphPrimitive : GeometryPrimitive {
    private GlyphRun _glyphRun;
    private Geometry _bounds;
    public GlyphRun GlyphRun { get; public set; }
    public Geometry WidenGeometry { get; }
    public GlyphRun get_GlyphRun();
    public void set_GlyphRun(GlyphRun value);
    public virtual Geometry get_WidenGeometry();
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual void ApplyTransform();
    public virtual bool Optimize();
    protected virtual Rect GetBoundsCore();
}
internal class Microsoft.Internal.AlphaFlattener.GradientColor : object {
    private GradientSpreadMethod _spread;
    private MyColor[] _color;
    private Double[] _offset;
    private int _count;
    private ColorInterpolationMode _ciMode;
    public GradientColor(GradientStopCollection stops, double opacity, GradientSpreadMethod spread, ColorInterpolationMode ciMode);
    public Color GetInvalidGradientColor();
    public Color GetColor(int i, int steps);
    private static double Distance(MyColor c0, MyColor c1);
    public double ColorDistance();
    public int BandSteps(double distance);
    private bool AddStop(double offset, MyColor c);
    private static MyColor InterpolateColor(double offset, double i0, MyColor c0, double i1, MyColor c1);
}
internal class Microsoft.Internal.AlphaFlattener.ImagePrimitive : Primitive {
    private ImageProxy _image;
    private Rect _destRect;
    public ImageProxy Image { get; public set; }
    public Rect DstRect { get; public set; }
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public ImageProxy get_Image();
    public void set_Image(ImageProxy value);
    public Rect get_DstRect();
    public void set_DstRect(Rect value);
    private void AbsorbOpacity();
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual BrushProxy BlendBrush(BrushProxy brush);
    public virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public virtual bool get_IsOpaque();
    public virtual bool get_IsTransparent();
    public virtual bool Optimize();
    public virtual void PushOpacity(double opacity, BrushProxy opacityMask);
    protected virtual void CloneMembers();
    protected virtual Rect GetBoundsCore();
    protected virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.ImageProxy : object {
    private static double MaximumClipRatio;
    private static double MinimumBlendRatio;
    private static int MaximumOpacityMaskViewport;
    protected int _pixelWidth;
    protected int _pixelHeight;
    protected BitmapSource _image;
    protected Byte[] _pixels;
    public BitmapSource Image { get; }
    public Byte[] Buffer { get; }
    public int PixelWidth { get; }
    public int PixelHeight { get; }
    public ImageProxy(BitmapSource image);
    public BitmapSource get_Image();
    public Byte[] get_Buffer();
    public int get_PixelWidth();
    public int get_PixelHeight();
    public void Scale(double scaleX, double scaleY);
    private void Decode();
    private Byte[] GetDecodedPixels(Int32Rect bounds);
    public void PushOpacity(double opacity, BrushProxy opacityMask, Rect rect, Matrix trans);
    public void BlendUnderColor(Color color, double opacity, bool opacityOnly);
    public void BlendOverColor(Color color, double opacity, bool opacityOnly);
    public void BlendUnderBrush(bool opacityOnly, BrushProxy brush, Matrix trans);
    private Byte[] RasterizeBrush(BrushProxy brush, Matrix trans);
    public void BlendOverBrush(bool opacityOnly, BrushProxy brush, Matrix trans);
    internal static int HasAlpha(BitmapSource bitmap);
    public bool IsOpaque();
    public bool IsTransparent();
    public BitmapSource GetImage();
    public BitmapSource GetClippedImage(Rect bounds, Rect& clipBounds);
    public ImageProxy Clone();
}
internal interface Microsoft.Internal.AlphaFlattener.IProxyDrawingContext {
    public abstract virtual void Push(double opacity, BrushProxy opacityMask);
    public abstract virtual void Pop();
    public abstract virtual void DrawGeometry(BrushProxy brush, PenProxy pen, Geometry geometry, Geometry clip, Matrix brushTrans, ProxyDrawingFlags flags);
    public abstract virtual void DrawImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans);
    public abstract virtual bool DrawGlyphs(GlyphRun glyphrun, Geometry clip, Matrix trans, BrushProxy foreground);
    public abstract virtual void Comment(string message);
}
internal class Microsoft.Internal.AlphaFlattener.LinearGradientFlattener : object {
    private bool _valid;
    private Geometry _shape;
    private GradientColor _gradient;
    private Rect _bounds;
    private Matrix _bandTransform;
    private double _bandWidth;
    private int _bandSteps;
    private double _bandDelta;
    private int _left;
    private int _right;
    public int Steps { get; }
    public LinearGradientFlattener(LinearGradientBrush brush, Geometry geometry, double opacity);
    public Geometry GetSlice(int i, Color& color);
    public int get_Steps();
    private static Geometry CreateRotatedRectangle(double x, double y, double w, double h, Matrix mat);
    private static bool TransformGradientToXAxis(LinearGradientBrush brush, Matrix& transform, Double& gradientVectorLength);
}
internal class Microsoft.Internal.AlphaFlattener.MetroDevice0 : object {
    private DeviceState _state;
    private CanvasPrimitive _page;
    private CanvasPrimitive _root;
    private BrushProxy _opacityMask;
    private double _opacity;
    private Geometry _clip;
    private Stack _stack;
    private void AssertState(DeviceState state, DeviceState next);
    public void StartDocument();
    public void EndDocument();
    public void AbortDocument();
    public bool StartPage();
    public void FlushPage(ILegacyDevice sink, double width, double height, Nullable`1<OutputQuality> outputQuality);
    public void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public void DrawImage(ImageSource image, Rect rectangle);
    public void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    public void Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive);
    public void Pop();
}
internal class Microsoft.Internal.AlphaFlattener.MetroToGdiConverter : object {
    protected static object s_TestingHook;
    protected MetroDevice0 m_Flattener;
    protected ILegacyDevice m_GDIExporter;
    protected PrintQueue m_PrintQueue;
    protected PrintTicketConverter m_Converter;
    protected PrintTicketCache m_printTicketCache;
    protected Byte[] m_Devmode;
    protected double m_PageWidth;
    protected double m_PageHeight;
    protected Nullable`1<OutputQuality> m_OutputQuality;
    private static int s_PrintTicketCacheMaxCount;
    public MetroToGdiConverter(PrintQueue queue);
    private Byte[] GetDevmode(PrintTicket ticket, string ticketXMLString);
    private void CaptureTicketSettings(PrintTicket ticket, string ticketXMLString);
    public int StartDocument(string jobName, PrintTicket ticket);
    public void EndDocument();
    public void EndDocument(bool abort);
    public void CreateDeviceContext(string jobName, PrintTicket ticket);
    public void DeleteDeviceContext();
    public void StartDocumentWithoutCreatingDC(string jobName);
    public string ExtEscGetName();
    public bool ExtEscMXDWPassThru();
    public void AbortDocument();
    public void StartPage(PrintTicket ticket);
    public void FlushPage();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawImage(ImageSource image, Rect rectangle);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Pop();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Comment(string message);
    private Byte[] ConvertPrintTicketToDevMode(PrintTicket ticket);
    private void DisposePrintTicketConverter();
    public static void TestingHook(object obj);
}
internal class Microsoft.Internal.AlphaFlattener.MyColor : ValueType {
    public float m_a;
    public float m_r;
    public float m_g;
    public float m_b;
    private MyColor(float a, float r, float g, float b);
    public MyColor(Color c, ColorInterpolationMode ciMode);
    public Color ToColor(ColorInterpolationMode ciMode);
    public static MyColor Interpolate(MyColor c0, float a, MyColor c1, float b);
}
internal class Microsoft.Internal.AlphaFlattener.OutputContext : object {
    private DrawingContext _ctx;
    public OutputContext(DrawingContext context);
    private sealed virtual override void System.Printing.ILegacyDevice.PopClip();
    private sealed virtual override void System.Printing.ILegacyDevice.PopTransform();
    private sealed virtual override void System.Printing.ILegacyDevice.PushClip(Geometry clipGeometry);
    private sealed virtual override void System.Printing.ILegacyDevice.PushTransform(Matrix transform);
    private sealed virtual override int System.Printing.ILegacyDevice.StartDocument(string printerName, string jobName, string filename, Byte[] devmode);
    private sealed virtual override void System.Printing.ILegacyDevice.StartDocumentWithoutCreatingDC(string printerName, string jobName, string filename);
    private sealed virtual override void System.Printing.ILegacyDevice.EndDocument();
    private sealed virtual override void System.Printing.ILegacyDevice.CreateDeviceContext(string printerName, string jobName, Byte[] devmode);
    private sealed virtual override void System.Printing.ILegacyDevice.DeleteDeviceContext();
    private sealed virtual override string System.Printing.ILegacyDevice.ExtEscGetName();
    private sealed virtual override bool System.Printing.ILegacyDevice.ExtEscMXDWPassThru();
    private sealed virtual override void System.Printing.ILegacyDevice.StartPage(Byte[] devmode, int rasterizationDPI);
    private sealed virtual override void System.Printing.ILegacyDevice.DrawGeometry(Brush brush, Pen pen, Brush strokeBrush, Geometry geometry);
    private sealed virtual override void System.Printing.ILegacyDevice.DrawImage(BitmapSource source, Byte[] buffer, Rect rc);
    private sealed virtual override void System.Printing.ILegacyDevice.DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    private sealed virtual override void System.Printing.ILegacyDevice.Comment(string message);
    private sealed virtual override void System.Printing.ILegacyDevice.EndPage();
}
internal class Microsoft.Internal.AlphaFlattener.PenProxy : object {
    private BrushProxy _brush;
    private Pen _pen;
    public BrushProxy StrokeBrush { get; public set; }
    private PenProxy(Pen pen, BrushProxy brush);
    public Pen GetPen(bool ignoreBrushProxy);
    public bool IsOpaque();
    public bool IsTransparent();
    public BrushProxy get_StrokeBrush();
    public void set_StrokeBrush(BrushProxy value);
    public void Scale(double ratio);
    public void PushOpacity(double opacity, BrushProxy opacityMask);
    public PenProxy Clone();
    public static PenProxy CreatePen(Pen pen, Rect bounds);
    public static PenProxy CreateUserPen(Pen pen, Rect bounds, Matrix brushToWorldTransformHint, TreeWalkProgress treeWalkProgress);
    public static bool IsNull(Pen pen);
}
internal abstract class Microsoft.Internal.AlphaFlattener.Primitive : object {
    private Geometry _clip;
    private double _opacity;
    private BrushProxy _opacityMask;
    private Matrix _transform;
    private bool _pixelSnapBounds;
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public Geometry Clip { get; public set; }
    public double Opacity { get; public set; }
    public BrushProxy OpacityMask { get; public set; }
    public Matrix Transform { get; public set; }
    public bool PixelSnapBounds { get; public set; }
    public abstract virtual void OnRender(DrawingContext ctx);
    public abstract virtual Geometry GetShapeGeometry();
    public abstract virtual void Exclude(Geometry g);
    public abstract virtual BrushProxy BlendBrush(BrushProxy brush);
    public abstract virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public abstract virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public abstract virtual bool get_IsOpaque();
    public abstract virtual bool get_IsTransparent();
    public virtual void ApplyTransform();
    public virtual bool Optimize();
    public virtual double GetOpacity();
    public virtual void PushOpacity(double opacity, BrushProxy opacityMask);
    public Primitive Clone();
    public Primitive DeepClone();
    public Geometry GetClippedShapeGeometry();
    public Rect GetRectBounds(bool needed);
    public double GetDrawingCost(Matrix worldTransform);
    public Geometry get_Clip();
    public void set_Clip(Geometry value);
    public double get_Opacity();
    public void set_Opacity(double value);
    public BrushProxy get_OpacityMask();
    public void set_OpacityMask(BrushProxy value);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public bool get_PixelSnapBounds();
    public void set_PixelSnapBounds(bool value);
    internal static Primitive DrawingToPrimitive(Drawing d, Matrix drawingToWorldTransformHint);
    protected int PushAll(DrawingContext dc);
    protected static void PopAll(DrawingContext dc, int levels);
    protected void ExtractOpacity();
    protected virtual void CloneMembers();
    protected abstract virtual Rect GetBoundsCore();
    protected abstract virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.PrimitiveInfo : object {
    public Primitive primitive;
    public Rect bounds;
    public List`1<int> overlap;
    public List`1<int> underlay;
    public int overlapHasTransparency;
    public Cluster m_cluster;
    public PrimitiveInfo(Primitive p);
    public Rect GetClippedBounds();
    public bool FullyCovers(PrimitiveInfo p);
}
internal class Microsoft.Internal.AlphaFlattener.PrimitiveRenderer : object {
    private Geometry _clip;
    private BrushProxy _brush;
    private PenProxy _pen;
    private List`1<int> _overlapping;
    private List`1<PrimitiveInfo> _commands;
    private IProxyDrawingContext _dc;
    private bool _disjoint;
    unknown Geometry Clip {public set; }
    public BrushProxy Brush { get; public set; }
    public PenProxy Pen { get; public set; }
    unknown List`1<int> Overlapping {public set; }
    unknown List`1<PrimitiveInfo> Commands {public set; }
    unknown IProxyDrawingContext DC {public set; }
    unknown bool Disjoint {public set; }
    public void RenderImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans, string desp);
    public void DrawGeometry(Geometry cur, string desp, GeometryPrimitive gp);
    public bool DrawGlyphs(GlyphRun glyphrun, Rect bounds, Matrix trans, string desp);
    public void set_Clip(Geometry value);
    public BrushProxy get_Brush();
    public void set_Brush(BrushProxy value);
    public PenProxy get_Pen();
    public void set_Pen(PenProxy value);
    public void set_Overlapping(List`1<int> value);
    public void set_Commands(List`1<PrimitiveInfo> value);
    public void set_DC(IProxyDrawingContext value);
    public void set_Disjoint(bool value);
    private static Matrix ReverseMap(Matrix trans, Rect dest, double width, double height);
    private void RenderImage(ImageProxy image, Rect dest, Geometry bounds, bool clipToBounds, int start, Matrix trans, string desp);
    private bool FindIntersection(Geometry cur, Int32& start, PrimitiveInfo& topPI, Geometry& topBounds, Geometry& inter);
    private void FillGeometry(Geometry cur, string desp, Geometry curAlt, string despAlt, int start);
    private void FillGeometry(PrimitiveInfo topPI, Geometry cur, string desp, Geometry curAlt, string despAlt, int start, Geometry inter, Geometry topBounds);
}
internal class Microsoft.Internal.AlphaFlattener.PrintTicketCache : object {
    private MostFrequentlyUsedCache`2<string, CachePacket> m_innerCache;
    public PrintTicketCache(int maxEntries);
    public void CachePageSize(string ticket, double width, double height);
    public void CacheDevMode(string ticket, Byte[] devMode);
    public bool TryGetPageSize(string ticket, Double& width, Double& height);
    public bool TryGetDevMode(string ticket, Byte[]& devMode);
    private CachePacket EnsurePacketForKey(string ticket);
}
[FlagsAttribute]
internal enum Microsoft.Internal.AlphaFlattener.ProxyDrawingFlags : Enum {
    public int value__;
    public static ProxyDrawingFlags None;
    public static ProxyDrawingFlags PixelSnapBounds;
}
internal class Microsoft.Internal.AlphaFlattener.RadialGradientFlattener : object {
    private bool _valid;
    private double _x0;
    private double _y0;
    private double _u0;
    private double _v0;
    private double _rx;
    private double _ry;
    private Geometry _shape;
    private GradientColor _gradient;
    private Matrix _trans;
    private int _bandSteps;
    private int _left;
    private int _right;
    public int Steps { get; }
    public RadialGradientFlattener(RadialGradientBrush b, Geometry shape, double opacity);
    public Geometry GetSlice(int i, Color& color);
    public int get_Steps();
    private void PointIntersectWithRing(Point p, Double& mint, Double& maxt, Boolean& missing);
    private void LineSegmentIntersectWithRing(Point p0, Point p1, Double& mint);
    private static int BoundedInt(double v);
}
internal class Microsoft.Internal.AlphaFlattener.RectangleIntersection : object {
    protected Coordinate[] _xCoord;
    protected int _xCount;
    protected Coordinate[] _yCoord;
    protected int _yCount;
    private static Coordinate[] RemoveDuplication(Coordinate[] values);
    private void AddPoint(int i, int index, double x, double y);
    private void SortEndPoints(DisplayList dl, int count);
    private void OrthogonalLineSegmentIntersection(DisplayList dl);
    private void BatchedRangeSearch(DisplayList dl);
    public void CalculateIntersections(DisplayList dl, int count);
}
internal class Microsoft.Internal.AlphaFlattener.SegmentTree : object {
    private double _min;
    private double _max;
    private SegmentTree _left;
    private SegmentTree _right;
    private List`1<int> _sList;
    public SegmentTree(Coordinate[] coord, int from, int count);
    public void Remove(int index, double x0, double x1);
    public void Insert(int index, double x0, double x1);
    public void ReportIntersection(DisplayList dl, int index, double x);
}
internal static class Microsoft.Internal.AlphaFlattener.Utility : object {
    private static double OpaqueEnough;
    private static double AlmostTransparent;
    private static double Epsilon;
    private static double GeometryMinimumDimension;
    private static double XpsMaxDouble;
    private static double XpsMinDouble;
    public static double TransparencyCostFactor;
    private static double Tolerance_960_dpi;
    private static int VisualRasterizeBandPixelLimit;
    [FriendAccessAllowedAttribute]
public static bool DisplayPageDebugHeader { get; }
    public static Rect TransformRect(Rect r, Matrix t);
    public static bool IsOne(double value);
    public static bool IsZero(double value);
    public static bool AreClose(double v1, double v2);
    public static bool AreClose(Point p1, Point p2);
    public static bool AreClose(Vector v1, Vector v2);
    public static bool AreClose(Size s1, Size s2);
    public static bool AreClose(Rect r1, Rect r2);
    public static bool IsMultipleOf(double v1, double v2);
    public static bool IsScaleTranslate(Matrix transform);
    public static bool HasUniformScale(Matrix mat, Double& scale);
    public static double Hypotenuse(double x, double y);
    public static double GetScaleX(Matrix matrix);
    public static double GetScaleY(Matrix matrix);
    public static double GetScale(Matrix trans);
    public static bool IsIdentity(Matrix mat);
    public static bool IsIdentity(Transform transform);
    public static Matrix MergeTransform(Transform trans, Transform relative, Rect bounds);
    public static Point MapPoint(Rect bounds, Point p);
    public static Transform MultiplyTransform(Transform trans1, Transform trans2);
    public static Matrix CreateMappingTransform(Rect r1, Rect r2);
    public static Matrix CreateMappingTransform(Rect r1, double width, double height);
    public static Geometry TransformGeometry(Geometry g, Matrix t);
    public static Geometry TransformGeometry(Geometry g, Transform t);
    public static Geometry InverseTransformGeometry(Geometry g, Matrix mat);
    public static bool IsEmpty(Geometry shape, Matrix mat);
    [FriendAccessAllowedAttribute]
public static PathGeometry GetAsPathGeometry(Geometry geo);
    [FriendAccessAllowedAttribute]
public static bool IsRectangle(Geometry geometry);
    private static bool IsRectangle(StreamGeometry geometry);
    private static bool IsRectangle(PathGeometry geometry);
    public static bool IsLineSegment(Geometry geometry);
    public static double GetGeometryCost(Geometry g);
    public static bool FullyCovers(Geometry one, Geometry two);
    public static bool Covers(Geometry one, Geometry two);
    public static Geometry Intersect(Geometry one, Geometry two, Matrix mat, Boolean& empty);
    public static Geometry Exclude(Geometry one, Geometry two, Matrix mat);
    public static bool Disjoint(Geometry clip, Rect rect);
    public static int GetGeometryPointCount(Geometry geometry);
    [FriendAccessAllowedAttribute]
public static int GetGeometryDataPointCount(PathGeometryData geometryData);
    [FriendAccessAllowedAttribute]
public static int GetPathPointCount(PathGeometry geometry);
    [FriendAccessAllowedAttribute]
public static int GetPathPointCount(PathFigure figure);
    [FriendAccessAllowedAttribute]
public static int GetPathPointCount(PathSegment segment);
    private static Geometry Combine(Geometry one, Geometry two, GeometryCombineMode mode, Matrix mat);
    private static bool IsOnRectangle(Point start, Point p, Point q, int n);
    public static double GetOpacity(Brush brush);
    public static bool IsOpaque(double opacity);
    public static bool IsTransparent(double opacity);
    public static bool IsBrushOpaque(Brush brush);
    public static byte OpacityToByte(double value);
    public static byte ColorToByte(float value);
    public static Color BlendColor(Color x, Color y);
    public static Color Scale(Color color, double opacity);
    private static byte Div255(int val);
    public static void BlendOverColor(Byte[] pixels, int count, Color colorX, double opacity, bool opacityOnly);
    public static void BlendUnderColor(Byte[] pixels, int count, Color colorY, double opacity, bool opacityOnly);
    public static void BlendPixels(Byte[] pixelsA, bool opacityOnlyA, Byte[] pixelsB, bool opacityOnlyB, int count, Byte[] pixelsC);
    public static Byte[] ClipPixels(Byte[] pixels, int width, int height, int x0, int y0, int clipWidth, int clipHeight);
    internal static bool NeedPremultiplyAlpha(BitmapSource bitmapSource);
    public static bool ExtractOpacityMaskOpacity(Brush brush, Double& opacity, Rect maskBounds);
    public static DrawingBrush CreateNonInheritingDrawingBrush(Drawing drawing);
    public static Rect GetTileContentBounds(TileBrush brush);
    public static Rect GetTileAbsoluteViewbox(TileBrush brush);
    public static Rect GetTileAbsoluteViewport(TileBrush brush, Rect bounds);
    public static Matrix CreateViewboxToViewportTransform(TileBrush brush, Rect viewbox, Rect viewport);
    public static Matrix CreateViewboxToViewportTransform(TileBrush brush);
    public static Matrix CreateViewboxToViewportTransform(TileBrush brush, Rect bounds);
    [FriendAccessAllowedAttribute]
public static Uri GetFontUri(GlyphTypeface typeface);
    public static Transform GetVisualTransform(Visual visual);
    private static void GetBitmapPixelDimensions(double width, double height, double dpiX, double dpiY, Int32& pixelWidth, Int32& pixelHeight);
    private static bool GetVisualRasterizationBitmapInfo(Rect visualBounds, Matrix visualToWorldTransformHint, Double& bitmapWidth, Double& bitmapHeight, Double& bitmapDpiX, Double& bitmapDpiY);
    private static BitmapSource RasterizeVisual(Visual visual, Rect visualBounds, double bitmapWidth, double bitmapHeight, double bitmapDpiX, double bitmapDpiY, Matrix& bitmapToVisualTransform);
    private static Visual CreateVisualFromDrawing(Drawing drawing);
    public static BitmapSource RasterizeVisual(Visual visual, Rect visualBounds, Matrix visualToWorldTransformHint, Matrix& bitmapToVisualTransform);
    public static BitmapSource RasterizeDrawing(Drawing drawing, Rect drawingBounds, Matrix drawingToWorldTransformHint, Matrix& bitmapToDrawingTransform);
    public static bool IsRenderVisible(Rect rect);
    public static bool IsValidViewbox(Rect rect, bool hasStretch);
    public static bool IsRenderVisible(Point point);
    public static bool IsRenderVisible(Size size);
    public static bool IsRenderVisible(double value);
    public static bool IsRenderVisible(DrawingGroup drawing);
    public static bool IsValid(double value);
    public static bool IsValid(Point point);
    public static bool IsValid(Size size);
    public static bool IsValid(Rect rect);
    public static bool IsValid(Matrix matrix);
    public static bool IsFinite(double value);
    public static bool IsFinite(Point point);
    public static bool IsFinite(Size size);
    public static bool IsFinite(Rect rect);
    public static double NormalizeOpacity(double value, double goodValue);
    private static float NormalizeColorChannel(float value, float goodValue);
    public static double NormalizeOpacity(double value);
    private static float NormalizeColorChannel(float value);
    private static float NormalizeOpacityIfChanged(float value);
    private static float NormalizeColorChannelIfChanged(float value);
    public static Color NormalizeColor(Color color);
    public static bool get_DisplayPageDebugHeader();
}
internal class MS.Internal.Printing.Configuration.BorderlessOption : PrintCapabilityOption {
    internal PageBorderless _value;
    public PageBorderless Value { get; }
    internal BorderlessOption(PrintCapabilityFeature ownerFeature);
    public PageBorderless get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.CanvasImageableArea : object {
    internal ImageableSizeCapability _ownerProperty;
    internal int _originWidth;
    internal int _originHeight;
    internal int _extentWidth;
    internal int _extentHeight;
    public double OriginWidth { get; }
    public double OriginHeight { get; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    internal CanvasImageableArea(ImageableSizeCapability ownerProperty);
    public double get_OriginWidth();
    public double get_OriginHeight();
    public double get_ExtentWidth();
    public double get_ExtentHeight();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.CollateCapability : PrintCapabilityFeature {
    internal Collection`1<CollateOption> _collateOptions;
    public Collection`1<CollateOption> CollateOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal CollateCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<CollateOption> get_CollateOptions();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.CollateOption : PrintCapabilityOption {
    internal Collation _value;
    public Collation Value { get; }
    internal CollateOption(PrintCapabilityFeature ownerFeature);
    public Collation get_Value();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.CollateSetting : PrintTicketFeature {
    public Collation Value { get; public set; }
    internal CollateSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public Collation get_Value();
    public void set_Value(Collation value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.COMPSTUISR : object {
    private SafeModuleHandle _compstuiHandle;
    public static UInt32 IDS_NULL;
    public static UInt32 IDS_CPSUI_FALSE;
    public static UInt32 IDS_CPSUI_TRUE;
    public static UInt32 IDS_CPSUI_NO;
    public static UInt32 IDS_CPSUI_YES;
    public static UInt32 IDS_CPSUI_OFF;
    public static UInt32 IDS_CPSUI_ON;
    public static UInt32 IDS_CPSUI_NONE;
    public static UInt32 IDS_CPSUI_ORIENTATION;
    public static UInt32 IDS_CPSUI_SCALING;
    public static UInt32 IDS_CPSUI_NUM_OF_COPIES;
    public static UInt32 IDS_CPSUI_SOURCE;
    public static UInt32 IDS_CPSUI_PRINTQUALITY;
    public static UInt32 IDS_CPSUI_RESOLUTION;
    public static UInt32 IDS_CPSUI_COLOR_APPERANCE;
    public static UInt32 IDS_CPSUI_DUPLEX;
    public static UInt32 IDS_CPSUI_TTOPTION;
    public static UInt32 IDS_CPSUI_FORMNAME;
    public static UInt32 IDS_CPSUI_ICM;
    public static UInt32 IDS_CPSUI_ICMMETHOD;
    public static UInt32 IDS_CPSUI_ICMINTENT;
    public static UInt32 IDS_CPSUI_MEDIA;
    public static UInt32 IDS_CPSUI_DITHERING;
    public static UInt32 IDS_CPSUI_PORTRAIT;
    public static UInt32 IDS_CPSUI_LANDSCAPE;
    public static UInt32 IDS_CPSUI_ROT_LAND;
    public static UInt32 IDS_CPSUI_COLLATE;
    public static UInt32 IDS_CPSUI_COLLATED;
    public static UInt32 IDS_CPSUI_DRAFT;
    public static UInt32 IDS_CPSUI_LOW;
    public static UInt32 IDS_CPSUI_MEDIUM;
    public static UInt32 IDS_CPSUI_HIGH;
    public static UInt32 IDS_CPSUI_PRESENTATION;
    public static UInt32 IDS_CPSUI_COLOR;
    public static UInt32 IDS_CPSUI_GRAYSCALE;
    public static UInt32 IDS_CPSUI_MONOCHROME;
    public static UInt32 IDS_CPSUI_SIMPLEX;
    public static UInt32 IDS_CPSUI_HORIZONTAL;
    public static UInt32 IDS_CPSUI_VERTICAL;
    public static UInt32 IDS_CPSUI_LONG_SIDE;
    public static UInt32 IDS_CPSUI_SHORT_SIDE;
    public static UInt32 IDS_CPSUI_TT_PRINTASGRAPHIC;
    public static UInt32 IDS_CPSUI_TT_DOWNLOADSOFT;
    public static UInt32 IDS_CPSUI_TT_DOWNLOADVECT;
    public static UInt32 IDS_CPSUI_TT_SUBDEV;
    public static UInt32 IDS_CPSUI_ICM_BLACKWHITE;
    public static UInt32 IDS_CPSUI_ICM_NO;
    public static UInt32 IDS_CPSUI_ICM_YES;
    public static UInt32 IDS_CPSUI_ICM_SATURATION;
    public static UInt32 IDS_CPSUI_ICM_CONTRAST;
    public static UInt32 IDS_CPSUI_ICM_COLORMETRIC;
    public static UInt32 IDS_CPSUI_STANDARD;
    public static UInt32 IDS_CPSUI_GLOSSY;
    public static UInt32 IDS_CPSUI_TRANSPARENCY;
    public static UInt32 IDS_CPSUI_UPPER_TRAY;
    public static UInt32 IDS_CPSUI_ONLYONE;
    public static UInt32 IDS_CPSUI_LOWER_TRAY;
    public static UInt32 IDS_CPSUI_MIDDLE_TRAY;
    public static UInt32 IDS_CPSUI_MANUAL_TRAY;
    public static UInt32 IDS_CPSUI_ENVELOPE_TRAY;
    public static UInt32 IDS_CPSUI_ENVMANUAL_TRAY;
    public static UInt32 IDS_CPSUI_TRACTOR_TRAY;
    public static UInt32 IDS_CPSUI_SMALLFMT_TRAY;
    public static UInt32 IDS_CPSUI_LARGEFMT_TRAY;
    public static UInt32 IDS_CPSUI_LARGECAP_TRAY;
    public static UInt32 IDS_CPSUI_CASSETTE_TRAY;
    public static UInt32 IDS_CPSUI_DEFAULT_TRAY;
    public static UInt32 IDS_CPSUI_FORMSOURCE;
    public static UInt32 IDS_CPSUI_MANUALFEED;
    public static UInt32 IDS_CPSUI_COPIES;
    public static UInt32 IDS_CPSUI_QUALITY_SETTINGS;
    public static UInt32 IDS_CPSUI_QUALITY_DRAFT;
    public static UInt32 IDS_CPSUI_QUALITY_BETTER;
    public static UInt32 IDS_CPSUI_QUALITY_BEST;
    public static UInt32 IDS_CPSUI_QUALITY_CUSTOM;
    public static UInt32 IDS_CPSUI_OUTPUTBIN;
    public static UInt32 IDS_CPSUI_NUP;
    private static UInt32 IDS_CPSUI_STRID_FIRST;
    private static UInt32 IDS_CPSUI_STRID_LAST;
    private static LoadLibraryExFlags SafeLoadLibraryFlags;
    private static int MaxSRLength;
    public string Get(UInt32 srid);
    public void Release();
    private SafeModuleHandle EnsureModuleHandle();
}
internal class MS.Internal.Printing.Configuration.DC_PAPER_SIZE : ValueType {
    public int Width;
    public int Height;
    public DC_PAPER_SIZE(int width, int height);
}
internal class MS.Internal.Printing.Configuration.DC_RESOLUTION : ValueType {
    public int x;
    public int y;
    public DC_RESOLUTION(int x, int y);
}
internal enum MS.Internal.Printing.Configuration.DeviceCap : Enum {
    public int value__;
    public static DeviceCap HORZRES;
    public static DeviceCap VERTRES;
    public static DeviceCap LOGPIXELSX;
    public static DeviceCap LOGPIXELSY;
    public static DeviceCap PHYSICALWIDTH;
    public static DeviceCap PHYSICALHEIGHT;
    public static DeviceCap PHYSICALOFFSETX;
    public static DeviceCap PHYSICALOFFSETY;
}
internal enum MS.Internal.Printing.Configuration.DeviceCapability : Enum {
    public short value__;
    public static DeviceCapability DC_FIELDS;
    public static DeviceCapability DC_PAPERS;
    public static DeviceCapability DC_PAPERSIZE;
    public static DeviceCapability DC_MINEXTENT;
    public static DeviceCapability DC_MAXEXTENT;
    public static DeviceCapability DC_BINS;
    public static DeviceCapability DC_DUPLEX;
    public static DeviceCapability DC_SIZE;
    public static DeviceCapability DC_EXTRA;
    public static DeviceCapability DC_VERSION;
    public static DeviceCapability DC_DRIVER;
    public static DeviceCapability DC_BINNAMES;
    public static DeviceCapability DC_ENUMRESOLUTIONS;
    public static DeviceCapability DC_TRUETYPE;
    public static DeviceCapability DC_PAPERNAMES;
    public static DeviceCapability DC_ORIENTATION;
    public static DeviceCapability DC_COPIES;
    public static DeviceCapability DC_COLLATE;
    public static DeviceCapability DC_MEDIAREADY;
    public static DeviceCapability DC_STAPLE;
    public static DeviceCapability DC_COLORDEVICE;
    public static DeviceCapability DC_NUP;
    public static DeviceCapability DC_MEDIATYPENAMES;
    public static DeviceCapability DC_MEDIATYPES;
}
internal class MS.Internal.Printing.Configuration.DeviceFontSubstitutionOption : PrintCapabilityOption {
    internal DeviceFontSubstitution _value;
    public DeviceFontSubstitution Value { get; }
    internal DeviceFontSubstitutionOption(PrintCapabilityFeature ownerFeature);
    public DeviceFontSubstitution get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.DevMode : object {
    private Byte[] _byteData;
    private bool _isDevModeW;
    private static int CCHDEVICENAME;
    private static int CCHFORMNAME;
    private static int WINVER_0x0000_FixedByteSize;
    private static ushort WINVER_0x0500_DM_SPECVERSION;
    private static int WINVER_0x0500_FixedByteSize;
    public static int MinDEVMODEA_ByteSize;
    public static int DEVMODEA_dmSizeByteOffset;
    public static int DEVMODEA_dmDriverExtraByteOffset;
    public static int MinDEVMODEW_ByteSize;
    public static int DEVMODEW_dmSizeByteOffset;
    public static int DEVMODEW_dmDriverExtraByteOffset;
    public Byte[] ByteData { get; private set; }
    public string DeviceName { get; public set; }
    public ushort SpecVersion { get; private set; }
    public ushort DriverVersion { get; }
    public ushort Size { get; private set; }
    public ushort DriverExtra { get; public set; }
    public DevModeFields Fields { get; public set; }
    public DevModeOrientation Orientation { get; public set; }
    public short PaperSize { get; public set; }
    public short PaperLength { get; public set; }
    public short PaperWidth { get; public set; }
    public short Scale { get; public set; }
    public short Copies { get; public set; }
    public short DefaultSource { get; public set; }
    public short PrintQuality { get; public set; }
    public DevModeColor Color { get; public set; }
    public DevModeDuplex Duplex { get; public set; }
    public short YResolution { get; public set; }
    public DevModeTrueTypeOption TTOption { get; public set; }
    public DevModeCollate Collate { get; public set; }
    public string FormName { get; public set; }
    public DevModeNUp Nup { get; public set; }
    public DevModeICMMethod ICMMethod { get; public set; }
    public UInt32 ICMIntent { get; public set; }
    public UInt32 MediaType { get; public set; }
    public UInt32 DitherType { get; public set; }
    private int dmDeviceNameByteSize { get; }
    private int dmFormNameByteSize { get; }
    private int dmDeviceNameByteOffset { get; }
    private int dmSpecVersionByteOffset { get; }
    private int dmDriverVersionByteOffset { get; }
    private int dmSizeByteOffset { get; }
    private int dmDriverExtraByteOffset { get; }
    private int dmFieldsByteOffset { get; }
    private int dmOrientationByteOffset { get; }
    private int dmPaperSizeByteOffset { get; }
    private int dmPaperLengthByteOffset { get; }
    private int dmPaperWidthByteOffset { get; }
    private int dmScaleByteOffset { get; }
    private int dmCopiesByteOffset { get; }
    private int dmDefaultSourceByteOffset { get; }
    private int dmPrintQualityByteOffset { get; }
    private int dmColorByteOffset { get; }
    private int dmDuplexByteOffset { get; }
    private int dmYResolutionByteOffset { get; }
    private int dmTTOptionByteOffset { get; }
    private int dmCollateByteOffset { get; }
    private int dmFormNameByteOffset { get; }
    private int dmNupByteOffset { get; }
    private int dmICMMethodByteOffset { get; }
    private int dmICMIntentByteOffset { get; }
    private int dmMediaTypeByteOffset { get; }
    private int dmDitherTypeByteOffset { get; }
    public DevMode(Byte[] devModeBytes);
    public Byte[] get_ByteData();
    private void set_ByteData(Byte[] value);
    public string get_DeviceName();
    public void set_DeviceName(string value);
    public ushort get_SpecVersion();
    private void set_SpecVersion(ushort value);
    public ushort get_DriverVersion();
    public ushort get_Size();
    private void set_Size(ushort value);
    public ushort get_DriverExtra();
    public void set_DriverExtra(ushort value);
    public DevModeFields get_Fields();
    public void set_Fields(DevModeFields value);
    public DevModeOrientation get_Orientation();
    public void set_Orientation(DevModeOrientation value);
    public short get_PaperSize();
    public void set_PaperSize(short value);
    public short get_PaperLength();
    public void set_PaperLength(short value);
    public short get_PaperWidth();
    public void set_PaperWidth(short value);
    public short get_Scale();
    public void set_Scale(short value);
    public short get_Copies();
    public void set_Copies(short value);
    public short get_DefaultSource();
    public void set_DefaultSource(short value);
    public short get_PrintQuality();
    public void set_PrintQuality(short value);
    public DevModeColor get_Color();
    public void set_Color(DevModeColor value);
    public DevModeDuplex get_Duplex();
    public void set_Duplex(DevModeDuplex value);
    public short get_YResolution();
    public void set_YResolution(short value);
    public DevModeTrueTypeOption get_TTOption();
    public void set_TTOption(DevModeTrueTypeOption value);
    public DevModeCollate get_Collate();
    public void set_Collate(DevModeCollate value);
    public string get_FormName();
    public void set_FormName(string value);
    public DevModeNUp get_Nup();
    public void set_Nup(DevModeNUp value);
    public DevModeICMMethod get_ICMMethod();
    public void set_ICMMethod(DevModeICMMethod value);
    public UInt32 get_ICMIntent();
    public void set_ICMIntent(UInt32 value);
    public UInt32 get_MediaType();
    public void set_MediaType(UInt32 value);
    public UInt32 get_DitherType();
    public void set_DitherType(UInt32 value);
    public void EnsureInitialized();
    public DevMode Clone();
    public bool IsFieldSet(DevModeFields field);
    public bool IsAnyFieldSet(DevModeFields fields);
    public void Copy(DevMode src, DevModeFields fields);
    public static DevMode FromIntPtr(IntPtr devModeWPointer);
    public bool CompatibleCopy(DevMode ticketDevMode);
    public static bool AreCompatible(DevMode a, DevMode b);
    private int get_dmDeviceNameByteSize();
    private int get_dmFormNameByteSize();
    private void SetField(DevModeFields field);
    private ushort ReadWORD(int byteOffset);
    private UInt32 ReadDWORD(int byteOffset);
    private void WriteWORD(int byteOffset, ushort value);
    private void WriteDWORD(int byteOffset, UInt32 value);
    private static void Copy(DevModeFields mask, DevModeFields field, T value, Action`1<T> setter);
    private string ReadChars(int byteOffset, int maxCharCount);
    private void WriteChars(int byteOffset, int maxCharsToWrite, string value);
    private void WriteUTF16Char(int ptr, int charOffset, char ch);
    private char ReadUTF16Char(int ptr, int charOffset);
    private void WriteAsciiChar(int ptr, int charOffset, char ch);
    private char ReadAsciiChar(int ptr, int charOffset);
    private static int BytesPerCharCode(bool isDevModeW);
    private int GetVariableByteSize(bool isDevModeW);
    private bool HasValidSize(bool isDevModeW);
    private static bool IsAscii(char ch);
    private int get_dmDeviceNameByteOffset();
    private int get_dmSpecVersionByteOffset();
    private int get_dmDriverVersionByteOffset();
    private int get_dmSizeByteOffset();
    private int get_dmDriverExtraByteOffset();
    private int get_dmFieldsByteOffset();
    private int get_dmOrientationByteOffset();
    private int get_dmPaperSizeByteOffset();
    private int get_dmPaperLengthByteOffset();
    private int get_dmPaperWidthByteOffset();
    private int get_dmScaleByteOffset();
    private int get_dmCopiesByteOffset();
    private int get_dmDefaultSourceByteOffset();
    private int get_dmPrintQualityByteOffset();
    private int get_dmColorByteOffset();
    private int get_dmDuplexByteOffset();
    private int get_dmYResolutionByteOffset();
    private int get_dmTTOptionByteOffset();
    private int get_dmCollateByteOffset();
    private int get_dmFormNameByteOffset();
    private int get_dmNupByteOffset();
    private int get_dmICMMethodByteOffset();
    private int get_dmICMIntentByteOffset();
    private int get_dmMediaTypeByteOffset();
    private int get_dmDitherTypeByteOffset();
    [CompilerGeneratedAttribute]
private void <Copy>b__83_0(DevModeOrientation value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_1(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_2(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_3(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_4(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_5(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_6(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_7(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_8(DevModeColor value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_9(DevModeDuplex value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_10(short value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_11(DevModeTrueTypeOption value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_12(DevModeCollate value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_13(string value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_14(DevModeNUp value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_15(DevModeICMMethod value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_16(UInt32 value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_17(UInt32 value);
    [CompilerGeneratedAttribute]
private void <Copy>b__83_18(UInt32 value);
}
internal enum MS.Internal.Printing.Configuration.DevModeCollate : Enum {
    public short value__;
    public static DevModeCollate DMCOLLATE_FALSE;
    public static DevModeCollate DMCOLLATE_TRUE;
}
internal enum MS.Internal.Printing.Configuration.DevModeColor : Enum {
    public short value__;
    public static DevModeColor DMCOLOR_MONOCHROME;
    public static DevModeColor DMCOLOR_COLOR;
}
internal static class MS.Internal.Printing.Configuration.DevModeDitherTypes : object {
    public static UInt32 DMDITHER_NONE;
    public static UInt32 DMDITHER_COARSE;
    public static UInt32 DMDITHER_FINE;
    public static UInt32 DMDITHER_LINEART;
    public static UInt32 DMDITHER_ERRORDIFFUSION;
    public static UInt32 DMDITHER_GRAYSCALE;
    private static DevModeDitherTypes();
}
internal enum MS.Internal.Printing.Configuration.DevModeDuplex : Enum {
    public short value__;
    public static DevModeDuplex DMDUP_SIMPLEX;
    public static DevModeDuplex DMDUP_VERTICAL;
    public static DevModeDuplex DMDUP_HORIZONTAL;
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.DevModeFields : Enum {
    public UInt32 value__;
    public static DevModeFields DM_ORIENTATION;
    public static DevModeFields DM_PAPERSIZE;
    public static DevModeFields DM_PAPERLENGTH;
    public static DevModeFields DM_PAPERWIDTH;
    public static DevModeFields DM_SCALE;
    public static DevModeFields DM_POSITION;
    public static DevModeFields DM_NUP;
    public static DevModeFields DM_DISPLAYORIENTATION;
    public static DevModeFields DM_COPIES;
    public static DevModeFields DM_DEFAULTSOURCE;
    public static DevModeFields DM_PRINTQUALITY;
    public static DevModeFields DM_COLOR;
    public static DevModeFields DM_DUPLEX;
    public static DevModeFields DM_YRESOLUTION;
    public static DevModeFields DM_TTOPTION;
    public static DevModeFields DM_COLLATE;
    public static DevModeFields DM_FORMNAME;
    public static DevModeFields DM_LOGPIXELS;
    public static DevModeFields DM_BITSPERPEL;
    public static DevModeFields DM_PELSWIDTH;
    public static DevModeFields DM_PELSHEIGHT;
    public static DevModeFields DM_DISPLAYFLAGS;
    public static DevModeFields DM_DISPLAYFREQUENCY;
    public static DevModeFields DM_ICMMETHOD;
    public static DevModeFields DM_ICMINTENT;
    public static DevModeFields DM_MEDIATYPE;
    public static DevModeFields DM_DITHERTYPE;
    public static DevModeFields DM_DISPLAYFIXEDOUTPUT;
    public static DevModeFields All;
}
internal static class MS.Internal.Printing.Configuration.DevModeICMIntents : object {
    public static UInt32 DMICM_SATURATE;
    public static UInt32 DMICM_CONTRAST;
    public static UInt32 DMICM_COLORIMETRIC;
    public static UInt32 DMICM_ABS_COLORIMETRIC;
    private static DevModeICMIntents();
}
internal enum MS.Internal.Printing.Configuration.DevModeICMMethod : Enum {
    public UInt32 value__;
    public static DevModeICMMethod DMICMMETHOD_NONE;
    public static DevModeICMMethod DMICMMETHOD_SYSTEM;
    public static DevModeICMMethod DMICMMETHOD_DRIVER;
    public static DevModeICMMethod DMICMMETHOD_DEVICE;
}
internal static class MS.Internal.Printing.Configuration.DevModeMediaTypes : object {
    public static UInt32 DMMEDIA_STANDARD;
    public static UInt32 DMMEDIA_TRANSPARENCY;
    public static UInt32 DMMEDIA_GLOSSY;
    private static UInt32 DMMEDIA_USER;
    private static DevModeMediaTypes();
    public static bool IsCustom(short mediaTypeCode);
}
internal enum MS.Internal.Printing.Configuration.DevModeNUp : Enum {
    public UInt32 value__;
    public static DevModeNUp DMNUP_SYSTEM;
    public static DevModeNUp DMNUP_ONEUP;
}
internal enum MS.Internal.Printing.Configuration.DevModeOrientation : Enum {
    public short value__;
    public static DevModeOrientation DMORIENT_PORTRAIT;
    public static DevModeOrientation DMORIENT_LANDSCAPE;
}
internal static class MS.Internal.Printing.Configuration.DevModePaperSizes : object {
    public static short DMPAPER_LETTER;
    public static short DMPAPER_LEGAL;
    public static short DMPAPER_LEGAL_EXTRA;
    public static short DMPAPER_9X11;
    public static short DMPAPER_10X11;
    public static short DMPAPER_10X14;
    public static short DMPAPER_11X17;
    public static short DMPAPER_12X11;
    public static short DMPAPER_A_PLUS;
    public static short DMPAPER_A2;
    public static short DMPAPER_A3;
    public static short DMPAPER_A3_EXTRA;
    public static short DMPAPER_A3_ROTATED;
    public static short DMPAPER_A4;
    public static short DMPAPER_A4_EXTRA;
    public static short DMPAPER_A4_ROTATED;
    public static short DMPAPER_A4SMALL;
    public static short DMPAPER_A4_PLUS;
    public static short DMPAPER_A5;
    public static short DMPAPER_A5_EXTRA;
    public static short DMPAPER_A5_ROTATED;
    public static short DMPAPER_A6;
    public static short DMPAPER_A6_ROTATED;
    public static short DMPAPER_B4;
    public static short DMPAPER_B_PLUS;
    public static short DMPAPER_B4_JIS_ROTATED;
    public static short DMPAPER_B5;
    public static short DMPAPER_B5_JIS_ROTATED;
    public static short DMPAPER_B6_JIS;
    public static short DMPAPER_B6_JIS_ROTATED;
    public static short DMPAPER_CSHEET;
    public static short DMPAPER_JAPANESE_POSTCARD;
    public static short DMPAPER_DBL_JAPANESE_POSTCARD;
    public static short DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED;
    public static short DMPAPER_DSHEET;
    public static short DMPAPER_ENV_9;
    public static short DMPAPER_ENV_10;
    public static short DMPAPER_ENV_11;
    public static short DMPAPER_ENV_12;
    public static short DMPAPER_ENV_14;
    public static short DMPAPER_ENV_C5;
    public static short DMPAPER_ENV_C3;
    public static short DMPAPER_ENV_C4;
    public static short DMPAPER_ENV_C6;
    public static short DMPAPER_ENV_C65;
    public static short DMPAPER_ENV_B4;
    public static short DMPAPER_ENV_B5;
    public static short DMPAPER_ENV_B6;
    public static short DMPAPER_ENV_DL;
    public static short DMPAPER_ENV_ITALY;
    public static short DMPAPER_ENV_MONARCH;
    public static short DMPAPER_ENV_PERSONAL;
    public static short DMPAPER_ESHEET;
    public static short DMPAPER_EXECUTIVE;
    public static short DMPAPER_FANFOLD_US;
    public static short DMPAPER_FANFOLD_STD_GERMAN;
    public static short DMPAPER_FANFOLD_LGL_GERMAN;
    public static short DMPAPER_FOLIO;
    public static short DMPAPER_JAPANESE_POSTCARD_ROTATED;
    public static short DMPAPER_JENV_CHOU3;
    public static short DMPAPER_JENV_CHOU3_ROTATED;
    public static short DMPAPER_JENV_CHOU4;
    public static short DMPAPER_JENV_CHOU4_ROTATED;
    public static short DMPAPER_JENV_KAKU2;
    public static short DMPAPER_JENV_KAKU2_ROTATED;
    public static short DMPAPER_JENV_KAKU3;
    public static short DMPAPER_JENV_KAKU3_ROTATED;
    public static short DMPAPER_JENV_YOU4;
    public static short DMPAPER_JENV_YOU4_ROTATED;
    public static short DMPAPER_LEDGER;
    public static short DMPAPER_LETTER_EXTRA;
    public static short DMPAPER_LETTER_ROTATED;
    public static short DMPAPER_LETTERSMALL;
    public static short DMPAPER_NOTE;
    public static short DMPAPER_P16K;
    public static short DMPAPER_P16K_ROTATED;
    public static short DMPAPER_P32K;
    public static short DMPAPER_P32K_ROTATED;
    public static short DMPAPER_P32KBIG;
    public static short DMPAPER_P32KBIG_ROTATED;
    public static short DMPAPER_PENV_1;
    public static short DMPAPER_PENV_1_ROTATED;
    public static short DMPAPER_PENV_2;
    public static short DMPAPER_PENV_2_ROTATED;
    public static short DMPAPER_PENV_3;
    public static short DMPAPER_PENV_3_ROTATED;
    public static short DMPAPER_PENV_4;
    public static short DMPAPER_PENV_4_ROTATED;
    public static short DMPAPER_PENV_5;
    public static short DMPAPER_PENV_5_ROTATED;
    public static short DMPAPER_PENV_6;
    public static short DMPAPER_PENV_6_ROTATED;
    public static short DMPAPER_PENV_7;
    public static short DMPAPER_PENV_7_ROTATED;
    public static short DMPAPER_PENV_8;
    public static short DMPAPER_PENV_8_ROTATED;
    public static short DMPAPER_PENV_9;
    public static short DMPAPER_PENV_9_ROTATED;
    public static short DMPAPER_PENV_10;
    public static short DMPAPER_PENV_10_ROTATED;
    public static short DMPAPER_QUARTO;
    public static short DMPAPER_STATEMENT;
    public static short DMPAPER_TABLOID;
    public static short DMPAPER_TABLOID_EXTRA;
    private static short DMPAPER_USER;
    public static bool IsCustom(short paperSizeCode);
}
internal static class MS.Internal.Printing.Configuration.DevModePaperSources : object {
    public static short DMBIN_UPPER;
    public static short DMBIN_LOWER;
    public static short DMBIN_MIDDLE;
    public static short DMBIN_MANUAL;
    public static short DMBIN_ENVELOPE;
    public static short DMBIN_ENVMANUAL;
    public static short DMBIN_AUTO;
    public static short DMBIN_TRACTOR;
    public static short DMBIN_SMALLFMT;
    public static short DMBIN_LARGEFMT;
    public static short DMBIN_LARGECAPACITY;
    public static short DMBIN_CASSETTE;
    public static short DMBIN_FORMSOURCE;
}
internal static class MS.Internal.Printing.Configuration.DevModeResolutions : object {
    public static short DMRES_HIGH;
    public static short DMRES_MEDIUM;
    public static short DMRES_LOW;
    public static short DMRES_DRAFT;
    public static bool IsCustom(short xResolution);
}
internal enum MS.Internal.Printing.Configuration.DevModeTrueTypeOption : Enum {
    public short value__;
    public static DevModeTrueTypeOption DMTT_BITMAP;
    public static DevModeTrueTypeOption DMTT_DOWNLOAD;
    public static DevModeTrueTypeOption DMTT_SUBDEV;
    public static DevModeTrueTypeOption DMTT_DOWNLOAD_OUTLINE;
}
internal class MS.Internal.Printing.Configuration.DocumentCollateCapability : CollateCapability {
    internal string FeatureName { get; }
    internal DocumentCollateCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.DocumentCollateSetting : CollateSetting {
    internal DocumentCollateSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.DocumentInputBinCapability : InputBinCapability {
    internal string FeatureName { get; }
    internal DocumentInputBinCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.DocumentInputBinSetting : InputBinSetting {
    internal DocumentInputBinSetting(InternalPrintTicket ownerPrintTicket);
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.DocumentPropertiesFlags : Enum {
    public UInt32 value__;
    public static DocumentPropertiesFlags None;
    public static DocumentPropertiesFlags DM_IN_BUFFER;
    public static DocumentPropertiesFlags DM_OUT_BUFFER;
}
internal abstract class MS.Internal.Printing.Configuration.DuplexCapability : PrintCapabilityFeature {
    internal Collection`1<DuplexOption> _duplexOptions;
    public Collection`1<DuplexOption> DuplexOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal DuplexCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<DuplexOption> get_DuplexOptions();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.DuplexOption : PrintCapabilityOption {
    internal Duplexing _value;
    public Duplexing Value { get; }
    internal DuplexOption(PrintCapabilityFeature ownerFeature);
    public Duplexing get_Value();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.DuplexSetting : PrintTicketFeature {
    public Duplexing Value { get; public set; }
    internal DuplexSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public Duplexing get_Value();
    public void set_Value(Duplexing value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.FallbackPTProvider : PTProviderBase {
    private string _deviceName;
    private string _driverName;
    private string _portName;
    private ushort _driverVersion;
    private SafeWinSpoolPrinterHandle _deviceHandle;
    private string _printTicketNamespace;
    private bool _disposed;
    private static string DeviceNamespaceFormat;
    private string OemDriverNamespace { get; }
    public FallbackPTProvider(string deviceName, int maxVersion, int clientVersion);
    public virtual MemoryStream GetPrintCapabilities(MemoryStream printTicket);
    public virtual MemoryStream MergeAndValidatePrintTicket(MemoryStream basePrintTicket, MemoryStream deltaPrintTicket, PrintTicketScope scope, ConflictStatus& conflictStatus);
    public virtual MemoryStream ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public virtual Byte[] ConvertPrintTicketToDevMode(MemoryStream printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    public virtual void Release();
    private string get_OemDriverNamespace();
    private bool Validate(DevMode devMode);
    private void PrintTicketToDevMode(DevMode devMode, InternalPrintTicket ticket, PrintTicketScope scope, DevModeFields supportedFields);
    private InternalPrintTicket DevModeToPrintTicket(DevMode devmode, PrintTicketScope scope, DevModeFields supportedFields);
    private WinSpoolPrinterCapabilities GetCapabilities(DevMode devMode);
    private void SetDocumentProperties(Byte[] devModeBytes, bool biDirectional);
    private DevMode GetDEVMODE(BaseDevModeType baseType);
    private PRINTER_INFO_2 GetPrinterInfo2W();
    private PRINTER_INFO_8_AND_9 GetPrinterInfo8Or9W(bool getPrinterInfo8);
    private bool GetPrinterW(UInt32 dwLevel, Action`1<HGlobalBuffer> action);
    private void VerifyAccess();
    protected virtual void Dispose(bool disposing);
}
internal class MS.Internal.Printing.Configuration.FixedMediaSizeOption : PrintCapabilityOption {
    internal PageMediaSizeName _value;
    internal int _mediaSizeWidth;
    internal int _mediaSizeHeight;
    public PageMediaSizeName Value { get; }
    public double MediaSizeWidth { get; }
    public double MediaSizeHeight { get; }
    internal FixedMediaSizeOption(PrintCapabilityFeature ownerFeature);
    public PageMediaSizeName get_Value();
    public double get_MediaSizeWidth();
    public double get_MediaSizeHeight();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.HGlobalBuffer : object {
    public static HGlobalBuffer Null;
    [CompilerGeneratedAttribute]
private SafeMemoryHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public SafeMemoryHandle Handle { get; private set; }
    public int Length { get; private set; }
    public HGlobalBuffer(int length);
    private static HGlobalBuffer();
    [CompilerGeneratedAttribute]
public SafeMemoryHandle get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(SafeMemoryHandle value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public void Release();
}
internal class MS.Internal.Printing.Configuration.ImageableSizeCapability : PrintCapabilityRootProperty {
    internal int _imageableSizeWidth;
    internal int _imageableSizeHeight;
    internal CanvasImageableArea _imageableArea;
    public double ImageableSizeWidth { get; }
    public double ImageableSizeHeight { get; }
    public CanvasImageableArea ImageableArea { get; }
    public double get_ImageableSizeWidth();
    public double get_ImageableSizeHeight();
    public CanvasImageableArea get_ImageableArea();
    public virtual string ToString();
    internal sealed virtual bool BuildProperty(XmlPrintCapReader reader);
}
internal abstract class MS.Internal.Printing.Configuration.InputBinCapability : PrintCapabilityFeature {
    internal Collection`1<InputBinOption> _inputBins;
    public Collection`1<InputBinOption> InputBins { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal InputBinCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<InputBinOption> get_InputBins();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.InputBinOption : PrintCapabilityOption {
    internal InputBin _value;
    public InputBin Value { get; }
    internal InputBinOption(PrintCapabilityFeature ownerFeature);
    public InputBin get_Value();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.InputBinSetting : PrintTicketFeature {
    public InputBin Value { get; public set; }
    internal InputBinSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public InputBin get_Value();
    public void set_Value(InputBin value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.InternalPrintCapabilities : object {
    internal Object[] _pcRootFeatures;
    internal ParameterDefinition[] _pcLocalParamDefs;
    private int _countRootFeatures;
    private int _countLocalParamDefs;
    private Boolean[] _baLocalParamRequired;
    private PrintCapBuilder _builder;
    public DocumentCollateCapability DocumentCollateCapability { get; }
    public JobDuplexCapability JobDuplexCapability { get; }
    public JobNUpCapability JobNUpCapability { get; }
    public JobStapleCapability JobStapleCapability { get; }
    public PageDeviceFontSubstitutionCapability PageDeviceFontSubstitutionCapability { get; }
    public PageMediaSizeCapability PageMediaSizeCapability { get; }
    public PageMediaTypeCapability PageMediaTypeCapability { get; }
    public PageOrientationCapability PageOrientationCapability { get; }
    public PageOutputColorCapability PageOutputColorCapability { get; }
    public PageResolutionCapability PageResolutionCapability { get; }
    public PageScalingCapability PageScalingCapability { get; }
    public PageTrueTypeFontModeCapability PageTrueTypeFontModeCapability { get; }
    public JobPageOrderCapability JobPageOrderCapability { get; }
    public PagePhotoPrintingIntentCapability PagePhotoPrintingIntentCapability { get; }
    public PageBorderlessCapability PageBorderlessCapability { get; }
    public PageOutputQualityCapability PageOutputQualityCapability { get; }
    public JobInputBinCapability JobInputBinCapability { get; }
    public DocumentInputBinCapability DocumentInputBinCapability { get; }
    public PageInputBinCapability PageInputBinCapability { get; }
    public JobCopyCountCapability JobCopyCountCapability { get; }
    public ImageableSizeCapability PageImageableSizeCapability { get; }
    public InternalPrintCapabilities(Stream xmlStream);
    public bool SupportsCapability(CapabilityName feature);
    public DocumentCollateCapability get_DocumentCollateCapability();
    public JobDuplexCapability get_JobDuplexCapability();
    public JobNUpCapability get_JobNUpCapability();
    public JobStapleCapability get_JobStapleCapability();
    public PageDeviceFontSubstitutionCapability get_PageDeviceFontSubstitutionCapability();
    public PageMediaSizeCapability get_PageMediaSizeCapability();
    public PageMediaTypeCapability get_PageMediaTypeCapability();
    public PageOrientationCapability get_PageOrientationCapability();
    public PageOutputColorCapability get_PageOutputColorCapability();
    public PageResolutionCapability get_PageResolutionCapability();
    public PageScalingCapability get_PageScalingCapability();
    public PageTrueTypeFontModeCapability get_PageTrueTypeFontModeCapability();
    public JobPageOrderCapability get_JobPageOrderCapability();
    public PagePhotoPrintingIntentCapability get_PagePhotoPrintingIntentCapability();
    public PageBorderlessCapability get_PageBorderlessCapability();
    public PageOutputQualityCapability get_PageOutputQualityCapability();
    public JobInputBinCapability get_JobInputBinCapability();
    public DocumentInputBinCapability get_DocumentInputBinCapability();
    public PageInputBinCapability get_PageInputBinCapability();
    public JobCopyCountCapability get_JobCopyCountCapability();
    public ImageableSizeCapability get_PageImageableSizeCapability();
    internal static FormatException NewPrintCapFormatException(string detailMsg);
    internal static FormatException NewPrintCapFormatException(string detailMsg, Exception innerException);
    internal void SetLocalParameterDefAsRequired(int paramDefIndex, bool isRequired);
    private void PostBuildProcessing();
}
internal class MS.Internal.Printing.Configuration.InternalPrintTicket : object {
    private XmlDocument _xmlDoc;
    private XmlNamespaceManager _nsMgr;
    private DocumentCollateSetting _docCollate;
    private JobDuplexSetting _jobDuplex;
    private JobNUpSetting _jobNUp;
    private JobStapleSetting _jobStaple;
    private PageDeviceFontSubstitutionSetting _pageDeviceFontSubst;
    private PageMediaSizeSetting _pageMediaSize;
    private PageMediaTypeSetting _pageMediaType;
    private PageOrientationSetting _pageOrientation;
    private PageOutputColorSetting _pageOutputColor;
    private PageResolutionSetting _pageResolution;
    private PageScalingSetting _pageScaling;
    private PageTrueTypeFontModeSetting _pageTrueTypeFontMode;
    private JobPageOrderSetting _jobPageOrder;
    private PagePhotoPrintingIntentSetting _pagePhotoIntent;
    private PageBorderlessSetting _pageBorderless;
    private PageOutputQualitySetting _pageOutputQuality;
    private JobInputBinSetting _jobInputBin;
    private DocumentInputBinSetting _documentInputBin;
    private PageInputBinSetting _pageInputBin;
    private JobCopyCountSetting _jobCopyCount;
    public DocumentCollateSetting DocumentCollate { get; }
    public JobDuplexSetting JobDuplex { get; }
    public JobNUpSetting JobNUp { get; }
    public JobStapleSetting JobStaple { get; }
    public PageDeviceFontSubstitutionSetting PageDeviceFontSubstitution { get; }
    public PageMediaSizeSetting PageMediaSize { get; }
    public PageMediaTypeSetting PageMediaType { get; }
    public PageOrientationSetting PageOrientation { get; }
    public PageOutputColorSetting PageOutputColor { get; }
    public PageResolutionSetting PageResolution { get; }
    public PageScalingSetting PageScaling { get; }
    public PageTrueTypeFontModeSetting PageTrueTypeFontMode { get; }
    public JobPageOrderSetting JobPageOrder { get; }
    public PagePhotoPrintingIntentSetting PagePhotoPrintingIntent { get; }
    public PageBorderlessSetting PageBorderless { get; }
    public PageOutputQualitySetting PageOutputQuality { get; }
    public JobInputBinSetting JobInputBin { get; }
    public DocumentInputBinSetting DocumentInputBin { get; }
    public PageInputBinSetting PageInputBin { get; }
    public JobCopyCountSetting JobCopyCount { get; }
    public MemoryStream XmlStream { get; }
    internal XmlDocument XmlDoc { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    public InternalPrintTicket(Stream xmlStream);
    public InternalPrintTicket Clone();
    public void SaveTo(Stream outStream);
    public DocumentCollateSetting get_DocumentCollate();
    public JobDuplexSetting get_JobDuplex();
    public JobNUpSetting get_JobNUp();
    public JobStapleSetting get_JobStaple();
    public PageDeviceFontSubstitutionSetting get_PageDeviceFontSubstitution();
    public PageMediaSizeSetting get_PageMediaSize();
    public PageMediaTypeSetting get_PageMediaType();
    public PageOrientationSetting get_PageOrientation();
    public PageOutputColorSetting get_PageOutputColor();
    public PageResolutionSetting get_PageResolution();
    public PageScalingSetting get_PageScaling();
    public PageTrueTypeFontModeSetting get_PageTrueTypeFontMode();
    public JobPageOrderSetting get_JobPageOrder();
    public PagePhotoPrintingIntentSetting get_PagePhotoPrintingIntent();
    public PageBorderlessSetting get_PageBorderless();
    public PageOutputQualitySetting get_PageOutputQuality();
    public JobInputBinSetting get_JobInputBin();
    public DocumentInputBinSetting get_DocumentInputBin();
    public PageInputBinSetting get_PageInputBin();
    public JobCopyCountSetting get_JobCopyCount();
    public MemoryStream get_XmlStream();
    internal static FormatException NewPTFormatException(string detailMsg);
    internal static FormatException NewPTFormatException(string detailMsg, Exception innerException);
    internal PrintTicketFeature GetBasePTFeatureObject(CapabilityName feature);
    internal XmlDocument get_XmlDoc();
    internal XmlNamespaceManager get_NamespaceManager();
    private void SetupNamespaceManager();
}
internal class MS.Internal.Printing.Configuration.JobCopyCountCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.JobCopyCountSetting : PrintTicketParameter {
    public int Value { get; public set; }
    internal JobCopyCountSetting(InternalPrintTicket ownerPrintTicket);
    public int get_Value();
    public void set_Value(int value);
    public virtual string ToString();
    internal sealed virtual void SettingClearCallback();
}
internal class MS.Internal.Printing.Configuration.JobDuplexCapability : DuplexCapability {
    internal string FeatureName { get; }
    internal JobDuplexCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobDuplexSetting : DuplexSetting {
    internal JobDuplexSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.JobInputBinCapability : InputBinCapability {
    internal string FeatureName { get; }
    internal JobInputBinCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobInputBinSetting : InputBinSetting {
    internal JobInputBinSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.JobNUpCapability : NUpCapability {
    internal string FeatureName { get; }
    internal JobNUpCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobNUpSetting : NUpSetting {
    internal JobNUpSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.JobPageOrderCapability : PrintCapabilityFeature {
    internal Collection`1<PageOrderOption> _orderOptions;
    public Collection`1<PageOrderOption> PageOrderOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal JobPageOrderCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<PageOrderOption> get_PageOrderOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.JobPageOrderSetting : PrintTicketFeature {
    public PageOrder Value { get; public set; }
    internal JobPageOrderSetting(InternalPrintTicket ownerPrintTicket);
    public PageOrder get_Value();
    public void set_Value(PageOrder value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.JobStapleCapability : StapleCapability {
    internal string FeatureName { get; }
    internal JobStapleCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobStapleSetting : StapleSetting {
    internal JobStapleSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.LengthParameterDefinition : NonNegativeIntParameterDefinition {
    public double MaxValue { get; }
    public double MinValue { get; }
    public double DefaultValue { get; }
    public double get_MaxValue();
    public double get_MinValue();
    public double get_DefaultValue();
    public virtual string ToString();
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.LoadLibraryExFlags : Enum {
    public UInt32 value__;
    public static LoadLibraryExFlags LOAD_LIBRARY_AS_IMAGE_RESOURCE;
    public static LoadLibraryExFlags LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE;
}
internal class MS.Internal.Printing.Configuration.MediaTypeOption : PrintCapabilityOption {
    internal PageMediaType _value;
    public PageMediaType Value { get; }
    internal MediaTypeOption(PrintCapabilityFeature ownerFeature);
    public PageMediaType get_Value();
    public virtual string ToString();
}
internal enum MS.Internal.Printing.Configuration.NativeErrorCode : Enum {
    public UInt32 value__;
    public static NativeErrorCode S_PT_NO_CONFLICT;
    public static NativeErrorCode S_PT_CONFLICT_RESOLVED;
    public static NativeErrorCode E_XML_INVALID;
    public static NativeErrorCode E_PRINTTICKET_FORMAT;
    public static NativeErrorCode E_DELTA_PRINTTICKET_FORMAT;
    public static NativeErrorCode E_NOTIMPL;
}
internal class MS.Internal.Printing.Configuration.NonNegativeIntParameterDefinition : ParameterDefinition {
    internal int _maxValue;
    internal int _minValue;
    internal int _defaultValue;
    public int MaxValue { get; }
    public int MinValue { get; }
    public int DefaultValue { get; }
    internal bool IsValid { get; }
    public int get_MaxValue();
    public int get_MinValue();
    public int get_DefaultValue();
    public virtual string ToString();
    internal sealed virtual bool ParamDefPropCallback(ParameterDefinition baseParam, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
}
internal abstract class MS.Internal.Printing.Configuration.NUpCapability : PrintCapabilityFeature {
    internal Collection`1<NUpOption> _nUps;
    internal NUpPresentationDirectionCapability _presentationDirectionCap;
    public Collection`1<NUpOption> NUps { get; }
    public bool SupportsPresentationDirection { get; }
    public NUpPresentationDirectionCapability PresentationDirectionCapability { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal NUpCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<NUpOption> get_NUps();
    public bool get_SupportsPresentationDirection();
    public NUpPresentationDirectionCapability get_PresentationDirectionCapability();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.NUpOption : PrintCapabilityOption {
    internal int _pagesPerSheet;
    public int PagesPerSheet { get; }
    internal NUpOption(PrintCapabilityFeature ownerFeature);
    public int get_PagesPerSheet();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.NUpPresentationDirectionCapability : PrintCapabilityFeature {
    internal Collection`1<NUpPresentationDirectionOption> _presentationDirections;
    public Collection`1<NUpPresentationDirectionOption> PresentationDirections { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal NUpPresentationDirectionCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<NUpPresentationDirectionOption> get_PresentationDirections();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.NUpPresentationDirectionOption : PrintCapabilityOption {
    internal PagesPerSheetDirection _value;
    public PagesPerSheetDirection Value { get; }
    internal NUpPresentationDirectionOption(PrintCapabilityFeature ownerFeature);
    public PagesPerSheetDirection get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.NUpPresentationDirectionSetting : PrintTicketFeature {
    public PagesPerSheetDirection Value { get; public set; }
    internal NUpPresentationDirectionSetting(InternalPrintTicket ownerPrintTicket);
    public PagesPerSheetDirection get_Value();
    public void set_Value(PagesPerSheetDirection value);
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.NUpSetting : PrintTicketFeature {
    private NUpPresentationDirectionSetting _presentationDirection;
    public int PagesPerSheet { get; public set; }
    public NUpPresentationDirectionSetting PresentationDirection { get; }
    internal NUpSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public int get_PagesPerSheet();
    public void set_PagesPerSheet(int value);
    public NUpPresentationDirectionSetting get_PresentationDirection();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.OrientationOption : PrintCapabilityOption {
    internal PageOrientation _value;
    public PageOrientation Value { get; }
    internal OrientationOption(PrintCapabilityFeature ownerFeature);
    public PageOrientation get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.OutputColorOption : PrintCapabilityOption {
    internal OutputColor _value;
    public OutputColor Value { get; }
    internal OutputColorOption(PrintCapabilityFeature ownerFeature);
    public OutputColor get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.OutputQualityOption : PrintCapabilityOption {
    internal OutputQuality _value;
    public OutputQuality Value { get; }
    internal OutputQualityOption(PrintCapabilityFeature ownerFeature);
    public OutputQuality get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageBorderlessCapability : PrintCapabilityFeature {
    internal Collection`1<BorderlessOption> _borderlessOptions;
    public Collection`1<BorderlessOption> BorderlessOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageBorderlessCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<BorderlessOption> get_BorderlessOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageBorderlessSetting : PrintTicketFeature {
    public PageBorderless Value { get; public set; }
    internal PageBorderlessSetting(InternalPrintTicket ownerPrintTicket);
    public PageBorderless get_Value();
    public void set_Value(PageBorderless value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageDeviceFontSubstitutionCapability : PrintCapabilityFeature {
    internal Collection`1<DeviceFontSubstitutionOption> _substOptions;
    public Collection`1<DeviceFontSubstitutionOption> DeviceFontSubstitutionOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageDeviceFontSubstitutionCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<DeviceFontSubstitutionOption> get_DeviceFontSubstitutionOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageDeviceFontSubstitutionSetting : PrintTicketFeature {
    public DeviceFontSubstitution Value { get; public set; }
    internal PageDeviceFontSubstitutionSetting(InternalPrintTicket ownerPrintTicket);
    public DeviceFontSubstitution get_Value();
    public void set_Value(DeviceFontSubstitution value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageInputBinCapability : InputBinCapability {
    internal string FeatureName { get; }
    internal PageInputBinCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.PageInputBinSetting : InputBinSetting {
    internal PageInputBinSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.PageMediaSizeCapability : PrintCapabilityFeature {
    internal Collection`1<FixedMediaSizeOption> _fixedSizes;
    public Collection`1<FixedMediaSizeOption> FixedMediaSizes { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageMediaSizeCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<FixedMediaSizeOption> get_FixedMediaSizes();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageMediaSizeSetting : PrintTicketFeature {
    public PageMediaSizeName Value { get; }
    public double MediaSizeWidth { get; }
    public double MediaSizeHeight { get; }
    internal PageMediaSizeSetting(InternalPrintTicket ownerPrintTicket);
    public PageMediaSizeName get_Value();
    public double get_MediaSizeWidth();
    public double get_MediaSizeHeight();
    public void SetFixedMediaSize(PageMediaSizeName value);
    public void SetFixedMediaSize(double mediaSizeWidth, double mediaSizeHeight);
    public void SetFixedMediaSize(PageMediaSizeName value, double mediaSizeWidth, double mediaSizeHeight);
    public virtual string ToString();
    private void InternalSetFixedMediaSize(PageMediaSizeName value, bool bSetValue, double mediaSizeWidth, double mediaSizeHeight, bool bSetWH);
}
internal class MS.Internal.Printing.Configuration.PageMediaTypeCapability : PrintCapabilityFeature {
    internal Collection`1<MediaTypeOption> _mediaTypes;
    public Collection`1<MediaTypeOption> MediaTypes { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageMediaTypeCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<MediaTypeOption> get_MediaTypes();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageMediaTypeSetting : PrintTicketFeature {
    public PageMediaType Value { get; public set; }
    internal PageMediaTypeSetting(InternalPrintTicket ownerPrintTicket);
    public PageMediaType get_Value();
    public void set_Value(PageMediaType value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOrderOption : PrintCapabilityOption {
    internal PageOrder _value;
    public PageOrder Value { get; }
    internal PageOrderOption(PrintCapabilityFeature ownerFeature);
    public PageOrder get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOrientationCapability : PrintCapabilityFeature {
    internal Collection`1<OrientationOption> _orientations;
    public Collection`1<OrientationOption> Orientations { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageOrientationCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<OrientationOption> get_Orientations();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageOrientationSetting : PrintTicketFeature {
    public PageOrientation Value { get; public set; }
    internal PageOrientationSetting(InternalPrintTicket ownerPrintTicket);
    public PageOrientation get_Value();
    public void set_Value(PageOrientation value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOutputColorCapability : PrintCapabilityFeature {
    internal Collection`1<OutputColorOption> _outputColors;
    public Collection`1<OutputColorOption> OutputColors { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageOutputColorCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<OutputColorOption> get_OutputColors();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageOutputColorSetting : PrintTicketFeature {
    public OutputColor Value { get; public set; }
    internal PageOutputColorSetting(InternalPrintTicket ownerPrintTicket);
    public OutputColor get_Value();
    public void set_Value(OutputColor value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOutputQualityCapability : PrintCapabilityFeature {
    internal Collection`1<OutputQualityOption> _qualityOptions;
    public Collection`1<OutputQualityOption> OutputQualityOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageOutputQualityCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<OutputQualityOption> get_OutputQualityOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageOutputQualitySetting : PrintTicketFeature {
    public OutputQuality Value { get; public set; }
    internal PageOutputQualitySetting(InternalPrintTicket ownerPrintTicket);
    public OutputQuality get_Value();
    public void set_Value(OutputQuality value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PagePhotoPrintingIntentCapability : PrintCapabilityFeature {
    internal Collection`1<PhotoPrintingIntentOption> _intentOptions;
    public Collection`1<PhotoPrintingIntentOption> PhotoPrintingIntentOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PagePhotoPrintingIntentCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<PhotoPrintingIntentOption> get_PhotoPrintingIntentOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PagePhotoPrintingIntentSetting : PrintTicketFeature {
    public PhotoPrintingIntent Value { get; public set; }
    internal PagePhotoPrintingIntentSetting(InternalPrintTicket ownerPrintTicket);
    public PhotoPrintingIntent get_Value();
    public void set_Value(PhotoPrintingIntent value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageResolutionCapability : PrintCapabilityFeature {
    internal Collection`1<ResolutionOption> _resolutions;
    public Collection`1<ResolutionOption> Resolutions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageResolutionCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<ResolutionOption> get_Resolutions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageResolutionSetting : PrintTicketFeature {
    public int ResolutionX { get; public set; }
    public int ResolutionY { get; public set; }
    public PageQualitativeResolution QualitativeResolution { get; public set; }
    internal PageResolutionSetting(InternalPrintTicket ownerPrintTicket);
    public int get_ResolutionX();
    public void set_ResolutionX(int value);
    public int get_ResolutionY();
    public void set_ResolutionY(int value);
    public PageQualitativeResolution get_QualitativeResolution();
    public void set_QualitativeResolution(PageQualitativeResolution value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageScalingCapability : PrintCapabilityFeature {
    internal Collection`1<ScalingOption> _scalingOptions;
    public Collection`1<ScalingOption> ScalingOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageScalingCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<ScalingOption> get_ScalingOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageScalingSetting : PrintTicketFeature {
    public PageScaling Value { get; }
    public int CustomScaleWidth { get; }
    public int CustomScaleHeight { get; }
    public int CustomSquareScale { get; }
    internal PageScalingSetting(InternalPrintTicket ownerPrintTicket);
    public PageScaling get_Value();
    public int get_CustomScaleWidth();
    public int get_CustomScaleHeight();
    public int get_CustomSquareScale();
    public void SetCustomSquareScaling(int squareScale);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageTrueTypeFontModeCapability : PrintCapabilityFeature {
    internal Collection`1<TrueTypeFontModeOption> _trueTypeFontModes;
    public Collection`1<TrueTypeFontModeOption> TrueTypeFontModes { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageTrueTypeFontModeCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<TrueTypeFontModeOption> get_TrueTypeFontModes();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageTrueTypeFontModeSetting : PrintTicketFeature {
    public TrueTypeFontMode Value { get; public set; }
    internal PageTrueTypeFontModeSetting(InternalPrintTicket ownerPrintTicket);
    public TrueTypeFontMode get_Value();
    public void set_Value(TrueTypeFontMode value);
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.ParameterDefinition : object {
    private string _parameterName;
    internal string ParameterName { get; internal set; }
    internal bool IsValid { get; }
    internal abstract virtual bool ParamDefPropCallback(ParameterDefinition baseParam, XmlPrintCapReader reader);
    internal string get_ParameterName();
    internal void set_ParameterName(string value);
    internal abstract virtual bool get_IsValid();
}
internal class MS.Internal.Printing.Configuration.PhotoPrintingIntentOption : PrintCapabilityOption {
    internal PhotoPrintingIntent _value;
    public PhotoPrintingIntent Value { get; }
    internal PhotoPrintingIntentOption(PrintCapabilityFeature ownerFeature);
    public PhotoPrintingIntent get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PrintCapabilitiesWriter : object {
    private COMPSTUISR _strings;
    private XmlWriter _writer;
    private string _privateNamespace;
    private string _privateQName;
    public PrintCapabilitiesWriter(Stream stream, string privateQname, string privateNamespace, bool indent);
    public void Release();
    public void Flush();
    public void WriteStartDocument();
    public void WriteEndDocument();
    public void WritePageImageableSizeProperty(int imageableWidth, int imageableHeight, int originWidth, int originHeight, int extentWidth, int extentHeight);
    public void WriteDocumentCollateFeature();
    public void WritePageOutputColorFeature(bool supportsColor);
    public void WriteJobCopiesAllDocumentsParameterDef(int minCopies, int maxCopies, int defaultCopies);
    public void WriteJobNUpAllDocumentsContiguously(IList`1<UInt32> nUps);
    public void WriteJobDuplexAllDocumentsContiguouslyFeature(bool canDuplex);
    public void WritePageICMRenderingIntentFeature();
    public void WritePageColorManagementFeature();
    public void WriteJobInputBinFeature(IList`1<short> bins, IList`1<string> binDisplayNames);
    public void WritePageMediaSizeFeature(IList`1<short> paperSizeCodes, IList`1<string> paperSizeDisplayNames, IList`1<DC_PAPER_SIZE> paperSizes);
    public void WritePageMediaTypeFeature(IList`1<UInt32> mediaTypes, IList`1<string> mediaTypeDisplayNames);
    public void WritePageOrientationFeature(int landscapeOrientation);
    public void WritePageResolutionFeature(IList`1<DC_RESOLUTION> resolutions);
    public void WritePageScalingFeature(int minScale, int maxScale, int defaultScale);
    public void WritePageTrueTypeFontModeFeature();
    public void WritePageDeviceFontSubstitutionFeature();
    public void WritePageDevmodeSnapshot(Byte[] devMode);
    private void WriteStartFeature(string featureNamespace, string featureName, string selectionTypeNamespace, string selectionTypeName, UInt32 displayNameId);
    private void WriteEndFeature();
    private void WriteStartParameterDef(string paramDefNamespace, string paramDefName, UInt32 displayNameId);
    private void WriteEndParameterDef();
    private void WriteStartOption(string optionNamespace, string optionName, string displayName, string pskConstraint);
    private void WriteStartOption(string optionNamespace, string optionName, UInt32 displayNameId, string pskConstraint);
    private void WriteEndOption();
    private void WriteOption(string optionNamespace, string optionName, UInt32 displayNameId, string pskConstraint);
    private void WriteDisplayNameProperty(UInt32 displayNameId);
    private void WriteDisplayNameProperty(string displayName);
    private void WriteProperty(string propertyNamespace, string propertyName, int propertyValue);
    private void WriteProperty(string propertyNamespace, string propertyName, string propertyValue);
    private void WriteQNameProperty(string propertyNamespace, string propertyName, string valueNamespace, string valueLocalName);
    private void WriteProperty(string propertyNamespace, string propertyName, string type, string propertyValue);
    private void WriteStartProperty(string propertyNamespace, string propertyName);
    private void WriteEndProperty();
    private void WriteStartScoredProperty(string propertyNamespace, string propertyName);
    private void WriteEndScoredProperty();
    private void WriteValue(string type, string propertyValue);
    private void WriteQNameValue(string valueNamespace, string valueLocalName);
    private void WriteParameterRef(string parameterNamespace, string parameterName);
    private void WriteParameterInit(string parameterNamespace, string parameterName, string type, string value);
    private void WriteQNameAttribute(string attrNamespace, string attrLocalName, string valueNamespace, string valueLocalName);
    private string GetDisplayString(UInt32 srid);
}
internal abstract class MS.Internal.Printing.Configuration.PrintCapabilityFeature : object {
    private InternalPrintCapabilities _ownerPrintCap;
    internal InternalPrintCapabilities OwnerPrintCap { get; internal set; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    protected PrintCapabilityFeature(InternalPrintCapabilities ownerPrintCap);
    internal abstract virtual bool AddOptionCallback(PrintCapabilityOption option);
    internal abstract virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal abstract virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal abstract virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal abstract virtual void OptionAttrCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal abstract virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal InternalPrintCapabilities get_OwnerPrintCap();
    internal void set_OwnerPrintCap(InternalPrintCapabilities value);
    internal abstract virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal abstract virtual bool get_HasSubFeature();
}
internal abstract class MS.Internal.Printing.Configuration.PrintCapabilityOption : object {
    internal string _optionName;
    private PrintCapabilityFeature _ownerFeature;
    internal PrintCapabilityFeature OwnerFeature { get; internal set; }
    protected PrintCapabilityOption(PrintCapabilityFeature ownerFeature);
    internal PrintCapabilityFeature get_OwnerFeature();
    internal void set_OwnerFeature(PrintCapabilityFeature value);
}
internal abstract class MS.Internal.Printing.Configuration.PrintCapabilityRootProperty : object {
    internal abstract virtual bool BuildProperty(XmlPrintCapReader reader);
}
internal class MS.Internal.Printing.Configuration.PrintCapBuilder : object {
    private static int _kRootElementDepth;
    private XmlPrintCapReader _reader;
    private static FeatureHandlersTableEntry[] _fHandlersTable;
    private static FeatureHandlersTableEntry[] _subfHandlersTable;
    private static ParamDefHandlersTableEntry[] _gpHandlersTable;
    private static ParamDefHandlersTableEntry[] _lpHandlersTable;
    public PrintCapBuilder(Stream xmlStream);
    private static PrintCapBuilder();
    public void Build(InternalPrintCapabilities printCap);
    private void BuildFeature(InternalPrintCapabilities printCap, PrintCapabilityFeature parentFeature);
    private void BuildParameterDef(InternalPrintCapabilities printCap);
    private void BuildRootProperty(InternalPrintCapabilities printCap);
    private static int LookupFeatureIndex(string featureName, bool isSubFeature);
    private static int LookupParameterIndex(string paramName, Boolean& isLocalParam);
    private static void LookupFeatureCallbacks(string featureName, bool isSubFeature, NewFeatureHandler& newFeatureCallback);
    private static void LookupParameterCallbacks(string paramName, bool isLocalParam, NewParamDefHandler& newParamDefCallback);
}
internal class MS.Internal.Printing.Configuration.PRINTER_INFO_2 : ValueType {
    public string pPrinterName;
    public string pPortName;
    public string pDriverName;
    public DevMode pDevMode;
}
internal class MS.Internal.Printing.Configuration.PRINTER_INFO_8_AND_9 : ValueType {
    public DevMode pDevMode;
}
internal class MS.Internal.Printing.Configuration.PrintSchema : object {
    internal static int EnumUnspecifiedValue;
    internal static int EnumUnknownValue;
    internal static CapabilityName CapabilityNameEnumMin;
    internal static CapabilityName CapabilityNameEnumMax;
    internal static Collation CollationEnumMin;
    internal static Collation CollationEnumMax;
    internal static DeviceFontSubstitution DeviceFontSubstitutionEnumMin;
    internal static DeviceFontSubstitution DeviceFontSubstitutionEnumMax;
    internal static Duplexing DuplexingEnumMin;
    internal static Duplexing DuplexingEnumMax;
    internal static PageMediaSizeName PageMediaSizeNameEnumMin;
    internal static PageMediaSizeName PageMediaSizeNameEnumMax;
    internal static StdMediaSizeEntry[] StdMediaSizeTable;
    internal static PageMediaType PageMediaTypeEnumMin;
    internal static PageMediaType PageMediaTypeEnumMax;
    internal static PagesPerSheetDirection PagesPerSheetDirectionEnumMin;
    internal static PagesPerSheetDirection PagesPerSheetDirectionEnumMax;
    internal static PageOrientation PageOrientationEnumMin;
    internal static PageOrientation PageOrientationEnumMax;
    internal static OutputColor OutputColorEnumMin;
    internal static OutputColor OutputColorEnumMax;
    internal static PageQualitativeResolution PageQualitativeResolutionEnumMin;
    internal static PageQualitativeResolution PageQualitativeResolutionEnumMax;
    internal static PageScaling PageScalingEnumMin;
    internal static PageScaling PageScalingEnumMax;
    internal static Stapling StaplingEnumMin;
    internal static Stapling StaplingEnumMax;
    internal static TrueTypeFontMode TrueTypeFontModeEnumMin;
    internal static TrueTypeFontMode TrueTypeFontModeEnumMax;
    internal static PageOrder PageOrderEnumMin;
    internal static PageOrder PageOrderEnumMax;
    internal static PhotoPrintingIntent PhotoPrintingIntentEnumMin;
    internal static PhotoPrintingIntent PhotoPrintingIntentEnumMax;
    internal static PageBorderless PageBorderlessEnumMin;
    internal static PageBorderless PageBorderlessEnumMax;
    internal static OutputQuality OutputQualityEnumMin;
    internal static OutputQuality OutputQualityEnumMax;
    internal static InputBin InputBinEnumMin;
    internal static InputBin InputBinEnumMax;
    public static int UnspecifiedIntValue;
    public static double UnspecifiedDoubleValue;
    private static PrintSchema();
}
internal enum MS.Internal.Printing.Configuration.PrintSchemaLocalParameterDefs : Enum {
    public int value__;
    public static PrintSchemaLocalParameterDefs PageScalingScaleWidth;
    public static PrintSchemaLocalParameterDefs PageScalingScaleHeight;
    public static PrintSchemaLocalParameterDefs PageSquareScalingScale;
}
internal static class MS.Internal.Printing.Configuration.PrintSchemaMapper : object {
    public static int SchemaNameToEnumValueWithMap(MapEntry[] map, string schemaName);
    public static int SchemaNameToEnumValueWithArray(String[] enumNames, Int32[] enumValues, string schemaName);
    public static bool CurrentPropertyQValueToEnumValue(XmlPrintCapReader reader, String[] schemaNames, Int32[] schemaEnums, Int32& enumValue);
    public static string EnumValueToSchemaNameWithArray(String[] enumNames, Int32[] enumValues, int enumValue);
}
internal class MS.Internal.Printing.Configuration.PrintSchemaNamespaces : object {
    public static string Framework;
    public static string StandardKeywordSet;
    public static string xsi;
    public static string xsd;
    public static string xmlns;
    public static string FrameworkAttrForXmlReader;
    public static string FrameworkAttrForXmlDOM;
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.PrintSchemaNodeTypes : Enum {
    public int value__;
    public static PrintSchemaNodeTypes None;
    public static PrintSchemaNodeTypes Attribute;
    public static PrintSchemaNodeTypes AttributeSet;
    public static PrintSchemaNodeTypes AttributeSetRef;
    public static PrintSchemaNodeTypes Feature;
    public static PrintSchemaNodeTypes Option;
    public static PrintSchemaNodeTypes ParameterDef;
    public static PrintSchemaNodeTypes ParameterRef;
    public static PrintSchemaNodeTypes Parameter;
    public static PrintSchemaNodeTypes Property;
    public static PrintSchemaNodeTypes ScoredProperty;
    public static PrintSchemaNodeTypes Value;
    public static PrintSchemaNodeTypes RootLevelTypes;
    public static PrintSchemaNodeTypes FeatureLevelTypesWithSubFeature;
    public static PrintSchemaNodeTypes FeatureLevelTypesWithoutSubFeature;
    public static PrintSchemaNodeTypes OptionLevelTypes;
    public static PrintSchemaNodeTypes ScoredPropertyLevelTypes;
}
internal class MS.Internal.Printing.Configuration.PrintSchemaPrefixes : object {
    public static string Framework;
    public static string StandardKeywordSet;
    public static string xsi;
    public static string xsd;
    public static string xmlns;
}
internal static class MS.Internal.Printing.Configuration.PrintSchemaShim : object {
    public static int WpfPixelsPerInch;
    public static int MicronsPerInch;
    public static int MicronsPerTenthOfMillimeter;
    private static IDictionary`2<DevModeCollate, Collation> dmCollateToQResolution;
    private static IDictionary`2<DevModeColor, OutputColor> dmColorToOutputColor;
    private static IDictionary`2<DevModeDuplex, Duplexing> dmDuplexToDuplexing;
    private static IDictionary`2<short, InputBin> dmPaperSourceToInputBin;
    private static IDictionary`2<short, PaperSourceOption> paperSourceOptions;
    private static IDictionary`2<short, PageMediaSizeName> dmPaperSizeToPageMediaSize;
    private static IDictionary`2<UInt32, PageMediaType> dmMediaTypeToMediaType;
    private static IDictionary`2<UInt32, MediaTypeOption> mediaTypeOptions;
    private static IDictionary`2<DevModeOrientation, PageOrientation> dmOrientationToOrientation;
    private static IDictionary`2<short, PageQualitativeResolution> dmResToQResolution;
    private static IDictionary`2<short, OutputQualityOption> outputQualityOptions;
    private static PrintSchemaShim();
    public static bool TryGetPageMediaSizeNameFromPaperSizeCode(short paperSizeCode, PageMediaSizeName& pageMediaSizeName);
    public static bool TryGetPageResolutionFromPaperQuality(short paperQualityCode, PageQualitativeResolution& resolution);
    public static bool TryGetPaperSourceOption(short paperSourceCode, String& localName, Boolean& hasStandardKeywordNamespace, UInt32& displayNameId, String& pskFeedType, String& pskBinType);
    public static bool TryGetMediaTypeOption(UInt32 mediaTypeCode, String& localName, UInt32& displayNameId, String& pskFrontCoating, String& pskBackCoating, String& pskMaterial);
    public static bool TryGetOutputQualityOption(short dmResX, String& localName, UInt32& displayNameId);
    public static bool TryEmbedDevMode(InternalPrintTicket ticket, string oemDriverNamespace, DevMode devMode);
    public static DevMode TryGetEmbeddedDevMode(InternalPrintTicket ticket, string oemDriverNamespace);
    public static void CopyDevModeToTicket(InternalPrintTicket baseTicket, DevMode deltaDevMode, PrintTicketScope scope, DevModeFields supportedFields);
    public static void CopyTicketToDevMode(DevMode baseDevMode, InternalPrintTicket deltaTicket, PrintTicketScope scope, DevModeFields supportedFields);
    public static bool PruneFeatures(DevMode inDevMode, WinSpoolPrinterCapabilities capabilities);
    private static string EnsurePrefixForTicket(InternalPrintTicket ticket, string xmlNamespace);
    public static IList`1<DC_PAPER_SIZE> TenthOfMillimeterToMicrons(IList`1<DC_PAPER_SIZE> points);
    public static DC_PAPER_SIZE TenthOfMillimeterToMicrons(DC_PAPER_SIZE size);
    public static int TenthOfMillimeterToMicrons(int tenthOfMillimeterLength);
    public static long TenthOfMillimeterToMicrons(long tenthOfMillimeterLength);
    public static int DpiToMicrons(int dpiLength, int dpi);
    private static void SetCollation(InternalPrintTicket ticket, DevModeCollate devModeCollate);
    private static void SetCollate(DevMode devMode, Collation collation);
    private static void SetOutputColor(InternalPrintTicket ticket, DevModeColor devModeColor);
    private static void SetColor(DevMode devMode, OutputColor outputColor);
    private static void SetCopies(InternalPrintTicket ticket, short devModeCopies);
    private static void SetCopies(DevMode devMode, int copyCount);
    private static void SetDuplexing(InternalPrintTicket ticket, DevModeDuplex devModeDuplex);
    private static void SetDuplex(DevMode devMode, Duplexing duplexing);
    private static void SetInputBin(InternalPrintTicket ticket, PrintTicketScope scope, short devModePaperSouceCode);
    private static void SetDefaultSource(DevMode devMode, InputBin inputBin);
    private static void SetPageMediaSize(InternalPrintTicket ticket, DevModeFields devModeFields, short devModePaperSource, short devModePaperWidth, short devModePaperHeight, string devModeFormName);
    private static void SetPaperSize(DevMode devMode, PageMediaSizeName pageMediaSizeName);
    private static void SetPageHeight(DevMode devMode, double pageHeightInDIPs);
    private static void SetPageWidth(DevMode devMode, double pageWidthInDIPs);
    private static void SetPageMediaType(InternalPrintTicket ticket, UInt32 devModeMediaTypeCode);
    private static void SetMediaType(DevMode devMode, PageMediaType pageMediaType);
    private static void SetOrientation(InternalPrintTicket ticket, DevModeOrientation devModeOrientation);
    private static void SetOrientation(DevMode devMode, PageOrientation pageOrientation);
    private static void SetPageResolution(InternalPrintTicket ticket, DevModeFields devModeFields, short devModeXResolution, short devModeYResolution);
    private static void SetPrintQuality(DevMode devMode, PageQualitativeResolution qualitativeResolution, int dpiX, int dpiY, DevModeFields supportedFields);
    private static void SetScale(InternalPrintTicket ticket, short devModeScale);
    private static void SetScale(DevMode devMode, int scale);
    private static void SetTrueTypeFontOption(InternalPrintTicket ticket, DevModeTrueTypeOption devModeTrueTypeOption);
    private static void SetTTOption(DevMode devMode, DeviceFontSubstitution fontSubstitution, TrueTypeFontMode trueTypeFontMode);
    private static bool TrySet(IDictionary`2<TKey, TValue> dictionary, TKey key, Action`1<TValue> setter);
    private static bool TrySet(IDictionary`2<TKey, TValue> dictionary, TValue value, Action`1<TKey> setter);
    private static bool IsSet(DevModeFields mask, DevModeFields fields);
    private static short Clamp(int value, short min, short max);
    private static double LengthValueFromTenthOfMillimeterToDIP(int tenthOfMillimeterValue);
    private static int LengthValueFromDIPToTenthOfMillimeter(double dipValue);
}
internal enum MS.Internal.Printing.Configuration.PrintSchemaSubFeatures : Enum {
    public int value__;
    public static PrintSchemaSubFeatures NUpPresentationDirection;
}
internal class MS.Internal.Printing.Configuration.PrintSchemaTags : object {
}
internal class MS.Internal.Printing.Configuration.PrintSchemaXsiTypes : object {
    public static string Integer;
    public static string String;
    public static string QName;
}
internal class MS.Internal.Printing.Configuration.PrintTicketEditor : object {
    public static void CheckIsWellFormedPrintTicket(InternalPrintTicket pt);
    public static void CheckAndAddMissingStdNamespaces(InternalPrintTicket pt);
    public static string AddStdNamespaceDeclaration(XmlElement root, string prefix_header, string nsURI);
    public static XmlElement GetSchemaElementWithNameAttr(InternalPrintTicket pt, XmlElement parent, string schemaTag, string nameAttrWanted);
    public static void RemoveAllSchemaElementsWithNameAttr(InternalPrintTicket pt, XmlElement parent, string schemaTag, string nameAttrToDelete);
    public static XmlElement AddSchemaElementWithNameAttr(InternalPrintTicket pt, XmlElement parent, string schemaTag, string nameAttr);
    public static void SetXsiTypeAttr(InternalPrintTicket pt, XmlElement valueElement, string xsiType);
    private static FormatException NewPTFormatException(string detailMsg);
    private static FormatException NewPTFormatException(string detailMsg, Exception innerException);
}
[DefaultMemberAttribute("Item")]
internal abstract class MS.Internal.Printing.Configuration.PrintTicketFeature : object {
    internal InternalPrintTicket _ownerPrintTicket;
    internal PrintTicketFeature _parentFeature;
    internal string _featureName;
    internal PTPropertyMapEntry[] _propertyMaps;
    internal PTFeatureNode FeatureNode { get; }
    internal int Item { get; internal set; }
    protected PrintTicketFeature(InternalPrintTicket ownerPrintTicket);
    public void ClearSetting();
    internal PTFeatureNode get_FeatureNode();
    internal int get_Item(string propertyName);
    internal void set_Item(string propertyName, int value);
    private PTPropertyMapEntry LookupPropertyMap(string propertyName);
}
internal class MS.Internal.Printing.Configuration.PrintTicketParameter : object {
    internal InternalPrintTicket _ownerPrintTicket;
    internal string _parameterName;
    internal PrintTicketParamTypes _parameterType;
    internal PrintTicketParamValueTypes _parameterValueType;
    internal string _parameterNodeTagName;
    internal PrintTicketParameterNode ParameterNode { get; }
    internal int IntValue { get; internal set; }
    internal string StringValue { get; internal set; }
    internal PrintTicketParameter(InternalPrintTicket ownerPrintTicket, string paramName, PrintTicketParamTypes paramType, PrintTicketParamValueTypes paramValueType);
    public void ClearSetting();
    internal virtual void SettingClearCallback();
    internal PrintTicketParameterNode get_ParameterNode();
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal string get_StringValue();
    internal void set_StringValue(string value);
}
internal class MS.Internal.Printing.Configuration.PrintTicketParameterNode : object {
    private PrintTicketParameter _ownerParameter;
    private XmlElement _parameterElement;
    public PrintTicketParameter OwnerParameter { get; }
    public XmlElement ParameterElement { get; }
    private PrintTicketParameterNode(PrintTicketParameter ownerParameter, XmlElement parameterElement);
    public static PrintTicketParameterNode GetParameterNode(PrintTicketParameter ptParameter);
    public static void CreateParameterNode(PrintTicketParameter ptParameter);
    public bool GetIntValue(Int32& value);
    public bool GetStringValue(String& value);
    public XmlElement SetIntValue(int value);
    public XmlElement SetStringValue(string value, string xsiType);
    public PrintTicketParameter get_OwnerParameter();
    public XmlElement get_ParameterElement();
}
internal enum MS.Internal.Printing.Configuration.PrintTicketParamTypes : Enum {
    public int value__;
    public static PrintTicketParamTypes Parameter;
    public static PrintTicketParamTypes RootProperty;
}
internal enum MS.Internal.Printing.Configuration.PrintTicketParamValueTypes : Enum {
    public int value__;
    public static PrintTicketParamValueTypes StringValue;
    public static PrintTicketParamValueTypes IntValue;
}
internal class MS.Internal.Printing.Configuration.PTFeatureNode : object {
    private PrintTicketFeature _ownerFeature;
    private XmlElement _featureElement;
    public PrintTicketFeature OwnerFeature { get; }
    public XmlElement FeatureElement { get; }
    private PTFeatureNode(PrintTicketFeature ownerFeature, XmlElement featureElement);
    public static PTFeatureNode GetFeatureNode(PrintTicketFeature ptFeature, XmlElement parentElement);
    public static void CreateFeatureNode(PrintTicketFeature ptFeature, XmlElement parentElement);
    public string GetOptionName(Boolean& bInPrivateNamespace);
    public void SetOptionName(string optionName);
    public bool GetOptionPropertyIntValue(string propertyName, Int32& value);
    public void SetOptionPropertyIntValue(string propertyName, int value);
    public string GetOptionPropertyStdStringValue(string propertyName, Boolean& bInPrivateNamespace);
    public void SetOptionPropertyStdStringValue(string propertyName, string stdValue);
    public string GetOptionPropertyParamRefName(string propertyName);
    public void SetOptionPropertyParamRefName(string propertyName, string paramRefName);
    public XmlElement GetFirstOption();
    public PrintTicketFeature get_OwnerFeature();
    public XmlElement get_FeatureElement();
    private string GetOptionPropertyValueText(XmlElement parentOption, string propertyName);
}
internal class MS.Internal.Printing.Configuration.PTPropertyMapEntry : object {
    public PrintTicketFeature OwnerFeature;
    public string PropName;
    public PTPropValueTypes PropType;
    public String[] PropEnumStrings;
    public Int32[] PropEnumValues;
    public string ParamPropName;
    public string ParamRefName;
    public PrintTicketParameter Parameter { get; }
    public PTPropertyMapEntry(PrintTicketFeature ownerFeature, string propName, PTPropValueTypes propType);
    public PTPropertyMapEntry(PrintTicketFeature ownerFeature, string propName, PTPropValueTypes propType, String[] enumStrings, Int32[] enumValues);
    public PTPropertyMapEntry(PrintTicketFeature ownerFeature, string propName, PTPropValueTypes propType, string paramPropName, string paramRefName);
    public PrintTicketParameter get_Parameter();
}
internal enum MS.Internal.Printing.Configuration.PTPropValueTypes : Enum {
    public int value__;
    public static PTPropValueTypes EnumStringValue;
    public static PTPropValueTypes IntParamRefValue;
    public static PTPropValueTypes PositiveIntValue;
}
internal class MS.Internal.Printing.Configuration.PTProvider : PTProviderBase {
    private string _deviceName;
    private SafePTProviderHandle _providerHandle;
    private int _schemaVersion;
    private Thread _thread;
    private static int BLOCK_TRANSFER_SIZE;
    private bool _disposed;
    public PTProvider(string deviceName, int maxVersion, int clientVersion);
    public virtual MemoryStream GetPrintCapabilities(MemoryStream printTicket);
    public virtual MemoryStream MergeAndValidatePrintTicket(MemoryStream basePrintTicket, MemoryStream deltaPrintTicket, PrintTicketScope scope, ConflictStatus& conflictStatus);
    public virtual MemoryStream ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public virtual Byte[] ConvertPrintTicketToDevMode(MemoryStream printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    public virtual void Release();
    protected virtual void Dispose(bool disposing);
    private void VerifyAccess();
    private static IStream IStreamFromMemoryStream(MemoryStream stream);
    private static MemoryStream MemoryStreamFromIStream(IStream stream);
    private static void CopyArrayToIStream(Byte[] src, IStream dst, UInt32 byteCount);
    private static void CopyIStreamToArray(IStream src, Byte[] dst, UInt32 byteCount);
    private static void EnsureRemainingIStreamLength(IStream stream, UInt32 byteCount);
    private static IStream CreateStreamOnHGlobal();
    private static void DeleteIStream(IStream& stream);
    private static void RewindIStream(IStream stream);
    private static int ClampToPositiveInt(long value);
    private static int ClampToPositiveInt(ulong value);
}
internal abstract class MS.Internal.Printing.Configuration.PTProviderBase : object {
    public static PTProviderBase Create(string deviceName, int maxVersion, int clientVersion);
    public abstract virtual MemoryStream GetPrintCapabilities(MemoryStream printTicket);
    public abstract virtual MemoryStream MergeAndValidatePrintTicket(MemoryStream basePrintTicket, MemoryStream deltaPrintTicket, PrintTicketScope scope, ConflictStatus& conflictStatus);
    public abstract virtual MemoryStream ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public abstract virtual Byte[] ConvertPrintTicketToDevMode(MemoryStream printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    public abstract virtual void Release();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
internal static class MS.Internal.Printing.Configuration.PTUtility : object {
    private static ResourceManager _resManager;
    private static PTUtility();
    public static bool IsSuccessCode(UInt32 hResult);
    public static string GetTextFromResource(string key);
}
internal class MS.Internal.Printing.Configuration.ResolutionOption : PrintCapabilityOption {
    internal int _resolutionX;
    internal int _resolutionY;
    internal PageQualitativeResolution _qualityValue;
    public PageQualitativeResolution QualitativeResolution { get; }
    public int ResolutionX { get; }
    public int ResolutionY { get; }
    internal ResolutionOption(PrintCapabilityFeature ownerFeature);
    public PageQualitativeResolution get_QualitativeResolution();
    public int get_ResolutionX();
    public int get_ResolutionY();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.SafeModuleHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Printing.Configuration.SafePTProviderHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Printing.Configuration.SafeWinSpoolPrinterHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Printing.Configuration.ScalingOption : PrintCapabilityOption {
    internal PageScaling _value;
    internal int _scaleWIndex;
    internal int _scaleHIndex;
    internal int _squareScaleIndex;
    public PageScaling Value { get; }
    public ScalingScaleWidthCapability CustomScaleWidth { get; }
    public ScalingScaleHeightCapability CustomScaleHeight { get; }
    public ScalingSquareScaleCapability CustomSquareScale { get; }
    internal ScalingOption(PrintCapabilityFeature ownerFeature);
    public PageScaling get_Value();
    public ScalingScaleWidthCapability get_CustomScaleWidth();
    public ScalingScaleHeightCapability get_CustomScaleHeight();
    public ScalingSquareScaleCapability get_CustomSquareScale();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.ScalingScaleHeightCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.ScalingScaleWidthCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.ScalingSquareScaleCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal abstract class MS.Internal.Printing.Configuration.StapleCapability : PrintCapabilityFeature {
    internal Collection`1<StaplingOption> _staplingOptions;
    public Collection`1<StaplingOption> StaplingOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal StapleCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<StaplingOption> get_StaplingOptions();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal abstract class MS.Internal.Printing.Configuration.StapleSetting : PrintTicketFeature {
    public Stapling Value { get; public set; }
    internal StapleSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public Stapling get_Value();
    public void set_Value(Stapling value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.StaplingOption : PrintCapabilityOption {
    internal Stapling _value;
    public Stapling Value { get; }
    internal StaplingOption(PrintCapabilityFeature ownerFeature);
    public Stapling get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.TrueTypeFontModeOption : PrintCapabilityOption {
    internal TrueTypeFontMode _value;
    public TrueTypeFontMode Value { get; }
    internal TrueTypeFontModeOption(PrintCapabilityFeature ownerFeature);
    public TrueTypeFontMode get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.UnitConverter : object {
    public static double LengthValueFromMicronToDIP(int micronValue);
    public static int LengthValueFromDIPToMicron(double dipValue);
}
internal static class MS.Internal.Printing.Configuration.UnsafeNativeMethods : object {
    public static UInt32 PTOpenProviderEx(string deviceName, int maxVersion, int prefVersion, SafePTProviderHandle& handle, Int32& usedVersion);
    public static UInt32 PTCloseProviderImpl(IntPtr handle);
    public static UInt32 PTGetPrintCapabilities(SafePTProviderHandle handle, IStream printTicket, IStream printCapabilities, String& errorMsg);
    public static UInt32 PTMergeAndValidatePrintTicket(SafePTProviderHandle handle, IStream baseTicket, IStream deltaTicket, UInt32 scope, IStream resultTicket, String& errorMsg);
    public static UInt32 PTConvertDevModeToPrintTicket(SafePTProviderHandle handle, UInt32 dmSize, HandleRef devMode, UInt32 scope, IStream printTicket);
    public static UInt32 PTConvertPrintTicketToDevMode(SafePTProviderHandle handle, IStream printTicket, UInt32 baseType, UInt32 scope, UInt32& dmSize, IntPtr& devMode, String& errorMsg);
    public static UInt32 PTReleaseMemory(HandleRef devMode);
    public static bool OpenPrinterW(string pPrinterName, SafeWinSpoolPrinterHandle& printer, HandleRef pDefault);
    public static bool GetPrinterW(SafeWinSpoolPrinterHandle printer, UInt32 dwLevel, SafeMemoryHandle pPrinter, UInt32 dwBuf, UInt32& dwNeeded);
    public static UInt32 DeviceCapabilitiesW(string pDevice, string pPort, DeviceCapability fwCapabilities, SafeMemoryHandle pOutput, SafeMemoryHandle pDevMode);
    public static int DocumentPropertiesW(HandleRef hWnd, SafeWinSpoolPrinterHandle printer, string deviceName, SafeMemoryHandle devModeOutput, SafeMemoryHandle devModeInput, DocumentPropertiesFlags mode);
    public static bool ClosePrinter(IntPtr hPrinter);
    public static IntPtr CreateICW(string lpszDriver, string lpszDevice, string lpszOutput, SafeMemoryHandle devmodePtr);
    public static int GetDeviceCaps(HandleRef hdc, DeviceCap capability);
    public static bool DeleteDC(HandleRef hdc);
    public static int LoadStringW(SafeModuleHandle hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    public static SafeModuleHandle LoadLibraryExW(string lpFileName, IntPtr hFile, LoadLibraryExFlags dwFlags);
    public static bool FreeLibrary(IntPtr hModule);
    public static UInt32 CreateStreamOnHGlobal(SafeMemoryHandle hGlobal, bool fDeleteOnRelease, IStream& ppstm);
    private static UInt32 PTOpenProviderExImpl(string deviceName, int maxVersion, int prefVersion, SafePTProviderHandle& handle, Int32& usedVersion);
    private static UInt32 PTGetPrintCapabilitiesImpl(SafePTProviderHandle handle, IStream printTicket, IStream printCapabilities, String& errorMsg);
    private static UInt32 PTMergeAndValidatePrintTicketImpl(SafePTProviderHandle handle, IStream baseTicket, IStream deltaTicket, UInt32 scope, IStream resultTicket, String& errorMsg);
    private static UInt32 PTConvertDevModeToPrintTicketImpl(SafePTProviderHandle handle, UInt32 dmSize, HandleRef devMode, UInt32 scope, IStream printTicket);
    private static UInt32 PTConvertPrintTicketToDevModeImpl(SafePTProviderHandle handle, IStream printTicket, UInt32 baseType, UInt32 scope, UInt32& dmSize, IntPtr& devMode, String& errorMsg);
    private static UInt32 PTReleaseMemoryImpl(HandleRef devMode);
}
internal class MS.Internal.Printing.Configuration.WinSpoolPrinterCapabilities : object {
    private bool _dmFieldsIsCached;
    private string _deviceName;
    private string _driverName;
    private string _portName;
    private DevModeFields _dmFields;
    private SafeMemoryHandle _devMode;
    public bool CanCollate { get; }
    public bool HasColor { get; }
    public int MinCopies { get; }
    public int MaxCopies { get; }
    public bool CanDuplex { get; }
    public bool HasICMIntent { get; }
    public bool HasICMMethod { get; }
    public IList`1<short> Bins { get; }
    public IList`1<string> BinNames { get; }
    public IList`1<UInt32> NUp { get; }
    public IList`1<short> Papers { get; }
    public IList`1<string> PaperNames { get; }
    public IList`1<DC_PAPER_SIZE> PaperSizes { get; }
    public IList`1<UInt32> MediaTypes { get; }
    public IList`1<string> MediaTypeNames { get; }
    public int LandscapeOrientation { get; }
    public IList`1<DC_RESOLUTION> Resolutions { get; }
    public bool CanScale { get; }
    public bool TrueType { get; }
    public DevModeFields Fields { get; }
    public WinSpoolPrinterCapabilities(string deviceName, string driverName, string portName, DevMode devMode);
    public void Release();
    public bool TryGetDeviceCapabilities(Int32& logicalPixelsX, Int32& logicalPixelsY, Int32& physicalWidth, Int32& physicalHeight, Int32& physicalOffsetX, Int32& physicalOffsetY, Int32& horizontalResolution, Int32& verticalResolution);
    public void GetMinExtent(Int32& minPageWidth, Int32& minPageHeight);
    public void GetMaxExtent(Int32& maxPaperWidth, Int32& maxPaperHeight);
    public bool get_CanCollate();
    public bool get_HasColor();
    public int get_MinCopies();
    public int get_MaxCopies();
    public bool get_CanDuplex();
    public bool get_HasICMIntent();
    public bool get_HasICMMethod();
    public IList`1<short> get_Bins();
    public IList`1<string> get_BinNames();
    public IList`1<UInt32> get_NUp();
    public IList`1<short> get_Papers();
    public IList`1<string> get_PaperNames();
    public IList`1<DC_PAPER_SIZE> get_PaperSizes();
    public IList`1<UInt32> get_MediaTypes();
    public IList`1<string> get_MediaTypeNames();
    public int get_LandscapeOrientation();
    public IList`1<DC_RESOLUTION> get_Resolutions();
    public bool get_CanScale();
    public bool get_TrueType();
    public DevModeFields get_Fields();
    public bool GetDefaultPaperSize(DevMode defaultDevMode, IList`1<short> paperSizeCodes, IList`1<DC_PAPER_SIZE> paperSizes, DC_PAPER_SIZE& defaultPaperSize);
    private bool GetBoolCapability(DeviceCapability capability);
    private bool GetBoolCapability(DevModeFields capability);
    private UInt32 GetIntCapability(DeviceCapability capability);
    private T[] GetArrayCapability(DeviceCapability capability, ReadArray`1<T> readItem);
    private T[] GetArrayCapability(DeviceCapability capability, ReadArray`1<T> readArray, int itemByteSize);
    private UInt32[] ReadDWORDArray(HGlobalBuffer buffer, int itemByteSize);
    private Int16[] ReadWORDArray(HGlobalBuffer buffer, int itemByteSize);
    private static DC_RESOLUTION[] ReadDC_RESOLUTIONArray(HGlobalBuffer buffer, int itemByteSize);
    private static DC_PAPER_SIZE[] ReadDC_PAPER_SIZEArray(HGlobalBuffer buffer, int itemByteSize);
    private static String[] ReadUnicodeStringArray(HGlobalBuffer buffer, int itemByteSize);
}
internal static class MS.Internal.Printing.Configuration.XmlConvertHelper : object {
    public static int ConvertStringToInt32(string s);
    public static decimal ConvertStringToDecimal(string s);
}
internal class MS.Internal.Printing.Configuration.XmlDocQName : object {
    public static string GetURI(XmlDocument xmlDoc, string QName);
    public static string GetLocalName(string QName);
    public static string GetQName(XmlDocument xmlDoc, string URI, string localName);
}
internal class MS.Internal.Printing.Configuration.XmlPrintCapReader : object {
    internal XmlTextReader _xmlReader;
    private PrintSchemaNodeTypes _currentElementNodeType;
    private int _currentElementDepth;
    private bool _currentElementIsEmpty;
    private string _currentElementNameAttrValue;
    private string _currentElementTextValue;
    private string _currentElementPSFNameAttrValue;
    public PrintSchemaNodeTypes CurrentElementNodeType { get; }
    public int CurrentElementDepth { get; }
    public bool CurrentElementIsEmpty { get; }
    public string CurrentElementNameAttrValue { get; }
    public string CurrentElementTextValue { get; }
    public string CurrentElementPSFNameAttrValue { get; }
    public XmlPrintCapReader(Stream xmlStream);
    public bool MoveToNextSchemaElement(int depth, PrintSchemaNodeTypes typeFilterFlags);
    public void OptionAttributeGenericHandler(PrintCapabilityOption option);
    public string GetCurrentPropertyFullValueWithException();
    public int GetCurrentPropertyIntValueWithException();
    public string GetCurrentPropertyQNameValueWithException();
    public string GetCurrentPropertyParamRefNameWithException();
    public PrintSchemaNodeTypes get_CurrentElementNodeType();
    public int get_CurrentElementDepth();
    public bool get_CurrentElementIsEmpty();
    public string get_CurrentElementNameAttrValue();
    public string get_CurrentElementTextValue();
    public string get_CurrentElementPSFNameAttrValue();
    private void ResetCurrentElementState();
    private static FormatException NewPrintCapFormatException(string detailMsg);
    private static FormatException NewPrintCapFormatException(string detailMsg, Exception innerException);
}
internal class MS.Internal.Printing.Configuration.XmlReaderQName : object {
    public static string GetURI(XmlTextReader xmlReader, string QName);
    public static string GetLocalName(string QName);
}
internal class MS.Internal.Printing.MostFrequentlyUsedCache`2 : object {
    private IDictionary`2<K, Entry<K, V>> _dictionary;
    private int _maxEntries;
    public MostFrequentlyUsedCache`2(int maxEntries);
    public void CacheValue(K key, V value);
    public bool TryGetValue(K key, V& value);
    private void RemoveLeastFrequentlyUsedEntry();
}
internal static class MS.Internal.Printing.TestHook : object {
    internal static bool _isFallbackPrintingEnabled;
    public static void EnableFallbackPrinting(bool value);
}
internal static class MS.Internal.PrintWin32Thunk.Win32ApiThunk.NativeMethodsForPrintExceptions : object {
    public static int InvokeFormatMessage(int a, IntPtr b, int c, int d, StringBuilder e, int f, IntPtr g);
}
internal static class MS.Internal.ReachFramework.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class MS.Internal.ReachFramework.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
[AttributeUsageAttribute("5372")]
internal class MS.Internal.ReachFramework.FriendAccessAllowedAttribute : Attribute {
}
internal class MS.Internal.ReachFramework.LooseFileSerializationManager : PackageSerializationManager {
    private string m_mainFile;
    private LooseImageSourceTypeConverter m_imageConverter;
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    public LooseFileSerializationManager(string mainFile);
    public virtual void SaveAsXaml(object serializedObject);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type objType);
}
internal class MS.Internal.ReachFramework.LooseImageSourceTypeConverter : ImageSourceTypeConverter {
    private int m_bitmapId;
    private string m_mainFile;
    public LooseImageSourceTypeConverter(string mainFile);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class MS.Internal.ReachFramework.MyColorTypeConverter : ColorTypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal static class MS.Internal.ReachFramework.SafeSecurityHelper : object {
    internal static string IMAGE;
    internal static string GetAssemblyPartialName(Assembly assembly);
}
internal static class MS.Internal.ReachFramework.SecurityHelper : object {
}
internal class MS.Internal.UriComparer : object {
    private static UriComparer _default;
    private static int _nullHashcode;
    public static UriComparer Default { get; }
    private static UriComparer();
    public static UriComparer get_Default();
    public sealed virtual bool Equals(Uri a, Uri b);
    public sealed virtual int GetHashCode(Uri uri);
}
internal static class MS.Internal.Utility.BindUriHelper : object {
    private static int MAX_PATH_LENGTH;
    private static int MAX_SCHEME_LENGTH;
    public static int MAX_URL_LENGTH;
    internal static string UriToString(Uri uri);
}
internal enum System.Printing.CapabilityName : Enum {
    public int value__;
    public static CapabilityName DocumentCollate;
    public static CapabilityName JobDuplex;
    public static CapabilityName JobNUp;
    public static CapabilityName JobStaple;
    public static CapabilityName PageDeviceFontSubstitution;
    public static CapabilityName PageMediaSize;
    public static CapabilityName PageMediaType;
    public static CapabilityName PageOrientation;
    public static CapabilityName PageOutputColor;
    public static CapabilityName PageResolution;
    public static CapabilityName PageScaling;
    public static CapabilityName PageTrueTypeFontMode;
    public static CapabilityName JobCopyCount;
    public static CapabilityName PageImageableSize;
    public static CapabilityName JobPageOrder;
    public static CapabilityName PagePhotoPrintingIntent;
    public static CapabilityName PageBorderless;
    public static CapabilityName PageOutputQuality;
    public static CapabilityName JobInputBin;
    public static CapabilityName DocumentInputBin;
    public static CapabilityName PageInputBin;
}
public enum System.Printing.Collation : Enum {
    public int value__;
    public static Collation Unknown;
    public static Collation Collated;
    public static Collation Uncollated;
}
[ComVisibleAttribute("False")]
public enum System.Printing.ConflictStatus : Enum {
    public int value__;
    public static ConflictStatus NoConflict;
    public static ConflictStatus ConflictResolved;
}
public enum System.Printing.DeviceFontSubstitution : Enum {
    public int value__;
    public static DeviceFontSubstitution Unknown;
    public static DeviceFontSubstitution Off;
    public static DeviceFontSubstitution On;
}
public enum System.Printing.Duplexing : Enum {
    public int value__;
    public static Duplexing Unknown;
    public static Duplexing OneSided;
    public static Duplexing TwoSidedShortEdge;
    public static Duplexing TwoSidedLongEdge;
}
public enum System.Printing.InputBin : Enum {
    public int value__;
    public static InputBin Unknown;
    public static InputBin AutoSelect;
    public static InputBin Cassette;
    public static InputBin Tractor;
    public static InputBin AutoSheetFeeder;
    public static InputBin Manual;
}
[ComVisibleAttribute("False")]
public enum System.Printing.Interop.BaseDevModeType : Enum {
    public int value__;
    public static BaseDevModeType UserDefault;
    public static BaseDevModeType PrinterDefault;
}
[ComVisibleAttribute("False")]
public class System.Printing.Interop.PrintTicketConverter : object {
    private static int _maxPrintSchemaVersion;
    private PTProviderBase _ptProvider;
    private bool _disposed;
    private PrintSystemDispatcherObject _accessVerifier;
    public static int MaxPrintSchemaVersion { get; }
    public PrintTicketConverter(string deviceName, int clientPrintSchemaVersion);
    public static int get_MaxPrintSchemaVersion();
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode);
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    internal static PrintTicket InternalConvertDevModeToPrintTicket(PTProviderBase provider, Byte[] devMode, PrintTicketScope scope);
    internal static Byte[] InternalConvertPrintTicketToDevMode(PTProviderBase provider, PrintTicket printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    private void VerifyAccess();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Dispose();
    private void DisposeImpl();
}
public enum System.Printing.OutputColor : Enum {
    public int value__;
    public static OutputColor Unknown;
    public static OutputColor Color;
    public static OutputColor Grayscale;
    public static OutputColor Monochrome;
}
public enum System.Printing.OutputQuality : Enum {
    public int value__;
    public static OutputQuality Unknown;
    public static OutputQuality Automatic;
    public static OutputQuality Draft;
    public static OutputQuality Fax;
    public static OutputQuality High;
    public static OutputQuality Normal;
    public static OutputQuality Photographic;
    public static OutputQuality Text;
}
public enum System.Printing.PageBorderless : Enum {
    public int value__;
    public static PageBorderless Unknown;
    public static PageBorderless Borderless;
    public static PageBorderless None;
}
public class System.Printing.PageImageableArea : object {
    private double _originW;
    private double _originH;
    private double _extentW;
    private double _extentH;
    public double OriginWidth { get; }
    public double OriginHeight { get; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    internal PageImageableArea(double originW, double originH, double extentW, double extentH);
    public double get_OriginWidth();
    public double get_OriginHeight();
    public double get_ExtentWidth();
    public double get_ExtentHeight();
    public virtual string ToString();
}
public class System.Printing.PageMediaSize : object {
    private Nullable`1<PageMediaSizeName> _mediaSizeName;
    private Nullable`1<double> _width;
    private Nullable`1<double> _height;
    public Nullable`1<PageMediaSizeName> PageMediaSizeName { get; }
    public Nullable`1<double> Width { get; }
    public Nullable`1<double> Height { get; }
    public PageMediaSize(PageMediaSizeName mediaSizeName);
    public PageMediaSize(double width, double height);
    public PageMediaSize(PageMediaSizeName mediaSizeName, double width, double height);
    public Nullable`1<PageMediaSizeName> get_PageMediaSizeName();
    public Nullable`1<double> get_Width();
    public Nullable`1<double> get_Height();
    public virtual string ToString();
}
public enum System.Printing.PageMediaSizeName : Enum {
    public int value__;
    public static PageMediaSizeName Unknown;
    public static PageMediaSizeName ISOA0;
    public static PageMediaSizeName ISOA1;
    public static PageMediaSizeName ISOA10;
    public static PageMediaSizeName ISOA2;
    public static PageMediaSizeName ISOA3;
    public static PageMediaSizeName ISOA3Rotated;
    public static PageMediaSizeName ISOA3Extra;
    public static PageMediaSizeName ISOA4;
    public static PageMediaSizeName ISOA4Rotated;
    public static PageMediaSizeName ISOA4Extra;
    public static PageMediaSizeName ISOA5;
    public static PageMediaSizeName ISOA5Rotated;
    public static PageMediaSizeName ISOA5Extra;
    public static PageMediaSizeName ISOA6;
    public static PageMediaSizeName ISOA6Rotated;
    public static PageMediaSizeName ISOA7;
    public static PageMediaSizeName ISOA8;
    public static PageMediaSizeName ISOA9;
    public static PageMediaSizeName ISOB0;
    public static PageMediaSizeName ISOB1;
    public static PageMediaSizeName ISOB10;
    public static PageMediaSizeName ISOB2;
    public static PageMediaSizeName ISOB3;
    public static PageMediaSizeName ISOB4;
    public static PageMediaSizeName ISOB4Envelope;
    public static PageMediaSizeName ISOB5Envelope;
    public static PageMediaSizeName ISOB5Extra;
    public static PageMediaSizeName ISOB7;
    public static PageMediaSizeName ISOB8;
    public static PageMediaSizeName ISOB9;
    public static PageMediaSizeName ISOC0;
    public static PageMediaSizeName ISOC1;
    public static PageMediaSizeName ISOC10;
    public static PageMediaSizeName ISOC2;
    public static PageMediaSizeName ISOC3;
    public static PageMediaSizeName ISOC3Envelope;
    public static PageMediaSizeName ISOC4;
    public static PageMediaSizeName ISOC4Envelope;
    public static PageMediaSizeName ISOC5;
    public static PageMediaSizeName ISOC5Envelope;
    public static PageMediaSizeName ISOC6;
    public static PageMediaSizeName ISOC6Envelope;
    public static PageMediaSizeName ISOC6C5Envelope;
    public static PageMediaSizeName ISOC7;
    public static PageMediaSizeName ISOC8;
    public static PageMediaSizeName ISOC9;
    public static PageMediaSizeName ISODLEnvelope;
    public static PageMediaSizeName ISODLEnvelopeRotated;
    public static PageMediaSizeName ISOSRA3;
    public static PageMediaSizeName JapanQuadrupleHagakiPostcard;
    public static PageMediaSizeName JISB0;
    public static PageMediaSizeName JISB1;
    public static PageMediaSizeName JISB10;
    public static PageMediaSizeName JISB2;
    public static PageMediaSizeName JISB3;
    public static PageMediaSizeName JISB4;
    public static PageMediaSizeName JISB4Rotated;
    public static PageMediaSizeName JISB5;
    public static PageMediaSizeName JISB5Rotated;
    public static PageMediaSizeName JISB6;
    public static PageMediaSizeName JISB6Rotated;
    public static PageMediaSizeName JISB7;
    public static PageMediaSizeName JISB8;
    public static PageMediaSizeName JISB9;
    public static PageMediaSizeName JapanChou3Envelope;
    public static PageMediaSizeName JapanChou3EnvelopeRotated;
    public static PageMediaSizeName JapanChou4Envelope;
    public static PageMediaSizeName JapanChou4EnvelopeRotated;
    public static PageMediaSizeName JapanHagakiPostcard;
    public static PageMediaSizeName JapanHagakiPostcardRotated;
    public static PageMediaSizeName JapanKaku2Envelope;
    public static PageMediaSizeName JapanKaku2EnvelopeRotated;
    public static PageMediaSizeName JapanKaku3Envelope;
    public static PageMediaSizeName JapanKaku3EnvelopeRotated;
    public static PageMediaSizeName JapanYou4Envelope;
    public static PageMediaSizeName NorthAmerica10x11;
    public static PageMediaSizeName NorthAmerica10x14;
    public static PageMediaSizeName NorthAmerica11x17;
    public static PageMediaSizeName NorthAmerica9x11;
    public static PageMediaSizeName NorthAmericaArchitectureASheet;
    public static PageMediaSizeName NorthAmericaArchitectureBSheet;
    public static PageMediaSizeName NorthAmericaArchitectureCSheet;
    public static PageMediaSizeName NorthAmericaArchitectureDSheet;
    public static PageMediaSizeName NorthAmericaArchitectureESheet;
    public static PageMediaSizeName NorthAmericaCSheet;
    public static PageMediaSizeName NorthAmericaDSheet;
    public static PageMediaSizeName NorthAmericaESheet;
    public static PageMediaSizeName NorthAmericaExecutive;
    public static PageMediaSizeName NorthAmericaGermanLegalFanfold;
    public static PageMediaSizeName NorthAmericaGermanStandardFanfold;
    public static PageMediaSizeName NorthAmericaLegal;
    public static PageMediaSizeName NorthAmericaLegalExtra;
    public static PageMediaSizeName NorthAmericaLetter;
    public static PageMediaSizeName NorthAmericaLetterRotated;
    public static PageMediaSizeName NorthAmericaLetterExtra;
    public static PageMediaSizeName NorthAmericaLetterPlus;
    public static PageMediaSizeName NorthAmericaMonarchEnvelope;
    public static PageMediaSizeName NorthAmericaNote;
    public static PageMediaSizeName NorthAmericaNumber10Envelope;
    public static PageMediaSizeName NorthAmericaNumber10EnvelopeRotated;
    public static PageMediaSizeName NorthAmericaNumber9Envelope;
    public static PageMediaSizeName NorthAmericaNumber11Envelope;
    public static PageMediaSizeName NorthAmericaNumber12Envelope;
    public static PageMediaSizeName NorthAmericaNumber14Envelope;
    public static PageMediaSizeName NorthAmericaPersonalEnvelope;
    public static PageMediaSizeName NorthAmericaQuarto;
    public static PageMediaSizeName NorthAmericaStatement;
    public static PageMediaSizeName NorthAmericaSuperA;
    public static PageMediaSizeName NorthAmericaSuperB;
    public static PageMediaSizeName NorthAmericaTabloid;
    public static PageMediaSizeName NorthAmericaTabloidExtra;
    public static PageMediaSizeName OtherMetricA4Plus;
    public static PageMediaSizeName OtherMetricA3Plus;
    public static PageMediaSizeName OtherMetricFolio;
    public static PageMediaSizeName OtherMetricInviteEnvelope;
    public static PageMediaSizeName OtherMetricItalianEnvelope;
    public static PageMediaSizeName PRC1Envelope;
    public static PageMediaSizeName PRC1EnvelopeRotated;
    public static PageMediaSizeName PRC10Envelope;
    public static PageMediaSizeName PRC10EnvelopeRotated;
    public static PageMediaSizeName PRC16K;
    public static PageMediaSizeName PRC16KRotated;
    public static PageMediaSizeName PRC2Envelope;
    public static PageMediaSizeName PRC2EnvelopeRotated;
    public static PageMediaSizeName PRC32K;
    public static PageMediaSizeName PRC32KRotated;
    public static PageMediaSizeName PRC32KBig;
    public static PageMediaSizeName PRC3Envelope;
    public static PageMediaSizeName PRC3EnvelopeRotated;
    public static PageMediaSizeName PRC4Envelope;
    public static PageMediaSizeName PRC4EnvelopeRotated;
    public static PageMediaSizeName PRC5Envelope;
    public static PageMediaSizeName PRC5EnvelopeRotated;
    public static PageMediaSizeName PRC6Envelope;
    public static PageMediaSizeName PRC6EnvelopeRotated;
    public static PageMediaSizeName PRC7Envelope;
    public static PageMediaSizeName PRC7EnvelopeRotated;
    public static PageMediaSizeName PRC8Envelope;
    public static PageMediaSizeName PRC8EnvelopeRotated;
    public static PageMediaSizeName PRC9Envelope;
    public static PageMediaSizeName PRC9EnvelopeRotated;
    public static PageMediaSizeName Roll04Inch;
    public static PageMediaSizeName Roll06Inch;
    public static PageMediaSizeName Roll08Inch;
    public static PageMediaSizeName Roll12Inch;
    public static PageMediaSizeName Roll15Inch;
    public static PageMediaSizeName Roll18Inch;
    public static PageMediaSizeName Roll22Inch;
    public static PageMediaSizeName Roll24Inch;
    public static PageMediaSizeName Roll30Inch;
    public static PageMediaSizeName Roll36Inch;
    public static PageMediaSizeName Roll54Inch;
    public static PageMediaSizeName JapanDoubleHagakiPostcard;
    public static PageMediaSizeName JapanDoubleHagakiPostcardRotated;
    public static PageMediaSizeName JapanLPhoto;
    public static PageMediaSizeName Japan2LPhoto;
    public static PageMediaSizeName JapanYou1Envelope;
    public static PageMediaSizeName JapanYou2Envelope;
    public static PageMediaSizeName JapanYou3Envelope;
    public static PageMediaSizeName JapanYou4EnvelopeRotated;
    public static PageMediaSizeName JapanYou6Envelope;
    public static PageMediaSizeName JapanYou6EnvelopeRotated;
    public static PageMediaSizeName NorthAmerica4x6;
    public static PageMediaSizeName NorthAmerica4x8;
    public static PageMediaSizeName NorthAmerica5x7;
    public static PageMediaSizeName NorthAmerica8x10;
    public static PageMediaSizeName NorthAmerica10x12;
    public static PageMediaSizeName NorthAmerica14x17;
    public static PageMediaSizeName BusinessCard;
    public static PageMediaSizeName CreditCard;
}
public enum System.Printing.PageMediaType : Enum {
    public int value__;
    public static PageMediaType Unknown;
    public static PageMediaType AutoSelect;
    public static PageMediaType Archival;
    public static PageMediaType BackPrintFilm;
    public static PageMediaType Bond;
    public static PageMediaType CardStock;
    public static PageMediaType Continuous;
    public static PageMediaType EnvelopePlain;
    public static PageMediaType EnvelopeWindow;
    public static PageMediaType Fabric;
    public static PageMediaType HighResolution;
    public static PageMediaType Label;
    public static PageMediaType MultiLayerForm;
    public static PageMediaType MultiPartForm;
    public static PageMediaType Photographic;
    public static PageMediaType PhotographicFilm;
    public static PageMediaType PhotographicGlossy;
    public static PageMediaType PhotographicHighGloss;
    public static PageMediaType PhotographicMatte;
    public static PageMediaType PhotographicSatin;
    public static PageMediaType PhotographicSemiGloss;
    public static PageMediaType Plain;
    public static PageMediaType Screen;
    public static PageMediaType ScreenPaged;
    public static PageMediaType Stationery;
    public static PageMediaType TabStockFull;
    public static PageMediaType TabStockPreCut;
    public static PageMediaType Transparency;
    public static PageMediaType TShirtTransfer;
    public static PageMediaType None;
}
public enum System.Printing.PageOrder : Enum {
    public int value__;
    public static PageOrder Unknown;
    public static PageOrder Standard;
    public static PageOrder Reverse;
}
public enum System.Printing.PageOrientation : Enum {
    public int value__;
    public static PageOrientation Unknown;
    public static PageOrientation Landscape;
    public static PageOrientation Portrait;
    public static PageOrientation ReverseLandscape;
    public static PageOrientation ReversePortrait;
}
public enum System.Printing.PageQualitativeResolution : Enum {
    public int value__;
    public static PageQualitativeResolution Unknown;
    public static PageQualitativeResolution Default;
    public static PageQualitativeResolution Draft;
    public static PageQualitativeResolution High;
    public static PageQualitativeResolution Normal;
    public static PageQualitativeResolution Other;
}
public class System.Printing.PageResolution : object {
    private Nullable`1<int> _x;
    private Nullable`1<int> _y;
    private Nullable`1<PageQualitativeResolution> _qualitative;
    public Nullable`1<int> X { get; }
    public Nullable`1<int> Y { get; }
    public Nullable`1<PageQualitativeResolution> QualitativeResolution { get; }
    public PageResolution(int resolutionX, int resolutionY);
    public PageResolution(PageQualitativeResolution qualitative);
    public PageResolution(int resolutionX, int resolutionY, PageQualitativeResolution qualitative);
    public Nullable`1<int> get_X();
    public Nullable`1<int> get_Y();
    public Nullable`1<PageQualitativeResolution> get_QualitativeResolution();
    public virtual string ToString();
}
internal enum System.Printing.PageScaling : Enum {
    public int value__;
    public static PageScaling Unspecified;
    public static PageScaling None;
    public static PageScaling Custom;
    public static PageScaling CustomSquare;
}
public class System.Printing.PageScalingFactorRange : object {
    private int _scaleMin;
    private int _scaleMax;
    public int MinimumScale { get; }
    public int MaximumScale { get; }
    internal PageScalingFactorRange(int scaleMin, int scaleMax);
    public int get_MinimumScale();
    public int get_MaximumScale();
    public virtual string ToString();
}
public enum System.Printing.PagesPerSheetDirection : Enum {
    public int value__;
    public static PagesPerSheetDirection Unknown;
    public static PagesPerSheetDirection RightBottom;
    public static PagesPerSheetDirection BottomRight;
    public static PagesPerSheetDirection LeftBottom;
    public static PagesPerSheetDirection BottomLeft;
    public static PagesPerSheetDirection RightTop;
    public static PagesPerSheetDirection TopRight;
    public static PagesPerSheetDirection LeftTop;
    public static PagesPerSheetDirection TopLeft;
}
public enum System.Printing.PhotoPrintingIntent : Enum {
    public int value__;
    public static PhotoPrintingIntent Unknown;
    public static PhotoPrintingIntent None;
    public static PhotoPrintingIntent PhotoBest;
    public static PhotoPrintingIntent PhotoDraft;
    public static PhotoPrintingIntent PhotoStandard;
}
public class System.Printing.PrintCapabilities : object {
    private InternalPrintCapabilities _printCap;
    private ReadOnlyCollection`1<Collation> _collationCap;
    private ReadOnlyCollection`1<DeviceFontSubstitution> _deviceFontCap;
    private ReadOnlyCollection`1<Duplexing> _duplexingCap;
    private ReadOnlyCollection`1<InputBin> _inputBinCap;
    private Nullable`1<int> _maxCopyCount;
    private Nullable`1<double> _orientedPageMediaWidth;
    private Nullable`1<double> _orientedPageMediaHeight;
    private ReadOnlyCollection`1<OutputColor> _outputColorCap;
    private ReadOnlyCollection`1<OutputQuality> _outputQualityCap;
    private ReadOnlyCollection`1<PageBorderless> _pageBorderlessCap;
    private PageImageableArea _pageImageableArea;
    private ReadOnlyCollection`1<PageMediaSize> _pageMediaSizeCap;
    private ReadOnlyCollection`1<PageMediaType> _pageMediaTypeCap;
    private ReadOnlyCollection`1<PageOrder> _pageOrderCap;
    private ReadOnlyCollection`1<PageOrientation> _pageOrientationCap;
    private ReadOnlyCollection`1<PageResolution> _pageResolutionCap;
    private PageScalingFactorRange _pageScalingFactorRange;
    private ReadOnlyCollection`1<int> _pagesPerSheetCap;
    private ReadOnlyCollection`1<PagesPerSheetDirection> _pagesPerSheetDirectionCap;
    private ReadOnlyCollection`1<PhotoPrintingIntent> _photoIntentCap;
    private ReadOnlyCollection`1<Stapling> _staplingCap;
    private ReadOnlyCollection`1<TrueTypeFontMode> _ttFontCap;
    public ReadOnlyCollection`1<Collation> CollationCapability { get; }
    public ReadOnlyCollection`1<DeviceFontSubstitution> DeviceFontSubstitutionCapability { get; }
    public ReadOnlyCollection`1<Duplexing> DuplexingCapability { get; }
    public ReadOnlyCollection`1<InputBin> InputBinCapability { get; }
    public Nullable`1<int> MaxCopyCount { get; }
    public Nullable`1<double> OrientedPageMediaWidth { get; }
    public Nullable`1<double> OrientedPageMediaHeight { get; }
    public ReadOnlyCollection`1<OutputColor> OutputColorCapability { get; }
    public ReadOnlyCollection`1<OutputQuality> OutputQualityCapability { get; }
    public ReadOnlyCollection`1<PageBorderless> PageBorderlessCapability { get; }
    public PageImageableArea PageImageableArea { get; }
    public ReadOnlyCollection`1<PageMediaSize> PageMediaSizeCapability { get; }
    public ReadOnlyCollection`1<PageMediaType> PageMediaTypeCapability { get; }
    public ReadOnlyCollection`1<PageOrder> PageOrderCapability { get; }
    public ReadOnlyCollection`1<PageOrientation> PageOrientationCapability { get; }
    public ReadOnlyCollection`1<PageResolution> PageResolutionCapability { get; }
    public PageScalingFactorRange PageScalingFactorRange { get; }
    public ReadOnlyCollection`1<int> PagesPerSheetCapability { get; }
    public ReadOnlyCollection`1<PagesPerSheetDirection> PagesPerSheetDirectionCapability { get; }
    public ReadOnlyCollection`1<PhotoPrintingIntent> PhotoPrintingIntentCapability { get; }
    public ReadOnlyCollection`1<Stapling> StaplingCapability { get; }
    public ReadOnlyCollection`1<TrueTypeFontMode> TrueTypeFontModeCapability { get; }
    public PrintCapabilities(Stream xmlStream);
    public ReadOnlyCollection`1<Collation> get_CollationCapability();
    public ReadOnlyCollection`1<DeviceFontSubstitution> get_DeviceFontSubstitutionCapability();
    public ReadOnlyCollection`1<Duplexing> get_DuplexingCapability();
    public ReadOnlyCollection`1<InputBin> get_InputBinCapability();
    public Nullable`1<int> get_MaxCopyCount();
    public Nullable`1<double> get_OrientedPageMediaWidth();
    public Nullable`1<double> get_OrientedPageMediaHeight();
    public ReadOnlyCollection`1<OutputColor> get_OutputColorCapability();
    public ReadOnlyCollection`1<OutputQuality> get_OutputQualityCapability();
    public ReadOnlyCollection`1<PageBorderless> get_PageBorderlessCapability();
    public PageImageableArea get_PageImageableArea();
    public ReadOnlyCollection`1<PageMediaSize> get_PageMediaSizeCapability();
    public ReadOnlyCollection`1<PageMediaType> get_PageMediaTypeCapability();
    public ReadOnlyCollection`1<PageOrder> get_PageOrderCapability();
    public ReadOnlyCollection`1<PageOrientation> get_PageOrientationCapability();
    public ReadOnlyCollection`1<PageResolution> get_PageResolutionCapability();
    public PageScalingFactorRange get_PageScalingFactorRange();
    public ReadOnlyCollection`1<int> get_PagesPerSheetCapability();
    public ReadOnlyCollection`1<PagesPerSheetDirection> get_PagesPerSheetDirectionCapability();
    public ReadOnlyCollection`1<PhotoPrintingIntent> get_PhotoPrintingIntentCapability();
    public ReadOnlyCollection`1<Stapling> get_StaplingCapability();
    public ReadOnlyCollection`1<TrueTypeFontMode> get_TrueTypeFontModeCapability();
}
public class System.Printing.PrintCommitAttributesException : PrintSystemException {
    private Collection`1<string> committedAttributes;
    private Collection`1<string> failedAttributes;
    private string printObjectName;
    public string PrintObjectName { get; }
    public Collection`1<string> CommittedAttributesCollection { get; }
    public Collection`1<string> FailedAttributesCollection { get; }
    public PrintCommitAttributesException(string message);
    public PrintCommitAttributesException(string message, Exception innerException);
    public PrintCommitAttributesException(int errorCode, Collection`1<string> attributesSuccessList, Collection`1<string> attributesFailList);
    public PrintCommitAttributesException(int errorCode, string message, Collection`1<string> attributesSuccessList, Collection`1<string> attributesFailList, string objectName);
    protected PrintCommitAttributesException(SerializationInfo info, StreamingContext context);
    public string get_PrintObjectName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Collection`1<string> get_CommittedAttributesCollection();
    public Collection`1<string> get_FailedAttributesCollection();
}
internal abstract class System.Printing.PrinterHResult : object {
    public static int HResultFromWin32(int win32ErrorCode);
    public static int HResultCode(int errorCode);
    public static Facility HResultFacility(int errorCode);
}
public class System.Printing.PrintingCanceledException : PrintJobException {
    public PrintingCanceledException(string message);
    public PrintingCanceledException(string message, Exception innerException);
    public PrintingCanceledException(int errorCode, string message);
    public PrintingCanceledException(int errorCode, string message, Exception innerException);
    public PrintingCanceledException(int errorCode, string message, string printQueueName, string jobName, int jobId);
    public PrintingCanceledException(int errorCode, string message, string printQueueName, string jobName, int jobId, Exception innerException);
    protected PrintingCanceledException(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintingNotSupportedException : PrintSystemException {
    public PrintingNotSupportedException(string message);
    public PrintingNotSupportedException(string message, Exception innerException);
    protected PrintingNotSupportedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintJobException : PrintSystemException {
    private int jobId;
    private string printQueueName;
    private string jobContainer;
    public int JobId { get; }
    public string JobName { get; }
    public string PrintQueueName { get; }
    public PrintJobException(string message);
    public PrintJobException(string message, Exception innerException);
    public PrintJobException(int errorCode, string message);
    public PrintJobException(int errorCode, string message, string printQueueName, string jobName, int jobId);
    public PrintJobException(int errorCode, string message, string printQueueName, string jobName, int jobId, Exception innerException);
    public PrintJobException(int errorCode, string message, Exception innerException);
    protected PrintJobException(SerializationInfo info, StreamingContext context);
    public int get_JobId();
    public string get_JobName();
    public string get_PrintQueueName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintQueueException : PrintSystemException {
    private string printerName;
    public string PrinterName { get; }
    public PrintQueueException(string message);
    public PrintQueueException(string message, Exception innerException);
    public PrintQueueException(int errorCode, string message, string printerName);
    public PrintQueueException(int errorCode, string message, string printerName, string printerMessage);
    public PrintQueueException(int errorCode, string message, string printerName, Exception innerException);
    protected PrintQueueException(SerializationInfo info, StreamingContext context);
    public string get_PrinterName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintServerException : PrintSystemException {
    private string serverName;
    public string ServerName { get; }
    public PrintServerException(string message);
    public PrintServerException(string message, Exception innerException);
    public PrintServerException(int errorCode, string message, string serverName);
    public PrintServerException(int errorCode, string message, string serverName, Exception innerException);
    protected PrintServerException(SerializationInfo info, StreamingContext context);
    public string get_ServerName();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintSystemException : SystemException {
    private static ResourceManager printResourceManager;
    private static int defaultWin32ErrorMessageLength;
    private static int FormatMessageFromSystem;
    public PrintSystemException(string message);
    public PrintSystemException(string message, Exception innerException);
    public PrintSystemException(int errorCode, string message);
    public PrintSystemException(int errorCode, string message, string printerMessage);
    public PrintSystemException(int errorCode, string message, Exception innerException);
    protected PrintSystemException(SerializationInfo info, StreamingContext context);
    private static PrintSystemException();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string GetMessageFromResource(string resourceKey);
    private static string GetMessageFromResource(int errorCode, string resourceKey);
    private static string GetFormattedWin32Error(int win32Error);
}
public class System.Printing.PrintTicket : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private InternalPrintTicket _printTicket;
    private bool _isSettingChanged;
    private Dictionary`2<CapabilityName, object> _setterCache;
    public Nullable`1<Collation> Collation { get; public set; }
    public Nullable`1<int> CopyCount { get; public set; }
    public Nullable`1<DeviceFontSubstitution> DeviceFontSubstitution { get; public set; }
    public Nullable`1<Duplexing> Duplexing { get; public set; }
    public Nullable`1<InputBin> InputBin { get; public set; }
    public Nullable`1<OutputColor> OutputColor { get; public set; }
    public Nullable`1<OutputQuality> OutputQuality { get; public set; }
    public Nullable`1<PageBorderless> PageBorderless { get; public set; }
    public PageMediaSize PageMediaSize { get; public set; }
    public Nullable`1<PageMediaType> PageMediaType { get; public set; }
    public Nullable`1<PageOrder> PageOrder { get; public set; }
    public Nullable`1<PageOrientation> PageOrientation { get; public set; }
    public PageResolution PageResolution { get; public set; }
    public Nullable`1<int> PageScalingFactor { get; public set; }
    public Nullable`1<int> PagesPerSheet { get; public set; }
    public Nullable`1<PagesPerSheetDirection> PagesPerSheetDirection { get; public set; }
    public Nullable`1<PhotoPrintingIntent> PhotoPrintingIntent { get; public set; }
    public Nullable`1<Stapling> Stapling { get; public set; }
    public Nullable`1<TrueTypeFontMode> TrueTypeFontMode { get; public set; }
    [FriendAccessAllowedAttribute]
internal bool IsSettingChanged { get; }
    public PrintTicket(Stream xmlStream);
    public PrintTicket Clone();
    public MemoryStream GetXmlStream();
    public void SaveTo(Stream outStream);
    public Nullable`1<Collation> get_Collation();
    public void set_Collation(Nullable`1<Collation> value);
    public Nullable`1<int> get_CopyCount();
    public void set_CopyCount(Nullable`1<int> value);
    public Nullable`1<DeviceFontSubstitution> get_DeviceFontSubstitution();
    public void set_DeviceFontSubstitution(Nullable`1<DeviceFontSubstitution> value);
    public Nullable`1<Duplexing> get_Duplexing();
    public void set_Duplexing(Nullable`1<Duplexing> value);
    public Nullable`1<InputBin> get_InputBin();
    public void set_InputBin(Nullable`1<InputBin> value);
    public Nullable`1<OutputColor> get_OutputColor();
    public void set_OutputColor(Nullable`1<OutputColor> value);
    public Nullable`1<OutputQuality> get_OutputQuality();
    public void set_OutputQuality(Nullable`1<OutputQuality> value);
    public Nullable`1<PageBorderless> get_PageBorderless();
    public void set_PageBorderless(Nullable`1<PageBorderless> value);
    public PageMediaSize get_PageMediaSize();
    public void set_PageMediaSize(PageMediaSize value);
    public Nullable`1<PageMediaType> get_PageMediaType();
    public void set_PageMediaType(Nullable`1<PageMediaType> value);
    public Nullable`1<PageOrder> get_PageOrder();
    public void set_PageOrder(Nullable`1<PageOrder> value);
    public Nullable`1<PageOrientation> get_PageOrientation();
    public void set_PageOrientation(Nullable`1<PageOrientation> value);
    public PageResolution get_PageResolution();
    public void set_PageResolution(PageResolution value);
    public Nullable`1<int> get_PageScalingFactor();
    public void set_PageScalingFactor(Nullable`1<int> value);
    public Nullable`1<int> get_PagesPerSheet();
    public void set_PagesPerSheet(Nullable`1<int> value);
    public Nullable`1<PagesPerSheetDirection> get_PagesPerSheetDirection();
    public void set_PagesPerSheetDirection(Nullable`1<PagesPerSheetDirection> value);
    public Nullable`1<PhotoPrintingIntent> get_PhotoPrintingIntent();
    public void set_PhotoPrintingIntent(Nullable`1<PhotoPrintingIntent> value);
    public Nullable`1<Stapling> get_Stapling();
    public void set_Stapling(Nullable`1<Stapling> value);
    public Nullable`1<TrueTypeFontMode> get_TrueTypeFontMode();
    public void set_TrueTypeFontMode(Nullable`1<TrueTypeFontMode> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string name);
    internal bool get_IsSettingChanged();
    internal string ToXmlString();
    private EnumType GetEnumValueFromCacheOrXml(CapabilityName feature, EnumType xmlValue);
    private void AddSetterEnumValueToCache(CapabilityName feature, EnumType value);
    private void ExecuteMediaSizeSetter(object cacheValue);
    private void ExecuteResolutionSetter(object cacheValue);
    private void ExecuteGeneralEnumSetters(CapabilityName feature, object cacheValue);
    private void ExecuteCachedSetters();
}
[FriendAccessAllowedAttribute]
internal class System.Printing.PrintTicketManager : object {
    private static int _maxPrintSchemaVersion;
    private PTProviderBase _ptProvider;
    private bool _disposed;
    public static int MaxPrintSchemaVersion { get; }
    public PrintTicketManager(string deviceName, int clientPrintSchemaVersion);
    public static int get_MaxPrintSchemaVersion();
    public PrintCapabilities GetPrintCapabilities(PrintTicket printTicket);
    public MemoryStream GetPrintCapabilitiesAsXml(PrintTicket printTicket);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket, PrintTicketScope scope);
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Release();
}
[ComVisibleAttribute("False")]
public enum System.Printing.PrintTicketScope : Enum {
    public int value__;
    public static PrintTicketScope PageScope;
    public static PrintTicketScope DocumentScope;
    public static PrintTicketScope JobScope;
}
public enum System.Printing.Stapling : Enum {
    public int value__;
    public static Stapling Unknown;
    public static Stapling SaddleStitch;
    public static Stapling StapleBottomLeft;
    public static Stapling StapleBottomRight;
    public static Stapling StapleDualLeft;
    public static Stapling StapleDualRight;
    public static Stapling StapleDualTop;
    public static Stapling StapleDualBottom;
    public static Stapling StapleTopLeft;
    public static Stapling StapleTopRight;
    public static Stapling None;
}
public enum System.Printing.TrueTypeFontMode : Enum {
    public int value__;
    public static TrueTypeFontMode Unknown;
    public static TrueTypeFontMode Automatic;
    public static TrueTypeFontMode DownloadAsOutlineFont;
    public static TrueTypeFontMode DownloadAsRasterFont;
    public static TrueTypeFontMode DownloadAsNativeTrueTypeFont;
    public static TrueTypeFontMode RenderAsBitmap;
}
[ComVisibleAttribute("False")]
public class System.Printing.ValidationResult : ValueType {
    private MemoryStream _ptStream;
    private ConflictStatus _status;
    private PrintTicket _printTicket;
    private static int NullHashCode;
    public PrintTicket ValidatedPrintTicket { get; }
    public ConflictStatus ConflictStatus { get; }
    internal ValidationResult(MemoryStream validatedPrintTicketStream, ConflictStatus conflictStatus);
    public PrintTicket get_ValidatedPrintTicket();
    public ConflictStatus get_ConflictStatus();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(ValidationResult a, ValidationResult b);
    public static bool op_Inequality(ValidationResult a, ValidationResult b);
    private bool Equals(ValidationResult other);
}
internal class System.Windows.Xps.Packaging.FlushItem : object {
    private FlushOrder _flushOrder;
    private Type _classType;
    internal FlushOrder FlushOrder { get; }
    public Type ClassType { get; }
    internal FlushItem(FlushOrder flushOrder, Type classType);
    internal FlushOrder get_FlushOrder();
    public Type get_ClassType();
}
internal enum System.Windows.Xps.Packaging.FlushOrder : Enum {
    public int value__;
    public static FlushOrder None;
    public static FlushOrder FirstOrder;
    public static FlushOrder SecondOrder;
    public static FlushOrder ThirdOrder;
    public static FlushOrder FourthOrder;
    public static FlushOrder FifthOrder;
    public static FlushOrder SixthOrder;
}
public interface System.Windows.Xps.Packaging.IDocumentStructureProvider {
    public abstract virtual XpsStructure AddDocumentStructure();
}
internal interface System.Windows.Xps.Packaging.INode {
    public Uri Uri { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual void Flush();
    public abstract virtual void CommitInternal();
    public abstract virtual PackagePart GetPart();
}
internal class System.Windows.Xps.Packaging.InterleavingNode : object {
    private INode _node;
    private int _number;
    private INode _parent;
    private bool _commited;
    public bool Commited { get; public set; }
    public INode Node { get; }
    public int Number { get; }
    public INode Parent { get; }
    internal InterleavingNode(INode node, int number, INode parent);
    public bool get_Commited();
    public void set_Commited(bool value);
    public INode get_Node();
    public int get_Number();
    public INode get_Parent();
}
public interface System.Windows.Xps.Packaging.IStoryFragmentProvider {
    public abstract virtual XpsStructure AddStoryFragment();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentReader {
    public PrintTicket PrintTicket { get; }
    public Uri Uri { get; }
    public ReadOnlyCollection`1<IXpsFixedPageReader> FixedPages { get; }
    public int DocumentNumber { get; }
    public ICollection`1<XpsSignatureDefinition> SignatureDefinitions { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure DocumentStructure { get; }
    public abstract virtual IXpsFixedPageReader GetFixedPage(Uri pageSource);
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual Uri get_Uri();
    public abstract virtual ReadOnlyCollection`1<IXpsFixedPageReader> get_FixedPages();
    public abstract virtual int get_DocumentNumber();
    public abstract virtual ICollection`1<XpsSignatureDefinition> get_SignatureDefinitions();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual XpsStructure get_DocumentStructure();
    public abstract virtual void AddSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public abstract virtual void RemoveSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public abstract virtual void CommitSignatureDefinition();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader {
    public PrintTicket PrintTicket { get; }
    public Uri Uri { get; }
    public ReadOnlyCollection`1<IXpsFixedDocumentReader> FixedDocuments { get; }
    public XpsThumbnail Thumbnail { get; }
    public abstract virtual IXpsFixedDocumentReader GetFixedDocument(Uri documentSource);
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual Uri get_Uri();
    public abstract virtual ReadOnlyCollection`1<IXpsFixedDocumentReader> get_FixedDocuments();
    public abstract virtual XpsThumbnail get_Thumbnail();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public abstract virtual IXpsFixedDocumentWriter AddFixedDocument();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public int DocumentNumber { get; }
    public abstract virtual IXpsFixedPageWriter AddFixedPage();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual int get_DocumentNumber();
}
public interface System.Windows.Xps.Packaging.IXpsFixedPageReader {
    public PrintTicket PrintTicket { get; }
    public Uri Uri { get; }
    public XmlReader XmlReader { get; }
    public int PageNumber { get; }
    public ICollection`1<XpsFont> Fonts { get; }
    public ICollection`1<XpsColorContext> ColorContexts { get; }
    public ICollection`1<XpsResourceDictionary> ResourceDictionaries { get; }
    public ICollection`1<XpsImage> Images { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure StoryFragment { get; }
    public abstract virtual XpsResource GetResource(Uri resourceUri);
    public abstract virtual XpsFont GetFont(Uri uri);
    public abstract virtual XpsColorContext GetColorContext(Uri uri);
    public abstract virtual XpsResourceDictionary GetResourceDictionary(Uri uri);
    public abstract virtual XpsImage GetImage(Uri uri);
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual Uri get_Uri();
    public abstract virtual XmlReader get_XmlReader();
    public abstract virtual int get_PageNumber();
    public abstract virtual ICollection`1<XpsFont> get_Fonts();
    public abstract virtual ICollection`1<XpsColorContext> get_ColorContexts();
    public abstract virtual ICollection`1<XpsResourceDictionary> get_ResourceDictionaries();
    public abstract virtual ICollection`1<XpsImage> get_Images();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual XpsStructure get_StoryFragment();
}
public interface System.Windows.Xps.Packaging.IXpsFixedPageWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public XmlWriter XmlWriter { get; }
    public int PageNumber { get; }
    public IList`1<string> LinkTargetStream { get; }
    public abstract virtual XpsResource AddResource(Type resourceType, Uri resourceUri);
    public abstract virtual XpsFont AddFont();
    public abstract virtual XpsFont AddFont(bool obfuscate);
    public abstract virtual XpsFont AddFont(bool obfuscate, bool addRestrictedRelationship);
    public abstract virtual XpsColorContext AddColorContext();
    public abstract virtual XpsResourceDictionary AddResourceDictionary();
    public abstract virtual XpsImage AddImage(string mimeType);
    public abstract virtual XpsImage AddImage(XpsImageType imageType);
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual XmlWriter get_XmlWriter();
    public abstract virtual int get_PageNumber();
    public abstract virtual IList`1<string> get_LinkTargetStream();
}
internal class System.Windows.Xps.Packaging.NodeComparer : object {
    private Hashtable _orderTable;
    public NodeComparer(Hashtable flushOrderTable);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Windows.Xps.Packaging.InterleavingNode>.Compare(InterleavingNode x, InterleavingNode y);
}
public enum System.Windows.Xps.Packaging.PackageInterleavingOrder : Enum {
    public int value__;
    public static PackageInterleavingOrder None;
    public static PackageInterleavingOrder ResourceFirst;
    public static PackageInterleavingOrder ResourceLast;
    public static PackageInterleavingOrder ImagesLast;
}
public enum System.Windows.Xps.Packaging.PackagingAction : Enum {
    public int value__;
    public static PackagingAction None;
    public static PackagingAction AddingDocumentSequence;
    public static PackagingAction DocumentSequenceCompleted;
    public static PackagingAction AddingFixedDocument;
    public static PackagingAction FixedDocumentCompleted;
    public static PackagingAction AddingFixedPage;
    public static PackagingAction FixedPageCompleted;
    public static PackagingAction ResourceAdded;
    public static PackagingAction FontAdded;
    public static PackagingAction ImageAdded;
    public static PackagingAction XpsDocumentCommitted;
}
public class System.Windows.Xps.Packaging.PackagingProgressEventArgs : EventArgs {
    private PackagingAction _action;
    private int _numberCompleted;
    public int NumberCompleted { get; }
    public PackagingAction Action { get; }
    public PackagingProgressEventArgs(PackagingAction action, int numberCompleted);
    public int get_NumberCompleted();
    public PackagingAction get_Action();
}
public class System.Windows.Xps.Packaging.PackagingProgressEventHandler : MulticastDelegate {
    public PackagingProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PackagingProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PackagingProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Xps.Packaging.PartEditor : object {
    private PackagePart _metroPart;
    private Stream _partDataStream;
    protected PackagePart MetroPart { get; }
    internal Stream DataStream { get; }
    internal PartEditor(PackagePart metroPart);
    protected PackagePart get_MetroPart();
    internal Stream get_DataStream();
    internal virtual void Close();
    internal virtual void Flush();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.SpotLocation : object {
    private Uri _pageUri;
    private double _startX;
    private double _startY;
    public Uri PageUri { get; public set; }
    public double StartX { get; public set; }
    public double StartY { get; public set; }
    public Uri get_PageUri();
    public void set_PageUri(Uri value);
    public double get_StartX();
    public void set_StartX(double value);
    public double get_StartY();
    public void set_StartY(double value);
}
internal class System.Windows.Xps.Packaging.XmlPartEditor : PartEditor {
    private bool _doesWriteStartEndTags;
    private XmlTextWriter _xmlWriter;
    private XmlTextReader _xmlReader;
    private bool _isStartElementWritten;
    internal bool DoesWriteStartEndTags { get; internal set; }
    internal bool IsStartElementWritten { get; }
    internal XmlTextWriter XmlWriter { get; }
    internal XmlTextReader XmlReader { get; }
    internal XmlPartEditor(PackagePart metroPart);
    internal bool get_DoesWriteStartEndTags();
    internal void set_DoesWriteStartEndTags(bool value);
    internal bool get_IsStartElementWritten();
    internal XmlTextWriter get_XmlWriter();
    internal XmlTextReader get_XmlReader();
    internal void OpenDocumentForRead();
    internal void OpenDocumentForWrite();
    internal void PrepareXmlWriter(string startTag, string namespaceUri);
    internal virtual void Flush();
    internal virtual void Close();
}
internal class System.Windows.Xps.Packaging.XmlTags : object {
    private static string _source;
    public static string Source { get; }
    public static string get_Source();
}
public class System.Windows.Xps.Packaging.XpsColorContext : XpsResource {
    internal XpsColorContext(XpsManager xpsManager, INode parent, PackagePart part);
}
public class System.Windows.Xps.Packaging.XpsDigitalSignature : object {
    private PackageDigitalSignature _packageSignature;
    private XpsDocument _package;
    private static Dictionary`2<string, string> _optionalSignedTypes;
    public IXpsFixedDocumentSequenceReader SignedDocumentSequence { get; }
    public bool SignatureOriginRestricted { get; }
    public bool DocumentPropertiesRestricted { get; }
    public Nullable`1<Guid> Id { get; }
    public X509Certificate SignerCertificate { get; }
    public DateTime SigningTime { get; }
    public Byte[] SignatureValue { get; }
    public string SignatureType { get; }
    public bool IsCertificateAvailable { get; }
    internal PackageDigitalSignature PackageSignature { get; }
    private Dictionary`2<string, string> OptionalSignedParts { get; }
    public XpsDigitalSignature(PackageDigitalSignature packageSignature, XpsDocument package);
    public IXpsFixedDocumentSequenceReader get_SignedDocumentSequence();
    public bool get_SignatureOriginRestricted();
    public bool get_DocumentPropertiesRestricted();
    public Nullable`1<Guid> get_Id();
    public X509Certificate get_SignerCertificate();
    public DateTime get_SigningTime();
    public Byte[] get_SignatureValue();
    public string get_SignatureType();
    public bool get_IsCertificateAvailable();
    public VerifyResult Verify();
    public VerifyResult Verify(X509Certificate certificate);
    public X509ChainStatusFlags VerifyCertificate();
    public static X509ChainStatusFlags VerifyCertificate(X509Certificate certificate);
    internal PackageDigitalSignature get_PackageSignature();
    private bool CollectionContainsCollection(ICollection`1<Uri> containingCollection, ICollection`1<Uri> containedCollection);
    private bool IsOptional(Uri uri);
    private bool SelectorListContainsSelectorList(ReadOnlyCollection`1<PackageRelationshipSelector> containingCollection, List`1<PackageRelationshipSelector> containedCollection);
    private Dictionary`2<string, string> get_OptionalSignedParts();
}
[FlagsAttribute]
public enum System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions : Enum {
    public int value__;
    public static XpsDigSigPartAlteringRestrictions None;
    public static XpsDigSigPartAlteringRestrictions CoreMetadata;
    public static XpsDigSigPartAlteringRestrictions Annotations;
    public static XpsDigSigPartAlteringRestrictions SignatureOrigin;
}
public class System.Windows.Xps.Packaging.XpsDocument : XpsPartBase {
    private bool _isInDocumentStage;
    private Collection`1<XpsDigitalSignature> _reachSignatures;
    private ReadOnlyCollection`1<XpsDigitalSignature> _reachSignatureList;
    private XpsThumbnail _thumbnail;
    private Package _opcPackage;
    private bool _disposed;
    public bool IsWriter { get; }
    public bool IsReader { get; }
    public IXpsFixedDocumentSequenceReader FixedDocumentSequenceReader { get; }
    public ReadOnlyCollection`1<XpsDigitalSignature> Signatures { get; }
    public PackageProperties CoreDocumentProperties { get; }
    public XpsThumbnail Thumbnail { get; public set; }
    public bool IsSignable { get; }
    unknown Package OpcPackage {internal set; }
    public XpsDocument(Package package);
    public XpsDocument(Package package, CompressionOption compressionOption);
    public XpsDocument(Package package, CompressionOption compressionOption, string path);
    public XpsDocument(string path, FileAccess packageAccess);
    public XpsDocument(string path, FileAccess packageAccess, CompressionOption compressionOption);
    public bool get_IsWriter();
    public bool get_IsReader();
    public IXpsFixedDocumentSequenceReader get_FixedDocumentSequenceReader();
    public ReadOnlyCollection`1<XpsDigitalSignature> get_Signatures();
    public PackageProperties get_CoreDocumentProperties();
    public XpsThumbnail get_Thumbnail();
    public void set_Thumbnail(XpsThumbnail value);
    public bool get_IsSignable();
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, Guid id);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, Guid id, bool testIsSignable);
    public void RemoveSignature(XpsDigitalSignature signature);
    public XpsThumbnail AddThumbnail(XpsImageType imageType);
    public IXpsFixedDocumentSequenceWriter AddFixedDocumentSequence();
    public FixedDocumentSequence GetFixedDocumentSequence();
    internal virtual void CommitInternal();
    public void Close();
    protected virtual void Dispose(bool disposing);
    private void Initialize();
    private void EnsureThumbnail();
    private void EnsureSignatures();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    private XpsDigitalSignature AddSignature(PackageDigitalSignature packSignature);
    private bool StreamContainsVersionExtensiblity(Stream stream);
    private XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, string signatureId, bool testIsSignable);
    [FriendAccessAllowedAttribute]
internal static XpsDocument CreateXpsDocument(Stream dataStream);
    [FriendAccessAllowedAttribute]
internal void DisposeXpsDocument();
    internal void set_OpcPackage(Package value);
    internal static void SaveWithUI(IntPtr parent, Uri source, Uri target);
    private sealed virtual override void System.IDisposable.Dispose();
    private void CheckDisposed();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    [FriendAccessAllowedAttribute]
internal PackageSerializationManager CreateSerializationManager(bool bBatchMode);
    [FriendAccessAllowedAttribute]
internal PackageSerializationManager CreateAsyncSerializationManager(bool bBatchMode);
    [FriendAccessAllowedAttribute]
internal void DisposeSerializationManager();
    public static XpsDocumentWriter CreateXpsDocumentWriter(XpsDocument xpsDocument);
}
internal class System.Windows.Xps.Packaging.XpsFixedDocumentReaderWriter : XpsPartBase {
    private PackagePart _metroPart;
    private PrintTicket _printTicket;
    private XmlPartEditor _partEditor;
    private IList`1<string> _linkTargetStream;
    private List`1<IXpsFixedPageReader> _pageCache;
    private int _pagesWritten;
    private bool _isPrintTicketCommitted;
    private INode _parentNode;
    private bool _hasParsedPages;
    private int _documentNumber;
    private XpsThumbnail _thumbnail;
    private XpsFixedPageReaderWriter _currentPage;
    private Collection`1<XpsSignatureDefinition> _signatureDefinitions;
    private bool _sigCollectionDirty;
    private XpsStructure _documentStructure;
    public PrintTicket PrintTicket { get; public set; }
    public ReadOnlyCollection`1<IXpsFixedPageReader> FixedPages { get; }
    public ICollection`1<XpsSignatureDefinition> SignatureDefinitions { get; }
    public int DocumentNumber { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure DocumentStructure { get; }
    internal XmlWriter XmlWriter { get; }
    internal XpsFixedDocumentReaderWriter(XpsManager xpsManager, INode parent, PackagePart part, int documentNumber);
    public sealed virtual PrintTicket get_PrintTicket();
    public sealed virtual void set_PrintTicket(PrintTicket value);
    public sealed virtual ReadOnlyCollection`1<IXpsFixedPageReader> get_FixedPages();
    public sealed virtual ICollection`1<XpsSignatureDefinition> get_SignatureDefinitions();
    public sealed virtual int get_DocumentNumber();
    public sealed virtual XpsThumbnail get_Thumbnail();
    public sealed virtual XpsStructure get_DocumentStructure();
    public sealed virtual IXpsFixedPageWriter AddFixedPage();
    public sealed virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public sealed virtual XpsStructure AddDocumentStructure();
    public void AddRelationship(Uri targetUri, string relationshipName);
    public sealed virtual IXpsFixedPageReader GetFixedPage(Uri pageUri);
    public sealed virtual void AddSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public sealed virtual void CommitSignatureDefinition();
    public sealed virtual void RemoveSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public sealed virtual void Commit();
    internal virtual void CommitInternal();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CollectXmlPartsAndDepenedents(List`1<PackagePart> xmlPartList);
    internal void CollectDependents(Dictionary`2<Uri, Uri> dependents, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    private void AddPageToDocument(Uri partUri, IList`1<string> linkTargetStream);
    private void CommitPrintTicket();
    internal void CurrentPageCommitted();
    private void UpdatePageCache();
    private void ParsePages();
    private IXpsFixedPageReader AddPageToCache(Uri pageUri);
    private void EnsureThumbnail();
    private void EnsureSignatureDefinitions();
    private void EnsureDoucmentStructure();
    private void ParseSignaturePart(PackagePart sigDefPart, Collection`1<XpsSignatureDefinition> sigDefCollection);
    private void ParseSignatureDefinitions(XmlReader reader, Collection`1<XpsSignatureDefinition> sigDefCollection);
    private void WriteSignatureDefinitions();
    internal XmlWriter get_XmlWriter();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Windows.Xps.Packaging.XpsFixedDocumentSequenceReaderWriter : XpsPartBase {
    private PackagePart _metroPart;
    private PrintTicket _printTicket;
    private XmlPartEditor _partEditor;
    private List`1<IXpsFixedDocumentReader> _documentCache;
    private int _documentsWritten;
    private bool _isPrintTicketCommitted;
    private INode _parentNode;
    private bool _hasParsedDocuments;
    private XpsThumbnail _thumbnail;
    public PrintTicket PrintTicket { get; public set; }
    public ReadOnlyCollection`1<IXpsFixedDocumentReader> FixedDocuments { get; }
    public XpsThumbnail Thumbnail { get; }
    internal XmlWriter XmlWriter { get; }
    internal XpsFixedDocumentSequenceReaderWriter(XpsManager xpsManager, INode parent, PackagePart part);
    public sealed virtual PrintTicket get_PrintTicket();
    public sealed virtual void set_PrintTicket(PrintTicket value);
    public sealed virtual ReadOnlyCollection`1<IXpsFixedDocumentReader> get_FixedDocuments();
    public sealed virtual XpsThumbnail get_Thumbnail();
    public sealed virtual IXpsFixedDocumentWriter AddFixedDocument();
    public sealed virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public sealed virtual IXpsFixedDocumentReader GetFixedDocument(Uri documentUri);
    public sealed virtual void Commit();
    internal virtual void CommitInternal();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CollectXmlPartsAndDepenedents(List`1<PackagePart> xmlPartList);
    private void AddDocumentToSequence(Uri partUri);
    private void CommitPrintTicket();
    private void UpdateDocumentCache();
    private void ParseDocuments();
    private void CollectDependents(Dictionary`2<Uri, Uri> dependents, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    private void EnsureThumbnail();
    private IXpsFixedDocumentReader AddDocumentToCache(Uri documentUri);
    internal XmlWriter get_XmlWriter();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Windows.Xps.Packaging.XpsFixedPageReaderWriter : XpsPartBase {
    private PackagePart _metroPart;
    private PrintTicket _printTicket;
    private XmlPartEditor _partEditor;
    private IList`1<string> _linkTargetStream;
    private int _pageNumber;
    private StringWriter _pageStream;
    private StringWriter _resourceStream;
    private StringWriter _resourceDictionaryStream;
    private XmlWriter _pageXmlWriter;
    private XmlWriter _resourceXmlWriter;
    private XmlWriter _resourceDictionaryXmlWriter;
    private Dictionary`2<Uri, XpsImage> _imageCache;
    private Dictionary`2<Uri, XpsFont> _fontCache;
    private Dictionary`2<Uri, XpsColorContext> _colorContextCache;
    private Dictionary`2<Uri, XpsResourceDictionary> _resourceDictionaryCache;
    private Dictionary`2<Uri, XpsResource> _resourceCache;
    private bool _isPrintTicketCommitted;
    private XpsFixedDocumentReaderWriter _parentNode;
    private List`1<INode> _currentChildren;
    private bool _hasParsedResources;
    private XpsThumbnail _thumbnail;
    private XpsStructure _storyFragment;
    public PrintTicket PrintTicket { get; public set; }
    public XmlWriter XmlWriter { get; }
    public XmlReader XmlReader { get; }
    public IList`1<string> LinkTargetStream { get; }
    public int PageNumber { get; }
    public XmlWriter ResourceDictionaryXmlWriter { get; }
    public ICollection`1<XpsFont> Fonts { get; }
    public ICollection`1<XpsColorContext> ColorContexts { get; }
    public ICollection`1<XpsResourceDictionary> ResourceDictionaries { get; }
    public ICollection`1<XpsImage> Images { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure StoryFragment { get; }
    internal XpsFixedDocumentReaderWriter Parent { get; }
    internal XmlWriter PageXmlWriter { get; }
    internal XpsFixedPageReaderWriter(XpsManager xpsManager, XpsFixedDocumentReaderWriter parent, PackagePart part, IList`1<string> linkTargetStream, int pageNumber);
    public sealed virtual PrintTicket get_PrintTicket();
    public sealed virtual void set_PrintTicket(PrintTicket value);
    public sealed virtual XmlWriter get_XmlWriter();
    public sealed virtual XmlReader get_XmlReader();
    public sealed virtual IList`1<string> get_LinkTargetStream();
    public sealed virtual int get_PageNumber();
    public XmlWriter get_ResourceDictionaryXmlWriter();
    public sealed virtual ICollection`1<XpsFont> get_Fonts();
    public sealed virtual ICollection`1<XpsColorContext> get_ColorContexts();
    public sealed virtual ICollection`1<XpsResourceDictionary> get_ResourceDictionaries();
    public sealed virtual ICollection`1<XpsImage> get_Images();
    public sealed virtual XpsThumbnail get_Thumbnail();
    public sealed virtual XpsStructure get_StoryFragment();
    public void AddRelationship(Uri targetUri, string relationshipName);
    public sealed virtual XpsResource AddResource(Type resourceType, Uri resourceUri);
    public sealed virtual XpsStructure AddStoryFragment();
    public sealed virtual XpsResource GetResource(Uri resourceUri);
    public sealed virtual XpsFont AddFont();
    public sealed virtual XpsFont AddFont(bool obfuscate);
    public sealed virtual XpsFont AddFont(bool obfuscate, bool addRestrictedRelationship);
    public sealed virtual XpsColorContext AddColorContext();
    public sealed virtual XpsResourceDictionary AddResourceDictionary();
    public sealed virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public sealed virtual XpsFont GetFont(Uri uri);
    public sealed virtual XpsColorContext GetColorContext(Uri uri);
    public sealed virtual XpsResourceDictionary GetResourceDictionary(Uri uri);
    public sealed virtual XpsImage AddImage(XpsImageType imageType);
    public sealed virtual XpsImage AddImage(string mimeType);
    internal XpsImage AddImage(ContentType mimeType);
    public sealed virtual XpsImage GetImage(Uri uri);
    public sealed virtual void Commit();
    internal virtual void CommitInternal();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CollectXmlPartsAndDepenedents(List`1<PackagePart> xmlPartList);
    internal void CollectDependents(Dictionary`2<Uri, Uri> dependents);
    private void CommitPrintTicket();
    private void UpdateResourceCache();
    private void ParseResources();
    private void EnsureThumbnail();
    private XpsImage AddImage(PackagePart packagePart);
    private XpsFont AddFont(PackagePart packagePart);
    private void AddRelationshipTypes(List`1<PackageRelationshipSelector> selectorList);
    private XpsColorContext AddColorContext(PackagePart packagePart);
    private XpsResourceDictionary AddResourceDictionary(PackagePart packagePart);
    private PackagePart GeneratePartForResourceType(Type resourceType, Uri resourceUri);
    private static ContentType LookupContentTypeForImageUri(Uri imageUri);
    private static ContentType LookupContentTypeForFontUri(Uri fontUri);
    internal XpsFixedDocumentReaderWriter get_Parent();
    internal XmlWriter get_PageXmlWriter();
    internal void PrepareCommit();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.XpsFont : XpsResource {
    private bool _isObfuscated;
    private bool _isResticted;
    public bool IsObfuscated { get; }
    public bool IsRestricted { get; public set; }
    internal XpsFont(XpsManager xpsManager, INode parent, PackagePart part);
    public bool get_IsObfuscated();
    public bool get_IsRestricted();
    public void set_IsRestricted(bool value);
    public static void ObfuscateFontData(Byte[] fontData, Guid guid);
}
public class System.Windows.Xps.Packaging.XpsImage : XpsResource {
    internal XpsImage(XpsManager xpsManager, INode parent, PackagePart part);
}
public enum System.Windows.Xps.Packaging.XpsImageType : Enum {
    public int value__;
    public static XpsImageType PngImageType;
    public static XpsImageType JpegImageType;
    public static XpsImageType TiffImageType;
    public static XpsImageType WdpImageType;
}
internal class System.Windows.Xps.Packaging.XpsInterleavingPolicy : object {
    [CompilerGeneratedAttribute]
private PackagingProgressEventHandler PackagingProgressEvent;
    private Hashtable _flushOrderItems;
    private List`1<InterleavingNode> _interleavingNodes;
    private bool _flushOnSubsetComplete;
    private PackageInterleavingOrder _interleavingType;
    public XpsInterleavingPolicy(PackageInterleavingOrder type, bool flushOnSubsetComplete);
    public void RegisterFlushOrder(FlushOrder flushOrder, Type classType);
    [CompilerGeneratedAttribute]
internal void add_PackagingProgressEvent(PackagingProgressEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PackagingProgressEvent(PackagingProgressEventHandler value);
    internal void SignalSubsetComplete();
    internal void Commit(INode node);
    internal void AddItem(INode n, int number, INode parent);
    internal PackagingAction GetAddType(INode n);
    private void InitializeResourceFirst();
    private void InitializeResourceLast();
    private void InitializeImagesLast();
    private void Flush();
    private void MarkNodeCommited(INode node);
    private void RemoveNode(INode node);
    private void ConfirmCommited();
    private bool IsPartialFlushAllowed(InterleavingNode n);
}
internal class System.Windows.Xps.Packaging.XpsManager : object {
    private XpsDocument _xpsDocument;
    private Package _metroPackage;
    private Uri _uri;
    private CompressionOption _compressionOption;
    private Dictionary`2<string, int> _contentTypes;
    private Dictionary`2<Uri, PackagePart> _cachedParts;
    private bool _streaming;
    private bool _ownsPackage;
    internal static Dictionary`2<Uri, int> _packageCache;
    internal static object _globalLock;
    public PackagePart StartingPart { get; public set; }
    public XpsDocument XpsDocument { get; public set; }
    public bool IsWriter { get; }
    public bool IsReader { get; }
    public Package MetroPackage { get; }
    public bool Streaming { get; }
    internal XpsManager(Package metroPackage, CompressionOption compressionOption);
    internal XpsManager(string path, FileAccess packageAccess, CompressionOption compressionOption);
    private static XpsManager();
    public PackagePart get_StartingPart();
    public void set_StartingPart(PackagePart value);
    public void set_XpsDocument(XpsDocument value);
    public XpsDocument get_XpsDocument();
    public bool get_IsWriter();
    public bool get_IsReader();
    public Package get_MetroPackage();
    public bool get_Streaming();
    public PackagePart GeneratePart(ContentType contentType, Uri partUri);
    public PackagePart GenerateUniquePart(ContentType contentType);
    public PrintTicket EnsurePrintTicket(Uri partUri);
    public PackagePart GenerateObfuscatedFontPart();
    public void WritePrintTicket(XpsPartBase relatedPart, PackagePart metroPart, PrintTicket printTicket);
    public void WriteEmptyPrintTicket(XpsPartBase relatedPart, PackagePart metroPart);
    public PackagePart GetPart(Uri uri);
    public PackagePart AddSignatureDefinitionPart(PackagePart documentPart);
    public PackagePart GetSignatureDefinitionPart(Uri documentUri);
    public PackagePart GetDocumentPropertiesPart();
    public PackagePart GetThumbnailPart(PackagePart parent);
    public PackagePart GetPrintTicketPart(Uri documentUri);
    public PackagePart AddDocumentPropertiesPart();
    public XpsThumbnail AddThumbnail(XpsImageType imageType, INode parent, XpsThumbnail oldThumbnail);
    public XpsThumbnail EnsureThumbnail(INode parent, PackagePart part);
    public void CollectPropertiesForSigning(Dictionary`2<Uri, Uri> dependents, XpsDigSigPartAlteringRestrictions restrictions);
    public Uri GetSignatureOriginUri();
    public void CollectSignitureOriginForSigning(List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    public PackageDigitalSignature Sign(IEnumerable`1<Uri> partList, X509Certificate certificate, bool embedCertificate, IEnumerable`1<PackageRelationshipSelector> relationshipSelectors, string id);
    public void Close();
    internal Uri CreateStructureUri();
    internal Uri CreateFragmentUri(int pageNumber);
    private void Initialize(Package metroPackage, CompressionOption compressionOption, bool streaming);
    private Uri GeneratePrintTicketUri(object relatedPart);
    internal Uri GeneratePrintTicketUri(ContentType contentType);
    internal Uri GenerateUniqueUri(ContentType contentType);
    private string GetContentCounterKey(ContentType contentType);
    private PackageRelationship GetDocumentPropertiesReationship();
    private void AddPackageToCache(Uri uri, Package package);
    private void AddPackageReference(Uri uri);
    private void RemovePackageReference(Uri uri, Package package);
    private sealed virtual override void System.IDisposable.Dispose();
    private static string LookupImageExtension(ContentType contentType);
    internal static PackagePart GetXpsDocumentStartingPart(Package package);
    internal static void SetXpsDocumentStartingPart(Package package, PackagePart startingPart);
    public static string MakeRelativePath(Uri baseUri, Uri fileUri);
    public static bool SupportedImageType(ContentType imageContentType);
    public static ContentType ImageTypeToString(XpsImageType imageType);
}
internal class System.Windows.Xps.Packaging.XpsNamedProperties : object {
    private static string _printTicketProperty;
    private static string _clrProperty;
    public static string PrintTicketProperty { get; }
    public static string ClrProperty { get; }
    public static string get_PrintTicketProperty();
    public static string get_ClrProperty();
}
internal class System.Windows.Xps.Packaging.XpsOMPackagingPolicy : BasePackagingPolicy {
    private static int INITIAL_FONTCACHE_CAPACITY;
    private IXpsDocumentPackageTarget _packageTarget;
    private IXpsOMObjectFactory _xpsOMFactory;
    private IXpsOMPartResources _xpsPartResources;
    private IXpsOMPackageWriter _currentFixedDocumentSequenceWriter;
    private IXpsOMPage _currentFixedPageWriter;
    private XPS_IMAGE_TYPE _currentImageType;
    private int _currentDocumentSequenceWriterRef;
    private int _currentFixedDocumentWriterRef;
    private int _currentFixedPageWriterRef;
    private int _currentXpsImageRef;
    private int _currentXpsColorContextRef;
    private XpsResourceStream _imageResourceStream;
    private XpsResourceStream _colorContextResourceStream;
    private Hashtable _fontsCache;
    private IList`1<string> _currentFixedPageLinkTargetStream;
    private Uri _currentFixedDocumentUri;
    private Uri _currentFixedPageUri;
    private StringWriter _currentPageContentStream;
    private StringWriter _currentResourceStream;
    private XpsPrintStream _currentFixedPagePrintStream;
    private XmlWriter _currentPageContentXmlWriter;
    private XmlWriter _currentResourceXmlWriter;
    private XmlWriter _currentFixedPageXmlWriter;
    private Size _currentPageSize;
    private PrintTicket _currentPagePrintTicket;
    private PrintTicket _currentDocumentPrintTicket;
    private XpsManager _xpsManager;
    private static int TRUE;
    private static int FALSE;
    private bool _isValid;
    private object _printQueue;
    unknown Size FixedPageSize {internal set; }
    internal bool IsValid { get; }
    unknown object PrintQueueReference {internal set; }
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    internal XpsOMPackagingPolicy(IXpsDocumentPackageTarget packageTarget);
    internal void EnsureXpsOMPackageWriter();
    internal void CloseXpsOMPackageWriter();
    internal void StartNewDocument();
    internal void ReleaseXpsOMWriterForFixedDocument();
    internal void set_FixedPageSize(Size value);
    internal bool get_IsValid();
    internal void set_PrintQueueReference(object value);
    public virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public virtual void ReleaseXmlWriterForFixedDocument();
    public virtual XmlWriter AcquireXmlWriterForFixedPage();
    public virtual void ReleaseXmlWriterForFixedPage();
    public virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public virtual XmlWriter AcquireXmlWriterForPage();
    public virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public virtual IList`1<string> AcquireStreamForLinkTargets();
    public virtual void PreCommitCurrentPage();
    public virtual void PersistPrintTicket(PrintTicket printTicket);
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public virtual void ReleaseResourceStreamForXpsFont();
    public virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public virtual void ReleaseResourceStreamForXpsImage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public virtual void ReleaseResourceStreamForXpsColorContext();
    public virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public virtual Uri get_CurrentFixedDocumentUri();
    public virtual Uri get_CurrentFixedPageUri();
    private void Initialize();
    private void Invalidate();
    private IOpcPartUri GenerateIOpcPartUri(ContentType contentType);
    private IOpcPartUri GenerateIOpcPartUri(Uri uri);
    private Uri GenerateUriForObfuscatedFont();
    private IXpsOMPrintTicketResource GeneratePrintTicketResource(ContentType contentType, PrintTicket printTicket);
    private XPS_IMAGE_TYPE GetXpsImageTypeFromContentType(ContentType contentType);
    private void AddCurrentPageToPackageWriter();
    private void SetHyperlinkTargetsForCurrentPage();
}
public abstract class System.Windows.Xps.Packaging.XpsPartBase : object {
    private XpsManager _xpsManager;
    private Uri _uri;
    public Uri Uri { get; public set; }
    internal XpsManager CurrentXpsManager { get; }
    internal XpsPartBase(XpsManager xpsManager);
    public sealed virtual Uri get_Uri();
    public void set_Uri(Uri value);
    internal virtual void CommitInternal();
    internal XpsManager get_CurrentXpsManager();
}
public class System.Windows.Xps.Packaging.XpsResource : XpsPartBase {
    private INode _parentNode;
    private PackagePart _metroPart;
    private PartEditor _partEditor;
    internal XpsResource(XpsManager xpsManager, INode parent, PackagePart part);
    public Uri RelativeUri(Uri inUri);
    public virtual Stream GetStream();
    public void Commit();
    internal virtual void CommitInternal();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.XpsResourceDictionary : XpsResource {
    internal XpsResourceDictionary(XpsManager xpsManager, INode parent, PackagePart part);
}
internal class System.Windows.Xps.Packaging.XpsResourcePolicy : object {
    private Dictionary`2<UInt32, Uri> _imageCrcTable;
    private Dictionary`2<int, Uri> _imageUriHashTable;
    private Dictionary`2<int, Uri> _currentPageImageTable;
    private Dictionary`2<int, Uri> _colorContextTable;
    private Dictionary`2<int, Uri> _currentPageColorContextTable;
    private Dictionary`2<int, Uri> _resourceDictionaryTable;
    private Dictionary`2<int, Uri> _currentPageResourceDictionaryTable;
    private XpsResourceSharing _sharingMode;
    private Dictionary`2<Type, object> _objDict;
    public XpsResourceSharing ResourceSharingMode { get; }
    internal Dictionary`2<UInt32, Uri> ImageCrcTable { get; internal set; }
    internal Dictionary`2<int, Uri> ImageUriHashTable { get; internal set; }
    internal Dictionary`2<int, Uri> CurrentPageImageTable { get; internal set; }
    internal Dictionary`2<int, Uri> ColorContextTable { get; internal set; }
    internal Dictionary`2<int, Uri> CurrentPageColorContextTable { get; internal set; }
    internal Dictionary`2<int, Uri> ResourceDictionaryTable { get; internal set; }
    internal Dictionary`2<int, Uri> CurrentPageResourceDictionaryTable { get; internal set; }
    public XpsResourcePolicy(XpsResourceSharing sharingMode);
    public XpsResourceSharing get_ResourceSharingMode();
    public void RegisterService(object service, Type serviceType);
    internal bool SubsetComplete(INode node);
    internal object GetService(Type serviceType);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    internal Dictionary`2<UInt32, Uri> get_ImageCrcTable();
    internal void set_ImageCrcTable(Dictionary`2<UInt32, Uri> value);
    internal Dictionary`2<int, Uri> get_ImageUriHashTable();
    internal void set_ImageUriHashTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_CurrentPageImageTable();
    internal void set_CurrentPageImageTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_ColorContextTable();
    internal void set_ColorContextTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_CurrentPageColorContextTable();
    internal void set_CurrentPageColorContextTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_ResourceDictionaryTable();
    internal void set_ResourceDictionaryTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_CurrentPageResourceDictionaryTable();
    internal void set_CurrentPageResourceDictionaryTable(Dictionary`2<int, Uri> value);
}
public enum System.Windows.Xps.Packaging.XpsResourceSharing : Enum {
    public int value__;
    public static XpsResourceSharing ShareResources;
    public static XpsResourceSharing NoResourceSharing;
}
internal class System.Windows.Xps.Packaging.XpsS0Markup : object {
    private static string _packageRelationshipUri;
    private static string _obfuscatedFontExt;
    private static string _pageWidth;
    private static string _pageHeight;
    private static string _fixedPage;
    private static string _fixedDocument;
    private static string _fixedDocumentSequence;
    private static string _pageContent;
    private static string _documentReference;
    private static string _storyFragments;
    private static string _xmlns;
    private static string _xmlnsX;
    private static string _xmlLang;
    private static string _xmlLangValue;
    private static string _xmlEngLangValue;
    private static string _xmlnsXSchema;
    private static string _imageUriPlaceHolder;
    private static string _colorContextUriPlaceHolder;
    private static string _resourceDictionaryUriPlaceHolder;
    private static string _fontUriPlaceHolder;
    private static string _resourceDictionary;
    private static string _pageResources;
    private static string _signatureDefinitions;
    private static string _signatureDefinition;
    private static string _requestedSigner;
    private static string _spotLocation;
    private static string _pageUri;
    private static string _startX;
    private static string _startY;
    private static string _intent;
    private static string _signBy;
    private static string _signingLocale;
    private static string _spotId;
    private static String[] _xmlnsUri;
    private static ContentType _applicationXaml;
    private static ContentType _documentSequenceContentType;
    private static ContentType _fixedDocumentContentType;
    private static ContentType _fixedPageContentType;
    private static ContentType _documentStructureContentType;
    private static ContentType _storyFragmentsContentType;
    private static ContentType _printTicketContentType;
    private static ContentType _signatureDefinitionType;
    private static ContentType _coreDocumentPropertiesContentType;
    private static ContentType _resourceContentType;
    private static ContentType _fontContentType;
    private static ContentType _colorContextContentType;
    private static ContentType _obfuscatedContentType;
    private static ContentType _jpgContentType;
    private static ContentType _sigOriginContentType;
    private static ContentType _sigCertContentType;
    private static ContentType _discardContentType;
    private static ContentType _relationshipContentType;
    private static string _jpgExtension;
    private static ContentType _pngContentType;
    private static string _pngExtension;
    private static ContentType _tifContentType;
    private static string _tifExtension;
    private static ContentType _wdpContentType;
    private static string _wdpExtension;
    private static ContentType _wmpContentType;
    private static ContentType _resourceDictionaryContentType;
    private static string _documentSequenceNamespace;
    private static string _fixedDocumentNamespace;
    private static string _signatureDefinitionNamespace;
    private static string _resourceRelationshipName;
    private static string _structureRelationshipName;
    private static string _storyFragmentsRelationshipName;
    private static string _printTicketRelationshipName;
    private static string _signatureDefinitionRelationshipName;
    private static string _thumbnailRelationshipName;
    private static string _coreDocumentPropertiesRelationshipType;
    private static string _reachPackageStartingPartRelationshipType;
    private static string _restrictedFontRelationshipType;
    private static string _ditialSignatureRelationshipType;
    private static XmlnsUriContainer _xmlnsUriContainer;
    private static string _versionExtensiblityNamespace;
    public static string PackageRelationshipUri { get; }
    public static string ObfuscatedFontExt { get; }
    public static string PageWidth { get; }
    public static string PageHeight { get; }
    public static string FixedPage { get; }
    public static string FixedDocument { get; }
    public static string FixedDocumentSequence { get; }
    public static string PageContent { get; }
    public static string DocumentReference { get; }
    public static string StoryFragments { get; }
    public static string Xmlns { get; }
    public static string XmlnsX { get; }
    public static string XmlLang { get; }
    public static string XmlnsXSchema { get; }
    public static string XmlLangValue { get; }
    public static string XmlEngLangValue { get; }
    public static string ImageUriPlaceHolder { get; }
    public static string ColorContextUriPlaceHolder { get; }
    public static string ResourceDictionaryUriPlaceHolder { get; }
    public static string FontUriPlaceHolder { get; }
    public static string ResourceDictionary { get; }
    public static string PageResources { get; }
    public static string SignatureDefinition { get; }
    public static string SignatureDefinitions { get; }
    public static string RequestedSigner { get; }
    public static string SpotLocation { get; }
    public static string PageUri { get; }
    public static string StartX { get; }
    public static string StartY { get; }
    public static string Intent { get; }
    public static string SignBy { get; }
    public static string SigningLocale { get; }
    public static string SpotId { get; }
    public static XmlnsUriContainer XmlnsUri { get; }
    public static ContentType ApplicationXaml { get; }
    public static ContentType DocumentSequenceContentType { get; }
    public static ContentType FixedDocumentContentType { get; }
    public static ContentType FixedPageContentType { get; }
    public static ContentType DocumentStructureContentType { get; }
    public static ContentType StoryFragmentsContentType { get; }
    public static ContentType SignatureDefintionType { get; }
    public static ContentType CoreDocumentPropertiesType { get; }
    public static ContentType PrintTicketContentType { get; }
    public static ContentType ResourceContentType { get; }
    public static ContentType FontContentType { get; }
    public static ContentType FontObfuscatedContentType { get; }
    public static ContentType ColorContextContentType { get; }
    public static ContentType JpgContentType { get; }
    public static ContentType SigOriginContentType { get; }
    public static ContentType SigCertContentType { get; }
    public static ContentType DiscardContentType { get; }
    public static ContentType RelationshipContentType { get; }
    public static string JpgExtension { get; }
    public static ContentType PngContentType { get; }
    public static string PngExtension { get; }
    public static ContentType TifContentType { get; }
    public static string TifExtension { get; }
    public static ContentType WdpContentType { get; }
    public static string WdpExtension { get; }
    public static ContentType WmpContentType { get; }
    public static ContentType ResourceDictionaryContentType { get; }
    public static string DocumentSequenceNamespace { get; }
    public static string FixedDocumentNamespace { get; }
    public static string SignatureDefinitionNamespace { get; }
    public static string CorePropertiesRelationshipType { get; }
    public static string StructureRelationshipName { get; }
    public static string StoryFragmentsRelationshipName { get; }
    public static string ReachPackageStartingPartRelationshipType { get; }
    public static string ResourceRelationshipName { get; }
    public static string PrintTicketRelationshipName { get; }
    public static string SignatureDefinitionRelationshipName { get; }
    public static string RestrictedFontRelationshipType { get; }
    public static string DitialSignatureRelationshipType { get; }
    public static string ThumbnailRelationshipName { get; }
    public static string VersionExtensiblityNamespace { get; }
    private static XpsS0Markup();
    public static string get_PackageRelationshipUri();
    public static string get_ObfuscatedFontExt();
    public static string get_PageWidth();
    public static string get_PageHeight();
    public static string get_FixedPage();
    public static string get_FixedDocument();
    public static string get_FixedDocumentSequence();
    public static string get_PageContent();
    public static string get_DocumentReference();
    public static string get_StoryFragments();
    public static string get_Xmlns();
    public static string get_XmlnsX();
    public static string get_XmlLang();
    public static string get_XmlnsXSchema();
    public static string get_XmlLangValue();
    public static string get_XmlEngLangValue();
    public static string get_ImageUriPlaceHolder();
    public static string get_ColorContextUriPlaceHolder();
    public static string get_ResourceDictionaryUriPlaceHolder();
    public static string get_FontUriPlaceHolder();
    public static string get_ResourceDictionary();
    public static string get_PageResources();
    public static string get_SignatureDefinition();
    public static string get_SignatureDefinitions();
    public static string get_RequestedSigner();
    public static string get_SpotLocation();
    public static string get_PageUri();
    public static string get_StartX();
    public static string get_StartY();
    public static string get_Intent();
    public static string get_SignBy();
    public static string get_SigningLocale();
    public static string get_SpotId();
    public static string GetXmlnsUri(int index);
    public static XmlnsUriContainer get_XmlnsUri();
    public static ContentType get_ApplicationXaml();
    public static ContentType get_DocumentSequenceContentType();
    public static ContentType get_FixedDocumentContentType();
    public static ContentType get_FixedPageContentType();
    public static ContentType get_DocumentStructureContentType();
    public static ContentType get_StoryFragmentsContentType();
    public static ContentType get_SignatureDefintionType();
    public static ContentType get_CoreDocumentPropertiesType();
    public static ContentType get_PrintTicketContentType();
    public static ContentType get_ResourceContentType();
    public static ContentType get_FontContentType();
    public static ContentType get_FontObfuscatedContentType();
    public static ContentType get_ColorContextContentType();
    public static ContentType get_JpgContentType();
    public static ContentType get_SigOriginContentType();
    public static ContentType get_SigCertContentType();
    public static ContentType get_DiscardContentType();
    public static ContentType get_RelationshipContentType();
    public static string get_JpgExtension();
    public static ContentType get_PngContentType();
    public static string get_PngExtension();
    public static ContentType get_TifContentType();
    public static string get_TifExtension();
    public static ContentType get_WdpContentType();
    public static string get_WdpExtension();
    public static ContentType get_WmpContentType();
    public static ContentType get_ResourceDictionaryContentType();
    public static string get_DocumentSequenceNamespace();
    public static string get_FixedDocumentNamespace();
    public static string get_SignatureDefinitionNamespace();
    public static string get_CorePropertiesRelationshipType();
    public static string get_StructureRelationshipName();
    public static string get_StoryFragmentsRelationshipName();
    public static string get_ReachPackageStartingPartRelationshipType();
    public static string get_ResourceRelationshipName();
    public static string get_PrintTicketRelationshipName();
    public static string get_SignatureDefinitionRelationshipName();
    public static string get_RestrictedFontRelationshipType();
    public static string get_DitialSignatureRelationshipType();
    public static string get_ThumbnailRelationshipName();
    public static string get_VersionExtensiblityNamespace();
}
public class System.Windows.Xps.Packaging.XpsSignatureDefinition : object {
    private SpotLocation _spotLocation;
    private string _intent;
    private Nullable`1<DateTime> _signBy;
    private Nullable`1<Guid> _spotId;
    private string _requestedSigner;
    private string _signingLocale;
    private CultureInfo _cultureInfo;
    private bool _hasBeenModified;
    public string RequestedSigner { get; public set; }
    public SpotLocation SpotLocation { get; public set; }
    public string Intent { get; public set; }
    public Nullable`1<DateTime> SignBy { get; public set; }
    public string SigningLocale { get; public set; }
    public Nullable`1<Guid> SpotId { get; public set; }
    public CultureInfo Culture { get; public set; }
    public bool HasBeenModified { get; public set; }
    public string get_RequestedSigner();
    public void set_RequestedSigner(string value);
    public SpotLocation get_SpotLocation();
    public void set_SpotLocation(SpotLocation value);
    public string get_Intent();
    public void set_Intent(string value);
    public Nullable`1<DateTime> get_SignBy();
    public void set_SignBy(Nullable`1<DateTime> value);
    public string get_SigningLocale();
    public void set_SigningLocale(string value);
    public Nullable`1<Guid> get_SpotId();
    public void set_SpotId(Nullable`1<Guid> value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_HasBeenModified();
    public void set_HasBeenModified(bool value);
    internal void WriteXML(XmlWriter writer);
    internal void ReadXML(XmlReader reader);
    private void ReadAttributes(XmlReader reader);
    private void ValidateSignatureDefinitionAttribute(string attributeName, string attributeValue);
    private void ValidateSpotLocationAttribute(string attributeName, string attributeValue);
    private void ConfirmSpotLocation();
    private void ReadElement(XmlReader reader);
    private string ReadData(XmlReader reader);
    private bool ReadEndElement(XmlReader reader);
}
public class System.Windows.Xps.Packaging.XpsStructure : XpsResource {
    internal XpsStructure(XpsManager xpsManager, INode parent, PackagePart part);
}
public class System.Windows.Xps.Packaging.XpsThumbnail : XpsResource {
    internal XpsThumbnail(XpsManager xpsManager, INode parent, PackagePart part);
}
public abstract class System.Windows.Xps.Serialization.BasePackagingPolicy : object {
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    public abstract virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public abstract virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public abstract virtual void ReleaseXmlWriterForFixedDocument();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedPage();
    public abstract virtual void ReleaseXmlWriterForFixedPage();
    public abstract virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public abstract virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public abstract virtual void PersistPrintTicket(PrintTicket printTicket);
    public abstract virtual XmlWriter AcquireXmlWriterForPage();
    public abstract virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public abstract virtual IList`1<string> AcquireStreamForLinkTargets();
    public abstract virtual void PreCommitCurrentPage();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsFont();
    public abstract virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsImage();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsColorContext();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public abstract virtual Uri get_CurrentFixedDocumentUri();
    public abstract virtual Uri get_CurrentFixedPageUri();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal abstract class System.Windows.Xps.Serialization.BasicContext : object {
    private string _name;
    private string _prefix;
    public string Name { get; public set; }
    public string Prefix { get; public set; }
    public BasicContext(string name, string prefix);
    public string get_Name();
    public void set_Name(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public void Initialize();
    public virtual void Clear();
}
internal enum System.Windows.Xps.Serialization.BatchOperationType : Enum {
    public int value__;
    public static BatchOperationType batchWrite;
    public static BatchOperationType batchCommit;
}
internal class System.Windows.Xps.Serialization.BatchOperationWorkItem : object {
    private BatchOperationType _type;
    private object _serializedObject;
    public BatchOperationType OperationType { get; }
    public object SerializedObject { get; }
    public BatchOperationWorkItem(BatchOperationType type, object serializedObject);
    public BatchOperationType get_OperationType();
    public object get_SerializedObject();
}
public class System.Windows.Xps.Serialization.ColorTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    private static bool IsSupportedType(Type type);
    public static string SerializeColorContext(IServiceProvider context, ColorContext colorContext);
}
internal class System.Windows.Xps.Serialization.Crc32 : object {
    private UInt32 _crc32Value;
    private static UInt32 Crc32StartValue;
    private static UInt32[] Crc32Table;
    public UInt32 Crc32Value { get; }
    private static Crc32();
    public UInt32 get_Crc32Value();
    public void AddData(Byte[] data);
    private static UInt32 UpdateCRC32(Byte[] data, UInt32 oldCrc);
}
internal class System.Windows.Xps.Serialization.DependencyPropertyList : ValueType {
    public DependencyProperty[] List;
    public int Count;
    public DependencyPropertyList(int capacity);
    public void EnsureIndex(int index);
    public bool IsValidIndex(int index);
    public int IndexOf(DependencyProperty value);
    public bool Contains(DependencyProperty value);
    public void Add(DependencyProperty item);
    public void Add(DependencyProperty& item);
    public int Add();
    public int Add(int delta);
    private int Add(int delta, bool incrCount);
    public void Sort();
    public void AppendTo(DependencyPropertyList& destinationList);
    public DependencyProperty[] ToArray();
    public void Clear();
    public void Remove(DependencyProperty value);
}
internal class System.Windows.Xps.Serialization.DocumentPageSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeChild(Visual child, SerializableObjectContext parentContext);
    private void WriteAttribute(XmlWriter writer, string name, object value);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.DocumentPageSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPageSerializerAsync(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeChild(Visual child, SerializableObjectContext parentContext);
    private void EndSerializeDocumentPage(ReachSerializerContext context);
    private void WriteAttribute(XmlWriter writer, string name, object value);
}
internal class System.Windows.Xps.Serialization.DocumentPaginatorSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPaginatorSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.DocumentPaginatorSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPaginatorSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    private void SerializeNextDocumentPage(ReachSerializerContext context);
}
internal class System.Windows.Xps.Serialization.DocumentPaginatorSerializerContext : ReachSerializerContext {
    private DocumentPaginator _paginator;
    private int _index;
    public DocumentPaginator Paginator { get; }
    public int Index { get; }
    public DocumentPaginatorSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, DocumentPaginator paginator, int index, SerializerAction action);
    public DocumentPaginator get_Paginator();
    public int get_Index();
}
internal class System.Windows.Xps.Serialization.DocumentReferenceCollectionSerializerContext : ReachSerializerContext {
    private IEnumerator _enumerator;
    public IEnumerator Enumerator { get; }
    public DocumentReferenceCollectionSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.DocumentSequenceSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentSequenceSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
}
internal class System.Windows.Xps.Serialization.DocumentSequenceSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentSequenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
}
internal class System.Windows.Xps.Serialization.DrawingContextFlattener : object {
    private static double RasterizationClipInflate;
    private IMetroDrawingContext _dc;
    private List`1<Matrix> _fullTransform;
    private List`1<Geometry> _fullClip;
    private Size _pageSize;
    private TreeWalkProgress _treeWalkProgress;
    public Matrix Transform { get; }
    public Geometry Clip { get; }
    internal DrawingContextFlattener(IMetroDrawingContext dc, Size pageSize, TreeWalkProgress treeWalkProgress);
    public void Push(Transform transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    public void Pop();
    public Matrix get_Transform();
    public Geometry get_Clip();
    private Brush ReduceBrush(Brush brush, Rect bounds);
    private Pen ReducePen(Pen pen, Rect bounds);
    public void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public void DrawImage(ImageSource image, Rect rectangle);
    private Rect PerformRasterizationClip(Rect visualBounds, Matrix visualToWorldTransform);
    public void DrawRasterizedVisual(Visual visual, string nameAttr, Uri navigateUri, EdgeMode edgeMode, Transform visualTransform, Matrix visualToWorldTransform, Matrix inheritedTransformHint, Geometry clip, Effect effect);
    public void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
}
internal class System.Windows.Xps.Serialization.DrawingFlattenDrawingContext : object {
    private DrawingContext _context;
    private Stack _push;
    public DrawingFlattenDrawingContext(DrawingContext context);
    public sealed virtual void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public sealed virtual void DrawImage(ImageSource image, Rect rectangle);
    public sealed virtual void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    public sealed virtual void Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    public sealed virtual void Pop();
    public sealed virtual void Comment(string message);
}
internal class System.Windows.Xps.Serialization.FEMCacheItem : object {
    private bool _currentPageReferences;
    private bool _curPageRelAdded;
    private FontEmbeddingManager _fontEmbeddingManager;
    private BasePackagingPolicy _packagingPolicy;
    private XpsResourceStream _fontResourceStream;
    private GlyphTypeface _glyphTypeface;
    private bool _streamWritten;
    private Uri _fontUri;
    private static int _readBlockSize;
    public bool IsStreamWritten { get; }
    public bool CurrentPageReferences { get; public set; }
    public FEMCacheItem(GlyphTypeface glyphTypeface, BasePackagingPolicy packagingPolicy);
    private static FEMCacheItem();
    public Uri AddGlyphRunUsage(GlyphRun glyphRun);
    public void Commit();
    public void AddRestrictedRelationship();
    public void AddRelationship();
    private void SubSetFont(ICollection`1<ushort> glyphs, Stream stream);
    internal Uri CopyFontStream();
    private static Guid ParseGuidFromUri(Uri uri);
    public static void ObfuscateData(Byte[] fontData, Guid guid);
    public bool get_IsStreamWritten();
    public bool get_CurrentPageReferences();
    public void set_CurrentPageReferences(bool value);
}
internal class System.Windows.Xps.Serialization.FixedDocumentSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public FixedDocumentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.FixedDocumentSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public FixedDocumentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.FixedPageSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public FixedPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    private string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    private bool SerializePageAsVisual(Visual fixedPageAsVisual);
}
internal class System.Windows.Xps.Serialization.FixedPageSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public FixedPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    private string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    private bool SerializePageAsVisual(Visual fixedPageAsVisual);
    private void EndSerializeReachFixedPage(ReachFixedPageSerializerContext context);
}
[FlagsAttribute]
internal enum System.Windows.Xps.Serialization.FontEmbeddingAction : Enum {
    public int value__;
    public static FontEmbeddingAction None;
    public static FontEmbeddingAction ObfuscateSubsetFont;
    public static FontEmbeddingAction ObfuscateOnlyFont;
    public static FontEmbeddingAction ImageOnlyFont;
}
[FlagsAttribute]
public enum System.Windows.Xps.Serialization.FontSubsetterCommitPolicies : Enum {
    public int value__;
    public static FontSubsetterCommitPolicies None;
    public static FontSubsetterCommitPolicies CommitPerPage;
    public static FontSubsetterCommitPolicies CommitPerDocument;
    public static FontSubsetterCommitPolicies CommitEntireSequence;
}
public class System.Windows.Xps.Serialization.FontTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    private static bool IsSupportedType(Type type);
}
internal static class System.Windows.Xps.Serialization.GeometryHelper : object {
    private static double FUZZ;
    private static double PI_OVER_180;
    public static bool AcceptRadius(double rHalfChord2, double rFuzz2, Double& rRadius);
    public static Point Add(Point a, Point b);
    public static Point Sub(Point a, Point b);
    public static double DotProduct(Point a, Point b);
    public static double Determinant(Point a, Point b);
    public static void GetArcAngle(Point ptStart, Point ptEnd, bool fIsLargeArc, SweepDirection eSweepDirection, Double& rCosArcAngle, Double& rSinArcAngle, Int32& cPieces);
    public static double GetBezierDistance(double rDot, double rRadius);
    [FriendAccessAllowedAttribute]
public static PointCollection ArcToBezier(double xStart, double yStart, double xRadius, double yRadius, double rRotation, bool fIsLargeArc, SweepDirection eSweepDirection, double xEnd, double yEnd, Int32& cPieces);
}
public class System.Windows.Xps.Serialization.ImageSourceTypeConverter : ExpandableObjectConverter {
    private static int _readBlockSize;
    private int _uriHashValue;
    private UInt32 _crc32HashValue;
    private static ImageSourceTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    private static bool IsSupportedType(Type type);
    private static void CopyImageStream(Stream sourceStream, Stream destinationStream);
    private static void ReEncodeImage(BitmapSource bitmapSource, BitmapEncoder encoder, Stream stream);
    private static UInt32 CalculateImageCrc32(BitmapSource bitmapSource);
    private static string GetImageMimeType(BitmapEncoder encoder);
    private Uri GetBitmapSourceFromImageTable(PackageSerializationManager manager, BitmapSource bitmapSource);
    private void AddBitmapSourceToImageTables(PackageSerializationManager manager, Uri imageUri);
}
internal interface System.Windows.Xps.Serialization.IMetroDrawingContext {
    public abstract virtual void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public abstract virtual void DrawImage(ImageSource image, Rect rectangle);
    public abstract virtual void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    public abstract virtual void Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    public abstract virtual void Pop();
    public abstract virtual void Comment(string message);
}
internal interface System.Windows.Xps.Serialization.IXpsSerializationManager {
    public PrintTicket FixedPagePrintTicket { get; public set; }
    public Size FixedPageSize { get; public set; }
    public VisualSerializationService VisualSerializationService { get; }
    public abstract virtual void OnXPSSerializationPrintTicketRequired(object operationState);
    public abstract virtual void OnXPSSerializationProgressChanged(object operationState);
    public abstract virtual void RegisterPageStart();
    public abstract virtual void RegisterPageEnd();
    public abstract virtual void set_FixedPagePrintTicket(PrintTicket value);
    public abstract virtual PrintTicket get_FixedPagePrintTicket();
    public abstract virtual void set_FixedPageSize(Size value);
    public abstract virtual Size get_FixedPageSize();
    public abstract virtual VisualSerializationService get_VisualSerializationService();
}
internal interface System.Windows.Xps.Serialization.IXpsSerializationManagerAsync {
    public Stack OperationStack { get; }
    public abstract virtual Stack get_OperationStack();
}
[DefaultMemberAttribute("Item")]
internal class System.Windows.Xps.Serialization.MetroSerializationNamespaceTable : object {
    private IDictionary _innerDictionary;
    internal SerializableObjectNamespaceInfo Item { get; internal set; }
    internal MetroSerializationNamespaceTable(MetroSerializationNamespaceTable parent);
    internal SerializableObjectNamespaceInfo get_Item(Type type);
    internal void set_Item(Type type, SerializableObjectNamespaceInfo value);
    internal bool Contains(Type type);
    internal void Add(Type type, SerializableObjectNamespaceInfo namespaceInfo);
    internal void Initialize(MetroSerializationNamespaceTable parent);
}
internal class System.Windows.Xps.Serialization.MXDWSerializationManager : object {
    private PrintQueue _printQueue;
    private MetroToGdiConverter _gdiDevice;
    private string _jobName;
    private string _mxdwFileName;
    private bool _isPassThruSupported;
    public string MxdwFileName { get; }
    public bool IsPassThruSupported { get; }
    private MetroToGdiConverter GdiDevice { get; }
    public MXDWSerializationManager(PrintQueue queue);
    public void EnablePassThru();
    public string get_MxdwFileName();
    public bool get_IsPassThruSupported();
    public void Commit();
    private PrintTicket InferPrintTicket();
    private MetroToGdiConverter get_GdiDevice();
}
internal class System.Windows.Xps.Serialization.NgcDocumentPageSerializer : ReachSerializer {
    public NgcDocumentPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentPageSerializerAsync : NGCSerializerAsync {
    public NgcDocumentPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData(bool isManualStartDoc);
}
internal class System.Windows.Xps.Serialization.NgcDocumentPaginatorSerializer : ReachSerializer {
    public NgcDocumentPaginatorSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentPaginatorSerializerAsync : NGCSerializerAsync {
    public NgcDocumentPaginatorSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    private void SerializeNextDocumentPage(NGCSerializerContext context);
}
internal class System.Windows.Xps.Serialization.NGCDocumentPaginatorSerializerContext : NGCSerializerContext {
    private DocumentPaginator _paginator;
    private int _index;
    public DocumentPaginator Paginator { get; }
    public int Index { get; }
    public NGCDocumentPaginatorSerializerContext(NGCSerializerAsync serializer, DocumentPaginator paginator, int index, SerializerAction action);
    public DocumentPaginator get_Paginator();
    public int get_Index();
}
internal class System.Windows.Xps.Serialization.NgcDocumentReferenceCollectionSerializer : ReachSerializer {
    public NgcDocumentReferenceCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    private void SerializeDocumentReferences(object serializableObject);
    private void SerializeDocumentReference(DocumentReference dre);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentReferenceCollectionSerializerAsync : NGCSerializerAsync {
    public NgcDocumentReferenceCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeNextDocumentReference(IEnumerator enumerator, SerializableObjectContext serializableObjectContext);
    private void SerializeDocumentReference(object documentReference);
}
internal class System.Windows.Xps.Serialization.NgcDocumentReferenceCollectionSerializerContext : NGCSerializerContext {
    private IEnumerator _enumerator;
    public IEnumerator Enumerator { get; }
    public NgcDocumentReferenceCollectionSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.NgcDocumentSequenceSerializer : ReachSerializer {
    public NgcDocumentSequenceSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentSequenceSerializerAsync : NGCSerializerAsync {
    public NgcDocumentSequenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.NgcFixedDocumentSerializer : ReachSerializer {
    public NgcFixedDocumentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcFixedDocumentSerializerAsync : NGCSerializerAsync {
    public NgcFixedDocumentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.NgcFixedPageSerializer : ReachSerializer {
    public NgcFixedPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcFixedPageSerializerAsync : NGCSerializerAsync {
    public NgcFixedPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData(bool isManualStartDoc);
}
internal class System.Windows.Xps.Serialization.NgcPageContentCollectionSerializerAsync : NGCSerializerAsync {
    public NgcPageContentCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    private void SerializePageContents(SerializableObjectContext serializableObjectContext);
    private void SerializeNextPageContent(IEnumerator enumerator, SerializableObjectContext serializableObjectContext);
    private void SerializePageContent(object pageContent);
}
internal class System.Windows.Xps.Serialization.NgcPageContentCollectionSerializerContext : NGCSerializerContext {
    private IEnumerator _enumerator;
    public IEnumerator Enumerator { get; }
    public NgcPageContentCollectionSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.NgcPageContentSerializerAsync : NGCSerializerAsync {
    public NgcPageContentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializePage(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NGCPageSerializerContext : NGCSerializerContext {
    private bool _isManualStartDoc;
    public bool IsManualStartDoc { get; }
    public NGCPageSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action, bool isManualStartDoc);
    public bool get_IsManualStartDoc();
}
internal class System.Windows.Xps.Serialization.NgcPrintTicketManager : object {
    private static int s_PrintTicketCacheMaxCount;
    private MostFrequentlyUsedCache`2<string, PrintTicket> m_validatedPrintTicketCache;
    private PrintQueue _printQueue;
    private PrintTicket _fdsPrintTicket;
    private PrintTicket _fdPrintTicket;
    private PrintTicket _fpPrintTicket;
    private PrintTicket _rootPrintTicket;
    private PrintTicket _activePrintTicket;
    private bool _isActiveUpdated;
    public PrintTicket ActivePrintTicket { get; }
    public NgcPrintTicketManager(PrintQueue printQueue);
    public void ConstructPrintTicketTree(XpsSerializationPrintTicketRequiredEventArgs args);
    public PrintTicket ConsumeActivePrintTicket(bool consumePrintTicket);
    public PrintTicket get_ActivePrintTicket();
}
internal class System.Windows.Xps.Serialization.NGCReachPageContentCollectionSerializer : ReachSerializer {
    public NGCReachPageContentCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    private void SerializePageContents(IEnumerable enumerableObject);
    private void SerializePageContent(object pageContent);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NGCReachPageContentSerializer : ReachSerializer {
    public NGCReachPageContentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NGCReachUIElementCollectionSerializer : ReachSerializer {
    public NGCReachUIElementCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    private void SerializeUIElements(IEnumerable enumerableObject);
    private void SerializeUIElement(object uiElement);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcReachVisualSerializer : ReachSerializer {
    public NgcReachVisualSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcReachVisualSerializerAsync : NGCSerializerAsync {
    public NgcReachVisualSerializerAsync(PackageSerializationManager manager);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcSerializationManager : PackageSerializationManager {
    [CompilerGeneratedAttribute]
private XpsSerializationPrintTicketRequiredEventHandler XpsSerializationPrintTicketRequired;
    [CompilerGeneratedAttribute]
private XpsSerializationProgressChangedEventHandler XpsSerializationProgressChanged;
    private PrintQueue _printQueue;
    private int _startDocCnt;
    private bool _isStartPage;
    private MetroToGdiConverter _device;
    private string _jobName;
    private bool _isBatchMode;
    private bool _isSimulating;
    private NgcPrintTicketManager _printTicketManager;
    private bool _isPrintTicketMerged;
    private Size _pageSize;
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal PrintQueue PrintQueue { get; }
    internal string JobName { get; internal set; }
    internal Size PageSize { get; internal set; }
    internal bool IsPrintTicketEventHandlerEnabled { get; }
    public NgcSerializationManager(PrintQueue queue, bool isBatchMode);
    public virtual void SaveAsXaml(object serializedObject);
    public void Cancel();
    public void Commit();
    [CompilerGeneratedAttribute]
public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal PrintQueue get_PrintQueue();
    internal void set_JobName(string value);
    internal string get_JobName();
    internal void set_PageSize(Size value);
    internal Size get_PageSize();
    internal void StartDocument(object o, bool documentPrintTicketRequired);
    internal void EndDocument();
    internal bool StartPage();
    internal void EndPage();
    internal void OnNGCSerializationPrintTicketRequired(object operationState);
    internal void OnNGCSerializationProgressChagned(object operationState);
    internal void WalkVisual(Visual visual);
    internal PrintTicket GetActivePrintTicket();
    internal bool get_IsPrintTicketEventHandlerEnabled();
    private bool IsSerializedObjectTypeSupported(object serializedObject);
    private bool IsDocumentSequencePrintTicketRequired(object serializedObject);
}
internal class System.Windows.Xps.Serialization.NgcSerializationManagerAsync : PackageSerializationManager {
    [CompilerGeneratedAttribute]
private XpsSerializationCompletedEventHandler XpsSerializationCompleted;
    [CompilerGeneratedAttribute]
private XpsSerializationPrintTicketRequiredEventHandler XpsSerializationPrintTicketRequired;
    [CompilerGeneratedAttribute]
private XpsSerializationProgressChangedEventHandler XpsSerializationProgressChanged;
    private Dispatcher _dispatcher;
    private PrintQueue _printQueue;
    private int _startDocCnt;
    private bool _isStartPage;
    private MetroToGdiConverter _device;
    private string _jobName;
    private Stack _operationStack;
    private bool _isBatchMode;
    private Queue _batchOperationQueue;
    private bool _serializationOperationCanceled;
    private bool _isSimulating;
    private bool _isBatchWorkItemInProgress;
    private NgcPrintTicketManager _printTicketManager;
    private bool _isPrintTicketMerged;
    private Size _pageSize;
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal PrintQueue PrintQueue { get; }
    internal string JobName { get; internal set; }
    internal Size PageSize { get; internal set; }
    internal bool IsPrintTicketEventHandlerEnabled { get; }
    internal Stack OperationStack { get; }
    public NgcSerializationManagerAsync(PrintQueue queue, bool isBatchMode);
    public virtual void SaveAsXaml(object serializedObject);
    internal object InvokeSaveAsXamlWorkItem(object arg);
    internal object InvokeSaveAsXamlBatchWorkItem(object arg);
    public void CancelAsync();
    public void Commit();
    [CompilerGeneratedAttribute]
public void add_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal PrintQueue get_PrintQueue();
    internal void set_JobName(string value);
    internal string get_JobName();
    internal void set_PageSize(Size value);
    internal Size get_PageSize();
    internal void StartDocument(object o, bool documentPrintTicketRequired);
    internal void EndDocument();
    internal void EndDocument(bool abort);
    internal bool StartPage();
    internal void EndPage();
    internal void OnNGCSerializationPrintTicketRequired(object operationState);
    internal void OnNGCSerializationProgressChanged(object operationState);
    internal void WalkVisual(Visual visual);
    internal PrintTicket GetActivePrintTicket();
    internal bool get_IsPrintTicketEventHandlerEnabled();
    internal Stack get_OperationStack();
    private void PostSerializationTask(DispatcherOperationCallback taskItem);
    private void PostSerializationTask(DispatcherOperationCallback taskItem, object arg);
    private bool IsSerializedObjectTypeSupported(object serializedObject);
    private void NGCSerializationCompletionMethod();
    private object OnNGCSerializationCompleted(object operationState);
    private bool IsDocumentSequencePrintTicketRequired(object serializedObject);
    private void WaitForPendingAsyncItems();
    private bool IsAsyncWorkPending();
}
internal abstract class System.Windows.Xps.Serialization.NGCSerializerAsync : ReachSerializer {
    private NgcSerializationManagerAsync _serializationManager;
    public PackageSerializationManager SerializationManager { get; }
    protected NgcSerializationManagerAsync NgcSerializationManager { get; }
    public NGCSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void BeginSerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void EndSerializeObject(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    internal virtual void SerializeObjectCore(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    private SerializableObjectContext DiscoverObjectData(object serializedObject, SerializablePropertyContext serializedProperty);
    private void SerializeProperties(SerializableObjectContext serializableObjectContext);
    private void SerializeNextProperty(SerializableObjectContext serializableObjectContext);
    private void SerializeProperty(SerializablePropertyContext serializablePropertyContext);
    public virtual PackageSerializationManager get_SerializationManager();
    protected NgcSerializationManagerAsync get_NgcSerializationManager();
}
internal class System.Windows.Xps.Serialization.NGCSerializerContext : object {
    private SerializerAction _action;
    private NGCSerializerAsync _serializer;
    private SerializableObjectContext _objectContext;
    public SerializerAction Action { get; }
    public NGCSerializerAsync Serializer { get; }
    public SerializableObjectContext ObjectContext { get; }
    public NGCSerializerContext(NGCSerializerAsync serializer, SerializerAction action);
    public NGCSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action);
    public virtual SerializerAction get_Action();
    public virtual NGCSerializerAsync get_Serializer();
    public virtual SerializableObjectContext get_ObjectContext();
}
internal static class System.Windows.Xps.Serialization.NgcSerializerUtil : object {
    internal static string InferJobName(object o);
}
internal class System.Windows.Xps.Serialization.NgcUIElementCollectionSerializerAsync : NGCSerializerAsync {
    public NgcUIElementCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeUIElements(SerializableObjectContext serializableObjectContext);
    private void SerializeNextUIElement(IEnumerator enumerator, SerializableObjectContext serializableObjectContext);
    private void SerializeUIElement(object uiElement);
}
internal class System.Windows.Xps.Serialization.NgcUIElementCollectionSerializerContext : NGCSerializerContext {
    private IEnumerator _enumerator;
    public IEnumerator Enumerator { get; }
    public NgcUIElementCollectionSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.NodeContext : object {
    private Visual nodeVisual;
    private int index;
    public Visual NodeVisual { get; }
    public NodeContext(Visual v);
    public Visual get_NodeVisual();
    public Visual GetNextChild();
}
internal class System.Windows.Xps.Serialization.NullPackagingPolicy : BasePackagingPolicy {
    private StringWriter _currentFixedDocumentSequenceWriter;
    private StringWriter _currentFixedDocumentWriter;
    private StringWriter _currentFixedPageWriter;
    private int _currentDocumentSequenceWriterRef;
    private int _currentFixedDocumentWriterRef;
    private int _currentFixedPageWriterRef;
    private XmlTextWriter _currentDSWriter;
    private XmlWriter _currentFDWriter;
    private XmlWriter _currentFPWriter;
    private int _currentXpsFontRef;
    private int _currentXpsImageRef;
    private int _currentXpsColorContextRef;
    private int _currentXpsResourceDictionaryRef;
    private XpsResourceStream _fontResourceStream;
    private XpsResourceStream _imageResourceStream;
    private XpsResourceStream _colorContextResourceStream;
    private XpsResourceStream _resourceDictionaryResourceStream;
    private ResourceAcquireMode _fontAcquireMode;
    private IList`1<string> _linkTargetStream;
    private StringWriter _pageStream;
    private StringWriter _resourceStream;
    private StringWriter _resourceDictionaryStream;
    private XmlWriter _pageXmlWriter;
    private XmlWriter _resourceXmlWriter;
    private XmlWriter _resourceDictionaryXmlWriter;
    private PrintTicket _documentSequencePrintTicket;
    private PrintTicket _documentPrintTicket;
    private PrintTicket _pagePrintTicket;
    private Hashtable _fontsCache;
    private XpsResourcePolicy _resourcePolicy;
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    public virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public virtual void ReleaseXmlWriterForFixedDocument();
    public virtual XmlWriter AcquireXmlWriterForFixedPage();
    public virtual void ReleaseXmlWriterForFixedPage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public virtual void ReleaseResourceStreamForXpsFont();
    public virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public virtual void ReleaseResourceStreamForXpsImage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public virtual void ReleaseResourceStreamForXpsColorContext();
    public virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public virtual void PersistPrintTicket(PrintTicket printTicket);
    public virtual XmlWriter AcquireXmlWriterForPage();
    public virtual void PreCommitCurrentPage();
    public virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public virtual IList`1<string> AcquireStreamForLinkTargets();
    public virtual Uri get_CurrentFixedDocumentUri();
    public virtual Uri get_CurrentFixedPageUri();
    private void Initialize();
    private void InitializeResourceReferences();
}
public abstract class System.Windows.Xps.Serialization.PackageSerializationManager : object {
    private SerializersCacheManager _serializersCacheManager;
    private ContextStack _graphContextStack;
    private SerializableObjectContext _rootSerializableObjectContext;
    private XmlLanguage _language;
    private int _jobIdentifier;
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal ContextStack GraphContextStack { get; internal set; }
    internal SerializersCacheManager CacheManager { get; }
    internal SerializableObjectContext RootSerializableObjectContext { get; internal set; }
    internal SerializersCacheManager SerializersCacheManager { get; }
    internal XmlLanguage Language { get; internal set; }
    internal int JobIdentifier { get; internal set; }
    public abstract virtual void SaveAsXaml(object serializedObject);
    private sealed virtual override void System.IDisposable.Dispose();
    internal abstract virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type serializedObjectType);
    internal abstract virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal abstract virtual void ReleaseXmlWriter(Type writerType);
    internal abstract virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal abstract virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal abstract virtual void ReleaseResourceStream(Type resourceType);
    internal abstract virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal abstract virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual bool CanSerializeDependencyProperty(object serializableObject, TypeDependencyPropertyCache dependencyProperty);
    internal virtual bool CanSerializeClrProperty(object serializableObject, TypePropertyCache property);
    internal abstract virtual BasePackagingPolicy get_PackagingPolicy();
    internal abstract virtual XpsResourcePolicy get_ResourcePolicy();
    internal ContextStack get_GraphContextStack();
    internal void set_GraphContextStack(ContextStack value);
    internal SerializersCacheManager get_CacheManager();
    internal SerializableObjectContext get_RootSerializableObjectContext();
    internal void set_RootSerializableObjectContext(SerializableObjectContext value);
    internal SerializersCacheManager get_SerializersCacheManager();
    internal XmlLanguage get_Language();
    internal void set_Language(XmlLanguage value);
    internal void set_JobIdentifier(int value);
    internal int get_JobIdentifier();
}
internal class System.Windows.Xps.Serialization.PageContentCollectionSerializerContext : ReachSerializerContext {
    private IEnumerator _enumerator;
    public IEnumerator Enumerator { get; }
    public PageContentCollectionSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
public enum System.Windows.Xps.Serialization.PrintTicketLevel : Enum {
    public int value__;
    public static PrintTicketLevel None;
    public static PrintTicketLevel FixedDocumentSequencePrintTicket;
    public static PrintTicketLevel FixedDocumentPrintTicket;
    public static PrintTicketLevel FixedPagePrintTicket;
}
internal class System.Windows.Xps.Serialization.PrintTicketSerializer : ReachSerializer {
    public PrintTicketSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.PrintTicketSerializerAsync : ReachSerializerAsync {
    public PrintTicketSerializerAsync(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.RCW._FILETIME : ValueType {
    public UInt32 dwLowDateTime;
    public UInt32 dwHighDateTime;
}
internal class System.Windows.Xps.Serialization.RCW._LARGE_INTEGER : ValueType {
    public long QuadPart;
}
internal class System.Windows.Xps.Serialization.RCW._SECURITY_ATTRIBUTES : ValueType {
    public UInt32 nLength;
    public IntPtr lpSecurityDescriptor;
    public int bInheritHandle;
}
internal class System.Windows.Xps.Serialization.RCW._SYSTEMTIME : ValueType {
    public ushort wYear;
    public ushort wMonth;
    public ushort wDayOfWeek;
    public ushort wDay;
    public ushort wHour;
    public ushort wMinute;
    public ushort wSecond;
    public ushort wMilliseconds;
}
internal class System.Windows.Xps.Serialization.RCW._ULARGE_INTEGER : ValueType {
    public ulong QuadPart;
}
[GuidAttribute("7D3BABE7-88B2-46BA-85CB-4203CB016C87")]
[InterfaceTypeAttribute("1")]
[TypeLibTypeAttribute("128")]
internal interface System.Windows.Xps.Serialization.RCW.IOpcPartUri {
    public abstract virtual int ComparePartUri(IOpcPartUri partUri);
    public abstract virtual IOpcUri GetSourceUri();
    public abstract virtual int IsRelationshipsPartUri();
}
[GuidAttribute("BC9C1B9B-D62C-49EB-AEF0-3B4E0B28EBED")]
[InterfaceTypeAttribute("1")]
[TypeLibTypeAttribute("128")]
internal interface System.Windows.Xps.Serialization.RCW.IOpcUri {
    public abstract virtual IOpcPartUri CombinePartUri(IUri relativeUri);
    public abstract virtual IOpcPartUri GetRelationshipsPartUri();
    public abstract virtual IUri GetRelativeUri(IOpcPartUri targetPartUri);
}
[GuidAttribute("ED90C8AD-5C34-4D05-A1EC-0E8A9B3AD7AF")]
[TypeLibTypeAttribute("4288")]
internal interface System.Windows.Xps.Serialization.RCW.IPrintDocumentPackageStatusEvent {
    [DispIdAttribute("1")]
public abstract virtual void PackageStatusUpdated(PrintDocumentPackageStatus& PackageStatus);
}
[GuidAttribute("1B8EFEC4-3019-4C27-964E-367202156906")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IPrintDocumentPackageTarget {
    public abstract virtual void GetPackageTargetTypes(UInt32& targetCount, Guid& targetTypes);
    public abstract virtual void GetPackageTarget(Guid& guidTargetType, Guid& riid, IntPtr& ppvTarget);
    public abstract virtual void Cancel();
}
[GuidAttribute("0C733A30-2A1C-11CE-ADE5-00AA0044773D")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.ISequentialStream {
    public abstract virtual void RemoteRead(Byte& pv, UInt32 cb, UInt32& pcbRead);
    public abstract virtual void RemoteWrite(Byte& pv, UInt32 cb, UInt32& pcbWritten);
}
[GuidAttribute("A39EE748-6A27-4817-A6F2-13914BEF5890")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IUri {
    public abstract virtual void GetAbsoluteUri(String& pbstrAbsoluteUri);
    public abstract virtual void GetAuthority(String& pbstrAuthority);
    public abstract virtual void GetDisplayUri(String& pbstrDisplayString);
    public abstract virtual void GetDomain(String& pbstrDomain);
    public abstract virtual void GetExtension(String& pbstrExtension);
    public abstract virtual void GetFragment(String& pbstrFragment);
    public abstract virtual void GetHost(String& pbstrHost);
    public abstract virtual void GetHostType(UInt32& pdwHostType);
    public abstract virtual void GetPassword(String& pbstrPassword);
    public abstract virtual void GetPath(String& pbstrPath);
    public abstract virtual void GetPathAndQuery(String& pbstrPathAndQuery);
    public abstract virtual void GetPort(UInt32& pdwPort);
    public abstract virtual void GetProperties(UInt32& pdwFlags);
    public abstract virtual void GetPropertyBSTR(Uri_PROPERTY uriProp, String& pbstrProperty, UInt32 dwFlags);
    public abstract virtual void GetPropertyDWORD(Uri_PROPERTY uriProp, UInt32& pdwProperty, UInt32 dwFlags);
    public abstract virtual void GetPropertyLength(Uri_PROPERTY uriProp, UInt32& pcchProperty, UInt32 dwFlags);
    public abstract virtual void GetQuery(String& pbstrQuery);
    public abstract virtual void GetRawUri(String& pbstrRawUri);
    public abstract virtual void GetScheme(UInt32& pdwScheme);
    public abstract virtual void GetSchemeName(String& pbstrSchemeName);
    public abstract virtual void GetUserInfo(String& pbstrUserInfo);
    public abstract virtual void GetUserName(String& pbstrUserName);
    public abstract virtual void GetZone(UInt32& pdwZone);
    public abstract virtual void HasProperty(Uri_PROPERTY uriProp, Int32& pfHasProperty);
    public abstract virtual void IsEqual(IUri pUri, Int32& pfEqual);
}
[GuidAttribute("3B0B6D38-53AD-41DA-B212-D37637A6714E")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsDocumentPackageTarget {
    public abstract virtual IXpsOMPackageWriter GetXpsOMPackageWriter(IOpcPartUri documentSequencePartName, IOpcPartUri discardControlPartName);
    public abstract virtual IXpsOMObjectFactory GetXpsOMFactory();
    public abstract virtual XPS_DOCUMENT_TYPE GetXpsType();
}
[GuidAttribute("56A3F80C-EA4C-4187-A57B-A2A473B2B42B")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMBrush {
    public abstract virtual float GetOpacity();
    public abstract virtual void SetOpacity(float opacity);
}
[GuidAttribute("221D1452-331E-47C6-87E9-6CCEFB9B5BA3")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMCanvas {
    public abstract virtual IXpsOMCanvas Clone();
    public abstract virtual string GetAccessibilityLongDescription();
    public abstract virtual string GetAccessibilityShortDescription();
    public abstract virtual IXpsOMDictionary GetDictionary();
    public abstract virtual IXpsOMDictionary GetDictionaryLocal();
    public abstract virtual IXpsOMRemoteDictionaryResource GetDictionaryResource();
    public abstract virtual int GetUseAliasedEdgeMode();
    public abstract virtual IXpsOMVisualCollection GetVisuals();
    public abstract virtual void SetAccessibilityLongDescription(string longDescription);
    public abstract virtual void SetAccessibilityShortDescription(string shortDescription);
    public abstract virtual void SetDictionaryLocal(IXpsOMDictionary resourceDictionary);
    public abstract virtual void SetDictionaryResource(IXpsOMRemoteDictionaryResource remoteDictionaryResource);
    public abstract virtual void SetUseAliasedEdgeMode(int useAliasedEdgeMode);
}
[GuidAttribute("67BD7D69-1EEF-4BB1-B5E7-6F4F87BE8ABE")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMColorProfileResource {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, IOpcPartUri partName);
}
[GuidAttribute("12759630-5FBA-4283-8F7D-CCA849809EDB")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMColorProfileResourceCollection {
    public abstract virtual UInt32 GetCount();
    public abstract virtual IXpsOMColorProfileResource GetAt(UInt32 index);
    public abstract virtual void InsertAt(UInt32 index, IXpsOMColorProfileResource object);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMColorProfileResource object);
    public abstract virtual void Append(IXpsOMColorProfileResource object);
    public abstract virtual IXpsOMColorProfileResource GetByPartName(IOpcPartUri partName);
}
[GuidAttribute("3340FE8F-4027-4AA1-8F5F-D35AE45FE597")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMCoreProperties {
    public abstract virtual IXpsOMCoreProperties Clone();
    public abstract virtual string GetCategory();
    public abstract virtual string GetContentStatus();
    public abstract virtual string GetContentType();
    public abstract virtual _SYSTEMTIME GetCreated();
    public abstract virtual string GetCreator();
    public abstract virtual string GetDescription();
    public abstract virtual string GetIdentifier();
    public abstract virtual string GetKeywords();
    public abstract virtual string GetLanguage();
    public abstract virtual string GetLastModifiedBy();
    public abstract virtual _SYSTEMTIME GetLastPrinted();
    public abstract virtual _SYSTEMTIME GetModified();
    public abstract virtual IXpsOMPackage GetOwner();
    public abstract virtual string GetRevision();
    public abstract virtual string GetSubject();
    public abstract virtual string GetTitle();
    public abstract virtual string GetVersion();
    public abstract virtual void SetCategory(string category);
    public abstract virtual void SetContentStatus(string contentStatus);
    public abstract virtual void SetContentType(string contentType);
    public abstract virtual void SetCreated(_SYSTEMTIME& created);
    public abstract virtual void SetCreator(string creator);
    public abstract virtual void SetDescription(string description);
    public abstract virtual void SetIdentifier(string identifier);
    public abstract virtual void SetKeywords(string keywords);
    public abstract virtual void SetLanguage(string language);
    public abstract virtual void SetLastModifiedBy(string lastModifiedBy);
    public abstract virtual void SetLastPrinted(_SYSTEMTIME& lastPrinted);
    public abstract virtual void SetModified(_SYSTEMTIME& modified);
    public abstract virtual void SetRevision(string revision);
    public abstract virtual void SetSubject(string subject);
    public abstract virtual void SetTitle(string title);
    public abstract virtual void SetVersion(string version);
}
[GuidAttribute("081613F4-74EB-48F2-83B3-37A9CE2D7DC6")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMDashCollection {
    public abstract virtual void Append(XPS_DASH& dash);
    public abstract virtual XPS_DASH GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, XPS_DASH& dash);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, XPS_DASH& dash);
}
[GuidAttribute("897C86B8-8EAF-4AE3-BDDE-56419FCF4236")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMDictionary {
    public abstract virtual void Append(string key, IXpsOMShareable entry);
    public abstract virtual IXpsOMDictionary Clone();
    public abstract virtual IXpsOMShareable GetAt(UInt32 index, String& key);
    public abstract virtual IXpsOMShareable GetByKey(string key, IXpsOMShareable beforeEntry);
    public abstract virtual UInt32 GetCount();
    public abstract virtual UInt32 GetIndex(IXpsOMShareable entry);
    public abstract virtual object GetOwner();
    public abstract virtual void InsertAt(UInt32 index, string key, IXpsOMShareable entry);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, string key, IXpsOMShareable entry);
}
[GuidAttribute("2C2C94CB-AC5F-4254-8EE9-23948309D9F0")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMDocument {
    public abstract virtual IXpsOMDocument Clone();
    public abstract virtual IXpsOMDocumentStructureResource GetDocumentStructureResource();
    public abstract virtual IXpsOMDocumentSequence GetOwner();
    public abstract virtual IXpsOMPageReferenceCollection GetPageReferences();
    public abstract virtual IXpsOMPrintTicketResource GetPrintTicketResource();
    public abstract virtual IXpsOMSignatureBlockResourceCollection GetSignatureBlockResources();
    public abstract virtual void SetDocumentStructureResource(IXpsOMDocumentStructureResource documentStructureResource);
    public abstract virtual void SetPrintTicketResource(IXpsOMPrintTicketResource printTicketResource);
}
[GuidAttribute("D1C87F0D-E947-4754-8A25-971478F7E83E")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMDocumentCollection {
    public abstract virtual void Append(IXpsOMDocument document);
    public abstract virtual IXpsOMDocument GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IXpsOMDocument document);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMDocument document);
}
[GuidAttribute("56492EB4-D8D5-425E-8256-4C2B64AD0264")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMDocumentSequence {
    public abstract virtual IXpsOMDocumentCollection GetDocuments();
    public abstract virtual IXpsOMPackage GetOwner();
    public abstract virtual IXpsOMPrintTicketResource GetPrintTicketResource();
    public abstract virtual void SetPrintTicketResource(IXpsOMPrintTicketResource printTicketResource);
}
[GuidAttribute("85FEBC8A-6B63-48A9-AF07-7064E4ECFF30")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMDocumentStructureResource {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
    public abstract virtual IXpsOMDocument GetOwner();
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, IOpcPartUri partName);
}
[GuidAttribute("A8C45708-47D9-4AF4-8D20-33B48C9B8485")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMFontResource {
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, XPS_FONT_EMBEDDING embeddingOption, IOpcPartUri partName);
    public abstract virtual XPS_FONT_EMBEDDING GetEmbeddingOption();
}
[GuidAttribute("70B4A6BB-88D4-4FA8-AAF9-6D9C596FDBAD")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMFontResourceCollection {
    public abstract virtual UInt32 GetCount();
    public abstract virtual IXpsOMFontResource GetAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMFontResource value);
    public abstract virtual void InsertAt(UInt32 index, IXpsOMFontResource value);
    public abstract virtual void Append(IXpsOMFontResource value);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual IXpsOMFontResource GetByPartName(IOpcPartUri partName);
}
[GuidAttribute("64FCF3D7-4D58-44BA-AD73-A13AF6492072")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGeometry {
    public abstract virtual IXpsOMGeometry Clone();
    public abstract virtual IXpsOMGeometryFigureCollection GetFigures();
    public abstract virtual XPS_FILL_RULE GetFillRule();
    public abstract virtual IXpsOMMatrixTransform GetTransform();
    public abstract virtual IXpsOMMatrixTransform GetTransformLocal();
    public abstract virtual string GetTransformLookup();
    public abstract virtual void SetFillRule(XPS_FILL_RULE fillRule);
    public abstract virtual void SetTransformLocal(IXpsOMMatrixTransform transform);
    public abstract virtual void SetTransformLookup(string lookup);
}
[GuidAttribute("D410DC83-908C-443E-8947-B1795D3C165A")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGeometryFigure {
    public abstract virtual IXpsOMGeometryFigure Clone();
    public abstract virtual int GetIsClosed();
    public abstract virtual int GetIsFilled();
    public abstract virtual IXpsOMGeometry GetOwner();
    public abstract virtual UInt32 GetSegmentCount();
    public abstract virtual void GetSegmentData(UInt32& dataCount, Single& segmentData);
    public abstract virtual UInt32 GetSegmentDataCount();
    public abstract virtual XPS_SEGMENT_STROKE_PATTERN GetSegmentStrokePattern();
    public abstract virtual void GetSegmentStrokes(UInt32& segmentCount, Int32& segmentStrokes);
    public abstract virtual void GetSegmentTypes(UInt32& segmentCount, XPS_SEGMENT_TYPE& segmentTypes);
    public abstract virtual XPS_POINT GetStartPoint();
    public abstract virtual void SetIsClosed(int isClosed);
    public abstract virtual void SetIsFilled(int isFilled);
    public abstract virtual void SetSegments(UInt32 segmentCount, UInt32 segmentDataCount, XPS_SEGMENT_TYPE& segmentTypes, Single& segmentData, Int32& segmentStrokes);
    public abstract virtual void SetStartPoint(XPS_POINT& startPoint);
}
[GuidAttribute("FD48C3F3-A58E-4B5A-8826-1DE54ABE72B2")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGeometryFigureCollection {
    public abstract virtual void Append(IXpsOMGeometryFigure geometryFigure);
    public abstract virtual IXpsOMGeometryFigure GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IXpsOMGeometryFigure geometryFigure);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMGeometryFigure geometryFigure);
}
[GuidAttribute("819B3199-0A5A-4B64-BEC7-A9E17E780DE2")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGlyphs {
    public abstract virtual IXpsOMGlyphs Clone();
    public abstract virtual UInt32 GetBidiLevel();
    public abstract virtual string GetDeviceFontName();
    public abstract virtual IXpsOMBrush GetFillBrush();
    public abstract virtual IXpsOMBrush GetFillBrushLocal();
    public abstract virtual string GetFillBrushLookup();
    public abstract virtual short GetFontFaceIndex();
    public abstract virtual float GetFontRenderingEmSize();
    public abstract virtual IXpsOMFontResource GetFontResource();
    public abstract virtual UInt32 GetGlyphIndexCount();
    public abstract virtual void GetGlyphIndices(UInt32& indexCount, XPS_GLYPH_INDEX& glyphIndices);
    public abstract virtual UInt32 GetGlyphMappingCount();
    public abstract virtual void GetGlyphMappings(UInt32& glyphMappingCount, XPS_GLYPH_MAPPING& glyphMappings);
    public abstract virtual IXpsOMGlyphsEditor GetGlyphsEditor();
    public abstract virtual int GetIsSideways();
    public abstract virtual XPS_POINT GetOrigin();
    public abstract virtual UInt32 GetProhibitedCaretStopCount();
    public abstract virtual void GetProhibitedCaretStops(UInt32& prohibitedCaretStopCount, UInt32& prohibitedCaretStops);
    public abstract virtual XPS_STYLE_SIMULATION GetStyleSimulations();
    public abstract virtual string GetUnicodeString();
    public abstract virtual void SetFillBrushLocal(IXpsOMBrush fillBrush);
    public abstract virtual void SetFillBrushLookup(string key);
    public abstract virtual void SetFontFaceIndex(short fontFaceIndex);
    public abstract virtual void SetFontRenderingEmSize(float fontRenderingEmSize);
    public abstract virtual void SetFontResource(IXpsOMFontResource fontResource);
    public abstract virtual void SetOrigin(XPS_POINT& origin);
    public abstract virtual void SetStyleSimulations(XPS_STYLE_SIMULATION styleSimulations);
}
[GuidAttribute("A5AB8616-5B16-4B9F-9629-89B323ED7909")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGlyphsEditor {
    public abstract virtual void ApplyEdits();
    public abstract virtual UInt32 GetBidiLevel();
    public abstract virtual string GetDeviceFontName();
    public abstract virtual UInt32 GetGlyphIndexCount();
    public abstract virtual void GetGlyphIndices(UInt32& indexCount, XPS_GLYPH_INDEX& glyphIndices);
    public abstract virtual UInt32 GetGlyphMappingCount();
    public abstract virtual void GetGlyphMappings(UInt32& glyphMappingCount, XPS_GLYPH_MAPPING& glyphMappings);
    public abstract virtual int GetIsSideways();
    public abstract virtual UInt32 GetProhibitedCaretStopCount();
    public abstract virtual void GetProhibitedCaretStops(UInt32& count, UInt32& prohibitedCaretStops);
    public abstract virtual string GetUnicodeString();
    public abstract virtual void SetBidiLevel(UInt32 bidiLevel);
    public abstract virtual void SetDeviceFontName(string deviceFontName);
    public abstract virtual void SetGlyphIndices(UInt32 indexCount, XPS_GLYPH_INDEX& glyphIndices);
    public abstract virtual void SetGlyphMappings(UInt32 glyphMappingCount, XPS_GLYPH_MAPPING& glyphMappings);
    public abstract virtual void SetIsSideways(int isSideways);
    public abstract virtual void SetProhibitedCaretStops(UInt32 count, UInt32& prohibitedCaretStops);
    public abstract virtual void SetUnicodeString(string unicodeString);
}
[GuidAttribute("EDB59622-61A2-42C3-BACE-ACF2286C06BF")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGradientBrush {
    public abstract virtual XPS_COLOR_INTERPOLATION GetColorInterpolationMode();
    public abstract virtual IXpsOMGradientStopCollection GetGradientStops();
    public abstract virtual XPS_SPREAD_METHOD GetSpreadMethod();
    public abstract virtual IXpsOMMatrixTransform GetTransform();
    public abstract virtual IXpsOMMatrixTransform GetTransformLocal();
    public abstract virtual string GetTransformLookup();
    public abstract virtual void SetColorInterpolationMode(XPS_COLOR_INTERPOLATION colorInterpolationMode);
    public abstract virtual void SetSpreadMethod(XPS_SPREAD_METHOD spreadMethod);
    public abstract virtual void SetTransformLocal(IXpsOMMatrixTransform transform);
    public abstract virtual void SetTransformLookup(string key);
}
[GuidAttribute("5CF4F5CC-3969-49B5-A70A-5550B618FE49")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGradientStop {
    public abstract virtual IXpsOMGradientStop Clone();
    public abstract virtual IXpsOMColorProfileResource GetColor(XPS_COLOR& color);
    public abstract virtual float GetOffset();
    public abstract virtual IXpsOMGradientBrush GetOwner();
    public abstract virtual void SetColor(XPS_COLOR& color, IXpsOMColorProfileResource colorProfile);
    public abstract virtual void SetOffset(float offset);
}
[GuidAttribute("C9174C3A-3CD3-4319-BDA4-11A39392CEEF")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMGradientStopCollection {
    public abstract virtual void Append(IXpsOMGradientStop stop);
    public abstract virtual IXpsOMGradientStop GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IXpsOMGradientStop stop);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMGradientStop stop);
}
[GuidAttribute("3DF0B466-D382-49EF-8550-DD94C80242E4")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMImageBrush {
    public abstract virtual IXpsOMImageBrush Clone();
    public abstract virtual IXpsOMColorProfileResource GetColorProfileResource();
    public abstract virtual IXpsOMImageResource GetImageResource();
    public abstract virtual void SetColorProfileResource(IXpsOMColorProfileResource colorProfileResource);
    public abstract virtual void SetImageResource(IXpsOMImageResource imageResource);
}
[GuidAttribute("3DB8417D-AE50-485E-9A44-D7758F78A23F")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMImageResource {
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, XPS_IMAGE_TYPE imageType, IOpcPartUri partName);
    public abstract virtual XPS_IMAGE_TYPE GetImageType();
}
[GuidAttribute("7A4A1A71-9CDE-4B71-B33F-62DE843EABFE")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMImageResourceCollection {
    public abstract virtual UInt32 GetCount();
    public abstract virtual IXpsOMImageResource GetAt(UInt32 index);
    public abstract virtual void InsertAt(UInt32 index, IXpsOMImageResource object);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMImageResource object);
    public abstract virtual void Append(IXpsOMImageResource object);
    public abstract virtual IXpsOMImageResource GetByPartName(IOpcPartUri partName);
}
[GuidAttribute("005E279F-C30D-40FF-93EC-1950D3C528DB")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMLinearGradientBrush {
    public abstract virtual IXpsOMLinearGradientBrush Clone();
    public abstract virtual XPS_POINT GetEndPoint();
    public abstract virtual XPS_POINT GetStartPoint();
    public abstract virtual void SetEndPoint(XPS_POINT& endPoint);
    public abstract virtual void SetStartPoint(XPS_POINT& startPoint);
}
[GuidAttribute("B77330FF-BB37-4501-A93E-F1B1E50BFC46")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMMatrixTransform {
    public abstract virtual IXpsOMMatrixTransform Clone();
    public abstract virtual XPS_MATRIX GetMatrix();
    public abstract virtual void SetMatrix(XPS_MATRIX& matrix);
}
[GuidAttribute("4BDDF8EC-C915-421B-A166-D173D25653D2")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMNameCollection {
    public abstract virtual string GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
}
[GuidAttribute("F9B2A685-A50D-4FC2-B764-B56E093EA0CA")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMObjectFactory {
    public abstract virtual IXpsOMPackage CreatePackage();
    public abstract virtual IXpsOMPackage CreatePackageFromFile(string fileName, int reuseObjects);
    public abstract virtual IXpsOMPackage CreatePackageFromStream(IStream stream, int reuseObjects);
    public abstract virtual IXpsOMStoryFragmentsResource CreateStoryFragmentsResource(IStream acquiredStream, IOpcPartUri partUri);
    public abstract virtual IXpsOMDocumentStructureResource CreateDocumentStructureResource(IStream acquiredStream, IOpcPartUri partUri);
    public abstract virtual IXpsOMSignatureBlockResource CreateSignatureBlockResource(IStream acquiredStream, IOpcPartUri partUri);
    public abstract virtual IXpsOMRemoteDictionaryResource CreateRemoteDictionaryResource(IXpsOMDictionary dictionary, IOpcPartUri partUri);
    public abstract virtual IXpsOMRemoteDictionaryResource CreateRemoteDictionaryResourceFromStream(IStream dictionaryMarkupStream, IOpcPartUri dictionaryPartUri, IXpsOMPartResources resources);
    public abstract virtual IXpsOMPartResources CreatePartResources();
    public abstract virtual IXpsOMDocumentSequence CreateDocumentSequence(IOpcPartUri partUri);
    public abstract virtual IXpsOMDocument CreateDocument(IOpcPartUri partUri);
    public abstract virtual IXpsOMPageReference CreatePageReference(XPS_SIZE& advisoryPageDimensions);
    public abstract virtual IXpsOMPage CreatePage(XPS_SIZE& pageDimensions, string language, IOpcPartUri partUri);
    public abstract virtual IXpsOMPage CreatePageFromStream(IStream pageMarkupStream, IOpcPartUri partUri, IXpsOMPartResources resources, int reuseObjects);
    public abstract virtual IXpsOMCanvas CreateCanvas();
    public abstract virtual IXpsOMGlyphs CreateGlyphs(IXpsOMFontResource fontResource);
    public abstract virtual IXpsOMPath CreatePath();
    public abstract virtual IXpsOMGeometry CreateGeometry();
    public abstract virtual IXpsOMGeometryFigure CreateGeometryFigure(XPS_POINT& startPoint);
    public abstract virtual IXpsOMMatrixTransform CreateMatrixTransform(XPS_MATRIX& matrix);
    public abstract virtual IXpsOMSolidColorBrush CreateSolidColorBrush(XPS_COLOR& color, IXpsOMColorProfileResource colorProfile);
    public abstract virtual IXpsOMColorProfileResource CreateColorProfileResource(IStream acquiredStream, IOpcPartUri partUri);
    public abstract virtual IXpsOMImageBrush CreateImageBrush(IXpsOMImageResource image, XPS_RECT& viewbox, XPS_RECT& viewport);
    public abstract virtual IXpsOMVisualBrush CreateVisualBrush(XPS_RECT& viewbox, XPS_RECT& viewport);
    public abstract virtual IXpsOMImageResource CreateImageResource(IStream acquiredStream, XPS_IMAGE_TYPE contentType, IOpcPartUri partUri);
    public abstract virtual IXpsOMPrintTicketResource CreatePrintTicketResource(IStream acquiredStream, IOpcPartUri partUri);
    public abstract virtual IXpsOMFontResource CreateFontResource(IStream acquiredStream, XPS_FONT_EMBEDDING fontEmbedding, IOpcPartUri partUri, int isObfSourceStream);
    public abstract virtual IXpsOMGradientStop CreateGradientStop(XPS_COLOR& color, IXpsOMColorProfileResource colorProfile, float offset);
    public abstract virtual IXpsOMLinearGradientBrush CreateLinearGradientBrush(IXpsOMGradientStop gradStop1, IXpsOMGradientStop gradStop2, XPS_POINT& startPoint, XPS_POINT& endPoint);
    public abstract virtual IXpsOMRadialGradientBrush CreateRadialGradientBrush(IXpsOMGradientStop gradStop1, IXpsOMGradientStop gradStop2, XPS_POINT& centerPoint, XPS_POINT& gradientOrigin, XPS_SIZE& radiiSizes);
    public abstract virtual IXpsOMCoreProperties CreateCoreProperties(IOpcPartUri partUri);
    public abstract virtual IXpsOMDictionary CreateDictionary();
    public abstract virtual IXpsOMPartUriCollection CreatePartUriCollection();
    public abstract virtual IXpsOMPackageWriter CreatePackageWriterOnFile(string fileName, IntPtr securityAttributes, UInt32 flagsAndAttributes, int optimizeMarkupSize, XPS_INTERLEAVING interleaving, IOpcPartUri documentSequencePartName, IXpsOMCoreProperties coreProperties, IXpsOMImageResource packageThumbnail, IXpsOMPrintTicketResource documentSequencePrintTicket, IOpcPartUri discardControlPartName);
    public abstract virtual IXpsOMPackageWriter CreatePackageWriterOnStream(ISequentialStream outputStream, int optimizeMarkupSize, XPS_INTERLEAVING interleaving, IOpcPartUri documentSequencePartName, IXpsOMCoreProperties coreProperties, IXpsOMImageResource packageThumbnail, IXpsOMPrintTicketResource documentSequencePrintTicket, IOpcPartUri discardControlPartName);
    public abstract virtual IOpcPartUri CreatePartUri(string uri);
    public abstract virtual IStream CreateReadOnlyStreamOnFile(string fileName);
}
[GuidAttribute("18C3DF65-81E1-4674-91DC-FC452F5A416F")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPackage {
    public abstract virtual IXpsOMCoreProperties GetCoreProperties();
    public abstract virtual IOpcPartUri GetDiscardControlPartName();
    public abstract virtual IXpsOMDocumentSequence GetDocumentSequence();
    public abstract virtual IXpsOMImageResource GetThumbnailResource();
    public abstract virtual void SetCoreProperties(IXpsOMCoreProperties coreProperties);
    public abstract virtual void SetDiscardControlPartName(IOpcPartUri discardControlPartUri);
    public abstract virtual void SetDocumentSequence(IXpsOMDocumentSequence documentSequence);
    public abstract virtual void SetThumbnailResource(IXpsOMImageResource imageResource);
    public abstract virtual void WriteToFile(string fileName, _SECURITY_ATTRIBUTES& securityAttributes, UInt32 flagsAndAttributes, int optimizeMarkupSize);
    public abstract virtual void WriteToStream(ISequentialStream stream, int optimizeMarkupSize);
}
[GuidAttribute("4E2AA182-A443-42C6-B41B-4F8E9DE73FF9")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPackageWriter {
    public abstract virtual void StartNewDocument(IOpcPartUri documentPartName, IXpsOMPrintTicketResource documentPrintTicket, IXpsOMDocumentStructureResource documentStructure, IXpsOMSignatureBlockResourceCollection signatureBlockResources, IXpsOMPartUriCollection restrictedFonts);
    public abstract virtual void AddPage(IXpsOMPage page, XPS_SIZE& advisoryPageDimensions, IXpsOMPartUriCollection discardableResourceParts, IXpsOMStoryFragmentsResource storyFragments, IXpsOMPrintTicketResource pagePrintTicket, IXpsOMImageResource pageThumbnail);
    public abstract virtual void AddResource(IXpsOMResource resource);
    public abstract virtual void Close();
    public abstract virtual int isClosed();
}
[GuidAttribute("D3E18888-F120-4FEE-8C68-35296EAE91D4")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPage {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
    public abstract virtual IXpsOMPageReference GetOwner();
    public abstract virtual IXpsOMVisualCollection GetVisuals();
    public abstract virtual XPS_SIZE GetPageDimensions();
    public abstract virtual void SetPageDimensions(XPS_SIZE& pageDimensions);
    public abstract virtual XPS_RECT GetContentBox();
    public abstract virtual void SetContentBox(XPS_RECT& contentBox);
    public abstract virtual XPS_RECT GetBleedBox();
    public abstract virtual void SetBleedBox(XPS_RECT& bleedBox);
    public abstract virtual string GetLanguage();
    public abstract virtual void SetLanguage(string language);
    public abstract virtual string GetName();
    public abstract virtual void SetName(string name);
    public abstract virtual int GetIsHyperlinkTarget();
    public abstract virtual void SetIsHyperlinkTarget(int isHyperlinkTarget);
    public abstract virtual IXpsOMDictionary GetDictionary();
    public abstract virtual IXpsOMDictionary GetDictionaryLocal();
    public abstract virtual void SetDictionaryLocal(IXpsOMDictionary resourceDictionary);
    public abstract virtual IXpsOMRemoteDictionaryResource GetDictionaryResource();
    public abstract virtual void SetDictionaryResource(IXpsOMRemoteDictionaryResource remoteDictionaryResource);
    public abstract virtual void Write(ISequentialStream stream, int optimizeMarkupSize);
    public abstract virtual string GenerateUnusedLookupKey(XPS_OBJECT_TYPE type);
    public abstract virtual IXpsOMPage Clone();
}
[GuidAttribute("ED360180-6F92-4998-890D-2F208531A0A0")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPageReference {
    public abstract virtual IXpsOMPageReference Clone();
    public abstract virtual IXpsOMNameCollection CollectLinkTargets();
    public abstract virtual IXpsOMPartResources CollectPartResources();
    public abstract virtual void DiscardPage();
    public abstract virtual XPS_SIZE GetAdvisoryPageDimensions();
    public abstract virtual IXpsOMDocument GetOwner();
    public abstract virtual IXpsOMPage GetPage();
    public abstract virtual IXpsOMPrintTicketResource GetPrintTicketResource();
    public abstract virtual IXpsOMStoryFragmentsResource GetStoryFragmentsResource();
    public abstract virtual IXpsOMImageResource GetThumbnailResource();
    public abstract virtual int HasRestrictedFonts();
    public abstract virtual int IsPageLoaded();
    public abstract virtual void SetAdvisoryPageDimensions(XPS_SIZE& pageDimensions);
    public abstract virtual void SetPage(IXpsOMPage page);
    public abstract virtual void SetPrintTicketResource(IXpsOMPrintTicketResource printTicketResource);
    public abstract virtual void SetStoryFragmentsResource(IXpsOMStoryFragmentsResource storyFragmentsResource);
    public abstract virtual void SetThumbnailResource(IXpsOMImageResource imageResource);
}
[GuidAttribute("CA16BA4D-E7B9-45C5-958B-F98022473745")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPageReferenceCollection {
    public abstract virtual void Append(IXpsOMPageReference pageReference);
    public abstract virtual IXpsOMPageReference GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IXpsOMPageReference pageReference);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMPageReference pageReference);
}
[GuidAttribute("74EB2F0B-A91E-4486-AFAC-0FABECA3DFC6")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPart {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
}
[GuidAttribute("F4CF7729-4864-4275-99B3-A8717163ECAF")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPartResources {
    public abstract virtual IXpsOMFontResourceCollection GetFontResources();
    public abstract virtual IXpsOMImageResourceCollection GetImageResources();
    public abstract virtual IXpsOMColorProfileResourceCollection GetColorProfileResources();
    public abstract virtual IXpsOMRemoteDictionaryResourceCollection GetRemoteDictionaryResources();
}
[GuidAttribute("57C650D4-067C-4893-8C33-F62A0633730F")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPartUriCollection {
    public abstract virtual void Append(IOpcPartUri partUri);
    public abstract virtual IOpcPartUri GetAt(UInt32 index);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IOpcPartUri partUri);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IOpcPartUri partUri);
}
[GuidAttribute("37D38BB6-3EE9-4110-9312-14B194163337")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPath {
    public abstract virtual IXpsOMPath Clone();
    public abstract virtual string GetAccessibilityLongDescription();
    public abstract virtual string GetAccessibilityShortDescription();
    public abstract virtual IXpsOMBrush GetFillBrush();
    public abstract virtual IXpsOMBrush GetFillBrushLocal();
    public abstract virtual string GetFillBrushLookup();
    public abstract virtual IXpsOMGeometry GetGeometry();
    public abstract virtual IXpsOMGeometry GetGeometryLocal();
    public abstract virtual string GetGeometryLookup();
    public abstract virtual int GetSnapsToPixels();
    public abstract virtual IXpsOMBrush GetStrokeBrush();
    public abstract virtual IXpsOMBrush GetStrokeBrushLocal();
    public abstract virtual string GetStrokeBrushLookup();
    public abstract virtual XPS_DASH_CAP GetStrokeDashCap();
    public abstract virtual IXpsOMDashCollection GetStrokeDashes();
    public abstract virtual float GetStrokeDashOffset();
    public abstract virtual XPS_LINE_CAP GetStrokeEndLineCap();
    public abstract virtual XPS_LINE_JOIN GetStrokeLineJoin();
    public abstract virtual float GetStrokeMiterLimit();
    public abstract virtual XPS_LINE_CAP GetStrokeStartLineCap();
    public abstract virtual float GetStrokeThickness();
    public abstract virtual void SetAccessibilityLongDescription(string longDescription);
    public abstract virtual void SetAccessibilityShortDescription(string shortDescription);
    public abstract virtual void SetFillBrushLocal(IXpsOMBrush brush);
    public abstract virtual void SetFillBrushLookup(string lookup);
    public abstract virtual void SetGeometryLocal(IXpsOMGeometry geometry);
    public abstract virtual void SetGeometryLookup(string lookup);
    public abstract virtual void SetSnapsToPixels(int snapsToPixels);
    public abstract virtual void SetStrokeBrushLocal(IXpsOMBrush brush);
    public abstract virtual void SetStrokeBrushLookup(string lookup);
    public abstract virtual void SetStrokeDashCap(XPS_DASH_CAP strokeDashCap);
    public abstract virtual void SetStrokeDashOffset(float strokeDashOffset);
    public abstract virtual void SetStrokeEndLineCap(XPS_LINE_CAP strokeEndLineCap);
    public abstract virtual void SetStrokeLineJoin(XPS_LINE_JOIN strokeLineJoin);
    public abstract virtual void SetStrokeMiterLimit(float strokeMiterLimit);
    public abstract virtual void SetStrokeStartLineCap(XPS_LINE_CAP strokeStartLineCap);
    public abstract virtual void SetStrokeThickness(float strokeThickness);
}
[GuidAttribute("E7FF32D2-34AA-499B-BBE9-9CD4EE6C59F7")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMPrintTicketResource {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, IOpcPartUri partName);
}
[GuidAttribute("75F207E5-08BF-413C-96B1-B82B4064176B")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMRadialGradientBrush {
    public abstract virtual IXpsOMRadialGradientBrush Clone();
    public abstract virtual XPS_POINT GetCenter();
    public abstract virtual XPS_POINT GetGradientOrigin();
    public abstract virtual XPS_SIZE GetRadiiSizes();
    public abstract virtual void SetCenter(XPS_POINT& center);
    public abstract virtual void SetGradientOrigin(XPS_POINT& origin);
    public abstract virtual void SetRadiiSizes(XPS_SIZE& radiiSizes);
}
[GuidAttribute("C9BD7CD4-E16A-4BF8-8C84-C950AF7A3061")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMRemoteDictionaryResource {
    public abstract virtual IXpsOMDictionary GetDictionary();
    public abstract virtual void SetDictionary(IXpsOMDictionary dictionary);
}
[GuidAttribute("5C38DB61-7FEC-464A-87BD-41E3BEF018BE")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMRemoteDictionaryResourceCollection {
    public abstract virtual void Append(IXpsOMRemoteDictionaryResource object);
    public abstract virtual IXpsOMRemoteDictionaryResource GetAt(UInt32 index);
    public abstract virtual IXpsOMRemoteDictionaryResource GetByPartName(IOpcPartUri partName);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IXpsOMRemoteDictionaryResource object);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMRemoteDictionaryResource object);
}
[GuidAttribute("DA2AC0A2-73A2-4975-AD14-74097C3FF3A5")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMResource {
}
[GuidAttribute("7137398F-2FC1-454D-8C6A-2C3115A16ECE")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMShareable {
    public abstract virtual object GetOwner();
    public abstract virtual XPS_OBJECT_TYPE GetType();
}
[GuidAttribute("4776AD35-2E04-4357-8743-EBF6C171A905")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMSignatureBlockResource {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
    public abstract virtual IXpsOMDocument GetOwner();
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, IOpcPartUri partName);
}
[GuidAttribute("AB8F5D8E-351B-4D33-AAED-FA56F0022931")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMSignatureBlockResourceCollection {
    public abstract virtual void Append(IXpsOMSignatureBlockResource signatureBlockResource);
    public abstract virtual IXpsOMSignatureBlockResource GetAt(UInt32 index);
    public abstract virtual IXpsOMSignatureBlockResource GetByPartName(IOpcPartUri partName);
    public abstract virtual UInt32 GetCount();
    public abstract virtual void InsertAt(UInt32 index, IXpsOMSignatureBlockResource signatureBlockResource);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMSignatureBlockResource signatureBlockResource);
}
[GuidAttribute("A06F9F05-3BE9-4763-98A8-094FC672E488")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMSolidColorBrush {
    public abstract virtual IXpsOMSolidColorBrush Clone();
    public abstract virtual IXpsOMColorProfileResource GetColor(XPS_COLOR& color);
    public abstract virtual void SetColor(XPS_COLOR& color, IXpsOMColorProfileResource colorProfile);
}
[GuidAttribute("C2B3CA09-0473-4282-87AE-1780863223F0")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMStoryFragmentsResource {
    public abstract virtual IOpcPartUri GetPartName();
    public abstract virtual void SetPartName(IOpcPartUri partUri);
    public abstract virtual IXpsOMPageReference GetOwner();
    public abstract virtual IStream GetStream();
    public abstract virtual void SetContent(IStream sourceStream, IOpcPartUri partName);
}
[GuidAttribute("15B873D5-1971-41E8-83A3-6578403064C7")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMThumbnailGenerator {
    public abstract virtual IXpsOMImageResource GenerateThumbnail(IXpsOMPage page, XPS_IMAGE_TYPE thumbnailType, XPS_THUMBNAIL_SIZE thumbnailSize, IOpcPartUri imageResourcePartName);
}
[GuidAttribute("0FC2328D-D722-4A54-B2EC-BE90218A789E")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMTileBrush {
    public abstract virtual XPS_TILE_MODE GetTileMode();
    public abstract virtual IXpsOMMatrixTransform GetTransform();
    public abstract virtual IXpsOMMatrixTransform GetTransformLocal();
    public abstract virtual string GetTransformLookup();
    public abstract virtual XPS_RECT GetViewbox();
    public abstract virtual XPS_RECT GetViewport();
    public abstract virtual void SetTileMode(XPS_TILE_MODE tileMode);
    public abstract virtual void SetTransformLocal(IXpsOMMatrixTransform transform);
    public abstract virtual void SetTransformLookup(string key);
    public abstract virtual void SetViewbox(XPS_RECT& viewbox);
    public abstract virtual void SetViewport(XPS_RECT& viewport);
}
[GuidAttribute("BC3E7333-FB0B-4AF3-A819-0B4EAAD0D2FD")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMVisual {
    public abstract virtual object GetOwner();
    public abstract virtual XPS_OBJECT_TYPE GetType();
    public abstract virtual IXpsOMMatrixTransform GetTransform();
    public abstract virtual IXpsOMMatrixTransform GetTransformLocal();
    public abstract virtual void SetTransformLocal(IXpsOMMatrixTransform matrixTransform);
    public abstract virtual string GetTransformLookup();
    public abstract virtual void SetTransformLookup(string key);
    public abstract virtual IXpsOMGeometry GetClipGeometry();
    public abstract virtual IXpsOMGeometry GetClipGeometryLocal();
    public abstract virtual void SetClipGeometryLocal(IXpsOMGeometry clipGeometry);
    public abstract virtual string GetClipGeometryLookup();
    public abstract virtual void SetClipGeometryLookup(string key);
    public abstract virtual float GetOpacity();
    public abstract virtual void SetOpacity(float opacity);
    public abstract virtual IXpsOMBrush GetOpacityMaskBrush();
    public abstract virtual IXpsOMBrush GetOpacityMaskBrushLocal();
    public abstract virtual void SetOpacityMaskBrushLocal(IXpsOMBrush opacityMaskBrush);
    public abstract virtual string GetOpacityMaskBrushLookup();
    public abstract virtual void SetOpacityMaskBrushLookup(string key);
    public abstract virtual string GetName();
    public abstract virtual void SetName(string name);
    public abstract virtual int GetIsHyperlinkTarget();
    public abstract virtual void SetIsHyperlinkTarget(int isHyperlink);
    public abstract virtual IUri GetHyperlinkNavigateUri();
    public abstract virtual void SetHyperlinkNavigateUri(IUri hyperlinkUri);
    public abstract virtual string GetLanguage();
    public abstract virtual void SetLanguage(string language);
}
[GuidAttribute("97E294AF-5B37-46B4-8057-874D2F64119B")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMVisualBrush {
    public abstract virtual IXpsOMVisualBrush Clone();
    public abstract virtual IXpsOMVisual GetVisual();
    public abstract virtual IXpsOMVisual GetVisualLocal();
    public abstract virtual string GetVisualLookup();
    public abstract virtual void SetVisualLocal(IXpsOMVisual visual);
    public abstract virtual void SetVisualLookup(string lookup);
}
[GuidAttribute("94D8ABDE-AB91-46A8-82B7-F5B05EF01A96")]
[InterfaceTypeAttribute("1")]
internal interface System.Windows.Xps.Serialization.RCW.IXpsOMVisualCollection {
    public abstract virtual UInt32 GetCount();
    public abstract virtual IXpsOMVisual GetAt(UInt32 index);
    public abstract virtual void InsertAt(UInt32 index, IXpsOMVisual object);
    public abstract virtual void RemoveAt(UInt32 index);
    public abstract virtual void SetAt(UInt32 index, IXpsOMVisual object);
    public abstract virtual void Append(IXpsOMVisual object);
}
internal enum System.Windows.Xps.Serialization.RCW.PrintDocumentPackageCompletion : Enum {
    public int value__;
    public static PrintDocumentPackageCompletion PrintDocumentPackageCompletion_InProgress;
    public static PrintDocumentPackageCompletion PrintDocumentPackageCompletion_Completed;
    public static PrintDocumentPackageCompletion PrintDocumentPackageCompletion_Canceled;
    public static PrintDocumentPackageCompletion PrintDocumentPackageCompletion_Failed;
}
internal class System.Windows.Xps.Serialization.RCW.PrintDocumentPackageStatus : ValueType {
    public UInt32 JobId;
    public int CurrentDocument;
    public int CurrentPage;
    public int CurrentPageTotal;
    public PrintDocumentPackageCompletion Completion;
    public int PackageStatus;
}
internal class System.Windows.Xps.Serialization.RCW.PrintDocumentPackageStatusProvider : object {
    private int _jobId;
    private ManualResetEvent _jobIdAcquiredEvent;
    private Nullable`1<int> _cookie;
    private IConnectionPoint _connectionPoint;
    public ManualResetEvent JobIdAcquiredEvent { get; }
    public int JobId { get; }
    public PrintDocumentPackageStatusProvider(IPrintDocumentPackageTarget docPackageTarget);
    public sealed virtual void PackageStatusUpdated(PrintDocumentPackageStatus& packageStatus);
    public void UnAdvise();
    public ManualResetEvent get_JobIdAcquiredEvent();
    public int get_JobId();
}
internal class System.Windows.Xps.Serialization.RCW.tagSTATSTG : ValueType {
    internal string pwcsName;
    internal UInt32 type;
    internal _ULARGE_INTEGER cbSize;
    internal _FILETIME mtime;
    internal _FILETIME ctime;
    internal _FILETIME atime;
    internal UInt32 grfMode;
    internal UInt32 grfLocksSupported;
    internal Guid clsid;
    internal UInt32 grfStateBits;
    internal UInt32 reserved;
}
internal enum System.Windows.Xps.Serialization.RCW.Uri_PROPERTY : Enum {
    public int value__;
    public static Uri_PROPERTY Uri_PROPERTY_ABSOLUTE_URI;
    public static Uri_PROPERTY Uri_PROPERTY_STRING_START;
    public static Uri_PROPERTY Uri_PROPERTY_AUTHORITY;
    public static Uri_PROPERTY Uri_PROPERTY_DISPLAY_URI;
    public static Uri_PROPERTY Uri_PROPERTY_DOMAIN;
    public static Uri_PROPERTY Uri_PROPERTY_EXTENSION;
    public static Uri_PROPERTY Uri_PROPERTY_FRAGMENT;
    public static Uri_PROPERTY Uri_PROPERTY_HOST;
    public static Uri_PROPERTY Uri_PROPERTY_PASSWORD;
    public static Uri_PROPERTY Uri_PROPERTY_PATH;
    public static Uri_PROPERTY Uri_PROPERTY_PATH_AND_QUERY;
    public static Uri_PROPERTY Uri_PROPERTY_QUERY;
    public static Uri_PROPERTY Uri_PROPERTY_RAW_URI;
    public static Uri_PROPERTY Uri_PROPERTY_SCHEME_NAME;
    public static Uri_PROPERTY Uri_PROPERTY_USER_INFO;
    public static Uri_PROPERTY Uri_PROPERTY_STRING_LAST;
    public static Uri_PROPERTY Uri_PROPERTY_USER_NAME;
    public static Uri_PROPERTY Uri_PROPERTY_DWORD_START;
    public static Uri_PROPERTY Uri_PROPERTY_HOST_TYPE;
    public static Uri_PROPERTY Uri_PROPERTY_PORT;
    public static Uri_PROPERTY Uri_PROPERTY_SCHEME;
    public static Uri_PROPERTY Uri_PROPERTY_DWORD_LAST;
    public static Uri_PROPERTY Uri_PROPERTY_ZONE;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_COLOR : ValueType {
    internal XPS_COLOR_TYPE colorType;
    internal XPS_COLOR_TYPE_UNION value;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_COLOR_INTERPOLATION : Enum {
    public int value__;
    public static XPS_COLOR_INTERPOLATION XPS_COLOR_INTERPOLATION_SCRGBLINEAR;
    public static XPS_COLOR_INTERPOLATION XPS_COLOR_INTERPOLATION_SRGBLINEAR;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_COLOR_TYPE : Enum {
    public int value__;
    public static XPS_COLOR_TYPE XPS_COLOR_TYPE_SRGB;
    public static XPS_COLOR_TYPE XPS_COLOR_TYPE_SCRGB;
    public static XPS_COLOR_TYPE XPS_COLOR_TYPE_CONTEXT;
}
[ComConversionLossAttribute]
internal class System.Windows.Xps.Serialization.RCW.XPS_COLOR_TYPE_UNION : ValueType {
    internal XPS_SRGB_COLOR sRGB;
    internal XPS_SCRGB_COLOR scRGB;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_DASH : ValueType {
    internal float length;
    internal float gap;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_DASH_CAP : Enum {
    public int value__;
    public static XPS_DASH_CAP XPS_DASH_CAP_FLAT;
    public static XPS_DASH_CAP XPS_DASH_CAP_ROUND;
    public static XPS_DASH_CAP XPS_DASH_CAP_SQUARE;
    public static XPS_DASH_CAP XPS_DASH_CAP_TRIANGLE;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_DOCUMENT_TYPE : Enum {
    public int value__;
    public static XPS_DOCUMENT_TYPE XPS_DOCUMENT_TYPE_UNSPECIFIED;
    public static XPS_DOCUMENT_TYPE XPS_DOCUMENT_TYPE_XPS;
    public static XPS_DOCUMENT_TYPE XPS_DOCUMENT_TYPE_OPENXPS;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_FILL_RULE : Enum {
    public int value__;
    public static XPS_FILL_RULE XPS_FILL_RULE_EVENODD;
    public static XPS_FILL_RULE XPS_FILL_RULE_NONZERO;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_FONT_EMBEDDING : Enum {
    public int value__;
    public static XPS_FONT_EMBEDDING XPS_FONT_EMBEDDING_NORMAL;
    public static XPS_FONT_EMBEDDING XPS_FONT_EMBEDDING_OBFUSCATED;
    public static XPS_FONT_EMBEDDING XPS_FONT_EMBEDDING_RESTRICTED;
    public static XPS_FONT_EMBEDDING XPS_FONT_EMBEDDING_RESTRICTED_UNOBFUSCATED;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_GLYPH_INDEX : ValueType {
    internal int index;
    internal float advanceWidth;
    internal float horizontalOffset;
    internal float verticalOffset;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_GLYPH_MAPPING : ValueType {
    internal UInt32 unicodeStringStart;
    internal ushort unicodeStringLength;
    internal UInt32 glyphIndicesStart;
    internal ushort glyphIndicesLength;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_IMAGE_TYPE : Enum {
    public int value__;
    public static XPS_IMAGE_TYPE XPS_IMAGE_TYPE_JPEG;
    public static XPS_IMAGE_TYPE XPS_IMAGE_TYPE_PNG;
    public static XPS_IMAGE_TYPE XPS_IMAGE_TYPE_TIFF;
    public static XPS_IMAGE_TYPE XPS_IMAGE_TYPE_WDP;
    public static XPS_IMAGE_TYPE XPS_IMAGE_TYPE_JXR;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_INTERLEAVING : Enum {
    public int value__;
    public static XPS_INTERLEAVING XPS_INTERLEAVING_OFF;
    public static XPS_INTERLEAVING XPS_INTERLEAVING_ON;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_LINE_CAP : Enum {
    public int value__;
    public static XPS_LINE_CAP XPS_LINE_CAP_FLAT;
    public static XPS_LINE_CAP XPS_LINE_CAP_ROUND;
    public static XPS_LINE_CAP XPS_LINE_CAP_SQUARE;
    public static XPS_LINE_CAP XPS_LINE_CAP_TRIANGLE;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_LINE_JOIN : Enum {
    public int value__;
    public static XPS_LINE_JOIN XPS_LINE_JOIN_MITER;
    public static XPS_LINE_JOIN XPS_LINE_JOIN_BEVEL;
    public static XPS_LINE_JOIN XPS_LINE_JOIN_ROUND;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_MATRIX : ValueType {
    internal float m11;
    internal float m12;
    internal float m21;
    internal float m22;
    internal float m31;
    internal float m32;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_OBJECT_TYPE : Enum {
    public int value__;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_CANVAS;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_GLYPHS;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_PATH;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_MATRIX_TRANSFORM;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_GEOMETRY;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_SOLID_COLOR_BRUSH;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_IMAGE_BRUSH;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_LINEAR_GRADIENT_BRUSH;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_RADIAL_GRADIENT_BRUSH;
    public static XPS_OBJECT_TYPE XPS_OBJECT_TYPE_VISUAL_BRUSH;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_POINT : ValueType {
    internal float x;
    internal float y;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_RECT : ValueType {
    internal float x;
    internal float y;
    internal float width;
    internal float height;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_SCRGB_COLOR : ValueType {
    public float alpha;
    public float red;
    public float green;
    public float blue;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_SEGMENT_STROKE_PATTERN : Enum {
    public int value__;
    public static XPS_SEGMENT_STROKE_PATTERN XPS_SEGMENT_STROKE_PATTERN_ALL;
    public static XPS_SEGMENT_STROKE_PATTERN XPS_SEGMENT_STROKE_PATTERN_NONE;
    public static XPS_SEGMENT_STROKE_PATTERN XPS_SEGMENT_STROKE_PATTERN_MIXED;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_SEGMENT_TYPE : Enum {
    public int value__;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_ARC_LARGE_CLOCKWISE;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_ARC_LARGE_COUNTERCLOCKWISE;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_ARC_SMALL_CLOCKWISE;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_ARC_SMALL_COUNTERCLOCKWISE;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_BEZIER;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_LINE;
    public static XPS_SEGMENT_TYPE XPS_SEGMENT_TYPE_QUADRATIC_BEZIER;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_SIZE : ValueType {
    internal float width;
    internal float height;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_SPREAD_METHOD : Enum {
    public int value__;
    public static XPS_SPREAD_METHOD XPS_SPREAD_METHOD_PAD;
    public static XPS_SPREAD_METHOD XPS_SPREAD_METHOD_REFLECT;
    public static XPS_SPREAD_METHOD XPS_SPREAD_METHOD_REPEAT;
}
internal class System.Windows.Xps.Serialization.RCW.XPS_SRGB_COLOR : ValueType {
    public byte alpha;
    public byte red;
    public byte green;
    public byte blue;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_STYLE_SIMULATION : Enum {
    public int value__;
    public static XPS_STYLE_SIMULATION XPS_STYLE_SIMULATION_NONE;
    public static XPS_STYLE_SIMULATION XPS_STYLE_SIMULATION_ITALIC;
    public static XPS_STYLE_SIMULATION XPS_STYLE_SIMULATION_BOLD;
    public static XPS_STYLE_SIMULATION XPS_STYLE_SIMULATION_BOLDITALIC;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_THUMBNAIL_SIZE : Enum {
    public int value__;
    public static XPS_THUMBNAIL_SIZE XPS_THUMBNAIL_SIZE_VERYSMALL;
    public static XPS_THUMBNAIL_SIZE XPS_THUMBNAIL_SIZE_SMALL;
    public static XPS_THUMBNAIL_SIZE XPS_THUMBNAIL_SIZE_MEDIUM;
    public static XPS_THUMBNAIL_SIZE XPS_THUMBNAIL_SIZE_LARGE;
}
internal enum System.Windows.Xps.Serialization.RCW.XPS_TILE_MODE : Enum {
    public int value__;
    public static XPS_TILE_MODE XPS_TILE_MODE_NONE;
    public static XPS_TILE_MODE XPS_TILE_MODE_TILE;
    public static XPS_TILE_MODE XPS_TILE_MODE_FLIPX;
    public static XPS_TILE_MODE XPS_TILE_MODE_FLIPY;
    public static XPS_TILE_MODE XPS_TILE_MODE_FLIPXY;
}
[CoClassAttribute("System.Windows.Xps.Serialization.RCW.XpsOMThumbnailGeneratorClass")]
[GuidAttribute("15B873D5-1971-41E8-83A3-6578403064C7")]
internal interface System.Windows.Xps.Serialization.RCW.XpsOMThumbnailGenerator {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("7E4A23E2-B969-4761-BE35-1A8CED58E323")]
[TypeLibTypeAttribute("2")]
internal class System.Windows.Xps.Serialization.RCW.XpsOMThumbnailGeneratorClass : object {
    public virtual IXpsOMImageResource GenerateThumbnail(IXpsOMPage page, XPS_IMAGE_TYPE thumbnailType, XPS_THUMBNAIL_SIZE thumbnailSize, IOpcPartUri imageResourcePartName);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceCollectionSerializer : ReachSerializer {
    public ReachDocumentReferenceCollectionSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeDocumentReferences(SerializableObjectContext serializableObjectContext);
    private void SerializeDocumentReference(object documentReference);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceCollectionSerializerAsync : ReachSerializerAsync {
    public ReachDocumentReferenceCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    private void SerializeDocumentReferences(SerializableObjectContext serializableObjectContext);
    private void SerializeNextDocumentReference(IEnumerator enumerator, SerializableObjectContext serializableObjectContext);
    private void SerializeDocumentReference(object documentReference);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceSerializer : ReachSerializer {
    public ReachDocumentReferenceSerializer(PackageSerializationManager manager);
    private object Idle(object sender);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceSerializerAsync : ReachSerializerAsync {
    public ReachDocumentReferenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private object Idle(object sender);
    private void SerializeDocument(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachFixedPageSerializerContext : ReachSerializerContext {
    private bool _endVisual;
    private ReachTreeWalker _treeWalker;
    public ReachTreeWalker TreeWalker { get; }
    public bool EndVisual { get; }
    public ReachFixedPageSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action, bool endVisual, ReachTreeWalker treeWalker);
    public ReachTreeWalker get_TreeWalker();
    public bool get_EndVisual();
}
internal class System.Windows.Xps.Serialization.ReachHierarchySimulator : object {
    protected PackageSerializationManager _serializationManager;
    private object _serializedObject;
    private XmlWriter _documentSequenceXmlWriter;
    private XmlWriter _documentXmlWriter;
    private XmlWriter _pageXmlWriter;
    private ReachTreeWalker _treeWalker;
    public ReachHierarchySimulator(PackageSerializationManager manager, object serializedObject);
    internal void BeginConfirmToXPSStructure(bool mode);
    internal void EndConfirmToXPSStructure(bool mode);
    internal virtual XmlWriter SimulateBeginFixedDocumentSequence();
    internal virtual void SimulateEndFixedDocumentSequence(XmlWriter xmlWriter);
    internal virtual XmlWriter SimulateBeginFixedDocument();
    internal virtual void SimulateEndFixedDocument(XmlWriter xmlWriter);
    internal XmlWriter SimulateBeginFixedPage();
    internal void SimulateEndFixedPage(XmlWriter xmlWriter);
    protected void SimulatePrintTicketRaisingEvent(XpsSerializationPrintTicketRequiredEventArgs e);
    private Size SimulateFixedPageSize(Visual visual, PrintTicket printTicket);
}
internal class System.Windows.Xps.Serialization.ReachPageContentCollectionSerializer : ReachSerializer {
    public ReachPageContentCollectionSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializePageContents(SerializableObjectContext serializableObjectContext);
    private void SerializePageContent(object pageContent);
}
internal class System.Windows.Xps.Serialization.ReachPageContentCollectionSerializerAsync : ReachSerializerAsync {
    public ReachPageContentCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    private void SerializePageContents(SerializableObjectContext serializableObjectContext);
    private void SerializeNextPageContent(IEnumerator enumerator, SerializableObjectContext serializableObjectContext);
    private void SerializePageContent(object pageContent);
}
internal class System.Windows.Xps.Serialization.ReachPageContentSerializer : ReachSerializer {
    public ReachPageContentSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachPageContentSerializerAsync : ReachSerializerAsync {
    public ReachPageContentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializePage(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachSerializationServices : object {
    private Hashtable _typesXmlNSMapping;
    private IDictionary _typeSerializableDependencyProperties;
    private IDictionary _typeNoneSerializableClrProperties;
    private static Type[] _xpsTypesRequiringXMLNS;
    private String[] _fixedPageDependencyProperties;
    private String[] _fixedDocumentDependencyProperties;
    private String[] _fixedDocumentSequenceDependencyProperties;
    private String[] _fixedDocumentExcludedClrProperties;
    private String[] _fixedDocumentSequenceExcludedClrProperties;
    public Hashtable TypesXmlNSMapping { get; }
    public IDictionary TypeSerializableDependencyProperties { get; }
    public IDictionary TypeNoneSerializableClrProperties { get; }
    private static ReachSerializationServices();
    public void RegisterNameSpacesForTypes();
    public void RegisterSerializableDependencyPropertiesForReachTypes();
    public void RegisterNoneSerializableClrPropertiesForReachTypes();
    public Hashtable get_TypesXmlNSMapping();
    public IDictionary get_TypeSerializableDependencyProperties();
    public IDictionary get_TypeNoneSerializableClrProperties();
}
internal abstract class System.Windows.Xps.Serialization.ReachSerializer : object {
    private PackageSerializationManager _serializationManager;
    private XmlWriter _xmlWriter;
    public XmlWriter XmlWriter { get; public set; }
    public PackageSerializationManager SerializationManager { get; }
    public ReachSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal abstract virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void SerializeObjectCore(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    private SerializableObjectContext DiscoverObjectData(object serializedObject, SerializablePropertyContext serializedProperty);
    private void SerializeProperties(SerializableObjectContext serializableObjectContext);
    private void SerializeProperty(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    public virtual PackageSerializationManager get_SerializationManager();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal abstract class System.Windows.Xps.Serialization.ReachSerializerAsync : ReachSerializer {
    private IXpsSerializationManagerAsync _serializationManager;
    private XmlWriter _xmlWriter;
    public XmlWriter XmlWriter { get; public set; }
    public PackageSerializationManager SerializationManager { get; }
    public ReachSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void BeginSerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void EndSerializeObject(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    internal virtual void SerializeObjectCore(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    private SerializableObjectContext DiscoverObjectData(object serializedObject, SerializablePropertyContext serializedProperty);
    private void SerializeProperties(SerializableObjectContext serializableObjectContext);
    private void SerializeNextProperty(SerializableObjectContext serializableObjectContext);
    private void SerializeProperty(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    public virtual PackageSerializationManager get_SerializationManager();
}
internal class System.Windows.Xps.Serialization.ReachSerializerContext : object {
    private SerializerAction _action;
    private ReachSerializerAsync _serializer;
    private SerializableObjectContext _objectContext;
    public SerializerAction Action { get; }
    public ReachSerializerAsync Serializer { get; }
    public SerializableObjectContext ObjectContext { get; }
    public ReachSerializerContext(ReachSerializerAsync serializer, SerializerAction action);
    public ReachSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action);
    public virtual SerializerAction get_Action();
    public virtual ReachSerializerAsync get_Serializer();
    public virtual SerializableObjectContext get_ObjectContext();
}
internal class System.Windows.Xps.Serialization.ReachTreeWalker : object {
    private IList`1<string> _linkTargetList;
    private XmlWriter _linkXmlWriter;
    private StringWriter _linkStream;
    private XmlWriter _serializerXmlWriter;
    private PackageSerializationManager _serializationManager;
    private static string FRAGMENTMARKER;
    private PackageSerializationManager SerializationManager { get; }
    private XmlWriter XmlWriter { get; }
    private XmlWriter LinkXmlWriter { get; }
    private IList`1<string> LinkTargetList { get; }
    internal ReachTreeWalker(ReachSerializer serializer);
    internal ReachTreeWalker(XmlWriter writer, PackageSerializationManager serializationManager);
    internal void CommitHyperlinks();
    internal void SerializeLinksInDocumentPage(DocumentPage page);
    internal void SerializeLinksInFixedPage(FixedPage page);
    internal void SerializeLinksInVisual(Visual visual);
    private void SerializeLinksForIContentHost(IContentHost contentHost, Visual root);
    private void SerializeLinksInLogicalTree(DependencyObject dependencyObject, IContentHost contentHost, Visual root);
    private void SerializeLinkTargetForElement(IInputElement element, IContentHost contentHost, Visual root);
    private bool IsFragment(Uri uri);
    private void SerializeHyperlink(PathGeometry geometry, string id, Uri navigateUri);
    private void WriteAttribute(XmlWriter writer, string name, object value);
    private bool AddLinkTarget(string name);
    private PackageSerializationManager get_SerializationManager();
    private XmlWriter get_XmlWriter();
    private XmlWriter get_LinkXmlWriter();
    private IList`1<string> get_LinkTargetList();
}
internal class System.Windows.Xps.Serialization.ReachUIElementCollectionSerializer : ReachSerializer {
    public ReachUIElementCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeUIElements(SerializableObjectContext serializableObjectContext);
    private void SerializeUIElement(object uiElement);
}
internal class System.Windows.Xps.Serialization.ReachUIElementCollectionSerializerAsync : ReachSerializerAsync {
    public ReachUIElementCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    private void SerializeUIElements(SerializableObjectContext serializableObjectContext);
    private void SerializeNextUIElement(IEnumerator enumerator, SerializableObjectContext serializableObjectContext);
    private void SerializeUIElement(object uiElement);
}
internal class System.Windows.Xps.Serialization.ReachVisualSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public ReachVisualSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    private void SerializeTree(Visual visual, XmlWriter resWriter, XmlWriter bodyWriter);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal bool SerializeDisguisedVisual(object serializedObject);
}
internal class System.Windows.Xps.Serialization.ReachVisualSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public ReachVisualSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    private void SerializeTree(Visual visual, XmlWriter resWriter, XmlWriter bodyWriter);
    private void SerializeNextTreeNode(ReachVisualSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal bool SerializeDisguisedVisual(object serializedObject);
}
internal class System.Windows.Xps.Serialization.ReachVisualSerializerContext : ReachSerializerContext {
    private Stack`1<NodeContext> _contextStack;
    private VisualTreeFlattener _flattener;
    public Stack`1<NodeContext> ContextStack { get; }
    public VisualTreeFlattener VisualFlattener { get; }
    public ReachVisualSerializerContext(ReachSerializerAsync serializer, Stack`1<NodeContext> contextStack, VisualTreeFlattener flattener, SerializerAction action);
    public Stack`1<NodeContext> get_ContextStack();
    public VisualTreeFlattener get_VisualFlattener();
}
internal class System.Windows.Xps.Serialization.ResourceStreamCacheItem : object {
    private XpsResourceStream _resourceStream;
    private XpsResource _reachResource;
    private int _resourceStreamRefCount;
    internal XpsResourceStream XpsResourceStream { get; internal set; }
    internal XpsResource XpsResource { get; internal set; }
    internal XpsResourceStream get_XpsResourceStream();
    internal void set_XpsResourceStream(XpsResourceStream value);
    internal XpsResource get_XpsResource();
    internal void set_XpsResource(XpsResource value);
    internal void IncRef();
    internal int Release();
}
internal class System.Windows.Xps.Serialization.SerializableDependencyPropertyContext : SerializablePropertyContext {
    public MemberInfo MemberInfo { get; }
    public object DependencyProperty { get; }
    public SerializableDependencyPropertyContext(string name, string prefix, object target, TypeDependencyPropertyCache propertyCache);
    public SerializableDependencyPropertyContext(object target, TypeDependencyPropertyCache propertyCache);
    public virtual bool IsComplexProperty(PackageSerializationManager serializationManager);
    public virtual bool IsComplexValue(PackageSerializationManager manager, Boolean& canConvert);
    public MemberInfo get_MemberInfo();
    public object get_DependencyProperty();
}
internal class System.Windows.Xps.Serialization.SerializableObjectContext : BasicContext {
    private object _targetObject;
    private MetroSerializationNamespaceTable _namespaceTable;
    private SerializablePropertyCollection _propertiesCollection;
    private bool _isComplexValue;
    private bool _isReadOnlyValue;
    private SerializablePropertyContext _backingPropertyContext;
    private static Stack _recycableSerializableObjectContexts;
    private static object _stackLock;
    public object TargetObject { get; }
    public MetroSerializationNamespaceTable NamespaceTable { get; public set; }
    public SerializablePropertyCollection PropertiesCollection { get; public set; }
    public bool IsComplexValue { get; public set; }
    public bool IsReadOnlyValue { get; public set; }
    private static SerializableObjectContext();
    public SerializableObjectContext(string name, string prefix, object target, SerializablePropertyContext serializablePropertyContext);
    public SerializableObjectContext(object target, SerializablePropertyContext serializablePropertyContext);
    internal static SerializableObjectContext CreateContext(PackageSerializationManager serializationManager, object serializableObject, SerializableObjectContext serializableObjectParentContext, SerializablePropertyContext serializablePropertyContext);
    internal static void RecycleContext(SerializableObjectContext serializableObjectContext);
    public object get_TargetObject();
    public MetroSerializationNamespaceTable get_NamespaceTable();
    public void set_NamespaceTable(MetroSerializationNamespaceTable value);
    public SerializablePropertyCollection get_PropertiesCollection();
    public void set_PropertiesCollection(SerializablePropertyCollection value);
    public bool get_IsComplexValue();
    public void set_IsComplexValue(bool value);
    public bool get_IsReadOnlyValue();
    public void set_IsReadOnlyValue(bool value);
    public void Initialize(object target, SerializablePropertyContext serializablePropertyContext);
    public virtual void Clear();
}
internal class System.Windows.Xps.Serialization.SerializableObjectNamespaceInfo : object {
    private string _prefix;
    private string _xmlNamespace;
    private string _clrNamespace;
    internal string Prefix { get; }
    internal string XmlNamespace { get; }
    internal string ClrNamespace { get; }
    internal SerializableObjectNamespaceInfo(Type type, string prefix, string xmlNamespace);
    internal SerializableObjectNamespaceInfo(string clrNamespace, string prefix, string xmlNamespace);
    internal string get_Prefix();
    internal string get_XmlNamespace();
    internal string get_ClrNamespace();
}
internal class System.Windows.Xps.Serialization.SerializablePropertyCollection : object {
    private PackageSerializationManager _serializationManager;
    private object _target;
    private bool _isSimpleMode;
    private int _simplePropertiesIndex;
    private Queue _simplePropertyCollection;
    private int _complexPropertiesIndex;
    private Queue _complexPropertyCollection;
    private IEnumerator _queueEnumerator;
    public object Current { get; }
    internal SerializablePropertyCollection(PackageSerializationManager manager, object targetObject);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    internal void Initialize(PackageSerializationManager serializationManager, object targetObject);
    internal void Clear();
    private void InitializeSerializableClrProperties();
    private void InitializeSerializableDependencyProperties();
}
internal class System.Windows.Xps.Serialization.SerializablePropertyContext : BasicContext {
    private object _targetObject;
    private TypePropertyCache _propertyInfo;
    private bool _isComplex;
    public object TargetObject { get; }
    public PropertyInfo PropertyInfo { get; }
    public bool IsComplex { get; public set; }
    public DesignerSerializationVisibility Visibility { get; }
    public Type SerializerType { get; }
    public TypeConverter TypeConverter { get; }
    public DefaultValueAttribute DefaultValueAttribute { get; }
    public DesignerSerializationOptionsAttribute DesignerSerializationOptionsAttribute { get; }
    public bool IsReadOnly { get; }
    public object Value { get; public set; }
    public TypePropertyCache TypePropertyCache { get; }
    public SerializablePropertyContext(string name, string prefix, object target, TypePropertyCache propertyCache);
    internal SerializablePropertyContext(object target, TypePropertyCache propertyCache);
    public virtual bool IsComplexProperty(PackageSerializationManager serializationManager);
    public virtual bool IsComplexValue(PackageSerializationManager manager, Boolean& canConvert);
    public object get_TargetObject();
    public PropertyInfo get_PropertyInfo();
    public bool get_IsComplex();
    public void set_IsComplex(bool value);
    public DesignerSerializationVisibility get_Visibility();
    public Type get_SerializerType();
    public TypeConverter get_TypeConverter();
    public DefaultValueAttribute get_DefaultValueAttribute();
    public DesignerSerializationOptionsAttribute get_DesignerSerializationOptionsAttribute();
    public bool get_IsReadOnly();
    public object get_Value();
    public void set_Value(object value);
    public TypePropertyCache get_TypePropertyCache();
}
internal class System.Windows.Xps.Serialization.SerializationManagerOperationContextStack : object {
    private ReachSerializer _serializer;
    private object _serializedObject;
    public ReachSerializer ReachSerializer { get; }
    public object SerializedObject { get; }
    public SerializationManagerOperationContextStack(ReachSerializer serializer, object serializedObject);
    public ReachSerializer get_ReachSerializer();
    public object get_SerializedObject();
}
public enum System.Windows.Xps.Serialization.SerializationState : Enum {
    public int value__;
    public static SerializationState Normal;
    public static SerializationState Stop;
}
internal enum System.Windows.Xps.Serialization.SerializerAction : Enum {
    public int value__;
    public static SerializerAction endSerializeObject;
    public static SerializerAction endPersistObjectData;
    public static SerializerAction serializeNextProperty;
    public static SerializerAction serializeNextDocumentReference;
    public static SerializerAction serializeDocument;
    public static SerializerAction serializeNextPageContent;
    public static SerializerAction serializePage;
    public static SerializerAction endSerializeReachFixedPage;
    public static SerializerAction serializeNextUIElement;
    public static SerializerAction serializeNextTreeNode;
    public static SerializerAction serializeNextDocumentPage;
    public static SerializerAction endSerializeDocumentPage;
}
internal class System.Windows.Xps.Serialization.SerializersCacheManager : object {
    private PackageSerializationManager _serializationManager;
    private IDictionary _typesCacheTable;
    private IDictionary _serializersTable;
    private IDictionary _typesDependencyPropertiesCacheTable;
    internal PackageSerializationManager SerializationManger { get; }
    public SerializersCacheManager(PackageSerializationManager serializationManager);
    public ReachSerializer GetSerializer(object serializedObject);
    internal TypePropertyCache[] GetClrSerializableProperties(object serializableObject);
    internal TypeDependencyPropertyCache[] GetSerializableDependencyProperties(object serializableObject);
    internal TypeCacheItem GetTypeCacheItem(object serializableObject);
    internal TypeDependencyPropertiesCacheItem GetTypeDependencyPropertiesCacheItem(object serializableObject);
    internal TypeCacheItem GetTypeCacheItem(Type serializableObjectType);
    internal PackageSerializationManager get_SerializationManger();
    private bool CanSerializeValue(object serializableObject, TypePropertyCache propertyCache);
    private ReachSerializer CreateReachSerializer(Type serializerType);
}
internal static class System.Windows.Xps.Serialization.Toolbox : object {
    internal static void EmitEvent(Event evt);
    internal static void Layout(FixedPage fixedPage, PrintTicket printTicket);
    internal static Size Layout(UIElement uiElement, Size elementSize, PrintTicket printTicket);
    internal static Size ValidateDocumentSize(Size documentSize, PrintTicket printTicket);
    internal static DocumentPage GetPage(DocumentPaginator paginator, int index);
    internal static FixedPage GetPageRoot(object page);
}
internal class System.Windows.Xps.Serialization.TreeWalkProgress : object {
    private IDictionary`2<ICyclicBrush, EmptyStruct> _cyclicBrushes;
    public bool EnterTreeWalk(ICyclicBrush brush);
    public void ExitTreeWalk(ICyclicBrush brush);
    public bool IsTreeWalkInProgress(ICyclicBrush brush);
}
internal class System.Windows.Xps.Serialization.TypeCacheItem : object {
    private Type type;
    private Type serializerType;
    private TypeConverter typeConverter;
    private TypePropertyCache[] clrSerializableProperties;
    internal Type SerializerType { get; }
    internal TypeConverter TypeConverter { get; }
    internal TypeCacheItem(Type type);
    internal TypeCacheItem(Type type, Type serializerType);
    internal TypeCacheItem(Type type, TypeConverter typeConverter);
    internal TypePropertyCache[] GetClrSerializableProperties(SerializersCacheManager serializersCacheManager);
    internal Type get_SerializerType();
    internal TypeConverter get_TypeConverter();
    private bool CanSerializeProperty(PropertyInfo propertyInfo, SerializersCacheManager serializersCacheManager, DesignerSerializationVisibility& visibility, Type& serializerTypeForProperty, TypeConverter& typeConverterForProperty, DefaultValueAttribute& defaultValueAttr, DesignerSerializationOptionsAttribute& designerSerializationFlagsAttr);
}
internal class System.Windows.Xps.Serialization.TypeDependencyPropertiesCacheItem : object {
    private Type objectType;
    private TypeDependencyPropertyCache[] serializableDependencyProperties;
    internal TypeDependencyPropertiesCacheItem(Type type, TypeDependencyPropertyCache[] properties);
    internal TypeDependencyPropertyCache[] GetSerializableDependencyProperties();
}
internal class System.Windows.Xps.Serialization.TypeDependencyPropertyCache : TypePropertyCache {
    private MemberInfo memberInfo;
    private object dependencyProperty;
    internal MemberInfo MemberInfo { get; internal set; }
    internal object DependencyProperty { get; internal set; }
    internal TypeDependencyPropertyCache(MemberInfo memberInfo, object dependencyProperty, DesignerSerializationVisibility visibility, Type serializerTypeForProperty, TypeConverter typeConverterForProperty, DefaultValueAttribute defaultValueAttr, DesignerSerializationOptionsAttribute designerSerializationFlagsAttr);
    internal static bool CanSerializeProperty(MemberInfo memberInfo, SerializersCacheManager serializersCacheManager, DesignerSerializationVisibility& visibility, Type& serializerTypeForProperty, TypeConverter& typeConverterForProperty, DefaultValueAttribute& defaultValueAttr, DesignerSerializationOptionsAttribute& designerSerializationFlagsAttr);
    internal static bool CanSerializeValue(object serializableObject, TypeDependencyPropertyCache propertyCache);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
    internal object get_DependencyProperty();
    internal void set_DependencyProperty(object value);
}
internal class System.Windows.Xps.Serialization.TypePropertyCache : object {
    private DesignerSerializationVisibility visibility;
    private Type serializerTypeForProperty;
    private TypeConverter typeConverterForProperty;
    private DefaultValueAttribute defaultValueAttr;
    private DesignerSerializationOptionsAttribute designerSerializationFlagsAttr;
    private PropertyInfo propertyInfo;
    private object propertyValue;
    internal DesignerSerializationVisibility Visibility { get; internal set; }
    internal Type SerializerTypeForProperty { get; internal set; }
    internal TypeConverter TypeConverterForProperty { get; internal set; }
    internal DefaultValueAttribute DefaultValueAttr { get; internal set; }
    internal DesignerSerializationOptionsAttribute DesignerSerializationOptionsAttr { get; internal set; }
    internal PropertyInfo PropertyInfo { get; internal set; }
    internal object PropertyValue { get; internal set; }
    internal TypePropertyCache(PropertyInfo propertyInfo);
    internal TypePropertyCache(PropertyInfo propertyInfo, DesignerSerializationVisibility visibility, Type serializerTypeForProperty, TypeConverter typeConverterForProperty, DefaultValueAttribute defaultValueAttr, DesignerSerializationOptionsAttribute designerSerializationFlagsAttr);
    internal DesignerSerializationVisibility get_Visibility();
    internal void set_Visibility(DesignerSerializationVisibility value);
    internal Type get_SerializerTypeForProperty();
    internal void set_SerializerTypeForProperty(Type value);
    internal TypeConverter get_TypeConverterForProperty();
    internal void set_TypeConverterForProperty(TypeConverter value);
    internal DefaultValueAttribute get_DefaultValueAttr();
    internal void set_DefaultValueAttr(DefaultValueAttribute value);
    internal DesignerSerializationOptionsAttribute get_DesignerSerializationOptionsAttr();
    internal void set_DesignerSerializationOptionsAttr(DesignerSerializationOptionsAttribute value);
    internal PropertyInfo get_PropertyInfo();
    internal void set_PropertyInfo(PropertyInfo value);
    internal object get_PropertyValue();
    internal void set_PropertyValue(object value);
}
internal class System.Windows.Xps.Serialization.UIElementCollectionSerializerContext : ReachSerializerContext {
    private IEnumerator _enumerator;
    public IEnumerator Enumerator { get; }
    public UIElementCollectionSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.VisualSerializationService : object {
    private VisualTreeFlattener _visualTreeFlattener;
    private PackageSerializationManager _serializationManager;
    public VisualSerializationService(PackageSerializationManager serializationManager);
    public VisualTreeFlattener AcquireVisualTreeFlattener(XmlWriter resWriter, XmlWriter bodyWriter, Size pageSize);
    public void ReleaseVisualTreeFlattener();
}
internal class System.Windows.Xps.Serialization.VisualSerializer : object {
    public static double PrecisionDPI;
    public static double PositiveLargestFloat;
    public static double NegativeLargestFloat;
    public static double PositiveSmallestFloat;
    public static double NegativeSmallestFloat;
    public static int MaxElementCount;
    public static int MaxPointCount;
    public static int MaxResourceCount;
    public static int MaxGlyphCount;
    public static int MaxGradientStops;
    private static Rect UnitRect;
    protected XmlWriter _writer;
    protected XmlWriter _resWriter;
    protected XmlWriter _bodyWriter;
    protected int _brushId;
    protected int _bitmapId;
    protected PackageSerializationManager _manager;
    protected XpsTokenContext _context;
    protected Stack _tcoStack;
    protected ArrayList _objects;
    protected ArrayList _objnams;
    protected double _opacity;
    protected Brush _opacityMask;
    protected Transform _transform;
    protected Geometry _clip;
    protected string _coordFormat;
    protected Matrix _worldTransform;
    protected int _forceGeneral;
    protected string _nameAttr;
    protected Visual _node;
    protected Uri _navigateUri;
    protected Size _pageSize;
    protected bool _exceedFloatLimit;
    protected bool _exceedPointLimit;
    protected int _totalElementCount;
    internal VisualSerializer(XmlWriter resWriter, XmlWriter bodyWriter, PackageSerializationManager manager);
    private static VisualSerializer();
    protected double CheckFloat(double v);
    private void ReportLimitViolation();
    protected void AppendCoordinate(StringBuilder rslt, double v);
    protected void AppendPoint(StringBuilder builder, Point p, Matrix mat);
    protected int AppendPoints(StringBuilder builder, PointCollection pc, Matrix mat);
    protected string GetString(object obj);
    protected string FindBrush(Brush brush, Rect bounds);
    protected void WriteAttr(string attribute, object val);
    protected void WriteAttr(string attribute, object val, object valDefault);
    protected string ColorToString(Color color);
    protected string SimpleBrushToString(Brush brush);
    protected void WriteGradientStops(string prefix, GradientStopCollection gsc);
    private void WriteBrushHeader(string element, Brush brush);
    private void WriteTileBrush(string element, TileBrush brush, Rect bounds);
    private void SaveResetState();
    private void RestoreState();
    private void WriteDrawingBody(Drawing drawing, Matrix worldTransform);
    protected void WriteBitmap(string attribute, ImageSource imageSource);
    protected StringBuilder BrushToString(Brush brush, Rect bounds);
    protected void WriteBrush(string attribute, Brush brush, Rect bounds);
    protected void WritePen(Pen pen, Rect bounds, bool isLineGeometry);
    private static bool IsUniformScale(Matrix mat);
    private void AppendMatrix(StringBuilder rslt, Matrix mat);
    private void WritePathFigureCollection(PathFigureCollection figures, bool forFill, bool forStroke);
    private static bool Visible(Brush brush, Pen pen);
    private static char Ord(bool b);
    private static char Ord(SweepDirection d);
    private string PathGeometryToString(PathGeometry path, Matrix map, bool forFill, bool forStroke);
    private void WriteTransform(string attribute, Transform trans, Transform relative, Rect bounds);
    private void WriteTransform(string attribute, Matrix trans);
    private static Transform Append(Transform trans, Matrix mat);
    private void WriteBool(string attr, bool val);
    private void WriteFillRule(FillRule rule);
    internal bool WriteGeometry(string element, string attribute, Geometry geo, Matrix map, bool asElement, bool forFill, bool forStroke);
    private static bool IsPathFigureEmpty(PathFigureCollection figures, bool forFill, bool forStroke);
    private static bool IsPathGeometryEmpty(PathGeometry pg, bool forFill, bool forStroke);
    private static bool IsXmlValidChar(char c);
    private static GlyphRun FilterXmlInvalidChar(GlyphRun glyphRun);
    private string GetUriAsString(Uri uri);
    private bool PreserveTransparent();
    private void WriteCommonAttrs(bool bWriteAutomation);
    public static bool NeedBounds(Brush b);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawImage(ImageSource image, Rect rectangle);
    private static Transform ExtractTranslation(Transform trans, Double& dx, Double& dy);
    internal void DrawGlyphRunAsImage(Brush foreground, GlyphRun glyphRun);
    private static bool EmbeddingAllowed(GlyphTypeface typeface);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Pop();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Comment(string str);
    private bool WriteTCO(string element, Transform transform, Geometry clip, Matrix clipMat, double opacity, Brush opacityMask, Rect bounds);
    private void SetCoordinateFormat(double scale);
    private void PushCoordinateScope(Transform transform);
    private void PopCoordinateScope();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Push(Matrix mat, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
}
[FriendAccessAllowedAttribute]
internal class System.Windows.Xps.Serialization.VisualTreeFlattener : object {
    private DrawingContextFlattener _dcf;
    private Dictionary`2<string, int> _nameList;
    private Matrix _inheritedTransformHint;
    private int _visualDepth;
    public Matrix InheritedTransformHint { get; public set; }
    internal VisualTreeFlattener(IMetroDrawingContext dc, Size pageSize, TreeWalkProgress treeWalkProgress);
    internal VisualTreeFlattener(XmlWriter resWriter, XmlWriter bodyWriter, PackageSerializationManager manager, Size pageSize, TreeWalkProgress treeWalkProgress);
    public Matrix get_InheritedTransformHint();
    public void set_InheritedTransformHint(Matrix value);
    private static int Complexity(Drawing drawing);
    internal bool StartVisual(Visual visual);
    internal void EndVisual();
    internal void VisualWalk(Visual visual);
    internal void DrawingWalk(Drawing d, Matrix drawingToWorldTransform);
    [FriendAccessAllowedAttribute]
internal static void SaveAsXml(Visual visual, XmlWriter resWriter, XmlWriter bodyWriter, string fileName);
    internal static void Walk(Visual visual, IMetroDrawingContext dc, Size pageSize, TreeWalkProgress treeWalkProgress);
    internal static bool WritePath(XmlWriter bodyWriter, Geometry geometry, Size pageSize);
}
internal enum System.Windows.Xps.Serialization.XpsDocumentEventType : Enum {
    public int value__;
    public static XpsDocumentEventType None;
    public static XpsDocumentEventType AddFixedDocumentSequencePre;
    public static XpsDocumentEventType AddFixedDocumentSequencePost;
    public static XpsDocumentEventType AddFixedDocumentPre;
    public static XpsDocumentEventType AddFixedDocumentPost;
    public static XpsDocumentEventType AddFixedPagePre;
    public static XpsDocumentEventType AddFixedPagePost;
    public static XpsDocumentEventType AddFixedDocumentSequencePrintTicketPre;
    public static XpsDocumentEventType AddFixedDocumentSequencePrintTicketPost;
    public static XpsDocumentEventType AddFixedDocumentPrintTicketPre;
    public static XpsDocumentEventType AddFixedDocumentPrintTicketPost;
    public static XpsDocumentEventType AddFixedPagePrintTicketPre;
    public static XpsDocumentEventType AddFixedPagePrintTicketPost;
    public static XpsDocumentEventType XpsDocumentCancel;
}
internal class System.Windows.Xps.Serialization.XpsDriverDocEventManager : object {
    private XpsSerializationManager _manager;
    private XpsDocumentEventType _documentEvent;
    private int _currentCount;
    private int _currentPage;
    private int _currentDocSequence;
    private int _currentFixedDocument;
    private PrintTicket _printTicket;
    private PrintTicketLevel _printTicketLevel;
    public XpsDriverDocEventManager(XpsSerializationManager manager);
    internal void ForwardPackagingProgressEvent(object sender, PackagingProgressEventArgs e);
    internal void ForwardUserPrintTicket(object sender, XpsSerializationPrintTicketRequiredEventArgs e);
    internal void ForwardSerializationCompleted(object sender, XpsSerializationCompletedEventArgs e);
    private XpsSerializationXpsDriverDocEventArgs OnXpsDriverDocEvent();
}
internal class System.Windows.Xps.Serialization.XpsFontSerializationService : object {
    private XpsFontSubsetter _fontSubsetter;
    public XpsFontSubsetter FontSubsetter { get; }
    public XpsFontSerializationService(BasePackagingPolicy packagingPolicy);
    public bool SignalCommit(Type type);
    public XpsFontSubsetter get_FontSubsetter();
}
internal class System.Windows.Xps.Serialization.XpsFontSubsetter : object {
    private IDictionary`2<Uri, FEMCacheItem> _fontEmbeddingManagerCache;
    private BasePackagingPolicy _packagingPolicy;
    private FontSubsetterCommitPolicies _commitPolicy;
    private int _commitCountPolicy;
    private int _currentCommitCnt;
    public XpsFontSubsetter(BasePackagingPolicy packagingPolicy);
    public Uri ComputeFontSubset(GlyphRun glyphRun);
    public bool CommitFontSubsetsSignal(FontSubsetterCommitPolicies signal);
    public static FontEmbeddingAction DetermineEmbeddingAction(GlyphTypeface glyphTypeface);
    public static FontEmbeddingAction DetermineEmbeddingAction(FontEmbeddingRight fsType);
    public static bool IsRestrictedFont(GlyphTypeface glyphTypeface);
    public static bool IsRestrictedFont(FontEmbeddingRight fsType);
    public void SetSubsetCommitPolicy(FontSubsetterCommitPolicies policy);
    public void SetSubsetCommitCountPolicy(int commitCount);
    private FEMCacheItem AcquireCacheItem(GlyphTypeface glyphTypeface);
}
internal class System.Windows.Xps.Serialization.XpsImageSerializationService : object {
    public BitmapEncoder GetEncoder(BitmapSource bitmapSource);
    public bool IsSupportedMimeType(BitmapSource bitmapSource);
    public bool VerifyImageSourceSerializability(BitmapSource bitmapSource);
    public Stream SerializeToStream(BitmapSource bitmapSource);
}
internal class System.Windows.Xps.Serialization.XpsOMDocumentPageSerializer : ReachSerializer {
    private XpsOMSerializationManager _xpsOMSerializationManager;
    public XmlWriter XmlWriter { get; public set; }
    public XpsOMDocumentPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal void Initialize();
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal ReachTreeWalker BeginSerializeDocumentPage(SerializableObjectContext serializableObjectContext);
    internal void EndSerializeDocumentPage(ReachTreeWalker treeWalker);
    internal void SerializeChild(Visual child, SerializableObjectContext parentContext);
    private void WriteAttribute(XmlWriter writer, string name, object value);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.XpsOMDocumentPageSerializerAsync : ReachSerializerAsync {
    private XpsOMSerializationManagerAsync _xpsOMSerializationManagerAsync;
    private XpsOMDocumentPageSerializer _syncSerializer;
    public XmlWriter XmlWriter { get; public set; }
    public XpsOMDocumentPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.XpsOMDocumentPaginatorSerializer : ReachSerializer {
    private XpsOMSerializationManager _xpsOMSerializationManager;
    public XpsOMDocumentPaginatorSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal SerializableObjectContext SerializeObjectInternal(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal DocumentPaginator BeginPersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.XpsOMDocumentPaginatorSerializerAsync : ReachSerializerAsync {
    private XpsOMSerializationManagerAsync _xpsOMSerializationManagerAsync;
    private XpsOMDocumentPaginatorSerializer _syncSerializer;
    public XpsOMDocumentPaginatorSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    private void SerializeNextDocumentPage(ReachSerializerContext context);
}
internal class System.Windows.Xps.Serialization.XpsOMDocumentSequenceSerializer : ReachSerializer {
    private XpsOMSerializationManager _xpsOMSerializationManager;
    public XpsOMDocumentSequenceSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void BeginPersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.XpsOMDocumentSequenceSerializerAsync : ReachSerializerAsync {
    private XpsOMSerializationManagerAsync _xpsOMSerializationManagerAsync;
    private XpsOMDocumentSequenceSerializer _syncSerializer;
    public XpsOMDocumentSequenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.XpsOMFixedDocumentSerializer : ReachSerializer {
    private XpsOMSerializationManager _xpsOMSerializationManager;
    public XpsOMFixedDocumentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal void Initialize();
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void BeginPersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.XpsOMFixedDocumentSerializerAsync : ReachSerializerAsync {
    private XpsOMSerializationManagerAsync _xpsOMSerializationManagerAsync;
    private XpsOMFixedDocumentSerializer _syncSerializer;
    public XpsOMFixedDocumentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.XpsOMFixedPageSerializer : ReachSerializer {
    private XpsOMSerializationManager _xpsOMSerializationManager;
    public XmlWriter XmlWriter { get; public set; }
    public XpsOMFixedPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal void Initialize();
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal bool BeginPersistObjectData(SerializableObjectContext serializableObjectContext, ReachTreeWalker& treeWalker);
    internal void EndPersistObjectData(bool needEndVisual, ReachTreeWalker treeWalker);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    private string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    private bool SerializePageAsVisual(Visual fixedPageAsVisual);
}
internal class System.Windows.Xps.Serialization.XpsOMFixedPageSerializerAsync : ReachSerializerAsync {
    private XpsOMSerializationManagerAsync _xpsOMSerializationManagerAsync;
    private XpsOMFixedPageSerializer _syncSerializer;
    public XmlWriter XmlWriter { get; public set; }
    public XpsOMFixedPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.XpsOMHierarchySimulator : ReachHierarchySimulator {
    private XpsOMSerializationManager _xpsOMSerializationManager;
    public XpsOMHierarchySimulator(XpsOMSerializationManager manager, object serializedObject);
    internal virtual XmlWriter SimulateBeginFixedDocumentSequence();
    internal virtual void SimulateEndFixedDocumentSequence(XmlWriter xmlWriter);
    internal virtual XmlWriter SimulateBeginFixedDocument();
    internal virtual void SimulateEndFixedDocument(XmlWriter xmlWriter);
}
internal class System.Windows.Xps.Serialization.XpsOMSerializationManager : PackageSerializationManager {
    private XpsOMPackagingPolicy _packagingPolicy;
    private bool _isBatchMode;
    private XpsOMHierarchySimulator _simulator;
    private bool _isSimulating;
    private int _currentDocumentSequenceWriterRef;
    private int _currentFixedDocumentWriterRef;
    private int _currentFixedPageWriterRef;
    private int _documentNumber;
    private int _pageNumber;
    private bool _documentStartState;
    private bool _pageStartState;
    private PrintTicket _fixedPagePrintTicket;
    private Size _fixedPageSize;
    private XpsResourcePolicy _resourcePolicy;
    private ReachSerializationServices _reachSerializationServices;
    private VisualSerializationService _visualSerializationService;
    [CompilerGeneratedAttribute]
private XpsSerializationPrintTicketRequiredEventHandler XpsSerializationPrintTicketRequired;
    [CompilerGeneratedAttribute]
private XpsSerializationProgressChangedEventHandler XpsSerializationProgressChanged;
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    private PrintTicket System.Windows.Xps.Serialization.IXpsSerializationManager.FixedPagePrintTicket { get; private set; }
    private Size System.Windows.Xps.Serialization.IXpsSerializationManager.FixedPageSize { get; private set; }
    private VisualSerializationService System.Windows.Xps.Serialization.IXpsSerializationManager.VisualSerializationService { get; }
    internal PrintTicket FixedPagePrintTicket { get; internal set; }
    internal Size FixedPageSize { get; internal set; }
    internal VisualSerializationService VisualSerializationService { get; }
    internal XpsOMHierarchySimulator Simulator { get; internal set; }
    internal bool IsSimulating { get; internal set; }
    internal bool IsBatchMode { get; }
    public XpsOMSerializationManager(XpsOMPackagingPolicy xpsOMManager, bool batchMode);
    public virtual void SaveAsXaml(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type serializedObjectType);
    internal virtual bool CanSerializeDependencyProperty(object serializableObject, TypeDependencyPropertyCache dependencyProperty);
    internal virtual bool CanSerializeClrProperty(object serializableObject, TypePropertyCache property);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal void signalReleaseToFontService(Type writerType);
    internal void ReleaseXpsOMWriterForFixedDocumentSequence();
    internal void ReleaseXpsOMWriterForFixedDocument();
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    private void SetFontSubsettingPolicy(FontSubsetterCommitPolicies policy);
    internal virtual void Commit();
    private void SetFontSubsettingCountPolicy(int countPolicy);
    private int DecrementRefCntByType(Type writerType);
    internal void EnsureXpsOMPackageWriter();
    internal void StartNewDocument();
    internal void OnXPSSerializationPrintTicketRequired(object operationState);
    internal void OnXPSSerializationProgressChanged(object operationState);
    internal void RegisterPageStart();
    internal void RegisterPageEnd();
    internal void RegisterDocumentSequenceStart();
    internal void RegisterDocumentSequenceEnd();
    internal void RegisterDocumentStart();
    internal void RegisterDocumentEnd();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.OnXPSSerializationPrintTicketRequired(object operationState);
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.OnXPSSerializationProgressChanged(object operationState);
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.RegisterPageStart();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.RegisterPageEnd();
    private sealed virtual override PrintTicket System.Windows.Xps.Serialization.IXpsSerializationManager.get_FixedPagePrintTicket();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.set_FixedPagePrintTicket(PrintTicket value);
    private sealed virtual override Size System.Windows.Xps.Serialization.IXpsSerializationManager.get_FixedPageSize();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.set_FixedPageSize(Size value);
    private sealed virtual override VisualSerializationService System.Windows.Xps.Serialization.IXpsSerializationManager.get_VisualSerializationService();
    internal PrintTicket get_FixedPagePrintTicket();
    internal void set_FixedPagePrintTicket(PrintTicket value);
    internal Size get_FixedPageSize();
    internal void set_FixedPageSize(Size value);
    internal VisualSerializationService get_VisualSerializationService();
    internal XpsOMHierarchySimulator get_Simulator();
    internal void set_Simulator(XpsOMHierarchySimulator value);
    internal bool get_IsSimulating();
    internal void set_IsSimulating(bool value);
    internal bool get_IsBatchMode();
    [CompilerGeneratedAttribute]
internal void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
}
internal class System.Windows.Xps.Serialization.XpsOMSerializationManagerAsync : XpsOMSerializationManager {
    [CompilerGeneratedAttribute]
private XpsSerializationCompletedEventHandler XpsSerializationCompleted;
    private Dispatcher _dispatcher;
    private bool _serializationOperationCanceled;
    private XmlWriter _currentPageXmlWriter;
    private bool _isBatchWorkItemInProgress;
    private Stack _operationStack;
    private Queue _batchOperationQueue;
    internal Stack OperationStack { get; }
    private Stack System.Windows.Xps.Serialization.IXpsSerializationManagerAsync.OperationStack { get; }
    public XpsOMSerializationManagerAsync(XpsOMPackagingPolicy packagingPolicy, bool batchMode);
    public virtual void SaveAsXaml(object serializedObject);
    internal object InvokeSaveAsXamlWorkItem(object arg);
    internal object InvokeSaveAsXamlBatchWorkItem(object arg);
    public void CancelAsync();
    internal virtual void Commit();
    internal virtual Type GetSerializerType(Type objectType);
    internal Stack get_OperationStack();
    private sealed virtual override Stack System.Windows.Xps.Serialization.IXpsSerializationManagerAsync.get_OperationStack();
    private void PostSerializationTask(DispatcherOperationCallback taskItem);
    private void PostSerializationTask(DispatcherOperationCallback taskItem, object arg);
    private void XPSSerializationCompletionMethod();
    private object OnXPSSerializationCompleted(object operationState);
    private void WaitForPendingAsyncItems();
    private bool IsAsyncWorkPending();
    [CompilerGeneratedAttribute]
public void add_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
}
public class System.Windows.Xps.Serialization.XpsPackagingPolicy : BasePackagingPolicy {
    private XpsDocument _reachPackage;
    private XpsInterleavingPolicy _interleavingPolicy;
    private IXpsFixedDocumentSequenceWriter _currentFixedDocumentSequenceWriter;
    private IXpsFixedDocumentWriter _currentFixedDocumentWriter;
    private IXpsFixedPageWriter _currentFixedPageWriter;
    private int _currentDocumentSequenceWriterRef;
    private int _currentFixedDocumentWriterRef;
    private int _currentFixedPageWriterRef;
    private XmlWriter _currentDSWriter;
    private XmlWriter _currentFDWriter;
    private XmlWriter _currentFPWriter;
    private XpsFont _currentXpsFont;
    private XpsImage _currentXpsImage;
    private XpsColorContext _currentXpsColorContext;
    private XpsResourceDictionary _currentXpsResourceDictionary;
    private int _currentXpsFontRef;
    private int _currentXpsImageRef;
    private int _currentXpsColorContextRef;
    private int _currentXpsResourceDictionaryRef;
    private XpsResourceStream _fontResourceStream;
    private XpsResourceStream _imageResourceStream;
    private XpsResourceStream _colorContextResourceStream;
    private XpsResourceStream _resourceDictionaryResourceStream;
    private ResourceAcquireMode _fontAcquireMode;
    private Hashtable _fontsCache;
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    internal XpsInterleavingPolicy InterleavingPolicy { get; }
    public XpsPackagingPolicy(XpsDocument xpsPackage);
    public XpsPackagingPolicy(XpsDocument xpsPackage, PackageInterleavingOrder interleavingType);
    public virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public virtual void ReleaseXmlWriterForFixedDocument();
    public virtual XmlWriter AcquireXmlWriterForFixedPage();
    public virtual void ReleaseXmlWriterForFixedPage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public virtual void ReleaseResourceStreamForXpsFont();
    public virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public virtual void ReleaseResourceStreamForXpsImage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public virtual void ReleaseResourceStreamForXpsColorContext();
    public virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public virtual void PersistPrintTicket(PrintTicket printTicket);
    public virtual XmlWriter AcquireXmlWriterForPage();
    public virtual void PreCommitCurrentPage();
    public virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public virtual IList`1<string> AcquireStreamForLinkTargets();
    public virtual Uri get_CurrentFixedDocumentUri();
    public virtual Uri get_CurrentFixedPageUri();
    public void add_PackagingProgressEvent(PackagingProgressEventHandler value);
    public void remove_PackagingProgressEvent(PackagingProgressEventHandler value);
    internal XpsInterleavingPolicy get_InterleavingPolicy();
    private void Initialize();
    private void InitializeResourceReferences();
}
public class System.Windows.Xps.Serialization.XpsResourceStream : object {
    private Stream _stream;
    private Uri _uri;
    public Stream Stream { get; }
    public Uri Uri { get; }
    public XpsResourceStream(Stream stream, Uri uri);
    public Stream get_Stream();
    public Uri get_Uri();
    public void Initialize();
}
public class System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs : AsyncCompletedEventArgs {
    public XpsSerializationCompletedEventArgs(bool canceled, object state, Exception exception);
}
public class System.Windows.Xps.Serialization.XpsSerializationCompletedEventHandler : MulticastDelegate {
    public XpsSerializationCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializationManager : PackageSerializationManager {
    [CompilerGeneratedAttribute]
private XpsSerializationPrintTicketRequiredEventHandler XpsSerializationPrintTicketRequired;
    [CompilerGeneratedAttribute]
private XpsSerializationProgressChangedEventHandler XpsSerializationProgressChanged;
    [CompilerGeneratedAttribute]
private XpsSerializationPrintTicketRequiredEventHandler XpsSerializationPrintTicketRequiredOnXpsDriverDocEvent;
    [CompilerGeneratedAttribute]
private XpsSerializationXpsDriverDocEventHandler XpsSerializationXpsDriverDocEvent;
    private BasePackagingPolicy _packagingPolicy;
    private XpsResourcePolicy _resourcePolicy;
    private ReachSerializationServices _reachSerializationServices;
    private VisualSerializationService _visualSerializationService;
    private bool _isBatchMode;
    private bool _isSimulating;
    private ReachHierarchySimulator _simulator;
    private int _currentDocumentSequenceWriterRef;
    private int _currentFixedDocumentWriterRef;
    private int _currentFixedPageWriterRef;
    private int _documentNumber;
    private int _pageNumber;
    private bool _documentStartState;
    private bool _pageStartState;
    private PrintTicket _fixedPagePrintTicket;
    private Size _fixedPageSize;
    private XpsDriverDocEventManager _xpsDocEventManager;
    internal static string NullString;
    internal static string TypeOfString;
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal ReachHierarchySimulator Simulator { get; internal set; }
    internal bool IsSimulating { get; internal set; }
    public bool IsBatchMode { get; }
    private VisualSerializationService System.Windows.Xps.Serialization.IXpsSerializationManager.VisualSerializationService { get; }
    private PrintTicket System.Windows.Xps.Serialization.IXpsSerializationManager.FixedPagePrintTicket { get; private set; }
    private Size System.Windows.Xps.Serialization.IXpsSerializationManager.FixedPageSize { get; private set; }
    public XpsSerializationManager(BasePackagingPolicy packagingPolicy, bool batchMode);
    public virtual void SaveAsXaml(object serializedObject);
    public virtual void Commit();
    public void SetFontSubsettingPolicy(FontSubsetterCommitPolicies policy);
    public void SetFontSubsettingCountPolicy(int countPolicy);
    [CompilerGeneratedAttribute]
public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_XpsSerializationPrintTicketRequiredOnXpsDriverDocEvent(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_XpsSerializationPrintTicketRequiredOnXpsDriverDocEvent(XpsSerializationPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_XpsSerializationXpsDriverDocEvent(XpsSerializationXpsDriverDocEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_XpsSerializationXpsDriverDocEvent(XpsSerializationXpsDriverDocEventHandler value);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type serializedObjectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    private int GetTypeRefCnt(Type writerType);
    private int DecrementRefCntByType(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual bool CanSerializeDependencyProperty(object serializableObject, TypeDependencyPropertyCache dependencyProperty);
    internal static bool CanSerializeDependencyProperty(object serializableObject, TypeDependencyPropertyCache dependencyProperty, ReachSerializationServices reachSerializationServices);
    internal virtual bool CanSerializeClrProperty(object serializableObject, TypePropertyCache property);
    internal static bool CanSerializeClrProperty(object serializableObject, TypePropertyCache property, ReachSerializationServices reachSerializationServices);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal void RegisterDocumentStart();
    internal void RegisterDocumentEnd();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.RegisterPageStart();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.RegisterPageEnd();
    internal void RegisterDocumentSequenceStart();
    internal void RegisterDocumentSequenceEnd();
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal ReachHierarchySimulator get_Simulator();
    internal void set_Simulator(ReachHierarchySimulator value);
    internal bool get_IsSimulating();
    internal void set_IsSimulating(bool value);
    public bool get_IsBatchMode();
    private sealed virtual override VisualSerializationService System.Windows.Xps.Serialization.IXpsSerializationManager.get_VisualSerializationService();
    private sealed virtual override PrintTicket System.Windows.Xps.Serialization.IXpsSerializationManager.get_FixedPagePrintTicket();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.set_FixedPagePrintTicket(PrintTicket value);
    private sealed virtual override Size System.Windows.Xps.Serialization.IXpsSerializationManager.get_FixedPageSize();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.set_FixedPageSize(Size value);
    internal bool IsSerializedObjectTypeSupported(object serializedObject);
    internal static bool IsSerializedObjectTypeSupported(object serializedObject, bool isBatchMode);
    internal XpsDriverDocEventManager GetXpsDriverDocEventManager();
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.OnXPSSerializationPrintTicketRequired(object operationState);
    private sealed virtual override void System.Windows.Xps.Serialization.IXpsSerializationManager.OnXPSSerializationProgressChanged(object operationState);
    internal void OnXpsDriverDocEvent(XpsSerializationXpsDriverDocEventArgs e);
}
public class System.Windows.Xps.Serialization.XpsSerializationManagerAsync : XpsSerializationManager {
    [CompilerGeneratedAttribute]
private XpsSerializationCompletedEventHandler XpsSerializationCompleted;
    [CompilerGeneratedAttribute]
private XpsSerializationCompletedEventHandler XpsSerializationCompletedInternal;
    private Dispatcher _dispatcher;
    private Stack _operationStack;
    private Queue _batchOperationQueue;
    private bool _serializationOperationCanceled;
    private XmlWriter _currentPageXmlWriter;
    private bool _isBatchWorkItemInProgress;
    private Stack System.Windows.Xps.Serialization.IXpsSerializationManagerAsync.OperationStack { get; }
    public XpsSerializationManagerAsync(BasePackagingPolicy packagingPolicy, bool batchMode);
    public virtual void SaveAsXaml(object serializedObject);
    internal object InvokeSaveAsXamlWorkItem(object arg);
    internal object InvokeSaveAsXamlBatchWorkItem(object arg);
    public void CancelAsync();
    public virtual void Commit();
    [CompilerGeneratedAttribute]
public void add_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_XpsSerializationCompletedInternal(XpsSerializationCompletedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_XpsSerializationCompletedInternal(XpsSerializationCompletedEventHandler value);
    internal virtual Type GetSerializerType(Type objectType);
    private sealed virtual override Stack System.Windows.Xps.Serialization.IXpsSerializationManagerAsync.get_OperationStack();
    private void PostSerializationTask(DispatcherOperationCallback taskItem);
    private void PostSerializationTask(DispatcherOperationCallback taskItem, object arg);
    private void XPSSerializationCompletionMethod();
    private object OnXPSSerializationCompleted(object operationState);
    private void WaitForPendingAsyncItems();
    private bool IsAsyncWorkPending();
}
public class System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs : EventArgs {
    private int _sequence;
    private bool _modified;
    private PrintTicket _printTicket;
    private PrintTicketLevel _level;
    public PrintTicket PrintTicket { get; public set; }
    public PrintTicketLevel PrintTicketLevel { get; }
    internal bool Modified { get; internal set; }
    public int Sequence { get; }
    public XpsSerializationPrintTicketRequiredEventArgs(PrintTicketLevel printTicketLevel, int sequence);
    public void set_PrintTicket(PrintTicket value);
    public PrintTicket get_PrintTicket();
    public PrintTicketLevel get_PrintTicketLevel();
    internal void set_Modified(bool value);
    internal bool get_Modified();
    public int get_Sequence();
}
public class System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventHandler : MulticastDelegate {
    public XpsSerializationPrintTicketRequiredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationPrintTicketRequiredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationPrintTicketRequiredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs : ProgressChangedEventArgs {
    private int _pageNumber;
    private XpsWritingProgressChangeLevel _writingLevel;
    public XpsWritingProgressChangeLevel WritingLevel { get; }
    public int PageNumber { get; }
    public XpsSerializationProgressChangedEventArgs(XpsWritingProgressChangeLevel writingLevel, int pageNumber, int progressPercentage, object userToken);
    public XpsWritingProgressChangeLevel get_WritingLevel();
    public int get_PageNumber();
}
public class System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventHandler : MulticastDelegate {
    public XpsSerializationProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Xps.Serialization.XpsSerializationXpsDriverDocEventArgs : EventArgs {
    private XpsDocumentEventType _documentEvent;
    private int _currentCount;
    private PrintTicket _printTicket;
    private bool _modified;
    public int CurrentCount { get; }
    public PrintTicket PrintTicket { get; public set; }
    public XpsDocumentEventType DocumentEvent { get; }
    internal bool Modified { get; }
    public XpsSerializationXpsDriverDocEventArgs(XpsDocumentEventType documentEvent, int currentCount, PrintTicket printTicket);
    public int get_CurrentCount();
    public void set_PrintTicket(PrintTicket value);
    public PrintTicket get_PrintTicket();
    public XpsDocumentEventType get_DocumentEvent();
    internal bool get_Modified();
}
internal class System.Windows.Xps.Serialization.XpsSerializationXpsDriverDocEventHandler : MulticastDelegate {
    public XpsSerializationXpsDriverDocEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationXpsDriverDocEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationXpsDriverDocEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializerFactory : object {
    public string DisplayName { get; }
    public string ManufacturerName { get; }
    public Uri ManufacturerWebsite { get; }
    public string DefaultFileExtension { get; }
    public sealed virtual SerializerWriter CreateSerializerWriter(Stream stream);
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_ManufacturerName();
    public sealed virtual Uri get_ManufacturerWebsite();
    public sealed virtual string get_DefaultFileExtension();
}
internal class System.Windows.Xps.Serialization.XpsSerializerWriter : SerializerWriter {
    [CompilerGeneratedAttribute]
private WritingPrintTicketRequiredEventHandler WritingPrintTicketRequired;
    [CompilerGeneratedAttribute]
private WritingProgressChangedEventHandler WritingProgressChanged;
    [CompilerGeneratedAttribute]
private WritingCompletedEventHandler WritingCompleted;
    [CompilerGeneratedAttribute]
private WritingCancelledEventHandler WritingCancelled;
    private Package _package;
    private XpsDocument _xpsDocument;
    private XpsDocumentWriter _xpsDocumentWriter;
    public XpsSerializerWriter(Stream stream);
    public virtual void Write(Visual visual);
    public virtual void Write(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual, object userState);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userState);
    public virtual void Write(DocumentPaginator paginator);
    public virtual void Write(DocumentPaginator paginator, PrintTicket printTicket);
    public virtual void WriteAsync(DocumentPaginator paginator);
    public virtual void WriteAsync(DocumentPaginator paginator, PrintTicket printTicket);
    public virtual void WriteAsync(DocumentPaginator paginator, object userState);
    public virtual void WriteAsync(DocumentPaginator paginator, PrintTicket printTicket, object userState);
    public virtual void Write(FixedPage fixedPage);
    public virtual void Write(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void WriteAsync(FixedPage fixedPage);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void WriteAsync(FixedPage fixedPage, object Async);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket, object Async);
    public virtual void Write(FixedDocument fixedDocument);
    public virtual void Write(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocument fixedDocument);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocument fixedDocument, object userState);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket, object userState);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, object userState);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket, object userState);
    public virtual void CancelAsync();
    public virtual SerializerWriterCollator CreateVisualsCollator();
    public virtual SerializerWriterCollator CreateVisualsCollator(PrintTicket documentSequencePT, PrintTicket documentPT);
    [CompilerGeneratedAttribute]
public virtual void add_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_WritingProgressChanged(WritingProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_WritingProgressChanged(WritingProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_WritingCompleted(WritingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_WritingCompleted(WritingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_WritingCancelled(WritingCancelledEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_WritingCancelled(WritingCancelledEventHandler value);
    private void xsw_WritingPrintTicketRequired(object sender, WritingPrintTicketRequiredEventArgs e);
    private void xsw_WritingProgressChanged(object sender, WritingProgressChangedEventArgs e);
    private void xsw_WritingCompleted(object sender, WritingCompletedEventArgs e);
    private void xsw_WritingCancelled(object sender, WritingCancelledEventArgs e);
    private void CheckDisposed();
    private void FinalizeWriter();
}
internal class System.Windows.Xps.Serialization.XpsTokenContext : object {
    private PackageSerializationManager serializationManager;
    private object targetObject;
    private object objectValue;
    private PropertyInfo propertyInfo;
    private DependencyProperty dependencyProperty;
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyInfo PropertyInfo { get; }
    public DependencyProperty DependencyProperty { get; }
    public object TargetObject { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public XpsTokenContext(PackageSerializationManager serializationManager, SerializablePropertyContext propertyContext);
    public XpsTokenContext(PackageSerializationManager serializationManager, object targetObject, object objectValue);
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public PropertyInfo get_PropertyInfo();
    public DependencyProperty get_DependencyProperty();
    public object get_TargetObject();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
}
public enum System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel : Enum {
    public int value__;
    public static XpsWritingProgressChangeLevel None;
    public static XpsWritingProgressChangeLevel FixedDocumentSequenceWritingProgress;
    public static XpsWritingProgressChangeLevel FixedDocumentWritingProgress;
    public static XpsWritingProgressChangeLevel FixedPageWritingProgress;
}
internal static class System.Windows.Xps.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Converter_ConvertFromNotSupported { get; }
    internal static string Converter_ConvertToNotSupported { get; }
    internal static string MustBeOfType { get; }
    internal static string PTProvider_InvalidDevModeBytes { get; }
    internal static string PTProvider_VerifyAccess { get; }
    internal static string ReachPackaging_AlreadyHasRootSequenceOrDocument { get; }
    internal static string ReachPackaging_AlreadyHasStartingPart { get; }
    internal static string ReachPackaging_AlreadyHasThumbnail { get; }
    internal static string ReachPackaging_CannotModifyReadOnlyContainer { get; }
    internal static string ReachPackaging_CommitCountPolicyLessThan1 { get; }
    internal static string ReachPackaging_DependantsNotCommitted { get; }
    internal static string ReachPackaging_DocumentWasClosed { get; }
    internal static string ReachPackaging_InvalidContentType { get; }
    internal static string ReachPackaging_InvalidDocUri { get; }
    internal static string ReachPackaging_InvalidStartingPart { get; }
    internal static string ReachPackaging_InvalidType { get; }
    internal static string ReachPackaging_MoreThanOneDocStructure { get; }
    internal static string ReachPackaging_MoreThanOneMetaDataParts { get; }
    internal static string ReachPackaging_MoreThanOnePrintTicketPart { get; }
    internal static string ReachPackaging_MoreThanOneSigDefParts { get; }
    internal static string ReachPackaging_MoreThanOneSigOriginParts { get; }
    internal static string ReachPackaging_MoreThanOneStartingParts { get; }
    internal static string ReachPackaging_MoreThanOneStoryFragment { get; }
    internal static string ReachPackaging_MoreThanOneThumbnailPart { get; }
    internal static string ReachPackaging_NotAFixedDocument { get; }
    internal static string ReachPackaging_NotAFixedDocumentSequence { get; }
    internal static string ReachPackaging_NotAFixedPage { get; }
    internal static string ReachPackaging_NotAPrintTicket { get; }
    internal static string ReachPackaging_NotOpenForReading { get; }
    internal static string ReachPackaging_NotSignatureDefinitionElement { get; }
    internal static string ReachPackaging_NotValidSignatureDefinitionAttribute { get; }
    internal static string ReachPackaging_NotValidSignatureDefinitionElement { get; }
    internal static string ReachPackaging_ObfucatedFontNeedGuid { get; }
    internal static string ReachPackaging_OnlyWriters { get; }
    internal static string ReachPackaging_OpenDocOrElementAlreadyCalled { get; }
    internal static string ReachPackaging_PackageUriNull { get; }
    internal static string ReachPackaging_PanelOrSequenceAlreadyOpen { get; }
    internal static string ReachPackaging_PartFromDifferentContainer { get; }
    internal static string ReachPackaging_PartNotFound { get; }
    internal static string ReachPackaging_PrintTicketAlreadyCommitted { get; }
    internal static string ReachPackaging_SequenceCntMustBe1 { get; }
    internal static string ReachPackaging_ServiceTypeAlreadyAdded { get; }
    internal static string ReachPackaging_SigningDoesNotMeetPolicy { get; }
    internal static string ReachPackaging_SpotIDRequiredAttribute { get; }
    internal static string ReachPackaging_UnsupportedImageType { get; }
    internal static string ReachPackaging_UnsupportedThumbnailImageType { get; }
    internal static string ReachSerializationAsync_NoNgcType { get; }
    internal static string ReachSerializationAsync_NoType { get; }
    internal static string ReachSerialization_CannotReleaseXmlWriter { get; }
    internal static string ReachSerialization_CycleDetectedInSerialization { get; }
    internal static string ReachSerialization_ExpectedFixedDocument { get; }
    internal static string ReachSerialization_ExpectedFixedDocumentSequence { get; }
    internal static string ReachSerialization_ExpectedFixedPage { get; }
    internal static string ReachSerialization_FixedDocumentInDocument { get; }
    internal static string ReachSerialization_FixedDocumentInPage { get; }
    internal static string ReachSerialization_FixedPageInPage { get; }
    internal static string ReachSerialization_MustHaveSerializationManager { get; }
    internal static string ReachSerialization_NoFixedDocuments { get; }
    internal static string ReachSerialization_NoFixedPages { get; }
    internal static string ReachSerialization_NoFixedPageWriter { get; }
    internal static string ReachSerialization_NoFontService { get; }
    internal static string ReachSerialization_NoImageService { get; }
    internal static string ReachSerialization_NoSerializer { get; }
    internal static string ReachSerialization_NotSupported { get; }
    internal static string ReachSerialization_NotXpsSerializationManagerAsync { get; }
    internal static string ReachSerialization_TargetNotPrintTicket { get; }
    internal static string ReachSerialization_UnableToInstantiateSerializer { get; }
    internal static string ReachSerialization_WrongPackagingPolicy { get; }
    internal static string ReachSerialization_WrongPropertyTypeForFixedDocument { get; }
    internal static string ReachSerialization_WrongPropertyTypeForFixedPage { get; }
    internal static string ReachSerialization_WrongPropertyTypeForPageContent { get; }
    internal static string XpsSerializerFactory_DisplayName { get; }
    internal static string XpsSerializerFactory_ManufacturerName { get; }
    internal static string XpsSerializerFactory_ManufacturerWebsite { get; }
    internal static string XpsSerializerFactory_WriterIsClosed { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Converter_ConvertFromNotSupported();
    internal static string get_Converter_ConvertToNotSupported();
    internal static string get_MustBeOfType();
    internal static string get_PTProvider_InvalidDevModeBytes();
    internal static string get_PTProvider_VerifyAccess();
    internal static string get_ReachPackaging_AlreadyHasRootSequenceOrDocument();
    internal static string get_ReachPackaging_AlreadyHasStartingPart();
    internal static string get_ReachPackaging_AlreadyHasThumbnail();
    internal static string get_ReachPackaging_CannotModifyReadOnlyContainer();
    internal static string get_ReachPackaging_CommitCountPolicyLessThan1();
    internal static string get_ReachPackaging_DependantsNotCommitted();
    internal static string get_ReachPackaging_DocumentWasClosed();
    internal static string get_ReachPackaging_InvalidContentType();
    internal static string get_ReachPackaging_InvalidDocUri();
    internal static string get_ReachPackaging_InvalidStartingPart();
    internal static string get_ReachPackaging_InvalidType();
    internal static string get_ReachPackaging_MoreThanOneDocStructure();
    internal static string get_ReachPackaging_MoreThanOneMetaDataParts();
    internal static string get_ReachPackaging_MoreThanOnePrintTicketPart();
    internal static string get_ReachPackaging_MoreThanOneSigDefParts();
    internal static string get_ReachPackaging_MoreThanOneSigOriginParts();
    internal static string get_ReachPackaging_MoreThanOneStartingParts();
    internal static string get_ReachPackaging_MoreThanOneStoryFragment();
    internal static string get_ReachPackaging_MoreThanOneThumbnailPart();
    internal static string get_ReachPackaging_NotAFixedDocument();
    internal static string get_ReachPackaging_NotAFixedDocumentSequence();
    internal static string get_ReachPackaging_NotAFixedPage();
    internal static string get_ReachPackaging_NotAPrintTicket();
    internal static string get_ReachPackaging_NotOpenForReading();
    internal static string get_ReachPackaging_NotSignatureDefinitionElement();
    internal static string get_ReachPackaging_NotValidSignatureDefinitionAttribute();
    internal static string get_ReachPackaging_NotValidSignatureDefinitionElement();
    internal static string get_ReachPackaging_ObfucatedFontNeedGuid();
    internal static string get_ReachPackaging_OnlyWriters();
    internal static string get_ReachPackaging_OpenDocOrElementAlreadyCalled();
    internal static string get_ReachPackaging_PackageUriNull();
    internal static string get_ReachPackaging_PanelOrSequenceAlreadyOpen();
    internal static string get_ReachPackaging_PartFromDifferentContainer();
    internal static string get_ReachPackaging_PartNotFound();
    internal static string get_ReachPackaging_PrintTicketAlreadyCommitted();
    internal static string get_ReachPackaging_SequenceCntMustBe1();
    internal static string get_ReachPackaging_ServiceTypeAlreadyAdded();
    internal static string get_ReachPackaging_SigningDoesNotMeetPolicy();
    internal static string get_ReachPackaging_SpotIDRequiredAttribute();
    internal static string get_ReachPackaging_UnsupportedImageType();
    internal static string get_ReachPackaging_UnsupportedThumbnailImageType();
    internal static string get_ReachSerializationAsync_NoNgcType();
    internal static string get_ReachSerializationAsync_NoType();
    internal static string get_ReachSerialization_CannotReleaseXmlWriter();
    internal static string get_ReachSerialization_CycleDetectedInSerialization();
    internal static string get_ReachSerialization_ExpectedFixedDocument();
    internal static string get_ReachSerialization_ExpectedFixedDocumentSequence();
    internal static string get_ReachSerialization_ExpectedFixedPage();
    internal static string get_ReachSerialization_FixedDocumentInDocument();
    internal static string get_ReachSerialization_FixedDocumentInPage();
    internal static string get_ReachSerialization_FixedPageInPage();
    internal static string get_ReachSerialization_MustHaveSerializationManager();
    internal static string get_ReachSerialization_NoFixedDocuments();
    internal static string get_ReachSerialization_NoFixedPages();
    internal static string get_ReachSerialization_NoFixedPageWriter();
    internal static string get_ReachSerialization_NoFontService();
    internal static string get_ReachSerialization_NoImageService();
    internal static string get_ReachSerialization_NoSerializer();
    internal static string get_ReachSerialization_NotSupported();
    internal static string get_ReachSerialization_NotXpsSerializationManagerAsync();
    internal static string get_ReachSerialization_TargetNotPrintTicket();
    internal static string get_ReachSerialization_UnableToInstantiateSerializer();
    internal static string get_ReachSerialization_WrongPackagingPolicy();
    internal static string get_ReachSerialization_WrongPropertyTypeForFixedDocument();
    internal static string get_ReachSerialization_WrongPropertyTypeForFixedPage();
    internal static string get_ReachSerialization_WrongPropertyTypeForPageContent();
    internal static string get_XpsSerializerFactory_DisplayName();
    internal static string get_XpsSerializerFactory_ManufacturerName();
    internal static string get_XpsSerializerFactory_ManufacturerWebsite();
    internal static string get_XpsSerializerFactory_WriterIsClosed();
}
public class System.Windows.Xps.XpsException : Exception {
    public XpsException(string message);
    public XpsException(string message, Exception innerException);
    protected XpsException(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Xps.XpsPackagingException : XpsException {
    public XpsPackagingException(string message);
    public XpsPackagingException(string message, Exception innerException);
    protected XpsPackagingException(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Xps.XpsSerializationException : XpsException {
    public XpsSerializationException(string message);
    public XpsSerializationException(string message, Exception innerException);
    protected XpsSerializationException(SerializationInfo info, StreamingContext context);
}
