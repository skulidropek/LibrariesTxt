internal static class FxResources.System.Windows.Controls.Ribbon.SR : object {
}
internal static class Microsoft.Windows.Controls.PropertyHelper : object {
    private static WeakHashtable _propertyTransferEnabledMap;
    private static PropertyHelper();
    public static bool IsDefaultValue(DependencyObject d, DependencyProperty dp);
    public static object GetCoercedTransferPropertyValue(DependencyObject baseObject, object baseValue, DependencyProperty baseProperty, DependencyObject parentObject, DependencyProperty parentProperty);
    public static object GetCoercedTransferPropertyValue(DependencyObject baseObject, object baseValue, DependencyProperty baseProperty, DependencyObject parentObject, DependencyProperty parentProperty, DependencyObject grandParentObject, DependencyProperty grandParentProperty);
    public static void TransferProperty(DependencyObject d, DependencyProperty p);
    private static Dictionary`2<DependencyProperty, bool> GetPropertyTransferEnabledMapForObject(DependencyObject d);
    internal static bool IsPropertyTransferEnabled(DependencyObject d, DependencyProperty p);
}
internal static class Microsoft.Windows.Controls.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ElementNotKeyTipScope { get; }
    internal static string InRibbonGallery_ScrollDownButtonAutomationName { get; }
    internal static string InRibbonGallery_ScrollUpButtonAutomationName { get; }
    internal static string InvalidApplicationMenuOrItemContainer { get; }
    internal static string InvalidCtorParameterNoInfinityForStarSize { get; }
    internal static string InvalidCtorParameterNoNaN { get; }
    internal static string InvalidCtorParameterUnknownRibbonControlLengthUnitType { get; }
    internal static string InvalidKeyTipOffset { get; }
    internal static string InvalidMenuButtonOrItemContainer { get; }
    internal static string QATKeyTipCharacters { get; }
    internal static string ResizeParametersNotValid { get; }
    internal static string RibbonContextMenu_AddGalleryToQAT { get; }
    internal static string RibbonContextMenu_AddToQAT { get; }
    internal static string RibbonContextMenu_MaximizeTheRibbon { get; }
    internal static string RibbonContextMenu_MinimizeTheRibbon { get; }
    internal static string RibbonContextMenu_RemoveFromQAT { get; }
    internal static string RibbonContextMenu_ShowQATAbove { get; }
    internal static string RibbonContextMenu_ShowQATBelow { get; }
    internal static string RibbonGallery_AllFilter { get; }
    internal static string RibbonGroupsPanel_InvalidRegistrationParameter { get; }
    internal static string RibbonQuickAccessToolBar_OverflowButtonToolTip { get; }
    internal static string RibbonWindow_ExtendUnShownGlass { get; }
    internal static string Ribbon_ContextualTabHeadersSourceInvalid { get; }
    internal static string SetFocusFailed { get; }
    internal static string UIA_OperationCannotBePerformed { get; }
    internal static string VirtualizedElement { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ElementNotKeyTipScope();
    internal static string get_InRibbonGallery_ScrollDownButtonAutomationName();
    internal static string get_InRibbonGallery_ScrollUpButtonAutomationName();
    internal static string get_InvalidApplicationMenuOrItemContainer();
    internal static string get_InvalidCtorParameterNoInfinityForStarSize();
    internal static string get_InvalidCtorParameterNoNaN();
    internal static string get_InvalidCtorParameterUnknownRibbonControlLengthUnitType();
    internal static string get_InvalidKeyTipOffset();
    internal static string get_InvalidMenuButtonOrItemContainer();
    internal static string get_QATKeyTipCharacters();
    internal static string get_ResizeParametersNotValid();
    internal static string get_RibbonContextMenu_AddGalleryToQAT();
    internal static string get_RibbonContextMenu_AddToQAT();
    internal static string get_RibbonContextMenu_MaximizeTheRibbon();
    internal static string get_RibbonContextMenu_MinimizeTheRibbon();
    internal static string get_RibbonContextMenu_RemoveFromQAT();
    internal static string get_RibbonContextMenu_ShowQATAbove();
    internal static string get_RibbonContextMenu_ShowQATBelow();
    internal static string get_RibbonGallery_AllFilter();
    internal static string get_RibbonGroupsPanel_InvalidRegistrationParameter();
    internal static string get_RibbonQuickAccessToolBar_OverflowButtonToolTip();
    internal static string get_RibbonWindow_ExtendUnShownGlass();
    internal static string get_Ribbon_ContextualTabHeadersSourceInvalid();
    internal static string get_SetFocusFailed();
    internal static string get_UIA_OperationCannotBePerformed();
    internal static string get_VirtualizedElement();
}
internal static class Microsoft.Windows.Controls.TreeHelper : object {
    private static DependencyObject GetVisualParent(DependencyObject element, bool includeContentElements);
    public static DependencyObject GetParent(DependencyObject element);
    public static T FindTemplatedAncestor(FrameworkElement element);
    public static T FindVisualAncestor(DependencyObject element);
    public static DependencyObject FindVisualAncestor(DependencyObject element, Predicate`1<DependencyObject> predicate);
    public static T FindLogicalAncestor(DependencyObject element);
    public static DependencyObject FindAncestor(DependencyObject element, Predicate`1<DependencyObject> predicate);
    public static DependencyObject FindRoot(DependencyObject element);
    public static DependencyObject FindVisualRoot(DependencyObject element);
    public static void InvalidateMeasureForVisualAncestorPath(DependencyObject pathStart);
    public static void InvalidateMeasureForVisualAncestorPath(DependencyObject pathStart, bool includePathEnd);
    public static void InvalidateMeasureForVisualAncestorPath(DependencyObject pathStart, Predicate`1<DependencyObject> predicate);
    public static bool IsVisualAncestorOf(DependencyObject ancestor, DependencyObject descendant);
}
internal static class Microsoft.Windows.Input.CommandHelpers : object {
    internal static void InvokeCommandSource(object parameter, object previewParameter, ICommandSource commandSource, CommandOperation operation);
    internal static bool CanExecuteCommandSource(object parameter, ICommandSource commandSource);
}
internal enum Microsoft.Windows.Input.CommandOperation : Enum {
    public int value__;
    public static CommandOperation Preview;
    public static CommandOperation CancelPreview;
    public static CommandOperation Execute;
}
public interface Microsoft.Windows.Input.IPreviewCommand {
    public abstract virtual void Preview(object parameter);
    public abstract virtual void CancelPreview();
}
public interface Microsoft.Windows.Input.IPreviewCommandSource {
    public object PreviewCommandParameter { get; }
    public abstract virtual object get_PreviewCommandParameter();
}
internal static class MS.Internal.DoubleUtil : object {
    internal static double DBL_EPSILON;
    internal static float FLT_MIN;
    public static bool AreClose(double value1, double value2);
    public static bool LessThan(double value1, double value2);
    public static bool GreaterThan(double value1, double value2);
    public static bool LessThanOrClose(double value1, double value2);
    public static bool GreaterThanOrClose(double value1, double value2);
    public static bool IsOne(double value);
    public static bool IsZero(double value);
    public static bool AreClose(Size size1, Size size2);
    public static bool AreClose(Vector vector1, Vector vector2);
    public static int DoubleToInt(double val);
}
public class System.Windows.Automation.Peers.RibbonApplicationMenuAutomationPeer : RibbonMenuButtonAutomationPeer {
    public RibbonApplicationMenuAutomationPeer(RibbonApplicationMenu owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
public class System.Windows.Automation.Peers.RibbonAutomationPeer : SelectorAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    public ExpandCollapseState ExpandCollapseState { get; }
    private Ribbon OwningRibbon { get; }
    public RibbonAutomationPeer(Ribbon owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual void SetFocusCore();
    protected virtual bool IsOffscreenCore();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    private Ribbon get_OwningRibbon();
    internal void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue);
}
public class System.Windows.Automation.Peers.RibbonButtonAutomationPeer : ButtonAutomationPeer {
    public RibbonButtonAutomationPeer(RibbonButton owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonCheckBoxAutomationPeer : CheckBoxAutomationPeer {
    public RibbonCheckBoxAutomationPeer(RibbonCheckBox owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonComboBoxAutomationPeer : RibbonMenuButtonAutomationPeer {
    public bool IsReadOnly { get; }
    public string Value { get; }
    private RibbonComboBox OwningComboBox { get; }
    public RibbonComboBoxAutomationPeer(RibbonComboBox owner);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual void SetFocusCore();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void SetValue(string value);
    public sealed virtual string get_Value();
    internal void RaiseValuePropertyChangedEvent(string oldValue, string newValue);
    private RibbonComboBox get_OwningComboBox();
}
public class System.Windows.Automation.Peers.RibbonContextMenuAutomationPeer : ItemsControlAutomationPeer {
    public RibbonContextMenuAutomationPeer(RibbonContextMenu owner);
    protected virtual string GetClassNameCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
}
public class System.Windows.Automation.Peers.RibbonContextualTabGroupAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonContextualTabGroupAutomationPeer(RibbonContextualTabGroup owner);
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonContextualTabGroupDataAutomationPeer : ItemAutomationPeer {
    public RibbonContextualTabGroupDataAutomationPeer(object item, RibbonContextualTabGroupItemsControlAutomationPeer owner);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonContextualTabGroupItemsControlAutomationPeer : ItemsControlAutomationPeer {
    public RibbonContextualTabGroupItemsControlAutomationPeer(RibbonContextualTabGroupItemsControl owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonControlAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonControlAutomationPeer(FrameworkElement owner);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonControlDataAutomationPeer : ItemAutomationPeer {
    public RibbonControlDataAutomationPeer(object item, ItemsControlAutomationPeer itemsControlPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonControlGroupAutomationPeer : ItemsControlAutomationPeer {
    public RibbonControlGroupAutomationPeer(RibbonControlGroup owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
}
public class System.Windows.Automation.Peers.RibbonGalleryAutomationPeer : ItemsControlAutomationPeer {
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public RibbonGalleryAutomationPeer(RibbonGallery owner);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
}
public class System.Windows.Automation.Peers.RibbonGalleryCategoryAutomationPeer : ItemsControlAutomationPeer {
    public RibbonGalleryCategoryAutomationPeer(RibbonGalleryCategory owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonGalleryCategoryDataAutomationPeer : ItemAutomationPeer {
    public RibbonGalleryCategoryDataAutomationPeer(object owner, ItemsControlAutomationPeer itemsControlAutomationPeer);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
}
public class System.Windows.Automation.Peers.RibbonGalleryItemAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonGalleryItemAutomationPeer(RibbonGalleryItem owner);
    protected virtual string GetClassNameCore();
    protected virtual string GetAccessKeyCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    internal void RaiseAutomationIsSelectedChanged(bool isSelected);
    internal void RaiseAutomationSelectionEvent(AutomationEvents eventId);
}
public class System.Windows.Automation.Peers.RibbonGalleryItemDataAutomationPeer : ItemAutomationPeer {
    private RibbonGalleryCategoryDataAutomationPeer _parentCategoryDataAutomationPeer;
    public RibbonGalleryCategoryDataAutomationPeer ParentCategoryDataAutomationPeer { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public RibbonGalleryItemDataAutomationPeer(object owner, ItemsControlAutomationPeer itemsControlAutomationPeer, RibbonGalleryCategoryDataAutomationPeer parentCategoryDataAutomationPeer);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    public RibbonGalleryCategoryDataAutomationPeer get_ParentCategoryDataAutomationPeer();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
}
public class System.Windows.Automation.Peers.RibbonGroupAutomationPeer : ItemsControlAutomationPeer {
    private RibbonGroupHeaderAutomationPeer _headerPeer;
    private RibbonGroup OwningGroup { get; }
    private RibbonGroupHeaderAutomationPeer HeaderPeer { get; }
    public RibbonGroupAutomationPeer(RibbonGroup owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual void SetFocusCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    private RibbonGroup get_OwningGroup();
    private RibbonGroupHeaderAutomationPeer get_HeaderPeer();
    internal void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue);
}
public class System.Windows.Automation.Peers.RibbonGroupDataAutomationPeer : ItemAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public RibbonGroupDataAutomationPeer(object item, RibbonTabAutomationPeer itemsControlPeer);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
}
public class System.Windows.Automation.Peers.RibbonGroupHeaderAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonGroupHeaderAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonMenuButtonAutomationPeer : ItemsControlAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    private RibbonMenuButton OwningMenuButton { get; }
    public RibbonMenuButtonAutomationPeer(RibbonMenuButton owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
    internal void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue);
    private RibbonMenuButton get_OwningMenuButton();
}
public class System.Windows.Automation.Peers.RibbonMenuItemAutomationPeer : ItemsControlAutomationPeer {
    public RibbonMenuItemAutomationPeer(RibbonMenuItem owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    internal void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue);
    internal void RaiseToggleStatePropertyChangedEvent(bool oldValue, bool newValue);
    private static ToggleState ConvertToToggleState(bool value);
}
public class System.Windows.Automation.Peers.RibbonMenuItemDataAutomationPeer : ItemAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanMove { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanResize { get; }
    private bool System.Windows.Automation.Provider.ITransformProvider.CanRotate { get; }
    public RibbonMenuItemDataAutomationPeer(object item, ItemsControlAutomationPeer itemsControlPeer);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanMove();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanResize();
    private sealed virtual override bool System.Windows.Automation.Provider.ITransformProvider.get_CanRotate();
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Move(double x, double y);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Resize(double width, double height);
    private sealed virtual override void System.Windows.Automation.Provider.ITransformProvider.Rotate(double degrees);
}
public class System.Windows.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer : ItemsControlAutomationPeer {
    private RibbonQuickAccessToolBar OwningToolBar { get; }
    public ExpandCollapseState ExpandCollapseState { get; }
    public RibbonQuickAccessToolBarAutomationPeer(RibbonQuickAccessToolBar owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    internal void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue);
    private RibbonQuickAccessToolBar get_OwningToolBar();
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
}
public class System.Windows.Automation.Peers.RibbonRadioButtonAutomationPeer : RadioButtonAutomationPeer {
    public RibbonRadioButtonAutomationPeer(RibbonRadioButton owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonSeparatorAutomationPeer : SeparatorAutomationPeer {
    public RibbonSeparatorAutomationPeer(RibbonSeparator owner);
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonSplitButtonAutomationPeer : RibbonMenuButtonAutomationPeer {
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    private RibbonSplitButton OwningSplitButton { get; }
    public RibbonSplitButtonAutomationPeer(RibbonSplitButton owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    internal void RaiseToggleStatePropertyChangedEvent(bool oldValue, bool newValue);
    internal void RaiseInvokeAutomationEvent();
    private static ToggleState ConvertToToggleState(bool value);
    private RibbonSplitButton get_OwningSplitButton();
}
public class System.Windows.Automation.Peers.RibbonTabAutomationPeer : ItemsControlAutomationPeer {
    private RibbonTab OwningTab { get; }
    private RibbonTabHeaderDataAutomationPeer HeaderPeer { get; }
    public RibbonTabAutomationPeer(RibbonTab owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    internal virtual Rect GetVisibleBoundingRectCore();
    private RibbonTab get_OwningTab();
    private RibbonTabHeaderDataAutomationPeer get_HeaderPeer();
    internal void RaiseTabExpandCollapseAutomationEvent(bool oldValue, bool newValue);
    internal void RaiseTabSelectionEvents();
}
public class System.Windows.Automation.Peers.RibbonTabDataAutomationPeer : SelectorItemAutomationPeer {
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    public RibbonTabDataAutomationPeer(object item, RibbonAutomationPeer itemsControlPeer);
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonTabHeaderAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonTabHeaderAutomationPeer(RibbonTabHeader owner);
    protected virtual string GetClassNameCore();
}
public class System.Windows.Automation.Peers.RibbonTabHeaderDataAutomationPeer : ItemAutomationPeer {
    public RibbonTabHeaderDataAutomationPeer(object item, RibbonTabHeaderItemsControlAutomationPeer itemsControlPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
public class System.Windows.Automation.Peers.RibbonTabHeaderItemsControlAutomationPeer : ItemsControlAutomationPeer {
    public RibbonTabHeaderItemsControlAutomationPeer(RibbonTabHeaderItemsControl owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
public class System.Windows.Automation.Peers.RibbonTextBoxAutomationPeer : TextBoxAutomationPeer {
    public RibbonTextBoxAutomationPeer(RibbonTextBox owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetAcceleratorKeyCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    [CompilerGeneratedAttribute]
private object <System.Windows.Automation.Provider.IInvokeProvider.Invoke>b__7_0(object param);
}
public class System.Windows.Automation.Peers.RibbonTitleAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonTitleAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonToggleButtonAutomationPeer : ToggleButtonAutomationPeer {
    public RibbonToggleButtonAutomationPeer(RibbonToggleButton owner);
    protected virtual string GetAccessKeyCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class System.Windows.Automation.Peers.RibbonToolTipAutomationPeer : ToolTipAutomationPeer {
    public RibbonToolTipAutomationPeer(RibbonToolTip owner);
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Automation.Peers.RibbonTwoLineTextAutomationPeer : FrameworkElementAutomationPeer {
    public RibbonTwoLineTextAutomationPeer(RibbonTwoLineText owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsControlElementCore();
    protected virtual string GetNameCore();
}
public class System.Windows.Controls.ActivatingKeyTipEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private KeyTipHorizontalPlacement <KeyTipHorizontalPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyTipVerticalPlacement <KeyTipVerticalPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <PlacementTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private Visibility <KeyTipVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private RibbonGroup <OwnerRibbonGroup>k__BackingField;
    private double _horizontalOffset;
    private double _verticalOffset;
    public KeyTipHorizontalPlacement KeyTipHorizontalPlacement { get; public set; }
    public KeyTipVerticalPlacement KeyTipVerticalPlacement { get; public set; }
    public UIElement PlacementTarget { get; public set; }
    public double KeyTipHorizontalOffset { get; public set; }
    public double KeyTipVerticalOffset { get; public set; }
    public Visibility KeyTipVisibility { get; public set; }
    internal RibbonGroup OwnerRibbonGroup { get; internal set; }
    [CompilerGeneratedAttribute]
public KeyTipHorizontalPlacement get_KeyTipHorizontalPlacement();
    [CompilerGeneratedAttribute]
public void set_KeyTipHorizontalPlacement(KeyTipHorizontalPlacement value);
    [CompilerGeneratedAttribute]
public KeyTipVerticalPlacement get_KeyTipVerticalPlacement();
    [CompilerGeneratedAttribute]
public void set_KeyTipVerticalPlacement(KeyTipVerticalPlacement value);
    [CompilerGeneratedAttribute]
public UIElement get_PlacementTarget();
    [CompilerGeneratedAttribute]
public void set_PlacementTarget(UIElement value);
    public double get_KeyTipHorizontalOffset();
    public void set_KeyTipHorizontalOffset(double value);
    public double get_KeyTipVerticalOffset();
    public void set_KeyTipVerticalOffset(double value);
    [CompilerGeneratedAttribute]
public Visibility get_KeyTipVisibility();
    [CompilerGeneratedAttribute]
public void set_KeyTipVisibility(Visibility value);
    [CompilerGeneratedAttribute]
internal RibbonGroup get_OwnerRibbonGroup();
    [CompilerGeneratedAttribute]
internal void set_OwnerRibbonGroup(RibbonGroup value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.ActivatingKeyTipEventHandler : MulticastDelegate {
    public ActivatingKeyTipEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ActivatingKeyTipEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActivatingKeyTipEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Windows.Controls.AssemblyHelper : object {
    public static bool IsXmlNode(object item);
}
public class System.Windows.Controls.KeyTipAccessedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private DependencyObject <TargetKeyTipScope>k__BackingField;
    public DependencyObject TargetKeyTipScope { get; public set; }
    [CompilerGeneratedAttribute]
public DependencyObject get_TargetKeyTipScope();
    [CompilerGeneratedAttribute]
public void set_TargetKeyTipScope(DependencyObject value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.KeyTipAccessedEventHandler : MulticastDelegate {
    public KeyTipAccessedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KeyTipAccessedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KeyTipAccessedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Controls.KeyTipAdorner : Adorner {
    [CompilerGeneratedAttribute]
private KeyTipHorizontalPlacement <HorizontalPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyTipVerticalPlacement <VerticalPlacement>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HorizontalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <PlacementTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private RibbonGroup <OwnerRibbonGroup>k__BackingField;
    private KeyTipControl _keyTipControl;
    private TranslateTransform _keyTipTransform;
    private static double RibbonGroupKeyTipAxisNudgeSpace;
    private static double RibbonGroupKeyTipAxisOffset;
    protected int VisualChildrenCount { get; }
    public KeyTipControl KeyTipControl { get; }
    private KeyTipHorizontalPlacement HorizontalPlacement { get; private set; }
    private KeyTipVerticalPlacement VerticalPlacement { get; private set; }
    private double HorizontalOffset { get; private set; }
    private double VerticalOffset { get; private set; }
    private UIElement PlacementTarget { get; private set; }
    private RibbonGroup OwnerRibbonGroup { get; private set; }
    public KeyTipAdorner(UIElement adornedElement, UIElement placementTarget, KeyTipHorizontalPlacement horizontalPlacement, KeyTipVerticalPlacement verticalPlacement, double horizontalOffset, double verticalOffset, RibbonGroup ownerRibbonGroup);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    public void LinkKeyTipControl(DependencyObject keyTipElement, KeyTipControl keyTipControl);
    public void UnlinkKeyTipControl();
    public KeyTipControl get_KeyTipControl();
    [CompilerGeneratedAttribute]
private KeyTipHorizontalPlacement get_HorizontalPlacement();
    [CompilerGeneratedAttribute]
private void set_HorizontalPlacement(KeyTipHorizontalPlacement value);
    [CompilerGeneratedAttribute]
private KeyTipVerticalPlacement get_VerticalPlacement();
    [CompilerGeneratedAttribute]
private void set_VerticalPlacement(KeyTipVerticalPlacement value);
    [CompilerGeneratedAttribute]
private double get_HorizontalOffset();
    [CompilerGeneratedAttribute]
private void set_HorizontalOffset(double value);
    [CompilerGeneratedAttribute]
private double get_VerticalOffset();
    [CompilerGeneratedAttribute]
private void set_VerticalOffset(double value);
    [CompilerGeneratedAttribute]
private UIElement get_PlacementTarget();
    [CompilerGeneratedAttribute]
private void set_PlacementTarget(UIElement value);
    [CompilerGeneratedAttribute]
private RibbonGroup get_OwnerRibbonGroup();
    [CompilerGeneratedAttribute]
private void set_OwnerRibbonGroup(RibbonGroup value);
    internal void OnKeyTipControlSizeChanged(SizeChangedEventArgs e);
    private void EnsureTransform();
    private void EnsureTransformX();
    private void EnsureTransformY();
    private double NudgeToRibbonGroupAxis(UIElement placementTarget, double verticalPosition);
    internal void NudgeIntoAdornerLayerBoundary(AdornerLayer adornerLayer);
}
public class System.Windows.Controls.KeyTipControl : Control {
    [CompilerGeneratedAttribute]
private KeyTipAdorner <KeyTipAdorner>k__BackingField;
    public static DependencyProperty TextProperty;
    internal KeyTipAdorner KeyTipAdorner { get; internal set; }
    public string Text { get; public set; }
    private static KeyTipControl();
    [CompilerGeneratedAttribute]
internal KeyTipAdorner get_KeyTipAdorner();
    [CompilerGeneratedAttribute]
internal void set_KeyTipAdorner(KeyTipAdorner value);
    private static void OnSizeChanged(object sender, SizeChangedEventArgs e);
    public string get_Text();
    public void set_Text(string value);
}
public enum System.Windows.Controls.KeyTipHorizontalPlacement : Enum {
    public int value__;
    public static KeyTipHorizontalPlacement KeyTipLeftAtTargetLeft;
    public static KeyTipHorizontalPlacement KeyTipLeftAtTargetCenter;
    public static KeyTipHorizontalPlacement KeyTipLeftAtTargetRight;
    public static KeyTipHorizontalPlacement KeyTipCenterAtTargetLeft;
    public static KeyTipHorizontalPlacement KeyTipCenterAtTargetCenter;
    public static KeyTipHorizontalPlacement KeyTipCenterAtTargetRight;
    public static KeyTipHorizontalPlacement KeyTipRightAtTargetLeft;
    public static KeyTipHorizontalPlacement KeyTipRightAtTargetCenter;
    public static KeyTipHorizontalPlacement KeyTipRightAtTargetRight;
}
public class System.Windows.Controls.KeyTipService : object {
    public static DependencyProperty KeyTipProperty;
    public static DependencyProperty IsKeyTipScopeProperty;
    public static DependencyProperty KeyTipStyleProperty;
    private static DependencyPropertyKey KeyTipScopePropertyKey;
    internal static DependencyProperty CustomSiblingKeyTipElementsProperty;
    private static DependencyProperty KeyTipAutoGenerationElementsProperty;
    [CompilerGeneratedAttribute]
private KeyTipState <State>k__BackingField;
    private static DependencyProperty CanClipKeyTipProperty;
    private static DependencyProperty KeyTipAdornerProperty;
    private static DependencyProperty KeyTipAdornerHolderProperty;
    private static DependencyProperty ShowingKeyTipProperty;
    public static RoutedEvent ActivatingKeyTipEvent;
    public static RoutedEvent PreviewKeyTipAccessedEvent;
    public static RoutedEvent KeyTipAccessedEvent;
    [ThreadStaticAttribute]
private static KeyTipService _current;
    private WeakHashSet`1<DependencyObject> _toBeScopedElements;
    private WeakDictionary`2<DependencyObject, bool> _unprocessedScopes;
    private WeakDictionary`2<DependencyObject, WeakHashSet`1<DependencyObject>> _scopeToElementMap;
    private List`1<WeakReference> _keyTipEnterFocusHandlers;
    private List`1<WeakReference> _keyTipExitRestoreFocusHandlers;
    private bool _adornerLayerPlacementProcessingQueued;
    private List`1<AdornerLayer> _placementProcessingAdornerLayers;
    private DependencyObject _currentGlobalScope;
    private Window _currentWindow;
    private DispatcherTimer _showKeyTipsTimer;
    private bool _focusRibbonOnKeyTipKeyUp;
    private Key _modeEnterKey;
    private Key _probableModeEnterKey;
    private string _prefixText;
    private List`1<DependencyObject> _currentActiveKeyTipElements;
    private Stack`1<DependencyObject> _scopeStack;
    private List`1<KeyTipControl> _cachedKeyTipControls;
    private Dictionary`2<XmlLanguage, CultureInfo> _cultureCache;
    private WeakHashSet`1<DependencyObject> _keyTipAutoGeneratedElements;
    private int _nextAutoGenerationIndex;
    private string _autoGenerationKeyTipPrefix;
    private static int ShowKeyTipsWaitTime;
    private static int NonZeroDigitCount;
    private static string QatKeyTipCharacters;
    internal KeyTipState State { get; private set; }
    private static bool IsAltPressed { get; }
    internal static KeyTipService Current { get; }
    private static KeyTipService();
    public static string GetKeyTip(DependencyObject element);
    public static void SetKeyTip(DependencyObject element, string value);
    private static void OnKeyTipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetIsKeyTipScope(DependencyObject element);
    public static void SetIsKeyTipScope(DependencyObject element, bool value);
    private static void OnIsKeyTipScopeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static Style GetKeyTipStyle(DependencyObject element);
    public static void SetKeyTipStyle(DependencyObject element, Style value);
    private static void OnKeyTipScopeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void HookKeyTipElementEventHandlers(DependencyObject element);
    private static void UnhookKeyTipElementEventHandlers(DependencyObject element);
    private static void RegisterKeyTipElement(DependencyObject element);
    private static void UnregisterKeyTipElement(DependencyObject element);
    private static bool CanUnregisterKeyTipElement(DependencyObject element);
    private static void OnKeyTipElementLoaded(object sender, RoutedEventArgs e);
    private static void OnKeyTipElementUnLoaded(object sender, RoutedEventArgs e);
    private static void AddElementForKeyTipScoping(DependencyObject element);
    private static void ProcessKeyTipScopeChange(DependencyObject scopeElement, bool newIsScope);
    private void ProcessScoping();
    private static void AddItemToArrayListRef(object item, ArrayList& list);
    private void ReevaluateScopes(DependencyObject scopedParent, Dictionary`2<DependencyObject, bool> processedElements);
    private static void AddElementToScope(DependencyObject scopedParent, DependencyObject element);
    private static DependencyObject FindScope(DependencyObject element);
    private static DependencyObject FindScope(DependencyObject element, bool searchVisualTreeOnly);
    internal static IEnumerable`1<DependencyObject> GetCustomSiblingKeyTipElements(DependencyObject element);
    internal static void SetCustomSiblingKeyTipElements(DependencyObject element, IEnumerable`1<DependencyObject> value);
    private static void OnCustomSiblingKeyTipElementsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal static IEnumerable`1<DependencyObject> GetKeyTipAutoGenerationElements(DependencyObject obj);
    internal static void SetKeyTipAutoGenerationElements(DependencyObject obj, IEnumerable`1<DependencyObject> value);
    private static void OnKeyTipAutoGenerationElementsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static bool IsAutoGeneratedKeyTip(string keyTip);
    private string GetNextAutoGenerationKeyTip(DependencyObject targetAutoGenerationScope);
    private void AutoGenerateKeyTips(WeakHashSet`1<DependencyObject> currentScopeElements);
    private void ResetAutoGeneratedKeyTips();
    [CompilerGeneratedAttribute]
internal KeyTipState get_State();
    [CompilerGeneratedAttribute]
private void set_State(KeyTipState value);
    private static bool IsKeyTipKey(KeyEventArgs e);
    private static bool IsKeyTipClosingKey(KeyEventArgs e);
    private void PreProcessInput(object sender, PreProcessInputEventArgs e);
    private void PostProcessInput(object sender, ProcessInputEventArgs e);
    private void OnPreviewKeyDown(KeyEventArgs keyArgs);
    private void OnKeyTipKeyDown(KeyEventArgs keyArgs);
    private void OnPreviewKeyTipKeyUp(KeyEventArgs keyArgs);
    private void OnEscapeKeyDown(KeyEventArgs keyArgs);
    private void OnPreviewTextInput(TextCompositionEventArgs textArgs);
    private List`1<DependencyObject> FindKeyTipMatches(string text, DependencyObject& exactMatchElement);
    internal static CultureInfo GetCultureForElement(DependencyObject element);
    private void OnKeyTipExactMatch(DependencyObject exactMatchElement);
    private void OnKeyTipPartialMatch(List`1<DependencyObject> activeKeyTipElements, string text);
    private void OnWindowDeactivated(object sender, EventArgs e);
    private void OnWindowLocationChanged(object sender, EventArgs e);
    private void OnWindowSizeChanged(object sender, SizeChangedEventArgs e);
    private DependencyObject GetGlobalScopeForElement(DependencyObject element);
    private bool EnterKeyTipMode(DependencyObject scope, bool showKeyTips, bool showAsync);
    private void StartShowKeyTipsTimer();
    private void ShowKeyTips();
    private bool ShowKeyTipsForScope(DependencyObject scopeElement);
    private bool ShowKeyTipsForScope(DependencyObject scopeElement, bool pushOnEmpty);
    private void PopKeyTipScope();
    private void HideCurrentShowingKeyTips();
    private void Reset();
    private void LeaveKeyTipMode();
    private void LeaveKeyTipMode(bool restoreFocus);
    private static bool get_IsAltPressed();
    internal static bool GetCanClipKeyTip(DependencyObject element);
    internal static void SetCanClipKeyTip(DependencyObject element, bool value);
    private static AdornerLayer GetAdornerLayer(Visual visual, Boolean& isScrollAdornerLayer);
    private static void OnShowingKeyTipChanged(DependencyObject element, DependencyPropertyChangedEventArgs e);
    private void EnqueueAdornerLayerForPlacementProcessing(AdornerLayer adornerLayer);
    private bool ShowKeyTipForElement(DependencyObject element);
    private static void HideKeyTipForElement(DependencyObject element);
    private static void LinkKeyTipControlToAdorner(KeyTipAdorner adorner, DependencyObject keyTipElement);
    private static void UnlinkKeyTipControlFromAdorner(KeyTipAdorner adorner);
    public static void AddActivatingKeyTipHandler(DependencyObject element, ActivatingKeyTipEventHandler handler);
    public static void RemoveActivatingKeyTipHandler(DependencyObject element, ActivatingKeyTipEventHandler handler);
    public static void AddPreviewKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void RemovePreviewKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void AddKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    public static void RemoveKeyTipAccessedHandler(DependencyObject element, KeyTipAccessedEventHandler handler);
    internal void add_KeyTipEnterFocus(KeyTipFocusEventHandler value);
    internal void remove_KeyTipEnterFocus(KeyTipFocusEventHandler value);
    internal void add_KeyTipExitRestoreFocus(KeyTipFocusEventHandler value);
    internal void remove_KeyTipExitRestoreFocus(KeyTipFocusEventHandler value);
    private static void AddKeyTipFocusEventHandler(KeyTipFocusEventHandler handler, List`1& handlerList);
    private static void RemoveKeyTipFocusEventHandler(KeyTipFocusEventHandler handler, List`1<WeakReference> handlerList);
    private static void RaiseKeyTipFocusEvent(object sender, EventArgs e, List`1<WeakReference> handlerList);
    public static void DismissKeyTips();
    internal static KeyTipService get_Current();
    [CompilerGeneratedAttribute]
private void <StartShowKeyTipsTimer>b__64_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <PopKeyTipScope>b__68_0();
    [CompilerGeneratedAttribute]
private void <EnqueueAdornerLayerForPlacementProcessing>b__83_0();
}
public enum System.Windows.Controls.KeyTipVerticalPlacement : Enum {
    public int value__;
    public static KeyTipVerticalPlacement KeyTipTopAtTargetTop;
    public static KeyTipVerticalPlacement KeyTipTopAtTargetCenter;
    public static KeyTipVerticalPlacement KeyTipTopAtTargetBottom;
    public static KeyTipVerticalPlacement KeyTipCenterAtTargetTop;
    public static KeyTipVerticalPlacement KeyTipCenterAtTargetCenter;
    public static KeyTipVerticalPlacement KeyTipCenterAtTargetBottom;
    public static KeyTipVerticalPlacement KeyTipBottomAtTargetTop;
    public static KeyTipVerticalPlacement KeyTipBottomAtTargetCenter;
    public static KeyTipVerticalPlacement KeyTipBottomAtTargetBottom;
}
internal class System.Windows.Controls.ReferentialEqualityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal static class System.Windows.Controls.Ribbon.HandleCollector : object {
    private static HandleType[] handleTypes;
    private static int handleTypeCount;
    private static object handleMutex;
    private static HandleCollector();
    internal static IntPtr Add(IntPtr handle, int type);
    internal static int RegisterType(string typeName, int expense, int initialThreshold);
    internal static IntPtr Remove(IntPtr handle, int type);
}
internal interface System.Windows.Controls.Ribbon.ISyncKeyTipAndContent {
    public bool KeepKeyTipAndContentInSync { get; public set; }
    public bool IsKeyTipSyncSource { get; public set; }
    public bool SyncingKeyTipAndContent { get; public set; }
    public abstract virtual bool get_KeepKeyTipAndContentInSync();
    public abstract virtual void set_KeepKeyTipAndContentInSync(bool value);
    public abstract virtual bool get_IsKeyTipSyncSource();
    public abstract virtual void set_IsKeyTipSyncSource(bool value);
    public abstract virtual bool get_SyncingKeyTipAndContent();
    public abstract virtual void set_SyncingKeyTipAndContent(bool value);
}
internal static class System.Windows.Controls.Ribbon.KeyTipAndContentSyncHelper : object {
    public static void Sync(ISyncKeyTipAndContent syncElement, DependencyProperty contentProperty);
    public static void OnKeyTipChanged(ISyncKeyTipAndContent syncElement, DependencyProperty contentProperty);
    public static object CoerceKeyTip(ISyncKeyTipAndContent syncElement, object baseValue, DependencyProperty contentProperty);
    public static void OnContentPropertyChanged(ISyncKeyTipAndContent syncElement, DependencyProperty contentProperty);
    public static object CoerceContentProperty(ISyncKeyTipAndContent syncElement, object baseValue);
}
internal static class System.Windows.Controls.Ribbon.NativeMethods : object {
    public static int MONITOR_DEFAULTTONEAREST;
    internal static int COMBINE_RGN_OR;
    internal static SWP SWPFlags;
    public static IntPtr MonitorFromRect(RECT& rect, int flags);
    public static bool GetMonitorInfo(HandleRef hmonitor, MONITORINFOEX info);
    public static int GetDoubleClickTime();
    public static int MessageBeep(int uType);
    public static IntPtr GetCapture();
    public static int GetDeviceCaps(HandleRef hDC, int nIndex);
    private static IntPtr IntGetDC(HandleRef hWnd);
    public static IntPtr GetDC(HandleRef hWnd);
    private static int IntReleaseDC(HandleRef hWnd, HandleRef hDC);
    public static int ReleaseDC(HandleRef hWnd, HandleRef hDC);
    internal static RECT FromRect(Rect rect);
    internal static Rect ToRect(RECT rc);
}
internal interface System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager {
    public ISupportStarLayout StarLayoutManager { get; public set; }
    public abstract virtual ISupportStarLayout get_StarLayoutManager();
    public abstract virtual void set_StarLayoutManager(ISupportStarLayout value);
}
public interface System.Windows.Controls.Ribbon.Primitives.IProvideStarLayoutInfo {
    public IEnumerable`1<StarLayoutInfo> StarLayoutCombinations { get; }
    public abstract virtual IEnumerable`1<StarLayoutInfo> get_StarLayoutCombinations();
    public abstract virtual void OnStarSizeAllocationCompleted();
}
public interface System.Windows.Controls.Ribbon.Primitives.IProvideStarLayoutInfoBase {
    public UIElement TargetElement { get; }
    public abstract virtual void OnInitializeLayout();
    public abstract virtual UIElement get_TargetElement();
}
public interface System.Windows.Controls.Ribbon.Primitives.ISupportStarLayout {
    public bool IsStarLayoutPass { get; }
    public abstract virtual void RegisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public abstract virtual void UnregisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public abstract virtual bool get_IsStarLayoutPass();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonContextualTabGroupsPanel : Panel {
    public static DependencyProperty RibbonProperty;
    [CompilerGeneratedAttribute]
private bool <WaitingForMeasure>k__BackingField;
    private Pen _separatorPen;
    private static double _desiredWidthEpsilon;
    public Ribbon Ribbon { get; }
    private RibbonContextualTabGroupItemsControl ParentItemsControl { get; }
    internal bool WaitingForMeasure { get; internal set; }
    private Pen SeparatorPen { get; }
    private static RibbonContextualTabGroupsPanel();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    public Ribbon get_Ribbon();
    private RibbonContextualTabGroupItemsControl get_ParentItemsControl();
    [CompilerGeneratedAttribute]
internal bool get_WaitingForMeasure();
    [CompilerGeneratedAttribute]
internal void set_WaitingForMeasure(bool value);
    private Pen get_SeparatorPen();
    internal void OnNotifyRibbonBorderBrushChanged();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGalleryCategoriesPanel : Panel {
    [CompilerGeneratedAttribute]
private ISupportStarLayout <System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.StarLayoutManager>k__BackingField;
    private ScrollData _scrollData;
    internal double internalScrollDelta;
    internal static double _scrollLineDelta;
    private bool IsScrolling { get; }
    private bool CanMouseWheelVerticallyScroll { get; }
    public UIElement TargetElement { get; }
    private ISupportStarLayout System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.StarLayoutManager { get; private set; }
    [DefaultValueAttribute("False")]
public bool CanHorizontallyScroll { get; public set; }
    [DefaultValueAttribute("True")]
public bool CanVerticallyScroll { get; public set; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    public double ViewportWidth { get; }
    public double ViewportHeight { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double HorizontalOffset { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public double VerticalOffset { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public ScrollViewer ScrollOwner { get; public set; }
    private RibbonGallery Gallery { get; }
    private void OnRibbonGalleryCategoriesPanelUnloaded(object sender, RoutedEventArgs e);
    private void OnRibbonGalleryCategoriesPanelLoaded(object sender, RoutedEventArgs e);
    private void EnsureScrollData();
    private static void ResetScrolling(RibbonGalleryCategoriesPanel element);
    private void OnScrollChange();
    private void VerifyScrollingData(Size viewport, Size extent, Vector offset);
    private static double ComputeScrollOffsetWithMinimalScroll(double topView, double bottomView, double topChild, double bottomChild);
    private static double CoerceOffset(double offset, double extent, double viewport);
    private bool get_IsScrolling();
    private bool get_CanMouseWheelVerticallyScroll();
    protected virtual Size MeasureOverride(Size availableSize);
    private Size AutoPassMeasureOverride();
    private Size RealMeasureOverride(Size constraint);
    private void UpdateScrollingData(Size constraint, Size stackDesiredSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Size RealArrangeOverride(Size finalSize);
    public sealed virtual void OnInitializeLayout();
    public sealed virtual UIElement get_TargetElement();
    [CompilerGeneratedAttribute]
private sealed virtual override ISupportStarLayout System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.get_StarLayoutManager();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.set_StarLayoutManager(ISupportStarLayout value);
    public sealed virtual void LineUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void PageUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    private RibbonGallery get_Gallery();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGalleryItemsPanel : Panel {
    private double _maxColumnWidth;
    private double _arrangeWidth;
    private double _maxRowHeight;
    private bool _isArrangeWidthValid;
    private RibbonGalleryCategory Category { get; }
    private RibbonGallery Gallery { get; }
    private bool SharedColumnSizeScopeAtGalleryLevel { get; }
    internal double MaxColumnWidth { get; private set; }
    internal double MaxRowHeight { get; }
    private bool IsAutoLayoutPass();
    private void AddScrollDeltaInfo(double sumOfHeight, int childrenCount);
    private int GetMinColumnCount();
    private int GetMaxColumnCount();
    private double GetMaxColumnWidth();
    private void SetMaxColumnWidth(double value);
    private double GetArrangeWidth();
    private void SetArrangeWidth(double value);
    protected virtual Size MeasureOverride(Size availableSize);
    private Size RealMeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Size RealArrangeOverride(Size finalSize);
    private RibbonGalleryCategory get_Category();
    private RibbonGallery get_Gallery();
    private bool get_SharedColumnSizeScopeAtGalleryLevel();
    internal double get_MaxColumnWidth();
    private void set_MaxColumnWidth(double value);
    internal double get_MaxRowHeight();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGroupItemsPanel : Panel {
    [CompilerGeneratedAttribute]
private ISupportStarLayout <System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.StarLayoutManager>k__BackingField;
    private List`1<StarLayoutInfo> _starLayoutCombinations;
    private Dictionary`2<int, int> _childIndexToStarLayoutIndexMap;
    public IEnumerable`1<StarLayoutInfo> StarLayoutCombinations { get; }
    public UIElement TargetElement { get; }
    private ISupportStarLayout System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.StarLayoutManager { get; private set; }
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void OnRibbonGroupItemsPanelUnloaded(object sender, RoutedEventArgs e);
    private static double GetStarChildMinWidth(FrameworkElement child, Double& maxStarColumnWidth);
    private static bool IsStarChild(UIElement child);
    private static bool IsStarChild(UIElement child, Double& weight);
    private void CreateStarLayoutCombination(Size constraint, double starWeight, double starMinWidth, double starMaxWidth, List`1<int> starChildIndices);
    private Size NonStarPassMeasure(Size availableSize);
    private Size StarMeasurePass(Size availableSize);
    private void AdjustDesiredWidthForStars(UIElementCollection children, Double& desiredWidth);
    private void AdjustDesiredWidthForStarColumn(UIElementCollection children, List`1<int> columnStarChildren, int starLayoutIndex, Double& desiredWidth);
    private static bool CanChildStretch(UIElement child);
    private static void AddItemToList(T item, List`1& list);
    public sealed virtual IEnumerable`1<StarLayoutInfo> get_StarLayoutCombinations();
    public sealed virtual void OnStarSizeAllocationCompleted();
    public sealed virtual UIElement get_TargetElement();
    public sealed virtual void OnInitializeLayout();
    [CompilerGeneratedAttribute]
private sealed virtual override ISupportStarLayout System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.get_StarLayoutManager();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Controls.Ribbon.Primitives.IContainsStarLayoutManager.set_StarLayoutManager(ISupportStarLayout value);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonGroupsPanel : StackPanel {
    private double _cachedRemainingSpace;
    private WeakHashSet`1<IProvideStarLayoutInfo> _registeredStarLayoutProviders;
    private double _nextGroupIncreaseWidth;
    private int _cachedChildCount;
    private WeakDictionary`2<RibbonGroup, double> _changedWidthGroups;
    private bool _processGroupWidthChangeQueued;
    private static DependencyPropertyKey IsStarLayoutPassPropertyKey;
    public static DependencyProperty IsStarLayoutPassProperty;
    public bool IsStarLayoutPass { get; private set; }
    private RibbonTab ParentRibbonTab { get; }
    private static RibbonGroupsPanel();
    public sealed virtual void RegisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public sealed virtual void UnregisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    internal void InvalidateCachedMeasure();
    internal void OnChildGroupRenderSizeChanged(RibbonGroup group, double originalWidth);
    protected virtual Size MeasureOverride(Size availableSize);
    public sealed virtual bool get_IsStarLayoutPass();
    private void set_IsStarLayoutPass(bool value);
    private RibbonTab get_ParentRibbonTab();
    private double GetChildrenTotalWidth();
    private void InitializeLayoutOnStars();
    private Size BasicMeasure(Size constraint, Double& remainingSpace);
    private Size StarMeasure(Size constraint, Size originalDesiredSize, RibbonTab ribbonTab, Double& remainingSpace);
    private double AllocateStarValues(RibbonGroup ribbonGroup, double remainingSpace);
    private static void EqualizeStarValues(List`1<StarLayoutInfo> starInfoList, Double& remainingSpace, Int32& rightMostEqualizerIndex);
    private static double EqualizeLeftOf(List`1<StarLayoutInfo> starInfoList, int index, bool isChecking);
    private static void DistributeRemainingSpace(List`1<StarLayoutInfo> starInfoList, int distributionCount, Double& remainingSpace);
    private static object CoerceOrientation(DependencyObject d, object baseValue);
    private void ResetNextIncreaseGroupCache();
    [CompilerGeneratedAttribute]
private void <OnChildGroupRenderSizeChanged>b__10_0();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonMenuItemsPanel : VirtualizingStackPanel {
    private bool _isStarLayout;
    private WeakHashSet`1<IProvideStarLayoutInfoBase> _registeredStarLayoutProviders;
    private Size _cachedAutoSize;
    public bool IsStarLayoutPass { get; }
    private ItemsControl ParentItemsControl { get; }
    internal Size CachedAutoSize { get; }
    private static RibbonMenuItemsPanel();
    public sealed virtual void RegisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public sealed virtual void UnregisterStarLayoutProvider(IProvideStarLayoutInfoBase starLayoutInfoProvider);
    public sealed virtual bool get_IsStarLayoutPass();
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void InitializeLayoutOnStars();
    internal void BringIndexIntoViewInternal(int index);
    private HashSet`1<UIElement> GetStarLayoutProviderTargets();
    private ItemsControl get_ParentItemsControl();
    internal Size get_CachedAutoSize();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonQuickAccessToolBarOverflowPanel : Panel {
    private RibbonQuickAccessToolBar QAT { get; }
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private RibbonQuickAccessToolBar get_QAT();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonQuickAccessToolBarPanel : VirtualizingPanel {
    private List`1<UIElement> _generatedChildren;
    internal List`1<UIElement> GeneratedChildren { get; }
    private RibbonQuickAccessToolBar QAT { get; }
    protected virtual void OnItemsChanged(object sender, ItemsChangedEventArgs args);
    private void RemoveItem(int index);
    internal List`1<UIElement> get_GeneratedChildren();
    private void RepopulateGeneratedChildren();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private RibbonQuickAccessToolBar get_QAT();
    [CompilerGeneratedAttribute]
private void <MeasureOverride>b__6_0();
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonScrollButtonVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonTabHeadersPanel : Panel {
    public static DependencyProperty RibbonProperty;
    [CompilerGeneratedAttribute]
private double <SpaceAvailable>k__BackingField;
    private double _separatorOpacity;
    private static double _tabHeaderMinWidth;
    private static double _desiredWidthEpsilon;
    private Pen _separatorPen;
    private ScrollData _scrollData;
    private RibbonTabHeaderItemsControl ParentTabHeaderItemsControl { get; }
    public Ribbon Ribbon { get; }
    private Pen SeparatorPen { get; }
    internal double SpaceAvailable { get; internal set; }
    public ScrollViewer ScrollOwner { get; public set; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double ViewportWidth { get; }
    public bool CanVerticallyScroll { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    private ScrollData ScrollData { get; }
    private static RibbonTabHeadersPanel();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);
    private RibbonTabHeaderItemsControl get_ParentTabHeaderItemsControl();
    public Ribbon get_Ribbon();
    private Pen get_SeparatorPen();
    internal void OnNotifyRibbonBorderBrushChanged();
    private Size InitialMeasure(Size constraint, Double& totalDefaultPaddingAllTabHeaders, Double& totalDefaultPaddingRegularTabHeaders, Double& totalDesiredWidthRegularTabHeaders, Int32& countRegularTabs, Int32& countVisibleTabs);
    private Size FinalMeasure(Size constraint, double reducePaddingContextualTabHeader, double reducePaddingRegularTabHeader, double maxContextualTabHeaderWidth, double maxRegularTabHeaderWidth);
    private double CalculateMaxTabHeaderWidth(double clipWidth, bool forContextualTabs);
    private double CalculateMaxPadding(double spaceAvailable);
    private void NotifyDesiredWidthChanged();
    private void UpdateToolTips(bool showRegularTabHeaderToolTips, bool showContextualTabHeaderToolTips);
    private void ArrangeRegularTabHeaders(Size arrangeSize, Ribbon ribbon, Dictionary`2<object, List`1<RibbonTabHeaderAndIndex>> contextualTabHeaders, Int32& displayIndex, Double& childX);
    private void ArrangeContextualTabHeaders(Size arrangeSize, Ribbon ribbon, Dictionary`2<object, List`1<RibbonTabHeaderAndIndex>> contextualTabHeaders, Int32& displayIndex, Double& childX);
    [CompilerGeneratedAttribute]
internal double get_SpaceAvailable();
    [CompilerGeneratedAttribute]
internal void set_SpaceAvailable(double value);
    private void VerifyScrollData(double viewportWidth, double extentWidth);
    internal static double CoerceOffset(double offset, double extent, double viewport);
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    private void OnScrollChange();
    internal static double ComputeScrollOffsetWithMinimalScroll(double topView, double bottomView, double topChild, double bottomChild);
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    private ScrollData get_ScrollData();
    internal static double ValidateInputOffset(double offset, string parameterName);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonTabsPanel : Panel {
    private Ribbon _ribbon;
    private ScrollData _scrollData;
    private Ribbon Ribbon { get; }
    public ScrollViewer ScrollOwner { get; public set; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double ViewportWidth { get; }
    public bool CanVerticallyScroll { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    private ScrollData ScrollData { get; }
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Ribbon get_Ribbon();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    private void OnScrollChange();
    internal static double ComputeScrollOffsetWithMinimalScroll(double topView, double bottomView, double topChild, double bottomChild);
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void LineDown();
    public sealed virtual void LineUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual void SetVerticalOffset(double offset);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    private ScrollData get_ScrollData();
    internal static double ValidateInputOffset(double offset, string parameterName);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonTitlePanel : Panel {
    public static DependencyProperty RibbonProperty;
    public Ribbon Ribbon { get; }
    private static RibbonTitlePanel();
    public Ribbon get_Ribbon();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private double CalculateContextualTabGroupStartX(RibbonContextualTabGroup groupHeader);
    private double CalculateContextualTabGroupEndX(RibbonContextualTabGroup groupHeader);
}
public class System.Windows.Controls.Ribbon.Primitives.RibbonWindowSmallIconConverter : object {
    private static int s_systemBitDepth;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private ImageSource GetSmallIconImageSource(ImageSource imageSource);
    private static BitmapFrame GetBestMatch(ReadOnlyCollection`1<BitmapFrame> frames, Size size);
    private static int MatchImage(BitmapFrame frame, Size size, int bpp);
    private static int WeightedAbs(int valueHave, int valueWant, bool fPunish);
    private static BitmapSource GenerateBitmapSource(ImageSource img, Size renderSize);
    private static int GetBitDepth();
}
internal class System.Windows.Controls.Ribbon.Primitives.ScrollData : object {
    internal ScrollViewer _scrollOwner;
    internal double _offsetX;
    internal double _viewportWidth;
    internal double _extentWidth;
}
public class System.Windows.Controls.Ribbon.Primitives.StarLayoutInfo : DependencyObject {
    public static DependencyProperty RequestedStarWeightProperty;
    public static DependencyProperty RequestedStarMinWidthProperty;
    public static DependencyProperty RequestedStarMaxWidthProperty;
    public static DependencyProperty AllocatedStarWidthProperty;
    private static PerStarComparerImpl _perStarValueComparer;
    private static PotentialPerStarComparerImpl _potentialPerStarValueComparer;
    public double RequestedStarWeight { get; public set; }
    public double RequestedStarMinWidth { get; public set; }
    public double RequestedStarMaxWidth { get; public set; }
    public double AllocatedStarWidth { get; public set; }
    internal static IComparer`1<StarLayoutInfo> PerStarValueComparer { get; }
    internal static IComparer`1<StarLayoutInfo> PotentialPerStarValueComparer { get; }
    private static StarLayoutInfo();
    public double get_RequestedStarWeight();
    public void set_RequestedStarWeight(double value);
    public double get_RequestedStarMinWidth();
    public void set_RequestedStarMinWidth(double value);
    public double get_RequestedStarMaxWidth();
    public void set_RequestedStarMaxWidth(double value);
    public double get_AllocatedStarWidth();
    public void set_AllocatedStarWidth(double value);
    internal static IComparer`1<StarLayoutInfo> get_PerStarValueComparer();
    internal static IComparer`1<StarLayoutInfo> get_PotentialPerStarValueComparer();
    private static bool ValidateRequestedStarWeight(object value);
    private static void OnRequestedStarMinWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static bool ValidateRequestedStarMinWidth(object value);
    private static object OnCoerceRequestedStarMaxWidth(DependencyObject d, object baseValue);
    private static bool ValidateRequestedStarMaxWidth(object value);
    private static object OnCoerceAllocatedStarWidth(DependencyObject d, object baseValue);
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.Ribbon : Selector {
    private static double CollapseWidth;
    private static double CollapseHeight;
    private bool _selectedTabClicked;
    private Popup _itemsPresenterPopup;
    private RibbonTabHeaderItemsControl _tabHeaderItemsControl;
    private ObservableCollection`1<object> _tabHeaderItemsSource;
    private RibbonContextualTabGroupItemsControl _groupHeaderItemsControl;
    private ObservableCollection`1<RibbonContextualTabGroup> _tabGroupHeaders;
    private Dictionary`2<int, int> _tabIndexToDisplayIndexMap;
    private Dictionary`2<int, int> _tabDisplayIndexToIndexMap;
    private double _mouseWheelCumulativeDelta;
    private static double MouseWheelSelectionChangeThreshold;
    private UIElement _qatTopHost;
    private UIElement _titleHost;
    private UIElement _helpPaneHost;
    private ItemsPresenter _itemsPresenter;
    private bool _inContextMenu;
    private bool _retainFocusOnEscape;
    private KeyTipFocusEventHandler _keyTipEnterFocusHandler;
    private KeyTipFocusEventHandler _keyTipExitRestoreFocusHandler;
    private static string ContextualTabGroupItemsControlTemplateName;
    private static string TitlePanelTemplateName;
    private static string TitleHostTemplateName;
    private static string QatHostTemplateName;
    private static string HelpPaneTemplateName;
    private static string ItemsPresenterPopupTemplateName;
    public static RoutedEvent ExpandedEvent;
    public static RoutedEvent CollapsedEvent;
    public static DependencyProperty WindowIconVisibilityProperty;
    private static DependencyPropertyKey IsHostedInRibbonWindowPropertyKey;
    public static DependencyProperty IsHostedInRibbonWindowProperty;
    public static DependencyProperty ApplicationMenuProperty;
    public static DependencyProperty QuickAccessToolBarProperty;
    public static DependencyProperty HelpPaneContentProperty;
    public static DependencyProperty HelpPaneContentTemplateProperty;
    public static DependencyProperty IsMinimizedProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty TitleTemplateProperty;
    public static DependencyProperty ShowQuickAccessToolBarOnTopProperty;
    public static DependencyProperty ContextualTabGroupsSourceProperty;
    public static DependencyProperty ContextualTabGroupHeaderTemplateProperty;
    public static DependencyProperty ContextualTabGroupStyleProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty TabHeaderStyleProperty;
    public static DependencyProperty TabHeaderTemplateProperty;
    private Window _window;
    [CompilerGeneratedAttribute]
private RibbonTitlePanel <RibbonTitlePanel>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <ContextMenuOriginalSource>k__BackingField;
    public Visibility WindowIconVisibility { get; public set; }
    public bool IsHostedInRibbonWindow { get; private set; }
    public RibbonApplicationMenu ApplicationMenu { get; public set; }
    public RibbonQuickAccessToolBar QuickAccessToolBar { get; public set; }
    public object HelpPaneContent { get; public set; }
    public DataTemplate HelpPaneContentTemplate { get; public set; }
    public bool IsMinimized { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public bool IsCollapsed { get; public set; }
    public object Title { get; public set; }
    public DataTemplate TitleTemplate { get; public set; }
    public bool ShowQuickAccessToolBarOnTop { get; public set; }
    public IEnumerable ContextualTabGroupsSource { get; public set; }
    [BindableAttribute("True")]
public Collection`1<RibbonContextualTabGroup> ContextualTabGroups { get; }
    public DataTemplate ContextualTabGroupHeaderTemplate { get; public set; }
    public Style ContextualTabGroupStyle { get; public set; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Style TabHeaderStyle { get; public set; }
    public DataTemplate TabHeaderTemplate { get; public set; }
    internal RibbonTitlePanel RibbonTitlePanel { get; private set; }
    internal RibbonContextualTabGroupItemsControl ContextualTabGroupItemsControl { get; }
    internal UIElement QatTopHost { get; }
    internal UIElement TitleHost { get; }
    internal UIElement HelpPaneHost { get; }
    internal Dictionary`2<int, int> TabIndexToDisplayIndexMap { get; }
    internal Dictionary`2<int, int> TabDisplayIndexToIndexMap { get; }
    internal RibbonTabHeaderItemsControl RibbonTabHeaderItemsControl { get; }
    internal Popup ItemsPresenterPopup { get; }
    protected internal IEnumerator LogicalChildren { get; }
    private RibbonTabHeader SelectedTabHeader { get; }
    internal UIElement ContextMenuOriginalSource { get; private set; }
    private static Ribbon();
    public void add_Expanded(RoutedEventHandler value);
    public void remove_Expanded(RoutedEventHandler value);
    public void add_Collapsed(RoutedEventHandler value);
    public void remove_Collapsed(RoutedEventHandler value);
    public Visibility get_WindowIconVisibility();
    public void set_WindowIconVisibility(Visibility value);
    public bool get_IsHostedInRibbonWindow();
    private void set_IsHostedInRibbonWindow(bool value);
    public RibbonApplicationMenu get_ApplicationMenu();
    public void set_ApplicationMenu(RibbonApplicationMenu value);
    public RibbonQuickAccessToolBar get_QuickAccessToolBar();
    public void set_QuickAccessToolBar(RibbonQuickAccessToolBar value);
    public object get_HelpPaneContent();
    public void set_HelpPaneContent(object value);
    public DataTemplate get_HelpPaneContentTemplate();
    public void set_HelpPaneContentTemplate(DataTemplate value);
    public bool get_IsMinimized();
    public void set_IsMinimized(bool value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public object get_Title();
    public void set_Title(object value);
    public DataTemplate get_TitleTemplate();
    public void set_TitleTemplate(DataTemplate value);
    public bool get_ShowQuickAccessToolBarOnTop();
    public void set_ShowQuickAccessToolBarOnTop(bool value);
    public IEnumerable get_ContextualTabGroupsSource();
    public void set_ContextualTabGroupsSource(IEnumerable value);
    public Collection`1<RibbonContextualTabGroup> get_ContextualTabGroups();
    public DataTemplate get_ContextualTabGroupHeaderTemplate();
    public void set_ContextualTabGroupHeaderTemplate(DataTemplate value);
    public Style get_ContextualTabGroupStyle();
    public void set_ContextualTabGroupStyle(Style value);
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Style get_TabHeaderStyle();
    public void set_TabHeaderStyle(Style value);
    public DataTemplate get_TabHeaderTemplate();
    public void set_TabHeaderTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
internal RibbonTitlePanel get_RibbonTitlePanel();
    [CompilerGeneratedAttribute]
private void set_RibbonTitlePanel(RibbonTitlePanel value);
    internal RibbonContextualTabGroupItemsControl get_ContextualTabGroupItemsControl();
    internal UIElement get_QatTopHost();
    internal UIElement get_TitleHost();
    internal UIElement get_HelpPaneHost();
    internal Dictionary`2<int, int> get_TabIndexToDisplayIndexMap();
    internal Dictionary`2<int, int> get_TabDisplayIndexToIndexMap();
    internal RibbonTabHeaderItemsControl get_RibbonTabHeaderItemsControl();
    internal Popup get_ItemsPresenterPopup();
    public virtual void OnApplyTemplate();
    internal void NotifyMouseClickedOnTabHeader(RibbonTabHeader tabHeader, MouseButtonEventArgs e);
    internal void NotifyMouseClickedOnContextualTabGroup(RibbonContextualTabGroup tabGroupHeader);
    internal void NotifyTabContextualTabGroupHeaderChanged();
    internal void NotifyTabHeaderChanged();
    internal void NotifyTabHeadersScrollOwnerChanged(ScrollViewer oldScrollViewer, ScrollViewer newScrollViewer);
    private void OnTabHeadersScrollChanged(object d, ScrollChangedEventArgs e);
    protected internal virtual IEnumerator get_LogicalChildren();
    [IteratorStateMachineAttribute("System.Windows.Controls.Ribbon.Ribbon/<GetLogicalChildren>d__169")]
private IEnumerator`1<object> GetLogicalChildren();
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    private static void OnSourceChangedHandler(object o, SourceChangedEventArgs e);
    private void UnhookWindowListeners(Window win);
    private void HookWindowListeners(Window win);
    private static void OnWindowIconVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsDropDownOpenChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceIsDropDownOpen(DependencyObject sender, object value);
    private object RecoerceIsDropDownOpen(object arg);
    private static void OnIsMinimizedChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnQuickAccessToolBarChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnApplicationMenuChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceTitle(DependencyObject sender, object value);
    private static object OnCoerceTitleImpl(Ribbon rib, object value);
    private static void OnIsCollapsedChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object CoerceIsCollapsed(DependencyObject d, object baseValue);
    private void OnRibbonTabPopupOpening();
    private void OnContextualTabGroupsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private static void OnContextualTabGroupsSourceChanged(object sender, DependencyPropertyChangedEventArgs args);
    private static void OnNotifyContextualTabGroupPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNotifyTabHeaderPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void InitializeSelection();
    internal void ResetSelection();
    private int GetFirstVisibleTabIndex(bool ignoreContextualTabs);
    private static bool CheckIfWindowIsRibbonWindow(Window win);
    private double CalculatePopupWidth();
    private void OnWindowSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnRibbonWindowTitleChanged(object sender, EventArgs e);
    internal int GetTabIndexForDisplayIndex(int displayIndex);
    internal int GetTabDisplayIndexForIndex(int index);
    private void RefreshHeaderCollection();
    private static object CreateDefaultHeaderObject();
    private static void OnBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceIsMinimized(DependencyObject d, object baseValue);
    private void OnItemContainerGeneratorStatusChanged(object sender, EventArgs e);
    private void HandleIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private static void OnLostMouseCaptureThunk(object sender, MouseEventArgs e);
    private void OnLostMouseCaptureThunk(MouseEventArgs e);
    private static void OnClickThroughThunk(object sender, MouseButtonEventArgs e);
    private void OnClickThrough(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    private static void OnDismissPopupThunk(object sender, RibbonDismissPopupEventArgs e);
    private void OnDismissPopup(RibbonDismissPopupEventArgs e);
    private void DismissPopupAction(bool value);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private bool OnArrowControlKeyDown(Key key);
    private RibbonTabHeader get_SelectedTabHeader();
    private bool FocusSelectedTabHeader();
    private bool TabArrowKeyControlNavigate(RibbonTab tab, bool leftToRight, bool startFromCurrent, bool cycle);
    private int GetFocusedRibbonGroupIndex(RibbonTab tab);
    private bool TrySetFocusOnRibbonGroupAtIndex(RibbonTab tab, int index);
    private bool QatArrowKeyControlNavigate(bool leftToRight, bool startFromCurrent, bool cycle);
    private bool TrySetFocusOnQatItemAtIndex(RibbonQuickAccessToolBar quickAccessToolBar, int index);
    private int GetFocusedQatItemIndex(RibbonQuickAccessToolBar quickAccessToolBar);
    private static bool ArrowKeyControlNavigate(T targetControl, bool leftToRight, bool startFromCurrent, bool cycle, int itemCount, Control extraControl, Func`2<T, int> getFocusedItemIndex, Func`3<T, int, bool> trySetFocusAtItemIndex);
    private static int DeterminePreStartIndexForArrowControlNavigation(T targetControl, bool startFromCurrent, bool leftToRight, bool cycle, Control extraControl, int itemCount, Func`2<T, int> getFocusedItemIndex);
    private bool ArrowKeyControlNavigate(bool navigateLeft, RibbonQuickAccessToolBar quickAccessToolBar, RibbonTab selectedTab, ArrowKeyControlNavigationScope startingNavigationScope);
    private bool OnKeyTipEnterFocus(object sender, EventArgs e);
    private bool OnKeyTipExitRestoreFocus(object sender, EventArgs e);
    internal void RestoreFocusAndCapture(bool force);
    private static void OnContextMenuOpeningThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuOpeningInternal(ContextMenuEventArgs e);
    [CompilerGeneratedAttribute]
internal UIElement get_ContextMenuOriginalSource();
    [CompilerGeneratedAttribute]
private void set_ContextMenuOriginalSource(UIElement value);
    private static void OnContextMenuClosingThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuClosingInternal();
    internal void RestoreFocusOnContextMenuClose();
    private static void AddToQATCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void AddToQATExecuted(object sender, ExecutedRoutedEventArgs args);
    private static DependencyObject FindElementThatCanBeAddedToQAT(DependencyObject obj);
    private static void MaximizeRibbonCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void MaximizeRibbonExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void MinimizeRibbonCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void MinimizeRibbonExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void RemoveFromQATCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void RemoveFromQATExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void ShowQATAboveCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void ShowQATAboveExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void ShowQATBelowCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void ShowQATBelowExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void OnCloneThunk(object sender, RibbonQuickAccessToolBarCloneEventArgs e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerator <>n__0();
    [CompilerGeneratedAttribute]
private bool <OnSelectionChanged>b__176_0();
    [CompilerGeneratedAttribute]
private void <HandleIsVisibleChanged>b__212_0();
    [CompilerGeneratedAttribute]
private bool <OnLostMouseCaptureThunk>b__214_0();
    [CompilerGeneratedAttribute]
private void <OnLostMouseCaptureThunk>b__214_1(bool value);
    [CompilerGeneratedAttribute]
private bool <OnKeyDown>b__222_0();
    [CompilerGeneratedAttribute]
private void <OnKeyDown>b__222_1(bool value);
    [CompilerGeneratedAttribute]
private bool <OnContextMenuClosingInternal>b__247_0();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonApplicationMenu : RibbonMenuButton {
    private Popup _popup;
    private RibbonToggleButton _popupToggleButton;
    private ContentPresenter _footerPaneHost;
    private ContentPresenter _auxiliaryPaneHost;
    private static string PopupTemplateName;
    private static string PopupToggleButtonTemplateName;
    private static string SubmenuTemplateName;
    private static string FooterPaneTemplateName;
    private static string AuxiliaryPaneTemplateName;
    public static DependencyProperty FooterPaneContentProperty;
    public static DependencyProperty FooterPaneContentTemplateProperty;
    public static DependencyProperty FooterPaneContentTemplateSelectorProperty;
    public static DependencyProperty AuxiliaryPaneContentProperty;
    public static DependencyProperty AuxiliaryPaneContentTemplateProperty;
    public static DependencyProperty AuxiliaryPaneContentTemplateSelectorProperty;
    private object _currentItem;
    internal static DependencyProperty SubmenuPlaceholderProperty;
    public object FooterPaneContent { get; public set; }
    public DataTemplate FooterPaneContentTemplate { get; public set; }
    public DataTemplateSelector FooterPaneContentTemplateSelector { get; public set; }
    public object AuxiliaryPaneContent { get; public set; }
    public DataTemplate AuxiliaryPaneContentTemplate { get; public set; }
    public DataTemplateSelector AuxiliaryPaneContentTemplateSelector { get; public set; }
    internal UIElement FooterPaneHost { get; }
    internal UIElement AuxiliaryPaneHost { get; }
    internal FrameworkElement SubmenuPlaceholder { get; internal set; }
    private static RibbonApplicationMenu();
    public object get_FooterPaneContent();
    public void set_FooterPaneContent(object value);
    public DataTemplate get_FooterPaneContentTemplate();
    public void set_FooterPaneContentTemplate(DataTemplate value);
    public DataTemplateSelector get_FooterPaneContentTemplateSelector();
    public void set_FooterPaneContentTemplateSelector(DataTemplateSelector value);
    public object get_AuxiliaryPaneContent();
    public void set_AuxiliaryPaneContent(object value);
    public DataTemplate get_AuxiliaryPaneContentTemplate();
    public void set_AuxiliaryPaneContentTemplate(DataTemplate value);
    public DataTemplateSelector get_AuxiliaryPaneContentTemplateSelector();
    public void set_AuxiliaryPaneContentTemplateSelector(DataTemplateSelector value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    internal UIElement get_FooterPaneHost();
    internal UIElement get_AuxiliaryPaneHost();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public virtual void OnApplyTemplate();
    internal FrameworkElement get_SubmenuPlaceholder();
    internal void set_SubmenuPlaceholder(FrameworkElement value);
    private void OnPopupOpened(object sender, EventArgs e);
    private static object CoerceToFalse(DependencyObject d, object value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    internal bool AuxiliaryPaneMoveFocus(FocusNavigationDirection direction);
    internal bool FooterPaneMoveFocus(FocusNavigationDirection direction);
    internal bool ItemsPaneMoveFocus(FocusNavigationDirection direction);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonApplicationMenuItem : RibbonMenuItem {
    private object _currentItem;
    private static DependencyPropertyKey LevelPropertyKey;
    public static DependencyProperty LevelProperty;
    internal static double KeyTipHorizontalOffet;
    internal static int CloseSubmenuTimerDelay;
    private ItemsControl ParentItemsControl { get; }
    internal int CloseSubmenuTimerDelayBuffer { get; }
    public RibbonApplicationMenuItemLevel Level { get; internal set; }
    private static RibbonApplicationMenuItem();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    private ItemsControl get_ParentItemsControl();
    public virtual void OnApplyTemplate();
    internal virtual int get_CloseSubmenuTimerDelayBuffer();
    private static object CoerceIsSubmenuOpen(DependencyObject d, object baseValue);
    public RibbonApplicationMenuItemLevel get_Level();
    internal void set_Level(RibbonApplicationMenuItemLevel value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
}
public enum System.Windows.Controls.Ribbon.RibbonApplicationMenuItemLevel : Enum {
    public int value__;
    public static RibbonApplicationMenuItemLevel Top;
    public static RibbonApplicationMenuItemLevel Middle;
    public static RibbonApplicationMenuItemLevel Sub;
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonApplicationSplitMenuItem : RibbonSplitMenuItem {
    private object _currentItem;
    private static DependencyPropertyKey LevelPropertyKey;
    public static DependencyProperty LevelProperty;
    private ItemsControl ParentItemsControl { get; }
    internal int CloseSubmenuTimerDelayBuffer { get; }
    public RibbonApplicationMenuItemLevel Level { get; internal set; }
    private static RibbonApplicationSplitMenuItem();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    private ItemsControl get_ParentItemsControl();
    public virtual void OnApplyTemplate();
    internal virtual int get_CloseSubmenuTimerDelayBuffer();
    private static object CoerceIsSubmenuOpen(DependencyObject d, object baseValue);
    public RibbonApplicationMenuItemLevel get_Level();
    internal void set_Level(RibbonApplicationMenuItemLevel value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonButton : Button {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    private BitVector32 _bits;
    private Image _image;
    private static string ImageTemplatePart;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    private bool CoerceFocusable { get; private set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    internal Image Image { get; }
    private static RibbonButton();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    private static object OnCoerceFocusable(DependencyObject d, object baseValue);
    private bool get_CoerceFocusable();
    private void set_CoerceFocusable(bool value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    internal Image get_Image();
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonCheckBox : CheckBox {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    private BitVector32 _bits;
    private Border _checkBorder;
    private static string CheckBorderTemplatePart;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    private bool CoerceFocusable { get; private set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonCheckBox();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    private static object OnCoerceFocusable(DependencyObject d, object baseValue);
    private bool get_CoerceFocusable();
    private void set_CoerceFocusable(bool value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonComboBox : RibbonMenuButton {
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty SelectionBoxWidthProperty;
    private static DependencyPropertyKey SelectionBoxItemPropertyKey;
    public static DependencyProperty SelectionBoxItemProperty;
    private static DependencyPropertyKey SelectionBoxItemTemplatePropertyKey;
    public static DependencyProperty SelectionBoxItemTemplateProperty;
    private static DependencyPropertyKey SelectionBoxItemTemplateSelectorPropertyKey;
    public static DependencyProperty SelectionBoxItemTemplateSelectorProperty;
    private static DependencyPropertyKey SelectionBoxItemStringFormatPropertyKey;
    public static DependencyProperty SelectionBoxItemStringFormatProperty;
    public static DependencyProperty StaysOpenOnEditProperty;
    private static string EditableTextBoxTemplateName;
    private TextBox _editableTextBoxSite;
    private int _textBoxSelectionStart;
    private RibbonGallery _firstGallery;
    private WeakReference _firstGalleryItem;
    private BitVector32 _cacheValid;
    private UIElement _clonedElement;
    private DispatcherOperation _updateTextBoxOperation;
    private static DataTemplate s_StringTemplate;
    private object _selectedItem;
    private object _selectedValue;
    private object _cachedSelectedItem;
    private string _selectedValuePath;
    public bool IsEditable { get; public set; }
    public string Text { get; public set; }
    public bool IsReadOnly { get; public set; }
    public bool ShowKeyboardCues { get; }
    public double SelectionBoxWidth { get; public set; }
    public object SelectionBoxItem { get; private set; }
    public DataTemplate SelectionBoxItemTemplate { get; private set; }
    public DataTemplateSelector SelectionBoxItemTemplateSelector { get; private set; }
    public string SelectionBoxItemStringFormat { get; private set; }
    public bool StaysOpenOnEdit { get; public set; }
    private object SelectedItem { get; private set; }
    private object HighlightedItem { get; private set; }
    private object SelectedValue { get; private set; }
    private string SelectedValuePath { get; private set; }
    private bool NavigateInFirstGallery { get; }
    private bool IsFocusWithinFirstGalleryItemsHostSite { get; }
    internal RibbonGallery FirstGallery { get; private set; }
    internal TextBox EditableTextBoxSite { get; internal set; }
    private static DataTemplate StringContentTemplate { get; }
    private bool UpdatingText { get; private set; }
    private bool UpdatingSelectedItem { get; private set; }
    internal bool IsSelectedItemCached { get; private set; }
    private bool UpdatingHighlightedItem { get; private set; }
    private bool IsWaitingForTextComposition { get; private set; }
    private static RibbonComboBox();
    private static void InitializeStringContentTemplate();
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    private static void OnIsEditableChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_Text();
    public void set_Text(string value);
    private static void OnTextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void ReevalutateFocusVisual();
    public double get_SelectionBoxWidth();
    public void set_SelectionBoxWidth(double value);
    public object get_SelectionBoxItem();
    private void set_SelectionBoxItem(object value);
    public DataTemplate get_SelectionBoxItemTemplate();
    private void set_SelectionBoxItemTemplate(DataTemplate value);
    public DataTemplateSelector get_SelectionBoxItemTemplateSelector();
    private void set_SelectionBoxItemTemplateSelector(DataTemplateSelector value);
    public string get_SelectionBoxItemStringFormat();
    private void set_SelectionBoxItemStringFormat(string value);
    public bool get_StaysOpenOnEdit();
    public void set_StaysOpenOnEdit(bool value);
    private object get_SelectedItem();
    private void set_SelectedItem(object value);
    private object get_HighlightedItem();
    private void set_HighlightedItem(object value);
    private void SelectedItemUpdated();
    private void HighlightedItemUpdated();
    private void Update();
    private void UpdateEditableTextBox();
    private void UpdateSelectionBoxItem();
    private void CloneLayoutUpdated(object sender, EventArgs e);
    private void OnEditableTextBoxTextChanged(object sender, TextChangedEventArgs e);
    private void OnEditableTextBoxSelectionChanged(object sender, RoutedEventArgs e);
    private void TextUpdated(string newText, bool textBoxUpdated);
    private void OnEditableTextBoxPreviewTextInput(object sender, TextCompositionEventArgs e);
    private object UpdateTextBoxCallback(object arg);
    private void UpdateTextBox(string matchedText, string newText);
    private static string ExtractString(DependencyObject d);
    internal virtual void OnIsDropDownOpenChanged(DependencyPropertyChangedEventArgs e);
    private object get_SelectedValue();
    private void set_SelectedValue(object value);
    private string get_SelectedValuePath();
    private void set_SelectedValuePath(string value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private bool get_NavigateInFirstGallery();
    private bool get_IsFocusWithinFirstGalleryItemsHostSite();
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    private void UpdateFirstGallery();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    internal void UpdateSelectionProperties();
    private void OnGallerySelectionChanged(object sender, RoutedPropertyChangedEventArgs`1<object> e);
    private void OnGalleryItemSelectionChanged(object sender, RoutedEventArgs e);
    private void OnGalleryHighlightChanged(object sender, EventArgs e);
    private void OnGalleryGotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e);
    internal virtual void TransferPseudoInheritedProperties();
    private void CommitOrCancelChanges(bool commitChanges);
    private void CacheSelectedItem();
    private void RestoreCachedSelectedItem();
    private void DiscardCachedSelectedItem();
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
    internal RibbonGallery get_FirstGallery();
    private void set_FirstGallery(RibbonGallery value);
    internal TextBox get_EditableTextBoxSite();
    internal void set_EditableTextBoxSite(TextBox value);
    private static DataTemplate get_StringContentTemplate();
    private bool get_UpdatingText();
    private void set_UpdatingText(bool value);
    private bool get_UpdatingSelectedItem();
    private void set_UpdatingSelectedItem(bool value);
    internal bool get_IsSelectedItemCached();
    private void set_IsSelectedItemCached(bool value);
    private bool get_UpdatingHighlightedItem();
    private void set_UpdatingHighlightedItem(bool value);
    private bool get_IsWaitingForTextComposition();
    private void set_IsWaitingForTextComposition(bool value);
    [CompilerGeneratedAttribute]
private void <OnIsDropDownOpenChanged>b__69_0();
    [CompilerGeneratedAttribute]
private bool <OnKeyDown>b__77_0();
    [CompilerGeneratedAttribute]
private void <OnKeyDown>b__77_1(bool value);
    [CompilerGeneratedAttribute]
private void <OnIsKeyboardFocusWithinChanged>b__84_0();
}
public static class System.Windows.Controls.Ribbon.RibbonCommands : object {
    [CompilerGeneratedAttribute]
private static RoutedUICommand <AddToQuickAccessToolBarCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedUICommand <RemoveFromQuickAccessToolBarCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedUICommand <MinimizeRibbonCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedUICommand <MaximizeRibbonCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedUICommand <ShowQuickAccessToolBarAboveRibbonCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedUICommand <ShowQuickAccessToolBarBelowRibbonCommand>k__BackingField;
    public static RoutedUICommand AddToQuickAccessToolBarCommand { get; private set; }
    public static RoutedUICommand RemoveFromQuickAccessToolBarCommand { get; private set; }
    public static RoutedUICommand MinimizeRibbonCommand { get; private set; }
    public static RoutedUICommand MaximizeRibbonCommand { get; private set; }
    public static RoutedUICommand ShowQuickAccessToolBarAboveRibbonCommand { get; private set; }
    public static RoutedUICommand ShowQuickAccessToolBarBelowRibbonCommand { get; private set; }
    private static RibbonCommands();
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_AddToQuickAccessToolBarCommand();
    [CompilerGeneratedAttribute]
private static void set_AddToQuickAccessToolBarCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_RemoveFromQuickAccessToolBarCommand();
    [CompilerGeneratedAttribute]
private static void set_RemoveFromQuickAccessToolBarCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_MinimizeRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_MinimizeRibbonCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_MaximizeRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_MaximizeRibbonCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_ShowQuickAccessToolBarAboveRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_ShowQuickAccessToolBarAboveRibbonCommand(RoutedUICommand value);
    [CompilerGeneratedAttribute]
public static RoutedUICommand get_ShowQuickAccessToolBarBelowRibbonCommand();
    [CompilerGeneratedAttribute]
private static void set_ShowQuickAccessToolBarBelowRibbonCommand(RoutedUICommand value);
}
public class System.Windows.Controls.Ribbon.RibbonContentPresenter : ContentPresenter {
    private FrameworkElement _templateRoot;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    internal UIElement ContentChild { get; }
    internal bool ChildHasLargeImage { get; }
    internal bool ChildHasSmallImage { get; }
    internal bool ChildHasLabel { get; }
    private static RibbonContentPresenter();
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(DataTemplate oldTemplate, DataTemplate newTemplate);
    private static void OnControlSizeDefinitionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceControlSizeDefinition(DependencyObject d, object baseValue);
    private static void OnIsInQuickAccessToolBarChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsInControlGroupChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRibbonChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void TransferPseudoInheritedProperties();
    internal UIElement get_ContentChild();
    internal bool get_ChildHasLargeImage();
    internal bool get_ChildHasSmallImage();
    internal bool get_ChildHasLabel();
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonContextMenu : ContextMenu {
    [ThreadStaticAttribute]
private static RibbonContextMenu _galleryContextMenu;
    [ThreadStaticAttribute]
private static RibbonContextMenu _ribbonControlContextMenu;
    [ThreadStaticAttribute]
private static RibbonContextMenu _qatControlContextMenu;
    [ThreadStaticAttribute]
private static RibbonContextMenu _defaultRibbonClientAreaContextMenu;
    private object _currentItem;
    public static DependencyProperty HasGalleryProperty;
    private int _galleryCount;
    private Popup _popup;
    internal static string AddToQATText;
    private static string _addGalleryToQATText;
    internal static string RemoveFromQATText;
    internal static string ShowQATAboveText;
    internal static string ShowQATBelowText;
    internal static string MaximizeTheRibbonText;
    internal static string MinimizeTheRibbonText;
    private bool _ignoreDismissPopupsOnNextClose;
    public bool HasGallery { get; private set; }
    private static RibbonContextMenu();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private static bool CanRaiseDismissPopups(UIElement dismissPopupSource);
    private static void OnIsOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void RestoreFocusToRibbon();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private UIElement GetDismissPopupSource();
    private static void OnClickThroughThunk(object sender, MouseButtonEventArgs e);
    private void OnClickThrough();
    internal static RibbonContextMenu ChooseContextMenu(DependencyObject owner);
    private static RibbonContextMenu GetDefaultRibbonClientAreaContextMenu();
    private static RibbonContextMenu GetRibbonControlContextMenu();
    private static RibbonContextMenu GetQATControlContextMenu();
    private static RibbonContextMenu GetGalleryContextMenu();
    private static RibbonMenuItem GenerateAddGalleryToQATItem(RibbonContextMenu contextMenu);
    private static RibbonMenuItem GenerateAddToOrRemoveFromQATItem(bool controlIsInQAT, RibbonContextMenu contextMenu);
    private static RibbonMenuItem GenerateQATPlacementMenuItem(RibbonContextMenu contextMenu);
    private static RibbonMenuItem GenerateMinimizeTheRibbonItem(RibbonContextMenu contextMenu);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public bool get_HasGallery();
    private void set_HasGallery(bool value);
    private void OnLoaded(object sender, RoutedEventArgs e);
}
[ContentPropertyAttribute("Header")]
public class System.Windows.Controls.Ribbon.RibbonContextualTabGroup : Control {
    internal static double TabHeaderSeparatorHeightDelta;
    private TabsEnumerable _tabs;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty RibbonProperty;
    [CompilerGeneratedAttribute]
private double <TabsDesiredWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IdealDesiredWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DesiredExtraPaddingPerTab>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrangeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ArrangeX>k__BackingField;
    public object Header { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    public string HeaderStringFormat { get; public set; }
    public Ribbon Ribbon { get; }
    internal bool ShowLabelToolTip { get; internal set; }
    private FrameworkElement VisualChild { get; }
    internal IEnumerable`1<RibbonTab> Tabs { get; }
    internal RibbonTab FirstVisibleTab { get; }
    internal double TabsDesiredWidth { get; internal set; }
    internal double IdealDesiredWidth { get; internal set; }
    internal double DesiredExtraPaddingPerTab { get; internal set; }
    internal double ArrangeWidth { get; internal set; }
    internal double ArrangeX { get; internal set; }
    private static RibbonContextualTabGroup();
    public object get_Header();
    public void set_Header(object value);
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public Ribbon get_Ribbon();
    internal bool get_ShowLabelToolTip();
    internal void set_ShowLabelToolTip(bool value);
    private FrameworkElement get_VisualChild();
    internal IEnumerable`1<RibbonTab> get_Tabs();
    internal RibbonTab get_FirstVisibleTab();
    [CompilerGeneratedAttribute]
internal double get_TabsDesiredWidth();
    [CompilerGeneratedAttribute]
internal void set_TabsDesiredWidth(double value);
    [CompilerGeneratedAttribute]
internal double get_IdealDesiredWidth();
    [CompilerGeneratedAttribute]
internal void set_IdealDesiredWidth(double value);
    [CompilerGeneratedAttribute]
internal double get_DesiredExtraPaddingPerTab();
    [CompilerGeneratedAttribute]
internal void set_DesiredExtraPaddingPerTab(double value);
    [CompilerGeneratedAttribute]
internal double get_ArrangeWidth();
    [CompilerGeneratedAttribute]
internal void set_ArrangeWidth(double value);
    [CompilerGeneratedAttribute]
internal double get_ArrangeX();
    [CompilerGeneratedAttribute]
internal void set_ArrangeX(double value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    internal void PrepareTabGroupHeader(object item, DataTemplate itemTemplate, DataTemplateSelector itemTemplateSelector, string itemStringFormat);
    internal void ClearTabGroupHeader();
    private static object CoerceVisibility(DependencyObject d, object baseValue);
    private static void OnVisibilityChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private void UpdateTabs(bool clear);
    private void CoerceTabsVisibility();
}
public class System.Windows.Controls.Ribbon.RibbonContextualTabGroupItemsControl : ItemsControl {
    public static DependencyProperty RibbonProperty;
    private Panel _itemsHost;
    private bool _forceCollapse;
    public Ribbon Ribbon { get; }
    internal Panel InternalItemsHost { get; internal set; }
    internal RibbonContextualTabGroup FirstContextualTabHeader { get; }
    internal RibbonContextualTabGroup LastContextualTabHeader { get; }
    internal bool ForceCollapse { get; internal set; }
    private static RibbonContextualTabGroupItemsControl();
    public Ribbon get_Ribbon();
    internal Panel get_InternalItemsHost();
    internal void set_InternalItemsHost(Panel value);
    internal RibbonContextualTabGroup get_FirstContextualTabHeader();
    internal RibbonContextualTabGroup get_LastContextualTabHeader();
    internal bool get_ForceCollapse();
    internal void set_ForceCollapse(bool value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public virtual void OnApplyTemplate();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    private bool HasTabs(FrameworkElement container);
    private static void OnNotifyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void NotifyPropertyChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceItemTemplate(DependencyObject d, object baseValue);
    private static object CoerceItemContainerStyle(DependencyObject d, object baseValue);
    private void SyncProperties();
    private static object CoerceVisibility(DependencyObject d, object baseValue);
    internal RibbonContextualTabGroup FindHeader(object content);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonControl : ContentControl {
    private RibbonContentPresenter _partContentPresenter;
    private static string PART_ContentPresenter;
    internal static DependencyProperty ItemForItemContainerProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    internal UIElement ContentChild { get; }
    internal bool ChildHasLargeImage { get; }
    internal bool ChildHasSmallImage { get; }
    internal bool ChildHasLabel { get; }
    private static RibbonControl();
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private static void OnItemForItemContainerChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnControlSizeDefinitionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceControlSizeDefinition(DependencyObject d, object baseValue);
    private static void OnIsInQuickAccessToolBarChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsInControlGroupChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void TransferPseudoInheritedProperties();
    internal bool HostsRibbonGroup();
    internal UIElement get_ContentChild();
    internal bool get_ChildHasLargeImage();
    internal bool get_ChildHasSmallImage();
    internal bool get_ChildHasLabel();
}
public class System.Windows.Controls.Ribbon.RibbonControlGroup : ItemsControl {
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty RibbonProperty;
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public Ribbon Ribbon { get; }
    private static RibbonControlGroup();
    public virtual void OnApplyTemplate();
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    private static void OnControlSizeDefinitionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void TransferPseudoInheritedProperties();
    private static object CoerceDefaultControlSizeDefinition(DependencyObject d, object baseValue);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public Ribbon get_Ribbon();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TypeConverterAttribute("System.Windows.Controls.Ribbon.RibbonControlLengthConverter")]
public class System.Windows.Controls.Ribbon.RibbonControlLength : ValueType {
    private double _unitValue;
    private RibbonControlLengthUnitType _unitType;
    private static RibbonControlLength _auto;
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public double Value { get; }
    public RibbonControlLengthUnitType RibbonControlLengthUnitType { get; }
    public static RibbonControlLength Auto { get; }
    public RibbonControlLength(double pixels);
    public RibbonControlLength(double value, RibbonControlLengthUnitType type);
    private static RibbonControlLength();
    public static bool op_Equality(RibbonControlLength length1, RibbonControlLength length2);
    public static bool op_Inequality(RibbonControlLength length1, RibbonControlLength length2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RibbonControlLength other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public double get_Value();
    public RibbonControlLengthUnitType get_RibbonControlLengthUnitType();
    public static RibbonControlLength get_Auto();
}
public class System.Windows.Controls.Ribbon.RibbonControlLengthConverter : TypeConverter {
    private static String[] _unitStrings;
    private static String[] _pixelUnitStrings;
    private static Double[] _pixelUnitFactors;
    private static RibbonControlLengthConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    internal static string ToString(RibbonControlLength length, CultureInfo cultureInfo);
    internal static RibbonControlLength FromString(string s, CultureInfo cultureInfo);
}
public enum System.Windows.Controls.Ribbon.RibbonControlLengthUnitType : Enum {
    public int value__;
    public static RibbonControlLengthUnitType Auto;
    public static RibbonControlLengthUnitType Pixel;
    public static RibbonControlLengthUnitType Item;
    public static RibbonControlLengthUnitType Star;
}
public static class System.Windows.Controls.Ribbon.RibbonControlService : object {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    internal static DependencyPropertyKey RibbonPropertyKey;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty DefaultControlSizeDefinitionProperty;
    internal static DependencyPropertyKey IsInControlGroupPropertyKey;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    internal static DependencyPropertyKey IsInQuickAccessToolBarPropertyKey;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    private static DependencyPropertyKey ShowKeyboardCuesPropertyKey;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static RoutedEvent DismissPopupEvent;
    private static RibbonControlService();
    public static ImageSource GetLargeImageSource(DependencyObject element);
    public static void SetLargeImageSource(DependencyObject element, ImageSource value);
    private static void OnLargeImageSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static ImageSource GetSmallImageSource(DependencyObject element);
    public static void SetSmallImageSource(DependencyObject element, ImageSource value);
    private static void OnSmallImageSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static string GetLabel(DependencyObject element);
    public static void SetLabel(DependencyObject element, string value);
    private static void OnLabelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static string GetToolTipTitle(DependencyObject element);
    public static void SetToolTipTitle(DependencyObject element, string value);
    public static string GetToolTipDescription(DependencyObject element);
    public static void SetToolTipDescription(DependencyObject element, string value);
    public static ImageSource GetToolTipImageSource(DependencyObject element);
    public static void SetToolTipImageSource(DependencyObject element, ImageSource value);
    public static string GetToolTipFooterTitle(DependencyObject element);
    public static void SetToolTipFooterTitle(DependencyObject element, string value);
    public static string GetToolTipFooterDescription(DependencyObject element);
    public static void SetToolTipFooterDescription(DependencyObject element, string value);
    public static ImageSource GetToolTipFooterImageSource(DependencyObject element);
    public static void SetToolTipFooterImageSource(DependencyObject element, ImageSource value);
    public static Ribbon GetRibbon(DependencyObject element);
    internal static void SetRibbon(DependencyObject element, Ribbon value);
    public static Brush GetMouseOverBorderBrush(DependencyObject element);
    public static void SetMouseOverBorderBrush(DependencyObject element, Brush value);
    public static Brush GetMouseOverBackground(DependencyObject element);
    public static void SetMouseOverBackground(DependencyObject element, Brush value);
    public static Brush GetPressedBorderBrush(DependencyObject element);
    public static void SetPressedBorderBrush(DependencyObject element, Brush value);
    public static Brush GetPressedBackground(DependencyObject element);
    public static void SetPressedBackground(DependencyObject element, Brush value);
    public static Brush GetCheckedBackground(DependencyObject element);
    public static void SetCheckedBackground(DependencyObject element, Brush value);
    public static Brush GetCheckedBorderBrush(DependencyObject element);
    public static void SetCheckedBorderBrush(DependencyObject element, Brush value);
    public static Brush GetFocusedBackground(DependencyObject element);
    public static void SetFocusedBackground(DependencyObject element, Brush value);
    public static Brush GetFocusedBorderBrush(DependencyObject element);
    public static void SetFocusedBorderBrush(DependencyObject element, Brush value);
    public static CornerRadius GetCornerRadius(DependencyObject element);
    public static void SetCornerRadius(DependencyObject element, CornerRadius value);
    public static RibbonControlSizeDefinition GetControlSizeDefinition(DependencyObject element);
    public static void SetControlSizeDefinition(DependencyObject element, RibbonControlSizeDefinition value);
    private static void OnControlSizeDefinitionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceControlSizeDefinition(DependencyObject d, object baseValue);
    public static RibbonControlSizeDefinition GetDefaultControlSizeDefinition(DependencyObject element);
    public static void SetDefaultControlSizeDefinition(DependencyObject element, RibbonControlSizeDefinition value);
    private static void OnDefaultControlSizeDefinitionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceDefaultControlSizeDefinition(DependencyObject d, object baseValue);
    private static void UpdateDefaultControlSizeDefinition(DependencyObject d);
    public static bool GetIsInControlGroup(DependencyObject element);
    internal static void SetIsInControlGroup(DependencyObject element, bool value);
    public static bool GetCanAddToQuickAccessToolBarDirectly(DependencyObject element);
    public static void SetCanAddToQuickAccessToolBarDirectly(DependencyObject element, bool value);
    public static bool GetIsInQuickAccessToolBar(DependencyObject element);
    internal static void SetIsInQuickAccessToolBar(DependencyObject element, bool value);
    public static RibbonControlSizeDefinition GetQuickAccessToolBarControlSizeDefinition(DependencyObject element);
    public static void SetQuickAccessToolBarControlSizeDefinition(DependencyObject element, RibbonControlSizeDefinition value);
    public static object GetQuickAccessToolBarId(DependencyObject element);
    public static void SetQuickAccessToolBarId(DependencyObject element, object value);
    public static bool GetShowKeyboardCues(DependencyObject element);
    internal static void SetShowKeyboardCues(DependencyObject element, bool value);
    public static void AddDismissPopupHandler(DependencyObject element, RibbonDismissPopupEventHandler handler);
    public static void RemoveDismissPopupHandler(DependencyObject element, RibbonDismissPopupEventHandler handler);
}
public class System.Windows.Controls.Ribbon.RibbonControlSizeDefinition : Freezable {
    public static DependencyProperty ImageSizeProperty;
    public static DependencyProperty IsLabelVisibleProperty;
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty MinWidthProperty;
    public static DependencyProperty MaxWidthProperty;
    private static RibbonControlSizeDefinition _largeImageWithLabel;
    private static RibbonControlSizeDefinition _smallImageWithLabel;
    private static RibbonControlSizeDefinition _noImageWithLabel;
    private static RibbonControlSizeDefinition _largeImageWithoutLabel;
    private static RibbonControlSizeDefinition _smallImageWithoutLabel;
    private static RibbonControlSizeDefinition _noImageWithoutLabel;
    public RibbonImageSize ImageSize { get; public set; }
    public bool IsLabelVisible { get; public set; }
    public bool IsCollapsed { get; public set; }
    public RibbonControlLength Width { get; public set; }
    public RibbonControlLength MinWidth { get; public set; }
    public RibbonControlLength MaxWidth { get; public set; }
    internal static RibbonControlSizeDefinition LargeImageWithLabel { get; }
    internal static RibbonControlSizeDefinition SmallImageWithLabel { get; }
    internal static RibbonControlSizeDefinition NoImageWithLabel { get; }
    internal static RibbonControlSizeDefinition LargeImageWithoutLabel { get; }
    internal static RibbonControlSizeDefinition SmallImageWithoutLabel { get; }
    internal static RibbonControlSizeDefinition NoImageWithoutLabel { get; }
    private static RibbonControlSizeDefinition();
    public RibbonImageSize get_ImageSize();
    public void set_ImageSize(RibbonImageSize value);
    public bool get_IsLabelVisible();
    public void set_IsLabelVisible(bool value);
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public RibbonControlLength get_Width();
    public void set_Width(RibbonControlLength value);
    public RibbonControlLength get_MinWidth();
    public void set_MinWidth(RibbonControlLength value);
    public RibbonControlLength get_MaxWidth();
    public void set_MaxWidth(RibbonControlLength value);
    private static bool ValidateWidth(object width);
    private static bool ValidateMinWidth(object minWidth);
    private static bool ValidateMaxWidth(object maxWidth);
    protected virtual Freezable CreateInstanceCore();
    internal static RibbonControlSizeDefinition GetFrozenControlSizeDefinition(RibbonImageSize imageSize, bool isLabelVisible);
    internal static RibbonControlSizeDefinition get_LargeImageWithLabel();
    internal static RibbonControlSizeDefinition get_SmallImageWithLabel();
    internal static RibbonControlSizeDefinition get_NoImageWithLabel();
    internal static RibbonControlSizeDefinition get_LargeImageWithoutLabel();
    internal static RibbonControlSizeDefinition get_SmallImageWithoutLabel();
    internal static RibbonControlSizeDefinition get_NoImageWithoutLabel();
}
public class System.Windows.Controls.Ribbon.RibbonControlSizeDefinitionCollection : FreezableCollection`1<RibbonControlSizeDefinition> {
    protected virtual Freezable CreateInstanceCore();
}
public class System.Windows.Controls.Ribbon.RibbonDismissPopupEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private RibbonDismissPopupMode <DismissMode>k__BackingField;
    public RibbonDismissPopupMode DismissMode { get; private set; }
    public RibbonDismissPopupEventArgs(RibbonDismissPopupMode dismissMode);
    [CompilerGeneratedAttribute]
public RibbonDismissPopupMode get_DismissMode();
    [CompilerGeneratedAttribute]
private void set_DismissMode(RibbonDismissPopupMode value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Ribbon.RibbonDismissPopupEventHandler : MulticastDelegate {
    public RibbonDismissPopupEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RibbonDismissPopupEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RibbonDismissPopupEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Controls.Ribbon.RibbonDismissPopupMode : Enum {
    public int value__;
    public static RibbonDismissPopupMode Always;
    public static RibbonDismissPopupMode MousePhysicallyNotOver;
}
internal static class System.Windows.Controls.Ribbon.RibbonDropDownHelper : object {
    private static double TopScreenEdgeBuffer;
    public static void OnPopupResizeStarted(FrameworkElement itemsPresenter);
    public static bool ResizePopup(FrameworkElement itemsPresenter, Size minDropDownSize, bool canUserResizeHorizontally, bool canUserResizeVertically, bool isDropDownPositionedLeft, bool isDropDownPositionedAbove, Rect screenBounds, UIElement popupRoot, double horizontalDelta, double verticalDelta);
    private static bool ResizePopupActual(FrameworkElement itemsPresenter, Size minDropDownSize, bool canUserResizeHorizontally, bool canUserResizeVertically, double newWidth, double newHeight);
    public static Rect GetScreenBounds(FrameworkElement targetElement, Popup popup);
    public static void ClearLocalValues(FrameworkElement itemsPresenter, Popup popup);
    public static Size GetMinDropDownSize(RibbonMenuItemsPanel itemsHost, Popup popup, Thickness borderThickness);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonFilterMenuButton : RibbonMenuButton {
    private bool _retainFocusOnDismiss;
    private static string CurrentFilterItemTemplatePartName;
    private RibbonMenuItem _currentFilterItem;
    internal RibbonMenuItem CurrentFilterItem { get; }
    private static RibbonFilterMenuButton();
    public virtual void OnApplyTemplate();
    private void OnFilterToggleButtonLoaded(object sender, RoutedEventArgs e);
    internal virtual void OnIsDropDownOpenChanged(DependencyPropertyChangedEventArgs e);
    internal virtual void OnAnyMouseDown(MouseButtonEventArgs e);
    protected virtual void OnDismissPopup(RibbonDismissPopupEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    internal RibbonMenuItem get_CurrentFilterItem();
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonGallery : ItemsControl {
    private static DependencyProperty CurrentFilterProperty;
    private static DependencyProperty CurrentFilterStyleProperty;
    private static DependencyProperty CurrentFilterTemplateProperty;
    [CompilerGeneratedAttribute]
private Panel <ItemsHostSite>k__BackingField;
    public static DependencyProperty MinColumnCountProperty;
    public static DependencyProperty MaxColumnCountProperty;
    public static DependencyProperty ColumnsStretchToFillProperty;
    public static DependencyProperty IsSharedColumnSizeScopeProperty;
    internal static DependencyProperty MaxColumnWidthProperty;
    internal static DependencyProperty MaxItemHeightProperty;
    [CompilerGeneratedAttribute]
private double <ArrangeWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArrangeWidthValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaxColumnWidthValid>k__BackingField;
    public static RoutedEvent SelectionChangedEvent;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedValueProperty;
    public static DependencyProperty SelectedValuePathProperty;
    public static DependencyProperty IsSynchronizedWithCurrentItemProperty;
    [CompilerGeneratedAttribute]
private CollectionView <CollectionView>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionView <SourceCollectionView>k__BackingField;
    private static DependencyPropertyKey HighlightedItemPropertyKey;
    public static DependencyProperty HighlightedItemProperty;
    [CompilerGeneratedAttribute]
private EventHandler HighlightChanged;
    [CompilerGeneratedAttribute]
private static RoutedCommand <FilterCommand>k__BackingField;
    public static DependencyProperty CanUserFilterProperty;
    public static DependencyProperty FilterItemContainerStyleProperty;
    public static DependencyProperty AllFilterItemContainerStyleProperty;
    public static DependencyProperty FilterItemContainerStyleSelectorProperty;
    public static DependencyProperty FilterMenuButtonStyleProperty;
    public static DependencyProperty FilterPaneContentProperty;
    public static DependencyProperty FilterPaneContentTemplateProperty;
    public static DependencyProperty FilterItemTemplateProperty;
    public static DependencyProperty AllFilterItemTemplateProperty;
    public static DependencyProperty FilterItemTemplateSelectorProperty;
    internal static DependencyProperty RibbonIsSelectedProperty;
    public static DependencyProperty CategoryTemplateProperty;
    public static DependencyProperty CategoryStyleProperty;
    public static DependencyProperty GalleryItemTemplateProperty;
    public static DependencyProperty GalleryItemStyleProperty;
    private Nullable`1<Point> _localMousePosition;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty PreviewCommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    private BitVector32 _bits;
    private Collection`1<RibbonGalleryItem> _selectedContainers;
    private RibbonGalleryItem _highlightedContainer;
    private ObservableCollection`1<object> _categoryFilters;
    private static object _allFilter;
    private static string _filterMenuButtonTemplatePartName;
    private static string FilterContentPaneTemplatePartName;
    private static string ScrollViewerTemplatePartName;
    private static string ItemsHostPanelName;
    private static string ItemsHostName;
    private ItemsPresenter _itemsPresenter;
    private RibbonFilterMenuButton _filterMenuButton;
    private ContentPresenter _filterContentPane;
    private ScrollViewer _scrollViewer;
    private object CurrentFilter { get; private set; }
    private Style CurrentFilterStyle { get; }
    private DataTemplate CurrentFilterTemplate { get; }
    private bool FilterMenuButtonTemplateIsBound { get; private set; }
    internal Panel ItemsHostSite { get; private set; }
    internal ScrollViewer ScrollViewer { get; }
    internal ItemsPresenter ItemsPresenter { get; }
    public int MinColumnCount { get; public set; }
    public int MaxColumnCount { get; public set; }
    public bool ColumnsStretchToFill { get; public set; }
    public bool IsSharedColumnSizeScope { get; public set; }
    internal double MaxColumnWidth { get; internal set; }
    internal double MaxItemHeight { get; internal set; }
    internal double ArrangeWidth { get; internal set; }
    internal bool IsArrangeWidthValid { get; internal set; }
    internal bool IsMaxColumnWidthValid { get; internal set; }
    internal bool ShouldExecuteCommand { get; internal set; }
    public object SelectedItem { get; public set; }
    private bool ShouldForceCoerceSelectedItem { get; private set; }
    public object SelectedValue { get; public set; }
    private bool ShouldForceCoerceSelectedValue { get; private set; }
    [LocalizabilityAttribute("17")]
public string SelectedValuePath { get; public set; }
    public Nullable`1<bool> IsSynchronizedWithCurrentItem { get; public set; }
    internal bool IsSynchronizedWithCurrentItemInternal { get; internal set; }
    internal CollectionView CollectionView { get; internal set; }
    internal CollectionView SourceCollectionView { get; internal set; }
    internal Collection`1<RibbonGalleryItem> SelectedContainers { get; }
    internal RibbonGalleryCategory SelectedCategory { get; }
    internal bool IsSelectionChangeActive { get; internal set; }
    public object HighlightedItem { get; internal set; }
    internal RibbonGalleryCategory HighlightedCategory { get; }
    internal RibbonGalleryItem HighlightedContainer { get; }
    private bool IsHighlightChangeActive { get; private set; }
    private bool ShouldForceCoerceHighlightedItem { get; private set; }
    public static RoutedCommand FilterCommand { get; private set; }
    public bool CanUserFilter { get; public set; }
    public Style FilterItemContainerStyle { get; public set; }
    public Style AllFilterItemContainerStyle { get; public set; }
    public StyleSelector FilterItemContainerStyleSelector { get; public set; }
    public Style FilterMenuButtonStyle { get; public set; }
    public object FilterPaneContent { get; public set; }
    public DataTemplate FilterPaneContentTemplate { get; public set; }
    public DataTemplate FilterItemTemplate { get; public set; }
    public DataTemplate AllFilterItemTemplate { get; public set; }
    public DataTemplateSelector FilterItemTemplateSelector { get; public set; }
    internal ContentPresenter FilterContentPane { get; }
    internal RibbonFilterMenuButton FilterMenuButton { get; }
    internal bool RibbonIsSelected { get; internal set; }
    public static object AllFilterItem { get; }
    [BindableAttribute("True")]
public DataTemplate CategoryTemplate { get; public set; }
    public Style CategoryStyle { get; public set; }
    public DataTemplate GalleryItemTemplate { get; public set; }
    public Style GalleryItemStyle { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public object PreviewCommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    private bool CanExecute { get; private set; }
    public ImageSource SmallImageSource { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public Ribbon Ribbon { get; }
    internal bool ShouldGalleryItemsAcquireFocus { get; internal set; }
    internal bool HasHighlightChangedViaMouse { get; internal set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    private static RibbonGallery();
    public virtual void OnApplyTemplate();
    private object get_CurrentFilter();
    private void set_CurrentFilter(object value);
    private Style get_CurrentFilterStyle();
    private static object OnCoerceCurrentFilterStyle(DependencyObject d, object baseValue);
    internal void SetHeaderBindingForCurrentFilterItem();
    private DataTemplate get_CurrentFilterTemplate();
    private static void OnCurrentFilterTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private bool get_FilterMenuButtonTemplateIsBound();
    private void set_FilterMenuButtonTemplateIsBound(bool value);
    internal void SetTemplateBindingForCurrentFilterItem();
    private static object OnCoerceCurrentFilterTemplate(DependencyObject d, object baseValue);
    private void OnItemContainerGeneratorStatusChanged(object sender, EventArgs e);
    private void OnFilterButtonItemContainerGeneratorStatusChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
internal Panel get_ItemsHostSite();
    [CompilerGeneratedAttribute]
private void set_ItemsHostSite(Panel value);
    internal ScrollViewer get_ScrollViewer();
    internal ItemsPresenter get_ItemsPresenter();
    public int get_MinColumnCount();
    public void set_MinColumnCount(int value);
    public int get_MaxColumnCount();
    public void set_MaxColumnCount(int value);
    private static object CoerceMaxColumnCount(DependencyObject d, object baseValue);
    private static bool IsMinMaxColumnCountValid(object value);
    public bool get_ColumnsStretchToFill();
    public void set_ColumnsStretchToFill(bool value);
    public bool get_IsSharedColumnSizeScope();
    public void set_IsSharedColumnSizeScope(bool value);
    internal double get_MaxColumnWidth();
    internal void set_MaxColumnWidth(double value);
    internal double get_MaxItemHeight();
    internal void set_MaxItemHeight(double value);
    [CompilerGeneratedAttribute]
internal double get_ArrangeWidth();
    [CompilerGeneratedAttribute]
internal void set_ArrangeWidth(double value);
    [CompilerGeneratedAttribute]
internal bool get_IsArrangeWidthValid();
    [CompilerGeneratedAttribute]
internal void set_IsArrangeWidthValid(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsMaxColumnWidthValid();
    [CompilerGeneratedAttribute]
internal void set_IsMaxColumnWidthValid(bool value);
    private static void OnLayoutPropertyChange(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void InvalidateMeasureOnAllCategoriesPanel();
    public void add_SelectionChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public void remove_SelectionChanged(RoutedPropertyChangedEventHandler`1<object> value);
    protected virtual void OnSelectionChanged(RoutedPropertyChangedEventArgs`1<object> e);
    internal bool get_ShouldExecuteCommand();
    internal void set_ShouldExecuteCommand(bool value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    private bool get_ShouldForceCoerceSelectedItem();
    private void set_ShouldForceCoerceSelectedItem(bool value);
    internal void ForceCoerceSelectedItem();
    private static object CoerceSelectedItem(DependencyObject d, object value);
    public object get_SelectedValue();
    public void set_SelectedValue(object value);
    private bool get_ShouldForceCoerceSelectedValue();
    private void set_ShouldForceCoerceSelectedValue(bool value);
    internal void ForceCoerceSelectedValue();
    private static object CoerceSelectedValue(DependencyObject d, object value);
    public string get_SelectedValuePath();
    public void set_SelectedValuePath(string value);
    private static void OnSelectedValuePathChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Nullable`1<bool> get_IsSynchronizedWithCurrentItem();
    public void set_IsSynchronizedWithCurrentItem(Nullable`1<bool> value);
    private static void OnIsSynchronizedWithCurrentItemChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateIsSynchronizedWithCurrentItemInternal();
    internal bool get_IsSynchronizedWithCurrentItemInternal();
    internal void set_IsSynchronizedWithCurrentItemInternal(bool value);
    private void SynchronizeWithCurrentItem();
    private void SynchronizeWithCurrentItem(RibbonGalleryCategory category, object selectedItem);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    private void AddCurrentItemChangedListener();
    private void RemoveCurrentItemChangedListener();
    [CompilerGeneratedAttribute]
internal CollectionView get_CollectionView();
    [CompilerGeneratedAttribute]
internal void set_CollectionView(CollectionView value);
    [CompilerGeneratedAttribute]
internal CollectionView get_SourceCollectionView();
    [CompilerGeneratedAttribute]
internal void set_SourceCollectionView(CollectionView value);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    private void OnCurrentItemChanged();
    private void OnSourceCollectionViewCurrentItemChanged();
    internal static CollectionView GetSourceCollectionView(ItemsControl itemsControl);
    internal void ChangeSelection(object item, RibbonGalleryItem container, bool isSelected);
    private bool ContainsItem(object item, bool ignoreItemContainerGeneratorStatus, RibbonGalleryCategory& category, RibbonGalleryItem& galleryItem);
    private bool ContainsValue(object value, bool ignoreItemContainerGeneratorStatus, Object& item, RibbonGalleryCategory& category, RibbonGalleryItem& galleryItem);
    internal object GetSelectableValueFromItem(object item);
    private object GetSelectableValueFromItem(object item, ContentControl dummyElement);
    private static object GetInnerText(object item);
    internal static bool VerifyEqual(object knownValue, object itemValue);
    private void MoveCurrentTo(CollectionView cv, object item);
    private void MoveCurrentToPosition(CollectionView cv, int position);
    internal Collection`1<RibbonGalleryItem> get_SelectedContainers();
    internal RibbonGalleryCategory get_SelectedCategory();
    internal bool get_IsSelectionChangeActive();
    internal void set_IsSelectionChangeActive(bool value);
    public object get_HighlightedItem();
    internal void set_HighlightedItem(object value);
    internal void ForceCoerceHighlightedItem();
    private static object CoerceHighlightedItem(DependencyObject d, object value);
    private static void OnHighlightedItemChangedPrivate(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHighlightedItemChanged(DependencyPropertyChangedEventArgs e);
    internal void ChangeHighlight(object item, RibbonGalleryItem container, bool isHighlighted);
    [CompilerGeneratedAttribute]
internal void add_HighlightChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_HighlightChanged(EventHandler value);
    internal RibbonGalleryCategory get_HighlightedCategory();
    internal RibbonGalleryItem get_HighlightedContainer();
    private bool get_IsHighlightChangeActive();
    private void set_IsHighlightChangeActive(bool value);
    private bool get_ShouldForceCoerceHighlightedItem();
    private void set_ShouldForceCoerceHighlightedItem(bool value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_FilterCommand();
    [CompilerGeneratedAttribute]
private static void set_FilterCommand(RoutedCommand value);
    private static void FilterCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void FilterExecuted(object sender, ExecutedRoutedEventArgs args);
    public bool get_CanUserFilter();
    public void set_CanUserFilter(bool value);
    public Style get_FilterItemContainerStyle();
    public void set_FilterItemContainerStyle(Style value);
    public Style get_AllFilterItemContainerStyle();
    public void set_AllFilterItemContainerStyle(Style value);
    private static void OnFilterItemContainerStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public StyleSelector get_FilterItemContainerStyleSelector();
    public void set_FilterItemContainerStyleSelector(StyleSelector value);
    private static void OnFilterItemContainerStyleSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceFilterItemContainerStyleSelector(DependencyObject d, object baseValue);
    public Style get_FilterMenuButtonStyle();
    public void set_FilterMenuButtonStyle(Style value);
    public object get_FilterPaneContent();
    public void set_FilterPaneContent(object value);
    public DataTemplate get_FilterPaneContentTemplate();
    public void set_FilterPaneContentTemplate(DataTemplate value);
    public DataTemplate get_FilterItemTemplate();
    public void set_FilterItemTemplate(DataTemplate value);
    public DataTemplate get_AllFilterItemTemplate();
    public void set_AllFilterItemTemplate(DataTemplate value);
    private static void OnFilterItemTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public DataTemplateSelector get_FilterItemTemplateSelector();
    public void set_FilterItemTemplateSelector(DataTemplateSelector value);
    private static void OnFilterItemTemplateSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceFilterItemTemplateSelector(DependencyObject d, object baseValue);
    internal ContentPresenter get_FilterContentPane();
    internal RibbonFilterMenuButton get_FilterMenuButton();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    internal bool get_RibbonIsSelected();
    internal void set_RibbonIsSelected(bool value);
    private static void OnRibbonIsSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    private void RepopulateCategoryFilters();
    private static void OnCurrentFilterChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static object get_AllFilterItem();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    public DataTemplate get_CategoryTemplate();
    public void set_CategoryTemplate(DataTemplate value);
    private static void OnCategoryTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceItemTemplate(DependencyObject d, object baseValue);
    public Style get_CategoryStyle();
    public void set_CategoryStyle(Style value);
    private static void OnCategoryStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceItemContainerStyle(DependencyObject d, object baseValue);
    public DataTemplate get_GalleryItemTemplate();
    public void set_GalleryItemTemplate(DataTemplate value);
    public Style get_GalleryItemStyle();
    public void set_GalleryItemStyle(Style value);
    private static void OnNotifyGalleryItemTemplateOrStylePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    private static void OnMouseMove(object sender, MouseEventArgs e);
    internal bool DidMouseMove(MouseEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    internal void OnNavigationKeyDown(KeyEventArgs e, DependencyObject focusedElement);
    private static void OnDismissPopupThunk(object sender, RibbonDismissPopupEventArgs e);
    private void OnDismissPopup(RibbonDismissPopupEventArgs e);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual object get_PreviewCommandParameter();
    public void set_PreviewCommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    private static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void HookCommand(ICommand command);
    private void UnhookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    private static void OnCommandParameterChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual bool get_IsEnabledCore();
    private bool get_CanExecute();
    private void set_CanExecute(bool value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public Ribbon get_Ribbon();
    public void ScrollIntoView(object item);
    private static void OnLoaded(object sender, RoutedEventArgs e);
    private static void OnUnloaded(object sender, RoutedEventArgs e);
    internal bool get_ShouldGalleryItemsAcquireFocus();
    internal void set_ShouldGalleryItemsAcquireFocus(bool value);
    internal bool get_HasHighlightChangedViaMouse();
    internal void set_HasHighlightChangedViaMouse(bool value);
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    [CompilerGeneratedAttribute]
private object <OnHighlightedItemChanged>b__153_0(object unused);
}
[StyleTypedPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonGalleryCategory : HeaderedItemsControl {
    [CompilerGeneratedAttribute]
private RibbonGallery <RibbonGallery>k__BackingField;
    [CompilerGeneratedAttribute]
private Panel <ItemsHostSite>k__BackingField;
    public static DependencyProperty MinColumnCountProperty;
    public static DependencyProperty MaxColumnCountProperty;
    public static DependencyProperty ColumnsStretchToFillProperty;
    public static DependencyProperty IsSharedColumnSizeScopeProperty;
    [CompilerGeneratedAttribute]
private CollectionView <CollectionView>k__BackingField;
    public static DependencyProperty HeaderVisibilityProperty;
    private static string ItemsHostPanelName;
    private static string ItemsHostName;
    private static string HeaderPresenterName;
    private ItemsPresenter _itemsPresenter;
    private ContentPresenter _headerPresenter;
    internal AverageItemHeightInfo averageItemHeightInfo;
    internal RibbonGallery RibbonGallery { get; internal set; }
    internal Panel ItemsHostSite { get; private set; }
    internal double MaxColumnWidth { get; }
    public int MinColumnCount { get; public set; }
    public int MaxColumnCount { get; public set; }
    public bool ColumnsStretchToFill { get; public set; }
    public bool IsSharedColumnSizeScope { get; public set; }
    internal CollectionView CollectionView { get; internal set; }
    public Visibility HeaderVisibility { get; public set; }
    internal ContentPresenter HeaderPresenter { get; }
    private static RibbonGalleryCategory();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    [CompilerGeneratedAttribute]
internal RibbonGallery get_RibbonGallery();
    [CompilerGeneratedAttribute]
internal void set_RibbonGallery(RibbonGallery value);
    [CompilerGeneratedAttribute]
internal Panel get_ItemsHostSite();
    [CompilerGeneratedAttribute]
private void set_ItemsHostSite(Panel value);
    internal double get_MaxColumnWidth();
    private void OnItemContainerGeneratorStatusChanged(object sender, EventArgs e);
    public virtual void OnApplyTemplate();
    private static void OnNotifyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void NotifyPropertyChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceItemTemplate(DependencyObject d, object baseValue);
    private static object CoerceItemContainerStyle(DependencyObject d, object baseValue);
    internal void SyncProperties();
    public int get_MinColumnCount();
    public void set_MinColumnCount(int value);
    private static object CoerceMinColumnCount(DependencyObject d, object baseValue);
    public int get_MaxColumnCount();
    public void set_MaxColumnCount(int value);
    private static object CoerceMaxColumnCount(DependencyObject d, object baseValue);
    public bool get_ColumnsStretchToFill();
    public void set_ColumnsStretchToFill(bool value);
    public bool get_IsSharedColumnSizeScope();
    public void set_IsSharedColumnSizeScope(bool value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    internal void AddCurrentItemChangedListener();
    internal void RemoveCurrentItemChangedListener();
    [CompilerGeneratedAttribute]
internal CollectionView get_CollectionView();
    [CompilerGeneratedAttribute]
internal void set_CollectionView(CollectionView value);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    private void SynchronizeWithCurrentItem();
    private void OnCurrentItemChanged();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Visibility get_HeaderVisibility();
    public void set_HeaderVisibility(Visibility value);
    internal ContentPresenter get_HeaderPresenter();
}
public class System.Windows.Controls.Ribbon.RibbonGalleryItem : ContentControl {
    [CompilerGeneratedAttribute]
private RibbonGalleryCategory <RibbonGalleryCategory>k__BackingField;
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnselectedEvent;
    public static DependencyProperty IsSelectedProperty;
    private static DependencyPropertyKey IsHighlightedPropertyKey;
    public static DependencyProperty IsHighlightedProperty;
    private static DependencyPropertyKey IsPressedPropertyKey;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    private BitVector32 _bits;
    public static DependencyProperty KeyTipProperty;
    internal RibbonGalleryCategory RibbonGalleryCategory { get; internal set; }
    internal RibbonGallery RibbonGallery { get; }
    public bool IsSelected { get; public set; }
    public bool IsHighlighted { get; internal set; }
    public bool IsPressed { get; private set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    private bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.KeepKeyTipAndContentInSync { get; private set; }
    private bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.IsKeyTipSyncSource { get; private set; }
    private bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.SyncingKeyTipAndContent { get; private set; }
    public string KeyTip { get; public set; }
    private static RibbonGalleryItem();
    [CompilerGeneratedAttribute]
internal RibbonGalleryCategory get_RibbonGalleryCategory();
    [CompilerGeneratedAttribute]
internal void set_RibbonGalleryCategory(RibbonGalleryCategory value);
    internal RibbonGallery get_RibbonGallery();
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    protected internal virtual void OnSelected(RoutedEventArgs e);
    public void add_Unselected(RoutedEventHandler value);
    public void remove_Unselected(RoutedEventHandler value);
    protected internal virtual void OnUnselected(RoutedEventArgs e);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    private static void OnIsSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsHighlighted();
    internal void set_IsHighlighted(bool value);
    private static void OnIsHighlightedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsPressed();
    private void set_IsPressed(bool value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void SetSelectedOnInput();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    private sealed virtual override bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.get_KeepKeyTipAndContentInSync();
    private sealed virtual override void System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.set_KeepKeyTipAndContentInSync(bool value);
    private sealed virtual override bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.get_IsKeyTipSyncSource();
    private sealed virtual override void System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.set_IsKeyTipSyncSource(bool value);
    private sealed virtual override bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.get_SyncingKeyTipAndContent();
    private sealed virtual override void System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.set_SyncingKeyTipAndContent(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    internal void SyncKeyTipAndContent();
    private static void OnKeyTipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceKeyTip(DependencyObject d, object baseValue);
    private static void OnContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceContent(DependencyObject d, object baseValue);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonGroup : HeaderedItemsControl {
    private static DependencyPropertyKey IsCollapsedPropertyKey;
    public static DependencyProperty IsCollapsedProperty;
    public static DependencyProperty GroupSizeDefinitionsProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    private int _sizeDefinitionIndex;
    private FrameworkElement _collapsedDropDownButton;
    private Popup _collapsedGroupPopup;
    private Border _hotBackgroundBorder;
    private ContentPresenter _headerContentPresenter;
    private ContentControl _templateContentControl;
    private ItemsPresenter _itemsPresenter;
    private WeakReference _defaultGroupSizeDefinitionsRef;
    private static RibbonGroupSizeDefinition _defaultGroupSizeDefinition;
    private BitVector32 _bits;
    private Storyboard _mouseEnterStoryboard;
    private Storyboard _mouseLeaveStoryboard;
    private static double KeyTipVerticalOffsetDelta;
    private static string CollapsedDropDownButtonTemplatePartName;
    private static string HeaderContentPresenterTemplatePartName;
    private static string HotBackgroundBorderTemplatePartName;
    private static string ItemsPresenterTemplatePartName;
    private static string PopupGridTemplatePartName;
    private static string PopupTemplatePartName;
    private static string TemplateContentControlTemplatePartName;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public bool IsCollapsed { get; internal set; }
    public RibbonGroupSizeDefinitionBaseCollection GroupSizeDefinitions { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public ImageSource LargeImageSource { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    private FrameworkElement VisualChild { get; }
    private RibbonGroupSizeDefinitionBaseCollection GroupSizeDefinitionsInternal { get; }
    public bool IsDropDownOpen { get; public set; }
    internal FrameworkElement CollapsedDropDownButton { get; }
    internal ContentPresenter HeaderContentPresenter { get; }
    internal ItemsPresenter ItemsPresenter { get; }
    private bool GroupPrepared { get; private set; }
    private bool RetainFocusOnEscape { get; private set; }
    private bool GroupSizeUpdatePending { get; private set; }
    private bool InContextMenu { get; private set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonGroup();
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected internal virtual void OnRenderSizeChanged(SizeChangedInfo info);
    public bool get_IsCollapsed();
    internal void set_IsCollapsed(bool value);
    private static void OnIsCollapsedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceIsCollapsed(DependencyObject d, object baseValue);
    public RibbonGroupSizeDefinitionBaseCollection get_GroupSizeDefinitions();
    public void set_GroupSizeDefinitions(RibbonGroupSizeDefinitionBaseCollection value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    private FrameworkElement get_VisualChild();
    private RibbonGroupSizeDefinitionBaseCollection get_GroupSizeDefinitionsInternal();
    private static void OnForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    private static void OnIsDropDownOpenChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object CoerceIsDropDownOpen(DependencyObject d, object baseValue);
    private void RegisterToOpenOnLoad();
    private void OpenOnLoad(object sender, RoutedEventArgs e);
    private void RegisterOpenOnVisible();
    private void HandleIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    internal FrameworkElement get_CollapsedDropDownButton();
    internal ContentPresenter get_HeaderContentPresenter();
    internal ItemsPresenter get_ItemsPresenter();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    internal void PrepareRibbonGroup();
    internal void ClearRibbonGroup();
    internal bool IncreaseGroupSize(bool update);
    internal bool DecreaseGroupSize();
    private RibbonGroupSizeDefinition GetLargeGroupSizeDefinition();
    private static RibbonGroupSizeDefinition ReduceGroupSizeDefinition(RibbonGroupSizeDefinition groupSizeDefinition, Int32& repeatStartIndex);
    internal void UpdateGroupSizeDefinitionsAsync();
    private void UpdateGroupSizeDefinitionsCallback();
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceGroupSizeDefinitions(DependencyObject d, object baseValue);
    private void PrepareContainerSize(DependencyObject element);
    private void ApplyGroupSizeDefinitionBase(RibbonGroupSizeDefinitionBase definition);
    private bool SetAppropriatePresenterVisibility(Visibility itemsPresenterVisibility);
    private RibbonControlSizeDefinitionCollection GetControlDefinitionsForCollapsedGroup(RibbonGroupSizeDefinition groupSizeDefinition);
    private void ApplyGroupSizeDefinition(RibbonGroupSizeDefinition groupSizeDefinition);
    private void ApplyGroupTemplateSizeDefinition(RibbonGroupTemplateSizeDefinition grouptemplateSizeDefinition);
    private static void OnGroupSizeDefinitionsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsInQuickAccessToolBarChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceToolTip(DependencyObject d, object value);
    private static DoubleAnimation CreateOpacityAnimation(bool shouldTurnOn, DependencyObject target);
    private bool get_GroupPrepared();
    private void set_GroupPrepared(bool value);
    private bool get_RetainFocusOnEscape();
    private void set_RetainFocusOnEscape(bool value);
    private bool get_GroupSizeUpdatePending();
    private void set_GroupSizeUpdatePending(bool value);
    private bool get_InContextMenu();
    private void set_InContextMenu(bool value);
    private static void OnLostMouseCaptureThunk(object sender, MouseEventArgs e);
    private void OnLostMouseCaptureThunk(MouseEventArgs e);
    private static void OnClickThroughThunk(object sender, MouseButtonEventArgs e);
    private void OnClickThrough(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    private static void OnDismissPopupThunk(object sender, RibbonDismissPopupEventArgs e);
    private void OnDismissPopup(RibbonDismissPopupEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private static void OnMouseDownThunk(object sender, MouseButtonEventArgs e);
    private void OnAnyMouseDown();
    private static void OnContextMenuOpeningThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuOpeningInternal();
    private static void OnContextMenuClosingThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuClosingInternal();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private void SetUnminimizedRibbonKeyTipPlacement(Ribbon ribbon, ActivatingKeyTipEventArgs e);
    private void SetMinimizedRibbonKeyTipPlacement(Ribbon ribbon, ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object <p0>, RoutedEventArgs <p1>);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__2_0(object s, MouseEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__2_1(object s, MouseEventArgs e);
    [CompilerGeneratedAttribute]
private bool <OnLostMouseCaptureThunk>b__146_0();
    [CompilerGeneratedAttribute]
private void <OnLostMouseCaptureThunk>b__146_1(bool value);
    [CompilerGeneratedAttribute]
private void <OnDismissPopup>b__151_0(bool value);
    [CompilerGeneratedAttribute]
private bool <OnDismissPopup>b__151_1(DependencyObject d);
    [CompilerGeneratedAttribute]
private bool <OnKeyDown>b__152_0();
    [CompilerGeneratedAttribute]
private void <OnKeyDown>b__152_1(bool value);
    [CompilerGeneratedAttribute]
private bool <OnContextMenuClosingInternal>b__158_0();
}
[ContentPropertyAttribute("ControlSizeDefinitions")]
public class System.Windows.Controls.Ribbon.RibbonGroupSizeDefinition : RibbonGroupSizeDefinitionBase {
    public static DependencyProperty ControlSizeDefinitionsProperty;
    public RibbonControlSizeDefinitionCollection ControlSizeDefinitions { get; public set; }
    private static RibbonGroupSizeDefinition();
    public RibbonControlSizeDefinitionCollection get_ControlSizeDefinitions();
    public void set_ControlSizeDefinitions(RibbonControlSizeDefinitionCollection value);
    protected virtual Freezable CreateInstanceCore();
}
public abstract class System.Windows.Controls.Ribbon.RibbonGroupSizeDefinitionBase : Freezable {
    public static DependencyProperty IsCollapsedProperty;
    public bool IsCollapsed { get; public set; }
    private static RibbonGroupSizeDefinitionBase();
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
}
public class System.Windows.Controls.Ribbon.RibbonGroupSizeDefinitionBaseCollection : FreezableCollection`1<RibbonGroupSizeDefinitionBase> {
    protected virtual Freezable CreateInstanceCore();
}
[ContentPropertyAttribute("ContentTemplate")]
public class System.Windows.Controls.Ribbon.RibbonGroupTemplateSizeDefinition : RibbonGroupSizeDefinitionBase {
    public static DependencyProperty ContentTemplateProperty;
    public DataTemplate ContentTemplate { get; public set; }
    private static RibbonGroupTemplateSizeDefinition();
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    protected virtual Freezable CreateInstanceCore();
}
[ExtensionAttribute]
internal static class System.Windows.Controls.Ribbon.RibbonHelper : object {
    private static ResourceReferenceExpressionConverter _rreConverter;
    private static PropertyAndTransferMode[] _automationProperties;
    private static PropertyAndTransferMode[] _feProperties;
    private static PropertyAndTransferMode[] _controlProperties;
    private static PropertyAndTransferMode[] _contentControlProperties;
    private static PropertyAndTransferMode[] _buttonProperties;
    private static PropertyAndTransferMode[] _toggleButtonProperties;
    private static PropertyAndTransferMode[] _itemsControlProperties;
    private static PropertyAndTransferMode[] _headeredItemsControlProperties;
    private static PropertyAndTransferMode[] _ribbonProperties;
    private static PropertyAndTransferMode[] _ribbonBrushProperties;
    private static PropertyAndTransferMode[] _ribbonMenuButtonProperties;
    private static PropertyAndTransferMode[] _ribbonSplitButtonProperties;
    private static PropertyAndTransferMode[] _ribbonMenuItemProperties;
    private static PropertyAndTransferMode[] _ribbonSplitMenuItemProperties;
    private static PropertyAndTransferMode[] _ribbonGalleryProperties;
    private static PropertyAndTransferMode[] _ribbonGalleryCategoryProperties;
    private static PropertyAndTransferMode[] _ribbonGalleryItemProperties;
    private static PropertyAndTransferMode[] _ribbonGroupProperties;
    private static PropertyAndTransferMode[] _textBoxProperties;
    private static PropertyAndTransferMode[] _ribbonComboBoxProperties;
    private static PropertyAndTransferMode[] _scrollProperties;
    private static object _syncRoot;
    private static CultureInfo invariantEnglishUS;
    public static CultureInfo InvariantEnglishUS { get; }
    private static RibbonHelper();
    public static object CoerceRibbonToolTip(DependencyObject d, object value);
    public static void OnRibbonToolTipPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetIsContentTooltip(FrameworkElement visualChild, object content);
    public static void SetContentAsToolTip(FrameworkElement element, FrameworkElement visualChild, object content, bool value);
    internal static void FindAndHookPopup(DependencyObject element, Popup& popup);
    private static void OnPopupOpenedOrClosed(object sender, EventArgs e);
    private static void UpdatePopupAnimation(Popup popup);
    public static ValueAndValueSource GetValueAndValueSource(DependencyObject d, DependencyProperty property);
    private static void RestoreValue(DependencyObject d, DependencyProperty property, ValueAndValueSource v);
    public static void IgnoreDPInheritedFromParentItemsControl(ItemsControl itemsControl, ItemsControl parentItemsControl, ValueAndValueSource itemTemplate, ValueAndValueSource itemTemplateSelector, ValueAndValueSource itemStringFormat, ValueAndValueSource itemContainerStyle, ValueAndValueSource itemContainerStyleSelector, ValueAndValueSource alternationCount, ValueAndValueSource itemBindingGroup, ValueAndValueSource headerTemplate, ValueAndValueSource headerTemplateSelector, ValueAndValueSource headerStringFormat);
    public static int FindAccessKeyMarker(string text);
    internal static void TransferPseudoInheritedProperties(DependencyObject parent, DependencyObject child);
    internal static void ClearPseudoInheritedProperties(DependencyObject child);
    internal static void EnableFocusVisual(DependencyObject d);
    internal static void DisableFocusVisual(DependencyObject d);
    internal static bool IsKeyboardMostRecentInputDevice();
    public static bool MoveFocus(FocusNavigationDirection direction);
    public static DependencyObject PredictFocus(DependencyObject element, FocusNavigationDirection direction);
    public static bool Focus(DependencyObject element);
    internal static bool NavigateToFirstItem(ItemsControl itemsControl, Action`1<int> bringIntoViewCallback, Func`2<FrameworkElement, bool> additionalCheck);
    internal static bool NavigateToLastItem(ItemsControl itemsControl, Action`1<int> bringIntoViewCallback, Func`2<FrameworkElement, bool> additionalCheck);
    internal static FrameworkElement FindContainer(ItemsControl itemsControl, int startIndex, int direction, Action`1<int> bringIntoViewCallback, Func`2<FrameworkElement, bool> additionalCheck);
    internal static bool NavigateToItem(ItemsControl parent, int itemIndex, Action`1<int> bringIntoViewCallback);
    internal static bool NavigateToNextMenuItemOrGallery(ItemsControl parent, int startIndex, Action`1<int> bringIntoViewCallback);
    internal static bool NavigateToPreviousMenuItemOrGallery(ItemsControl parent, int startIndex, Action`1<int> bringIntoViewCallback);
    private static bool NavigateUpToGallery(RibbonGallery gallery);
    private static bool NavigateDownToGallery(RibbonGallery gallery);
    private static bool IsContainerFocusable(FrameworkElement container);
    private static bool IsContainerVisible(FrameworkElement container);
    private static bool IsMenuItemFocusable(FrameworkElement container);
    internal static bool NavigateAndHighlightGalleryItem(RibbonGalleryItem focusedElement, FocusNavigationDirection direction);
    internal static bool NavigatePageAndHighlightRibbonGalleryItem(RibbonGallery gallery, RibbonGalleryItem galleryItem, FocusNavigationDirection direction);
    internal static bool NavigatePageAndHighlightRibbonGalleryItem(RibbonGallery gallery, RibbonGalleryItem galleryItem, FocusNavigationDirection direction, RibbonGalleryItem& highlightedGalleryItem);
    internal static void AddHandler(DependencyObject element, RoutedEvent routedEvent, Delegate handler);
    internal static void RemoveHandler(DependencyObject element, RoutedEvent routedEvent, Delegate handler);
    public static bool IsOurWindow(IntPtr hwnd, DependencyObject element);
    public static void HandleLostMouseCapture(UIElement element, MouseEventArgs e, Func`1<bool> getter, Action`1<bool> setter, UIElement targetCapture, UIElement targetFocus);
    private static bool ReacquireCapture(UIElement targetCapture, UIElement targetFocus);
    public static bool IsMousePhysicallyOver(UIElement element);
    internal static void HandleClickThrough(object sender, MouseButtonEventArgs e, UIElement alternateCaptureHost);
    internal static void HandleDismissPopup(RibbonDismissPopupEventArgs e, Action`1<bool> setter, Predicate`1<DependencyObject> cancelPredicate, UIElement mouseOverTarget, UIElement alternateMouseOverTarget);
    public static void AsyncSetFocusAndCapture(UIElement element, Func`1<bool> getter, UIElement targetCapture, UIElement targetFocus);
    public static void RestoreFocusAndCapture(UIElement targetCapture, UIElement targetFocus);
    public static void HandleIsDropDownChanged(UIElement element, Func`1<bool> getter, UIElement targetCapture, UIElement targetFocus);
    internal static void HandleDropDownKeyDown(object sender, KeyEventArgs e, Func`1<bool> gettor, Action`1<bool> settor, UIElement targetFocusOnFalse, UIElement targetFocusContainerOnTrue);
    [ExtensionAttribute]
public static UIElement TryGetChild(Popup popup);
    public static bool IsCaptureInSubtree(UIElement element);
    public static bool IsCaptureInVisualSubtree(UIElement element);
    internal static bool IsAncestorOf(DependencyObject ancestor, DependencyObject element);
    public static void DelayCoerceProperty(DependencyObject element, DependencyProperty property);
    public static bool IsISupportStarLayout(DependencyObject d);
    public static void InitializeStarLayoutManager(DependencyObject starLayoutProvider);
    internal static object OnCoerceContextMenu(DependencyObject d, object baseValue);
    internal static void OnContextMenuChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal static object OnCoerceQuickAccessToolBarId(DependencyObject d, object baseValue);
    internal static void OnIsInQATChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal static object OnCoerceCanAddToQuickAccessToolBarDirectly(DependencyObject d, object baseValue);
    internal static void OnCanAddToQuickAccessToolBarDirectlyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal static bool ExistsInQAT(DependencyObject element);
    private static void TransferProperty(UIElement original, UIElement clone, DependencyProperty dp, TransferMode mode);
    private static void TransferProperty(UIElement original, UIElement clone, DependencyProperty originalProperty, DependencyProperty cloneProperty, TransferMode mode);
    internal static void PopulatePropertyLists();
    private static object CreateClone(object original);
    internal static object CreateClone(object original, bool allowTransformations);
    private static FrameworkElement CreateInstance(FrameworkElement original, bool allowTransformations);
    private static FrameworkElement WrapClone(FrameworkElement clone, bool allowTransformations);
    private static void TransferProperties(FrameworkElement original, FrameworkElement clone, bool cloningForTemplatePart);
    private static void TransferProperties(FrameworkElement original, FrameworkElement clone, PropertyAndTransferMode[] properties);
    private static void TransferItems(ItemsControl originalItemsControl, ItemsControl cloneItemsControl);
    private static void TransferMarkupProperties(object original, object clone);
    internal static void SetApplicationMenuLevel(bool parentIsTopLevel, DependencyObject element);
    internal static bool CoerceIsSubmenuOpenForTopLevelItem(RibbonMenuItem menuItem, ItemsControl parentItemsControl, bool baseValue);
    internal static void HookPopupForTopLevelMenuItem(RibbonMenuItem menuItem, ItemsControl parentItemsControl);
    internal static void UnhookPopupForTopLevelMenuItem(RibbonMenuItem menuItem);
    public static void OnApplicationMenuItemUpDownKeyDown(KeyEventArgs e, RibbonMenuItem menuItem);
    private static bool IsEndFocusableMenuItem(RibbonMenuItem menuItem, bool isFirst);
    public static PresentationSource GetPresentationSourceFromVisual(Visual visual);
    public static void Beep();
    public static CultureInfo GetCultureInfo(DependencyObject element);
    public static CultureInfo get_InvariantEnglishUS();
    public static UIElement GetContainingUIElement(DependencyObject element);
    public static void SetDefaultQatKeyTipPlacement(ActivatingKeyTipEventArgs e);
    public static void SetKeyTipPlacementForButton(DependencyObject element, ActivatingKeyTipEventArgs e, UIElement mediumPlacementTarget);
    public static void SetKeyTipPlacementForTextBox(DependencyObject element, ActivatingKeyTipEventArgs e, UIElement nonLargePlacementTarget);
    public static void SetKeyTipPlacementForSplitButtonHeader(RibbonSplitButton splitButton, ActivatingKeyTipEventArgs e, UIElement mediumPlacementTarget);
    public static void SetKeyTipPlacementForSplitButtonDropDown(RibbonSplitButton splitButton, ActivatingKeyTipEventArgs e, UIElement mediumPlacementTarget);
    public static void OpenParentRibbonGroupDropDownSync(FrameworkElement fe, bool templateApplied);
    internal static AutomationPeer CreatePeer(UIElement element);
    public static void SetDropDownHeight(FrameworkElement itemsPresenter, bool hasGallery, double dropDownHeight);
    internal static void InvalidateScrollBarVisibility(ScrollViewer submenuScrollViewer);
    internal static Matrix GetTransformToDevice(Visual targetVisual);
    public static bool FixMeasureInvalidationPaths(DependencyObject element);
}
public enum System.Windows.Controls.Ribbon.RibbonImageSize : Enum {
    public int value__;
    public static RibbonImageSize Collapsed;
    public static RibbonImageSize Small;
    public static RibbonImageSize Large;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonMenuButton : Menu {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    [CompilerGeneratedAttribute]
private EventHandler DropDownOpened;
    [CompilerGeneratedAttribute]
private EventHandler DropDownClosed;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty DropDownHeightProperty;
    public static DependencyProperty CanUserResizeVerticallyProperty;
    public static DependencyProperty CanUserResizeHorizontallyProperty;
    internal static DependencyPropertyKey HasGalleryPropertyKey;
    public static DependencyProperty HasGalleryProperty;
    private static DependencyPropertyKey IsDropDownPositionedAbovePropertyKey;
    public static DependencyProperty IsDropDownPositionedAboveProperty;
    private object _currentItem;
    internal static RoutedEvent RibbonIsSelectedChangedEvent;
    private static string ResizeThumbTemplatePartName;
    private static string ItemsPresenterTemplatePartName;
    private static string PopupTemplatePartName;
    internal static string ToggleButtonTemplatePartName;
    private static string SubMenuScrollViewerTemplatePartName;
    private ScrollViewer _submenuScrollViewer;
    private RibbonToggleButton _partToggleButton;
    private Thumb _resizeThumb;
    private FrameworkElement _itemsPresenter;
    private RibbonMenuItemsPanel _itemsHost;
    private Popup _popup;
    private FrameworkElement _ribbonCurrentSelection;
    private BitVector32 _bits;
    private Rect _screenBounds;
    private UIElement _popupRoot;
    private int _galleryCount;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public double DropDownHeight { get; public set; }
    public bool CanUserResizeVertically { get; public set; }
    public bool CanUserResizeHorizontally { get; public set; }
    public bool HasGallery { get; private set; }
    public bool IsDropDownPositionedAbove { get; private set; }
    protected internal bool HandlesScrolling { get; }
    internal FrameworkElement RibbonCurrentSelection { get; internal set; }
    internal RibbonMenuItemsPanel InternalItemsHost { get; internal set; }
    internal Popup Popup { get; }
    internal ScrollViewer SubMenuScrollViewer { get; }
    private bool PseudoIsKeyboardFocusWithin { get; private set; }
    internal bool RetainFocusOnEscape { get; internal set; }
    private bool InContextMenu { get; private set; }
    internal bool TemplateApplied { get; internal set; }
    private bool HandleSpaceEnterUp { get; private set; }
    internal RibbonToggleButton PartToggleButton { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonMenuButton();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    private static void OnPseudoInheritedPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal virtual void TransferPseudoInheritedProperties();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    [CompilerGeneratedAttribute]
public void add_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DropDownClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownClosed(EventHandler value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public double get_DropDownHeight();
    public void set_DropDownHeight(double value);
    public bool get_CanUserResizeVertically();
    public void set_CanUserResizeVertically(bool value);
    public bool get_CanUserResizeHorizontally();
    public void set_CanUserResizeHorizontally(bool value);
    public bool get_HasGallery();
    private void set_HasGallery(bool value);
    public bool get_IsDropDownPositionedAbove();
    private void set_IsDropDownPositionedAbove(bool value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected internal virtual bool get_HandlesScrolling();
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal void OnNavigationKeyDown(KeyEventArgs e);
    private static void OnRibbonIsSelectedChanged(object sender, RoutedPropertyChangedEventArgs`1<bool> e);
    internal FrameworkElement get_RibbonCurrentSelection();
    internal void set_RibbonCurrentSelection(FrameworkElement value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void OnPopupResizeStarted(object sender, DragStartedEventArgs e);
    private void OnPopupResize(object sender, DragDeltaEventArgs e);
    internal bool ResizePopupInternal(double newWidth, double newHeight);
    internal void BringIndexIntoView(int index);
    private void OnDropDownOpened(EventArgs e);
    private void OnDropDownClosed(EventArgs e);
    private static void OnIsDropDownOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal virtual void OnIsDropDownOpenChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceIsDropDownOpen(DependencyObject d, object baseValue);
    private void RegisterToOpenOnLoad();
    private void OpenOnLoad(object sender, RoutedEventArgs e);
    private void RegisterOpenOnVisible();
    private void HandleIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private static bool IsHeightValid(object value);
    private static void OnHasGalleryChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnItemContainerGeneratorStatusChanged(object sender, EventArgs e);
    private static object CoerceDropDownHeightProperty(DependencyObject d, object baseValue);
    private static object CoerceCanUserResizeProperty(DependencyObject d, object baseValue);
    private object UpdateDropDownPosition(object arg);
    internal RibbonMenuItemsPanel get_InternalItemsHost();
    internal void set_InternalItemsHost(RibbonMenuItemsPanel value);
    internal Popup get_Popup();
    internal ScrollViewer get_SubMenuScrollViewer();
    private bool get_PseudoIsKeyboardFocusWithin();
    private void set_PseudoIsKeyboardFocusWithin(bool value);
    internal bool get_RetainFocusOnEscape();
    internal void set_RetainFocusOnEscape(bool value);
    private bool get_InContextMenu();
    private void set_InContextMenu(bool value);
    internal bool get_TemplateApplied();
    internal void set_TemplateApplied(bool value);
    private bool get_HandleSpaceEnterUp();
    private void set_HandleSpaceEnterUp(bool value);
    internal RibbonToggleButton get_PartToggleButton();
    protected virtual void HandleMouseButton(MouseButtonEventArgs e);
    private static void OnLostMouseCaptureThunk(object sender, MouseEventArgs e);
    private void OnLostMouseCaptureThunk(MouseEventArgs e);
    private static void OnDismissPopupThunk(object sender, RibbonDismissPopupEventArgs e);
    protected virtual void OnDismissPopup(RibbonDismissPopupEventArgs e);
    private static void OnClickThroughThunk(object sender, MouseButtonEventArgs e);
    private void OnClickThrough(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    private static void OnGotKeyboardFocusThunk(object sender, KeyboardFocusChangedEventArgs e);
    private void OnGotKeyboardFocusThunk(KeyboardFocusChangedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void BaseOnIsKeyboardFocusWithin();
    private static void OnMouseDownThunk(object sender, MouseButtonEventArgs e);
    internal virtual void OnAnyMouseDown(MouseButtonEventArgs e);
    private static void OnContextMenuOpeningThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuOpeningInternal();
    private static void OnContextMenuClosingThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuClosingInternal();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <OnKeyDown>b__126_0();
    [CompilerGeneratedAttribute]
private void <OnKeyDown>b__126_1(bool value);
    [CompilerGeneratedAttribute]
private bool <OnIsDropDownOpenChanged>b__141_0();
    [CompilerGeneratedAttribute]
private bool <OnLostMouseCaptureThunk>b__196_0();
    [CompilerGeneratedAttribute]
private void <OnLostMouseCaptureThunk>b__196_1(bool value);
    [CompilerGeneratedAttribute]
private void <OnDismissPopup>b__198_0(bool value);
    [CompilerGeneratedAttribute]
private bool <OnDismissPopup>b__198_1(DependencyObject d);
    [CompilerGeneratedAttribute]
private bool <OnContextMenuClosingInternal>b__212_0();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonMenuItem : MenuItem {
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ImageSourceProperty;
    public static DependencyProperty QuickAccessToolBarImageSourceProperty;
    private static DependencyPropertyKey IsDropDownPositionedLeftPropertyKey;
    public static DependencyProperty IsDropDownPositionedLeftProperty;
    public static DependencyProperty CanUserResizeVerticallyProperty;
    public static DependencyProperty CanUserResizeHorizontallyProperty;
    public static DependencyProperty DropDownHeightProperty;
    public static DependencyProperty HasGalleryProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    private object _currentItem;
    internal static DependencyProperty RibbonIsSelectedProperty;
    private static string ResizeThumbTemplatePartName;
    private static string ItemsPresenterTemplatePartName;
    private static string PopupTemplatePartName;
    internal static string SideBarBorderTemplatePartName;
    private static string SubMenuScrollViewerTemplatePartName;
    private DispatcherTimer _closeSubmenuTimer;
    private DispatcherTimer _openSubmenuTimer;
    private Thumb _resizeThumb;
    private ItemsPresenter _itemsPresenter;
    private RibbonMenuItemsPanel _itemsHost;
    private Popup _popup;
    private FrameworkElement _ribbonCurrentSelection;
    private Rect _screenBounds;
    private UIElement _popupRoot;
    private UIElement _sideBarBorder;
    private ScrollViewer _submenuScrollViewer;
    private int _galleryCount;
    private double _popupOffsetY;
    private Key _handleNextUpKey;
    private BitVector32 _bits;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public ImageSource QuickAccessToolBarImageSource { get; public set; }
    public bool IsDropDownPositionedLeft { get; private set; }
    public bool CanUserResizeVertically { get; public set; }
    public bool CanUserResizeHorizontally { get; public set; }
    public double DropDownHeight { get; public set; }
    public bool HasGallery { get; private set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    internal Popup Popup { get; }
    internal DispatcherTimer CloseSubmenuTimer { get; }
    internal int CloseSubmenuTimerDelayBuffer { get; }
    internal bool CanOpenSubMenu { get; }
    internal RibbonMenuItemsPanel InternalItemsHost { get; internal set; }
    private FrameworkElement CurrentSibling { get; }
    internal bool RibbonIsSelected { get; internal set; }
    private FrameworkElement RibbonCurrentSelection { get; private set; }
    private bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.KeepKeyTipAndContentInSync { get; private set; }
    private bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.IsKeyTipSyncSource { get; private set; }
    private bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.SyncingKeyTipAndContent { get; private set; }
    private bool IgnoreNextMouseLeave { get; private set; }
    private bool InContextMenu { get; private set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    internal UIElement SideBarBorder { get; }
    public string KeyTip { get; public set; }
    private static RibbonMenuItem();
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    private static void OnImageSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ImageSource get_QuickAccessToolBarImageSource();
    public void set_QuickAccessToolBarImageSource(ImageSource value);
    private static object CoerceQuickAccessToolBarImageSource(DependencyObject d, object baseValue);
    public bool get_IsDropDownPositionedLeft();
    private void set_IsDropDownPositionedLeft(bool value);
    public bool get_CanUserResizeVertically();
    public void set_CanUserResizeVertically(bool value);
    public bool get_CanUserResizeHorizontally();
    public void set_CanUserResizeHorizontally(bool value);
    public double get_DropDownHeight();
    public void set_DropDownHeight(double value);
    public bool get_HasGallery();
    private void set_HasGallery(bool value);
    private static void OnHasGalleryChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnItemContainerGeneratorStatusChanged(object sender, EventArgs e);
    private static object CoerceDropDownHeightProperty(DependencyObject d, object baseValue);
    private static object CoerceCanUserResizeProperty(DependencyObject d, object baseValue);
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool ShouldApplyItemContainerStyle(DependencyObject container, object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public virtual void OnApplyTemplate();
    private void OnPopupOpened(object sender, EventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    internal void FocusOrSelect();
    private void UpdateIsPressed();
    internal bool HandleLeftKeyDown(DependencyObject originalSource);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    internal Popup get_Popup();
    private void OnPopupResizeStarted(object sender, DragStartedEventArgs e);
    private void OnPopupResize(object sender, DragDeltaEventArgs e);
    internal bool ResizePopupInternal(double newWidth, double newHeight);
    private void SetTimerToOpenSubmenu();
    internal void SetTimerToCloseSubmenu();
    private static void StopTimer(DispatcherTimer& timer);
    private void StartTimer(DispatcherTimer timer);
    internal DispatcherTimer get_CloseSubmenuTimer();
    internal virtual int get_CloseSubmenuTimerDelayBuffer();
    private void OpenRibbonSubmenuWithKeyboard();
    private void OpenSubmenu();
    internal virtual bool get_CanOpenSubMenu();
    private void CloseSubmenu();
    internal void BringIndexIntoView(int index);
    private static bool IsContainerFocusable(FrameworkElement container);
    private static void OnIsCheckedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsSubmenuOpenChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private object UpdateDropDownPosition(object arg);
    private CustomPopupPlacement[] PlacePopup(Size popupSize, Size targetSize, Point offset);
    internal RibbonMenuItemsPanel get_InternalItemsHost();
    internal void set_InternalItemsHost(RibbonMenuItemsPanel value);
    private FrameworkElement get_CurrentSibling();
    internal bool get_RibbonIsSelected();
    internal void set_RibbonIsSelected(bool value);
    private static void OnRibbonIsSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnRibbonIsSelectedChanged(object sender, RoutedPropertyChangedEventArgs`1<bool> e);
    private FrameworkElement get_RibbonCurrentSelection();
    private void set_RibbonCurrentSelection(FrameworkElement value);
    private sealed virtual override bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.get_KeepKeyTipAndContentInSync();
    private sealed virtual override void System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.set_KeepKeyTipAndContentInSync(bool value);
    private sealed virtual override bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.get_IsKeyTipSyncSource();
    private sealed virtual override void System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.set_IsKeyTipSyncSource(bool value);
    private sealed virtual override bool System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.get_SyncingKeyTipAndContent();
    private sealed virtual override void System.Windows.Controls.Ribbon.ISyncKeyTipAndContent.set_SyncingKeyTipAndContent(bool value);
    private bool get_IgnoreNextMouseLeave();
    private void set_IgnoreNextMouseLeave(bool value);
    private bool get_InContextMenu();
    private void set_InContextMenu(bool value);
    protected virtual void OnClick();
    private static void OnDismissPopupThunk(object sender, RibbonDismissPopupEventArgs e);
    internal virtual void OnDismissPopup(RibbonDismissPopupEventArgs e);
    private static void OnClickThroughThunk(object sender, MouseButtonEventArgs e);
    private void OnClickThrough(MouseButtonEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void ClickItemInternal();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    internal UIElement get_SideBarBorder();
    public string get_KeyTip();
    public void set_KeyTip(string value);
    internal void SyncKeyTipAndContent();
    private static void OnKeyTipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceKeyTip(DependencyObject d, object baseValue);
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceHeader(DependencyObject d, object baseValue);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
    private static void OnContextMenuOpeningThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuOpeningInternal();
    private static void OnContextMenuClosingThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuClosingInternal();
    [CompilerGeneratedAttribute]
private bool <OnKeyDown>b__100_0();
    [CompilerGeneratedAttribute]
private void <OnKeyDown>b__100_1(bool value);
    [CompilerGeneratedAttribute]
private void <OnLostKeyboardFocus>b__104_0();
    [CompilerGeneratedAttribute]
private void <SetTimerToOpenSubmenu>b__111_0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <SetTimerToCloseSubmenu>b__112_0(object sender, EventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonQuickAccessToolBar : ItemsControl {
    private static string MainPanelTemplatePartName;
    private static string OverflowPanelTemplatePartName;
    private static string OverflowPopupTemplatePartName;
    private static string OverflowButtonTemplatePartName;
    private RibbonQuickAccessToolBarPanel _mainPanel;
    private RibbonQuickAccessToolBarOverflowPanel _overflowPanel;
    private Popup _overflowPopup;
    private RibbonToggleButton _overflowButton;
    private BitVector32 _bits;
    private static string _overflowButtonToolTipText;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty IsOverflowOpenProperty;
    [DesignerSerializationVisibilityAttribute("0")]
private static DependencyPropertyKey HasOverflowItemsPropertyKey;
    public static DependencyProperty HasOverflowItemsProperty;
    internal static DependencyPropertyKey IsOverflowItemPropertyKey;
    public static DependencyProperty IsOverflowItemProperty;
    public static RoutedEvent CloneEvent;
    public static DependencyProperty CustomizeMenuButtonProperty;
    private bool InContextMenu { get; private set; }
    private bool RetainFocusOnEscape { get; private set; }
    internal RibbonQuickAccessToolBarPanel MainPanel { get; }
    internal RibbonQuickAccessToolBarOverflowPanel OverflowPanel { get; }
    public Ribbon Ribbon { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public bool IsOverflowOpen { get; public set; }
    public bool HasOverflowItems { get; internal set; }
    public RibbonMenuButton CustomizeMenuButton { get; public set; }
    private static RibbonQuickAccessToolBar();
    private bool get_InContextMenu();
    private void set_InContextMenu(bool value);
    private bool get_RetainFocusOnEscape();
    private void set_RetainFocusOnEscape(bool value);
    internal RibbonQuickAccessToolBarPanel get_MainPanel();
    internal RibbonQuickAccessToolBarOverflowPanel get_OverflowPanel();
    public Ribbon get_Ribbon();
    public bool get_IsOverflowOpen();
    public void set_IsOverflowOpen(bool value);
    private static void OnIsOverflowOpenChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceIsOverflowOpen(DependencyObject d, object baseValue);
    public bool get_HasOverflowItems();
    internal void set_HasOverflowItems(bool value);
    private static void OnHasOverflowItemsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    internal static void SetIsOverflowItem(DependencyObject element, object value);
    public static bool GetIsOverflowItem(DependencyObject element);
    public virtual void OnApplyTemplate();
    private void InvalidateLayout();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private static void OnClickThroughThunk(object sender, MouseButtonEventArgs e);
    private void OnClickThrough(MouseButtonEventArgs e);
    private static void OnLostMouseCaptureThunk(object sender, MouseEventArgs e);
    private void OnLostMouseCaptureThunk(MouseEventArgs e);
    private static void OnDismissPopupThunk(object sender, RibbonDismissPopupEventArgs e);
    private void OnDismissPopup(RibbonDismissPopupEventArgs e);
    private static void OnMouseDownThunk(object sender, MouseButtonEventArgs e);
    private void OnAnyMouseDown();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private static void OnContextMenuOpeningThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuOpeningInternal();
    private static void OnContextMenuClosingThunk(object sender, ContextMenuEventArgs e);
    private void OnContextMenuClosingInternal();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    public static void AddCloneHandler(DependencyObject element, RibbonQuickAccessToolBarCloneEventHandler handler);
    public static void RemoveCloneHandler(DependencyObject element, RibbonQuickAccessToolBarCloneEventHandler handler);
    internal bool ContainsId(object targetID);
    public RibbonMenuButton get_CustomizeMenuButton();
    public void set_CustomizeMenuButton(RibbonMenuButton value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnPreviewKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnPreviewKeyTipAccessed(KeyTipAccessedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <OnLostMouseCaptureThunk>b__48_0();
    [CompilerGeneratedAttribute]
private void <OnLostMouseCaptureThunk>b__48_1(bool value);
    [CompilerGeneratedAttribute]
private void <OnDismissPopup>b__50_0(bool value);
    [CompilerGeneratedAttribute]
private bool <OnDismissPopup>b__50_1(DependencyObject d);
    [CompilerGeneratedAttribute]
private bool <OnKeyDown>b__53_0();
    [CompilerGeneratedAttribute]
private void <OnKeyDown>b__53_1(bool value);
    [CompilerGeneratedAttribute]
private bool <OnContextMenuClosingInternal>b__57_0();
}
public class System.Windows.Controls.Ribbon.RibbonQuickAccessToolBarCloneEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private UIElement <CloneInstance>k__BackingField;
    private UIElement _instanceToBeCloned;
    public UIElement InstanceToBeCloned { get; }
    public UIElement CloneInstance { get; public set; }
    public RibbonQuickAccessToolBarCloneEventArgs(UIElement targetElement);
    public UIElement get_InstanceToBeCloned();
    [CompilerGeneratedAttribute]
public UIElement get_CloneInstance();
    [CompilerGeneratedAttribute]
public void set_CloneInstance(UIElement value);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public class System.Windows.Controls.Ribbon.RibbonQuickAccessToolBarCloneEventHandler : MulticastDelegate {
    public RibbonQuickAccessToolBarCloneEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RibbonQuickAccessToolBarCloneEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RibbonQuickAccessToolBarCloneEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonRadioButton : RadioButton {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    private BitVector32 _bits;
    private Image _image;
    private static string ImageTemplatePart;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    private bool CoerceFocusable { get; private set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonRadioButton();
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    private static object OnCoerceFocusable(DependencyObject d, object baseValue);
    private bool get_CoerceFocusable();
    private void set_CoerceFocusable(bool value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonSeparator : Separator {
    public static DependencyProperty LabelProperty;
    public static DependencyProperty RibbonProperty;
    private static DependencyProperty _privateSharedSizeScopeProperty;
    public string Label { get; public set; }
    public Ribbon Ribbon { get; }
    internal object DefaultStyleKeyInternal { get; internal set; }
    private DependencyProperty PrivateSharedSizeScopeProperty { get; }
    private static RibbonSeparator();
    public string get_Label();
    public void set_Label(string value);
    public Ribbon get_Ribbon();
    internal object get_DefaultStyleKeyInternal();
    internal void set_DefaultStyleKeyInternal(object value);
    protected internal virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    private DependencyProperty get_PrivateSharedSizeScopeProperty();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonSplitButton : RibbonMenuButton {
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty DropDownToolTipTitleProperty;
    public static DependencyProperty DropDownToolTipDescriptionProperty;
    public static DependencyProperty DropDownToolTipImageSourceProperty;
    public static DependencyProperty DropDownToolTipFooterTitleProperty;
    public static DependencyProperty DropDownToolTipFooterDescriptionProperty;
    public static DependencyProperty DropDownToolTipFooterImageSourceProperty;
    public static RoutedEvent ClickEvent;
    public static DependencyProperty LabelPositionProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty HeaderQuickAccessToolBarIdProperty;
    private static string HeaderButtonTemplatePartName;
    private ButtonBase _headerButton;
    private RibbonToggleButton _toggleButton;
    public static DependencyProperty HeaderKeyTipProperty;
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public string DropDownToolTipTitle { get; public set; }
    public string DropDownToolTipDescription { get; public set; }
    public ImageSource DropDownToolTipImageSource { get; public set; }
    public string DropDownToolTipFooterTitle { get; public set; }
    public string DropDownToolTipFooterDescription { get; public set; }
    public ImageSource DropDownToolTipFooterImageSource { get; public set; }
    public RibbonSplitButtonLabelPosition LabelPosition { get; public set; }
    public bool IsCheckable { get; public set; }
    public bool IsChecked { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    internal ButtonBase HeaderButton { get; }
    public object HeaderQuickAccessToolBarId { get; public set; }
    public string HeaderKeyTip { get; public set; }
    private static RibbonSplitButton();
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public string get_DropDownToolTipTitle();
    public void set_DropDownToolTipTitle(string value);
    public string get_DropDownToolTipDescription();
    public void set_DropDownToolTipDescription(string value);
    public ImageSource get_DropDownToolTipImageSource();
    public void set_DropDownToolTipImageSource(ImageSource value);
    public string get_DropDownToolTipFooterTitle();
    public void set_DropDownToolTipFooterTitle(string value);
    public string get_DropDownToolTipFooterDescription();
    public void set_DropDownToolTipFooterDescription(string value);
    public ImageSource get_DropDownToolTipFooterImageSource();
    public void set_DropDownToolTipFooterImageSource(ImageSource value);
    private static void OnDropDownToolTipPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public RibbonSplitButtonLabelPosition get_LabelPosition();
    public void set_LabelPosition(RibbonSplitButtonLabelPosition value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    private void OnHeaderClicked(object sender, RoutedEventArgs e);
    private static void OnIsCheckedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void SetBorderThickess();
    internal virtual void TransferPseudoInheritedProperties();
    internal ButtonBase get_HeaderButton();
    public object get_HeaderQuickAccessToolBarId();
    public void set_HeaderQuickAccessToolBarId(object value);
    public string get_HeaderKeyTip();
    public void set_HeaderKeyTip(string value);
    private Image GetHeaderImage();
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
}
public enum System.Windows.Controls.Ribbon.RibbonSplitButtonLabelPosition : Enum {
    public int value__;
    public static RibbonSplitButtonLabelPosition Header;
    public static RibbonSplitButtonLabelPosition DropDown;
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonSplitMenuItem : RibbonMenuItem {
    public static DependencyProperty DropDownToolTipTitleProperty;
    public static DependencyProperty DropDownToolTipDescriptionProperty;
    public static DependencyProperty DropDownToolTipImageSourceProperty;
    public static DependencyProperty DropDownToolTipFooterTitleProperty;
    public static DependencyProperty DropDownToolTipFooterDescriptionProperty;
    public static DependencyProperty DropDownToolTipFooterImageSourceProperty;
    public static DependencyProperty HeaderQuickAccessToolBarIdProperty;
    private static DependencyProperty IsPressedInternalProperty;
    private static string HeaderButtonTemplatePart;
    private static string ArrowButtonTemplatePart;
    private ButtonBase _headerButton;
    private RibbonToggleButton _partArrowButton;
    private ButtonBase _partHeaderButton;
    private Border _highlightLeftBorder;
    private Border _highlightRightBorder;
    public static DependencyProperty HeaderKeyTipProperty;
    public string DropDownToolTipTitle { get; public set; }
    public string DropDownToolTipDescription { get; public set; }
    public ImageSource DropDownToolTipImageSource { get; public set; }
    public string DropDownToolTipFooterTitle { get; public set; }
    public string DropDownToolTipFooterDescription { get; public set; }
    public ImageSource DropDownToolTipFooterImageSource { get; public set; }
    protected bool IsEnabledCore { get; }
    public object HeaderQuickAccessToolBarId { get; public set; }
    internal bool CanOpenSubMenu { get; }
    private bool IsPressedInternal { get; private set; }
    internal RibbonToggleButton ArrowToggleButton { get; }
    internal ButtonBase HeaderButton { get; }
    public string HeaderKeyTip { get; public set; }
    private static RibbonSplitMenuItem();
    public string get_DropDownToolTipTitle();
    public void set_DropDownToolTipTitle(string value);
    public string get_DropDownToolTipDescription();
    public void set_DropDownToolTipDescription(string value);
    public ImageSource get_DropDownToolTipImageSource();
    public void set_DropDownToolTipImageSource(ImageSource value);
    public string get_DropDownToolTipFooterTitle();
    public void set_DropDownToolTipFooterTitle(string value);
    public string get_DropDownToolTipFooterDescription();
    public void set_DropDownToolTipFooterDescription(string value);
    public ImageSource get_DropDownToolTipFooterImageSource();
    public void set_DropDownToolTipFooterImageSource(ImageSource value);
    private static void OnDropDownToolTipPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void OnHeaderClicked(object sender, RoutedEventArgs e);
    private static void OnIsCheckedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual bool get_IsEnabledCore();
    public object get_HeaderQuickAccessToolBarId();
    public void set_HeaderQuickAccessToolBarId(object value);
    internal virtual void OnDismissPopup(RibbonDismissPopupEventArgs e);
    private void SetIsPressedBinding();
    private static void OnIsPressedInternalChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnBorderThicknessChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private void SetBorderThickness();
    internal virtual bool get_CanOpenSubMenu();
    private bool get_IsPressedInternal();
    private void set_IsPressedInternal(bool value);
    internal RibbonToggleButton get_ArrowToggleButton();
    internal ButtonBase get_HeaderButton();
    public string get_HeaderKeyTip();
    public void set_HeaderKeyTip(string value);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[StyleTypedPropertyAttribute]
public class System.Windows.Controls.Ribbon.RibbonTab : HeaderedItemsControl {
    public static DependencyProperty GroupSizeReductionOrderProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty ContextualTabGroupHeaderProperty;
    private static DependencyPropertyKey ContextualTabGroupPropertyKey;
    public static DependencyProperty ContextualTabGroupProperty;
    public static DependencyProperty HeaderStyleProperty;
    public static DependencyProperty RibbonProperty;
    private static DependencyPropertyKey TabHeaderLeftPropertyKey;
    public static DependencyProperty TabHeaderLeftProperty;
    private static DependencyPropertyKey TabHeaderRightPropertyKey;
    public static DependencyProperty TabHeaderRightProperty;
    private int _groupReduceOrderLocation;
    private Nullable`1<int> _groupAutoResizeIndex;
    private Collection`1<int> _automaticResizeOrder;
    private Collection`1<bool> _groupReductionResizeStatus;
    public static DependencyProperty KeyTipProperty;
    protected internal bool HandlesScrolling { get; }
    [TypeConverterAttribute("System.Windows.Controls.Ribbon.StringCollectionConverter")]
public StringCollection GroupSizeReductionOrder { get; public set; }
    public bool IsSelected { get; public set; }
    public object ContextualTabGroupHeader { get; public set; }
    public RibbonContextualTabGroup ContextualTabGroup { get; internal set; }
    public Style HeaderStyle { get; public set; }
    public Ribbon Ribbon { get; }
    internal bool IsContextualTab { get; }
    internal RibbonTabHeader RibbonTabHeader { get; }
    public double TabHeaderLeft { get; internal set; }
    public double TabHeaderRight { get; internal set; }
    public string KeyTip { get; public set; }
    private static RibbonTab();
    protected internal virtual bool get_HandlesScrolling();
    public StringCollection get_GroupSizeReductionOrder();
    public void set_GroupSizeReductionOrder(StringCollection value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public object get_ContextualTabGroupHeader();
    public void set_ContextualTabGroupHeader(object value);
    public RibbonContextualTabGroup get_ContextualTabGroup();
    internal void set_ContextualTabGroup(RibbonContextualTabGroup value);
    public Style get_HeaderStyle();
    public void set_HeaderStyle(Style value);
    public Ribbon get_Ribbon();
    internal bool get_IsContextualTab();
    internal RibbonTabHeader get_RibbonTabHeader();
    public double get_TabHeaderLeft();
    internal void set_TabHeaderLeft(double value);
    public double get_TabHeaderRight();
    internal void set_TabHeaderRight(double value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void ClearContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal bool IncreaseNextGroupSize();
    internal RibbonGroup GetNextIncreaseSizeGroup();
    private bool IncreaseNextGroupSize(bool update, RibbonGroup& nextRibbonGroup);
    internal bool DecreaseNextGroupSize();
    private bool DefaultCyclicalReduceGroup();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void PrepareRibbonTab();
    internal void NotifyPropertyChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceVisibility(DependencyObject d, object value);
    private static void OnVisibilityChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsSelectedChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnIsEnabledChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnContextualTabGroupHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private RibbonGroup FindRibbonGroupWithName(string groupName);
    private static void OnNotifyHeaderPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceHeaderStyle(DependencyObject d, object baseValue);
    private static object CoerceHeaderTemplate(DependencyObject d, object baseValue);
    private static void OnKeyTipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonTabHeader : ContentControl {
    internal static DependencyPropertyKey IsRibbonTabSelectedPropertyKey;
    public static DependencyProperty IsRibbonTabSelectedProperty;
    private static DependencyPropertyKey ContextualTabGroupPropertyKey;
    public static DependencyProperty ContextualTabGroupProperty;
    private static DependencyPropertyKey IsContextualTabPropertyKey;
    public static DependencyProperty IsContextualTabProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    private Border _outerBorder;
    private static string OuterBorderTemplatePartName;
    private Thickness _initialPadding;
    private static double KeyTipVerticalOffset;
    public bool IsRibbonTabSelected { get; internal set; }
    public RibbonContextualTabGroup ContextualTabGroup { get; private set; }
    public bool IsContextualTab { get; private set; }
    public Ribbon Ribbon { get; }
    internal RibbonTab RibbonTab { get; }
    internal Thickness DefaultPadding { get; }
    internal bool ShowLabelToolTip { get; internal set; }
    private FrameworkElement VisualChild { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    private static RibbonTabHeader();
    public bool get_IsRibbonTabSelected();
    internal void set_IsRibbonTabSelected(bool value);
    public RibbonContextualTabGroup get_ContextualTabGroup();
    private void set_ContextualTabGroup(RibbonContextualTabGroup value);
    public bool get_IsContextualTab();
    private void set_IsContextualTab(bool value);
    public Ribbon get_Ribbon();
    internal RibbonTab get_RibbonTab();
    internal Thickness get_DefaultPadding();
    internal bool get_ShowLabelToolTip();
    internal void set_ShowLabelToolTip(bool value);
    private FrameworkElement get_VisualChild();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public virtual void OnApplyTemplate();
    protected virtual void OnRender(DrawingContext drawingContext);
    private void RecalculateTabHeaderLeftAndRightCallback();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal void PrepareRibbonTabHeader();
    internal void InitializeTransferProperties();
    internal void NotifyPropertyChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceContextualTabGroup(DependencyObject d, object baseValue);
    private static object CoerceIsContextualTab(DependencyObject d, object baseValue);
    private static object OnCoerceIsRibbonTabSelected(DependencyObject d, object baseValue);
    private static object OnCoerceIsEnabled(DependencyObject d, object baseValue);
    private static object CoerceVisibility(DependencyObject d, object baseValue);
    private void OnIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private static void OnIsRibbonTabSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNotifyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceStyle(DependencyObject d, object baseValue);
    private static object CoerceContent(DependencyObject d, object baseValue);
    private static object CoerceContentTemplate(DependencyObject d, object baseValue);
    private static object CoerceContentTemplateSelector(DependencyObject d, object baseValue);
    private static object CoerceStringFormat(DependencyObject d, object baseValue);
    private static object CoerceKeyTip(DependencyObject d, object baseValue);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonTabHeaderItemsControl : ItemsControl {
    private Panel _itemsHost;
    protected internal bool HandlesScrolling { get; }
    internal Panel InternalItemsHost { get; internal set; }
    private static RibbonTabHeaderItemsControl();
    protected internal virtual bool get_HandlesScrolling();
    internal Panel get_InternalItemsHost();
    internal void set_InternalItemsHost(Panel value);
    public virtual void OnApplyTemplate();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    internal void ScrollIntoView(int index);
    private object ScrollContainerIntoView(object arg);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonTextBox : TextBox {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    public static DependencyProperty TextBoxWidthProperty;
    private BitVector32 _bits;
    private ScrollViewer _contentHost;
    private static string ContentHostTemplatePartName;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    protected bool IsEnabledCore { get; }
    private bool CanExecute { get; private set; }
    private bool TemplateApplied { get; private set; }
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public bool ShowKeyboardCues { get; }
    public double TextBoxWidth { get; public set; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    public string KeyTip { get; public set; }
    private static RibbonTextBox();
    public virtual void OnApplyTemplate();
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void HookCommand(ICommand command);
    private void UnhookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    private static void OnCommandParameterChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual bool get_IsEnabledCore();
    private bool get_CanExecute();
    private void set_CanExecute(bool value);
    private bool get_TemplateApplied();
    private void set_TemplateApplied(bool value);
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    public double get_TextBoxWidth();
    public void set_TextBoxWidth(double value);
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonToggleButton : ToggleButton {
    public static DependencyProperty LargeImageSourceProperty;
    public static DependencyProperty SmallImageSourceProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty ToolTipTitleProperty;
    public static DependencyProperty ToolTipDescriptionProperty;
    public static DependencyProperty ToolTipImageSourceProperty;
    public static DependencyProperty ToolTipFooterTitleProperty;
    public static DependencyProperty ToolTipFooterDescriptionProperty;
    public static DependencyProperty ToolTipFooterImageSourceProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ControlSizeDefinitionProperty;
    public static DependencyProperty IsInControlGroupProperty;
    public static DependencyProperty QuickAccessToolBarControlSizeDefinitionProperty;
    public static DependencyProperty IsInQuickAccessToolBarProperty;
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty PressedBorderBrushProperty;
    public static DependencyProperty PressedBackgroundProperty;
    public static DependencyProperty CheckedBackgroundProperty;
    public static DependencyProperty CheckedBorderBrushProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ShowKeyboardCuesProperty;
    private BitVector32 _bits;
    private Image _image;
    private static string ImageTemplatePart;
    public static DependencyProperty QuickAccessToolBarIdProperty;
    public static DependencyProperty CanAddToQuickAccessToolBarDirectlyProperty;
    public static DependencyProperty KeyTipProperty;
    public ImageSource LargeImageSource { get; public set; }
    public ImageSource SmallImageSource { get; public set; }
    public string Label { get; public set; }
    public string ToolTipTitle { get; public set; }
    public string ToolTipDescription { get; public set; }
    public ImageSource ToolTipImageSource { get; public set; }
    public string ToolTipFooterTitle { get; public set; }
    public string ToolTipFooterDescription { get; public set; }
    public ImageSource ToolTipFooterImageSource { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public RibbonControlSizeDefinition ControlSizeDefinition { get; public set; }
    public bool IsInControlGroup { get; internal set; }
    public RibbonControlSizeDefinition QuickAccessToolBarControlSizeDefinition { get; public set; }
    public bool IsInQuickAccessToolBar { get; internal set; }
    public Ribbon Ribbon { get; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush PressedBorderBrush { get; public set; }
    public Brush PressedBackground { get; public set; }
    public Brush CheckedBackground { get; public set; }
    public Brush CheckedBorderBrush { get; public set; }
    public Brush FocusedBackground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    private bool CoerceFocusable { get; private set; }
    public bool ShowKeyboardCues { get; }
    public object QuickAccessToolBarId { get; public set; }
    public bool CanAddToQuickAccessToolBarDirectly { get; public set; }
    internal Image Image { get; }
    public string KeyTip { get; public set; }
    private static RibbonToggleButton();
    private static void OnIsCheckedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    public ImageSource get_LargeImageSource();
    public void set_LargeImageSource(ImageSource value);
    public ImageSource get_SmallImageSource();
    public void set_SmallImageSource(ImageSource value);
    public string get_Label();
    public void set_Label(string value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public string get_ToolTipDescription();
    public void set_ToolTipDescription(string value);
    public ImageSource get_ToolTipImageSource();
    public void set_ToolTipImageSource(ImageSource value);
    public string get_ToolTipFooterTitle();
    public void set_ToolTipFooterTitle(string value);
    public string get_ToolTipFooterDescription();
    public void set_ToolTipFooterDescription(string value);
    public ImageSource get_ToolTipFooterImageSource();
    public void set_ToolTipFooterImageSource(ImageSource value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public RibbonControlSizeDefinition get_ControlSizeDefinition();
    public void set_ControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInControlGroup();
    internal void set_IsInControlGroup(bool value);
    public RibbonControlSizeDefinition get_QuickAccessToolBarControlSizeDefinition();
    public void set_QuickAccessToolBarControlSizeDefinition(RibbonControlSizeDefinition value);
    public bool get_IsInQuickAccessToolBar();
    internal void set_IsInQuickAccessToolBar(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Ribbon get_Ribbon();
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_PressedBorderBrush();
    public void set_PressedBorderBrush(Brush value);
    public Brush get_PressedBackground();
    public void set_PressedBackground(Brush value);
    public Brush get_CheckedBackground();
    public void set_CheckedBackground(Brush value);
    public Brush get_CheckedBorderBrush();
    public void set_CheckedBorderBrush(Brush value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    private static object OnCoerceFocusable(DependencyObject d, object baseValue);
    private bool get_CoerceFocusable();
    private void set_CoerceFocusable(bool value);
    public bool get_ShowKeyboardCues();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnClick();
    public object get_QuickAccessToolBarId();
    public void set_QuickAccessToolBarId(object value);
    public bool get_CanAddToQuickAccessToolBarDirectly();
    public void set_CanAddToQuickAccessToolBarDirectly(bool value);
    internal Image get_Image();
    public string get_KeyTip();
    public void set_KeyTip(string value);
    private static void OnActivatingKeyTipThunk(object sender, ActivatingKeyTipEventArgs e);
    protected virtual void OnActivatingKeyTip(ActivatingKeyTipEventArgs e);
    private static void OnKeyTipAccessedThunk(object sender, KeyTipAccessedEventArgs e);
    protected virtual void OnKeyTipAccessed(KeyTipAccessedEventArgs e);
}
public class System.Windows.Controls.Ribbon.RibbonToolTip : ToolTip {
    public static DependencyProperty RibbonProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty ImageSourceProperty;
    private static DependencyPropertyKey HasHeaderPropertyKey;
    public static DependencyProperty HasHeaderProperty;
    public static DependencyProperty FooterTitleProperty;
    public static DependencyProperty FooterDescriptionProperty;
    public static DependencyProperty FooterImageSourceProperty;
    private static DependencyPropertyKey HasFooterPropertyKey;
    public static DependencyProperty HasFooterProperty;
    private static DependencyPropertyKey IsPlacementTargetInRibbonGroupPropertyKey;
    public static DependencyProperty IsPlacementTargetInRibbonGroupProperty;
    private Popup _popup;
    public Ribbon Ribbon { get; private set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public bool HasHeader { get; internal set; }
    public string FooterTitle { get; public set; }
    public string FooterDescription { get; public set; }
    public ImageSource FooterImageSource { get; public set; }
    public bool HasFooter { get; internal set; }
    public bool IsPlacementTargetInRibbonGroup { get; internal set; }
    private static RibbonToolTip();
    public Ribbon get_Ribbon();
    private void set_Ribbon(Ribbon value);
    private static void OnPlacementTargetPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_Title();
    public void set_Title(string value);
    public string get_Description();
    public void set_Description(string value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public bool get_HasHeader();
    internal void set_HasHeader(bool value);
    private static void OnToolTipHeaderPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_FooterTitle();
    public void set_FooterTitle(string value);
    public string get_FooterDescription();
    public void set_FooterDescription(string value);
    public ImageSource get_FooterImageSource();
    public void set_FooterImageSource(ImageSource value);
    public bool get_HasFooter();
    internal void set_HasFooter(bool value);
    private static void OnToolTipFooterPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsPlacementTargetInRibbonGroup();
    internal void set_IsPlacementTargetInRibbonGroup(bool value);
    private static object CoerceIsOpen(DependencyObject d, object value);
    private CustomPopupPlacement[] PlaceRibbonToolTip(Size popupSize, Size targetSize, Point offset);
    private void OnLoaded(object sender, RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class System.Windows.Controls.Ribbon.RibbonToolTipService : object {
    private RibbonToolTip _currentToolTip;
    [ThreadStaticAttribute]
private static RibbonToolTipService _current;
    internal static RibbonToolTipService Current { get; }
    internal RibbonToolTip CurrentToolTip { get; internal set; }
    private void OnPostProcessInput(object sender, ProcessInputEventArgs e);
    private void ProcessKeyDown(object sender, KeyEventArgs e);
    internal static RibbonToolTipService get_Current();
    internal RibbonToolTip get_CurrentToolTip();
    internal void set_CurrentToolTip(RibbonToolTip value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonTwoLineText : Control {
    private TextBlock _textBlock1;
    private TextBlock _textBlock2;
    private Path _path;
    public static DependencyProperty TextDecorationsProperty;
    public static DependencyProperty TextEffectsProperty;
    public static DependencyProperty BaselineOffsetProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty TextTrimmingProperty;
    public static DependencyProperty LineHeightProperty;
    public static DependencyProperty LineStackingStrategyProperty;
    public static DependencyProperty PathFillProperty;
    public static DependencyProperty PathStrokeProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty PathDataProperty;
    public static DependencyProperty HasTwoLinesProperty;
    public TextDecorationCollection TextDecorations { get; public set; }
    public TextEffectCollection TextEffects { get; public set; }
    public double BaselineOffset { get; public set; }
    public Thickness Padding { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    [TypeConverterAttribute("System.Windows.LengthConverter")]
public double LineHeight { get; public set; }
    public LineStackingStrategy LineStackingStrategy { get; public set; }
    public Brush PathFill { get; public set; }
    public Brush PathStroke { get; public set; }
    public string Text { get; public set; }
    private static RibbonTwoLineText();
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public TextEffectCollection get_TextEffects();
    public void set_TextEffects(TextEffectCollection value);
    public double get_BaselineOffset();
    public void set_BaselineOffset(double value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public double get_LineHeight();
    public void set_LineHeight(double value);
    public LineStackingStrategy get_LineStackingStrategy();
    public void set_LineStackingStrategy(LineStackingStrategy value);
    public Brush get_PathFill();
    public void set_PathFill(Brush value);
    public Brush get_PathStroke();
    public void set_PathStroke(Brush value);
    public string get_Text();
    public void set_Text(string value);
    public static Geometry GetPathData(DependencyObject element);
    public static void SetPathData(DependencyObject element, Geometry value);
    public static bool GetHasTwoLines(DependencyObject element);
    public static void SetHasTwoLines(DependencyObject element, bool value);
    public virtual void OnApplyTemplate();
    protected virtual Size MeasureOverride(Size availableSize);
    private void MeasureWithConstraint(Size availableSize, TextPointer& secondLinePointer);
    private void MeasureWithoutConstraint(TextPointer& secondLinePointer);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
public class System.Windows.Controls.Ribbon.RibbonWindow : Window {
    private static ICommand _minimizeWindowCommand;
    private static ICommand _maximizeWindowCommand;
    private static ICommand _restoreWindowCommand;
    private static ICommand _closeWindowCommand;
    private static ICommand _showSystemMenuCommand;
    private Image _icon;
    private Border _clientAreaBorder;
    private static string _iconTemplateName;
    private static string _clientAreaBorderTemplateName;
    [CompilerGeneratedAttribute]
private EventHandler TitleChanged;
    private static RibbonWindow();
    private static void OnTitleChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void OnTitleChanged(EventArgs e);
    public virtual void OnApplyTemplate();
    [CompilerGeneratedAttribute]
internal void add_TitleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_TitleChanged(EventHandler value);
    private static void MinimizeWindowCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void MinimizeWindowExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void MaximizeWindowCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void MaximizeWindowExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void RestoreWindowCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void RestoreWindowExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void CloseWindowCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void CloseWindowExecuted(object sender, ExecutedRoutedEventArgs args);
    private static void SystemMenuCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void SystemMenuExecuted(object sender, ExecutedRoutedEventArgs args);
    internal void ChangeIconVisibility(Visibility newVisibility);
    private void IconMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void IconMouseRightButtonDown(object sender, MouseButtonEventArgs e);
}
public class System.Windows.Controls.Ribbon.StringCollectionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Controls.TextSearchInternal : DependencyObject {
    private static DependencyPropertyKey TextSearchInternalInstancePropertyKey;
    private static DependencyProperty TextSearchInternalInstanceProperty;
    private ItemsControl _attachedTo;
    private string _prefix;
    private List`1<string> _charsEntered;
    private bool _isActive;
    private int _matchedItemIndex;
    private int _matchedItemsControlIndex;
    private DispatcherTimer _timeoutTimer;
    [ThreadStaticAttribute]
private static DummyObject _dummyElement;
    private static TimeSpan TimeOut { get; }
    private string Prefix { get; private set; }
    private bool IsActive { get; private set; }
    private int MatchedItemIndex { get; private set; }
    private int MatchedItemsControlIndex { get; private set; }
    private static DummyObject DummyElement { get; }
    private TextSearchInternal(ItemsControl itemsControl);
    private static TextSearchInternal();
    internal static TextSearchInternal EnsureInstance(ItemsControl itemsControl);
    internal bool DoHierarchicalSearch(string nextChar);
    internal bool DoSearch(string nextChar);
    internal bool DeleteLastCharacter();
    private static int FindMatchingPrefix(ItemsControl itemsControl, string primaryTextPath, string prefix, string newChar, int startItemIndex, bool lookForFallbackMatchToo, Boolean& wasNewCharUsed);
    private static int FindMatchingPrefix(ItemsControl itemsControl, string primaryTextPath, string prefix, string newChar, int startItemIndex, bool lookForFallbackMatchToo, Boolean& wasNewCharUsed, bool inHierarchicalSearch, bool fallbackFirstItemToo);
    internal static int FindMatchingPrefix(ItemsControl itemsControl, string prefix, bool doHierarchicalSearch);
    internal static object FindMatchingPrefix(ItemsControl itemsControl, string prefix, bool doHierarchicalSearch, ItemsControl& matchedChildItemsControl);
    private void ResetTimeout();
    private void AddCharToPrefix(string newChar);
    private static string GetPrimaryTextPath(ItemsControl itemsControl, bool doHierarchicalSearch);
    private static string GetPrimaryText(object item, string primaryTextPath);
    private static string ConvertToPlainText(object o);
    internal static string GetPrimaryTextFromItem(ItemsControl itemsControl, object item, bool doHierarchicalSearch);
    private static Binding CreateBinding(object item, string primaryTextPath);
    private void OnTimeout(object sender, EventArgs e);
    private void ResetState();
    private static TimeSpan get_TimeOut();
    private static TextSearchInternal GetInstance(DependencyObject d);
    private void TypeAKey(string c);
    private void CauseTimeOut();
    internal string GetCurrentPrefix();
    internal static string GetPrimaryText(FrameworkElement element);
    private string get_Prefix();
    private void set_Prefix(string value);
    private bool get_IsActive();
    private void set_IsActive(bool value);
    private int get_MatchedItemIndex();
    private void set_MatchedItemIndex(int value);
    private int get_MatchedItemsControlIndex();
    private void set_MatchedItemsControlIndex(int value);
    private static DummyObject get_DummyElement();
    private static CultureInfo GetCulture(DependencyObject element);
}
