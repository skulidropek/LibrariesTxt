[IsReadOnlyAttribute]
[RequiredMemberAttribute]
internal class HandleRef`1 : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Wrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private THandle <Handle>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public object Wrapper { get; public set; }
    [RequiredMemberAttribute]
public THandle Handle { get; public set; }
    public bool IsNull { get; }
    [SetsRequiredMembersAttribute]
public HandleRef`1(object wrapper, THandle handle);
    [SetsRequiredMembersAttribute]
public HandleRef`1(IHandle`1<THandle> handle);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Wrapper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Wrapper(object value);
    [CompilerGeneratedAttribute]
public sealed virtual THandle get_Handle();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Handle(THandle value);
    public sealed virtual bool Equals(HandleRef`1<THandle> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HandleRef`1<THandle> left, HandleRef`1<THandle> right);
    public static bool op_Inequality(HandleRef`1<THandle> left, HandleRef`1<THandle> right);
    public bool get_IsNull();
}
internal interface IHandle`1 {
    public THandle Handle { get; }
    [NullableAttribute("2")]
public object Wrapper { get; }
    public abstract virtual THandle get_Handle();
    [NullableContextAttribute("2")]
public virtual object get_Wrapper();
}
internal static class Interop : object {
}
[GuidAttribute("000C0600-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Office.IMsoComponent {
    public abstract virtual BOOL FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
    public abstract virtual BOOL FPreTranslateMessage(MSG* msg);
    public abstract virtual void OnEnterState(msocstate uStateID, BOOL fEnter);
    public abstract virtual void OnAppActivate(BOOL fActive, UInt32 dwOtherThreadID);
    public abstract virtual void OnLoseActivation();
    public abstract virtual void OnActivationChange(IMsoComponent pic, BOOL fSameComponent, MSOCRINFO* pcrinfo, BOOL fHostIsActivating, IntPtr pchostinfo, UInt32 dwReserved);
    public abstract virtual BOOL FDoIdle(msoidlef grfidlef);
    public abstract virtual BOOL FContinueMessageLoop(msoloop uReason, Void* pvLoopData, MSG* pMsgPeeked);
    public abstract virtual BOOL FQueryTerminate(BOOL fPromptUser);
    public abstract virtual void Terminate();
    public abstract virtual IntPtr HwndGetWindow(msocWindow dwWhich, UInt32 dwReserved);
}
[GuidAttribute("000C0601-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Office.IMsoComponentManager {
    public abstract virtual HRESULT QueryService(Guid* guidService, Guid* iid, Void** ppvObj);
    public abstract virtual BOOL FDebugMessage(IntPtr dwReserved, UInt32 msg, WPARAM wParam, LPARAM lParam);
    public abstract virtual BOOL FRegisterComponent(IMsoComponent piComponent, MSOCRINFO* pcrinfo, UIntPtr* dwComponentID);
    public abstract virtual BOOL FRevokeComponent(UIntPtr dwComponentID);
    public abstract virtual BOOL FUpdateComponentRegistration(UIntPtr dwComponentID, MSOCRINFO* pcrinfo);
    public abstract virtual BOOL FOnComponentActivate(UIntPtr dwComponentID);
    public abstract virtual BOOL FSetTrackingComponent(UIntPtr dwComponentID, BOOL fTrack);
    public abstract virtual void OnComponentEnterState(UIntPtr dwComponentID, msocstate uStateID, msoccontext uContext, UInt32 cpicmExclude, Void** rgpicmExclude, UInt32 dwReserved);
    public abstract virtual BOOL FOnComponentExitState(UIntPtr dwComponentID, msocstate uStateID, msoccontext uContext, UInt32 cpicmExclude, Void** rgpicmExclude);
    public abstract virtual BOOL FInState(msocstate uStateID, Void* pvoid);
    public abstract virtual BOOL FContinueIdle();
    public abstract virtual BOOL FPushMessageLoop(UIntPtr dwComponentID, msoloop uReason, Void* pvLoopData);
    public abstract virtual BOOL FCreateSubComponentManager(IntPtr punkOuter, IntPtr punkServProv, Guid* riid, Void** ppvObj);
    public abstract virtual BOOL FGetParentComponentManager(Void** ppicm);
    public abstract virtual BOOL FGetActiveComponent(msogac dwgac, Void** ppic, MSOCRINFO* pcrinfo, UInt32 dwReserved);
}
[FlagsAttribute]
internal enum Microsoft.Office.msocadvf : Enum {
    public UInt32 value__;
    public static msocadvf Modal;
    public static msocadvf RedrawOff;
    public static msocadvf WarningsOff;
    public static msocadvf Recording;
}
internal enum Microsoft.Office.msoccontext : Enum {
    public UInt32 value__;
    public static msoccontext All;
    public static msoccontext Mine;
    public static msoccontext Others;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Office.MsoComponentIds : object {
    public static string IID_IMsoComponent;
    public static string IID_IMsoComponentManager;
    public static string SID_SMsoComponentManager;
}
[FlagsAttribute]
internal enum Microsoft.Office.msocrf : Enum {
    public UInt32 value__;
    public static msocrf NeedIdleTime;
    public static msocrf NeedPeriodicIdleTime;
    public static msocrf PreTranslateKeys;
    public static msocrf PreTranslateAll;
    public static msocrf NeedSpecActiveNotifs;
    public static msocrf NeedAllActiveNotifs;
    public static msocrf ExclusiveBorderSpace;
    public static msocrf ExclusiveActivation;
    public static msocrf NeedAllMacEvents;
    public static msocrf Master;
}
internal class Microsoft.Office.MSOCRINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 uIdleTimeInterval;
    public msocrf grfcrf;
    public msocadvf grfcadvf;
}
internal enum Microsoft.Office.msocstate : Enum {
    public UInt32 value__;
    public static msocstate Modal;
    public static msocstate RedrawOff;
    public static msocstate WarningsOff;
    public static msocstate Recording;
}
internal enum Microsoft.Office.msocWindow : Enum {
    public UInt32 value__;
    public static msocWindow FrameToplevel;
    public static msocWindow FrameOwner;
    public static msocWindow Component;
    public static msocWindow Owner;
}
internal enum Microsoft.Office.msogac : Enum {
    public UInt32 value__;
    public static msogac Active;
    public static msogac Tracking;
    public static msogac TrackingOrActive;
}
[FlagsAttribute]
internal enum Microsoft.Office.msoidlef : Enum {
    public UInt32 value__;
    public static msoidlef Periodic;
    public static msoidlef NonPeriodic;
    public static msoidlef Priority;
    public static msoidlef All;
}
internal enum Microsoft.Office.msoloop : Enum {
    public UInt32 value__;
    public static msoloop FocusWait;
    public static msoloop DoEvents;
    public static msoloop Debug;
    public static msoloop ModalForm;
    public static msoloop ModalAlert;
    public static msoloop DoEventsModal;
    public static msoloop Main;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Shell.CTLBLDTYPE : Enum {
    public UInt32 value__;
    public static CTLBLDTYPE CTLBLDTYPE_FSTDPROPBUILDER;
    public static CTLBLDTYPE CTLBLDTYPE_FINTERNALBUILDER;
    public static CTLBLDTYPE CTLBLDTYPE_FEDITSOBJIDRECTLY;
}
internal class Microsoft.VisualStudio.Shell.ICategorizeProperties : ValueType {
    internal static Guid Guid;
    private Void** _lpVtbl;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ICategorizeProperties();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT MapPropertyToCategory(int dispid, PROPCAT* ppropcat);
    internal HRESULT GetCategoryName(PROPCAT propcat, int lcid, BSTR* pbstrName);
}
internal class Microsoft.VisualStudio.Shell.IProvidePropertyBuilder : ValueType {
    internal static Guid Guid;
    private Void** _lpVtbl;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IProvidePropertyBuilder();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    public HRESULT MapPropertyToBuilder(int dispid, CTLBLDTYPE* pdwCtlBldType, BSTR* pbstrGuidBldr, VARIANT_BOOL* builderAvailable);
    public HRESULT ExecuteBuilder(int dispid, BSTR* bstrGuidBldr, IDispatch* pdispApp, HWND hwndBldrOwner, VARIANT* pvarValue, VARIANT_BOOL* pbActionCommitted);
}
internal class Microsoft.VisualStudio.Shell.IVSMDPerPropertyBrowsing : ValueType {
    internal static Guid Guid;
    private Void** _lpVtbl;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IVSMDPerPropertyBrowsing();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    public HRESULT GetPropertyAttributes(int dispid, UInt32* pceltAttrs, BSTR** ppbstrTypeNames, VARIANT** ppvarAttrValues);
}
internal class Microsoft.VisualStudio.Shell.IVsPerPropertyBrowsing : ValueType {
    public static Guid Guid;
    private Void** _lpVtbl;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IVsPerPropertyBrowsing();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    public HRESULT HideProperty(int dispid, BOOL* pfHide);
    public HRESULT DisplayChildProperties(int dispid, BOOL* pfDisplay);
    public HRESULT GetLocalizedPropertyInfo(int dispid, UInt32 localeID, BSTR* pbstrLocalizedName, BSTR* pbstrLocalizeDescription);
    public HRESULT HasDefaultValue(int dispid, BOOL* fDefault);
    public HRESULT IsPropertyReadOnly(int dispid, BOOL* fReadOnly);
    public HRESULT GetClassName(BSTR* pbstrClassName);
    public HRESULT CanResetPropertyValue(int dispid, BOOL* pfCanReset);
    public HRESULT ResetPropertyValue(int dispid);
}
internal enum Microsoft.VisualStudio.Shell.PROPCAT : Enum {
    public int value__;
    public static PROPCAT Nil;
    public static PROPCAT Misc;
    public static PROPCAT Font;
    public static PROPCAT Position;
    public static PROPCAT Appearance;
    public static PROPCAT Behavior;
    public static PROPCAT Data;
    public static PROPCAT List;
    public static PROPCAT Text;
    public static PROPCAT Scale;
    public static PROPCAT DDE;
}
internal class Microsoft.Win32.SafeHandles.CoTaskMemSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class NullHandle`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static NullHandle`1<T> <Instance>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static NullHandle`1<T> Instance { get; }
    public T Handle { get; }
    private static NullHandle`1();
    [CompilerGeneratedAttribute]
public static NullHandle`1<T> get_Instance();
    public sealed virtual T get_Handle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.BufferScope`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] _array;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Span`1<T> _span;
    public T& Item { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Span`1<T> Item { get; }
    public int Length { get; }
    public BufferScope`1(int minimumLength);
    public BufferScope`1(Span`1<T> initialBuffer);
    public BufferScope`1(Span`1<T> initialBuffer, int minimumLength);
    public void EnsureCapacity(int capacity, bool copy);
    public T& get_Item(int i);
    public Span`1<T> get_Item(Range range);
    [IsReadOnlyAttribute]
public Span`1<T> Slice(int start, int length);
    [IsReadOnlyAttribute]
public T& GetPinnableReference();
    public int get_Length();
    [IsReadOnlyAttribute]
public Span`1<T> AsSpan();
    public static Span`1<T> op_Implicit(BufferScope`1<T> scope);
    public static ReadOnlySpan`1<T> op_Implicit(BufferScope`1<T> scope);
    public void Dispose();
    [IsReadOnlyAttribute]
public virtual string ToString();
}
internal static class System.CharacterConstants : object {
    public static ReadOnlySpan`1<char> NewLine { get; }
    public static ReadOnlySpan`1<char> get_NewLine();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.ListConverter`1 : object {
    private IList _values;
    private Func`2<TIn, object> _converter;
    public object Item { get; }
    public int Count { get; }
    public ListConverter`1(IList values, Func`2<TIn, object> converter);
    public sealed virtual object get_Item(int index);
    public sealed virtual int get_Count();
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.ComponentModel.CompModSwitches : object {
    [NullableAttribute("2")]
private static TraceSwitch activeX;
    [NullableAttribute("2")]
private static TraceSwitch flowLayout;
    [NullableAttribute("2")]
private static TraceSwitch dataCursor;
    [NullableAttribute("2")]
private static TraceSwitch dataGridCursor;
    [NullableAttribute("2")]
private static TraceSwitch dataGridEditing;
    [NullableAttribute("2")]
private static TraceSwitch dataGridKeys;
    [NullableAttribute("2")]
private static TraceSwitch dataGridLayout;
    [NullableAttribute("2")]
private static TraceSwitch dataGridPainting;
    [NullableAttribute("2")]
private static TraceSwitch dataGridParents;
    [NullableAttribute("2")]
private static TraceSwitch dataGridScrolling;
    [NullableAttribute("2")]
private static TraceSwitch dataGridSelection;
    [NullableAttribute("2")]
private static TraceSwitch dataObject;
    [NullableAttribute("2")]
private static TraceSwitch dataView;
    [NullableAttribute("2")]
private static TraceSwitch debugGridView;
    [NullableAttribute("2")]
private static TraceSwitch dgCaptionPaint;
    [NullableAttribute("2")]
private static TraceSwitch dgEditColumnEditing;
    [NullableAttribute("2")]
private static TraceSwitch dgRelationShpRowLayout;
    [NullableAttribute("2")]
private static TraceSwitch dgRelationShpRowPaint;
    [NullableAttribute("2")]
private static TraceSwitch dgRowPaint;
    [NullableAttribute("2")]
private static TraceSwitch dragDrop;
    [NullableAttribute("2")]
private static TraceSwitch imeMode;
    [NullableAttribute("2")]
private static TraceSwitch msaa;
    [NullableAttribute("2")]
private static TraceSwitch msoComponentManager;
    [NullableAttribute("2")]
private static TraceSwitch layoutPerformance;
    [NullableAttribute("2")]
private static TraceSwitch layoutSuspendResume;
    [NullableAttribute("2")]
private static TraceSwitch richLayout;
    [NullableAttribute("2")]
private static TraceSwitch setBounds;
    [NullableAttribute("2")]
private static BooleanSwitch lifetimeTracing;
    [NullableAttribute("2")]
private static TraceSwitch s_handleLeak;
    [NullableAttribute("2")]
private static BooleanSwitch s_traceCollect;
    [NullableAttribute("2")]
private static BooleanSwitch s_commonDesignerServices;
    public static TraceSwitch ActiveX { get; }
    public static TraceSwitch DataCursor { get; }
    public static TraceSwitch DataGridCursor { get; }
    public static TraceSwitch DataGridEditing { get; }
    public static TraceSwitch DataGridKeys { get; }
    public static TraceSwitch DataGridLayout { get; }
    public static TraceSwitch DataGridPainting { get; }
    public static TraceSwitch DataGridParents { get; }
    public static TraceSwitch DataGridScrolling { get; }
    public static TraceSwitch DataGridSelection { get; }
    public static TraceSwitch DataObject { get; }
    public static TraceSwitch DataView { get; }
    public static TraceSwitch DebugGridView { get; }
    public static TraceSwitch DGCaptionPaint { get; }
    public static TraceSwitch DGEditColumnEditing { get; }
    public static TraceSwitch DGRelationShpRowLayout { get; }
    public static TraceSwitch DGRelationShpRowPaint { get; }
    public static TraceSwitch DGRowPaint { get; }
    public static TraceSwitch DragDrop { get; }
    public static TraceSwitch FlowLayout { get; }
    public static TraceSwitch ImeMode { get; }
    public static TraceSwitch LayoutPerformance { get; }
    public static TraceSwitch LayoutSuspendResume { get; }
    public static BooleanSwitch LifetimeTracing { get; }
    public static TraceSwitch MSAA { get; }
    public static TraceSwitch MSOComponentManager { get; }
    public static TraceSwitch RichLayout { get; }
    public static TraceSwitch SetBounds { get; }
    public static TraceSwitch HandleLeak { get; }
    public static BooleanSwitch TraceCollect { get; }
    public static BooleanSwitch CommonDesignerServices { get; }
    public static TraceSwitch get_ActiveX();
    public static TraceSwitch get_DataCursor();
    public static TraceSwitch get_DataGridCursor();
    public static TraceSwitch get_DataGridEditing();
    public static TraceSwitch get_DataGridKeys();
    public static TraceSwitch get_DataGridLayout();
    public static TraceSwitch get_DataGridPainting();
    public static TraceSwitch get_DataGridParents();
    public static TraceSwitch get_DataGridScrolling();
    public static TraceSwitch get_DataGridSelection();
    public static TraceSwitch get_DataObject();
    public static TraceSwitch get_DataView();
    public static TraceSwitch get_DebugGridView();
    public static TraceSwitch get_DGCaptionPaint();
    public static TraceSwitch get_DGEditColumnEditing();
    public static TraceSwitch get_DGRelationShpRowLayout();
    public static TraceSwitch get_DGRelationShpRowPaint();
    public static TraceSwitch get_DGRowPaint();
    public static TraceSwitch get_DragDrop();
    public static TraceSwitch get_FlowLayout();
    public static TraceSwitch get_ImeMode();
    public static TraceSwitch get_LayoutPerformance();
    public static TraceSwitch get_LayoutSuspendResume();
    public static BooleanSwitch get_LifetimeTracing();
    public static TraceSwitch get_MSAA();
    public static TraceSwitch get_MSOComponentManager();
    public static TraceSwitch get_RichLayout();
    public static TraceSwitch get_SetBounds();
    public static TraceSwitch get_HandleLeak();
    public static BooleanSwitch get_TraceCollect();
    public static BooleanSwitch get_CommonDesignerServices();
}
[ExtensionAttribute]
internal static class System.ComponentModel.Design.ComponentChangeServiceExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void OnComponentChanged(IComponentChangeService changeService, object component, MemberDescriptor member, object oldValue, object newValue);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void OnComponentChanging(IComponentChangeService changeService, object component, MemberDescriptor member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.ComponentModel.Design.Serialization.DesignerSerializationManagerHelper : object {
    [ExtensionAttribute]
public static bool TryGetContext(IDesignerSerializationManager manager, T& context);
    [ExtensionAttribute]
public static T GetContext(IDesignerSerializationManager manager);
    [ExtensionAttribute]
public static T GetSerializer(IDesignerSerializationManager manager, Type objectType);
    [ExtensionAttribute]
public static bool TryGetSerializer(IDesignerSerializationManager manager, Type objectType, T& serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.ComponentModel.MemberDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool TryGetAttribute(MemberDescriptor descriptor, T& attribute);
    [ExtensionAttribute]
public static T GetAttribute(MemberDescriptor descriptor);
}
internal static class System.ComponentModel.TypeDescriptorHelper : object {
    [NullableContextAttribute("1")]
public static bool TryGetAttribute(object component, T& attribute);
}
internal static class System.DisposalTracking : object {
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void SuppressFinalize(object object);
}
internal static class System.DisposeHelper : object {
    [NullableContextAttribute("1")]
internal static void NullAndDispose(T& disposable);
    internal static void NullAndRelease(T*& comPointer);
}
[ExtensionAttribute]
internal static class System.Drawing.ColorExtensions : object {
    [ExtensionAttribute]
public static int ToWin32(Color color);
}
[IsReadOnlyAttribute]
internal class System.EasyPoint : ValueType {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; }
    public int Y { get; }
    public EasyPoint(int x, int y);
    public EasyPoint(ValueTuple`2<int, int> point);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public int get_Y();
    public void Deconstruct(Int32& x, Int32& y);
    public static Point op_Implicit(EasyPoint& point);
    public static EasyPoint op_Implicit(Point point);
    public static EasyPoint op_Implicit(ValueTuple`2& point);
}
[ExtensionAttribute]
internal static class System.EnumExtensions : object {
    [ExtensionAttribute]
public static void ChangeFlags(T& value, T flags, bool set);
}
[ExtensionAttribute]
internal static class System.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsCriticalException(Exception ex);
}
[ExtensionAttribute]
internal static class System.IntrinsicExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T OrThrowIfNegative(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.IO.BinaryReaderExtensions : object {
    [ExtensionAttribute]
public static DateTime ReadDateTime(BinaryReader reader);
    [ExtensionAttribute]
public static long Remaining(BinaryReader reader);
}
[ExtensionAttribute]
internal static class System.IO.BinaryWriterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Write(BinaryWriter writer, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.ServiceExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider provider);
    [ExtensionAttribute]
public static T GetRequiredService(IServiceProvider provider);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetService(IServiceProvider provider, T& service);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetService(IDesignerHost designerHost, T& service);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetService(ITypeDescriptorContext context, T& service);
    [ExtensionAttribute]
private static TInterface GetService(IServiceProvider provider);
    [ExtensionAttribute]
private static TInterface GetRequiredService(IServiceProvider provider);
}
[ExtensionAttribute]
internal static class System.SpanHelpers : object {
    public static void CopyAndTerminate(ReadOnlySpan`1<char> source, Span`1<char> destination);
    [ExtensionAttribute]
public static ReadOnlySpan`1<char> SliceAtFirstNull(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static Span`1<char> SliceAtFirstNull(Span`1<char> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.TrimmingConstants : object {
    internal static string AttributesRequiresUnreferencedCodeMessage;
    internal static string BindingListViewFilterMessage;
    internal static string EditorRequiresUnreferencedCode;
    internal static string EventDescriptorRequiresUnreferencedCodeMessage;
    internal static string FilterRequiresUnreferencedCodeMessage;
    internal static string PropertyDescriptorPropertyTypeMessage;
    internal static string SiteNameMessage;
    internal static string TypeConverterGetPropertiesMessage;
    internal static string TypeOrValueNotDiscoverableMessage;
}
internal static class System.VirtualKeyUtilities : object {
    public static bool IsExtendedKey(VIRTUAL_KEY vk);
}
[ExtensionAttribute]
internal static class System.Windows.Forms.AccessibiltyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static LRESULT GetLRESULT(IAccessible accessible, WPARAM wparam);
}
[FlagsAttribute]
internal enum System.Windows.Forms.ApplyGraphicsProperties : Enum {
    public int value__;
    public static ApplyGraphicsProperties None;
    public static ApplyGraphicsProperties Clipping;
    public static ApplyGraphicsProperties TranslateTransform;
    public static ApplyGraphicsProperties All;
}
[IsReadOnlyAttribute]
internal class System.Windows.Forms.ARGB : ValueType {
    public byte B;
    public byte G;
    public byte R;
    public byte A;
    public int Value;
    public ARGB(byte a, byte r, byte g, byte b);
    public ARGB(int value);
    public static ARGB op_Implicit(Color color);
    public static Color op_Implicit(ARGB argb);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.ArgumentValidation : object {
    [ExtensionAttribute]
internal static T OrThrowIfNull(T argument, string paramName);
    [ExtensionAttribute]
internal static T OrThrowIfNullWithMessage(T argument, string message, string paramName);
    [ExtensionAttribute]
internal static IntPtr OrThrowIfZero(IntPtr argument, string paramName);
    [ExtensionAttribute]
internal static string OrThrowIfNullOrEmpty(string argument, string paramName);
    [ExtensionAttribute]
internal static void ThrowIfNullOrEmpty(string argument, string paramName);
    [ExtensionAttribute]
internal static void ThrowIfNullOrEmptyWithMessage(string argument, string message, string paramName);
    internal static void ThrowIfNull(HDC argument, string paramName);
}
public enum System.Windows.Forms.Automation.AutomationLiveSetting : Enum {
    public int value__;
    public static AutomationLiveSetting Off;
    public static AutomationLiveSetting Polite;
    public static AutomationLiveSetting Assertive;
}
public enum System.Windows.Forms.Automation.AutomationNotificationKind : Enum {
    public int value__;
    public static AutomationNotificationKind ItemAdded;
    public static AutomationNotificationKind ItemRemoved;
    public static AutomationNotificationKind ActionCompleted;
    public static AutomationNotificationKind ActionAborted;
    public static AutomationNotificationKind Other;
}
public enum System.Windows.Forms.Automation.AutomationNotificationProcessing : Enum {
    public int value__;
    public static AutomationNotificationProcessing ImportantAll;
    public static AutomationNotificationProcessing ImportantMostRecent;
    public static AutomationNotificationProcessing All;
    public static AutomationNotificationProcessing MostRecent;
    public static AutomationNotificationProcessing CurrentThenMostRecent;
}
internal enum System.Windows.Forms.Automation.CapStyle : Enum {
    public int value__;
    public static CapStyle Other;
    public static CapStyle None;
    public static CapStyle SmallCap;
    public static CapStyle AllCap;
    public static CapStyle AllPetiteCaps;
    public static CapStyle PetiteCaps;
    public static CapStyle Unicase;
    public static CapStyle Titling;
}
internal enum System.Windows.Forms.Automation.HorizontalTextAlignment : Enum {
    public int value__;
    public static HorizontalTextAlignment Left;
    public static HorizontalTextAlignment Centered;
    public static HorizontalTextAlignment Right;
    public static HorizontalTextAlignment Justified;
}
public interface System.Windows.Forms.Automation.IAutomationLiveRegion {
    public AutomationLiveSetting LiveSetting { get; public set; }
    public abstract virtual AutomationLiveSetting get_LiveSetting();
    public abstract virtual void set_LiveSetting(AutomationLiveSetting value);
}
internal enum System.Windows.Forms.Automation.TextDecorationLineStyle : Enum {
    public int value__;
    public static TextDecorationLineStyle Other;
    public static TextDecorationLineStyle None;
    public static TextDecorationLineStyle Single;
    public static TextDecorationLineStyle WordsOnly;
    public static TextDecorationLineStyle Double;
    public static TextDecorationLineStyle Dot;
    public static TextDecorationLineStyle Dash;
    public static TextDecorationLineStyle DashDot;
    public static TextDecorationLineStyle DashDotDot;
    public static TextDecorationLineStyle Wavy;
    public static TextDecorationLineStyle ThickSingle;
    public static TextDecorationLineStyle DoubleWavy;
    public static TextDecorationLineStyle ThickWavy;
    public static TextDecorationLineStyle LongDash;
    public static TextDecorationLineStyle ThickDash;
    public static TextDecorationLineStyle ThickDashDot;
    public static TextDecorationLineStyle ThickDashDotDot;
    public static TextDecorationLineStyle ThickDot;
    public static TextDecorationLineStyle ThickLongDash;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.Automation.UiaTextProvider : object {
    public static int EndOfLineWidth;
    [NullableAttribute("2")]
public ITextRangeProvider DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public Rectangle BoundingRectangle { get; }
    public int FirstVisibleLine { get; }
    public bool IsMultiline { get; }
    public bool IsReadingRTL { get; }
    public bool IsReadOnly { get; }
    public bool IsScrollable { get; }
    public int LinesPerPage { get; }
    public int LinesCount { get; }
    public LOGFONTW Logfont { get; }
    public string Text { get; }
    public int TextLength { get; }
    public WINDOW_EX_STYLE WindowExStyle { get; }
    public WINDOW_STYLE WindowStyle { get; }
    public abstract virtual ITextRangeProvider[] GetSelection();
    public abstract virtual ITextRangeProvider[] GetVisibleRanges();
    public abstract virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    [NullableContextAttribute("2")]
public abstract virtual ITextRangeProvider RangeFromPoint(Point screenLocation);
    [NullableContextAttribute("2")]
public abstract virtual ITextRangeProvider get_DocumentRange();
    public abstract virtual SupportedTextSelection get_SupportedTextSelection();
    public abstract virtual Rectangle get_BoundingRectangle();
    public abstract virtual int get_FirstVisibleLine();
    public abstract virtual bool get_IsMultiline();
    public abstract virtual bool get_IsReadingRTL();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsScrollable();
    public abstract virtual int get_LinesPerPage();
    public abstract virtual int get_LinesCount();
    public abstract virtual LOGFONTW get_Logfont();
    public abstract virtual string get_Text();
    public abstract virtual int get_TextLength();
    public abstract virtual WINDOW_EX_STYLE get_WindowExStyle();
    public abstract virtual WINDOW_STYLE get_WindowStyle();
    public abstract virtual int GetLineFromCharIndex(int charIndex);
    public abstract virtual int GetLineIndex(int line);
    public abstract virtual Point GetPositionFromChar(int charIndex);
    public abstract virtual Point GetPositionFromCharForUpperRightCorner(int startCharIndex, string text);
    public abstract virtual void GetVisibleRangePoints(Int32& visibleStart, Int32& visibleEnd);
    public abstract virtual bool LineScroll(int charactersHorizontal, int linesVertical);
    public abstract virtual Point PointToScreen(Point pt);
    public abstract virtual Rectangle RectangleToScreen(Rectangle rect);
    public abstract virtual void SetSelection(int start, int end);
    public static WINDOW_EX_STYLE GetWindowExStyle(IHandle`1<HWND> hWnd);
    public static WINDOW_STYLE GetWindowStyle(IHandle`1<HWND> hWnd);
    public static Double[] RectListToDoubleArray(List`1<Rectangle> rectArray);
    internal static Double[] BoundingRectangleAsArray(Rectangle bounds);
    public int SendInput(int inputs, INPUT& input, int size);
    public int SendKeyboardInputVK(VIRTUAL_KEY vk, bool press);
}
internal abstract class System.Windows.Forms.Automation.UiaTextProvider2 : UiaTextProvider {
    [NullableContextAttribute("2")]
public abstract virtual ITextRangeProvider GetCaretRange(BOOL& isActive);
    [NullableContextAttribute("1")]
public abstract virtual ITextRangeProvider RangeFromAnnotation(IRawElementProviderSimple annotationElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.Automation.UiaTextRange : object {
    private static string LineSeparator;
    private IRawElementProviderSimple _enclosingElement;
    private UiaTextProvider _provider;
    private int _start;
    private int _end;
    internal int End { get; internal set; }
    internal int Length { get; }
    internal int Start { get; internal set; }
    private bool IsDegenerate { get; }
    public UiaTextRange(IRawElementProviderSimple enclosingElement, UiaTextProvider provider, int start, int end);
    internal int get_End();
    internal void set_End(int value);
    internal int get_Length();
    internal int get_Start();
    internal void set_Start(int value);
    private bool get_IsDegenerate();
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextRangeProvider.Clone();
    private sealed virtual override BOOL Interop.UiaCore.ITextRangeProvider.Compare(ITextRangeProvider range);
    private sealed virtual override int Interop.UiaCore.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    private sealed virtual override void Interop.UiaCore.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit unit);
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextRangeProvider.FindAttribute(int attributeId, object val, BOOL backwards);
    private sealed virtual override ITextRangeProvider Interop.UiaCore.ITextRangeProvider.FindText(string text, BOOL backwards, BOOL ignoreCase);
    [NullableContextAttribute("2")]
private sealed virtual override object Interop.UiaCore.ITextRangeProvider.GetAttributeValue(int attributeId);
    private sealed virtual override Double[] Interop.UiaCore.ITextRangeProvider.GetBoundingRectangles();
    private sealed virtual override IRawElementProviderSimple Interop.UiaCore.ITextRangeProvider.GetEnclosingElement();
    private sealed virtual override string Interop.UiaCore.ITextRangeProvider.GetText(int maxLength);
    private sealed virtual override int Interop.UiaCore.ITextRangeProvider.Move(TextUnit unit, int count);
    private sealed virtual override int Interop.UiaCore.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    private sealed virtual override void Interop.UiaCore.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    private sealed virtual override void Interop.UiaCore.ITextRangeProvider.Select();
    private sealed virtual override void Interop.UiaCore.ITextRangeProvider.AddToSelection();
    private sealed virtual override void Interop.UiaCore.ITextRangeProvider.RemoveFromSelection();
    private sealed virtual override void Interop.UiaCore.ITextRangeProvider.ScrollIntoView(BOOL alignToTop);
    private sealed virtual override IRawElementProviderSimple[] Interop.UiaCore.ITextRangeProvider.GetChildren();
    private static bool AtParagraphBoundary(string text, int index);
    private static bool AtWordBoundary(string text, int index);
    private static bool IsApostrophe(char ch);
    [NullableContextAttribute("2")]
private object GetAttributeValue(TextAttributeIdentifier textAttributeIdentifier);
    private List`1<Rectangle> GetMultilineBoundingRectangles(Rectangle clippingRectangle);
    private static HorizontalTextAlignment GetHorizontalTextAlignment(WINDOW_STYLE windowStyle);
    private static CapStyle GetCapStyle(WINDOW_STYLE windowStyle);
    private bool GetReadOnly();
    private static COLORREF GetBackgroundColor();
    private static string GetFontName(LOGFONTW logfont);
    private static double GetFontSize(LOGFONTW logfont);
    private static FW GetFontWeight(LOGFONTW logfont);
    private static COLORREF GetForegroundColor();
    private static bool GetItalic(LOGFONTW logfont);
    private static TextDecorationLineStyle GetStrikethroughStyle(LOGFONTW logfont);
    private static TextDecorationLineStyle GetUnderlineStyle(LOGFONTW logfont);
    private int MoveEndpointForward(int index, TextUnit unit, int count, Int32& moved);
    private int MoveEndpointBackward(int index, TextUnit unit, int count, Int32& moved);
    private void MoveTo(int start, int end);
    private void ValidateEndpoints();
    [CompilerGeneratedAttribute]
private void <GetMultilineBoundingRectangles>g__AddLineRectangle|38_0(Point startPoint, Point endPoint, <>c__DisplayClass38_0& );
}
[IsReadOnlyAttribute]
internal class System.Windows.Forms.BinaryFormat.ArrayInfo : ValueType {
    [CompilerGeneratedAttribute]
private Id <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Count <Length>k__BackingField;
    public Id ObjectId { get; }
    public Count Length { get; }
    public ArrayInfo(Id objectId, Count length);
    [CompilerGeneratedAttribute]
public Id get_ObjectId();
    [CompilerGeneratedAttribute]
public Count get_Length();
    [NullableContextAttribute("1")]
public static ArrayInfo Parse(BinaryReader reader, Count& length);
    [NullableContextAttribute("1")]
public sealed virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class System.Windows.Forms.BinaryFormat.ArrayRecord : Record {
    [CompilerGeneratedAttribute]
private ArrayInfo <ArrayInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <ArrayObjects>k__BackingField;
    public ArrayInfo ArrayInfo { get; }
    public IReadOnlyList`1<object> ArrayObjects { get; }
    public Id ObjectId { get; }
    public Count Length { get; }
    public object Item { get; }
    public ArrayRecord(ArrayInfo arrayInfo, IReadOnlyList`1<object> arrayObjects);
    [CompilerGeneratedAttribute]
public ArrayInfo get_ArrayInfo();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_ArrayObjects();
    public Id get_ObjectId();
    public Count get_Length();
    public object get_Item(int index);
    private sealed virtual override IEnumerator`1<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Windows.Forms.BinaryFormat.ArraySingleObject : ArrayRecord {
    public static RecordType RecordType { get; }
    [NullableContextAttribute("1")]
public ArraySingleObject(ArrayInfo arrayInfo, IReadOnlyList`1<object> arrayObjects);
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override ArraySingleObject System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ArraySingleObject>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public virtual void Write(BinaryWriter writer);
}
internal class System.Windows.Forms.BinaryFormat.ArraySinglePrimitive : ArrayRecord {
    [CompilerGeneratedAttribute]
private PrimitiveType <PrimitiveType>k__BackingField;
    public PrimitiveType PrimitiveType { get; }
    public static RecordType RecordType { get; }
    [NullableContextAttribute("1")]
public ArraySinglePrimitive(ArrayInfo arrayInfo, PrimitiveType primitiveType, IReadOnlyList`1<object> arrayObjects);
    [CompilerGeneratedAttribute]
public PrimitiveType get_PrimitiveType();
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override ArraySinglePrimitive System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ArraySinglePrimitive>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public virtual void Write(BinaryWriter writer);
}
internal class System.Windows.Forms.BinaryFormat.ArraySingleString : ArrayRecord {
    public static RecordType RecordType { get; }
    [NullableContextAttribute("1")]
public ArraySingleString(ArrayInfo arrayInfo, IReadOnlyList`1<object> arrayObjects);
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override ArraySingleString System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ArraySingleString>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public virtual void Write(BinaryWriter writer);
}
internal class System.Windows.Forms.BinaryFormat.BinaryArray : ArrayRecord {
    [CompilerGeneratedAttribute]
private Count <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryArrayType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberTypeInfo <TypeInfo>k__BackingField;
    public Count Rank { get; }
    public BinaryArrayType Type { get; }
    public MemberTypeInfo TypeInfo { get; }
    public static RecordType RecordType { get; }
    [NullableContextAttribute("1")]
private BinaryArray(Count rank, BinaryArrayType type, ArrayInfo arrayInfo, MemberTypeInfo typeInfo, IReadOnlyList`1<object> arrayObjects);
    [CompilerGeneratedAttribute]
public Count get_Rank();
    [CompilerGeneratedAttribute]
public BinaryArrayType get_Type();
    [CompilerGeneratedAttribute]
public MemberTypeInfo get_TypeInfo();
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override BinaryArray System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.BinaryArray>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public virtual void Write(BinaryWriter writer);
}
internal enum System.Windows.Forms.BinaryFormat.BinaryArrayType : Enum {
    public byte value__;
    public static BinaryArrayType Single;
    public static BinaryArrayType Jagged;
    public static BinaryArrayType Rectangular;
    public static BinaryArrayType SingleOffset;
    public static BinaryArrayType JaggedOffset;
    public static BinaryArrayType RectangularOffset;
}
internal static class System.Windows.Forms.BinaryFormat.BinaryFormatReader : object {
    internal static DateTime CreateDateTimeFromData(long data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.BinaryFormat.BinaryFormattedObject : object {
    internal static int MaxNewCollectionSize;
    private List`1<IRecord> _records;
    private RecordMap _recordMap;
    public int RecordCount { get; }
    public IRecord Item { get; }
    public IRecord Item { get; }
    public BinaryFormattedObject(Stream stream, bool leaveOpen);
    public int get_RecordCount();
    public IRecord get_Item(int index);
    public IRecord get_Item(Id id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.BinaryFormat.BinaryFormattedObjectExtensions : object {
    [NullableContextAttribute("0")]
private static bool IsPrimitiveTypeClassName(ReadOnlySpan`1<char> typeName);
    private static bool TryGet(TryGetDelegate get, BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static bool TryGetPointF(BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static bool TryGetRectangleF(BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static bool TryGetPrimitiveType(BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static bool TryGetPrimitiveList(BinaryFormattedObject format, Object& list);
    [ExtensionAttribute]
public static bool TryGetPrimitiveArrayList(BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static bool TryGetPrimitiveArray(BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static bool TryGetPrimitiveHashtable(BinaryFormattedObject format, Hashtable& hashtable);
    [ExtensionAttribute]
public static bool TryGetPrimitiveHashtable(BinaryFormattedObject format, Object& hashtable);
    [ExtensionAttribute]
public static bool TryGetPrimitiveRecordValue(BinaryFormattedObject format, IRecord record, Object& value);
    [ExtensionAttribute]
public static bool TryGetPrimitiveRecordValueOrNull(BinaryFormattedObject format, IRecord record, Object& value);
    [ExtensionAttribute]
public static bool TryGetNotSupportedException(BinaryFormattedObject format, Object& exception);
    [ExtensionAttribute]
public static bool TryGetFrameworkObject(BinaryFormattedObject format, Object& value);
    [ExtensionAttribute]
public static IRecord Dereference(BinaryFormattedObject format, IRecord record);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetStringValues(BinaryFormattedObject format, ArraySingleString array, int count);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPointF>g__Get|3_0(BinaryFormattedObject format, Object& value);
    [CompilerGeneratedAttribute]
internal static bool <TryGetRectangleF>g__Get|4_0(BinaryFormattedObject format, Object& value);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPrimitiveType>g__Get|5_0(BinaryFormattedObject format, Object& value);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPrimitiveList>g__Get|6_0(BinaryFormattedObject format, Object& list);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPrimitiveArrayList>g__Get|7_0(BinaryFormattedObject format, Object& value);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPrimitiveArray>g__Get|8_0(BinaryFormattedObject format, Object& value);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPrimitiveHashtable>g__Get|10_0(BinaryFormattedObject format, Object& hashtable);
    [CompilerGeneratedAttribute]
internal static bool <TryGetNotSupportedException>g__Get|13_0(BinaryFormattedObject format, Object& exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.BinaryFormat.BinaryFormatWriter : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_hashtableMemberNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_notSupportedExceptionMemberNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_listMemberNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_decimalMemberNames;
    private static String[] s_dateTimeMemberNames;
    private static String[] s_primitiveMemberName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_pointMemberNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_rectangleMemberNames;
    private static String[] HashtableMemberNames { get; }
    private static String[] NotSupportedExceptionMemberNames { get; }
    private static String[] ListMemberNames { get; }
    private static String[] DecimalMemberNames { get; }
    private static String[] PointMemberNames { get; }
    private static String[] RectangleMemberNames { get; }
    private static BinaryFormatWriter();
    private static String[] get_HashtableMemberNames();
    private static String[] get_NotSupportedExceptionMemberNames();
    private static String[] get_ListMemberNames();
    private static String[] get_DecimalMemberNames();
    private static String[] get_PointMemberNames();
    private static String[] get_RectangleMemberNames();
    public static void WriteString(Stream stream, string value);
    public static void WriteDecimal(Stream stream, decimal value);
    public static void WriteDateTime(Stream stream, DateTime value);
    public static void WriteTimeSpan(Stream stream, TimeSpan value);
    public static void WriteNativeInt(Stream stream, IntPtr value);
    public static void WriteNativeUInt(Stream stream, UIntPtr value);
    public static void WritePointF(Stream stream, PointF value);
    public static void WriteRectangleF(Stream stream, RectangleF value);
    public static bool TryWritePrimitive(Stream stream, object primitive);
    public static void WritePrimitive(Stream stream, object primitive);
    public static void WriteStringList(Stream stream, List`1<string> list);
    [NullableContextAttribute("0")]
public static void WritePrimitiveList(Stream stream, List`1<T> list);
    public static bool TryWritePrimitiveList(Stream stream, IList list);
    public static bool TryWriteArrayList(Stream stream, ArrayList list);
    public static bool TryWriteArray(Stream stream, Array array);
    public static bool TryWriteHashtable(Stream stream, Hashtable hashtable);
    public static void WritePrimitiveHashtable(Stream stream, Hashtable hashtable);
    public static void WriteNotSupportedException(Stream stream, NotSupportedException exception);
    public static bool TryWriteFrameworkObject(Stream stream, object value);
    public static bool TryWrite(Action`2<Stream, T> action, Stream stream, T value);
    public static bool TryWrite(Func`3<Stream, T, bool> func, Stream stream, T value);
    [CompilerGeneratedAttribute]
internal static bool <TryWritePrimitiveList>g__Write|32_0(Stream stream, IList list);
    [CompilerGeneratedAttribute]
internal static bool <TryWriteArrayList>g__Write|33_0(Stream stream, ArrayList list);
    [CompilerGeneratedAttribute]
internal static bool <TryWriteArray>g__Write|34_0(Stream stream, Array array);
    [CompilerGeneratedAttribute]
internal static bool <TryWriteFrameworkObject>g__Write|38_0(Stream stream, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class System.Windows.Forms.BinaryFormat.BinaryFormatWriterScope : ValueType {
    private BinaryWriter _writer;
    public BinaryFormatWriterScope(Stream stream);
    public static BinaryWriter op_Implicit(BinaryFormatWriterScope& scope);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.BinaryLibrary : object {
    [CompilerGeneratedAttribute]
private Id <LibraryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    public Id LibraryId { get; }
    public string LibraryName { get; }
    public static RecordType RecordType { get; }
    public BinaryLibrary(Id libraryId, string libraryName);
    [CompilerGeneratedAttribute]
public Id get_LibraryId();
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    public static override RecordType get_RecordType();
    private static override BinaryLibrary System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.BinaryLibrary>.Parse(BinaryReader reader, RecordMap recordMap);
    public sealed virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.BinaryObjectString : object {
    [CompilerGeneratedAttribute]
private Id <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Id ObjectId { get; }
    public string Value { get; }
    public static RecordType RecordType { get; }
    public BinaryObjectString(Id objectId, string value);
    [CompilerGeneratedAttribute]
public Id get_ObjectId();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static override RecordType get_RecordType();
    private static override BinaryObjectString System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.BinaryObjectString>.Parse(BinaryReader reader, RecordMap recordMap);
    public sealed virtual void Write(BinaryWriter writer);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum System.Windows.Forms.BinaryFormat.BinaryType : Enum {
    public byte value__;
    public static BinaryType Primitive;
    public static BinaryType String;
    public static BinaryType Object;
    public static BinaryType SystemClass;
    public static BinaryType Class;
    public static BinaryType ObjectArray;
    public static BinaryType StringArray;
    public static BinaryType PrimitiveArray;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.ClassInfo : object {
    [CompilerGeneratedAttribute]
private Id <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <MemberNames>k__BackingField;
    public Id ObjectId { get; }
    public string Name { get; }
    public IReadOnlyList`1<string> MemberNames { get; }
    public ClassInfo(Id objectId, string name, IReadOnlyList`1<string> memberNames);
    [CompilerGeneratedAttribute]
public Id get_ObjectId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_MemberNames();
    public static ClassInfo Parse(BinaryReader reader, Count& memberCount);
    public sealed virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class System.Windows.Forms.BinaryFormat.ClassRecord : Record {
    [CompilerGeneratedAttribute]
private ClassInfo <ClassInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<object> <MemberValues>k__BackingField;
    internal ClassInfo ClassInfo { get; }
    public IReadOnlyList`1<object> MemberValues { get; }
    public string Name { get; }
    public Id ObjectId { get; }
    public IReadOnlyList`1<string> MemberNames { get; }
    public object Item { get; }
    private protected ClassRecord(ClassInfo classInfo, IReadOnlyList`1<object> memberValues);
    [CompilerGeneratedAttribute]
internal ClassInfo get_ClassInfo();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<object> get_MemberValues();
    public string get_Name();
    public virtual Id get_ObjectId();
    public IReadOnlyList`1<string> get_MemberNames();
    public object get_Item(string memberName);
    private protected static List`1<object> ReadDataFromClassInfo(BinaryReader reader, RecordMap recordMap, ClassInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class System.Windows.Forms.BinaryFormat.ClassTypeInfo : ValueType {
    public string TypeName;
    public Id LibraryId;
    public ClassTypeInfo(string typeName, Id libraryId);
    public static ClassTypeInfo Parse(BinaryReader reader);
    public sealed virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.ClassWithId : ClassRecord {
    private ClassRecord _metadataClass;
    [CompilerGeneratedAttribute]
private Id <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Id <MetadataId>k__BackingField;
    public Id ObjectId { get; }
    public Id MetadataId { get; }
    public static RecordType RecordType { get; }
    public ClassWithId(Id id, ClassRecord metadataClass, IReadOnlyList`1<object> memberValues);
    [CompilerGeneratedAttribute]
public virtual Id get_ObjectId();
    [CompilerGeneratedAttribute]
public Id get_MetadataId();
    public static override RecordType get_RecordType();
    private static override ClassWithId System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ClassWithId>.Parse(BinaryReader reader, RecordMap recordMap);
    public virtual void Write(BinaryWriter writer);
    public static Id op_Implicit(ClassWithId value);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<object> <System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ClassWithId>.Parse>g__ReadDataFromRefId|10_0(BinaryReader reader, RecordMap recordMap, ClassRecord record);
}
internal class System.Windows.Forms.BinaryFormat.ClassWithMembers : ClassRecord {
    [CompilerGeneratedAttribute]
private Id <LibraryId>k__BackingField;
    public Id LibraryId { get; }
    public static RecordType RecordType { get; }
    [NullableContextAttribute("1")]
public ClassWithMembers(ClassInfo classInfo, Id libraryId, IReadOnlyList`1<object> memberValues);
    [CompilerGeneratedAttribute]
public Id get_LibraryId();
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override ClassWithMembers System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ClassWithMembers>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.ClassWithMembersAndTypes : ClassRecord {
    [CompilerGeneratedAttribute]
private MemberTypeInfo <MemberTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Id <LibraryId>k__BackingField;
    public MemberTypeInfo MemberTypeInfo { get; }
    public Id LibraryId { get; }
    public static RecordType RecordType { get; }
    public ClassWithMembersAndTypes(ClassInfo classInfo, Id libraryId, MemberTypeInfo memberTypeInfo, IReadOnlyList`1<object> memberValues);
    public ClassWithMembersAndTypes(ClassInfo classInfo, Id libraryId, MemberTypeInfo memberTypeInfo, Object[] memberValues);
    [CompilerGeneratedAttribute]
public MemberTypeInfo get_MemberTypeInfo();
    [CompilerGeneratedAttribute]
public Id get_LibraryId();
    public static override RecordType get_RecordType();
    private static override ClassWithMembersAndTypes System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ClassWithMembersAndTypes>.Parse(BinaryReader reader, RecordMap recordMap);
    public virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.FormatterConverterStub : object {
    [CompilerGeneratedAttribute]
private static IFormatterConverter <Instance>k__BackingField;
    public static IFormatterConverter Instance { get; }
    private static FormatterConverterStub();
    [CompilerGeneratedAttribute]
public static IFormatterConverter get_Instance();
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual ulong ToUInt64(object value);
}
[NullableContextAttribute("1")]
internal interface System.Windows.Forms.BinaryFormat.IBinaryFormatParseable`1 {
    public static abstract virtual T Parse(BinaryReader reader, RecordMap recordMap);
}
[NullableContextAttribute("1")]
internal interface System.Windows.Forms.BinaryFormat.IBinaryWriteable {
    public abstract virtual void Write(BinaryWriter writer);
}
internal interface System.Windows.Forms.BinaryFormat.IRecord {
    [CompilerGeneratedAttribute]
private static RecordType <RecordType>k__BackingField;
    public static RecordType RecordType { get; }
    [CompilerGeneratedAttribute]
public static virtual RecordType get_RecordType();
}
internal interface System.Windows.Forms.BinaryFormat.IRecord`1 {
}
internal static class System.Windows.Forms.BinaryFormat.ListConverter : object {
    [NullableContextAttribute("1")]
public static ListConverter`1<object> GetPrimitiveConverter(IList values, StringRecordsCollection strings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.MemberPrimitiveTyped : Record {
    [CompilerGeneratedAttribute]
private PrimitiveType <PrimitiveType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public PrimitiveType PrimitiveType { get; }
    public object Value { get; }
    public static RecordType RecordType { get; }
    public MemberPrimitiveTyped(PrimitiveType primitiveType, object value);
    internal MemberPrimitiveTyped(object value);
    [CompilerGeneratedAttribute]
public PrimitiveType get_PrimitiveType();
    [CompilerGeneratedAttribute]
public object get_Value();
    public static override RecordType get_RecordType();
    private static override MemberPrimitiveTyped System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.MemberPrimitiveTyped>.Parse(BinaryReader reader, RecordMap recordMap);
    public virtual void Write(BinaryWriter writer);
}
internal class System.Windows.Forms.BinaryFormat.MemberReference : object {
    [CompilerGeneratedAttribute]
private Id <IdRef>k__BackingField;
    public Id IdRef { get; }
    public static RecordType RecordType { get; }
    public MemberReference(Id idRef);
    [CompilerGeneratedAttribute]
public Id get_IdRef();
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override MemberReference System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.MemberReference>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public sealed virtual void Write(BinaryWriter writer);
    [NullableContextAttribute("1")]
public static Id op_Implicit(MemberReference value);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.BinaryFormat.MemberTypeInfo : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<ValueTuple`2<BinaryType, object>> _info;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<BinaryType, object> Item { get; }
    public int Count { get; }
    public MemberTypeInfo(IList`1<ValueTuple`2<BinaryType, object>> info);
    public MemberTypeInfo(ValueTuple`2[] info);
    public ValueTuple`2<BinaryType, object> get_Item(int index);
    public int get_Count();
    [NullableContextAttribute("1")]
public static MemberTypeInfo Parse(BinaryReader reader, Count expectedCount);
    [NullableContextAttribute("1")]
public sealed virtual void Write(BinaryWriter writer);
    private sealed virtual override IEnumerator`1<ValueTuple`2<BinaryType, object>> System.Collections.Generic.IEnumerable<(System.Windows.Forms.BinaryFormat.BinaryTypeType,System.ObjectInfo)>.GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.MessageEnd : object {
    [CompilerGeneratedAttribute]
private static MessageEnd <Instance>k__BackingField;
    public static MessageEnd Instance { get; }
    public static RecordType RecordType { get; }
    private static MessageEnd();
    [CompilerGeneratedAttribute]
public static MessageEnd get_Instance();
    public static override RecordType get_RecordType();
    private static override MessageEnd System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.MessageEnd>.Parse(BinaryReader reader, RecordMap recordMap);
    public sealed virtual void Write(BinaryWriter writer);
}
internal abstract class System.Windows.Forms.BinaryFormat.NullRecord : object {
    private Count _count;
    public Count NullCount { get; private protected set; }
    public virtual Count get_NullCount();
    private protected virtual void set_NullCount(Count value);
    [NullableContextAttribute("1")]
internal static void Write(BinaryWriter writer, int nullCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.ObjectNull : NullRecord {
    [CompilerGeneratedAttribute]
private static ObjectNull <Instance>k__BackingField;
    public static ObjectNull Instance { get; }
    public Count NullCount { get; }
    public static RecordType RecordType { get; }
    private static ObjectNull();
    [CompilerGeneratedAttribute]
public static ObjectNull get_Instance();
    public virtual Count get_NullCount();
    public static override RecordType get_RecordType();
    private static override ObjectNull System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.ObjectNull>.Parse(BinaryReader reader, RecordMap recordMap);
    public sealed virtual void Write(BinaryWriter writer);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum System.Windows.Forms.BinaryFormat.PrimitiveType : Enum {
    public byte value__;
    public static PrimitiveType Boolean;
    public static PrimitiveType Byte;
    public static PrimitiveType Char;
    public static PrimitiveType Decimal;
    public static PrimitiveType Double;
    public static PrimitiveType Int16;
    public static PrimitiveType Int32;
    public static PrimitiveType Int64;
    public static PrimitiveType SByte;
    public static PrimitiveType Single;
    public static PrimitiveType TimeSpan;
    public static PrimitiveType DateTime;
    public static PrimitiveType UInt16;
    public static PrimitiveType UInt32;
    public static PrimitiveType UInt64;
    public static PrimitiveType Null;
    public static PrimitiveType String;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.BinaryFormat.Record : object {
    private protected static object ReadPrimitiveType(BinaryReader reader, PrimitiveType primitiveType);
    private protected static IReadOnlyList`1<object> ReadPrimitiveTypes(BinaryReader reader, PrimitiveType primitiveType, int count);
    private protected static void WritePrimitiveType(BinaryWriter writer, PrimitiveType primitiveType, object value);
    private protected static void WritePrimitiveTypes(BinaryWriter writer, PrimitiveType primitiveType, IReadOnlyList`1<object> values);
    internal static IRecord ReadBinaryFormatRecord(BinaryReader reader, RecordMap recordMap);
    private protected static List`1<object> ReadRecords(BinaryReader reader, RecordMap recordMap, Count count);
    private protected static void WriteRecords(BinaryWriter writer, IReadOnlyList`1<object> objects);
    private protected static IReadOnlyList`1<object> ReadValuesFromMemberTypeInfo(BinaryReader reader, RecordMap recordMap, MemberTypeInfo memberTypeInfo);
    private protected static object ReadValue(BinaryReader reader, RecordMap recordMap, BinaryType type, object typeInfo);
    private protected static void WriteValuesFromMemberTypeInfo(BinaryWriter writer, MemberTypeInfo memberTypeInfo, IReadOnlyList`1<object> memberValues);
    public abstract virtual void Write(BinaryWriter writer);
    [CompilerGeneratedAttribute]
internal static TRecord <ReadBinaryFormatRecord>g__ReadSpecificRecord|4_0(RecordMap recordMap, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.BinaryFormat.RecordMap : object {
    private Dictionary`2<int, IRecord> _records;
    public IRecord Item { get; public set; }
    public IRecord get_Item(Id id);
    public void set_Item(Id id, IRecord value);
}
internal enum System.Windows.Forms.BinaryFormat.RecordType : Enum {
    public byte value__;
    public static RecordType SerializedStreamHeader;
    public static RecordType ClassWithId;
    public static RecordType SystemClassWithMembers;
    public static RecordType ClassWithMembers;
    public static RecordType SystemClassWithMembersAndTypes;
    public static RecordType ClassWithMembersAndTypes;
    public static RecordType BinaryObjectString;
    public static RecordType BinaryArray;
    public static RecordType MemberPrimitiveTyped;
    public static RecordType MemberReference;
    public static RecordType ObjectNull;
    public static RecordType MessageEnd;
    public static RecordType BinaryLibrary;
    public static RecordType ObjectNullMultiple256;
    public static RecordType ObjectNullMultiple;
    public static RecordType ArraySinglePrimitive;
    public static RecordType ArraySingleObject;
    public static RecordType ArraySingleString;
    public static RecordType MethodCall;
    public static RecordType MethodReturn;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.BinaryFormat.SerializationExtensions : object {
    [ExtensionAttribute]
public static T GetValue(SerializationInfo info, string name);
    [ExtensionAttribute]
public static SerializationException ConvertToSerializationException(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.SerializationHeader : object {
    public Id RootId;
    public int HeaderId;
    public Id MajorVersion;
    public Id MinorVersion;
    public static RecordType RecordType { get; }
    public static SerializationHeader Default { get; }
    public static override RecordType get_RecordType();
    public static SerializationHeader get_Default();
    private static override SerializationHeader System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.SerializationHeader>.Parse(BinaryReader reader, RecordMap recordMap);
    public sealed virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.StringRecordsCollection : object {
    private Dictionary`2<string, int> _strings;
    private Dictionary`2<int, MemberReference> _memberReferences;
    [CompilerGeneratedAttribute]
private int <CurrentId>k__BackingField;
    public int CurrentId { get; public set; }
    public StringRecordsCollection(int currentId);
    [CompilerGeneratedAttribute]
public int get_CurrentId();
    [CompilerGeneratedAttribute]
public void set_CurrentId(int value);
    public IRecord GetStringRecord(string value);
}
internal class System.Windows.Forms.BinaryFormat.SystemClassWithMembers : ClassRecord {
    public static RecordType RecordType { get; }
    [NullableContextAttribute("1")]
public SystemClassWithMembers(ClassInfo classInfo, IReadOnlyList`1<object> memberValues);
    public static override RecordType get_RecordType();
    [NullableContextAttribute("1")]
private static override SystemClassWithMembers System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.SystemClassWithMembers>.Parse(BinaryReader reader, RecordMap recordMap);
    [NullableContextAttribute("1")]
public virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.BinaryFormat.SystemClassWithMembersAndTypes : ClassRecord {
    [CompilerGeneratedAttribute]
private MemberTypeInfo <MemberTypeInfo>k__BackingField;
    public MemberTypeInfo MemberTypeInfo { get; }
    public static RecordType RecordType { get; }
    public SystemClassWithMembersAndTypes(ClassInfo classInfo, MemberTypeInfo memberTypeInfo, IReadOnlyList`1<object> memberValues);
    public SystemClassWithMembersAndTypes(ClassInfo classInfo, MemberTypeInfo memberTypeInfo, Object[] memberValues);
    [CompilerGeneratedAttribute]
public MemberTypeInfo get_MemberTypeInfo();
    public static override RecordType get_RecordType();
    private static override SystemClassWithMembersAndTypes System.Windows.Forms.BinaryFormat.IBinaryFormatParseable<System.Windows.Forms.BinaryFormat.SystemClassWithMembersAndTypes>.Parse(BinaryReader reader, RecordMap recordMap);
    public virtual void Write(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.BinaryFormat.TypeInfo : object {
    public static string BooleanType;
    public static string CharType;
    public static string StringType;
    public static string SByteType;
    public static string ByteType;
    public static string Int16Type;
    public static string UInt16Type;
    public static string Int32Type;
    public static string UInt32Type;
    public static string Int64Type;
    public static string DecimalType;
    public static string UInt64Type;
    public static string SingleType;
    public static string DoubleType;
    public static string TimeSpanType;
    public static string DateTimeType;
    public static string IntPtrType;
    public static string UIntPtrType;
    public static string HashtableType;
    public static string IDictionaryType;
    public static string ExceptionType;
    public static string NotSupportedExceptionType;
    public static string MscorlibAssemblyName;
    public static string SystemDrawingAssemblyName;
    [NullableContextAttribute("0")]
internal static PrimitiveType GetPrimitiveType(ReadOnlySpan`1<char> typeName);
    internal static PrimitiveType GetPrimitiveType(Type type);
}
internal static class System.Windows.Forms.ClientUtils : object {
    [NullableContextAttribute("1")]
public static int GetWordBoundaryStart(string text, int endIndex);
}
[IsReadOnlyAttribute]
internal class System.Windows.Forms.Count : ValueType {
    private int _count;
    [CompilerGeneratedAttribute]
private static Count <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Count <One>k__BackingField;
    public static Count Zero { get; }
    public static Count One { get; }
    private Count(int count);
    private static Count();
    [CompilerGeneratedAttribute]
public static Count get_Zero();
    [CompilerGeneratedAttribute]
public static Count get_One();
    public static int op_Implicit(Count value);
    public static Count op_Implicit(int value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Count other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(Count left, Count right);
    public static bool op_Inequality(Count left, Count right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.DeviceContextExtensions : object {
    [ExtensionAttribute]
internal static void DrawRectangle(DeviceContextHdcScope hdc, Rectangle rectangle, HPEN hpen);
    [ExtensionAttribute]
internal static void DrawRectangle(DeviceContextHdcScope hdc, int left, int top, int right, int bottom, HPEN hpen);
    [ExtensionAttribute]
internal static void DrawRectangle(HDC hdc, int left, int top, int right, int bottom, HPEN hpen);
    [ExtensionAttribute]
internal static void FillRectangle(DeviceContextHdcScope hdc, Rectangle rectangle, HBRUSH hbrush);
    [ExtensionAttribute]
internal static void FillRectangle(HDC hdc, Rectangle rectangle, HBRUSH hbrush);
    [ExtensionAttribute]
internal static void DrawLine(DeviceContextHdcScope hdc, HPEN hpen, Point p1, Point p2);
    [ExtensionAttribute]
internal static void DrawLine(HDC hdc, HPEN hpen, Point p1, Point p2);
    [ExtensionAttribute]
internal static void DrawLine(DeviceContextHdcScope hdc, HPEN hpen, int x1, int y1, int x2, int y2);
    [ExtensionAttribute]
internal static void DrawLine(HDC hdc, HPEN hpen, int x1, int y1, int x2, int y2);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
internal static void DrawLines(DeviceContextHdcScope hdc, HPEN hpen, ReadOnlySpan`1<int> lines);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
internal static void DrawLines(HDC hdc, HPEN hpen, ReadOnlySpan`1<int> lines);
    [ExtensionAttribute]
internal static Color FindNearestColor(DeviceContextHdcScope hdc, Color color);
    [ExtensionAttribute]
internal static Color FindNearestColor(HDC hdc, Color color);
    [ExtensionAttribute]
internal static Graphics CreateGraphics(HDC hdc);
    [ExtensionAttribute]
internal static Graphics CreateGraphics(CreateDcScope hdc);
    [ExtensionAttribute]
internal static Graphics CreateGraphics(GetDcScope hdc);
    [ExtensionAttribute]
internal static void DrawAndFillEllipse(DeviceContextHdcScope hdc, HPEN pen, HBRUSH brush, Rectangle bounds);
    [ExtensionAttribute]
internal static void DrawAndFillEllipse(HDC hdc, HPEN pen, HBRUSH brush, int left, int top, int right, int bottom);
    [ExtensionAttribute]
internal static void FillRectangle(GetDcScope hdc, HBRUSH hbrush, Rectangle rectangle);
    [ExtensionAttribute]
internal static void FillRectangle(HDC hdc, HBRUSH hbrush, Rectangle rectangle);
    [ExtensionAttribute]
internal static Graphics TryGetGraphics(IDeviceContext deviceContext, bool create);
    [NullableContextAttribute("2")]
private static Graphics AssertNoGraphics(bool create);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class System.Windows.Forms.DeviceContextHdcScope : ValueType {
    [CompilerGeneratedAttribute]
private IDeviceContext <DeviceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private HDC <HDC>k__BackingField;
    private int _savedHdcState;
    public IDeviceContext DeviceContext { get; }
    public HDC HDC { get; }
    public DeviceContextHdcScope(IDeviceContext deviceContext, bool applyGraphicsState, bool saveHdcState);
    public DeviceContextHdcScope(IDeviceContext deviceContext, ApplyGraphicsProperties applyGraphicsState, bool saveHdcState);
    [CompilerGeneratedAttribute]
public IDeviceContext get_DeviceContext();
    [CompilerGeneratedAttribute]
public HDC get_HDC();
    public static HDC op_Implicit(DeviceContextHdcScope& scope);
    public static IntPtr op_Implicit(DeviceContextHdcScope& scope);
    public static WPARAM op_Explicit(DeviceContextHdcScope& scope);
    [ConditionalAttribute("DEBUG")]
private void ValidateHDC();
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.DpiHelper : object {
    internal static short MinTextScaleValue;
    internal static short MaxTextScaleValue;
    internal static float MinTextScaleFactorValue;
    internal static float MaxTextScaleFactorValue;
    internal static double LogicalDpi;
    private static InterpolationMode s_interpolationMode;
    private static bool s_perMonitorAware;
    [CompilerGeneratedAttribute]
private static int <DeviceDpi>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <FirstParkingWindowCreated>k__BackingField;
    internal static int DeviceDpi { get; private set; }
    internal static bool IsPerMonitorV2Awareness { get; }
    internal static bool IsScalingRequirementMet { get; }
    internal static double LogicalToDeviceUnitsScalingFactor { get; }
    private static InterpolationMode InterpolationMode { get; }
    public static bool IsScalingRequired { get; }
    internal static bool FirstParkingWindowCreated { get; internal set; }
    private static DpiHelper();
    [CompilerGeneratedAttribute]
internal static int get_DeviceDpi();
    [CompilerGeneratedAttribute]
private static void set_DeviceDpi(int value);
    private static void Initialize();
    private static int GetDeviceDPI();
    private static bool GetPerMonitorAware();
    internal static bool get_IsPerMonitorV2Awareness();
    internal static bool get_IsScalingRequirementMet();
    internal static double get_LogicalToDeviceUnitsScalingFactor();
    private static InterpolationMode get_InterpolationMode();
    private static Bitmap ScaleBitmapToSize(Bitmap logicalImage, Size deviceImageSize);
    public static Bitmap CreateScaledBitmap(Bitmap logicalImage, int deviceDpi);
    public static bool get_IsScalingRequired();
    public static float GetTextScaleFactor();
    public static int ConvertToGivenDpiPixel(int value, double pixelFactor);
    public static int LogicalToDeviceUnits(int value, int devicePixels);
    public static Padding LogicalToDeviceUnits(Padding logicalPadding, int deviceDpi);
    public static int LogicalToDeviceUnitsX(int value);
    public static int LogicalToDeviceUnitsY(int value);
    public static Size LogicalToDeviceUnits(Size logicalSize, int deviceDpi);
    [NullableContextAttribute("2")]
public static Bitmap CreateResizedBitmap(Bitmap logicalImage, Size targetImageSize);
    public static Bitmap GetBitmapFromIcon(Type t, string name);
    internal static Bitmap GetScaledBitmapFromIcon(Type type, string name, Size defaultSize);
    public static void ScaleBitmapLogicalToDevice(Bitmap& logicalBitmap, int deviceDpi);
    [CompilerGeneratedAttribute]
internal static bool get_FirstParkingWindowCreated();
    [CompilerGeneratedAttribute]
internal static void set_FirstParkingWindowCreated(bool value);
    internal static HighDpiMode GetWinformsApplicationDpiAwareness();
    internal static bool SetWinformsApplicationDpiAwareness(HighDpiMode highDpiMode);
    public static IDisposable EnterDpiAwarenessScope(DPI_AWARENESS_CONTEXT awareness, DPI_HOSTING_BEHAVIOR dpiHosting);
    public static T CreateInstanceInSystemAwareContext(Func`1<T> createInstance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Windows.Forms.FileDialogCustomPlace : object {
    private string _path;
    private Guid _knownFolderGuid;
    public string Path { get; public set; }
    public Guid KnownFolderGuid { get; public set; }
    [NullableContextAttribute("2")]
public FileDialogCustomPlace(string path);
    public FileDialogCustomPlace(Guid knownFolderGuid);
    public string get_Path();
    public void set_Path(string value);
    public Guid get_KnownFolderGuid();
    public void set_KnownFolderGuid(Guid value);
    public virtual string ToString();
    [NullableContextAttribute("0")]
internal IShellItem* GetNativePath();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Windows.Forms.FileDialogCustomPlacesCollection : Collection`1<FileDialogCustomPlace> {
    internal void Apply(IFileDialog* dialog);
    [NullableContextAttribute("2")]
public void Add(string path);
    public void Add(Guid knownFolderGuid);
}
[ExtensionAttribute]
internal static class System.Windows.Forms.FontExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Font WithSize(Font templateFont, float emSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.GdiPlusCache : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static PenCache s_penCache;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static SolidBrushCache s_brushCache;
    private static PenCache PenCache { get; }
    private static SolidBrushCache BrushCache { get; }
    private static PenCache get_PenCache();
    private static SolidBrushCache get_BrushCache();
    private static Scope<Pen, Color, Color> GetPenScope(Color color);
    private static Scope<SolidBrush, Color, Color> GetSolidBrushScope(Color color);
    [ExtensionAttribute]
internal static Scope<Pen, Color, Color> GetCachedPenScope(Color color);
    [ExtensionAttribute]
internal static Scope<Pen, Color, Color> GetCachedPenScope(Color color, int width);
    [ExtensionAttribute]
internal static Scope<SolidBrush, Color, Color> GetCachedSolidBrushScope(Color color);
    [NullableContextAttribute("2")]
private static Brush BrushFromKnownColor(KnownColor color);
    [NullableContextAttribute("2")]
private static Pen PenFromKnownColor(KnownColor color);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class System.Windows.Forms.GraphicsClipScope : ValueType {
    private Region _originalClip;
    private Graphics _graphics;
    public GraphicsClipScope(Graphics graphics);
    public void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class System.Windows.Forms.GraphicsStateScope : ValueType {
    private GraphicsState _state;
    private Graphics _graphics;
    public GraphicsStateScope(Graphics graphics);
    public void Dispose();
}
public enum System.Windows.Forms.HighDpiMode : Enum {
    public int value__;
    public static HighDpiMode DpiUnaware;
    public static HighDpiMode SystemAware;
    public static HighDpiMode PerMonitor;
    public static HighDpiMode PerMonitorV2;
    public static HighDpiMode DpiUnawareGdiScaled;
}
[IsReadOnlyAttribute]
internal class System.Windows.Forms.Id : ValueType {
    private int _id;
    private Id(int id);
    public static int op_Implicit(Id value);
    public static Id op_Implicit(int value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Id other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(Id left, Id right);
    public static bool op_Inequality(Id left, Id right);
}
internal class System.Windows.Forms.IExtender : ValueType {
    private Void** _vtable;
    public static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IExtender();
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
    public static override void PopulateVTable(Vtbl* vtable);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Align(IExtender* this, Int32* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Align(IExtender* this, int value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Enabled(IExtender* this, BOOL* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Enabled(IExtender* this, BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Height(IExtender* this, Int32* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Height(IExtender* this, int value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Left(IExtender* this, Int32* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Left(IExtender* this, int value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_TabStop(IExtender* this, BOOL* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_TabStop(IExtender* this, BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Top(IExtender* this, Int32* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Top(IExtender* this, int value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Visible(IExtender* this, BOOL* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Visible(IExtender* this, BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Width(IExtender* this, Int32* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_Width(IExtender* this, int value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Name(IExtender* this, BSTR* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Parent(IExtender* this, IUnknown** value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Hwnd(IExtender* this, HWND* value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Container(IExtender* this, IUnknown** value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Move(IExtender* this, Void* left, Void* top, Void* width, Void* height);
}
[NullableContextAttribute("2")]
internal interface System.Windows.Forms.IGraphicsHdcProvider {
    public bool IsGraphicsStateClean { get; }
    public abstract virtual bool get_IsGraphicsStateClean();
    public abstract virtual HDC GetHDC();
    public abstract virtual Graphics GetGraphics(bool createIfNeeded);
}
public class System.Windows.Forms.Message : ValueType {
    [CompilerGeneratedAttribute]
private IntPtr <HWnd>k__BackingField;
    internal MessageId MsgInternal;
    internal WPARAM WParamInternal;
    internal LPARAM LParamInternal;
    internal LRESULT ResultInternal;
    public IntPtr HWnd { get; public set; }
    internal HWND HWND { get; }
    public int Msg { get; public set; }
    public IntPtr WParam { get; public set; }
    public IntPtr LParam { get; public set; }
    public IntPtr Result { get; public set; }
    private HWND IHandle<Windows.Win32.Foundation.HWND>.Handle { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IntPtr get_HWnd();
    [CompilerGeneratedAttribute]
public void set_HWnd(IntPtr value);
    internal HWND get_HWND();
    [IsReadOnlyAttribute]
public int get_Msg();
    public void set_Msg(int value);
    [IsReadOnlyAttribute]
public IntPtr get_WParam();
    public void set_WParam(IntPtr value);
    [IsReadOnlyAttribute]
public IntPtr get_LParam();
    public void set_LParam(IntPtr value);
    [IsReadOnlyAttribute]
public IntPtr get_Result();
    public void set_Result(IntPtr value);
    private sealed virtual override HWND IHandle<Windows.Win32.Foundation.HWND>.get_Handle();
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public object GetLParam(Type cls);
    internal static Message Create(MSG* msg);
    internal static Message Create(HWND hWnd, UInt32 msg, WPARAM wparam, LPARAM lparam);
    internal static Message Create(HWND hWnd, MessageId msg, WPARAM wparam, LPARAM lparam);
    public static Message Create(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object o);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(Message other);
    public static bool op_Equality(Message a, Message b);
    public static bool op_Inequality(Message a, Message b);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    internal MSG ToMSG();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.MessageDecoder : object {
    public static string ToString(Message message);
    private static string ToString(HWND hwnd, MessageId messageId, WPARAM wparam, LPARAM lparam, LRESULT result);
    [CompilerGeneratedAttribute]
internal static string <ToString>g__Parenthesize|1_0(string input);
}
internal static class System.Windows.Forms.NativeMethods : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal abstract class System.Windows.Forms.NonNullCollection`1 : object {
    private List`1<T> _list;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    private string DebuggerDisplay { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public NonNullCollection`1(IEnumerable`1<T> items);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void AddRange(IEnumerable`1<T> items);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object value);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object value);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private string get_DebuggerDisplay();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    protected virtual void ItemAdded(T item);
    [DoesNotReturnAttribute]
private static T ThrowArgumentNull(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.ObjectCache`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] _itemsCache;
    public ObjectCache`1(int cacheSpace);
    protected T Acquire();
    protected void Release(T item);
    protected abstract virtual bool Accept(T item);
    protected abstract virtual T Create();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Windows.Forms.OsVersion : object {
    [SupportedOSPlatformGuardAttribute("windows10.0.10240")]
public static bool IsWindows10_1507OrGreater();
    [SupportedOSPlatformGuardAttribute("windows10.0.14393")]
public static bool IsWindows10_1607OrGreater();
    [SupportedOSPlatformGuardAttribute("windows10.0.15063")]
public static bool IsWindows10_1703OrGreater();
    [SupportedOSPlatformGuardAttribute("windows10.0.17134")]
public static bool IsWindows10_18030rGreater();
    [SupportedOSPlatformGuardAttribute("windows11")]
public static bool IsWindows11_OrGreater();
    [SupportedOSPlatformGuardAttribute("windows11.0.22621")]
public static bool IsWindows11_22H2OrGreater();
    [SupportedOSPlatformGuardAttribute("windows8.1")]
public static bool IsWindows8_1OrGreater();
    [SupportedOSPlatformGuardAttribute("windows8")]
public static bool IsWindows8OrGreater();
}
[TypeConverterAttribute("System.Windows.Forms.PaddingConverter")]
[TypeForwardedFromAttribute("System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Windows.Forms.Padding : ValueType {
    private bool _all;
    private int _top;
    private int _left;
    private int _right;
    private int _bottom;
    public static Padding Empty;
    [RefreshPropertiesAttribute("1")]
public int All { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Bottom { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Left { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Right { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Top { get; public set; }
    [BrowsableAttribute("False")]
public int Horizontal { get; }
    [BrowsableAttribute("False")]
public int Vertical { get; }
    [BrowsableAttribute("False")]
public Size Size { get; }
    public Padding(int all);
    public Padding(int left, int top, int right, int bottom);
    private static Padding();
    [IsReadOnlyAttribute]
public int get_All();
    public void set_All(int value);
    [IsReadOnlyAttribute]
public int get_Bottom();
    public void set_Bottom(int value);
    [IsReadOnlyAttribute]
public int get_Left();
    public void set_Left(int value);
    [IsReadOnlyAttribute]
public int get_Right();
    public void set_Right(int value);
    [IsReadOnlyAttribute]
public int get_Top();
    public void set_Top(int value);
    [IsReadOnlyAttribute]
public int get_Horizontal();
    [IsReadOnlyAttribute]
public int get_Vertical();
    [IsReadOnlyAttribute]
public Size get_Size();
    public static Padding Add(Padding p1, Padding p2);
    public static Padding Subtract(Padding p1, Padding p2);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object other);
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(Padding other);
    public static Padding op_Addition(Padding p1, Padding p2);
    public static Padding op_Subtraction(Padding p1, Padding p2);
    public static bool op_Equality(Padding p1, Padding p2);
    public static bool op_Inequality(Padding p1, Padding p2);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    private void ResetAll();
    private void ResetBottom();
    private void ResetLeft();
    private void ResetRight();
    private void ResetTop();
    internal void Scale(float dx, float dy);
    internal bool ShouldSerializeAll();
    [ConditionalAttribute("DEBUG")]
private void Debug_SanityCheck();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Windows.Forms.PaddingConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("1")]
public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("The Type of value cannot be statically discovered. The public parameterless constructor or the 'Default' static field may be trimmed from the Attribute's Type.")]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Windows.Forms.PenCache : RefCountedCache`3<Pen, Color, Color> {
    public PenCache(int softLimit, int hardLimit);
    protected virtual CacheEntry<Pen, Color, Color> CreateEntry(Color key, bool cached);
    protected virtual bool IsMatch(Color key, CacheEntry<Pen, Color, Color> entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Windows.Forms.Primitives.LocalAppContextSwitches : object {
    private static string ScaleTopLevelFormMinMaxSizeForDpiSwitchName;
    internal static string AnchorLayoutV2SwitchName;
    internal static string ServicePointManagerCheckCrlSwitchName;
    internal static string TrackBarModernRenderingSwitchName;
    private static string DoNotCatchUnhandledExceptionsSwitchName;
    private static int s_scaleTopLevelFormMinMaxSizeForDpi;
    private static int s_anchorLayoutV2;
    private static int s_servicePointManagerCheckCrl;
    private static int s_trackBarModernRendering;
    private static int s_doNotCatchUnhandledExceptions;
    [NullableAttribute("2")]
private static FrameworkName s_targetFrameworkName;
    public static bool DoNotCatchUnhandledExceptions { get; }
    [NullableAttribute("2")]
public static FrameworkName TargetFrameworkName { get; }
    public static bool AnchorLayoutV2 { get; }
    public static bool ScaleTopLevelFormMinMaxSizeForDpi { get; }
    public static bool TrackBarModernRendering { get; }
    public static bool ServicePointManagerCheckCrl { get; }
    public static bool get_DoNotCatchUnhandledExceptions();
    [NullableContextAttribute("2")]
public static FrameworkName get_TargetFrameworkName();
    private static bool GetCachedSwitchValue(string switchName, Int32& cachedSwitchValue);
    private static bool GetSwitchValue(string switchName, Int32& cachedSwitchValue);
    public static bool get_AnchorLayoutV2();
    public static bool get_ScaleTopLevelFormMinMaxSizeForDpi();
    public static bool get_TrackBarModernRendering();
    public static bool get_ServicePointManagerCheckCrl();
    [CompilerGeneratedAttribute]
internal static bool <GetSwitchValue>g__GetSwitchDefaultValue|16_0(string switchName);
}
internal static class System.Windows.Forms.Primitives.Resources.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string COM2UnhandledVT { get; }
    internal static string TextParseFailedFormat { get; }
    internal static string PropertyValueInvalidEntry { get; }
    internal static string General_MissingService { get; }
    internal static string Win32SetThreadsDpiContextFailed { get; }
    internal static string Win32GetThreadsDpiContextFailed { get; }
    internal static string Win32SetThreadsDpiHostingBehaviorFailed { get; }
    internal static string FolderBrowserDialogNoRootFolder { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_COM2UnhandledVT();
    internal static string get_TextParseFailedFormat();
    internal static string get_PropertyValueInvalidEntry();
    internal static string get_General_MissingService();
    internal static string get_Win32SetThreadsDpiContextFailed();
    internal static string get_Win32GetThreadsDpiContextFailed();
    internal static string get_Win32SetThreadsDpiHostingBehaviorFailed();
    internal static string get_FolderBrowserDialogNoRootFolder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class System.Windows.Forms.RefCountedCache`3 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SinglyLinkedList`1<CacheEntry<TObject, TCacheEntryData, TKey>> _list;
    private int _softLimit;
    private int _hardLimit;
    private static int MoveToFront;
    public RefCountedCache`3(int softLimit, int hardLimit);
    protected abstract virtual CacheEntry<TObject, TCacheEntryData, TKey> CreateEntry(TKey key, bool cached);
    protected abstract virtual bool IsMatch(TKey key, CacheEntry<TObject, TCacheEntryData, TKey> entry);
    [NullableContextAttribute("0")]
public virtual Scope<TObject, TCacheEntryData, TKey> GetEntry(TKey key);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[SkipLocalsInitAttribute]
private bool <GetEntry>g__Find|8_0(TKey key, Scope& scope);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[SkipLocalsInitAttribute]
private Scope<TObject, TCacheEntryData, TKey> <GetEntry>g__Add|8_1(TKey key);
    [CompilerGeneratedAttribute]
private void <GetEntry>g__Clean|8_2();
}
public enum System.Windows.Forms.ScreenOrientation : Enum {
    public int value__;
    public static ScreenOrientation Angle0;
    public static ScreenOrientation Angle90;
    public static ScreenOrientation Angle180;
    public static ScreenOrientation Angle270;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.SinglyLinkedList`1 : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Node<T> <First>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Node<T> <Last>k__BackingField;
    public int Count { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Node<T> First { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Node<T> Last { get; private set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public Node<T> get_First();
    [CompilerGeneratedAttribute]
private void set_First(Node<T> value);
    [CompilerGeneratedAttribute]
public Node<T> get_Last();
    [CompilerGeneratedAttribute]
private void set_Last(Node<T> value);
    public Node<T> AddFirst(T value);
    public Node<T> AddLast(T value);
    [NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class System.Windows.Forms.SolidBrushCache : RefCountedCache`3<SolidBrush, Color, Color> {
    public SolidBrushCache(int softLimit, int hardLimit);
    protected virtual CacheEntry<SolidBrush, Color, Color> CreateEntry(Color key, bool cached);
    protected virtual bool IsMatch(Color key, CacheEntry<SolidBrush, Color, Color> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Windows.Forms.SystemDrawingExtensions : object {
    [ExtensionAttribute]
internal static HBITMAP GetHBITMAP(Bitmap bitmap);
    [ExtensionAttribute]
internal static HFONT ToHFONT(Font font);
    [ExtensionAttribute]
internal static Color FindNearestColor(Graphics graphics, Color color);
    [ExtensionAttribute]
internal static bool HasTransparency(Color color);
    [ExtensionAttribute]
internal static bool IsFullyTransparent(Color color);
    [ExtensionAttribute]
internal static void ThrowIfFailed(GpStatus status);
    [ExtensionAttribute]
internal static void DrawLines(Graphics graphics, Pen pen, ReadOnlySpan`1<int> lines);
    [ExtensionAttribute]
[SkipLocalsInitAttribute]
internal static Color MixColor(Color color1, Color color2);
    [ExtensionAttribute]
internal static Color InvertColor(Color color);
    [ExtensionAttribute]
internal static Pen CreateStaticPen(Color color, DashStyle dashStyle, float size);
    [ExtensionAttribute]
internal static Pen CreateStaticPen(Brush brush, float width);
    [ExtensionAttribute]
internal static SolidBrush CreateStaticBrush(Color color);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class System.Windows.Forms.ThemingScope : ValueType {
    private static ACTCTXW s_enableThemingActivationContext;
    private static HANDLE s_hActCtx;
    private static bool s_contextCreationSucceeded;
    private UIntPtr _cookie;
    public ThemingScope(bool useVisualStyles);
    public void Dispose();
    public static bool CreateActivationContext(HINSTANCE module, int nativeResourceManifestID);
    [NullableContextAttribute("1")]
public static bool CreateActivationContext(Stream manifest);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Windows.Forms.UnicodeCharBuffer : object {
    private Char[] _buffer;
    private int _offset;
    public UnicodeCharBuffer(int size);
    public IntPtr AllocCoTaskMem();
    public string GetString();
    public void PutCoTaskMem(IntPtr ptr);
    public void PutString(string s);
}
internal static class System.Windows.Forms.UnsafeNativeMethods : object {
    [NullableContextAttribute("1")]
public static HRESULT PrintDlgEx(PRINTDLGEX lppdex);
}
public class System.Windows.Forms.VisualStyles.TextMetrics : ValueType {
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ascent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Descent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InternalLeading>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExternalLeading>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AverageCharWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCharWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Overhang>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DigitizedAspectX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DigitizedAspectY>k__BackingField;
    [CompilerGeneratedAttribute]
private char <FirstChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <LastChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <DefaultChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <BreakChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underlined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StruckOut>k__BackingField;
    [CompilerGeneratedAttribute]
private TextMetricsPitchAndFamilyValues <PitchAndFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private TextMetricsCharacterSet <CharSet>k__BackingField;
    public int Height { get; public set; }
    public int Ascent { get; public set; }
    public int Descent { get; public set; }
    public int InternalLeading { get; public set; }
    public int ExternalLeading { get; public set; }
    public int AverageCharWidth { get; public set; }
    public int MaxCharWidth { get; public set; }
    public int Weight { get; public set; }
    public int Overhang { get; public set; }
    public int DigitizedAspectX { get; public set; }
    public int DigitizedAspectY { get; public set; }
    public char FirstChar { get; public set; }
    public char LastChar { get; public set; }
    public char DefaultChar { get; public set; }
    public char BreakChar { get; public set; }
    public bool Italic { get; public set; }
    public bool Underlined { get; public set; }
    public bool StruckOut { get; public set; }
    public TextMetricsPitchAndFamilyValues PitchAndFamily { get; public set; }
    public TextMetricsCharacterSet CharSet { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Ascent();
    [CompilerGeneratedAttribute]
public void set_Ascent(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Descent();
    [CompilerGeneratedAttribute]
public void set_Descent(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_InternalLeading();
    [CompilerGeneratedAttribute]
public void set_InternalLeading(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ExternalLeading();
    [CompilerGeneratedAttribute]
public void set_ExternalLeading(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_AverageCharWidth();
    [CompilerGeneratedAttribute]
public void set_AverageCharWidth(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_MaxCharWidth();
    [CompilerGeneratedAttribute]
public void set_MaxCharWidth(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Overhang();
    [CompilerGeneratedAttribute]
public void set_Overhang(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_DigitizedAspectX();
    [CompilerGeneratedAttribute]
public void set_DigitizedAspectX(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_DigitizedAspectY();
    [CompilerGeneratedAttribute]
public void set_DigitizedAspectY(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_FirstChar();
    [CompilerGeneratedAttribute]
public void set_FirstChar(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_LastChar();
    [CompilerGeneratedAttribute]
public void set_LastChar(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_DefaultChar();
    [CompilerGeneratedAttribute]
public void set_DefaultChar(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_BreakChar();
    [CompilerGeneratedAttribute]
public void set_BreakChar(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Underlined();
    [CompilerGeneratedAttribute]
public void set_Underlined(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_StruckOut();
    [CompilerGeneratedAttribute]
public void set_StruckOut(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TextMetricsPitchAndFamilyValues get_PitchAndFamily();
    [CompilerGeneratedAttribute]
public void set_PitchAndFamily(TextMetricsPitchAndFamilyValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TextMetricsCharacterSet get_CharSet();
    [CompilerGeneratedAttribute]
public void set_CharSet(TextMetricsCharacterSet value);
    internal static TextMetrics FromTEXTMETRICW(TEXTMETRICW metrics);
}
public enum System.Windows.Forms.VisualStyles.TextMetricsCharacterSet : Enum {
    public int value__;
    public static TextMetricsCharacterSet Ansi;
    public static TextMetricsCharacterSet Baltic;
    public static TextMetricsCharacterSet ChineseBig5;
    public static TextMetricsCharacterSet Default;
    public static TextMetricsCharacterSet EastEurope;
    public static TextMetricsCharacterSet Gb2312;
    public static TextMetricsCharacterSet Greek;
    public static TextMetricsCharacterSet Hangul;
    public static TextMetricsCharacterSet Mac;
    public static TextMetricsCharacterSet Oem;
    public static TextMetricsCharacterSet Russian;
    public static TextMetricsCharacterSet ShiftJis;
    public static TextMetricsCharacterSet Symbol;
    public static TextMetricsCharacterSet Turkish;
    public static TextMetricsCharacterSet Vietnamese;
    public static TextMetricsCharacterSet Johab;
    public static TextMetricsCharacterSet Arabic;
    public static TextMetricsCharacterSet Hebrew;
    public static TextMetricsCharacterSet Thai;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.TextMetricsPitchAndFamilyValues : Enum {
    public int value__;
    public static TextMetricsPitchAndFamilyValues FixedPitch;
    public static TextMetricsPitchAndFamilyValues Vector;
    public static TextMetricsPitchAndFamilyValues TrueType;
    public static TextMetricsPitchAndFamilyValues Device;
}
public enum System.Windows.Forms.VisualStyles.ThemeSizeType : Enum {
    public int value__;
    public static ThemeSizeType Minimum;
    public static ThemeSizeType True;
    public static ThemeSizeType Draw;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.WeakRefCollection : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<WeakRefObject> <InnerList>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefCheckThreshold>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<WeakRefObject> InnerList { get; }
    public int RefCheckThreshold { get; public set; }
    public object Item { get; public set; }
    public bool IsFixedSize { get; }
    public int Count { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public WeakRefCollection(int size);
    [CompilerGeneratedAttribute]
public List`1<WeakRefObject> get_InnerList();
    [CompilerGeneratedAttribute]
public int get_RefCheckThreshold();
    [CompilerGeneratedAttribute]
public void set_RefCheckThreshold(int value);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public void ScavengeReferences();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static WeakRefObject CreateWeakRefObject(object value);
    public sealed virtual void Clear();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool Contains(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Remove(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int Add(object value);
    public sealed virtual int get_Count();
    [NullableContextAttribute("1")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("1")]
public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__byte_1 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Byte", "1")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Byte& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Byte& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<byte> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<byte> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<byte> value);
    public static __byte_1 op_Implicit(ReadOnlySpan`1<byte> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__byte_260 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Byte", "260")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Byte& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Byte& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<byte> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<byte> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<byte> value);
    public static __byte_260 op_Implicit(ReadOnlySpan`1<byte> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__byte_32 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Byte", "32")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Byte& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Byte& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<byte> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<byte> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<byte> value);
    public static __byte_32 op_Implicit(ReadOnlySpan`1<byte> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__byte_4 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Byte", "4")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Byte& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Byte& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<byte> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<byte> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<byte> value);
    public static __byte_4 op_Implicit(ReadOnlySpan`1<byte> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_1 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "1")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<char> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<char> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_1 op_Implicit(string value);
    public static __char_1 op_Implicit(ReadOnlySpan`1<char> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_260 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "260")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<char> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<char> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_260 op_Implicit(string value);
    public static __char_260 op_Implicit(ReadOnlySpan`1<char> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_32 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "32")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<char> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<char> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_32 op_Implicit(string value);
    public static __char_32 op_Implicit(ReadOnlySpan`1<char> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__char_64 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Char", "64")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Char& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Char& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<char> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<char> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<char> value);
    [IsReadOnlyAttribute]
internal bool Equals(string value);
    [IsReadOnlyAttribute]
internal string ToString(int length);
    [IsReadOnlyAttribute]
public virtual string ToString();
    public static __char_64 op_Implicit(string value);
    public static __char_64 op_Implicit(ReadOnlySpan`1<char> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__int_6 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.Int32", "6")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal Int32& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal Int32& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<int> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<int> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<int> value);
    public static __int_6 op_Implicit(ReadOnlySpan`1<int> value);
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.__uint_1 : ValueType {
    private static int SpanLength;
    [FixedBufferAttribute("System.UInt32", "1")]
internal <Value>e__FixedBuffer Value;
    internal int Length { get; }
    [UnscopedRefAttribute]
internal UInt32& Item { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    internal UInt32& get_Item(int index);
    [UnscopedRefAttribute]
internal Span`1<UInt32> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<UInt32> AsReadOnlySpan();
    [IsReadOnlyAttribute]
internal bool Equals(ReadOnlySpan`1<UInt32> value);
    public static __uint_1 op_Implicit(ReadOnlySpan`1<UInt32> value);
}
internal static class Windows.Win32.ComHelpers : object {
    private static HRESULT COR_E_OBJECTDISPOSED;
    private static HRESULT S_OK;
    private static ComHelpers();
    internal static ComScope`1<T> GetComScope(object object);
    internal static ComScope`1<T> TryGetComScope(object object);
    internal static ComScope`1<T> TryGetComScope(object object, HRESULT& hr);
    internal static T* GetComPointer(object object);
    internal static T* TryGetComPointer(object object);
    internal static bool SupportsInterface(object object);
    internal static T* TryGetComPointer(object object, HRESULT& result);
    private static bool TryUnwrapComWrapperCCW(IUnknown* unknown, TWrapper& interface);
    internal static bool TryGetManagedInterface(IUnknown* unknown, bool takeOwnership, TWrapper& interface);
    internal static bool WrapsManagedObject(object object, IUnknown* unknown);
    internal static HRESULT UnwrapCCW(TThis* this, TInterface& object);
    internal static void PopulateIUnknown(Vtbl* vtable);
    private static void PopulateIUnknownImpl(Vtbl* vtable);
}
internal class Windows.Win32.Foundation.__CHAR_1 : ValueType {
    private static int SpanLength;
    internal CHAR _0;
    internal int Length { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    [UnscopedRefAttribute]
internal Span`1<CHAR> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<CHAR> AsReadOnlySpan();
    public static __CHAR_1 op_Implicit(ReadOnlySpan`1<CHAR> value);
}
internal class Windows.Win32.Foundation.AgileComPointer`1 : object {
    private UInt32 _cookie;
    private TInterface* _originalPointer;
    public AgileComPointer`1(TInterface* interface, bool takeOwnership);
    public bool MatchesOriginalPointer(TInterface* interface);
    public ComScope`1<TInterface> GetInterface();
    public ComScope`1<TAsInterface> GetInterface();
    public ComScope`1<TInterface> TryGetInterface(HRESULT& hr);
    public ComScope`1<TAsInterface> TryGetInterface(HRESULT& hr);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Windows.Win32.Foundation.ATOM : ValueType {
    public ushort Value;
    [CompilerGeneratedAttribute]
private static ATOM <Null>k__BackingField;
    public static ATOM Null { get; }
    public bool IsValid { get; }
    public ATOM(ushort atom);
    private static ATOM();
    [CompilerGeneratedAttribute]
public static ATOM get_Null();
    public bool get_IsValid();
    public static UInt32 op_Implicit(ATOM atom);
    public static ATOM op_Implicit(IntPtr atom);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.BOOL : ValueType {
    public static int Size;
    [CompilerGeneratedAttribute]
private static BOOL <TRUE>k__BackingField;
    [CompilerGeneratedAttribute]
private static BOOL <FALSE>k__BackingField;
    internal int Value;
    public static BOOL TRUE { get; }
    public static BOOL FALSE { get; }
    internal BOOL(int value);
    internal BOOL(bool value);
    private static BOOL();
    [CompilerGeneratedAttribute]
public static BOOL get_TRUE();
    [CompilerGeneratedAttribute]
public static BOOL get_FALSE();
    public static bool op_True(BOOL value);
    public static bool op_False(BOOL value);
    public static int op_Implicit(BOOL value);
    public static BOOL op_Explicit(int value);
    public static bool op_Equality(BOOL left, BOOL right);
    public static bool op_Inequality(BOOL left, BOOL right);
    public sealed virtual bool Equals(BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Implicit(BOOL value);
    public static BOOL op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.BOOLEAN : ValueType {
    internal byte Value;
    internal BOOLEAN(byte value);
    internal BOOLEAN(bool value);
    public static byte op_Implicit(BOOLEAN value);
    public static BOOLEAN op_Explicit(byte value);
    public static bool op_Equality(BOOLEAN left, BOOLEAN right);
    public static bool op_Inequality(BOOLEAN left, BOOLEAN right);
    public sealed virtual bool Equals(BOOLEAN other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Implicit(BOOLEAN value);
    public static BOOLEAN op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.BSTR : ValueType {
    internal Char* Value;
    public bool IsNull { get; }
    internal int Length { get; }
    [NullableContextAttribute("1")]
public BSTR(string value);
    internal BSTR(Char* value);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public string ToStringAndFree();
    public bool get_IsNull();
    public static Char* op_Implicit(BSTR value);
    public static BSTR op_Explicit(Char* value);
    public static bool op_Equality(BSTR left, BSTR right);
    public static bool op_Inequality(BSTR left, BSTR right);
    public sealed virtual bool Equals(BSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static IntPtr op_Implicit(BSTR value);
    public static BSTR op_Explicit(IntPtr value);
    public static BSTR op_Explicit(UIntPtr value);
    internal int get_Length();
    public static ReadOnlySpan`1<char> op_Implicit(BSTR bstr);
    internal ReadOnlySpan`1<char> AsSpan();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.CHAR : ValueType {
    internal byte Value;
    internal CHAR(byte value);
    public static byte op_Implicit(CHAR value);
    public static CHAR op_Explicit(byte value);
    public static bool op_Equality(CHAR left, CHAR right);
    public static bool op_Inequality(CHAR left, CHAR right);
    public sealed virtual bool Equals(CHAR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.COLORREF : ValueType {
    internal UInt32 Value;
    internal COLORREF(UInt32 value);
    public static COLORREF op_Implicit(Color color);
    public static Color op_Implicit(COLORREF color);
    public static COLORREF op_Implicit(int color);
    public static UInt32 op_Implicit(COLORREF value);
    public static COLORREF op_Explicit(UInt32 value);
    public static bool op_Equality(COLORREF left, COLORREF right);
    public static bool op_Inequality(COLORREF left, COLORREF right);
    public sealed virtual bool Equals(COLORREF other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Windows.Win32.Foundation.ComInterfaceTable : ValueType {
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private ComInterfaceEntry* <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [NullableAttribute("0")]
public ComInterfaceEntry* Entries { get; public set; }
    public int Count { get; public set; }
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public ComInterfaceEntry* get_Entries();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Entries(ComInterfaceEntry* value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Count(int value);
    public static ComInterfaceTable Create();
    public static ComInterfaceTable Create();
    public static ComInterfaceTable Create();
    public static ComInterfaceTable Create();
    public static ComInterfaceTable Create();
    public static ComInterfaceTable Create();
    public static ComInterfaceTable Create();
    [NullableContextAttribute("0")]
private static Span`1<ComInterfaceEntry> AllocateEntries(int count);
    private static ComInterfaceEntry GetEntry();
}
[DefaultMemberAttribute("Item")]
internal class Windows.Win32.Foundation.ComPointerList`1 : object {
    [NullableAttribute("1")]
private List`1<IntPtr> _pointers;
    public int Count { get; }
    public T* Item { get; }
    public int get_Count();
    public T* get_Item(int index);
    public void Add(T* item);
    public bool Remove(T* item);
    public void RemoveAt(int index);
    public void Clear();
    public int IndexOf(T* item);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class Windows.Win32.Foundation.ComScope`1 : ValueType {
    private IntPtr _value;
    public T* Value { get; }
    public IUnknown* AsUnknown { get; }
    public bool IsNull { get; }
    public ComScope`1(T* value);
    public T* get_Value();
    public IUnknown* get_AsUnknown();
    public static T* op_Implicit(ComScope`1& scope);
    public static Void* op_Implicit(ComScope`1& scope);
    public static IntPtr op_Implicit(ComScope`1& scope);
    public static T** op_Implicit(ComScope`1& scope);
    public static Void** op_Implicit(ComScope`1& scope);
    public bool get_IsNull();
    public ComScope`1<TTo> TryQuery(HRESULT& hr);
    public static ComScope`1<T> TryQueryFrom(TFrom* from, HRESULT& hr);
    public static ComScope`1<T> QueryFrom(TFrom* from);
    public bool SupportsInterface();
    public void Dispose();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.DECIMAL : ValueType {
    internal ushort wReserved;
    internal _Anonymous1_e__Union Anonymous1;
    internal UInt32 Hi32;
    internal _Anonymous2_e__Union Anonymous2;
    public DECIMAL(decimal value);
    public decimal ToDecimal();
    public static decimal op_Implicit(DECIMAL value);
    public static DECIMAL op_Implicit(decimal value);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Foundation.DUPLICATE_HANDLE_OPTIONS : Enum {
    public UInt32 value__;
    public static DUPLICATE_HANDLE_OPTIONS DUPLICATE_CLOSE_SOURCE;
    public static DUPLICATE_HANDLE_OPTIONS DUPLICATE_SAME_ACCESS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.FARPROC : ValueType {
    internal IntPtr Value;
    internal static FARPROC Null { get; }
    internal bool IsNull { get; }
    internal FARPROC(IntPtr value);
    internal static FARPROC get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(FARPROC value);
    public static FARPROC op_Explicit(IntPtr value);
    public static bool op_Equality(FARPROC left, FARPROC right);
    public static bool op_Inequality(FARPROC left, FARPROC right);
    public bool Equals(FARPROC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal TDelegate CreateDelegate();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.FILETIME : ValueType {
    internal UInt32 dwLowDateTime;
    internal UInt32 dwHighDateTime;
}
internal static class Windows.Win32.Foundation.GlobalInterfaceTable : object {
    private static IGlobalInterfaceTable* s_globalInterfaceTable;
    private static GlobalInterfaceTable();
    public static UInt32 RegisterInterface(TInterface* interface);
    public static ComScope`1<TInterface> GetInterface(UInt32 cookie, HRESULT& result);
    public static HRESULT RevokeInterface(UInt32 cookie);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.HANDLE : ValueType {
    internal IntPtr Value;
    internal static HANDLE Null { get; }
    internal bool IsNull { get; }
    internal HANDLE(IntPtr value);
    internal static HANDLE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HANDLE value);
    public static HANDLE op_Explicit(IntPtr value);
    public static bool op_Equality(HANDLE left, HANDLE right);
    public static bool op_Inequality(HANDLE left, HANDLE right);
    public sealed virtual bool Equals(HANDLE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.HGLOBAL : ValueType {
    internal Void* Value;
    internal HGLOBAL(Void* value);
    public static Void* op_Implicit(HGLOBAL value);
    public static HGLOBAL op_Explicit(Void* value);
    public static bool op_Equality(HGLOBAL left, HGLOBAL right);
    public static bool op_Inequality(HGLOBAL left, HGLOBAL right);
    public sealed virtual bool Equals(HGLOBAL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static IntPtr op_Implicit(HGLOBAL value);
    public static HGLOBAL op_Explicit(IntPtr value);
    public static HGLOBAL op_Explicit(UIntPtr value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.HINSTANCE : ValueType {
    internal IntPtr Value;
    internal static HINSTANCE Null { get; }
    internal bool IsNull { get; }
    internal HINSTANCE(IntPtr value);
    internal static HINSTANCE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HINSTANCE value);
    public static HINSTANCE op_Explicit(IntPtr value);
    public static bool op_Equality(HINSTANCE left, HINSTANCE right);
    public static bool op_Inequality(HINSTANCE left, HINSTANCE right);
    public sealed virtual bool Equals(HINSTANCE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HMODULE op_Implicit(HINSTANCE value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.HMODULE : ValueType {
    internal IntPtr Value;
    internal static HMODULE Null { get; }
    internal bool IsNull { get; }
    internal HMODULE(IntPtr value);
    internal static HMODULE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HMODULE value);
    public static HMODULE op_Explicit(IntPtr value);
    public static bool op_Equality(HMODULE left, HMODULE right);
    public static bool op_Inequality(HMODULE left, HMODULE right);
    public sealed virtual bool Equals(HMODULE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HINSTANCE op_Implicit(HMODULE value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.HRESULT : ValueType {
    public static HRESULT COR_E_ARGUMENT;
    public static HRESULT TLBX_E_LIBNOTREGISTERED;
    public static HRESULT COR_E_MISSINGFIELD;
    public static HRESULT COR_E_MISSINGMEMBER;
    public static HRESULT COR_E_MISSINGMETHOD;
    public static HRESULT COR_E_NOTSUPPORTED;
    public static HRESULT COR_E_OVERFLOW;
    public static HRESULT COR_E_INVALIDOLEVARIANTTYPE;
    public static HRESULT COR_E_SAFEARRAYTYPEMISMATCH;
    public static HRESULT COR_E_TARGETINVOCATION;
    public static HRESULT COR_E_OBJECTDISPOSED;
    internal int Value;
    internal static HRESULT CLIPBRD_E_BAD_DATA;
    internal static HRESULT DISP_E_ARRAYISLOCKED;
    internal static HRESULT DISP_E_BADINDEX;
    internal static HRESULT DISP_E_BADPARAMCOUNT;
    internal static HRESULT DISP_E_BADVARTYPE;
    internal static HRESULT DISP_E_BADCALLEE;
    internal static HRESULT DISP_E_BUFFERTOOSMALL;
    internal static HRESULT DISP_E_DIVBYZERO;
    internal static HRESULT DISP_E_EXCEPTION;
    internal static HRESULT DISP_E_MEMBERNOTFOUND;
    internal static HRESULT DISP_E_NONAMEDARGS;
    internal static HRESULT DISP_E_NOTACOLLECTION;
    internal static HRESULT DISP_E_OVERFLOW;
    internal static HRESULT DISP_E_PARAMNOTFOUND;
    internal static HRESULT DISP_E_PARAMNOTOPTIONAL;
    internal static HRESULT DISP_E_TYPEMISMATCH;
    internal static HRESULT DISP_E_UNKNOWNINTERFACE;
    internal static HRESULT DISP_E_UNKNOWNLCID;
    internal static HRESULT DISP_E_UNKNOWNNAME;
    internal static HRESULT DRAGDROP_E_ALREADYREGISTERED;
    internal static HRESULT DRAGDROP_E_NOTREGISTERED;
    internal static HRESULT DRAGDROP_S_CANCEL;
    internal static HRESULT DRAGDROP_S_DROP;
    internal static HRESULT DRAGDROP_S_USEDEFAULTCURSORS;
    internal static HRESULT DV_E_DVASPECT;
    internal static HRESULT DV_E_FORMATETC;
    internal static HRESULT DV_E_TYMED;
    internal static HRESULT E_ABORT;
    internal static HRESULT E_FAIL;
    internal static HRESULT E_INVALIDARG;
    internal static HRESULT E_NOINTERFACE;
    internal static HRESULT E_NOTIMPL;
    internal static HRESULT E_OUTOFMEMORY;
    internal static HRESULT E_POINTER;
    internal static HRESULT HTTP_E_STATUS_UNEXPECTED;
    internal static HRESULT HTTP_E_STATUS_UNEXPECTED_REDIRECTION;
    internal static HRESULT HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR;
    internal static HRESULT HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR;
    internal static HRESULT HTTP_E_STATUS_AMBIGUOUS;
    internal static HRESULT HTTP_E_STATUS_MOVED;
    internal static HRESULT HTTP_E_STATUS_REDIRECT;
    internal static HRESULT HTTP_E_STATUS_REDIRECT_METHOD;
    internal static HRESULT HTTP_E_STATUS_NOT_MODIFIED;
    internal static HRESULT HTTP_E_STATUS_USE_PROXY;
    internal static HRESULT HTTP_E_STATUS_REDIRECT_KEEP_VERB;
    internal static HRESULT HTTP_E_STATUS_BAD_REQUEST;
    internal static HRESULT HTTP_E_STATUS_DENIED;
    internal static HRESULT HTTP_E_STATUS_PAYMENT_REQ;
    internal static HRESULT HTTP_E_STATUS_FORBIDDEN;
    internal static HRESULT HTTP_E_STATUS_NOT_FOUND;
    internal static HRESULT HTTP_E_STATUS_BAD_METHOD;
    internal static HRESULT HTTP_E_STATUS_NONE_ACCEPTABLE;
    internal static HRESULT HTTP_E_STATUS_PROXY_AUTH_REQ;
    internal static HRESULT HTTP_E_STATUS_REQUEST_TIMEOUT;
    internal static HRESULT HTTP_E_STATUS_CONFLICT;
    internal static HRESULT HTTP_E_STATUS_GONE;
    internal static HRESULT HTTP_E_STATUS_LENGTH_REQUIRED;
    internal static HRESULT HTTP_E_STATUS_PRECOND_FAILED;
    internal static HRESULT HTTP_E_STATUS_REQUEST_TOO_LARGE;
    internal static HRESULT HTTP_E_STATUS_URI_TOO_LONG;
    internal static HRESULT HTTP_E_STATUS_UNSUPPORTED_MEDIA;
    internal static HRESULT HTTP_E_STATUS_RANGE_NOT_SATISFIABLE;
    internal static HRESULT HTTP_E_STATUS_EXPECTATION_FAILED;
    internal static HRESULT HTTP_E_STATUS_SERVER_ERROR;
    internal static HRESULT HTTP_E_STATUS_NOT_SUPPORTED;
    internal static HRESULT HTTP_E_STATUS_BAD_GATEWAY;
    internal static HRESULT HTTP_E_STATUS_SERVICE_UNAVAIL;
    internal static HRESULT HTTP_E_STATUS_GATEWAY_TIMEOUT;
    internal static HRESULT HTTP_E_STATUS_VERSION_NOT_SUP;
    internal static HRESULT S_OK;
    internal static HRESULT INPLACE_E_NOTOOLSPACE;
    internal static HRESULT OLE_E_ADVISENOTSUPPORTED;
    internal static HRESULT OLE_E_INVALIDRECT;
    internal static HRESULT OLE_E_NOCONNECTION;
    internal static HRESULT OLE_E_PROMPTSAVECANCELLED;
    internal static HRESULT REGDB_E_CLASSNOTREG;
    internal static HRESULT RPC_E_CHANGED_MODE;
    internal static HRESULT S_FALSE;
    internal static HRESULT STG_E_FILENOTFOUND;
    internal static HRESULT STG_E_INVALIDFLAG;
    internal static HRESULT STG_E_INVALIDFUNCTION;
    internal static HRESULT STG_E_INVALIDPOINTER;
    internal static HRESULT TBS_E_INTERNAL_ERROR;
    internal static HRESULT TBS_E_BAD_PARAMETER;
    internal static HRESULT TBS_E_INVALID_OUTPUT_POINTER;
    internal static HRESULT TBS_E_INVALID_CONTEXT;
    internal static HRESULT TBS_E_INSUFFICIENT_BUFFER;
    internal static HRESULT TBS_E_IOERROR;
    internal static HRESULT TBS_E_INVALID_CONTEXT_PARAM;
    internal static HRESULT TBS_E_SERVICE_NOT_RUNNING;
    internal static HRESULT TBS_E_TOO_MANY_TBS_CONTEXTS;
    internal static HRESULT TBS_E_TOO_MANY_RESOURCES;
    internal static HRESULT TBS_E_SERVICE_START_PENDING;
    internal static HRESULT TBS_E_PPI_NOT_SUPPORTED;
    internal static HRESULT TBS_E_COMMAND_CANCELED;
    internal static HRESULT TBS_E_BUFFER_TOO_LARGE;
    internal static HRESULT TBS_E_TPM_NOT_FOUND;
    internal static HRESULT TBS_E_SERVICE_DISABLED;
    internal static HRESULT TBS_E_NO_EVENT_LOG;
    internal static HRESULT TBS_E_ACCESS_DENIED;
    internal static HRESULT TBS_E_PROVISIONING_NOT_ALLOWED;
    internal static HRESULT TBS_E_PPI_FUNCTION_UNSUPPORTED;
    internal static HRESULT TBS_E_OWNERAUTH_NOT_FOUND;
    internal static HRESULT TBS_E_PROVISIONING_INCOMPLETE;
    internal static HRESULT TYPE_E_BADMODULEKIND;
    internal static HRESULT VIEW_E_DRAW;
    [DebuggerBrowsableAttribute("0")]
internal bool Succeeded { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool Failed { get; }
    internal HRESULT(int value);
    private static HRESULT();
    public static HRESULT HRESULT_FROM_WIN32(WIN32_ERROR error);
    [NullableContextAttribute("1")]
public static HRESULT op_Implicit(Exception ex);
    public void AssertSuccess();
    public static int op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(int value);
    public static bool op_Equality(HRESULT left, HRESULT right);
    public static bool op_Inequality(HRESULT left, HRESULT right);
    public sealed virtual bool Equals(HRESULT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static UInt32 op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(UInt32 value);
    internal bool get_Succeeded();
    internal bool get_Failed();
    internal HRESULT ThrowOnFailure(IntPtr errorInfo);
    internal string ToString(string format, IFormatProvider formatProvider);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.HWND : ValueType {
    internal IntPtr Value;
    internal static HWND HWND_MESSAGE;
    internal static HWND HWND_DESKTOP;
    internal static HWND HWND_TOP;
    internal static HWND HWND_BOTTOM;
    internal static HWND HWND_TOPMOST;
    internal static HWND HWND_NOTOPMOST;
    private HWND IHandle<Windows.Win32.Foundation.HWND>.Handle { get; }
    [NullableAttribute("2")]
private object IHandle<Windows.Win32.Foundation.HWND>.Wrapper { get; }
    internal static HWND Null { get; }
    internal bool IsNull { get; }
    internal HWND(IntPtr value);
    private static HWND();
    private sealed virtual override HWND IHandle<Windows.Win32.Foundation.HWND>.get_Handle();
    [NullableContextAttribute("2")]
private sealed virtual override object IHandle<Windows.Win32.Foundation.HWND>.get_Wrapper();
    internal static HWND get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HWND value);
    public static HWND op_Explicit(IntPtr value);
    public static bool op_Equality(HWND left, HWND right);
    public static bool op_Inequality(HWND left, HWND right);
    public sealed virtual bool Equals(HWND other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HANDLE op_Implicit(HWND value);
}
internal static class Windows.Win32.Foundation.IID : object {
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID_NULL { get; }
    private static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID_NULL();
    public static Guid* Get();
    public static Guid& GetRef();
    public static Guid* NULL();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.LPARAM : ValueType {
    internal IntPtr Value;
    public ushort HIWORD { get; }
    public short SIGNEDHIWORD { get; }
    public ushort LOWORD { get; }
    public short SIGNEDLOWORD { get; }
    internal LPARAM(IntPtr value);
    public static Void* op_Implicit(LPARAM value);
    public static LPARAM op_Implicit(Void* value);
    public static LPARAM op_Explicit(BOOL value);
    public static LPARAM op_Implicit(int value);
    public static int op_Explicit(LPARAM value);
    public static UInt32 op_Explicit(LPARAM value);
    public static UIntPtr op_Explicit(LPARAM value);
    public static LPARAM op_Explicit(UInt32 value);
    public static HWND op_Explicit(LPARAM value);
    public static LPARAM op_Explicit(HWND value);
    public static LPARAM op_Explicit(Color value);
    public static Point op_Explicit(LPARAM value);
    public static LPARAM op_Explicit(Point value);
    public ushort get_HIWORD();
    public short get_SIGNEDHIWORD();
    public ushort get_LOWORD();
    public short get_SIGNEDLOWORD();
    public static LPARAM MAKELPARAM(int low, int high);
    public static IntPtr op_Implicit(LPARAM value);
    public static LPARAM op_Implicit(IntPtr value);
    public static bool op_Equality(LPARAM left, LPARAM right);
    public static bool op_Inequality(LPARAM left, LPARAM right);
    public sealed virtual bool Equals(LPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.LRESULT : ValueType {
    internal IntPtr Value;
    public ushort HIWORD { get; }
    public short SIGNEDHIWORD { get; }
    public ushort LOWORD { get; }
    public short SIGNEDLOWORD { get; }
    internal LRESULT(IntPtr value);
    public static int op_Explicit(LRESULT value);
    public static UInt32 op_Explicit(LRESULT value);
    public static UIntPtr op_Explicit(LRESULT value);
    public static char op_Explicit(LRESULT value);
    public static HWND op_Explicit(LRESULT value);
    public static HFONT op_Explicit(LRESULT value);
    public static HICON op_Explicit(LRESULT value);
    public static BOOL op_Explicit(LRESULT value);
    public static LRESULT op_Explicit(BOOL value);
    public ushort get_HIWORD();
    public short get_SIGNEDHIWORD();
    public ushort get_LOWORD();
    public short get_SIGNEDLOWORD();
    public static LRESULT MAKELONG(int low, int high);
    public static IntPtr op_Implicit(LRESULT value);
    public static LRESULT op_Explicit(IntPtr value);
    public static bool op_Equality(LRESULT left, LRESULT right);
    public static bool op_Inequality(LRESULT left, LRESULT right);
    public sealed virtual bool Equals(LRESULT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.NTSTATUS : ValueType {
    internal int Value;
    internal static NTSTATUS STATUS_PENDING;
    internal static NTSTATUS STATUS_SUCCESS;
    internal static NTSTATUS STILL_ACTIVE;
    internal Severity SeverityCode { get; }
    internal NTSTATUS(int value);
    private static NTSTATUS();
    public static int op_Implicit(NTSTATUS value);
    public static NTSTATUS op_Explicit(int value);
    public static bool op_Equality(NTSTATUS left, NTSTATUS right);
    public static bool op_Inequality(NTSTATUS left, NTSTATUS right);
    public sealed virtual bool Equals(NTSTATUS other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static UInt32 op_Implicit(NTSTATUS value);
    public static NTSTATUS op_Explicit(UInt32 value);
    internal Severity get_SeverityCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class Windows.Win32.Foundation.PCSTR : ValueType {
    internal Byte* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PCSTR(Byte* value);
    public static Byte* op_Implicit(PCSTR value);
    public static PCSTR op_Explicit(Byte* value);
    public sealed virtual bool Equals(PCSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
    internal ReadOnlySpan`1<byte> AsSpan();
    private string get_DebuggerDisplay();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class Windows.Win32.Foundation.PCWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PCWSTR(Char* value);
    public static Char* op_Explicit(PCWSTR value);
    public static PCWSTR op_Implicit(Char* value);
    public sealed virtual bool Equals(PCWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
    internal ReadOnlySpan`1<char> AsSpan();
    private string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.POINTL : ValueType {
    internal int x;
    internal int y;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.PSTR : ValueType {
    internal Byte* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PSTR(Byte* value);
    public static Byte* op_Implicit(PSTR value);
    public static PSTR op_Implicit(Byte* value);
    public static bool op_Equality(PSTR left, PSTR right);
    public static bool op_Inequality(PSTR left, PSTR right);
    public sealed virtual bool Equals(PSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static PCSTR op_Implicit(PSTR value);
    internal int get_Length();
    internal Span`1<byte> AsSpan();
    private string get_DebuggerDisplay();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.PWSTR : ValueType {
    internal Char* Value;
    internal int StringListLength { get; }
    public bool IsNull { get; }
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PWSTR(Char* value);
    [NullableContextAttribute("2")]
public string ToStringAndCoTaskMemFree();
    internal int get_StringListLength();
    public bool get_IsNull();
    public static Char* op_Implicit(PWSTR value);
    public static PWSTR op_Implicit(Char* value);
    public static bool op_Equality(PWSTR left, PWSTR right);
    public static bool op_Inequality(PWSTR left, PWSTR right);
    public sealed virtual bool Equals(PWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static PCWSTR op_Implicit(PWSTR value);
    internal int get_Length();
    internal Span`1<char> AsSpan();
    private string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.RECT : ValueType {
    internal int left;
    internal int top;
    internal int right;
    internal int bottom;
    internal int Width { get; }
    internal int Height { get; }
    internal bool IsEmpty { get; }
    internal int X { get; }
    internal int Y { get; }
    internal Size Size { get; }
    public RECT(Size size);
    internal RECT(Rectangle value);
    internal RECT(Point location, Size size);
    internal RECT(int left, int top, int right, int bottom);
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal static RECT FromXYWH(int x, int y, int width, int height);
    [IsReadOnlyAttribute]
internal int get_Width();
    [IsReadOnlyAttribute]
internal int get_Height();
    [IsReadOnlyAttribute]
internal bool get_IsEmpty();
    [IsReadOnlyAttribute]
internal int get_X();
    [IsReadOnlyAttribute]
internal int get_Y();
    [IsReadOnlyAttribute]
internal Size get_Size();
    public static Rectangle op_Implicit(RECT value);
    public static RectangleF op_Implicit(RECT value);
    public static RECT op_Implicit(Rectangle value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.RECTL : ValueType {
    internal int left;
    internal int top;
    internal int right;
    internal int bottom;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.SIZE : ValueType {
    internal int cx;
    internal int cy;
    internal int Width { get; }
    internal int Height { get; }
    internal bool IsEmpty { get; }
    internal SIZE(Size value);
    internal SIZE(int width, int height);
    [IsReadOnlyAttribute]
internal int get_Width();
    [IsReadOnlyAttribute]
internal int get_Height();
    [IsReadOnlyAttribute]
internal bool get_IsEmpty();
    public static Size op_Implicit(SIZE value);
    public static SIZE op_Implicit(Size value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.SYSTEMTIME : ValueType {
    internal ushort wYear;
    internal ushort wMonth;
    internal ushort wDayOfWeek;
    internal ushort wDay;
    internal ushort wHour;
    internal ushort wMinute;
    internal ushort wSecond;
    internal ushort wMilliseconds;
    public bool Equals(SYSTEMTIME other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SYSTEMTIME d1, SYSTEMTIME d2);
    public static bool op_Inequality(SYSTEMTIME d1, SYSTEMTIME d2);
    public static DateTime op_Explicit(SYSTEMTIME sysTime);
    public static SYSTEMTIME op_Explicit(DateTime time);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.VARIANT_BOOL : ValueType {
    internal short Value;
    internal static VARIANT_BOOL VARIANT_TRUE;
    internal static VARIANT_BOOL VARIANT_FALSE;
    internal VARIANT_BOOL(short value);
    private static VARIANT_BOOL();
    public static short op_Implicit(VARIANT_BOOL value);
    public static VARIANT_BOOL op_Explicit(short value);
    public static bool op_Equality(VARIANT_BOOL left, VARIANT_BOOL right);
    public static bool op_Inequality(VARIANT_BOOL left, VARIANT_BOOL right);
    public sealed virtual bool Equals(VARIANT_BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Foundation.WAIT_EVENT : Enum {
    public UInt32 value__;
    public static WAIT_EVENT WAIT_OBJECT_0;
    public static WAIT_EVENT WAIT_ABANDONED;
    public static WAIT_EVENT WAIT_ABANDONED_0;
    public static WAIT_EVENT WAIT_IO_COMPLETION;
    public static WAIT_EVENT WAIT_TIMEOUT;
    public static WAIT_EVENT WAIT_FAILED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Foundation.WIN32_ERROR : Enum {
    public UInt32 value__;
    public static WIN32_ERROR NO_ERROR;
    public static WIN32_ERROR ERROR_SUCCESS;
    public static WIN32_ERROR ERROR_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_PATH_NOT_FOUND;
    public static WIN32_ERROR ERROR_TOO_MANY_OPEN_FILES;
    public static WIN32_ERROR ERROR_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_INVALID_HANDLE;
    public static WIN32_ERROR ERROR_ARENA_TRASHED;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_MEMORY;
    public static WIN32_ERROR ERROR_INVALID_BLOCK;
    public static WIN32_ERROR ERROR_BAD_ENVIRONMENT;
    public static WIN32_ERROR ERROR_BAD_FORMAT;
    public static WIN32_ERROR ERROR_INVALID_ACCESS;
    public static WIN32_ERROR ERROR_INVALID_DATA;
    public static WIN32_ERROR ERROR_OUTOFMEMORY;
    public static WIN32_ERROR ERROR_INVALID_DRIVE;
    public static WIN32_ERROR ERROR_CURRENT_DIRECTORY;
    public static WIN32_ERROR ERROR_NOT_SAME_DEVICE;
    public static WIN32_ERROR ERROR_NO_MORE_FILES;
    public static WIN32_ERROR ERROR_WRITE_PROTECT;
    public static WIN32_ERROR ERROR_BAD_UNIT;
    public static WIN32_ERROR ERROR_NOT_READY;
    public static WIN32_ERROR ERROR_BAD_COMMAND;
    public static WIN32_ERROR ERROR_CRC;
    public static WIN32_ERROR ERROR_BAD_LENGTH;
    public static WIN32_ERROR ERROR_SEEK;
    public static WIN32_ERROR ERROR_NOT_DOS_DISK;
    public static WIN32_ERROR ERROR_SECTOR_NOT_FOUND;
    public static WIN32_ERROR ERROR_OUT_OF_PAPER;
    public static WIN32_ERROR ERROR_WRITE_FAULT;
    public static WIN32_ERROR ERROR_READ_FAULT;
    public static WIN32_ERROR ERROR_GEN_FAILURE;
    public static WIN32_ERROR ERROR_SHARING_VIOLATION;
    public static WIN32_ERROR ERROR_LOCK_VIOLATION;
    public static WIN32_ERROR ERROR_WRONG_DISK;
    public static WIN32_ERROR ERROR_SHARING_BUFFER_EXCEEDED;
    public static WIN32_ERROR ERROR_HANDLE_EOF;
    public static WIN32_ERROR ERROR_HANDLE_DISK_FULL;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_REM_NOT_LIST;
    public static WIN32_ERROR ERROR_DUP_NAME;
    public static WIN32_ERROR ERROR_BAD_NETPATH;
    public static WIN32_ERROR ERROR_NETWORK_BUSY;
    public static WIN32_ERROR ERROR_DEV_NOT_EXIST;
    public static WIN32_ERROR ERROR_TOO_MANY_CMDS;
    public static WIN32_ERROR ERROR_ADAP_HDW_ERR;
    public static WIN32_ERROR ERROR_BAD_NET_RESP;
    public static WIN32_ERROR ERROR_UNEXP_NET_ERR;
    public static WIN32_ERROR ERROR_BAD_REM_ADAP;
    public static WIN32_ERROR ERROR_PRINTQ_FULL;
    public static WIN32_ERROR ERROR_NO_SPOOL_SPACE;
    public static WIN32_ERROR ERROR_PRINT_CANCELLED;
    public static WIN32_ERROR ERROR_NETNAME_DELETED;
    public static WIN32_ERROR ERROR_NETWORK_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_BAD_DEV_TYPE;
    public static WIN32_ERROR ERROR_BAD_NET_NAME;
    public static WIN32_ERROR ERROR_TOO_MANY_NAMES;
    public static WIN32_ERROR ERROR_TOO_MANY_SESS;
    public static WIN32_ERROR ERROR_SHARING_PAUSED;
    public static WIN32_ERROR ERROR_REQ_NOT_ACCEP;
    public static WIN32_ERROR ERROR_REDIR_PAUSED;
    public static WIN32_ERROR ERROR_FILE_EXISTS;
    public static WIN32_ERROR ERROR_CANNOT_MAKE;
    public static WIN32_ERROR ERROR_FAIL_I24;
    public static WIN32_ERROR ERROR_OUT_OF_STRUCTURES;
    public static WIN32_ERROR ERROR_ALREADY_ASSIGNED;
    public static WIN32_ERROR ERROR_INVALID_PASSWORD;
    public static WIN32_ERROR ERROR_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_NET_WRITE_FAULT;
    public static WIN32_ERROR ERROR_NO_PROC_SLOTS;
    public static WIN32_ERROR ERROR_TOO_MANY_SEMAPHORES;
    public static WIN32_ERROR ERROR_EXCL_SEM_ALREADY_OWNED;
    public static WIN32_ERROR ERROR_SEM_IS_SET;
    public static WIN32_ERROR ERROR_TOO_MANY_SEM_REQUESTS;
    public static WIN32_ERROR ERROR_INVALID_AT_INTERRUPT_TIME;
    public static WIN32_ERROR ERROR_SEM_OWNER_DIED;
    public static WIN32_ERROR ERROR_SEM_USER_LIMIT;
    public static WIN32_ERROR ERROR_DISK_CHANGE;
    public static WIN32_ERROR ERROR_DRIVE_LOCKED;
    public static WIN32_ERROR ERROR_BROKEN_PIPE;
    public static WIN32_ERROR ERROR_OPEN_FAILED;
    public static WIN32_ERROR ERROR_BUFFER_OVERFLOW;
    public static WIN32_ERROR ERROR_DISK_FULL;
    public static WIN32_ERROR ERROR_NO_MORE_SEARCH_HANDLES;
    public static WIN32_ERROR ERROR_INVALID_TARGET_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_CATEGORY;
    public static WIN32_ERROR ERROR_INVALID_VERIFY_SWITCH;
    public static WIN32_ERROR ERROR_BAD_DRIVER_LEVEL;
    public static WIN32_ERROR ERROR_CALL_NOT_IMPLEMENTED;
    public static WIN32_ERROR ERROR_SEM_TIMEOUT;
    public static WIN32_ERROR ERROR_INSUFFICIENT_BUFFER;
    public static WIN32_ERROR ERROR_INVALID_NAME;
    public static WIN32_ERROR ERROR_INVALID_LEVEL;
    public static WIN32_ERROR ERROR_NO_VOLUME_LABEL;
    public static WIN32_ERROR ERROR_MOD_NOT_FOUND;
    public static WIN32_ERROR ERROR_PROC_NOT_FOUND;
    public static WIN32_ERROR ERROR_WAIT_NO_CHILDREN;
    public static WIN32_ERROR ERROR_CHILD_NOT_COMPLETE;
    public static WIN32_ERROR ERROR_DIRECT_ACCESS_HANDLE;
    public static WIN32_ERROR ERROR_NEGATIVE_SEEK;
    public static WIN32_ERROR ERROR_SEEK_ON_DEVICE;
    public static WIN32_ERROR ERROR_IS_JOIN_TARGET;
    public static WIN32_ERROR ERROR_IS_JOINED;
    public static WIN32_ERROR ERROR_IS_SUBSTED;
    public static WIN32_ERROR ERROR_NOT_JOINED;
    public static WIN32_ERROR ERROR_NOT_SUBSTED;
    public static WIN32_ERROR ERROR_JOIN_TO_JOIN;
    public static WIN32_ERROR ERROR_SUBST_TO_SUBST;
    public static WIN32_ERROR ERROR_JOIN_TO_SUBST;
    public static WIN32_ERROR ERROR_SUBST_TO_JOIN;
    public static WIN32_ERROR ERROR_BUSY_DRIVE;
    public static WIN32_ERROR ERROR_SAME_DRIVE;
    public static WIN32_ERROR ERROR_DIR_NOT_ROOT;
    public static WIN32_ERROR ERROR_DIR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_IS_SUBST_PATH;
    public static WIN32_ERROR ERROR_IS_JOIN_PATH;
    public static WIN32_ERROR ERROR_PATH_BUSY;
    public static WIN32_ERROR ERROR_IS_SUBST_TARGET;
    public static WIN32_ERROR ERROR_SYSTEM_TRACE;
    public static WIN32_ERROR ERROR_INVALID_EVENT_COUNT;
    public static WIN32_ERROR ERROR_TOO_MANY_MUXWAITERS;
    public static WIN32_ERROR ERROR_INVALID_LIST_FORMAT;
    public static WIN32_ERROR ERROR_LABEL_TOO_LONG;
    public static WIN32_ERROR ERROR_TOO_MANY_TCBS;
    public static WIN32_ERROR ERROR_SIGNAL_REFUSED;
    public static WIN32_ERROR ERROR_DISCARDED;
    public static WIN32_ERROR ERROR_NOT_LOCKED;
    public static WIN32_ERROR ERROR_BAD_THREADID_ADDR;
    public static WIN32_ERROR ERROR_BAD_ARGUMENTS;
    public static WIN32_ERROR ERROR_BAD_PATHNAME;
    public static WIN32_ERROR ERROR_SIGNAL_PENDING;
    public static WIN32_ERROR ERROR_MAX_THRDS_REACHED;
    public static WIN32_ERROR ERROR_LOCK_FAILED;
    public static WIN32_ERROR ERROR_BUSY;
    public static WIN32_ERROR ERROR_DEVICE_SUPPORT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CANCEL_VIOLATION;
    public static WIN32_ERROR ERROR_ATOMIC_LOCKS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_INVALID_SEGMENT_NUMBER;
    public static WIN32_ERROR ERROR_INVALID_ORDINAL;
    public static WIN32_ERROR ERROR_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_INVALID_FLAG_NUMBER;
    public static WIN32_ERROR ERROR_SEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_STARTING_CODESEG;
    public static WIN32_ERROR ERROR_INVALID_STACKSEG;
    public static WIN32_ERROR ERROR_INVALID_MODULETYPE;
    public static WIN32_ERROR ERROR_INVALID_EXE_SIGNATURE;
    public static WIN32_ERROR ERROR_EXE_MARKED_INVALID;
    public static WIN32_ERROR ERROR_BAD_EXE_FORMAT;
    public static WIN32_ERROR ERROR_ITERATED_DATA_EXCEEDS_64k;
    public static WIN32_ERROR ERROR_INVALID_MINALLOCSIZE;
    public static WIN32_ERROR ERROR_DYNLINK_FROM_INVALID_RING;
    public static WIN32_ERROR ERROR_IOPL_NOT_ENABLED;
    public static WIN32_ERROR ERROR_INVALID_SEGDPL;
    public static WIN32_ERROR ERROR_AUTODATASEG_EXCEEDS_64k;
    public static WIN32_ERROR ERROR_RING2SEG_MUST_BE_MOVABLE;
    public static WIN32_ERROR ERROR_RELOC_CHAIN_XEEDS_SEGLIM;
    public static WIN32_ERROR ERROR_INFLOOP_IN_RELOC_CHAIN;
    public static WIN32_ERROR ERROR_ENVVAR_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_SIGNAL_SENT;
    public static WIN32_ERROR ERROR_FILENAME_EXCED_RANGE;
    public static WIN32_ERROR ERROR_RING2_STACK_IN_USE;
    public static WIN32_ERROR ERROR_META_EXPANSION_TOO_LONG;
    public static WIN32_ERROR ERROR_INVALID_SIGNAL_NUMBER;
    public static WIN32_ERROR ERROR_THREAD_1_INACTIVE;
    public static WIN32_ERROR ERROR_LOCKED;
    public static WIN32_ERROR ERROR_TOO_MANY_MODULES;
    public static WIN32_ERROR ERROR_NESTING_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_EXE_MACHINE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY;
    public static WIN32_ERROR ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY;
    public static WIN32_ERROR ERROR_FILE_CHECKED_OUT;
    public static WIN32_ERROR ERROR_CHECKOUT_REQUIRED;
    public static WIN32_ERROR ERROR_BAD_FILE_TYPE;
    public static WIN32_ERROR ERROR_FILE_TOO_LARGE;
    public static WIN32_ERROR ERROR_FORMS_AUTH_REQUIRED;
    public static WIN32_ERROR ERROR_VIRUS_INFECTED;
    public static WIN32_ERROR ERROR_VIRUS_DELETED;
    public static WIN32_ERROR ERROR_PIPE_LOCAL;
    public static WIN32_ERROR ERROR_BAD_PIPE;
    public static WIN32_ERROR ERROR_PIPE_BUSY;
    public static WIN32_ERROR ERROR_NO_DATA;
    public static WIN32_ERROR ERROR_PIPE_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_MORE_DATA;
    public static WIN32_ERROR ERROR_NO_WORK_DONE;
    public static WIN32_ERROR ERROR_VC_DISCONNECTED;
    public static WIN32_ERROR ERROR_INVALID_EA_NAME;
    public static WIN32_ERROR ERROR_EA_LIST_INCONSISTENT;
    public static WIN32_ERROR ERROR_NO_MORE_ITEMS;
    public static WIN32_ERROR ERROR_CANNOT_COPY;
    public static WIN32_ERROR ERROR_DIRECTORY;
    public static WIN32_ERROR ERROR_EAS_DIDNT_FIT;
    public static WIN32_ERROR ERROR_EA_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_EA_TABLE_FULL;
    public static WIN32_ERROR ERROR_INVALID_EA_HANDLE;
    public static WIN32_ERROR ERROR_EAS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_OWNER;
    public static WIN32_ERROR ERROR_TOO_MANY_POSTS;
    public static WIN32_ERROR ERROR_PARTIAL_COPY;
    public static WIN32_ERROR ERROR_OPLOCK_NOT_GRANTED;
    public static WIN32_ERROR ERROR_INVALID_OPLOCK_PROTOCOL;
    public static WIN32_ERROR ERROR_DISK_TOO_FRAGMENTED;
    public static WIN32_ERROR ERROR_DELETE_PENDING;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING;
    public static WIN32_ERROR ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME;
    public static WIN32_ERROR ERROR_SECURITY_STREAM_IS_INCONSISTENT;
    public static WIN32_ERROR ERROR_INVALID_LOCK_RANGE;
    public static WIN32_ERROR ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT;
    public static WIN32_ERROR ERROR_NOTIFICATION_GUID_ALREADY_DEFINED;
    public static WIN32_ERROR ERROR_INVALID_EXCEPTION_HANDLER;
    public static WIN32_ERROR ERROR_DUPLICATE_PRIVILEGES;
    public static WIN32_ERROR ERROR_NO_RANGES_PROCESSED;
    public static WIN32_ERROR ERROR_NOT_ALLOWED_ON_SYSTEM_FILE;
    public static WIN32_ERROR ERROR_DISK_RESOURCES_EXHAUSTED;
    public static WIN32_ERROR ERROR_INVALID_TOKEN;
    public static WIN32_ERROR ERROR_DEVICE_FEATURE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_MR_MID_NOT_FOUND;
    public static WIN32_ERROR ERROR_SCOPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_UNDEFINED_SCOPE;
    public static WIN32_ERROR ERROR_INVALID_CAP;
    public static WIN32_ERROR ERROR_DEVICE_UNREACHABLE;
    public static WIN32_ERROR ERROR_DEVICE_NO_RESOURCES;
    public static WIN32_ERROR ERROR_DATA_CHECKSUM_ERROR;
    public static WIN32_ERROR ERROR_INTERMIXED_KERNEL_EA_OPERATION;
    public static WIN32_ERROR ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFSET_ALIGNMENT_VIOLATION;
    public static WIN32_ERROR ERROR_INVALID_FIELD_IN_PARAMETER_LIST;
    public static WIN32_ERROR ERROR_OPERATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_BAD_DEVICE_PATH;
    public static WIN32_ERROR ERROR_TOO_MANY_DESCRIPTORS;
    public static WIN32_ERROR ERROR_SCRUB_DATA_DISABLED;
    public static WIN32_ERROR ERROR_NOT_REDUNDANT_STORAGE;
    public static WIN32_ERROR ERROR_RESIDENT_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_COMPRESSED_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DIRECTORY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_READ_FROM_COPY;
    public static WIN32_ERROR ERROR_FT_WRITE_FAILURE;
    public static WIN32_ERROR ERROR_FT_DI_SCAN_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_KERNEL_INFO_VERSION;
    public static WIN32_ERROR ERROR_INVALID_PEP_INFO_VERSION;
    public static WIN32_ERROR ERROR_OBJECT_NOT_EXTERNALLY_BACKED;
    public static WIN32_ERROR ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN;
    public static WIN32_ERROR ERROR_COMPRESSION_NOT_BENEFICIAL;
    public static WIN32_ERROR ERROR_STORAGE_TOPOLOGY_ID_MISMATCH;
    public static WIN32_ERROR ERROR_BLOCKED_BY_PARENTAL_CONTROLS;
    public static WIN32_ERROR ERROR_BLOCK_TOO_MANY_REFERENCES;
    public static WIN32_ERROR ERROR_MARKED_TO_DISALLOW_WRITES;
    public static WIN32_ERROR ERROR_ENCLAVE_FAILURE;
    public static WIN32_ERROR ERROR_FAIL_NOACTION_REBOOT;
    public static WIN32_ERROR ERROR_FAIL_SHUTDOWN;
    public static WIN32_ERROR ERROR_FAIL_RESTART;
    public static WIN32_ERROR ERROR_MAX_SESSIONS_REACHED;
    public static WIN32_ERROR ERROR_NETWORK_ACCESS_DENIED_EDP;
    public static WIN32_ERROR ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL;
    public static WIN32_ERROR ERROR_EDP_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_DEVICE_IN_MAINTENANCE;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_DAX;
    public static WIN32_ERROR ERROR_DAX_MAPPING_EXISTS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING;
    public static WIN32_ERROR ERROR_CLOUD_FILE_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_METADATA_TOO_LARGE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_CHILD_PROCESS_BLOCKED;
    public static WIN32_ERROR ERROR_STORAGE_LOST_DATA_PERSISTENCE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN;
    public static WIN32_ERROR ERROR_GDI_HANDLE_LEAK;
    public static WIN32_ERROR ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_A_CLOUD_FILE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_IN_SYNC;
    public static WIN32_ERROR ERROR_CLOUD_FILE_ALREADY_CONNECTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLOUD_FILE_READ_ONLY_VOLUME;
    public static WIN32_ERROR ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY;
    public static WIN32_ERROR ERROR_CLOUD_FILE_VALIDATION_FAILED;
    public static WIN32_ERROR ERROR_SMB1_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION;
    public static WIN32_ERROR ERROR_CLOUD_FILE_AUTHENTICATION_FAILED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_UNSUCCESSFUL;
    public static WIN32_ERROR ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_IN_USE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PINNED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_CORRUPT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_CANCELED;
    public static WIN32_ERROR ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_THREAD_MODE_ALREADY_BACKGROUND;
    public static WIN32_ERROR ERROR_THREAD_MODE_NOT_BACKGROUND;
    public static WIN32_ERROR ERROR_PROCESS_MODE_ALREADY_BACKGROUND;
    public static WIN32_ERROR ERROR_PROCESS_MODE_NOT_BACKGROUND;
    public static WIN32_ERROR ERROR_CLOUD_FILE_PROVIDER_TERMINATED;
    public static WIN32_ERROR ERROR_NOT_A_CLOUD_SYNC_ROOT;
    public static WIN32_ERROR ERROR_FILE_PROTECTED_UNDER_DPL;
    public static WIN32_ERROR ERROR_VOLUME_NOT_CLUSTER_ALIGNED;
    public static WIN32_ERROR ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND;
    public static WIN32_ERROR ERROR_APPX_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE;
    public static WIN32_ERROR ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER;
    public static WIN32_ERROR ERROR_LINUX_SUBSYSTEM_NOT_PRESENT;
    public static WIN32_ERROR ERROR_FT_READ_FAILURE;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_ID_INVALID;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_STORAGE_RESERVE_NOT_EMPTY;
    public static WIN32_ERROR ERROR_NOT_A_DAX_VOLUME;
    public static WIN32_ERROR ERROR_NOT_DAX_MAPPABLE;
    public static WIN32_ERROR ERROR_TIME_SENSITIVE_THREAD;
    public static WIN32_ERROR ERROR_DPL_NOT_SUPPORTED_FOR_USER;
    public static WIN32_ERROR ERROR_CASE_DIFFERING_NAMES_IN_DIR;
    public static WIN32_ERROR ERROR_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLOUD_FILE_REQUEST_TIMEOUT;
    public static WIN32_ERROR ERROR_NO_TASK_QUEUE;
    public static WIN32_ERROR ERROR_SRC_SRV_DLL_LOAD_FAILED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_BTT;
    public static WIN32_ERROR ERROR_ENCRYPTION_DISABLED;
    public static WIN32_ERROR ERROR_ENCRYPTING_METADATA_DISALLOWED;
    public static WIN32_ERROR ERROR_CANT_CLEAR_ENCRYPTION_FLAG;
    public static WIN32_ERROR ERROR_NO_SUCH_DEVICE;
    public static WIN32_ERROR ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED;
    public static WIN32_ERROR ERROR_FILE_SNAP_IN_PROGRESS;
    public static WIN32_ERROR ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_FILE_SNAP_IO_NOT_COORDINATED;
    public static WIN32_ERROR ERROR_FILE_SNAP_UNEXPECTED_ERROR;
    public static WIN32_ERROR ERROR_FILE_SNAP_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_UNSATISFIED_DEPENDENCIES;
    public static WIN32_ERROR ERROR_CASE_SENSITIVE_PATH;
    public static WIN32_ERROR ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR;
    public static WIN32_ERROR ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED;
    public static WIN32_ERROR ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION;
    public static WIN32_ERROR ERROR_DLP_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_SECURITY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_UNTRUSTED_MOUNT_POINT;
    public static WIN32_ERROR ERROR_DLP_POLICY_SILENTLY_FAIL;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_DEVUNLOCKED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_CHANGE_TYPE;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_PROVISIONED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_NO_POLICY;
    public static WIN32_ERROR ERROR_CAPAUTHZ_DB_CORRUPTED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_PARSE_ERROR;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED;
    public static WIN32_ERROR ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH;
    public static WIN32_ERROR ERROR_CIMFS_IMAGE_CORRUPT;
    public static WIN32_ERROR ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_STORAGE_STACK_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES;
    public static WIN32_ERROR ERROR_INDEX_OUT_OF_BOUNDS;
    public static WIN32_ERROR ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT;
    public static WIN32_ERROR ERROR_DEVICE_HARDWARE_ERROR;
    public static WIN32_ERROR ERROR_INVALID_ADDRESS;
    public static WIN32_ERROR ERROR_HAS_SYSTEM_CRITICAL_FILES;
    public static WIN32_ERROR ERROR_ENCRYPTED_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_SPARSE_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_PAGEFILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_BYPASSIO;
    public static WIN32_ERROR ERROR_NO_BYPASSIO_DRIVER_SUPPORT;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_ENCRYPTION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_COMPRESSION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_REPLICATION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_AUDITING;
    public static WIN32_ERROR ERROR_USER_PROFILE_LOAD;
    public static WIN32_ERROR ERROR_SESSION_KEY_TOO_SHORT;
    public static WIN32_ERROR ERROR_ACCESS_DENIED_APPDATA;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_MONITORING;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_SNAPSHOT;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION;
    public static WIN32_ERROR ERROR_BYPASSIO_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DEVICE_RESET_REQUIRED;
    public static WIN32_ERROR ERROR_VOLUME_WRITE_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE;
    public static WIN32_ERROR ERROR_FS_METADATA_INCONSISTENT;
    public static WIN32_ERROR ERROR_BLOCK_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_BLOCK_SHARED;
    public static WIN32_ERROR ERROR_ARITHMETIC_OVERFLOW;
    public static WIN32_ERROR ERROR_PIPE_CONNECTED;
    public static WIN32_ERROR ERROR_PIPE_LISTENING;
    public static WIN32_ERROR ERROR_VERIFIER_STOP;
    public static WIN32_ERROR ERROR_ABIOS_ERROR;
    public static WIN32_ERROR ERROR_WX86_WARNING;
    public static WIN32_ERROR ERROR_WX86_ERROR;
    public static WIN32_ERROR ERROR_TIMER_NOT_CANCELED;
    public static WIN32_ERROR ERROR_UNWIND;
    public static WIN32_ERROR ERROR_BAD_STACK;
    public static WIN32_ERROR ERROR_INVALID_UNWIND_TARGET;
    public static WIN32_ERROR ERROR_INVALID_PORT_ATTRIBUTES;
    public static WIN32_ERROR ERROR_PORT_MESSAGE_TOO_LONG;
    public static WIN32_ERROR ERROR_INVALID_QUOTA_LOWER;
    public static WIN32_ERROR ERROR_DEVICE_ALREADY_ATTACHED;
    public static WIN32_ERROR ERROR_INSTRUCTION_MISALIGNMENT;
    public static WIN32_ERROR ERROR_PROFILING_NOT_STARTED;
    public static WIN32_ERROR ERROR_PROFILING_NOT_STOPPED;
    public static WIN32_ERROR ERROR_COULD_NOT_INTERPRET;
    public static WIN32_ERROR ERROR_PROFILING_AT_LIMIT;
    public static WIN32_ERROR ERROR_CANT_WAIT;
    public static WIN32_ERROR ERROR_CANT_TERMINATE_SELF;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_CREATE_ERR;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_MAP_ERROR;
    public static WIN32_ERROR ERROR_UNEXPECTED_MM_EXTEND_ERR;
    public static WIN32_ERROR ERROR_BAD_FUNCTION_TABLE;
    public static WIN32_ERROR ERROR_NO_GUID_TRANSLATION;
    public static WIN32_ERROR ERROR_INVALID_LDT_SIZE;
    public static WIN32_ERROR ERROR_INVALID_LDT_OFFSET;
    public static WIN32_ERROR ERROR_INVALID_LDT_DESCRIPTOR;
    public static WIN32_ERROR ERROR_TOO_MANY_THREADS;
    public static WIN32_ERROR ERROR_THREAD_NOT_IN_PROCESS;
    public static WIN32_ERROR ERROR_PAGEFILE_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_LOGON_SERVER_CONFLICT;
    public static WIN32_ERROR ERROR_SYNCHRONIZATION_REQUIRED;
    public static WIN32_ERROR ERROR_NET_OPEN_FAILED;
    public static WIN32_ERROR ERROR_IO_PRIVILEGE_FAILED;
    public static WIN32_ERROR ERROR_CONTROL_C_EXIT;
    public static WIN32_ERROR ERROR_MISSING_SYSTEMFILE;
    public static WIN32_ERROR ERROR_UNHANDLED_EXCEPTION;
    public static WIN32_ERROR ERROR_APP_INIT_FAILURE;
    public static WIN32_ERROR ERROR_PAGEFILE_CREATE_FAILED;
    public static WIN32_ERROR ERROR_INVALID_IMAGE_HASH;
    public static WIN32_ERROR ERROR_NO_PAGEFILE;
    public static WIN32_ERROR ERROR_ILLEGAL_FLOAT_CONTEXT;
    public static WIN32_ERROR ERROR_NO_EVENT_PAIR;
    public static WIN32_ERROR ERROR_DOMAIN_CTRLR_CONFIG_ERROR;
    public static WIN32_ERROR ERROR_ILLEGAL_CHARACTER;
    public static WIN32_ERROR ERROR_UNDEFINED_CHARACTER;
    public static WIN32_ERROR ERROR_FLOPPY_VOLUME;
    public static WIN32_ERROR ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT;
    public static WIN32_ERROR ERROR_BACKUP_CONTROLLER;
    public static WIN32_ERROR ERROR_MUTANT_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_FS_DRIVER_REQUIRED;
    public static WIN32_ERROR ERROR_CANNOT_LOAD_REGISTRY_FILE;
    public static WIN32_ERROR ERROR_DEBUG_ATTACH_FAILED;
    public static WIN32_ERROR ERROR_SYSTEM_PROCESS_TERMINATED;
    public static WIN32_ERROR ERROR_DATA_NOT_ACCEPTED;
    public static WIN32_ERROR ERROR_VDM_HARD_ERROR;
    public static WIN32_ERROR ERROR_DRIVER_CANCEL_TIMEOUT;
    public static WIN32_ERROR ERROR_REPLY_MESSAGE_MISMATCH;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA;
    public static WIN32_ERROR ERROR_CLIENT_SERVER_PARAMETERS_INVALID;
    public static WIN32_ERROR ERROR_NOT_TINY_STREAM;
    public static WIN32_ERROR ERROR_STACK_OVERFLOW_READ;
    public static WIN32_ERROR ERROR_CONVERT_TO_LARGE;
    public static WIN32_ERROR ERROR_FOUND_OUT_OF_SCOPE;
    public static WIN32_ERROR ERROR_ALLOCATE_BUCKET;
    public static WIN32_ERROR ERROR_MARSHALL_OVERFLOW;
    public static WIN32_ERROR ERROR_INVALID_VARIANT;
    public static WIN32_ERROR ERROR_BAD_COMPRESSION_BUFFER;
    public static WIN32_ERROR ERROR_AUDIT_FAILED;
    public static WIN32_ERROR ERROR_TIMER_RESOLUTION_NOT_SET;
    public static WIN32_ERROR ERROR_INSUFFICIENT_LOGON_INFO;
    public static WIN32_ERROR ERROR_BAD_DLL_ENTRYPOINT;
    public static WIN32_ERROR ERROR_BAD_SERVICE_ENTRYPOINT;
    public static WIN32_ERROR ERROR_IP_ADDRESS_CONFLICT1;
    public static WIN32_ERROR ERROR_IP_ADDRESS_CONFLICT2;
    public static WIN32_ERROR ERROR_REGISTRY_QUOTA_LIMIT;
    public static WIN32_ERROR ERROR_NO_CALLBACK_ACTIVE;
    public static WIN32_ERROR ERROR_PWD_TOO_SHORT;
    public static WIN32_ERROR ERROR_PWD_TOO_RECENT;
    public static WIN32_ERROR ERROR_PWD_HISTORY_CONFLICT;
    public static WIN32_ERROR ERROR_UNSUPPORTED_COMPRESSION;
    public static WIN32_ERROR ERROR_INVALID_HW_PROFILE;
    public static WIN32_ERROR ERROR_INVALID_PLUGPLAY_DEVICE_PATH;
    public static WIN32_ERROR ERROR_QUOTA_LIST_INCONSISTENT;
    public static WIN32_ERROR ERROR_EVALUATION_EXPIRATION;
    public static WIN32_ERROR ERROR_ILLEGAL_DLL_RELOCATION;
    public static WIN32_ERROR ERROR_DLL_INIT_FAILED_LOGOFF;
    public static WIN32_ERROR ERROR_VALIDATE_CONTINUE;
    public static WIN32_ERROR ERROR_NO_MORE_MATCHES;
    public static WIN32_ERROR ERROR_RANGE_LIST_CONFLICT;
    public static WIN32_ERROR ERROR_SERVER_SID_MISMATCH;
    public static WIN32_ERROR ERROR_CANT_ENABLE_DENY_ONLY;
    public static WIN32_ERROR ERROR_FLOAT_MULTIPLE_FAULTS;
    public static WIN32_ERROR ERROR_FLOAT_MULTIPLE_TRAPS;
    public static WIN32_ERROR ERROR_NOINTERFACE;
    public static WIN32_ERROR ERROR_DRIVER_FAILED_SLEEP;
    public static WIN32_ERROR ERROR_CORRUPT_SYSTEM_FILE;
    public static WIN32_ERROR ERROR_COMMITMENT_MINIMUM;
    public static WIN32_ERROR ERROR_PNP_RESTART_ENUMERATION;
    public static WIN32_ERROR ERROR_SYSTEM_IMAGE_BAD_SIGNATURE;
    public static WIN32_ERROR ERROR_PNP_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_POWER;
    public static WIN32_ERROR ERROR_MULTIPLE_FAULT_VIOLATION;
    public static WIN32_ERROR ERROR_SYSTEM_SHUTDOWN;
    public static WIN32_ERROR ERROR_PORT_NOT_SET;
    public static WIN32_ERROR ERROR_DS_VERSION_CHECK_FAILURE;
    public static WIN32_ERROR ERROR_RANGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_SAFE_MODE_DRIVER;
    public static WIN32_ERROR ERROR_FAILED_DRIVER_ENTRY;
    public static WIN32_ERROR ERROR_DEVICE_ENUMERATION_ERROR;
    public static WIN32_ERROR ERROR_MOUNT_POINT_NOT_RESOLVED;
    public static WIN32_ERROR ERROR_INVALID_DEVICE_OBJECT_PARAMETER;
    public static WIN32_ERROR ERROR_MCA_OCCURED;
    public static WIN32_ERROR ERROR_DRIVER_DATABASE_ERROR;
    public static WIN32_ERROR ERROR_SYSTEM_HIVE_TOO_LARGE;
    public static WIN32_ERROR ERROR_DRIVER_FAILED_PRIOR_UNLOAD;
    public static WIN32_ERROR ERROR_VOLSNAP_PREPARE_HIBERNATE;
    public static WIN32_ERROR ERROR_HIBERNATION_FAILURE;
    public static WIN32_ERROR ERROR_PWD_TOO_LONG;
    public static WIN32_ERROR ERROR_FILE_SYSTEM_LIMITATION;
    public static WIN32_ERROR ERROR_ASSERTION_FAILURE;
    public static WIN32_ERROR ERROR_ACPI_ERROR;
    public static WIN32_ERROR ERROR_WOW_ASSERTION;
    public static WIN32_ERROR ERROR_PNP_BAD_MPS_TABLE;
    public static WIN32_ERROR ERROR_PNP_TRANSLATION_FAILED;
    public static WIN32_ERROR ERROR_PNP_IRQ_TRANSLATION_FAILED;
    public static WIN32_ERROR ERROR_PNP_INVALID_ID;
    public static WIN32_ERROR ERROR_WAKE_SYSTEM_DEBUGGER;
    public static WIN32_ERROR ERROR_HANDLES_CLOSED;
    public static WIN32_ERROR ERROR_EXTRANEOUS_INFORMATION;
    public static WIN32_ERROR ERROR_RXACT_COMMIT_NECESSARY;
    public static WIN32_ERROR ERROR_MEDIA_CHECK;
    public static WIN32_ERROR ERROR_GUID_SUBSTITUTION_MADE;
    public static WIN32_ERROR ERROR_STOPPED_ON_SYMLINK;
    public static WIN32_ERROR ERROR_LONGJUMP;
    public static WIN32_ERROR ERROR_PLUGPLAY_QUERY_VETOED;
    public static WIN32_ERROR ERROR_UNWIND_CONSOLIDATE;
    public static WIN32_ERROR ERROR_REGISTRY_HIVE_RECOVERED;
    public static WIN32_ERROR ERROR_DLL_MIGHT_BE_INSECURE;
    public static WIN32_ERROR ERROR_DLL_MIGHT_BE_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_DBG_EXCEPTION_NOT_HANDLED;
    public static WIN32_ERROR ERROR_DBG_REPLY_LATER;
    public static WIN32_ERROR ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE;
    public static WIN32_ERROR ERROR_DBG_TERMINATE_THREAD;
    public static WIN32_ERROR ERROR_DBG_TERMINATE_PROCESS;
    public static WIN32_ERROR ERROR_DBG_CONTROL_C;
    public static WIN32_ERROR ERROR_DBG_PRINTEXCEPTION_C;
    public static WIN32_ERROR ERROR_DBG_RIPEXCEPTION;
    public static WIN32_ERROR ERROR_DBG_CONTROL_BREAK;
    public static WIN32_ERROR ERROR_DBG_COMMAND_EXCEPTION;
    public static WIN32_ERROR ERROR_OBJECT_NAME_EXISTS;
    public static WIN32_ERROR ERROR_THREAD_WAS_SUSPENDED;
    public static WIN32_ERROR ERROR_IMAGE_NOT_AT_BASE;
    public static WIN32_ERROR ERROR_RXACT_STATE_CREATED;
    public static WIN32_ERROR ERROR_SEGMENT_NOTIFICATION;
    public static WIN32_ERROR ERROR_BAD_CURRENT_DIRECTORY;
    public static WIN32_ERROR ERROR_FT_READ_RECOVERY_FROM_BACKUP;
    public static WIN32_ERROR ERROR_FT_WRITE_RECOVERY;
    public static WIN32_ERROR ERROR_IMAGE_MACHINE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_RECEIVE_PARTIAL;
    public static WIN32_ERROR ERROR_RECEIVE_EXPEDITED;
    public static WIN32_ERROR ERROR_RECEIVE_PARTIAL_EXPEDITED;
    public static WIN32_ERROR ERROR_EVENT_DONE;
    public static WIN32_ERROR ERROR_EVENT_PENDING;
    public static WIN32_ERROR ERROR_CHECKING_FILE_SYSTEM;
    public static WIN32_ERROR ERROR_FATAL_APP_EXIT;
    public static WIN32_ERROR ERROR_PREDEFINED_HANDLE;
    public static WIN32_ERROR ERROR_WAS_UNLOCKED;
    public static WIN32_ERROR ERROR_SERVICE_NOTIFICATION;
    public static WIN32_ERROR ERROR_WAS_LOCKED;
    public static WIN32_ERROR ERROR_LOG_HARD_ERROR;
    public static WIN32_ERROR ERROR_ALREADY_WIN32;
    public static WIN32_ERROR ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE;
    public static WIN32_ERROR ERROR_NO_YIELD_PERFORMED;
    public static WIN32_ERROR ERROR_TIMER_RESUME_IGNORED;
    public static WIN32_ERROR ERROR_ARBITRATION_UNHANDLED;
    public static WIN32_ERROR ERROR_CARDBUS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_MP_PROCESSOR_MISMATCH;
    public static WIN32_ERROR ERROR_HIBERNATED;
    public static WIN32_ERROR ERROR_RESUME_HIBERNATION;
    public static WIN32_ERROR ERROR_FIRMWARE_UPDATED;
    public static WIN32_ERROR ERROR_DRIVERS_LEAKING_LOCKED_PAGES;
    public static WIN32_ERROR ERROR_WAKE_SYSTEM;
    public static WIN32_ERROR ERROR_WAIT_1;
    public static WIN32_ERROR ERROR_WAIT_2;
    public static WIN32_ERROR ERROR_WAIT_3;
    public static WIN32_ERROR ERROR_WAIT_63;
    public static WIN32_ERROR ERROR_ABANDONED_WAIT_0;
    public static WIN32_ERROR ERROR_ABANDONED_WAIT_63;
    public static WIN32_ERROR ERROR_USER_APC;
    public static WIN32_ERROR ERROR_KERNEL_APC;
    public static WIN32_ERROR ERROR_ALERTED;
    public static WIN32_ERROR ERROR_ELEVATION_REQUIRED;
    public static WIN32_ERROR ERROR_REPARSE;
    public static WIN32_ERROR ERROR_OPLOCK_BREAK_IN_PROGRESS;
    public static WIN32_ERROR ERROR_VOLUME_MOUNTED;
    public static WIN32_ERROR ERROR_RXACT_COMMITTED;
    public static WIN32_ERROR ERROR_NOTIFY_CLEANUP;
    public static WIN32_ERROR ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED;
    public static WIN32_ERROR ERROR_PAGE_FAULT_TRANSITION;
    public static WIN32_ERROR ERROR_PAGE_FAULT_DEMAND_ZERO;
    public static WIN32_ERROR ERROR_PAGE_FAULT_COPY_ON_WRITE;
    public static WIN32_ERROR ERROR_PAGE_FAULT_GUARD_PAGE;
    public static WIN32_ERROR ERROR_PAGE_FAULT_PAGING_FILE;
    public static WIN32_ERROR ERROR_CACHE_PAGE_LOCKED;
    public static WIN32_ERROR ERROR_CRASH_DUMP;
    public static WIN32_ERROR ERROR_BUFFER_ALL_ZEROS;
    public static WIN32_ERROR ERROR_REPARSE_OBJECT;
    public static WIN32_ERROR ERROR_RESOURCE_REQUIREMENTS_CHANGED;
    public static WIN32_ERROR ERROR_TRANSLATION_COMPLETE;
    public static WIN32_ERROR ERROR_NOTHING_TO_TERMINATE;
    public static WIN32_ERROR ERROR_PROCESS_NOT_IN_JOB;
    public static WIN32_ERROR ERROR_PROCESS_IN_JOB;
    public static WIN32_ERROR ERROR_VOLSNAP_HIBERNATE_READY;
    public static WIN32_ERROR ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY;
    public static WIN32_ERROR ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED;
    public static WIN32_ERROR ERROR_INTERRUPT_STILL_CONNECTED;
    public static WIN32_ERROR ERROR_WAIT_FOR_OPLOCK;
    public static WIN32_ERROR ERROR_DBG_EXCEPTION_HANDLED;
    public static WIN32_ERROR ERROR_DBG_CONTINUE;
    public static WIN32_ERROR ERROR_CALLBACK_POP_STACK;
    public static WIN32_ERROR ERROR_COMPRESSION_DISABLED;
    public static WIN32_ERROR ERROR_CANTFETCHBACKWARDS;
    public static WIN32_ERROR ERROR_CANTSCROLLBACKWARDS;
    public static WIN32_ERROR ERROR_ROWSNOTRELEASED;
    public static WIN32_ERROR ERROR_BAD_ACCESSOR_FLAGS;
    public static WIN32_ERROR ERROR_ERRORS_ENCOUNTERED;
    public static WIN32_ERROR ERROR_NOT_CAPABLE;
    public static WIN32_ERROR ERROR_REQUEST_OUT_OF_SEQUENCE;
    public static WIN32_ERROR ERROR_VERSION_PARSE_ERROR;
    public static WIN32_ERROR ERROR_BADSTARTPOSITION;
    public static WIN32_ERROR ERROR_MEMORY_HARDWARE;
    public static WIN32_ERROR ERROR_DISK_REPAIR_DISABLED;
    public static WIN32_ERROR ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE;
    public static WIN32_ERROR ERROR_SYSTEM_POWERSTATE_TRANSITION;
    public static WIN32_ERROR ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION;
    public static WIN32_ERROR ERROR_MCA_EXCEPTION;
    public static WIN32_ERROR ERROR_ACCESS_AUDIT_BY_POLICY;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY;
    public static WIN32_ERROR ERROR_ABANDON_HIBERFILE;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR;
    public static WIN32_ERROR ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR;
    public static WIN32_ERROR ERROR_BAD_MCFG_TABLE;
    public static WIN32_ERROR ERROR_DISK_REPAIR_REDIRECTED;
    public static WIN32_ERROR ERROR_DISK_REPAIR_UNSUCCESSFUL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_OVERFULL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_CORRUPTED;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_UNAVAILABLE;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_DELETED_FULL;
    public static WIN32_ERROR ERROR_CORRUPT_LOG_CLEARED;
    public static WIN32_ERROR ERROR_ORPHAN_NAME_EXHAUSTED;
    public static WIN32_ERROR ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE;
    public static WIN32_ERROR ERROR_CANNOT_GRANT_REQUESTED_OPLOCK;
    public static WIN32_ERROR ERROR_CANNOT_BREAK_OPLOCK;
    public static WIN32_ERROR ERROR_OPLOCK_HANDLE_CLOSED;
    public static WIN32_ERROR ERROR_NO_ACE_CONDITION;
    public static WIN32_ERROR ERROR_INVALID_ACE_CONDITION;
    public static WIN32_ERROR ERROR_FILE_HANDLE_REVOKED;
    public static WIN32_ERROR ERROR_IMAGE_AT_DIFFERENT_BASE;
    public static WIN32_ERROR ERROR_ENCRYPTED_IO_NOT_POSSIBLE;
    public static WIN32_ERROR ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_QUOTA_ACTIVITY;
    public static WIN32_ERROR ERROR_HANDLE_REVOKED;
    public static WIN32_ERROR ERROR_CALLBACK_INVOKE_INLINE;
    public static WIN32_ERROR ERROR_CPU_SET_INVALID;
    public static WIN32_ERROR ERROR_ENCLAVE_NOT_TERMINATED;
    public static WIN32_ERROR ERROR_ENCLAVE_VIOLATION;
    public static WIN32_ERROR ERROR_SERVER_TRANSPORT_CONFLICT;
    public static WIN32_ERROR ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT;
    public static WIN32_ERROR ERROR_FT_READ_FROM_COPY_FAILURE;
    public static WIN32_ERROR ERROR_SECTION_DIRECT_MAP_ONLY;
    public static WIN32_ERROR ERROR_EA_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_OPERATION_ABORTED;
    public static WIN32_ERROR ERROR_IO_INCOMPLETE;
    public static WIN32_ERROR ERROR_IO_PENDING;
    public static WIN32_ERROR ERROR_NOACCESS;
    public static WIN32_ERROR ERROR_SWAPERROR;
    public static WIN32_ERROR ERROR_STACK_OVERFLOW;
    public static WIN32_ERROR ERROR_INVALID_MESSAGE;
    public static WIN32_ERROR ERROR_CAN_NOT_COMPLETE;
    public static WIN32_ERROR ERROR_INVALID_FLAGS;
    public static WIN32_ERROR ERROR_UNRECOGNIZED_VOLUME;
    public static WIN32_ERROR ERROR_FILE_INVALID;
    public static WIN32_ERROR ERROR_FULLSCREEN_MODE;
    public static WIN32_ERROR ERROR_NO_TOKEN;
    public static WIN32_ERROR ERROR_BADDB;
    public static WIN32_ERROR ERROR_BADKEY;
    public static WIN32_ERROR ERROR_CANTOPEN;
    public static WIN32_ERROR ERROR_CANTREAD;
    public static WIN32_ERROR ERROR_CANTWRITE;
    public static WIN32_ERROR ERROR_REGISTRY_RECOVERED;
    public static WIN32_ERROR ERROR_REGISTRY_CORRUPT;
    public static WIN32_ERROR ERROR_REGISTRY_IO_FAILED;
    public static WIN32_ERROR ERROR_NOT_REGISTRY_FILE;
    public static WIN32_ERROR ERROR_KEY_DELETED;
    public static WIN32_ERROR ERROR_NO_LOG_SPACE;
    public static WIN32_ERROR ERROR_KEY_HAS_CHILDREN;
    public static WIN32_ERROR ERROR_CHILD_MUST_BE_VOLATILE;
    public static WIN32_ERROR ERROR_NOTIFY_ENUM_DIR;
    public static WIN32_ERROR ERROR_DEPENDENT_SERVICES_RUNNING;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_CONTROL;
    public static WIN32_ERROR ERROR_SERVICE_REQUEST_TIMEOUT;
    public static WIN32_ERROR ERROR_SERVICE_NO_THREAD;
    public static WIN32_ERROR ERROR_SERVICE_DATABASE_LOCKED;
    public static WIN32_ERROR ERROR_SERVICE_ALREADY_RUNNING;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_ACCOUNT;
    public static WIN32_ERROR ERROR_SERVICE_DISABLED;
    public static WIN32_ERROR ERROR_CIRCULAR_DEPENDENCY;
    public static WIN32_ERROR ERROR_SERVICE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_SERVICE_CANNOT_ACCEPT_CTRL;
    public static WIN32_ERROR ERROR_SERVICE_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_FAILED_SERVICE_CONTROLLER_CONNECT;
    public static WIN32_ERROR ERROR_EXCEPTION_IN_SERVICE;
    public static WIN32_ERROR ERROR_DATABASE_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_SERVICE_SPECIFIC_ERROR;
    public static WIN32_ERROR ERROR_PROCESS_ABORTED;
    public static WIN32_ERROR ERROR_SERVICE_DEPENDENCY_FAIL;
    public static WIN32_ERROR ERROR_SERVICE_LOGON_FAILED;
    public static WIN32_ERROR ERROR_SERVICE_START_HANG;
    public static WIN32_ERROR ERROR_INVALID_SERVICE_LOCK;
    public static WIN32_ERROR ERROR_SERVICE_MARKED_FOR_DELETE;
    public static WIN32_ERROR ERROR_SERVICE_EXISTS;
    public static WIN32_ERROR ERROR_ALREADY_RUNNING_LKG;
    public static WIN32_ERROR ERROR_SERVICE_DEPENDENCY_DELETED;
    public static WIN32_ERROR ERROR_BOOT_ALREADY_ACCEPTED;
    public static WIN32_ERROR ERROR_SERVICE_NEVER_STARTED;
    public static WIN32_ERROR ERROR_DUPLICATE_SERVICE_NAME;
    public static WIN32_ERROR ERROR_DIFFERENT_SERVICE_ACCOUNT;
    public static WIN32_ERROR ERROR_CANNOT_DETECT_DRIVER_FAILURE;
    public static WIN32_ERROR ERROR_CANNOT_DETECT_PROCESS_ABORT;
    public static WIN32_ERROR ERROR_NO_RECOVERY_PROGRAM;
    public static WIN32_ERROR ERROR_SERVICE_NOT_IN_EXE;
    public static WIN32_ERROR ERROR_NOT_SAFEBOOT_SERVICE;
    public static WIN32_ERROR ERROR_END_OF_MEDIA;
    public static WIN32_ERROR ERROR_FILEMARK_DETECTED;
    public static WIN32_ERROR ERROR_BEGINNING_OF_MEDIA;
    public static WIN32_ERROR ERROR_SETMARK_DETECTED;
    public static WIN32_ERROR ERROR_NO_DATA_DETECTED;
    public static WIN32_ERROR ERROR_PARTITION_FAILURE;
    public static WIN32_ERROR ERROR_INVALID_BLOCK_LENGTH;
    public static WIN32_ERROR ERROR_DEVICE_NOT_PARTITIONED;
    public static WIN32_ERROR ERROR_UNABLE_TO_LOCK_MEDIA;
    public static WIN32_ERROR ERROR_UNABLE_TO_UNLOAD_MEDIA;
    public static WIN32_ERROR ERROR_MEDIA_CHANGED;
    public static WIN32_ERROR ERROR_BUS_RESET;
    public static WIN32_ERROR ERROR_NO_MEDIA_IN_DRIVE;
    public static WIN32_ERROR ERROR_NO_UNICODE_TRANSLATION;
    public static WIN32_ERROR ERROR_DLL_INIT_FAILED;
    public static WIN32_ERROR ERROR_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NO_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_IO_DEVICE;
    public static WIN32_ERROR ERROR_SERIAL_NO_DEVICE;
    public static WIN32_ERROR ERROR_IRQ_BUSY;
    public static WIN32_ERROR ERROR_MORE_WRITES;
    public static WIN32_ERROR ERROR_COUNTER_TIMEOUT;
    public static WIN32_ERROR ERROR_FLOPPY_ID_MARK_NOT_FOUND;
    public static WIN32_ERROR ERROR_FLOPPY_WRONG_CYLINDER;
    public static WIN32_ERROR ERROR_FLOPPY_UNKNOWN_ERROR;
    public static WIN32_ERROR ERROR_FLOPPY_BAD_REGISTERS;
    public static WIN32_ERROR ERROR_DISK_RECALIBRATE_FAILED;
    public static WIN32_ERROR ERROR_DISK_OPERATION_FAILED;
    public static WIN32_ERROR ERROR_DISK_RESET_FAILED;
    public static WIN32_ERROR ERROR_EOM_OVERFLOW;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_SERVER_MEMORY;
    public static WIN32_ERROR ERROR_POSSIBLE_DEADLOCK;
    public static WIN32_ERROR ERROR_MAPPED_ALIGNMENT;
    public static WIN32_ERROR ERROR_SET_POWER_STATE_VETOED;
    public static WIN32_ERROR ERROR_SET_POWER_STATE_FAILED;
    public static WIN32_ERROR ERROR_TOO_MANY_LINKS;
    public static WIN32_ERROR ERROR_OLD_WIN_VERSION;
    public static WIN32_ERROR ERROR_APP_WRONG_OS;
    public static WIN32_ERROR ERROR_SINGLE_INSTANCE_APP;
    public static WIN32_ERROR ERROR_RMODE_APP;
    public static WIN32_ERROR ERROR_INVALID_DLL;
    public static WIN32_ERROR ERROR_NO_ASSOCIATION;
    public static WIN32_ERROR ERROR_DDE_FAIL;
    public static WIN32_ERROR ERROR_DLL_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_MORE_USER_HANDLES;
    public static WIN32_ERROR ERROR_MESSAGE_SYNC_ONLY;
    public static WIN32_ERROR ERROR_SOURCE_ELEMENT_EMPTY;
    public static WIN32_ERROR ERROR_DESTINATION_ELEMENT_FULL;
    public static WIN32_ERROR ERROR_ILLEGAL_ELEMENT_ADDRESS;
    public static WIN32_ERROR ERROR_MAGAZINE_NOT_PRESENT;
    public static WIN32_ERROR ERROR_DEVICE_REINITIALIZATION_NEEDED;
    public static WIN32_ERROR ERROR_DEVICE_REQUIRES_CLEANING;
    public static WIN32_ERROR ERROR_DEVICE_DOOR_OPEN;
    public static WIN32_ERROR ERROR_DEVICE_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_MATCH;
    public static WIN32_ERROR ERROR_SET_NOT_FOUND;
    public static WIN32_ERROR ERROR_POINT_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_TRACKING_SERVICE;
    public static WIN32_ERROR ERROR_NO_VOLUME_ID;
    public static WIN32_ERROR ERROR_UNABLE_TO_REMOVE_REPLACED;
    public static WIN32_ERROR ERROR_UNABLE_TO_MOVE_REPLACEMENT;
    public static WIN32_ERROR ERROR_UNABLE_TO_MOVE_REPLACEMENT_2;
    public static WIN32_ERROR ERROR_JOURNAL_DELETE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_JOURNAL_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_POTENTIAL_FILE_FOUND;
    public static WIN32_ERROR ERROR_JOURNAL_ENTRY_DELETED;
    public static WIN32_ERROR ERROR_PARTITION_TERMINATING;
    public static WIN32_ERROR ERROR_SHUTDOWN_IS_SCHEDULED;
    public static WIN32_ERROR ERROR_SHUTDOWN_USERS_LOGGED_ON;
    public static WIN32_ERROR ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE;
    public static WIN32_ERROR ERROR_BAD_DEVICE;
    public static WIN32_ERROR ERROR_CONNECTION_UNAVAIL;
    public static WIN32_ERROR ERROR_DEVICE_ALREADY_REMEMBERED;
    public static WIN32_ERROR ERROR_NO_NET_OR_BAD_PATH;
    public static WIN32_ERROR ERROR_BAD_PROVIDER;
    public static WIN32_ERROR ERROR_CANNOT_OPEN_PROFILE;
    public static WIN32_ERROR ERROR_BAD_PROFILE;
    public static WIN32_ERROR ERROR_NOT_CONTAINER;
    public static WIN32_ERROR ERROR_EXTENDED_ERROR;
    public static WIN32_ERROR ERROR_INVALID_GROUPNAME;
    public static WIN32_ERROR ERROR_INVALID_COMPUTERNAME;
    public static WIN32_ERROR ERROR_INVALID_EVENTNAME;
    public static WIN32_ERROR ERROR_INVALID_DOMAINNAME;
    public static WIN32_ERROR ERROR_INVALID_SERVICENAME;
    public static WIN32_ERROR ERROR_INVALID_NETNAME;
    public static WIN32_ERROR ERROR_INVALID_SHARENAME;
    public static WIN32_ERROR ERROR_INVALID_PASSWORDNAME;
    public static WIN32_ERROR ERROR_INVALID_MESSAGENAME;
    public static WIN32_ERROR ERROR_INVALID_MESSAGEDEST;
    public static WIN32_ERROR ERROR_SESSION_CREDENTIAL_CONFLICT;
    public static WIN32_ERROR ERROR_REMOTE_SESSION_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DUP_DOMAINNAME;
    public static WIN32_ERROR ERROR_NO_NETWORK;
    public static WIN32_ERROR ERROR_CANCELLED;
    public static WIN32_ERROR ERROR_USER_MAPPED_FILE;
    public static WIN32_ERROR ERROR_CONNECTION_REFUSED;
    public static WIN32_ERROR ERROR_GRACEFUL_DISCONNECT;
    public static WIN32_ERROR ERROR_ADDRESS_ALREADY_ASSOCIATED;
    public static WIN32_ERROR ERROR_ADDRESS_NOT_ASSOCIATED;
    public static WIN32_ERROR ERROR_CONNECTION_INVALID;
    public static WIN32_ERROR ERROR_CONNECTION_ACTIVE;
    public static WIN32_ERROR ERROR_NETWORK_UNREACHABLE;
    public static WIN32_ERROR ERROR_HOST_UNREACHABLE;
    public static WIN32_ERROR ERROR_PROTOCOL_UNREACHABLE;
    public static WIN32_ERROR ERROR_PORT_UNREACHABLE;
    public static WIN32_ERROR ERROR_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_CONNECTION_ABORTED;
    public static WIN32_ERROR ERROR_RETRY;
    public static WIN32_ERROR ERROR_CONNECTION_COUNT_LIMIT;
    public static WIN32_ERROR ERROR_LOGIN_TIME_RESTRICTION;
    public static WIN32_ERROR ERROR_LOGIN_WKSTA_RESTRICTION;
    public static WIN32_ERROR ERROR_INCORRECT_ADDRESS;
    public static WIN32_ERROR ERROR_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_SERVICE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_AUTHENTICATED;
    public static WIN32_ERROR ERROR_NOT_LOGGED_ON;
    public static WIN32_ERROR ERROR_CONTINUE;
    public static WIN32_ERROR ERROR_ALREADY_INITIALIZED;
    public static WIN32_ERROR ERROR_NO_MORE_DEVICES;
    public static WIN32_ERROR ERROR_NO_SUCH_SITE;
    public static WIN32_ERROR ERROR_DOMAIN_CONTROLLER_EXISTS;
    public static WIN32_ERROR ERROR_ONLY_IF_CONNECTED;
    public static WIN32_ERROR ERROR_OVERRIDE_NOCHANGES;
    public static WIN32_ERROR ERROR_BAD_USER_PROFILE;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_SBS;
    public static WIN32_ERROR ERROR_SERVER_SHUTDOWN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_HOST_DOWN;
    public static WIN32_ERROR ERROR_NON_ACCOUNT_SID;
    public static WIN32_ERROR ERROR_NON_DOMAIN_SID;
    public static WIN32_ERROR ERROR_APPHELP_BLOCK;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_BY_POLICY;
    public static WIN32_ERROR ERROR_REG_NAT_CONSUMPTION;
    public static WIN32_ERROR ERROR_CSCSHARE_OFFLINE;
    public static WIN32_ERROR ERROR_PKINIT_FAILURE;
    public static WIN32_ERROR ERROR_SMARTCARD_SUBSYSTEM_FAILURE;
    public static WIN32_ERROR ERROR_DOWNGRADE_DETECTED;
    public static WIN32_ERROR ERROR_MACHINE_LOCKED;
    public static WIN32_ERROR ERROR_SMB_GUEST_LOGON_BLOCKED;
    public static WIN32_ERROR ERROR_CALLBACK_SUPPLIED_INVALID_DATA;
    public static WIN32_ERROR ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED;
    public static WIN32_ERROR ERROR_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_INVALID_IMPORT_OF_NON_DLL;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_WEBBLADE;
    public static WIN32_ERROR ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER;
    public static WIN32_ERROR ERROR_RECOVERY_FAILURE;
    public static WIN32_ERROR ERROR_ALREADY_FIBER;
    public static WIN32_ERROR ERROR_ALREADY_THREAD;
    public static WIN32_ERROR ERROR_STACK_BUFFER_OVERRUN;
    public static WIN32_ERROR ERROR_PARAMETER_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_DEBUGGER_INACTIVE;
    public static WIN32_ERROR ERROR_DELAY_LOAD_FAILED;
    public static WIN32_ERROR ERROR_VDM_DISALLOWED;
    public static WIN32_ERROR ERROR_UNIDENTIFIED_ERROR;
    public static WIN32_ERROR ERROR_INVALID_CRUNTIME_PARAMETER;
    public static WIN32_ERROR ERROR_BEYOND_VDL;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_SERVICE_SID_TYPE;
    public static WIN32_ERROR ERROR_DRIVER_PROCESS_TERMINATED;
    public static WIN32_ERROR ERROR_IMPLEMENTATION_LIMIT;
    public static WIN32_ERROR ERROR_PROCESS_IS_PROTECTED;
    public static WIN32_ERROR ERROR_SERVICE_NOTIFY_CLIENT_LAGGING;
    public static WIN32_ERROR ERROR_DISK_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_CONTENT_BLOCKED;
    public static WIN32_ERROR ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE;
    public static WIN32_ERROR ERROR_APP_HANG;
    public static WIN32_ERROR ERROR_INVALID_LABEL;
    public static WIN32_ERROR ERROR_NOT_ALL_ASSIGNED;
    public static WIN32_ERROR ERROR_SOME_NOT_MAPPED;
    public static WIN32_ERROR ERROR_NO_QUOTAS_FOR_ACCOUNT;
    public static WIN32_ERROR ERROR_LOCAL_USER_SESSION_KEY;
    public static WIN32_ERROR ERROR_NULL_LM_PASSWORD;
    public static WIN32_ERROR ERROR_UNKNOWN_REVISION;
    public static WIN32_ERROR ERROR_REVISION_MISMATCH;
    public static WIN32_ERROR ERROR_INVALID_OWNER;
    public static WIN32_ERROR ERROR_INVALID_PRIMARY_GROUP;
    public static WIN32_ERROR ERROR_NO_IMPERSONATION_TOKEN;
    public static WIN32_ERROR ERROR_CANT_DISABLE_MANDATORY;
    public static WIN32_ERROR ERROR_NO_LOGON_SERVERS;
    public static WIN32_ERROR ERROR_NO_SUCH_LOGON_SESSION;
    public static WIN32_ERROR ERROR_NO_SUCH_PRIVILEGE;
    public static WIN32_ERROR ERROR_PRIVILEGE_NOT_HELD;
    public static WIN32_ERROR ERROR_INVALID_ACCOUNT_NAME;
    public static WIN32_ERROR ERROR_USER_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_USER;
    public static WIN32_ERROR ERROR_GROUP_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_GROUP;
    public static WIN32_ERROR ERROR_MEMBER_IN_GROUP;
    public static WIN32_ERROR ERROR_MEMBER_NOT_IN_GROUP;
    public static WIN32_ERROR ERROR_LAST_ADMIN;
    public static WIN32_ERROR ERROR_WRONG_PASSWORD;
    public static WIN32_ERROR ERROR_ILL_FORMED_PASSWORD;
    public static WIN32_ERROR ERROR_PASSWORD_RESTRICTION;
    public static WIN32_ERROR ERROR_LOGON_FAILURE;
    public static WIN32_ERROR ERROR_ACCOUNT_RESTRICTION;
    public static WIN32_ERROR ERROR_INVALID_LOGON_HOURS;
    public static WIN32_ERROR ERROR_INVALID_WORKSTATION;
    public static WIN32_ERROR ERROR_PASSWORD_EXPIRED;
    public static WIN32_ERROR ERROR_ACCOUNT_DISABLED;
    public static WIN32_ERROR ERROR_NONE_MAPPED;
    public static WIN32_ERROR ERROR_TOO_MANY_LUIDS_REQUESTED;
    public static WIN32_ERROR ERROR_LUIDS_EXHAUSTED;
    public static WIN32_ERROR ERROR_INVALID_SUB_AUTHORITY;
    public static WIN32_ERROR ERROR_INVALID_ACL;
    public static WIN32_ERROR ERROR_INVALID_SID;
    public static WIN32_ERROR ERROR_INVALID_SECURITY_DESCR;
    public static WIN32_ERROR ERROR_BAD_INHERITANCE_ACL;
    public static WIN32_ERROR ERROR_SERVER_DISABLED;
    public static WIN32_ERROR ERROR_SERVER_NOT_DISABLED;
    public static WIN32_ERROR ERROR_INVALID_ID_AUTHORITY;
    public static WIN32_ERROR ERROR_ALLOTTED_SPACE_EXCEEDED;
    public static WIN32_ERROR ERROR_INVALID_GROUP_ATTRIBUTES;
    public static WIN32_ERROR ERROR_BAD_IMPERSONATION_LEVEL;
    public static WIN32_ERROR ERROR_CANT_OPEN_ANONYMOUS;
    public static WIN32_ERROR ERROR_BAD_VALIDATION_CLASS;
    public static WIN32_ERROR ERROR_BAD_TOKEN_TYPE;
    public static WIN32_ERROR ERROR_NO_SECURITY_ON_OBJECT;
    public static WIN32_ERROR ERROR_CANT_ACCESS_DOMAIN_INFO;
    public static WIN32_ERROR ERROR_INVALID_SERVER_STATE;
    public static WIN32_ERROR ERROR_INVALID_DOMAIN_STATE;
    public static WIN32_ERROR ERROR_INVALID_DOMAIN_ROLE;
    public static WIN32_ERROR ERROR_NO_SUCH_DOMAIN;
    public static WIN32_ERROR ERROR_DOMAIN_EXISTS;
    public static WIN32_ERROR ERROR_DOMAIN_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_INTERNAL_DB_CORRUPTION;
    public static WIN32_ERROR ERROR_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_GENERIC_NOT_MAPPED;
    public static WIN32_ERROR ERROR_BAD_DESCRIPTOR_FORMAT;
    public static WIN32_ERROR ERROR_NOT_LOGON_PROCESS;
    public static WIN32_ERROR ERROR_LOGON_SESSION_EXISTS;
    public static WIN32_ERROR ERROR_NO_SUCH_PACKAGE;
    public static WIN32_ERROR ERROR_BAD_LOGON_SESSION_STATE;
    public static WIN32_ERROR ERROR_LOGON_SESSION_COLLISION;
    public static WIN32_ERROR ERROR_INVALID_LOGON_TYPE;
    public static WIN32_ERROR ERROR_CANNOT_IMPERSONATE;
    public static WIN32_ERROR ERROR_RXACT_INVALID_STATE;
    public static WIN32_ERROR ERROR_RXACT_COMMIT_FAILURE;
    public static WIN32_ERROR ERROR_SPECIAL_ACCOUNT;
    public static WIN32_ERROR ERROR_SPECIAL_GROUP;
    public static WIN32_ERROR ERROR_SPECIAL_USER;
    public static WIN32_ERROR ERROR_MEMBERS_PRIMARY_GROUP;
    public static WIN32_ERROR ERROR_TOKEN_ALREADY_IN_USE;
    public static WIN32_ERROR ERROR_NO_SUCH_ALIAS;
    public static WIN32_ERROR ERROR_MEMBER_NOT_IN_ALIAS;
    public static WIN32_ERROR ERROR_MEMBER_IN_ALIAS;
    public static WIN32_ERROR ERROR_ALIAS_EXISTS;
    public static WIN32_ERROR ERROR_LOGON_NOT_GRANTED;
    public static WIN32_ERROR ERROR_TOO_MANY_SECRETS;
    public static WIN32_ERROR ERROR_SECRET_TOO_LONG;
    public static WIN32_ERROR ERROR_INTERNAL_DB_ERROR;
    public static WIN32_ERROR ERROR_TOO_MANY_CONTEXT_IDS;
    public static WIN32_ERROR ERROR_LOGON_TYPE_NOT_GRANTED;
    public static WIN32_ERROR ERROR_NT_CROSS_ENCRYPTION_REQUIRED;
    public static WIN32_ERROR ERROR_NO_SUCH_MEMBER;
    public static WIN32_ERROR ERROR_INVALID_MEMBER;
    public static WIN32_ERROR ERROR_TOO_MANY_SIDS;
    public static WIN32_ERROR ERROR_LM_CROSS_ENCRYPTION_REQUIRED;
    public static WIN32_ERROR ERROR_NO_INHERITANCE;
    public static WIN32_ERROR ERROR_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_DISK_CORRUPT;
    public static WIN32_ERROR ERROR_NO_USER_SESSION_KEY;
    public static WIN32_ERROR ERROR_LICENSE_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_WRONG_TARGET_NAME;
    public static WIN32_ERROR ERROR_MUTUAL_AUTH_FAILED;
    public static WIN32_ERROR ERROR_TIME_SKEW;
    public static WIN32_ERROR ERROR_CURRENT_DOMAIN_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_INVALID_WINDOW_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_MENU_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_CURSOR_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_ACCEL_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_HOOK_HANDLE;
    public static WIN32_ERROR ERROR_INVALID_DWP_HANDLE;
    public static WIN32_ERROR ERROR_TLW_WITH_WSCHILD;
    public static WIN32_ERROR ERROR_CANNOT_FIND_WND_CLASS;
    public static WIN32_ERROR ERROR_WINDOW_OF_OTHER_THREAD;
    public static WIN32_ERROR ERROR_HOTKEY_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_CLASS_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_CLASS_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_CLASS_HAS_WINDOWS;
    public static WIN32_ERROR ERROR_INVALID_INDEX;
    public static WIN32_ERROR ERROR_INVALID_ICON_HANDLE;
    public static WIN32_ERROR ERROR_PRIVATE_DIALOG_INDEX;
    public static WIN32_ERROR ERROR_LISTBOX_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_NO_WILDCARD_CHARACTERS;
    public static WIN32_ERROR ERROR_CLIPBOARD_NOT_OPEN;
    public static WIN32_ERROR ERROR_HOTKEY_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_WINDOW_NOT_DIALOG;
    public static WIN32_ERROR ERROR_CONTROL_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_COMBOBOX_MESSAGE;
    public static WIN32_ERROR ERROR_WINDOW_NOT_COMBOBOX;
    public static WIN32_ERROR ERROR_INVALID_EDIT_HEIGHT;
    public static WIN32_ERROR ERROR_DC_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_HOOK_FILTER;
    public static WIN32_ERROR ERROR_INVALID_FILTER_PROC;
    public static WIN32_ERROR ERROR_HOOK_NEEDS_HMOD;
    public static WIN32_ERROR ERROR_GLOBAL_ONLY_HOOK;
    public static WIN32_ERROR ERROR_JOURNAL_HOOK_SET;
    public static WIN32_ERROR ERROR_HOOK_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_INVALID_LB_MESSAGE;
    public static WIN32_ERROR ERROR_SETCOUNT_ON_BAD_LB;
    public static WIN32_ERROR ERROR_LB_WITHOUT_TABSTOPS;
    public static WIN32_ERROR ERROR_DESTROY_OBJECT_OF_OTHER_THREAD;
    public static WIN32_ERROR ERROR_CHILD_WINDOW_MENU;
    public static WIN32_ERROR ERROR_NO_SYSTEM_MENU;
    public static WIN32_ERROR ERROR_INVALID_MSGBOX_STYLE;
    public static WIN32_ERROR ERROR_INVALID_SPI_VALUE;
    public static WIN32_ERROR ERROR_SCREEN_ALREADY_LOCKED;
    public static WIN32_ERROR ERROR_HWNDS_HAVE_DIFF_PARENT;
    public static WIN32_ERROR ERROR_NOT_CHILD_WINDOW;
    public static WIN32_ERROR ERROR_INVALID_GW_COMMAND;
    public static WIN32_ERROR ERROR_INVALID_THREAD_ID;
    public static WIN32_ERROR ERROR_NON_MDICHILD_WINDOW;
    public static WIN32_ERROR ERROR_POPUP_ALREADY_ACTIVE;
    public static WIN32_ERROR ERROR_NO_SCROLLBARS;
    public static WIN32_ERROR ERROR_INVALID_SCROLLBAR_RANGE;
    public static WIN32_ERROR ERROR_INVALID_SHOWWIN_COMMAND;
    public static WIN32_ERROR ERROR_NO_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_NONPAGED_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_PAGED_SYSTEM_RESOURCES;
    public static WIN32_ERROR ERROR_WORKING_SET_QUOTA;
    public static WIN32_ERROR ERROR_PAGEFILE_QUOTA;
    public static WIN32_ERROR ERROR_COMMITMENT_LIMIT;
    public static WIN32_ERROR ERROR_MENU_ITEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_KEYBOARD_HANDLE;
    public static WIN32_ERROR ERROR_HOOK_TYPE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION;
    public static WIN32_ERROR ERROR_TIMEOUT;
    public static WIN32_ERROR ERROR_INVALID_MONITOR_HANDLE;
    public static WIN32_ERROR ERROR_INCORRECT_SIZE;
    public static WIN32_ERROR ERROR_SYMLINK_CLASS_DISABLED;
    public static WIN32_ERROR ERROR_SYMLINK_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_XML_PARSE_ERROR;
    public static WIN32_ERROR ERROR_XMLDSIG_ERROR;
    public static WIN32_ERROR ERROR_RESTART_APPLICATION;
    public static WIN32_ERROR ERROR_WRONG_COMPARTMENT;
    public static WIN32_ERROR ERROR_AUTHIP_FAILURE;
    public static WIN32_ERROR ERROR_NO_NVRAM_RESOURCES;
    public static WIN32_ERROR ERROR_NOT_GUI_PROCESS;
    public static WIN32_ERROR ERROR_EVENTLOG_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_EVENTLOG_CANT_START;
    public static WIN32_ERROR ERROR_LOG_FILE_FULL;
    public static WIN32_ERROR ERROR_EVENTLOG_FILE_CHANGED;
    public static WIN32_ERROR ERROR_CONTAINER_ASSIGNED;
    public static WIN32_ERROR ERROR_JOB_NO_CONTAINER;
    public static WIN32_ERROR ERROR_INVALID_TASK_NAME;
    public static WIN32_ERROR ERROR_INVALID_TASK_INDEX;
    public static WIN32_ERROR ERROR_THREAD_ALREADY_IN_TASK;
    public static WIN32_ERROR ERROR_INSTALL_SERVICE_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_USEREXIT;
    public static WIN32_ERROR ERROR_INSTALL_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_SUSPEND;
    public static WIN32_ERROR ERROR_UNKNOWN_PRODUCT;
    public static WIN32_ERROR ERROR_UNKNOWN_FEATURE;
    public static WIN32_ERROR ERROR_UNKNOWN_COMPONENT;
    public static WIN32_ERROR ERROR_UNKNOWN_PROPERTY;
    public static WIN32_ERROR ERROR_INVALID_HANDLE_STATE;
    public static WIN32_ERROR ERROR_BAD_CONFIGURATION;
    public static WIN32_ERROR ERROR_INDEX_ABSENT;
    public static WIN32_ERROR ERROR_INSTALL_SOURCE_ABSENT;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_VERSION;
    public static WIN32_ERROR ERROR_PRODUCT_UNINSTALLED;
    public static WIN32_ERROR ERROR_BAD_QUERY_SYNTAX;
    public static WIN32_ERROR ERROR_INVALID_FIELD;
    public static WIN32_ERROR ERROR_DEVICE_REMOVED;
    public static WIN32_ERROR ERROR_INSTALL_ALREADY_RUNNING;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_OPEN_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_INVALID;
    public static WIN32_ERROR ERROR_INSTALL_UI_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_LOG_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_LANGUAGE_UNSUPPORTED;
    public static WIN32_ERROR ERROR_INSTALL_TRANSFORM_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_REJECTED;
    public static WIN32_ERROR ERROR_FUNCTION_NOT_CALLED;
    public static WIN32_ERROR ERROR_FUNCTION_FAILED;
    public static WIN32_ERROR ERROR_INVALID_TABLE;
    public static WIN32_ERROR ERROR_DATATYPE_MISMATCH;
    public static WIN32_ERROR ERROR_UNSUPPORTED_TYPE;
    public static WIN32_ERROR ERROR_CREATE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_TEMP_UNWRITABLE;
    public static WIN32_ERROR ERROR_INSTALL_PLATFORM_UNSUPPORTED;
    public static WIN32_ERROR ERROR_INSTALL_NOTUSED;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_OPEN_FAILED;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_INVALID;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_UNSUPPORTED;
    public static WIN32_ERROR ERROR_PRODUCT_VERSION;
    public static WIN32_ERROR ERROR_INVALID_COMMAND_LINE;
    public static WIN32_ERROR ERROR_INSTALL_REMOTE_DISALLOWED;
    public static WIN32_ERROR ERROR_SUCCESS_REBOOT_INITIATED;
    public static WIN32_ERROR ERROR_PATCH_TARGET_NOT_FOUND;
    public static WIN32_ERROR ERROR_PATCH_PACKAGE_REJECTED;
    public static WIN32_ERROR ERROR_INSTALL_TRANSFORM_REJECTED;
    public static WIN32_ERROR ERROR_INSTALL_REMOTE_PROHIBITED;
    public static WIN32_ERROR ERROR_PATCH_REMOVAL_UNSUPPORTED;
    public static WIN32_ERROR ERROR_UNKNOWN_PATCH;
    public static WIN32_ERROR ERROR_PATCH_NO_SEQUENCE;
    public static WIN32_ERROR ERROR_PATCH_REMOVAL_DISALLOWED;
    public static WIN32_ERROR ERROR_INVALID_PATCH_XML;
    public static WIN32_ERROR ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT;
    public static WIN32_ERROR ERROR_INSTALL_SERVICE_SAFEBOOT;
    public static WIN32_ERROR ERROR_FAIL_FAST_EXCEPTION;
    public static WIN32_ERROR ERROR_INSTALL_REJECTED;
    public static WIN32_ERROR ERROR_DYNAMIC_CODE_BLOCKED;
    public static WIN32_ERROR ERROR_NOT_SAME_OBJECT;
    public static WIN32_ERROR ERROR_STRICT_CFG_VIOLATION;
    public static WIN32_ERROR ERROR_SET_CONTEXT_DENIED;
    public static WIN32_ERROR ERROR_CROSS_PARTITION_VIOLATION;
    public static WIN32_ERROR ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT;
    public static WIN32_ERROR ERROR_INVALID_USER_BUFFER;
    public static WIN32_ERROR ERROR_UNRECOGNIZED_MEDIA;
    public static WIN32_ERROR ERROR_NO_TRUST_LSA_SECRET;
    public static WIN32_ERROR ERROR_NO_TRUST_SAM_ACCOUNT;
    public static WIN32_ERROR ERROR_TRUSTED_DOMAIN_FAILURE;
    public static WIN32_ERROR ERROR_TRUSTED_RELATIONSHIP_FAILURE;
    public static WIN32_ERROR ERROR_TRUST_FAILURE;
    public static WIN32_ERROR ERROR_NETLOGON_NOT_STARTED;
    public static WIN32_ERROR ERROR_ACCOUNT_EXPIRED;
    public static WIN32_ERROR ERROR_REDIRECTOR_HAS_OPEN_HANDLES;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_UNKNOWN_PORT;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINTER_DRIVER;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINTPROCESSOR;
    public static WIN32_ERROR ERROR_INVALID_SEPARATOR_FILE;
    public static WIN32_ERROR ERROR_INVALID_PRIORITY;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_NAME;
    public static WIN32_ERROR ERROR_PRINTER_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_COMMAND;
    public static WIN32_ERROR ERROR_INVALID_DATATYPE;
    public static WIN32_ERROR ERROR_INVALID_ENVIRONMENT;
    public static WIN32_ERROR ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_NOLOGON_SERVER_TRUST_ACCOUNT;
    public static WIN32_ERROR ERROR_DOMAIN_TRUST_INCONSISTENT;
    public static WIN32_ERROR ERROR_SERVER_HAS_OPEN_HANDLES;
    public static WIN32_ERROR ERROR_RESOURCE_DATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_TYPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCE_LANG_NOT_FOUND;
    public static WIN32_ERROR ERROR_NOT_ENOUGH_QUOTA;
    public static WIN32_ERROR ERROR_INVALID_TIME;
    public static WIN32_ERROR ERROR_INVALID_FORM_NAME;
    public static WIN32_ERROR ERROR_INVALID_FORM_SIZE;
    public static WIN32_ERROR ERROR_ALREADY_WAITING;
    public static WIN32_ERROR ERROR_PRINTER_DELETED;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_STATE;
    public static WIN32_ERROR ERROR_PASSWORD_MUST_CHANGE;
    public static WIN32_ERROR ERROR_DOMAIN_CONTROLLER_NOT_FOUND;
    public static WIN32_ERROR ERROR_ACCOUNT_LOCKED_OUT;
    public static WIN32_ERROR ERROR_NO_SITENAME;
    public static WIN32_ERROR ERROR_CANT_ACCESS_FILE;
    public static WIN32_ERROR ERROR_CANT_RESOLVE_FILENAME;
    public static WIN32_ERROR ERROR_KM_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_CONTEXT_EXPIRED;
    public static WIN32_ERROR ERROR_PER_USER_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_AUTHENTICATION_FIREWALL_FAILED;
    public static WIN32_ERROR ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED;
    public static WIN32_ERROR ERROR_NTLM_BLOCKED;
    public static WIN32_ERROR ERROR_PASSWORD_CHANGE_REQUIRED;
    public static WIN32_ERROR ERROR_LOST_MODE_LOGON_RESTRICTION;
    public static WIN32_ERROR ERROR_INVALID_PIXEL_FORMAT;
    public static WIN32_ERROR ERROR_BAD_DRIVER;
    public static WIN32_ERROR ERROR_INVALID_WINDOW_STYLE;
    public static WIN32_ERROR ERROR_METAFILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_TRANSFORM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLIPPING_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_INVALID_CMM;
    public static WIN32_ERROR ERROR_INVALID_PROFILE;
    public static WIN32_ERROR ERROR_TAG_NOT_FOUND;
    public static WIN32_ERROR ERROR_TAG_NOT_PRESENT;
    public static WIN32_ERROR ERROR_DUPLICATE_TAG;
    public static WIN32_ERROR ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE;
    public static WIN32_ERROR ERROR_PROFILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_INVALID_COLORSPACE;
    public static WIN32_ERROR ERROR_ICM_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DELETING_ICM_XFORM;
    public static WIN32_ERROR ERROR_INVALID_TRANSFORM;
    public static WIN32_ERROR ERROR_COLORSPACE_MISMATCH;
    public static WIN32_ERROR ERROR_INVALID_COLORINDEX;
    public static WIN32_ERROR ERROR_PROFILE_DOES_NOT_MATCH_DEVICE;
    public static WIN32_ERROR ERROR_CONNECTED_OTHER_PASSWORD;
    public static WIN32_ERROR ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
    public static WIN32_ERROR ERROR_BAD_USERNAME;
    public static WIN32_ERROR ERROR_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_OPEN_FILES;
    public static WIN32_ERROR ERROR_ACTIVE_CONNECTIONS;
    public static WIN32_ERROR ERROR_DEVICE_IN_USE;
    public static WIN32_ERROR ERROR_UNKNOWN_PRINT_MONITOR;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_IN_USE;
    public static WIN32_ERROR ERROR_SPOOL_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_SPL_NO_STARTDOC;
    public static WIN32_ERROR ERROR_SPL_NO_ADDJOB;
    public static WIN32_ERROR ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_PRINT_MONITOR_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_INVALID_PRINT_MONITOR;
    public static WIN32_ERROR ERROR_PRINT_MONITOR_IN_USE;
    public static WIN32_ERROR ERROR_PRINTER_HAS_JOBS_QUEUED;
    public static WIN32_ERROR ERROR_SUCCESS_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_SUCCESS_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_PRINTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_WARNED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_BLOCKED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_PACKAGE_IN_USE;
    public static WIN32_ERROR ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_FAIL_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_FAIL_REBOOT_INITIATED;
    public static WIN32_ERROR ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED;
    public static WIN32_ERROR ERROR_PRINT_JOB_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_INVALID_PRINTER_DRIVER_MANIFEST;
    public static WIN32_ERROR ERROR_PRINTER_NOT_SHAREABLE;
    public static WIN32_ERROR ERROR_SERVER_SERVICE_CALL_REQUIRES_SMB1;
    public static WIN32_ERROR ERROR_NETWORK_AUTHENTICATION_PROMPT_CANCELED;
    public static WIN32_ERROR ERROR_REQUEST_PAUSED;
    public static WIN32_ERROR ERROR_APPEXEC_CONDITION_NOT_SATISFIED;
    public static WIN32_ERROR ERROR_APPEXEC_HANDLE_INVALIDATED;
    public static WIN32_ERROR ERROR_APPEXEC_INVALID_HOST_GENERATION;
    public static WIN32_ERROR ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION;
    public static WIN32_ERROR ERROR_APPEXEC_INVALID_HOST_STATE;
    public static WIN32_ERROR ERROR_APPEXEC_NO_DONOR;
    public static WIN32_ERROR ERROR_APPEXEC_HOST_ID_MISMATCH;
    public static WIN32_ERROR ERROR_APPEXEC_UNKNOWN_USER;
    public static WIN32_ERROR ERROR_APPEXEC_APP_COMPAT_BLOCK;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING;
    public static WIN32_ERROR ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_STOPPABLE;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_SAFE_MODE;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_PROTECTED_DRIVER;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_NMI_REGISTERED;
    public static WIN32_ERROR ERROR_VRF_VOLATILE_SETTINGS_CONFLICT;
    public static WIN32_ERROR ERROR_DIF_IOCALLBACK_NOT_REPLACED;
    public static WIN32_ERROR ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_INVALID_INFO;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DIF_VOLATILE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DIF_BINDING_API_NOT_FOUND;
    public static WIN32_ERROR ERROR_IO_REISSUE_AS_CACHED;
    public static WIN32_ERROR ERROR_WINS_INTERNAL;
    public static WIN32_ERROR ERROR_CAN_NOT_DEL_LOCAL_WINS;
    public static WIN32_ERROR ERROR_STATIC_INIT;
    public static WIN32_ERROR ERROR_INC_BACKUP;
    public static WIN32_ERROR ERROR_FULL_BACKUP;
    public static WIN32_ERROR ERROR_REC_NON_EXISTENT;
    public static WIN32_ERROR ERROR_RPL_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_DHCP_ADDRESS_CONFLICT;
    public static WIN32_ERROR ERROR_WMI_GUID_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_INSTANCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_ITEMID_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_TRY_AGAIN;
    public static WIN32_ERROR ERROR_WMI_DP_NOT_FOUND;
    public static WIN32_ERROR ERROR_WMI_UNRESOLVED_INSTANCE_REF;
    public static WIN32_ERROR ERROR_WMI_ALREADY_ENABLED;
    public static WIN32_ERROR ERROR_WMI_GUID_DISCONNECTED;
    public static WIN32_ERROR ERROR_WMI_SERVER_UNAVAILABLE;
    public static WIN32_ERROR ERROR_WMI_DP_FAILED;
    public static WIN32_ERROR ERROR_WMI_INVALID_MOF;
    public static WIN32_ERROR ERROR_WMI_INVALID_REGINFO;
    public static WIN32_ERROR ERROR_WMI_ALREADY_DISABLED;
    public static WIN32_ERROR ERROR_WMI_READ_ONLY;
    public static WIN32_ERROR ERROR_WMI_SET_FAILURE;
    public static WIN32_ERROR ERROR_NOT_APPCONTAINER;
    public static WIN32_ERROR ERROR_APPCONTAINER_REQUIRED;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_IN_APPCONTAINER;
    public static WIN32_ERROR ERROR_INVALID_PACKAGE_SID_LENGTH;
    public static WIN32_ERROR ERROR_INVALID_MEDIA;
    public static WIN32_ERROR ERROR_INVALID_LIBRARY;
    public static WIN32_ERROR ERROR_INVALID_MEDIA_POOL;
    public static WIN32_ERROR ERROR_DRIVE_MEDIA_MISMATCH;
    public static WIN32_ERROR ERROR_MEDIA_OFFLINE;
    public static WIN32_ERROR ERROR_LIBRARY_OFFLINE;
    public static WIN32_ERROR ERROR_EMPTY;
    public static WIN32_ERROR ERROR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_MEDIA_UNAVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_DISABLED;
    public static WIN32_ERROR ERROR_INVALID_CLEANER;
    public static WIN32_ERROR ERROR_UNABLE_TO_CLEAN;
    public static WIN32_ERROR ERROR_OBJECT_NOT_FOUND;
    public static WIN32_ERROR ERROR_DATABASE_FAILURE;
    public static WIN32_ERROR ERROR_DATABASE_FULL;
    public static WIN32_ERROR ERROR_MEDIA_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_PRESENT;
    public static WIN32_ERROR ERROR_INVALID_OPERATION;
    public static WIN32_ERROR ERROR_MEDIA_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DEVICE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_REQUEST_REFUSED;
    public static WIN32_ERROR ERROR_INVALID_DRIVE_OBJECT;
    public static WIN32_ERROR ERROR_LIBRARY_FULL;
    public static WIN32_ERROR ERROR_MEDIUM_NOT_ACCESSIBLE;
    public static WIN32_ERROR ERROR_UNABLE_TO_LOAD_MEDIUM;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_DRIVE;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_SLOT;
    public static WIN32_ERROR ERROR_UNABLE_TO_INVENTORY_TRANSPORT;
    public static WIN32_ERROR ERROR_TRANSPORT_FULL;
    public static WIN32_ERROR ERROR_CONTROLLING_IEPORT;
    public static WIN32_ERROR ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA;
    public static WIN32_ERROR ERROR_CLEANER_SLOT_SET;
    public static WIN32_ERROR ERROR_CLEANER_SLOT_NOT_SET;
    public static WIN32_ERROR ERROR_CLEANER_CARTRIDGE_SPENT;
    public static WIN32_ERROR ERROR_UNEXPECTED_OMID;
    public static WIN32_ERROR ERROR_CANT_DELETE_LAST_ITEM;
    public static WIN32_ERROR ERROR_MESSAGE_EXCEEDS_MAX_SIZE;
    public static WIN32_ERROR ERROR_VOLUME_CONTAINS_SYS_FILES;
    public static WIN32_ERROR ERROR_INDIGENOUS_TYPE;
    public static WIN32_ERROR ERROR_NO_SUPPORTING_DRIVES;
    public static WIN32_ERROR ERROR_CLEANER_CARTRIDGE_INSTALLED;
    public static WIN32_ERROR ERROR_IEPORT_FULL;
    public static WIN32_ERROR ERROR_FILE_OFFLINE;
    public static WIN32_ERROR ERROR_REMOTE_STORAGE_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_REMOTE_STORAGE_MEDIA_ERROR;
    public static WIN32_ERROR ERROR_NOT_A_REPARSE_POINT;
    public static WIN32_ERROR ERROR_REPARSE_ATTRIBUTE_CONFLICT;
    public static WIN32_ERROR ERROR_INVALID_REPARSE_DATA;
    public static WIN32_ERROR ERROR_REPARSE_TAG_INVALID;
    public static WIN32_ERROR ERROR_REPARSE_TAG_MISMATCH;
    public static WIN32_ERROR ERROR_REPARSE_POINT_ENCOUNTERED;
    public static WIN32_ERROR ERROR_APP_DATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_APP_DATA_EXPIRED;
    public static WIN32_ERROR ERROR_APP_DATA_CORRUPT;
    public static WIN32_ERROR ERROR_APP_DATA_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_APP_DATA_REBOOT_REQUIRED;
    public static WIN32_ERROR ERROR_SECUREBOOT_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_VIOLATION;
    public static WIN32_ERROR ERROR_SECUREBOOT_INVALID_POLICY;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_ENABLED;
    public static WIN32_ERROR ERROR_SECUREBOOT_FILE_REPLACED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_UNKNOWN;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION;
    public static WIN32_ERROR ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH;
    public static WIN32_ERROR ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_BASE_POLICY;
    public static WIN32_ERROR ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY;
    public static WIN32_ERROR ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_ALREADY_HAS_STREAM_ID;
    public static WIN32_ERROR ERROR_SMR_GARBAGE_COLLECTION_REQUIRED;
    public static WIN32_ERROR ERROR_WOF_WIM_HEADER_CORRUPT;
    public static WIN32_ERROR ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_OBJECT_IS_IMMUTABLE;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SIS_ENABLED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_INVALID_POLICY;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE;
    public static WIN32_ERROR ERROR_VSM_NOT_INITIALIZED;
    public static WIN32_ERROR ERROR_VSM_DMA_PROTECTION_NOT_IN_USE;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_INVALID;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_PLATFORM_MANIFEST_NOT_SIGNED;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_UNFRIENDLY_FILE;
    public static WIN32_ERROR ERROR_SYSTEM_INTEGRITY_REPUTATION_UNATTAINABLE;
    public static WIN32_ERROR ERROR_DEPENDENT_RESOURCE_EXISTS;
    public static WIN32_ERROR ERROR_DEPENDENCY_NOT_FOUND;
    public static WIN32_ERROR ERROR_DEPENDENCY_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_ONLINE;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_SHUTDOWN_CLUSTER;
    public static WIN32_ERROR ERROR_CANT_EVICT_ACTIVE_NODE;
    public static WIN32_ERROR ERROR_OBJECT_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_OBJECT_IN_LIST;
    public static WIN32_ERROR ERROR_GROUP_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_GROUP_NOT_FOUND;
    public static WIN32_ERROR ERROR_GROUP_NOT_ONLINE;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_RESOURCE_OWNER;
    public static WIN32_ERROR ERROR_HOST_NODE_NOT_GROUP_OWNER;
    public static WIN32_ERROR ERROR_RESMON_CREATE_FAILED;
    public static WIN32_ERROR ERROR_RESMON_ONLINE_FAILED;
    public static WIN32_ERROR ERROR_RESOURCE_ONLINE;
    public static WIN32_ERROR ERROR_QUORUM_RESOURCE;
    public static WIN32_ERROR ERROR_NOT_QUORUM_CAPABLE;
    public static WIN32_ERROR ERROR_CLUSTER_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_INVALID_STATE;
    public static WIN32_ERROR ERROR_RESOURCE_PROPERTIES_STORED;
    public static WIN32_ERROR ERROR_NOT_QUORUM_CLASS;
    public static WIN32_ERROR ERROR_CORE_RESOURCE;
    public static WIN32_ERROR ERROR_QUORUM_RESOURCE_ONLINE_FAILED;
    public static WIN32_ERROR ERROR_QUORUMLOG_OPEN_FAILED;
    public static WIN32_ERROR ERROR_CLUSTERLOG_CORRUPT;
    public static WIN32_ERROR ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE;
    public static WIN32_ERROR ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE;
    public static WIN32_ERROR ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE;
    public static WIN32_ERROR ERROR_QUORUM_OWNER_ALIVE;
    public static WIN32_ERROR ERROR_NETWORK_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NODE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_ALL_NODES_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_RESOURCE_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NODE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NETINTERFACE_EXISTS;
    public static WIN32_ERROR ERROR_CLUSTER_NETINTERFACE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NETWORK_PROVIDER;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_UNREACHABLE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_UP;
    public static WIN32_ERROR ERROR_CLUSTER_IPADDR_IN_USE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_PAUSED;
    public static WIN32_ERROR ERROR_CLUSTER_NO_SECURITY_CONTEXT;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_INTERNAL;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_UP;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_ALREADY_ONLINE;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_LAST_INTERNAL_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS;
    public static WIN32_ERROR ERROR_INVALID_OPERATION_ON_QUORUM;
    public static WIN32_ERROR ERROR_DEPENDENCY_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_PAUSED;
    public static WIN32_ERROR ERROR_NODE_CANT_HOST_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_NOT_READY;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_CLUSTER_JOIN_ABORTED;
    public static WIN32_ERROR ERROR_CLUSTER_INCOMPATIBLE_VERSIONS;
    public static WIN32_ERROR ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED;
    public static WIN32_ERROR ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_RESNAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED;
    public static WIN32_ERROR ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_SEQMISMATCH;
    public static WIN32_ERROR ERROR_RESMON_INVALID_STATE;
    public static WIN32_ERROR ERROR_CLUSTER_GUM_NOT_LOCKER;
    public static WIN32_ERROR ERROR_QUORUM_DISK_NOT_FOUND;
    public static WIN32_ERROR ERROR_DATABASE_BACKUP_CORRUPT;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT;
    public static WIN32_ERROR ERROR_RESOURCE_PROPERTY_UNCHANGEABLE;
    public static WIN32_ERROR ERROR_NO_ADMIN_ACCESS_POINT;
    public static WIN32_ERROR ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE;
    public static WIN32_ERROR ERROR_CLUSTER_QUORUMLOG_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_MEMBERSHIP_HALT;
    public static WIN32_ERROR ERROR_CLUSTER_INSTANCE_ID_MISMATCH;
    public static WIN32_ERROR ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP;
    public static WIN32_ERROR ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP;
    public static WIN32_ERROR ERROR_CLUSTER_PARAMETER_MISMATCH;
    public static WIN32_ERROR ERROR_NODE_CANNOT_BE_CLUSTERED;
    public static WIN32_ERROR ERROR_CLUSTER_WRONG_OS_VERSION;
    public static WIN32_ERROR ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME;
    public static WIN32_ERROR ERROR_CLUSCFG_ALREADY_COMMITTED;
    public static WIN32_ERROR ERROR_CLUSCFG_ROLLBACK_FAILED;
    public static WIN32_ERROR ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_OLD_VERSION;
    public static WIN32_ERROR ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME;
    public static WIN32_ERROR ERROR_CLUSTER_NO_NET_ADAPTERS;
    public static WIN32_ERROR ERROR_CLUSTER_POISONED;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_MOVING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_TYPE_BUSY;
    public static WIN32_ERROR ERROR_RESOURCE_CALL_TIMED_OUT;
    public static WIN32_ERROR ERROR_INVALID_CLUSTER_IPV6_ADDRESS;
    public static WIN32_ERROR ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_SEND;
    public static WIN32_ERROR ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_STRING_TERMINATION;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_STRING_FORMAT;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_NULL_DATA;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_READ;
    public static WIN32_ERROR ERROR_CLUSTER_PARTIAL_WRITE;
    public static WIN32_ERROR ERROR_CLUSTER_CANT_DESERIALIZE_DATA;
    public static WIN32_ERROR ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_NO_QUORUM;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_IPV6_NETWORK;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK;
    public static WIN32_ERROR ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP;
    public static WIN32_ERROR ERROR_DEPENDENCY_TREE_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_EXCEPTION_IN_RESOURCE_CALL;
    public static WIN32_ERROR ERROR_CLUSTER_RHS_FAILED_INITIALIZATION;
    public static WIN32_ERROR ERROR_CLUSTER_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE;
    public static WIN32_ERROR ERROR_CLUSTER_MAX_NODES_IN_CLUSTER;
    public static WIN32_ERROR ERROR_CLUSTER_TOO_MANY_NODES;
    public static WIN32_ERROR ERROR_CLUSTER_OBJECT_ALREADY_USED;
    public static WIN32_ERROR ERROR_NONCORE_GROUPS_FOUND;
    public static WIN32_ERROR ERROR_FILE_SHARE_RESOURCE_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_EVICT_INVALID_REQUEST;
    public static WIN32_ERROR ERROR_CLUSTER_SINGLETON_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_BUSY;
    public static WIN32_ERROR ERROR_CLUSTER_NOT_SHARED_VOLUME;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUMES_IN_USE;
    public static WIN32_ERROR ERROR_CLUSTER_USE_SHARED_VOLUMES_API;
    public static WIN32_ERROR ERROR_CLUSTER_BACKUP_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NON_CSV_PATH;
    public static WIN32_ERROR ERROR_CSV_VOLUME_NOT_LOCAL;
    public static WIN32_ERROR ERROR_CLUSTER_WATCHDOG_TERMINATING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_NODE_WEIGHT;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_CALL;
    public static WIN32_ERROR ERROR_RESMON_SYSTEM_RESOURCES_LACKING;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE;
    public static WIN32_ERROR ERROR_CLUSTER_GROUP_QUEUED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_LOCKED_STATUS;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_DISK_NOT_CONNECTED;
    public static WIN32_ERROR ERROR_DISK_NOT_CSV_CAPABLE;
    public static WIN32_ERROR ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED;
    public static WIN32_ERROR ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED;
    public static WIN32_ERROR ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE;
    public static WIN32_ERROR ERROR_CLUSTER_AFFINITY_CONFLICT;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_CLUSTER_UPGRADE_INCOMPLETE;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_IN_GRACE_PERIOD;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT;
    public static WIN32_ERROR ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_NOT_MONITORED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED;
    public static WIN32_ERROR ERROR_CLUSTER_RESOURCE_IS_REPLICATED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_ISOLATED;
    public static WIN32_ERROR ERROR_CLUSTER_NODE_QUARANTINED;
    public static WIN32_ERROR ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED;
    public static WIN32_ERROR ERROR_CLUSTER_SPACE_DEGRADED;
    public static WIN32_ERROR ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_INVALID_HANDLE;
    public static WIN32_ERROR ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR;
    public static WIN32_ERROR ERROR_GROUPSET_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_GROUPSET_NOT_FOUND;
    public static WIN32_ERROR ERROR_GROUPSET_CANT_PROVIDE;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION;
    public static WIN32_ERROR ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS;
    public static WIN32_ERROR ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME;
    public static WIN32_ERROR ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE;
    public static WIN32_ERROR ERROR_ENCRYPTION_FAILED;
    public static WIN32_ERROR ERROR_DECRYPTION_FAILED;
    public static WIN32_ERROR ERROR_FILE_ENCRYPTED;
    public static WIN32_ERROR ERROR_NO_RECOVERY_POLICY;
    public static WIN32_ERROR ERROR_NO_EFS;
    public static WIN32_ERROR ERROR_WRONG_EFS;
    public static WIN32_ERROR ERROR_NO_USER_KEYS;
    public static WIN32_ERROR ERROR_FILE_NOT_ENCRYPTED;
    public static WIN32_ERROR ERROR_NOT_EXPORT_FORMAT;
    public static WIN32_ERROR ERROR_FILE_READ_ONLY;
    public static WIN32_ERROR ERROR_DIR_EFS_DISALLOWED;
    public static WIN32_ERROR ERROR_EFS_SERVER_NOT_TRUSTED;
    public static WIN32_ERROR ERROR_BAD_RECOVERY_POLICY;
    public static WIN32_ERROR ERROR_EFS_ALG_BLOB_TOO_BIG;
    public static WIN32_ERROR ERROR_VOLUME_NOT_SUPPORT_EFS;
    public static WIN32_ERROR ERROR_EFS_DISABLED;
    public static WIN32_ERROR ERROR_EFS_VERSION_NOT_SUPPORT;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE;
    public static WIN32_ERROR ERROR_CS_ENCRYPTION_FILE_NOT_CSE;
    public static WIN32_ERROR ERROR_ENCRYPTION_POLICY_DENIES_OPERATION;
    public static WIN32_ERROR ERROR_WIP_ENCRYPTION_FAILED;
    public static WIN32_ERROR ERROR_NO_BROWSER_SERVERS_FOUND;
    public static WIN32_ERROR ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM;
    public static WIN32_ERROR ERROR_LOG_SECTOR_INVALID;
    public static WIN32_ERROR ERROR_LOG_SECTOR_PARITY_INVALID;
    public static WIN32_ERROR ERROR_LOG_SECTOR_REMAPPED;
    public static WIN32_ERROR ERROR_LOG_BLOCK_INCOMPLETE;
    public static WIN32_ERROR ERROR_LOG_INVALID_RANGE;
    public static WIN32_ERROR ERROR_LOG_BLOCKS_EXHAUSTED;
    public static WIN32_ERROR ERROR_LOG_READ_CONTEXT_INVALID;
    public static WIN32_ERROR ERROR_LOG_RESTART_INVALID;
    public static WIN32_ERROR ERROR_LOG_BLOCK_VERSION;
    public static WIN32_ERROR ERROR_LOG_BLOCK_INVALID;
    public static WIN32_ERROR ERROR_LOG_READ_MODE_INVALID;
    public static WIN32_ERROR ERROR_LOG_NO_RESTART;
    public static WIN32_ERROR ERROR_LOG_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_LOG_METADATA_INVALID;
    public static WIN32_ERROR ERROR_LOG_METADATA_INCONSISTENT;
    public static WIN32_ERROR ERROR_LOG_RESERVATION_INVALID;
    public static WIN32_ERROR ERROR_LOG_CANT_DELETE;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_LOG_START_OF_LOG;
    public static WIN32_ERROR ERROR_LOG_POLICY_ALREADY_INSTALLED;
    public static WIN32_ERROR ERROR_LOG_POLICY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_LOG_POLICY_INVALID;
    public static WIN32_ERROR ERROR_LOG_POLICY_CONFLICT;
    public static WIN32_ERROR ERROR_LOG_PINNED_ARCHIVE_TAIL;
    public static WIN32_ERROR ERROR_LOG_RECORD_NONEXISTENT;
    public static WIN32_ERROR ERROR_LOG_RECORDS_RESERVED_INVALID;
    public static WIN32_ERROR ERROR_LOG_SPACE_RESERVED_INVALID;
    public static WIN32_ERROR ERROR_LOG_TAIL_INVALID;
    public static WIN32_ERROR ERROR_LOG_FULL;
    public static WIN32_ERROR ERROR_COULD_NOT_RESIZE_LOG;
    public static WIN32_ERROR ERROR_LOG_MULTIPLEXED;
    public static WIN32_ERROR ERROR_LOG_DEDICATED;
    public static WIN32_ERROR ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_ARCHIVE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_EPHEMERAL;
    public static WIN32_ERROR ERROR_LOG_NOT_ENOUGH_CONTAINERS;
    public static WIN32_ERROR ERROR_LOG_CLIENT_ALREADY_REGISTERED;
    public static WIN32_ERROR ERROR_LOG_CLIENT_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_LOG_FULL_HANDLER_IN_PROGRESS;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_READ_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_WRITE_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_OPEN_FAILED;
    public static WIN32_ERROR ERROR_LOG_CONTAINER_STATE_INVALID;
    public static WIN32_ERROR ERROR_LOG_STATE_INVALID;
    public static WIN32_ERROR ERROR_LOG_PINNED;
    public static WIN32_ERROR ERROR_LOG_METADATA_FLUSH_FAILED;
    public static WIN32_ERROR ERROR_LOG_INCONSISTENT_SECURITY;
    public static WIN32_ERROR ERROR_LOG_APPENDED_FLUSH_FAILED;
    public static WIN32_ERROR ERROR_LOG_PINNED_RESERVATION;
    public static WIN32_ERROR ERROR_INVALID_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_TRANSACTION_REQUEST_NOT_VALID;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_REQUESTED;
    public static WIN32_ERROR ERROR_TRANSACTION_ALREADY_ABORTED;
    public static WIN32_ERROR ERROR_TRANSACTION_ALREADY_COMMITTED;
    public static WIN32_ERROR ERROR_TM_INITIALIZATION_FAILED;
    public static WIN32_ERROR ERROR_RESOURCEMANAGER_READ_ONLY;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_JOINED;
    public static WIN32_ERROR ERROR_TRANSACTION_SUPERIOR_EXISTS;
    public static WIN32_ERROR ERROR_CRM_PROTOCOL_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_TRANSACTION_PROPAGATION_FAILED;
    public static WIN32_ERROR ERROR_CRM_PROTOCOL_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER;
    public static WIN32_ERROR ERROR_CURRENT_TRANSACTION_NOT_VALID;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_RESOURCEMANAGER_NOT_FOUND;
    public static WIN32_ERROR ERROR_ENLISTMENT_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_NOT_FOUND;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_NOT_ONLINE;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ROOT;
    public static WIN32_ERROR ERROR_TRANSACTION_OBJECT_EXPIRED;
    public static WIN32_ERROR ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED;
    public static WIN32_ERROR ERROR_TRANSACTION_RECORD_TOO_LONG;
    public static WIN32_ERROR ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_TRANSACTION_INTEGRITY_VIOLATED;
    public static WIN32_ERROR ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH;
    public static WIN32_ERROR ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT;
    public static WIN32_ERROR ERROR_TRANSACTION_MUST_WRITETHROUGH;
    public static WIN32_ERROR ERROR_TRANSACTION_NO_SUPERIOR;
    public static WIN32_ERROR ERROR_HEURISTIC_DAMAGE_POSSIBLE;
    public static WIN32_ERROR ERROR_TRANSACTIONAL_CONFLICT;
    public static WIN32_ERROR ERROR_RM_NOT_ACTIVE;
    public static WIN32_ERROR ERROR_RM_METADATA_CORRUPT;
    public static WIN32_ERROR ERROR_DIRECTORY_NOT_RM;
    public static WIN32_ERROR ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE;
    public static WIN32_ERROR ERROR_LOG_RESIZE_INVALID_SIZE;
    public static WIN32_ERROR ERROR_OBJECT_NO_LONGER_EXISTS;
    public static WIN32_ERROR ERROR_STREAM_MINIVERSION_NOT_FOUND;
    public static WIN32_ERROR ERROR_STREAM_MINIVERSION_NOT_VALID;
    public static WIN32_ERROR ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION;
    public static WIN32_ERROR ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT;
    public static WIN32_ERROR ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS;
    public static WIN32_ERROR ERROR_REMOTE_FILE_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_HANDLE_NO_LONGER_VALID;
    public static WIN32_ERROR ERROR_NO_TXF_METADATA;
    public static WIN32_ERROR ERROR_LOG_CORRUPTION_DETECTED;
    public static WIN32_ERROR ERROR_CANT_RECOVER_WITH_HANDLE_OPEN;
    public static WIN32_ERROR ERROR_RM_DISCONNECTED;
    public static WIN32_ERROR ERROR_ENLISTMENT_NOT_SUPERIOR;
    public static WIN32_ERROR ERROR_RECOVERY_NOT_NEEDED;
    public static WIN32_ERROR ERROR_RM_ALREADY_STARTED;
    public static WIN32_ERROR ERROR_FILE_IDENTITY_NOT_PERSISTENT;
    public static WIN32_ERROR ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY;
    public static WIN32_ERROR ERROR_CANT_CROSS_RM_BOUNDARY;
    public static WIN32_ERROR ERROR_TXF_DIR_NOT_EMPTY;
    public static WIN32_ERROR ERROR_INDOUBT_TRANSACTIONS_EXIST;
    public static WIN32_ERROR ERROR_TM_VOLATILE;
    public static WIN32_ERROR ERROR_ROLLBACK_TIMER_EXPIRED;
    public static WIN32_ERROR ERROR_TXF_ATTRIBUTE_CORRUPT;
    public static WIN32_ERROR ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_LOG_GROWTH_FAILED;
    public static WIN32_ERROR ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE;
    public static WIN32_ERROR ERROR_TXF_METADATA_ALREADY_PRESENT;
    public static WIN32_ERROR ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET;
    public static WIN32_ERROR ERROR_TRANSACTION_REQUIRED_PROMOTION;
    public static WIN32_ERROR ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TRANSACTIONS_NOT_FROZEN;
    public static WIN32_ERROR ERROR_TRANSACTION_FREEZE_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NOT_SNAPSHOT_VOLUME;
    public static WIN32_ERROR ERROR_NO_SAVEPOINT_WITH_OPEN_FILES;
    public static WIN32_ERROR ERROR_DATA_LOST_REPAIR;
    public static WIN32_ERROR ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_TM_IDENTITY_MISMATCH;
    public static WIN32_ERROR ERROR_FLOATED_SECTION;
    public static WIN32_ERROR ERROR_CANNOT_ACCEPT_TRANSACTED_WORK;
    public static WIN32_ERROR ERROR_CANNOT_ABORT_TRANSACTIONS;
    public static WIN32_ERROR ERROR_BAD_CLUSTERS;
    public static WIN32_ERROR ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_VOLUME_DIRTY;
    public static WIN32_ERROR ERROR_NO_LINK_TRACKING_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION;
    public static WIN32_ERROR ERROR_EXPIRED_HANDLE;
    public static WIN32_ERROR ERROR_TRANSACTION_NOT_ENLISTED;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_NAME_INVALID;
    public static WIN32_ERROR ERROR_CTX_INVALID_PD;
    public static WIN32_ERROR ERROR_CTX_PD_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_WD_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY;
    public static WIN32_ERROR ERROR_CTX_SERVICE_NAME_COLLISION;
    public static WIN32_ERROR ERROR_CTX_CLOSE_PENDING;
    public static WIN32_ERROR ERROR_CTX_NO_OUTBUF;
    public static WIN32_ERROR ERROR_CTX_MODEM_INF_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_INVALID_MODEMNAME;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_ERROR;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_TIMEOUT;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_NO_CARRIER;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_BUSY;
    public static WIN32_ERROR ERROR_CTX_MODEM_RESPONSE_VOICE;
    public static WIN32_ERROR ERROR_CTX_TD_ERROR;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_NOT_FOUND;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_BUSY;
    public static WIN32_ERROR ERROR_CTX_BAD_VIDEO_MODE;
    public static WIN32_ERROR ERROR_CTX_GRAPHICS_INVALID;
    public static WIN32_ERROR ERROR_CTX_LOGON_DISABLED;
    public static WIN32_ERROR ERROR_CTX_NOT_CONSOLE;
    public static WIN32_ERROR ERROR_CTX_CLIENT_QUERY_TIMEOUT;
    public static WIN32_ERROR ERROR_CTX_CONSOLE_DISCONNECT;
    public static WIN32_ERROR ERROR_CTX_CONSOLE_CONNECT;
    public static WIN32_ERROR ERROR_CTX_SHADOW_DENIED;
    public static WIN32_ERROR ERROR_CTX_WINSTATION_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_CTX_INVALID_WD;
    public static WIN32_ERROR ERROR_CTX_SHADOW_INVALID;
    public static WIN32_ERROR ERROR_CTX_SHADOW_DISABLED;
    public static WIN32_ERROR ERROR_CTX_CLIENT_LICENSE_IN_USE;
    public static WIN32_ERROR ERROR_CTX_CLIENT_LICENSE_NOT_SET;
    public static WIN32_ERROR ERROR_CTX_LICENSE_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_CTX_LICENSE_CLIENT_INVALID;
    public static WIN32_ERROR ERROR_CTX_LICENSE_EXPIRED;
    public static WIN32_ERROR ERROR_CTX_SHADOW_NOT_RUNNING;
    public static WIN32_ERROR ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE;
    public static WIN32_ERROR ERROR_ACTIVATION_COUNT_EXCEEDED;
    public static WIN32_ERROR ERROR_CTX_WINSTATIONS_DISABLED;
    public static WIN32_ERROR ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED;
    public static WIN32_ERROR ERROR_CTX_SESSION_IN_USE;
    public static WIN32_ERROR ERROR_CTX_NO_FORCE_LOGOFF;
    public static WIN32_ERROR ERROR_CTX_ACCOUNT_RESTRICTION;
    public static WIN32_ERROR ERROR_RDP_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_CTX_CDM_CONNECT;
    public static WIN32_ERROR ERROR_CTX_CDM_DISCONNECT;
    public static WIN32_ERROR ERROR_CTX_SECURITY_LAYER_ERROR;
    public static WIN32_ERROR ERROR_TS_INCOMPATIBLE_SESSIONS;
    public static WIN32_ERROR ERROR_TS_VIDEO_SUBSYSTEM_ERROR;
    public static WIN32_ERROR ERROR_DS_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY;
    public static WIN32_ERROR ERROR_DS_NO_ATTRIBUTE_OR_VALUE;
    public static WIN32_ERROR ERROR_DS_INVALID_ATTRIBUTE_SYNTAX;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS;
    public static WIN32_ERROR ERROR_DS_BUSY;
    public static WIN32_ERROR ERROR_DS_UNAVAILABLE;
    public static WIN32_ERROR ERROR_DS_NO_RIDS_ALLOCATED;
    public static WIN32_ERROR ERROR_DS_NO_MORE_RIDS;
    public static WIN32_ERROR ERROR_DS_INCORRECT_ROLE_OWNER;
    public static WIN32_ERROR ERROR_DS_RIDMGR_INIT_ERROR;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_VIOLATION;
    public static WIN32_ERROR ERROR_DS_CANT_ON_NON_LEAF;
    public static WIN32_ERROR ERROR_DS_CANT_ON_RDN;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_OBJ_CLASS;
    public static WIN32_ERROR ERROR_DS_CROSS_DOM_MOVE_ERROR;
    public static WIN32_ERROR ERROR_DS_GC_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_SHARED_POLICY;
    public static WIN32_ERROR ERROR_POLICY_OBJECT_NOT_FOUND;
    public static WIN32_ERROR ERROR_POLICY_ONLY_IN_DS;
    public static WIN32_ERROR ERROR_PROMOTION_ACTIVE;
    public static WIN32_ERROR ERROR_NO_PROMOTION_ACTIVE;
    public static WIN32_ERROR ERROR_DS_OPERATIONS_ERROR;
    public static WIN32_ERROR ERROR_DS_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_DS_TIMELIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_SIZELIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_ADMIN_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_COMPARE_FALSE;
    public static WIN32_ERROR ERROR_DS_COMPARE_TRUE;
    public static WIN32_ERROR ERROR_DS_AUTH_METHOD_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_STRONG_AUTH_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INAPPROPRIATE_AUTH;
    public static WIN32_ERROR ERROR_DS_AUTH_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_REFERRAL;
    public static WIN32_ERROR ERROR_DS_UNAVAILABLE_CRIT_EXTENSION;
    public static WIN32_ERROR ERROR_DS_CONFIDENTIALITY_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INAPPROPRIATE_MATCHING;
    public static WIN32_ERROR ERROR_DS_CONSTRAINT_VIOLATION;
    public static WIN32_ERROR ERROR_DS_NO_SUCH_OBJECT;
    public static WIN32_ERROR ERROR_DS_ALIAS_PROBLEM;
    public static WIN32_ERROR ERROR_DS_INVALID_DN_SYNTAX;
    public static WIN32_ERROR ERROR_DS_IS_LEAF;
    public static WIN32_ERROR ERROR_DS_ALIAS_DEREF_PROBLEM;
    public static WIN32_ERROR ERROR_DS_UNWILLING_TO_PERFORM;
    public static WIN32_ERROR ERROR_DS_LOOP_DETECT;
    public static WIN32_ERROR ERROR_DS_NAMING_VIOLATION;
    public static WIN32_ERROR ERROR_DS_OBJECT_RESULTS_TOO_LARGE;
    public static WIN32_ERROR ERROR_DS_AFFECTS_MULTIPLE_DSAS;
    public static WIN32_ERROR ERROR_DS_SERVER_DOWN;
    public static WIN32_ERROR ERROR_DS_LOCAL_ERROR;
    public static WIN32_ERROR ERROR_DS_ENCODING_ERROR;
    public static WIN32_ERROR ERROR_DS_DECODING_ERROR;
    public static WIN32_ERROR ERROR_DS_FILTER_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_PARAM_ERROR;
    public static WIN32_ERROR ERROR_DS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_NO_RESULTS_RETURNED;
    public static WIN32_ERROR ERROR_DS_CONTROL_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_CLIENT_LOOP;
    public static WIN32_ERROR ERROR_DS_REFERRAL_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_SORT_CONTROL_MISSING;
    public static WIN32_ERROR ERROR_DS_OFFSET_RANGE_ERROR;
    public static WIN32_ERROR ERROR_DS_RIDMGR_DISABLED;
    public static WIN32_ERROR ERROR_DS_ROOT_MUST_BE_NC;
    public static WIN32_ERROR ERROR_DS_ADD_REPLICA_INHIBITED;
    public static WIN32_ERROR ERROR_DS_ATT_NOT_DEF_IN_SCHEMA;
    public static WIN32_ERROR ERROR_DS_MAX_OBJ_SIZE_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_OBJ_STRING_NAME_EXISTS;
    public static WIN32_ERROR ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA;
    public static WIN32_ERROR ERROR_DS_RDN_DOESNT_MATCH_SCHEMA;
    public static WIN32_ERROR ERROR_DS_NO_REQUESTED_ATTS_FOUND;
    public static WIN32_ERROR ERROR_DS_USER_BUFFER_TO_SMALL;
    public static WIN32_ERROR ERROR_DS_ATT_IS_NOT_ON_OBJ;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_MOD_OPERATION;
    public static WIN32_ERROR ERROR_DS_OBJ_TOO_LARGE;
    public static WIN32_ERROR ERROR_DS_BAD_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_MASTERDSA_REQUIRED;
    public static WIN32_ERROR ERROR_DS_OBJECT_CLASS_REQUIRED;
    public static WIN32_ERROR ERROR_DS_MISSING_REQUIRED_ATT;
    public static WIN32_ERROR ERROR_DS_ATT_NOT_DEF_FOR_CLASS;
    public static WIN32_ERROR ERROR_DS_ATT_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_ATT_VALUES;
    public static WIN32_ERROR ERROR_DS_SINGLE_VALUE_CONSTRAINT;
    public static WIN32_ERROR ERROR_DS_RANGE_CONSTRAINT;
    public static WIN32_ERROR ERROR_DS_ATT_VAL_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_REM_MISSING_ATT;
    public static WIN32_ERROR ERROR_DS_CANT_REM_MISSING_ATT_VAL;
    public static WIN32_ERROR ERROR_DS_ROOT_CANT_BE_SUBREF;
    public static WIN32_ERROR ERROR_DS_NO_CHAINING;
    public static WIN32_ERROR ERROR_DS_NO_CHAINED_EVAL;
    public static WIN32_ERROR ERROR_DS_NO_PARENT_OBJECT;
    public static WIN32_ERROR ERROR_DS_PARENT_IS_AN_ALIAS;
    public static WIN32_ERROR ERROR_DS_CANT_MIX_MASTER_AND_REPS;
    public static WIN32_ERROR ERROR_DS_CHILDREN_EXIST;
    public static WIN32_ERROR ERROR_DS_OBJ_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_ALIASED_OBJ_MISSING;
    public static WIN32_ERROR ERROR_DS_BAD_NAME_SYNTAX;
    public static WIN32_ERROR ERROR_DS_ALIAS_POINTS_TO_ALIAS;
    public static WIN32_ERROR ERROR_DS_CANT_DEREF_ALIAS;
    public static WIN32_ERROR ERROR_DS_OUT_OF_SCOPE;
    public static WIN32_ERROR ERROR_DS_OBJECT_BEING_REMOVED;
    public static WIN32_ERROR ERROR_DS_CANT_DELETE_DSA_OBJ;
    public static WIN32_ERROR ERROR_DS_GENERIC_ERROR;
    public static WIN32_ERROR ERROR_DS_DSA_MUST_BE_INT_MASTER;
    public static WIN32_ERROR ERROR_DS_CLASS_NOT_DSA;
    public static WIN32_ERROR ERROR_DS_INSUFF_ACCESS_RIGHTS;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_SUPERIOR;
    public static WIN32_ERROR ERROR_DS_ATTRIBUTE_OWNED_BY_SAM;
    public static WIN32_ERROR ERROR_DS_NAME_TOO_MANY_PARTS;
    public static WIN32_ERROR ERROR_DS_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_DS_NAME_VALUE_TOO_LONG;
    public static WIN32_ERROR ERROR_DS_NAME_UNPARSEABLE;
    public static WIN32_ERROR ERROR_DS_NAME_TYPE_UNKNOWN;
    public static WIN32_ERROR ERROR_DS_NOT_AN_OBJECT;
    public static WIN32_ERROR ERROR_DS_SEC_DESC_TOO_SHORT;
    public static WIN32_ERROR ERROR_DS_SEC_DESC_INVALID;
    public static WIN32_ERROR ERROR_DS_NO_DELETED_NAME;
    public static WIN32_ERROR ERROR_DS_SUBREF_MUST_HAVE_PARENT;
    public static WIN32_ERROR ERROR_DS_NCNAME_MUST_BE_NC;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_SYSTEM_ONLY;
    public static WIN32_ERROR ERROR_DS_CLASS_MUST_BE_CONCRETE;
    public static WIN32_ERROR ERROR_DS_INVALID_DMD;
    public static WIN32_ERROR ERROR_DS_OBJ_GUID_EXISTS;
    public static WIN32_ERROR ERROR_DS_NOT_ON_BACKLINK;
    public static WIN32_ERROR ERROR_DS_NO_CROSSREF_FOR_NC;
    public static WIN32_ERROR ERROR_DS_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_DS_UNKNOWN_OPERATION;
    public static WIN32_ERROR ERROR_DS_INVALID_ROLE_OWNER;
    public static WIN32_ERROR ERROR_DS_COULDNT_CONTACT_FSMO;
    public static WIN32_ERROR ERROR_DS_CROSS_NC_DN_RENAME;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_SYSTEM_ONLY;
    public static WIN32_ERROR ERROR_DS_REPLICATOR_ONLY;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_NOT_DEFINED;
    public static WIN32_ERROR ERROR_DS_OBJ_CLASS_NOT_SUBCLASS;
    public static WIN32_ERROR ERROR_DS_NAME_REFERENCE_INVALID;
    public static WIN32_ERROR ERROR_DS_CROSS_REF_EXISTS;
    public static WIN32_ERROR ERROR_DS_CANT_DEL_MASTER_CROSSREF;
    public static WIN32_ERROR ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD;
    public static WIN32_ERROR ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_DS_DUP_RDN;
    public static WIN32_ERROR ERROR_DS_DUP_OID;
    public static WIN32_ERROR ERROR_DS_DUP_MAPI_ID;
    public static WIN32_ERROR ERROR_DS_DUP_SCHEMA_ID_GUID;
    public static WIN32_ERROR ERROR_DS_DUP_LDAP_DISPLAY_NAME;
    public static WIN32_ERROR ERROR_DS_SEMANTIC_ATT_TEST;
    public static WIN32_ERROR ERROR_DS_SYNTAX_MISMATCH;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_MUST_HAVE;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_MAY_HAVE;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_MAY_HAVE;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_MUST_HAVE;
    public static WIN32_ERROR ERROR_DS_AUX_CLS_TEST_FAIL;
    public static WIN32_ERROR ERROR_DS_NONEXISTENT_POSS_SUP;
    public static WIN32_ERROR ERROR_DS_SUB_CLS_TEST_FAIL;
    public static WIN32_ERROR ERROR_DS_BAD_RDN_ATT_ID_SYNTAX;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_AUX_CLS;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_SUB_CLS;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_POSS_SUP;
    public static WIN32_ERROR ERROR_DS_RECALCSCHEMA_FAILED;
    public static WIN32_ERROR ERROR_DS_TREE_DELETE_NOT_FINISHED;
    public static WIN32_ERROR ERROR_DS_CANT_DELETE;
    public static WIN32_ERROR ERROR_DS_ATT_SCHEMA_REQ_ID;
    public static WIN32_ERROR ERROR_DS_BAD_ATT_SCHEMA_SYNTAX;
    public static WIN32_ERROR ERROR_DS_CANT_CACHE_ATT;
    public static WIN32_ERROR ERROR_DS_CANT_CACHE_CLASS;
    public static WIN32_ERROR ERROR_DS_CANT_REMOVE_ATT_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_REMOVE_CLASS_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_DN;
    public static WIN32_ERROR ERROR_DS_MISSING_SUPREF;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_INSTANCE;
    public static WIN32_ERROR ERROR_DS_CODE_INCONSISTENCY;
    public static WIN32_ERROR ERROR_DS_DATABASE_ERROR;
    public static WIN32_ERROR ERROR_DS_GOVERNSID_MISSING;
    public static WIN32_ERROR ERROR_DS_MISSING_EXPECTED_ATT;
    public static WIN32_ERROR ERROR_DS_NCNAME_MISSING_CR_REF;
    public static WIN32_ERROR ERROR_DS_SECURITY_CHECKING_ERROR;
    public static WIN32_ERROR ERROR_DS_SCHEMA_NOT_LOADED;
    public static WIN32_ERROR ERROR_DS_SCHEMA_ALLOC_FAILED;
    public static WIN32_ERROR ERROR_DS_ATT_SCHEMA_REQ_SYNTAX;
    public static WIN32_ERROR ERROR_DS_GCVERIFY_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_MISMATCH;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_DSA_OBJ;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_EXPECTED_NC;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_NC_IN_CACHE;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_CHILD;
    public static WIN32_ERROR ERROR_DS_SECURITY_ILLEGAL_MODIFY;
    public static WIN32_ERROR ERROR_DS_CANT_REPLACE_HIDDEN_REC;
    public static WIN32_ERROR ERROR_DS_BAD_HIERARCHY_FILE;
    public static WIN32_ERROR ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED;
    public static WIN32_ERROR ERROR_DS_CONFIG_PARAM_MISSING;
    public static WIN32_ERROR ERROR_DS_COUNTING_AB_INDICES_FAILED;
    public static WIN32_ERROR ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED;
    public static WIN32_ERROR ERROR_DS_INTERNAL_FAILURE;
    public static WIN32_ERROR ERROR_DS_UNKNOWN_ERROR;
    public static WIN32_ERROR ERROR_DS_ROOT_REQUIRES_CLASS_TOP;
    public static WIN32_ERROR ERROR_DS_REFUSING_FSMO_ROLES;
    public static WIN32_ERROR ERROR_DS_MISSING_FSMO_SETTINGS;
    public static WIN32_ERROR ERROR_DS_UNABLE_TO_SURRENDER_ROLES;
    public static WIN32_ERROR ERROR_DS_DRA_GENERIC;
    public static WIN32_ERROR ERROR_DS_DRA_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_DS_DRA_BUSY;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_DN;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_NC;
    public static WIN32_ERROR ERROR_DS_DRA_DN_EXISTS;
    public static WIN32_ERROR ERROR_DS_DRA_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_INCONSISTENT_DIT;
    public static WIN32_ERROR ERROR_DS_DRA_CONNECTION_FAILED;
    public static WIN32_ERROR ERROR_DS_DRA_BAD_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_DRA_OUT_OF_MEM;
    public static WIN32_ERROR ERROR_DS_DRA_MAIL_PROBLEM;
    public static WIN32_ERROR ERROR_DS_DRA_REF_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_DS_DRA_REF_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_DRA_OBJ_IS_REP_SOURCE;
    public static WIN32_ERROR ERROR_DS_DRA_DB_ERROR;
    public static WIN32_ERROR ERROR_DS_DRA_NO_REPLICA;
    public static WIN32_ERROR ERROR_DS_DRA_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_DS_DRA_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_DS_DRA_RPC_CANCELLED;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_DISABLED;
    public static WIN32_ERROR ERROR_DS_DRA_SINK_DISABLED;
    public static WIN32_ERROR ERROR_DS_DRA_NAME_COLLISION;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_REINSTALLED;
    public static WIN32_ERROR ERROR_DS_DRA_MISSING_PARENT;
    public static WIN32_ERROR ERROR_DS_DRA_PREEMPTED;
    public static WIN32_ERROR ERROR_DS_DRA_ABANDON_SYNC;
    public static WIN32_ERROR ERROR_DS_DRA_SHUTDOWN;
    public static WIN32_ERROR ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET;
    public static WIN32_ERROR ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA;
    public static WIN32_ERROR ERROR_DS_DRA_EXTN_CONNECTION_FAILED;
    public static WIN32_ERROR ERROR_DS_INSTALL_SCHEMA_MISMATCH;
    public static WIN32_ERROR ERROR_DS_DUP_LINK_ID;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_RESOLVING;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NO_MAPPING;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_DOMAIN_ONLY;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING;
    public static WIN32_ERROR ERROR_DS_CONSTRUCTED_ATT_MOD;
    public static WIN32_ERROR ERROR_DS_WRONG_OM_OBJ_CLASS;
    public static WIN32_ERROR ERROR_DS_DRA_REPL_PENDING;
    public static WIN32_ERROR ERROR_DS_DS_REQUIRED;
    public static WIN32_ERROR ERROR_DS_INVALID_LDAP_DISPLAY_NAME;
    public static WIN32_ERROR ERROR_DS_NON_BASE_SEARCH;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_ATTS;
    public static WIN32_ERROR ERROR_DS_BACKLINK_WITHOUT_LINK;
    public static WIN32_ERROR ERROR_DS_EPOCH_MISMATCH;
    public static WIN32_ERROR ERROR_DS_SRC_NAME_MISMATCH;
    public static WIN32_ERROR ERROR_DS_SRC_AND_DST_NC_IDENTICAL;
    public static WIN32_ERROR ERROR_DS_DST_NC_MISMATCH;
    public static WIN32_ERROR ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC;
    public static WIN32_ERROR ERROR_DS_SRC_GUID_MISMATCH;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_DELETED_OBJECT;
    public static WIN32_ERROR ERROR_DS_PDC_OPERATION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION;
    public static WIN32_ERROR ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS;
    public static WIN32_ERROR ERROR_DS_NC_MUST_HAVE_NC_PARENT;
    public static WIN32_ERROR ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE;
    public static WIN32_ERROR ERROR_DS_DST_DOMAIN_NOT_NATIVE;
    public static WIN32_ERROR ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_ACCOUNT_GROUP;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_RESOURCE_GROUP;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG;
    public static WIN32_ERROR ERROR_DS_NO_TREE_DELETE_ABOVE_NC;
    public static WIN32_ERROR ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE;
    public static WIN32_ERROR ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE;
    public static WIN32_ERROR ERROR_DS_SAM_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_SENSITIVE_GROUP_VIOLATION;
    public static WIN32_ERROR ERROR_DS_CANT_MOD_PRIMARYGROUPID;
    public static WIN32_ERROR ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD;
    public static WIN32_ERROR ERROR_DS_NONSAFE_SCHEMA_CHANGE;
    public static WIN32_ERROR ERROR_DS_SCHEMA_UPDATE_DISALLOWED;
    public static WIN32_ERROR ERROR_DS_CANT_CREATE_UNDER_SCHEMA;
    public static WIN32_ERROR ERROR_DS_INSTALL_NO_SRC_SCH_VERSION;
    public static WIN32_ERROR ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE;
    public static WIN32_ERROR ERROR_DS_INVALID_GROUP_TYPE;
    public static WIN32_ERROR ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER;
    public static WIN32_ERROR ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_HAVE_PRIMARY_MEMBERS;
    public static WIN32_ERROR ERROR_DS_STRING_SD_CONVERSION_FAILED;
    public static WIN32_ERROR ERROR_DS_NAMING_MASTER_GC;
    public static WIN32_ERROR ERROR_DS_DNS_LOOKUP_FAILURE;
    public static WIN32_ERROR ERROR_DS_COULDNT_UPDATE_SPNS;
    public static WIN32_ERROR ERROR_DS_CANT_RETRIEVE_SD;
    public static WIN32_ERROR ERROR_DS_KEY_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_WRONG_LINKED_ATT_SYNTAX;
    public static WIN32_ERROR ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD;
    public static WIN32_ERROR ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY;
    public static WIN32_ERROR ERROR_DS_CANT_START;
    public static WIN32_ERROR ERROR_DS_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION;
    public static WIN32_ERROR ERROR_DS_SOURCE_DOMAIN_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN;
    public static WIN32_ERROR ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER;
    public static WIN32_ERROR ERROR_DS_SRC_SID_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH;
    public static WIN32_ERROR ERROR_SAM_INIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_INFO_SHIP;
    public static WIN32_ERROR ERROR_DS_DRA_SCHEMA_CONFLICT;
    public static WIN32_ERROR ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT;
    public static WIN32_ERROR ERROR_DS_DRA_OBJ_NC_MISMATCH;
    public static WIN32_ERROR ERROR_DS_NC_STILL_HAS_DSAS;
    public static WIN32_ERROR ERROR_DS_GC_REQUIRED;
    public static WIN32_ERROR ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY;
    public static WIN32_ERROR ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS;
    public static WIN32_ERROR ERROR_DS_CANT_ADD_TO_GC;
    public static WIN32_ERROR ERROR_DS_NO_CHECKPOINT_WITH_PDC;
    public static WIN32_ERROR ERROR_DS_SOURCE_AUDITING_NOT_ENABLED;
    public static WIN32_ERROR ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC;
    public static WIN32_ERROR ERROR_DS_INVALID_NAME_FOR_SPN;
    public static WIN32_ERROR ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS;
    public static WIN32_ERROR ERROR_DS_UNICODEPWD_NOT_IN_QUOTES;
    public static WIN32_ERROR ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_MUST_BE_RUN_ON_DST_DC;
    public static WIN32_ERROR ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER;
    public static WIN32_ERROR ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ;
    public static WIN32_ERROR ERROR_DS_INIT_FAILURE_CONSOLE;
    public static WIN32_ERROR ERROR_DS_SAM_INIT_FAILURE_CONSOLE;
    public static WIN32_ERROR ERROR_DS_FOREST_VERSION_TOO_HIGH;
    public static WIN32_ERROR ERROR_DS_DOMAIN_VERSION_TOO_HIGH;
    public static WIN32_ERROR ERROR_DS_FOREST_VERSION_TOO_LOW;
    public static WIN32_ERROR ERROR_DS_DOMAIN_VERSION_TOO_LOW;
    public static WIN32_ERROR ERROR_DS_INCOMPATIBLE_VERSION;
    public static WIN32_ERROR ERROR_DS_LOW_DSA_VERSION;
    public static WIN32_ERROR ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN;
    public static WIN32_ERROR ERROR_DS_NOT_SUPPORTED_SORT_ORDER;
    public static WIN32_ERROR ERROR_DS_NAME_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4;
    public static WIN32_ERROR ERROR_DS_OUT_OF_VERSION_STORE;
    public static WIN32_ERROR ERROR_DS_INCOMPATIBLE_CONTROLS_USED;
    public static WIN32_ERROR ERROR_DS_NO_REF_DOMAIN;
    public static WIN32_ERROR ERROR_DS_RESERVED_LINK_ID;
    public static WIN32_ERROR ERROR_DS_LINK_ID_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE;
    public static WIN32_ERROR ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG;
    public static WIN32_ERROR ERROR_DS_MODIFYDN_WRONG_GRANDPARENT;
    public static WIN32_ERROR ERROR_DS_NAME_ERROR_TRUST_REFERRAL;
    public static WIN32_ERROR ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER;
    public static WIN32_ERROR ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD;
    public static WIN32_ERROR ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2;
    public static WIN32_ERROR ERROR_DS_THREAD_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_NOT_CLOSEST;
    public static WIN32_ERROR ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF;
    public static WIN32_ERROR ERROR_DS_SINGLE_USER_MODE_FAILED;
    public static WIN32_ERROR ERROR_DS_NTDSCRIPT_SYNTAX_ERROR;
    public static WIN32_ERROR ERROR_DS_NTDSCRIPT_PROCESS_ERROR;
    public static WIN32_ERROR ERROR_DS_DIFFERENT_REPL_EPOCHS;
    public static WIN32_ERROR ERROR_DS_DRS_EXTENSIONS_CHANGED;
    public static WIN32_ERROR ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR;
    public static WIN32_ERROR ERROR_DS_NO_MSDS_INTID;
    public static WIN32_ERROR ERROR_DS_DUP_MSDS_INTID;
    public static WIN32_ERROR ERROR_DS_EXISTS_IN_RDNATTID;
    public static WIN32_ERROR ERROR_DS_AUTHORIZATION_FAILED;
    public static WIN32_ERROR ERROR_DS_INVALID_SCRIPT;
    public static WIN32_ERROR ERROR_DS_REMOTE_CROSSREF_OP_FAILED;
    public static WIN32_ERROR ERROR_DS_CROSS_REF_BUSY;
    public static WIN32_ERROR ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN;
    public static WIN32_ERROR ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC;
    public static WIN32_ERROR ERROR_DS_DUPLICATE_ID_FOUND;
    public static WIN32_ERROR ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT;
    public static WIN32_ERROR ERROR_DS_GROUP_CONVERSION_ERROR;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_APP_BASIC_GROUP;
    public static WIN32_ERROR ERROR_DS_CANT_MOVE_APP_QUERY_GROUP;
    public static WIN32_ERROR ERROR_DS_ROLE_NOT_VERIFIED;
    public static WIN32_ERROR ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL;
    public static WIN32_ERROR ERROR_DS_DOMAIN_RENAME_IN_PROGRESS;
    public static WIN32_ERROR ERROR_DS_EXISTING_AD_CHILD_NC;
    public static WIN32_ERROR ERROR_DS_REPL_LIFETIME_EXCEEDED;
    public static WIN32_ERROR ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER;
    public static WIN32_ERROR ERROR_DS_LDAP_SEND_QUEUE_FULL;
    public static WIN32_ERROR ERROR_DS_DRA_OUT_SCHEDULE_WINDOW;
    public static WIN32_ERROR ERROR_DS_POLICY_NOT_KNOWN;
    public static WIN32_ERROR ERROR_NO_SITE_SETTINGS_OBJECT;
    public static WIN32_ERROR ERROR_NO_SECRETS;
    public static WIN32_ERROR ERROR_NO_WRITABLE_DC_FOUND;
    public static WIN32_ERROR ERROR_DS_NO_SERVER_OBJECT;
    public static WIN32_ERROR ERROR_DS_NO_NTDSA_OBJECT;
    public static WIN32_ERROR ERROR_DS_NON_ASQ_SEARCH;
    public static WIN32_ERROR ERROR_DS_AUDIT_FAILURE;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE;
    public static WIN32_ERROR ERROR_DS_INVALID_SEARCH_FLAG_TUPLE;
    public static WIN32_ERROR ERROR_DS_HIERARCHY_TABLE_TOO_DEEP;
    public static WIN32_ERROR ERROR_DS_DRA_CORRUPT_UTD_VECTOR;
    public static WIN32_ERROR ERROR_DS_DRA_SECRETS_DENIED;
    public static WIN32_ERROR ERROR_DS_RESERVED_MAPI_ID;
    public static WIN32_ERROR ERROR_DS_MAPI_ID_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_DS_DRA_MISSING_KRBTGT_SECRET;
    public static WIN32_ERROR ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST;
    public static WIN32_ERROR ERROR_INVALID_USER_PRINCIPAL_NAME;
    public static WIN32_ERROR ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS;
    public static WIN32_ERROR ERROR_DS_OID_NOT_FOUND;
    public static WIN32_ERROR ERROR_DS_DRA_RECYCLED_TARGET;
    public static WIN32_ERROR ERROR_DS_DISALLOWED_NC_REDIRECT;
    public static WIN32_ERROR ERROR_DS_HIGH_ADLDS_FFL;
    public static WIN32_ERROR ERROR_DS_HIGH_DSA_VERSION;
    public static WIN32_ERROR ERROR_DS_LOW_ADLDS_FFL;
    public static WIN32_ERROR ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION;
    public static WIN32_ERROR ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED;
    public static WIN32_ERROR ERROR_INCORRECT_ACCOUNT_TYPE;
    public static WIN32_ERROR ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST;
    public static WIN32_ERROR ERROR_DS_MISSING_FOREST_TRUST;
    public static WIN32_ERROR ERROR_DS_VALUE_KEY_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_WEAK_WHFBKEY_BLOCKED;
    public static WIN32_ERROR ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD;
    public static WIN32_ERROR ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED;
    public static WIN32_ERROR DNS_ERROR_RESPONSE_CODES_BASE;
    public static WIN32_ERROR DNS_ERROR_RCODE_NO_ERROR;
    public static WIN32_ERROR DNS_ERROR_MASK;
    public static WIN32_ERROR DNS_ERROR_RCODE_FORMAT_ERROR;
    public static WIN32_ERROR DNS_ERROR_RCODE_SERVER_FAILURE;
    public static WIN32_ERROR DNS_ERROR_RCODE_NAME_ERROR;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOT_IMPLEMENTED;
    public static WIN32_ERROR DNS_ERROR_RCODE_REFUSED;
    public static WIN32_ERROR DNS_ERROR_RCODE_YXDOMAIN;
    public static WIN32_ERROR DNS_ERROR_RCODE_YXRRSET;
    public static WIN32_ERROR DNS_ERROR_RCODE_NXRRSET;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOTAUTH;
    public static WIN32_ERROR DNS_ERROR_RCODE_NOTZONE;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADSIG;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADKEY;
    public static WIN32_ERROR DNS_ERROR_RCODE_BADTIME;
    public static WIN32_ERROR DNS_ERROR_RCODE_LAST;
    public static WIN32_ERROR DNS_ERROR_DNSSEC_BASE;
    public static WIN32_ERROR DNS_ERROR_KEYMASTER_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE;
    public static WIN32_ERROR DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1;
    public static WIN32_ERROR DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS;
    public static WIN32_ERROR DNS_ERROR_UNSUPPORTED_ALGORITHM;
    public static WIN32_ERROR DNS_ERROR_INVALID_KEY_SIZE;
    public static WIN32_ERROR DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE;
    public static WIN32_ERROR DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION;
    public static WIN32_ERROR DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR;
    public static WIN32_ERROR DNS_ERROR_UNEXPECTED_CNG_ERROR;
    public static WIN32_ERROR DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION;
    public static WIN32_ERROR DNS_ERROR_KSP_NOT_ACCESSIBLE;
    public static WIN32_ERROR DNS_ERROR_TOO_MANY_SKDS;
    public static WIN32_ERROR DNS_ERROR_INVALID_ROLLOVER_PERIOD;
    public static WIN32_ERROR DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_IN_PROGRESS;
    public static WIN32_ERROR DNS_ERROR_STANDBY_KEY_NOT_PRESENT;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ZSK;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_ALREADY_QUEUED;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE;
    public static WIN32_ERROR DNS_ERROR_BAD_KEYMASTER;
    public static WIN32_ERROR DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD;
    public static WIN32_ERROR DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT;
    public static WIN32_ERROR DNS_ERROR_DNSSEC_IS_DISABLED;
    public static WIN32_ERROR DNS_ERROR_INVALID_XML;
    public static WIN32_ERROR DNS_ERROR_NO_VALID_TRUST_ANCHORS;
    public static WIN32_ERROR DNS_ERROR_ROLLOVER_NOT_POKEABLE;
    public static WIN32_ERROR DNS_ERROR_NSEC3_NAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1;
    public static WIN32_ERROR DNS_ERROR_PACKET_FMT_BASE;
    public static WIN32_ERROR DNS_ERROR_BAD_PACKET;
    public static WIN32_ERROR DNS_ERROR_NO_PACKET;
    public static WIN32_ERROR DNS_ERROR_RCODE;
    public static WIN32_ERROR DNS_ERROR_UNSECURE_PACKET;
    public static WIN32_ERROR DNS_ERROR_NO_MEMORY;
    public static WIN32_ERROR DNS_ERROR_INVALID_NAME;
    public static WIN32_ERROR DNS_ERROR_INVALID_DATA;
    public static WIN32_ERROR DNS_ERROR_GENERAL_API_BASE;
    public static WIN32_ERROR DNS_ERROR_INVALID_TYPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_IP_ADDRESS;
    public static WIN32_ERROR DNS_ERROR_INVALID_PROPERTY;
    public static WIN32_ERROR DNS_ERROR_TRY_AGAIN_LATER;
    public static WIN32_ERROR DNS_ERROR_NOT_UNIQUE;
    public static WIN32_ERROR DNS_ERROR_NON_RFC_NAME;
    public static WIN32_ERROR DNS_ERROR_INVALID_NAME_CHAR;
    public static WIN32_ERROR DNS_ERROR_NUMERIC_NAME;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION;
    public static WIN32_ERROR DNS_ERROR_CANNOT_FIND_ROOT_HINTS;
    public static WIN32_ERROR DNS_ERROR_INCONSISTENT_ROOT_HINTS;
    public static WIN32_ERROR DNS_ERROR_DWORD_VALUE_TOO_SMALL;
    public static WIN32_ERROR DNS_ERROR_DWORD_VALUE_TOO_LARGE;
    public static WIN32_ERROR DNS_ERROR_BACKGROUND_LOADING;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_ON_RODC;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_UNDER_DNAME;
    public static WIN32_ERROR DNS_ERROR_DELEGATION_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_INVALID_POLICY_TABLE;
    public static WIN32_ERROR DNS_ERROR_ADDRESS_REQUIRED;
    public static WIN32_ERROR DNS_ERROR_ZONE_BASE;
    public static WIN32_ERROR DNS_ERROR_ZONE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_NO_ZONE_INFO;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONE_OPERATION;
    public static WIN32_ERROR DNS_ERROR_ZONE_CONFIGURATION_ERROR;
    public static WIN32_ERROR DNS_ERROR_ZONE_HAS_NO_SOA_RECORD;
    public static WIN32_ERROR DNS_ERROR_ZONE_HAS_NO_NS_RECORDS;
    public static WIN32_ERROR DNS_ERROR_ZONE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_ZONE_CREATION_FAILED;
    public static WIN32_ERROR DNS_ERROR_ZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_AUTOZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONE_TYPE;
    public static WIN32_ERROR DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP;
    public static WIN32_ERROR DNS_ERROR_ZONE_NOT_SECONDARY;
    public static WIN32_ERROR DNS_ERROR_NEED_SECONDARY_ADDRESSES;
    public static WIN32_ERROR DNS_ERROR_WINS_INIT_FAILED;
    public static WIN32_ERROR DNS_ERROR_NEED_WINS_SERVERS;
    public static WIN32_ERROR DNS_ERROR_NBSTAT_INIT_FAILED;
    public static WIN32_ERROR DNS_ERROR_SOA_DELETE_INVALID;
    public static WIN32_ERROR DNS_ERROR_FORWARDER_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_ZONE_REQUIRES_MASTER_IP;
    public static WIN32_ERROR DNS_ERROR_ZONE_IS_SHUTDOWN;
    public static WIN32_ERROR DNS_ERROR_ZONE_LOCKED_FOR_SIGNING;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_BASE;
    public static WIN32_ERROR DNS_ERROR_PRIMARY_REQUIRES_DATAFILE;
    public static WIN32_ERROR DNS_ERROR_INVALID_DATAFILE_NAME;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_OPEN_FAILURE;
    public static WIN32_ERROR DNS_ERROR_FILE_WRITEBACK_FAILED;
    public static WIN32_ERROR DNS_ERROR_DATAFILE_PARSING;
    public static WIN32_ERROR DNS_ERROR_DATABASE_BASE;
    public static WIN32_ERROR DNS_ERROR_RECORD_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_RECORD_FORMAT;
    public static WIN32_ERROR DNS_ERROR_NODE_CREATION_FAILED;
    public static WIN32_ERROR DNS_ERROR_UNKNOWN_RECORD_TYPE;
    public static WIN32_ERROR DNS_ERROR_RECORD_TIMED_OUT;
    public static WIN32_ERROR DNS_ERROR_NAME_NOT_IN_ZONE;
    public static WIN32_ERROR DNS_ERROR_CNAME_LOOP;
    public static WIN32_ERROR DNS_ERROR_NODE_IS_CNAME;
    public static WIN32_ERROR DNS_ERROR_CNAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT;
    public static WIN32_ERROR DNS_ERROR_RECORD_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_SECONDARY_DATA;
    public static WIN32_ERROR DNS_ERROR_NO_CREATE_CACHE_DATA;
    public static WIN32_ERROR DNS_ERROR_NAME_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DS_UNAVAILABLE;
    public static WIN32_ERROR DNS_ERROR_DS_ZONE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE;
    public static WIN32_ERROR DNS_ERROR_NODE_IS_DNAME;
    public static WIN32_ERROR DNS_ERROR_DNAME_COLLISION;
    public static WIN32_ERROR DNS_ERROR_ALIAS_LOOP;
    public static WIN32_ERROR DNS_ERROR_OPERATION_BASE;
    public static WIN32_ERROR DNS_ERROR_AXFR;
    public static WIN32_ERROR DNS_ERROR_SECURE_BASE;
    public static WIN32_ERROR DNS_ERROR_SETUP_BASE;
    public static WIN32_ERROR DNS_ERROR_NO_TCPIP;
    public static WIN32_ERROR DNS_ERROR_NO_DNS_SERVERS;
    public static WIN32_ERROR DNS_ERROR_DP_BASE;
    public static WIN32_ERROR DNS_ERROR_DP_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DP_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_DP_NOT_ENLISTED;
    public static WIN32_ERROR DNS_ERROR_DP_ALREADY_ENLISTED;
    public static WIN32_ERROR DNS_ERROR_DP_NOT_AVAILABLE;
    public static WIN32_ERROR DNS_ERROR_DP_FSMO_ERROR;
    public static WIN32_ERROR DNS_ERROR_RRL_NOT_ENABLED;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_WINDOW_SIZE;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_IPV4_PREFIX;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_IPV6_PREFIX;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_TC_RATE;
    public static WIN32_ERROR DNS_ERROR_RRL_INVALID_LEAK_RATE;
    public static WIN32_ERROR DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_VIRTUALIZATION_TREE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_ZONESCOPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_ZONESCOPE_NAME;
    public static WIN32_ERROR DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES;
    public static WIN32_ERROR DNS_ERROR_LOAD_ZONESCOPE_FAILED;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED;
    public static WIN32_ERROR DNS_ERROR_INVALID_SCOPE_NAME;
    public static WIN32_ERROR DNS_ERROR_SCOPE_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_DEFAULT_SCOPE;
    public static WIN32_ERROR DNS_ERROR_INVALID_SCOPE_OPERATION;
    public static WIN32_ERROR DNS_ERROR_SCOPE_LOCKED;
    public static WIN32_ERROR DNS_ERROR_SCOPE_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_SETTINGS;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_SUBNET_DOES_NOT_EXIST;
    public static WIN32_ERROR DNS_ERROR_SUBNET_ALREADY_EXISTS;
    public static WIN32_ERROR DNS_ERROR_POLICY_LOCKED;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_WEIGHT;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_NAME;
    public static WIN32_ERROR DNS_ERROR_POLICY_MISSING_CRITERIA;
    public static WIN32_ERROR DNS_ERROR_INVALID_CLIENT_SUBNET_NAME;
    public static WIN32_ERROR DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID;
    public static WIN32_ERROR DNS_ERROR_POLICY_SCOPE_MISSING;
    public static WIN32_ERROR DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED;
    public static WIN32_ERROR DNS_ERROR_SERVERSCOPE_IS_REFERENCED;
    public static WIN32_ERROR DNS_ERROR_ZONESCOPE_IS_REFERENCED;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE;
    public static WIN32_ERROR DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_IN_USE;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_EXISTS;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_IPSEC_MM_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_MM_POLICY_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_MM_AUTH_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_QM_POLICY_PENDING_DELETION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_BEGIN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTH_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ATTRIB_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEGOTIATION_PENDING;
    public static WIN32_ERROR ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_TIMED_OUT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SA_DELETED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SA_REAPED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_ACQUIRE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_ACQUIRE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QUEUE_DROP_MM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DROP_NO_RESPONSE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_DELAY_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_DELAY_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CRL_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_KEY_USAGE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_CERT_TYPE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PRIVATE_KEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DH_FAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HEADER;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SIGNATURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_KERBEROS_ERROR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PUBLIC_KEY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_SA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_PROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_TRANS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_KE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_HASH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_SIG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NONCE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_DELETE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_PAYLOAD;
    public static WIN32_ERROR ERROR_IPSEC_IKE_LOAD_SOFT_SA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_COOKIE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_PEER_CERT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_CRL_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_POLICY_CHANGE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NO_MM_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NOTCBPRIV;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SECLOADFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_FAILSSPINIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_FAILQUERYSSP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SRVACQFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SRVQUERYCRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_GETSPIFAIL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_FILTER;
    public static WIN32_ERROR ERROR_IPSEC_IKE_OUT_OF_MEMORY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_POLICY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNKNOWN_DOI;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SITUATION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DH_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_GROUP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_ENCRYPT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DECRYPT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_POLICY_MATCH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNSUPPORTED_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_HASH_SIZE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_AUTH_ALG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_SIG;
    public static WIN32_ERROR ERROR_IPSEC_IKE_LOAD_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_RPC_DELETE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_BENIGN_REINIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_LIMIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEGOTIATION_DISABLED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_LIMIT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_MM_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH;
    public static WIN32_ERROR ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD;
    public static WIN32_ERROR ERROR_IPSEC_IKE_DOS_COOKIE_SENT;
    public static WIN32_ERROR ERROR_IPSEC_IKE_SHUTTING_DOWN;
    public static WIN32_ERROR ERROR_IPSEC_IKE_CGA_AUTH_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PROCESS_ERR_NATOA;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INVALID_MM_FOR_QM;
    public static WIN32_ERROR ERROR_IPSEC_IKE_QM_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_IKE_TOO_MANY_FILTERS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_END;
    public static WIN32_ERROR ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL;
    public static WIN32_ERROR ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING;
    public static WIN32_ERROR ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING;
    public static WIN32_ERROR ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS;
    public static WIN32_ERROR ERROR_IPSEC_IKE_RATELIMIT_DROP;
    public static WIN32_ERROR ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY;
    public static WIN32_ERROR ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE;
    public static WIN32_ERROR ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END;
    public static WIN32_ERROR ERROR_IPSEC_BAD_SPI;
    public static WIN32_ERROR ERROR_IPSEC_SA_LIFETIME_EXPIRED;
    public static WIN32_ERROR ERROR_IPSEC_WRONG_SA;
    public static WIN32_ERROR ERROR_IPSEC_REPLAY_CHECK_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_INVALID_PACKET;
    public static WIN32_ERROR ERROR_IPSEC_INTEGRITY_CHECK_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_CLEAR_TEXT_DROP;
    public static WIN32_ERROR ERROR_IPSEC_AUTH_FIREWALL_DROP;
    public static WIN32_ERROR ERROR_IPSEC_THROTTLE_DROP;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_BLOCK;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_RECEIVED_MULTICAST;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_INVALID_PACKET;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_MAX_ENTRIES;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES;
    public static WIN32_ERROR ERROR_SXS_SECTION_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_CANT_GEN_ACTCTX;
    public static WIN32_ERROR ERROR_SXS_INVALID_ACTCTXDATA_FORMAT;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_FORMAT_ERROR;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_PARSE_ERROR;
    public static WIN32_ERROR ERROR_SXS_ACTIVATION_CONTEXT_DISABLED;
    public static WIN32_ERROR ERROR_SXS_KEY_NOT_FOUND;
    public static WIN32_ERROR ERROR_SXS_VERSION_CONFLICT;
    public static WIN32_ERROR ERROR_SXS_WRONG_SECTION_TYPE;
    public static WIN32_ERROR ERROR_SXS_THREAD_QUERIES_DISABLED;
    public static WIN32_ERROR ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET;
    public static WIN32_ERROR ERROR_SXS_UNKNOWN_ENCODING_GROUP;
    public static WIN32_ERROR ERROR_SXS_UNKNOWN_ENCODING;
    public static WIN32_ERROR ERROR_SXS_INVALID_XML_NAMESPACE_URI;
    public static WIN32_ERROR ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE;
    public static WIN32_ERROR ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_DLL_NAME;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_CLSID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_IID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_TLBID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_PROGID;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_ASSEMBLY_NAME;
    public static WIN32_ERROR ERROR_SXS_FILE_HASH_MISMATCH;
    public static WIN32_ERROR ERROR_SXS_POLICY_PARSE_ERROR;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGQUOTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_COMMENTSYNTAX;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADSTARTNAMECHAR;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADNAMECHAR;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADCHARINSTRING;
    public static WIN32_ERROR ERROR_SXS_XML_E_XMLDECLSYNTAX;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADCHARDATA;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGWHITESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_EXPECTINGTAGEND;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGSEMICOLON;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNBALANCEDPAREN;
    public static WIN32_ERROR ERROR_SXS_XML_E_INTERNALERROR;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INCOMPLETE_ENCODING;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSING_PAREN;
    public static WIN32_ERROR ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_MULTIPLE_COLONS;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_DECIMAL;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_HEXIDECIMAL;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_UNICODE;
    public static WIN32_ERROR ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTEDENDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_DUPLICATEATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_XML_E_MULTIPLEROOTS;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDATROOTLEVEL;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADXMLDECL;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGROOT;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTEDEOF;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADPEREFINSUBSET;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDSTARTTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDENDTAG;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDSTRING;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDCOMMENT;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDDECL;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNCLOSEDCDATA;
    public static WIN32_ERROR ERROR_SXS_XML_E_RESERVEDNAMESPACE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDENCODING;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALIDSWITCH;
    public static WIN32_ERROR ERROR_SXS_XML_E_BADXMLCASE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_STANDALONE;
    public static WIN32_ERROR ERROR_SXS_XML_E_UNEXPECTED_STANDALONE;
    public static WIN32_ERROR ERROR_SXS_XML_E_INVALID_VERSION;
    public static WIN32_ERROR ERROR_SXS_XML_E_MISSINGEQUALS;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_RECOVERY_FAILED;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_CATALOG_NOT_VALID;
    public static WIN32_ERROR ERROR_SXS_UNTRANSLATABLE_HRESULT;
    public static WIN32_ERROR ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING;
    public static WIN32_ERROR ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_MISSING;
    public static WIN32_ERROR ERROR_SXS_CORRUPT_ACTIVATION_STACK;
    public static WIN32_ERROR ERROR_SXS_CORRUPTION;
    public static WIN32_ERROR ERROR_SXS_EARLY_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_INVALID_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_MULTIPLE_DEACTIVATION;
    public static WIN32_ERROR ERROR_SXS_PROCESS_TERMINATION_REQUESTED;
    public static WIN32_ERROR ERROR_SXS_RELEASE_ACTIVATION_CONTEXT;
    public static WIN32_ERROR ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY;
    public static WIN32_ERROR ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE;
    public static WIN32_ERROR ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME;
    public static WIN32_ERROR ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE;
    public static WIN32_ERROR ERROR_SXS_IDENTITY_PARSE_ERROR;
    public static WIN32_ERROR ERROR_MALFORMED_SUBSTITUTION_STRING;
    public static WIN32_ERROR ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN;
    public static WIN32_ERROR ERROR_UNMAPPED_SUBSTITUTION_STRING;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_NOT_LOCKED;
    public static WIN32_ERROR ERROR_SXS_COMPONENT_STORE_CORRUPT;
    public static WIN32_ERROR ERROR_ADVANCED_INSTALLER_FAILED;
    public static WIN32_ERROR ERROR_XML_ENCODING_MISMATCH;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT;
    public static WIN32_ERROR ERROR_SXS_IDENTITIES_DIFFERENT;
    public static WIN32_ERROR ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT;
    public static WIN32_ERROR ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY;
    public static WIN32_ERROR ERROR_SXS_MANIFEST_TOO_BIG;
    public static WIN32_ERROR ERROR_SXS_SETTING_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE;
    public static WIN32_ERROR ERROR_SMI_PRIMITIVE_INSTALLER_FAILED;
    public static WIN32_ERROR ERROR_GENERIC_COMMAND_FAILED;
    public static WIN32_ERROR ERROR_SXS_FILE_HASH_MISSING;
    public static WIN32_ERROR ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS;
    public static WIN32_ERROR ERROR_EVT_INVALID_CHANNEL_PATH;
    public static WIN32_ERROR ERROR_EVT_INVALID_QUERY;
    public static WIN32_ERROR ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_INVALID_PUBLISHER_NAME;
    public static WIN32_ERROR ERROR_EVT_INVALID_EVENT_DATA;
    public static WIN32_ERROR ERROR_EVT_CHANNEL_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MALFORMED_XML_TEXT;
    public static WIN32_ERROR ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL;
    public static WIN32_ERROR ERROR_EVT_CONFIGURATION_ERROR;
    public static WIN32_ERROR ERROR_EVT_QUERY_RESULT_STALE;
    public static WIN32_ERROR ERROR_EVT_QUERY_RESULT_INVALID_POSITION;
    public static WIN32_ERROR ERROR_EVT_NON_VALIDATING_MSXML;
    public static WIN32_ERROR ERROR_EVT_FILTER_ALREADYSCOPED;
    public static WIN32_ERROR ERROR_EVT_FILTER_NOTELTSET;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVARG;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVTEST;
    public static WIN32_ERROR ERROR_EVT_FILTER_INVTYPE;
    public static WIN32_ERROR ERROR_EVT_FILTER_PARSEERR;
    public static WIN32_ERROR ERROR_EVT_FILTER_UNSUPPORTEDOP;
    public static WIN32_ERROR ERROR_EVT_FILTER_UNEXPECTEDTOKEN;
    public static WIN32_ERROR ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL;
    public static WIN32_ERROR ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE;
    public static WIN32_ERROR ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE;
    public static WIN32_ERROR ERROR_EVT_CHANNEL_CANNOT_ACTIVATE;
    public static WIN32_ERROR ERROR_EVT_FILTER_TOO_COMPLEX;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_ID_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_UNRESOLVED_VALUE_INSERT;
    public static WIN32_ERROR ERROR_EVT_UNRESOLVED_PARAMETER_INSERT;
    public static WIN32_ERROR ERROR_EVT_MAX_INSERTS_REACHED;
    public static WIN32_ERROR ERROR_EVT_EVENT_DEFINITION_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND;
    public static WIN32_ERROR ERROR_EVT_VERSION_TOO_OLD;
    public static WIN32_ERROR ERROR_EVT_VERSION_TOO_NEW;
    public static WIN32_ERROR ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY;
    public static WIN32_ERROR ERROR_EVT_PUBLISHER_DISABLED;
    public static WIN32_ERROR ERROR_EVT_FILTER_OUT_OF_RANGE;
    public static WIN32_ERROR ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE;
    public static WIN32_ERROR ERROR_EC_LOG_DISABLED;
    public static WIN32_ERROR ERROR_EC_CIRCULAR_FORWARDING;
    public static WIN32_ERROR ERROR_EC_CREDSTORE_FULL;
    public static WIN32_ERROR ERROR_EC_CRED_NOT_FOUND;
    public static WIN32_ERROR ERROR_EC_NO_ACTIVE_CHANNEL;
    public static WIN32_ERROR ERROR_MUI_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MUI_INVALID_FILE;
    public static WIN32_ERROR ERROR_MUI_INVALID_RC_CONFIG;
    public static WIN32_ERROR ERROR_MUI_INVALID_LOCALE_NAME;
    public static WIN32_ERROR ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME;
    public static WIN32_ERROR ERROR_MUI_FILE_NOT_LOADED;
    public static WIN32_ERROR ERROR_RESOURCE_ENUM_USER_STOP;
    public static WIN32_ERROR ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME;
    public static WIN32_ERROR ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE;
    public static WIN32_ERROR ERROR_MRM_INVALID_PRICONFIG;
    public static WIN32_ERROR ERROR_MRM_INVALID_FILE_TYPE;
    public static WIN32_ERROR ERROR_MRM_UNKNOWN_QUALIFIER;
    public static WIN32_ERROR ERROR_MRM_INVALID_QUALIFIER_VALUE;
    public static WIN32_ERROR ERROR_MRM_NO_CANDIDATE;
    public static WIN32_ERROR ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE;
    public static WIN32_ERROR ERROR_MRM_RESOURCE_TYPE_MISMATCH;
    public static WIN32_ERROR ERROR_MRM_DUPLICATE_MAP_NAME;
    public static WIN32_ERROR ERROR_MRM_DUPLICATE_ENTRY;
    public static WIN32_ERROR ERROR_MRM_INVALID_RESOURCE_IDENTIFIER;
    public static WIN32_ERROR ERROR_MRM_FILEPATH_TOO_LONG;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE;
    public static WIN32_ERROR ERROR_MRM_INVALID_PRI_FILE;
    public static WIN32_ERROR ERROR_MRM_NAMED_RESOURCE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_MAP_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_PROFILE_TYPE;
    public static WIN32_ERROR ERROR_MRM_INVALID_QUALIFIER_OPERATOR;
    public static WIN32_ERROR ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE;
    public static WIN32_ERROR ERROR_MRM_AUTOMERGE_ENABLED;
    public static WIN32_ERROR ERROR_MRM_TOO_MANY_RESOURCES;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE;
    public static WIN32_ERROR ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE;
    public static WIN32_ERROR ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD;
    public static WIN32_ERROR ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST;
    public static WIN32_ERROR ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT;
    public static WIN32_ERROR ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE;
    public static WIN32_ERROR ERROR_MRM_GENERATION_COUNT_MISMATCH;
    public static WIN32_ERROR ERROR_PRI_MERGE_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_PRI_MERGE_MISSING_SCHEMA;
    public static WIN32_ERROR ERROR_PRI_MERGE_LOAD_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_ADD_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_WRITE_FILE_FAILED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED;
    public static WIN32_ERROR ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED;
    public static WIN32_ERROR ERROR_PRI_MERGE_INVALID_FILE_NAME;
    public static WIN32_ERROR ERROR_MRM_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_MRM_MISSING_DEFAULT_LANGUAGE;
    public static WIN32_ERROR ERROR_MRM_SCOPE_ITEM_CONFLICT;
    public static WIN32_ERROR ERROR_MCA_INVALID_CAPABILITIES_STRING;
    public static WIN32_ERROR ERROR_MCA_INVALID_VCP_VERSION;
    public static WIN32_ERROR ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION;
    public static WIN32_ERROR ERROR_MCA_MCCS_VERSION_MISMATCH;
    public static WIN32_ERROR ERROR_MCA_UNSUPPORTED_MCCS_VERSION;
    public static WIN32_ERROR ERROR_MCA_INTERNAL_ERROR;
    public static WIN32_ERROR ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED;
    public static WIN32_ERROR ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE;
    public static WIN32_ERROR ERROR_AMBIGUOUS_SYSTEM_DEVICE;
    public static WIN32_ERROR ERROR_SYSTEM_DEVICE_NOT_FOUND;
    public static WIN32_ERROR ERROR_HASH_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_HASH_NOT_PRESENT;
    public static WIN32_ERROR ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED;
    public static WIN32_ERROR ERROR_GPIO_CLIENT_INFORMATION_INVALID;
    public static WIN32_ERROR ERROR_GPIO_VERSION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_GPIO_INVALID_REGISTRATION_PACKET;
    public static WIN32_ERROR ERROR_GPIO_OPERATION_DENIED;
    public static WIN32_ERROR ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE;
    public static WIN32_ERROR ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED;
    public static WIN32_ERROR ERROR_CANNOT_SWITCH_RUNLEVEL;
    public static WIN32_ERROR ERROR_INVALID_RUNLEVEL_SETTING;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_TIMEOUT;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT;
    public static WIN32_ERROR ERROR_RUNLEVEL_SWITCH_IN_PROGRESS;
    public static WIN32_ERROR ERROR_SERVICES_FAILED_AUTOSTART;
    public static WIN32_ERROR ERROR_COM_TASK_STOP_PENDING;
    public static WIN32_ERROR ERROR_INSTALL_OPEN_PACKAGE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_NOT_FOUND;
    public static WIN32_ERROR ERROR_INSTALL_INVALID_PACKAGE;
    public static WIN32_ERROR ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_OUT_OF_DISK_SPACE;
    public static WIN32_ERROR ERROR_INSTALL_NETWORK_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_REGISTRATION_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_DEREGISTRATION_FAILURE;
    public static WIN32_ERROR ERROR_INSTALL_CANCEL;
    public static WIN32_ERROR ERROR_INSTALL_FAILED;
    public static WIN32_ERROR ERROR_REMOVE_FAILED;
    public static WIN32_ERROR ERROR_PACKAGE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_NEEDS_REMEDIATION;
    public static WIN32_ERROR ERROR_INSTALL_PREREQUISITE_FAILED;
    public static WIN32_ERROR ERROR_PACKAGE_REPOSITORY_CORRUPTED;
    public static WIN32_ERROR ERROR_INSTALL_POLICY_FAILURE;
    public static WIN32_ERROR ERROR_PACKAGE_UPDATING;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_POLICY;
    public static WIN32_ERROR ERROR_PACKAGES_IN_USE;
    public static WIN32_ERROR ERROR_RECOVERY_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_INVALID_STAGED_SIGNATURE;
    public static WIN32_ERROR ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_PACKAGE_DOWNGRADE;
    public static WIN32_ERROR ERROR_SYSTEM_NEEDS_REMEDIATION;
    public static WIN32_ERROR ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN;
    public static WIN32_ERROR ERROR_RESILIENCY_FILE_CORRUPT;
    public static WIN32_ERROR ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING;
    public static WIN32_ERROR ERROR_PACKAGE_MOVE_FAILED;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_NOT_EMPTY;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_OFFLINE;
    public static WIN32_ERROR ERROR_INSTALL_VOLUME_CORRUPT;
    public static WIN32_ERROR ERROR_NEEDS_REGISTRATION;
    public static WIN32_ERROR ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE;
    public static WIN32_ERROR ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE;
    public static WIN32_ERROR ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM;
    public static WIN32_ERROR ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE;
    public static WIN32_ERROR ERROR_PACKAGE_STAGING_ONHOLD;
    public static WIN32_ERROR ERROR_INSTALL_INVALID_RELATED_SET_UPDATE;
    public static WIN32_ERROR ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF;
    public static WIN32_ERROR ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED;
    public static WIN32_ERROR ERROR_PACKAGES_REPUTATION_CHECK_FAILED;
    public static WIN32_ERROR ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT;
    public static WIN32_ERROR ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_APPINSTALLER_ACTIVATION_BLOCKED;
    public static WIN32_ERROR ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_APPX_RAW_DATA_WRITE_FAILED;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE;
    public static WIN32_ERROR ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY;
    public static WIN32_ERROR ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY;
    public static WIN32_ERROR ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER;
    public static WIN32_ERROR ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED;
    public static WIN32_ERROR ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE;
    public static WIN32_ERROR ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES;
    public static WIN32_ERROR ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST;
    public static WIN32_ERROR ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT;
    public static WIN32_ERROR ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
    public static WIN32_ERROR ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE;
    public static WIN32_ERROR ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY;
    public static WIN32_ERROR ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS;
    public static WIN32_ERROR ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED;
    public static WIN32_ERROR ERROR_MACHINE_SCOPE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE;
    public static WIN32_ERROR ERROR_PACKAGE_NOT_REGISTERED_FOR_USER;
    public static WIN32_ERROR ERROR_PACKAGE_NAME_MISMATCH;
    public static WIN32_ERROR ERROR_APPINSTALLER_URI_IN_USE;
    public static WIN32_ERROR ERROR_APPINSTALLER_IS_MANAGED_BY_SYSTEM;
    public static WIN32_ERROR APPMODEL_ERROR_NO_PACKAGE;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT;
    public static WIN32_ERROR APPMODEL_ERROR_NO_APPLICATION;
    public static WIN32_ERROR APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED;
    public static WIN32_ERROR APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID;
    public static WIN32_ERROR APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE;
    public static WIN32_ERROR APPMODEL_ERROR_NO_MUTABLE_DIRECTORY;
    public static WIN32_ERROR ERROR_STATE_LOAD_STORE_FAILED;
    public static WIN32_ERROR ERROR_STATE_GET_VERSION_FAILED;
    public static WIN32_ERROR ERROR_STATE_SET_VERSION_FAILED;
    public static WIN32_ERROR ERROR_STATE_STRUCTURED_RESET_FAILED;
    public static WIN32_ERROR ERROR_STATE_OPEN_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_CREATE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_DELETE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_READ_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_WRITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_DELETE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_QUERY_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_READ_COMPOSITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED;
    public static WIN32_ERROR ERROR_STATE_ENUMERATE_CONTAINER_FAILED;
    public static WIN32_ERROR ERROR_STATE_ENUMERATE_SETTINGS_FAILED;
    public static WIN32_ERROR ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_API_UNAVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_INTERFACE_CLOSING;
    public static WIN32_ERROR ERROR_NDIS_BAD_VERSION;
    public static WIN32_ERROR ERROR_NDIS_BAD_CHARACTERISTICS;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_OPEN_FAILED;
    public static WIN32_ERROR ERROR_NDIS_DEVICE_FAILED;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_FULL;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_EXISTS;
    public static WIN32_ERROR ERROR_NDIS_MULTICAST_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_REQUEST_ABORTED;
    public static WIN32_ERROR ERROR_NDIS_RESET_IN_PROGRESS;
    public static WIN32_ERROR ERROR_NDIS_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PACKET;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_NOT_READY;
    public static WIN32_ERROR ERROR_NDIS_INVALID_LENGTH;
    public static WIN32_ERROR ERROR_NDIS_INVALID_DATA;
    public static WIN32_ERROR ERROR_NDIS_BUFFER_TOO_SHORT;
    public static WIN32_ERROR ERROR_NDIS_INVALID_OID;
    public static WIN32_ERROR ERROR_NDIS_ADAPTER_REMOVED;
    public static WIN32_ERROR ERROR_NDIS_UNSUPPORTED_MEDIA;
    public static WIN32_ERROR ERROR_NDIS_GROUP_ADDRESS_IN_USE;
    public static WIN32_ERROR ERROR_NDIS_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_ERROR_READING_FILE;
    public static WIN32_ERROR ERROR_NDIS_ALREADY_MAPPED;
    public static WIN32_ERROR ERROR_NDIS_RESOURCE_CONFLICT;
    public static WIN32_ERROR ERROR_NDIS_MEDIA_DISCONNECTED;
    public static WIN32_ERROR ERROR_NDIS_INVALID_ADDRESS;
    public static WIN32_ERROR ERROR_NDIS_INVALID_DEVICE_REQUEST;
    public static WIN32_ERROR ERROR_NDIS_PAUSED;
    public static WIN32_ERROR ERROR_NDIS_INTERFACE_NOT_FOUND;
    public static WIN32_ERROR ERROR_NDIS_UNSUPPORTED_REVISION;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PORT;
    public static WIN32_ERROR ERROR_NDIS_INVALID_PORT_STATE;
    public static WIN32_ERROR ERROR_NDIS_LOW_POWER_STATE;
    public static WIN32_ERROR ERROR_NDIS_REINIT_REQUIRED;
    public static WIN32_ERROR ERROR_NDIS_NO_QUEUES;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED;
    public static WIN32_ERROR ERROR_NDIS_DOT11_MEDIA_IN_USE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_POWER_STATE_INVALID;
    public static WIN32_ERROR ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL;
    public static WIN32_ERROR ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED;
    public static WIN32_ERROR ERROR_NDIS_INDICATION_REQUIRED;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_POLICY;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED;
    public static WIN32_ERROR ERROR_NDIS_OFFLOAD_PATH_REJECTED;
    public static WIN32_ERROR ERROR_HV_INVALID_HYPERCALL_CODE;
    public static WIN32_ERROR ERROR_HV_INVALID_HYPERCALL_INPUT;
    public static WIN32_ERROR ERROR_HV_INVALID_ALIGNMENT;
    public static WIN32_ERROR ERROR_HV_INVALID_PARAMETER;
    public static WIN32_ERROR ERROR_HV_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_HV_INVALID_PARTITION_STATE;
    public static WIN32_ERROR ERROR_HV_OPERATION_DENIED;
    public static WIN32_ERROR ERROR_HV_UNKNOWN_PROPERTY;
    public static WIN32_ERROR ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_MEMORY;
    public static WIN32_ERROR ERROR_HV_PARTITION_TOO_DEEP;
    public static WIN32_ERROR ERROR_HV_INVALID_PARTITION_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_VP_INDEX;
    public static WIN32_ERROR ERROR_HV_INVALID_PORT_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_CONNECTION_ID;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_BUFFERS;
    public static WIN32_ERROR ERROR_HV_NOT_ACKNOWLEDGED;
    public static WIN32_ERROR ERROR_HV_INVALID_VP_STATE;
    public static WIN32_ERROR ERROR_HV_ACKNOWLEDGED;
    public static WIN32_ERROR ERROR_HV_INVALID_SAVE_RESTORE_STATE;
    public static WIN32_ERROR ERROR_HV_INVALID_SYNIC_STATE;
    public static WIN32_ERROR ERROR_HV_OBJECT_IN_USE;
    public static WIN32_ERROR ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO;
    public static WIN32_ERROR ERROR_HV_NO_DATA;
    public static WIN32_ERROR ERROR_HV_INACTIVE;
    public static WIN32_ERROR ERROR_HV_NO_RESOURCES;
    public static WIN32_ERROR ERROR_HV_FEATURE_UNAVAILABLE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_BUFFER;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS;
    public static WIN32_ERROR ERROR_HV_CPUID_FEATURE_VALIDATION;
    public static WIN32_ERROR ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION;
    public static WIN32_ERROR ERROR_HV_PROCESSOR_STARTUP_TIMEOUT;
    public static WIN32_ERROR ERROR_HV_SMX_ENABLED;
    public static WIN32_ERROR ERROR_HV_INVALID_LP_INDEX;
    public static WIN32_ERROR ERROR_HV_INVALID_REGISTER_VALUE;
    public static WIN32_ERROR ERROR_HV_INVALID_VTL_STATE;
    public static WIN32_ERROR ERROR_HV_NX_NOT_DETECTED;
    public static WIN32_ERROR ERROR_HV_INVALID_DEVICE_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_DEVICE_STATE;
    public static WIN32_ERROR ERROR_HV_PENDING_PAGE_REQUESTS;
    public static WIN32_ERROR ERROR_HV_PAGE_REQUEST_INVALID;
    public static WIN32_ERROR ERROR_HV_INVALID_CPU_GROUP_ID;
    public static WIN32_ERROR ERROR_HV_INVALID_CPU_GROUP_STATE;
    public static WIN32_ERROR ERROR_HV_OPERATION_FAILED;
    public static WIN32_ERROR ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_ROOT_MEMORY;
    public static WIN32_ERROR ERROR_HV_EVENT_BUFFER_ALREADY_FREED;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY;
    public static WIN32_ERROR ERROR_HV_DEVICE_NOT_IN_DOMAIN;
    public static WIN32_ERROR ERROR_HV_NESTED_VM_EXIT;
    public static WIN32_ERROR ERROR_HV_MSR_ACCESS_FAILED;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_ROOT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY_MIRRORING;
    public static WIN32_ERROR ERROR_HV_NOT_PRESENT;
    public static WIN32_ERROR ERROR_VID_DUPLICATE_HANDLER;
    public static WIN32_ERROR ERROR_VID_TOO_MANY_HANDLERS;
    public static WIN32_ERROR ERROR_VID_QUEUE_FULL;
    public static WIN32_ERROR ERROR_VID_HANDLER_NOT_PRESENT;
    public static WIN32_ERROR ERROR_VID_INVALID_OBJECT_NAME;
    public static WIN32_ERROR ERROR_VID_PARTITION_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG;
    public static WIN32_ERROR ERROR_VID_PARTITION_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VID_PARTITION_DOES_NOT_EXIST;
    public static WIN32_ERROR ERROR_VID_PARTITION_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT;
    public static WIN32_ERROR ERROR_VID_MB_STILL_REFERENCED;
    public static WIN32_ERROR ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED;
    public static WIN32_ERROR ERROR_VID_INVALID_NUMA_SETTINGS;
    public static WIN32_ERROR ERROR_VID_INVALID_NUMA_NODE_INDEX;
    public static WIN32_ERROR ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED;
    public static WIN32_ERROR ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE;
    public static WIN32_ERROR ERROR_VID_PAGE_RANGE_OVERFLOW;
    public static WIN32_ERROR ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE;
    public static WIN32_ERROR ERROR_VID_INVALID_GPA_RANGE_HANDLE;
    public static WIN32_ERROR ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE;
    public static WIN32_ERROR ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED;
    public static WIN32_ERROR ERROR_VID_INVALID_PPM_HANDLE;
    public static WIN32_ERROR ERROR_VID_MBPS_ARE_LOCKED;
    public static WIN32_ERROR ERROR_VID_MESSAGE_QUEUE_CLOSED;
    public static WIN32_ERROR ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED;
    public static WIN32_ERROR ERROR_VID_STOP_PENDING;
    public static WIN32_ERROR ERROR_VID_INVALID_PROCESSOR_STATE;
    public static WIN32_ERROR ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT;
    public static WIN32_ERROR ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED;
    public static WIN32_ERROR ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET;
    public static WIN32_ERROR ERROR_VID_MMIO_RANGE_DESTROYED;
    public static WIN32_ERROR ERROR_VID_INVALID_CHILD_GPA_PAGE_SET;
    public static WIN32_ERROR ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED;
    public static WIN32_ERROR ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL;
    public static WIN32_ERROR ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE;
    public static WIN32_ERROR ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_CORRUPT;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM;
    public static WIN32_ERROR ERROR_VID_SAVED_STATE_INCOMPATIBLE;
    public static WIN32_ERROR ERROR_VID_VTL_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_RESERVE;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_PHYSICAL_BUFFER;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_HV_DEPOSIT;
    public static WIN32_ERROR ERROR_VID_MEMORY_TYPE_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VID_INSUFFICIENT_RESOURCES_WITHDRAW;
    public static WIN32_ERROR ERROR_VID_PROCESS_ALREADY_SET;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TERMINATED_DURING_START;
    public static WIN32_ERROR ERROR_VMCOMPUTE_IMAGE_MISMATCH;
    public static WIN32_ERROR ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_OPERATION_PENDING;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_STATE;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNEXPECTED_EXIT;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TERMINATED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_CONNECT_FAILED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_TIMEOUT;
    public static WIN32_ERROR ERROR_VMCOMPUTE_CONNECTION_CLOSED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNKNOWN_MESSAGE;
    public static WIN32_ERROR ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_JSON;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS;
    public static WIN32_ERROR ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED;
    public static WIN32_ERROR ERROR_VMCOMPUTE_PROTOCOL_ERROR;
    public static WIN32_ERROR ERROR_VMCOMPUTE_INVALID_LAYER;
    public static WIN32_ERROR ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED;
    public static WIN32_ERROR ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND;
    public static WIN32_ERROR ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED;
    public static WIN32_ERROR ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND;
    public static WIN32_ERROR ERROR_VSMB_SAVED_STATE_CORRUPT;
    public static WIN32_ERROR ERROR_VOLMGR_INCOMPLETE_REGENERATION;
    public static WIN32_ERROR ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION;
    public static WIN32_ERROR ERROR_VOLMGR_DATABASE_FULL;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_DYNAMIC;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAST_VOTER;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_NOT_EMPTY;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_REVECTORING_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_SET_NOT_CONTAINED;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS;
    public static WIN32_ERROR ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES;
    public static WIN32_ERROR ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_ALREADY_USED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION;
    public static WIN32_ERROR ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH;
    public static WIN32_ERROR ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_INDEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_NOT_DETACHED;
    public static WIN32_ERROR ERROR_VOLMGR_MEMBER_REGENERATING;
    public static WIN32_ERROR ERROR_VOLMGR_ALL_DISKS_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_NO_REGISTERED_USERS;
    public static WIN32_ERROR ERROR_VOLMGR_NO_SUCH_USER;
    public static WIN32_ERROR ERROR_VOLMGR_NOTIFICATION_RESET;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_NAME_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_HAS_QUORUM;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_WITHOUT_QUORUM;
    public static WIN32_ERROR ERROR_VOLMGR_PARTITION_STYLE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PARTITION_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_IN_SYNC;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_INDEX_DUPLICATE;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_INDEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_LAST_ACTIVE;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_MISSING;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_REGENERATING;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_TYPE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_RAID5;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_SIMPLE;
    public static WIN32_ERROR ERROR_VOLMGR_STRUCTURE_SIZE_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS;
    public static WIN32_ERROR ERROR_VOLMGR_TRANSACTION_IN_PROGRESS;
    public static WIN32_ERROR ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_ID_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_LENGTH_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_NOT_MIRRORED;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_NOT_RETAINED;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_RETAINED;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE;
    public static WIN32_ERROR ERROR_VOLMGR_BAD_BOOT_DISK;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_OFFLINE;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_CONFIG_ONLINE;
    public static WIN32_ERROR ERROR_VOLMGR_NOT_PRIMARY_PACK;
    public static WIN32_ERROR ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_VOLUME_MIRRORED;
    public static WIN32_ERROR ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED;
    public static WIN32_ERROR ERROR_VOLMGR_NO_VALID_LOG_COPIES;
    public static WIN32_ERROR ERROR_VOLMGR_PRIMARY_PACK_PRESENT;
    public static WIN32_ERROR ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID;
    public static WIN32_ERROR ERROR_VOLMGR_MIRROR_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_VOLMGR_RAID5_NOT_SUPPORTED;
    public static WIN32_ERROR ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED;
    public static WIN32_ERROR ERROR_BCD_TOO_MANY_ELEMENTS;
    public static WIN32_ERROR ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_MISSING;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_DRIVE_FOOTER_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_FORMAT_UNKNOWN;
    public static WIN32_ERROR ERROR_VHD_FORMAT_UNSUPPORTED_VERSION;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION;
    public static WIN32_ERROR ERROR_VHD_SPARSE_HEADER_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_BLOCK_ALLOCATION_FAILURE;
    public static WIN32_ERROR ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT;
    public static WIN32_ERROR ERROR_VHD_INVALID_BLOCK_SIZE;
    public static WIN32_ERROR ERROR_VHD_BITMAP_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_PARENT_VHD_NOT_FOUND;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_ID_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_METADATA_READ_FAILURE;
    public static WIN32_ERROR ERROR_VHD_METADATA_WRITE_FAILURE;
    public static WIN32_ERROR ERROR_VHD_INVALID_SIZE;
    public static WIN32_ERROR ERROR_VHD_INVALID_FILE_SIZE;
    public static WIN32_ERROR ERROR_VIRTDISK_PROVIDER_NOT_FOUND;
    public static WIN32_ERROR ERROR_VIRTDISK_NOT_VIRTUAL_DISK;
    public static WIN32_ERROR ERROR_VHD_PARENT_VHD_ACCESS_DENIED;
    public static WIN32_ERROR ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH;
    public static WIN32_ERROR ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED;
    public static WIN32_ERROR ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT;
    public static WIN32_ERROR ERROR_VIRTUAL_DISK_LIMITATION;
    public static WIN32_ERROR ERROR_VHD_INVALID_TYPE;
    public static WIN32_ERROR ERROR_VHD_INVALID_STATE;
    public static WIN32_ERROR ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE;
    public static WIN32_ERROR ERROR_VIRTDISK_DISK_ALREADY_OWNED;
    public static WIN32_ERROR ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE;
    public static WIN32_ERROR ERROR_CTLOG_TRACKING_NOT_INITIALIZED;
    public static WIN32_ERROR ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE;
    public static WIN32_ERROR ERROR_CTLOG_VHD_CHANGED_OFFLINE;
    public static WIN32_ERROR ERROR_CTLOG_INVALID_TRACKING_STATE;
    public static WIN32_ERROR ERROR_CTLOG_INCONSISTENT_TRACKING_FILE;
    public static WIN32_ERROR ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA;
    public static WIN32_ERROR ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE;
    public static WIN32_ERROR ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE;
    public static WIN32_ERROR ERROR_VHD_METADATA_FULL;
    public static WIN32_ERROR ERROR_VHD_INVALID_CHANGE_TRACKING_ID;
    public static WIN32_ERROR ERROR_VHD_CHANGE_TRACKING_DISABLED;
    public static WIN32_ERROR ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION;
    public static WIN32_ERROR ERROR_QUERY_STORAGE_ERROR;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Foundation.WPARAM : ValueType {
    internal UIntPtr Value;
    public ushort HIWORD { get; }
    public short SIGNEDHIWORD { get; }
    public ushort LOWORD { get; }
    public short SIGNEDLOWORD { get; }
    internal WPARAM(UIntPtr value);
    public static Void* op_Implicit(WPARAM value);
    public static WPARAM op_Implicit(Void* value);
    public static HWND op_Explicit(WPARAM value);
    public static WPARAM op_Explicit(HWND value);
    public static HDC op_Explicit(WPARAM value);
    public static WPARAM op_Explicit(HDC value);
    public static WPARAM op_Explicit(HFONT value);
    public static BOOL op_Explicit(WPARAM value);
    public static WPARAM op_Explicit(BOOL value);
    public static int op_Explicit(WPARAM value);
    public static UInt32 op_Explicit(WPARAM value);
    public static IntPtr op_Explicit(WPARAM value);
    public static WPARAM op_Explicit(int value);
    public static WPARAM op_Explicit(char value);
    public static WPARAM op_Explicit(Color value);
    public ushort get_HIWORD();
    public short get_SIGNEDHIWORD();
    public ushort get_LOWORD();
    public short get_SIGNEDLOWORD();
    public static WPARAM MAKEWPARAM(int low, int high);
    public static UIntPtr op_Implicit(WPARAM value);
    public static WPARAM op_Implicit(UIntPtr value);
    public static bool op_Equality(WPARAM left, WPARAM right);
    public static bool op_Inequality(WPARAM left, WPARAM right);
    public sealed virtual bool Equals(WPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
internal class Windows.Win32.GetDcScope : ValueType {
    [CompilerGeneratedAttribute]
private HDC <HDC>k__BackingField;
    [CompilerGeneratedAttribute]
private HWND <HWND>k__BackingField;
    public HDC HDC { get; }
    public HWND HWND { get; }
    public static GetDcScope ScreenDC { get; }
    public bool IsNull { get; }
    public GetDcScope(HWND hwnd);
    public GetDcScope(HWND hwnd, HRGN hrgnClip, GET_DCX_FLAGS flags);
    [CompilerGeneratedAttribute]
public HDC get_HDC();
    [CompilerGeneratedAttribute]
public HWND get_HWND();
    public static GetDcScope get_ScreenDC();
    public bool get_IsNull();
    public static IntPtr op_Implicit(GetDcScope& scope);
    public static HDC op_Implicit(GetDcScope& scope);
    public void Dispose();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Globalization.HIMC : ValueType {
    internal IntPtr Value;
    internal HIMC(IntPtr value);
    public static IntPtr op_Implicit(HIMC value);
    public static HIMC op_Explicit(IntPtr value);
    public static bool op_Equality(HIMC left, HIMC right);
    public static bool op_Inequality(HIMC left, HIMC right);
    public sealed virtual bool Equals(HIMC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Globalization.MULTI_BYTE_TO_WIDE_CHAR_FLAGS : Enum {
    public UInt32 value__;
    public static MULTI_BYTE_TO_WIDE_CHAR_FLAGS MB_COMPOSITE;
    public static MULTI_BYTE_TO_WIDE_CHAR_FLAGS MB_ERR_INVALID_CHARS;
    public static MULTI_BYTE_TO_WIDE_CHAR_FLAGS MB_PRECOMPOSED;
    public static MULTI_BYTE_TO_WIDE_CHAR_FLAGS MB_USEGLYPHCHARS;
}
internal class Windows.Win32.Graphics.Gdi.__HGDIOBJ_1 : ValueType {
    private static int SpanLength;
    internal HGDIOBJ _0;
    internal int Length { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    [UnscopedRefAttribute]
internal Span`1<HGDIOBJ> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<HGDIOBJ> AsReadOnlySpan();
    public static __HGDIOBJ_1 op_Implicit(ReadOnlySpan`1<HGDIOBJ> value);
}
internal class Windows.Win32.Graphics.Gdi.__PALETTEENTRY_1 : ValueType {
    private static int SpanLength;
    internal PALETTEENTRY _0;
    internal int Length { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    [UnscopedRefAttribute]
internal Span`1<PALETTEENTRY> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<PALETTEENTRY> AsReadOnlySpan();
    public static __PALETTEENTRY_1 op_Implicit(ReadOnlySpan`1<PALETTEENTRY> value);
}
internal class Windows.Win32.Graphics.Gdi.__RGBQUAD_1 : ValueType {
    private static int SpanLength;
    internal RGBQUAD _0;
    internal int Length { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    [UnscopedRefAttribute]
internal Span`1<RGBQUAD> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<RGBQUAD> AsReadOnlySpan();
    public static __RGBQUAD_1 op_Implicit(ReadOnlySpan`1<RGBQUAD> value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.BACKGROUND_MODE : Enum {
    public UInt32 value__;
    public static BACKGROUND_MODE OPAQUE;
    public static BACKGROUND_MODE TRANSPARENT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.BI_COMPRESSION : Enum {
    public UInt32 value__;
    public static BI_COMPRESSION BI_RGB;
    public static BI_COMPRESSION BI_RLE8;
    public static BI_COMPRESSION BI_RLE4;
    public static BI_COMPRESSION BI_BITFIELDS;
    public static BI_COMPRESSION BI_JPEG;
    public static BI_COMPRESSION BI_PNG;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.BITMAP : ValueType {
    internal int bmType;
    internal int bmWidth;
    internal int bmHeight;
    internal int bmWidthBytes;
    internal ushort bmPlanes;
    internal ushort bmBitsPixel;
    internal Void* bmBits;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.BITMAPINFO : ValueType {
    internal BITMAPINFOHEADER bmiHeader;
    internal __RGBQUAD_1 bmiColors;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER : ValueType {
    internal UInt32 biSize;
    internal int biWidth;
    internal int biHeight;
    internal ushort biPlanes;
    internal ushort biBitCount;
    internal UInt32 biCompression;
    internal UInt32 biSizeImage;
    internal int biXPelsPerMeter;
    internal int biYPelsPerMeter;
    internal UInt32 biClrUsed;
    internal UInt32 biClrImportant;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.BRUSH_STYLE : Enum {
    public UInt32 value__;
    public static BRUSH_STYLE BS_SOLID;
    public static BRUSH_STYLE BS_NULL;
    public static BRUSH_STYLE BS_HOLLOW;
    public static BRUSH_STYLE BS_HATCHED;
    public static BRUSH_STYLE BS_PATTERN;
    public static BRUSH_STYLE BS_INDEXED;
    public static BRUSH_STYLE BS_DIBPATTERN;
    public static BRUSH_STYLE BS_DIBPATTERNPT;
    public static BRUSH_STYLE BS_PATTERN8X8;
    public static BRUSH_STYLE BS_DIBPATTERN8X8;
    public static BRUSH_STYLE BS_MONOPATTERN;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_COLLATE : Enum {
    public short value__;
    public static DEVMODE_COLLATE DMCOLLATE_FALSE;
    public static DEVMODE_COLLATE DMCOLLATE_TRUE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_COLOR : Enum {
    public short value__;
    public static DEVMODE_COLOR DMCOLOR_MONOCHROME;
    public static DEVMODE_COLOR DMCOLOR_COLOR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_DISPLAY_FIXED_OUTPUT : Enum {
    public UInt32 value__;
    public static DEVMODE_DISPLAY_FIXED_OUTPUT DMDFO_DEFAULT;
    public static DEVMODE_DISPLAY_FIXED_OUTPUT DMDFO_STRETCH;
    public static DEVMODE_DISPLAY_FIXED_OUTPUT DMDFO_CENTER;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_DISPLAY_ORIENTATION : Enum {
    public UInt32 value__;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_DEFAULT;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_90;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_180;
    public static DEVMODE_DISPLAY_ORIENTATION DMDO_270;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_DUPLEX : Enum {
    public short value__;
    public static DEVMODE_DUPLEX DMDUP_SIMPLEX;
    public static DEVMODE_DUPLEX DMDUP_VERTICAL;
    public static DEVMODE_DUPLEX DMDUP_HORIZONTAL;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_FIELD_FLAGS : Enum {
    public UInt32 value__;
    public static DEVMODE_FIELD_FLAGS DM_SPECVERSION;
    public static DEVMODE_FIELD_FLAGS DM_ORIENTATION;
    public static DEVMODE_FIELD_FLAGS DM_PAPERSIZE;
    public static DEVMODE_FIELD_FLAGS DM_PAPERLENGTH;
    public static DEVMODE_FIELD_FLAGS DM_PAPERWIDTH;
    public static DEVMODE_FIELD_FLAGS DM_SCALE;
    public static DEVMODE_FIELD_FLAGS DM_POSITION;
    public static DEVMODE_FIELD_FLAGS DM_NUP;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYORIENTATION;
    public static DEVMODE_FIELD_FLAGS DM_COPIES;
    public static DEVMODE_FIELD_FLAGS DM_DEFAULTSOURCE;
    public static DEVMODE_FIELD_FLAGS DM_PRINTQUALITY;
    public static DEVMODE_FIELD_FLAGS DM_COLOR;
    public static DEVMODE_FIELD_FLAGS DM_DUPLEX;
    public static DEVMODE_FIELD_FLAGS DM_YRESOLUTION;
    public static DEVMODE_FIELD_FLAGS DM_TTOPTION;
    public static DEVMODE_FIELD_FLAGS DM_COLLATE;
    public static DEVMODE_FIELD_FLAGS DM_FORMNAME;
    public static DEVMODE_FIELD_FLAGS DM_LOGPIXELS;
    public static DEVMODE_FIELD_FLAGS DM_BITSPERPEL;
    public static DEVMODE_FIELD_FLAGS DM_PELSWIDTH;
    public static DEVMODE_FIELD_FLAGS DM_PELSHEIGHT;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYFLAGS;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYFREQUENCY;
    public static DEVMODE_FIELD_FLAGS DM_ICMMETHOD;
    public static DEVMODE_FIELD_FLAGS DM_ICMINTENT;
    public static DEVMODE_FIELD_FLAGS DM_MEDIATYPE;
    public static DEVMODE_FIELD_FLAGS DM_DITHERTYPE;
    public static DEVMODE_FIELD_FLAGS DM_PANNINGWIDTH;
    public static DEVMODE_FIELD_FLAGS DM_PANNINGHEIGHT;
    public static DEVMODE_FIELD_FLAGS DM_DISPLAYFIXEDOUTPUT;
    public static DEVMODE_FIELD_FLAGS DM_INTERLACED;
    public static DEVMODE_FIELD_FLAGS DM_UPDATE;
    public static DEVMODE_FIELD_FLAGS DM_COPY;
    public static DEVMODE_FIELD_FLAGS DM_PROMPT;
    public static DEVMODE_FIELD_FLAGS DM_MODIFY;
    public static DEVMODE_FIELD_FLAGS DM_IN_BUFFER;
    public static DEVMODE_FIELD_FLAGS DM_IN_PROMPT;
    public static DEVMODE_FIELD_FLAGS DM_OUT_BUFFER;
    public static DEVMODE_FIELD_FLAGS DM_OUT_DEFAULT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DEVMODE_TRUETYPE_OPTION : Enum {
    public short value__;
    public static DEVMODE_TRUETYPE_OPTION DMTT_BITMAP;
    public static DEVMODE_TRUETYPE_OPTION DMTT_DOWNLOAD;
    public static DEVMODE_TRUETYPE_OPTION DMTT_SUBDEV;
    public static DEVMODE_TRUETYPE_OPTION DMTT_DOWNLOAD_OUTLINE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.DEVMODEW : ValueType {
    internal __char_32 dmDeviceName;
    internal ushort dmSpecVersion;
    internal ushort dmDriverVersion;
    internal ushort dmSize;
    internal ushort dmDriverExtra;
    internal DEVMODE_FIELD_FLAGS dmFields;
    internal _Anonymous1_e__Union Anonymous1;
    internal DEVMODE_COLOR dmColor;
    internal DEVMODE_DUPLEX dmDuplex;
    internal short dmYResolution;
    internal DEVMODE_TRUETYPE_OPTION dmTTOption;
    internal DEVMODE_COLLATE dmCollate;
    internal __char_32 dmFormName;
    internal ushort dmLogPixels;
    internal UInt32 dmBitsPerPel;
    internal UInt32 dmPelsWidth;
    internal UInt32 dmPelsHeight;
    internal _Anonymous2_e__Union Anonymous2;
    internal UInt32 dmDisplayFrequency;
    internal UInt32 dmICMMethod;
    internal UInt32 dmICMIntent;
    internal UInt32 dmMediaType;
    internal UInt32 dmDitherType;
    internal UInt32 dmReserved1;
    internal UInt32 dmReserved2;
    internal UInt32 dmPanningWidth;
    internal UInt32 dmPanningHeight;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DFC_TYPE : Enum {
    public UInt32 value__;
    public static DFC_TYPE DFC_CAPTION;
    public static DFC_TYPE DFC_MENU;
    public static DFC_TYPE DFC_SCROLL;
    public static DFC_TYPE DFC_BUTTON;
    public static DFC_TYPE DFC_POPUPMENU;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DFCS_STATE : Enum {
    public UInt32 value__;
    public static DFCS_STATE DFCS_CAPTIONCLOSE;
    public static DFCS_STATE DFCS_CAPTIONMIN;
    public static DFCS_STATE DFCS_CAPTIONMAX;
    public static DFCS_STATE DFCS_CAPTIONRESTORE;
    public static DFCS_STATE DFCS_CAPTIONHELP;
    public static DFCS_STATE DFCS_MENUARROW;
    public static DFCS_STATE DFCS_MENUCHECK;
    public static DFCS_STATE DFCS_MENUBULLET;
    public static DFCS_STATE DFCS_MENUARROWRIGHT;
    public static DFCS_STATE DFCS_SCROLLUP;
    public static DFCS_STATE DFCS_SCROLLDOWN;
    public static DFCS_STATE DFCS_SCROLLLEFT;
    public static DFCS_STATE DFCS_SCROLLRIGHT;
    public static DFCS_STATE DFCS_SCROLLCOMBOBOX;
    public static DFCS_STATE DFCS_SCROLLSIZEGRIP;
    public static DFCS_STATE DFCS_SCROLLSIZEGRIPRIGHT;
    public static DFCS_STATE DFCS_BUTTONCHECK;
    public static DFCS_STATE DFCS_BUTTONRADIOIMAGE;
    public static DFCS_STATE DFCS_BUTTONRADIOMASK;
    public static DFCS_STATE DFCS_BUTTONRADIO;
    public static DFCS_STATE DFCS_BUTTON3STATE;
    public static DFCS_STATE DFCS_BUTTONPUSH;
    public static DFCS_STATE DFCS_INACTIVE;
    public static DFCS_STATE DFCS_PUSHED;
    public static DFCS_STATE DFCS_CHECKED;
    public static DFCS_STATE DFCS_TRANSPARENT;
    public static DFCS_STATE DFCS_HOT;
    public static DFCS_STATE DFCS_ADJUSTRECT;
    public static DFCS_STATE DFCS_FLAT;
    public static DFCS_STATE DFCS_MONO;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DIB_USAGE : Enum {
    public UInt32 value__;
    public static DIB_USAGE DIB_RGB_COLORS;
    public static DIB_USAGE DIB_PAL_COLORS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DRAW_EDGE_FLAGS : Enum {
    public UInt32 value__;
    public static DRAW_EDGE_FLAGS BF_ADJUST;
    public static DRAW_EDGE_FLAGS BF_BOTTOM;
    public static DRAW_EDGE_FLAGS BF_BOTTOMLEFT;
    public static DRAW_EDGE_FLAGS BF_BOTTOMRIGHT;
    public static DRAW_EDGE_FLAGS BF_DIAGONAL;
    public static DRAW_EDGE_FLAGS BF_DIAGONAL_ENDBOTTOMLEFT;
    public static DRAW_EDGE_FLAGS BF_DIAGONAL_ENDBOTTOMRIGHT;
    public static DRAW_EDGE_FLAGS BF_DIAGONAL_ENDTOPLEFT;
    public static DRAW_EDGE_FLAGS BF_DIAGONAL_ENDTOPRIGHT;
    public static DRAW_EDGE_FLAGS BF_FLAT;
    public static DRAW_EDGE_FLAGS BF_LEFT;
    public static DRAW_EDGE_FLAGS BF_MIDDLE;
    public static DRAW_EDGE_FLAGS BF_MONO;
    public static DRAW_EDGE_FLAGS BF_RECT;
    public static DRAW_EDGE_FLAGS BF_RIGHT;
    public static DRAW_EDGE_FLAGS BF_SOFT;
    public static DRAW_EDGE_FLAGS BF_TOP;
    public static DRAW_EDGE_FLAGS BF_TOPLEFT;
    public static DRAW_EDGE_FLAGS BF_TOPRIGHT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT : Enum {
    public UInt32 value__;
    public static DRAW_TEXT_FORMAT DT_BOTTOM;
    public static DRAW_TEXT_FORMAT DT_CALCRECT;
    public static DRAW_TEXT_FORMAT DT_CENTER;
    public static DRAW_TEXT_FORMAT DT_EDITCONTROL;
    public static DRAW_TEXT_FORMAT DT_END_ELLIPSIS;
    public static DRAW_TEXT_FORMAT DT_EXPANDTABS;
    public static DRAW_TEXT_FORMAT DT_EXTERNALLEADING;
    public static DRAW_TEXT_FORMAT DT_HIDEPREFIX;
    public static DRAW_TEXT_FORMAT DT_INTERNAL;
    public static DRAW_TEXT_FORMAT DT_LEFT;
    public static DRAW_TEXT_FORMAT DT_MODIFYSTRING;
    public static DRAW_TEXT_FORMAT DT_NOCLIP;
    public static DRAW_TEXT_FORMAT DT_NOFULLWIDTHCHARBREAK;
    public static DRAW_TEXT_FORMAT DT_NOPREFIX;
    public static DRAW_TEXT_FORMAT DT_PATH_ELLIPSIS;
    public static DRAW_TEXT_FORMAT DT_PREFIXONLY;
    public static DRAW_TEXT_FORMAT DT_RIGHT;
    public static DRAW_TEXT_FORMAT DT_RTLREADING;
    public static DRAW_TEXT_FORMAT DT_SINGLELINE;
    public static DRAW_TEXT_FORMAT DT_TABSTOP;
    public static DRAW_TEXT_FORMAT DT_TOP;
    public static DRAW_TEXT_FORMAT DT_VCENTER;
    public static DRAW_TEXT_FORMAT DT_WORDBREAK;
    public static DRAW_TEXT_FORMAT DT_WORD_ELLIPSIS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.DRAWEDGE_FLAGS : Enum {
    public UInt32 value__;
    public static DRAWEDGE_FLAGS BDR_RAISEDOUTER;
    public static DRAWEDGE_FLAGS BDR_SUNKENOUTER;
    public static DRAWEDGE_FLAGS BDR_RAISEDINNER;
    public static DRAWEDGE_FLAGS BDR_SUNKENINNER;
    public static DRAWEDGE_FLAGS BDR_OUTER;
    public static DRAWEDGE_FLAGS BDR_INNER;
    public static DRAWEDGE_FLAGS BDR_RAISED;
    public static DRAWEDGE_FLAGS BDR_SUNKEN;
    public static DRAWEDGE_FLAGS EDGE_RAISED;
    public static DRAWEDGE_FLAGS EDGE_SUNKEN;
    public static DRAWEDGE_FLAGS EDGE_ETCHED;
    public static DRAWEDGE_FLAGS EDGE_BUMP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.DRAWTEXTPARAMS : ValueType {
    internal UInt32 cbSize;
    internal int iTabLength;
    internal int iLeftMargin;
    internal int iRightMargin;
    internal UInt32 uiLengthDrawn;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.ENHANCED_METAFILE_RECORD_TYPE : Enum {
    public UInt32 value__;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_HEADER;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYBEZIER;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYGON;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYLINE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYBEZIERTO;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYLINETO;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYPOLYLINE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYPOLYGON;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETWINDOWEXTEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETWINDOWORGEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETVIEWPORTEXTEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETVIEWPORTORGEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETBRUSHORGEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EOF;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETPIXELV;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETMAPPERFLAGS;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETMAPMODE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETBKMODE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETPOLYFILLMODE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETROP2;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETSTRETCHBLTMODE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETTEXTALIGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETCOLORADJUSTMENT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETTEXTCOLOR;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETBKCOLOR;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_OFFSETCLIPRGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_MOVETOEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETMETARGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXCLUDECLIPRECT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_INTERSECTCLIPRECT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SCALEVIEWPORTEXTEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SCALEWINDOWEXTEX;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SAVEDC;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESTOREDC;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETWORLDTRANSFORM;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_MODIFYWORLDTRANSFORM;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SELECTOBJECT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATEPEN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATEBRUSHINDIRECT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_DELETEOBJECT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ANGLEARC;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ELLIPSE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RECTANGLE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ROUNDRECT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ARC;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CHORD;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_PIE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SELECTPALETTE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATEPALETTE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETPALETTEENTRIES;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESIZEPALETTE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_REALIZEPALETTE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXTFLOODFILL;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_LINETO;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ARCTO;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYDRAW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETARCDIRECTION;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETMITERLIMIT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_BEGINPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ENDPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CLOSEFIGURE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_FILLPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_STROKEANDFILLPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_STROKEPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_FLATTENPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_WIDENPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SELECTCLIPPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ABORTPATH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_GDICOMMENT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_FILLRGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_FRAMERGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_INVERTRGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_PAINTRGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXTSELECTCLIPRGN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_BITBLT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_STRETCHBLT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_MASKBLT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_PLGBLT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETDIBITSTODEVICE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_STRETCHDIBITS;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXTCREATEFONTINDIRECTW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXTTEXTOUTA;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXTTEXTOUTW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYBEZIER16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYGON16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYLINE16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYBEZIERTO16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYLINETO16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYPOLYLINE16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYPOLYGON16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYDRAW16;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATEMONOBRUSH;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATEDIBPATTERNBRUSHPT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_EXTCREATEPEN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYTEXTOUTA;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_POLYTEXTOUTW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETICMMODE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATECOLORSPACE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETCOLORSPACE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_DELETECOLORSPACE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_GLSRECORD;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_GLSBOUNDEDRECORD;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_PIXELFORMAT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_105;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_106;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_107;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_108;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_109;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_110;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_COLORCORRECTPALETTE;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETICMPROFILEA;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETICMPROFILEW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_ALPHABLEND;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_SETLAYOUT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_TRANSPARENTBLT;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_117;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_GRADIENTFILL;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_119;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_RESERVED_120;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_COLORMATCHTOTARGETW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_CREATECOLORSPACEW;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_MIN;
    public static ENHANCED_METAFILE_RECORD_TYPE EMR_MAX;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.ENHMETARECORD : ValueType {
    internal ENHANCED_METAFILE_RECORD_TYPE iType;
    internal UInt32 nSize;
    internal __uint_1 dParm;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.ENUM_DISPLAY_SETTINGS_MODE : Enum {
    public UInt32 value__;
    public static ENUM_DISPLAY_SETTINGS_MODE ENUM_CURRENT_SETTINGS;
    public static ENUM_DISPLAY_SETTINGS_MODE ENUM_REGISTRY_SETTINGS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.ETO_OPTIONS : Enum {
    public UInt32 value__;
    public static ETO_OPTIONS ETO_OPAQUE;
    public static ETO_OPTIONS ETO_CLIPPED;
    public static ETO_OPTIONS ETO_GLYPH_INDEX;
    public static ETO_OPTIONS ETO_RTLREADING;
    public static ETO_OPTIONS ETO_NUMERICSLOCAL;
    public static ETO_OPTIONS ETO_NUMERICSLATIN;
    public static ETO_OPTIONS ETO_IGNORELANGUAGE;
    public static ETO_OPTIONS ETO_PDY;
    public static ETO_OPTIONS ETO_REVERSE_INDEX_MAP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.EXTLOGFONTW : ValueType {
    internal LOGFONTW elfLogFont;
    internal __char_64 elfFullName;
    internal __char_32 elfStyle;
    internal UInt32 elfVersion;
    internal UInt32 elfStyleSize;
    internal UInt32 elfMatch;
    internal UInt32 elfReserved;
    internal __byte_4 elfVendorId;
    internal UInt32 elfCulture;
    internal PANOSE elfPanose;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.FONT_CHARSET : Enum {
    public byte value__;
    public static FONT_CHARSET ANSI_CHARSET;
    public static FONT_CHARSET DEFAULT_CHARSET;
    public static FONT_CHARSET SYMBOL_CHARSET;
    public static FONT_CHARSET SHIFTJIS_CHARSET;
    public static FONT_CHARSET HANGEUL_CHARSET;
    public static FONT_CHARSET HANGUL_CHARSET;
    public static FONT_CHARSET GB2312_CHARSET;
    public static FONT_CHARSET CHINESEBIG5_CHARSET;
    public static FONT_CHARSET OEM_CHARSET;
    public static FONT_CHARSET JOHAB_CHARSET;
    public static FONT_CHARSET HEBREW_CHARSET;
    public static FONT_CHARSET ARABIC_CHARSET;
    public static FONT_CHARSET GREEK_CHARSET;
    public static FONT_CHARSET TURKISH_CHARSET;
    public static FONT_CHARSET VIETNAMESE_CHARSET;
    public static FONT_CHARSET THAI_CHARSET;
    public static FONT_CHARSET EASTEUROPE_CHARSET;
    public static FONT_CHARSET RUSSIAN_CHARSET;
    public static FONT_CHARSET MAC_CHARSET;
    public static FONT_CHARSET BALTIC_CHARSET;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION : Enum {
    public byte value__;
    public static FONT_CLIP_PRECISION CLIP_DEFAULT_PRECIS;
    public static FONT_CLIP_PRECISION CLIP_CHARACTER_PRECIS;
    public static FONT_CLIP_PRECISION CLIP_STROKE_PRECIS;
    public static FONT_CLIP_PRECISION CLIP_MASK;
    public static FONT_CLIP_PRECISION CLIP_LH_ANGLES;
    public static FONT_CLIP_PRECISION CLIP_TT_ALWAYS;
    public static FONT_CLIP_PRECISION CLIP_DFA_DISABLE;
    public static FONT_CLIP_PRECISION CLIP_EMBEDDED;
    public static FONT_CLIP_PRECISION CLIP_DFA_OVERRIDE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION : Enum {
    public byte value__;
    public static FONT_OUTPUT_PRECISION OUT_DEFAULT_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_STRING_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_CHARACTER_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_STROKE_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_TT_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_DEVICE_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_RASTER_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_TT_ONLY_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_OUTLINE_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_SCREEN_OUTLINE_PRECIS;
    public static FONT_OUTPUT_PRECISION OUT_PS_ONLY_PRECIS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.FONT_QUALITY : Enum {
    public byte value__;
    public static FONT_QUALITY DEFAULT_QUALITY;
    public static FONT_QUALITY DRAFT_QUALITY;
    public static FONT_QUALITY PROOF_QUALITY;
    public static FONT_QUALITY NONANTIALIASED_QUALITY;
    public static FONT_QUALITY ANTIALIASED_QUALITY;
    public static FONT_QUALITY CLEARTYPE_QUALITY;
}
internal enum Windows.Win32.Graphics.Gdi.FW : Enum {
    public int value__;
    public static FW DONTCARE;
    public static FW THIN;
    public static FW EXTRALIGHT;
    public static FW ULTRALIGHT;
    public static FW LIGHT;
    public static FW NORMAL;
    public static FW REGULAR;
    public static FW MEDIUM;
    public static FW SEMIBOLD;
    public static FW DEMIBOLD;
    public static FW BOLD;
    public static FW EXTRABOLD;
    public static FW ULTRABOLD;
    public static FW HEAVY;
    public static FW BLACK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.GDI_REGION_TYPE : Enum {
    public int value__;
    public static GDI_REGION_TYPE RGN_ERROR;
    public static GDI_REGION_TYPE NULLREGION;
    public static GDI_REGION_TYPE SIMPLEREGION;
    public static GDI_REGION_TYPE COMPLEXREGION;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.GET_DCX_FLAGS : Enum {
    public UInt32 value__;
    public static GET_DCX_FLAGS DCX_WINDOW;
    public static GET_DCX_FLAGS DCX_CACHE;
    public static GET_DCX_FLAGS DCX_PARENTCLIP;
    public static GET_DCX_FLAGS DCX_CLIPSIBLINGS;
    public static GET_DCX_FLAGS DCX_CLIPCHILDREN;
    public static GET_DCX_FLAGS DCX_NORESETATTRS;
    public static GET_DCX_FLAGS DCX_LOCKWINDOWUPDATE;
    public static GET_DCX_FLAGS DCX_EXCLUDERGN;
    public static GET_DCX_FLAGS DCX_INTERSECTRGN;
    public static GET_DCX_FLAGS DCX_INTERSECTUPDATE;
    public static GET_DCX_FLAGS DCX_VALIDATE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX : Enum {
    public UInt32 value__;
    public static GET_DEVICE_CAPS_INDEX DRIVERVERSION;
    public static GET_DEVICE_CAPS_INDEX TECHNOLOGY;
    public static GET_DEVICE_CAPS_INDEX HORZSIZE;
    public static GET_DEVICE_CAPS_INDEX VERTSIZE;
    public static GET_DEVICE_CAPS_INDEX HORZRES;
    public static GET_DEVICE_CAPS_INDEX VERTRES;
    public static GET_DEVICE_CAPS_INDEX BITSPIXEL;
    public static GET_DEVICE_CAPS_INDEX PLANES;
    public static GET_DEVICE_CAPS_INDEX NUMBRUSHES;
    public static GET_DEVICE_CAPS_INDEX NUMPENS;
    public static GET_DEVICE_CAPS_INDEX NUMMARKERS;
    public static GET_DEVICE_CAPS_INDEX NUMFONTS;
    public static GET_DEVICE_CAPS_INDEX NUMCOLORS;
    public static GET_DEVICE_CAPS_INDEX PDEVICESIZE;
    public static GET_DEVICE_CAPS_INDEX CURVECAPS;
    public static GET_DEVICE_CAPS_INDEX LINECAPS;
    public static GET_DEVICE_CAPS_INDEX POLYGONALCAPS;
    public static GET_DEVICE_CAPS_INDEX TEXTCAPS;
    public static GET_DEVICE_CAPS_INDEX CLIPCAPS;
    public static GET_DEVICE_CAPS_INDEX RASTERCAPS;
    public static GET_DEVICE_CAPS_INDEX ASPECTX;
    public static GET_DEVICE_CAPS_INDEX ASPECTY;
    public static GET_DEVICE_CAPS_INDEX ASPECTXY;
    public static GET_DEVICE_CAPS_INDEX LOGPIXELSX;
    public static GET_DEVICE_CAPS_INDEX LOGPIXELSY;
    public static GET_DEVICE_CAPS_INDEX SIZEPALETTE;
    public static GET_DEVICE_CAPS_INDEX NUMRESERVED;
    public static GET_DEVICE_CAPS_INDEX COLORRES;
    public static GET_DEVICE_CAPS_INDEX PHYSICALWIDTH;
    public static GET_DEVICE_CAPS_INDEX PHYSICALHEIGHT;
    public static GET_DEVICE_CAPS_INDEX PHYSICALOFFSETX;
    public static GET_DEVICE_CAPS_INDEX PHYSICALOFFSETY;
    public static GET_DEVICE_CAPS_INDEX SCALINGFACTORX;
    public static GET_DEVICE_CAPS_INDEX SCALINGFACTORY;
    public static GET_DEVICE_CAPS_INDEX VREFRESH;
    public static GET_DEVICE_CAPS_INDEX DESKTOPVERTRES;
    public static GET_DEVICE_CAPS_INDEX DESKTOPHORZRES;
    public static GET_DEVICE_CAPS_INDEX BLTALIGNMENT;
    public static GET_DEVICE_CAPS_INDEX SHADEBLENDCAPS;
    public static GET_DEVICE_CAPS_INDEX COLORMGMTCAPS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.GET_STOCK_OBJECT_FLAGS : Enum {
    public int value__;
    public static GET_STOCK_OBJECT_FLAGS BLACK_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS DKGRAY_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS DC_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS GRAY_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS HOLLOW_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS LTGRAY_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS NULL_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS WHITE_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS BLACK_PEN;
    public static GET_STOCK_OBJECT_FLAGS DC_PEN;
    public static GET_STOCK_OBJECT_FLAGS NULL_PEN;
    public static GET_STOCK_OBJECT_FLAGS WHITE_PEN;
    public static GET_STOCK_OBJECT_FLAGS ANSI_FIXED_FONT;
    public static GET_STOCK_OBJECT_FLAGS ANSI_VAR_FONT;
    public static GET_STOCK_OBJECT_FLAGS DEVICE_DEFAULT_FONT;
    public static GET_STOCK_OBJECT_FLAGS DEFAULT_GUI_FONT;
    public static GET_STOCK_OBJECT_FLAGS OEM_FIXED_FONT;
    public static GET_STOCK_OBJECT_FLAGS SYSTEM_FONT;
    public static GET_STOCK_OBJECT_FLAGS SYSTEM_FIXED_FONT;
    public static GET_STOCK_OBJECT_FLAGS DEFAULT_PALETTE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HANDLETABLE : ValueType {
    internal __HGDIOBJ_1 objectHandle;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HBITMAP : ValueType {
    internal IntPtr Value;
    internal static HBITMAP HBMMENU_CALLBACK;
    internal static HBITMAP HBMMENU_SYSTEM;
    internal static HBITMAP HBMMENU_MBAR_RESTORE;
    internal static HBITMAP HBMMENU_MBAR_MINIMIZE;
    internal static HBITMAP HBMMENU_MBAR_CLOSE;
    internal static HBITMAP HBMMENU_MBAR_CLOSE_D;
    internal static HBITMAP HBMMENU_MBAR_MINIMIZE_D;
    internal static HBITMAP HBMMENU_POPUP_CLOSE;
    internal static HBITMAP HBMMENU_POPUP_RESTORE;
    internal static HBITMAP HBMMENU_POPUP_MAXIMIZE;
    internal static HBITMAP HBMMENU_POPUP_MINIMIZE;
    internal static HBITMAP Null { get; }
    internal bool IsNull { get; }
    internal HBITMAP(IntPtr value);
    private static HBITMAP();
    public sealed virtual void Dispose();
    internal static HBITMAP get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HBITMAP value);
    public static HBITMAP op_Explicit(IntPtr value);
    public static bool op_Equality(HBITMAP left, HBITMAP right);
    public static bool op_Inequality(HBITMAP left, HBITMAP right);
    public sealed virtual bool Equals(HBITMAP other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HGDIOBJ op_Implicit(HBITMAP value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HBRUSH : ValueType {
    internal IntPtr Value;
    internal static HBRUSH Null { get; }
    internal bool IsNull { get; }
    internal HBRUSH(IntPtr value);
    internal static HBRUSH get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HBRUSH value);
    public static HBRUSH op_Explicit(IntPtr value);
    public static bool op_Equality(HBRUSH left, HBRUSH right);
    public static bool op_Inequality(HBRUSH left, HBRUSH right);
    public sealed virtual bool Equals(HBRUSH other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HGDIOBJ op_Implicit(HBRUSH value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HDC : ValueType {
    internal IntPtr Value;
    private HDC IHandle<Windows.Win32.Graphics.Gdi.HDC>.Handle { get; }
    [NullableAttribute("2")]
private object IHandle<Windows.Win32.Graphics.Gdi.HDC>.Wrapper { get; }
    public bool IsNull { get; }
    internal HDC(IntPtr value);
    private sealed virtual override HDC IHandle<Windows.Win32.Graphics.Gdi.HDC>.get_Handle();
    [NullableContextAttribute("2")]
private sealed virtual override object IHandle<Windows.Win32.Graphics.Gdi.HDC>.get_Wrapper();
    public bool get_IsNull();
    public static IntPtr op_Implicit(HDC value);
    public static HDC op_Explicit(IntPtr value);
    public static bool op_Equality(HDC left, HDC right);
    public static bool op_Inequality(HDC left, HDC right);
    public sealed virtual bool Equals(HDC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.HDC_MAP_MODE : Enum {
    public int value__;
    public static HDC_MAP_MODE MM_ANISOTROPIC;
    public static HDC_MAP_MODE MM_HIENGLISH;
    public static HDC_MAP_MODE MM_HIMETRIC;
    public static HDC_MAP_MODE MM_ISOTROPIC;
    public static HDC_MAP_MODE MM_LOENGLISH;
    public static HDC_MAP_MODE MM_LOMETRIC;
    public static HDC_MAP_MODE MM_TEXT;
    public static HDC_MAP_MODE MM_TWIPS;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HENHMETAFILE : ValueType {
    internal IntPtr Value;
    internal static HENHMETAFILE Null { get; }
    internal bool IsNull { get; }
    internal HENHMETAFILE(IntPtr value);
    internal static HENHMETAFILE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HENHMETAFILE value);
    public static HENHMETAFILE op_Explicit(IntPtr value);
    public static bool op_Equality(HENHMETAFILE left, HENHMETAFILE right);
    public static bool op_Inequality(HENHMETAFILE left, HENHMETAFILE right);
    public sealed virtual bool Equals(HENHMETAFILE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HFONT : ValueType {
    internal IntPtr Value;
    internal static HFONT Null { get; }
    internal bool IsNull { get; }
    internal HFONT(IntPtr value);
    internal static HFONT get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HFONT value);
    public static HFONT op_Explicit(IntPtr value);
    public static bool op_Equality(HFONT left, HFONT right);
    public static bool op_Inequality(HFONT left, HFONT right);
    public sealed virtual bool Equals(HFONT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HGDIOBJ op_Implicit(HFONT value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HGDIOBJ : ValueType {
    internal IntPtr Value;
    internal static HGDIOBJ Null { get; }
    internal bool IsNull { get; }
    internal HGDIOBJ(IntPtr value);
    public static HGDIOBJ op_Implicit(HDC value);
    public static HFONT op_Explicit(HGDIOBJ value);
    public static HBRUSH op_Explicit(HGDIOBJ value);
    public static HBITMAP op_Explicit(HGDIOBJ value);
    internal static HGDIOBJ get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HGDIOBJ value);
    public static HGDIOBJ op_Explicit(IntPtr value);
    public static bool op_Equality(HGDIOBJ left, HGDIOBJ right);
    public static bool op_Inequality(HGDIOBJ left, HGDIOBJ right);
    public sealed virtual bool Equals(HGDIOBJ other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HMETAFILE : ValueType {
    internal IntPtr Value;
    internal static HMETAFILE Null { get; }
    internal bool IsNull { get; }
    internal HMETAFILE(IntPtr value);
    internal static HMETAFILE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HMETAFILE value);
    public static HMETAFILE op_Explicit(IntPtr value);
    public static bool op_Equality(HMETAFILE left, HMETAFILE right);
    public static bool op_Inequality(HMETAFILE left, HMETAFILE right);
    public sealed virtual bool Equals(HMETAFILE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HMONITOR : ValueType {
    internal IntPtr Value;
    internal HMONITOR(IntPtr value);
    public static IntPtr op_Implicit(HMONITOR value);
    public static HMONITOR op_Explicit(IntPtr value);
    public static bool op_Equality(HMONITOR left, HMONITOR right);
    public static bool op_Inequality(HMONITOR left, HMONITOR right);
    public sealed virtual bool Equals(HMONITOR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HPALETTE : ValueType {
    internal IntPtr Value;
    internal static HPALETTE Null { get; }
    internal bool IsNull { get; }
    internal HPALETTE(IntPtr value);
    internal static HPALETTE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HPALETTE value);
    public static HPALETTE op_Explicit(IntPtr value);
    public static bool op_Equality(HPALETTE left, HPALETTE right);
    public static bool op_Inequality(HPALETTE left, HPALETTE right);
    public sealed virtual bool Equals(HPALETTE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HGDIOBJ op_Implicit(HPALETTE value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HPEN : ValueType {
    internal IntPtr Value;
    internal static HPEN Null { get; }
    internal bool IsNull { get; }
    internal HPEN(IntPtr value);
    internal static HPEN get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HPEN value);
    public static HPEN op_Explicit(IntPtr value);
    public static bool op_Equality(HPEN left, HPEN right);
    public static bool op_Inequality(HPEN left, HPEN right);
    public sealed virtual bool Equals(HPEN other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HGDIOBJ op_Implicit(HPEN value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.HRGN : ValueType {
    internal IntPtr Value;
    internal static HRGN Null { get; }
    internal bool IsNull { get; }
    internal HRGN(IntPtr value);
    [NullableContextAttribute("1")]
public RECT[] GetRegionRects();
    internal static HRGN get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HRGN value);
    public static HRGN op_Explicit(IntPtr value);
    public static bool op_Equality(HRGN left, HRGN right);
    public static bool op_Inequality(HRGN left, HRGN right);
    public sealed virtual bool Equals(HRGN other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HGDIOBJ op_Implicit(HRGN value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.LOGBRUSH : ValueType {
    internal BRUSH_STYLE lbStyle;
    internal COLORREF lbColor;
    internal UIntPtr lbHatch;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.LOGFONTW : ValueType {
    public static int LF_FACESIZE;
    internal int lfHeight;
    internal int lfWidth;
    internal int lfEscapement;
    internal int lfOrientation;
    internal int lfWeight;
    internal byte lfItalic;
    internal byte lfUnderline;
    internal byte lfStrikeOut;
    internal FONT_CHARSET lfCharSet;
    internal FONT_OUTPUT_PRECISION lfOutPrecision;
    internal FONT_CLIP_PRECISION lfClipPrecision;
    internal FONT_QUALITY lfQuality;
    internal byte lfPitchAndFamily;
    internal __char_32 lfFaceName;
    public ReadOnlySpan`1<char> FaceName { get; public set; }
    [UnscopedRefAttribute]
public ReadOnlySpan`1<char> get_FaceName();
    public void set_FaceName(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("1")]
public static LOGFONTW FromFont(Font font);
    [NullableContextAttribute("1")]
public static LOGFONTW FromFont(Font font, Graphics graphics);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.LOGPALETTE : ValueType {
    internal ushort palVersion;
    internal ushort palNumEntries;
    internal __PALETTEENTRY_1 palPalEntry;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.LOGPEN : ValueType {
    private UInt32 _lopnStyle;
    internal Point lopnWidth;
    internal COLORREF lopnColor;
    internal PEN_STYLE lopnStyle { get; internal set; }
    internal PEN_STYLE get_lopnStyle();
    internal void set_lopnStyle(PEN_STYLE value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.MODIFY_WORLD_TRANSFORM_MODE : Enum {
    public UInt32 value__;
    public static MODIFY_WORLD_TRANSFORM_MODE MWT_IDENTITY;
    public static MODIFY_WORLD_TRANSFORM_MODE MWT_LEFTMULTIPLY;
    public static MODIFY_WORLD_TRANSFORM_MODE MWT_RIGHTMULTIPLY;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS : Enum {
    public UInt32 value__;
    public static MONITOR_FROM_FLAGS MONITOR_DEFAULTTONEAREST;
    public static MONITOR_FROM_FLAGS MONITOR_DEFAULTTONULL;
    public static MONITOR_FROM_FLAGS MONITOR_DEFAULTTOPRIMARY;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.MONITORINFO : ValueType {
    internal UInt32 cbSize;
    internal RECT rcMonitor;
    internal RECT rcWork;
    internal UInt32 dwFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.MONITORINFOEXW : ValueType {
    internal MONITORINFO monitorInfo;
    internal __char_32 szDevice;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.OBJ_TYPE : Enum {
    public int value__;
    public static OBJ_TYPE OBJ_PEN;
    public static OBJ_TYPE OBJ_BRUSH;
    public static OBJ_TYPE OBJ_DC;
    public static OBJ_TYPE OBJ_METADC;
    public static OBJ_TYPE OBJ_PAL;
    public static OBJ_TYPE OBJ_FONT;
    public static OBJ_TYPE OBJ_BITMAP;
    public static OBJ_TYPE OBJ_REGION;
    public static OBJ_TYPE OBJ_METAFILE;
    public static OBJ_TYPE OBJ_MEMDC;
    public static OBJ_TYPE OBJ_EXTPEN;
    public static OBJ_TYPE OBJ_ENHMETADC;
    public static OBJ_TYPE OBJ_ENHMETAFILE;
    public static OBJ_TYPE OBJ_COLORSPACE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.PAINTSTRUCT : ValueType {
    internal HDC hdc;
    internal BOOL fErase;
    internal RECT rcPaint;
    internal BOOL fRestore;
    internal BOOL fIncUpdate;
    internal __byte_32 rgbReserved;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.PALETTEENTRY : ValueType {
    internal byte peRed;
    internal byte peGreen;
    internal byte peBlue;
    internal byte peFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_ARM_STYLE : Enum {
    public byte value__;
    public static PAN_ARM_STYLE PAN_ARM_ANY;
    public static PAN_ARM_STYLE PAN_ARM_NO_FIT;
    public static PAN_ARM_STYLE PAN_STRAIGHT_ARMS_HORZ;
    public static PAN_ARM_STYLE PAN_STRAIGHT_ARMS_WEDGE;
    public static PAN_ARM_STYLE PAN_STRAIGHT_ARMS_VERT;
    public static PAN_ARM_STYLE PAN_STRAIGHT_ARMS_SINGLE_SERIF;
    public static PAN_ARM_STYLE PAN_STRAIGHT_ARMS_DOUBLE_SERIF;
    public static PAN_ARM_STYLE PAN_BENT_ARMS_HORZ;
    public static PAN_ARM_STYLE PAN_BENT_ARMS_WEDGE;
    public static PAN_ARM_STYLE PAN_BENT_ARMS_VERT;
    public static PAN_ARM_STYLE PAN_BENT_ARMS_SINGLE_SERIF;
    public static PAN_ARM_STYLE PAN_BENT_ARMS_DOUBLE_SERIF;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_CONTRAST : Enum {
    public byte value__;
    public static PAN_CONTRAST PAN_CONTRAST_ANY;
    public static PAN_CONTRAST PAN_CONTRAST_NO_FIT;
    public static PAN_CONTRAST PAN_CONTRAST_INDEX;
    public static PAN_CONTRAST PAN_CONTRAST_NONE;
    public static PAN_CONTRAST PAN_CONTRAST_VERY_LOW;
    public static PAN_CONTRAST PAN_CONTRAST_LOW;
    public static PAN_CONTRAST PAN_CONTRAST_MEDIUM_LOW;
    public static PAN_CONTRAST PAN_CONTRAST_MEDIUM;
    public static PAN_CONTRAST PAN_CONTRAST_MEDIUM_HIGH;
    public static PAN_CONTRAST PAN_CONTRAST_HIGH;
    public static PAN_CONTRAST PAN_CONTRAST_VERY_HIGH;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_FAMILY_TYPE : Enum {
    public byte value__;
    public static PAN_FAMILY_TYPE PAN_FAMILY_ANY;
    public static PAN_FAMILY_TYPE PAN_FAMILY_NO_FIT;
    public static PAN_FAMILY_TYPE PAN_FAMILY_TEXT_DISPLAY;
    public static PAN_FAMILY_TYPE PAN_FAMILY_SCRIPT;
    public static PAN_FAMILY_TYPE PAN_FAMILY_DECORATIVE;
    public static PAN_FAMILY_TYPE PAN_FAMILY_PICTORIAL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_LETT_FORM : Enum {
    public byte value__;
    public static PAN_LETT_FORM PAN_LETT_FORM_ANY;
    public static PAN_LETT_FORM PAN_LETT_FORM_NO_FIT;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_CONTACT;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_WEIGHTED;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_BOXED;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_FLATTENED;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_ROUNDED;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_OFF_CENTER;
    public static PAN_LETT_FORM PAN_LETT_NORMAL_SQUARE;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_CONTACT;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_WEIGHTED;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_BOXED;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_FLATTENED;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_ROUNDED;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_OFF_CENTER;
    public static PAN_LETT_FORM PAN_LETT_OBLIQUE_SQUARE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_MIDLINE : Enum {
    public byte value__;
    public static PAN_MIDLINE PAN_MIDLINE_ANY;
    public static PAN_MIDLINE PAN_MIDLINE_NO_FIT;
    public static PAN_MIDLINE PAN_MIDLINE_INDEX;
    public static PAN_MIDLINE PAN_MIDLINE_STANDARD_TRIMMED;
    public static PAN_MIDLINE PAN_MIDLINE_STANDARD_POINTED;
    public static PAN_MIDLINE PAN_MIDLINE_STANDARD_SERIFED;
    public static PAN_MIDLINE PAN_MIDLINE_HIGH_TRIMMED;
    public static PAN_MIDLINE PAN_MIDLINE_HIGH_POINTED;
    public static PAN_MIDLINE PAN_MIDLINE_HIGH_SERIFED;
    public static PAN_MIDLINE PAN_MIDLINE_CONSTANT_TRIMMED;
    public static PAN_MIDLINE PAN_MIDLINE_CONSTANT_POINTED;
    public static PAN_MIDLINE PAN_MIDLINE_CONSTANT_SERIFED;
    public static PAN_MIDLINE PAN_MIDLINE_LOW_TRIMMED;
    public static PAN_MIDLINE PAN_MIDLINE_LOW_POINTED;
    public static PAN_MIDLINE PAN_MIDLINE_LOW_SERIFED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_PROPORTION : Enum {
    public byte value__;
    public static PAN_PROPORTION PAN_PROP_ANY;
    public static PAN_PROPORTION PAN_PROP_NO_FIT;
    public static PAN_PROPORTION PAN_PROP_OLD_STYLE;
    public static PAN_PROPORTION PAN_PROP_MODERN;
    public static PAN_PROPORTION PAN_PROP_EVEN_WIDTH;
    public static PAN_PROPORTION PAN_PROP_EXPANDED;
    public static PAN_PROPORTION PAN_PROP_CONDENSED;
    public static PAN_PROPORTION PAN_PROP_VERY_EXPANDED;
    public static PAN_PROPORTION PAN_PROP_VERY_CONDENSED;
    public static PAN_PROPORTION PAN_PROP_MONOSPACED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_SERIF_STYLE : Enum {
    public byte value__;
    public static PAN_SERIF_STYLE PAN_SERIF_ANY;
    public static PAN_SERIF_STYLE PAN_SERIF_NO_FIT;
    public static PAN_SERIF_STYLE PAN_SERIF_COVE;
    public static PAN_SERIF_STYLE PAN_SERIF_OBTUSE_COVE;
    public static PAN_SERIF_STYLE PAN_SERIF_SQUARE_COVE;
    public static PAN_SERIF_STYLE PAN_SERIF_OBTUSE_SQUARE_COVE;
    public static PAN_SERIF_STYLE PAN_SERIF_SQUARE;
    public static PAN_SERIF_STYLE PAN_SERIF_THIN;
    public static PAN_SERIF_STYLE PAN_SERIF_BONE;
    public static PAN_SERIF_STYLE PAN_SERIF_EXAGGERATED;
    public static PAN_SERIF_STYLE PAN_SERIF_TRIANGLE;
    public static PAN_SERIF_STYLE PAN_SERIF_NORMAL_SANS;
    public static PAN_SERIF_STYLE PAN_SERIF_OBTUSE_SANS;
    public static PAN_SERIF_STYLE PAN_SERIF_PERP_SANS;
    public static PAN_SERIF_STYLE PAN_SERIF_FLARED;
    public static PAN_SERIF_STYLE PAN_SERIF_ROUNDED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_STROKE_VARIATION : Enum {
    public byte value__;
    public static PAN_STROKE_VARIATION PAN_STROKE_ANY;
    public static PAN_STROKE_VARIATION PAN_STROKE_NO_FIT;
    public static PAN_STROKE_VARIATION PAN_STROKE_GRADUAL_DIAG;
    public static PAN_STROKE_VARIATION PAN_STROKE_GRADUAL_TRAN;
    public static PAN_STROKE_VARIATION PAN_STROKE_GRADUAL_VERT;
    public static PAN_STROKE_VARIATION PAN_STROKE_GRADUAL_HORZ;
    public static PAN_STROKE_VARIATION PAN_STROKE_RAPID_VERT;
    public static PAN_STROKE_VARIATION PAN_STROKE_RAPID_HORZ;
    public static PAN_STROKE_VARIATION PAN_STROKE_INSTANT_VERT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_WEIGHT : Enum {
    public byte value__;
    public static PAN_WEIGHT PAN_WEIGHT_ANY;
    public static PAN_WEIGHT PAN_WEIGHT_NO_FIT;
    public static PAN_WEIGHT PAN_WEIGHT_INDEX;
    public static PAN_WEIGHT PAN_WEIGHT_VERY_LIGHT;
    public static PAN_WEIGHT PAN_WEIGHT_LIGHT;
    public static PAN_WEIGHT PAN_WEIGHT_THIN;
    public static PAN_WEIGHT PAN_WEIGHT_BOOK;
    public static PAN_WEIGHT PAN_WEIGHT_MEDIUM;
    public static PAN_WEIGHT PAN_WEIGHT_DEMI;
    public static PAN_WEIGHT PAN_WEIGHT_BOLD;
    public static PAN_WEIGHT PAN_WEIGHT_HEAVY;
    public static PAN_WEIGHT PAN_WEIGHT_BLACK;
    public static PAN_WEIGHT PAN_WEIGHT_NORD;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PAN_XHEIGHT : Enum {
    public byte value__;
    public static PAN_XHEIGHT PAN_XHEIGHT_ANY;
    public static PAN_XHEIGHT PAN_XHEIGHT_NO_FIT;
    public static PAN_XHEIGHT PAN_XHEIGHT_INDEX;
    public static PAN_XHEIGHT PAN_XHEIGHT_CONSTANT_SMALL;
    public static PAN_XHEIGHT PAN_XHEIGHT_CONSTANT_STD;
    public static PAN_XHEIGHT PAN_XHEIGHT_CONSTANT_LARGE;
    public static PAN_XHEIGHT PAN_XHEIGHT_DUCKING_SMALL;
    public static PAN_XHEIGHT PAN_XHEIGHT_DUCKING_STD;
    public static PAN_XHEIGHT PAN_XHEIGHT_DUCKING_LARGE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.PANOSE : ValueType {
    internal PAN_FAMILY_TYPE bFamilyType;
    internal PAN_SERIF_STYLE bSerifStyle;
    internal PAN_WEIGHT bWeight;
    internal PAN_PROPORTION bProportion;
    internal PAN_CONTRAST bContrast;
    internal PAN_STROKE_VARIATION bStrokeVariation;
    internal PAN_ARM_STYLE bArmStyle;
    internal PAN_LETT_FORM bLetterform;
    internal PAN_MIDLINE bMidline;
    internal PAN_XHEIGHT bXHeight;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.PEN_STYLE : Enum {
    public int value__;
    public static PEN_STYLE PS_GEOMETRIC;
    public static PEN_STYLE PS_COSMETIC;
    public static PEN_STYLE PS_SOLID;
    public static PEN_STYLE PS_DASH;
    public static PEN_STYLE PS_DOT;
    public static PEN_STYLE PS_DASHDOT;
    public static PEN_STYLE PS_DASHDOTDOT;
    public static PEN_STYLE PS_NULL;
    public static PEN_STYLE PS_INSIDEFRAME;
    public static PEN_STYLE PS_USERSTYLE;
    public static PEN_STYLE PS_ALTERNATE;
    public static PEN_STYLE PS_STYLE_MASK;
    public static PEN_STYLE PS_ENDCAP_ROUND;
    public static PEN_STYLE PS_ENDCAP_SQUARE;
    public static PEN_STYLE PS_ENDCAP_FLAT;
    public static PEN_STYLE PS_ENDCAP_MASK;
    public static PEN_STYLE PS_JOIN_ROUND;
    public static PEN_STYLE PS_JOIN_BEVEL;
    public static PEN_STYLE PS_JOIN_MITER;
    public static PEN_STYLE PS_JOIN_MASK;
    public static PEN_STYLE PS_TYPE_MASK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.R2_MODE : Enum {
    public int value__;
    public static R2_MODE R2_BLACK;
    public static R2_MODE R2_NOTMERGEPEN;
    public static R2_MODE R2_MASKNOTPEN;
    public static R2_MODE R2_NOTCOPYPEN;
    public static R2_MODE R2_MASKPENNOT;
    public static R2_MODE R2_NOT;
    public static R2_MODE R2_XORPEN;
    public static R2_MODE R2_NOTMASKPEN;
    public static R2_MODE R2_MASKPEN;
    public static R2_MODE R2_NOTXORPEN;
    public static R2_MODE R2_NOP;
    public static R2_MODE R2_MERGENOTPEN;
    public static R2_MODE R2_COPYPEN;
    public static R2_MODE R2_MERGEPENNOT;
    public static R2_MODE R2_MERGEPEN;
    public static R2_MODE R2_WHITE;
    public static R2_MODE R2_LAST;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.REDRAW_WINDOW_FLAGS : Enum {
    public UInt32 value__;
    public static REDRAW_WINDOW_FLAGS RDW_INVALIDATE;
    public static REDRAW_WINDOW_FLAGS RDW_INTERNALPAINT;
    public static REDRAW_WINDOW_FLAGS RDW_ERASE;
    public static REDRAW_WINDOW_FLAGS RDW_VALIDATE;
    public static REDRAW_WINDOW_FLAGS RDW_NOINTERNALPAINT;
    public static REDRAW_WINDOW_FLAGS RDW_NOERASE;
    public static REDRAW_WINDOW_FLAGS RDW_NOCHILDREN;
    public static REDRAW_WINDOW_FLAGS RDW_ALLCHILDREN;
    public static REDRAW_WINDOW_FLAGS RDW_UPDATENOW;
    public static REDRAW_WINDOW_FLAGS RDW_ERASENOW;
    public static REDRAW_WINDOW_FLAGS RDW_FRAME;
    public static REDRAW_WINDOW_FLAGS RDW_NOFRAME;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.RGBQUAD : ValueType {
    internal byte rgbBlue;
    internal byte rgbGreen;
    internal byte rgbRed;
    internal byte rgbReserved;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.RGN_COMBINE_MODE : Enum {
    public int value__;
    public static RGN_COMBINE_MODE RGN_AND;
    public static RGN_COMBINE_MODE RGN_OR;
    public static RGN_COMBINE_MODE RGN_XOR;
    public static RGN_COMBINE_MODE RGN_DIFF;
    public static RGN_COMBINE_MODE RGN_COPY;
    public static RGN_COMBINE_MODE RGN_MIN;
    public static RGN_COMBINE_MODE RGN_MAX;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.RGNDATA : ValueType {
    internal RGNDATAHEADER rdh;
    internal __CHAR_1 Buffer;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.RGNDATAHEADER : ValueType {
    internal UInt32 dwSize;
    internal UInt32 iType;
    internal UInt32 nCount;
    internal UInt32 nRgnSize;
    internal RECT rcBound;
    public static RECT[] GetRegionRects(RGNDATAHEADER* regionData);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.ROP_CODE : Enum {
    public UInt32 value__;
    public static ROP_CODE BLACKNESS;
    public static ROP_CODE NOTSRCERASE;
    public static ROP_CODE NOTSRCCOPY;
    public static ROP_CODE SRCERASE;
    public static ROP_CODE DSTINVERT;
    public static ROP_CODE PATINVERT;
    public static ROP_CODE SRCINVERT;
    public static ROP_CODE SRCAND;
    public static ROP_CODE MERGEPAINT;
    public static ROP_CODE MERGECOPY;
    public static ROP_CODE SRCCOPY;
    public static ROP_CODE SRCPAINT;
    public static ROP_CODE PATCOPY;
    public static ROP_CODE PATPAINT;
    public static ROP_CODE WHITENESS;
    public static ROP_CODE CAPTUREBLT;
    public static ROP_CODE NOMIRRORBITMAP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.SYS_COLOR_INDEX : Enum {
    public int value__;
    public static SYS_COLOR_INDEX COLOR_SCROLLBAR;
    public static SYS_COLOR_INDEX COLOR_BACKGROUND;
    public static SYS_COLOR_INDEX COLOR_ACTIVECAPTION;
    public static SYS_COLOR_INDEX COLOR_INACTIVECAPTION;
    public static SYS_COLOR_INDEX COLOR_MENU;
    public static SYS_COLOR_INDEX COLOR_WINDOW;
    public static SYS_COLOR_INDEX COLOR_WINDOWFRAME;
    public static SYS_COLOR_INDEX COLOR_MENUTEXT;
    public static SYS_COLOR_INDEX COLOR_WINDOWTEXT;
    public static SYS_COLOR_INDEX COLOR_CAPTIONTEXT;
    public static SYS_COLOR_INDEX COLOR_ACTIVEBORDER;
    public static SYS_COLOR_INDEX COLOR_INACTIVEBORDER;
    public static SYS_COLOR_INDEX COLOR_APPWORKSPACE;
    public static SYS_COLOR_INDEX COLOR_HIGHLIGHT;
    public static SYS_COLOR_INDEX COLOR_HIGHLIGHTTEXT;
    public static SYS_COLOR_INDEX COLOR_BTNFACE;
    public static SYS_COLOR_INDEX COLOR_BTNSHADOW;
    public static SYS_COLOR_INDEX COLOR_GRAYTEXT;
    public static SYS_COLOR_INDEX COLOR_BTNTEXT;
    public static SYS_COLOR_INDEX COLOR_INACTIVECAPTIONTEXT;
    public static SYS_COLOR_INDEX COLOR_BTNHIGHLIGHT;
    public static SYS_COLOR_INDEX COLOR_3DDKSHADOW;
    public static SYS_COLOR_INDEX COLOR_3DLIGHT;
    public static SYS_COLOR_INDEX COLOR_INFOTEXT;
    public static SYS_COLOR_INDEX COLOR_INFOBK;
    public static SYS_COLOR_INDEX COLOR_HOTLIGHT;
    public static SYS_COLOR_INDEX COLOR_GRADIENTACTIVECAPTION;
    public static SYS_COLOR_INDEX COLOR_GRADIENTINACTIVECAPTION;
    public static SYS_COLOR_INDEX COLOR_MENUHILIGHT;
    public static SYS_COLOR_INDEX COLOR_MENUBAR;
    public static SYS_COLOR_INDEX COLOR_DESKTOP;
    public static SYS_COLOR_INDEX COLOR_3DFACE;
    public static SYS_COLOR_INDEX COLOR_3DSHADOW;
    public static SYS_COLOR_INDEX COLOR_3DHIGHLIGHT;
    public static SYS_COLOR_INDEX COLOR_3DHILIGHT;
    public static SYS_COLOR_INDEX COLOR_BTNHILIGHT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.TEXT_ALIGN_OPTIONS : Enum {
    public UInt32 value__;
    public static TEXT_ALIGN_OPTIONS TA_NOUPDATECP;
    public static TEXT_ALIGN_OPTIONS TA_UPDATECP;
    public static TEXT_ALIGN_OPTIONS TA_LEFT;
    public static TEXT_ALIGN_OPTIONS TA_RIGHT;
    public static TEXT_ALIGN_OPTIONS TA_CENTER;
    public static TEXT_ALIGN_OPTIONS TA_TOP;
    public static TEXT_ALIGN_OPTIONS TA_BOTTOM;
    public static TEXT_ALIGN_OPTIONS TA_BASELINE;
    public static TEXT_ALIGN_OPTIONS TA_RTLREADING;
    public static TEXT_ALIGN_OPTIONS TA_MASK;
    public static TEXT_ALIGN_OPTIONS VTA_BASELINE;
    public static TEXT_ALIGN_OPTIONS VTA_LEFT;
    public static TEXT_ALIGN_OPTIONS VTA_RIGHT;
    public static TEXT_ALIGN_OPTIONS VTA_CENTER;
    public static TEXT_ALIGN_OPTIONS VTA_BOTTOM;
    public static TEXT_ALIGN_OPTIONS VTA_TOP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.TEXTMETRICW : ValueType {
    internal int tmHeight;
    internal int tmAscent;
    internal int tmDescent;
    internal int tmInternalLeading;
    internal int tmExternalLeading;
    internal int tmAveCharWidth;
    internal int tmMaxCharWidth;
    internal int tmWeight;
    internal int tmOverhang;
    internal int tmDigitizedAspectX;
    internal int tmDigitizedAspectY;
    internal char tmFirstChar;
    internal char tmLastChar;
    internal char tmDefaultChar;
    internal char tmBreakChar;
    internal byte tmItalic;
    internal byte tmUnderlined;
    internal byte tmStruckOut;
    internal TMPF_FLAGS tmPitchAndFamily;
    internal byte tmCharSet;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.Graphics.Gdi.TMPF_FLAGS : Enum {
    public byte value__;
    public static TMPF_FLAGS TMPF_FIXED_PITCH;
    public static TMPF_FLAGS TMPF_VECTOR;
    public static TMPF_FLAGS TMPF_DEVICE;
    public static TMPF_FLAGS TMPF_TRUETYPE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Graphics.Gdi.XFORM : ValueType {
    internal float eM11;
    internal float eM12;
    internal float eM21;
    internal float eM22;
    internal float eDx;
    internal float eDy;
}
internal class Windows.Win32.HOOKPROC : MulticastDelegate {
    public HOOKPROC(object object, IntPtr method);
    public virtual LRESULT Invoke(int nCode, WPARAM wParam, LPARAM lParam);
    public virtual IAsyncResult BeginInvoke(int nCode, WPARAM wParam, LPARAM lParam, AsyncCallback callback, object object);
    public virtual LRESULT EndInvoke(IAsyncResult result);
}
internal interface Windows.Win32.IComIID {
    [IsReadOnlyAttribute]
internal static Guid& modreq(System.Runtime.InteropServices.InAttribute) Guid { get; }
    internal static abstract virtual Guid& modreq(System.Runtime.InteropServices.InAttribute) get_Guid();
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.InlineArrayIndexerExtensions : object {
    [ExtensionAttribute]
internal static ReadOnlySpan`1<char> SliceAtNull(ReadOnlySpan`1<char> value);
    [ExtensionAttribute]
internal static Byte& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__byte_32& this, int index);
    [ExtensionAttribute]
internal static Byte& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__byte_1& this, int index);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_32& this, int index);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_260& this, int index);
    [ExtensionAttribute]
internal static UInt32& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__uint_1& this, int index);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_64& this, int index);
    [ExtensionAttribute]
internal static Byte& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__byte_4& this, int index);
    [ExtensionAttribute]
internal static Char& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__char_1& this, int index);
    [ExtensionAttribute]
internal static Int32& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__int_6& this, int index);
    [ExtensionAttribute]
internal static Byte& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__byte_260& this, int index);
}
internal interface Windows.Win32.IVTable {
    public static Vtbl* VTable { get; }
    public static abstract virtual Vtbl* get_VTable();
}
internal interface Windows.Win32.IVTable`2 {
    [CompilerGeneratedAttribute]
private static Vtbl* <Windows.Win32.IVTable.VTable>k__BackingField;
    private static Vtbl* Windows.Win32.IVTable.VTable { get; }
    private static IVTable`2();
    private protected static abstract virtual void PopulateVTable(TVTable* vtable);
    [CompilerGeneratedAttribute]
private static override Vtbl* Windows.Win32.IVTable.get_VTable();
    private static TVTable* CreateVTable();
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.Media_Audio_IMessageFilter_Extensions : object {
    [ExtensionAttribute]
internal static UInt32 HandleInComingCall(Interface this, UInt32 dwCallType, HTASK htaskCaller, UInt32 dwTickCount, Nullable`1<INTERFACEINFO> lpInterfaceInfo);
}
[GuidAttribute("00000016-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Media.Audio.IMessageFilter : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IMessageFilter();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal UInt32 HandleInComingCall(UInt32 dwCallType, HTASK htaskCaller, UInt32 dwTickCount, Nullable`1<INTERFACEINFO> lpInterfaceInfo);
    [UnmanagedCallersOnlyAttribute]
private static UInt32 HandleInComingCall(IMessageFilter* pThis, UInt32 dwCallType, HTASK htaskCaller, UInt32 dwTickCount, INTERFACEINFO* lpInterfaceInfo);
    public UInt32 HandleInComingCall(UInt32 dwCallType, HTASK htaskCaller, UInt32 dwTickCount, INTERFACEINFO* lpInterfaceInfo);
    [UnmanagedCallersOnlyAttribute]
private static UInt32 RetryRejectedCall(IMessageFilter* pThis, HTASK htaskCallee, UInt32 dwTickCount, UInt32 dwRejectType);
    public UInt32 RetryRejectedCall(HTASK htaskCallee, UInt32 dwTickCount, UInt32 dwRejectType);
    [UnmanagedCallersOnlyAttribute]
private static UInt32 MessagePending(IMessageFilter* pThis, HTASK htaskCallee, UInt32 dwTickCount, UInt32 dwPendingType);
    public UInt32 MessagePending(HTASK htaskCallee, UInt32 dwTickCount, UInt32 dwPendingType);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Media.HTASK : ValueType {
    internal IntPtr Value;
    internal HTASK(IntPtr value);
    public static IntPtr op_Implicit(HTASK value);
    public static HTASK op_Explicit(IntPtr value);
    public static bool op_Equality(HTASK left, HTASK right);
    public static bool op_Inequality(HTASK left, HTASK right);
    public sealed virtual bool Equals(HTASK other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class Windows.Win32.MessageId : ValueType {
    private UInt32 _id;
    public static UInt32 WM_REFLECT;
    public static UInt32 WM_REFLECT_NOTIFY;
    public static UInt32 WM_REFLECT_NOTIFYFORMAT;
    public static UInt32 WM_REFLECT_COMMAND;
    public static UInt32 WM_REFLECT_CHARTOITEM;
    public static UInt32 WM_REFLECT_VKEYTOITEM;
    public static UInt32 WM_REFLECT_DRAWITEM;
    public static UInt32 WM_REFLECT_MEASUREITEM;
    public static UInt32 WM_REFLECT_HSCROLL;
    public static UInt32 WM_REFLECT_VSCROLL;
    public static UInt32 WM_REFLECT_CTLCOLOR;
    public static UInt32 WM_REFLECT_CTLCOLORBTN;
    public static UInt32 WM_REFLECT_CTLCOLORDLG;
    public static UInt32 WM_REFLECT_CTLCOLORMSGBOX;
    public static UInt32 WM_REFLECT_CTLCOLORSCROLLBAR;
    public static UInt32 WM_REFLECT_CTLCOLOREDIT;
    public static UInt32 WM_REFLECT_CTLCOLORLISTBOX;
    public static UInt32 WM_REFLECT_CTLCOLORSTATIC;
    private MessageId(UInt32 id);
    public static int op_Explicit(MessageId id);
    public static MessageId op_Explicit(int id);
    public static UInt32 op_Implicit(MessageId id);
    public static MessageId op_Implicit(UInt32 id);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
internal string MessageIdToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.PInvoke : object {
    public static UInt32 CDN_FIRST;
    public static UInt32 CDN_LAST;
    public static UInt32 CDN_INITDONE;
    public static UInt32 CDN_SELCHANGE;
    public static UInt32 CDN_FOLDERCHANGE;
    public static UInt32 CDN_SHAREVIOLATION;
    public static UInt32 CDN_HELP;
    public static UInt32 CDN_FILEOK;
    public static UInt32 CDN_TYPECHANGE;
    public static UInt32 CDN_INCLUDEITEM;
    public static int MaxClassName;
    public static int MAX_PATH;
    public static int MAX_UNICODESTRING_LEN;
    public static UInt32 TBM_GETPOS;
    internal static UInt32 ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID;
    internal static UInt32 ACTCTX_FLAG_LANGID_VALID;
    internal static UInt32 ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID;
    internal static UInt32 ACTCTX_FLAG_RESOURCE_NAME_VALID;
    internal static UInt32 ACTCTX_FLAG_SET_PROCESS_DEFAULT;
    internal static UInt32 ACTCTX_FLAG_APPLICATION_NAME_VALID;
    internal static UInt32 ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF;
    internal static UInt32 ACTCTX_FLAG_HMODULE_VALID;
    internal static int ARW_STARTMASK;
    internal static int ARW_STARTRIGHT;
    internal static int ARW_STARTTOP;
    internal static int ARW_LEFT;
    internal static int ARW_RIGHT;
    internal static int ARW_UP;
    internal static int ARW_DOWN;
    internal static int ARW_HIDE;
    internal static UInt32 BFFM_INITIALIZED;
    internal static UInt32 BFFM_SELCHANGED;
    internal static UInt32 BFFM_VALIDATEFAILEDA;
    internal static UInt32 BFFM_VALIDATEFAILEDW;
    internal static UInt32 BFFM_IUNKNOWN;
    internal static UInt32 BFFM_SETSTATUSTEXTA;
    internal static UInt32 BFFM_ENABLEOK;
    internal static UInt32 BFFM_SETSELECTIONA;
    internal static UInt32 BFFM_SETSELECTIONW;
    internal static UInt32 BFFM_SETSTATUSTEXTW;
    internal static UInt32 BFFM_SETOKTEXT;
    internal static UInt32 BFFM_SETEXPANDED;
    internal static UInt32 BFFM_SETSTATUSTEXT;
    internal static UInt32 BFFM_SETSELECTION;
    internal static UInt32 BFFM_VALIDATEFAILED;
    internal static UInt32 BIF_SHOWSIMILARDRIVERS;
    internal static UInt32 BIF_RAWDEVICENEEDSDRIVER;
    internal static UInt32 BIF_RETURNONLYFSDIRS;
    internal static UInt32 BIF_DONTGOBELOWDOMAIN;
    internal static UInt32 BIF_STATUSTEXT;
    internal static UInt32 BIF_RETURNFSANCESTORS;
    internal static UInt32 BIF_EDITBOX;
    internal static UInt32 BIF_VALIDATE;
    internal static UInt32 BIF_NEWDIALOGSTYLE;
    internal static UInt32 BIF_BROWSEINCLUDEURLS;
    internal static UInt32 BIF_UAHINT;
    internal static UInt32 BIF_NONEWFOLDERBUTTON;
    internal static UInt32 BIF_NOTRANSLATETARGETS;
    internal static UInt32 BIF_BROWSEFORCOMPUTER;
    internal static UInt32 BIF_BROWSEFORPRINTER;
    internal static UInt32 BIF_BROWSEINCLUDEFILES;
    internal static UInt32 BIF_SHAREABLE;
    internal static UInt32 BIF_BROWSEFILEJUNCTIONS;
    internal static UInt32 BM_GETCHECK;
    internal static UInt32 BM_SETCHECK;
    internal static UInt32 BM_GETSTATE;
    internal static UInt32 BM_SETSTATE;
    internal static UInt32 BM_SETSTYLE;
    internal static UInt32 BM_CLICK;
    internal static UInt32 BM_GETIMAGE;
    internal static UInt32 BM_SETIMAGE;
    internal static UInt32 BM_SETDONTCLICK;
    internal static UInt32 BN_CLICKED;
    internal static UInt32 BN_PAINT;
    internal static UInt32 BN_HILITE;
    internal static UInt32 BN_UNHILITE;
    internal static UInt32 BN_DISABLE;
    internal static UInt32 BN_DOUBLECLICKED;
    internal static UInt32 BN_PUSHED;
    internal static UInt32 BN_UNPUSHED;
    internal static UInt32 BN_DBLCLK;
    internal static UInt32 BN_SETFOCUS;
    internal static UInt32 BN_KILLFOCUS;
    internal static int BS_SPLITBUTTON;
    internal static int BS_DEFSPLITBUTTON;
    internal static int BS_COMMANDLINK;
    internal static int BS_DEFCOMMANDLINK;
    internal static int BS_PUSHBUTTON;
    internal static int BS_DEFPUSHBUTTON;
    internal static int BS_CHECKBOX;
    internal static int BS_AUTOCHECKBOX;
    internal static int BS_RADIOBUTTON;
    internal static int BS_3STATE;
    internal static int BS_AUTO3STATE;
    internal static int BS_GROUPBOX;
    internal static int BS_USERBUTTON;
    internal static int BS_AUTORADIOBUTTON;
    internal static int BS_PUSHBOX;
    internal static int BS_OWNERDRAW;
    internal static int BS_TYPEMASK;
    internal static int BS_LEFTTEXT;
    internal static int BS_TEXT;
    internal static int BS_ICON;
    internal static int BS_BITMAP;
    internal static int BS_LEFT;
    internal static int BS_RIGHT;
    internal static int BS_CENTER;
    internal static int BS_TOP;
    internal static int BS_BOTTOM;
    internal static int BS_VCENTER;
    internal static int BS_PUSHLIKE;
    internal static int BS_MULTILINE;
    internal static int BS_NOTIFY;
    internal static int BS_FLAT;
    internal static int BS_RIGHTBUTTON;
    internal static UInt32 CB_SETMINVISIBLE;
    internal static UInt32 CB_GETMINVISIBLE;
    internal static UInt32 CB_SETCUEBANNER;
    internal static UInt32 CB_GETCUEBANNER;
    internal static UInt32 CB_OKAY;
    internal static int CB_ERR;
    internal static int CB_ERRSPACE;
    internal static UInt32 CB_GETEDITSEL;
    internal static UInt32 CB_LIMITTEXT;
    internal static UInt32 CB_SETEDITSEL;
    internal static UInt32 CB_ADDSTRING;
    internal static UInt32 CB_DELETESTRING;
    internal static UInt32 CB_DIR;
    internal static UInt32 CB_GETCOUNT;
    internal static UInt32 CB_GETCURSEL;
    internal static UInt32 CB_GETLBTEXT;
    internal static UInt32 CB_GETLBTEXTLEN;
    internal static UInt32 CB_INSERTSTRING;
    internal static UInt32 CB_RESETCONTENT;
    internal static UInt32 CB_FINDSTRING;
    internal static UInt32 CB_SELECTSTRING;
    internal static UInt32 CB_SETCURSEL;
    internal static UInt32 CB_SHOWDROPDOWN;
    internal static UInt32 CB_GETITEMDATA;
    internal static UInt32 CB_SETITEMDATA;
    internal static UInt32 CB_GETDROPPEDCONTROLRECT;
    internal static UInt32 CB_SETITEMHEIGHT;
    internal static UInt32 CB_GETITEMHEIGHT;
    internal static UInt32 CB_SETEXTENDEDUI;
    internal static UInt32 CB_GETEXTENDEDUI;
    internal static UInt32 CB_GETDROPPEDSTATE;
    internal static UInt32 CB_FINDSTRINGEXACT;
    internal static UInt32 CB_SETLOCALE;
    internal static UInt32 CB_GETLOCALE;
    internal static UInt32 CB_GETTOPINDEX;
    internal static UInt32 CB_SETTOPINDEX;
    internal static UInt32 CB_GETHORIZONTALEXTENT;
    internal static UInt32 CB_SETHORIZONTALEXTENT;
    internal static UInt32 CB_GETDROPPEDWIDTH;
    internal static UInt32 CB_SETDROPPEDWIDTH;
    internal static UInt32 CB_INITSTORAGE;
    internal static UInt32 CB_MULTIPLEADDSTRING;
    internal static UInt32 CB_GETCOMBOBOXINFO;
    internal static UInt32 CB_MSGMAX;
    internal static int CB_MAX_DISK;
    internal static UInt32 CB_MAX_FILENAME;
    internal static UInt32 CB_MAX_CABINET_NAME;
    internal static UInt32 CB_MAX_CAB_PATH;
    internal static UInt32 CB_MAX_DISK_NAME;
    internal static int CBN_ERRSPACE;
    internal static UInt32 CBN_SELCHANGE;
    internal static UInt32 CBN_DBLCLK;
    internal static UInt32 CBN_SETFOCUS;
    internal static UInt32 CBN_KILLFOCUS;
    internal static UInt32 CBN_EDITCHANGE;
    internal static UInt32 CBN_EDITUPDATE;
    internal static UInt32 CBN_DROPDOWN;
    internal static UInt32 CBN_CLOSEUP;
    internal static UInt32 CBN_SELENDOK;
    internal static UInt32 CBN_SELENDCANCEL;
    internal static int CBS_SIMPLE;
    internal static int CBS_DROPDOWN;
    internal static int CBS_DROPDOWNLIST;
    internal static int CBS_OWNERDRAWFIXED;
    internal static int CBS_OWNERDRAWVARIABLE;
    internal static int CBS_AUTOHSCROLL;
    internal static int CBS_OEMCONVERT;
    internal static int CBS_SORT;
    internal static int CBS_HASSTRINGS;
    internal static int CBS_NOINTEGRALHEIGHT;
    internal static int CBS_DISABLENOSCROLL;
    internal static int CBS_UPPERCASE;
    internal static int CBS_LOWERCASE;
    internal static UInt32 CCM_FIRST;
    internal static UInt32 CCM_LAST;
    internal static UInt32 CCM_SETBKCOLOR;
    internal static UInt32 CCM_SETCOLORSCHEME;
    internal static UInt32 CCM_GETCOLORSCHEME;
    internal static UInt32 CCM_GETDROPTARGET;
    internal static UInt32 CCM_SETUNICODEFORMAT;
    internal static UInt32 CCM_GETUNICODEFORMAT;
    internal static UInt32 CCM_SETVERSION;
    internal static UInt32 CCM_GETVERSION;
    internal static UInt32 CCM_SETNOTIFYWINDOW;
    internal static UInt32 CCM_SETWINDOWTHEME;
    internal static UInt32 CCM_DPISCALE;
    internal static UInt32 CDM_GETSPEC;
    internal static UInt32 CDRF_DODEFAULT;
    internal static UInt32 CDRF_NEWFONT;
    internal static UInt32 CDRF_SKIPDEFAULT;
    internal static UInt32 CDRF_DOERASE;
    internal static UInt32 CDRF_SKIPPOSTPAINT;
    internal static UInt32 CDRF_NOTIFYPOSTPAINT;
    internal static UInt32 CDRF_NOTIFYITEMDRAW;
    internal static UInt32 CDRF_NOTIFYSUBITEMDRAW;
    internal static UInt32 CDRF_NOTIFYPOSTERASE;
    internal static UInt32 CHILDID_SELF;
    internal static UInt32 CSIDL_DESKTOP;
    internal static UInt32 CSIDL_INTERNET;
    internal static UInt32 CSIDL_PROGRAMS;
    internal static UInt32 CSIDL_CONTROLS;
    internal static UInt32 CSIDL_PRINTERS;
    internal static UInt32 CSIDL_PERSONAL;
    internal static UInt32 CSIDL_FAVORITES;
    internal static UInt32 CSIDL_STARTUP;
    internal static UInt32 CSIDL_RECENT;
    internal static UInt32 CSIDL_SENDTO;
    internal static UInt32 CSIDL_BITBUCKET;
    internal static UInt32 CSIDL_STARTMENU;
    internal static UInt32 CSIDL_MYDOCUMENTS;
    internal static UInt32 CSIDL_MYMUSIC;
    internal static UInt32 CSIDL_MYVIDEO;
    internal static UInt32 CSIDL_DESKTOPDIRECTORY;
    internal static UInt32 CSIDL_DRIVES;
    internal static UInt32 CSIDL_NETWORK;
    internal static UInt32 CSIDL_NETHOOD;
    internal static UInt32 CSIDL_FONTS;
    internal static UInt32 CSIDL_TEMPLATES;
    internal static UInt32 CSIDL_COMMON_STARTMENU;
    internal static UInt32 CSIDL_COMMON_PROGRAMS;
    internal static UInt32 CSIDL_COMMON_STARTUP;
    internal static UInt32 CSIDL_COMMON_DESKTOPDIRECTORY;
    internal static UInt32 CSIDL_APPDATA;
    internal static UInt32 CSIDL_PRINTHOOD;
    internal static UInt32 CSIDL_LOCAL_APPDATA;
    internal static UInt32 CSIDL_ALTSTARTUP;
    internal static UInt32 CSIDL_COMMON_ALTSTARTUP;
    internal static UInt32 CSIDL_COMMON_FAVORITES;
    internal static UInt32 CSIDL_INTERNET_CACHE;
    internal static UInt32 CSIDL_COOKIES;
    internal static UInt32 CSIDL_HISTORY;
    internal static UInt32 CSIDL_COMMON_APPDATA;
    internal static UInt32 CSIDL_WINDOWS;
    internal static UInt32 CSIDL_SYSTEM;
    internal static UInt32 CSIDL_PROGRAM_FILES;
    internal static UInt32 CSIDL_MYPICTURES;
    internal static UInt32 CSIDL_PROFILE;
    internal static UInt32 CSIDL_SYSTEMX86;
    internal static UInt32 CSIDL_PROGRAM_FILESX86;
    internal static UInt32 CSIDL_PROGRAM_FILES_COMMON;
    internal static UInt32 CSIDL_PROGRAM_FILES_COMMONX86;
    internal static UInt32 CSIDL_COMMON_TEMPLATES;
    internal static UInt32 CSIDL_COMMON_DOCUMENTS;
    internal static UInt32 CSIDL_COMMON_ADMINTOOLS;
    internal static UInt32 CSIDL_ADMINTOOLS;
    internal static UInt32 CSIDL_CONNECTIONS;
    internal static UInt32 CSIDL_COMMON_MUSIC;
    internal static UInt32 CSIDL_COMMON_PICTURES;
    internal static UInt32 CSIDL_COMMON_VIDEO;
    internal static UInt32 CSIDL_RESOURCES;
    internal static UInt32 CSIDL_RESOURCES_LOCALIZED;
    internal static UInt32 CSIDL_COMMON_OEM_LINKS;
    internal static UInt32 CSIDL_CDBURN_AREA;
    internal static UInt32 CSIDL_COMPUTERSNEARME;
    internal static UInt32 CSIDL_FLAG_CREATE;
    internal static UInt32 CSIDL_FLAG_DONT_VERIFY;
    internal static UInt32 CSIDL_FLAG_DONT_UNEXPAND;
    internal static UInt32 CSIDL_FLAG_NO_ALIAS;
    internal static UInt32 CSIDL_FLAG_PER_USER_INIT;
    internal static UInt32 CSIDL_FLAG_MASK;
    internal static UInt32 CSIDL_FLAG_PFTI_TRACKTARGET;
    internal static UInt32 CLR_MAJOR_VERSION;
    internal static UInt32 CLR_MINOR_VERSION;
    internal static UInt32 CLR_BUILD_VERSION;
    internal static UInt32 CLR_ASSEMBLY_MAJOR_VERSION;
    internal static UInt32 CLR_ASSEMBLY_MINOR_VERSION;
    internal static UInt32 CLR_ASSEMBLY_BUILD_VERSION;
    internal static int CLR_NONE;
    internal static int CLR_DEFAULT;
    internal static int CLR_HILIGHT;
    internal static UInt32 CLR_INVALID;
    internal static UInt32 cmb4;
    internal static UInt32 COLOR_HUESCROLL;
    internal static UInt32 COLOR_SATSCROLL;
    internal static UInt32 COLOR_LUMSCROLL;
    internal static UInt32 COLOR_HUE;
    internal static UInt32 COLOR_SAT;
    internal static UInt32 COLOR_LUM;
    internal static UInt32 COLOR_RED;
    internal static UInt32 COLOR_GREEN;
    internal static UInt32 COLOR_BLUE;
    internal static UInt32 COLOR_CURRENT;
    internal static UInt32 COLOR_RAINBOW;
    internal static UInt32 COLOR_SAVE;
    internal static UInt32 COLOR_ADD;
    internal static UInt32 COLOR_SOLID;
    internal static UInt32 COLOR_TUNE;
    internal static UInt32 COLOR_SCHEMES;
    internal static UInt32 COLOR_ELEMENT;
    internal static UInt32 COLOR_SAMPLES;
    internal static UInt32 COLOR_PALETTE;
    internal static UInt32 COLOR_MIX;
    internal static UInt32 COLOR_BOX1;
    internal static UInt32 COLOR_CUSTOM1;
    internal static UInt32 COLOR_HUEACCEL;
    internal static UInt32 COLOR_SATACCEL;
    internal static UInt32 COLOR_LUMACCEL;
    internal static UInt32 COLOR_REDACCEL;
    internal static UInt32 COLOR_GREENACCEL;
    internal static UInt32 COLOR_BLUEACCEL;
    internal static UInt32 COLOR_SOLID_LEFT;
    internal static UInt32 COLOR_SOLID_RIGHT;
    internal static UInt32 COLOR_MATCH_VERSION;
    internal static UInt32 COLOR_OPTIMIZATION;
    internal static UInt32 COLOR_NO_TRANSPARENT;
    internal static UInt32 CP_ACP;
    internal static int CW_USEDEFAULT;
    internal static string DATETIMEPICK_CLASS;
    internal static UInt32 DISPATCH_CONSTRUCT;
    internal static UInt32 DISPID_HTTPREQUEST_BASE;
    internal static UInt32 DISPID_HTTPREQUEST_OPEN;
    internal static UInt32 DISPID_HTTPREQUEST_SETREQUESTHEADER;
    internal static UInt32 DISPID_HTTPREQUEST_GETRESPONSEHEADER;
    internal static UInt32 DISPID_HTTPREQUEST_GETALLRESPONSEHEADERS;
    internal static UInt32 DISPID_HTTPREQUEST_SEND;
    internal static UInt32 DISPID_HTTPREQUEST_OPTION;
    internal static UInt32 DISPID_HTTPREQUEST_STATUS;
    internal static UInt32 DISPID_HTTPREQUEST_STATUSTEXT;
    internal static UInt32 DISPID_HTTPREQUEST_RESPONSETEXT;
    internal static UInt32 DISPID_HTTPREQUEST_RESPONSEBODY;
    internal static UInt32 DISPID_HTTPREQUEST_RESPONSESTREAM;
    internal static UInt32 DISPID_HTTPREQUEST_ABORT;
    internal static UInt32 DISPID_HTTPREQUEST_SETPROXY;
    internal static UInt32 DISPID_HTTPREQUEST_SETCREDENTIALS;
    internal static UInt32 DISPID_HTTPREQUEST_WAITFORRESPONSE;
    internal static UInt32 DISPID_HTTPREQUEST_SETTIMEOUTS;
    internal static UInt32 DISPID_HTTPREQUEST_SETCLIENTCERTIFICATE;
    internal static UInt32 DISPID_HTTPREQUEST_SETAUTOLOGONPOLICY;
    internal static int DISPID_AUTOSIZE;
    internal static int DISPID_BACKCOLOR;
    internal static int DISPID_BACKSTYLE;
    internal static int DISPID_BORDERCOLOR;
    internal static int DISPID_BORDERSTYLE;
    internal static int DISPID_BORDERWIDTH;
    internal static int DISPID_DRAWMODE;
    internal static int DISPID_DRAWSTYLE;
    internal static int DISPID_DRAWWIDTH;
    internal static int DISPID_FILLCOLOR;
    internal static int DISPID_FILLSTYLE;
    internal static int DISPID_FONT;
    internal static int DISPID_FORECOLOR;
    internal static int DISPID_ENABLED;
    internal static int DISPID_HWND;
    internal static int DISPID_TABSTOP;
    internal static int DISPID_TEXT;
    internal static int DISPID_CAPTION;
    internal static int DISPID_BORDERVISIBLE;
    internal static int DISPID_APPEARANCE;
    internal static int DISPID_MOUSEPOINTER;
    internal static int DISPID_MOUSEICON;
    internal static int DISPID_PICTURE;
    internal static int DISPID_VALID;
    internal static int DISPID_READYSTATE;
    internal static int DISPID_LISTINDEX;
    internal static int DISPID_SELECTED;
    internal static int DISPID_LIST;
    internal static int DISPID_COLUMN;
    internal static int DISPID_LISTCOUNT;
    internal static int DISPID_MULTISELECT;
    internal static int DISPID_MAXLENGTH;
    internal static int DISPID_PASSWORDCHAR;
    internal static int DISPID_SCROLLBARS;
    internal static int DISPID_WORDWRAP;
    internal static int DISPID_MULTILINE;
    internal static int DISPID_NUMBEROFROWS;
    internal static int DISPID_NUMBEROFCOLUMNS;
    internal static int DISPID_DISPLAYSTYLE;
    internal static int DISPID_GROUPNAME;
    internal static int DISPID_IMEMODE;
    internal static int DISPID_ACCELERATOR;
    internal static int DISPID_ENTERKEYBEHAVIOR;
    internal static int DISPID_TABKEYBEHAVIOR;
    internal static int DISPID_SELTEXT;
    internal static int DISPID_SELSTART;
    internal static int DISPID_SELLENGTH;
    internal static int DISPID_REFRESH;
    internal static int DISPID_DOCLICK;
    internal static int DISPID_ABOUTBOX;
    internal static int DISPID_ADDITEM;
    internal static int DISPID_CLEAR;
    internal static int DISPID_REMOVEITEM;
    internal static int DISPID_CLICK;
    internal static int DISPID_DBLCLICK;
    internal static int DISPID_KEYDOWN;
    internal static int DISPID_KEYPRESS;
    internal static int DISPID_KEYUP;
    internal static int DISPID_MOUSEDOWN;
    internal static int DISPID_MOUSEMOVE;
    internal static int DISPID_MOUSEUP;
    internal static int DISPID_ERROREVENT;
    internal static int DISPID_READYSTATECHANGE;
    internal static int DISPID_CLICK_VALUE;
    internal static int DISPID_RIGHTTOLEFT;
    internal static int DISPID_TOPTOBOTTOM;
    internal static int DISPID_THIS;
    internal static int DISPID_AMBIENT_BACKCOLOR;
    internal static int DISPID_AMBIENT_DISPLAYNAME;
    internal static int DISPID_AMBIENT_FONT;
    internal static int DISPID_AMBIENT_FORECOLOR;
    internal static int DISPID_AMBIENT_LOCALEID;
    internal static int DISPID_AMBIENT_MESSAGEREFLECT;
    internal static int DISPID_AMBIENT_SCALEUNITS;
    internal static int DISPID_AMBIENT_TEXTALIGN;
    internal static int DISPID_AMBIENT_USERMODE;
    internal static int DISPID_AMBIENT_UIDEAD;
    internal static int DISPID_AMBIENT_SHOWGRABHANDLES;
    internal static int DISPID_AMBIENT_SHOWHATCHING;
    internal static int DISPID_AMBIENT_DISPLAYASDEFAULT;
    internal static int DISPID_AMBIENT_SUPPORTSMNEMONICS;
    internal static int DISPID_AMBIENT_AUTOCLIP;
    internal static int DISPID_AMBIENT_APPEARANCE;
    internal static int DISPID_AMBIENT_CODEPAGE;
    internal static int DISPID_AMBIENT_PALETTE;
    internal static int DISPID_AMBIENT_CHARSET;
    internal static int DISPID_AMBIENT_TRANSFERPRIORITY;
    internal static int DISPID_AMBIENT_RIGHTTOLEFT;
    internal static int DISPID_AMBIENT_TOPTOBOTTOM;
    internal static int DISPID_Name;
    internal static int DISPID_Delete;
    internal static int DISPID_Object;
    internal static int DISPID_Parent;
    internal static UInt32 DISPID_FONT_NAME;
    internal static UInt32 DISPID_FONT_SIZE;
    internal static UInt32 DISPID_FONT_BOLD;
    internal static UInt32 DISPID_FONT_ITALIC;
    internal static UInt32 DISPID_FONT_UNDER;
    internal static UInt32 DISPID_FONT_STRIKE;
    internal static UInt32 DISPID_FONT_WEIGHT;
    internal static UInt32 DISPID_FONT_CHARSET;
    internal static UInt32 DISPID_FONT_CHANGED;
    internal static UInt32 DISPID_PICT_HANDLE;
    internal static UInt32 DISPID_PICT_HPAL;
    internal static UInt32 DISPID_PICT_TYPE;
    internal static UInt32 DISPID_PICT_WIDTH;
    internal static UInt32 DISPID_PICT_HEIGHT;
    internal static UInt32 DISPID_PICT_RENDER;
    internal static int DISPID_UNKNOWN;
    internal static UInt32 DISPID_VALUE;
    internal static int DISPID_PROPERTYPUT;
    internal static int DISPID_NEWENUM;
    internal static int DISPID_EVALUATE;
    internal static int DISPID_CONSTRUCTOR;
    internal static int DISPID_DESTRUCTOR;
    internal static int DISPID_COLLECT;
    internal static int DISPID_STARTENUM;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_CONNECT;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_DISCONNECT;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_RECONNECT;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_DELETE_SAVED_CREDENTIALS;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_UPDATE_SESSION_DISPLAYSETTINGS;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_ATTACH_EVENT;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_DETACH_EVENT;
    internal static UInt32 DISPID_PROP_REMOTEDESKTOPCLIENT_SETTINGS;
    internal static UInt32 DISPID_PROP_REMOTEDESKTOPCLIENT_ACTIONS;
    internal static UInt32 DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCH_POINTER;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_SET_RDPPROPERTY;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_RDPPROPERTY;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_APPLY_SETTINGS;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_RETRIEVE_SETTINGS;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_SUSPEND_SCREEN_UPDATES;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_RESUME_SCREEN_UPDATES;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_EXECUTE_REMOTE_ACTION;
    internal static UInt32 DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_SNAPSHOT;
    internal static UInt32 DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_ENABLED;
    internal static UInt32 DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_EVENTSENABLED;
    internal static UInt32 DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_POINTERSPEED;
    internal static UInt32 DISPID_AX_CONNECTING;
    internal static UInt32 DISPID_AX_CONNECTED;
    internal static UInt32 DISPID_AX_LOGINCOMPLETED;
    internal static UInt32 DISPID_AX_DISCONNECTED;
    internal static UInt32 DISPID_AX_STATUSCHANGED;
    internal static UInt32 DISPID_AX_AUTORECONNECTING;
    internal static UInt32 DISPID_AX_AUTORECONNECTED;
    internal static UInt32 DISPID_AX_DIALOGDISPLAYING;
    internal static UInt32 DISPID_AX_DIALOGDISMISSED;
    internal static UInt32 DISPID_AX_NETWORKSTATUSCHANGED;
    internal static UInt32 DISPID_AX_ADMINMESSAGERECEIVED;
    internal static UInt32 DISPID_AX_KEYCOMBINATIONPRESSED;
    internal static UInt32 DISPID_AX_REMOTEDESKTOPSIZECHANGED;
    internal static UInt32 DISPID_AX_TOUCHPOINTERCURSORMOVED;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_OPEN;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_CLOSE;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SETSHAREDRECT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_GETSHAREDRECT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_VIEWERCONNECT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_VIEWERDISCONNECT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_TERMINATE_CONNECTION;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_CREATE_INVITATION;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_REQUEST_CONTROL;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_VIRTUAL_CHANNEL_CREATE;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_VIRTUAL_CHANNEL_SEND_DATA;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_VIRTUAL_CHANNEL_SET_ACCESS;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_PAUSE;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_RESUME;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SHOW_WINDOW;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_REQUEST_COLOR_DEPTH_CHANGE;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STARTREVCONNECTLISTENER;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_CONNECTTOCLIENT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SET_RENDERING_SURFACE;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SEND_MOUSE_BUTTON_EVENT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SEND_MOUSE_MOVE_EVENT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SEND_MOUSE_WHEEL_EVENT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SEND_KEYBOARD_EVENT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SEND_SYNC_EVENT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_BEGIN_TOUCH_FRAME;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_ADD_TOUCH_INPUT;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_END_TOUCH_FRAME;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_CONNECTUSINGTRANSPORTSTREAM;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_SENDCONTROLLEVELCHANGERESPONSE;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_GETFRAMEBUFFERBITS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_DISPIDVALUE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_ID;
    internal static UInt32 DISPID_RDPSRAPI_PROP_SESSION_PROPERTIES;
    internal static UInt32 DISPID_RDPSRAPI_PROP_ATTENDEES;
    internal static UInt32 DISPID_RDPSRAPI_PROP_INVITATIONS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_INVITATION;
    internal static UInt32 DISPID_RDPSRAPI_PROP_CHANNELMANAGER;
    internal static UInt32 DISPID_RDPSRAPI_PROP_VIRTUAL_CHANNEL_GETNAME;
    internal static UInt32 DISPID_RDPSRAPI_PROP_VIRTUAL_CHANNEL_GETFLAGS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_VIRTUAL_CHANNEL_GETPRIORITY;
    internal static UInt32 DISPID_RDPSRAPI_PROP_WINDOWID;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPLICATION;
    internal static UInt32 DISPID_RDPSRAPI_PROP_WINDOWSHARED;
    internal static UInt32 DISPID_RDPSRAPI_PROP_WINDOWNAME;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPNAME;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPLICATION_FILTER;
    internal static UInt32 DISPID_RDPSRAPI_PROP_WINDOW_LIST;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPLICATION_LIST;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPFILTER_ENABLED;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPFILTERENABLED;
    internal static UInt32 DISPID_RDPSRAPI_PROP_SHARED;
    internal static UInt32 DISPID_RDPSRAPI_PROP_INVITATIONITEM;
    internal static UInt32 DISPID_RDPSRAPI_PROP_DBG_CLX_CMDLINE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_APPFLAGS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_WNDFLAGS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_PROTOCOL_TYPE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_LOCAL_PORT;
    internal static UInt32 DISPID_RDPSRAPI_PROP_LOCAL_IP;
    internal static UInt32 DISPID_RDPSRAPI_PROP_PEER_PORT;
    internal static UInt32 DISPID_RDPSRAPI_PROP_PEER_IP;
    internal static UInt32 DISPID_RDPSRAPI_PROP_ATTENDEE_FLAGS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_CONINFO;
    internal static UInt32 DISPID_RDPSRAPI_PROP_CONNECTION_STRING;
    internal static UInt32 DISPID_RDPSRAPI_PROP_GROUP_NAME;
    internal static UInt32 DISPID_RDPSRAPI_PROP_PASSWORD;
    internal static UInt32 DISPID_RDPSRAPI_PROP_ATTENDEELIMIT;
    internal static UInt32 DISPID_RDPSRAPI_PROP_REVOKED;
    internal static UInt32 DISPID_RDPSRAPI_PROP_DISCONNECTED_STRING;
    internal static UInt32 DISPID_RDPSRAPI_PROP_USESMARTSIZING;
    internal static UInt32 DISPID_RDPSRAPI_PROP_SESSION_COLORDEPTH;
    internal static UInt32 DISPID_RDPSRAPI_PROP_REASON;
    internal static UInt32 DISPID_RDPSRAPI_PROP_CODE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_CTRL_LEVEL;
    internal static UInt32 DISPID_RDPSRAPI_PROP_REMOTENAME;
    internal static UInt32 DISPID_RDPSRAPI_PROP_COUNT;
    internal static UInt32 DISPID_RDPSRAPI_PROP_FRAMEBUFFER_HEIGHT;
    internal static UInt32 DISPID_RDPSRAPI_PROP_FRAMEBUFFER_WIDTH;
    internal static UInt32 DISPID_RDPSRAPI_PROP_FRAMEBUFFER_BPP;
    internal static UInt32 DISPID_RDPSRAPI_PROP_FRAMEBUFFER;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_ATTENDEE_CONNECTED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_ATTENDEE_DISCONNECTED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_ATTENDEE_UPDATE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_ERROR;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIEWER_CONNECTED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIEWER_DISCONNECTED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIEWER_AUTHENTICATED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIEWER_CONNECTFAILED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_CTRLLEVEL_CHANGE_REQUEST;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_GRAPHICS_STREAM_PAUSED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_GRAPHICS_STREAM_RESUMED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_JOIN;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_LEAVE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_DATARECEIVED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_SENDCOMPLETED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_APPLICATION_OPEN;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_APPLICATION_CLOSE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_APPLICATION_UPDATE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_WINDOW_OPEN;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_WINDOW_CLOSE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_WINDOW_UPDATE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_APPFILTER_UPDATE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_SHARED_RECT_CHANGED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_FOCUSRELEASED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_SHARED_DESKTOP_SETTINGS_CHANGED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_CTRLLEVEL_CHANGE_RESPONSE;
    internal static UInt32 DISPID_RDPAPI_EVENT_ON_BOUNDING_RECT_CHANGED;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STREAM_ALLOCBUFFER;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STREAM_FREEBUFFER;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STREAMSENDDATA;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STREAMREADDATA;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STREAMOPEN;
    internal static UInt32 DISPID_RDPSRAPI_METHOD_STREAMCLOSE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_STREAMBUFFER_STORAGE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_STREAMBUFFER_PAYLOADSIZE;
    internal static UInt32 DISPID_RDPSRAPI_PROP_STREAMBUFFER_PAYLOADOFFSET;
    internal static UInt32 DISPID_RDPSRAPI_PROP_STREAMBUFFER_CONTEXT;
    internal static UInt32 DISPID_RDPSRAPI_PROP_STREAMBUFFER_FLAGS;
    internal static UInt32 DISPID_RDPSRAPI_PROP_STREAMBUFFER_STORESIZE;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_STREAM_SENDCOMPLETED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_STREAM_DATARECEIVED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_ON_STREAM_CLOSED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_VIEW_MOUSE_BUTTON_RECEIVED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_VIEW_MOUSE_MOVE_RECEIVED;
    internal static UInt32 DISPID_RDPSRAPI_EVENT_VIEW_MOUSE_WHEEL_RECEIVED;
    internal static UInt32 DISPID_EVENT_ON_STATE_CHANGED;
    internal static UInt32 DISPID_EVENT_ON_TERMINATION;
    internal static UInt32 DISPID_EVENT_ON_CONTEXT_DATA;
    internal static UInt32 DISPID_EVENT_ON_SEND_ERROR;
    internal static UInt32 DISPID_QUERY_RANKVECTOR;
    internal static UInt32 DISPID_QUERY_RANK;
    internal static UInt32 DISPID_QUERY_HITCOUNT;
    internal static UInt32 DISPID_QUERY_WORKID;
    internal static UInt32 DISPID_QUERY_ALL;
    internal static UInt32 DISPID_QUERY_UNFILTERED;
    internal static UInt32 DISPID_QUERY_REVNAME;
    internal static UInt32 DISPID_QUERY_VIRTUALPATH;
    internal static UInt32 DISPID_QUERY_LASTSEENTIME;
    internal static UInt32 DISPID_QUERY_METADATA_VROOTUSED;
    internal static UInt32 DISPID_QUERY_METADATA_VROOTAUTOMATIC;
    internal static UInt32 DISPID_QUERY_METADATA_VROOTMANUAL;
    internal static UInt32 DISPID_QUERY_METADATA_PROPGUID;
    internal static UInt32 DISPID_QUERY_METADATA_PROPDISPID;
    internal static UInt32 DISPID_QUERY_METADATA_PROPNAME;
    internal static UInt32 DISPID_QUERY_METADATA_STORELEVEL;
    internal static UInt32 DISPID_QUERY_METADATA_PROPMODIFIABLE;
    internal static UInt32 DISPID_SELECTIONCHANGED;
    internal static UInt32 DISPID_FILELISTENUMDONE;
    internal static UInt32 DISPID_VERBINVOKED;
    internal static UInt32 DISPID_DEFAULTVERBINVOKED;
    internal static UInt32 DISPID_BEGINDRAG;
    internal static UInt32 DISPID_VIEWMODECHANGED;
    internal static UInt32 DISPID_NOITEMSTATE_CHANGED;
    internal static UInt32 DISPID_CONTENTSCHANGED;
    internal static UInt32 DISPID_FOCUSCHANGED;
    internal static UInt32 DISPID_CHECKSTATECHANGED;
    internal static UInt32 DISPID_ORDERCHANGED;
    internal static UInt32 DISPID_VIEWPAINTDONE;
    internal static UInt32 DISPID_COLUMNSCHANGED;
    internal static UInt32 DISPID_CTRLMOUSEWHEEL;
    internal static UInt32 DISPID_SORTDONE;
    internal static UInt32 DISPID_ICONSIZECHANGED;
    internal static UInt32 DISPID_FOLDERCHANGED;
    internal static UInt32 DISPID_FILTERINVOKED;
    internal static UInt32 DISPID_WORDWHEELEDITED;
    internal static UInt32 DISPID_SELECTEDITEMCHANGED;
    internal static UInt32 DISPID_EXPLORERWINDOWREADY;
    internal static UInt32 DISPID_UPDATEIMAGE;
    internal static UInt32 DISPID_INITIALENUMERATIONDONE;
    internal static UInt32 DISPID_ENTERPRISEIDCHANGED;
    internal static UInt32 DISPID_ENTERPRESSED;
    internal static UInt32 DISPID_SEARCHCOMMAND_START;
    internal static UInt32 DISPID_SEARCHCOMMAND_COMPLETE;
    internal static UInt32 DISPID_SEARCHCOMMAND_ABORT;
    internal static UInt32 DISPID_SEARCHCOMMAND_UPDATE;
    internal static UInt32 DISPID_SEARCHCOMMAND_PROGRESSTEXT;
    internal static UInt32 DISPID_SEARCHCOMMAND_ERROR;
    internal static UInt32 DISPID_SEARCHCOMMAND_RESTORE;
    internal static UInt32 DISPID_IADCCTL_DIRTY;
    internal static UInt32 DISPID_IADCCTL_PUBCAT;
    internal static UInt32 DISPID_IADCCTL_SORT;
    internal static UInt32 DISPID_IADCCTL_FORCEX86;
    internal static UInt32 DISPID_IADCCTL_SHOWPOSTSETUP;
    internal static UInt32 DISPID_IADCCTL_ONDOMAIN;
    internal static UInt32 DISPID_IADCCTL_DEFAULTCAT;
    internal static int DISPID_ACC_PARENT;
    internal static int DISPID_ACC_CHILDCOUNT;
    internal static int DISPID_ACC_CHILD;
    internal static int DISPID_ACC_NAME;
    internal static int DISPID_ACC_VALUE;
    internal static int DISPID_ACC_DESCRIPTION;
    internal static int DISPID_ACC_ROLE;
    internal static int DISPID_ACC_STATE;
    internal static int DISPID_ACC_HELP;
    internal static int DISPID_ACC_HELPTOPIC;
    internal static int DISPID_ACC_KEYBOARDSHORTCUT;
    internal static int DISPID_ACC_FOCUS;
    internal static int DISPID_ACC_SELECTION;
    internal static int DISPID_ACC_DEFAULTACTION;
    internal static int DISPID_ACC_SELECT;
    internal static int DISPID_ACC_LOCATION;
    internal static int DISPID_ACC_NAVIGATE;
    internal static int DISPID_ACC_HITTEST;
    internal static int DISPID_ACC_DODEFAULTACTION;
    internal static UInt32 DISPID_XOBJ_MIN;
    internal static UInt32 DISPID_XOBJ_MAX;
    internal static UInt32 DISPID_XOBJ_BASE;
    internal static UInt32 DISPID_XMLELEMENTCOLLECTION;
    internal static UInt32 DISPID_XMLELEMENTCOLLECTION_LENGTH;
    internal static int DISPID_XMLELEMENTCOLLECTION_NEWENUM;
    internal static UInt32 DISPID_XMLELEMENTCOLLECTION_ITEM;
    internal static UInt32 DISPID_XMLDOCUMENT;
    internal static UInt32 DISPID_XMLDOCUMENT_ROOT;
    internal static UInt32 DISPID_XMLDOCUMENT_FILESIZE;
    internal static UInt32 DISPID_XMLDOCUMENT_FILEMODIFIEDDATE;
    internal static UInt32 DISPID_XMLDOCUMENT_FILEUPDATEDDATE;
    internal static UInt32 DISPID_XMLDOCUMENT_URL;
    internal static UInt32 DISPID_XMLDOCUMENT_MIMETYPE;
    internal static UInt32 DISPID_XMLDOCUMENT_READYSTATE;
    internal static UInt32 DISPID_XMLDOCUMENT_CREATEELEMENT;
    internal static UInt32 DISPID_XMLDOCUMENT_CHARSET;
    internal static UInt32 DISPID_XMLDOCUMENT_VERSION;
    internal static UInt32 DISPID_XMLDOCUMENT_DOCTYPE;
    internal static UInt32 DISPID_XMLDOCUMENT_DTDURL;
    internal static UInt32 DISPID_XMLDOCUMENT_ASYNC;
    internal static UInt32 DISPID_XMLDOCUMENT_CASEINSENSITIVE;
    internal static UInt32 DISPID_XMLDOCUMENT_BASEURL;
    internal static UInt32 DISPID_XMLDOCUMENT_XML;
    internal static UInt32 DISPID_XMLDOCUMENT_LASTERROR;
    internal static UInt32 DISPID_XMLDOCUMENT_TRIMWHITESPACE;
    internal static UInt32 DISPID_XMLDOCUMENT_COMMIT;
    internal static UInt32 DISPID_XMLELEMENT;
    internal static UInt32 DISPID_XMLELEMENT_TAGNAME;
    internal static UInt32 DISPID_XMLELEMENT_PARENT;
    internal static UInt32 DISPID_XMLELEMENT_SETATTRIBUTE;
    internal static UInt32 DISPID_XMLELEMENT_GETATTRIBUTE;
    internal static UInt32 DISPID_XMLELEMENT_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_XMLELEMENT_CHILDREN;
    internal static UInt32 DISPID_XMLELEMENT_TYPE;
    internal static UInt32 DISPID_XMLELEMENT_TEXT;
    internal static UInt32 DISPID_XMLELEMENT_ADDCHILD;
    internal static UInt32 DISPID_XMLELEMENT_REMOVECHILD;
    internal static UInt32 DISPID_XMLELEMENT_ATTRIBUTES;
    internal static UInt32 DISPID_XMLNOTIFSINK;
    internal static UInt32 DISPID_XMLNOTIFSINK_CHILDADDED;
    internal static UInt32 DISPID_XMLATTRIBUTE;
    internal static UInt32 DISPID_XMLATTRIBUTE_NAME;
    internal static UInt32 DISPID_XMLATTRIBUTE_VALUE;
    internal static UInt32 DISPID_XMLERROR;
    internal static UInt32 DISPID_XMLERROR_REASON;
    internal static UInt32 DISPID_XMLERROR_LINE;
    internal static UInt32 DISPID_XMLERROR_POS;
    internal static UInt32 DISPID_NODE;
    internal static UInt32 DISPID_NODE_NAME;
    internal static UInt32 DISPID_NODE_PARENT;
    internal static UInt32 DISPID_NODE_TYPE;
    internal static UInt32 DISPID_NODE_VALUE;
    internal static UInt32 DISPID_NODE_SETATTRIBUTE;
    internal static UInt32 DISPID_NODE_GETATTRIBUTE;
    internal static UInt32 DISPID_NODE_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_NODE_ATTRIBUTES;
    internal static UInt32 DISPID_NODE_ADD;
    internal static UInt32 DISPID_NODE_REMOVE;
    internal static UInt32 DISPID_NODE_CHILDREN;
    internal static UInt32 DISPID_NODELIST;
    internal static UInt32 DISPID_NODELIST_NEWENUM;
    internal static UInt32 DISPID_NODELIST_NEXT;
    internal static UInt32 DISPID_NODELIST_CURRENT;
    internal static UInt32 DISPID_NODELIST_MOVE;
    internal static UInt32 DISPID_NODELIST_MOVETONODE;
    internal static UInt32 DISPID_NODELIST_LENGTH;
    internal static UInt32 DISPID_NODELIST_ITEM;
    internal static UInt32 DISPID_DOM_BASE;
    internal static UInt32 DISPID_DOM_COLLECTION_BASE;
    internal static UInt32 DISPID_DOM_COLLECTION_MAX;
    internal static UInt32 DISPID_DOM_NODE;
    internal static UInt32 DISPID_DOM_NODE_NODENAME;
    internal static UInt32 DISPID_DOM_NODE_NODEVALUE;
    internal static UInt32 DISPID_DOM_NODE_NODETYPE;
    internal static UInt32 DISPID_DOM_NODE_NODETYPEENUM;
    internal static UInt32 DISPID_DOM_NODE_PARENTNODE;
    internal static UInt32 DISPID_DOM_NODE_CHILDNODES;
    internal static UInt32 DISPID_DOM_NODE_FIRSTCHILD;
    internal static UInt32 DISPID_DOM_NODE_LASTCHILD;
    internal static UInt32 DISPID_DOM_NODE_PREVIOUSSIBLING;
    internal static UInt32 DISPID_DOM_NODE_NEXTSIBLING;
    internal static UInt32 DISPID_DOM_NODE_ATTRIBUTES;
    internal static UInt32 DISPID_DOM_NODE_INSERTBEFORE;
    internal static UInt32 DISPID_DOM_NODE_REPLACECHILD;
    internal static UInt32 DISPID_DOM_NODE_REMOVECHILD;
    internal static UInt32 DISPID_DOM_NODE_APPENDCHILD;
    internal static UInt32 DISPID_DOM_NODE_HASCHILDNODES;
    internal static UInt32 DISPID_DOM_NODE_OWNERDOC;
    internal static UInt32 DISPID_DOM_NODE_CLONENODE;
    internal static UInt32 DISPID_XMLDOM_NODE;
    internal static UInt32 DISPID_XMLDOM_NODE_STRINGTYPE;
    internal static UInt32 DISPID_XMLDOM_NODE_SPECIFIED;
    internal static UInt32 DISPID_XMLDOM_NODE_DEFINITION;
    internal static UInt32 DISPID_XMLDOM_NODE_TEXT;
    internal static UInt32 DISPID_XMLDOM_NODE_NODETYPEDVALUE;
    internal static UInt32 DISPID_XMLDOM_NODE_DATATYPE;
    internal static UInt32 DISPID_XMLDOM_NODE_XML;
    internal static UInt32 DISPID_XMLDOM_NODE_TRANSFORMNODE;
    internal static UInt32 DISPID_XMLDOM_NODE_SELECTNODES;
    internal static UInt32 DISPID_XMLDOM_NODE_SELECTSINGLENODE;
    internal static UInt32 DISPID_XMLDOM_NODE_PARSED;
    internal static UInt32 DISPID_XMLDOM_NODE_NAMESPACE;
    internal static UInt32 DISPID_XMLDOM_NODE_PREFIX;
    internal static UInt32 DISPID_XMLDOM_NODE_BASENAME;
    internal static UInt32 DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT;
    internal static UInt32 DISPID_XMLDOM_NODE__TOP;
    internal static UInt32 DISPID_DOM_DOCUMENT;
    internal static UInt32 DISPID_DOM_DOCUMENT_DOCTYPE;
    internal static UInt32 DISPID_DOM_DOCUMENT_IMPLEMENTATION;
    internal static UInt32 DISPID_DOM_DOCUMENT_DOCUMENTELEMENT;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATEELEMENT;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATETEXTNODE;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATECOMMENT;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATECDATASECTION;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATEATTRIBUTE;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATEENTITY;
    internal static UInt32 DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE;
    internal static UInt32 DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME;
    internal static UInt32 DISPID_DOM_DOCUMENT_TOP;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_CREATENODE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_CREATENODEEX;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_NODEFROMID;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_LOAD;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_PARSEERROR;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_URL;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_ASYNC;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_ABORT;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_LOADXML;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_SAVE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_VALIDATE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT__TOP;
    internal static UInt32 DISPID_DOM_NODELIST;
    internal static UInt32 DISPID_DOM_NODELIST_ITEM;
    internal static UInt32 DISPID_DOM_NODELIST_LENGTH;
    internal static UInt32 DISPID_XMLDOM_NODELIST;
    internal static UInt32 DISPID_XMLDOM_NODELIST_NEXTNODE;
    internal static UInt32 DISPID_XMLDOM_NODELIST_RESET;
    internal static UInt32 DISPID_XMLDOM_NODELIST_NEWENUM;
    internal static UInt32 DISPID_XMLDOM_NODELIST__TOP;
    internal static UInt32 DISPID_DOM_NAMEDNODEMAP;
    internal static UInt32 DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM;
    internal static UInt32 DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM;
    internal static UInt32 DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP_RESET;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM;
    internal static UInt32 DISPID_XMLDOM_NAMEDNODEMAP__TOP;
    internal static UInt32 DISPID_DOM_W3CWRAPPERS;
    internal static UInt32 DISPID_DOM_DOCUMENTFRAGMENT;
    internal static UInt32 DISPID_DOM_DOCUMENTFRAGMENT__TOP;
    internal static UInt32 DISPID_DOM_ELEMENT;
    internal static UInt32 DISPID_DOM_ELEMENT_GETTAGNAME;
    internal static UInt32 DISPID_DOM_ELEMENT_GETATTRIBUTES;
    internal static UInt32 DISPID_DOM_ELEMENT_GETATTRIBUTE;
    internal static UInt32 DISPID_DOM_ELEMENT_SETATTRIBUTE;
    internal static UInt32 DISPID_DOM_ELEMENT_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_DOM_ELEMENT_GETATTRIBUTENODE;
    internal static UInt32 DISPID_DOM_ELEMENT_SETATTRIBUTENODE;
    internal static UInt32 DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE;
    internal static UInt32 DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME;
    internal static UInt32 DISPID_DOM_ELEMENT_NORMALIZE;
    internal static UInt32 DISPID_DOM_ELEMENT__TOP;
    internal static UInt32 DISPID_DOM_DATA;
    internal static UInt32 DISPID_DOM_DATA_DATA;
    internal static UInt32 DISPID_DOM_DATA_LENGTH;
    internal static UInt32 DISPID_DOM_DATA_SUBSTRING;
    internal static UInt32 DISPID_DOM_DATA_APPEND;
    internal static UInt32 DISPID_DOM_DATA_INSERT;
    internal static UInt32 DISPID_DOM_DATA_DELETE;
    internal static UInt32 DISPID_DOM_DATA_REPLACE;
    internal static UInt32 DISPID_DOM_DATA__TOP;
    internal static UInt32 DISPID_DOM_ATTRIBUTE;
    internal static UInt32 DISPID_DOM_ATTRIBUTE_GETNAME;
    internal static UInt32 DISPID_DOM_ATTRIBUTE_SPECIFIED;
    internal static UInt32 DISPID_DOM_ATTRIBUTE_VALUE;
    internal static UInt32 DISPID_DOM_ATTRIBUTE__TOP;
    internal static UInt32 DISPID_DOM_TEXT;
    internal static UInt32 DISPID_DOM_TEXT_SPLITTEXT;
    internal static UInt32 DISPID_DOM_TEXT_JOINTEXT;
    internal static UInt32 DISPID_DOM_TEXT__TOP;
    internal static UInt32 DISPID_DOM_PI;
    internal static UInt32 DISPID_DOM_PI_TARGET;
    internal static UInt32 DISPID_DOM_PI_DATA;
    internal static UInt32 DISPID_DOM_PI__TOP;
    internal static UInt32 DISPID_DOM_DOCUMENTTYPE;
    internal static UInt32 DISPID_DOM_DOCUMENTTYPE_NAME;
    internal static UInt32 DISPID_DOM_DOCUMENTTYPE_ENTITIES;
    internal static UInt32 DISPID_DOM_DOCUMENTTYPE_NOTATIONS;
    internal static UInt32 DISPID_DOM_DOCUMENTTYPE__TOP;
    internal static UInt32 DISPID_DOM_NOTATION;
    internal static UInt32 DISPID_DOM_NOTATION_PUBLICID;
    internal static UInt32 DISPID_DOM_NOTATION_SYSTEMID;
    internal static UInt32 DISPID_DOM_NOTATION__TOP;
    internal static UInt32 DISPID_DOM_ENTITY;
    internal static UInt32 DISPID_DOM_ENTITY_PUBLICID;
    internal static UInt32 DISPID_DOM_ENTITY_SYSTEMID;
    internal static UInt32 DISPID_DOM_ENTITY_NOTATIONNAME;
    internal static UInt32 DISPID_DOM_ENTITY__TOP;
    internal static UInt32 DISPID_DOM_W3CWRAPPERS_TOP;
    internal static UInt32 DISPID_DOM_IMPLEMENTATION;
    internal static UInt32 DISPID_DOM_IMPLEMENTATION_HASFEATURE;
    internal static UInt32 DISPID_DOM_IMPLEMENTATION__TOP;
    internal static UInt32 DISPID_DOM__TOP;
    internal static UInt32 DISPID_DOM_ERROR;
    internal static UInt32 DISPID_DOM_ERROR_ERRORCODE;
    internal static UInt32 DISPID_DOM_ERROR_URL;
    internal static UInt32 DISPID_DOM_ERROR_REASON;
    internal static UInt32 DISPID_DOM_ERROR_SRCTEXT;
    internal static UInt32 DISPID_DOM_ERROR_LINE;
    internal static UInt32 DISPID_DOM_ERROR_LINEPOS;
    internal static UInt32 DISPID_DOM_ERROR_FILEPOS;
    internal static UInt32 DISPID_DOM_ERROR__TOP;
    internal static UInt32 DISPID_DOM_ERROR2;
    internal static UInt32 DISPID_DOM_ERROR2_ALLERRORS;
    internal static UInt32 DISPID_DOM_ERROR2_ERRORPARAMETERS;
    internal static UInt32 DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT;
    internal static UInt32 DISPID_DOM_ERROR2_ERRORXPATH;
    internal static UInt32 DISPID_DOM_ERROR2__TOP;
    internal static UInt32 DISPID_DOM_ERRORCOLLECTION;
    internal static UInt32 DISPID_DOM_ERRORCOLLECTION_LENGTH;
    internal static UInt32 DISPID_DOM_ERRORCOLLECTION_NEXT;
    internal static UInt32 DISPID_DOM_ERRORCOLLECTION_RESET;
    internal static UInt32 DISPID_DOM_ERRORCOLLECTION__TOP;
    internal static UInt32 DISPID_XTLRUNTIME;
    internal static UInt32 DISPID_XTLRUNTIME_UNIQUEID;
    internal static UInt32 DISPID_XTLRUNTIME_DEPTH;
    internal static UInt32 DISPID_XTLRUNTIME_CHILDNUMBER;
    internal static UInt32 DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER;
    internal static UInt32 DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER;
    internal static UInt32 DISPID_XTLRUNTIME_FORMATINDEX;
    internal static UInt32 DISPID_XTLRUNTIME_FORMATNUMBER;
    internal static UInt32 DISPID_XTLRUNTIME_FORMATDATE;
    internal static UInt32 DISPID_XTLRUNTIME_FORMATTIME;
    internal static UInt32 DISPID_XTLRUNTIME__TOP;
    internal static UInt32 DISPID_XMLDOMEVENT;
    internal static int DISPID_XMLDOMEVENT_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_XMLDOMEVENT_ONDATAAVAILABLE;
    internal static UInt32 DISPID_XMLDOMEVENT__TOP;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2_NAMESPACES;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2_SCHEMAS;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2_VALIDATE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2_SETPROPERTY;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2_GETPROPERTY;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT2__TOP;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT3;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT3_VALIDATENODE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT3_IMPORTNODE;
    internal static UInt32 DISPID_XMLDOM_DOCUMENT3__TOP;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION_ADD;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION_GET;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION;
    internal static UInt32 DISPID_XMLDOM_SCHEMACOLLECTION__TOP;
    internal static UInt32 DISPID_XMLDOM_SELECTION;
    internal static UInt32 DISPID_XMLDOM_SELECTION_EXPR;
    internal static UInt32 DISPID_XMLDOM_SELECTION_CONTEXT;
    internal static UInt32 DISPID_XMLDOM_SELECTION_PEEKNODE;
    internal static UInt32 DISPID_XMLDOM_SELECTION_MATCHES;
    internal static UInt32 DISPID_XMLDOM_SELECTION_REMOVENEXT;
    internal static UInt32 DISPID_XMLDOM_SELECTION_REMOVEALL;
    internal static UInt32 DISPID_XMLDOM_SELECTION_CLONE;
    internal static UInt32 DISPID_XMLDOM_SELECTION_GETPROPERTY;
    internal static UInt32 DISPID_XMLDOM_SELECTION_SETPROPERTY;
    internal static UInt32 DISPID_XMLDOM_SELECTION__TOP;
    internal static UInt32 DISPID_XMLDOM_TEMPLATE;
    internal static UInt32 DISPID_XMLDOM_TEMPLATE_STYLESHEET;
    internal static UInt32 DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR;
    internal static UInt32 DISPID_XMLDOM_TEMPLATE__TOP;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_INPUT;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_SETSTARTMODE;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_STARTMODE;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_STARTMODEURI;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_OUTPUT;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_TRANSFORM;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_RESET;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_READYSTATE;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_ADDPARAMETER;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_ADDOBJECT;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR_STYLESHEET;
    internal static UInt32 DISPID_XMLDOM_PROCESSOR__TOP;
    internal static UInt32 DISPID_XMLDSO;
    internal static UInt32 DISPID_XMLDSO_DOCUMENT;
    internal static UInt32 DISPID_XMLDSO_JAVADSOCOMPATIBLE;
    internal static UInt32 DISPID_SAX_XMLREADER__MIN;
    internal static UInt32 DISPID_SAX_XMLREADER__MAX;
    internal static UInt32 DISPID_SAX_XMLREADER__BASE;
    internal static UInt32 DISPID_SAX_XMLREADER;
    internal static UInt32 DISPID_SAX_XMLREADER_GETFEATURE;
    internal static UInt32 DISPID_SAX_XMLREADER_PUTFEATURE;
    internal static UInt32 DISPID_SAX_XMLREADER_GETPROPERTY;
    internal static UInt32 DISPID_SAX_XMLREADER_PUTPROPERTY;
    internal static UInt32 DISPID_SAX_XMLREADER_ENTITYRESOLVER;
    internal static UInt32 DISPID_SAX_XMLREADER_CONTENTHANDLER;
    internal static UInt32 DISPID_SAX_XMLREADER_DTDHANDLER;
    internal static UInt32 DISPID_SAX_XMLREADER_ERRORHANDLER;
    internal static UInt32 DISPID_SAX_XMLREADER_BASEURL;
    internal static UInt32 DISPID_SAX_XMLREADER_SECUREBASEURL;
    internal static UInt32 DISPID_SAX_XMLREADER_PARSE;
    internal static UInt32 DISPID_SAX_XMLREADER_PARSEURL;
    internal static UInt32 DISPID_SAX_XMLREADER_PARENT;
    internal static UInt32 DISPID_SAX_XMLREADER__TOP;
    internal static UInt32 DISPID_SAX_XMLFILTER__BASE;
    internal static UInt32 DISPID_SAX_XMLFILTER;
    internal static UInt32 DISPID_SAX_XMLFILTER_GETFEATURE;
    internal static UInt32 DISPID_SAX_XMLFILTER_PUTFEATURE;
    internal static UInt32 DISPID_SAX_XMLFILTER_GETPROPERTY;
    internal static UInt32 DISPID_SAX_XMLFILTER_PUTPROPERTY;
    internal static UInt32 DISPID_SAX_XMLFILTER_ENTITYRESOLVER;
    internal static UInt32 DISPID_SAX_XMLFILTER_CONTENTHANDLER;
    internal static UInt32 DISPID_SAX_XMLFILTER_DTDHANDLER;
    internal static UInt32 DISPID_SAX_XMLFILTER_ERRORHANDLER;
    internal static UInt32 DISPID_SAX_XMLFILTER_BASEURL;
    internal static UInt32 DISPID_SAX_XMLFILTER_SECUREBASEURL;
    internal static UInt32 DISPID_SAX_XMLFILTER_PARSE;
    internal static UInt32 DISPID_SAX_XMLFILTER_PARSEURL;
    internal static UInt32 DISPID_SAX_XMLFILTER_PARENT;
    internal static UInt32 DISPID_SAX_XMLFILTER__TOP;
    internal static UInt32 DISPID_SAX_LOCATOR__BASE;
    internal static UInt32 DISPID_SAX_LOCATOR;
    internal static UInt32 DISPID_SAX_LOCATOR_COLUMNNUMBER;
    internal static UInt32 DISPID_SAX_LOCATOR_LINENUMBER;
    internal static UInt32 DISPID_SAX_LOCATOR_PUBLICID;
    internal static UInt32 DISPID_SAX_LOCATOR_SYSTEMID;
    internal static UInt32 DISPID_SAX_LOCATOR__TOP;
    internal static UInt32 DISPID_SAX_ENTITYRESOLVER__BASE;
    internal static UInt32 DISPID_SAX_ENTITYRESOLVER;
    internal static UInt32 DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY;
    internal static UInt32 DISPID_SAX_ENTITYRESOLVER__TOP;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER__BASE;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_STARTELEMENT;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_ENDELEMENT;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_CHARACTERS;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY;
    internal static UInt32 DISPID_SAX_CONTENTHANDLER__TOP;
    internal static UInt32 DISPID_SAX_DTDHANDLER__BASE;
    internal static UInt32 DISPID_SAX_DTDHANDLER;
    internal static UInt32 DISPID_SAX_DTDHANDLER_NOTATIONDECL;
    internal static UInt32 DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL;
    internal static UInt32 DISPID_SAX_DTDHANDLER__TOP;
    internal static UInt32 DISPID_SAX_ERRORHANDLER__BASE;
    internal static UInt32 DISPID_SAX_ERRORHANDLER;
    internal static UInt32 DISPID_SAX_ERRORHANDLER_ERROR;
    internal static UInt32 DISPID_SAX_ERRORHANDLER_FATALERROR;
    internal static UInt32 DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING;
    internal static UInt32 DISPID_SAX_ERRORHANDLER__TOP;
    internal static UInt32 DISPID_SAX_ATTRIBUTES__BASE;
    internal static UInt32 DISPID_SAX_ATTRIBUTES;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_LENGTH;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETURI;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETLOCALNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETQNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETTYPE;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETVALUE;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME;
    internal static UInt32 DISPID_SAX_ATTRIBUTES__TOP;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER__BASE;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_STARTDTD;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_ENDDTD;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_STARTENTITY;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_ENDENTITY;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_STARTCDATA;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_ENDCDATA;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER_COMMENT;
    internal static UInt32 DISPID_SAX_LEXICALHANDLER__TOP;
    internal static UInt32 DISPID_SAX_DECLHANDLER__BASE;
    internal static UInt32 DISPID_SAX_DECLHANDLER;
    internal static UInt32 DISPID_SAX_DECLHANDLER_ELEMENTDECL;
    internal static UInt32 DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL;
    internal static UInt32 DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL;
    internal static UInt32 DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL;
    internal static UInt32 DISPID_SAX_DECLHANDLER__TOP;
    internal static UInt32 DISPID_MX_ATTRIBUTES__BASE;
    internal static UInt32 DISPID_MX_ATTRIBUTES;
    internal static UInt32 DISPID_MX_ATTRIBUTES_ADDATTRIBUTE;
    internal static UInt32 DISPID_MX_ATTRIBUTES_CLEAR;
    internal static UInt32 DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETATTRIBUTE;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETATTRIBUTES;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETLOCALNAME;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETQNAME;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETTYPE;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETURI;
    internal static UInt32 DISPID_MX_ATTRIBUTES_SETVALUE;
    internal static UInt32 DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX;
    internal static UInt32 DISPID_MX_ATTRIBUTES__TOP;
    internal static UInt32 DISPID_MX_WRITER__BASE;
    internal static UInt32 DISPID_MX_WRITER;
    internal static UInt32 DISPID_MX_WRITER_OUTPUT;
    internal static UInt32 DISPID_MX_WRITER_DESTINATION;
    internal static UInt32 DISPID_MX_WRITER_ENCODING;
    internal static UInt32 DISPID_MX_WRITER_BYTEORDERMARK;
    internal static UInt32 DISPID_MX_WRITER_INDENT;
    internal static UInt32 DISPID_MX_WRITER_STANDALONE;
    internal static UInt32 DISPID_MX_WRITER_OMITXMLDECLARATION;
    internal static UInt32 DISPID_MX_WRITER_VERSION;
    internal static UInt32 DISPID_MX_WRITER_DISABLEOUTPUTESCAPING;
    internal static UInt32 DISPID_MX_WRITER_FLUSH;
    internal static UInt32 DISPID_MX_WRITER_RESET;
    internal static UInt32 DISPID_MX_WRITER__TOP;
    internal static UInt32 DISPID_MX_READER_CONTROL__BASE;
    internal static UInt32 DISPID_MX_READER_CONTROL;
    internal static UInt32 DISPID_MX_READER_CONTROL_ABORT;
    internal static UInt32 DISPID_MX_READER_CONTROL_RESUME;
    internal static UInt32 DISPID_MX_READER_CONTROL_SUSPEND;
    internal static UInt32 DISPID_MX_READER_CONTROL__TOP;
    internal static UInt32 DISPID_MX_SCHEMADECLHANDLER__BASE;
    internal static UInt32 DISPID_MX_SCHEMADECLHANDLER;
    internal static UInt32 DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL;
    internal static UInt32 DISPID_MX_SCHEMADECLHANDLER__TOP;
    internal static UInt32 DISPID_MX_NSMGR__BASE;
    internal static UInt32 DISPID_MX_NSMGR;
    internal static UInt32 DISPID_MX_NSMGR_ALLOWOVERRIDE;
    internal static UInt32 DISPID_MX_NSMGR_RESET;
    internal static UInt32 DISPID_MX_NSMGR_PUSHCONTEXT;
    internal static UInt32 DISPID_MX_NSMGR_PUSHNODECONTEXT;
    internal static UInt32 DISPID_MX_NSMGR_POPCONTEXT;
    internal static UInt32 DISPID_MX_NSMGR_DECLAREPREFIX;
    internal static UInt32 DISPID_MX_NSMGR_GETDECLAREDPREFIXES;
    internal static UInt32 DISPID_MX_NSMGR_GETPREFIXES;
    internal static UInt32 DISPID_MX_NSMGR_GETURI;
    internal static UInt32 DISPID_MX_NSMGR_GETURIFROMNODE;
    internal static UInt32 DISPID_MX_NSMGR_LENGTH;
    internal static UInt32 DISPID_MX_NSMGR__TOP;
    internal static UInt32 DISPID_MXXML_FILTER__BASE;
    internal static UInt32 DISPID_MXXML_FILTER;
    internal static UInt32 DISPID_MXXML_FILTER_CONTENTHANDLER;
    internal static UInt32 DISPID_MXXML_FILTER_DTDHANDLER;
    internal static UInt32 DISPID_MXXML_FILTER_ENTITYRESOLVER;
    internal static UInt32 DISPID_MXXML_FILTER_ERRORHANDLER;
    internal static UInt32 DISPID_MXXML_FILTER_GETFEATURE;
    internal static UInt32 DISPID_MXXML_FILTER_GETPROPERTY;
    internal static UInt32 DISPID_MXXML_FILTER_PUTFEATURE;
    internal static UInt32 DISPID_MXXML_FILTER_PUTPROPERTY;
    internal static UInt32 DISPID_MXXML_FILTER__TOP;
    internal static UInt32 DISPID_SOM;
    internal static UInt32 DISPID_SOM_VALIDATE;
    internal static UInt32 DISPID_SOM_VALIDATEONLOAD;
    internal static UInt32 DISPID_SOM_GETSCHEMA;
    internal static UInt32 DISPID_SOM_GETDECLARATION;
    internal static UInt32 DISPID_SOM_ITEMBYNAME;
    internal static UInt32 DISPID_SOM_ITEMBYQNAME;
    internal static UInt32 DISPID_SOM_ANYATTRIBUTE;
    internal static UInt32 DISPID_SOM_ATTRIBUTEGROUPS;
    internal static UInt32 DISPID_SOM_ATTRIBUTES;
    internal static UInt32 DISPID_SOM_BASETYPES;
    internal static UInt32 DISPID_SOM_CONTENTMODEL;
    internal static UInt32 DISPID_SOM_CONTENTTYPE;
    internal static UInt32 DISPID_SOM_DEFAULTVALUE;
    internal static UInt32 DISPID_SOM_DERIVEDBY;
    internal static UInt32 DISPID_SOM_DISALLOWED;
    internal static UInt32 DISPID_SOM_ELEMENTS;
    internal static UInt32 DISPID_SOM_ENUMERATION;
    internal static UInt32 DISPID_SOM_FIELDS;
    internal static UInt32 DISPID_SOM_FINAL;
    internal static UInt32 DISPID_SOM_FIXEDVALUE;
    internal static UInt32 DISPID_SOM_FRACTIONDIGITS;
    internal static UInt32 DISPID_SOM_ID;
    internal static UInt32 DISPID_SOM_IDCONSTRAINTS;
    internal static UInt32 DISPID_SOM_ISABSTRACT;
    internal static UInt32 DISPID_SOM_ISNILLABLE;
    internal static UInt32 DISPID_SOM_ISREFERENCE;
    internal static UInt32 DISPID_SOM_ISVALID;
    internal static UInt32 DISPID_SOM_ITEMTYPE;
    internal static UInt32 DISPID_SOM_LENGTH;
    internal static UInt32 DISPID_SOM_MAXEXCLUSIVE;
    internal static UInt32 DISPID_SOM_MAXINCLUSIVE;
    internal static UInt32 DISPID_SOM_MAXLENGTH;
    internal static UInt32 DISPID_SOM_MAXOCCURS;
    internal static UInt32 DISPID_SOM_MINEXCLUSIVE;
    internal static UInt32 DISPID_SOM_MININCLUSIVE;
    internal static UInt32 DISPID_SOM_MINLENGTH;
    internal static UInt32 DISPID_SOM_MINOCCURS;
    internal static UInt32 DISPID_SOM_MODELGROUPS;
    internal static UInt32 DISPID_SOM_NAME;
    internal static UInt32 DISPID_SOM_NAMESPACES;
    internal static UInt32 DISPID_SOM_NAMESPACEURI;
    internal static UInt32 DISPID_SOM_NOTATIONS;
    internal static UInt32 DISPID_SOM_PARTICLES;
    internal static UInt32 DISPID_SOM_PATTERNS;
    internal static UInt32 DISPID_SOM_PROCESSCONTENTS;
    internal static UInt32 DISPID_SOM_PROHIBITED;
    internal static UInt32 DISPID_SOM_PUBLICIDENTIFIER;
    internal static UInt32 DISPID_SOM_REFERENCEDKEY;
    internal static UInt32 DISPID_SOM_SCHEMA;
    internal static UInt32 DISPID_SOM_SCHEMALOCATIONS;
    internal static UInt32 DISPID_SOM_SCOPE;
    internal static UInt32 DISPID_SOM_SELECTOR;
    internal static UInt32 DISPID_SOM_SUBSTITUTIONGROUP;
    internal static UInt32 DISPID_SOM_EXCLUSIONS;
    internal static UInt32 DISPID_SOM_SYSTEMIDENTIFIER;
    internal static UInt32 DISPID_SOM_TARGETNAMESPACE;
    internal static UInt32 DISPID_SOM_TOTALDIGITS;
    internal static UInt32 DISPID_SOM_TYPE;
    internal static UInt32 DISPID_SOM_TYPES;
    internal static UInt32 DISPID_SOM_UNHANDLEDATTRS;
    internal static UInt32 DISPID_SOM_USE;
    internal static UInt32 DISPID_SOM_VARIETY;
    internal static UInt32 DISPID_SOM_VERSION;
    internal static UInt32 DISPID_SOM_WHITESPACE;
    internal static UInt32 DISPID_SOM_WRITEANNOTATION;
    internal static UInt32 DISPID_SOM_TOP;
    internal static UInt32 DISPID_XMLDSIG;
    internal static UInt32 DISPID_XMLDSIG_CREATEKEYFROMCSP;
    internal static UInt32 DISPID_XMLDSIG_CREATEKEYFROMHMACSECRET;
    internal static UInt32 DISPID_XMLDSIG_CREATEKEYFROMNODE;
    internal static UInt32 DISPID_XMLDSIG_CREATESAXPROXY;
    internal static UInt32 DISPID_XMLDSIG_GETVERIFYINGCERTIFICATE;
    internal static UInt32 DISPID_XMLDSIG_SETREFERENCEDATA;
    internal static UInt32 DISPID_XMLDSIG_SIGN;
    internal static UInt32 DISPID_XMLDSIG_SIGNATURE;
    internal static UInt32 DISPID_XMLDSIG_STORE;
    internal static UInt32 DISPID_XMLDSIG_VERIFY;
    internal static UInt32 DISPID_DDISCMASTER2EVENTS_DEVICEADDED;
    internal static UInt32 DISPID_DDISCMASTER2EVENTS_DEVICEREMOVED;
    internal static UInt32 DISPID_IDISCRECORDER2_EJECTMEDIA;
    internal static UInt32 DISPID_IDISCRECORDER2_CLOSETRAY;
    internal static UInt32 DISPID_IDISCRECORDER2_ACQUIREEXCLUSIVEACCESS;
    internal static UInt32 DISPID_IDISCRECORDER2_RELEASEEXCLUSIVEACCESS;
    internal static UInt32 DISPID_IDISCRECORDER2_DISABLEMCN;
    internal static UInt32 DISPID_IDISCRECORDER2_ENABLEMCN;
    internal static UInt32 DISPID_IDISCRECORDER2_INITIALIZEDISCRECORDER;
    internal static UInt32 DISPID_IDISCRECORDER2_ACTIVEDISCRECORDER;
    internal static UInt32 DISPID_IDISCRECORDER2_VENDORID;
    internal static UInt32 DISPID_IDISCRECORDER2_PRODUCTID;
    internal static UInt32 DISPID_IDISCRECORDER2_PRODUCTREVISION;
    internal static UInt32 DISPID_IDISCRECORDER2_VOLUMENAME;
    internal static UInt32 DISPID_IDISCRECORDER2_VOLUMEPATHNAMES;
    internal static UInt32 DISPID_IDISCRECORDER2_DEVICECANLOADMEDIA;
    internal static UInt32 DISPID_IDISCRECORDER2_LEGACYDEVICENUMBER;
    internal static UInt32 DISPID_IDISCRECORDER2_SUPPORTEDFEATUREPAGES;
    internal static UInt32 DISPID_IDISCRECORDER2_CURRENTFEATUREPAGES;
    internal static UInt32 DISPID_IDISCRECORDER2_SUPPORTEDPROFILES;
    internal static UInt32 DISPID_IDISCRECORDER2_CURRENTPROFILES;
    internal static UInt32 DISPID_IDISCRECORDER2_SUPPORTEDMODEPAGES;
    internal static UInt32 DISPID_IDISCRECORDER2_EXCLUSIVEACCESSOWNER;
    internal static UInt32 DISPID_IWRITEENGINE2_WRITESECTION;
    internal static UInt32 DISPID_IWRITEENGINE2_CANCELWRITE;
    internal static UInt32 DISPID_IWRITEENGINE2_DISCRECORDER;
    internal static UInt32 DISPID_IWRITEENGINE2_USESTREAMINGWRITE12;
    internal static UInt32 DISPID_IWRITEENGINE2_STARTINGSECTORSPERSECOND;
    internal static UInt32 DISPID_IWRITEENGINE2_ENDINGSECTORSPERSECOND;
    internal static UInt32 DISPID_IWRITEENGINE2_BYTESPERSECTOR;
    internal static UInt32 DISPID_IWRITEENGINE2_WRITEINPROGRESS;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_STARTLBA;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_SECTORCOUNT;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_LASTREADLBA;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_LASTWRITTENLBA;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_TOTALDEVICEBUFFER;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_USEDDEVICEBUFFER;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_TOTALSYSTEMBUFFER;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_USEDSYSTEMBUFFER;
    internal static UInt32 DISPID_IWRITEENGINE2EVENTARGS_FREESYSTEMBUFFER;
    internal static UInt32 DISPID_DWRITEENGINE2EVENTS_UPDATE;
    internal static UInt32 DISPID_IDISCFORMAT2_RECORDERSUPPORTED;
    internal static UInt32 DISPID_IDISCFORMAT2_MEDIASUPPORTED;
    internal static UInt32 DISPID_IDISCFORMAT2_MEDIAPHYSICALLYBLANK;
    internal static UInt32 DISPID_IDISCFORMAT2_MEDIAHEURISTICALLYBLANK;
    internal static UInt32 DISPID_IDISCFORMAT2_SUPPORTEDMEDIATYPES;
    internal static UInt32 DISPID_IDISCFORMAT2ERASE_RECORDER;
    internal static UInt32 DISPID_IDISCFORMAT2ERASE_FULLERASE;
    internal static UInt32 DISPID_IDISCFORMAT2ERASE_MEDIATYPE;
    internal static UInt32 DISPID_IDISCFORMAT2ERASE_CLIENTNAME;
    internal static UInt32 DISPID_IDISCFORMAT2ERASE_ERASEMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2ERASEEVENTS_UPDATE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_RECORDER;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_BUFFERUNDERRUNFREEDISABLED;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_POSTGAPALREADYINIMAGE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_CURRENTMEDIASTATUS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_WRITEPROTECTSTATUS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_TOTALSECTORS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_FREESECTORS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_NEXTWRITABLEADDRESS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_STARTSECTOROFPREVIOUSSESSION;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_LASTSECTOROFPREVIOUSSESSION;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_FORCEMEDIATOBECLOSED;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_DISABLEDVDCOMPATIBILITYMODE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_CURRENTMEDIATYPE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_CLIENTNAME;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_REQUESTEDWRITESPEED;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_REQUESTEDROTATIONTYPEISPURECAV;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_CURRENTWRITESPEED;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_CURRENTROTATIONTYPEISPURECAV;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDDESCRIPTORS;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_FORCEOVERWRITE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_MUTLISESSIONINTERFACES;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_WRITE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_CANCELWRITE;
    internal static UInt32 DISPID_IDISCFORMAT2DATA_SETWRITESPEED;
    internal static UInt32 DISPID_DDISCFORMAT2DATAEVENTS_UPDATE;
    internal static UInt32 DISPID_IDISCFORMAT2DATAEVENTARGS_ELAPSEDTIME;
    internal static UInt32 DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDREMAININGTIME;
    internal static UInt32 DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDTOTALTIME;
    internal static UInt32 DISPID_IDISCFORMAT2DATAEVENTARGS_CURRENTACTION;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_RECORDER;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_BUFFERUNDERRUNFREEDISABLED;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_NUMBEROFEXISTINGTRACKS;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_TOTALSECTORSONMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_FREESECTORSONMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_USEDSECTORSONMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_DONOTFINALIZEMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_EXPECTEDTABLEOFCONTENTS;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_CURRENTMEDIATYPE;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_CLIENTNAME;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_REQUESTEDWRITESPEED;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_REQUESTEDROTATIONTYPEISPURECAV;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_CURRENTWRITESPEED;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_CURRENTROTATIONTYPEISPURECAV;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDS;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDDESCRIPTORS;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_PREPAREMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_ADDAUDIOTRACK;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_CANCELADDTRACK;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_FINISHMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2TAO_SETWRITESPEED;
    internal static UInt32 DISPID_DDISCFORMAT2TAOEVENTS_UPDATE;
    internal static UInt32 DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTTRACKNUMBER;
    internal static UInt32 DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTACTION;
    internal static UInt32 DISPID_IDISCFORMAT2TAOEVENTARGS_ELAPSEDTIME;
    internal static UInt32 DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDREMAININGTIME;
    internal static UInt32 DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDTOTALTIME;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_RECORDER;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_BUFFERUNDERRUNFREEDISABLED;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_STARTOFNEXTSESSION;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_LASTPOSSIBLESTARTOFLEADOUT;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_CURRENTMEDIATYPE;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_SUPPORTEDDATASECTORTYPES;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_REQUESTEDDATASECTORTYPE;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_CLIENTNAME;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_REQUESTEDWRITESPEED;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_REQUESTEDROTATIONTYPEISPURECAV;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_CURRENTWRITESPEED;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_CURRENTROTATIONTYPEISPURECAV;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDS;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDDESCRIPTORS;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_PREPAREMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_WRITEMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_WRITEMEDIAWITHVALIDATION;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_CANCELWRITE;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_RELEASEMEDIA;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCD_SETWRITESPEED;
    internal static UInt32 DISPID_DDISCFORMAT2RAWCDEVENTS_UPDATE;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTTRACKNUMBER;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTACTION;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCDEVENTARGS_ELAPSEDTIME;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDREMAININGTIME;
    internal static UInt32 DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDTOTALTIME;
    internal static UInt32 DISPID_IMULTISESSION_SUPPORTEDONCURRENTMEDIA;
    internal static UInt32 DISPID_IMULTISESSION_INUSE;
    internal static UInt32 DISPID_IMULTISESSION_IMPORTRECORDER;
    internal static UInt32 DISPID_IMULTISESSION_FIRSTDATASESSION;
    internal static UInt32 DISPID_IMULTISESSION_STARTSECTOROFPREVIOUSSESSION;
    internal static UInt32 DISPID_IMULTISESSION_LASTSECTOROFPREVIOUSSESSION;
    internal static UInt32 DISPID_IMULTISESSION_NEXTWRITABLEADDRESS;
    internal static UInt32 DISPID_IMULTISESSION_FREESECTORS;
    internal static UInt32 DISPID_IMULTISESSION_WRITEUNITSIZE;
    internal static UInt32 DISPID_IMULTISESSION_LASTWRITTENADDRESS;
    internal static UInt32 DISPID_IMULTISESSION_SECTORSONMEDIA;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_CREATERESULTIMAGE;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_ADDTRACK;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_ADDSPECIALPREGAP;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_ADDSUBCODERWGENERATOR;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_RESULTINGIMAGETYPE;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUT;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUTLIMIT;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_DISABLEGAPLESSAUDIO;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_MEDIACATALOGNUMBER;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_STARTINGTRACKNUMBER;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_TRACKINFO;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_NUMBEROFEXISTINGTRACKS;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_USEDSECTORSONDISC;
    internal static UInt32 DISPID_IRAWCDIMAGECREATOR_EXPECTEDTABLEOFCONTENTS;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_STARTINGLBA;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_SECTORCOUNT;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_TRACKNUMBER;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_SECTORTYPE;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_ISRC;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_DIGITALAUDIOCOPYSETTING;
    internal static UInt32 DISPID_IRAWCDTRACKINFO_AUDIOHASPREEMPHASIS;
    internal static UInt32 DISPID_IBLOCKRANGE_STARTLBA;
    internal static UInt32 DISPID_IBLOCKRANGE_ENDLBA;
    internal static UInt32 DISPID_IBLOCKRANGELIST_BLOCKRANGES;
    internal static UInt32 DISPID_DFILESYSTEMIMAGEEVENTS_UPDATE;
    internal static UInt32 DISPID_DFILESYSTEMIMAGEIMPORTEVENTS_UPDATEIMPORT;
    internal static UInt32 DISPID_PRINTSCHEMA_ELEMENT;
    internal static UInt32 DISPID_PRINTSCHEMA_ELEMENT_XMLNODE;
    internal static UInt32 DISPID_PRINTSCHEMA_ELEMENT_NAME;
    internal static UInt32 DISPID_PRINTSCHEMA_ELEMENT_NAMESPACEURI;
    internal static UInt32 DISPID_PRINTSCHEMA_DISPLAYABLEELEMENT;
    internal static UInt32 DISPID_PRINTSCHEMA_DISPLAYABLEELEMENT_DISPLAYNAME;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTION;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTION_SELECTED;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTION_CONSTRAINED;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTION_GETPROPERTYVALUE;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION_WIDTH;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION_HEIGHT;
    internal static UInt32 DISPID_PRINTSCHEMA_NUPOPTION;
    internal static UInt32 DISPID_PRINTSCHEMA_NUPOPTION_PAGESPERSHEET;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTIONCOLLECTION;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTIONCOLLECTION_COUNT;
    internal static UInt32 DISPID_PRINTSCHEMA_OPTIONCOLLECTION_GETAT;
    internal static UInt32 DISPID_PRINTSCHEMA_FEATURE;
    internal static UInt32 DISPID_PRINTSCHEMA_FEATURE_SELECTEDOPTION;
    internal static UInt32 DISPID_PRINTSCHEMA_FEATURE_SELECTIONTYPE;
    internal static UInt32 DISPID_PRINTSCHEMA_FEATURE_GETOPTION;
    internal static UInt32 DISPID_PRINTSCHEMA_FEATURE_DISPLAYUI;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_IMAGEABLE_WIDTH;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_IMAGEABLE_HEIGHT;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_ORIGIN_WIDTH;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_ORIGIN_HEIGHT;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_EXTENT_WIDTH;
    internal static UInt32 DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_EXTENT_HEIGHT;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_GETFEATURE_KEYNAME;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_GETFEATURE;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_PAGEIMAGEABLESIZE;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_JOBCOPIESMINVALUE;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_JOBCOPIESMAXVALUE;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_GETSELECTEDOPTION;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_GETOPTIONS;
    internal static UInt32 DISPID_PRINTSCHEMA_CAPABILITIES_GETPARAMETERDEFINITION;
    internal static UInt32 DISPID_PRINTSCHEMA_ASYNCOPERATION;
    internal static UInt32 DISPID_PRINTSCHEMA_ASYNCOPERATION_START;
    internal static UInt32 DISPID_PRINTSCHEMA_ASYNCOPERATION_CANCEL;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_GETFEATURE_KEYNAME;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_GETFEATURE;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_VALIDATEASYNC;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_COMMITASYNC;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_NOTIFYXMLCHANGED;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_GETCAPABILITIES;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_JOBCOPIESALLDOCUMENTS;
    internal static UInt32 DISPID_PRINTSCHEMA_TICKET_GETPARAMETERINITIALIZER;
    internal static UInt32 DISPID_PRINTSCHEMA_ASYNCOPERATIONEVENT;
    internal static UInt32 DISPID_PRINTSCHEMA_ASYNCOPERATIONEVENT_COMPLETED;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM_READ;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM_WRITE;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESTREAM;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESTREAM_COMMIT;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESTREAM_SEEK;
    internal static UInt32 DISPID_PRINTERSCRIPTABLESTREAM_SETSIZE;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_GETBOOL;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_SETBOOL;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_GETINT32;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_SETINT32;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_GETSTRING;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_SETSTRING;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_GETBYTES;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_SETBYTES;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_GETREADSTREAM;
    internal static UInt32 DISPID_PRINTERPROPERTYBAG_GETWRITESTREAM;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETSTREAMASXML;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETBOOL;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETBOOL;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETINT32;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETINT32;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETSTRING;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETSTRING;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETBYTES;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETBYTES;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETREADSTREAM;
    internal static UInt32 DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETWRITESTREAM;
    internal static UInt32 DISPID_PRINTERQUEUE;
    internal static UInt32 DISPID_PRINTERQUEUE_HANDLE;
    internal static UInt32 DISPID_PRINTERQUEUE_NAME;
    internal static UInt32 DISPID_PRINTERQUEUE_SENDBIDIQUERY;
    internal static UInt32 DISPID_PRINTERQUEUE_GETPROPERTIES;
    internal static UInt32 DISPID_PRINTERQUEUE_SENDBIDISETREQUESTASYNC;
    internal static UInt32 DISPID_PRINTERQUEUE_GETPRINTERQUEUEVIEW;
    internal static UInt32 DISPID_PRINTERQUEUEEVENT;
    internal static UInt32 DISPID_PRINTERQUEUEEVENT_ONBIDIRESPONSERECEIVED;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXT;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXT_PRINTERQUEUE;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXT_PRINTSCHEMATICKET;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXT_DRIVERPROPERTIES;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXT_USERPROPERTIES;
    internal static UInt32 DISPID_PRINTEREXTENSION_REQUEST;
    internal static UInt32 DISPID_PRINTEREXTENSION_REQUEST_CANCEL;
    internal static UInt32 DISPID_PRINTEREXTENSION_REQUEST_COMPLETE;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_BIDINOTIFICATION;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_REASONID;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_REQUEST;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_SOURCEAPPLICATION;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_DETAILEDREASONID;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_WINDOWMODAL;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENTARGS_WINDOWPARENT;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION_COUNT;
    internal static UInt32 DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION_GETAT;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENT;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENT_ONDRIVEREVENT;
    internal static UInt32 DISPID_PRINTEREXTENSION_EVENT_ONPRINTERQUEUESENUMERATED;
    internal static UInt32 DISPID_PRINTERSCRIPTCONTEXT;
    internal static UInt32 DISPID_PRINTERSCRIPTCONTEXT_DRIVERPROPERTIES;
    internal static UInt32 DISPID_PRINTERSCRIPTCONTEXT_QUEUEPROPERTIES;
    internal static UInt32 DISPID_PRINTERSCRIPTCONTEXT_USERPROPERTIES;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERINITIALIZER;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERINITIALIZER_VALUE;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERDEFINITION;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERDEFINITION_USERINPUTREQUIRED;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERDEFINITION_UNITTYPE;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERDEFINITION_DATATYPE;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERDEFINITION_RANGEMIN;
    internal static UInt32 DISPID_PRINTSCHEMA_PARAMETERDEFINITION_RANGEMAX;
    internal static UInt32 DISPID_PRINTJOBCOLLECTION;
    internal static UInt32 DISPID_PRINTJOBCOLLECTION_COUNT;
    internal static UInt32 DISPID_PRINTJOBCOLLECTION_GETAT;
    internal static UInt32 DISPID_PRINTERQUEUEVIEW;
    internal static UInt32 DISPID_PRINTERQUEUEVIEW_SETVIEWRANGE;
    internal static UInt32 DISPID_PRINTERQUEUEVIEW_EVENT;
    internal static UInt32 DISPID_PRINTERQUEUEVIEW_EVENT_ONCHANGED;
    internal static UInt32 DISPID_STYLESHEETSCOLLECTION_NAMED_MAX;
    internal static UInt32 DISPID_INTERNAL_CELEMENTCLASSCACHE;
    internal static UInt32 DISPID_HTMLOBJECT;
    internal static UInt32 DISPID_ELEMENT;
    internal static UInt32 DISPID_SITE;
    internal static UInt32 DISPID_OBJECT;
    internal static UInt32 DISPID_STYLE;
    internal static UInt32 DISPID_BASE_STYLE;
    internal static UInt32 DISPID_ATTRS;
    internal static UInt32 DISPID_EVENTS;
    internal static UInt32 DISPID_XOBJ_EXPANDO;
    internal static UInt32 DISPID_XOBJ_ORDINAL;
    internal static UInt32 DISPID_ACTIVEX_EXPANDO_BASE;
    internal static UInt32 DISPID_ACTIVEX_EXPANDO_MAX;
    internal static UInt32 DISPID_OBJECT_ORDINAL_BASE;
    internal static UInt32 DISPID_OBJECT_ORDINAL_MAX;
    internal static UInt32 DISPID_COLLECTION_MIN;
    internal static UInt32 DISPID_COLLECTION_MAX;
    internal static UInt32 DISPID_STYLESHEETSCOLLECTION_NAMED_BASE;
    internal static UInt32 DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE;
    internal static UInt32 DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX;
    internal static UInt32 DISPID_EXPANDO_BASE;
    internal static UInt32 DISPID_EXPANDO_MAX;
    internal static UInt32 DISPID_EVENTHOOK_SENSITIVE_BASE;
    internal static UInt32 DISPID_EVENTHOOK_SENSITIVE_MAX;
    internal static UInt32 DISPID_EVENTHOOK_INSENSITIVE_BASE;
    internal static UInt32 DISPID_EVENTHOOK_INSENSITIVE_MAX;
    internal static UInt32 DISPID_PEER_HOLDER_BASE;
    internal static UInt32 DISPID_CANVASPIXELARRAY_BASE;
    internal static UInt32 DISPID_CANVASPIXELARRAY_MAX;
    internal static UInt32 DISPID_CommonCtrl_FONTNAME;
    internal static UInt32 DISPID_CommonCtrl_FONTSIZE;
    internal static UInt32 DISPID_CommonCtrl_FONTBOLD;
    internal static UInt32 DISPID_CommonCtrl_FONTITAL;
    internal static UInt32 DISPID_CommonCtrl_FONTUNDER;
    internal static UInt32 DISPID_CommonCtrl_FONTSTRIKE;
    internal static UInt32 DISPID_CommonCtrl_FONTWEIGHT;
    internal static UInt32 DISPID_CommonCtrl_FONTCHARSET;
    internal static UInt32 DISPID_CommonCtrl_FONTSUPERSCRIPT;
    internal static UInt32 DISPID_CommonCtrl_FONTSUBSCRIPT;
    internal static int DISPID_MSDATASRCINTERFACE;
    internal static int DISPID_ADVISEDATASRCCHANGEEVENT;
    internal static UInt32 DISPID_HTMLDLG;
    internal static UInt32 DISPID_HTMLDLGMODEL;
    internal static UInt32 DISPID_HTMLPOPUP;
    internal static UInt32 DISPID_HTMLAPP;
    internal static UInt32 DISPID_NORMAL_FIRST;
    internal static UInt32 DISPID_IE8_NORMAL_FIRST;
    internal static UInt32 DISPID_ANCHOR;
    internal static UInt32 DISPID_BLOCK;
    internal static UInt32 DISPID_BODY;
    internal static UInt32 DISPID_BR;
    internal static UInt32 DISPID_BGSOUND;
    internal static UInt32 DISPID_DD;
    internal static UInt32 DISPID_DIR;
    internal static UInt32 DISPID_DIV;
    internal static UInt32 DISPID_DL;
    internal static UInt32 DISPID_DT;
    internal static UInt32 DISPID_EFONT;
    internal static UInt32 DISPID_FORM;
    internal static UInt32 DISPID_HEADER;
    internal static UInt32 DISPID_HEDELEMS;
    internal static UInt32 DISPID_HR;
    internal static UInt32 DISPID_LABEL;
    internal static UInt32 DISPID_LI;
    internal static UInt32 DISPID_IMGBASE;
    internal static UInt32 DISPID_IMG;
    internal static UInt32 DISPID_INPUTIMAGE;
    internal static UInt32 DISPID_INPUT;
    internal static UInt32 DISPID_INPUTTEXTBASE;
    internal static UInt32 DISPID_INPUTTEXT;
    internal static UInt32 DISPID_MENU;
    internal static UInt32 DISPID_OL;
    internal static UInt32 DISPID_PARA;
    internal static UInt32 DISPID_SELECT;
    internal static UInt32 DISPID_SELECTOBJ;
    internal static UInt32 DISPID_TABLE;
    internal static UInt32 DISPID_TEXTSITE;
    internal static UInt32 DISPID_TEXTAREA;
    internal static UInt32 DISPID_MARQUEE;
    internal static UInt32 DISPID_RICHTEXT;
    internal static UInt32 DISPID_BUTTON;
    internal static UInt32 DISPID_UL;
    internal static UInt32 DISPID_PHRASE;
    internal static UInt32 DISPID_UNKNOWNPDL;
    internal static UInt32 DISPID_COMMENTPDL;
    internal static UInt32 DISPID_TABLECELL;
    internal static UInt32 DISPID_RANGE;
    internal static UInt32 DISPID_SELECTION;
    internal static UInt32 DISPID_OPTION;
    internal static UInt32 DISPID_1D;
    internal static UInt32 DISPID_MAP;
    internal static UInt32 DISPID_AREA;
    internal static UInt32 DISPID_PARAM;
    internal static UInt32 DISPID_TABLESECTION;
    internal static UInt32 DISPID_TABLEROW;
    internal static UInt32 DISPID_TABLECOL;
    internal static UInt32 DISPID_SCRIPT;
    internal static UInt32 DISPID_STYLESHEET;
    internal static UInt32 DISPID_STYLERULE;
    internal static UInt32 DISPID_BASE_STYLERULE;
    internal static UInt32 DISPID_STYLEPAGE;
    internal static UInt32 DISPID_STYLESHEETS_COL;
    internal static UInt32 DISPID_STYLERULES_COL;
    internal static UInt32 DISPID_STYLEPAGES_COL;
    internal static UInt32 DISPID_MEDIALIST;
    internal static UInt32 DISPID_MIMETYPES_COL;
    internal static UInt32 DISPID_PLUGINS_COL;
    internal static UInt32 DISPID_2D;
    internal static UInt32 DISPID_OMWINDOW;
    internal static UInt32 DISPID_EVENTOBJ;
    internal static UInt32 DISPID_PERSISTDATA;
    internal static UInt32 DISPID_OLESITE;
    internal static UInt32 DISPID_FRAMESET;
    internal static UInt32 DISPID_LINK;
    internal static UInt32 DISPID_STYLEELEMENT;
    internal static UInt32 DISPID_FILTERS;
    internal static UInt32 DISPID_OMRECT;
    internal static UInt32 DISPID_DOMATTRIBUTE;
    internal static UInt32 DISPID_DOMTEXTNODE;
    internal static UInt32 DISPID_GENERIC;
    internal static UInt32 DISPID_URN_COLL;
    internal static UInt32 DISPID_NAMESPACE_COLLECTION;
    internal static UInt32 DISPID_NAMESPACE;
    internal static UInt32 DISPID_TAGNAMES_COLLECTION;
    internal static UInt32 DISPID_XMLHTTPREQUEST;
    internal static UInt32 DISPID_XMLSERIALIZER;
    internal static UInt32 DISPID_DOMPARSER;
    internal static UInt32 DISPID_DOCUMENTCOMPATIBLEINFO_COLLECTION;
    internal static UInt32 DISPID_DOCUMENTCOMPATIBLEINFO;
    internal static UInt32 DISPID_XDOMAINREQUEST;
    internal static UInt32 DISPID_DOMSTORAGEITEM;
    internal static UInt32 DISPID_DOMSTORAGE;
    internal static UInt32 DISPID_DOMSTORAGELIST;
    internal static UInt32 DISPID_RULESAPPLIED;
    internal static UInt32 DISPID_RULESAPPLIED_COLLECTION;
    internal static UInt32 DISPID_STYLESHEETRULESAPPLIED_COLLECTION;
    internal static UInt32 DISPID_PROCESSINGINSTRUCTION;
    internal static UInt32 DISPID_MSPOINTERPOINT;
    internal static UInt32 DISPID_WEBSOCKET;
    internal static UInt32 DISPID_APPLICATIONCACHE;
    internal static UInt32 DISPID_DOMEVENT;
    internal static UInt32 DISPID_DOMUIEVENT;
    internal static UInt32 DISPID_DOMMOUSEEVENT;
    internal static UInt32 DISPID_DOMMOUSEWHEELEVENT;
    internal static UInt32 DISPID_DOMWHEELEVENT;
    internal static UInt32 DISPID_DOMTEXTEVENT;
    internal static UInt32 DISPID_DOMKEYBOARDEVENT;
    internal static UInt32 DISPID_DOMCOMPOSITIONEVENT;
    internal static UInt32 DISPID_DOMCUSTOMEVENT;
    internal static UInt32 DISPID_DOMMUTATIONEVENT;
    internal static UInt32 DISPID_DOMFOCUSEVENT;
    internal static UInt32 DISPID_SVGZOOMEVENT;
    internal static UInt32 DISPID_DOMSITEMODEEVENT;
    internal static UInt32 DISPID_DOMMESSAGEEVENT;
    internal static UInt32 DISPID_DOMSTORAGEEVENT;
    internal static UInt32 DISPID_DOMBEFOREUNLOADEVENT;
    internal static UInt32 DISPID_DOMDRAGEVENT;
    internal static UInt32 DISPID_DOMMSPOINTEREVENT;
    internal static UInt32 DISPID_DOMMSGESTUREEVENT;
    internal static UInt32 DISPID_DOMMSTRANSITIONEVENT;
    internal static UInt32 DISPID_DOMMSANIMATIONEVENT;
    internal static UInt32 DISPID_DOMMSMANIPULATIONEVENT;
    internal static UInt32 DISPID_DOMPROGRESSEVENT;
    internal static UInt32 DISPID_DOMCLOSEEVENT;
    internal static UInt32 DISPID_HTMLDOCUMENT;
    internal static UInt32 DISPID_OMDOCUMENT;
    internal static UInt32 DISPID_DATATRANSFER;
    internal static UInt32 DISPID_XMLDECL;
    internal static UInt32 DISPID_DOCFRAG;
    internal static UInt32 DISPID_ILINEINFO;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE;
    internal static UInt32 DISPID_DOMRANGE;
    internal static UInt32 DISPID_HTMLSELECTION;
    internal static UInt32 DISPID_DOMTRAVERSAL;
    internal static UInt32 DISPID_DOMEXCEPTION;
    internal static UInt32 DISPID_SVGEXCEPTION;
    internal static UInt32 DISPID_RANGEEXCEPTION;
    internal static UInt32 DISPID_EVENTEXCEPTION;
    internal static UInt32 DISPID_DOCUMENTTYPE;
    internal static UInt32 DISPID_MEDIA;
    internal static UInt32 DISPID_MEDIAERROR;
    internal static UInt32 DISPID_TIMERANGES;
    internal static UInt32 DISPID_SOURCE;
    internal static UInt32 DISPID_TRACK;
    internal static UInt32 DISPID_AUDIO;
    internal static UInt32 DISPID_VIDEO;
    internal static UInt32 DISPID_STYLEMEDIA;
    internal static UInt32 DISPID_PROGRESS;
    internal static UInt32 DISPID_PLAYTO;
    internal static UInt32 DISPID_PLAYTODEVICE;
    internal static UInt32 DISPID_WINDOW;
    internal static UInt32 DISPID_SCREEN;
    internal static UInt32 DISPID_FRAMESCOLLECTION;
    internal static UInt32 DISPID_HISTORY;
    internal static UInt32 DISPID_LOCATION;
    internal static UInt32 DISPID_NAVIGATOR;
    internal static UInt32 DISPID_CLIENTCAPS;
    internal static UInt32 DISPID_TEMPLATE_PRINTER;
    internal static UInt32 DISPID_PRINTMANAGER_TEMPLATE_PRINTER;
    internal static UInt32 DISPID_COLLECTION;
    internal static UInt32 DISPID_OPTIONS_COL;
    internal static UInt32 DISPID_CHECKBOX;
    internal static UInt32 DISPID_RADIO;
    internal static UInt32 DISPID_FRAMESITE;
    internal static UInt32 DISPID_FRAME;
    internal static UInt32 DISPID_IFRAME;
    internal static UInt32 DISPID_PROTECTEDELEMENT;
    internal static UInt32 DISPID_DEFAULTS;
    internal static UInt32 DISPID_MARKUP;
    internal static UInt32 DISPID_DOMIMPLEMENTATION;
    internal static UInt32 DISPID_MEDIAQUERY;
    internal static UInt32 DISPID_HTML5ATTRIBUTESELECTORCI;
    internal static UInt32 DISPID_SVGMIXINS;
    internal static UInt32 DISPID_SVGELEMENT;
    internal static UInt32 DISPID_SVGELEMENT_BASE;
    internal static UInt32 DISPID_SVGAELEMENT;
    internal static UInt32 DISPID_SVGALTGLYPHDEFELEMENT;
    internal static UInt32 DISPID_SVGALTGLYPHELEMENT;
    internal static UInt32 DISPID_SVGALTGLYPHITEMELEMENT;
    internal static UInt32 DISPID_SVGANGLE;
    internal static UInt32 DISPID_SVGANIMATECOLORELEMENT;
    internal static UInt32 DISPID_SVGANIMATEDANGLE;
    internal static UInt32 DISPID_SVGANIMATEDBOOLEAN;
    internal static UInt32 DISPID_SVGANIMATEDENUMERATION;
    internal static UInt32 DISPID_SVGANIMATEDINTEGER;
    internal static UInt32 DISPID_SVGANIMATEDLENGTH;
    internal static UInt32 DISPID_SVGANIMATEDLENGTHLIST;
    internal static UInt32 DISPID_SVGANIMATEDNUMBER;
    internal static UInt32 DISPID_SVGANIMATEDNUMBERLIST;
    internal static UInt32 DISPID_SVGANIMATEDPOINTS;
    internal static UInt32 DISPID_SVGANIMATEDRECT;
    internal static UInt32 DISPID_SVGANIMATEDSTRING;
    internal static UInt32 DISPID_SVGANIMATEELEMENT;
    internal static UInt32 DISPID_SVGANIMATEMOTIONELEMENT;
    internal static UInt32 DISPID_SVGANIMATETRANSFORMELEMENT;
    internal static UInt32 DISPID_SVGCIRCLEELEMENT;
    internal static UInt32 DISPID_SVGCLIPPATHELEMENT;
    internal static UInt32 DISPID_SVGCOLOR_PROFILEELEMENT;
    internal static UInt32 DISPID_SVGCURSORELEMENT;
    internal static UInt32 DISPID_SVGDEFINITION_SRCELEMENT;
    internal static UInt32 DISPID_SVGDEFSELEMENT;
    internal static UInt32 DISPID_SVGDESCELEMENT;
    internal static UInt32 DISPID_SVGELEMENTINSTANCE;
    internal static UInt32 DISPID_SVGELEMENTINSTANCELIST;
    internal static UInt32 DISPID_SVGELLIPSEELEMENT;
    internal static UInt32 DISPID_SVGFEBLENDELEMENT;
    internal static UInt32 DISPID_SVGFECOLORMATRIXELEMENT;
    internal static UInt32 DISPID_SVGFECOMPONENTTRANSFERELEMENT;
    internal static UInt32 DISPID_SVGCOMPONENTTRANSFERFUNCTIONELEMENT;
    internal static UInt32 DISPID_SVGFECOMPOSITEELEMENT;
    internal static UInt32 DISPID_SVGFECONVOLVEMATRIXELEMENT;
    internal static UInt32 DISPID_SVGFEDIFFUSELIGHTINGELEMENT;
    internal static UInt32 DISPID_SVGFEDISPLACEMENTMAPELEMENT;
    internal static UInt32 DISPID_SVGFEDISTANTLIGHTELEMENT;
    internal static UInt32 DISPID_SVGFEFLOODELEMENT;
    internal static UInt32 DISPID_SVGFEFUNCAELEMENT;
    internal static UInt32 DISPID_SVGFEFUNCBELEMENT;
    internal static UInt32 DISPID_SVGFEFUNCGELEMENT;
    internal static UInt32 DISPID_SVGFEFUNCRELEMENT;
    internal static UInt32 DISPID_SVGFEGAUSSIANBLURELEMENT;
    internal static UInt32 DISPID_SVGFEIMAGEELEMENT;
    internal static UInt32 DISPID_SVGFEMERGEELEMENT;
    internal static UInt32 DISPID_SVGFEMERGENODEELEMENT;
    internal static UInt32 DISPID_SVGFEMORPHOLOGYELEMENT;
    internal static UInt32 DISPID_SVGFEOFFSETELEMENT;
    internal static UInt32 DISPID_SVGFEPOINTLIGHTELEMENT;
    internal static UInt32 DISPID_SVGFESPECULARLIGHTINGELEMENT;
    internal static UInt32 DISPID_SVGFESPOTLIGHTELEMENT;
    internal static UInt32 DISPID_SVGFETILEELEMENT;
    internal static UInt32 DISPID_SVGFETURBULENCEELEMENT;
    internal static UInt32 DISPID_SVGFILTERELEMENT;
    internal static UInt32 DISPID_SVGFONT_FACE_FORMATELEMENT;
    internal static UInt32 DISPID_SVGFONT_FACE_NAMEELEMENT;
    internal static UInt32 DISPID_SVGFONT_FACE_SRCELEMENT;
    internal static UInt32 DISPID_SVGFONT_FACE_URIELEMENT;
    internal static UInt32 DISPID_SVGFONT_FACEELEMENT;
    internal static UInt32 DISPID_SVGFONTELEMENT;
    internal static UInt32 DISPID_SVGFOREIGNOBJECTELEMENT;
    internal static UInt32 DISPID_SVGGELEMENT;
    internal static UInt32 DISPID_SVGGLYPHELEMENT;
    internal static UInt32 DISPID_SVGGLYPHREFELEMENT;
    internal static UInt32 DISPID_SVGGRADIENTELEMENT;
    internal static UInt32 DISPID_SVGHKERNELEMENT;
    internal static UInt32 DISPID_SVGIMAGEELEMENT;
    internal static UInt32 DISPID_SVGLENGTH;
    internal static UInt32 DISPID_SVGLENGTHLIST;
    internal static UInt32 DISPID_SVGPRESERVEASPECTRATIO;
    internal static UInt32 DISPID_SVGANIMATEDPRESERVEASPECTRATIO;
    internal static UInt32 DISPID_SVGPOINT;
    internal static UInt32 DISPID_SVGPOINTLIST;
    internal static UInt32 DISPID_SVGLINEARGRADIENTELEMENT;
    internal static UInt32 DISPID_SVGLINEELEMENT;
    internal static UInt32 DISPID_SVGMARKERELEMENT;
    internal static UInt32 DISPID_SVGMASKELEMENT;
    internal static UInt32 DISPID_SVGMETADATAELEMENT;
    internal static UInt32 DISPID_SVGMISSING_GLYPHELEMENT;
    internal static UInt32 DISPID_SVGMPATHELEMENT;
    internal static UInt32 DISPID_SVGNUMBER;
    internal static UInt32 DISPID_SVGNUMBERLIST;
    internal static UInt32 DISPID_SVGPATHELEMENT;
    internal static UInt32 DISPID_SVGPATTERNELEMENT;
    internal static UInt32 DISPID_SVGPOLYGONELEMENT;
    internal static UInt32 DISPID_SVGPOLYLINEELEMENT;
    internal static UInt32 DISPID_SVGRADIALGRADIENTELEMENT;
    internal static UInt32 DISPID_SVGRECT;
    internal static UInt32 DISPID_SVGRECTELEMENT;
    internal static UInt32 DISPID_SVGSCRIPTELEMENT;
    internal static UInt32 DISPID_SVGSETELEMENT;
    internal static UInt32 DISPID_SVGSTOPELEMENT;
    internal static UInt32 DISPID_SVGSTRINGLIST;
    internal static UInt32 DISPID_SVGSTYLEELEMENT;
    internal static UInt32 DISPID_SVGSVGELEMENT;
    internal static UInt32 DISPID_SVGSWITCHELEMENT;
    internal static UInt32 DISPID_SVGSYMBOLELEMENT;
    internal static UInt32 DISPID_SVGTITLEELEMENT;
    internal static UInt32 DISPID_SVGTREFELEMENT;
    internal static UInt32 DISPID_SVGTEXTCONTENTELEMENT;
    internal static UInt32 DISPID_SVGTEXTCONTENTELEMENT_BASE;
    internal static UInt32 DISPID_SVGTEXTPOSITIONINGELEMENT;
    internal static UInt32 DISPID_SVGTEXTPOSITIONINGELEMENT_BASE;
    internal static UInt32 DISPID_SVGTEXTELEMENT;
    internal static UInt32 DISPID_SVGTSPANELEMENT;
    internal static UInt32 DISPID_SVGTEXTPATHELEMENT;
    internal static UInt32 DISPID_SVGUSEELEMENT;
    internal static UInt32 DISPID_SVGVIEWELEMENT;
    internal static UInt32 DISPID_SVGVKERNELEMENT;
    internal static UInt32 DISPID_SVGMATRIX;
    internal static UInt32 DISPID_SVGTRANSFORM;
    internal static UInt32 DISPID_SVGTRANSFORMLIST;
    internal static UInt32 DISPID_SVGANIMATEDTRANSFORMLIST;
    internal static UInt32 DISPID_SVGPATHSEG;
    internal static UInt32 DISPID_SVGPATHSEG_BASE;
    internal static UInt32 DISPID_SVGPATHSEGLIST;
    internal static UInt32 DISPID_SVGPATHSEGARCABS;
    internal static UInt32 DISPID_SVGPATHSEGARCREL;
    internal static UInt32 DISPID_SVGPATHSEGCLOSEPATH;
    internal static UInt32 DISPID_SVGPATHSEGMOVETOABS;
    internal static UInt32 DISPID_SVGPATHSEGMOVETOREL;
    internal static UInt32 DISPID_SVGPATHSEGLINETOABS;
    internal static UInt32 DISPID_SVGPATHSEGLINETOREL;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOCUBICABS;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOCUBICREL;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOCUBICSMOOTHABS;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOCUBICSMOOTHREL;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOQUADRATICABS;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOQUADRATICREL;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHABS;
    internal static UInt32 DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHREL;
    internal static UInt32 DISPID_SVGPATHSEGLINETOHORIZONTALABS;
    internal static UInt32 DISPID_SVGPATHSEGLINETOHORIZONTALREL;
    internal static UInt32 DISPID_SVGPATHSEGLINETOVERTICALABS;
    internal static UInt32 DISPID_SVGPATHSEGLINETOVERTICALREL;
    internal static UInt32 DISPID_CANVASELEMENT;
    internal static UInt32 DISPID_CANVASRENDERCONTEXT2D;
    internal static UInt32 DISPID_CANVASGRADIENT;
    internal static UInt32 DISPID_CANVASTEXTMETRICS;
    internal static UInt32 DISPID_CANVASIMAGEDATA;
    internal static UInt32 DISPID_CANVASPIXELARRAY;
    internal static UInt32 DISPID_PERFORMANCE;
    internal static UInt32 DISPID_PERFORMANCENAVIGATION;
    internal static UInt32 DISPID_PERFORMANCETIMING;
    internal static UInt32 DISPID_MSHTMLWEBVIEWELEMENT;
    internal static UInt32 DISPID_WEBGEOLOCATION;
    internal static UInt32 DISPID_WEBGEOPOSITION;
    internal static UInt32 DISPID_WEBGEOCOORDINATES;
    internal static UInt32 DISPID_WEBGEOPOSITION_ERROR;
    internal static UInt32 DISPID_DATALIST;
    internal static UInt32 DISPID_IE8_ANCHOR;
    internal static UInt32 DISPID_IE8_AREA;
    internal static UInt32 DISPID_IE8_BASE;
    internal static UInt32 DISPID_IE8_BODY;
    internal static UInt32 DISPID_IE8_FORM;
    internal static UInt32 DISPID_IE8_HEAD;
    internal static UInt32 DISPID_IE8_IMG;
    internal static UInt32 DISPID_IE8_INPUT;
    internal static UInt32 DISPID_IE8_LINK;
    internal static UInt32 DISPID_IE8_MOD;
    internal static UInt32 DISPID_IE8_SCRIPT;
    internal static UInt32 DISPID_IE8_ATTR;
    internal static UInt32 DISPID_IE8_NAMEDNODEMAP;
    internal static UInt32 DISPID_IE8_COLLECTION;
    internal static UInt32 DISPID_IE8_PARAM;
    internal static UInt32 DISPID_IE8_EMBED;
    internal static UInt32 DISPID_IE8_BLOCK;
    internal static UInt32 DISPID_IE8_META;
    internal static UInt32 DISPID_IE8_STYLE;
    internal static UInt32 DISPID_IE8_SELECT;
    internal static UInt32 DISPID_IE8_ELEMENTBASE;
    internal static UInt32 DISPID_IE8_ELEMENTMAX;
    internal static UInt32 DISPID_IE8_ELEMENT;
    internal static UInt32 DISPID_IE8_FRAMESITEBASE;
    internal static UInt32 DISPID_IE8_FRAMEMAX;
    internal static UInt32 DISPID_IE8_FRAME;
    internal static UInt32 DISPID_IE8_IFRAME;
    internal static UInt32 DISPID_IE8_OBJECTBASE;
    internal static UInt32 DISPID_IE8_OBJECTMAX;
    internal static UInt32 DISPID_IE8_OBJECT;
    internal static UInt32 DISPID_IE9_ELEMENTBASE;
    internal static UInt32 DISPID_IE9_ELEMENTMAX;
    internal static UInt32 DISPID_IE9_ELEMENT;
    internal static UInt32 DISPID_IE10_ELEMENTBASE;
    internal static UInt32 DISPID_IE10_ELEMENTMAX;
    internal static UInt32 DISPID_IE10_ELEMENT;
    internal static int DISPID_WINDOWOBJECT;
    internal static int DISPID_PERFORMANCEOBJECT;
    internal static int DISPID_LOCATIONOBJECT;
    internal static int DISPID_HISTORYOBJECT;
    internal static int DISPID_NAVIGATOROBJECT;
    internal static int DISPID_SECURITYCTX;
    internal static int DISPID_AMBIENT_DLCONTROL;
    internal static int DISPID_AMBIENT_USERAGENT;
    internal static int DISPID_SECURITYDOMAIN;
    internal static int DISPID_DEBUG_ISSECUREPROXY;
    internal static int DISPID_DEBUG_TRUSTEDPROXY;
    internal static int DISPID_DEBUG_INTERNALWINDOW;
    internal static int DISPID_DEBUG_ENABLESECUREPROXYASSERTS;
    internal static UInt32 DISPID_ONABORT;
    internal static UInt32 DISPID_ONCHANGE;
    internal static UInt32 DISPID_ONERROR;
    internal static UInt32 DISPID_ONLOAD;
    internal static UInt32 DISPID_ONSELECT;
    internal static UInt32 DISPID_ONSUBMIT;
    internal static UInt32 DISPID_ONUNLOAD;
    internal static UInt32 DISPID_ONBOUNCE;
    internal static UInt32 DISPID_ONFINISH;
    internal static UInt32 DISPID_ONSTART;
    internal static UInt32 DISPID_ONLAYOUT;
    internal static UInt32 DISPID_ONSCROLL;
    internal static UInt32 DISPID_ONRESET;
    internal static UInt32 DISPID_ONRESIZE;
    internal static UInt32 DISPID_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_ONCHANGEFOCUS;
    internal static UInt32 DISPID_ONCHANGEBLUR;
    internal static UInt32 DISPID_ONPERSIST;
    internal static UInt32 DISPID_ONPERSISTSAVE;
    internal static UInt32 DISPID_ONPERSISTLOAD;
    internal static UInt32 DISPID_ONCONTEXTMENU;
    internal static UInt32 DISPID_ONBEFOREPRINT;
    internal static UInt32 DISPID_ONAFTERPRINT;
    internal static UInt32 DISPID_ONSTOP;
    internal static UInt32 DISPID_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_ONMOUSEHOVER;
    internal static UInt32 DISPID_ONCONTENTREADY;
    internal static UInt32 DISPID_ONLAYOUTCOMPLETE;
    internal static UInt32 DISPID_ONPAGE;
    internal static UInt32 DISPID_ONLINKEDOVERFLOW;
    internal static UInt32 DISPID_ONMOUSEWHEEL;
    internal static UInt32 DISPID_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_ONMOVE;
    internal static UInt32 DISPID_ONCONTROLSELECT;
    internal static UInt32 DISPID_ONSELECTIONCHANGE;
    internal static UInt32 DISPID_ONMOVESTART;
    internal static UInt32 DISPID_ONMOVEEND;
    internal static UInt32 DISPID_ONRESIZESTART;
    internal static UInt32 DISPID_ONRESIZEEND;
    internal static UInt32 DISPID_ONMOUSEENTER;
    internal static UInt32 DISPID_ONMOUSELEAVE;
    internal static UInt32 DISPID_ONACTIVATE;
    internal static UInt32 DISPID_ONDEACTIVATE;
    internal static UInt32 DISPID_ONMULTILAYOUTCLEANUP;
    internal static UInt32 DISPID_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_ONFOCUSIN;
    internal static UInt32 DISPID_ONFOCUSOUT;
    internal static UInt32 DISPID_ONVALUECHANGE;
    internal static UInt32 DISPID_ONSELECTADD;
    internal static UInt32 DISPID_ONSELECTREMOVE;
    internal static UInt32 DISPID_ONSELECTWITHIN;
    internal static UInt32 DISPID_ONSYSTEMSCROLLINGSTART;
    internal static UInt32 DISPID_ONSYSTEMSCROLLINGEND;
    internal static UInt32 DISPID_ONOBJECTCONTENTSCROLLED;
    internal static UInt32 DISPID_ONSTORAGE;
    internal static UInt32 DISPID_ONSTORAGECOMMIT;
    internal static UInt32 DISPID_ONSHOW;
    internal static UInt32 DISPID_ONHIDE;
    internal static UInt32 DISPID_ONALERT;
    internal static UInt32 DISPID_ONPOPUPMENUSTART;
    internal static UInt32 DISPID_ONPOPUPMENUEND;
    internal static UInt32 DISPID_ONONLINE;
    internal static UInt32 DISPID_ONOFFLINE;
    internal static UInt32 DISPID_ONHASHCHANGE;
    internal static UInt32 DISPID_ONMESSAGE;
    internal static UInt32 DISPID_ONDOMMUTATION;
    internal static UInt32 DISPID_SVGLOAD;
    internal static UInt32 DISPID_SVGUNLOAD;
    internal static UInt32 DISPID_SVGABORT;
    internal static UInt32 DISPID_SVGERROR;
    internal static UInt32 DISPID_SVGRESIZE;
    internal static UInt32 DISPID_SVGSCROLL;
    internal static UInt32 DISPID_SVGZOOM;
    internal static UInt32 DISPID_MSPOINTERDOWN;
    internal static UInt32 DISPID_MSPOINTERMOVE;
    internal static UInt32 DISPID_MSPOINTERUP;
    internal static UInt32 DISPID_MSPOINTEROVER;
    internal static UInt32 DISPID_MSPOINTEROUT;
    internal static UInt32 DISPID_MSPOINTERCANCEL;
    internal static UInt32 DISPID_MSPOINTERHOVER;
    internal static UInt32 DISPID_MSGESTURESTART;
    internal static UInt32 DISPID_MSGESTURECHANGE;
    internal static UInt32 DISPID_MSGESTUREEND;
    internal static UInt32 DISPID_MSGESTUREHOLD;
    internal static UInt32 DISPID_MSGESTURETAP;
    internal static UInt32 DISPID_MSGESTUREDOUBLETAP;
    internal static UInt32 DISPID_MSINERTIASTART;
    internal static UInt32 DISPID_MSLOSTPOINTERCAPTURE;
    internal static UInt32 DISPID_MSGOTPOINTERCAPTURE;
    internal static UInt32 DISPID_MSTRANSITIONSTART;
    internal static UInt32 DISPID_MSTRANSITIONEND;
    internal static UInt32 DISPID_MSANIMATIONSTART;
    internal static UInt32 DISPID_MSANIMATIONEND;
    internal static UInt32 DISPID_MSANIMATIONITERATION;
    internal static UInt32 DISPID_MSGESTUREINIT;
    internal static UInt32 DISPID_MSMANIPULATIONSTATECHANGED;
    internal static UInt32 DISPID_ONOPEN;
    internal static UInt32 DISPID_ONCLOSE;
    internal static UInt32 DISPID_MSPOINTERENTER;
    internal static UInt32 DISPID_MSPOINTERLEAVE;
    internal static UInt32 DISPID_MSORIENTATIONCHANGE;
    internal static UInt32 DISPID_ONDEVICEORIENTATION;
    internal static UInt32 DISPID_ONDEVICEMOTION;
    internal static UInt32 DISPID_ONPAGESHOW;
    internal static UInt32 DISPID_ONPAGEHIDE;
    internal static UInt32 DISPID_ONCOMPASSNEEDSCALIBRATION;
    internal static UInt32 DISPID_A_FIRST;
    internal static UInt32 DISPID_A_MIN;
    internal static UInt32 DISPID_A_MAX;
    internal static UInt32 DISPID_A_BACKGROUNDIMAGE;
    internal static UInt32 DISPID_A_COLOR;
    internal static UInt32 DISPID_A_TEXTTRANSFORM;
    internal static UInt32 DISPID_A_NOWRAP;
    internal static UInt32 DISPID_A_LINEHEIGHT;
    internal static UInt32 DISPID_A_TEXTINDENT;
    internal static UInt32 DISPID_A_LETTERSPACING;
    internal static UInt32 DISPID_A_LANG;
    internal static UInt32 DISPID_A_OVERFLOW;
    internal static UInt32 DISPID_A_PADDING;
    internal static UInt32 DISPID_A_PADDINGTOP;
    internal static UInt32 DISPID_A_PADDINGRIGHT;
    internal static UInt32 DISPID_A_PADDINGBOTTOM;
    internal static UInt32 DISPID_A_PADDINGLEFT;
    internal static UInt32 DISPID_A_CLEAR;
    internal static UInt32 DISPID_A_LISTTYPE;
    internal static UInt32 DISPID_A_FONTFACE;
    internal static UInt32 DISPID_A_FONTSIZE;
    internal static UInt32 DISPID_A_TEXTDECORATIONLINETHROUGH;
    internal static UInt32 DISPID_A_TEXTDECORATIONUNDERLINE;
    internal static UInt32 DISPID_A_TEXTDECORATIONBLINK;
    internal static UInt32 DISPID_A_TEXTDECORATIONNONE;
    internal static UInt32 DISPID_A_FONTSTYLE;
    internal static UInt32 DISPID_A_FONTVARIANT;
    internal static UInt32 DISPID_A_BASEFONT;
    internal static UInt32 DISPID_A_FONTWEIGHT;
    internal static UInt32 DISPID_A_TABLEBORDERCOLOR;
    internal static UInt32 DISPID_A_TABLEBORDERCOLORLIGHT;
    internal static UInt32 DISPID_A_TABLEBORDERCOLORDARK;
    internal static UInt32 DISPID_A_TABLEVALIGN;
    internal static UInt32 DISPID_A_BACKGROUND;
    internal static UInt32 DISPID_A_BACKGROUNDPOSX;
    internal static UInt32 DISPID_A_BACKGROUNDPOSY;
    internal static UInt32 DISPID_A_TEXTDECORATION;
    internal static UInt32 DISPID_A_MARGIN;
    internal static UInt32 DISPID_A_MARGINTOP;
    internal static UInt32 DISPID_A_MARGINRIGHT;
    internal static UInt32 DISPID_A_MARGINBOTTOM;
    internal static UInt32 DISPID_A_MARGINLEFT;
    internal static UInt32 DISPID_A_FONT;
    internal static UInt32 DISPID_A_FONTSIZEKEYWORD;
    internal static UInt32 DISPID_A_FONTSIZECOMBINE;
    internal static UInt32 DISPID_A_BACKGROUNDREPEAT;
    internal static UInt32 DISPID_A_BACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_A_BACKGROUNDPOSITION;
    internal static UInt32 DISPID_A_WORDSPACING;
    internal static UInt32 DISPID_A_VERTICALALIGN;
    internal static UInt32 DISPID_A_BORDER;
    internal static UInt32 DISPID_A_BORDERTOP;
    internal static UInt32 DISPID_A_BORDERRIGHT;
    internal static UInt32 DISPID_A_BORDERBOTTOM;
    internal static UInt32 DISPID_A_BORDERLEFT;
    internal static UInt32 DISPID_A_BORDERCOLOR;
    internal static UInt32 DISPID_A_BORDERTOPCOLOR;
    internal static UInt32 DISPID_A_BORDERRIGHTCOLOR;
    internal static UInt32 DISPID_A_BORDERBOTTOMCOLOR;
    internal static UInt32 DISPID_A_BORDERLEFTCOLOR;
    internal static UInt32 DISPID_A_BORDERWIDTH;
    internal static UInt32 DISPID_A_BORDERTOPWIDTH;
    internal static UInt32 DISPID_A_BORDERRIGHTWIDTH;
    internal static UInt32 DISPID_A_BORDERBOTTOMWIDTH;
    internal static UInt32 DISPID_A_BORDERLEFTWIDTH;
    internal static UInt32 DISPID_A_BORDERSTYLE;
    internal static UInt32 DISPID_A_BORDERTOPSTYLE;
    internal static UInt32 DISPID_A_BORDERRIGHTSTYLE;
    internal static UInt32 DISPID_A_BORDERBOTTOMSTYLE;
    internal static UInt32 DISPID_A_BORDERLEFTSTYLE;
    internal static UInt32 DISPID_A_TEXTDECORATIONOVERLINE;
    internal static UInt32 DISPID_A_FLOAT;
    internal static UInt32 DISPID_A_DISPLAY;
    internal static UInt32 DISPID_A_LISTSTYLETYPE;
    internal static UInt32 DISPID_A_LISTSTYLEPOSITION;
    internal static UInt32 DISPID_A_LISTSTYLEIMAGE;
    internal static UInt32 DISPID_A_LISTSTYLE;
    internal static UInt32 DISPID_A_WHITESPACE;
    internal static UInt32 DISPID_A_PAGEBREAKBEFORE;
    internal static UInt32 DISPID_A_PAGEBREAKAFTER;
    internal static UInt32 DISPID_A_SCROLL;
    internal static UInt32 DISPID_A_VISIBILITY;
    internal static UInt32 DISPID_A_HIDDEN;
    internal static UInt32 DISPID_A_FILTER;
    internal static UInt32 DISPID_DEFAULTVALUE;
    internal static UInt32 DISPID_A_BORDERCOLLAPSE;
    internal static UInt32 DISPID_A_POSITION;
    internal static UInt32 DISPID_A_ZINDEX;
    internal static UInt32 DISPID_A_CLIP;
    internal static UInt32 DISPID_A_CLIPRECTTOP;
    internal static UInt32 DISPID_A_CLIPRECTRIGHT;
    internal static UInt32 DISPID_A_CLIPRECTBOTTOM;
    internal static UInt32 DISPID_A_CLIPRECTLEFT;
    internal static UInt32 DISPID_A_FONTFACESRC;
    internal static UInt32 DISPID_A_TABLELAYOUT;
    internal static UInt32 DISPID_A_STYLETEXT;
    internal static UInt32 DISPID_A_LANGUAGE;
    internal static UInt32 DISPID_A_VALUE;
    internal static UInt32 DISPID_A_CURSOR;
    internal static UInt32 DISPID_A_EVENTSINK;
    internal static UInt32 DISPID_A_PROPNOTIFYSINK;
    internal static UInt32 DISPID_A_ROWSETNOTIFYSINK;
    internal static UInt32 DISPID_INTERNAL_INLINESTYLEAA;
    internal static UInt32 DISPID_INTERNAL_CSTYLEPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_INVOKECONTEXT;
    internal static UInt32 DISPID_A_BGURLIMGCTXCACHEINDEX;
    internal static UInt32 DISPID_A_LIURLIMGCTXCACHEINDEX;
    internal static UInt32 DISPID_A_ROWSETASYNCHNOTIFYSINK;
    internal static UInt32 DISPID_INTERNAL_FILTERPTRCACHE;
    internal static UInt32 DISPID_A_ROWPOSITIONCHANGESINK;
    internal static UInt32 DISPID_A_BEHAVIOR;
    internal static UInt32 DISPID_A_READYSTATE;
    internal static UInt32 DISPID_A_DIR;
    internal static UInt32 DISPID_A_UNICODEBIDI;
    internal static UInt32 DISPID_A_DIRECTION;
    internal static UInt32 DISPID_A_IMEMODE;
    internal static UInt32 DISPID_A_RUBYALIGN;
    internal static UInt32 DISPID_A_RUBYPOSITION;
    internal static UInt32 DISPID_A_RUBYOVERHANG;
    internal static UInt32 DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY;
    internal static UInt32 DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY;
    internal static UInt32 DISPID_INTERNAL_CDOMCHILDRENPTRCACHE;
    internal static UInt32 DISPID_A_LAYOUTGRIDCHAR;
    internal static UInt32 DISPID_A_LAYOUTGRIDLINE;
    internal static UInt32 DISPID_A_LAYOUTGRIDMODE;
    internal static UInt32 DISPID_A_LAYOUTGRIDTYPE;
    internal static UInt32 DISPID_A_LAYOUTGRID;
    internal static UInt32 DISPID_A_TEXTAUTOSPACE;
    internal static UInt32 DISPID_A_LINEBREAK;
    internal static UInt32 DISPID_A_WORDBREAK;
    internal static UInt32 DISPID_A_TEXTJUSTIFY;
    internal static UInt32 DISPID_A_TEXTJUSTIFYTRIM;
    internal static UInt32 DISPID_A_TEXTKASHIDA;
    internal static UInt32 DISPID_A_OVERFLOWX;
    internal static UInt32 DISPID_A_OVERFLOWY;
    internal static UInt32 DISPID_A_HTCDISPATCHITEM_VALUE;
    internal static UInt32 DISPID_A_DOCFRAGMENT;
    internal static UInt32 DISPID_A_HTCDD_ELEMENT;
    internal static UInt32 DISPID_A_HTCDD_CREATEEVENTOBJECT;
    internal static UInt32 DISPID_A_URNATOM;
    internal static UInt32 DISPID_A_UNIQUEPEERNUMBER;
    internal static UInt32 DISPID_A_ACCELERATOR;
    internal static UInt32 DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE;
    internal static UInt32 DISPID_INTERNAL_RUNTIMESTYLEAA;
    internal static UInt32 DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY;
    internal static UInt32 DISPID_A_EXTENDEDTAGDESC;
    internal static UInt32 DISPID_A_ROTATE;
    internal static UInt32 DISPID_A_ZOOM;
    internal static UInt32 DISPID_A_HTCDD_PROTECTEDELEMENT;
    internal static UInt32 DISPID_A_LAYOUTFLOW;
    internal static UInt32 DISPID_INTERNAL_FILTERNATIVEINFOPTRCACHE;
    internal static UInt32 DISPID_A_HTCDD_ISMARKUPSHARED;
    internal static UInt32 DISPID_A_WORDWRAP;
    internal static UInt32 DISPID_A_TEXTUNDERLINEPOSITION;
    internal static UInt32 DISPID_A_HASLAYOUT;
    internal static UInt32 DISPID_A_MEDIA;
    internal static UInt32 DISPID_A_EDITABLE;
    internal static UInt32 DISPID_A_HIDEFOCUS;
    internal static UInt32 DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE;
    internal static UInt32 DISPID_A_HTCDD_DEFAULTS;
    internal static UInt32 DISPID_A_TEXTLINETHROUGHSTYLE;
    internal static UInt32 DISPID_A_TEXTUNDERLINESTYLE;
    internal static UInt32 DISPID_A_TEXTEFFECT;
    internal static UInt32 DISPID_A_TEXTBACKGROUNDCOLOR;
    internal static UInt32 DISPID_A_RENDERINGPRIORITY;
    internal static UInt32 DISPID_INTERNAL_DWNPOSTPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_DWNDOCPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_DATABINDTASKPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_URLLOCATIONCACHE;
    internal static UInt32 DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_STMDIRTYPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_COMPUTEFORMATSTATECACHE;
    internal static UInt32 DISPID_A_SCROLLBARBASECOLOR;
    internal static UInt32 DISPID_A_SCROLLBARFACECOLOR;
    internal static UInt32 DISPID_A_SCROLLBAR3DLIGHTCOLOR;
    internal static UInt32 DISPID_A_SCROLLBARSHADOWCOLOR;
    internal static UInt32 DISPID_A_SCROLLBARHIGHLIGHTCOLOR;
    internal static UInt32 DISPID_A_SCROLLBARDARKSHADOWCOLOR;
    internal static UInt32 DISPID_A_SCROLLBARARROWCOLOR;
    internal static UInt32 DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE;
    internal static UInt32 DISPID_A_DEFAULTTEXTSELECTION;
    internal static UInt32 DISPID_A_TEXTDECORATIONCOLOR;
    internal static UInt32 DISPID_A_TEXTCOLOR;
    internal static UInt32 DISPID_A_STYLETEXTDECORATION;
    internal static UInt32 DISPID_A_WRITINGMODE;
    internal static UInt32 DISPID_INTERNAL_MEDIA_REFERENCE;
    internal static UInt32 DISPID_INTERNAL_GENERICCOMPLUSREF;
    internal static UInt32 DISPID_INTERNAL_FOCUSITEMS;
    internal static UInt32 DISPID_A_SCROLLBARTRACKCOLOR;
    internal static UInt32 DISPID_INTERNAL_DWNHEADERCACHE;
    internal static UInt32 DISPID_A_FROZEN;
    internal static UInt32 DISPID_A_VIEWINHERITSTYLE;
    internal static UInt32 DISPID_INTERNAL_FRAMESCOLLECTION;
    internal static UInt32 DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE;
    internal static UInt32 DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER;
    internal static UInt32 DISPID_A_TEXTALIGNLAST;
    internal static UInt32 DISPID_A_TEXTKASHIDASPACE;
    internal static UInt32 DISPID_INTERNAL_FONTHISTORYINDEX;
    internal static UInt32 DISPID_A_ALLOWTRANSPARENCY;
    internal static UInt32 DISPID_INTERNAL_URLSEARCHCACHE;
    internal static UInt32 DISPID_A_ISBLOCK;
    internal static UInt32 DISPID_A_TEXTOVERFLOW;
    internal static UInt32 DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE;
    internal static UInt32 DISPID_A_MINHEIGHT;
    internal static UInt32 DISPID_INTERNAL_INVOKECONTEXTDOCUMENT;
    internal static UInt32 DISPID_A_INTERPOLATION;
    internal static UInt32 DISPID_A_MAXHEIGHT;
    internal static UInt32 DISPID_A_MINWIDTH;
    internal static UInt32 DISPID_A_MAXWIDTH;
    internal static UInt32 DISPID_INTERNAL_ARYOBJECTRELEASECLEANUPPTRCACHE;
    internal static UInt32 DISPID_A_CONTENT;
    internal static UInt32 DISPID_A_CAPTIONSIDE;
    internal static UInt32 DISPID_A_COUNTERINCREMENT;
    internal static UInt32 DISPID_A_COUNTERRESET;
    internal static UInt32 DISPID_A_OUTLINE;
    internal static UInt32 DISPID_A_OUTLINEWIDTH;
    internal static UInt32 DISPID_A_OUTLINESTYLE;
    internal static UInt32 DISPID_A_OUTLINECOLOR;
    internal static UInt32 DISPID_A_BOXSIZING;
    internal static UInt32 DISPID_A_BORDERSPACING;
    internal static UInt32 DISPID_A_ORPHANS;
    internal static UInt32 DISPID_A_WIDOWS;
    internal static UInt32 DISPID_A_PAGEBREAKINSIDE;
    internal static UInt32 DISPID_A_MS_BEHAVIOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARBASECOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARFACECOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBAR3DLIGHTCOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARSHADOWCOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARHIGHLIGHTCOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARDARKSHADOWCOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARARROWCOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLBARTRACKCOLOR;
    internal static UInt32 DISPID_A_MS_TEXTALIGNLAST;
    internal static UInt32 DISPID_A_MS_TEXTOVERFLOW;
    internal static UInt32 DISPID_A_MS_TEXTUNDERLINEPOSITION;
    internal static UInt32 DISPID_A_MS_WRITINGMODE;
    internal static UInt32 DISPID_A_MS_IMEMODE;
    internal static UInt32 DISPID_A_MS_BACKGROUNDPOSX;
    internal static UInt32 DISPID_A_MS_BACKGROUNDPOSY;
    internal static UInt32 DISPID_A_MS_ACCELERATOR;
    internal static UInt32 DISPID_A_MS_LAYOUTFLOW;
    internal static UInt32 DISPID_A_MS_ZOOM;
    internal static UInt32 DISPID_A_EMPTYCELLS;
    internal static UInt32 DISPID_A_MS_BLOCKPROGRESSION;
    internal static UInt32 DISPID_A_QUOTES;
    internal static UInt32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCBEFORE;
    internal static UInt32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCAFTER;
    internal static UInt32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLBEFORE;
    internal static UInt32 DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLAFTER;
    internal static UInt32 DISPID_AAHEADER;
    internal static UInt32 DISPID_INTERNAL_GETTERSETTERCOLLECTION;
    internal static UInt32 DISPID_A_MS_LAYOUTGRIDCHAR;
    internal static UInt32 DISPID_A_MS_LAYOUTGRIDLINE;
    internal static UInt32 DISPID_A_MS_LAYOUTGRIDMODE;
    internal static UInt32 DISPID_A_MS_LAYOUTGRIDTYPE;
    internal static UInt32 DISPID_A_MS_LAYOUTGRID;
    internal static UInt32 DISPID_A_MS_LINEBREAK;
    internal static UInt32 DISPID_A_MS_FILTER;
    internal static UInt32 DISPID_A_MS_OVERFLOWX;
    internal static UInt32 DISPID_A_MS_OVERFLOWY;
    internal static UInt32 DISPID_A_MS_TEXTAUTOSPACE;
    internal static UInt32 DISPID_A_MS_TEXTJUSTIFY;
    internal static UInt32 DISPID_A_MS_TEXTKASHIDASPACE;
    internal static UInt32 DISPID_A_MS_WORDBREAK;
    internal static UInt32 DISPID_A_MS_WORDWRAP;
    internal static UInt32 DISPID_INTERNAL_URIBEFOREREDIRECT;
    internal static UInt32 DISPID_A_ALIGNMENTBASELINE;
    internal static UInt32 DISPID_A_BASELINESHIFT;
    internal static UInt32 DISPID_A_DOMINANTBASELINE;
    internal static UInt32 DISPID_A_FONTSIZEADJUST;
    internal static UInt32 DISPID_A_FONTSTRETCH;
    internal static UInt32 DISPID_A_OPACITY;
    internal static UInt32 DISPID_A_CLIPPATH;
    internal static UInt32 DISPID_A_CLIPRULE;
    internal static UInt32 DISPID_A_FILL;
    internal static UInt32 DISPID_A_FILLOPACITY;
    internal static UInt32 DISPID_A_FILLRULE;
    internal static UInt32 DISPID_A_KERNING;
    internal static UInt32 DISPID_A_MARKER;
    internal static UInt32 DISPID_A_MARKEREND;
    internal static UInt32 DISPID_A_MARKERMID;
    internal static UInt32 DISPID_A_MARKERSTART;
    internal static UInt32 DISPID_A_MASK;
    internal static UInt32 DISPID_A_POINTEREVENTS;
    internal static UInt32 DISPID_A_STOPCOLOR;
    internal static UInt32 DISPID_A_STOPOPACITY;
    internal static UInt32 DISPID_A_STROKE;
    internal static UInt32 DISPID_A_STROKEDASHARRAY;
    internal static UInt32 DISPID_A_STROKEDASHOFFSET;
    internal static UInt32 DISPID_A_STROKELINECAP;
    internal static UInt32 DISPID_A_STROKELINEJOIN;
    internal static UInt32 DISPID_A_STROKEMITERLIMIT;
    internal static UInt32 DISPID_A_STROKEOPACITY;
    internal static UInt32 DISPID_A_STROKEWIDTH;
    internal static UInt32 DISPID_A_TEXTANCHOR;
    internal static UInt32 DISPID_A_GLYPHORIENTATIONHORIZONTAL;
    internal static UInt32 DISPID_A_GLYPHORIENTATIONVERTICAL;
    internal static UInt32 DISPID_A_CSSFLOAT;
    internal static UInt32 DISPID_A_BORDERRADIUS;
    internal static UInt32 DISPID_A_BORDERTOPLEFTRADIUS;
    internal static UInt32 DISPID_A_BORDERTOPRIGHTRADIUS;
    internal static UInt32 DISPID_A_BORDERBOTTOMRIGHTRADIUS;
    internal static UInt32 DISPID_A_BORDERBOTTOMLEFTRADIUS;
    internal static UInt32 DISPID_A_MS_TRANSFORM;
    internal static UInt32 DISPID_A_IE9_BACKGROUNDCLIP;
    internal static UInt32 DISPID_A_IE9_BACKGROUNDORIGIN;
    internal static UInt32 DISPID_A_IE9_BACKGROUNDSIZE;
    internal static UInt32 DISPID_A_IE9_BOXSHADOW;
    internal static UInt32 DISPID_A_MS_TRANSFORMORIGIN;
    internal static UInt32 DISPID_A_MS_TRANSFORMORIGINX;
    internal static UInt32 DISPID_A_MS_TRANSFORMORIGINY;
    internal static UInt32 DISPID_A_MS_TEXTSIZEADJUST;
    internal static UInt32 DISPID_A_MS_TRANSITIONPROPERTY;
    internal static UInt32 DISPID_A_MS_TRANSITIONDURATION;
    internal static UInt32 DISPID_A_MS_TRANSITIONTIMINGFUNCTION;
    internal static UInt32 DISPID_A_MS_TRANSITIONDELAY;
    internal static UInt32 DISPID_A_MS_TRANSITION;
    internal static UInt32 DISPID_A_COLUMNS;
    internal static UInt32 DISPID_A_COLUMNCOUNT;
    internal static UInt32 DISPID_A_COLUMNWIDTH;
    internal static UInt32 DISPID_A_COLUMNGAP;
    internal static UInt32 DISPID_A_COLUMNFILL;
    internal static UInt32 DISPID_A_COLUMNSPAN;
    internal static UInt32 DISPID_A_COLUMNRULE;
    internal static UInt32 DISPID_A_COLUMNRULESTYLE;
    internal static UInt32 DISPID_A_COLUMNRULEWIDTH;
    internal static UInt32 DISPID_A_COLUMNRULECOLOR;
    internal static UInt32 DISPID_A_BREAKBEFORE;
    internal static UInt32 DISPID_A_BREAKAFTER;
    internal static UInt32 DISPID_A_BREAKINSIDE;
    internal static UInt32 DISPID_A_MS_TRANSFORMORIGINZ;
    internal static UInt32 DISPID_A_MS_PERSPECTIVE;
    internal static UInt32 DISPID_A_MS_PERSPECTIVEORIGIN;
    internal static UInt32 DISPID_A_MS_PERSPECTIVEORIGINX;
    internal static UInt32 DISPID_A_MS_PERSPECTIVEORIGINY;
    internal static UInt32 DISPID_A_MS_TRANSFORMSTYLE;
    internal static UInt32 DISPID_A_MS_BACKFACEVISIBILITY;
    internal static UInt32 DISPID_A_MS_SCROLLCHAINING;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMING;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMSNAPTYPE;
    internal static UInt32 DISPID_A_MS_SCROLLRAILS;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMCHAINING;
    internal static UInt32 DISPID_A_MS_SCROLLSNAPTYPE;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMLIMIT;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMSNAP;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMSNAPPOINTS;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMFACTOR;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMLIMITMIN;
    internal static UInt32 DISPID_A_MS_CONTENTZOOMLIMITMAX;
    internal static UInt32 DISPID_A_MS_SCROLLSNAPX;
    internal static UInt32 DISPID_A_MS_SCROLLSNAPY;
    internal static UInt32 DISPID_A_MS_SCROLLSNAPPOINTSX;
    internal static UInt32 DISPID_A_MS_SCROLLSNAPPOINTSY;
    internal static UInt32 DISPID_A_SPELLCHECK;
    internal static UInt32 DISPID_A_MS_GRIDCOLUMN;
    internal static UInt32 DISPID_A_MS_GRIDCOLUMNALIGN;
    internal static UInt32 DISPID_A_MS_GRIDCOLUMNS;
    internal static UInt32 DISPID_A_MS_GRIDCOLUMNSPAN;
    internal static UInt32 DISPID_A_MS_GRIDROW;
    internal static UInt32 DISPID_A_MS_GRIDROWALIGN;
    internal static UInt32 DISPID_A_MS_GRIDROWS;
    internal static UInt32 DISPID_A_MS_GRIDROWSPAN;
    internal static UInt32 DISPID_A_MS_ANIMATIONNAME;
    internal static UInt32 DISPID_A_MS_ANIMATIONDURATION;
    internal static UInt32 DISPID_A_MS_ANIMATIONTIMINGFUNCTION;
    internal static UInt32 DISPID_A_MS_ANIMATIONDELAY;
    internal static UInt32 DISPID_A_MS_ANIMATIONDIRECTION;
    internal static UInt32 DISPID_A_MS_ANIMATIONPLAYSTATE;
    internal static UInt32 DISPID_A_MS_ANIMATIONITERATIONCOUNT;
    internal static UInt32 DISPID_A_MS_ANIMATION;
    internal static UInt32 DISPID_A_MS_ANIMATIONFILLMODE;
    internal static UInt32 DISPID_A_FLOODCOLOR;
    internal static UInt32 DISPID_A_FLOODOPACITY;
    internal static UInt32 DISPID_A_COLORINTERPOLATIONFILTERS;
    internal static UInt32 DISPID_A_LIGHTINGCOLOR;
    internal static UInt32 DISPID_A_MS_SCROLLLIMITXMIN;
    internal static UInt32 DISPID_A_MS_SCROLLLIMITYMIN;
    internal static UInt32 DISPID_A_MS_SCROLLLIMITXMAX;
    internal static UInt32 DISPID_A_MS_SCROLLLIMITYMAX;
    internal static UInt32 DISPID_A_MS_SCROLLLIMIT;
    internal static UInt32 DISPID_A_MS_OVERFLOWSTYLE;
    internal static UInt32 DISPID_A_TEXTSHADOW;
    internal static UInt32 DISPID_A_MS_WRAPTHROUGH;
    internal static UInt32 DISPID_A_MS_FLOWFROM;
    internal static UInt32 DISPID_A_MS_FLOWINTO;
    internal static UInt32 DISPID_A_MS_HYPHENS;
    internal static UInt32 DISPID_A_MS_HYPHENATE_LIMIT_ZONE;
    internal static UInt32 DISPID_A_MS_HYPHENATE_LIMIT_CHARS;
    internal static UInt32 DISPID_A_MS_HYPHENATE_LIMIT_LINES;
    internal static UInt32 DISPID_A_DRAGGABLE;
    internal static UInt32 DISPID_A_MS_HIGHCONTRASTADJUST;
    internal static UInt32 DISPID_A_ENABLEBACKGROUND;
    internal static UInt32 DISPID_A_MS_WRAPMARGIN;
    internal static UInt32 DISPID_A_MS_WRAPFLOW;
    internal static UInt32 DISPID_A_MS_FONTFEATURESETTINGS;
    internal static UInt32 DISPID_A_MS_USERSELECT;
    internal static UInt32 DISPID_A_MS_TOUCHACTION;
    internal static UInt32 DISPID_A_CLASSLIST;
    internal static UInt32 DISPID_A_MS_SCROLLTRANSLATION;
    internal static UInt32 DISPID_A_MS_FLEX;
    internal static UInt32 DISPID_A_MS_FLEXPOSITIVE;
    internal static UInt32 DISPID_A_MS_FLEXNEGATIVE;
    internal static UInt32 DISPID_A_MS_FLEXPREFERREDSIZE;
    internal static UInt32 DISPID_A_MS_FLEXFLOW;
    internal static UInt32 DISPID_A_MS_FLEXDIRECTION;
    internal static UInt32 DISPID_A_MS_FLEXWRAP;
    internal static UInt32 DISPID_A_MS_FLEXALIGN;
    internal static UInt32 DISPID_A_MS_FLEXITEMALIGN;
    internal static UInt32 DISPID_A_MS_FLEXPACK;
    internal static UInt32 DISPID_A_MS_FLEXLINEPACK;
    internal static UInt32 DISPID_A_MS_FLEXORDER;
    internal static UInt32 DISPID_A_TRANSFORM;
    internal static UInt32 DISPID_A_TRANSFORMORIGIN;
    internal static UInt32 DISPID_A_TRANSITIONPROPERTY;
    internal static UInt32 DISPID_A_TRANSITIONDURATION;
    internal static UInt32 DISPID_A_TRANSITIONTIMINGFUNCTION;
    internal static UInt32 DISPID_A_TRANSITIONDELAY;
    internal static UInt32 DISPID_A_TRANSITION;
    internal static UInt32 DISPID_A_PERSPECTIVE;
    internal static UInt32 DISPID_A_PERSPECTIVEORIGIN;
    internal static UInt32 DISPID_A_TRANSFORMSTYLE;
    internal static UInt32 DISPID_A_BACKFACEVISIBILITY;
    internal static UInt32 DISPID_A_ANIMATIONNAME;
    internal static UInt32 DISPID_A_ANIMATIONDURATION;
    internal static UInt32 DISPID_A_ANIMATIONTIMINGFUNCTION;
    internal static UInt32 DISPID_A_ANIMATIONDELAY;
    internal static UInt32 DISPID_A_ANIMATIONDIRECTION;
    internal static UInt32 DISPID_A_ANIMATIONPLAYSTATE;
    internal static UInt32 DISPID_A_ANIMATIONITERATIONCOUNT;
    internal static UInt32 DISPID_A_ANIMATION;
    internal static UInt32 DISPID_A_ANIMATIONFILLMODE;
    internal static UInt32 DISPID_A_FONTFEATURESETTINGS;
    internal static UInt32 DISPID_A_TRANSFORMORIGINX;
    internal static UInt32 DISPID_A_TRANSFORMORIGINY;
    internal static UInt32 DISPID_A_TRANSFORMORIGINZ;
    internal static UInt32 DISPID_A_PERSPECTIVEORIGINX;
    internal static UInt32 DISPID_A_PERSPECTIVEORIGINY;
    internal static UInt32 DISPID_A_MS_TOUCHSELECT;
    internal static UInt32 DISPID_INTERNAL_ERRORPAGEREFRESHURL;
    internal static UInt32 DISPID_INTERNAL_ERRORPAGEREASON;
    internal static UInt32 DISPID_INTERNAL_ERRORPAGEDWNPOST;
    internal static UInt32 DISPID_A_FLEXDIRECTION;
    internal static UInt32 DISPID_A_FLEXWRAP;
    internal static UInt32 DISPID_A_FLEXFLOW;
    internal static UInt32 DISPID_A_ORDER;
    internal static UInt32 DISPID_A_FLEX;
    internal static UInt32 DISPID_A_FLEXGROW;
    internal static UInt32 DISPID_A_FLEXSHRINK;
    internal static UInt32 DISPID_A_FLEXBASIS;
    internal static UInt32 DISPID_A_JUSTIFYCONTENT;
    internal static UInt32 DISPID_A_ALIGNITEMS;
    internal static UInt32 DISPID_A_ALIGNSELF;
    internal static UInt32 DISPID_A_ALIGNCONTENT;
    internal static UInt32 DISPID_A_BORDERIMAGE;
    internal static UInt32 DISPID_A_BORDERIMAGESOURCE;
    internal static UInt32 DISPID_A_BORDERIMAGESLICE;
    internal static UInt32 DISPID_A_BORDERIMAGEWIDTH;
    internal static UInt32 DISPID_A_BORDERIMAGEOUTSET;
    internal static UInt32 DISPID_A_BORDERIMAGEREPEAT;
    internal static UInt32 DISPID_A_DATASET;
    internal static UInt32 DISPID_A_MS_IMEALIGN;
    internal static UInt32 DISPID_A_MS_TEXTCOMBINEHORIZONTAL;
    internal static UInt32 DISPID_A_TOUCHACTION;
    internal static UInt32 DISPID_A_WEBKIT_APPEARANCE;
    internal static UInt32 DISPID_A_WEBKIT_BOXALIGN;
    internal static UInt32 DISPID_A_WEBKIT_BOXORDINALGROUP;
    internal static UInt32 DISPID_A_WEBKIT_BOXPACK;
    internal static UInt32 DISPID_A_WEBKIT_BOXFLEX;
    internal static UInt32 DISPID_A_WEBKIT_BOXORIENT;
    internal static UInt32 DISPID_A_WEBKIT_BOXDIRECTION;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONFILLMODE;
    internal static UInt32 DISPID_A_WEBKIT_TRANSFORM;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDSIZE;
    internal static UInt32 DISPID_A_WEBKIT_BACKFACEVISIBILITY;
    internal static UInt32 DISPID_A_WEBKIT_BOXSIZING;
    internal static UInt32 DISPID_A_WEBKIT_USERSELECT;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATION;
    internal static UInt32 DISPID_A_WEBKIT_TRANSITION;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONNAME;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONDURATION;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONTIMINGFUNCTION;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONDELAY;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONITERATIONCOUNT;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONDIRECTION;
    internal static UInt32 DISPID_A_WEBKIT_ANIMATIONPLAYSTATE;
    internal static UInt32 DISPID_A_WEBKIT_TRANSITIONPROPERTY;
    internal static UInt32 DISPID_A_WEBKIT_TRANSITIONDURATION;
    internal static UInt32 DISPID_A_WEBKIT_TRANSITIONTIMINGFUNCTION;
    internal static UInt32 DISPID_A_WEBKIT_TRANSITIONDELAY;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDCOLOR;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDCLIP;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDIMAGE;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDREPEAT;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDORIGIN;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDPOSITION;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDPOSITIONX;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUNDPOSITIONY;
    internal static UInt32 DISPID_A_WEBKIT_BACKGROUND;
    internal static UInt32 DISPID_A_WEBKIT_TRANSFORMORIGIN;
    internal static UInt32 DISPID_A_WEBKIT_TRANSFORMORIGINX;
    internal static UInt32 DISPID_A_WEBKIT_TRANSFORMORIGINY;
    internal static UInt32 DISPID_A_WEBKIT_TRANSFORMORIGINZ;
    internal static UInt32 DISPID_A_WEBKIT_TEXTSIZEADJUST;
    internal static UInt32 DISPID_A_WEBKIT_BORDERIMAGE;
    internal static UInt32 DISPID_A_WEBKIT_BORDERIMAGESOURCE;
    internal static UInt32 DISPID_A_WEBKIT_BORDERIMAGESLICE;
    internal static UInt32 DISPID_A_WEBKIT_BORDERIMAGEWIDTH;
    internal static UInt32 DISPID_A_WEBKIT_BORDERIMAGEOUTSET;
    internal static UInt32 DISPID_A_WEBKIT_BORDERIMAGEREPEAT;
    internal static UInt32 DISPID_INTERNAL_FIRST;
    internal static UInt32 DISPID_INTERNAL_BACKGROUNDDEFINITION;
    internal static UInt32 DISPID_A_MEDIAORIENTATION;
    internal static UInt32 DISPID_A_MEDIAMAXWIDTH;
    internal static UInt32 DISPID_A_MEDIAMINWIDTH;
    internal static UInt32 DISPID_A_MEDIAWIDTH;
    internal static UInt32 DISPID_A_MEDIAMAXHEIGHT;
    internal static UInt32 DISPID_A_MEDIAMINHEIGHT;
    internal static UInt32 DISPID_A_MEDIAHEIGHT;
    internal static UInt32 DISPID_A_MEDIAMAXDEVICEWIDTH;
    internal static UInt32 DISPID_A_MEDIAMINDEVICEWIDTH;
    internal static UInt32 DISPID_A_MEDIADEVICEWIDTH;
    internal static UInt32 DISPID_A_MEDIAMAXDEVICEHEIGHT;
    internal static UInt32 DISPID_A_MEDIAMINDEVICEHEIGHT;
    internal static UInt32 DISPID_A_MEDIADEVICEHEIGHT;
    internal static UInt32 DISPID_A_MEDIAMAXASPECTRATIO;
    internal static UInt32 DISPID_A_MEDIAMINASPECTRATIO;
    internal static UInt32 DISPID_A_MEDIAASPECTRATIO;
    internal static UInt32 DISPID_A_MEDIAMAXDEVICEASPECTRATIO;
    internal static UInt32 DISPID_A_MEDIAMINDEVICEASPECTRATIO;
    internal static UInt32 DISPID_A_MEDIADEVICEASPECTRATIO;
    internal static UInt32 DISPID_A_MEDIAMAXCOLOR;
    internal static UInt32 DISPID_A_MEDIAMINCOLOR;
    internal static UInt32 DISPID_A_MEDIACOLOR;
    internal static UInt32 DISPID_A_MEDIAMAXCOLORINDEX;
    internal static UInt32 DISPID_A_MEDIAMINCOLORINDEX;
    internal static UInt32 DISPID_A_MEDIACOLORINDEX;
    internal static UInt32 DISPID_A_MEDIAMAXMONOCHROME;
    internal static UInt32 DISPID_A_MEDIAMINMONOCHROME;
    internal static UInt32 DISPID_A_MEDIAMONOCHROME;
    internal static UInt32 DISPID_A_MEDIAMAXRESOLUTION;
    internal static UInt32 DISPID_A_MEDIAMINRESOLUTION;
    internal static UInt32 DISPID_A_MEDIARESOLUTION;
    internal static UInt32 DISPID_INTERNAL_CATTRIBUTEPTRCACHE;
    internal static UInt32 DISPID_INTERNAL_FONTFACEUNICODERANGE;
    internal static UInt32 DISPID_INTERNAL_TOUCHTARGETHANDLER;
    internal static UInt32 DISPID_INTERNAL_PAGEFLOWCOLLECTION;
    internal static UInt32 DISPID_INTERNAL_NAMEDFLOWCOLLECTION;
    internal static UInt32 DISPID_A_MEDIAMSHIGHCONTRAST;
    internal static UInt32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_WORDS;
    internal static UInt32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_BEFORE;
    internal static UInt32 DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_AFTER;
    internal static UInt32 DISPID_A_MEDIAMSVIEWSTATE;
    internal static UInt32 DISPID_INTERNAL_ARIAATOMIC;
    internal static UInt32 DISPID_INTERNAL_ARIAAUTOCOMPLETE;
    internal static UInt32 DISPID_INTERNAL_ARIADROPEFFECT;
    internal static UInt32 DISPID_INTERNAL_ARIAGRABBED;
    internal static UInt32 DISPID_INTERNAL_ARIALABEL;
    internal static UInt32 DISPID_INTERNAL_ARIAMULTILINE;
    internal static UInt32 DISPID_INTERNAL_ARIAORIENTATION;
    internal static UInt32 DISPID_INTERNAL_ARIASORT;
    internal static UInt32 DISPID_INTERNAL_ARIAVALUETEXT;
    internal static UInt32 DISPID_A_MEDIAGRID;
    internal static UInt32 DISPID_A_MEDIASCAN;
    internal static UInt32 DISPID_A_ACCEVENTRECORDID_START;
    internal static UInt32 DISPID_A_ACCEVENTRECORDID_END;
    internal static UInt32 DISPID_INTERNAL_REQUIRED;
    internal static UInt32 DISPID_INTERNAL_CSS_PARSEDARY;
    internal static UInt32 DISPID_INTERNAL_SOURCELOCATION;
    internal static UInt32 DISPID_INTERNAL_CSS_TRACEDSTYLES;
    internal static UInt32 DISPID_A_BDURLIMGCTXCACHEINDEX;
    internal static UInt32 DISPID_A_MEDIAWEBKITDEVICEPIXELRATIO;
    internal static UInt32 DISPID_A_MEDIAWEBKITMAXDEVICEPIXELRATIO;
    internal static UInt32 DISPID_A_MEDIAWEBKITMINDEVICEPIXELRATIO;
    internal static UInt32 DISPID_SVGSTYLABLE_CLASSNAME_PROP;
    internal static UInt32 DISPID_SVGLOCATABLE_NEARESTVIEWPORTELEMENT;
    internal static UInt32 DISPID_SVGLOCATABLE_FARTHESTVIEWPORTELEMENT;
    internal static UInt32 DISPID_SVGLOCATABLE_GETBBOX;
    internal static UInt32 DISPID_SVGLOCATABLE_GETCTM;
    internal static UInt32 DISPID_SVGLOCATABLE_GETSCREENCTM;
    internal static UInt32 DISPID_SVGLOCATABLE_GETTRANSFORMTOELEMENT;
    internal static UInt32 DISPID_SVGTRANSFORMABLE_TRANSFORM_ATTR;
    internal static UInt32 DISPID_SVGTRANSFORMABLE_TRANSFORM_PROP;
    internal static UInt32 DISPID_SVGTESTS_REQUIREDFEATURES_ATTR;
    internal static UInt32 DISPID_SVGTESTS_REQUIREDFEATURES_PROP;
    internal static UInt32 DISPID_SVGTESTS_REQUIREDEXTENSIONS_ATTR;
    internal static UInt32 DISPID_SVGTESTS_REQUIREDEXTENSIONS_PROP;
    internal static UInt32 DISPID_SVGTESTS_SYSTEMLANGUAGE_ATTR;
    internal static UInt32 DISPID_SVGTESTS_SYSTEMLANGUAGE_PROP;
    internal static UInt32 DISPID_SVGTESTS_HASEXTENSION;
    internal static UInt32 DISPID_SVGLANGSPACE_XMLLANG;
    internal static UInt32 DISPID_SVGLANGSPACE_XMLSPACE;
    internal static UInt32 DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_ATTR;
    internal static UInt32 DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_PROP;
    internal static UInt32 DISPID_SVGFITTOVIEWBOX_VIEWBOX_ATTR;
    internal static UInt32 DISPID_SVGFITTOVIEWBOX_VIEWBOX_PROP;
    internal static UInt32 DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_ATTR;
    internal static UInt32 DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_PROP;
    internal static UInt32 DISPID_SVGZOOMANDPAN_ZOOMANDPAN;
    internal static UInt32 DISPID_SVGURIREFERENCE_HREF;
    internal static UInt32 DISPID_EVPROP_ONMOUSEOVER;
    internal static UInt32 DISPID_EVMETH_ONMOUSEOVER;
    internal static UInt32 DISPID_EVPROP_ONMOUSEOUT;
    internal static UInt32 DISPID_EVMETH_ONMOUSEOUT;
    internal static UInt32 DISPID_EVPROP_ONMOUSEDOWN;
    internal static int DISPID_EVMETH_ONMOUSEDOWN;
    internal static UInt32 DISPID_EVPROP_ONMOUSEUP;
    internal static int DISPID_EVMETH_ONMOUSEUP;
    internal static UInt32 DISPID_EVPROP_ONMOUSEMOVE;
    internal static int DISPID_EVMETH_ONMOUSEMOVE;
    internal static UInt32 DISPID_EVPROP_ONKEYDOWN;
    internal static int DISPID_EVMETH_ONKEYDOWN;
    internal static UInt32 DISPID_EVPROP_ONKEYUP;
    internal static int DISPID_EVMETH_ONKEYUP;
    internal static UInt32 DISPID_EVPROP_ONKEYPRESS;
    internal static int DISPID_EVMETH_ONKEYPRESS;
    internal static UInt32 DISPID_EVPROP_ONCLICK;
    internal static int DISPID_EVMETH_ONCLICK;
    internal static UInt32 DISPID_EVPROP_ONDBLCLICK;
    internal static int DISPID_EVMETH_ONDBLCLICK;
    internal static UInt32 DISPID_EVPROP_ONSELECT;
    internal static UInt32 DISPID_EVMETH_ONSELECT;
    internal static UInt32 DISPID_EVPROP_ONSUBMIT;
    internal static UInt32 DISPID_EVMETH_ONSUBMIT;
    internal static UInt32 DISPID_EVPROP_ONRESET;
    internal static UInt32 DISPID_EVMETH_ONRESET;
    internal static UInt32 DISPID_EVPROP_ONHELP;
    internal static UInt32 DISPID_EVMETH_ONHELP;
    internal static UInt32 DISPID_EVPROP_ONFOCUS;
    internal static UInt32 DISPID_EVMETH_ONFOCUS;
    internal static UInt32 DISPID_EVPROP_ONBLUR;
    internal static UInt32 DISPID_EVPROP_ONROWEXIT;
    internal static UInt32 DISPID_EVMETH_ONROWEXIT;
    internal static UInt32 DISPID_EVPROP_ONROWENTER;
    internal static UInt32 DISPID_EVMETH_ONROWENTER;
    internal static UInt32 DISPID_EVPROP_ONBOUNCE;
    internal static UInt32 DISPID_EVMETH_ONBOUNCE;
    internal static UInt32 DISPID_EVPROP_ONBEFOREUPDATE;
    internal static UInt32 DISPID_EVMETH_ONBEFOREUPDATE;
    internal static UInt32 DISPID_EVPROP_ONAFTERUPDATE;
    internal static UInt32 DISPID_EVMETH_ONAFTERUPDATE;
    internal static UInt32 DISPID_EVPROP_ONBEFOREDRAGOVER;
    internal static UInt32 DISPID_EVPROP_ONBEFOREDROPORPASTE;
    internal static UInt32 DISPID_EVPROP_ONREADYSTATECHANGE;
    internal static int DISPID_EVMETH_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_EVPROP_ONFINISH;
    internal static UInt32 DISPID_EVMETH_ONFINISH;
    internal static UInt32 DISPID_EVPROP_ONSTART;
    internal static UInt32 DISPID_EVMETH_ONSTART;
    internal static UInt32 DISPID_EVPROP_ONABORT;
    internal static UInt32 DISPID_EVMETH_ONABORT;
    internal static UInt32 DISPID_EVPROP_ONERROR;
    internal static UInt32 DISPID_EVMETH_ONERROR;
    internal static UInt32 DISPID_EVPROP_ONCHANGE;
    internal static UInt32 DISPID_EVMETH_ONCHANGE;
    internal static UInt32 DISPID_EVPROP_ONSCROLL;
    internal static UInt32 DISPID_EVMETH_ONSCROLL;
    internal static UInt32 DISPID_EVPROP_ONLOAD;
    internal static UInt32 DISPID_EVMETH_ONLOAD;
    internal static UInt32 DISPID_EVPROP_ONUNLOAD;
    internal static UInt32 DISPID_EVMETH_ONUNLOAD;
    internal static UInt32 DISPID_EVPROP_ONLAYOUT;
    internal static UInt32 DISPID_EVMETH_ONLAYOUT;
    internal static UInt32 DISPID_EVPROP_ONDRAGSTART;
    internal static UInt32 DISPID_EVMETH_ONDRAGSTART;
    internal static UInt32 DISPID_EVPROP_ONRESIZE;
    internal static UInt32 DISPID_EVMETH_ONRESIZE;
    internal static UInt32 DISPID_EVPROP_ONSELECTSTART;
    internal static UInt32 DISPID_EVMETH_ONSELECTSTART;
    internal static UInt32 DISPID_EVPROP_ONERRORUPDATE;
    internal static UInt32 DISPID_EVMETH_ONERRORUPDATE;
    internal static UInt32 DISPID_EVPROP_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_EVMETH_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_EVPROP_ONDATASETCHANGED;
    internal static UInt32 DISPID_EVMETH_ONDATASETCHANGED;
    internal static UInt32 DISPID_EVPROP_ONDATAAVAILABLE;
    internal static UInt32 DISPID_EVMETH_ONDATAAVAILABLE;
    internal static UInt32 DISPID_EVPROP_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_EVMETH_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_EVPROP_ONFILTER;
    internal static UInt32 DISPID_EVMETH_ONFILTER;
    internal static UInt32 DISPID_EVPROP_ONCHANGEFOCUS;
    internal static UInt32 DISPID_EVMETH_ONCHANGEFOCUS;
    internal static UInt32 DISPID_EVPROP_ONCHANGEBLUR;
    internal static UInt32 DISPID_EVMETH_ONCHANGEBLUR;
    internal static UInt32 DISPID_EVPROP_ONLOSECAPTURE;
    internal static UInt32 DISPID_EVMETH_ONLOSECAPTURE;
    internal static UInt32 DISPID_EVPROP_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_EVMETH_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_EVPROP_ONPERSISTSAVE;
    internal static UInt32 DISPID_EVMETH_ONPERSISTSAVE;
    internal static UInt32 DISPID_EVPROP_ONDRAG;
    internal static UInt32 DISPID_EVMETH_ONDRAG;
    internal static UInt32 DISPID_EVPROP_ONDRAGEND;
    internal static UInt32 DISPID_EVMETH_ONDRAGEND;
    internal static UInt32 DISPID_EVPROP_ONDRAGENTER;
    internal static UInt32 DISPID_EVMETH_ONDRAGENTER;
    internal static UInt32 DISPID_EVPROP_ONDRAGOVER;
    internal static UInt32 DISPID_EVMETH_ONDRAGOVER;
    internal static UInt32 DISPID_EVPROP_ONDRAGLEAVE;
    internal static UInt32 DISPID_EVMETH_ONDRAGLEAVE;
    internal static UInt32 DISPID_EVPROP_ONDROP;
    internal static UInt32 DISPID_EVMETH_ONDROP;
    internal static UInt32 DISPID_EVPROP_ONCUT;
    internal static UInt32 DISPID_EVMETH_ONCUT;
    internal static UInt32 DISPID_EVPROP_ONCOPY;
    internal static UInt32 DISPID_EVMETH_ONCOPY;
    internal static UInt32 DISPID_EVPROP_ONPASTE;
    internal static UInt32 DISPID_EVMETH_ONPASTE;
    internal static UInt32 DISPID_EVPROP_ONBEFORECUT;
    internal static UInt32 DISPID_EVMETH_ONBEFORECUT;
    internal static UInt32 DISPID_EVPROP_ONBEFORECOPY;
    internal static UInt32 DISPID_EVMETH_ONBEFORECOPY;
    internal static UInt32 DISPID_EVPROP_ONBEFOREPASTE;
    internal static UInt32 DISPID_EVMETH_ONBEFOREPASTE;
    internal static UInt32 DISPID_EVPROP_ONPERSISTLOAD;
    internal static UInt32 DISPID_EVMETH_ONPERSISTLOAD;
    internal static UInt32 DISPID_EVPROP_ONROWSDELETE;
    internal static UInt32 DISPID_EVMETH_ONROWSDELETE;
    internal static UInt32 DISPID_EVPROP_ONROWSINSERTED;
    internal static UInt32 DISPID_EVMETH_ONROWSINSERTED;
    internal static UInt32 DISPID_EVPROP_ONCELLCHANGE;
    internal static UInt32 DISPID_EVMETH_ONCELLCHANGE;
    internal static UInt32 DISPID_EVPROP_ONCONTEXTMENU;
    internal static UInt32 DISPID_EVMETH_ONCONTEXTMENU;
    internal static UInt32 DISPID_EVPROP_ONBEFOREPRINT;
    internal static UInt32 DISPID_EVMETH_ONBEFOREPRINT;
    internal static UInt32 DISPID_EVPROP_ONAFTERPRINT;
    internal static UInt32 DISPID_EVMETH_ONAFTERPRINT;
    internal static UInt32 DISPID_EVPROP_ONSTOP;
    internal static UInt32 DISPID_EVMETH_ONSTOP;
    internal static UInt32 DISPID_EVPROP_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_EVMETH_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_EVPROP_ONATTACHEVENT;
    internal static UInt32 DISPID_EVPROP_ONMOUSEHOVER;
    internal static UInt32 DISPID_EVMETH_ONMOUSEHOVER;
    internal static UInt32 DISPID_EVPROP_ONCONTENTREADY;
    internal static UInt32 DISPID_EVMETH_ONCONTENTREADY;
    internal static UInt32 DISPID_EVPROP_ONLAYOUTCOMPLETE;
    internal static UInt32 DISPID_EVMETH_ONLAYOUTCOMPLETE;
    internal static UInt32 DISPID_EVPROP_ONPAGE;
    internal static UInt32 DISPID_EVMETH_ONPAGE;
    internal static UInt32 DISPID_EVPROP_ONLINKEDOVERFLOW;
    internal static UInt32 DISPID_EVMETH_ONLINKEDOVERFLOW;
    internal static UInt32 DISPID_EVPROP_ONMOUSEWHEEL;
    internal static UInt32 DISPID_EVMETH_ONMOUSEWHEEL;
    internal static UInt32 DISPID_EVPROP_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_EVMETH_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_EVPROP_ONMOVE;
    internal static UInt32 DISPID_EVMETH_ONMOVE;
    internal static UInt32 DISPID_EVPROP_ONCONTROLSELECT;
    internal static UInt32 DISPID_EVMETH_ONCONTROLSELECT;
    internal static UInt32 DISPID_EVPROP_ONSELECTIONCHANGE;
    internal static UInt32 DISPID_EVMETH_ONSELECTIONCHANGE;
    internal static UInt32 DISPID_EVPROP_ONMOVESTART;
    internal static UInt32 DISPID_EVMETH_ONMOVESTART;
    internal static UInt32 DISPID_EVPROP_ONMOVEEND;
    internal static UInt32 DISPID_EVMETH_ONMOVEEND;
    internal static UInt32 DISPID_EVPROP_ONRESIZESTART;
    internal static UInt32 DISPID_EVMETH_ONRESIZESTART;
    internal static UInt32 DISPID_EVPROP_ONRESIZEEND;
    internal static UInt32 DISPID_EVMETH_ONRESIZEEND;
    internal static UInt32 DISPID_EVPROP_ONMOUSEENTER;
    internal static UInt32 DISPID_EVMETH_ONMOUSEENTER;
    internal static UInt32 DISPID_EVPROP_ONMOUSELEAVE;
    internal static UInt32 DISPID_EVMETH_ONMOUSELEAVE;
    internal static UInt32 DISPID_EVPROP_ONACTIVATE;
    internal static UInt32 DISPID_EVMETH_ONACTIVATE;
    internal static UInt32 DISPID_EVPROP_ONDEACTIVATE;
    internal static UInt32 DISPID_EVMETH_ONDEACTIVATE;
    internal static UInt32 DISPID_EVPROP_ONMULTILAYOUTCLEANUP;
    internal static UInt32 DISPID_EVMETH_ONMULTILAYOUTCLEANUP;
    internal static UInt32 DISPID_EVPROP_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_EVMETH_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_EVPROP_ONFOCUSIN;
    internal static UInt32 DISPID_EVMETH_ONFOCUSIN;
    internal static UInt32 DISPID_EVPROP_ONFOCUSOUT;
    internal static UInt32 DISPID_EVMETH_ONFOCUSOUT;
    internal static UInt32 DISPID_EVPROP_ONVALUECHANGE;
    internal static UInt32 DISPID_EVMETH_ONVALUECHANGE;
    internal static UInt32 DISPID_EVPROP_ONSELECTADD;
    internal static UInt32 DISPID_EVMETH_ONSELECTADD;
    internal static UInt32 DISPID_EVPROP_ONSELECTREMOVE;
    internal static UInt32 DISPID_EVMETH_ONSELECTREMOVE;
    internal static UInt32 DISPID_EVPROP_ONSELECTWITHIN;
    internal static UInt32 DISPID_EVMETH_ONSELECTWITHIN;
    internal static UInt32 DISPID_EVPROP_ONSYSTEMSCROLLINGSTART;
    internal static UInt32 DISPID_EVMETH_ONSYSTEMSCROLLINGSTART;
    internal static UInt32 DISPID_EVPROP_ONSYSTEMSCROLLINGEND;
    internal static UInt32 DISPID_EVMETH_ONSYSTEMSCROLLINGEND;
    internal static UInt32 DISPID_EVPROP_ONOBJECTCONTENTSCROLLED;
    internal static UInt32 DISPID_EVMETH_ONOBJECTCONTENTSCROLLED;
    internal static UInt32 DISPID_EVPROP_ONSTORAGE;
    internal static UInt32 DISPID_EVMETH_ONSTORAGE;
    internal static UInt32 DISPID_EVPROP_ONSTORAGECOMMIT;
    internal static UInt32 DISPID_EVMETH_ONSTORAGECOMMIT;
    internal static UInt32 DISPID_EVPROP_ONSHOW;
    internal static UInt32 DISPID_EVMETH_ONSHOW;
    internal static UInt32 DISPID_EVPROP_ONHIDE;
    internal static UInt32 DISPID_EVMETH_ONHIDE;
    internal static UInt32 DISPID_EVPROP_ONALERT;
    internal static UInt32 DISPID_EVMETH_ONALERT;
    internal static UInt32 DISPID_EVPROP_ONPOPUPMENUSTART;
    internal static UInt32 DISPID_EVMETH_ONPOPUPMENUSTART;
    internal static UInt32 DISPID_EVPROP_ONPOPUPMENUEND;
    internal static UInt32 DISPID_EVMETH_ONPOPUPMENUEND;
    internal static UInt32 DISPID_EVPROP_ONONLINE;
    internal static UInt32 DISPID_EVMETH_ONONLINE;
    internal static UInt32 DISPID_EVPROP_ONOFFLINE;
    internal static UInt32 DISPID_EVMETH_ONOFFLINE;
    internal static UInt32 DISPID_EVPROP_ONHASHCHANGE;
    internal static UInt32 DISPID_EVMETH_ONHASHCHANGE;
    internal static UInt32 DISPID_EVPROP_ONMESSAGE;
    internal static UInt32 DISPID_EVMETH_ONMESSAGE;
    internal static UInt32 DISPID_EVPROP_ONDOMMUTATION;
    internal static UInt32 DISPID_EVMETH_ONDOMMUTATION;
    internal static UInt32 DISPID_EVPROP_SINKLIMIT;
    internal static UInt32 DISPID_EVPROP_TIMEOUT;
    internal static UInt32 DISPID_EVPROP_WHEEL;
    internal static UInt32 DISPID_EVPROP_SVGLOAD;
    internal static UInt32 DISPID_EVPROP_SVGUNLOAD;
    internal static UInt32 DISPID_EVPROP_SVGABORT;
    internal static UInt32 DISPID_EVPROP_SVGERROR;
    internal static UInt32 DISPID_EVPROP_SVGRESIZE;
    internal static UInt32 DISPID_EVPROP_SVGSCROLL;
    internal static UInt32 DISPID_EVPROP_SVGZOOM;
    internal static UInt32 DISPID_EVPROP_ONMSTHUMBNAILCLICK;
    internal static UInt32 DISPID_EVPROP_COMPOSITIONSTART;
    internal static UInt32 DISPID_EVPROP_COMPOSITIONUPDATE;
    internal static UInt32 DISPID_EVPROP_COMPOSITIONEND;
    internal static UInt32 DISPID_EVPROP_DOMATTRMODIFIED;
    internal static UInt32 DISPID_EVPROP_DOMCONTENTLOADED;
    internal static UInt32 DISPID_EVPROP_INPUT;
    internal static UInt32 DISPID_EVPROP_DOMCHARDATAMODIFIED;
    internal static UInt32 DISPID_EVPROP_TEXTINPUT;
    internal static UInt32 DISPID_EVPROP_ONMSSITEMODEJUMPLISTITEMREMOVED;
    internal static UInt32 DISPID_EVPROP_DOMNODEINSERTED;
    internal static UInt32 DISPID_EVPROP_DOMNODEREMOVED;
    internal static UInt32 DISPID_EVPROP_DOMSUBTREEMODIFIED;
    internal static UInt32 DISPID_EVPROP_CANPLAY;
    internal static UInt32 DISPID_EVPROP_CANPLAYTHROUGH;
    internal static UInt32 DISPID_EVPROP_DURATIONCHANGE;
    internal static UInt32 DISPID_EVPROP_EMPTIED;
    internal static UInt32 DISPID_EVPROP_ENDED;
    internal static UInt32 DISPID_EVPROP_LOADEDDATA;
    internal static UInt32 DISPID_EVPROP_LOADEDMETADATA;
    internal static UInt32 DISPID_EVPROP_LOADSTART;
    internal static UInt32 DISPID_EVPROP_PAUSE;
    internal static UInt32 DISPID_EVPROP_PLAY;
    internal static UInt32 DISPID_EVPROP_PLAYING;
    internal static UInt32 DISPID_EVPROP_PROGRESS;
    internal static UInt32 DISPID_EVPROP_RATECHANGE;
    internal static UInt32 DISPID_EVPROP_SEEKED;
    internal static UInt32 DISPID_EVPROP_SEEKING;
    internal static UInt32 DISPID_EVPROP_STALLED;
    internal static UInt32 DISPID_EVPROP_SUSPEND;
    internal static UInt32 DISPID_EVPROP_TIMEUPDATE;
    internal static UInt32 DISPID_EVPROP_VOLUMECHANGE;
    internal static UInt32 DISPID_EVPROP_WAITING;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERDOWN;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERMOVE;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERUP;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTEROVER;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTEROUT;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERCANCEL;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERHOVER;
    internal static UInt32 DISPID_EVPROP_MSCONNECT;
    internal static UInt32 DISPID_EVPROP_MSDISCONNECT;
    internal static UInt32 DISPID_EVPROP_ONMSGESTURESTART;
    internal static UInt32 DISPID_EVPROP_ONMSGESTURECHANGE;
    internal static UInt32 DISPID_EVPROP_ONMSGESTUREEND;
    internal static UInt32 DISPID_EVPROP_ONMSGESTUREHOLD;
    internal static UInt32 DISPID_EVPROP_ONMSGESTURETAP;
    internal static UInt32 DISPID_EVPROP_ONMSGESTUREDOUBLETAP;
    internal static UInt32 DISPID_EVPROP_ONMSINERTIASTART;
    internal static UInt32 DISPID_EVPROP_ONMSLOSTPOINTERCAPTURE;
    internal static UInt32 DISPID_EVPROP_ONMSGOTPOINTERCAPTURE;
    internal static UInt32 DISPID_EVPROP_ONMSCONTENTZOOM;
    internal static UInt32 DISPID_EVPROP_ONTRANSITIONSTART;
    internal static UInt32 DISPID_EVPROP_ONTRANSITIONEND;
    internal static UInt32 DISPID_EVPROP_ONANIMATIONSTART;
    internal static UInt32 DISPID_EVPROP_ONANIMATIONEND;
    internal static UInt32 DISPID_EVPROP_ONANIMATIONITERATION;
    internal static UInt32 DISPID_EVPROP_ONMSMANIPULATIONSTATECHANGED;
    internal static UInt32 DISPID_EVPROP_ONOPEN;
    internal static UInt32 DISPID_EVPROP_ONCLOSE;
    internal static UInt32 DISPID_EVPROP_CHECKING;
    internal static UInt32 DISPID_EVPROP_NOUPDATE;
    internal static UInt32 DISPID_EVPROP_DOWNLOADING;
    internal static UInt32 DISPID_EVPROP_UPDATEREADY;
    internal static UInt32 DISPID_EVPROP_CACHED;
    internal static UInt32 DISPID_EVPROP_OBSOLETE;
    internal static UInt32 DISPID_EVPROP_LOADEND;
    internal static UInt32 DISPID_EVPROP_INVALID;
    internal static UInt32 DISPID_EVPROP_ONSUCCESS;
    internal static UInt32 DISPID_EVPROP_ONBLOCKED;
    internal static UInt32 DISPID_EVPROP_ONCOMPLETE;
    internal static UInt32 DISPID_EVPROP_ONPOPSTATE;
    internal static UInt32 DISPID_EVPROP_ONCUECHANGE;
    internal static UInt32 DISPID_EVPROP_ONENTER;
    internal static UInt32 DISPID_EVPROP_ONEXIT;
    internal static UInt32 DISPID_EVPROP_VISIBILITYCHANGE;
    internal static UInt32 DISPID_EVPROP_ONMSREGIONUPDATE;
    internal static UInt32 DISPID_EVPROP_ONUPGRADENEEDED;
    internal static UInt32 DISPID_EVPROP_ONMSVIDEOFORMATCHANGED;
    internal static UInt32 DISPID_EVPROP_ADDTRACK;
    internal static UInt32 DISPID_EVPROP_ONMSVIDEOFRAMESTEPCOMPLETED;
    internal static UInt32 DISPID_EVPROP_ONMSHOLDVISUAL;
    internal static UInt32 DISPID_EVPROP_ONMSVIDEOOPTIMALLAYOUTCHANGED;
    internal static UInt32 DISPID_EVPROP_ONMSFULLSCREENCHANGE;
    internal static UInt32 DISPID_EVPROP_ONMSFULLSCREENERROR;
    internal static UInt32 DISPID_EVPROP_MSELEMENTRESIZE;
    internal static UInt32 DISPID_EVPROP_ONSOURCEOPEN;
    internal static UInt32 DISPID_EVPROP_ONSOURCECLOSE;
    internal static UInt32 DISPID_EVPROP_ONSOURCEENDED;
    internal static UInt32 DISPID_EVPROP_ONADDSOURCEBUFFER;
    internal static UInt32 DISPID_EVPROP_ONREMOVESOURCEBUFFER;
    internal static UInt32 DISPID_EVPROP_ONMSNEEDKEY;
    internal static UInt32 DISPID_EVPROP_ONMSKEYMESSAGE;
    internal static UInt32 DISPID_EVPROP_ONMSKEYERROR;
    internal static UInt32 DISPID_EVPROP_ONMSKEYADDED;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONDOMCONTENTLOADED;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTENTLOADING;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONSTARTING;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONCOMPLETED;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMEDOMCONTENTLOADED;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMECONTENTLOADING;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONSTARTING;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONCOMPLETED;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONSCRIPTNOTIFY;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONUNVIEWABLECONTENT;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONUNSAFECONTENTWARNINGDISPLAYING;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONLONGRUNNINGSCRIPTDETECTED;
    internal static UInt32 DISPID_EVPROP_WEBGLCONTEXTLOST;
    internal static UInt32 DISPID_EVPROP_WEBGLCONTEXTRESTORED;
    internal static UInt32 DISPID_EVPROP_ONUPDATESTART;
    internal static UInt32 DISPID_EVPROP_ONUPDATE;
    internal static UInt32 DISPID_EVPROP_ONUPDATEEND;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERENTER;
    internal static UInt32 DISPID_EVPROP_ONMSPOINTERLEAVE;
    internal static UInt32 DISPID_EVPROP_ONMSSITEPINNED;
    internal static UInt32 DISPID_EVPROP_MSORIENTATIONCHANGE;
    internal static UInt32 DISPID_EVPROP_ONDEVICEORIENTATION;
    internal static UInt32 DISPID_EVPROP_ONDEVICEMOTION;
    internal static UInt32 DISPID_EVPROP_ONPAGESHOW;
    internal static UInt32 DISPID_EVPROP_ONPAGEHIDE;
    internal static UInt32 DISPID_EVPROP_ONMSCANDIDATEWINDOWSHOW;
    internal static UInt32 DISPID_EVPROP_ONMSCANDIDATEWINDOWUPDATE;
    internal static UInt32 DISPID_EVPROP_ONMSCANDIDATEWINDOWHIDE;
    internal static UInt32 DISPID_EVPROP_HTML5ONREADYSTATECHANGE;
    internal static UInt32 DISPID_EVPROP_REMOVETRACK;
    internal static UInt32 DISPID_EVPROP_ONCOMPASSNEEDSCALIBRATION;
    internal static UInt32 DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTAINSFULLSCREENELEMENTCHANGED;
    internal static UInt32 DISPID_EVPROP_ONTOUCHSTART;
    internal static UInt32 DISPID_EVPROP_ONTOUCHEND;
    internal static UInt32 DISPID_EVPROP_ONTOUCHMOVE;
    internal static UInt32 DISPID_EVPROP_ONTOUCHCANCEL;
    internal static UInt32 DISPID_EVPROP_ONWEBKITTRANSITIONEND;
    internal static UInt32 DISPID_EVPROP_ONWEBKITANIMATIONSTART;
    internal static UInt32 DISPID_EVPROP_ONWEBKITANIMATIONEND;
    internal static UInt32 DISPID_EVPROP_ONWEBKITANIMATIONITERATION;
    internal static UInt32 DISPID_EVPROP_WEBGLCONTEXTCREATIONERROR;
    internal static UInt32 DISPID_EVPROP_ONDOMFOCUSIN;
    internal static UInt32 DISPID_EVPROP_ONDOMFOCUSOUT;
    internal static UInt32 DISPID_EVPROP_ORIENTATIONCHANGE;
    internal static UInt32 DISPID_EVPROPS_COUNT;
    internal static UInt32 DISPID_IHTMLFILTERSCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLFILTERSCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLFILTERSCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDOMCONSTRUCTOR_CONSTRUCTOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LENGTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PARENTRULE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYVALUE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYPRIORITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_REMOVEPROPERTY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SETPROPERTY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_ITEM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTFAMILY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTVARIANT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTWEIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_COLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUND;
    internal static int DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDIMAGE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDREPEAT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDSPACING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LETTERSPACING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTDECORATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_VERTICALALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTTRANSFORM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTINDENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LINEHEIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINTOP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINRIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINBOTTOM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGINLEFT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGTOP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGRIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGBOTTOM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGLEFT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PADDING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDER;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_HEIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STYLEFLOAT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLEAR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_DISPLAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_VISIBILITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLETYPE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEPOSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEIMAGE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WHITESPACE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TOP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LEFT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_ZINDEX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKBEFORE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKAFTER;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CSSTEXT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CURSOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FILTER;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TABLELAYOUT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLLAPSE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_DIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BEHAVIOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_POSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_UNICODEBIDI;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BOTTOM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_RIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_IMEMODE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYPOSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_RUBYOVERHANG;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDCHAR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDLINE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDMODE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDTYPE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRID;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTAUTOSPACE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDBREAK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LINEBREAK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFYTRIM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDA;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_ACCELERATOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTFLOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_ZOOM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WORDWRAP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTUNDERLINEPOSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARBASECOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARFACECOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBAR3DLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARHIGHLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARDARKSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARARROWCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARTRACKCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WRITINGMODE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGNLAST;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDASPACE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTOVERFLOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MINHEIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MSINTERPOLATIONMODE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MAXHEIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MINWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MAXWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CONTENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CAPTIONSIDE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERINCREMENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERRESET;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINEWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINESTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINECOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BOXSIZING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSPACING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_ORPHANS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_WIDOWS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKINSIDE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_EMPTYCELLS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MSBLOCKPROGRESSION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_QUOTES;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_ALIGNMENTBASELINE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BASELINESHIFT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_DOMINANTBASELINE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZEADJUST;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTRETCH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_OPACITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPPATH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRULE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FILL;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FILLOPACITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_FILLRULE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_KERNING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKER;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKEREND;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKERMID;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MARKERSTART;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MASK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_POINTEREVENTS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STOPCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STOPOPACITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHARRAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHOFFSET;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINECAP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINEJOIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEMITERLIMIT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEOPACITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_STROKEWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_TEXTANCHOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONHORIZONTAL;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONVERTICAL;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRADIUS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPLEFTRADIUS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPRIGHTRADIUS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMRIGHTRADIUS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMLEFTRADIUS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPTOP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRIGHT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPBOTTOM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CLIPLEFT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_CSSFLOAT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCLIP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDSIZE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_BOXSHADOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORMORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLCHAINING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPTYPE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLRAILS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMCHAINING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPTYPE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMIT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPPOINTS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMAX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNSPAN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWSPAN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPTHROUGH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPMARGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPFLOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONNAME;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDURATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONTIMINGFUNCTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDELAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONPLAYSTATE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONITERATIONCOUNT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONFILLMODE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLORINTERPOLATIONFILTERS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNCOUNT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNGAP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNFILL;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNSPAN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULECOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULESTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULEWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKBEFORE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKAFTER;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKINSIDE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODOPACITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_LIGHTINGCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMAX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMAX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMIT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TEXTSHADOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWFROM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWINTO;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITZONE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITCHARS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITLINES;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSHIGHCONTRASTADJUST;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ENABLEBACKGROUND;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFONTFEATURESETTINGS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSUSERSELECT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSOVERFLOWSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSFORMSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSBACKFACEVISIBILITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVEORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONPROPERTY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDURATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONTIMINGFUNCTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDELAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHACTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLTRANSLATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPOSITIVE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXNEGATIVE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPREFERREDSIZE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXFLOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXDIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXWRAP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXITEMALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPACK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXLINEPACK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXORDER;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHSELECT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMSTYLE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_BACKFACEVISIBILITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVEORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONPROPERTY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDURATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONTIMINGFUNCTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDELAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_FONTFEATURESETTINGS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONNAME;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDURATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONTIMINGFUNCTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDELAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONPLAYSTATE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONITERATIONCOUNT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONFILLMODE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXDIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXWRAP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXFLOW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXGROW;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXSHRINK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXBASIS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_JUSTIFYCONTENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNITEMS;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNSELF;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNCONTENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESOURCE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESLICE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEOUTSET;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEREPEAT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_MSIMEALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_MSTEXTCOMBINEHORIZONTAL;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION3_TOUCHACTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITAPPEARANCE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITUSERSELECT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXALIGN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORDINALGROUP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXPACK;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXFLEX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORIENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXDIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORM;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDSIZE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKFACEVISIBILITY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONNAME;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDURATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONTIMINGFUNCTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDELAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONITERATIONCOUNT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDIRECTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONPLAYSTATE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONPROPERTY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDURATION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONTIMINGFUNCTION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDELAY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCLIP;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDIMAGE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDREPEAT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITION;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONX;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONY;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUND;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORMORIGIN;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_MSTEXTSIZEADJUST;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTEXTSIZEADJUST;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESOURCE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESLICE;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEWIDTH;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEOUTSET;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEREPEAT;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXSIZING;
    internal static UInt32 DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONFILLMODE;
    internal static UInt32 DISPID_IHTMLSTYLEENABLED_MSGETPROPERTYENABLED;
    internal static UInt32 DISPID_IHTMLSTYLEENABLED_MSPUTPROPERTYENABLED;
    internal static UInt32 DISPID_IHTMLSTYLE_FONTFAMILY;
    internal static UInt32 DISPID_IHTMLSTYLE_FONTSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_FONTVARIANT;
    internal static UInt32 DISPID_IHTMLSTYLE_FONTWEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_FONTSIZE;
    internal static UInt32 DISPID_IHTMLSTYLE_FONT;
    internal static UInt32 DISPID_IHTMLSTYLE_COLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUND;
    internal static int DISPID_IHTMLSTYLE_BACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUNDIMAGE;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUNDREPEAT;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITION;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX;
    internal static UInt32 DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY;
    internal static UInt32 DISPID_IHTMLSTYLE_WORDSPACING;
    internal static UInt32 DISPID_IHTMLSTYLE_LETTERSPACING;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTDECORATION;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTDECORATIONNONE;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK;
    internal static UInt32 DISPID_IHTMLSTYLE_VERTICALALIGN;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTTRANSFORM;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTALIGN;
    internal static UInt32 DISPID_IHTMLSTYLE_TEXTINDENT;
    internal static UInt32 DISPID_IHTMLSTYLE_LINEHEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_MARGINTOP;
    internal static UInt32 DISPID_IHTMLSTYLE_MARGINRIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_MARGINBOTTOM;
    internal static UInt32 DISPID_IHTMLSTYLE_MARGINLEFT;
    internal static UInt32 DISPID_IHTMLSTYLE_MARGIN;
    internal static UInt32 DISPID_IHTMLSTYLE_PADDINGTOP;
    internal static UInt32 DISPID_IHTMLSTYLE_PADDINGRIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_PADDINGBOTTOM;
    internal static UInt32 DISPID_IHTMLSTYLE_PADDINGLEFT;
    internal static UInt32 DISPID_IHTMLSTYLE_PADDING;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDER;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERTOP;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERRIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERBOTTOM;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERLEFT;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERTOPCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERLEFTCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERTOPWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERLEFTWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERTOPSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_BORDERLEFTSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_WIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_HEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_STYLEFLOAT;
    internal static UInt32 DISPID_IHTMLSTYLE_CLEAR;
    internal static UInt32 DISPID_IHTMLSTYLE_DISPLAY;
    internal static UInt32 DISPID_IHTMLSTYLE_VISIBILITY;
    internal static UInt32 DISPID_IHTMLSTYLE_LISTSTYLETYPE;
    internal static UInt32 DISPID_IHTMLSTYLE_LISTSTYLEPOSITION;
    internal static UInt32 DISPID_IHTMLSTYLE_LISTSTYLEIMAGE;
    internal static UInt32 DISPID_IHTMLSTYLE_LISTSTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE_WHITESPACE;
    internal static UInt32 DISPID_IHTMLSTYLE_TOP;
    internal static UInt32 DISPID_IHTMLSTYLE_LEFT;
    internal static UInt32 DISPID_IHTMLSTYLE_POSITION;
    internal static UInt32 DISPID_IHTMLSTYLE_ZINDEX;
    internal static UInt32 DISPID_IHTMLSTYLE_OVERFLOW;
    internal static UInt32 DISPID_IHTMLSTYLE_PAGEBREAKBEFORE;
    internal static UInt32 DISPID_IHTMLSTYLE_PAGEBREAKAFTER;
    internal static UInt32 DISPID_IHTMLSTYLE_CSSTEXT;
    internal static UInt32 DISPID_IHTMLSTYLE_PIXELTOP;
    internal static UInt32 DISPID_IHTMLSTYLE_PIXELLEFT;
    internal static UInt32 DISPID_IHTMLSTYLE_PIXELWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_PIXELHEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_POSTOP;
    internal static UInt32 DISPID_IHTMLSTYLE_POSLEFT;
    internal static UInt32 DISPID_IHTMLSTYLE_POSWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE_POSHEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE_CURSOR;
    internal static UInt32 DISPID_IHTMLSTYLE_CLIP;
    internal static UInt32 DISPID_IHTMLSTYLE_FILTER;
    internal static UInt32 DISPID_IHTMLSTYLE_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLSTYLE_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLSTYLE_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLSTYLE_TOSTRING;
    internal static UInt32 DISPID_IHTMLSTYLE2_TABLELAYOUT;
    internal static UInt32 DISPID_IHTMLSTYLE2_BORDERCOLLAPSE;
    internal static UInt32 DISPID_IHTMLSTYLE2_DIRECTION;
    internal static UInt32 DISPID_IHTMLSTYLE2_BEHAVIOR;
    internal static UInt32 DISPID_IHTMLSTYLE2_SETEXPRESSION;
    internal static UInt32 DISPID_IHTMLSTYLE2_GETEXPRESSION;
    internal static UInt32 DISPID_IHTMLSTYLE2_REMOVEEXPRESSION;
    internal static UInt32 DISPID_IHTMLSTYLE2_POSITION;
    internal static UInt32 DISPID_IHTMLSTYLE2_UNICODEBIDI;
    internal static UInt32 DISPID_IHTMLSTYLE2_BOTTOM;
    internal static UInt32 DISPID_IHTMLSTYLE2_RIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE2_PIXELBOTTOM;
    internal static UInt32 DISPID_IHTMLSTYLE2_PIXELRIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE2_POSBOTTOM;
    internal static UInt32 DISPID_IHTMLSTYLE2_POSRIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE2_IMEMODE;
    internal static UInt32 DISPID_IHTMLSTYLE2_RUBYALIGN;
    internal static UInt32 DISPID_IHTMLSTYLE2_RUBYPOSITION;
    internal static UInt32 DISPID_IHTMLSTYLE2_RUBYOVERHANG;
    internal static UInt32 DISPID_IHTMLSTYLE2_LAYOUTGRIDCHAR;
    internal static UInt32 DISPID_IHTMLSTYLE2_LAYOUTGRIDLINE;
    internal static UInt32 DISPID_IHTMLSTYLE2_LAYOUTGRIDMODE;
    internal static UInt32 DISPID_IHTMLSTYLE2_LAYOUTGRIDTYPE;
    internal static UInt32 DISPID_IHTMLSTYLE2_LAYOUTGRID;
    internal static UInt32 DISPID_IHTMLSTYLE2_WORDBREAK;
    internal static UInt32 DISPID_IHTMLSTYLE2_LINEBREAK;
    internal static UInt32 DISPID_IHTMLSTYLE2_TEXTJUSTIFY;
    internal static UInt32 DISPID_IHTMLSTYLE2_TEXTJUSTIFYTRIM;
    internal static UInt32 DISPID_IHTMLSTYLE2_TEXTKASHIDA;
    internal static UInt32 DISPID_IHTMLSTYLE2_TEXTAUTOSPACE;
    internal static UInt32 DISPID_IHTMLSTYLE2_OVERFLOWX;
    internal static UInt32 DISPID_IHTMLSTYLE2_OVERFLOWY;
    internal static UInt32 DISPID_IHTMLSTYLE2_ACCELERATOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_LAYOUTFLOW;
    internal static UInt32 DISPID_IHTMLSTYLE3_ZOOM;
    internal static UInt32 DISPID_IHTMLSTYLE3_WORDWRAP;
    internal static UInt32 DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE3_WRITINGMODE;
    internal static UInt32 DISPID_IHTMLSTYLE3_TEXTALIGNLAST;
    internal static UInt32 DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE;
    internal static UInt32 DISPID_IHTMLSTYLE4_TEXTOVERFLOW;
    internal static UInt32 DISPID_IHTMLSTYLE4_MINHEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE5_MSINTERPOLATIONMODE;
    internal static UInt32 DISPID_IHTMLSTYLE5_MAXHEIGHT;
    internal static UInt32 DISPID_IHTMLSTYLE5_MINWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE5_MAXWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE6_CONTENT;
    internal static UInt32 DISPID_IHTMLSTYLE6_CAPTIONSIDE;
    internal static UInt32 DISPID_IHTMLSTYLE6_COUNTERINCREMENT;
    internal static UInt32 DISPID_IHTMLSTYLE6_COUNTERRESET;
    internal static UInt32 DISPID_IHTMLSTYLE6_OUTLINE;
    internal static UInt32 DISPID_IHTMLSTYLE6_OUTLINEWIDTH;
    internal static UInt32 DISPID_IHTMLSTYLE6_OUTLINESTYLE;
    internal static UInt32 DISPID_IHTMLSTYLE6_OUTLINECOLOR;
    internal static UInt32 DISPID_IHTMLSTYLE6_BOXSIZING;
    internal static UInt32 DISPID_IHTMLSTYLE6_BORDERSPACING;
    internal static UInt32 DISPID_IHTMLSTYLE6_ORPHANS;
    internal static UInt32 DISPID_IHTMLSTYLE6_WIDOWS;
    internal static UInt32 DISPID_IHTMLSTYLE6_PAGEBREAKINSIDE;
    internal static UInt32 DISPID_IHTMLSTYLE6_EMPTYCELLS;
    internal static UInt32 DISPID_IHTMLSTYLE6_MSBLOCKPROGRESSION;
    internal static UInt32 DISPID_IHTMLSTYLE6_QUOTES;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FONTFAMILY;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FONTSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FONTVARIANT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FONTWEIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FONTSIZE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FONT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_COLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUND;
    internal static int DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY;
    internal static UInt32 DISPID_IHTMLRULESTYLE_WORDSPACING;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LETTERSPACING;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTDECORATION;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK;
    internal static UInt32 DISPID_IHTMLRULESTYLE_VERTICALALIGN;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTTRANSFORM;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTALIGN;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TEXTINDENT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LINEHEIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_MARGINTOP;
    internal static UInt32 DISPID_IHTMLRULESTYLE_MARGINRIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_MARGINBOTTOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE_MARGINLEFT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_MARGIN;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PADDINGTOP;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PADDINGRIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PADDINGBOTTOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PADDINGLEFT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PADDING;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDER;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERTOP;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERRIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERBOTTOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERLEFT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_WIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE_HEIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_STYLEFLOAT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_CLEAR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_DISPLAY;
    internal static UInt32 DISPID_IHTMLRULESTYLE_VISIBILITY;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LISTSTYLETYPE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LISTSTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_WHITESPACE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_TOP;
    internal static UInt32 DISPID_IHTMLRULESTYLE_LEFT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_POSITION;
    internal static UInt32 DISPID_IHTMLRULESTYLE_ZINDEX;
    internal static UInt32 DISPID_IHTMLRULESTYLE_OVERFLOW;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER;
    internal static UInt32 DISPID_IHTMLRULESTYLE_CSSTEXT;
    internal static UInt32 DISPID_IHTMLRULESTYLE_CURSOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE_CLIP;
    internal static UInt32 DISPID_IHTMLRULESTYLE_FILTER;
    internal static UInt32 DISPID_IHTMLRULESTYLE_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_TABLELAYOUT;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_BORDERCOLLAPSE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_DIRECTION;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_BEHAVIOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_POSITION;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_UNICODEBIDI;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_BOTTOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_RIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_PIXELBOTTOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_PIXELRIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_POSBOTTOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_POSRIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_IMEMODE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_RUBYALIGN;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_RUBYPOSITION;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_RUBYOVERHANG;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDCHAR;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDLINE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDMODE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_LAYOUTGRIDTYPE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_LAYOUTGRID;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_TEXTAUTOSPACE;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_WORDBREAK;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_LINEBREAK;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_TEXTJUSTIFY;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_TEXTJUSTIFYTRIM;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_TEXTKASHIDA;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_OVERFLOWX;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_OVERFLOWY;
    internal static UInt32 DISPID_IHTMLRULESTYLE2_ACCELERATOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_LAYOUTFLOW;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_ZOOM;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_WORDWRAP;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_WRITINGMODE;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST;
    internal static UInt32 DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE;
    internal static UInt32 DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW;
    internal static UInt32 DISPID_IHTMLRULESTYLE4_MINHEIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE5_MSINTERPOLATIONMODE;
    internal static UInt32 DISPID_IHTMLRULESTYLE5_MAXHEIGHT;
    internal static UInt32 DISPID_IHTMLRULESTYLE5_MINWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE5_MAXWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_CONTENT;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_CAPTIONSIDE;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_COUNTERINCREMENT;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_COUNTERRESET;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_OUTLINE;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_OUTLINEWIDTH;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_OUTLINESTYLE;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_OUTLINECOLOR;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_BOXSIZING;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_BORDERSPACING;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_ORPHANS;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_WIDOWS;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_PAGEBREAKINSIDE;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_EMPTYCELLS;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_MSBLOCKPROGRESSION;
    internal static UInt32 DISPID_IHTMLRULESTYLE6_QUOTES;
    internal static UInt32 DISPID_IHTMLCSSRULE_TYPE;
    internal static UInt32 DISPID_IHTMLCSSRULE_CSSTEXT;
    internal static UInt32 DISPID_IHTMLCSSRULE_PARENTRULE;
    internal static UInt32 DISPID_IHTMLCSSRULE_PARENTSTYLESHEET;
    internal static UInt32 DISPID_IHTMLCSSIMPORTRULE_HREF;
    internal static UInt32 DISPID_IHTMLCSSIMPORTRULE_MEDIA;
    internal static UInt32 DISPID_IHTMLCSSIMPORTRULE_STYLESHEET;
    internal static UInt32 DISPID_IHTMLCSSMEDIARULE_MEDIA;
    internal static UInt32 DISPID_IHTMLCSSMEDIARULE_CSSRULES;
    internal static UInt32 DISPID_IHTMLCSSMEDIARULE_INSERTRULE;
    internal static UInt32 DISPID_IHTMLCSSMEDIARULE_DELETERULE;
    internal static UInt32 DISPID_IHTMLCSSMEDIALIST_MEDIATEXT;
    internal static UInt32 DISPID_IHTMLCSSMEDIALIST_LENGTH;
    internal static UInt32 DISPID_IHTMLCSSMEDIALIST_ITEM;
    internal static UInt32 DISPID_IHTMLCSSMEDIALIST_APPENDMEDIUM;
    internal static UInt32 DISPID_IHTMLCSSMEDIALIST_DELETEMEDIUM;
    internal static UInt32 DISPID_IHTMLCSSNAMESPACERULE_NAMESPACEURI;
    internal static UInt32 DISPID_IHTMLCSSNAMESPACERULE_PREFIX;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMERULE_KEYTEXT;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMERULE_STYLE;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMESRULE_NAME;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMESRULE_CSSRULES;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMESRULE_APPENDRULE;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMESRULE_DELETERULE;
    internal static UInt32 DISPID_IHTMLMSCSSKEYFRAMESRULE_FINDRULE;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTEFFECT;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTCOLOR;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION;
    internal static UInt32 DISPID_IHTMLRENDERSTYLE_TEXTDECORATION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_POSITION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_STYLEFLOAT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_COLOR;
    internal static int DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_FONTFAMILY;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_FONTSTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_FONTVARIANT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_FONTWEIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_FONTSIZE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDIMAGE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONX;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONY;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDREPEAT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPSTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTSTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMSTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTSTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERTOPWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERLEFTWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LEFT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TOP;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_WIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_HEIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PADDINGLEFT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PADDINGTOP;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PADDINGRIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PADDINGBOTTOM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTALIGN;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTDECORATION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_DISPLAY;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_VISIBILITY;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_ZINDEX;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LETTERSPACING;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LINEHEIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTINDENT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_VERTICALALIGN;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BACKGROUNDATTACHMENT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_MARGINTOP;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_MARGINRIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_MARGINBOTTOM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_MARGINLEFT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_CLEAR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLETYPE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLEPOSITION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LISTSTYLEIMAGE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_CLIPTOP;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_CLIPRIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_CLIPBOTTOM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_CLIPLEFT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_OVERFLOW;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PAGEBREAKBEFORE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PAGEBREAKAFTER;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_CURSOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TABLELAYOUT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERCOLLAPSE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_DIRECTION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BEHAVIOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_UNICODEBIDI;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_RIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BOTTOM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_IMEMODE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_RUBYALIGN;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_RUBYPOSITION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_RUBYOVERHANG;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTAUTOSPACE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LINEBREAK;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_WORDBREAK;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFY;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFYTRIM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTKASHIDA;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BLOCKDIRECTION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDCHAR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDLINE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDMODE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDTYPE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERSTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_BORDERWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_PADDING;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_MARGIN;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_ACCELERATOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_OVERFLOWX;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_OVERFLOWY;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE_TEXTTRANSFORM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_WORDWRAP;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_ZOOM;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_FILTER;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE2_ISBLOCK;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE3_WORDSPACING;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE3_WHITESPACE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE4_MSINTERPOLATIONMODE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE4_MAXHEIGHT;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE4_MINWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE4_MAXWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_CAPTIONSIDE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_OUTLINE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_OUTLINEWIDTH;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_OUTLINESTYLE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_OUTLINECOLOR;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_BOXSIZING;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_BORDERSPACING;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_ORPHANS;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_WIDOWS;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_PAGEBREAKINSIDE;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_EMPTYCELLS;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_MSBLOCKPROGRESSION;
    internal static UInt32 DISPID_IHTMLCURRENTSTYLE5_QUOTES;
    internal static UInt32 DISPID_IHTMLRECT_LEFT;
    internal static UInt32 DISPID_IHTMLRECT_TOP;
    internal static UInt32 DISPID_IHTMLRECT_RIGHT;
    internal static UInt32 DISPID_IHTMLRECT_BOTTOM;
    internal static UInt32 DISPID_IHTMLRECT2_WIDTH;
    internal static UInt32 DISPID_IHTMLRECT2_HEIGHT;
    internal static UInt32 DISPID_IHTMLRECTCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLRECTCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLRECTCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDOMNODE_NODETYPE;
    internal static UInt32 DISPID_IHTMLDOMNODE_PARENTNODE;
    internal static UInt32 DISPID_IHTMLDOMNODE_HASCHILDNODES;
    internal static UInt32 DISPID_IHTMLDOMNODE_CHILDNODES;
    internal static UInt32 DISPID_IHTMLDOMNODE_ATTRIBUTES;
    internal static UInt32 DISPID_IHTMLDOMNODE_INSERTBEFORE;
    internal static UInt32 DISPID_IHTMLDOMNODE_REMOVECHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE_REPLACECHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE_CLONENODE;
    internal static UInt32 DISPID_IHTMLDOMNODE_REMOVENODE;
    internal static UInt32 DISPID_IHTMLDOMNODE_SWAPNODE;
    internal static UInt32 DISPID_IHTMLDOMNODE_REPLACENODE;
    internal static UInt32 DISPID_IHTMLDOMNODE_APPENDCHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE_NODENAME;
    internal static UInt32 DISPID_IHTMLDOMNODE_NODEVALUE;
    internal static UInt32 DISPID_IHTMLDOMNODE_FIRSTCHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE_LASTCHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE_PREVIOUSSIBLING;
    internal static UInt32 DISPID_IHTMLDOMNODE_NEXTSIBLING;
    internal static UInt32 DISPID_IHTMLDOMNODE2_OWNERDOCUMENT;
    internal static UInt32 DISPID_IHTMLDOMNODE3_PREFIX;
    internal static UInt32 DISPID_IHTMLDOMNODE3_LOCALNAME;
    internal static UInt32 DISPID_IHTMLDOMNODE3_NAMESPACEURI;
    internal static UInt32 DISPID_IHTMLDOMNODE3_TEXTCONTENT;
    internal static UInt32 DISPID_IHTMLDOMNODE3_ISEQUALNODE;
    internal static UInt32 DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI;
    internal static UInt32 DISPID_IHTMLDOMNODE3_LOOKUPPREFIX;
    internal static UInt32 DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE;
    internal static UInt32 DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE;
    internal static UInt32 DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD;
    internal static UInt32 DISPID_IHTMLDOMNODE3_ISSAMENODE;
    internal static UInt32 DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION;
    internal static UInt32 DISPID_IHTMLDOMNODE3_ISSUPPORTED;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE_NODENAME;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE_NODEVALUE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE_SPECIFIED;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_NAME;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_VALUE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_EXPANDO;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_NODETYPE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE2_CLONENODE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE3_IE8_NODEVALUE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE3_IE8_VALUE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE3_IE8_SPECIFIED;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE3_OWNERELEMENT;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NODEVALUE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NODENAME;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_NAME;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_VALUE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_FIRSTCHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_LASTCHILD;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_CHILDNODES;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_HASATTRIBUTES;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_HASCHILDNODES;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_NORMALIZE;
    internal static UInt32 DISPID_IHTMLDOMATTRIBUTE4_IE9_SPECIFIED;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE_DATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE_TOSTRING;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE_LENGTH;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE_SPLITTEXT;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE2_APPENDDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE2_INSERTDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE2_DELETEDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_IE9_SUBSTRINGDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_IE9_INSERTDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_IE9_DELETEDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_IE9_REPLACEDATA;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_IE9_SPLITTEXT;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_WHOLETEXT;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_REPLACEWHOLETEXT;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_HASATTRIBUTES;
    internal static UInt32 DISPID_IHTMLDOMTEXTNODE3_NORMALIZE;
    internal static UInt32 DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE;
    internal static UInt32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENTTYPE;
    internal static UInt32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENT;
    internal static UInt32 DISPID_IHTMLDOMIMPLEMENTATION2_CREATEHTMLDOCUMENT;
    internal static UInt32 DISPID_IHTMLDOMIMPLEMENTATION2_IE9_HASFEATURE;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH;
    internal static int DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_GETNAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_SETNAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_REMOVENAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_ITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_LENGTH;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_GETNAMEDITEMNS;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_SETNAMEDITEMNS;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_REMOVENAMEDITEMNS;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_GETNAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_SETNAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_REMOVENAMEDITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_ITEM;
    internal static UInt32 DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_LENGTH;
    internal static UInt32 DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDOMCHILDRENCOLLECTION2_IE9_ITEM;
    internal static UInt32 DISPID_IHTMLELEMENT_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT_CLASSNAME;
    internal static UInt32 DISPID_IHTMLELEMENT_ID;
    internal static UInt32 DISPID_IHTMLELEMENT_TAGNAME;
    internal static UInt32 DISPID_IHTMLELEMENT_PARENTELEMENT;
    internal static UInt32 DISPID_IHTMLELEMENT_STYLE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONHELP;
    internal static UInt32 DISPID_IHTMLELEMENT_ONCLICK;
    internal static UInt32 DISPID_IHTMLELEMENT_ONDBLCLICK;
    internal static UInt32 DISPID_IHTMLELEMENT_ONKEYDOWN;
    internal static UInt32 DISPID_IHTMLELEMENT_ONKEYUP;
    internal static UInt32 DISPID_IHTMLELEMENT_ONKEYPRESS;
    internal static UInt32 DISPID_IHTMLELEMENT_ONMOUSEOUT;
    internal static UInt32 DISPID_IHTMLELEMENT_ONMOUSEOVER;
    internal static UInt32 DISPID_IHTMLELEMENT_ONMOUSEMOVE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONMOUSEDOWN;
    internal static UInt32 DISPID_IHTMLELEMENT_ONMOUSEUP;
    internal static UInt32 DISPID_IHTMLELEMENT_DOCUMENT;
    internal static UInt32 DISPID_IHTMLELEMENT_TITLE;
    internal static UInt32 DISPID_IHTMLELEMENT_LANGUAGE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONSELECTSTART;
    internal static UInt32 DISPID_IHTMLELEMENT_SCROLLINTOVIEW;
    internal static UInt32 DISPID_IHTMLELEMENT_CONTAINS;
    internal static UInt32 DISPID_IHTMLELEMENT_SOURCEINDEX;
    internal static UInt32 DISPID_IHTMLELEMENT_RECORDNUMBER;
    internal static UInt32 DISPID_IHTMLELEMENT_LANG;
    internal static UInt32 DISPID_IHTMLELEMENT_OFFSETLEFT;
    internal static UInt32 DISPID_IHTMLELEMENT_OFFSETTOP;
    internal static UInt32 DISPID_IHTMLELEMENT_OFFSETWIDTH;
    internal static UInt32 DISPID_IHTMLELEMENT_OFFSETHEIGHT;
    internal static UInt32 DISPID_IHTMLELEMENT_OFFSETPARENT;
    internal static UInt32 DISPID_IHTMLELEMENT_INNERHTML;
    internal static UInt32 DISPID_IHTMLELEMENT_INNERTEXT;
    internal static UInt32 DISPID_IHTMLELEMENT_OUTERHTML;
    internal static UInt32 DISPID_IHTMLELEMENT_OUTERTEXT;
    internal static UInt32 DISPID_IHTMLELEMENT_INSERTADJACENTHTML;
    internal static UInt32 DISPID_IHTMLELEMENT_INSERTADJACENTTEXT;
    internal static UInt32 DISPID_IHTMLELEMENT_PARENTTEXTEDIT;
    internal static UInt32 DISPID_IHTMLELEMENT_ISTEXTEDIT;
    internal static UInt32 DISPID_IHTMLELEMENT_CLICK;
    internal static UInt32 DISPID_IHTMLELEMENT_FILTERS;
    internal static UInt32 DISPID_IHTMLELEMENT_ONDRAGSTART;
    internal static UInt32 DISPID_IHTMLELEMENT_TOSTRING;
    internal static UInt32 DISPID_IHTMLELEMENT_ONBEFOREUPDATE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONAFTERUPDATE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONERRORUPDATE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONROWEXIT;
    internal static UInt32 DISPID_IHTMLELEMENT_ONROWENTER;
    internal static UInt32 DISPID_IHTMLELEMENT_ONDATASETCHANGED;
    internal static UInt32 DISPID_IHTMLELEMENT_ONDATAAVAILABLE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_IHTMLELEMENT_ONFILTERCHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT_CHILDREN;
    internal static UInt32 DISPID_IHTMLELEMENT_ALL;
    internal static UInt32 DISPID_IHTMLELEMENT2_SCOPENAME;
    internal static UInt32 DISPID_IHTMLELEMENT2_SETCAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT2_RELEASECAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONLOSECAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT;
    internal static UInt32 DISPID_IHTMLELEMENT2_DOSCROLL;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONSCROLL;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONDRAG;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONDRAGEND;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONDRAGENTER;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONDRAGOVER;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONDRAGLEAVE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONDROP;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONBEFORECUT;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONCUT;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONBEFORECOPY;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONCOPY;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONBEFOREPASTE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONPASTE;
    internal static UInt32 DISPID_IHTMLELEMENT2_CURRENTSTYLE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT2_GETCLIENTRECTS;
    internal static UInt32 DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT;
    internal static UInt32 DISPID_IHTMLELEMENT2_SETEXPRESSION;
    internal static UInt32 DISPID_IHTMLELEMENT2_GETEXPRESSION;
    internal static UInt32 DISPID_IHTMLELEMENT2_REMOVEEXPRESSION;
    internal static UInt32 DISPID_IHTMLELEMENT2_TABINDEX;
    internal static UInt32 DISPID_IHTMLELEMENT2_FOCUS;
    internal static UInt32 DISPID_IHTMLELEMENT2_ACCESSKEY;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONBLUR;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONFOCUS;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONRESIZE;
    internal static UInt32 DISPID_IHTMLELEMENT2_BLUR;
    internal static UInt32 DISPID_IHTMLELEMENT2_ADDFILTER;
    internal static UInt32 DISPID_IHTMLELEMENT2_REMOVEFILTER;
    internal static UInt32 DISPID_IHTMLELEMENT2_CLIENTHEIGHT;
    internal static UInt32 DISPID_IHTMLELEMENT2_CLIENTWIDTH;
    internal static UInt32 DISPID_IHTMLELEMENT2_CLIENTTOP;
    internal static UInt32 DISPID_IHTMLELEMENT2_CLIENTLEFT;
    internal static UInt32 DISPID_IHTMLELEMENT2_ATTACHEVENT;
    internal static UInt32 DISPID_IHTMLELEMENT2_DETACHEVENT;
    internal static UInt32 DISPID_IHTMLELEMENT2_READYSTATE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONROWSDELETE;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONROWSINSERTED;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONCELLCHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT2_DIR;
    internal static UInt32 DISPID_IHTMLELEMENT2_CREATECONTROLRANGE;
    internal static UInt32 DISPID_IHTMLELEMENT2_SCROLLHEIGHT;
    internal static UInt32 DISPID_IHTMLELEMENT2_SCROLLWIDTH;
    internal static UInt32 DISPID_IHTMLELEMENT2_SCROLLTOP;
    internal static UInt32 DISPID_IHTMLELEMENT2_SCROLLLEFT;
    internal static UInt32 DISPID_IHTMLELEMENT2_CLEARATTRIBUTES;
    internal static UInt32 DISPID_IHTMLELEMENT2_MERGEATTRIBUTES;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONCONTEXTMENU;
    internal static UInt32 DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT;
    internal static UInt32 DISPID_IHTMLELEMENT2_APPLYELEMENT;
    internal static UInt32 DISPID_IHTMLELEMENT2_GETADJACENTTEXT;
    internal static UInt32 DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT;
    internal static UInt32 DISPID_IHTMLELEMENT2_CANHAVECHILDREN;
    internal static UInt32 DISPID_IHTMLELEMENT2_ADDBEHAVIOR;
    internal static UInt32 DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR;
    internal static UInt32 DISPID_IHTMLELEMENT2_RUNTIMESTYLE;
    internal static UInt32 DISPID_IHTMLELEMENT2_BEHAVIORURNS;
    internal static UInt32 DISPID_IHTMLELEMENT2_TAGURN;
    internal static UInt32 DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_IHTMLELEMENT2_READYSTATEVALUE;
    internal static UInt32 DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME;
    internal static UInt32 DISPID_IHTMLELEMENT3_MERGEATTRIBUTES;
    internal static UInt32 DISPID_IHTMLELEMENT3_ISMULTILINE;
    internal static UInt32 DISPID_IHTMLELEMENT3_CANHAVEHTML;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONPAGE;
    internal static UInt32 DISPID_IHTMLELEMENT3_INFLATEBLOCK;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_IHTMLELEMENT3_SETACTIVE;
    internal static UInt32 DISPID_IHTMLELEMENT3_CONTENTEDITABLE;
    internal static UInt32 DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE;
    internal static UInt32 DISPID_IHTMLELEMENT3_HIDEFOCUS;
    internal static UInt32 DISPID_IHTMLELEMENT3_DISABLED;
    internal static UInt32 DISPID_IHTMLELEMENT3_ISDISABLED;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONMOVE;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONCONTROLSELECT;
    internal static UInt32 DISPID_IHTMLELEMENT3_FIREEVENT;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONRESIZESTART;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONRESIZEEND;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONMOVESTART;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONMOVEEND;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONMOUSEENTER;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONMOUSELEAVE;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONACTIVATE;
    internal static UInt32 DISPID_IHTMLELEMENT3_ONDEACTIVATE;
    internal static UInt32 DISPID_IHTMLELEMENT3_DRAGDROP;
    internal static UInt32 DISPID_IHTMLELEMENT3_GLYPHMODE;
    internal static UInt32 DISPID_IHTMLELEMENT4_ONMOUSEWHEEL;
    internal static UInt32 DISPID_IHTMLELEMENT4_NORMALIZE;
    internal static UInt32 DISPID_IHTMLELEMENT4_GETATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT4_SETATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_IHTMLELEMENT4_ONFOCUSIN;
    internal static UInt32 DISPID_IHTMLELEMENT4_ONFOCUSOUT;
    internal static UInt32 DISPID_IELEMENTSELECTOR_QUERYSELECTOR;
    internal static UInt32 DISPID_IELEMENTSELECTOR_QUERYSELECTORALL;
    internal static UInt32 DISPID_IHTMLUNIQUENAME_UNIQUENUMBER;
    internal static UInt32 DISPID_IHTMLUNIQUENAME_UNIQUEID;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT5_HASATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT5_ROLE;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIABUSY;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIACHECKED;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIADISABLED;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAEXPANDED;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAHASPOPUP;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAHIDDEN;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAINVALID;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAPRESSED;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAREADONLY;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAREQUIRED;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIASECRET;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIASELECTED;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAVALUENOW;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAPOSINSET;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIASETSIZE;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIALEVEL;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAVALUEMIN;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAVALUEMAX;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIACONTROLS;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAFLOWTO;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIALABELLEDBY;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIAOWNS;
    internal static UInt32 DISPID_IHTMLELEMENT5_HASATTRIBUTES;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIALIVE;
    internal static UInt32 DISPID_IHTMLELEMENT5_ARIARELEVANT;
    internal static UInt32 DISPID_IHTMLELEMENT6_GETATTRIBUTENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_SETATTRIBUTENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_HASATTRIBUTENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE;
    internal static UInt32 DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_TAGNAME;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_NODENAME;
    internal static UInt32 DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME;
    internal static UInt32 DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONABORT;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONCANPLAY;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONCHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONDURATIONCHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONEMPTIED;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONENDED;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONERROR;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONINPUT;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONLOAD;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONLOADEDDATA;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONLOADEDMETADATA;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONLOADSTART;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONPAUSE;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONPLAY;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONPLAYING;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONPROGRESS;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONRATECHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONRESET;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONSEEKED;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONSEEKING;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONSELECT;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONSTALLED;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONSUBMIT;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONSUSPEND;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONTIMEUPDATE;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONVOLUMECHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT6_ONWAITING;
    internal static UInt32 DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTES;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTERDOWN;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTERMOVE;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTERUP;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTEROVER;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTEROUT;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTERCANCEL;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSPOINTERHOVER;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSLOSTPOINTERCAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGOTPOINTERCAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGESTURESTART;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGESTURECHANGE;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGESTUREEND;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGESTUREHOLD;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGESTURETAP;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSGESTUREDOUBLETAP;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSINERTIASTART;
    internal static UInt32 DISPID_IHTMLELEMENT7_MSSETPOINTERCAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT7_MSRELEASEPOINTERCAPTURE;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSTRANSITIONSTART;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSTRANSITIONEND;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSANIMATIONSTART;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSANIMATIONEND;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSANIMATIONITERATION;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONINVALID;
    internal static UInt32 DISPID_IHTMLELEMENT7_XMSACCELERATORKEY;
    internal static UInt32 DISPID_IHTMLELEMENT7_SPELLCHECK;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONMSMANIPULATIONSTATECHANGED;
    internal static UInt32 DISPID_IHTMLELEMENT7_ONCUECHANGE;
    internal static UInt32 DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIED;
    internal static UInt32 DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIEDWITHANCESTOR;
    internal static UInt32 DISPID_IELEMENTTRAVERSAL_FIRSTELEMENTCHILD;
    internal static UInt32 DISPID_IELEMENTTRAVERSAL_LASTELEMENTCHILD;
    internal static UInt32 DISPID_IELEMENTTRAVERSAL_PREVIOUSELEMENTSIBLING;
    internal static UInt32 DISPID_IELEMENTTRAVERSAL_NEXTELEMENTSIBLING;
    internal static UInt32 DISPID_IELEMENTTRAVERSAL_CHILDELEMENTCOUNT;
    internal static UInt32 DISPID_IHTMLDATABINDING_DATAFLD;
    internal static UInt32 DISPID_IHTMLDATABINDING_DATASRC;
    internal static UInt32 DISPID_IHTMLDATABINDING_DATAFORMATAS;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONABORT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONCHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONERROR;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONLOAD;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONRESET;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONSELECT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONSUBMIT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS4_ONMSCONTENTZOOM;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS3_ONONLINE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS3_ONOFFLINE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONHELP;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONCLICK;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONKEYUP;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEOUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEOVER;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONSELECTSTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONFILTERCHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDRAGSTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREUPDATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONAFTERUPDATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONERRORUPDATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONROWEXIT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONROWENTER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDATASETCHANGED;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDATAAVAILABLE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONLOSECAPTURE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONSCROLL;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONFOCUS;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONRESIZE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDRAG;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDRAGEND;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDRAGENTER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDRAGOVER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDRAGLEAVE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDROP;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONBEFORECUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONCUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONBEFORECOPY;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONCOPY;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREPASTE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONPASTE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONROWSDELETE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONROWSINSERTED;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONCELLCHANGE;
    internal static int DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONPAGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOVE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOVESTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOVEEND;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONHELP;
    internal static int DISPID_HTMLELEMENTEVENTS_ONCLICK;
    internal static int DISPID_HTMLELEMENTEVENTS_ONDBLCLICK;
    internal static int DISPID_HTMLELEMENTEVENTS_ONKEYPRESS;
    internal static int DISPID_HTMLELEMENTEVENTS_ONKEYDOWN;
    internal static int DISPID_HTMLELEMENTEVENTS_ONKEYUP;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER;
    internal static int DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE;
    internal static int DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN;
    internal static int DISPID_HTMLELEMENTEVENTS_ONMOUSEUP;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONSELECTSTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDRAGSTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONROWEXIT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONROWENTER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONLOSECAPTURE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONSCROLL;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONFOCUS;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONRESIZE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDRAG;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDRAGEND;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDRAGENTER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDRAGOVER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDRAGLEAVE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDROP;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFORECUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONCUT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFORECOPY;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONCOPY;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFOREPASTE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONPASTE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONROWSDELETE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONROWSINSERTED;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONCELLCHANGE;
    internal static int DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONPAGE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOVE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOVESTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOVEEND;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONRESIZESTART;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONRESIZEEND;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONFOCUSIN;
    internal static UInt32 DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_STYLE;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_TABSTOP;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK;
    internal static UInt32 DISPID_IHTMLELEMENTDEFAULTS_FROZEN;
    internal static UInt32 DISPID_IHTCDEFAULTDISPATCH_ELEMENT;
    internal static UInt32 DISPID_IHTCDEFAULTDISPATCH_CREATEEVENTOBJECT;
    internal static UInt32 DISPID_IHTCDEFAULTDISPATCH_DEFAULTS;
    internal static UInt32 DISPID_IHTCDEFAULTDISPATCH_DOCUMENT;
    internal static UInt32 DISPID_IHTCPROPERTYBEHAVIOR_FIRECHANGE;
    internal static UInt32 DISPID_IHTCPROPERTYBEHAVIOR_VALUE;
    internal static UInt32 DISPID_IHTCEVENTBEHAVIOR_FIRE;
    internal static UInt32 DISPID_IHTCATTACHBEHAVIOR_FIREEVENT;
    internal static UInt32 DISPID_IHTCATTACHBEHAVIOR_DETACHEVENT;
    internal static UInt32 DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT;
    internal static UInt32 DISPID_IHTCDESCBEHAVIOR_URN;
    internal static UInt32 DISPID_IHTCDESCBEHAVIOR_NAME;
    internal static UInt32 DISPID_IHTMLURNCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLURNCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLGENERICELEMENT_RECORDSET;
    internal static UInt32 DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULE_STYLE;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULE_READONLY;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSSPECIFICITY;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSGETSPECIFICITY;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULE2_IE9_SELECTORTEXT;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_LENGTH;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_ITEM;
    internal static UInt32 DISPID_IHTMLSTYLESHEETPAGE_SELECTOR;
    internal static UInt32 DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS;
    internal static UInt32 DISPID_IHTMLSTYLESHEETPAGE2_SELECTORTEXT;
    internal static UInt32 DISPID_IHTMLSTYLESHEETPAGE2_STYLE;
    internal static UInt32 DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_TITLE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_OWNINGELEMENT;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_DISABLED;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_READONLY;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_IMPORTS;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_HREF;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_TYPE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_ID;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_ADDIMPORT;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_ADDRULE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_REMOVEIMPORT;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_REMOVERULE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_MEDIA;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_CSSTEXT;
    internal static UInt32 DISPID_IHTMLSTYLESHEET_RULES;
    internal static UInt32 DISPID_IHTMLSTYLESHEET2_PAGES;
    internal static UInt32 DISPID_IHTMLSTYLESHEET2_ADDPAGERULE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET3_IE8_HREF;
    internal static UInt32 DISPID_IHTMLSTYLESHEET3_ISALTERNATE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET3_ISPREFALTERNATE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_IE9_TYPE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_IE9_HREF;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_IE9_TITLE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_OWNERNODE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_OWNERRULE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_CSSRULES;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_IE9_MEDIA;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_INSERTRULE;
    internal static UInt32 DISPID_IHTMLSTYLESHEET4_DELETERULE;
    internal static UInt32 DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLSTYLESHEETSCOLLECTION2_IE9_ITEM;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_HREF;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_REL;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_REV;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_READYSTATE;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_ONLOAD;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_ONERROR;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_STYLESHEET;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLLINKELEMENT_MEDIA;
    internal static UInt32 DISPID_IHTMLLINKELEMENT2_TARGET;
    internal static UInt32 DISPID_IHTMLLINKELEMENT3_CHARSET;
    internal static UInt32 DISPID_IHTMLLINKELEMENT3_HREFLANG;
    internal static UInt32 DISPID_IHTMLLINKELEMENT4_IE8_HREF;
    internal static UInt32 DISPID_IHTMLLINKELEMENT5_SHEET;
    internal static UInt32 DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLLINKELEMENTEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLLINKELEMENTEVENTS_ONLOAD;
    internal static UInt32 DISPID_HTMLLINKELEMENTEVENTS_ONERROR;
    internal static UInt32 DISPID_IHTMLTXTRANGE_HTMLTEXT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_TEXT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_PARENTELEMENT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_DUPLICATE;
    internal static UInt32 DISPID_IHTMLTXTRANGE_INRANGE;
    internal static UInt32 DISPID_IHTMLTXTRANGE_ISEQUAL;
    internal static UInt32 DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW;
    internal static UInt32 DISPID_IHTMLTXTRANGE_COLLAPSE;
    internal static UInt32 DISPID_IHTMLTXTRANGE_EXPAND;
    internal static UInt32 DISPID_IHTMLTXTRANGE_MOVE;
    internal static UInt32 DISPID_IHTMLTXTRANGE_MOVESTART;
    internal static UInt32 DISPID_IHTMLTXTRANGE_MOVEEND;
    internal static UInt32 DISPID_IHTMLTXTRANGE_SELECT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_PASTEHTML;
    internal static UInt32 DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_SETENDPOINT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS;
    internal static UInt32 DISPID_IHTMLTXTRANGE_FINDTEXT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_MOVETOPOINT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_GETBOOKMARK;
    internal static UInt32 DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK;
    internal static UInt32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED;
    internal static UInt32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED;
    internal static UInt32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE;
    internal static UInt32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM;
    internal static UInt32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT;
    internal static UInt32 DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE;
    internal static UInt32 DISPID_IHTMLTXTRANGE_EXECCOMMAND;
    internal static UInt32 DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS;
    internal static UInt32 DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT;
    internal static UInt32 DISPID_IHTMLTXTRANGECOLLECTION_LENGTH;
    internal static int DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLTXTRANGECOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDOMRANGE_STARTCONTAINER;
    internal static UInt32 DISPID_IHTMLDOMRANGE_STARTOFFSET;
    internal static UInt32 DISPID_IHTMLDOMRANGE_ENDCONTAINER;
    internal static UInt32 DISPID_IHTMLDOMRANGE_ENDOFFSET;
    internal static UInt32 DISPID_IHTMLDOMRANGE_COLLAPSED;
    internal static UInt32 DISPID_IHTMLDOMRANGE_COMMONANCESTORCONTAINER;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SETSTART;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SETEND;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SETSTARTBEFORE;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SETSTARTAFTER;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SETENDBEFORE;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SETENDAFTER;
    internal static UInt32 DISPID_IHTMLDOMRANGE_COLLAPSE;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SELECTNODE;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SELECTNODECONTENTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_COMPAREBOUNDARYPOINTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_DELETECONTENTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_EXTRACTCONTENTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_CLONECONTENTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_INSERTNODE;
    internal static UInt32 DISPID_IHTMLDOMRANGE_SURROUNDCONTENTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_CLONERANGE;
    internal static UInt32 DISPID_IHTMLDOMRANGE_TOSTRING;
    internal static UInt32 DISPID_IHTMLDOMRANGE_DETACH;
    internal static UInt32 DISPID_IHTMLDOMRANGE_GETCLIENTRECTS;
    internal static UInt32 DISPID_IHTMLDOMRANGE_GETBOUNDINGCLIENTRECT;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_ACTION;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_DIR;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_ENCODING;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_METHOD;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_ELEMENTS;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_TARGET;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_ONSUBMIT;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_ONRESET;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_SUBMIT;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_RESET;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_LENGTH;
    internal static int DISPID_IHTMLFORMELEMENT__NEWENUM;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_ITEM;
    internal static UInt32 DISPID_IHTMLFORMELEMENT_TAGS;
    internal static UInt32 DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET;
    internal static UInt32 DISPID_IHTMLFORMELEMENT2_URNS;
    internal static UInt32 DISPID_IHTMLFORMELEMENT3_NAMEDITEM;
    internal static UInt32 DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR;
    internal static UInt32 DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR;
    internal static UInt32 DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR;
    internal static UInt32 DISPID_IHTMLFORMELEMENT4_IE8_ACTION;
    internal static UInt32 DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT;
    internal static UInt32 DISPID_HTMLFORMELEMENTEVENTS2_ONRESET;
    internal static UInt32 DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT;
    internal static UInt32 DISPID_HTMLFORMELEMENTEVENTS_ONRESET;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_TABINDEX;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_FOCUS;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_ACCESSKEY;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_ONBLUR;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_ONFOCUS;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_ONRESIZE;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_BLUR;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_ADDFILTER;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_CLIENTTOP;
    internal static UInt32 DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT;
    internal static UInt32 DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE;
    internal static UInt32 DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT;
    internal static UInt32 DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH;
    internal static UInt32 DISPID_IHTMLTEXTCONTAINER_SCROLLTOP;
    internal static UInt32 DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT;
    internal static UInt32 DISPID_IHTMLTEXTCONTAINER_ONSCROLL;
    internal static UInt32 DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE;
    internal static UInt32 DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT;
    internal static UInt32 DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE;
    internal static UInt32 DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_SELECT;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_ADD;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_REMOVE;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_ITEM;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_EXECCOMMAND;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE_LENGTH;
    internal static UInt32 DISPID_IHTMLCONTROLRANGE2_ADDELEMENT;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_ISMAP;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_USEMAP;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_MIMETYPE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_FILESIZE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_FILECREATEDDATE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_PROTOCOL;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_HREF;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_NAMEPROP;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_BORDER;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_VSPACE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_HSPACE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_ALT;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_SRC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_LOWSRC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_VRML;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_DYNSRC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_READYSTATE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_COMPLETE;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_LOOP;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_ONLOAD;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_ONERROR;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_ONABORT;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLIMGELEMENT_START;
    internal static UInt32 DISPID_IHTMLIMGELEMENT2_LONGDESC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT3_IE8_LONGDESC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT3_IE8_VRML;
    internal static UInt32 DISPID_IHTMLIMGELEMENT3_IE8_LOWSRC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT3_IE8_DYNSRC;
    internal static UInt32 DISPID_IHTMLIMGELEMENT4_NATURALWIDTH;
    internal static UInt32 DISPID_IHTMLIMGELEMENT4_NATURALHEIGHT;
    internal static UInt32 DISPID_IHTMLMSIMGELEMENT_MSPLAYTODISABLED;
    internal static UInt32 DISPID_IHTMLMSIMGELEMENT_MSPLAYTOPRIMARY;
    internal static UInt32 DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE;
    internal static UInt32 DISPID_HTMLIMGEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLIMGEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLIMGEVENTS2_ONABORT;
    internal static UInt32 DISPID_HTMLIMGEVENTS_ONLOAD;
    internal static UInt32 DISPID_HTMLIMGEVENTS_ONERROR;
    internal static UInt32 DISPID_HTMLIMGEVENTS_ONABORT;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_BACKGROUND;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_BGPROPERTIES;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_LEFTMARGIN;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_TOPMARGIN;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_RIGHTMARGIN;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_NOWRAP;
    internal static int DISPID_IHTMLBODYELEMENT_BGCOLOR;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_TEXT;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_LINK;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_VLINK;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_ALINK;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_ONLOAD;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_ONUNLOAD;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_SCROLL;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_ONSELECT;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLBODYELEMENT2_ONBEFOREPRINT;
    internal static UInt32 DISPID_IHTMLBODYELEMENT2_ONAFTERPRINT;
    internal static UInt32 DISPID_IHTMLBODYELEMENT3_IE8_BACKGROUND;
    internal static UInt32 DISPID_IHTMLBODYELEMENT3_ONONLINE;
    internal static UInt32 DISPID_IHTMLBODYELEMENT3_ONOFFLINE;
    internal static UInt32 DISPID_IHTMLBODYELEMENT3_ONHASHCHANGE;
    internal static UInt32 DISPID_IHTMLBODYELEMENT4_ONMESSAGE;
    internal static UInt32 DISPID_IHTMLBODYELEMENT4_ONSTORAGE;
    internal static UInt32 DISPID_IHTMLBODYELEMENT5_ONPOPSTATE;
    internal static UInt32 DISPID_IHTMLFONTELEMENT_COLOR;
    internal static UInt32 DISPID_IHTMLFONTELEMENT_FACE;
    internal static UInt32 DISPID_IHTMLFONTELEMENT_SIZE;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_HREF;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_TARGET;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_REL;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_REV;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_URN;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_METHODS;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_HOST;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_HOSTNAME;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_PATHNAME;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_PORT;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_PROTOCOL;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_SEARCH;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_HASH;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_ONBLUR;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_ONFOCUS;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_ACCESSKEY;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_MIMETYPE;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_NAMEPROP;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_TABINDEX;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_FOCUS;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT_BLUR;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT2_CHARSET;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT2_COORDS;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT2_HREFLANG;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT2_SHAPE;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT2_TYPE;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT3_IE8_SHAPE;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT3_IE8_COORDS;
    internal static UInt32 DISPID_IHTMLANCHORELEMENT3_IE8_HREF;
    internal static UInt32 DISPID_IHTMLLABELELEMENT_HTMLFOR;
    internal static UInt32 DISPID_IHTMLLABELELEMENT_ACCESSKEY;
    internal static UInt32 DISPID_IHTMLLABELELEMENT2_FORM;
    internal static UInt32 DISPID_IHTMLLISTELEMENT2_COMPACT;
    internal static UInt32 DISPID_IHTMLULISTELEMENT_COMPACT;
    internal static UInt32 DISPID_IHTMLULISTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLOLISTELEMENT_COMPACT;
    internal static UInt32 DISPID_IHTMLOLISTELEMENT_START;
    internal static UInt32 DISPID_IHTMLOLISTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLLIELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLLIELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLBLOCKELEMENT_CLEAR;
    internal static UInt32 DISPID_IHTMLBLOCKELEMENT2_CITE;
    internal static UInt32 DISPID_IHTMLBLOCKELEMENT2_WIDTH;
    internal static UInt32 DISPID_IHTMLBLOCKELEMENT3_IE8_CITE;
    internal static UInt32 DISPID_IHTMLDIVELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLDIVELEMENT_NOWRAP;
    internal static UInt32 DISPID_IHTMLDDELEMENT_NOWRAP;
    internal static UInt32 DISPID_IHTMLDTELEMENT_NOWRAP;
    internal static UInt32 DISPID_IHTMLBRELEMENT_CLEAR;
    internal static UInt32 DISPID_IHTMLDLISTELEMENT_COMPACT;
    internal static UInt32 DISPID_IHTMLHRELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLHRELEMENT_COLOR;
    internal static UInt32 DISPID_IHTMLHRELEMENT_NOSHADE;
    internal static UInt32 DISPID_IHTMLHRELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLHRELEMENT_SIZE;
    internal static UInt32 DISPID_IHTMLPARAELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION_TOSTRING;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLELEMENTCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION_TAGS;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION2_URNS;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_LENGTH;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_ITEM;
    internal static UInt32 DISPID_IHTMLELEMENTCOLLECTION4_IE8_NAMEDITEM;
    internal static UInt32 DISPID_IHTMLHEADERELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_SIZE;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_MULTIPLE;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_OPTIONS;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_ONCHANGE;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_ADD;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_REMOVE;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_LENGTH;
    internal static int DISPID_IHTMLSELECTELEMENT__NEWENUM;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_ITEM;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT_TAGS;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT2_URNS;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT4_NAMEDITEM;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT5_IE8_ADD;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT6_IE9_ADD;
    internal static UInt32 DISPID_IHTMLSELECTELEMENT6_IE9_VALUE;
    internal static UInt32 DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE;
    internal static UInt32 DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE;
    internal static UInt32 DISPID_IHTMLSELECTIONOBJECT_CREATERANGE;
    internal static UInt32 DISPID_IHTMLSELECTIONOBJECT_EMPTY;
    internal static UInt32 DISPID_IHTMLSELECTIONOBJECT_CLEAR;
    internal static UInt32 DISPID_IHTMLSELECTIONOBJECT_TYPE;
    internal static UInt32 DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION;
    internal static UInt32 DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL;
    internal static UInt32 DISPID_IHTMLSELECTION_ANCHORNODE;
    internal static UInt32 DISPID_IHTMLSELECTION_ANCHOROFFSET;
    internal static UInt32 DISPID_IHTMLSELECTION_FOCUSNODE;
    internal static UInt32 DISPID_IHTMLSELECTION_FOCUSOFFSET;
    internal static UInt32 DISPID_IHTMLSELECTION_ISCOLLAPSED;
    internal static UInt32 DISPID_IHTMLSELECTION_COLLAPSE;
    internal static UInt32 DISPID_IHTMLSELECTION_COLLAPSETOSTART;
    internal static UInt32 DISPID_IHTMLSELECTION_COLLAPSETOEND;
    internal static UInt32 DISPID_IHTMLSELECTION_SELECTALLCHILDREN;
    internal static UInt32 DISPID_IHTMLSELECTION_DELETEFROMDOCUMENT;
    internal static UInt32 DISPID_IHTMLSELECTION_RANGECOUNT;
    internal static UInt32 DISPID_IHTMLSELECTION_GETRANGEAT;
    internal static UInt32 DISPID_IHTMLSELECTION_ADDRANGE;
    internal static UInt32 DISPID_IHTMLSELECTION_REMOVERANGE;
    internal static UInt32 DISPID_IHTMLSELECTION_REMOVEALLRANGES;
    internal static UInt32 DISPID_IHTMLSELECTION_TOSTRING;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT_SELECTED;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT_INDEX;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT_TEXT;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT3_LABEL;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENT4_IE9_VALUE;
    internal static UInt32 DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_SIZE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_MAXLENGTH;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_SELECT;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ONCHANGE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ONSELECT;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_DEFAULTVALUE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_READONLY;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_INDETERMINATE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_CHECKED;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_BORDER;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_VSPACE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_HSPACE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ALT;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_SRC;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_LOWSRC;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_VRML;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_DYNSRC;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_READYSTATE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_COMPLETE;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_LOOP;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ONLOAD;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ONERROR;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_ONABORT;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT_START;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT2_ACCEPT;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT2_USEMAP;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT3_IE8_SRC;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT3_IE8_LOWSRC;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT3_IE8_VRML;
    internal static UInt32 DISPID_IHTMLINPUTELEMENT3_IE8_DYNSRC;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_SIZE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_SELECT;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_READONLY;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONSTART;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONEND;
    internal static UInt32 DISPID_IHTMLINPUTTEXTELEMENT2_SETSELECTIONRANGE;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_SIZE;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_SELECT;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_ONSELECT;
    internal static UInt32 DISPID_IHTMLINPUTFILEELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE;
    internal static UInt32 DISPID_IHTMLOPTIONBUTTONELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_BORDER;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_VSPACE;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_HSPACE;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_ALT;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_SRC;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_LOWSRC;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_VRML;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_DYNSRC;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_READYSTATE;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_COMPLETE;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_LOOP;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_ALIGN;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_ONLOAD;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_ONERROR;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_ONABORT;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_NAME;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_WIDTH;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_HEIGHT;
    internal static UInt32 DISPID_IHTMLINPUTIMAGE_START;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_ALT;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_MIN;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_MAX;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_STEP;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_VALUEASNUMBER;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_STEPUP;
    internal static UInt32 DISPID_IHTMLINPUTRANGEELEMENT_STEPDOWN;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT;
    internal static UInt32 DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR;
    internal static UInt32 DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT;
    internal static UInt32 DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD;
    internal static UInt32 DISPID_HTMLINPUTIMAGEEVENTS_ONERROR;
    internal static UInt32 DISPID_HTMLINPUTIMAGEEVENTS_ONABORT;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_SELECT;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_ONSELECT;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_READONLY;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_ROWS;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_COLS;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_WRAP;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONSTART;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONEND;
    internal static UInt32 DISPID_IHTMLTEXTAREAELEMENT2_SETSELECTIONRANGE;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_STATUS;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE;
    internal static UInt32 DISPID_IHTMLBUTTONELEMENT2_IE9_TYPE;
    internal static int DISPID_IHTMLMARQUEEELEMENT_BGCOLOR;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_DIRECTION;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_LOOP;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_VSPACE;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_HSPACE;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_ONFINISH;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_ONSTART;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_TRUESPEED;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_START;
    internal static UInt32 DISPID_IHTMLMARQUEEELEMENT_STOP;
    internal static UInt32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE;
    internal static UInt32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH;
    internal static UInt32 DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART;
    internal static UInt32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE;
    internal static UInt32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH;
    internal static UInt32 DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART;
    internal static UInt32 DISPID_IHTMLHTMLELEMENT_VERSION;
    internal static UInt32 DISPID_IHTMLHEADELEMENT_PROFILE;
    internal static UInt32 DISPID_IHTMLHEADELEMENT2_IE8_PROFILE;
    internal static UInt32 DISPID_IHTMLTITLEELEMENT_TEXT;
    internal static UInt32 DISPID_IHTMLMETAELEMENT_HTTPEQUIV;
    internal static UInt32 DISPID_IHTMLMETAELEMENT_CONTENT;
    internal static UInt32 DISPID_IHTMLMETAELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLMETAELEMENT_URL;
    internal static UInt32 DISPID_IHTMLMETAELEMENT_CHARSET;
    internal static UInt32 DISPID_IHTMLMETAELEMENT2_SCHEME;
    internal static UInt32 DISPID_IHTMLMETAELEMENT3_IE8_URL;
    internal static UInt32 DISPID_IHTMLBASEELEMENT_HREF;
    internal static UInt32 DISPID_IHTMLBASEELEMENT_TARGET;
    internal static UInt32 DISPID_IHTMLBASEELEMENT2_IE8_HREF;
    internal static UInt32 DISPID_IHTMLISINDEXELEMENT_PROMPT;
    internal static UInt32 DISPID_IHTMLISINDEXELEMENT_ACTION;
    internal static UInt32 DISPID_IHTMLISINDEXELEMENT2_FORM;
    internal static UInt32 DISPID_IHTMLNEXTIDELEMENT_N;
    internal static UInt32 DISPID_IHTMLBASEFONTELEMENT_COLOR;
    internal static UInt32 DISPID_IHTMLBASEFONTELEMENT_FACE;
    internal static UInt32 DISPID_IHTMLBASEFONTELEMENT_SIZE;
    internal static UInt32 DISPID_IOMHISTORY_LENGTH;
    internal static UInt32 DISPID_IOMHISTORY_BACK;
    internal static UInt32 DISPID_IOMHISTORY_FORWARD;
    internal static UInt32 DISPID_IOMHISTORY_GO;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_ADDREQUEST;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_CLEARREQUEST;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_DOREQUEST;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_COMMITCHANGES;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_ADDREADREQUEST;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_DOREADREQUEST;
    internal static UInt32 DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST;
    internal static UInt32 DISPID_IOMNAVIGATOR_APPCODENAME;
    internal static UInt32 DISPID_IOMNAVIGATOR_APPNAME;
    internal static UInt32 DISPID_IOMNAVIGATOR_APPVERSION;
    internal static UInt32 DISPID_IOMNAVIGATOR_USERAGENT;
    internal static UInt32 DISPID_IOMNAVIGATOR_JAVAENABLED;
    internal static UInt32 DISPID_IOMNAVIGATOR_TAINTENABLED;
    internal static UInt32 DISPID_IOMNAVIGATOR_MIMETYPES;
    internal static UInt32 DISPID_IOMNAVIGATOR_PLUGINS;
    internal static UInt32 DISPID_IOMNAVIGATOR_COOKIEENABLED;
    internal static UInt32 DISPID_IOMNAVIGATOR_OPSPROFILE;
    internal static UInt32 DISPID_IOMNAVIGATOR_TOSTRING;
    internal static UInt32 DISPID_IOMNAVIGATOR_CPUCLASS;
    internal static UInt32 DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE;
    internal static UInt32 DISPID_IOMNAVIGATOR_BROWSERLANGUAGE;
    internal static UInt32 DISPID_IOMNAVIGATOR_USERLANGUAGE;
    internal static UInt32 DISPID_IOMNAVIGATOR_PLATFORM;
    internal static UInt32 DISPID_IOMNAVIGATOR_APPMINORVERSION;
    internal static UInt32 DISPID_IOMNAVIGATOR_CONNECTIONSPEED;
    internal static UInt32 DISPID_IOMNAVIGATOR_ONLINE;
    internal static UInt32 DISPID_IOMNAVIGATOR_USERPROFILE;
    internal static UInt32 DISPID_INAVIGATORGEOLOCATION_GEOLOCATION;
    internal static UInt32 DISPID_INAVIGATORDONOTTRACK_MSDONOTTRACK;
    internal static UInt32 DISPID_IHTMLLOCATION_HREF;
    internal static UInt32 DISPID_IHTMLLOCATION_PROTOCOL;
    internal static UInt32 DISPID_IHTMLLOCATION_HOST;
    internal static UInt32 DISPID_IHTMLLOCATION_HOSTNAME;
    internal static UInt32 DISPID_IHTMLLOCATION_PORT;
    internal static UInt32 DISPID_IHTMLLOCATION_PATHNAME;
    internal static UInt32 DISPID_IHTMLLOCATION_SEARCH;
    internal static UInt32 DISPID_IHTMLLOCATION_HASH;
    internal static UInt32 DISPID_IHTMLLOCATION_RELOAD;
    internal static UInt32 DISPID_IHTMLLOCATION_REPLACE;
    internal static UInt32 DISPID_IHTMLLOCATION_ASSIGN;
    internal static UInt32 DISPID_IHTMLLOCATION_TOSTRING;
    internal static UInt32 DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLPLUGINSCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLPLUGINSCOLLECTION_REFRESH;
    internal static UInt32 DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLBOOKMARKCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDATATRANSFER_SETDATA;
    internal static UInt32 DISPID_IHTMLDATATRANSFER_GETDATA;
    internal static UInt32 DISPID_IHTMLDATATRANSFER_CLEARDATA;
    internal static UInt32 DISPID_IHTMLDATATRANSFER_DROPEFFECT;
    internal static UInt32 DISPID_IHTMLDATATRANSFER_EFFECTALLOWED;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_SRCELEMENT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_ALTKEY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_CTRLKEY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_SHIFTKEY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_RETURNVALUE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_CANCELBUBBLE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_FROMELEMENT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_TOELEMENT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_KEYCODE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_BUTTON;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_TYPE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_QUALIFIER;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_REASON;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_X;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_Y;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_CLIENTX;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_CLIENTY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_OFFSETX;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_OFFSETY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_SCREENX;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_SCREENY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ_SRCFILTER;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_GETATTRIBUTE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_REMOVEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_PROPERTYNAME;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_BOOKMARKS;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_RECORDSET;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_DATAFLD;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_REPEAT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SRCURN;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SRCELEMENT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_ALTKEY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_CTRLKEY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SHIFTKEY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_FROMELEMENT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_TOELEMENT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_BUTTON;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_TYPE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_QUALIFIER;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_REASON;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_X;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_Y;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_CLIENTX;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_CLIENTY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_OFFSETX;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_OFFSETY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SCREENX;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SCREENY;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_SRCFILTER;
    internal static UInt32 DISPID_IHTMLEVENTOBJ2_DATATRANSFER;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_SHIFTLEFT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_ALTLEFT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_CTRLLEFT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_IMEREQUEST;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_BEHAVIORPART;
    internal static UInt32 DISPID_IHTMLEVENTOBJ3_NEXTPAGE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ4_WHEELDELTA;
    internal static UInt32 DISPID_IHTMLEVENTOBJ5_URL;
    internal static UInt32 DISPID_IHTMLEVENTOBJ5_DATA;
    internal static UInt32 DISPID_IHTMLEVENTOBJ5_SOURCE;
    internal static UInt32 DISPID_IHTMLEVENTOBJ5_ORIGIN;
    internal static UInt32 DISPID_IHTMLEVENTOBJ5_ISSESSION;
    internal static UInt32 DISPID_IHTMLEVENTOBJ6_ACTIONURL;
    internal static UInt32 DISPID_IHTMLEVENTOBJ6_BUTTONID;
    internal static UInt32 DISPID_IHTMLSTYLEMEDIA_TYPE;
    internal static UInt32 DISPID_IHTMLSTYLEMEDIA_MATCHMEDIUM;
    internal static UInt32 DISPID_IHTMLFRAMESCOLLECTION2_ITEM;
    internal static UInt32 DISPID_IHTMLFRAMESCOLLECTION2_LENGTH;
    internal static UInt32 DISPID_IHTMLSCREEN_COLORDEPTH;
    internal static UInt32 DISPID_IHTMLSCREEN_BUFFERDEPTH;
    internal static UInt32 DISPID_IHTMLSCREEN_WIDTH;
    internal static UInt32 DISPID_IHTMLSCREEN_HEIGHT;
    internal static UInt32 DISPID_IHTMLSCREEN_UPDATEINTERVAL;
    internal static UInt32 DISPID_IHTMLSCREEN_AVAILHEIGHT;
    internal static UInt32 DISPID_IHTMLSCREEN_AVAILWIDTH;
    internal static UInt32 DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED;
    internal static UInt32 DISPID_IHTMLSCREEN2_LOGICALXDPI;
    internal static UInt32 DISPID_IHTMLSCREEN2_LOGICALYDPI;
    internal static UInt32 DISPID_IHTMLSCREEN2_DEVICEXDPI;
    internal static UInt32 DISPID_IHTMLSCREEN2_DEVICEYDPI;
    internal static UInt32 DISPID_IHTMLSCREEN3_SYSTEMXDPI;
    internal static UInt32 DISPID_IHTMLSCREEN3_SYSTEMYDPI;
    internal static UInt32 DISPID_IHTMLSCREEN4_PIXELDEPTH;
    internal static UInt32 DISPID_IHTMLWINDOW2_FRAMES;
    internal static UInt32 DISPID_IHTMLWINDOW2_DEFAULTSTATUS;
    internal static UInt32 DISPID_IHTMLWINDOW2_STATUS;
    internal static UInt32 DISPID_IHTMLWINDOW2_SETTIMEOUT;
    internal static UInt32 DISPID_IHTMLWINDOW2_CLEARTIMEOUT;
    internal static UInt32 DISPID_IHTMLWINDOW2_ALERT;
    internal static UInt32 DISPID_IHTMLWINDOW2_CONFIRM;
    internal static UInt32 DISPID_IHTMLWINDOW2_PROMPT;
    internal static UInt32 DISPID_IHTMLWINDOW2_IMAGE;
    internal static UInt32 DISPID_IHTMLWINDOW2_LOCATION;
    internal static UInt32 DISPID_IHTMLWINDOW2_HISTORY;
    internal static UInt32 DISPID_IHTMLWINDOW2_CLOSE;
    internal static UInt32 DISPID_IHTMLWINDOW2_OPENER;
    internal static UInt32 DISPID_IHTMLWINDOW2_NAVIGATOR;
    internal static UInt32 DISPID_IHTMLWINDOW2_NAME;
    internal static UInt32 DISPID_IHTMLWINDOW2_PARENT;
    internal static UInt32 DISPID_IHTMLWINDOW2_OPEN;
    internal static UInt32 DISPID_IHTMLWINDOW2_SELF;
    internal static UInt32 DISPID_IHTMLWINDOW2_TOP;
    internal static UInt32 DISPID_IHTMLWINDOW2_WINDOW;
    internal static UInt32 DISPID_IHTMLWINDOW2_NAVIGATE;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONFOCUS;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONBLUR;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONLOAD;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONUNLOAD;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONHELP;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONERROR;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONRESIZE;
    internal static UInt32 DISPID_IHTMLWINDOW2_ONSCROLL;
    internal static UInt32 DISPID_IHTMLWINDOW2_DOCUMENT;
    internal static UInt32 DISPID_IHTMLWINDOW2_EVENT;
    internal static UInt32 DISPID_IHTMLWINDOW2__NEWENUM;
    internal static UInt32 DISPID_IHTMLWINDOW2_SHOWMODALDIALOG;
    internal static UInt32 DISPID_IHTMLWINDOW2_SHOWHELP;
    internal static UInt32 DISPID_IHTMLWINDOW2_SCREEN;
    internal static UInt32 DISPID_IHTMLWINDOW2_OPTION;
    internal static UInt32 DISPID_IHTMLWINDOW2_FOCUS;
    internal static UInt32 DISPID_IHTMLWINDOW2_CLOSED;
    internal static UInt32 DISPID_IHTMLWINDOW2_BLUR;
    internal static UInt32 DISPID_IHTMLWINDOW2_SCROLL;
    internal static UInt32 DISPID_IHTMLWINDOW2_CLIENTINFORMATION;
    internal static UInt32 DISPID_IHTMLWINDOW2_SETINTERVAL;
    internal static UInt32 DISPID_IHTMLWINDOW2_CLEARINTERVAL;
    internal static UInt32 DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING;
    internal static UInt32 DISPID_IHTMLWINDOW2_EXECSCRIPT;
    internal static UInt32 DISPID_IHTMLWINDOW2_TOSTRING;
    internal static UInt32 DISPID_IHTMLWINDOW2_SCROLLBY;
    internal static UInt32 DISPID_IHTMLWINDOW2_SCROLLTO;
    internal static UInt32 DISPID_IHTMLWINDOW2_MOVETO;
    internal static UInt32 DISPID_IHTMLWINDOW2_MOVEBY;
    internal static UInt32 DISPID_IHTMLWINDOW2_RESIZETO;
    internal static UInt32 DISPID_IHTMLWINDOW2_RESIZEBY;
    internal static UInt32 DISPID_IHTMLWINDOW2_EXTERNAL;
    internal static UInt32 DISPID_IHTMLWINDOW3_SCREENLEFT;
    internal static UInt32 DISPID_IHTMLWINDOW3_SCREENTOP;
    internal static UInt32 DISPID_IHTMLWINDOW3_ATTACHEVENT;
    internal static UInt32 DISPID_IHTMLWINDOW3_DETACHEVENT;
    internal static UInt32 DISPID_IHTMLWINDOW3_SETTIMEOUT;
    internal static UInt32 DISPID_IHTMLWINDOW3_SETINTERVAL;
    internal static UInt32 DISPID_IHTMLWINDOW3_PRINT;
    internal static UInt32 DISPID_IHTMLWINDOW3_ONBEFOREPRINT;
    internal static UInt32 DISPID_IHTMLWINDOW3_ONAFTERPRINT;
    internal static UInt32 DISPID_IHTMLWINDOW3_CLIPBOARDDATA;
    internal static UInt32 DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG;
    internal static UInt32 DISPID_IHTMLWINDOW4_CREATEPOPUP;
    internal static UInt32 DISPID_IHTMLWINDOW4_FRAMEELEMENT;
    internal static UInt32 DISPID_IHTMLWINDOW5_XMLHTTPREQUEST;
    internal static UInt32 DISPID_IHTMLWINDOW6_XDOMAINREQUEST;
    internal static UInt32 DISPID_IHTMLWINDOW6_SESSIONSTORAGE;
    internal static UInt32 DISPID_IHTMLWINDOW6_LOCALSTORAGE;
    internal static UInt32 DISPID_IHTMLWINDOW6_ONHASHCHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW6_MAXCONNECTIONSPERSERVER;
    internal static UInt32 DISPID_IHTMLWINDOW6_POSTMESSAGE;
    internal static UInt32 DISPID_IHTMLWINDOW6_TOSTATICHTML;
    internal static UInt32 DISPID_IHTMLWINDOW6_ONMESSAGE;
    internal static UInt32 DISPID_IHTMLWINDOW6_MSWRITEPROFILERMARK;
    internal static UInt32 DISPID_IHTMLWINDOW7_GETSELECTION;
    internal static UInt32 DISPID_IHTMLWINDOW7_GETCOMPUTEDSTYLE;
    internal static UInt32 DISPID_IHTMLWINDOW7_STYLEMEDIA;
    internal static UInt32 DISPID_IHTMLWINDOW7_PERFORMANCE;
    internal static UInt32 DISPID_IHTMLWINDOW7_INNERWIDTH;
    internal static UInt32 DISPID_IHTMLWINDOW7_INNERHEIGHT;
    internal static UInt32 DISPID_IHTMLWINDOW7_PAGEXOFFSET;
    internal static UInt32 DISPID_IHTMLWINDOW7_PAGEYOFFSET;
    internal static UInt32 DISPID_IHTMLWINDOW7_SCREENX;
    internal static UInt32 DISPID_IHTMLWINDOW7_SCREENY;
    internal static UInt32 DISPID_IHTMLWINDOW7_OUTERWIDTH;
    internal static UInt32 DISPID_IHTMLWINDOW7_OUTERHEIGHT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONABORT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONCANPLAY;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONCANPLAYTHROUGH;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONCHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONCLICK;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONCONTEXTMENU;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDBLCLICK;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDRAG;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDRAGEND;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDRAGENTER;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDRAGLEAVE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDRAGOVER;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDRAGSTART;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDROP;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONDURATIONCHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONFOCUSIN;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONFOCUSOUT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONINPUT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONEMPTIED;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONENDED;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONKEYDOWN;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONKEYPRESS;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONKEYUP;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONLOADEDDATA;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONLOADEDMETADATA;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONLOADSTART;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEDOWN;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEENTER;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSELEAVE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEMOVE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEOUT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEOVER;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEUP;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONMOUSEWHEEL;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONOFFLINE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONONLINE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONPROGRESS;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONRATECHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONRESET;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSEEKED;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSEEKING;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSELECT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSTALLED;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSTORAGE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSUBMIT;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONSUSPEND;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONTIMEUPDATE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONPAUSE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONPLAY;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONPLAYING;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONVOLUMECHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW7_ONWAITING;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTERDOWN;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTERMOVE;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTERUP;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTEROVER;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTEROUT;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTERCANCEL;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSPOINTERHOVER;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSGESTURESTART;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSGESTURECHANGE;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSGESTUREEND;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSGESTUREHOLD;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSGESTURETAP;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSGESTUREDOUBLETAP;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONMSINERTIASTART;
    internal static UInt32 DISPID_IHTMLWINDOW8_APPLICATIONCACHE;
    internal static UInt32 DISPID_IHTMLWINDOW8_ONPOPSTATE;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS3_ONHASHCHANGE;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS3_ONMESSAGE;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONUNLOAD;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONHELP;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONFOCUS;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONRESIZE;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONSCROLL;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONLOAD;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONUNLOAD;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONHELP;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONFOCUS;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONERROR;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONRESIZE;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONSCROLL;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT;
    internal static UInt32 DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT;
    internal static UInt32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_USERAGENT;
    internal static UInt32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_VERSION;
    internal static UInt32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDOCUMENT_SCRIPT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ALL;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_BODY;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_IMAGES;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_APPLETS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_LINKS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FORMS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ANCHORS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_TITLE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_SCRIPTS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_DESIGNMODE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_SELECTION;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_READYSTATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FRAMES;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_EMBEDS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_PLUGINS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ALINKCOLOR;
    internal static int DISPID_IHTMLDOCUMENT2_BGCOLOR;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FGCOLOR;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_LINKCOLOR;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_VLINKCOLOR;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_REFERRER;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_LOCATION;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_LASTMODIFIED;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_URL;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_DOMAIN;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_COOKIE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_EXPANDO;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_CHARSET;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_MIMETYPE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FILESIZE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FILECREATEDDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_SECURITY;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_PROTOCOL;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_NAMEPROP;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_WRITE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_WRITELN;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_OPEN;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_CLOSE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_CLEAR;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_EXECCOMMAND;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_CREATEELEMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONHELP;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONCLICK;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONDBLCLICK;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONKEYUP;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONKEYDOWN;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONKEYPRESS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONMOUSEUP;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONMOUSEOUT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONMOUSEOVER;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONROWEXIT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONROWENTER;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONDRAGSTART;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONSELECTSTART;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_PARENTWINDOW;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_STYLESHEETS;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_ONERRORUPDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_TOSTRING;
    internal static UInt32 DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_RELEASECAPTURE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_RECALC;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_CREATETEXTNODE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_UNIQUEID;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ATTACHEVENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_DETACHEVENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONROWSDELETE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONROWSINSERTED;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONCELLCHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONDATASETCHANGED;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONDATAAVAILABLE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_DIR;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONCONTEXTMENU;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONSTOP;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_BASEURL;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_CHILDNODES;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_GETELEMENTBYID;
    internal static UInt32 DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_FOCUS;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_HASFOCUS;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_NAMESPACES;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_MEDIA;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_FIREEVENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT;
    internal static UInt32 DISPID_IHTMLDOCUMENT4_URLUNENCODED;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_DOCTYPE;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_IMPLEMENTATION;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_CREATECOMMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONFOCUSIN;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONFOCUSOUT;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONACTIVATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONDEACTIVATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT5_COMPATMODE;
    internal static UInt32 DISPID_IHTMLDOCUMENT6_COMPATIBLE;
    internal static UInt32 DISPID_IHTMLDOCUMENT6_DOCUMENTMODE;
    internal static UInt32 DISPID_IHTMLDOCUMENT6_ONSTORAGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT6_ONSTORAGECOMMIT;
    internal static UInt32 DISPID_IHTMLDOCUMENT6_IE8_GETELEMENTBYID;
    internal static UInt32 DISPID_IHTMLDOCUMENT6_UPDATESETTINGS;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_DEFAULTVIEW;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_CREATECDATASECTION;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_GETSELECTION;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_GETELEMENTSBYTAGNAMENS;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_CREATEELEMENTNS;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_CREATEATTRIBUTENS;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONMSTHUMBNAILCLICK;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_CHARACTERSET;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_IE9_CREATEELEMENT;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_IE9_CREATEATTRIBUTE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_GETELEMENTSBYCLASSNAME;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_CREATEPROCESSINGINSTRUCTION;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ADOPTNODE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONMSSITEMODEJUMPLISTITEMREMOVED;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_IE9_ALL;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_INPUTENCODING;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_XMLENCODING;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_XMLSTANDALONE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_XMLVERSION;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_HASATTRIBUTES;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONABORT;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONBLUR;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONCANPLAY;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONCANPLAYTHROUGH;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONCHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDRAG;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDRAGEND;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDRAGENTER;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDRAGLEAVE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDRAGOVER;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDROP;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONDURATIONCHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONEMPTIED;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONENDED;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONERROR;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONFOCUS;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONINPUT;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONLOAD;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONLOADEDDATA;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONLOADEDMETADATA;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONLOADSTART;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONPAUSE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONPLAY;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONPLAYING;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONPROGRESS;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONRATECHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONRESET;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSCROLL;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSEEKED;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSEEKING;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSELECT;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSTALLED;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSUBMIT;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONSUSPEND;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONTIMEUPDATE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONVOLUMECHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_ONWAITING;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_NORMALIZE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_IMPORTNODE;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_IE9_PARENTWINDOW;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_IE9_BODY;
    internal static UInt32 DISPID_IHTMLDOCUMENT7_HEAD;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSCONTENTZOOM;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERDOWN;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERMOVE;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERUP;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTEROVER;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTEROUT;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERCANCEL;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSPOINTERHOVER;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSGESTURESTART;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSGESTURECHANGE;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREEND;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREHOLD;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSGESTURETAP;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSGESTUREDOUBLETAP;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSINERTIASTART;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ELEMENTSFROMPOINT;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ELEMENTSFROMRECT;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_ONMSMANIPULATIONSTATECHANGED;
    internal static UInt32 DISPID_IHTMLDOCUMENT8_MSCAPSLOCKWARNINGOFF;
    internal static UInt32 DISPID_IDOCUMENTEVENT_CREATEEVENT;
    internal static UInt32 DISPID_IDOCUMENTRANGE_CREATERANGE;
    internal static UInt32 DISPID_IDOCUMENTSELECTOR_QUERYSELECTOR;
    internal static UInt32 DISPID_IDOCUMENTSELECTOR_QUERYSELECTORALL;
    internal static UInt32 DISPID_IDOCUMENTTRAVERSAL_CREATENODEITERATOR;
    internal static UInt32 DISPID_IDOCUMENTTRAVERSAL_CREATETREEWALKER;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS4_ONMSTHUMBNAILCLICK;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS4_ONMSSITEMODEJUMPLISTITEMREMOVED;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGECOMMIT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONHELP;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONCLICK;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOUT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOVER;
    internal static int DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREUPDATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONAFTERUPDATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONROWEXIT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONROWENTER;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONDRAGSTART;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONSELECTSTART;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONERRORUPDATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONSTOP;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONROWSDELETE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONROWSINSERTED;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONCELLCHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCHANGED;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONDATAAVAILABLE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONHELP;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONCLICK;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONKEYUP;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER;
    internal static int DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONROWENTER;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONSTOP;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONROWSDELETE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONROWSINSERTED;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONCELLCHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONPROPERTYCHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONDATASETCHANGED;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONDATAAVAILABLE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE;
    internal static UInt32 DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE;
    internal static UInt32 DISPID_IWEBBRIDGE_URL;
    internal static UInt32 DISPID_IWEBBRIDGE_SCROLLBAR;
    internal static UInt32 DISPID_IWEBBRIDGE_EMBED;
    internal static UInt32 DISPID_IWEBBRIDGE_EVENT;
    internal static int DISPID_IWEBBRIDGE_READYSTATE;
    internal static int DISPID_IWEBBRIDGE_ABOUTBOX;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_RAISEEVENT;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_FROZEN;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_SCROLLBAR;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_VERSION;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_VISIBILITY;
    internal static UInt32 DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE;
    internal static UInt32 DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONCLICK;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONKEYUP;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE;
    internal static int DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_HIDDEN;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_PALETTE;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_SRC;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_UNITS;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT2_IE8_SRC;
    internal static UInt32 DISPID_IHTMLEMBEDELEMENT2_IE8_PLUGINSPAGE;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLAREASCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION_TAGS;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION_ADD;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION_REMOVE;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION2_URNS;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION4_IE8_LENGTH;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION4_IE8_ITEM;
    internal static UInt32 DISPID_IHTMLAREASCOLLECTION4_IE8_NAMEDITEM;
    internal static UInt32 DISPID_IHTMLMAPELEMENT_AREAS;
    internal static UInt32 DISPID_IHTMLMAPELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_SHAPE;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_COORDS;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_HREF;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_TARGET;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_ALT;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_NOHREF;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_HOST;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_HOSTNAME;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_PATHNAME;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_PORT;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_PROTOCOL;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_SEARCH;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_HASH;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_ONBLUR;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_ONFOCUS;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_TABINDEX;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_FOCUS;
    internal static UInt32 DISPID_IHTMLAREAELEMENT_BLUR;
    internal static UInt32 DISPID_IHTMLAREAELEMENT2_IE8_SHAPE;
    internal static UInt32 DISPID_IHTMLAREAELEMENT2_IE8_COORDS;
    internal static UInt32 DISPID_IHTMLAREAELEMENT2_IE8_HREF;
    internal static UInt32 DISPID_IHTMLTABLECAPTION_ALIGN;
    internal static UInt32 DISPID_IHTMLTABLECAPTION_VALIGN;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT_TEXT;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT_ATOMIC;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_DATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_LENGTH;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT3_IE9_SUBSTRINGDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT3_IE9_INSERTDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT3_IE9_DELETEDATA;
    internal static UInt32 DISPID_IHTMLCOMMENTELEMENT3_IE9_REPLACEDATA;
    internal static UInt32 DISPID_IHTMLPHRASEELEMENT2_CITE;
    internal static UInt32 DISPID_IHTMLPHRASEELEMENT2_DATETIME;
    internal static UInt32 DISPID_IHTMLPHRASEELEMENT3_IE8_CITE;
    internal static UInt32 DISPID_IHTMLTABLE_COLS;
    internal static UInt32 DISPID_IHTMLTABLE_BORDER;
    internal static UInt32 DISPID_IHTMLTABLE_FRAME;
    internal static UInt32 DISPID_IHTMLTABLE_RULES;
    internal static UInt32 DISPID_IHTMLTABLE_CELLSPACING;
    internal static UInt32 DISPID_IHTMLTABLE_CELLPADDING;
    internal static UInt32 DISPID_IHTMLTABLE_BACKGROUND;
    internal static int DISPID_IHTMLTABLE_BGCOLOR;
    internal static UInt32 DISPID_IHTMLTABLE_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLTABLE_BORDERCOLORLIGHT;
    internal static UInt32 DISPID_IHTMLTABLE_BORDERCOLORDARK;
    internal static UInt32 DISPID_IHTMLTABLE_ALIGN;
    internal static UInt32 DISPID_IHTMLTABLE_REFRESH;
    internal static UInt32 DISPID_IHTMLTABLE_ROWS;
    internal static UInt32 DISPID_IHTMLTABLE_WIDTH;
    internal static UInt32 DISPID_IHTMLTABLE_HEIGHT;
    internal static UInt32 DISPID_IHTMLTABLE_DATAPAGESIZE;
    internal static UInt32 DISPID_IHTMLTABLE_NEXTPAGE;
    internal static UInt32 DISPID_IHTMLTABLE_PREVIOUSPAGE;
    internal static UInt32 DISPID_IHTMLTABLE_THEAD;
    internal static UInt32 DISPID_IHTMLTABLE_TFOOT;
    internal static UInt32 DISPID_IHTMLTABLE_TBODIES;
    internal static UInt32 DISPID_IHTMLTABLE_CAPTION;
    internal static UInt32 DISPID_IHTMLTABLE_CREATETHEAD;
    internal static UInt32 DISPID_IHTMLTABLE_DELETETHEAD;
    internal static UInt32 DISPID_IHTMLTABLE_CREATETFOOT;
    internal static UInt32 DISPID_IHTMLTABLE_DELETETFOOT;
    internal static UInt32 DISPID_IHTMLTABLE_CREATECAPTION;
    internal static UInt32 DISPID_IHTMLTABLE_DELETECAPTION;
    internal static UInt32 DISPID_IHTMLTABLE_INSERTROW;
    internal static UInt32 DISPID_IHTMLTABLE_DELETEROW;
    internal static UInt32 DISPID_IHTMLTABLE_READYSTATE;
    internal static UInt32 DISPID_IHTMLTABLE_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLTABLE2_FIRSTPAGE;
    internal static UInt32 DISPID_IHTMLTABLE2_LASTPAGE;
    internal static UInt32 DISPID_IHTMLTABLE2_CELLS;
    internal static UInt32 DISPID_IHTMLTABLE2_MOVEROW;
    internal static UInt32 DISPID_IHTMLTABLE3_SUMMARY;
    internal static UInt32 DISPID_IHTMLTABLE4_IE9_THEAD;
    internal static UInt32 DISPID_IHTMLTABLE4_IE9_TFOOT;
    internal static UInt32 DISPID_IHTMLTABLE4_IE9_CAPTION;
    internal static UInt32 DISPID_IHTMLTABLE4_IE9_INSERTROW;
    internal static UInt32 DISPID_IHTMLTABLE4_IE9_DELETEROW;
    internal static UInt32 DISPID_IHTMLTABLE4_CREATETBODY;
    internal static UInt32 DISPID_IHTMLTABLECOL_SPAN;
    internal static UInt32 DISPID_IHTMLTABLECOL_WIDTH;
    internal static UInt32 DISPID_IHTMLTABLECOL_ALIGN;
    internal static UInt32 DISPID_IHTMLTABLECOL_VALIGN;
    internal static UInt32 DISPID_IHTMLTABLECOL2_CH;
    internal static UInt32 DISPID_IHTMLTABLECOL2_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLECOL3_IE9_CH;
    internal static UInt32 DISPID_IHTMLTABLECOL3_IE9_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLESECTION_ALIGN;
    internal static UInt32 DISPID_IHTMLTABLESECTION_VALIGN;
    internal static int DISPID_IHTMLTABLESECTION_BGCOLOR;
    internal static UInt32 DISPID_IHTMLTABLESECTION_ROWS;
    internal static UInt32 DISPID_IHTMLTABLESECTION_INSERTROW;
    internal static UInt32 DISPID_IHTMLTABLESECTION_DELETEROW;
    internal static UInt32 DISPID_IHTMLTABLESECTION2_MOVEROW;
    internal static UInt32 DISPID_IHTMLTABLESECTION3_CH;
    internal static UInt32 DISPID_IHTMLTABLESECTION3_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLESECTION4_IE9_CH;
    internal static UInt32 DISPID_IHTMLTABLESECTION4_IE9_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLESECTION4_IE9_INSERTROW;
    internal static UInt32 DISPID_IHTMLTABLESECTION4_IE9_DELETEROW;
    internal static UInt32 DISPID_IHTMLTABLEROW_ALIGN;
    internal static UInt32 DISPID_IHTMLTABLEROW_VALIGN;
    internal static int DISPID_IHTMLTABLEROW_BGCOLOR;
    internal static UInt32 DISPID_IHTMLTABLEROW_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT;
    internal static UInt32 DISPID_IHTMLTABLEROW_BORDERCOLORDARK;
    internal static UInt32 DISPID_IHTMLTABLEROW_ROWINDEX;
    internal static UInt32 DISPID_IHTMLTABLEROW_SECTIONROWINDEX;
    internal static UInt32 DISPID_IHTMLTABLEROW_CELLS;
    internal static UInt32 DISPID_IHTMLTABLEROW_INSERTCELL;
    internal static UInt32 DISPID_IHTMLTABLEROW_DELETECELL;
    internal static UInt32 DISPID_IHTMLTABLEROW2_HEIGHT;
    internal static UInt32 DISPID_IHTMLTABLEROW3_CH;
    internal static UInt32 DISPID_IHTMLTABLEROW3_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLEROW4_IE9_CH;
    internal static UInt32 DISPID_IHTMLTABLEROW4_IE9_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLEROW4_IE9_INSERTCELL;
    internal static UInt32 DISPID_IHTMLTABLEROW4_IE9_DELETECELL;
    internal static UInt32 DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT;
    internal static UInt32 DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH;
    internal static UInt32 DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP;
    internal static UInt32 DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT;
    internal static UInt32 DISPID_IHTMLTABLECELL_ROWSPAN;
    internal static UInt32 DISPID_IHTMLTABLECELL_COLSPAN;
    internal static UInt32 DISPID_IHTMLTABLECELL_ALIGN;
    internal static UInt32 DISPID_IHTMLTABLECELL_VALIGN;
    internal static int DISPID_IHTMLTABLECELL_BGCOLOR;
    internal static UInt32 DISPID_IHTMLTABLECELL_NOWRAP;
    internal static UInt32 DISPID_IHTMLTABLECELL_BACKGROUND;
    internal static UInt32 DISPID_IHTMLTABLECELL_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT;
    internal static UInt32 DISPID_IHTMLTABLECELL_BORDERCOLORDARK;
    internal static UInt32 DISPID_IHTMLTABLECELL_WIDTH;
    internal static UInt32 DISPID_IHTMLTABLECELL_HEIGHT;
    internal static UInt32 DISPID_IHTMLTABLECELL_CELLINDEX;
    internal static UInt32 DISPID_IHTMLTABLECELL2_ABBR;
    internal static UInt32 DISPID_IHTMLTABLECELL2_AXIS;
    internal static UInt32 DISPID_IHTMLTABLECELL2_CH;
    internal static UInt32 DISPID_IHTMLTABLECELL2_CHOFF;
    internal static UInt32 DISPID_IHTMLTABLECELL2_HEADERS;
    internal static UInt32 DISPID_IHTMLTABLECELL2_SCOPE;
    internal static UInt32 DISPID_IHTMLTABLECELL3_IE9_CH;
    internal static UInt32 DISPID_IHTMLTABLECELL3_IE9_CHOFF;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_SRC;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_HTMLFOR;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_EVENT;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_TEXT;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_DEFER;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_READYSTATE;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_ONERROR;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT2_CHARSET;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT3_IE8_SRC;
    internal static UInt32 DISPID_IHTMLSCRIPTELEMENT4_USEDCHARSET;
    internal static UInt32 DISPID_HTMLSCRIPTEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLSCRIPTEVENTS_ONERROR;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_OBJECT;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_CLASSID;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_DATA;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_RECORDSET;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_CODEBASE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_CODETYPE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_CODE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_BASEHREF;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_FORM;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_READYSTATE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_ONERROR;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_ALTHTML;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_VSPACE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT_HSPACE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT2_NAMEDRECORDSET;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT2_CLASSID;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT2_DATA;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT3_ARCHIVE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT3_ALT;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT3_DECLARE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT3_STANDBY;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT3_BORDER;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT3_USEMAP;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT4_CONTENTDOCUMENT;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT4_IE8_CODEBASE;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT4_IE8_DATA;
    internal static UInt32 DISPID_IHTMLOBJECTELEMENT5_IE9_OBJECT;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT_VALUETYPE;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT2_NAME;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT2_TYPE;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT2_VALUE;
    internal static UInt32 DISPID_IHTMLPARAMELEMENT2_IE8_VALUETYPE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONBEFOREUPDATE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONAFTERUPDATE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONERRORUPDATE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWEXIT;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWENTER;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCHANGED;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATAAVAILABLE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSDELETE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSINSERTED;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONCELLCHANGE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS2_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSDELETE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSINSERTED;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONCELLCHANGE;
    internal static UInt32 DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_SRC;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_NAME;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_BORDER;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_FRAMEBORDER;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_FRAMESPACING;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_MARGINWIDTH;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_MARGINHEIGHT;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_NORESIZE;
    internal static UInt32 DISPID_IHTMLFRAMEBASE_SCROLLING;
    internal static UInt32 DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW;
    internal static UInt32 DISPID_IHTMLFRAMEBASE2_ONLOAD;
    internal static UInt32 DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLFRAMEBASE2_READYSTATE;
    internal static UInt32 DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY;
    internal static UInt32 DISPID_IHTMLFRAMEBASE3_LONGDESC;
    internal static UInt32 DISPID_HTMLFRAMESITEEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLFRAMESITEEVENTS_ONLOAD;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT2_HEIGHT;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT2_WIDTH;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT3_CONTENTDOCUMENT;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT3_IE8_SRC;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT3_IE8_LONGDESC;
    internal static UInt32 DISPID_IHTMLFRAMEELEMENT3_IE8_FRAMEBORDER;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT_VSPACE;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT_HSPACE;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT2_HEIGHT;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT2_WIDTH;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT3_CONTENTDOCUMENT;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT3_IE8_SRC;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT3_IE8_LONGDESC;
    internal static UInt32 DISPID_IHTMLIFRAMEELEMENT3_IE8_FRAMEBORDER;
    internal static UInt32 DISPID_IHTMLDIVPOSITION_ALIGN;
    internal static UInt32 DISPID_IHTMLFIELDSETELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLFIELDSETELEMENT2_FORM;
    internal static UInt32 DISPID_IHTMLLEGENDELEMENT_ALIGN;
    internal static UInt32 DISPID_IHTMLLEGENDELEMENT2_FORM;
    internal static UInt32 DISPID_IHTMLSPANFLOW_ALIGN;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_ROWS;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_COLS;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_BORDER;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_NAME;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_ONLOAD;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT2_ONBEFOREPRINT;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT2_ONAFTERPRINT;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT3_ONHASHCHANGE;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT3_ONMESSAGE;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT3_ONOFFLINE;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT3_ONONLINE;
    internal static UInt32 DISPID_IHTMLFRAMESETELEMENT3_ONSTORAGE;
    internal static UInt32 DISPID_IHTMLBGSOUND_SRC;
    internal static UInt32 DISPID_IHTMLBGSOUND_LOOP;
    internal static UInt32 DISPID_IHTMLBGSOUND_VOLUME;
    internal static UInt32 DISPID_IHTMLBGSOUND_BALANCE;
    internal static UInt32 DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLFONTNAMESCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT;
    internal static UInt32 DISPID_IHTMLFONTSIZESCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_DOCUMENT;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_FONTS;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_EXECARG;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ERRORLINE;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ERRORCODE;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_FINDTEXT;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_SIZES;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_GETCHARSET;
    internal static UInt32 DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_READYSTATE;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_ONLOAD;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_ONERROR;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_STYLESHEET;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_DISABLED;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT_MEDIA;
    internal static UInt32 DISPID_IHTMLSTYLEELEMENT2_SHEET;
    internal static UInt32 DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD;
    internal static UInt32 DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR;
    internal static UInt32 DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD;
    internal static UInt32 DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR;
    internal static UInt32 DISPID_IHTMLSTYLEFONTFACE_FONTSRC;
    internal static UInt32 DISPID_IHTMLSTYLEFONTFACE2_STYLE;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_RESPONSETEXT;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_TIMEOUT;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_CONTENTTYPE;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_ONPROGRESS;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_ONERROR;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_ONTIMEOUT;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_ONLOAD;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_ABORT;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_OPEN;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUEST_SEND;
    internal static UInt32 DISPID_IHTMLXDOMAINREQUESTFACTORY_CREATE;
    internal static UInt32 DISPID_IHTMLSTORAGE_LENGTH;
    internal static UInt32 DISPID_IHTMLSTORAGE_REMAININGSPACE;
    internal static UInt32 DISPID_IHTMLSTORAGE_KEY;
    internal static UInt32 DISPID_IHTMLSTORAGE_GETITEM;
    internal static UInt32 DISPID_IHTMLSTORAGE_SETITEM;
    internal static UInt32 DISPID_IHTMLSTORAGE_REMOVEITEM;
    internal static UInt32 DISPID_IHTMLSTORAGE_CLEAR;
    internal static UInt32 DISPID_IHTMLSTORAGE2_IE9_SETITEM;
    internal static UInt32 DISPID_IEVENTTARGET_ADDEVENTLISTENER;
    internal static UInt32 DISPID_IEVENTTARGET_REMOVEEVENTLISTENER;
    internal static UInt32 DISPID_IEVENTTARGET_DISPATCHEVENT;
    internal static UInt32 DISPID_IDOMEVENT_BUBBLES;
    internal static UInt32 DISPID_IDOMEVENT_CANCELABLE;
    internal static UInt32 DISPID_IDOMEVENT_CURRENTTARGET;
    internal static UInt32 DISPID_IDOMEVENT_DEFAULTPREVENTED;
    internal static UInt32 DISPID_IDOMEVENT_EVENTPHASE;
    internal static UInt32 DISPID_IDOMEVENT_TARGET;
    internal static UInt32 DISPID_IDOMEVENT_TIMESTAMP;
    internal static UInt32 DISPID_IDOMEVENT_TYPE;
    internal static UInt32 DISPID_IDOMEVENT_INITEVENT;
    internal static UInt32 DISPID_IDOMEVENT_PREVENTDEFAULT;
    internal static UInt32 DISPID_IDOMEVENT_STOPPROPAGATION;
    internal static UInt32 DISPID_IDOMEVENT_STOPIMMEDIATEPROPAGATION;
    internal static UInt32 DISPID_IDOMEVENT_ISTRUSTED;
    internal static UInt32 DISPID_IDOMEVENT_CANCELBUBBLE;
    internal static UInt32 DISPID_IDOMEVENT_SRCELEMENT;
    internal static UInt32 DISPID_IDOMUIEVENT_VIEW;
    internal static UInt32 DISPID_IDOMUIEVENT_DETAIL;
    internal static UInt32 DISPID_IDOMUIEVENT_INITUIEVENT;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_SCREENX;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_SCREENY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_CLIENTX;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_CLIENTY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_CTRLKEY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_SHIFTKEY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_ALTKEY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_METAKEY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_BUTTON;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_RELATEDTARGET;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_INITMOUSEEVENT;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_GETMODIFIERSTATE;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_BUTTONS;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_FROMELEMENT;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_TOELEMENT;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_X;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_Y;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_OFFSETX;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_OFFSETY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_PAGEX;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_PAGEY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_LAYERX;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_LAYERY;
    internal static UInt32 DISPID_IDOMMOUSEEVENT_WHICH;
    internal static UInt32 DISPID_IDOMDRAGEVENT_DATATRANSFER;
    internal static UInt32 DISPID_IDOMDRAGEVENT_INITDRAGEVENT;
    internal static UInt32 DISPID_IDOMMOUSEWHEELEVENT_WHEELDELTA;
    internal static UInt32 DISPID_IDOMMOUSEWHEELEVENT_INITMOUSEWHEELEVENT;
    internal static UInt32 DISPID_IDOMWHEELEVENT_DELTAX;
    internal static UInt32 DISPID_IDOMWHEELEVENT_DELTAY;
    internal static UInt32 DISPID_IDOMWHEELEVENT_DELTAZ;
    internal static UInt32 DISPID_IDOMWHEELEVENT_DELTAMODE;
    internal static UInt32 DISPID_IDOMWHEELEVENT_INITWHEELEVENT;
    internal static UInt32 DISPID_IDOMTEXTEVENT_DATA;
    internal static UInt32 DISPID_IDOMTEXTEVENT_INPUTMETHOD;
    internal static UInt32 DISPID_IDOMTEXTEVENT_INITTEXTEVENT;
    internal static UInt32 DISPID_IDOMTEXTEVENT_LOCALE;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_KEY;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_LOCATION;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_CTRLKEY;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_SHIFTKEY;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_ALTKEY;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_METAKEY;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_REPEAT;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_GETMODIFIERSTATE;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_INITKEYBOARDEVENT;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_KEYCODE;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_CHARCODE;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_WHICH;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_IE9_CHAR;
    internal static UInt32 DISPID_IDOMKEYBOARDEVENT_LOCALE;
    internal static UInt32 DISPID_IDOMCOMPOSITIONEVENT_DATA;
    internal static UInt32 DISPID_IDOMCOMPOSITIONEVENT_INITCOMPOSITIONEVENT;
    internal static UInt32 DISPID_IDOMCOMPOSITIONEVENT_LOCALE;
    internal static UInt32 DISPID_IDOMMUTATIONEVENT_RELATEDNODE;
    internal static UInt32 DISPID_IDOMMUTATIONEVENT_PREVVALUE;
    internal static UInt32 DISPID_IDOMMUTATIONEVENT_NEWVALUE;
    internal static UInt32 DISPID_IDOMMUTATIONEVENT_ATTRNAME;
    internal static UInt32 DISPID_IDOMMUTATIONEVENT_ATTRCHANGE;
    internal static UInt32 DISPID_IDOMMUTATIONEVENT_INITMUTATIONEVENT;
    internal static UInt32 DISPID_IDOMBEFOREUNLOADEVENT_RETURNVALUE;
    internal static UInt32 DISPID_IDOMFOCUSEVENT_RELATEDTARGET;
    internal static UInt32 DISPID_IDOMFOCUSEVENT_INITFOCUSEVENT;
    internal static UInt32 DISPID_IDOMCUSTOMEVENT_DETAIL;
    internal static UInt32 DISPID_IDOMCUSTOMEVENT_INITCUSTOMEVENT;
    internal static UInt32 DISPID_ICANVASGRADIENT_ADDCOLORSTOP;
    internal static UInt32 DISPID_ICANVASTEXTMETRICS_WIDTH;
    internal static UInt32 DISPID_ICANVASIMAGEDATA_WIDTH;
    internal static UInt32 DISPID_ICANVASIMAGEDATA_HEIGHT;
    internal static UInt32 DISPID_ICANVASIMAGEDATA_DATA;
    internal static UInt32 DISPID_ICANVASPIXELARRAY_LENGTH;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CANVAS;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_RESTORE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SAVE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_ROTATE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SCALE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SETTRANSFORM;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_TRANSFORM;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_TRANSLATE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALALPHA;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALCOMPOSITEOPERATION;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLSTYLE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKESTYLE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATELINEARGRADIENT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATERADIALGRADIENT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATEPATTERN;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_LINECAP;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_LINEJOIN;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_LINEWIDTH;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_MITERLIMIT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWBLUR;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWCOLOR;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETX;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETY;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CLEARRECT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLRECT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKERECT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_ARC;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_ARCTO;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_BEGINPATH;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_BEZIERCURVETO;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CLIP;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CLOSEPATH;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_FILL;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_LINETO;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_MOVETO;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_QUADRATICCURVETO;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_RECT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_ISPOINTINPATH;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_FONT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_TEXTALIGN;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_TEXTBASELINE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_FILLTEXT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_MEASURETEXT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_STROKETEXT;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_DRAWIMAGE;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_CREATEIMAGEDATA;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_GETIMAGEDATA;
    internal static UInt32 DISPID_ICANVASRENDERINGCONTEXT2D_PUTIMAGEDATA;
    internal static UInt32 DISPID_IHTMLCANVASELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLCANVASELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLCANVASELEMENT_GETCONTEXT;
    internal static UInt32 DISPID_IHTMLCANVASELEMENT_TODATAURL;
    internal static UInt32 DISPID_IDOMPROGRESSEVENT_LENGTHCOMPUTABLE;
    internal static UInt32 DISPID_IDOMPROGRESSEVENT_LOADED;
    internal static UInt32 DISPID_IDOMPROGRESSEVENT_TOTAL;
    internal static UInt32 DISPID_IDOMPROGRESSEVENT_INITPROGRESSEVENT;
    internal static UInt32 DISPID_IDOMMESSAGEEVENT_DATA;
    internal static UInt32 DISPID_IDOMMESSAGEEVENT_ORIGIN;
    internal static UInt32 DISPID_IDOMMESSAGEEVENT_SOURCE;
    internal static UInt32 DISPID_IDOMMESSAGEEVENT_INITMESSAGEEVENT;
    internal static UInt32 DISPID_IDOMSITEMODEEVENT_BUTTONID;
    internal static UInt32 DISPID_IDOMSITEMODEEVENT_ACTIONURL;
    internal static UInt32 DISPID_IDOMSTORAGEEVENT_KEY;
    internal static UInt32 DISPID_IDOMSTORAGEEVENT_OLDVALUE;
    internal static UInt32 DISPID_IDOMSTORAGEEVENT_NEWVALUE;
    internal static UInt32 DISPID_IDOMSTORAGEEVENT_URL;
    internal static UInt32 DISPID_IDOMSTORAGEEVENT_STORAGEAREA;
    internal static UInt32 DISPID_IDOMSTORAGEEVENT_INITSTORAGEEVENT;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_READYSTATE;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSEBODY;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSETEXT;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_RESPONSEXML;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_STATUS;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_STATUSTEXT;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_ABORT;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_OPEN;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_SEND;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_GETALLRESPONSEHEADERS;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_GETRESPONSEHEADER;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST_SETREQUESTHEADER;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST2_TIMEOUT;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUEST2_ONTIMEOUT;
    internal static UInt32 DISPID_IHTMLXMLHTTPREQUESTFACTORY_CREATE;
    internal static UInt32 DISPID_HTMLXMLHTTPREQUESTEVENTS_ONTIMEOUT;
    internal static UInt32 DISPID_HTMLXMLHTTPREQUESTEVENTS_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_ISVGANGLE_UNITTYPE;
    internal static UInt32 DISPID_ISVGANGLE_VALUE;
    internal static UInt32 DISPID_ISVGANGLE_VALUEINSPECIFIEDUNITS;
    internal static UInt32 DISPID_ISVGANGLE_VALUEASSTRING;
    internal static UInt32 DISPID_ISVGANGLE_NEWVALUESPECIFIEDUNITS;
    internal static UInt32 DISPID_ISVGANGLE_CONVERTTOSPECIFIEDUNITS;
    internal static UInt32 DISPID_ISVGSTYLABLE_CLASSNAME;
    internal static UInt32 DISPID_ISVGLOCATABLE_NEARESTVIEWPORTELEMENT;
    internal static UInt32 DISPID_ISVGLOCATABLE_FARTHESTVIEWPORTELEMENT;
    internal static UInt32 DISPID_ISVGLOCATABLE_GETBBOX;
    internal static UInt32 DISPID_ISVGLOCATABLE_GETCTM;
    internal static UInt32 DISPID_ISVGLOCATABLE_GETSCREENCTM;
    internal static UInt32 DISPID_ISVGLOCATABLE_GETTRANSFORMTOELEMENT;
    internal static UInt32 DISPID_ISVGTRANSFORMABLE_TRANSFORM;
    internal static UInt32 DISPID_ISVGTESTS_REQUIREDFEATURES;
    internal static UInt32 DISPID_ISVGTESTS_REQUIREDEXTENSIONS;
    internal static UInt32 DISPID_ISVGTESTS_SYSTEMLANGUAGE;
    internal static UInt32 DISPID_ISVGTESTS_HASEXTENSION;
    internal static UInt32 DISPID_ISVGLANGSPACE_XMLLANG;
    internal static UInt32 DISPID_ISVGLANGSPACE_XMLSPACE;
    internal static UInt32 DISPID_ISVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED;
    internal static UInt32 DISPID_ISVGFITTOVIEWBOX_VIEWBOX;
    internal static UInt32 DISPID_ISVGFITTOVIEWBOX_PRESERVEASPECTRATIO;
    internal static UInt32 DISPID_ISVGZOOMANDPAN_ZOOMANDPAN;
    internal static UInt32 DISPID_ISVGURIREFERENCE_HREF;
    internal static UInt32 DISPID_ISVGANIMATEDANGLE_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDANGLE_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDTRANSFORMLIST_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDTRANSFORMLIST_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDBOOLEAN_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDBOOLEAN_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDENUMERATION_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDENUMERATION_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDINTEGER_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDINTEGER_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDLENGTH_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDLENGTH_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDLENGTHLIST_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDLENGTHLIST_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDNUMBER_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDNUMBER_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDNUMBERLIST_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDNUMBERLIST_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDRECT_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDRECT_ANIMVAL;
    internal static UInt32 DISPID_ISVGANIMATEDSTRING_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDSTRING_ANIMVAL;
    internal static UInt32 DISPID_ISVGCLIPPATHELEMENT_CLIPPATHUNITS;
    internal static UInt32 DISPID_ISVGDOCUMENT_ROOTELEMENT;
    internal static UInt32 DISPID_IGETSVGDOCUMENT_GETSVGDOCUMENT;
    internal static UInt32 DISPID_ISVGELEMENT_XMLBASE;
    internal static UInt32 DISPID_ISVGELEMENT_OWNERSVGELEMENT;
    internal static UInt32 DISPID_ISVGELEMENT_VIEWPORTELEMENT;
    internal static UInt32 DISPID_ISVGELEMENT_FOCUSABLE;
    internal static UInt32 DISPID_ISVGLENGTH_UNITTYPE;
    internal static UInt32 DISPID_ISVGLENGTH_VALUE;
    internal static UInt32 DISPID_ISVGLENGTH_VALUEINSPECIFIEDUNITS;
    internal static UInt32 DISPID_ISVGLENGTH_VALUEASSTRING;
    internal static UInt32 DISPID_ISVGLENGTH_NEWVALUESPECIFIEDUNITS;
    internal static UInt32 DISPID_ISVGLENGTH_CONVERTTOSPECIFIEDUNITS;
    internal static UInt32 DISPID_ISVGLENGTHLIST_NUMBEROFITEMS;
    internal static UInt32 DISPID_ISVGLENGTHLIST_CLEAR;
    internal static UInt32 DISPID_ISVGLENGTHLIST_INITIALIZE;
    internal static UInt32 DISPID_ISVGLENGTHLIST_GETITEM;
    internal static UInt32 DISPID_ISVGLENGTHLIST_INSERTITEMBEFORE;
    internal static UInt32 DISPID_ISVGLENGTHLIST_REPLACEITEM;
    internal static UInt32 DISPID_ISVGLENGTHLIST_REMOVEITEM;
    internal static UInt32 DISPID_ISVGLENGTHLIST_APPENDITEM;
    internal static UInt32 DISPID_ISVGMATRIX_A;
    internal static UInt32 DISPID_ISVGMATRIX_B;
    internal static UInt32 DISPID_ISVGMATRIX_C;
    internal static UInt32 DISPID_ISVGMATRIX_D;
    internal static UInt32 DISPID_ISVGMATRIX_E;
    internal static UInt32 DISPID_ISVGMATRIX_F;
    internal static UInt32 DISPID_ISVGMATRIX_MULTIPLY;
    internal static UInt32 DISPID_ISVGMATRIX_INVERSE;
    internal static UInt32 DISPID_ISVGMATRIX_TRANSLATE;
    internal static UInt32 DISPID_ISVGMATRIX_SCALE;
    internal static UInt32 DISPID_ISVGMATRIX_SCALENONUNIFORM;
    internal static UInt32 DISPID_ISVGMATRIX_ROTATE;
    internal static UInt32 DISPID_ISVGMATRIX_ROTATEFROMVECTOR;
    internal static UInt32 DISPID_ISVGMATRIX_FLIPX;
    internal static UInt32 DISPID_ISVGMATRIX_FLIPY;
    internal static UInt32 DISPID_ISVGMATRIX_SKEWX;
    internal static UInt32 DISPID_ISVGMATRIX_SKEWY;
    internal static UInt32 DISPID_ISVGNUMBER_VALUE;
    internal static UInt32 DISPID_ISVGNUMBERLIST_NUMBEROFITEMS;
    internal static UInt32 DISPID_ISVGNUMBERLIST_CLEAR;
    internal static UInt32 DISPID_ISVGNUMBERLIST_INITIALIZE;
    internal static UInt32 DISPID_ISVGNUMBERLIST_GETITEM;
    internal static UInt32 DISPID_ISVGNUMBERLIST_INSERTITEMBEFORE;
    internal static UInt32 DISPID_ISVGNUMBERLIST_REPLACEITEM;
    internal static UInt32 DISPID_ISVGNUMBERLIST_REMOVEITEM;
    internal static UInt32 DISPID_ISVGNUMBERLIST_APPENDITEM;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_PATTERNUNITS;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_PATTERNCONTENTUNITS;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_PATTERNTRANSFORM;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_X;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_Y;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_WIDTH;
    internal static UInt32 DISPID_ISVGPATTERNELEMENT_HEIGHT;
    internal static UInt32 DISPID_ISVGPATHSEG_PATHSEGTYPE;
    internal static UInt32 DISPID_ISVGPATHSEG_PATHSEGTYPEASLETTER;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_R1;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_R2;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_ANGLE;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_LARGEARCFLAG;
    internal static UInt32 DISPID_ISVGPATHSEGARCABS_SWEEPFLAG;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_R1;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_R2;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_ANGLE;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_LARGEARCFLAG;
    internal static UInt32 DISPID_ISVGPATHSEGARCREL_SWEEPFLAG;
    internal static UInt32 DISPID_ISVGPATHSEGMOVETOABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGMOVETOABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGMOVETOREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGMOVETOREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICABS_X2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICABS_Y2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICREL_X2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICREL_Y2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y2;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y1;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOHORIZONTALABS_X;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOHORIZONTALREL_X;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOVERTICALABS_Y;
    internal static UInt32 DISPID_ISVGPATHSEGLINETOVERTICALREL_Y;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_NUMBEROFITEMS;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_CLEAR;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_INITIALIZE;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_GETITEM;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_INSERTITEMBEFORE;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_REPLACEITEM;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_REMOVEITEM;
    internal static UInt32 DISPID_ISVGPATHSEGLIST_APPENDITEM;
    internal static UInt32 DISPID_ISVGPOINT_X;
    internal static UInt32 DISPID_ISVGPOINT_Y;
    internal static UInt32 DISPID_ISVGPOINT_MATRIXTRANSFORM;
    internal static UInt32 DISPID_ISVGPOINTLIST_NUMBEROFITEMS;
    internal static UInt32 DISPID_ISVGPOINTLIST_CLEAR;
    internal static UInt32 DISPID_ISVGPOINTLIST_INITIALIZE;
    internal static UInt32 DISPID_ISVGPOINTLIST_GETITEM;
    internal static UInt32 DISPID_ISVGPOINTLIST_INSERTITEMBEFORE;
    internal static UInt32 DISPID_ISVGPOINTLIST_REPLACEITEM;
    internal static UInt32 DISPID_ISVGPOINTLIST_REMOVEITEM;
    internal static UInt32 DISPID_ISVGPOINTLIST_APPENDITEM;
    internal static UInt32 DISPID_ISVGRECT_X;
    internal static UInt32 DISPID_ISVGRECT_Y;
    internal static UInt32 DISPID_ISVGRECT_WIDTH;
    internal static UInt32 DISPID_ISVGRECT_HEIGHT;
    internal static UInt32 DISPID_ISVGSTRINGLIST_NUMBEROFITEMS;
    internal static UInt32 DISPID_ISVGSTRINGLIST_CLEAR;
    internal static UInt32 DISPID_ISVGSTRINGLIST_INITIALIZE;
    internal static UInt32 DISPID_ISVGSTRINGLIST_GETITEM;
    internal static UInt32 DISPID_ISVGSTRINGLIST_INSERTITEMBEFORE;
    internal static UInt32 DISPID_ISVGSTRINGLIST_REPLACEITEM;
    internal static UInt32 DISPID_ISVGSTRINGLIST_REMOVEITEM;
    internal static UInt32 DISPID_ISVGSTRINGLIST_APPENDITEM;
    internal static UInt32 DISPID_ISVGTRANSFORM_TYPE;
    internal static UInt32 DISPID_ISVGTRANSFORM_MATRIX;
    internal static UInt32 DISPID_ISVGTRANSFORM_ANGLE;
    internal static UInt32 DISPID_ISVGTRANSFORM_SETMATRIX;
    internal static UInt32 DISPID_ISVGTRANSFORM_SETTRANSLATE;
    internal static UInt32 DISPID_ISVGTRANSFORM_SETSCALE;
    internal static UInt32 DISPID_ISVGTRANSFORM_SETROTATE;
    internal static UInt32 DISPID_ISVGTRANSFORM_SETSKEWX;
    internal static UInt32 DISPID_ISVGTRANSFORM_SETSKEWY;
    internal static UInt32 DISPID_ISVGSVGELEMENT_X;
    internal static UInt32 DISPID_ISVGSVGELEMENT_Y;
    internal static UInt32 DISPID_ISVGSVGELEMENT_WIDTH;
    internal static UInt32 DISPID_ISVGSVGELEMENT_HEIGHT;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CONTENTSCRIPTTYPE;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CONTENTSTYLETYPE;
    internal static UInt32 DISPID_ISVGSVGELEMENT_VIEWPORT;
    internal static UInt32 DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERX;
    internal static UInt32 DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERY;
    internal static UInt32 DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERX;
    internal static UInt32 DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERY;
    internal static UInt32 DISPID_ISVGSVGELEMENT_USECURRENTVIEW;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CURRENTVIEW;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CURRENTSCALE;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CURRENTTRANSLATE;
    internal static UInt32 DISPID_ISVGSVGELEMENT_SUSPENDREDRAW;
    internal static UInt32 DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAW;
    internal static UInt32 DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAWALL;
    internal static UInt32 DISPID_ISVGSVGELEMENT_FORCEREDRAW;
    internal static UInt32 DISPID_ISVGSVGELEMENT_PAUSEANIMATIONS;
    internal static UInt32 DISPID_ISVGSVGELEMENT_UNPAUSEANIMATIONS;
    internal static UInt32 DISPID_ISVGSVGELEMENT_ANIMATIONSPAUSED;
    internal static UInt32 DISPID_ISVGSVGELEMENT_GETCURRENTTIME;
    internal static UInt32 DISPID_ISVGSVGELEMENT_SETCURRENTTIME;
    internal static UInt32 DISPID_ISVGSVGELEMENT_GETINTERSECTIONLIST;
    internal static UInt32 DISPID_ISVGSVGELEMENT_GETENCLOSURELIST;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CHECKINTERSECTION;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CHECKENCLOSURE;
    internal static UInt32 DISPID_ISVGSVGELEMENT_DESELECTALL;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGNUMBER;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGLENGTH;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGANGLE;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGPOINT;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGMATRIX;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGRECT;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORM;
    internal static UInt32 DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORMFROMMATRIX;
    internal static UInt32 DISPID_ISVGSVGELEMENT_GETELEMENTBYID;
    internal static UInt32 DISPID_ISVGUSEELEMENT_X;
    internal static UInt32 DISPID_ISVGUSEELEMENT_Y;
    internal static UInt32 DISPID_ISVGUSEELEMENT_WIDTH;
    internal static UInt32 DISPID_ISVGUSEELEMENT_HEIGHT;
    internal static UInt32 DISPID_ISVGUSEELEMENT_INSTANCEROOT;
    internal static UInt32 DISPID_ISVGUSEELEMENT_ANIMATEDINSTANCEROOT;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDBY;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACE;
    internal static UInt32 DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACELENGTH;
    internal static UInt32 DISPID_IRULESAPPLIED_ELEMENT;
    internal static UInt32 DISPID_IRULESAPPLIED_INLINESTYLES;
    internal static UInt32 DISPID_IRULESAPPLIED_APPLIEDRULES;
    internal static UInt32 DISPID_IRULESAPPLIED_PROPERTYISINLINE;
    internal static UInt32 DISPID_IRULESAPPLIED_PROPERTYISINHERITABLE;
    internal static UInt32 DISPID_IRULESAPPLIED_HASINHERITABLEPROPERTY;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_ITEM;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_LENGTH;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_ELEMENT;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDFROM;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYCOUNT;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTY;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACE;
    internal static UInt32 DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACELENGTH;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_NUMBEROFITEMS;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_CLEAR;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_INITIALIZE;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_GETITEM;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_INSERTITEMBEFORE;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_REPLACEITEM;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_REMOVEITEM;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_APPENDITEM;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_CREATESVGTRANSFORMFROMMATRIX;
    internal static UInt32 DISPID_ISVGTRANSFORMLIST_CONSOLIDATE;
    internal static UInt32 DISPID_ISVGANIMATEDPOINTS_POINTS;
    internal static UInt32 DISPID_ISVGANIMATEDPOINTS_ANIMATEDPOINTS;
    internal static UInt32 DISPID_ISVGCIRCLEELEMENT_CX;
    internal static UInt32 DISPID_ISVGCIRCLEELEMENT_CY;
    internal static UInt32 DISPID_ISVGCIRCLEELEMENT_R;
    internal static UInt32 DISPID_ISVGELLIPSEELEMENT_CX;
    internal static UInt32 DISPID_ISVGELLIPSEELEMENT_CY;
    internal static UInt32 DISPID_ISVGELLIPSEELEMENT_RX;
    internal static UInt32 DISPID_ISVGELLIPSEELEMENT_RY;
    internal static UInt32 DISPID_ISVGLINEELEMENT_X1;
    internal static UInt32 DISPID_ISVGLINEELEMENT_Y1;
    internal static UInt32 DISPID_ISVGLINEELEMENT_X2;
    internal static UInt32 DISPID_ISVGLINEELEMENT_Y2;
    internal static UInt32 DISPID_ISVGRECTELEMENT_X;
    internal static UInt32 DISPID_ISVGRECTELEMENT_Y;
    internal static UInt32 DISPID_ISVGRECTELEMENT_WIDTH;
    internal static UInt32 DISPID_ISVGRECTELEMENT_HEIGHT;
    internal static UInt32 DISPID_ISVGRECTELEMENT_RX;
    internal static UInt32 DISPID_ISVGRECTELEMENT_RY;
    internal static UInt32 DISPID_ISVGANIMATEDPATHDATA_PATHSEGLIST;
    internal static UInt32 DISPID_ISVGANIMATEDPATHDATA_NORMALIZEDPATHSEGLIST;
    internal static UInt32 DISPID_ISVGANIMATEDPATHDATA_ANIMATEDPATHSEGLIST;
    internal static UInt32 DISPID_ISVGANIMATEDPATHDATA_ANIMATEDNORMALIZEDPATHSEGLIST;
    internal static UInt32 DISPID_ISVGPATHELEMENT_PATHLENGTH;
    internal static UInt32 DISPID_ISVGPATHELEMENT_GETTOTALLENGTH;
    internal static UInt32 DISPID_ISVGPATHELEMENT_GETPOINTATLENGTH;
    internal static UInt32 DISPID_ISVGPATHELEMENT_GETPATHSEGATLENGTH;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCLOSEPATH;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHREL;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHABS;
    internal static UInt32 DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHREL;
    internal static UInt32 DISPID_ISVGPRESERVEASPECTRATIO_ALIGN;
    internal static UInt32 DISPID_ISVGPRESERVEASPECTRATIO_MEETORSLICE;
    internal static UInt32 DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_BASEVAL;
    internal static UInt32 DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_ANIMVAL;
    internal static UInt32 DISPID_ISVGIMAGEELEMENT_X;
    internal static UInt32 DISPID_ISVGIMAGEELEMENT_Y;
    internal static UInt32 DISPID_ISVGIMAGEELEMENT_WIDTH;
    internal static UInt32 DISPID_ISVGIMAGEELEMENT_HEIGHT;
    internal static UInt32 DISPID_ISVGSTOPELEMENT_OFFSET;
    internal static UInt32 DISPID_ISVGGRADIENTELEMENT_GRADIENTUNITS;
    internal static UInt32 DISPID_ISVGGRADIENTELEMENT_GRADIENTTRANSFORM;
    internal static UInt32 DISPID_ISVGGRADIENTELEMENT_SPREADMETHOD;
    internal static UInt32 DISPID_ISVGLINEARGRADIENTELEMENT_X1;
    internal static UInt32 DISPID_ISVGLINEARGRADIENTELEMENT_Y1;
    internal static UInt32 DISPID_ISVGLINEARGRADIENTELEMENT_X2;
    internal static UInt32 DISPID_ISVGLINEARGRADIENTELEMENT_Y2;
    internal static UInt32 DISPID_ISVGRADIALGRADIENTELEMENT_CX;
    internal static UInt32 DISPID_ISVGRADIALGRADIENTELEMENT_CY;
    internal static UInt32 DISPID_ISVGRADIALGRADIENTELEMENT_R;
    internal static UInt32 DISPID_ISVGRADIALGRADIENTELEMENT_FX;
    internal static UInt32 DISPID_ISVGRADIALGRADIENTELEMENT_FY;
    internal static UInt32 DISPID_ISVGMASKELEMENT_MASKUNITS;
    internal static UInt32 DISPID_ISVGMASKELEMENT_MASKCONTENTUNITS;
    internal static UInt32 DISPID_ISVGMASKELEMENT_X;
    internal static UInt32 DISPID_ISVGMASKELEMENT_Y;
    internal static UInt32 DISPID_ISVGMASKELEMENT_WIDTH;
    internal static UInt32 DISPID_ISVGMASKELEMENT_HEIGHT;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_REFX;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_REFY;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_MARKERUNITS;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_MARKERWIDTH;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_MARKERHEIGHT;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_ORIENTTYPE;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_ORIENTANGLE;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_SETORIENTTOAUTO;
    internal static UInt32 DISPID_ISVGMARKERELEMENT_SETORIENTTOANGLE;
    internal static UInt32 DISPID_ISVGZOOMEVENT_ZOOMRECTSCREEN;
    internal static UInt32 DISPID_ISVGZOOMEVENT_PREVIOUSSCALE;
    internal static UInt32 DISPID_ISVGZOOMEVENT_PREVIOUSTRANSLATE;
    internal static UInt32 DISPID_ISVGZOOMEVENT_NEWSCALE;
    internal static UInt32 DISPID_ISVGZOOMEVENT_NEWTRANSLATE;
    internal static UInt32 DISPID_ISVGAELEMENT_TARGET;
    internal static UInt32 DISPID_ISVGVIEWELEMENT_VIEWTARGET;
    internal static UInt32 DISPID_IHTMLMEDIAERROR_CODE;
    internal static UInt32 DISPID_IHTMLTIMERANGES_LENGTH;
    internal static UInt32 DISPID_IHTMLTIMERANGES_START;
    internal static UInt32 DISPID_IHTMLTIMERANGES_END;
    internal static UInt32 DISPID_IHTMLTIMERANGES2_STARTDOUBLE;
    internal static UInt32 DISPID_IHTMLTIMERANGES2_ENDDOUBLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_ERROR;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_SRC;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_CURRENTSRC;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_NETWORKSTATE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_PRELOAD;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_BUFFERED;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_LOAD;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_CANPLAYTYPE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_SEEKING;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_CURRENTTIME;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_INITIALTIME;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_DURATION;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_PAUSED;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_DEFAULTPLAYBACKRATE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_PLAYBACKRATE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_PLAYED;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_SEEKABLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_ENDED;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_AUTOPLAY;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_LOOP;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_PLAY;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_PAUSE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_CONTROLS;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_VOLUME;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_MUTED;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT_AUTOBUFFER;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT2_CURRENTTIMEDOUBLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT2_INITIALTIMEDOUBLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT2_DURATIONDOUBLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT2_DEFAULTPLAYBACKRATEDOUBLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT2_PLAYBACKRATEDOUBLE;
    internal static UInt32 DISPID_IHTMLMEDIAELEMENT2_VOLUMEDOUBLE;
    internal static UInt32 DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTODISABLED;
    internal static UInt32 DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTOPRIMARY;
    internal static UInt32 DISPID_IHTMLSOURCEELEMENT_SRC;
    internal static UInt32 DISPID_IHTMLSOURCEELEMENT_TYPE;
    internal static UInt32 DISPID_IHTMLSOURCEELEMENT_MEDIA;
    internal static UInt32 DISPID_IHTMLVIDEOELEMENT_WIDTH;
    internal static UInt32 DISPID_IHTMLVIDEOELEMENT_HEIGHT;
    internal static UInt32 DISPID_IHTMLVIDEOELEMENT_VIDEOWIDTH;
    internal static UInt32 DISPID_IHTMLVIDEOELEMENT_VIDEOHEIGHT;
    internal static UInt32 DISPID_IHTMLVIDEOELEMENT_POSTER;
    internal static UInt32 DISPID_IHTMLAUDIOELEMENTFACTORY_CREATE;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGELEMENT;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGUSEELEMENT;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_PARENTNODE;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_CHILDNODES;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_FIRSTCHILD;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_LASTCHILD;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_PREVIOUSSIBLING;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCE_NEXTSIBLING;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCELIST_LENGTH;
    internal static UInt32 DISPID_ISVGELEMENTINSTANCELIST_ITEM;
    internal static UInt32 DISPID_IDOMEXCEPTION_CODE;
    internal static UInt32 DISPID_IDOMEXCEPTION_MESSAGE;
    internal static UInt32 DISPID_IRANGEEXCEPTION_CODE;
    internal static UInt32 DISPID_IRANGEEXCEPTION_MESSAGE;
    internal static UInt32 DISPID_ISVGEXCEPTION_CODE;
    internal static UInt32 DISPID_ISVGEXCEPTION_MESSAGE;
    internal static UInt32 DISPID_IEVENTEXCEPTION_CODE;
    internal static UInt32 DISPID_IEVENTEXCEPTION_MESSAGE;
    internal static UInt32 DISPID_ISVGSCRIPTELEMENT_TYPE;
    internal static UInt32 DISPID_ISVGSTYLEELEMENT_TYPE;
    internal static UInt32 DISPID_ISVGSTYLEELEMENT_MEDIA;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_TEXTLENGTH;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_LENGTHADJUST;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETNUMBEROFCHARS;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETCOMPUTEDTEXTLENGTH;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETSUBSTRINGLENGTH;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETSTARTPOSITIONOFCHAR;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETENDPOSITIONOFCHAR;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETEXTENTOFCHAR;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETROTATIONOFCHAR;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_GETCHARNUMATPOSITION;
    internal static UInt32 DISPID_ISVGTEXTCONTENTELEMENT_SELECTSUBSTRING;
    internal static UInt32 DISPID_ISVGTEXTPOSITIONINGELEMENT_X;
    internal static UInt32 DISPID_ISVGTEXTPOSITIONINGELEMENT_Y;
    internal static UInt32 DISPID_ISVGTEXTPOSITIONINGELEMENT_DX;
    internal static UInt32 DISPID_ISVGTEXTPOSITIONINGELEMENT_DY;
    internal static UInt32 DISPID_ISVGTEXTPOSITIONINGELEMENT_ROTATE;
    internal static UInt32 DISPID_IDOMDOCUMENTTYPE_NAME;
    internal static UInt32 DISPID_IDOMDOCUMENTTYPE_ENTITIES;
    internal static UInt32 DISPID_IDOMDOCUMENTTYPE_NOTATIONS;
    internal static UInt32 DISPID_IDOMDOCUMENTTYPE_PUBLICID;
    internal static UInt32 DISPID_IDOMDOCUMENTTYPE_SYSTEMID;
    internal static UInt32 DISPID_IDOMDOCUMENTTYPE_INTERNALSUBSET;
    internal static UInt32 DISPID_IDOMNODEITERATOR_ROOT;
    internal static UInt32 DISPID_IDOMNODEITERATOR_WHATTOSHOW;
    internal static UInt32 DISPID_IDOMNODEITERATOR_FILTER;
    internal static UInt32 DISPID_IDOMNODEITERATOR_EXPANDENTITYREFERENCES;
    internal static UInt32 DISPID_IDOMNODEITERATOR_NEXTNODE;
    internal static UInt32 DISPID_IDOMNODEITERATOR_PREVIOUSNODE;
    internal static UInt32 DISPID_IDOMNODEITERATOR_DETACH;
    internal static UInt32 DISPID_IDOMTREEWALKER_ROOT;
    internal static UInt32 DISPID_IDOMTREEWALKER_WHATTOSHOW;
    internal static UInt32 DISPID_IDOMTREEWALKER_FILTER;
    internal static UInt32 DISPID_IDOMTREEWALKER_EXPANDENTITYREFERENCES;
    internal static UInt32 DISPID_IDOMTREEWALKER_CURRENTNODE;
    internal static UInt32 DISPID_IDOMTREEWALKER_PARENTNODE;
    internal static UInt32 DISPID_IDOMTREEWALKER_FIRSTCHILD;
    internal static UInt32 DISPID_IDOMTREEWALKER_LASTCHILD;
    internal static UInt32 DISPID_IDOMTREEWALKER_PREVIOUSSIBLING;
    internal static UInt32 DISPID_IDOMTREEWALKER_NEXTSIBLING;
    internal static UInt32 DISPID_IDOMTREEWALKER_PREVIOUSNODE;
    internal static UInt32 DISPID_IDOMTREEWALKER_NEXTNODE;
    internal static UInt32 DISPID_IDOMPROCESSINGINSTRUCTION_TARGET;
    internal static UInt32 DISPID_IDOMPROCESSINGINSTRUCTION_DATA;
    internal static UInt32 DISPID_IHTMLPERFORMANCE_NAVIGATION;
    internal static UInt32 DISPID_IHTMLPERFORMANCE_TIMING;
    internal static UInt32 DISPID_IHTMLPERFORMANCE_TOSTRING;
    internal static UInt32 DISPID_IHTMLPERFORMANCE_TOJSON;
    internal static UInt32 DISPID_IHTMLPERFORMANCENAVIGATION_TYPE;
    internal static UInt32 DISPID_IHTMLPERFORMANCENAVIGATION_REDIRECTCOUNT;
    internal static UInt32 DISPID_IHTMLPERFORMANCENAVIGATION_TOSTRING;
    internal static UInt32 DISPID_IHTMLPERFORMANCENAVIGATION_TOJSON;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_NAVIGATIONSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_REDIRECTSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_REDIRECTEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_FETCHSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_CONNECTSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_CONNECTEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_REQUESTSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_RESPONSESTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_RESPONSEEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMLOADING;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMINTERACTIVE;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_DOMCOMPLETE;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_LOADEVENTSTART;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_LOADEVENTEND;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_MSFIRSTPAINT;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_TOSTRING;
    internal static UInt32 DISPID_IHTMLPERFORMANCETIMING_TOJSON;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_STARTDOC;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_STOPDOC;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PRINTBLANKPAGE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PRINTPAGE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_ENSUREPRINTDIALOGDEFAULTS;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_SHOWPRINTDIALOG;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_SHOWPAGESETUPDIALOG;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PRINTNONNATIVE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PRINTNONNATIVEFRAMES;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_FRAMESETDOCUMENT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_FRAMEACTIVE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_FRAMEASSHOWN;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_SELECTION;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_SELECTEDPAGES;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_CURRENTPAGE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_CURRENTPAGEAVAIL;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_COLLATE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_DUPLEX;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_COPIES;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PAGEFROM;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PAGETO;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_TABLEOFLINKS;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_ALLLINKEDDOCUMENTS;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_HEADER;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_FOOTER;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_MARGINLEFT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_MARGINRIGHT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_MARGINTOP;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_MARGINBOTTOM;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PAGEWIDTH;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_PAGEHEIGHT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_UNPRINTABLELEFT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_UNPRINTABLETOP;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_UNPRINTABLERIGHT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_UNPRINTABLEBOTTOM;
    internal static UInt32 DISPID_ITEMPLATEPRINTER_UPDATEPAGESTATUS;
    internal static UInt32 DISPID_ITEMPLATEPRINTER2_SELECTIONENABLED;
    internal static UInt32 DISPID_ITEMPLATEPRINTER2_FRAMEACTIVEENABLED;
    internal static UInt32 DISPID_ITEMPLATEPRINTER2_ORIENTATION;
    internal static UInt32 DISPID_ITEMPLATEPRINTER2_USEPRINTERCOPYCOLLATE;
    internal static UInt32 DISPID_ITEMPLATEPRINTER2_DEVICESUPPORTS;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_HEADERFOOTERFONT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOP;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOM;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOPIMPORTANT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHTIMPORTANT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOMIMPORTANT;
    internal static UInt32 DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFTIMPORTANT;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_STARTPRINT;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_DRAWPREVIEWPAGE;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_SETPAGECOUNT;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_INVALIDATEPREVIEW;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_GETPRINTTASKOPTIONVALUE;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER_ENDPRINT;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHOWHEADERFOOTER;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHRINKTOFIT;
    internal static UInt32 DISPID_IPRINTMANAGERTEMPLATEPRINTER2_PERCENTSCALE;
    internal static UInt32 DISPID_ISVGTEXTPATHELEMENT_STARTOFFSET;
    internal static UInt32 DISPID_ISVGTEXTPATHELEMENT_METHOD;
    internal static UInt32 DISPID_ISVGTEXTPATHELEMENT_SPACING;
    internal static UInt32 DISPID_IDOMXMLSERIALIZER_SERIALIZETOSTRING;
    internal static UInt32 DISPID_IDOMPARSER_PARSEFROMSTRING;
    internal static UInt32 DISPID_IDOMXMLSERIALIZERFACTORY_CREATE;
    internal static UInt32 DISPID_IDOMPARSERFACTORY_CREATE;
    internal static UInt32 DISPID_IHTMLPROGRESSELEMENT_VALUE;
    internal static UInt32 DISPID_IHTMLPROGRESSELEMENT_MAX;
    internal static UInt32 DISPID_IHTMLPROGRESSELEMENT_POSITION;
    internal static UInt32 DISPID_IHTMLPROGRESSELEMENT_FORM;
    internal static UInt32 DISPID_IDOMMSTRANSITIONEVENT_PROPERTYNAME;
    internal static UInt32 DISPID_IDOMMSTRANSITIONEVENT_ELAPSEDTIME;
    internal static UInt32 DISPID_IDOMMSTRANSITIONEVENT_INITMSTRANSITIONEVENT;
    internal static UInt32 DISPID_IDOMMSANIMATIONEVENT_ANIMATIONNAME;
    internal static UInt32 DISPID_IDOMMSANIMATIONEVENT_ELAPSEDTIME;
    internal static UInt32 DISPID_IDOMMSANIMATIONEVENT_INITMSANIMATIONEVENT;
    internal static UInt32 DISPID_IWEBGEOLOCATION_GETCURRENTPOSITION;
    internal static UInt32 DISPID_IWEBGEOLOCATION_WATCHPOSITION;
    internal static UInt32 DISPID_IWEBGEOLOCATION_CLEARWATCH;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_LATITUDE;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_LONGITUDE;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_ALTITUDE;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_ACCURACY;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_ALTITUDEACCURACY;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_HEADING;
    internal static UInt32 DISPID_IWEBGEOCOORDINATES_SPEED;
    internal static UInt32 DISPID_IWEBGEOPOSITIONERROR_CODE;
    internal static UInt32 DISPID_IWEBGEOPOSITIONERROR_MESSAGE;
    internal static UInt32 DISPID_IWEBGEOPOSITION_COORDS;
    internal static UInt32 DISPID_IWEBGEOPOSITION_TIMESTAMP;
    internal static UInt32 DISPID_ICLIENTCAPS_JAVAENABLED;
    internal static UInt32 DISPID_ICLIENTCAPS_COOKIEENABLED;
    internal static UInt32 DISPID_ICLIENTCAPS_CPUCLASS;
    internal static UInt32 DISPID_ICLIENTCAPS_SYSTEMLANGUAGE;
    internal static UInt32 DISPID_ICLIENTCAPS_USERLANGUAGE;
    internal static UInt32 DISPID_ICLIENTCAPS_PLATFORM;
    internal static UInt32 DISPID_ICLIENTCAPS_CONNECTIONSPEED;
    internal static UInt32 DISPID_ICLIENTCAPS_ONLINE;
    internal static UInt32 DISPID_ICLIENTCAPS_COLORDEPTH;
    internal static UInt32 DISPID_ICLIENTCAPS_BUFFERDEPTH;
    internal static UInt32 DISPID_ICLIENTCAPS_WIDTH;
    internal static UInt32 DISPID_ICLIENTCAPS_HEIGHT;
    internal static UInt32 DISPID_ICLIENTCAPS_AVAILHEIGHT;
    internal static UInt32 DISPID_ICLIENTCAPS_AVAILWIDTH;
    internal static UInt32 DISPID_ICLIENTCAPS_CONNECTIONTYPE;
    internal static UInt32 DISPID_ICLIENTCAPS_ISCOMPONENTINSTALLED;
    internal static UInt32 DISPID_ICLIENTCAPS_GETCOMPONENTVERSION;
    internal static UInt32 DISPID_ICLIENTCAPS_COMPAREVERSIONS;
    internal static UInt32 DISPID_ICLIENTCAPS_ADDCOMPONENTREQUEST;
    internal static UInt32 DISPID_ICLIENTCAPS_DOCOMPONENTREQUEST;
    internal static UInt32 DISPID_ICLIENTCAPS_CLEARCOMPONENTREQUEST;
    internal static UInt32 DISPID_IDOMMSMANIPULATIONEVENT_LASTSTATE;
    internal static UInt32 DISPID_IDOMMSMANIPULATIONEVENT_CURRENTSTATE;
    internal static UInt32 DISPID_IDOMMSMANIPULATIONEVENT_INITMSMANIPULATIONEVENT;
    internal static UInt32 DISPID_IDOMCLOSEEVENT_WASCLEAN;
    internal static UInt32 DISPID_IDOMCLOSEEVENT_INITCLOSEEVENT;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_STATUS;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONCHECKING;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONERROR;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONNOUPDATE;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONDOWNLOADING;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONPROGRESS;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONUPDATEREADY;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONCACHED;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ONOBSOLETE;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_UPDATE;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_SWAPCACHE;
    internal static UInt32 DISPID_IHTMLAPPLICATIONCACHE_ABORT;
    internal static UInt32 DISPID_ILINEINFO_X;
    internal static UInt32 DISPID_ILINEINFO_BASELINE;
    internal static UInt32 DISPID_ILINEINFO_TEXTDESCENT;
    internal static UInt32 DISPID_ILINEINFO_TEXTHEIGHT;
    internal static UInt32 DISPID_ILINEINFO_LINEDIRECTION;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_BOLD;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_ITALIC;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION;
    internal static UInt32 DISPID_IHTMLCOMPUTEDSTYLE_OL;
    internal static UInt32 DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG;
    internal static UInt32 DISPID_IHTMLDLGSAFEHELPER_GETCHARSET;
    internal static UInt32 DISPID_IHTMLDLGSAFEHELPER_FONTS;
    internal static UInt32 DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS;
    internal static int DISPID_IBLOCKFORMATS__NEWENUM;
    internal static UInt32 DISPID_IBLOCKFORMATS_COUNT;
    internal static UInt32 DISPID_IBLOCKFORMATS_ITEM;
    internal static int DISPID_IFONTNAMES__NEWENUM;
    internal static UInt32 DISPID_IFONTNAMES_COUNT;
    internal static UInt32 DISPID_IFONTNAMES_ITEM;
    internal static UInt32 DISPID_IHTMLNAMESPACE_NAME;
    internal static UInt32 DISPID_IHTMLNAMESPACE_URN;
    internal static UInt32 DISPID_IHTMLNAMESPACE_TAGNAMES;
    internal static UInt32 DISPID_IHTMLNAMESPACE_READYSTATE;
    internal static UInt32 DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLNAMESPACE_DOIMPORT;
    internal static UInt32 DISPID_IHTMLNAMESPACE_ATTACHEVENT;
    internal static UInt32 DISPID_IHTMLNAMESPACE_DETACHEVENT;
    internal static UInt32 DISPID_IHTMLNAMESPACECOLLECTION_LENGTH;
    internal static UInt32 DISPID_IHTMLNAMESPACECOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLNAMESPACECOLLECTION_ADD;
    internal static int DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE;
    internal static UInt32 DISPID_IHTMLIPRINTCOLLECTION_LENGTH;
    internal static int DISPID_IHTMLIPRINTCOLLECTION__NEWENUM;
    internal static UInt32 DISPID_IHTMLIPRINTCOLLECTION_ITEM;
    internal static UInt32 DISPID_IHTMLDIALOG_DIALOGTOP;
    internal static UInt32 DISPID_IHTMLDIALOG_DIALOGLEFT;
    internal static UInt32 DISPID_IHTMLDIALOG_DIALOGWIDTH;
    internal static UInt32 DISPID_IHTMLDIALOG_DIALOGHEIGHT;
    internal static UInt32 DISPID_IHTMLDIALOG_DIALOGARGUMENTS;
    internal static UInt32 DISPID_IHTMLDIALOG_MENUARGUMENTS;
    internal static UInt32 DISPID_IHTMLDIALOG_RETURNVALUE;
    internal static UInt32 DISPID_IHTMLDIALOG_CLOSE;
    internal static UInt32 DISPID_IHTMLDIALOG_TOSTRING;
    internal static UInt32 DISPID_IHTMLDIALOG2_STATUS;
    internal static UInt32 DISPID_IHTMLDIALOG2_RESIZABLE;
    internal static UInt32 DISPID_IHTMLDIALOG3_UNADORNED;
    internal static UInt32 DISPID_IHTMLDIALOG3_DIALOGHIDE;
    internal static UInt32 DISPID_IHTMLMODELESSINIT_PARAMETERS;
    internal static UInt32 DISPID_IHTMLMODELESSINIT_OPTIONSTRING;
    internal static UInt32 DISPID_IHTMLMODELESSINIT_MONIKER;
    internal static UInt32 DISPID_IHTMLMODELESSINIT_DOCUMENT;
    internal static UInt32 DISPID_IHTMLPOPUP_SHOW;
    internal static UInt32 DISPID_IHTMLPOPUP_HIDE;
    internal static UInt32 DISPID_IHTMLPOPUP_DOCUMENT;
    internal static UInt32 DISPID_IHTMLPOPUP_ISOPEN;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_VERSION;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_ICON;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_BORDER;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_SYSMENU;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_CAPTION;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR2_SCROLL;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR2_SELECTION;
    internal static UInt32 DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE;
    internal static UInt32 DISPID_IHTMLTXTRANGEINTERNAL_GET_VISIBLETEXT;
    internal static UInt32 DISPID_IE9EVENTS_ABORT;
    internal static UInt32 DISPID_IE9EVENTS_ACTIVATE;
    internal static UInt32 DISPID_IE9EVENTS_AFTERPRINT;
    internal static UInt32 DISPID_IE9EVENTS_BEFOREACTIVATE;
    internal static UInt32 DISPID_IE9EVENTS_BEFOREDEACTIVATE;
    internal static UInt32 DISPID_IE9EVENTS_BEFOREUNLOAD;
    internal static UInt32 DISPID_IE9EVENTS_BEFOREPRINT;
    internal static UInt32 DISPID_IE9EVENTS_BOUNCE;
    internal static UInt32 DISPID_IE9EVENTS_CHANGE;
    internal static int DISPID_IE9EVENTS_CLICK;
    internal static UInt32 DISPID_IE9EVENTS_COMPLETE;
    internal static UInt32 DISPID_IE9EVENTS_CONTEXTMENU;
    internal static UInt32 DISPID_IE9EVENTS_DEACTIVATE;
    internal static UInt32 DISPID_IE9EVENTS_DOMCONTENTLOADED;
    internal static UInt32 DISPID_IE9EVENTS_SUCCESS;
    internal static UInt32 DISPID_IE9EVENTS_ERROR;
    internal static UInt32 DISPID_IE9EVENTS_FINISH;
    internal static UInt32 DISPID_IE9EVENTS_FOCUS;
    internal static UInt32 DISPID_IE9EVENTS_FOCUSIN;
    internal static UInt32 DISPID_IE9EVENTS_FOCUSOUT;
    internal static UInt32 DISPID_IE9EVENTS_HASHCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_HELP;
    internal static UInt32 DISPID_IE9EVENTS_INPUT;
    internal static UInt32 DISPID_IE9EVENTS_LOAD;
    internal static int DISPID_IE9EVENTS_KEYDOWN;
    internal static int DISPID_IE9EVENTS_KEYPRESS;
    internal static int DISPID_IE9EVENTS_KEYUP;
    internal static UInt32 DISPID_IE9EVENTS_MESSAGE;
    internal static UInt32 DISPID_IE9EVENTS_ONLINE;
    internal static UInt32 DISPID_IE9EVENTS_OFFLINE;
    internal static int DISPID_IE9EVENTS_READYSTATECHANGE;
    internal static UInt32 DISPID_IE9EVENTS_RESET;
    internal static UInt32 DISPID_IE9EVENTS_RESIZE;
    internal static UInt32 DISPID_IE9EVENTS_SCROLL;
    internal static UInt32 DISPID_IE9EVENTS_SELECT;
    internal static UInt32 DISPID_IE9EVENTS_SELECTIONCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_SELECTSTART;
    internal static UInt32 DISPID_IE9EVENTS_START;
    internal static UInt32 DISPID_IE9EVENTS_STOP;
    internal static UInt32 DISPID_IE9EVENTS_STORAGE;
    internal static UInt32 DISPID_IE9EVENTS_STORAGECOMMIT;
    internal static UInt32 DISPID_IE9EVENTS_SUBMIT;
    internal static UInt32 DISPID_IE9EVENTS_TEXTINPUT;
    internal static UInt32 DISPID_IE9EVENTS_TIMEOUT;
    internal static UInt32 DISPID_IE9EVENTS_UNLOAD;
    internal static UInt32 DISPID_IE9EVENTS_WHEEL;
    internal static int DISPID_IE9EVENTS_DBLCLICK;
    internal static int DISPID_IE9EVENTS_MOUSEDOWN;
    internal static UInt32 DISPID_IE9EVENTS_MOUSEENTER;
    internal static UInt32 DISPID_IE9EVENTS_MOUSELEAVE;
    internal static int DISPID_IE9EVENTS_MOUSEMOVE;
    internal static UInt32 DISPID_IE9EVENTS_MOUSEOUT;
    internal static UInt32 DISPID_IE9EVENTS_MOUSEOVER;
    internal static int DISPID_IE9EVENTS_MOUSEUP;
    internal static UInt32 DISPID_IE9EVENTS_MOUSEWHEEL;
    internal static UInt32 DISPID_IE9EVENTS_BEFORECOPY;
    internal static UInt32 DISPID_IE9EVENTS_BEFORECUT;
    internal static UInt32 DISPID_IE9EVENTS_BEFOREPASTE;
    internal static UInt32 DISPID_IE9EVENTS_COPY;
    internal static UInt32 DISPID_IE9EVENTS_CUT;
    internal static UInt32 DISPID_IE9EVENTS_DRAG;
    internal static UInt32 DISPID_IE9EVENTS_DRAGEND;
    internal static UInt32 DISPID_IE9EVENTS_DRAGENTER;
    internal static UInt32 DISPID_IE9EVENTS_DRAGLEAVE;
    internal static UInt32 DISPID_IE9EVENTS_DRAGOVER;
    internal static UInt32 DISPID_IE9EVENTS_DRAGSTART;
    internal static UInt32 DISPID_IE9EVENTS_DROP;
    internal static UInt32 DISPID_IE9EVENTS_PASTE;
    internal static UInt32 DISPID_IE9EVENTS_MSBEFOREEDITFOCUS;
    internal static UInt32 DISPID_IE9EVENTS_MSCONTROLSELECT;
    internal static UInt32 DISPID_IE9EVENTS_MSCONTROLRESIZESTART;
    internal static UInt32 DISPID_IE9EVENTS_MSCONTROLRESIZEEND;
    internal static UInt32 DISPID_IE9EVENTS_COMPOSITIONSTART;
    internal static UInt32 DISPID_IE9EVENTS_COMPOSITIONUPDATE;
    internal static UInt32 DISPID_IE9EVENTS_COMPOSITIONEND;
    internal static UInt32 DISPID_IE9EVENTS_DOMATTRMODIFIED;
    internal static UInt32 DISPID_IE9EVENTS_DOMCHARACTERDATAMODIFIED;
    internal static UInt32 DISPID_IE9EVENTS_DOMNODEINSERTED;
    internal static UInt32 DISPID_IE9EVENTS_DOMNODEREMOVED;
    internal static UInt32 DISPID_IE9EVENTS_DOMSUBTREEMODIFIED;
    internal static UInt32 DISPID_IE9EVENTS_SVGLOAD;
    internal static UInt32 DISPID_IE9EVENTS_SVGUNLOAD;
    internal static UInt32 DISPID_IE9EVENTS_SVGABORT;
    internal static UInt32 DISPID_IE9EVENTS_SVGERROR;
    internal static UInt32 DISPID_IE9EVENTS_SVGRESIZE;
    internal static UInt32 DISPID_IE9EVENTS_SVGSCROLL;
    internal static UInt32 DISPID_IE9EVENTS_SVGZOOM;
    internal static UInt32 DISPID_IE9EVENTS_MSTHUMBNAILCLICK;
    internal static UInt32 DISPID_IE9EVENTS_MSSITEMODEJUMPLISTITEMREMOVED;
    internal static UInt32 DISPID_IE9EVENTS_CANPLAY;
    internal static UInt32 DISPID_IE9EVENTS_CANPLAYTHROUGH;
    internal static UInt32 DISPID_IE9EVENTS_DURATIONCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_EMPTIED;
    internal static UInt32 DISPID_IE9EVENTS_ENDED;
    internal static UInt32 DISPID_IE9EVENTS_LOADEDDATA;
    internal static UInt32 DISPID_IE9EVENTS_LOADEDMETADATA;
    internal static UInt32 DISPID_IE9EVENTS_LOADSTART;
    internal static UInt32 DISPID_IE9EVENTS_PAUSE;
    internal static UInt32 DISPID_IE9EVENTS_PLAY;
    internal static UInt32 DISPID_IE9EVENTS_PLAYING;
    internal static UInt32 DISPID_IE9EVENTS_PROGRESS;
    internal static UInt32 DISPID_IE9EVENTS_RATECHANGE;
    internal static UInt32 DISPID_IE9EVENTS_SEEKED;
    internal static UInt32 DISPID_IE9EVENTS_SEEKING;
    internal static UInt32 DISPID_IE9EVENTS_STALLED;
    internal static UInt32 DISPID_IE9EVENTS_SUSPEND;
    internal static UInt32 DISPID_IE9EVENTS_TIMEUPDATE;
    internal static UInt32 DISPID_IE9EVENTS_VOLUMECHANGE;
    internal static UInt32 DISPID_IE9EVENTS_WAITING;
    internal static UInt32 DISPID_IE9EVENTS_BLOCKED;
    internal static UInt32 DISPID_IE9EVENTS_UPGRADENEEDED;
    internal static UInt32 DISPID_IE9EVENTS_CUECHANGE;
    internal static UInt32 DISPID_IE9EVENTS_ENTER;
    internal static UInt32 DISPID_IE9EVENTS_EXIT;
    internal static UInt32 DISPID_IE9EVENTS_ADDTRACK;
    internal static UInt32 DISPID_IE9EVENTS_REMOVETRACK;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERDOWN;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERMOVE;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERUP;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTEROVER;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTEROUT;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERCANCEL;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERHOVER;
    internal static UInt32 DISPID_IE9EVENTS_MSLOSTPOINTERCAPTURE;
    internal static UInt32 DISPID_IE9EVENTS_MSGOTPOINTERCAPTURE;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERENTER;
    internal static UInt32 DISPID_IE9EVENTS_MSPOINTERLEAVE;
    internal static UInt32 DISPID_IE9EVENTS_TOUCHSTART;
    internal static UInt32 DISPID_IE9EVENTS_TOUCHEND;
    internal static UInt32 DISPID_IE9EVENTS_TOUCHMOVE;
    internal static UInt32 DISPID_IE9EVENTS_TOUCHCANCEL;
    internal static UInt32 DISPID_IE9EVENTS_MSGESTURESTART;
    internal static UInt32 DISPID_IE9EVENTS_MSGESTURECHANGE;
    internal static UInt32 DISPID_IE9EVENTS_MSGESTUREEND;
    internal static UInt32 DISPID_IE9EVENTS_MSGESTUREHOLD;
    internal static UInt32 DISPID_IE9EVENTS_MSGESTURETAP;
    internal static UInt32 DISPID_IE9EVENTS_MSGESTUREDOUBLETAP;
    internal static UInt32 DISPID_IE9EVENTS_MSINERTIASTART;
    internal static UInt32 DISPID_IE9EVENTS_MSCONTENTZOOM;
    internal static UInt32 DISPID_IE9EVENTS_MSHOLDVISUAL;
    internal static UInt32 DISPID_IE9EVENTS_TRANSITIONSTART;
    internal static UInt32 DISPID_IE9EVENTS_TRANSITIONEND;
    internal static UInt32 DISPID_IE9EVENTS_ANIMATIONSTART;
    internal static UInt32 DISPID_IE9EVENTS_ANIMATIONEND;
    internal static UInt32 DISPID_IE9EVENTS_ANIMATIONITERATION;
    internal static UInt32 DISPID_IE9EVENTS_MSMANIPULATIONSTATECHANGED;
    internal static UInt32 DISPID_IE9EVENTS_CHECKING;
    internal static UInt32 DISPID_IE9EVENTS_NOUPDATE;
    internal static UInt32 DISPID_IE9EVENTS_DOWNLOADING;
    internal static UInt32 DISPID_IE9EVENTS_UPDATEREADY;
    internal static UInt32 DISPID_IE9EVENTS_CACHED;
    internal static UInt32 DISPID_IE9EVENTS_OBSOLETE;
    internal static UInt32 DISPID_IE9EVENTS_INVALID;
    internal static UInt32 DISPID_IE9EVENTS_OPEN;
    internal static UInt32 DISPID_IE9EVENTS_CLOSE;
    internal static UInt32 DISPID_IE9EVENTS_LOADEND;
    internal static UInt32 DISPID_IE9EVENTS_POPSTATE;
    internal static UInt32 DISPID_IE9EVENTS_VISIBILITYCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_MSREGIONUPDATE;
    internal static UInt32 DISPID_IE9EVENTS_MSVIDEOFORMATCHANGED;
    internal static UInt32 DISPID_IE9EVENTS_MSVIDEOFRAMESTEPCOMPLETED;
    internal static UInt32 DISPID_IE9EVENTS_MSVIDEOOPTIMALLAYOUTCHANGED;
    internal static UInt32 DISPID_IE9EVENTS_MSFULLSCREENCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_MSFULLSCREENERROR;
    internal static UInt32 DISPID_IE9EVENTS_MSELEMENTRESIZE;
    internal static UInt32 DISPID_IE9EVENTS_SOURCEOPEN;
    internal static UInt32 DISPID_IE9EVENTS_SOURCEENDED;
    internal static UInt32 DISPID_IE9EVENTS_SOURCECLOSE;
    internal static UInt32 DISPID_IE9EVENTS_ADDSOURCEBUFFER;
    internal static UInt32 DISPID_IE9EVENTS_REMOVESOURCEBUFFER;
    internal static UInt32 DISPID_IE9EVENTS_UPDATESTART;
    internal static UInt32 DISPID_IE9EVENTS_UPDATE;
    internal static UInt32 DISPID_IE9EVENTS_UPDATEEND;
    internal static UInt32 DISPID_IE9EVENTS_MSNEEDKEY;
    internal static UInt32 DISPID_IE9EVENTS_MSKEYMESSAGE;
    internal static UInt32 DISPID_IE9EVENTS_MSKEYERROR;
    internal static UInt32 DISPID_IE9EVENTS_MSKEYADDED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWDOMCONTENTLOADED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWCONTENTLOADING;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONSTARTING;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONCOMPLETED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWFRAMEDOMCONTENTLOADED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWFRAMECONTENTLOADING;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONSTARTING;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONCOMPLETED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWSCRIPTNOTIFY;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWLONGRUNNINGSCRIPTDETECTED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWUNVIEWABLECONTENTIDENTIFIED;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWUNSAFECONTENTWARNINGDISPLAYING;
    internal static UInt32 DISPID_IE9EVENTS_MSWEBVIEWCONTAINSFULLSCREENELEMENTCHANGED;
    internal static UInt32 DISPID_IE9EVENTS_WEBGLCONTEXTLOST;
    internal static UInt32 DISPID_IE9EVENTS_WEBGLCONTEXTRESTORED;
    internal static UInt32 DISPID_IE9EVENTS_WEBGLCONTEXTCREATIONERROR;
    internal static UInt32 DISPID_IE9EVENTS_MSSITEPINNED;
    internal static UInt32 DISPID_IE9EVENTS_MSORIENTATIONCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_ORIENTATIONCHANGE;
    internal static UInt32 DISPID_IE9EVENTS_DEVICEORIENTATION;
    internal static UInt32 DISPID_IE9EVENTS_DEVICEMOTION;
    internal static UInt32 DISPID_IE9EVENTS_COMPASSNEEDSCALIBRATION;
    internal static UInt32 DISPID_IE9EVENTS_PAGESHOW;
    internal static UInt32 DISPID_IE9EVENTS_PAGEHIDE;
    internal static UInt32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWSHOW;
    internal static UInt32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWUPDATE;
    internal static UInt32 DISPID_IE9EVENTS_MSCANDIDATEWINDOWHIDE;
    internal static int DISPID_AMBIENT_OFFLINEIFNOTCONNECTED;
    internal static int DISPID_AMBIENT_SILENT;
    internal static UInt32 DISPID_BEFORENAVIGATE;
    internal static UInt32 DISPID_NAVIGATECOMPLETE;
    internal static UInt32 DISPID_STATUSTEXTCHANGE;
    internal static UInt32 DISPID_QUIT;
    internal static UInt32 DISPID_DOWNLOADCOMPLETE;
    internal static UInt32 DISPID_COMMANDSTATECHANGE;
    internal static UInt32 DISPID_DOWNLOADBEGIN;
    internal static UInt32 DISPID_NEWWINDOW;
    internal static UInt32 DISPID_PROGRESSCHANGE;
    internal static UInt32 DISPID_WINDOWMOVE;
    internal static UInt32 DISPID_WINDOWRESIZE;
    internal static UInt32 DISPID_WINDOWACTIVATE;
    internal static UInt32 DISPID_PROPERTYCHANGE;
    internal static UInt32 DISPID_TITLECHANGE;
    internal static UInt32 DISPID_TITLEICONCHANGE;
    internal static UInt32 DISPID_FRAMEBEFORENAVIGATE;
    internal static UInt32 DISPID_FRAMENAVIGATECOMPLETE;
    internal static UInt32 DISPID_FRAMENEWWINDOW;
    internal static UInt32 DISPID_BEFORENAVIGATE2;
    internal static UInt32 DISPID_NEWWINDOW2;
    internal static UInt32 DISPID_NAVIGATECOMPLETE2;
    internal static UInt32 DISPID_ONQUIT;
    internal static UInt32 DISPID_ONVISIBLE;
    internal static UInt32 DISPID_ONTOOLBAR;
    internal static UInt32 DISPID_ONMENUBAR;
    internal static UInt32 DISPID_ONSTATUSBAR;
    internal static UInt32 DISPID_ONFULLSCREEN;
    internal static UInt32 DISPID_DOCUMENTCOMPLETE;
    internal static UInt32 DISPID_ONTHEATERMODE;
    internal static UInt32 DISPID_ONADDRESSBAR;
    internal static UInt32 DISPID_WINDOWSETRESIZABLE;
    internal static UInt32 DISPID_WINDOWCLOSING;
    internal static UInt32 DISPID_WINDOWSETLEFT;
    internal static UInt32 DISPID_WINDOWSETTOP;
    internal static UInt32 DISPID_WINDOWSETWIDTH;
    internal static UInt32 DISPID_WINDOWSETHEIGHT;
    internal static UInt32 DISPID_CLIENTTOHOSTWINDOW;
    internal static UInt32 DISPID_SETSECURELOCKICON;
    internal static UInt32 DISPID_FILEDOWNLOAD;
    internal static UInt32 DISPID_NAVIGATEERROR;
    internal static UInt32 DISPID_PRIVACYIMPACTEDSTATECHANGE;
    internal static UInt32 DISPID_NEWWINDOW3;
    internal static UInt32 DISPID_VIEWUPDATE;
    internal static UInt32 DISPID_SETPHISHINGFILTERSTATUS;
    internal static UInt32 DISPID_WINDOWSTATECHANGED;
    internal static UInt32 DISPID_NEWPROCESS;
    internal static UInt32 DISPID_THIRDPARTYURLBLOCKED;
    internal static UInt32 DISPID_REDIRECTXDOMAINBLOCKED;
    internal static UInt32 DISPID_WEBWORKERSTARTED;
    internal static UInt32 DISPID_WEBWORKERFINISHED;
    internal static UInt32 DISPID_BEFORESCRIPTEXECUTE;
    internal static UInt32 DISPID_PRINTTEMPLATEINSTANTIATION;
    internal static UInt32 DISPID_PRINTTEMPLATETEARDOWN;
    internal static UInt32 DISPID_UPDATEPAGESTATUS;
    internal static UInt32 DISPID_WINDOWREGISTERED;
    internal static UInt32 DISPID_WINDOWREVOKED;
    internal static UInt32 DISPID_RESETFIRSTBOOTMODE;
    internal static UInt32 DISPID_RESETSAFEMODE;
    internal static UInt32 DISPID_REFRESHOFFLINEDESKTOP;
    internal static UInt32 DISPID_ADDFAVORITE;
    internal static UInt32 DISPID_ADDCHANNEL;
    internal static UInt32 DISPID_ADDDESKTOPCOMPONENT;
    internal static UInt32 DISPID_ISSUBSCRIBED;
    internal static UInt32 DISPID_NAVIGATEANDFIND;
    internal static UInt32 DISPID_IMPORTEXPORTFAVORITES;
    internal static UInt32 DISPID_AUTOCOMPLETESAVEFORM;
    internal static UInt32 DISPID_AUTOSCAN;
    internal static UInt32 DISPID_AUTOCOMPLETEATTACH;
    internal static UInt32 DISPID_SHOWBROWSERUI;
    internal static UInt32 DISPID_ADDSEARCHPROVIDER;
    internal static UInt32 DISPID_RUNONCESHOWN;
    internal static UInt32 DISPID_SKIPRUNONCE;
    internal static UInt32 DISPID_CUSTOMIZESETTINGS;
    internal static UInt32 DISPID_SQMENABLED;
    internal static UInt32 DISPID_PHISHINGENABLED;
    internal static UInt32 DISPID_BRANDIMAGEURI;
    internal static UInt32 DISPID_SKIPTABSWELCOME;
    internal static UInt32 DISPID_DIAGNOSECONNECTION;
    internal static UInt32 DISPID_CUSTOMIZECLEARTYPE;
    internal static UInt32 DISPID_ISSEARCHPROVIDERINSTALLED;
    internal static UInt32 DISPID_ISSEARCHMIGRATED;
    internal static UInt32 DISPID_DEFAULTSEARCHPROVIDER;
    internal static UInt32 DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE;
    internal static UInt32 DISPID_RUNONCEHASSHOWN;
    internal static UInt32 DISPID_SEARCHGUIDEURL;
    internal static UInt32 DISPID_ADDSERVICE;
    internal static UInt32 DISPID_ISSERVICEINSTALLED;
    internal static UInt32 DISPID_ADDTOFAVORITESBAR;
    internal static UInt32 DISPID_BUILDNEWTABPAGE;
    internal static UInt32 DISPID_SETRECENTLYCLOSEDVISIBLE;
    internal static UInt32 DISPID_SETACTIVITIESVISIBLE;
    internal static UInt32 DISPID_CONTENTDISCOVERYRESET;
    internal static UInt32 DISPID_INPRIVATEFILTERINGENABLED;
    internal static UInt32 DISPID_SUGGESTEDSITESENABLED;
    internal static UInt32 DISPID_ENABLESUGGESTEDSITES;
    internal static UInt32 DISPID_NAVIGATETOSUGGESTEDSITES;
    internal static UInt32 DISPID_SHOWTABSHELP;
    internal static UInt32 DISPID_SHOWINPRIVATEHELP;
    internal static UInt32 DISPID_ISSITEMODE;
    internal static UInt32 DISPID_SETSITEMODEICONOVERLAY;
    internal static UInt32 DISPID_CLEARSITEMODEICONOVERLAY;
    internal static UInt32 DISPID_UPDATETHUMBNAILBUTTON;
    internal static UInt32 DISPID_SETTHUMBNAILBUTTONS;
    internal static UInt32 DISPID_ADDTHUMBNAILBUTTONS;
    internal static UInt32 DISPID_ADDSITEMODE;
    internal static UInt32 DISPID_SETSITEMODEPROPERTIES;
    internal static UInt32 DISPID_SITEMODECREATEJUMPLIST;
    internal static UInt32 DISPID_SITEMODEADDJUMPLISTITEM;
    internal static UInt32 DISPID_SITEMODECLEARJUMPLIST;
    internal static UInt32 DISPID_SITEMODEADDBUTTONSTYLE;
    internal static UInt32 DISPID_SITEMODESHOWBUTTONSTYLE;
    internal static UInt32 DISPID_SITEMODESHOWJUMPLIST;
    internal static UInt32 DISPID_ADDTRACKINGPROTECTIONLIST;
    internal static UInt32 DISPID_SITEMODEACTIVATE;
    internal static UInt32 DISPID_ISSITEMODEFIRSTRUN;
    internal static UInt32 DISPID_TRACKINGPROTECTIONENABLED;
    internal static UInt32 DISPID_ACTIVEXFILTERINGENABLED;
    internal static UInt32 DISPID_PROVISIONNETWORKS;
    internal static UInt32 DISPID_REPORTSAFEURL;
    internal static UInt32 DISPID_SITEMODEREFRESHBADGE;
    internal static UInt32 DISPID_SITEMODECLEARBADGE;
    internal static UInt32 DISPID_DIAGNOSECONNECTIONUILESS;
    internal static UInt32 DISPID_LAUNCHNETWORKCLIENTHELP;
    internal static UInt32 DISPID_CHANGEDEFAULTBROWSER;
    internal static UInt32 DISPID_STOPPERIODICUPDATE;
    internal static UInt32 DISPID_STARTPERIODICUPDATE;
    internal static UInt32 DISPID_CLEARNOTIFICATION;
    internal static UInt32 DISPID_ENABLENOTIFICATIONQUEUE;
    internal static UInt32 DISPID_PINNEDSITESTATE;
    internal static UInt32 DISPID_LAUNCHINTERNETOPTIONS;
    internal static UInt32 DISPID_STARTPERIODICUPDATEBATCH;
    internal static UInt32 DISPID_ENABLENOTIFICATIONQUEUESQUARE;
    internal static UInt32 DISPID_ENABLENOTIFICATIONQUEUEWIDE;
    internal static UInt32 DISPID_ENABLENOTIFICATIONQUEUELARGE;
    internal static UInt32 DISPID_SCHEDULEDTILENOTIFICATION;
    internal static UInt32 DISPID_REMOVESCHEDULEDTILENOTIFICATION;
    internal static UInt32 DISPID_STARTBADGEUPDATE;
    internal static UInt32 DISPID_STOPBADGEUPDATE;
    internal static UInt32 DISPID_ISMETAREFERRERAVAILABLE;
    internal static UInt32 DISPID_SETEXPERIMENTALFLAG;
    internal static UInt32 DISPID_GETEXPERIMENTALFLAG;
    internal static UInt32 DISPID_SETEXPERIMENTALVALUE;
    internal static UInt32 DISPID_GETEXPERIMENTALVALUE;
    internal static UInt32 DISPID_HASNEEDIEAUTOLAUNCHFLAG;
    internal static UInt32 DISPID_GETNEEDIEAUTOLAUNCHFLAG;
    internal static UInt32 DISPID_SETNEEDIEAUTOLAUNCHFLAG;
    internal static UInt32 DISPID_LAUNCHIE;
    internal static UInt32 DISPID_RESETEXPERIMENTALFLAGS;
    internal static UInt32 DISPID_GETCVLISTDATA;
    internal static UInt32 DISPID_GETCVLISTLOCALDATA;
    internal static UInt32 DISPID_GETEMIELISTDATA;
    internal static UInt32 DISPID_GETEMIELISTLOCALDATA;
    internal static UInt32 DISPID_OPENFAVORITESPANE;
    internal static UInt32 DISPID_OPENFAVORITESSETTINGS;
    internal static UInt32 DISPID_LAUNCHINHVSI;
    internal static UInt32 DISPID_GETNEEDHVSIAUTOLAUNCHFLAG;
    internal static UInt32 DISPID_SETNEEDHVSIAUTOLAUNCHFLAG;
    internal static UInt32 DISPID_HASNEEDHVSIAUTOLAUNCHFLAG;
    internal static UInt32 DISPID_GETOSSKU;
    internal static UInt32 DISPID_SETMSDEFAULTS;
    internal static UInt32 DISPID_SHELLUIHELPERLAST;
    internal static UInt32 DISPID_ADVANCEERROR;
    internal static UInt32 DISPID_RETREATERROR;
    internal static UInt32 DISPID_CANADVANCEERROR;
    internal static UInt32 DISPID_CANRETREATERROR;
    internal static UInt32 DISPID_GETERRORLINE;
    internal static UInt32 DISPID_GETERRORCHAR;
    internal static UInt32 DISPID_GETERRORCODE;
    internal static UInt32 DISPID_GETERRORMSG;
    internal static UInt32 DISPID_GETERRORURL;
    internal static UInt32 DISPID_GETDETAILSSTATE;
    internal static UInt32 DISPID_SETDETAILSSTATE;
    internal static UInt32 DISPID_GETPERERRSTATE;
    internal static UInt32 DISPID_SETPERERRSTATE;
    internal static UInt32 DISPID_GETALWAYSSHOWLOCKSTATE;
    internal static UInt32 DISPID_FAVSELECTIONCHANGE;
    internal static UInt32 DISPID_SELECTIONCHANGE;
    internal static UInt32 DISPID_DOUBLECLICK;
    internal static UInt32 DISPID_INITIALIZED;
    internal static UInt32 DISPID_MOVESELECTIONUP;
    internal static UInt32 DISPID_MOVESELECTIONDOWN;
    internal static UInt32 DISPID_RESETSORT;
    internal static UInt32 DISPID_NEWFOLDER;
    internal static UInt32 DISPID_SYNCHRONIZE;
    internal static UInt32 DISPID_IMPORT;
    internal static UInt32 DISPID_EXPORT;
    internal static UInt32 DISPID_INVOKECONTEXTMENU;
    internal static UInt32 DISPID_MOVESELECTIONTO;
    internal static UInt32 DISPID_SUBSCRIPTIONSENABLED;
    internal static UInt32 DISPID_CREATESUBSCRIPTION;
    internal static UInt32 DISPID_DELETESUBSCRIPTION;
    internal static UInt32 DISPID_SETROOT;
    internal static UInt32 DISPID_ENUMOPTIONS;
    internal static UInt32 DISPID_SELECTEDITEM;
    internal static UInt32 DISPID_ROOT;
    internal static UInt32 DISPID_DEPTH;
    internal static UInt32 DISPID_MODE;
    internal static UInt32 DISPID_FLAGS;
    internal static UInt32 DISPID_TVFLAGS;
    internal static UInt32 DISPID_NSCOLUMNS;
    internal static UInt32 DISPID_COUNTVIEWTYPES;
    internal static UInt32 DISPID_SETVIEWTYPE;
    internal static UInt32 DISPID_SELECTEDITEMS;
    internal static UInt32 DISPID_EXPAND;
    internal static UInt32 DISPID_UNSELECTALL;
    internal static UInt32 DISPID_FEEDS_RootFolder;
    internal static UInt32 DISPID_FEEDS_IsSubscribed;
    internal static UInt32 DISPID_FEEDS_ExistsFeed;
    internal static UInt32 DISPID_FEEDS_GetFeed;
    internal static UInt32 DISPID_FEEDS_ExistsFolder;
    internal static UInt32 DISPID_FEEDS_GetFolder;
    internal static UInt32 DISPID_FEEDS_DeleteFeed;
    internal static UInt32 DISPID_FEEDS_DeleteFolder;
    internal static UInt32 DISPID_FEEDS_GetFeedByUrl;
    internal static UInt32 DISPID_FEEDS_BackgroundSync;
    internal static UInt32 DISPID_FEEDS_BackgroundSyncStatus;
    internal static UInt32 DISPID_FEEDS_DefaultInterval;
    internal static UInt32 DISPID_FEEDS_AsyncSyncAll;
    internal static UInt32 DISPID_FEEDS_Normalize;
    internal static UInt32 DISPID_FEEDS_ItemCountLimit;
    internal static UInt32 DISPID_FEEDSENUM_Count;
    internal static UInt32 DISPID_FEEDSENUM_Item;
    internal static UInt32 DISPID_FEEDFOLDER_Feeds;
    internal static UInt32 DISPID_FEEDFOLDER_Subfolders;
    internal static UInt32 DISPID_FEEDFOLDER_CreateFeed;
    internal static UInt32 DISPID_FEEDFOLDER_CreateSubfolder;
    internal static UInt32 DISPID_FEEDFOLDER_ExistsFeed;
    internal static UInt32 DISPID_FEEDFOLDER_GetFeed;
    internal static UInt32 DISPID_FEEDFOLDER_ExistsSubfolder;
    internal static UInt32 DISPID_FEEDFOLDER_GetSubfolder;
    internal static UInt32 DISPID_FEEDFOLDER_Delete;
    internal static UInt32 DISPID_FEEDFOLDER_Name;
    internal static UInt32 DISPID_FEEDFOLDER_Rename;
    internal static UInt32 DISPID_FEEDFOLDER_Path;
    internal static UInt32 DISPID_FEEDFOLDER_Move;
    internal static UInt32 DISPID_FEEDFOLDER_Parent;
    internal static UInt32 DISPID_FEEDFOLDER_IsRoot;
    internal static UInt32 DISPID_FEEDFOLDER_TotalUnreadItemCount;
    internal static UInt32 DISPID_FEEDFOLDER_TotalItemCount;
    internal static UInt32 DISPID_FEEDFOLDER_GetWatcher;
    internal static UInt32 DISPID_FEED_Xml;
    internal static UInt32 DISPID_FEED_Name;
    internal static UInt32 DISPID_FEED_Rename;
    internal static UInt32 DISPID_FEED_Url;
    internal static UInt32 DISPID_FEED_LocalId;
    internal static UInt32 DISPID_FEED_Path;
    internal static UInt32 DISPID_FEED_Move;
    internal static UInt32 DISPID_FEED_Parent;
    internal static UInt32 DISPID_FEED_LastWriteTime;
    internal static UInt32 DISPID_FEED_Delete;
    internal static UInt32 DISPID_FEED_Download;
    internal static UInt32 DISPID_FEED_AsyncDownload;
    internal static UInt32 DISPID_FEED_CancelAsyncDownload;
    internal static UInt32 DISPID_FEED_Interval;
    internal static UInt32 DISPID_FEED_SyncSetting;
    internal static UInt32 DISPID_FEED_LastDownloadTime;
    internal static UInt32 DISPID_FEED_LocalEnclosurePath;
    internal static UInt32 DISPID_FEED_Items;
    internal static UInt32 DISPID_FEED_GetItem;
    internal static UInt32 DISPID_FEED_Title;
    internal static UInt32 DISPID_FEED_Description;
    internal static UInt32 DISPID_FEED_Link;
    internal static UInt32 DISPID_FEED_Image;
    internal static UInt32 DISPID_FEED_LastBuildDate;
    internal static UInt32 DISPID_FEED_PubDate;
    internal static UInt32 DISPID_FEED_Ttl;
    internal static UInt32 DISPID_FEED_Language;
    internal static UInt32 DISPID_FEED_Copyright;
    internal static UInt32 DISPID_FEED_DownloadEnclosuresAutomatically;
    internal static UInt32 DISPID_FEED_DownloadStatus;
    internal static UInt32 DISPID_FEED_LastDownloadError;
    internal static UInt32 DISPID_FEED_Merge;
    internal static UInt32 DISPID_FEED_DownloadUrl;
    internal static UInt32 DISPID_FEED_IsList;
    internal static UInt32 DISPID_FEED_MarkAllItemsRead;
    internal static UInt32 DISPID_FEED_GetWatcher;
    internal static UInt32 DISPID_FEED_UnreadItemCount;
    internal static UInt32 DISPID_FEED_ItemCount;
    internal static UInt32 DISPID_FEED_MaxItemCount;
    internal static UInt32 DISPID_FEED_GetItemByEffectiveId;
    internal static UInt32 DISPID_FEED_LastItemDownloadTime;
    internal static UInt32 DISPID_FEED_Username;
    internal static UInt32 DISPID_FEED_Password;
    internal static UInt32 DISPID_FEED_SetCredentials;
    internal static UInt32 DISPID_FEED_ClearCredentials;
    internal static UInt32 DISPID_FEEDITEM_Xml;
    internal static UInt32 DISPID_FEEDITEM_Title;
    internal static UInt32 DISPID_FEEDITEM_Link;
    internal static UInt32 DISPID_FEEDITEM_Guid;
    internal static UInt32 DISPID_FEEDITEM_Description;
    internal static UInt32 DISPID_FEEDITEM_PubDate;
    internal static UInt32 DISPID_FEEDITEM_Comments;
    internal static UInt32 DISPID_FEEDITEM_Author;
    internal static UInt32 DISPID_FEEDITEM_Enclosure;
    internal static UInt32 DISPID_FEEDITEM_IsRead;
    internal static UInt32 DISPID_FEEDITEM_LocalId;
    internal static UInt32 DISPID_FEEDITEM_Parent;
    internal static UInt32 DISPID_FEEDITEM_Delete;
    internal static UInt32 DISPID_FEEDITEM_DownloadUrl;
    internal static UInt32 DISPID_FEEDITEM_LastDownloadTime;
    internal static UInt32 DISPID_FEEDITEM_Modified;
    internal static UInt32 DISPID_FEEDITEM_EffectiveId;
    internal static UInt32 DISPID_FEEDENCLOSURE_Url;
    internal static UInt32 DISPID_FEEDENCLOSURE_Type;
    internal static UInt32 DISPID_FEEDENCLOSURE_Length;
    internal static UInt32 DISPID_FEEDENCLOSURE_AsyncDownload;
    internal static UInt32 DISPID_FEEDENCLOSURE_CancelAsyncDownload;
    internal static UInt32 DISPID_FEEDENCLOSURE_DownloadStatus;
    internal static UInt32 DISPID_FEEDENCLOSURE_LastDownloadError;
    internal static UInt32 DISPID_FEEDENCLOSURE_LocalPath;
    internal static UInt32 DISPID_FEEDENCLOSURE_Parent;
    internal static UInt32 DISPID_FEEDENCLOSURE_DownloadUrl;
    internal static UInt32 DISPID_FEEDENCLOSURE_DownloadMimeType;
    internal static UInt32 DISPID_FEEDENCLOSURE_RemoveFile;
    internal static UInt32 DISPID_FEEDENCLOSURE_SetFile;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_Error;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FolderAdded;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FolderDeleted;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FolderRenamed;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FolderMovedFrom;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FolderMovedTo;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedAdded;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedDeleted;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedRenamed;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedUrlChanged;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedMovedFrom;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedMovedTo;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedDownloading;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted;
    internal static UInt32 DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged;
    internal static UInt32 DISPID_FEEDEVENTS_Error;
    internal static UInt32 DISPID_FEEDEVENTS_FeedDeleted;
    internal static UInt32 DISPID_FEEDEVENTS_FeedRenamed;
    internal static UInt32 DISPID_FEEDEVENTS_FeedUrlChanged;
    internal static UInt32 DISPID_FEEDEVENTS_FeedMoved;
    internal static UInt32 DISPID_FEEDEVENTS_FeedDownloading;
    internal static UInt32 DISPID_FEEDEVENTS_FeedDownloadCompleted;
    internal static UInt32 DISPID_FEEDEVENTS_FeedItemCountChanged;
    internal static UInt32 DISPID_DELTA;
    internal static UInt32 DISPID_WMPCORE_BASE;
    internal static UInt32 DISPID_WMPCORE_URL;
    internal static UInt32 DISPID_WMPCORE_OPENSTATE;
    internal static UInt32 DISPID_WMPCORE_CLOSE;
    internal static UInt32 DISPID_WMPCORE_CONTROLS;
    internal static UInt32 DISPID_WMPCORE_SETTINGS;
    internal static UInt32 DISPID_WMPCORE_CURRENTMEDIA;
    internal static UInt32 DISPID_WMPCORE_NETWORK;
    internal static UInt32 DISPID_WMPCORE_MEDIACOLLECTION;
    internal static UInt32 DISPID_WMPCORE_PLAYLISTCOLLECTION;
    internal static UInt32 DISPID_WMPCORE_PLAYSTATE;
    internal static UInt32 DISPID_WMPCORE_VERSIONINFO;
    internal static UInt32 DISPID_WMPCORE_LAUNCHURL;
    internal static UInt32 DISPID_WMPCORE_CURRENTPLAYLIST;
    internal static UInt32 DISPID_WMPCORE_CDROMCOLLECTION;
    internal static UInt32 DISPID_WMPCORE_CLOSEDCAPTION;
    internal static UInt32 DISPID_WMPCORE_ISONLINE;
    internal static UInt32 DISPID_WMPCORE_ERROR;
    internal static UInt32 DISPID_WMPCORE_STATUS;
    internal static UInt32 DISPID_WMPCORE_LAST;
    internal static UInt32 DISPID_WMPOCX_BASE;
    internal static UInt32 DISPID_WMPOCX_ENABLED;
    internal static UInt32 DISPID_WMPOCX_TRANSPARENTATSTART;
    internal static UInt32 DISPID_WMPOCX_FULLSCREEN;
    internal static UInt32 DISPID_WMPOCX_ENABLECONTEXTMENU;
    internal static UInt32 DISPID_WMPOCX_UIMODE;
    internal static UInt32 DISPID_WMPOCX_LAST;
    internal static UInt32 DISPID_WMPOCX2_BASE;
    internal static UInt32 DISPID_WMPOCX2_STRETCHTOFIT;
    internal static UInt32 DISPID_WMPOCX2_WINDOWLESSVIDEO;
    internal static UInt32 DISPID_WMPOCX4_ISREMOTE;
    internal static UInt32 DISPID_WMPOCX4_PLAYERAPPLICATION;
    internal static UInt32 DISPID_WMPOCX4_OPENPLAYER;
    internal static UInt32 DISPID_WMPCORE2_BASE;
    internal static UInt32 DISPID_WMPCORE2_DVD;
    internal static UInt32 DISPID_WMPCORE3_NEWPLAYLIST;
    internal static UInt32 DISPID_WMPCORE3_NEWMEDIA;
    internal static UInt32 DISPID_WMPCONTROLS_PLAY;
    internal static UInt32 DISPID_WMPCONTROLS_STOP;
    internal static UInt32 DISPID_WMPCONTROLS_PAUSE;
    internal static UInt32 DISPID_WMPCONTROLS_FASTFORWARD;
    internal static UInt32 DISPID_WMPCONTROLS_FASTREVERSE;
    internal static UInt32 DISPID_WMPCONTROLS_CURRENTPOSITION;
    internal static UInt32 DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING;
    internal static UInt32 DISPID_WMPCONTROLS_NEXT;
    internal static UInt32 DISPID_WMPCONTROLS_PREVIOUS;
    internal static UInt32 DISPID_WMPCONTROLS_CURRENTITEM;
    internal static UInt32 DISPID_WMPCONTROLS_CURRENTMARKER;
    internal static UInt32 DISPID_WMPCONTROLS_ISAVAILABLE;
    internal static UInt32 DISPID_WMPCONTROLS_PLAYITEM;
    internal static UInt32 DISPID_WMPCONTROLS2_STEP;
    internal static UInt32 DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT;
    internal static UInt32 DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID;
    internal static UInt32 DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC;
    internal static UInt32 DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE;
    internal static UInt32 DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX;
    internal static UInt32 DISPID_WMPCONTROLS3_GETLANGUAGENAME;
    internal static UInt32 DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE;
    internal static UInt32 DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION;
    internal static UInt32 DISPID_WMPSETTINGS_AUTOSTART;
    internal static UInt32 DISPID_WMPSETTINGS_BALANCE;
    internal static UInt32 DISPID_WMPSETTINGS_INVOKEURLS;
    internal static UInt32 DISPID_WMPSETTINGS_MUTE;
    internal static UInt32 DISPID_WMPSETTINGS_PLAYCOUNT;
    internal static UInt32 DISPID_WMPSETTINGS_RATE;
    internal static UInt32 DISPID_WMPSETTINGS_VOLUME;
    internal static UInt32 DISPID_WMPSETTINGS_BASEURL;
    internal static UInt32 DISPID_WMPSETTINGS_DEFAULTFRAME;
    internal static UInt32 DISPID_WMPSETTINGS_GETMODE;
    internal static UInt32 DISPID_WMPSETTINGS_SETMODE;
    internal static UInt32 DISPID_WMPSETTINGS_ENABLEERRORDIALOGS;
    internal static UInt32 DISPID_WMPSETTINGS_ISAVAILABLE;
    internal static UInt32 DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE;
    internal static UInt32 DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS;
    internal static UInt32 DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS;
    internal static UInt32 DISPID_WMPPLAYLIST_COUNT;
    internal static UInt32 DISPID_WMPPLAYLIST_NAME;
    internal static UInt32 DISPID_WMPPLAYLIST_GETITEMINFO;
    internal static UInt32 DISPID_WMPPLAYLIST_SETITEMINFO;
    internal static UInt32 DISPID_WMPPLAYLIST_CLEAR;
    internal static UInt32 DISPID_WMPPLAYLIST_INSERTITEM;
    internal static UInt32 DISPID_WMPPLAYLIST_APPENDITEM;
    internal static UInt32 DISPID_WMPPLAYLIST_REMOVEITEM;
    internal static UInt32 DISPID_WMPPLAYLIST_MOVEITEM;
    internal static UInt32 DISPID_WMPPLAYLIST_ATTRIBUTECOUNT;
    internal static UInt32 DISPID_WMPPLAYLIST_ATTRIBUTENAME;
    internal static UInt32 DISPID_WMPPLAYLIST_ITEM;
    internal static UInt32 DISPID_WMPPLAYLIST_ISIDENTICAL;
    internal static UInt32 DISPID_WMPCDROM_DRIVESPECIFIER;
    internal static UInt32 DISPID_WMPCDROM_PLAYLIST;
    internal static UInt32 DISPID_WMPCDROM_EJECT;
    internal static UInt32 DISPID_WMPCDROMCOLLECTION_COUNT;
    internal static UInt32 DISPID_WMPCDROMCOLLECTION_ITEM;
    internal static UInt32 DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER;
    internal static UInt32 DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS;
    internal static UInt32 DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION_COUNT;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION_ITEM;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_ADD;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETALL;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETBYNAME;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETBYGENRE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETBYALBUM;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_REMOVE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_NEWQUERY;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_STARTMONITORING;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_STOPMONITORING;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_STARTSEARCH;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_STOPSEARCH;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_SETDELETED;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_ISDELETED;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE;
    internal static UInt32 DISPID_WMPPLAYLISTARRAY_COUNT;
    internal static UInt32 DISPID_WMPPLAYLISTARRAY_ITEM;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_GETALL;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_REMOVE;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_SETDELETED;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_ISDELETED;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST;
    internal static UInt32 DISPID_WMPMEDIA_SOURCEURL;
    internal static UInt32 DISPID_WMPMEDIA_IMAGESOURCEWIDTH;
    internal static UInt32 DISPID_WMPMEDIA_IMAGESOURCEHEIGHT;
    internal static UInt32 DISPID_WMPMEDIA_MARKERCOUNT;
    internal static UInt32 DISPID_WMPMEDIA_GETMARKERTIME;
    internal static UInt32 DISPID_WMPMEDIA_GETMARKERNAME;
    internal static UInt32 DISPID_WMPMEDIA_DURATION;
    internal static UInt32 DISPID_WMPMEDIA_DURATIONSTRING;
    internal static UInt32 DISPID_WMPMEDIA_ATTRIBUTECOUNT;
    internal static UInt32 DISPID_WMPMEDIA_GETATTRIBUTENAME;
    internal static UInt32 DISPID_WMPMEDIA_GETITEMINFO;
    internal static UInt32 DISPID_WMPMEDIA_SETITEMINFO;
    internal static UInt32 DISPID_WMPMEDIA_ISIDENTICAL;
    internal static UInt32 DISPID_WMPMEDIA_NAME;
    internal static UInt32 DISPID_WMPMEDIA_GETITEMINFOBYATOM;
    internal static UInt32 DISPID_WMPMEDIA_ISMEMBEROF;
    internal static UInt32 DISPID_WMPMEDIA_ISREADONLYITEM;
    internal static UInt32 DISPID_WMPMEDIA2_ERROR;
    internal static UInt32 DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE;
    internal static UInt32 DISPID_WMPMEDIA3_GETITEMINFOBYTYPE;
    internal static UInt32 DISPID_WMPNETWORK_BANDWIDTH;
    internal static UInt32 DISPID_WMPNETWORK_RECOVEREDPACKETS;
    internal static UInt32 DISPID_WMPNETWORK_SOURCEPROTOCOL;
    internal static UInt32 DISPID_WMPNETWORK_RECEIVEDPACKETS;
    internal static UInt32 DISPID_WMPNETWORK_LOSTPACKETS;
    internal static UInt32 DISPID_WMPNETWORK_RECEPTIONQUALITY;
    internal static UInt32 DISPID_WMPNETWORK_BUFFERINGCOUNT;
    internal static UInt32 DISPID_WMPNETWORK_BUFFERINGPROGRESS;
    internal static UInt32 DISPID_WMPNETWORK_BUFFERINGTIME;
    internal static UInt32 DISPID_WMPNETWORK_FRAMERATE;
    internal static UInt32 DISPID_WMPNETWORK_MAXBITRATE;
    internal static UInt32 DISPID_WMPNETWORK_BITRATE;
    internal static UInt32 DISPID_WMPNETWORK_GETPROXYSETTINGS;
    internal static UInt32 DISPID_WMPNETWORK_SETPROXYSETTINGS;
    internal static UInt32 DISPID_WMPNETWORK_GETPROXYNAME;
    internal static UInt32 DISPID_WMPNETWORK_SETPROXYNAME;
    internal static UInt32 DISPID_WMPNETWORK_GETPROXYPORT;
    internal static UInt32 DISPID_WMPNETWORK_SETPROXYPORT;
    internal static UInt32 DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST;
    internal static UInt32 DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST;
    internal static UInt32 DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL;
    internal static UInt32 DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL;
    internal static UInt32 DISPID_WMPNETWORK_MAXBANDWIDTH;
    internal static UInt32 DISPID_WMPNETWORK_DOWNLOADPROGRESS;
    internal static UInt32 DISPID_WMPNETWORK_ENCODEDFRAMERATE;
    internal static UInt32 DISPID_WMPNETWORK_FRAMESSKIPPED;
    internal static UInt32 DISPID_WMPERROR_CLEARERRORQUEUE;
    internal static UInt32 DISPID_WMPERROR_ERRORCOUNT;
    internal static UInt32 DISPID_WMPERROR_ITEM;
    internal static UInt32 DISPID_WMPERROR_WEBHELP;
    internal static UInt32 DISPID_WMPERRORITEM_ERRORCODE;
    internal static UInt32 DISPID_WMPERRORITEM_ERRORDESCRIPTION;
    internal static UInt32 DISPID_WMPERRORITEM_ERRORCONTEXT;
    internal static UInt32 DISPID_WMPERRORITEM_REMEDY;
    internal static UInt32 DISPID_WMPERRORITEM_CUSTOMURL;
    internal static UInt32 DISPID_WMPERRORITEM2_CONDITION;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION_SAMISTYLE;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION_SAMILANG;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION_SAMIFILENAME;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION_CAPTIONINGID;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION2_GETLANGNAME;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION2_GETLANGID;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME;
    internal static UInt32 DISPID_WMPDVD_ISAVAILABLE;
    internal static UInt32 DISPID_WMPDVD_DOMAIN;
    internal static UInt32 DISPID_WMPDVD_TOPMENU;
    internal static UInt32 DISPID_WMPDVD_TITLEMENU;
    internal static UInt32 DISPID_WMPDVD_BACK;
    internal static UInt32 DISPID_WMPDVD_RESUME;
    internal static UInt32 DISPID_WMPMETADATA_PICTURE_MIMETYPE;
    internal static UInt32 DISPID_WMPMETADATA_PICTURE_PICTURETYPE;
    internal static UInt32 DISPID_WMPMETADATA_PICTURE_DESCRIPTION;
    internal static UInt32 DISPID_WMPMETADATA_PICTURE_URL;
    internal static UInt32 DISPID_WMPMETADATA_TEXT_TEXT;
    internal static UInt32 DISPID_WMPMETADATA_TEXT_DESCRIPTION;
    internal static UInt32 DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION;
    internal static UInt32 DISPID_WMPPLAYERAPP_SWITCHTOCONTROL;
    internal static UInt32 DISPID_WMPPLAYERAPP_PLAYERDOCKED;
    internal static UInt32 DISPID_WMPPLAYERAPP_HASDISPLAY;
    internal static UInt32 DISPID_WMPPLAYERAPP_REMOTESTATUS;
    internal static UInt32 DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION;
    internal static UInt32 DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_ID;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_COUNT;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_ITEM;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_CLEAR;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_SOURCEURL;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_SIZE;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_TYPE;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_PROGRESS;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_PAUSE;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_RESUME;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_CANCEL;
    internal static UInt32 DISPID_WMPDOWNLOADITEM2_GETITEMINFO;
    internal static UInt32 DISPID_WMPQUERY_ADDCONDITION;
    internal static UInt32 DISPID_WMPQUERY_BEGINNEXTGROUP;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION2_CREATEQUERY;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE;
    internal static UInt32 DISPID_WMPCORE_MIN;
    internal static UInt32 DISPID_WMPCORE_MAX;
    internal static UInt32 DISPID_WMPCOREEVENT_OPENSTATECHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_STATUSCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_PLAYSTATECHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_ENDOFSTREAM;
    internal static UInt32 DISPID_WMPCOREEVENT_POSITIONCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_MARKERHIT;
    internal static UInt32 DISPID_WMPCOREEVENT_DURATIONUNITCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_SCRIPTCOMMAND;
    internal static UInt32 DISPID_WMPCOREEVENT_DISCONNECT;
    internal static UInt32 DISPID_WMPCOREEVENT_BUFFERING;
    internal static UInt32 DISPID_WMPCOREEVENT_NEWSTREAM;
    internal static UInt32 DISPID_WMPCOREEVENT_ERROR;
    internal static UInt32 DISPID_WMPCOREEVENT_WARNING;
    internal static UInt32 DISPID_WMPCOREEVENT_CDROMMEDIACHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_PLAYLISTCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE;
    internal static UInt32 DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE;
    internal static UInt32 DISPID_WMPCOREEVENT_CURRENTITEMCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED;
    internal static UInt32 DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED;
    internal static UInt32 DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE;
    internal static UInt32 DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED;
    internal static UInt32 DISPID_WMPCOREEVENT_MODECHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIAERROR;
    internal static UInt32 DISPID_WMPCOREEVENT_DOMAINCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH;
    internal static UInt32 DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED;
    internal static UInt32 DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED;
    internal static UInt32 DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION;
    internal static UInt32 DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL;
    internal static UInt32 DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE;
    internal static UInt32 DISPID_WMPOCXEVENT_PLAYERRECONNECT;
    internal static UInt32 DISPID_WMPOCXEVENT_CLICK;
    internal static UInt32 DISPID_WMPOCXEVENT_DOUBLECLICK;
    internal static UInt32 DISPID_WMPOCXEVENT_KEYDOWN;
    internal static UInt32 DISPID_WMPOCXEVENT_KEYPRESS;
    internal static UInt32 DISPID_WMPOCXEVENT_KEYUP;
    internal static UInt32 DISPID_WMPOCXEVENT_MOUSEDOWN;
    internal static UInt32 DISPID_WMPOCXEVENT_MOUSEMOVE;
    internal static UInt32 DISPID_WMPOCXEVENT_MOUSEUP;
    internal static UInt32 DISPID_WMPOCXEVENT_DEVICECONNECT;
    internal static UInt32 DISPID_WMPOCXEVENT_DEVICEDISCONNECT;
    internal static UInt32 DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE;
    internal static UInt32 DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE;
    internal static UInt32 DISPID_WMPOCXEVENT_DEVICESYNCERROR;
    internal static UInt32 DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE;
    internal static UInt32 DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE;
    internal static UInt32 DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR;
    internal static UInt32 DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE;
    internal static UInt32 DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR;
    internal static UInt32 DISPID_WMPOCXEVENT_CDROMBURNERROR;
    internal static UInt32 DISPID_WMPOCXEVENT_LIBRARYCONNECT;
    internal static UInt32 DISPID_WMPOCXEVENT_LIBRARYDISCONNECT;
    internal static UInt32 DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE;
    internal static UInt32 DISPID_WMPOCXEVENT_DEVICEESTIMATION;
    internal static UInt32 DISPID_WMPCONTROLS_BASE;
    internal static UInt32 DISPID_WMPSETTINGS_BASE;
    internal static UInt32 DISPID_WMPPLAYLIST_BASE;
    internal static UInt32 DISPID_WMPCDROM_BASE;
    internal static UInt32 DISPID_WMPCDROMCOLLECTION_BASE;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION_BASE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION_BASE;
    internal static UInt32 DISPID_WMPPLAYLISTARRAY_BASE;
    internal static UInt32 DISPID_WMPPLAYLISTCOLLECTION_BASE;
    internal static UInt32 DISPID_WMPMEDIA_BASE;
    internal static UInt32 DISPID_WMPNETWORK_BASE;
    internal static UInt32 DISPID_WMPERROR_BASE;
    internal static UInt32 DISPID_WMPERRORITEM_BASE;
    internal static UInt32 DISPID_WMPCLOSEDCAPTION_BASE;
    internal static UInt32 DISPID_WMPDVD_BASE;
    internal static UInt32 DISPID_WMPMETADATA_BASE;
    internal static UInt32 DISPID_WMPPLAYERAPP_BASE;
    internal static UInt32 DISPID_WMPDOWNLOADMANAGER_BASE;
    internal static UInt32 DISPID_WMPDOWNLOADCOLLECTION_BASE;
    internal static UInt32 DISPID_WMPDOWNLOADITEM_BASE;
    internal static UInt32 DISPID_WMPDOWNLOADITEM2_BASE;
    internal static UInt32 DISPID_WMPQUERY_BASE;
    internal static UInt32 DISPID_WMPMEDIACOLLECTION2_BASE;
    internal static UInt32 DISPID_WMPSTRINGCOLLECTION2_BASE;
    internal static UInt32 DLGC_WANTARROWS;
    internal static UInt32 DLGC_WANTTAB;
    internal static UInt32 DLGC_WANTALLKEYS;
    internal static UInt32 DLGC_WANTMESSAGE;
    internal static UInt32 DLGC_HASSETSEL;
    internal static UInt32 DLGC_DEFPUSHBUTTON;
    internal static UInt32 DLGC_UNDEFPUSHBUTTON;
    internal static UInt32 DLGC_RADIOBUTTON;
    internal static UInt32 DLGC_WANTCHARS;
    internal static UInt32 DLGC_STATIC;
    internal static UInt32 DLGC_BUTTON;
    internal static UInt32 DTM_FIRST;
    internal static UInt32 DTM_GETSYSTEMTIME;
    internal static UInt32 DTM_SETSYSTEMTIME;
    internal static UInt32 DTM_GETRANGE;
    internal static UInt32 DTM_SETRANGE;
    internal static UInt32 DTM_SETFORMATA;
    internal static UInt32 DTM_SETFORMATW;
    internal static UInt32 DTM_SETFORMAT;
    internal static UInt32 DTM_SETMCCOLOR;
    internal static UInt32 DTM_GETMCCOLOR;
    internal static UInt32 DTM_GETMONTHCAL;
    internal static UInt32 DTM_SETMCFONT;
    internal static UInt32 DTM_GETMCFONT;
    internal static UInt32 DTM_SETMCSTYLE;
    internal static UInt32 DTM_GETMCSTYLE;
    internal static UInt32 DTM_CLOSEMONTHCAL;
    internal static UInt32 DTM_GETDATETIMEPICKERINFO;
    internal static UInt32 DTM_GETIDEALSIZE;
    internal static UInt32 DTS_UPDOWN;
    internal static UInt32 DTS_SHOWNONE;
    internal static UInt32 DTS_SHORTDATEFORMAT;
    internal static UInt32 DTS_LONGDATEFORMAT;
    internal static UInt32 DTS_SHORTDATECENTURYFORMAT;
    internal static UInt32 DTS_TIMEFORMAT;
    internal static UInt32 DTS_APPCANPARSE;
    internal static UInt32 DTS_RIGHTALIGN;
    internal static UInt32 EC_VARIANT_TYPE_MASK;
    internal static UInt32 EC_VARIANT_TYPE_ARRAY;
    internal static UInt32 EC_READ_ACCESS;
    internal static UInt32 EC_WRITE_ACCESS;
    internal static UInt32 EC_OPEN_ALWAYS;
    internal static UInt32 EC_CREATE_NEW;
    internal static UInt32 EC_OPEN_EXISTING;
    internal static UInt32 EC_LEFTMARGIN;
    internal static UInt32 EC_RIGHTMARGIN;
    internal static UInt32 EC_USEFONTINFO;
    internal static UInt32 EC_SND_DEVICE_ERROR_BASE;
    internal static UInt32 EC_SNDDEV_IN_ERROR;
    internal static UInt32 EC_SNDDEV_OUT_ERROR;
    internal static UInt32 EC_SYSTEMBASE;
    internal static UInt32 EC_USER;
    internal static UInt32 EC_COMPLETE;
    internal static UInt32 EC_USERABORT;
    internal static UInt32 EC_ERRORABORT;
    internal static UInt32 EC_TIME;
    internal static UInt32 EC_REPAINT;
    internal static UInt32 EC_STREAM_ERROR_STOPPED;
    internal static UInt32 EC_STREAM_ERROR_STILLPLAYING;
    internal static UInt32 EC_ERROR_STILLPLAYING;
    internal static UInt32 EC_PALETTE_CHANGED;
    internal static UInt32 EC_VIDEO_SIZE_CHANGED;
    internal static UInt32 EC_QUALITY_CHANGE;
    internal static UInt32 EC_SHUTTING_DOWN;
    internal static UInt32 EC_CLOCK_CHANGED;
    internal static UInt32 EC_PAUSED;
    internal static UInt32 EC_OPENING_FILE;
    internal static UInt32 EC_BUFFERING_DATA;
    internal static UInt32 EC_FULLSCREEN_LOST;
    internal static UInt32 EC_ACTIVATE;
    internal static UInt32 EC_NEED_RESTART;
    internal static UInt32 EC_WINDOW_DESTROYED;
    internal static UInt32 EC_DISPLAY_CHANGED;
    internal static UInt32 EC_STARVATION;
    internal static UInt32 EC_OLE_EVENT;
    internal static UInt32 EC_NOTIFY_WINDOW;
    internal static UInt32 EC_STREAM_CONTROL_STOPPED;
    internal static UInt32 EC_STREAM_CONTROL_STARTED;
    internal static UInt32 EC_END_OF_SEGMENT;
    internal static UInt32 EC_SEGMENT_STARTED;
    internal static UInt32 EC_LENGTH_CHANGED;
    internal static UInt32 EC_DEVICE_LOST;
    internal static UInt32 EC_SAMPLE_NEEDED;
    internal static UInt32 EC_PROCESSING_LATENCY;
    internal static UInt32 EC_SAMPLE_LATENCY;
    internal static UInt32 EC_SCRUB_TIME;
    internal static UInt32 EC_STEP_COMPLETE;
    internal static UInt32 EC_TIMECODE_AVAILABLE;
    internal static UInt32 EC_EXTDEVICE_MODE_CHANGE;
    internal static UInt32 EC_STATE_CHANGE;
    internal static UInt32 EC_GRAPH_CHANGED;
    internal static UInt32 EC_CLOCK_UNSET;
    internal static UInt32 EC_VMR_RENDERDEVICE_SET;
    internal static UInt32 EC_VMR_SURFACE_FLIPPED;
    internal static UInt32 EC_VMR_RECONNECTION_FAILED;
    internal static UInt32 EC_PREPROCESS_COMPLETE;
    internal static UInt32 EC_CODECAPI_EVENT;
    internal static UInt32 EC_WMT_EVENT_BASE;
    internal static UInt32 EC_WMT_INDEX_EVENT;
    internal static UInt32 EC_WMT_EVENT;
    internal static UInt32 EC_BUILT;
    internal static UInt32 EC_UNBUILT;
    internal static UInt32 EC_SKIP_FRAMES;
    internal static UInt32 EC_PLEASE_REOPEN;
    internal static UInt32 EC_STATUS;
    internal static UInt32 EC_MARKER_HIT;
    internal static UInt32 EC_LOADSTATUS;
    internal static UInt32 EC_FILE_CLOSED;
    internal static UInt32 EC_ERRORABORTEX;
    internal static UInt32 EC_NEW_PIN;
    internal static UInt32 EC_RENDER_FINISHED;
    internal static UInt32 EC_EOS_SOON;
    internal static UInt32 EC_CONTENTPROPERTY_CHANGED;
    internal static UInt32 EC_BANDWIDTHCHANGE;
    internal static UInt32 EC_VIDEOFRAMEREADY;
    internal static UInt32 EC_DVDBASE;
    internal static UInt32 EC_DVD_DOMAIN_CHANGE;
    internal static UInt32 EC_DVD_TITLE_CHANGE;
    internal static UInt32 EC_DVD_CHAPTER_START;
    internal static UInt32 EC_DVD_AUDIO_STREAM_CHANGE;
    internal static UInt32 EC_DVD_SUBPICTURE_STREAM_CHANGE;
    internal static UInt32 EC_DVD_ANGLE_CHANGE;
    internal static UInt32 EC_DVD_BUTTON_CHANGE;
    internal static UInt32 EC_DVD_VALID_UOPS_CHANGE;
    internal static UInt32 EC_DVD_STILL_ON;
    internal static UInt32 EC_DVD_STILL_OFF;
    internal static UInt32 EC_DVD_CURRENT_TIME;
    internal static UInt32 EC_DVD_ERROR;
    internal static UInt32 EC_DVD_WARNING;
    internal static UInt32 EC_DVD_CHAPTER_AUTOSTOP;
    internal static UInt32 EC_DVD_NO_FP_PGC;
    internal static UInt32 EC_DVD_PLAYBACK_RATE_CHANGE;
    internal static UInt32 EC_DVD_PARENTAL_LEVEL_CHANGE;
    internal static UInt32 EC_DVD_PLAYBACK_STOPPED;
    internal static UInt32 EC_DVD_ANGLES_AVAILABLE;
    internal static UInt32 EC_DVD_PLAYPERIOD_AUTOSTOP;
    internal static UInt32 EC_DVD_BUTTON_AUTO_ACTIVATED;
    internal static UInt32 EC_DVD_CMD_START;
    internal static UInt32 EC_DVD_CMD_END;
    internal static UInt32 EC_DVD_DISC_EJECTED;
    internal static UInt32 EC_DVD_DISC_INSERTED;
    internal static UInt32 EC_DVD_CURRENT_HMSF_TIME;
    internal static UInt32 EC_DVD_KARAOKE_MODE;
    internal static UInt32 EC_DVD_PROGRAM_CELL_CHANGE;
    internal static UInt32 EC_DVD_TITLE_SET_CHANGE;
    internal static UInt32 EC_DVD_PROGRAM_CHAIN_CHANGE;
    internal static UInt32 EC_DVD_VOBU_Offset;
    internal static UInt32 EC_DVD_VOBU_Timestamp;
    internal static UInt32 EC_DVD_GPRM_Change;
    internal static UInt32 EC_DVD_SPRM_Change;
    internal static UInt32 EC_DVD_BeginNavigationCommands;
    internal static UInt32 EC_DVD_NavigationCommand;
    internal static UInt32 EM_SCROLLCARET;
    internal static UInt32 EM_SETLIMITTEXT;
    internal static UInt32 EM_GETLIMITTEXT;
    internal static UInt32 EM_POSFROMCHAR;
    internal static UInt32 EM_CHARFROMPOS;
    internal static UInt32 EM_SETCUEBANNER;
    internal static UInt32 EM_GETCUEBANNER;
    internal static UInt32 EM_SHOWBALLOONTIP;
    internal static UInt32 EM_HIDEBALLOONTIP;
    internal static UInt32 EM_SETHILITE;
    internal static UInt32 EM_GETHILITE;
    internal static UInt32 EM_NOSETFOCUS;
    internal static UInt32 EM_TAKEFOCUS;
    internal static UInt32 EM_SETEXTENDEDSTYLE;
    internal static UInt32 EM_GETEXTENDEDSTYLE;
    internal static UInt32 EM_SETENDOFLINE;
    internal static UInt32 EM_GETENDOFLINE;
    internal static UInt32 EM_ENABLESEARCHWEB;
    internal static UInt32 EM_SEARCHWEB;
    internal static UInt32 EM_SETCARETINDEX;
    internal static UInt32 EM_GETCARETINDEX;
    internal static UInt32 EM_FILELINEFROMCHAR;
    internal static UInt32 EM_FILELINEINDEX;
    internal static UInt32 EM_FILELINELENGTH;
    internal static UInt32 EM_GETFILELINE;
    internal static UInt32 EM_GETFILELINECOUNT;
    internal static UInt32 EM_GETSEL;
    internal static UInt32 EM_SETSEL;
    internal static UInt32 EM_GETRECT;
    internal static UInt32 EM_SETRECT;
    internal static UInt32 EM_SETRECTNP;
    internal static UInt32 EM_SCROLL;
    internal static UInt32 EM_LINESCROLL;
    internal static UInt32 EM_GETMODIFY;
    internal static UInt32 EM_SETMODIFY;
    internal static UInt32 EM_GETLINECOUNT;
    internal static UInt32 EM_LINEINDEX;
    internal static UInt32 EM_SETHANDLE;
    internal static UInt32 EM_GETHANDLE;
    internal static UInt32 EM_GETTHUMB;
    internal static UInt32 EM_LINELENGTH;
    internal static UInt32 EM_REPLACESEL;
    internal static UInt32 EM_GETLINE;
    internal static UInt32 EM_LIMITTEXT;
    internal static UInt32 EM_CANUNDO;
    internal static UInt32 EM_UNDO;
    internal static UInt32 EM_FMTLINES;
    internal static UInt32 EM_LINEFROMCHAR;
    internal static UInt32 EM_SETTABSTOPS;
    internal static UInt32 EM_SETPASSWORDCHAR;
    internal static UInt32 EM_EMPTYUNDOBUFFER;
    internal static UInt32 EM_GETFIRSTVISIBLELINE;
    internal static UInt32 EM_SETREADONLY;
    internal static UInt32 EM_SETWORDBREAKPROC;
    internal static UInt32 EM_GETWORDBREAKPROC;
    internal static UInt32 EM_GETPASSWORDCHAR;
    internal static UInt32 EM_SETMARGINS;
    internal static UInt32 EM_GETMARGINS;
    internal static UInt32 EM_SETIMESTATUS;
    internal static UInt32 EM_GETIMESTATUS;
    internal static UInt32 EM_ENABLEFEATURE;
    internal static UInt32 EM_CANPASTE;
    internal static UInt32 EM_DISPLAYBAND;
    internal static UInt32 EM_EXGETSEL;
    internal static UInt32 EM_EXLIMITTEXT;
    internal static UInt32 EM_EXLINEFROMCHAR;
    internal static UInt32 EM_EXSETSEL;
    internal static UInt32 EM_FINDTEXT;
    internal static UInt32 EM_FORMATRANGE;
    internal static UInt32 EM_GETCHARFORMAT;
    internal static UInt32 EM_GETEVENTMASK;
    internal static UInt32 EM_GETOLEINTERFACE;
    internal static UInt32 EM_GETPARAFORMAT;
    internal static UInt32 EM_GETSELTEXT;
    internal static UInt32 EM_HIDESELECTION;
    internal static UInt32 EM_PASTESPECIAL;
    internal static UInt32 EM_REQUESTRESIZE;
    internal static UInt32 EM_SELECTIONTYPE;
    internal static UInt32 EM_SETBKGNDCOLOR;
    internal static UInt32 EM_SETCHARFORMAT;
    internal static UInt32 EM_SETEVENTMASK;
    internal static UInt32 EM_SETOLECALLBACK;
    internal static UInt32 EM_SETPARAFORMAT;
    internal static UInt32 EM_SETTARGETDEVICE;
    internal static UInt32 EM_STREAMIN;
    internal static UInt32 EM_STREAMOUT;
    internal static UInt32 EM_GETTEXTRANGE;
    internal static UInt32 EM_FINDWORDBREAK;
    internal static UInt32 EM_SETOPTIONS;
    internal static UInt32 EM_GETOPTIONS;
    internal static UInt32 EM_FINDTEXTEX;
    internal static UInt32 EM_GETWORDBREAKPROCEX;
    internal static UInt32 EM_SETWORDBREAKPROCEX;
    internal static UInt32 EM_SETUNDOLIMIT;
    internal static UInt32 EM_REDO;
    internal static UInt32 EM_CANREDO;
    internal static UInt32 EM_GETUNDONAME;
    internal static UInt32 EM_GETREDONAME;
    internal static UInt32 EM_STOPGROUPTYPING;
    internal static UInt32 EM_SETTEXTMODE;
    internal static UInt32 EM_GETTEXTMODE;
    internal static UInt32 EM_AUTOURLDETECT;
    internal static UInt32 EM_GETAUTOURLDETECT;
    internal static UInt32 EM_SETPALETTE;
    internal static UInt32 EM_GETTEXTEX;
    internal static UInt32 EM_GETTEXTLENGTHEX;
    internal static UInt32 EM_SHOWSCROLLBAR;
    internal static UInt32 EM_SETTEXTEX;
    internal static UInt32 EM_SETPUNCTUATION;
    internal static UInt32 EM_GETPUNCTUATION;
    internal static UInt32 EM_SETWORDWRAPMODE;
    internal static UInt32 EM_GETWORDWRAPMODE;
    internal static UInt32 EM_SETIMECOLOR;
    internal static UInt32 EM_GETIMECOLOR;
    internal static UInt32 EM_SETIMEOPTIONS;
    internal static UInt32 EM_GETIMEOPTIONS;
    internal static UInt32 EM_CONVPOSITION;
    internal static UInt32 EM_SETLANGOPTIONS;
    internal static UInt32 EM_GETLANGOPTIONS;
    internal static UInt32 EM_GETIMECOMPMODE;
    internal static UInt32 EM_FINDTEXTW;
    internal static UInt32 EM_FINDTEXTEXW;
    internal static UInt32 EM_RECONVERSION;
    internal static UInt32 EM_SETIMEMODEBIAS;
    internal static UInt32 EM_GETIMEMODEBIAS;
    internal static UInt32 EM_SETBIDIOPTIONS;
    internal static UInt32 EM_GETBIDIOPTIONS;
    internal static UInt32 EM_SETTYPOGRAPHYOPTIONS;
    internal static UInt32 EM_GETTYPOGRAPHYOPTIONS;
    internal static UInt32 EM_SETEDITSTYLE;
    internal static UInt32 EM_GETEDITSTYLE;
    internal static UInt32 EM_OUTLINE;
    internal static UInt32 EM_GETSCROLLPOS;
    internal static UInt32 EM_SETSCROLLPOS;
    internal static UInt32 EM_SETFONTSIZE;
    internal static UInt32 EM_GETZOOM;
    internal static UInt32 EM_SETZOOM;
    internal static UInt32 EM_GETVIEWKIND;
    internal static UInt32 EM_SETVIEWKIND;
    internal static UInt32 EM_GETPAGE;
    internal static UInt32 EM_SETPAGE;
    internal static UInt32 EM_GETHYPHENATEINFO;
    internal static UInt32 EM_SETHYPHENATEINFO;
    internal static UInt32 EM_GETPAGEROTATE;
    internal static UInt32 EM_SETPAGEROTATE;
    internal static UInt32 EM_GETCTFMODEBIAS;
    internal static UInt32 EM_SETCTFMODEBIAS;
    internal static UInt32 EM_GETCTFOPENSTATUS;
    internal static UInt32 EM_SETCTFOPENSTATUS;
    internal static UInt32 EM_GETIMECOMPTEXT;
    internal static UInt32 EM_ISIME;
    internal static UInt32 EM_GETIMEPROPERTY;
    internal static UInt32 EM_GETQUERYRTFOBJ;
    internal static UInt32 EM_SETQUERYRTFOBJ;
    internal static UInt32 EM_INSERTTABLE;
    internal static UInt32 EM_GETAUTOCORRECTPROC;
    internal static UInt32 EM_SETAUTOCORRECTPROC;
    internal static UInt32 EM_CALLAUTOCORRECTPROC;
    internal static UInt32 EM_GETTABLEPARMS;
    internal static UInt32 EM_SETEDITSTYLEEX;
    internal static UInt32 EM_GETEDITSTYLEEX;
    internal static UInt32 EM_GETSTORYTYPE;
    internal static UInt32 EM_SETSTORYTYPE;
    internal static UInt32 EM_GETELLIPSISMODE;
    internal static UInt32 EM_SETELLIPSISMODE;
    internal static UInt32 EM_SETTABLEPARMS;
    internal static UInt32 EM_GETTOUCHOPTIONS;
    internal static UInt32 EM_SETTOUCHOPTIONS;
    internal static UInt32 EM_INSERTIMAGE;
    internal static UInt32 EM_SETUIANAME;
    internal static UInt32 EM_GETELLIPSISSTATE;
    internal static UInt32 EM_GETINKMODE;
    internal static UInt32 EM_SETINKMODE;
    internal static UInt32 EM_GETINKINSERTMODE;
    internal static UInt32 EM_SETINKINSERTMODE;
    internal static UInt32 EM_GETDRAWATTR;
    internal static UInt32 EM_SETDRAWATTR;
    internal static UInt32 EM_GETRECOTIMEOUT;
    internal static UInt32 EM_SETRECOTIMEOUT;
    internal static UInt32 EM_GETGESTURESTATUS;
    internal static UInt32 EM_SETGESTURESTATUS;
    internal static UInt32 EM_GETRECOGNIZER;
    internal static UInt32 EM_SETRECOGNIZER;
    internal static UInt32 EM_GETFACTOID;
    internal static UInt32 EM_SETFACTOID;
    internal static UInt32 EM_GETSELINK;
    internal static UInt32 EM_SETSELINK;
    internal static UInt32 EM_GETMOUSEICON;
    internal static UInt32 EM_SETMOUSEICON;
    internal static UInt32 EM_GETMOUSEPOINTER;
    internal static UInt32 EM_SETMOUSEPOINTER;
    internal static UInt32 EM_GETSTATUS;
    internal static UInt32 EM_RECOGNIZE;
    internal static UInt32 EM_GETUSEMOUSEFORINPUT;
    internal static UInt32 EM_SETUSEMOUSEFORINPUT;
    internal static UInt32 EM_SETSELINKDISPLAYMODE;
    internal static UInt32 EM_GETSELINKDISPLAYMODE;
    internal static UInt32 EN_FIRST;
    internal static UInt32 EN_LAST;
    internal static UInt32 EN_SEARCHWEB;
    internal static UInt32 EN_MSGFILTER;
    internal static UInt32 EN_REQUESTRESIZE;
    internal static UInt32 EN_SELCHANGE;
    internal static UInt32 EN_DROPFILES;
    internal static UInt32 EN_PROTECTED;
    internal static UInt32 EN_CORRECTTEXT;
    internal static UInt32 EN_STOPNOUNDO;
    internal static UInt32 EN_IMECHANGE;
    internal static UInt32 EN_SAVECLIPBOARD;
    internal static UInt32 EN_OLEOPFAILED;
    internal static UInt32 EN_OBJECTPOSITIONS;
    internal static UInt32 EN_LINK;
    internal static UInt32 EN_DRAGDROPDONE;
    internal static UInt32 EN_PARAGRAPHEXPANDED;
    internal static UInt32 EN_PAGECHANGE;
    internal static UInt32 EN_LOWFIRTF;
    internal static UInt32 EN_ALIGNLTR;
    internal static UInt32 EN_ALIGNRTL;
    internal static UInt32 EN_CLIPFORMAT;
    internal static UInt32 EN_STARTCOMPOSITION;
    internal static UInt32 EN_ENDCOMPOSITION;
    internal static UInt32 EN_SETFOCUS;
    internal static UInt32 EN_KILLFOCUS;
    internal static UInt32 EN_CHANGE;
    internal static UInt32 EN_UPDATE;
    internal static UInt32 EN_ERRSPACE;
    internal static UInt32 EN_MAXTEXT;
    internal static UInt32 EN_HSCROLL;
    internal static UInt32 EN_VSCROLL;
    internal static UInt32 EN_ALIGN_LTR_EC;
    internal static UInt32 EN_ALIGN_RTL_EC;
    internal static UInt32 EN_BEFORE_PASTE;
    internal static UInt32 EN_AFTER_PASTE;
    internal static int ES_EX_ALLOWEOL_CR;
    internal static int ES_EX_ALLOWEOL_LF;
    internal static int ES_EX_CONVERT_EOL_ON_PASTE;
    internal static int ES_EX_ZOOMABLE;
    internal static UInt32 ES_SAVESEL;
    internal static UInt32 ES_SUNKEN;
    internal static UInt32 ES_DISABLENOSCROLL;
    internal static UInt32 ES_SELECTIONBAR;
    internal static UInt32 ES_NOOLEDRAGDROP;
    internal static UInt32 ES_EX_NOCALLOLEINIT;
    internal static UInt32 ES_VERTICAL;
    internal static UInt32 ES_NOIME;
    internal static UInt32 ES_SELFIME;
    internal static int ES_LEFT;
    internal static int ES_CENTER;
    internal static int ES_RIGHT;
    internal static int ES_MULTILINE;
    internal static int ES_UPPERCASE;
    internal static int ES_LOWERCASE;
    internal static int ES_PASSWORD;
    internal static int ES_AUTOVSCROLL;
    internal static int ES_AUTOHSCROLL;
    internal static int ES_NOHIDESEL;
    internal static int ES_OEMCONVERT;
    internal static int ES_READONLY;
    internal static int ES_WANTRETURN;
    internal static int ES_NUMBER;
    internal static UInt32 ES_RESERVED_COM_ERROR_START;
    internal static UInt32 ES_RESERVED_COM_ERROR_END;
    internal static UInt32 ES_GENERAL_ERROR_START;
    internal static UInt32 ES_GENERAL_ERROR_END;
    internal static UInt32 ES_AUTHN_ERROR_START;
    internal static UInt32 ES_AUTHN_ERROR_END;
    internal static UInt32 ES_RESERVED_SILO_ERROR_START;
    internal static UInt32 ES_RESERVED_SILO_ERROR_END;
    internal static UInt32 ES_PW_SILO_ERROR_START;
    internal static UInt32 ES_PW_SILO_ERROR_END;
    internal static UInt32 ES_RESERVED_SILO_SPECIFIC_ERROR_START;
    internal static UInt32 ES_RESERVED_SILO_SPECIFIC_ERROR_END;
    internal static UInt32 ES_VENDOR_ERROR_START;
    internal static UInt32 ES_VENDOR_ERROR_END;
    internal static UInt32 ES_E_INVALID_RESPONSE;
    internal static UInt32 ES_E_UNPROVISIONED_HARDWARE;
    internal static UInt32 ES_E_UNSUPPORTED_HARDWARE;
    internal static UInt32 ES_E_INCOMPLETE_COMMAND;
    internal static UInt32 ES_E_BAD_SEQUENCE;
    internal static UInt32 ES_E_NO_PROBE;
    internal static UInt32 ES_E_INVALID_SILO;
    internal static UInt32 ES_E_INVALID_CAPABILITY;
    internal static UInt32 ES_E_GROUP_POLICY_FORBIDDEN_USE;
    internal static UInt32 ES_E_GROUP_POLICY_FORBIDDEN_OPERATION;
    internal static UInt32 ES_E_INVALID_PARAM_COMBINATION;
    internal static UInt32 ES_E_INVALID_PARAM_LENGTH;
    internal static UInt32 ES_E_INCONSISTENT_PARAM_LENGTH;
    internal static UInt32 ES_E_NO_AUTHENTICATION_REQUIRED;
    internal static UInt32 ES_E_INVALID_FIELD_IDENTIFIER;
    internal static UInt32 ES_E_CHALLENGE_MISMATCH;
    internal static UInt32 ES_E_CHALLENGE_SIZE_MISMATCH;
    internal static UInt32 ES_E_FRIENDLY_NAME_TOO_LONG;
    internal static UInt32 ES_E_SILO_NAME_TOO_LONG;
    internal static UInt32 ES_E_PASSWORD_TOO_LONG;
    internal static UInt32 ES_E_PASSWORD_HINT_TOO_LONG;
    internal static UInt32 ES_E_OTHER_SECURITY_PROTOCOL_ACTIVE;
    internal static UInt32 ES_E_DEVICE_DIGEST_MISSING;
    internal static UInt32 ES_E_NOT_AUTHORIZED_UNEXPECTED;
    internal static UInt32 ES_E_AUTHORIZED_UNEXPECTED;
    internal static UInt32 ES_E_PROVISIONED_UNEXPECTED;
    internal static UInt32 ES_E_UNKNOWN_DIGEST_ALGORITHM;
    internal static int fdexNameCaseSensitive;
    internal static int fdexNameEnsure;
    internal static int fdexNameImplicit;
    internal static int fdexNameCaseInsensitive;
    internal static int fdexNameInternal;
    internal static int fdexNameNoDynamicProperties;
    internal static int fdexEnumDefault;
    internal static int fdexEnumAll;
    internal static int GDI_ERROR;
    internal static UInt32 GDTR_MIN;
    internal static UInt32 GDTR_MAX;
    internal static UInt32 GET_MODULE_HANDLE_EX_FLAG_PIN;
    internal static UInt32 GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT;
    internal static UInt32 GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS;
    internal static UInt32 GMR_VISIBLE;
    internal static UInt32 GMR_DAYSTATE;
    internal static UInt32 HC_ACTION;
    internal static UInt32 HC_GETNEXT;
    internal static UInt32 HC_SKIP;
    internal static UInt32 HC_NOREMOVE;
    internal static UInt32 HC_NOREM;
    internal static UInt32 HC_SYSMODALON;
    internal static UInt32 HC_SYSMODALOFF;
    internal static UInt32 HDM_FIRST;
    internal static UInt32 HDM_GETITEMCOUNT;
    internal static UInt32 HDM_INSERTITEMA;
    internal static UInt32 HDM_INSERTITEMW;
    internal static UInt32 HDM_INSERTITEM;
    internal static UInt32 HDM_DELETEITEM;
    internal static UInt32 HDM_GETITEMA;
    internal static UInt32 HDM_GETITEMW;
    internal static UInt32 HDM_GETITEM;
    internal static UInt32 HDM_SETITEMA;
    internal static UInt32 HDM_SETITEMW;
    internal static UInt32 HDM_SETITEM;
    internal static UInt32 HDM_LAYOUT;
    internal static UInt32 HDM_HITTEST;
    internal static UInt32 HDM_GETITEMRECT;
    internal static UInt32 HDM_SETIMAGELIST;
    internal static UInt32 HDM_GETIMAGELIST;
    internal static UInt32 HDM_ORDERTOINDEX;
    internal static UInt32 HDM_CREATEDRAGIMAGE;
    internal static UInt32 HDM_GETORDERARRAY;
    internal static UInt32 HDM_SETORDERARRAY;
    internal static UInt32 HDM_SETHOTDIVIDER;
    internal static UInt32 HDM_SETBITMAPMARGIN;
    internal static UInt32 HDM_GETBITMAPMARGIN;
    internal static UInt32 HDM_SETUNICODEFORMAT;
    internal static UInt32 HDM_GETUNICODEFORMAT;
    internal static UInt32 HDM_SETFILTERCHANGETIMEOUT;
    internal static UInt32 HDM_EDITFILTER;
    internal static UInt32 HDM_CLEARFILTER;
    internal static UInt32 HDM_GETITEMDROPDOWNRECT;
    internal static UInt32 HDM_GETOVERFLOWRECT;
    internal static UInt32 HDM_GETFOCUSEDITEM;
    internal static UInt32 HDM_SETFOCUSEDITEM;
    internal static UInt32 HTTP_TRACE_EVENT_FLAG_STATIC_DESCRIPTIVE_FIELDS;
    internal static UInt32 HTTP_TRACE_LEVEL_START;
    internal static UInt32 HTTP_TRACE_LEVEL_END;
    internal static int HTERROR;
    internal static int HTTRANSPARENT;
    internal static UInt32 HTNOWHERE;
    internal static UInt32 HTCLIENT;
    internal static UInt32 HTCAPTION;
    internal static UInt32 HTSYSMENU;
    internal static UInt32 HTGROWBOX;
    internal static UInt32 HTSIZE;
    internal static UInt32 HTMENU;
    internal static UInt32 HTHSCROLL;
    internal static UInt32 HTVSCROLL;
    internal static UInt32 HTMINBUTTON;
    internal static UInt32 HTMAXBUTTON;
    internal static UInt32 HTLEFT;
    internal static UInt32 HTRIGHT;
    internal static UInt32 HTTOP;
    internal static UInt32 HTTOPLEFT;
    internal static UInt32 HTTOPRIGHT;
    internal static UInt32 HTBOTTOM;
    internal static UInt32 HTBOTTOMLEFT;
    internal static UInt32 HTBOTTOMRIGHT;
    internal static UInt32 HTBORDER;
    internal static UInt32 HTREDUCE;
    internal static UInt32 HTZOOM;
    internal static UInt32 HTSIZEFIRST;
    internal static UInt32 HTSIZELAST;
    internal static UInt32 HTOBJECT;
    internal static UInt32 HTCLOSE;
    internal static UInt32 HTHELP;
    internal static UInt32 HT_PATSIZE_2x2;
    internal static UInt32 HT_PATSIZE_2x2_M;
    internal static UInt32 HT_PATSIZE_4x4;
    internal static UInt32 HT_PATSIZE_4x4_M;
    internal static UInt32 HT_PATSIZE_6x6;
    internal static UInt32 HT_PATSIZE_6x6_M;
    internal static UInt32 HT_PATSIZE_8x8;
    internal static UInt32 HT_PATSIZE_8x8_M;
    internal static UInt32 HT_PATSIZE_10x10;
    internal static UInt32 HT_PATSIZE_10x10_M;
    internal static UInt32 HT_PATSIZE_12x12;
    internal static UInt32 HT_PATSIZE_12x12_M;
    internal static UInt32 HT_PATSIZE_14x14;
    internal static UInt32 HT_PATSIZE_14x14_M;
    internal static UInt32 HT_PATSIZE_16x16;
    internal static UInt32 HT_PATSIZE_16x16_M;
    internal static UInt32 HT_PATSIZE_SUPERCELL;
    internal static UInt32 HT_PATSIZE_SUPERCELL_M;
    internal static UInt32 HT_PATSIZE_USER;
    internal static UInt32 HT_PATSIZE_MAX_INDEX;
    internal static UInt32 HT_PATSIZE_DEFAULT;
    internal static UInt32 HT_USERPAT_CX_MIN;
    internal static UInt32 HT_USERPAT_CX_MAX;
    internal static UInt32 HT_USERPAT_CY_MIN;
    internal static UInt32 HT_USERPAT_CY_MAX;
    internal static UInt32 HT_FORMAT_1BPP;
    internal static UInt32 HT_FORMAT_4BPP;
    internal static UInt32 HT_FORMAT_4BPP_IRGB;
    internal static UInt32 HT_FORMAT_8BPP;
    internal static UInt32 HT_FORMAT_16BPP;
    internal static UInt32 HT_FORMAT_24BPP;
    internal static UInt32 HT_FORMAT_32BPP;
    internal static UInt32 HT_FLAG_SQUARE_DEVICE_PEL;
    internal static UInt32 HT_FLAG_HAS_BLACK_DYE;
    internal static UInt32 HT_FLAG_ADDITIVE_PRIMS;
    internal static UInt32 HT_FLAG_USE_8BPP_BITMASK;
    internal static UInt32 HT_FLAG_INK_HIGH_ABSORPTION;
    internal static UInt32 HT_FLAG_INK_ABSORPTION_INDICES;
    internal static UInt32 HT_FLAG_DO_DEVCLR_XFORM;
    internal static UInt32 HT_FLAG_OUTPUT_CMY;
    internal static UInt32 HT_FLAG_PRINT_DRAFT_MODE;
    internal static UInt32 HT_FLAG_INVERT_8BPP_BITMASK_IDX;
    internal static UInt32 HT_FLAG_8BPP_CMY332_MASK;
    internal static UInt32 HT_FLAG_INK_ABSORPTION_IDX0;
    internal static UInt32 HT_FLAG_INK_ABSORPTION_IDX1;
    internal static UInt32 HT_FLAG_INK_ABSORPTION_IDX2;
    internal static UInt32 HT_FLAG_INK_ABSORPTION_IDX3;
    internal static UInt32 HT_FLAG_NORMAL_INK_ABSORPTION;
    internal static UInt32 HT_FLAG_LOW_INK_ABSORPTION;
    internal static UInt32 HT_FLAG_LOWER_INK_ABSORPTION;
    internal static UInt32 HT_FLAG_LOWEST_INK_ABSORPTION;
    internal static UInt32 HTTP_PROTOCOL_UUID16;
    internal static UInt32 HTMLDLG_NOUI;
    internal static UInt32 HTMLDLG_MODAL;
    internal static UInt32 HTMLDLG_MODELESS;
    internal static UInt32 HTMLDLG_PRINT_TEMPLATE;
    internal static UInt32 HTMLDLG_VERIFY;
    internal static UInt32 HTMLDLG_ALLOW_UNKNOWN_THREAD;
    internal static UInt32 HTTP_DEMAND_CBT;
    internal static UInt32 HTTP_MAX_SERVER_QUEUE_LENGTH;
    internal static UInt32 HTTP_MIN_SERVER_QUEUE_LENGTH;
    internal static UInt32 HTTP_AUTH_ENABLE_BASIC;
    internal static UInt32 HTTP_AUTH_ENABLE_DIGEST;
    internal static UInt32 HTTP_AUTH_ENABLE_NTLM;
    internal static UInt32 HTTP_AUTH_ENABLE_NEGOTIATE;
    internal static UInt32 HTTP_AUTH_ENABLE_KERBEROS;
    internal static UInt32 HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING;
    internal static UInt32 HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL;
    internal static UInt32 HTTP_CHANNEL_BIND_PROXY;
    internal static UInt32 HTTP_CHANNEL_BIND_PROXY_COHOSTING;
    internal static UInt32 HTTP_CHANNEL_BIND_NO_SERVICE_NAME_CHECK;
    internal static UInt32 HTTP_CHANNEL_BIND_DOTLESS_SERVICE;
    internal static UInt32 HTTP_CHANNEL_BIND_SECURE_CHANNEL_TOKEN;
    internal static UInt32 HTTP_CHANNEL_BIND_CLIENT_SERVICE;
    internal static UInt32 HTTP_LOG_FIELD_DATE;
    internal static UInt32 HTTP_LOG_FIELD_TIME;
    internal static UInt32 HTTP_LOG_FIELD_CLIENT_IP;
    internal static UInt32 HTTP_LOG_FIELD_USER_NAME;
    internal static UInt32 HTTP_LOG_FIELD_SITE_NAME;
    internal static UInt32 HTTP_LOG_FIELD_COMPUTER_NAME;
    internal static UInt32 HTTP_LOG_FIELD_SERVER_IP;
    internal static UInt32 HTTP_LOG_FIELD_METHOD;
    internal static UInt32 HTTP_LOG_FIELD_URI_STEM;
    internal static UInt32 HTTP_LOG_FIELD_URI_QUERY;
    internal static UInt32 HTTP_LOG_FIELD_STATUS;
    internal static UInt32 HTTP_LOG_FIELD_WIN32_STATUS;
    internal static UInt32 HTTP_LOG_FIELD_BYTES_SENT;
    internal static UInt32 HTTP_LOG_FIELD_BYTES_RECV;
    internal static UInt32 HTTP_LOG_FIELD_TIME_TAKEN;
    internal static UInt32 HTTP_LOG_FIELD_SERVER_PORT;
    internal static UInt32 HTTP_LOG_FIELD_USER_AGENT;
    internal static UInt32 HTTP_LOG_FIELD_COOKIE;
    internal static UInt32 HTTP_LOG_FIELD_REFERER;
    internal static UInt32 HTTP_LOG_FIELD_VERSION;
    internal static UInt32 HTTP_LOG_FIELD_HOST;
    internal static UInt32 HTTP_LOG_FIELD_SUB_STATUS;
    internal static UInt32 HTTP_LOG_FIELD_STREAM_ID;
    internal static UInt32 HTTP_LOG_FIELD_STREAM_ID_EX;
    internal static UInt32 HTTP_LOG_FIELD_TRANSPORT_TYPE;
    internal static UInt32 HTTP_LOG_FIELD_CLIENT_PORT;
    internal static UInt32 HTTP_LOG_FIELD_URI;
    internal static UInt32 HTTP_LOG_FIELD_SITE_ID;
    internal static UInt32 HTTP_LOG_FIELD_REASON;
    internal static UInt32 HTTP_LOG_FIELD_QUEUE_NAME;
    internal static UInt32 HTTP_LOG_FIELD_CORRELATION_ID;
    internal static UInt32 HTTP_LOG_FIELD_FAULT_CODE;
    internal static UInt32 HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER;
    internal static UInt32 HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION;
    internal static UInt32 HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY;
    internal static UInt32 HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY;
    internal static UInt32 HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING;
    internal static UInt32 HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER;
    internal static UInt32 HTTP_CREATE_REQUEST_QUEUE_FLAG_DELEGATION;
    internal static UInt32 HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_DISCONNECT;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_MORE_DATA;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_OPAQUE;
    internal static UInt32 HTTP_SEND_RESPONSE_FLAG_GOAWAY;
    internal static UInt32 HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE;
    internal static UInt32 HTTP_URL_FLAG_REMOVE_ALL;
    internal static UInt32 HTTP_RECEIVE_SECURE_CHANNEL_TOKEN;
    internal static UInt32 HTTP_RECEIVE_FULL_CHAIN;
    internal static UInt32 HTTP_REQUEST_SIZING_INFO_FLAG_TCP_FAST_OPEN;
    internal static UInt32 HTTP_REQUEST_SIZING_INFO_FLAG_TLS_SESSION_RESUMPTION;
    internal static UInt32 HTTP_REQUEST_SIZING_INFO_FLAG_TLS_FALSE_START;
    internal static UInt32 HTTP_REQUEST_SIZING_INFO_FLAG_FIRST_REQUEST;
    internal static UInt32 HTTP_REQUEST_AUTH_FLAG_TOKEN_FOR_CACHED_CRED;
    internal static UInt32 HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS;
    internal static UInt32 HTTP_REQUEST_FLAG_IP_ROUTED;
    internal static UInt32 HTTP_REQUEST_FLAG_HTTP2;
    internal static UInt32 HTTP_REQUEST_FLAG_HTTP3;
    internal static UInt32 HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE;
    internal static UInt32 HTTP_RESPONSE_FLAG_MORE_ENTITY_BODY_EXISTS;
    internal static UInt32 HTTP_RESPONSE_INFO_FLAGS_PRESERVE_ORDER;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_REJECT;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_HTTP2;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_QUIC;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS13;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_OCSP_STAPLING;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_TOKEN_BINDING;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_LOG_EXTENDED_EVENTS;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_LEGACY_TLS;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_SESSION_TICKET;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS12;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_CLIENT_CORRELATION;
    internal static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_SESSION_ID;
    internal static UInt32 HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH;
    internal static UInt32 HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED;
    internal static UInt32 HTTP_REQUEST_PROPERTY_SNI_FLAG_NO_SNI;
    internal static string HTTP_VERSION;
    internal static UInt32 HTTPREQUEST_PROXYSETTING_DEFAULT;
    internal static UInt32 HTTPREQUEST_PROXYSETTING_PRECONFIG;
    internal static UInt32 HTTPREQUEST_PROXYSETTING_DIRECT;
    internal static UInt32 HTTPREQUEST_PROXYSETTING_PROXY;
    internal static UInt32 HTTPREQUEST_SETCREDENTIALS_FOR_SERVER;
    internal static UInt32 HTTPREQUEST_SETCREDENTIALS_FOR_PROXY;
    internal static UInt32 HTTP_STATUS_CONTINUE;
    internal static UInt32 HTTP_STATUS_SWITCH_PROTOCOLS;
    internal static UInt32 HTTP_STATUS_OK;
    internal static UInt32 HTTP_STATUS_CREATED;
    internal static UInt32 HTTP_STATUS_ACCEPTED;
    internal static UInt32 HTTP_STATUS_PARTIAL;
    internal static UInt32 HTTP_STATUS_NO_CONTENT;
    internal static UInt32 HTTP_STATUS_RESET_CONTENT;
    internal static UInt32 HTTP_STATUS_PARTIAL_CONTENT;
    internal static UInt32 HTTP_STATUS_WEBDAV_MULTI_STATUS;
    internal static UInt32 HTTP_STATUS_AMBIGUOUS;
    internal static UInt32 HTTP_STATUS_MOVED;
    internal static UInt32 HTTP_STATUS_REDIRECT;
    internal static UInt32 HTTP_STATUS_REDIRECT_METHOD;
    internal static UInt32 HTTP_STATUS_NOT_MODIFIED;
    internal static UInt32 HTTP_STATUS_USE_PROXY;
    internal static UInt32 HTTP_STATUS_REDIRECT_KEEP_VERB;
    internal static UInt32 HTTP_STATUS_PERMANENT_REDIRECT;
    internal static UInt32 HTTP_STATUS_BAD_REQUEST;
    internal static UInt32 HTTP_STATUS_DENIED;
    internal static UInt32 HTTP_STATUS_PAYMENT_REQ;
    internal static UInt32 HTTP_STATUS_FORBIDDEN;
    internal static UInt32 HTTP_STATUS_NOT_FOUND;
    internal static UInt32 HTTP_STATUS_BAD_METHOD;
    internal static UInt32 HTTP_STATUS_NONE_ACCEPTABLE;
    internal static UInt32 HTTP_STATUS_PROXY_AUTH_REQ;
    internal static UInt32 HTTP_STATUS_REQUEST_TIMEOUT;
    internal static UInt32 HTTP_STATUS_CONFLICT;
    internal static UInt32 HTTP_STATUS_GONE;
    internal static UInt32 HTTP_STATUS_LENGTH_REQUIRED;
    internal static UInt32 HTTP_STATUS_PRECOND_FAILED;
    internal static UInt32 HTTP_STATUS_REQUEST_TOO_LARGE;
    internal static UInt32 HTTP_STATUS_URI_TOO_LONG;
    internal static UInt32 HTTP_STATUS_UNSUPPORTED_MEDIA;
    internal static UInt32 HTTP_STATUS_RETRY_WITH;
    internal static UInt32 HTTP_STATUS_SERVER_ERROR;
    internal static UInt32 HTTP_STATUS_NOT_SUPPORTED;
    internal static UInt32 HTTP_STATUS_BAD_GATEWAY;
    internal static UInt32 HTTP_STATUS_SERVICE_UNAVAIL;
    internal static UInt32 HTTP_STATUS_GATEWAY_TIMEOUT;
    internal static UInt32 HTTP_STATUS_VERSION_NOT_SUP;
    internal static UInt32 HTTP_STATUS_FIRST;
    internal static UInt32 HTTP_STATUS_LAST;
    internal static UInt32 HTTP_COOKIES_SAME_SITE_LEVEL_UNKNOWN;
    internal static UInt32 HTTP_COOKIES_SAME_SITE_LEVEL_SAME_SITE;
    internal static UInt32 HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE_LAX;
    internal static UInt32 HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE;
    internal static UInt32 HTTP_COOKIES_SAME_SITE_LEVEL_MAX;
    internal static UInt32 HTTP_PROTOCOL_FLAG_HTTP2;
    internal static UInt32 HTTP_PROTOCOL_MASK;
    internal static UInt32 HTTP_MAJOR_VERSION;
    internal static UInt32 HTTP_MINOR_VERSION;
    internal static string HTTP_VERSIONA;
    internal static string HTTP_VERSIONW;
    internal static UInt32 HTTP_QUERY_MIME_VERSION;
    internal static UInt32 HTTP_QUERY_CONTENT_TYPE;
    internal static UInt32 HTTP_QUERY_CONTENT_TRANSFER_ENCODING;
    internal static UInt32 HTTP_QUERY_CONTENT_ID;
    internal static UInt32 HTTP_QUERY_CONTENT_DESCRIPTION;
    internal static UInt32 HTTP_QUERY_CONTENT_LENGTH;
    internal static UInt32 HTTP_QUERY_CONTENT_LANGUAGE;
    internal static UInt32 HTTP_QUERY_ALLOW;
    internal static UInt32 HTTP_QUERY_PUBLIC;
    internal static UInt32 HTTP_QUERY_DATE;
    internal static UInt32 HTTP_QUERY_EXPIRES;
    internal static UInt32 HTTP_QUERY_LAST_MODIFIED;
    internal static UInt32 HTTP_QUERY_MESSAGE_ID;
    internal static UInt32 HTTP_QUERY_URI;
    internal static UInt32 HTTP_QUERY_DERIVED_FROM;
    internal static UInt32 HTTP_QUERY_COST;
    internal static UInt32 HTTP_QUERY_LINK;
    internal static UInt32 HTTP_QUERY_PRAGMA;
    internal static UInt32 HTTP_QUERY_VERSION;
    internal static UInt32 HTTP_QUERY_STATUS_CODE;
    internal static UInt32 HTTP_QUERY_STATUS_TEXT;
    internal static UInt32 HTTP_QUERY_RAW_HEADERS;
    internal static UInt32 HTTP_QUERY_RAW_HEADERS_CRLF;
    internal static UInt32 HTTP_QUERY_CONNECTION;
    internal static UInt32 HTTP_QUERY_ACCEPT;
    internal static UInt32 HTTP_QUERY_ACCEPT_CHARSET;
    internal static UInt32 HTTP_QUERY_ACCEPT_ENCODING;
    internal static UInt32 HTTP_QUERY_ACCEPT_LANGUAGE;
    internal static UInt32 HTTP_QUERY_AUTHORIZATION;
    internal static UInt32 HTTP_QUERY_CONTENT_ENCODING;
    internal static UInt32 HTTP_QUERY_FORWARDED;
    internal static UInt32 HTTP_QUERY_FROM;
    internal static UInt32 HTTP_QUERY_IF_MODIFIED_SINCE;
    internal static UInt32 HTTP_QUERY_LOCATION;
    internal static UInt32 HTTP_QUERY_ORIG_URI;
    internal static UInt32 HTTP_QUERY_REFERER;
    internal static UInt32 HTTP_QUERY_RETRY_AFTER;
    internal static UInt32 HTTP_QUERY_SERVER;
    internal static UInt32 HTTP_QUERY_TITLE;
    internal static UInt32 HTTP_QUERY_USER_AGENT;
    internal static UInt32 HTTP_QUERY_WWW_AUTHENTICATE;
    internal static UInt32 HTTP_QUERY_PROXY_AUTHENTICATE;
    internal static UInt32 HTTP_QUERY_ACCEPT_RANGES;
    internal static UInt32 HTTP_QUERY_SET_COOKIE;
    internal static UInt32 HTTP_QUERY_COOKIE;
    internal static UInt32 HTTP_QUERY_REQUEST_METHOD;
    internal static UInt32 HTTP_QUERY_REFRESH;
    internal static UInt32 HTTP_QUERY_CONTENT_DISPOSITION;
    internal static UInt32 HTTP_QUERY_AGE;
    internal static UInt32 HTTP_QUERY_CACHE_CONTROL;
    internal static UInt32 HTTP_QUERY_CONTENT_BASE;
    internal static UInt32 HTTP_QUERY_CONTENT_LOCATION;
    internal static UInt32 HTTP_QUERY_CONTENT_MD5;
    internal static UInt32 HTTP_QUERY_CONTENT_RANGE;
    internal static UInt32 HTTP_QUERY_ETAG;
    internal static UInt32 HTTP_QUERY_HOST;
    internal static UInt32 HTTP_QUERY_IF_MATCH;
    internal static UInt32 HTTP_QUERY_IF_NONE_MATCH;
    internal static UInt32 HTTP_QUERY_IF_RANGE;
    internal static UInt32 HTTP_QUERY_IF_UNMODIFIED_SINCE;
    internal static UInt32 HTTP_QUERY_MAX_FORWARDS;
    internal static UInt32 HTTP_QUERY_PROXY_AUTHORIZATION;
    internal static UInt32 HTTP_QUERY_RANGE;
    internal static UInt32 HTTP_QUERY_TRANSFER_ENCODING;
    internal static UInt32 HTTP_QUERY_UPGRADE;
    internal static UInt32 HTTP_QUERY_VARY;
    internal static UInt32 HTTP_QUERY_VIA;
    internal static UInt32 HTTP_QUERY_WARNING;
    internal static UInt32 HTTP_QUERY_EXPECT;
    internal static UInt32 HTTP_QUERY_PROXY_CONNECTION;
    internal static UInt32 HTTP_QUERY_UNLESS_MODIFIED_SINCE;
    internal static UInt32 HTTP_QUERY_ECHO_REQUEST;
    internal static UInt32 HTTP_QUERY_ECHO_REPLY;
    internal static UInt32 HTTP_QUERY_ECHO_HEADERS;
    internal static UInt32 HTTP_QUERY_ECHO_HEADERS_CRLF;
    internal static UInt32 HTTP_QUERY_PROXY_SUPPORT;
    internal static UInt32 HTTP_QUERY_AUTHENTICATION_INFO;
    internal static UInt32 HTTP_QUERY_PASSPORT_URLS;
    internal static UInt32 HTTP_QUERY_PASSPORT_CONFIG;
    internal static UInt32 HTTP_QUERY_X_CONTENT_TYPE_OPTIONS;
    internal static UInt32 HTTP_QUERY_P3P;
    internal static UInt32 HTTP_QUERY_X_P2P_PEERDIST;
    internal static UInt32 HTTP_QUERY_TRANSLATE;
    internal static UInt32 HTTP_QUERY_X_UA_COMPATIBLE;
    internal static UInt32 HTTP_QUERY_DEFAULT_STYLE;
    internal static UInt32 HTTP_QUERY_X_FRAME_OPTIONS;
    internal static UInt32 HTTP_QUERY_X_XSS_PROTECTION;
    internal static UInt32 HTTP_QUERY_SET_COOKIE2;
    internal static UInt32 HTTP_QUERY_DO_NOT_TRACK;
    internal static UInt32 HTTP_QUERY_KEEP_ALIVE;
    internal static UInt32 HTTP_QUERY_HTTP2_SETTINGS;
    internal static UInt32 HTTP_QUERY_STRICT_TRANSPORT_SECURITY;
    internal static UInt32 HTTP_QUERY_TOKEN_BINDING;
    internal static UInt32 HTTP_QUERY_INCLUDE_REFERRED_TOKEN_BINDING_ID;
    internal static UInt32 HTTP_QUERY_INCLUDE_REFERER_TOKEN_BINDING_ID;
    internal static UInt32 HTTP_QUERY_PUBLIC_KEY_PINS;
    internal static UInt32 HTTP_QUERY_PUBLIC_KEY_PINS_REPORT_ONLY;
    internal static UInt32 HTTP_QUERY_MAX;
    internal static UInt32 HTTP_QUERY_CUSTOM;
    internal static UInt32 HTTP_QUERY_FLAG_REQUEST_HEADERS;
    internal static UInt32 HTTP_QUERY_FLAG_SYSTEMTIME;
    internal static UInt32 HTTP_QUERY_FLAG_NUMBER;
    internal static UInt32 HTTP_QUERY_FLAG_COALESCE;
    internal static UInt32 HTTP_QUERY_FLAG_NUMBER64;
    internal static UInt32 HTTP_QUERY_FLAG_COALESCE_WITH_COMMA;
    internal static UInt32 HTTP_STATUS_MISDIRECTED_REQUEST;
    internal static UInt32 HTTP_ADDREQ_INDEX_MASK;
    internal static UInt32 HTTP_ADDREQ_FLAGS_MASK;
    internal static UInt32 HTTP_ADDREQ_FLAG_RESPONSE_HEADERS;
    internal static UInt32 HTTP_ADDREQ_FLAG_ALLOW_EMPTY_VALUES;
    internal static UInt32 HTTP_1_1_CACHE_ENTRY;
    internal static UInt32 HTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH;
    internal static UInt32 HTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE;
    internal static Guid HTTPSPROV_ACTION;
    internal static string HTTPS_FINALPOLICY_FUNCTION;
    internal static string HTTPS_CHKCERT_FUNCTION;
    internal static string HTTPS_CERTTRUST_FUNCTION;
    internal static UInt32 ICON_SMALL;
    internal static UInt32 ICON_BIG;
    internal static UInt32 ICON_SMALL2;
    internal static UInt32 IDC_OLEUIHELP;
    internal static UInt32 IDC_IO_CREATENEW;
    internal static UInt32 IDC_IO_CREATEFROMFILE;
    internal static UInt32 IDC_IO_LINKFILE;
    internal static UInt32 IDC_IO_OBJECTTYPELIST;
    internal static UInt32 IDC_IO_DISPLAYASICON;
    internal static UInt32 IDC_IO_CHANGEICON;
    internal static UInt32 IDC_IO_FILE;
    internal static UInt32 IDC_IO_FILEDISPLAY;
    internal static UInt32 IDC_IO_RESULTIMAGE;
    internal static UInt32 IDC_IO_RESULTTEXT;
    internal static UInt32 IDC_IO_ICONDISPLAY;
    internal static UInt32 IDC_IO_OBJECTTYPETEXT;
    internal static UInt32 IDC_IO_FILETEXT;
    internal static UInt32 IDC_IO_FILETYPE;
    internal static UInt32 IDC_IO_INSERTCONTROL;
    internal static UInt32 IDC_IO_ADDCONTROL;
    internal static UInt32 IDC_IO_CONTROLTYPELIST;
    internal static UInt32 IDC_PS_PASTE;
    internal static UInt32 IDC_PS_PASTELINK;
    internal static UInt32 IDC_PS_SOURCETEXT;
    internal static UInt32 IDC_PS_PASTELIST;
    internal static UInt32 IDC_PS_PASTELINKLIST;
    internal static UInt32 IDC_PS_DISPLAYLIST;
    internal static UInt32 IDC_PS_DISPLAYASICON;
    internal static UInt32 IDC_PS_ICONDISPLAY;
    internal static UInt32 IDC_PS_CHANGEICON;
    internal static UInt32 IDC_PS_RESULTIMAGE;
    internal static UInt32 IDC_PS_RESULTTEXT;
    internal static UInt32 IDC_CI_GROUP;
    internal static UInt32 IDC_CI_CURRENT;
    internal static UInt32 IDC_CI_CURRENTICON;
    internal static UInt32 IDC_CI_DEFAULT;
    internal static UInt32 IDC_CI_DEFAULTICON;
    internal static UInt32 IDC_CI_FROMFILE;
    internal static UInt32 IDC_CI_FROMFILEEDIT;
    internal static UInt32 IDC_CI_ICONLIST;
    internal static UInt32 IDC_CI_LABEL;
    internal static UInt32 IDC_CI_LABELEDIT;
    internal static UInt32 IDC_CI_BROWSE;
    internal static UInt32 IDC_CI_ICONDISPLAY;
    internal static UInt32 IDC_CV_OBJECTTYPE;
    internal static UInt32 IDC_CV_DISPLAYASICON;
    internal static UInt32 IDC_CV_CHANGEICON;
    internal static UInt32 IDC_CV_ACTIVATELIST;
    internal static UInt32 IDC_CV_CONVERTTO;
    internal static UInt32 IDC_CV_ACTIVATEAS;
    internal static UInt32 IDC_CV_RESULTTEXT;
    internal static UInt32 IDC_CV_CONVERTLIST;
    internal static UInt32 IDC_CV_ICONDISPLAY;
    internal static UInt32 IDC_EL_CHANGESOURCE;
    internal static UInt32 IDC_EL_AUTOMATIC;
    internal static UInt32 IDC_EL_CANCELLINK;
    internal static UInt32 IDC_EL_UPDATENOW;
    internal static UInt32 IDC_EL_OPENSOURCE;
    internal static UInt32 IDC_EL_MANUAL;
    internal static UInt32 IDC_EL_LINKSOURCE;
    internal static UInt32 IDC_EL_LINKTYPE;
    internal static UInt32 IDC_EL_LINKSLISTBOX;
    internal static UInt32 IDC_EL_COL1;
    internal static UInt32 IDC_EL_COL2;
    internal static UInt32 IDC_EL_COL3;
    internal static UInt32 IDC_BZ_RETRY;
    internal static UInt32 IDC_BZ_ICON;
    internal static UInt32 IDC_BZ_MESSAGE1;
    internal static UInt32 IDC_BZ_SWITCHTO;
    internal static UInt32 IDC_UL_METER;
    internal static UInt32 IDC_UL_STOP;
    internal static UInt32 IDC_UL_PERCENT;
    internal static UInt32 IDC_UL_PROGRESS;
    internal static UInt32 IDC_PU_LINKS;
    internal static UInt32 IDC_PU_TEXT;
    internal static UInt32 IDC_PU_CONVERT;
    internal static UInt32 IDC_PU_ICON;
    internal static UInt32 IDC_GP_OBJECTNAME;
    internal static UInt32 IDC_GP_OBJECTTYPE;
    internal static UInt32 IDC_GP_OBJECTSIZE;
    internal static UInt32 IDC_GP_CONVERT;
    internal static UInt32 IDC_GP_OBJECTICON;
    internal static UInt32 IDC_GP_OBJECTLOCATION;
    internal static UInt32 IDC_VP_PERCENT;
    internal static UInt32 IDC_VP_CHANGEICON;
    internal static UInt32 IDC_VP_EDITABLE;
    internal static UInt32 IDC_VP_ASICON;
    internal static UInt32 IDC_VP_RELATIVE;
    internal static UInt32 IDC_VP_SPIN;
    internal static UInt32 IDC_VP_SCALETXT;
    internal static UInt32 IDC_VP_ICONDISPLAY;
    internal static UInt32 IDC_VP_RESULTIMAGE;
    internal static UInt32 IDC_LP_OPENSOURCE;
    internal static UInt32 IDC_LP_UPDATENOW;
    internal static UInt32 IDC_LP_BREAKLINK;
    internal static UInt32 IDC_LP_LINKSOURCE;
    internal static UInt32 IDC_LP_CHANGESOURCE;
    internal static UInt32 IDC_LP_AUTOMATIC;
    internal static UInt32 IDC_LP_MANUAL;
    internal static UInt32 IDC_LP_DATE;
    internal static UInt32 IDC_LP_TIME;
    internal static UInt32 IDC_MANAGE_LINK;
    internal static UInt32 IDC_OFFLINE_HAND;
    internal static UInt32 IDC_PANTOOL_HAND_OPEN;
    internal static UInt32 IDC_PANTOOL_HAND_CLOSED;
    internal static PCWSTR IDC_ARROW;
    internal static PCWSTR IDC_IBEAM;
    internal static PCWSTR IDC_WAIT;
    internal static PCWSTR IDC_CROSS;
    internal static PCWSTR IDC_UPARROW;
    internal static PCWSTR IDC_SIZE;
    internal static PCWSTR IDC_ICON;
    internal static PCWSTR IDC_SIZENWSE;
    internal static PCWSTR IDC_SIZENESW;
    internal static PCWSTR IDC_SIZEWE;
    internal static PCWSTR IDC_SIZENS;
    internal static PCWSTR IDC_SIZEALL;
    internal static PCWSTR IDC_NO;
    internal static PCWSTR IDC_HAND;
    internal static PCWSTR IDC_APPSTARTING;
    internal static PCWSTR IDC_HELP;
    internal static PCWSTR IDC_PIN;
    internal static PCWSTR IDC_PERSON;
    internal static PCWSTR IDI_APPLICATION;
    internal static PCWSTR IDI_HAND;
    internal static PCWSTR IDI_QUESTION;
    internal static PCWSTR IDI_EXCLAMATION;
    internal static PCWSTR IDI_ASTERISK;
    internal static PCWSTR IDI_WINLOGO;
    internal static PCWSTR IDI_SHIELD;
    internal static PCWSTR IDI_WARNING;
    internal static PCWSTR IDI_ERROR;
    internal static PCWSTR IDI_INFORMATION;
    internal static UInt32 IDI_RESOURCEFIRST;
    internal static UInt32 IDI_RESOURCE;
    internal static UInt32 IDI_RESOURCELAST;
    internal static UInt32 IDI_RESOURCEOVERLAYFIRST;
    internal static UInt32 IDI_RESOURCEOVERLAYLAST;
    internal static UInt32 IDI_CONFLICT;
    internal static UInt32 IDI_CLASSICON_OVERLAYFIRST;
    internal static UInt32 IDI_CLASSICON_OVERLAYLAST;
    internal static UInt32 IDI_PROBLEM_OVL;
    internal static UInt32 IDI_DISABLED_OVL;
    internal static UInt32 IDI_FORCED_OVL;
    internal static UInt32 IDI_CPSUI_ICONID_FIRST;
    internal static UInt32 IDI_CPSUI_EMPTY;
    internal static UInt32 IDI_CPSUI_SEL_NONE;
    internal static UInt32 IDI_CPSUI_WARNING;
    internal static UInt32 IDI_CPSUI_NO;
    internal static UInt32 IDI_CPSUI_YES;
    internal static UInt32 IDI_CPSUI_FALSE;
    internal static UInt32 IDI_CPSUI_TRUE;
    internal static UInt32 IDI_CPSUI_OFF;
    internal static UInt32 IDI_CPSUI_ON;
    internal static UInt32 IDI_CPSUI_PAPER_OUTPUT;
    internal static UInt32 IDI_CPSUI_ENVELOPE;
    internal static UInt32 IDI_CPSUI_MEM;
    internal static UInt32 IDI_CPSUI_FONTCARTHDR;
    internal static UInt32 IDI_CPSUI_FONTCART;
    internal static UInt32 IDI_CPSUI_STAPLER_ON;
    internal static UInt32 IDI_CPSUI_STAPLER_OFF;
    internal static UInt32 IDI_CPSUI_HT_HOST;
    internal static UInt32 IDI_CPSUI_HT_DEVICE;
    internal static UInt32 IDI_CPSUI_TT_PRINTASGRAPHIC;
    internal static UInt32 IDI_CPSUI_TT_DOWNLOADSOFT;
    internal static UInt32 IDI_CPSUI_TT_DOWNLOADVECT;
    internal static UInt32 IDI_CPSUI_TT_SUBDEV;
    internal static UInt32 IDI_CPSUI_PORTRAIT;
    internal static UInt32 IDI_CPSUI_LANDSCAPE;
    internal static UInt32 IDI_CPSUI_ROT_LAND;
    internal static UInt32 IDI_CPSUI_AUTOSEL;
    internal static UInt32 IDI_CPSUI_PAPER_TRAY;
    internal static UInt32 IDI_CPSUI_PAPER_TRAY2;
    internal static UInt32 IDI_CPSUI_PAPER_TRAY3;
    internal static UInt32 IDI_CPSUI_TRANSPARENT;
    internal static UInt32 IDI_CPSUI_COLLATE;
    internal static UInt32 IDI_CPSUI_DUPLEX_NONE;
    internal static UInt32 IDI_CPSUI_DUPLEX_HORZ;
    internal static UInt32 IDI_CPSUI_DUPLEX_VERT;
    internal static UInt32 IDI_CPSUI_RES_DRAFT;
    internal static UInt32 IDI_CPSUI_RES_LOW;
    internal static UInt32 IDI_CPSUI_RES_MEDIUM;
    internal static UInt32 IDI_CPSUI_RES_HIGH;
    internal static UInt32 IDI_CPSUI_RES_PRESENTATION;
    internal static UInt32 IDI_CPSUI_MONO;
    internal static UInt32 IDI_CPSUI_COLOR;
    internal static UInt32 IDI_CPSUI_DITHER_NONE;
    internal static UInt32 IDI_CPSUI_DITHER_COARSE;
    internal static UInt32 IDI_CPSUI_DITHER_FINE;
    internal static UInt32 IDI_CPSUI_DITHER_LINEART;
    internal static UInt32 IDI_CPSUI_SCALING;
    internal static UInt32 IDI_CPSUI_COPY;
    internal static UInt32 IDI_CPSUI_HTCLRADJ;
    internal static UInt32 IDI_CPSUI_HALFTONE_SETUP;
    internal static UInt32 IDI_CPSUI_WATERMARK;
    internal static UInt32 IDI_CPSUI_ERROR;
    internal static UInt32 IDI_CPSUI_ICM_OPTION;
    internal static UInt32 IDI_CPSUI_ICM_METHOD;
    internal static UInt32 IDI_CPSUI_ICM_INTENT;
    internal static UInt32 IDI_CPSUI_STD_FORM;
    internal static UInt32 IDI_CPSUI_OUTBIN;
    internal static UInt32 IDI_CPSUI_OUTPUT;
    internal static UInt32 IDI_CPSUI_GRAPHIC;
    internal static UInt32 IDI_CPSUI_ADVANCE;
    internal static UInt32 IDI_CPSUI_DOCUMENT;
    internal static UInt32 IDI_CPSUI_DEVICE;
    internal static UInt32 IDI_CPSUI_DEVICE2;
    internal static UInt32 IDI_CPSUI_PRINTER;
    internal static UInt32 IDI_CPSUI_PRINTER2;
    internal static UInt32 IDI_CPSUI_PRINTER3;
    internal static UInt32 IDI_CPSUI_PRINTER4;
    internal static UInt32 IDI_CPSUI_OPTION;
    internal static UInt32 IDI_CPSUI_OPTION2;
    internal static UInt32 IDI_CPSUI_STOP;
    internal static UInt32 IDI_CPSUI_NOTINSTALLED;
    internal static UInt32 IDI_CPSUI_WARNING_OVERLAY;
    internal static UInt32 IDI_CPSUI_STOP_WARNING_OVERLAY;
    internal static UInt32 IDI_CPSUI_GENERIC_OPTION;
    internal static UInt32 IDI_CPSUI_GENERIC_ITEM;
    internal static UInt32 IDI_CPSUI_RUN_DIALOG;
    internal static UInt32 IDI_CPSUI_QUESTION;
    internal static UInt32 IDI_CPSUI_FORMTRAYASSIGN;
    internal static UInt32 IDI_CPSUI_PRINTER_FOLDER;
    internal static UInt32 IDI_CPSUI_INSTALLABLE_OPTION;
    internal static UInt32 IDI_CPSUI_PRINTER_FEATURE;
    internal static UInt32 IDI_CPSUI_DEVICE_FEATURE;
    internal static UInt32 IDI_CPSUI_FONTSUB;
    internal static UInt32 IDI_CPSUI_POSTSCRIPT;
    internal static UInt32 IDI_CPSUI_TELEPHONE;
    internal static UInt32 IDI_CPSUI_DUPLEX_NONE_L;
    internal static UInt32 IDI_CPSUI_DUPLEX_HORZ_L;
    internal static UInt32 IDI_CPSUI_DUPLEX_VERT_L;
    internal static UInt32 IDI_CPSUI_LF_PEN_PLOTTER;
    internal static UInt32 IDI_CPSUI_SF_PEN_PLOTTER;
    internal static UInt32 IDI_CPSUI_LF_RASTER_PLOTTER;
    internal static UInt32 IDI_CPSUI_SF_RASTER_PLOTTER;
    internal static UInt32 IDI_CPSUI_ROLL_PAPER;
    internal static UInt32 IDI_CPSUI_PEN_CARROUSEL;
    internal static UInt32 IDI_CPSUI_PLOTTER_PEN;
    internal static UInt32 IDI_CPSUI_MANUAL_FEED;
    internal static UInt32 IDI_CPSUI_FAX;
    internal static UInt32 IDI_CPSUI_PAGE_PROTECT;
    internal static UInt32 IDI_CPSUI_ENVELOPE_FEED;
    internal static UInt32 IDI_CPSUI_FONTCART_SLOT;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_PORTRAIT;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_ARROWL;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_ARROWS;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_BOOKLETL;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_BOOKLETP;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_ARROWLR;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_ROT_PORT;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_BOOKLETL_NB;
    internal static UInt32 IDI_CPSUI_LAYOUT_BMP_BOOKLETP_NB;
    internal static UInt32 IDI_CPSUI_ROT_PORT;
    internal static UInt32 IDI_CPSUI_NUP_BORDER;
    internal static UInt32 IDI_CPSUI_ICONID_LAST;
    internal static UInt32 IMN_CLOSESTATUSWINDOW;
    internal static UInt32 IMN_OPENSTATUSWINDOW;
    internal static UInt32 IMN_CHANGECANDIDATE;
    internal static UInt32 IMN_CLOSECANDIDATE;
    internal static UInt32 IMN_OPENCANDIDATE;
    internal static UInt32 IMN_SETCONVERSIONMODE;
    internal static UInt32 IMN_SETSENTENCEMODE;
    internal static UInt32 IMN_SETOPENSTATUS;
    internal static UInt32 IMN_SETCANDIDATEPOS;
    internal static UInt32 IMN_SETCOMPOSITIONFONT;
    internal static UInt32 IMN_SETCOMPOSITIONWINDOW;
    internal static UInt32 IMN_SETSTATUSWINDOWPOS;
    internal static UInt32 IMN_GUIDELINE;
    internal static UInt32 IMN_PRIVATE;
    internal static UInt32 IMN_SOFTKBDDESTROYED;
    internal static UInt32 KF_EXTENDED;
    internal static UInt32 KF_DLGMODE;
    internal static UInt32 KF_MENUMODE;
    internal static UInt32 KF_ALTDOWN;
    internal static UInt32 KF_REPEAT;
    internal static UInt32 KF_UP;
    internal static int LB_CTLCODE;
    internal static UInt32 LB_OKAY;
    internal static int LB_ERR;
    internal static int LB_ERRSPACE;
    internal static UInt32 LB_ADDSTRING;
    internal static UInt32 LB_INSERTSTRING;
    internal static UInt32 LB_DELETESTRING;
    internal static UInt32 LB_SELITEMRANGEEX;
    internal static UInt32 LB_RESETCONTENT;
    internal static UInt32 LB_SETSEL;
    internal static UInt32 LB_SETCURSEL;
    internal static UInt32 LB_GETSEL;
    internal static UInt32 LB_GETCURSEL;
    internal static UInt32 LB_GETTEXT;
    internal static UInt32 LB_GETTEXTLEN;
    internal static UInt32 LB_GETCOUNT;
    internal static UInt32 LB_SELECTSTRING;
    internal static UInt32 LB_DIR;
    internal static UInt32 LB_GETTOPINDEX;
    internal static UInt32 LB_FINDSTRING;
    internal static UInt32 LB_GETSELCOUNT;
    internal static UInt32 LB_GETSELITEMS;
    internal static UInt32 LB_SETTABSTOPS;
    internal static UInt32 LB_GETHORIZONTALEXTENT;
    internal static UInt32 LB_SETHORIZONTALEXTENT;
    internal static UInt32 LB_SETCOLUMNWIDTH;
    internal static UInt32 LB_ADDFILE;
    internal static UInt32 LB_SETTOPINDEX;
    internal static UInt32 LB_GETITEMRECT;
    internal static UInt32 LB_GETITEMDATA;
    internal static UInt32 LB_SETITEMDATA;
    internal static UInt32 LB_SELITEMRANGE;
    internal static UInt32 LB_SETANCHORINDEX;
    internal static UInt32 LB_GETANCHORINDEX;
    internal static UInt32 LB_SETCARETINDEX;
    internal static UInt32 LB_GETCARETINDEX;
    internal static UInt32 LB_SETITEMHEIGHT;
    internal static UInt32 LB_GETITEMHEIGHT;
    internal static UInt32 LB_FINDSTRINGEXACT;
    internal static UInt32 LB_SETLOCALE;
    internal static UInt32 LB_GETLOCALE;
    internal static UInt32 LB_SETCOUNT;
    internal static UInt32 LB_INITSTORAGE;
    internal static UInt32 LB_ITEMFROMPOINT;
    internal static UInt32 LB_MULTIPLEADDSTRING;
    internal static UInt32 LB_GETLISTBOXINFO;
    internal static UInt32 LB_MSGMAX;
    internal static UInt32 LB_SRC_ADDR_USE_SRCADDR_FLAG;
    internal static UInt32 LB_SRC_ADDR_USE_DSTADDR_FLAG;
    internal static UInt32 LB_DST_ADDR_USE_SRCADDR_FLAG;
    internal static UInt32 LB_DST_ADDR_USE_DSTADDR_FLAG;
    internal static UInt32 LB_SRC_MASK_LATE_FLAG;
    internal static UInt32 LB_DST_MASK_LATE_FLAG;
    internal static int LBN_ERRSPACE;
    internal static UInt32 LBN_SELCHANGE;
    internal static UInt32 LBN_DBLCLK;
    internal static UInt32 LBN_SELCANCEL;
    internal static UInt32 LBN_SETFOCUS;
    internal static UInt32 LBN_KILLFOCUS;
    internal static int LBS_NOTIFY;
    internal static int LBS_SORT;
    internal static int LBS_NOREDRAW;
    internal static int LBS_MULTIPLESEL;
    internal static int LBS_OWNERDRAWFIXED;
    internal static int LBS_OWNERDRAWVARIABLE;
    internal static int LBS_HASSTRINGS;
    internal static int LBS_USETABSTOPS;
    internal static int LBS_NOINTEGRALHEIGHT;
    internal static int LBS_MULTICOLUMN;
    internal static int LBS_WANTKEYBOARDINPUT;
    internal static int LBS_EXTENDEDSEL;
    internal static int LBS_DISABLENOSCROLL;
    internal static int LBS_NODATA;
    internal static int LBS_NOSEL;
    internal static int LBS_COMBOBOX;
    internal static int LBS_STANDARD;
    internal static UInt32 LOCALE_IMEASURE;
    internal static string LOCALE_NAME_SYSTEM_DEFAULT;
    internal static UInt32 LOCALE_TRANSIENT_KEYBOARD1;
    internal static UInt32 LOCALE_TRANSIENT_KEYBOARD2;
    internal static UInt32 LOCALE_TRANSIENT_KEYBOARD3;
    internal static UInt32 LOCALE_TRANSIENT_KEYBOARD4;
    internal static UInt32 LV_VIEW_ICON;
    internal static UInt32 LV_VIEW_DETAILS;
    internal static UInt32 LV_VIEW_SMALLICON;
    internal static UInt32 LV_VIEW_LIST;
    internal static UInt32 LV_VIEW_TILE;
    internal static UInt32 LV_VIEW_MAX;
    internal static UInt32 LVA_DEFAULT;
    internal static UInt32 LVA_ALIGNLEFT;
    internal static UInt32 LVA_ALIGNTOP;
    internal static UInt32 LVA_SNAPTOGRID;
    internal static UInt32 LVGGR_GROUP;
    internal static UInt32 LVGGR_HEADER;
    internal static UInt32 LVGGR_LABEL;
    internal static UInt32 LVGGR_SUBSETLINK;
    internal static UInt32 LVIR_BOUNDS;
    internal static UInt32 LVIR_ICON;
    internal static UInt32 LVIR_LABEL;
    internal static UInt32 LVIR_SELECTBOUNDS;
    internal static UInt32 LVM_FIRST;
    internal static UInt32 LVM_SETUNICODEFORMAT;
    internal static UInt32 LVM_GETUNICODEFORMAT;
    internal static UInt32 LVM_GETBKCOLOR;
    internal static UInt32 LVM_SETBKCOLOR;
    internal static UInt32 LVM_GETIMAGELIST;
    internal static UInt32 LVM_SETIMAGELIST;
    internal static UInt32 LVM_GETITEMCOUNT;
    internal static UInt32 LVM_GETITEMA;
    internal static UInt32 LVM_GETITEMW;
    internal static UInt32 LVM_GETITEM;
    internal static UInt32 LVM_SETITEMA;
    internal static UInt32 LVM_SETITEMW;
    internal static UInt32 LVM_SETITEM;
    internal static UInt32 LVM_INSERTITEMA;
    internal static UInt32 LVM_INSERTITEMW;
    internal static UInt32 LVM_INSERTITEM;
    internal static UInt32 LVM_DELETEITEM;
    internal static UInt32 LVM_DELETEALLITEMS;
    internal static UInt32 LVM_GETCALLBACKMASK;
    internal static UInt32 LVM_SETCALLBACKMASK;
    internal static UInt32 LVM_GETNEXTITEM;
    internal static UInt32 LVM_FINDITEMA;
    internal static UInt32 LVM_FINDITEMW;
    internal static UInt32 LVM_FINDITEM;
    internal static UInt32 LVM_GETITEMRECT;
    internal static UInt32 LVM_SETITEMPOSITION;
    internal static UInt32 LVM_GETITEMPOSITION;
    internal static UInt32 LVM_GETSTRINGWIDTHA;
    internal static UInt32 LVM_GETSTRINGWIDTHW;
    internal static UInt32 LVM_GETSTRINGWIDTH;
    internal static UInt32 LVM_HITTEST;
    internal static UInt32 LVM_ENSUREVISIBLE;
    internal static UInt32 LVM_SCROLL;
    internal static UInt32 LVM_REDRAWITEMS;
    internal static UInt32 LVM_ARRANGE;
    internal static UInt32 LVM_EDITLABELA;
    internal static UInt32 LVM_EDITLABELW;
    internal static UInt32 LVM_EDITLABEL;
    internal static UInt32 LVM_GETEDITCONTROL;
    internal static UInt32 LVM_GETCOLUMNA;
    internal static UInt32 LVM_GETCOLUMNW;
    internal static UInt32 LVM_GETCOLUMN;
    internal static UInt32 LVM_SETCOLUMNA;
    internal static UInt32 LVM_SETCOLUMNW;
    internal static UInt32 LVM_SETCOLUMN;
    internal static UInt32 LVM_INSERTCOLUMNA;
    internal static UInt32 LVM_INSERTCOLUMNW;
    internal static UInt32 LVM_INSERTCOLUMN;
    internal static UInt32 LVM_DELETECOLUMN;
    internal static UInt32 LVM_GETCOLUMNWIDTH;
    internal static UInt32 LVM_SETCOLUMNWIDTH;
    internal static UInt32 LVM_GETHEADER;
    internal static UInt32 LVM_CREATEDRAGIMAGE;
    internal static UInt32 LVM_GETVIEWRECT;
    internal static UInt32 LVM_GETTEXTCOLOR;
    internal static UInt32 LVM_SETTEXTCOLOR;
    internal static UInt32 LVM_GETTEXTBKCOLOR;
    internal static UInt32 LVM_SETTEXTBKCOLOR;
    internal static UInt32 LVM_GETTOPINDEX;
    internal static UInt32 LVM_GETCOUNTPERPAGE;
    internal static UInt32 LVM_GETORIGIN;
    internal static UInt32 LVM_UPDATE;
    internal static UInt32 LVM_SETITEMSTATE;
    internal static UInt32 LVM_GETITEMSTATE;
    internal static UInt32 LVM_GETITEMTEXTA;
    internal static UInt32 LVM_GETITEMTEXTW;
    internal static UInt32 LVM_GETITEMTEXT;
    internal static UInt32 LVM_SETITEMTEXTA;
    internal static UInt32 LVM_SETITEMTEXTW;
    internal static UInt32 LVM_SETITEMTEXT;
    internal static UInt32 LVM_SETITEMCOUNT;
    internal static UInt32 LVM_SORTITEMS;
    internal static UInt32 LVM_SETITEMPOSITION32;
    internal static UInt32 LVM_GETSELECTEDCOUNT;
    internal static UInt32 LVM_GETITEMSPACING;
    internal static UInt32 LVM_GETISEARCHSTRINGA;
    internal static UInt32 LVM_GETISEARCHSTRINGW;
    internal static UInt32 LVM_GETISEARCHSTRING;
    internal static UInt32 LVM_SETICONSPACING;
    internal static UInt32 LVM_SETEXTENDEDLISTVIEWSTYLE;
    internal static UInt32 LVM_GETEXTENDEDLISTVIEWSTYLE;
    internal static UInt32 LVM_GETSUBITEMRECT;
    internal static UInt32 LVM_SUBITEMHITTEST;
    internal static UInt32 LVM_SETCOLUMNORDERARRAY;
    internal static UInt32 LVM_GETCOLUMNORDERARRAY;
    internal static UInt32 LVM_SETHOTITEM;
    internal static UInt32 LVM_GETHOTITEM;
    internal static UInt32 LVM_SETHOTCURSOR;
    internal static UInt32 LVM_GETHOTCURSOR;
    internal static UInt32 LVM_APPROXIMATEVIEWRECT;
    internal static UInt32 LVM_SETWORKAREAS;
    internal static UInt32 LVM_GETWORKAREAS;
    internal static UInt32 LVM_GETNUMBEROFWORKAREAS;
    internal static UInt32 LVM_GETSELECTIONMARK;
    internal static UInt32 LVM_SETSELECTIONMARK;
    internal static UInt32 LVM_SETHOVERTIME;
    internal static UInt32 LVM_GETHOVERTIME;
    internal static UInt32 LVM_SETTOOLTIPS;
    internal static UInt32 LVM_GETTOOLTIPS;
    internal static UInt32 LVM_SORTITEMSEX;
    internal static UInt32 LVM_SETBKIMAGEA;
    internal static UInt32 LVM_SETBKIMAGEW;
    internal static UInt32 LVM_GETBKIMAGEA;
    internal static UInt32 LVM_GETBKIMAGEW;
    internal static UInt32 LVM_SETSELECTEDCOLUMN;
    internal static UInt32 LVM_SETVIEW;
    internal static UInt32 LVM_GETVIEW;
    internal static UInt32 LVM_INSERTGROUP;
    internal static UInt32 LVM_SETGROUPINFO;
    internal static UInt32 LVM_GETGROUPINFO;
    internal static UInt32 LVM_REMOVEGROUP;
    internal static UInt32 LVM_MOVEGROUP;
    internal static UInt32 LVM_GETGROUPCOUNT;
    internal static UInt32 LVM_GETGROUPINFOBYINDEX;
    internal static UInt32 LVM_MOVEITEMTOGROUP;
    internal static UInt32 LVM_GETGROUPRECT;
    internal static UInt32 LVM_SETGROUPMETRICS;
    internal static UInt32 LVM_GETGROUPMETRICS;
    internal static UInt32 LVM_ENABLEGROUPVIEW;
    internal static UInt32 LVM_SORTGROUPS;
    internal static UInt32 LVM_INSERTGROUPSORTED;
    internal static UInt32 LVM_REMOVEALLGROUPS;
    internal static UInt32 LVM_HASGROUP;
    internal static UInt32 LVM_GETGROUPSTATE;
    internal static UInt32 LVM_GETFOCUSEDGROUP;
    internal static UInt32 LVM_SETTILEVIEWINFO;
    internal static UInt32 LVM_GETTILEVIEWINFO;
    internal static UInt32 LVM_SETTILEINFO;
    internal static UInt32 LVM_GETTILEINFO;
    internal static UInt32 LVM_SETINSERTMARK;
    internal static UInt32 LVM_GETINSERTMARK;
    internal static UInt32 LVM_INSERTMARKHITTEST;
    internal static UInt32 LVM_GETINSERTMARKRECT;
    internal static UInt32 LVM_SETINSERTMARKCOLOR;
    internal static UInt32 LVM_GETINSERTMARKCOLOR;
    internal static UInt32 LVM_SETINFOTIP;
    internal static UInt32 LVM_GETSELECTEDCOLUMN;
    internal static UInt32 LVM_ISGROUPVIEWENABLED;
    internal static UInt32 LVM_GETOUTLINECOLOR;
    internal static UInt32 LVM_SETOUTLINECOLOR;
    internal static UInt32 LVM_CANCELEDITLABEL;
    internal static UInt32 LVM_MAPINDEXTOID;
    internal static UInt32 LVM_MAPIDTOINDEX;
    internal static UInt32 LVM_ISITEMVISIBLE;
    internal static UInt32 LVM_GETEMPTYTEXT;
    internal static UInt32 LVM_GETFOOTERRECT;
    internal static UInt32 LVM_GETFOOTERINFO;
    internal static UInt32 LVM_GETFOOTERITEMRECT;
    internal static UInt32 LVM_GETFOOTERITEM;
    internal static UInt32 LVM_GETITEMINDEXRECT;
    internal static UInt32 LVM_SETITEMINDEXSTATE;
    internal static UInt32 LVM_GETNEXTITEMINDEX;
    internal static UInt32 LVM_SETBKIMAGE;
    internal static UInt32 LVM_GETBKIMAGE;
    internal static UInt32 LVNI_ALL;
    internal static UInt32 LVNI_FOCUSED;
    internal static UInt32 LVNI_SELECTED;
    internal static UInt32 LVNI_CUT;
    internal static UInt32 LVNI_DROPHILITED;
    internal static UInt32 LVNI_VISIBLEORDER;
    internal static UInt32 LVNI_PREVIOUS;
    internal static UInt32 LVNI_VISIBLEONLY;
    internal static UInt32 LVNI_SAMEGROUPONLY;
    internal static UInt32 LVNI_ABOVE;
    internal static UInt32 LVNI_BELOW;
    internal static UInt32 LVNI_TOLEFT;
    internal static UInt32 LVNI_TORIGHT;
    internal static UInt32 LVS_ICON;
    internal static UInt32 LVS_REPORT;
    internal static UInt32 LVS_SMALLICON;
    internal static UInt32 LVS_LIST;
    internal static UInt32 LVS_TYPEMASK;
    internal static UInt32 LVS_SINGLESEL;
    internal static UInt32 LVS_SHOWSELALWAYS;
    internal static UInt32 LVS_SORTASCENDING;
    internal static UInt32 LVS_SORTDESCENDING;
    internal static UInt32 LVS_SHAREIMAGELISTS;
    internal static UInt32 LVS_NOLABELWRAP;
    internal static UInt32 LVS_AUTOARRANGE;
    internal static UInt32 LVS_EDITLABELS;
    internal static UInt32 LVS_OWNERDATA;
    internal static UInt32 LVS_NOSCROLL;
    internal static UInt32 LVS_TYPESTYLEMASK;
    internal static UInt32 LVS_ALIGNTOP;
    internal static UInt32 LVS_ALIGNLEFT;
    internal static UInt32 LVS_ALIGNMASK;
    internal static UInt32 LVS_OWNERDRAWFIXED;
    internal static UInt32 LVS_NOCOLUMNHEADER;
    internal static UInt32 LVS_NOSORTHEADER;
    internal static UInt32 LVS_EX_GRIDLINES;
    internal static UInt32 LVS_EX_SUBITEMIMAGES;
    internal static UInt32 LVS_EX_CHECKBOXES;
    internal static UInt32 LVS_EX_TRACKSELECT;
    internal static UInt32 LVS_EX_HEADERDRAGDROP;
    internal static UInt32 LVS_EX_FULLROWSELECT;
    internal static UInt32 LVS_EX_ONECLICKACTIVATE;
    internal static UInt32 LVS_EX_TWOCLICKACTIVATE;
    internal static UInt32 LVS_EX_FLATSB;
    internal static UInt32 LVS_EX_REGIONAL;
    internal static UInt32 LVS_EX_INFOTIP;
    internal static UInt32 LVS_EX_UNDERLINEHOT;
    internal static UInt32 LVS_EX_UNDERLINECOLD;
    internal static UInt32 LVS_EX_MULTIWORKAREAS;
    internal static UInt32 LVS_EX_LABELTIP;
    internal static UInt32 LVS_EX_BORDERSELECT;
    internal static UInt32 LVS_EX_DOUBLEBUFFER;
    internal static UInt32 LVS_EX_HIDELABELS;
    internal static UInt32 LVS_EX_SINGLEROW;
    internal static UInt32 LVS_EX_SNAPTOGRID;
    internal static UInt32 LVS_EX_SIMPLESELECT;
    internal static UInt32 LVS_EX_JUSTIFYCOLUMNS;
    internal static UInt32 LVS_EX_TRANSPARENTBKGND;
    internal static UInt32 LVS_EX_TRANSPARENTSHADOWTEXT;
    internal static UInt32 LVS_EX_AUTOAUTOARRANGE;
    internal static UInt32 LVS_EX_HEADERINALLVIEWS;
    internal static UInt32 LVS_EX_AUTOCHECKSELECT;
    internal static UInt32 LVS_EX_AUTOSIZECOLUMNS;
    internal static UInt32 LVS_EX_COLUMNSNAPPOINTS;
    internal static UInt32 LVS_EX_COLUMNOVERFLOW;
    internal static int LVSCW_AUTOSIZE;
    internal static int LVSCW_AUTOSIZE_USEHEADER;
    internal static UInt32 LVSIL_NORMAL;
    internal static UInt32 LVSIL_SMALL;
    internal static UInt32 LVSIL_STATE;
    internal static UInt32 LVSIL_GROUPHEADER;
    internal static UInt32 MA_ACTIVATE;
    internal static UInt32 MA_ACTIVATEANDEAT;
    internal static UInt32 MA_NOACTIVATE;
    internal static UInt32 MA_NOACTIVATEANDEAT;
    internal static int MEMBERID_NIL;
    internal static UInt32 MCM_FIRST;
    internal static UInt32 MCM_GETCURSEL;
    internal static UInt32 MCM_SETCURSEL;
    internal static UInt32 MCM_GETMAXSELCOUNT;
    internal static UInt32 MCM_SETMAXSELCOUNT;
    internal static UInt32 MCM_GETSELRANGE;
    internal static UInt32 MCM_SETSELRANGE;
    internal static UInt32 MCM_GETMONTHRANGE;
    internal static UInt32 MCM_SETDAYSTATE;
    internal static UInt32 MCM_GETMINREQRECT;
    internal static UInt32 MCM_SETCOLOR;
    internal static UInt32 MCM_GETCOLOR;
    internal static UInt32 MCM_SETTODAY;
    internal static UInt32 MCM_GETTODAY;
    internal static UInt32 MCM_HITTEST;
    internal static UInt32 MCM_SETFIRSTDAYOFWEEK;
    internal static UInt32 MCM_GETFIRSTDAYOFWEEK;
    internal static UInt32 MCM_GETRANGE;
    internal static UInt32 MCM_SETRANGE;
    internal static UInt32 MCM_GETMONTHDELTA;
    internal static UInt32 MCM_SETMONTHDELTA;
    internal static UInt32 MCM_GETMAXTODAYWIDTH;
    internal static UInt32 MCM_SETUNICODEFORMAT;
    internal static UInt32 MCM_GETUNICODEFORMAT;
    internal static UInt32 MCM_GETCURRENTVIEW;
    internal static UInt32 MCM_GETCALENDARCOUNT;
    internal static UInt32 MCM_GETCALENDARGRIDINFO;
    internal static UInt32 MCM_GETCALID;
    internal static UInt32 MCM_SETCALID;
    internal static UInt32 MCM_SIZERECTTOMIN;
    internal static UInt32 MCM_SETCALENDARBORDER;
    internal static UInt32 MCM_GETCALENDARBORDER;
    internal static UInt32 MCM_SETCURRENTVIEW;
    internal static UInt32 MCS_DAYSTATE;
    internal static UInt32 MCS_MULTISELECT;
    internal static UInt32 MCS_WEEKNUMBERS;
    internal static UInt32 MCS_NOTODAYCIRCLE;
    internal static UInt32 MCS_NOTODAY;
    internal static UInt32 MCS_NOTRAILINGDATES;
    internal static UInt32 MCS_SHORTDAYSOFWEEK;
    internal static UInt32 MCS_NOSELCHANGEONNAV;
    internal static UInt32 MCSC_BACKGROUND;
    internal static UInt32 MCSC_TEXT;
    internal static UInt32 MCSC_TITLEBK;
    internal static UInt32 MCSC_TITLETEXT;
    internal static UInt32 MCSC_MONTHBK;
    internal static UInt32 MCSC_TRAILINGTEXT;
    internal static UInt32 MONITORINFOF_PRIMARY;
    internal static string MONTHCAL_CLASS;
    internal static string MSFTEDIT_CLASS;
    internal static UInt32 NIN_SELECT;
    internal static UInt32 NIN_BALLOONSHOW;
    internal static UInt32 NIN_BALLOONHIDE;
    internal static UInt32 NIN_BALLOONTIMEOUT;
    internal static UInt32 NIN_BALLOONUSERCLICK;
    internal static UInt32 NIN_POPUPOPEN;
    internal static UInt32 NIN_POPUPCLOSE;
    internal static UInt32 NFR_ANSI;
    internal static UInt32 NFR_UNICODE;
    internal static UInt32 PBM_SETRANGE;
    internal static UInt32 PBM_SETPOS;
    internal static UInt32 PBM_DELTAPOS;
    internal static UInt32 PBM_SETSTEP;
    internal static UInt32 PBM_STEPIT;
    internal static UInt32 PBM_SETRANGE32;
    internal static UInt32 PBM_GETRANGE;
    internal static UInt32 PBM_GETPOS;
    internal static UInt32 PBM_SETBARCOLOR;
    internal static UInt32 PBM_SETBKCOLOR;
    internal static UInt32 PBM_SETMARQUEE;
    internal static UInt32 PBM_GETSTEP;
    internal static UInt32 PBM_GETBKCOLOR;
    internal static UInt32 PBM_GETBARCOLOR;
    internal static UInt32 PBM_SETSTATE;
    internal static UInt32 PBM_GETSTATE;
    internal static UInt32 PBS_SMOOTH;
    internal static UInt32 PBS_VERTICAL;
    internal static UInt32 PBS_MARQUEE;
    internal static UInt32 PBS_SMOOTHREVERSE;
    internal static UInt32 PBST_NORMAL;
    internal static UInt32 PBST_ERROR;
    internal static UInt32 PBST_PAUSED;
    internal static int PRF_CHECKVISIBLE;
    internal static int PRF_NONCLIENT;
    internal static int PRF_CLIENT;
    internal static int PRF_ERASEBKGND;
    internal static int PRF_CHILDREN;
    internal static int PRF_OWNED;
    internal static string PROGRESS_CLASS;
    internal static UInt32 SC_MANAGER_ALL_ACCESS;
    internal static UInt32 SC_MANAGER_CONNECT;
    internal static UInt32 SC_MANAGER_CREATE_SERVICE;
    internal static UInt32 SC_MANAGER_ENUMERATE_SERVICE;
    internal static UInt32 SC_MANAGER_LOCK;
    internal static UInt32 SC_MANAGER_QUERY_LOCK_STATUS;
    internal static UInt32 SC_MANAGER_MODIFY_BOOT_CONFIG;
    internal static string SC_AGGREGATE_STORAGE_KEY;
    internal static UInt32 SC_SIZE;
    internal static UInt32 SC_MOVE;
    internal static UInt32 SC_MINIMIZE;
    internal static UInt32 SC_MAXIMIZE;
    internal static UInt32 SC_NEXTWINDOW;
    internal static UInt32 SC_PREVWINDOW;
    internal static UInt32 SC_CLOSE;
    internal static UInt32 SC_VSCROLL;
    internal static UInt32 SC_HSCROLL;
    internal static UInt32 SC_MOUSEMENU;
    internal static UInt32 SC_KEYMENU;
    internal static UInt32 SC_ARRANGE;
    internal static UInt32 SC_RESTORE;
    internal static UInt32 SC_TASKLIST;
    internal static UInt32 SC_HOTKEY;
    internal static UInt32 SC_DEFAULT;
    internal static UInt32 SC_MONITORPOWER;
    internal static UInt32 SC_CONTEXTHELP;
    internal static UInt32 SC_SEPARATOR;
    internal static UInt32 SC_ICON;
    internal static UInt32 SC_ZOOM;
    internal static UInt32 SC_SCREENSAVE;
    internal static UInt32 SC_DLG_MINIMAL_UI;
    internal static UInt32 SC_DLG_NO_UI;
    internal static UInt32 SC_DLG_FORCE_UI;
    internal static UInt32 SIZE_OF_80387_REGISTERS;
    internal static UInt32 SIZE_RESTORED;
    internal static UInt32 SIZE_MINIMIZED;
    internal static UInt32 SIZE_MAXIMIZED;
    internal static UInt32 SIZE_MAXSHOW;
    internal static UInt32 SIZE_MAXHIDE;
    internal static UInt32 SIZE_DVINFO;
    internal static UInt32 START_PAGE_GENERAL;
    internal static string STATUSCLASSNAME;
    internal static UInt32 stc4;
    internal static UInt32 TB_ENABLEBUTTON;
    internal static UInt32 TB_CHECKBUTTON;
    internal static UInt32 TB_PRESSBUTTON;
    internal static UInt32 TB_HIDEBUTTON;
    internal static UInt32 TB_INDETERMINATE;
    internal static UInt32 TB_MARKBUTTON;
    internal static UInt32 TB_ISBUTTONENABLED;
    internal static UInt32 TB_ISBUTTONCHECKED;
    internal static UInt32 TB_ISBUTTONPRESSED;
    internal static UInt32 TB_ISBUTTONHIDDEN;
    internal static UInt32 TB_ISBUTTONINDETERMINATE;
    internal static UInt32 TB_ISBUTTONHIGHLIGHTED;
    internal static UInt32 TB_SETSTATE;
    internal static UInt32 TB_GETSTATE;
    internal static UInt32 TB_ADDBITMAP;
    internal static UInt32 TB_ADDBUTTONSA;
    internal static UInt32 TB_INSERTBUTTONA;
    internal static UInt32 TB_DELETEBUTTON;
    internal static UInt32 TB_GETBUTTON;
    internal static UInt32 TB_BUTTONCOUNT;
    internal static UInt32 TB_COMMANDTOINDEX;
    internal static UInt32 TB_SAVERESTOREA;
    internal static UInt32 TB_SAVERESTOREW;
    internal static UInt32 TB_CUSTOMIZE;
    internal static UInt32 TB_ADDSTRINGA;
    internal static UInt32 TB_ADDSTRINGW;
    internal static UInt32 TB_GETITEMRECT;
    internal static UInt32 TB_BUTTONSTRUCTSIZE;
    internal static UInt32 TB_SETBUTTONSIZE;
    internal static UInt32 TB_SETBITMAPSIZE;
    internal static UInt32 TB_AUTOSIZE;
    internal static UInt32 TB_GETTOOLTIPS;
    internal static UInt32 TB_SETTOOLTIPS;
    internal static UInt32 TB_SETPARENT;
    internal static UInt32 TB_SETROWS;
    internal static UInt32 TB_GETROWS;
    internal static UInt32 TB_SETCMDID;
    internal static UInt32 TB_CHANGEBITMAP;
    internal static UInt32 TB_GETBITMAP;
    internal static UInt32 TB_GETBUTTONTEXTA;
    internal static UInt32 TB_GETBUTTONTEXTW;
    internal static UInt32 TB_REPLACEBITMAP;
    internal static UInt32 TB_SETINDENT;
    internal static UInt32 TB_SETIMAGELIST;
    internal static UInt32 TB_GETIMAGELIST;
    internal static UInt32 TB_LOADIMAGES;
    internal static UInt32 TB_GETRECT;
    internal static UInt32 TB_SETHOTIMAGELIST;
    internal static UInt32 TB_GETHOTIMAGELIST;
    internal static UInt32 TB_SETDISABLEDIMAGELIST;
    internal static UInt32 TB_GETDISABLEDIMAGELIST;
    internal static UInt32 TB_SETSTYLE;
    internal static UInt32 TB_GETSTYLE;
    internal static UInt32 TB_GETBUTTONSIZE;
    internal static UInt32 TB_SETBUTTONWIDTH;
    internal static UInt32 TB_SETMAXTEXTROWS;
    internal static UInt32 TB_GETTEXTROWS;
    internal static UInt32 TB_GETBUTTONTEXT;
    internal static UInt32 TB_SAVERESTORE;
    internal static UInt32 TB_ADDSTRING;
    internal static UInt32 TB_GETOBJECT;
    internal static UInt32 TB_GETHOTITEM;
    internal static UInt32 TB_SETHOTITEM;
    internal static UInt32 TB_SETANCHORHIGHLIGHT;
    internal static UInt32 TB_GETANCHORHIGHLIGHT;
    internal static UInt32 TB_MAPACCELERATORA;
    internal static UInt32 TB_GETINSERTMARK;
    internal static UInt32 TB_SETINSERTMARK;
    internal static UInt32 TB_INSERTMARKHITTEST;
    internal static UInt32 TB_MOVEBUTTON;
    internal static UInt32 TB_GETMAXSIZE;
    internal static UInt32 TB_SETEXTENDEDSTYLE;
    internal static UInt32 TB_GETEXTENDEDSTYLE;
    internal static UInt32 TB_GETPADDING;
    internal static UInt32 TB_SETPADDING;
    internal static UInt32 TB_SETINSERTMARKCOLOR;
    internal static UInt32 TB_GETINSERTMARKCOLOR;
    internal static UInt32 TB_SETCOLORSCHEME;
    internal static UInt32 TB_GETCOLORSCHEME;
    internal static UInt32 TB_SETUNICODEFORMAT;
    internal static UInt32 TB_GETUNICODEFORMAT;
    internal static UInt32 TB_MAPACCELERATORW;
    internal static UInt32 TB_MAPACCELERATOR;
    internal static UInt32 TB_GETBITMAPFLAGS;
    internal static UInt32 TB_GETBUTTONINFOW;
    internal static UInt32 TB_SETBUTTONINFOW;
    internal static UInt32 TB_GETBUTTONINFOA;
    internal static UInt32 TB_SETBUTTONINFOA;
    internal static UInt32 TB_GETBUTTONINFO;
    internal static UInt32 TB_SETBUTTONINFO;
    internal static UInt32 TB_INSERTBUTTONW;
    internal static UInt32 TB_ADDBUTTONSW;
    internal static UInt32 TB_HITTEST;
    internal static UInt32 TB_INSERTBUTTON;
    internal static UInt32 TB_ADDBUTTONS;
    internal static UInt32 TB_SETDRAWTEXTFLAGS;
    internal static UInt32 TB_GETSTRINGW;
    internal static UInt32 TB_GETSTRINGA;
    internal static UInt32 TB_GETSTRING;
    internal static UInt32 TB_SETBOUNDINGSIZE;
    internal static UInt32 TB_SETHOTITEM2;
    internal static UInt32 TB_HASACCELERATOR;
    internal static UInt32 TB_SETLISTGAP;
    internal static UInt32 TB_GETIMAGELISTCOUNT;
    internal static UInt32 TB_GETIDEALSIZE;
    internal static UInt32 TB_GETMETRICS;
    internal static UInt32 TB_SETMETRICS;
    internal static UInt32 TB_GETITEMDROPDOWNRECT;
    internal static UInt32 TB_SETPRESSEDIMAGELIST;
    internal static UInt32 TB_GETPRESSEDIMAGELIST;
    internal static UInt32 TB_SETWINDOWTHEME;
    internal static UInt32 TB_LINEUP;
    internal static UInt32 TB_LINEDOWN;
    internal static UInt32 TB_PAGEUP;
    internal static UInt32 TB_PAGEDOWN;
    internal static UInt32 TB_THUMBPOSITION;
    internal static UInt32 TB_THUMBTRACK;
    internal static UInt32 TB_TOP;
    internal static UInt32 TB_BOTTOM;
    internal static UInt32 TB_ENDTRACK;
    internal static UInt32 TBS_CONTEXT_VERSION_ONE;
    internal static UInt32 TBS_SUCCESS;
    internal static UInt32 TBS_OWNERAUTH_TYPE_FULL;
    internal static UInt32 TBS_OWNERAUTH_TYPE_ADMIN;
    internal static UInt32 TBS_OWNERAUTH_TYPE_USER;
    internal static UInt32 TBS_OWNERAUTH_TYPE_ENDORSEMENT;
    internal static UInt32 TBS_OWNERAUTH_TYPE_ENDORSEMENT_20;
    internal static UInt32 TBS_OWNERAUTH_TYPE_STORAGE_20;
    internal static UInt32 TBS_CONTEXT_VERSION_TWO;
    internal static UInt32 TBS_TCGLOG_SRTM_CURRENT;
    internal static UInt32 TBS_TCGLOG_DRTM_CURRENT;
    internal static UInt32 TBS_TCGLOG_SRTM_BOOT;
    internal static UInt32 TBS_TCGLOG_SRTM_RESUME;
    internal static UInt32 TBS_TCGLOG_DRTM_BOOT;
    internal static UInt32 TBS_TCGLOG_DRTM_RESUME;
    internal static UInt32 TBS_AUTOTICKS;
    internal static UInt32 TBS_VERT;
    internal static UInt32 TBS_HORZ;
    internal static UInt32 TBS_TOP;
    internal static UInt32 TBS_BOTTOM;
    internal static UInt32 TBS_LEFT;
    internal static UInt32 TBS_RIGHT;
    internal static UInt32 TBS_BOTH;
    internal static UInt32 TBS_NOTICKS;
    internal static UInt32 TBS_ENABLESELRANGE;
    internal static UInt32 TBS_FIXEDLENGTH;
    internal static UInt32 TBS_NOTHUMB;
    internal static UInt32 TBS_TOOLTIPS;
    internal static UInt32 TBS_REVERSED;
    internal static UInt32 TBS_DOWNISLEFT;
    internal static UInt32 TBS_NOTIFYBEFOREMOVE;
    internal static UInt32 TBS_TRANSPARENTBKGND;
    internal static UInt32 TBM_GETRANGEMIN;
    internal static UInt32 TBM_GETRANGEMAX;
    internal static UInt32 TBM_GETTIC;
    internal static UInt32 TBM_SETTIC;
    internal static UInt32 TBM_SETPOS;
    internal static UInt32 TBM_SETRANGE;
    internal static UInt32 TBM_SETRANGEMIN;
    internal static UInt32 TBM_SETRANGEMAX;
    internal static UInt32 TBM_CLEARTICS;
    internal static UInt32 TBM_SETSEL;
    internal static UInt32 TBM_SETSELSTART;
    internal static UInt32 TBM_SETSELEND;
    internal static UInt32 TBM_GETPTICS;
    internal static UInt32 TBM_GETTICPOS;
    internal static UInt32 TBM_GETNUMTICS;
    internal static UInt32 TBM_GETSELSTART;
    internal static UInt32 TBM_GETSELEND;
    internal static UInt32 TBM_CLEARSEL;
    internal static UInt32 TBM_SETTICFREQ;
    internal static UInt32 TBM_SETPAGESIZE;
    internal static UInt32 TBM_GETPAGESIZE;
    internal static UInt32 TBM_SETLINESIZE;
    internal static UInt32 TBM_GETLINESIZE;
    internal static UInt32 TBM_GETTHUMBRECT;
    internal static UInt32 TBM_GETCHANNELRECT;
    internal static UInt32 TBM_SETTHUMBLENGTH;
    internal static UInt32 TBM_GETTHUMBLENGTH;
    internal static UInt32 TBM_SETTOOLTIPS;
    internal static UInt32 TBM_GETTOOLTIPS;
    internal static UInt32 TBM_SETTIPSIDE;
    internal static UInt32 TBM_SETBUDDY;
    internal static UInt32 TBM_GETBUDDY;
    internal static UInt32 TBM_SETPOSNOTIFY;
    internal static UInt32 TBM_SETUNICODEFORMAT;
    internal static UInt32 TBM_GETUNICODEFORMAT;
    internal static UInt32 TCM_FIRST;
    internal static UInt32 TCM_GETIMAGELIST;
    internal static UInt32 TCM_SETIMAGELIST;
    internal static UInt32 TCM_GETITEMCOUNT;
    internal static UInt32 TCM_GETITEMA;
    internal static UInt32 TCM_GETITEMW;
    internal static UInt32 TCM_GETITEM;
    internal static UInt32 TCM_SETITEMA;
    internal static UInt32 TCM_SETITEMW;
    internal static UInt32 TCM_SETITEM;
    internal static UInt32 TCM_INSERTITEMA;
    internal static UInt32 TCM_INSERTITEMW;
    internal static UInt32 TCM_INSERTITEM;
    internal static UInt32 TCM_DELETEITEM;
    internal static UInt32 TCM_DELETEALLITEMS;
    internal static UInt32 TCM_GETITEMRECT;
    internal static UInt32 TCM_GETCURSEL;
    internal static UInt32 TCM_SETCURSEL;
    internal static UInt32 TCM_HITTEST;
    internal static UInt32 TCM_SETITEMEXTRA;
    internal static UInt32 TCM_ADJUSTRECT;
    internal static UInt32 TCM_SETITEMSIZE;
    internal static UInt32 TCM_REMOVEIMAGE;
    internal static UInt32 TCM_SETPADDING;
    internal static UInt32 TCM_GETROWCOUNT;
    internal static UInt32 TCM_GETTOOLTIPS;
    internal static UInt32 TCM_SETTOOLTIPS;
    internal static UInt32 TCM_GETCURFOCUS;
    internal static UInt32 TCM_SETCURFOCUS;
    internal static UInt32 TCM_SETMINTABWIDTH;
    internal static UInt32 TCM_DESELECTALL;
    internal static UInt32 TCM_HIGHLIGHTITEM;
    internal static UInt32 TCM_SETEXTENDEDSTYLE;
    internal static UInt32 TCM_GETEXTENDEDSTYLE;
    internal static UInt32 TCM_SETUNICODEFORMAT;
    internal static UInt32 TCM_GETUNICODEFORMAT;
    internal static UInt32 TCS_SCROLLOPPOSITE;
    internal static UInt32 TCS_BOTTOM;
    internal static UInt32 TCS_RIGHT;
    internal static UInt32 TCS_MULTISELECT;
    internal static UInt32 TCS_FLATBUTTONS;
    internal static UInt32 TCS_FORCEICONLEFT;
    internal static UInt32 TCS_FORCELABELLEFT;
    internal static UInt32 TCS_HOTTRACK;
    internal static UInt32 TCS_VERTICAL;
    internal static UInt32 TCS_TABS;
    internal static UInt32 TCS_BUTTONS;
    internal static UInt32 TCS_SINGLELINE;
    internal static UInt32 TCS_MULTILINE;
    internal static UInt32 TCS_RIGHTJUSTIFY;
    internal static UInt32 TCS_FIXEDWIDTH;
    internal static UInt32 TCS_RAGGEDRIGHT;
    internal static UInt32 TCS_FOCUSONBUTTONDOWN;
    internal static UInt32 TCS_OWNERDRAWFIXED;
    internal static UInt32 TCS_TOOLTIPS;
    internal static UInt32 TCS_FOCUSNEVER;
    internal static UInt32 TCS_EX_FLATSEPARATORS;
    internal static UInt32 TCS_EX_REGISTERDROP;
    internal static string TOOLTIPS_CLASS;
    internal static string TRACKBAR_CLASS;
    internal static UInt32 TTDT_AUTOMATIC;
    internal static UInt32 TTDT_RESHOW;
    internal static UInt32 TTDT_AUTOPOP;
    internal static UInt32 TTDT_INITIAL;
    internal static UInt32 TTM_ACTIVATE;
    internal static UInt32 TTM_SETDELAYTIME;
    internal static UInt32 TTM_ADDTOOLA;
    internal static UInt32 TTM_ADDTOOLW;
    internal static UInt32 TTM_DELTOOLA;
    internal static UInt32 TTM_DELTOOLW;
    internal static UInt32 TTM_NEWTOOLRECTA;
    internal static UInt32 TTM_NEWTOOLRECTW;
    internal static UInt32 TTM_RELAYEVENT;
    internal static UInt32 TTM_GETTOOLINFOA;
    internal static UInt32 TTM_GETTOOLINFOW;
    internal static UInt32 TTM_SETTOOLINFOA;
    internal static UInt32 TTM_SETTOOLINFOW;
    internal static UInt32 TTM_HITTESTA;
    internal static UInt32 TTM_HITTESTW;
    internal static UInt32 TTM_GETTEXTA;
    internal static UInt32 TTM_GETTEXTW;
    internal static UInt32 TTM_UPDATETIPTEXTA;
    internal static UInt32 TTM_UPDATETIPTEXTW;
    internal static UInt32 TTM_GETTOOLCOUNT;
    internal static UInt32 TTM_ENUMTOOLSA;
    internal static UInt32 TTM_ENUMTOOLSW;
    internal static UInt32 TTM_GETCURRENTTOOLA;
    internal static UInt32 TTM_GETCURRENTTOOLW;
    internal static UInt32 TTM_WINDOWFROMPOINT;
    internal static UInt32 TTM_TRACKACTIVATE;
    internal static UInt32 TTM_TRACKPOSITION;
    internal static UInt32 TTM_SETTIPBKCOLOR;
    internal static UInt32 TTM_SETTIPTEXTCOLOR;
    internal static UInt32 TTM_GETDELAYTIME;
    internal static UInt32 TTM_GETTIPBKCOLOR;
    internal static UInt32 TTM_GETTIPTEXTCOLOR;
    internal static UInt32 TTM_SETMAXTIPWIDTH;
    internal static UInt32 TTM_GETMAXTIPWIDTH;
    internal static UInt32 TTM_SETMARGIN;
    internal static UInt32 TTM_GETMARGIN;
    internal static UInt32 TTM_POP;
    internal static UInt32 TTM_UPDATE;
    internal static UInt32 TTM_GETBUBBLESIZE;
    internal static UInt32 TTM_ADJUSTRECT;
    internal static UInt32 TTM_SETTITLEA;
    internal static UInt32 TTM_SETTITLEW;
    internal static UInt32 TTM_POPUP;
    internal static UInt32 TTM_GETTITLE;
    internal static UInt32 TTM_ADDTOOL;
    internal static UInt32 TTM_DELTOOL;
    internal static UInt32 TTM_NEWTOOLRECT;
    internal static UInt32 TTM_GETTOOLINFO;
    internal static UInt32 TTM_SETTOOLINFO;
    internal static UInt32 TTM_HITTEST;
    internal static UInt32 TTM_GETTEXT;
    internal static UInt32 TTM_UPDATETIPTEXT;
    internal static UInt32 TTM_ENUMTOOLS;
    internal static UInt32 TTM_GETCURRENTTOOL;
    internal static UInt32 TTM_SETTITLE;
    internal static UInt32 TTM_SETWINDOWTHEME;
    internal static UInt32 TTS_ALWAYSTIP;
    internal static UInt32 TTS_NOPREFIX;
    internal static UInt32 TTS_NOANIMATE;
    internal static UInt32 TTS_NOFADE;
    internal static UInt32 TTS_BALLOON;
    internal static UInt32 TTS_CLOSE;
    internal static UInt32 TTS_USEVISUALSTYLE;
    internal static UInt32 TVGN_ROOT;
    internal static UInt32 TVGN_NEXT;
    internal static UInt32 TVGN_PREVIOUS;
    internal static UInt32 TVGN_PARENT;
    internal static UInt32 TVGN_CHILD;
    internal static UInt32 TVGN_FIRSTVISIBLE;
    internal static UInt32 TVGN_NEXTVISIBLE;
    internal static UInt32 TVGN_PREVIOUSVISIBLE;
    internal static UInt32 TVGN_DROPHILITE;
    internal static UInt32 TVGN_CARET;
    internal static UInt32 TVGN_LASTVISIBLE;
    internal static UInt32 TVGN_NEXTSELECTED;
    internal static UInt32 TVM_INSERTITEMA;
    internal static UInt32 TVM_INSERTITEMW;
    internal static UInt32 TVM_INSERTITEM;
    internal static UInt32 TVM_DELETEITEM;
    internal static UInt32 TVM_EXPAND;
    internal static UInt32 TVM_GETITEMRECT;
    internal static UInt32 TVM_GETCOUNT;
    internal static UInt32 TVM_GETINDENT;
    internal static UInt32 TVM_SETINDENT;
    internal static UInt32 TVM_GETIMAGELIST;
    internal static UInt32 TVM_SETIMAGELIST;
    internal static UInt32 TVM_GETNEXTITEM;
    internal static UInt32 TVM_SELECTITEM;
    internal static UInt32 TVM_GETITEMA;
    internal static UInt32 TVM_GETITEMW;
    internal static UInt32 TVM_GETITEM;
    internal static UInt32 TVM_SETITEMA;
    internal static UInt32 TVM_SETITEMW;
    internal static UInt32 TVM_SETITEM;
    internal static UInt32 TVM_EDITLABELA;
    internal static UInt32 TVM_EDITLABELW;
    internal static UInt32 TVM_EDITLABEL;
    internal static UInt32 TVM_GETEDITCONTROL;
    internal static UInt32 TVM_GETVISIBLECOUNT;
    internal static UInt32 TVM_HITTEST;
    internal static UInt32 TVM_CREATEDRAGIMAGE;
    internal static UInt32 TVM_SORTCHILDREN;
    internal static UInt32 TVM_ENSUREVISIBLE;
    internal static UInt32 TVM_SORTCHILDRENCB;
    internal static UInt32 TVM_ENDEDITLABELNOW;
    internal static UInt32 TVM_GETISEARCHSTRINGA;
    internal static UInt32 TVM_GETISEARCHSTRINGW;
    internal static UInt32 TVM_GETISEARCHSTRING;
    internal static UInt32 TVM_SETTOOLTIPS;
    internal static UInt32 TVM_GETTOOLTIPS;
    internal static UInt32 TVM_SETINSERTMARK;
    internal static UInt32 TVM_SETUNICODEFORMAT;
    internal static UInt32 TVM_GETUNICODEFORMAT;
    internal static UInt32 TVM_SETITEMHEIGHT;
    internal static UInt32 TVM_GETITEMHEIGHT;
    internal static UInt32 TVM_SETBKCOLOR;
    internal static UInt32 TVM_SETTEXTCOLOR;
    internal static UInt32 TVM_GETBKCOLOR;
    internal static UInt32 TVM_GETTEXTCOLOR;
    internal static UInt32 TVM_SETSCROLLTIME;
    internal static UInt32 TVM_GETSCROLLTIME;
    internal static UInt32 TVM_SETINSERTMARKCOLOR;
    internal static UInt32 TVM_GETINSERTMARKCOLOR;
    internal static UInt32 TVM_SETBORDER;
    internal static UInt32 TVM_GETITEMSTATE;
    internal static UInt32 TVM_SETLINECOLOR;
    internal static UInt32 TVM_GETLINECOLOR;
    internal static UInt32 TVM_MAPACCIDTOHTREEITEM;
    internal static UInt32 TVM_MAPHTREEITEMTOACCID;
    internal static UInt32 TVM_SETEXTENDEDSTYLE;
    internal static UInt32 TVM_GETEXTENDEDSTYLE;
    internal static UInt32 TVM_SETAUTOSCROLLINFO;
    internal static UInt32 TVM_SETHOT;
    internal static UInt32 TVM_GETSELECTEDCOUNT;
    internal static UInt32 TVM_SHOWINFOTIP;
    internal static UInt32 TVM_GETITEMPARTRECT;
    internal static UInt32 TVS_HASBUTTONS;
    internal static UInt32 TVS_HASLINES;
    internal static UInt32 TVS_LINESATROOT;
    internal static UInt32 TVS_EDITLABELS;
    internal static UInt32 TVS_DISABLEDRAGDROP;
    internal static UInt32 TVS_SHOWSELALWAYS;
    internal static UInt32 TVS_RTLREADING;
    internal static UInt32 TVS_NOTOOLTIPS;
    internal static UInt32 TVS_CHECKBOXES;
    internal static UInt32 TVS_TRACKSELECT;
    internal static UInt32 TVS_SINGLEEXPAND;
    internal static UInt32 TVS_INFOTIP;
    internal static UInt32 TVS_FULLROWSELECT;
    internal static UInt32 TVS_NOSCROLL;
    internal static UInt32 TVS_NONEVENHEIGHT;
    internal static UInt32 TVS_NOHSCROLL;
    internal static UInt32 TVS_EX_NOSINGLECOLLAPSE;
    internal static UInt32 TVS_EX_MULTISELECT;
    internal static UInt32 TVS_EX_DOUBLEBUFFER;
    internal static UInt32 TVS_EX_NOINDENTSTATE;
    internal static UInt32 TVS_EX_RICHTOOLTIP;
    internal static UInt32 TVS_EX_AUTOHSCROLL;
    internal static UInt32 TVS_EX_FADEINOUTEXPANDOS;
    internal static UInt32 TVS_EX_PARTIALCHECKBOXES;
    internal static UInt32 TVS_EX_EXCLUSIONCHECKBOXES;
    internal static UInt32 TVS_EX_DIMMEDCHECKBOXES;
    internal static UInt32 TVS_EX_DRAWIMAGEASYNC;
    internal static UInt32 TVSIL_NORMAL;
    internal static UInt32 TVSIL_STATE;
    internal static UInt32 UiaAppendRuntimeId;
    internal static int UiaRootObjectId;
    internal static UInt32 UIS_SET;
    internal static UInt32 UIS_CLEAR;
    internal static UInt32 UIS_INITIALIZE;
    internal static UInt32 UISF_HIDEFOCUS;
    internal static UInt32 UISF_HIDEACCEL;
    internal static UInt32 UISF_ACTIVE;
    internal static UInt32 WA_INACTIVE;
    internal static UInt32 WA_ACTIVE;
    internal static UInt32 WA_CLICKACTIVE;
    internal static string WC_BUTTON;
    internal static string WC_COMBOBOX;
    internal static string WC_EDIT;
    internal static string WC_LISTBOX;
    internal static string WC_LISTVIEW;
    internal static string WC_SCROLLBAR;
    internal static string WC_STATIC;
    internal static string WC_TABCONTROL;
    internal static string WC_TREEVIEW;
    internal static UInt32 WHEEL_DELTA;
    internal static UInt32 WINEVENT_INCONTEXT;
    internal static UInt32 WM_DDE_FIRST;
    internal static UInt32 WM_DDE_INITIATE;
    internal static UInt32 WM_DDE_TERMINATE;
    internal static UInt32 WM_DDE_ADVISE;
    internal static UInt32 WM_DDE_UNADVISE;
    internal static UInt32 WM_DDE_ACK;
    internal static UInt32 WM_DDE_DATA;
    internal static UInt32 WM_DDE_REQUEST;
    internal static UInt32 WM_DDE_POKE;
    internal static UInt32 WM_DDE_EXECUTE;
    internal static UInt32 WM_DDE_LAST;
    internal static UInt32 WM_IME_REPORT;
    internal static UInt32 WM_WNT_CONVERTREQUESTEX;
    internal static UInt32 WM_CONVERTREQUEST;
    internal static UInt32 WM_CONVERTRESULT;
    internal static UInt32 WM_INTERIM;
    internal static UInt32 WM_IMEKEYDOWN;
    internal static UInt32 WM_IMEKEYUP;
    internal static UInt32 WM_CTLCOLOR;
    internal static UInt32 WM_MOUSEHOVER;
    internal static UInt32 WM_MOUSELEAVE;
    internal static UInt32 WM_CHOOSEFONT_GETLOGFONT;
    internal static UInt32 WM_CHOOSEFONT_SETLOGFONT;
    internal static UInt32 WM_CHOOSEFONT_SETFLAGS;
    internal static UInt32 WM_PSD_FULLPAGERECT;
    internal static UInt32 WM_PSD_MINMARGINRECT;
    internal static UInt32 WM_PSD_MARGINRECT;
    internal static UInt32 WM_PSD_GREEKTEXTRECT;
    internal static UInt32 WM_PSD_ENVSTAMPRECT;
    internal static UInt32 WM_PSD_YAFULLPAGERECT;
    internal static UInt32 WM_CPL_LAUNCH;
    internal static UInt32 WM_CPL_LAUNCHED;
    internal static UInt32 WM_TABLET_DEFBASE;
    internal static UInt32 WM_TABLET_MAXOFFSET;
    internal static UInt32 WM_TABLET_ADDED;
    internal static UInt32 WM_TABLET_DELETED;
    internal static UInt32 WM_TABLET_FLICK;
    internal static UInt32 WM_TABLET_QUERYSYSTEMGESTURESTATUS;
    internal static UInt32 WM_CONTEXTMENU;
    internal static UInt32 WM_UNICHAR;
    internal static UInt32 WM_PRINTCLIENT;
    internal static UInt32 WM_NOTIFY;
    internal static UInt32 WM_DEVICECHANGE;
    internal static UInt32 WM_NULL;
    internal static UInt32 WM_CREATE;
    internal static UInt32 WM_DESTROY;
    internal static UInt32 WM_MOVE;
    internal static UInt32 WM_SIZE;
    internal static UInt32 WM_ACTIVATE;
    internal static UInt32 WM_SETFOCUS;
    internal static UInt32 WM_KILLFOCUS;
    internal static UInt32 WM_ENABLE;
    internal static UInt32 WM_SETREDRAW;
    internal static UInt32 WM_SETTEXT;
    internal static UInt32 WM_GETTEXT;
    internal static UInt32 WM_GETTEXTLENGTH;
    internal static UInt32 WM_PAINT;
    internal static UInt32 WM_CLOSE;
    internal static UInt32 WM_QUERYENDSESSION;
    internal static UInt32 WM_QUERYOPEN;
    internal static UInt32 WM_ENDSESSION;
    internal static UInt32 WM_QUIT;
    internal static UInt32 WM_ERASEBKGND;
    internal static UInt32 WM_SYSCOLORCHANGE;
    internal static UInt32 WM_SHOWWINDOW;
    internal static UInt32 WM_WININICHANGE;
    internal static UInt32 WM_SETTINGCHANGE;
    internal static UInt32 WM_DEVMODECHANGE;
    internal static UInt32 WM_ACTIVATEAPP;
    internal static UInt32 WM_FONTCHANGE;
    internal static UInt32 WM_TIMECHANGE;
    internal static UInt32 WM_CANCELMODE;
    internal static UInt32 WM_SETCURSOR;
    internal static UInt32 WM_MOUSEACTIVATE;
    internal static UInt32 WM_CHILDACTIVATE;
    internal static UInt32 WM_QUEUESYNC;
    internal static UInt32 WM_GETMINMAXINFO;
    internal static UInt32 WM_PAINTICON;
    internal static UInt32 WM_ICONERASEBKGND;
    internal static UInt32 WM_NEXTDLGCTL;
    internal static UInt32 WM_SPOOLERSTATUS;
    internal static UInt32 WM_DRAWITEM;
    internal static UInt32 WM_MEASUREITEM;
    internal static UInt32 WM_DELETEITEM;
    internal static UInt32 WM_VKEYTOITEM;
    internal static UInt32 WM_CHARTOITEM;
    internal static UInt32 WM_SETFONT;
    internal static UInt32 WM_GETFONT;
    internal static UInt32 WM_SETHOTKEY;
    internal static UInt32 WM_GETHOTKEY;
    internal static UInt32 WM_QUERYDRAGICON;
    internal static UInt32 WM_COMPAREITEM;
    internal static UInt32 WM_GETOBJECT;
    internal static UInt32 WM_COMPACTING;
    internal static UInt32 WM_COMMNOTIFY;
    internal static UInt32 WM_WINDOWPOSCHANGING;
    internal static UInt32 WM_WINDOWPOSCHANGED;
    internal static UInt32 WM_POWER;
    internal static UInt32 WM_COPYDATA;
    internal static UInt32 WM_CANCELJOURNAL;
    internal static UInt32 WM_INPUTLANGCHANGEREQUEST;
    internal static UInt32 WM_INPUTLANGCHANGE;
    internal static UInt32 WM_TCARD;
    internal static UInt32 WM_HELP;
    internal static UInt32 WM_USERCHANGED;
    internal static UInt32 WM_NOTIFYFORMAT;
    internal static UInt32 WM_STYLECHANGING;
    internal static UInt32 WM_STYLECHANGED;
    internal static UInt32 WM_DISPLAYCHANGE;
    internal static UInt32 WM_GETICON;
    internal static UInt32 WM_SETICON;
    internal static UInt32 WM_NCCREATE;
    internal static UInt32 WM_NCDESTROY;
    internal static UInt32 WM_NCCALCSIZE;
    internal static UInt32 WM_NCHITTEST;
    internal static UInt32 WM_NCPAINT;
    internal static UInt32 WM_NCACTIVATE;
    internal static UInt32 WM_GETDLGCODE;
    internal static UInt32 WM_SYNCPAINT;
    internal static UInt32 WM_NCMOUSEMOVE;
    internal static UInt32 WM_NCLBUTTONDOWN;
    internal static UInt32 WM_NCLBUTTONUP;
    internal static UInt32 WM_NCLBUTTONDBLCLK;
    internal static UInt32 WM_NCRBUTTONDOWN;
    internal static UInt32 WM_NCRBUTTONUP;
    internal static UInt32 WM_NCRBUTTONDBLCLK;
    internal static UInt32 WM_NCMBUTTONDOWN;
    internal static UInt32 WM_NCMBUTTONUP;
    internal static UInt32 WM_NCMBUTTONDBLCLK;
    internal static UInt32 WM_NCXBUTTONDOWN;
    internal static UInt32 WM_NCXBUTTONUP;
    internal static UInt32 WM_NCXBUTTONDBLCLK;
    internal static UInt32 WM_INPUT_DEVICE_CHANGE;
    internal static UInt32 WM_INPUT;
    internal static UInt32 WM_KEYFIRST;
    internal static UInt32 WM_KEYDOWN;
    internal static UInt32 WM_KEYUP;
    internal static UInt32 WM_CHAR;
    internal static UInt32 WM_DEADCHAR;
    internal static UInt32 WM_SYSKEYDOWN;
    internal static UInt32 WM_SYSKEYUP;
    internal static UInt32 WM_SYSCHAR;
    internal static UInt32 WM_SYSDEADCHAR;
    internal static UInt32 WM_KEYLAST;
    internal static UInt32 WM_IME_STARTCOMPOSITION;
    internal static UInt32 WM_IME_ENDCOMPOSITION;
    internal static UInt32 WM_IME_COMPOSITION;
    internal static UInt32 WM_IME_KEYLAST;
    internal static UInt32 WM_INITDIALOG;
    internal static UInt32 WM_COMMAND;
    internal static UInt32 WM_SYSCOMMAND;
    internal static UInt32 WM_TIMER;
    internal static UInt32 WM_HSCROLL;
    internal static UInt32 WM_VSCROLL;
    internal static UInt32 WM_INITMENU;
    internal static UInt32 WM_INITMENUPOPUP;
    internal static UInt32 WM_GESTURE;
    internal static UInt32 WM_GESTURENOTIFY;
    internal static UInt32 WM_MENUSELECT;
    internal static UInt32 WM_MENUCHAR;
    internal static UInt32 WM_ENTERIDLE;
    internal static UInt32 WM_MENURBUTTONUP;
    internal static UInt32 WM_MENUDRAG;
    internal static UInt32 WM_MENUGETOBJECT;
    internal static UInt32 WM_UNINITMENUPOPUP;
    internal static UInt32 WM_MENUCOMMAND;
    internal static UInt32 WM_CHANGEUISTATE;
    internal static UInt32 WM_UPDATEUISTATE;
    internal static UInt32 WM_QUERYUISTATE;
    internal static UInt32 WM_CTLCOLORMSGBOX;
    internal static UInt32 WM_CTLCOLOREDIT;
    internal static UInt32 WM_CTLCOLORLISTBOX;
    internal static UInt32 WM_CTLCOLORBTN;
    internal static UInt32 WM_CTLCOLORDLG;
    internal static UInt32 WM_CTLCOLORSCROLLBAR;
    internal static UInt32 WM_CTLCOLORSTATIC;
    internal static UInt32 WM_MOUSEFIRST;
    internal static UInt32 WM_MOUSEMOVE;
    internal static UInt32 WM_LBUTTONDOWN;
    internal static UInt32 WM_LBUTTONUP;
    internal static UInt32 WM_LBUTTONDBLCLK;
    internal static UInt32 WM_RBUTTONDOWN;
    internal static UInt32 WM_RBUTTONUP;
    internal static UInt32 WM_RBUTTONDBLCLK;
    internal static UInt32 WM_MBUTTONDOWN;
    internal static UInt32 WM_MBUTTONUP;
    internal static UInt32 WM_MBUTTONDBLCLK;
    internal static UInt32 WM_MOUSEWHEEL;
    internal static UInt32 WM_XBUTTONDOWN;
    internal static UInt32 WM_XBUTTONUP;
    internal static UInt32 WM_XBUTTONDBLCLK;
    internal static UInt32 WM_MOUSEHWHEEL;
    internal static UInt32 WM_MOUSELAST;
    internal static UInt32 WM_PARENTNOTIFY;
    internal static UInt32 WM_ENTERMENULOOP;
    internal static UInt32 WM_EXITMENULOOP;
    internal static UInt32 WM_NEXTMENU;
    internal static UInt32 WM_SIZING;
    internal static UInt32 WM_CAPTURECHANGED;
    internal static UInt32 WM_MOVING;
    internal static UInt32 WM_POWERBROADCAST;
    internal static UInt32 WM_MDICREATE;
    internal static UInt32 WM_MDIDESTROY;
    internal static UInt32 WM_MDIACTIVATE;
    internal static UInt32 WM_MDIRESTORE;
    internal static UInt32 WM_MDINEXT;
    internal static UInt32 WM_MDIMAXIMIZE;
    internal static UInt32 WM_MDITILE;
    internal static UInt32 WM_MDICASCADE;
    internal static UInt32 WM_MDIICONARRANGE;
    internal static UInt32 WM_MDIGETACTIVE;
    internal static UInt32 WM_MDISETMENU;
    internal static UInt32 WM_ENTERSIZEMOVE;
    internal static UInt32 WM_EXITSIZEMOVE;
    internal static UInt32 WM_DROPFILES;
    internal static UInt32 WM_MDIREFRESHMENU;
    internal static UInt32 WM_POINTERDEVICECHANGE;
    internal static UInt32 WM_POINTERDEVICEINRANGE;
    internal static UInt32 WM_POINTERDEVICEOUTOFRANGE;
    internal static UInt32 WM_TOUCH;
    internal static UInt32 WM_NCPOINTERUPDATE;
    internal static UInt32 WM_NCPOINTERDOWN;
    internal static UInt32 WM_NCPOINTERUP;
    internal static UInt32 WM_POINTERUPDATE;
    internal static UInt32 WM_POINTERDOWN;
    internal static UInt32 WM_POINTERUP;
    internal static UInt32 WM_POINTERENTER;
    internal static UInt32 WM_POINTERLEAVE;
    internal static UInt32 WM_POINTERACTIVATE;
    internal static UInt32 WM_POINTERCAPTURECHANGED;
    internal static UInt32 WM_TOUCHHITTESTING;
    internal static UInt32 WM_POINTERWHEEL;
    internal static UInt32 WM_POINTERHWHEEL;
    internal static UInt32 WM_POINTERROUTEDTO;
    internal static UInt32 WM_POINTERROUTEDAWAY;
    internal static UInt32 WM_POINTERROUTEDRELEASED;
    internal static UInt32 WM_IME_SETCONTEXT;
    internal static UInt32 WM_IME_NOTIFY;
    internal static UInt32 WM_IME_CONTROL;
    internal static UInt32 WM_IME_COMPOSITIONFULL;
    internal static UInt32 WM_IME_SELECT;
    internal static UInt32 WM_IME_CHAR;
    internal static UInt32 WM_IME_REQUEST;
    internal static UInt32 WM_IME_KEYDOWN;
    internal static UInt32 WM_IME_KEYUP;
    internal static UInt32 WM_NCMOUSEHOVER;
    internal static UInt32 WM_NCMOUSELEAVE;
    internal static UInt32 WM_WTSSESSION_CHANGE;
    internal static UInt32 WM_TABLET_FIRST;
    internal static UInt32 WM_TABLET_LAST;
    internal static UInt32 WM_DPICHANGED;
    internal static UInt32 WM_DPICHANGED_BEFOREPARENT;
    internal static UInt32 WM_DPICHANGED_AFTERPARENT;
    internal static UInt32 WM_GETDPISCALEDSIZE;
    internal static UInt32 WM_CUT;
    internal static UInt32 WM_COPY;
    internal static UInt32 WM_PASTE;
    internal static UInt32 WM_CLEAR;
    internal static UInt32 WM_UNDO;
    internal static UInt32 WM_RENDERFORMAT;
    internal static UInt32 WM_RENDERALLFORMATS;
    internal static UInt32 WM_DESTROYCLIPBOARD;
    internal static UInt32 WM_DRAWCLIPBOARD;
    internal static UInt32 WM_PAINTCLIPBOARD;
    internal static UInt32 WM_VSCROLLCLIPBOARD;
    internal static UInt32 WM_SIZECLIPBOARD;
    internal static UInt32 WM_ASKCBFORMATNAME;
    internal static UInt32 WM_CHANGECBCHAIN;
    internal static UInt32 WM_HSCROLLCLIPBOARD;
    internal static UInt32 WM_QUERYNEWPALETTE;
    internal static UInt32 WM_PALETTEISCHANGING;
    internal static UInt32 WM_PALETTECHANGED;
    internal static UInt32 WM_HOTKEY;
    internal static UInt32 WM_PRINT;
    internal static UInt32 WM_APPCOMMAND;
    internal static UInt32 WM_THEMECHANGED;
    internal static UInt32 WM_CLIPBOARDUPDATE;
    internal static UInt32 WM_DWMCOMPOSITIONCHANGED;
    internal static UInt32 WM_DWMNCRENDERINGCHANGED;
    internal static UInt32 WM_DWMCOLORIZATIONCOLORCHANGED;
    internal static UInt32 WM_DWMWINDOWMAXIMIZEDCHANGE;
    internal static UInt32 WM_DWMSENDICONICTHUMBNAIL;
    internal static UInt32 WM_DWMSENDICONICLIVEPREVIEWBITMAP;
    internal static UInt32 WM_GETTITLEBARINFOEX;
    internal static UInt32 WM_HANDHELDFIRST;
    internal static UInt32 WM_HANDHELDLAST;
    internal static UInt32 WM_AFXFIRST;
    internal static UInt32 WM_AFXLAST;
    internal static UInt32 WM_PENWINFIRST;
    internal static UInt32 WM_PENWINLAST;
    internal static UInt32 WM_APP;
    internal static UInt32 WM_USER;
    internal static UInt32 WM_TOOLTIPDISMISS;
    internal static UInt32 WM_FI_FILENAME;
    internal static UInt32 WM_CODEC_ONEPASS_CBR;
    internal static UInt32 WM_CODEC_ONEPASS_VBR;
    internal static UInt32 WM_CODEC_TWOPASS_CBR;
    internal static UInt32 WM_CODEC_TWOPASS_VBR_UNCONSTRAINED;
    internal static UInt32 WM_CODEC_TWOPASS_VBR_PEAKCONSTRAINED;
    internal static UInt32 WM_CAP_START;
    internal static UInt32 WM_CAP_UNICODE_START;
    internal static UInt32 WM_CAP_GET_CAPSTREAMPTR;
    internal static UInt32 WM_CAP_SET_CALLBACK_ERRORW;
    internal static UInt32 WM_CAP_SET_CALLBACK_STATUSW;
    internal static UInt32 WM_CAP_SET_CALLBACK_ERRORA;
    internal static UInt32 WM_CAP_SET_CALLBACK_STATUSA;
    internal static UInt32 WM_CAP_SET_CALLBACK_ERROR;
    internal static UInt32 WM_CAP_SET_CALLBACK_STATUS;
    internal static UInt32 WM_CAP_SET_CALLBACK_YIELD;
    internal static UInt32 WM_CAP_SET_CALLBACK_FRAME;
    internal static UInt32 WM_CAP_SET_CALLBACK_VIDEOSTREAM;
    internal static UInt32 WM_CAP_SET_CALLBACK_WAVESTREAM;
    internal static UInt32 WM_CAP_GET_USER_DATA;
    internal static UInt32 WM_CAP_SET_USER_DATA;
    internal static UInt32 WM_CAP_DRIVER_CONNECT;
    internal static UInt32 WM_CAP_DRIVER_DISCONNECT;
    internal static UInt32 WM_CAP_DRIVER_GET_NAMEA;
    internal static UInt32 WM_CAP_DRIVER_GET_VERSIONA;
    internal static UInt32 WM_CAP_DRIVER_GET_NAMEW;
    internal static UInt32 WM_CAP_DRIVER_GET_VERSIONW;
    internal static UInt32 WM_CAP_DRIVER_GET_NAME;
    internal static UInt32 WM_CAP_DRIVER_GET_VERSION;
    internal static UInt32 WM_CAP_DRIVER_GET_CAPS;
    internal static UInt32 WM_CAP_FILE_SET_CAPTURE_FILEA;
    internal static UInt32 WM_CAP_FILE_GET_CAPTURE_FILEA;
    internal static UInt32 WM_CAP_FILE_SAVEASA;
    internal static UInt32 WM_CAP_FILE_SAVEDIBA;
    internal static UInt32 WM_CAP_FILE_SET_CAPTURE_FILEW;
    internal static UInt32 WM_CAP_FILE_GET_CAPTURE_FILEW;
    internal static UInt32 WM_CAP_FILE_SAVEASW;
    internal static UInt32 WM_CAP_FILE_SAVEDIBW;
    internal static UInt32 WM_CAP_FILE_SET_CAPTURE_FILE;
    internal static UInt32 WM_CAP_FILE_GET_CAPTURE_FILE;
    internal static UInt32 WM_CAP_FILE_SAVEAS;
    internal static UInt32 WM_CAP_FILE_SAVEDIB;
    internal static UInt32 WM_CAP_FILE_ALLOCATE;
    internal static UInt32 WM_CAP_FILE_SET_INFOCHUNK;
    internal static UInt32 WM_CAP_EDIT_COPY;
    internal static UInt32 WM_CAP_SET_AUDIOFORMAT;
    internal static UInt32 WM_CAP_GET_AUDIOFORMAT;
    internal static UInt32 WM_CAP_DLG_VIDEOFORMAT;
    internal static UInt32 WM_CAP_DLG_VIDEOSOURCE;
    internal static UInt32 WM_CAP_DLG_VIDEODISPLAY;
    internal static UInt32 WM_CAP_GET_VIDEOFORMAT;
    internal static UInt32 WM_CAP_SET_VIDEOFORMAT;
    internal static UInt32 WM_CAP_DLG_VIDEOCOMPRESSION;
    internal static UInt32 WM_CAP_SET_PREVIEW;
    internal static UInt32 WM_CAP_SET_OVERLAY;
    internal static UInt32 WM_CAP_SET_PREVIEWRATE;
    internal static UInt32 WM_CAP_SET_SCALE;
    internal static UInt32 WM_CAP_GET_STATUS;
    internal static UInt32 WM_CAP_SET_SCROLL;
    internal static UInt32 WM_CAP_GRAB_FRAME;
    internal static UInt32 WM_CAP_GRAB_FRAME_NOSTOP;
    internal static UInt32 WM_CAP_SEQUENCE;
    internal static UInt32 WM_CAP_SEQUENCE_NOFILE;
    internal static UInt32 WM_CAP_SET_SEQUENCE_SETUP;
    internal static UInt32 WM_CAP_GET_SEQUENCE_SETUP;
    internal static UInt32 WM_CAP_SET_MCI_DEVICEA;
    internal static UInt32 WM_CAP_GET_MCI_DEVICEA;
    internal static UInt32 WM_CAP_SET_MCI_DEVICEW;
    internal static UInt32 WM_CAP_GET_MCI_DEVICEW;
    internal static UInt32 WM_CAP_SET_MCI_DEVICE;
    internal static UInt32 WM_CAP_GET_MCI_DEVICE;
    internal static UInt32 WM_CAP_STOP;
    internal static UInt32 WM_CAP_ABORT;
    internal static UInt32 WM_CAP_SINGLE_FRAME_OPEN;
    internal static UInt32 WM_CAP_SINGLE_FRAME_CLOSE;
    internal static UInt32 WM_CAP_SINGLE_FRAME;
    internal static UInt32 WM_CAP_PAL_OPENA;
    internal static UInt32 WM_CAP_PAL_SAVEA;
    internal static UInt32 WM_CAP_PAL_OPENW;
    internal static UInt32 WM_CAP_PAL_SAVEW;
    internal static UInt32 WM_CAP_PAL_OPEN;
    internal static UInt32 WM_CAP_PAL_SAVE;
    internal static UInt32 WM_CAP_PAL_PASTE;
    internal static UInt32 WM_CAP_PAL_AUTOCREATE;
    internal static UInt32 WM_CAP_PAL_MANUALCREATE;
    internal static UInt32 WM_CAP_SET_CALLBACK_CAPCONTROL;
    internal static UInt32 WM_CAP_UNICODE_END;
    internal static UInt32 WM_CAP_END;
    internal static UInt32 WM_SampleExtension_ContentType_Size;
    internal static UInt32 WM_SampleExtension_PixelAspectRatio_Size;
    internal static UInt32 WM_SampleExtension_Timecode_Size;
    internal static UInt32 WM_SampleExtension_SampleDuration_Size;
    internal static UInt32 WM_SampleExtension_ChromaLocation_Size;
    internal static UInt32 WM_SampleExtension_ColorSpaceInfo_Size;
    internal static UInt32 WM_CT_REPEAT_FIRST_FIELD;
    internal static UInt32 WM_CT_BOTTOM_FIELD_FIRST;
    internal static UInt32 WM_CT_TOP_FIELD_FIRST;
    internal static UInt32 WM_CT_INTERLACED;
    internal static UInt32 WM_CL_INTERLACED420;
    internal static UInt32 WM_CL_PROGRESSIVE420;
    internal static UInt32 WM_MAX_VIDEO_STREAMS;
    internal static UInt32 WM_MAX_STREAMS;
    internal static Guid WM_SampleExtensionGUID_OutputCleanPoint;
    internal static Guid WM_SampleExtensionGUID_Timecode;
    internal static Guid WM_SampleExtensionGUID_ChromaLocation;
    internal static Guid WM_SampleExtensionGUID_ColorSpaceInfo;
    internal static Guid WM_SampleExtensionGUID_UserDataInfo;
    internal static Guid WM_SampleExtensionGUID_FileName;
    internal static Guid WM_SampleExtensionGUID_ContentType;
    internal static Guid WM_SampleExtensionGUID_PixelAspectRatio;
    internal static Guid WM_SampleExtensionGUID_SampleDuration;
    internal static Guid WM_SampleExtensionGUID_SampleProtectionSalt;
    internal static UInt32 WM_ADSPROP_NOTIFY_PAGEINIT;
    internal static UInt32 WM_ADSPROP_NOTIFY_PAGEHWND;
    internal static UInt32 WM_ADSPROP_NOTIFY_CHANGE;
    internal static UInt32 WM_ADSPROP_NOTIFY_APPLY;
    internal static UInt32 WM_ADSPROP_NOTIFY_SETFOCUS;
    internal static UInt32 WM_ADSPROP_NOTIFY_FOREGROUND;
    internal static UInt32 WM_ADSPROP_NOTIFY_EXIT;
    internal static UInt32 WM_ADSPROP_NOTIFY_ERROR;
    internal static UInt32 WM_RASDIALEVENT;
    internal static int WSF_VISIBLE;
    internal static ushort XBUTTON1;
    internal static ushort XBUTTON2;
    private static PInvoke();
    public static bool AreDpiAwarenessContextsEqualInternal(DPI_AWARENESS_CONTEXT dpiContextA, DPI_AWARENESS_CONTEXT dpiContextB);
    [NullableContextAttribute("1")]
public static BOOL BitBlt(T hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, ROP_CODE rop);
    [NullableContextAttribute("1")]
public static BOOL BitBlt(HDC hdc, int x, int y, int cx, int cy, T hdcSrc, int x1, int y1, ROP_CODE rop);
    internal static LRESULT CallWindowProc(Void* lpPrevWndFunc, T hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [NullableContextAttribute("1")]
public static HWND ChildWindowFromPointEx(T hwndParent, Point pt, CWP_FLAGS uFlags);
    [NullableContextAttribute("1")]
public static BOOL ClientToScreen(T hWnd, Point& lpPoint);
    [NullableContextAttribute("1")]
public static BOOL CloseHandle(T handle);
    [NullableContextAttribute("1")]
public static HANDLE CopyImage(T hImage, GDI_IMAGE_TYPE type, int cx, int cy, IMAGE_FLAGS flags);
    [NullableContextAttribute("2")]
public static HWND CreateWindowEx(WINDOW_EX_STYLE dwExStyle, string lpClassName, string lpWindowName, WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, object lpParam);
    [NullableContextAttribute("1")]
public static BOOL DestroyAcceleratorTable(T hAccel);
    public static LRESULT DispatchMessageA(MSG* msg);
    [NullableContextAttribute("1")]
public static void DragAcceptFiles(T hWnd, BOOL fAccept);
    [NullableContextAttribute("1")]
public static BOOL DrawIcon(HDC hDC, int x, int y, T hIcon);
    [NullableContextAttribute("1")]
public static BOOL DrawIconEx(HDC hDC, int xLeft, int yTop, T hIcon, int cxWidth, int cyWidth);
    [NullableContextAttribute("1")]
public static BOOL DrawMenuBar(T hWnd);
    public static int DrawTextEx(HDC hdc, ReadOnlySpan`1<char> lpchText, RECT* lprc, DRAW_TEXT_FORMAT format, DRAWTEXTPARAMS* lpdtp);
    [NullableContextAttribute("1")]
public static BOOL EnableMenuItem(T hMenu, UInt32 uIDEnableItem, MENU_ITEM_FLAGS uEnable);
    [NullableContextAttribute("1")]
public static BOOL EnableScrollBar(T hWnd, SCROLLBAR_CONSTANTS wSBflags, ENABLE_SCROLL_BAR_ARROWS wArrows);
    [NullableContextAttribute("1")]
public static BOOL EnableWindow(T hWnd, BOOL bEnable);
    [NullableContextAttribute("1")]
public static BOOL EndDialog(T hDlg, IntPtr nResult);
    [NullableContextAttribute("1")]
public static BOOL EnumChildWindows(T hwndParent, EnumChildWindowsCallback callback);
    [UnmanagedCallersOnlyAttribute]
private static BOOL EnumChildWindowsNativeCallback(HWND hWnd, LPARAM lParam);
    [NullableContextAttribute("1")]
public static BOOL EnumDisplayMonitors(EnumDisplayMonitorsCallback callBack);
    [UnmanagedCallersOnlyAttribute]
private static BOOL EnumDisplayMonitorsNativeCallback(HMONITOR monitor, HDC hdc, RECT* lprcMonitor, LPARAM lParam);
    [NullableContextAttribute("1")]
public static BOOL EnumThreadWindows(UInt32 dwThreadId, EnumThreadWindowsCallback callback);
    [UnmanagedCallersOnlyAttribute]
private static BOOL HandleEnumThreadWindowsNativeCallback(HWND hWnd, LPARAM lParam);
    [NullableContextAttribute("1")]
public static BOOL EnumWindows(EnumWindowsCallback callback);
    [UnmanagedCallersOnlyAttribute]
private static BOOL EnumWindowsNativeCallback(HWND hWnd, LPARAM lParam);
    [NullableContextAttribute("1")]
public static int FillRect(T hDC, RECT& lprc, HBRUSH hbr);
    [NullableContextAttribute("1")]
public static HWND GetAncestor(T hwnd, GET_ANCESTOR_FLAGS flags);
    private static IntPtr GetClassLongW(HWND hWnd, GET_CLASS_LONG_INDEX nIndex);
    private static IntPtr GetClassLongPtrW(HWND hWnd, GET_CLASS_LONG_INDEX nIndex);
    public static IntPtr GetClassLong(HWND hWnd, GET_CLASS_LONG_INDEX nIndex);
    [NullableContextAttribute("1")]
public static BOOL GetClientRect(T hWnd, RECT& lpRect);
    [NullableContextAttribute("1")]
public static HWND GetDlgItem(T hDlg, int nIDDlgItem);
    [NullableContextAttribute("1")]
public static UInt32 GetDpiForWindow(T hwnd);
    [NullableContextAttribute("1")]
public static ICONINFO GetIconInfo(T cursor);
    [NullableContextAttribute("1")]
public static HMENU GetMenu(T hWnd);
    [NullableContextAttribute("1")]
public static int GetMenuItemCount(T hMenu);
    [NullableContextAttribute("1")]
[SkipLocalsInitAttribute]
public static string GetModuleFileNameLongPath(HINSTANCE hModule);
    public static bool GetObject(HGDIOBJ h, T& object);
    public static BOOL GetOpenFileName(OPENFILENAME* param0);
    public static BOOL GetSaveFileName(OPENFILENAME* param0);
    public static UInt32 GetPaletteEntries(HPALETTE hpal, Span`1<PALETTEENTRY> entries);
    [NullableContextAttribute("1")]
public static HWND GetParent(T hwnd);
    [NullableContextAttribute("1")]
public static BOOL GetScrollInfo(T hwnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO& lpsi);
    public static HBRUSH GetSysColorBrush(Color systemColor);
    [NullableContextAttribute("1")]
public static HMENU GetSystemMenu(T hwnd, BOOL bRevert);
    public static int GetCurrentSystemMetrics(SYSTEM_METRICS_INDEX nIndex, UInt32 dpi);
    [NullableContextAttribute("1")]
public static BOOL GetTextExtentPoint32W(T hdc, string lpString, int c, Size size);
    [NullableContextAttribute("1")]
public static string GetThemeDocumentationProperty(string pszThemeName, string pszPropertyName);
    [NullableContextAttribute("1")]
public static HRESULT GetThemeFont(T hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LOGFONT& pFont);
    public static DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContextInternal();
    [NullableContextAttribute("1")]
public static HWND GetWindow(T hWnd, GET_WINDOW_CMD uCmd);
    private static IntPtr GetWindowLongW(HWND hWnd, WINDOW_LONG_PTR_INDEX nIndex);
    private static IntPtr GetWindowLongPtrW(HWND hWnd, WINDOW_LONG_PTR_INDEX nIndex);
    [NullableContextAttribute("1")]
public static IntPtr GetWindowLong(T hWnd, WINDOW_LONG_PTR_INDEX nIndex);
    [NullableContextAttribute("1")]
public static BOOL GetWindowRect(T hWnd, RECT& lpRect);
    [NullableContextAttribute("1")]
[SkipLocalsInitAttribute]
public static string GetWindowText(T hWnd);
    [NullableContextAttribute("1")]
public static int GetWindowTextLength(T hWnd);
    [NullableContextAttribute("1")]
public static UInt32 GetWindowThreadProcessId(T hWnd, UInt32& lpdwProcessId);
    [NullableContextAttribute("1")]
public static HIMC ImmGetContext(T hWnd);
    [NullableContextAttribute("1")]
public static BOOL ImmReleaseContext(T hWnd, HIMC hIMC);
    [NullableContextAttribute("1")]
public static GDI_REGION_TYPE IntersectClipRect(T hdc, int left, int top, int right, int bottom);
    public static BOOL InvalidateRect(T hWnd, RECT* lpRect, BOOL bErase);
    [NullableContextAttribute("1")]
public static BOOL InvalidateRgn(T hWnd, HRGN hrgn, BOOL erase);
    public static bool IsAccelerator(T hAccel, int cAccelEntries, MSG* lpMsg, UInt16* lpwCmd);
    [NullableContextAttribute("1")]
public static BOOL IsChild(TParent hWndParent, TChild hWnd);
    [NullableContextAttribute("1")]
public static BOOL IsWindow(T hWnd);
    [NullableContextAttribute("1")]
public static BOOL IsWindowEnabled(T hWnd);
    [NullableContextAttribute("1")]
public static BOOL IsWindowVisible(T hWnd);
    [NullableContextAttribute("1")]
public static BOOL KillTimer(T hWnd, IntPtr uIDEvent);
    [NullableContextAttribute("1")]
public static HINSTANCE LoadComctl32(string startupPath);
    [NullableContextAttribute("1")]
public static HINSTANCE LoadLibraryFromSystemPathIfAvailable(string libraryName);
    [NullableContextAttribute("1")]
public static int MapWindowPoints(TFrom hWndFrom, TTo hWndTo, RECT& lpRect);
    [NullableContextAttribute("1")]
public static int MapWindowPoints(TFrom hWndFrom, TTo hWndTo, Point& lpPoint);
    [NullableContextAttribute("1")]
public static void NotifyWinEvent(UInt32 event, T hwnd, int idObject, int idChild);
    public static BOOL PeekMessage(MSG* lpMsg, T hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax, PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg);
    [NullableContextAttribute("1")]
public static BOOL PostMessage(T hWnd, MessageId Msg, WPARAM wParam, LPARAM lParam);
    public static BOOL RedrawWindow(T hWnd, RECT* lprcUpdate, HRGN hrgnUpdate, REDRAW_WINDOW_FLAGS flags);
    [NullableContextAttribute("1")]
public static HRESULT RegisterDragDrop(T hwnd, Interface pDropTarget);
    [NullableContextAttribute("1")]
[SkipLocalsInitAttribute]
public static bool RegLoadMUIString(RegistryKey key, string keyName, String& localizedValue);
    [NullableContextAttribute("1")]
public static HRESULT RevokeDragDrop(T hwnd);
    [NullableContextAttribute("1")]
public static BOOL ScreenToClient(T hWnd, Point& lpPoint);
    public static BOOL ScrollWindow(T hWnd, int XAmount, int YAmount, RECT* lpRect, RECT* rectClip);
    public static int ScrollWindowEx(T hWnd, int dx, int dy, RECT* prcScroll, RECT* prcClip, HRGN hrgnUpdate, RECT* prcUpdate, SCROLL_WINDOW_FLAGS flags);
    [NullableContextAttribute("1")]
public static LRESULT SendMessage(T hWnd, MessageId Msg, WPARAM wParam, LPARAM lParam);
    [NullableContextAttribute("1")]
public static LRESULT SendMessage(THwnd hWnd, MessageId Msg, TWParam wParam, LPARAM lParam);
    [NullableContextAttribute("1")]
public static LRESULT SendMessage(T hWnd, MessageId Msg, WPARAM wParam, string lParam);
    public static IntPtr SendMessage(THwnd hWnd, MessageId Msg, WPARAM wParam, TLParam& lParam);
    public static IntPtr SendMessage(THwnd hWnd, MessageId Msg, TWParam& wParam, TLParam& lParam);
    [NullableContextAttribute("1")]
public static HWND SetActiveWindow(T hWnd);
    [NullableContextAttribute("1")]
public static IntPtr SetCapture(T hWnd);
    private static IntPtr SetClassLongW(IntPtr hwnd, GET_CLASS_LONG_INDEX nIndex, IntPtr dwNewLong);
    private static IntPtr SetClassLongPtrW(IntPtr hwnd, GET_CLASS_LONG_INDEX nIndex, IntPtr dwNewLong);
    public static IntPtr SetClassLong(IntPtr hWnd, GET_CLASS_LONG_INDEX nIndex, IntPtr dwNewLong);
    [NullableContextAttribute("1")]
public static HWND SetFocus(T hWnd);
    [NullableContextAttribute("1")]
public static BOOL SetForegroundWindow(T hWnd);
    [NullableContextAttribute("1")]
public static BOOL SetLayeredWindowAttributes(T hwnd, COLORREF crKey, byte bAlpha, LAYERED_WINDOW_ATTRIBUTES_FLAGS dwFlags);
    [NullableContextAttribute("1")]
public static BOOL SetMenu(T hWnd, HMENU hMenu);
    [NullableContextAttribute("1")]
public static BOOL SetMenu(T1 hWnd, T2 hMenu);
    [NullableContextAttribute("1")]
public static HWND SetParent(TChild hWndChild, TParent hWndNewParent);
    [NullableContextAttribute("1")]
public static int SetScrollInfo(T hWnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO& lpsi, BOOL redraw);
    [NullableContextAttribute("1")]
public static int SetScrollPos(T hWnd, SCROLLBAR_CONSTANTS nBar, int nPos, BOOL bRedraw);
    public static DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContextInternal(DPI_AWARENESS_CONTEXT dpiContext);
    [NullableContextAttribute("1")]
public static UIntPtr SetTimer(T hWnd, UIntPtr nIDEvent, UInt32 uElapse);
    private static IntPtr SetWindowLongW(HWND hWnd, WINDOW_LONG_PTR_INDEX nIndex, IntPtr dwNewLong);
    private static IntPtr SetWindowLongPtrW(HWND hWnd, WINDOW_LONG_PTR_INDEX nIndex, IntPtr dwNewLong);
    [NullableContextAttribute("1")]
public static IntPtr SetWindowLong(T hWnd, WINDOW_LONG_PTR_INDEX nIndex, IntPtr newValue);
    [NullableContextAttribute("1")]
public static IntPtr SetWindowLong(THwnd hWnd, WINDOW_LONG_PTR_INDEX nIndex, TNewValue newValue);
    [NullableContextAttribute("1")]
public static IntPtr SetWindowLong(T hWnd, WINDOW_LONG_PTR_INDEX nIndex, WNDPROC dwNewLong);
    [NullableContextAttribute("1")]
public static BOOL SetWindowPos(T1 hWnd, T2 hWndInsertAfter, int X, int Y, int cx, int cy, SET_WINDOW_POS_FLAGS uFlags);
    [NullableContextAttribute("1")]
public static int SetWindowRgn(T hwnd, HRGN hrgn, BOOL fRedraw);
    [NullableContextAttribute("1")]
public static BOOL SetWindowText(T hWnd, string text);
    [NullableContextAttribute("1")]
public static HRESULT SHAutoComplete(T hwndEdit, SHELL_AUTOCOMPLETE_FLAGS flags);
    public static IShellItem* SHCreateItemFromParsingName(string path);
    public static IShellItem* SHCreateShellItem(string path);
    [NullableContextAttribute("1")]
public static BOOL ShowWindow(T hWnd, SHOW_WINDOW_CMD nCmdShow);
    public static bool SystemParametersInfo(SYSTEM_PARAMETERS_INFO_ACTION uiAction, T& value);
    public static int SystemParametersInfoInt(SYSTEM_PARAMETERS_INFO_ACTION uiAction);
    public static bool SystemParametersInfo(SYSTEM_PARAMETERS_INFO_ACTION uiAction, Boolean& value, UInt32 fWinIni);
    public static bool SystemParametersInfoBool(SYSTEM_PARAMETERS_INFO_ACTION uiAction);
    public static bool SystemParametersInfo(HIGHCONTRASTW& highContrast);
    public static bool SystemParametersInfo(NONCLIENTMETRICSW& metrics);
    public static bool TrySystemParametersInfoForDpi(NONCLIENTMETRICSW& metrics, UInt32 dpi);
    [NullableContextAttribute("1")]
public static BOOL UpdateWindow(T hWnd);
    public static BOOL ValidateRect(T hWnd, RECT* lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static WIN32_ERROR RegCloseKey(HKEY hKey);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static WIN32_ERROR RegLoadMUIString(HKEY hKey, string pszValue, PWSTR pszOutBuf, UInt32 cbOutBuf, UInt32* pcbData, UInt32 Flags, string pszDirectory);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static WIN32_ERROR RegLoadMUIString(HKEY hKey, PCWSTR pszValue, PWSTR pszOutBuf, UInt32 cbOutBuf, UInt32* pcbData, UInt32 Flags, PCWSTR pszDirectory);
    [SupportedOSPlatformAttribute("windows8.1")]
internal static HRESULT GetProcessDpiAwareness(HANDLE hprocess, PROCESS_DPI_AWARENESS& value);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows8.1")]
internal static HRESULT GetProcessDpiAwareness(HANDLE hprocess, PROCESS_DPI_AWARENESS* value);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows8.1")]
internal static HRESULT SetProcessDpiAwareness(PROCESS_DPI_AWARENESS value);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_Destroy(HIMAGELIST himl);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int ImageList_Add(HIMAGELIST himl, HBITMAP hbmImage, HBITMAP hbmMask);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HIMAGELIST ImageList_Create(int cx, int cy, IMAGELIST_CREATION_FLAGS flags, int cInitial, int cGrow);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_Draw(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, IMAGE_LIST_DRAW_STYLE fStyle);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_DrawEx(HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, IMAGE_LIST_DRAW_STYLE fStyle);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HIMAGELIST ImageList_Duplicate(HIMAGELIST himl);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_GetIconSize(HIMAGELIST himl, Int32* cx, Int32* cy);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int ImageList_GetImageCount(HIMAGELIST himl);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_GetImageInfo(HIMAGELIST himl, int i, IMAGEINFO& pImageInfo);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_GetImageInfo(HIMAGELIST himl, int i, IMAGEINFO* pImageInfo);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HIMAGELIST ImageList_Read(IStream* pstm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_Remove(HIMAGELIST himl, int i);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_Replace(HIMAGELIST himl, int i, HBITMAP hbmImage, HBITMAP hbmMask);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int ImageList_ReplaceIcon(HIMAGELIST himl, int i, HICON hicon);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static COLORREF ImageList_SetBkColor(HIMAGELIST himl, COLORREF clrBk);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ImageList_Write(HIMAGELIST himl, IStream* pstm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT ImageList_WriteEx(HIMAGELIST himl, IMAGE_LIST_WRITE_STREAM_FLAGS dwFlags, IStream* pstm);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL InitCommonControlsEx(INITCOMMONCONTROLSEX& picce);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL InitCommonControlsEx(INITCOMMONCONTROLSEX* picce);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static COMMON_DLG_ERRORS CommDlgExtendedError();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, ROP_CODE rop);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DeleteEnhMetaFile(HENHMETAFILE hmf);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HENHMETAFILE CloseEnhMetaFile(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DeleteObject(HGDIOBJ ho);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE CombineRgn(HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, RGN_COMBINE_MODE iMode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HBITMAP CreateBitmap(int nWidth, int nHeight, UInt32 nPlanes, UInt32 nBitCount, Void* lpBits);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HBRUSH CreateBrushIndirect(LOGBRUSH& plbrush);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HBRUSH CreateBrushIndirect(LOGBRUSH* plbrush);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HBITMAP CreateCompatibleBitmap(HDC hdc, int cx, int cy);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateCompatibleDC(HDC hdc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateDCW(string pwszDriver, string pwszDevice, string pszPort, Nullable`1<DEVMODEW> pdm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateDCW(PCWSTR pwszDriver, PCWSTR pwszDevice, PCWSTR pszPort, DEVMODEW* pdm);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HBITMAP CreateDIBSection(HDC hdc, BITMAPINFO& pbmi, DIB_USAGE usage, Void*& ppvBits, HANDLE hSection, UInt32 offset);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HBITMAP CreateDIBSection(HDC hdc, BITMAPINFO* pbmi, DIB_USAGE usage, Void** ppvBits, HANDLE hSection, UInt32 offset);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateEnhMetaFile(HDC hdc, string lpFilename, Nullable`1<RECT> lprc, string lpDesc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateEnhMetaFile(HDC hdc, PCWSTR lpFilename, RECT* lprc, PCWSTR lpDesc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HFONT CreateFontIndirect(LOGFONTW& lplf);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HFONT CreateFontIndirect(LOGFONTW* lplf);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HPALETTE CreateHalftonePalette(HDC hdc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateICW(string pszDriver, string pszDevice, string pszPort, Nullable`1<DEVMODEW> pdm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC CreateICW(PCWSTR pszDriver, PCWSTR pszDevice, PCWSTR pszPort, DEVMODEW* pdm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HBRUSH CreatePatternBrush(HBITMAP hbm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HPEN CreatePen(PEN_STYLE iStyle, int cWidth, COLORREF color);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRGN CreateRectRgn(int x1, int y1, int x2, int y2);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HBRUSH CreateSolidBrush(COLORREF color);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DeleteDC(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.1")]
internal static BOOL Ellipse(HDC hdc, int left, int top, int right, int bottom);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumEnhMetaFile(HDC hdc, HENHMETAFILE hmf, method proc, Void* param3, Nullable`1<RECT> lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumEnhMetaFile(HDC hdc, HENHMETAFILE hmf, method proc, Void* param3, RECT* lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ExtTextOut(HDC hdc, int x, int y, ETO_OPTIONS options, Nullable`1<RECT> lprect, string lpString, ReadOnlySpan`1<int> lpDx);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ExtTextOut(HDC hdc, int x, int y, ETO_OPTIONS options, RECT* lprect, PCWSTR lpString, UInt32 c, Int32* lpDx);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int GetBitmapBits(HBITMAP hbit, int cb, Void* lpvBits);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static COLORREF GetBkColor(HDC hdc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BACKGROUND_MODE GetBkMode(HDC hdc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetBrushOrgEx(HDC hdc, Point& lppt);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetBrushOrgEx(HDC hdc, Point* lppt);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE GetClipBox(HDC hdc, RECT& lprect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE GetClipBox(HDC hdc, RECT* lprect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int GetClipRgn(HDC hdc, HRGN hrgn);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HGDIOBJ GetCurrentObject(HDC hdc, OBJ_TYPE type);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetDeviceCaps(HDC hdc, GET_DEVICE_CAPS_INDEX index);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetDIBits(HDC hdc, HBITMAP hbm, UInt32 start, UInt32 cLines, Void* lpvBits, BITMAPINFO& lpbmi, DIB_USAGE usage);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int GetDIBits(HDC hdc, HBITMAP hbm, UInt32 start, UInt32 cLines, Void* lpvBits, BITMAPINFO* lpbmi, DIB_USAGE usage);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC_MAP_MODE GetMapMode(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static COLORREF GetNearestColor(HDC hdc, COLORREF color);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetObjectType(HGDIOBJ h);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int GetObject(HGDIOBJ h, int c, Void* pv);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetPaletteEntries(HPALETTE hpal, UInt32 iStart, Span`1<PALETTEENTRY> pPalEntries);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetPaletteEntries(HPALETTE hpal, UInt32 iStart, UInt32 cEntries, PALETTEENTRY* pPalEntries);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetRegionData(HRGN hrgn, UInt32 nCount, RGNDATA* lpRgnData);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE GetRgnBox(HRGN hrgn, RECT& lprc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE GetRgnBox(HRGN hrgn, RECT* lprc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static R2_MODE GetROP2(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HGDIOBJ GetStockObject(GET_STOCK_OBJECT_FLAGS i);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetSystemPaletteEntries(HDC hdc, UInt32 iStart, Span`1<PALETTEENTRY> pPalEntries);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetSystemPaletteEntries(HDC hdc, UInt32 iStart, UInt32 cEntries, PALETTEENTRY* pPalEntries);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static TEXT_ALIGN_OPTIONS GetTextAlign(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static COLORREF GetTextColor(HDC hdc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetTextExtentPoint32W(HDC hdc, string lpString, int c, SIZE& psizl);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetTextExtentPoint32W(HDC hdc, PCWSTR lpString, int c, SIZE* psizl);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetTextMetrics(HDC hdc, TEXTMETRICW& lptm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetTextMetrics(HDC hdc, TEXTMETRICW* lptm);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetViewportExtEx(HDC hdc, SIZE& lpsize);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetViewportExtEx(HDC hdc, SIZE* lpsize);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetViewportOrgEx(HDC hdc, Point& lppoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetViewportOrgEx(HDC hdc, Point* lppoint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetWorldTransform(HDC hdc, XFORM& lpxf);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetWorldTransform(HDC hdc, XFORM* lpxf);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE IntersectClipRect(HDC hdc, int left, int top, int right, int bottom);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL LineTo(HDC hdc, int x, int y);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL LPtoDP(HDC hdc, Span`1<Point> lppt);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL LPtoDP(HDC hdc, Point* lppt, int c);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL MoveToEx(HDC hdc, int x, int y, Point* lppt);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL OffsetViewportOrgEx(HDC hdc, int x, int y, Point* lppt);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DeleteMetaFile(HMETAFILE hmf);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL PatBlt(HDC hdc, int x, int y, int w, int h, ROP_CODE rop);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 RealizePalette(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL Rectangle(HDC hdc, int left, int top, int right, int bottom);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL RestoreDC(HDC hdc, int nSavedDC);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL RoundRect(HDC hdc, int left, int top, int right, int bottom, int width, int height);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int SaveDC(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE SelectClipRgn(HDC hdc, HRGN hrgn);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HGDIOBJ SelectObject(HDC hdc, HGDIOBJ h);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HPALETTE SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static COLORREF SetBkColor(HDC hdc, COLORREF color);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int SetBkMode(HDC hdc, BACKGROUND_MODE mode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int SetMapMode(HDC hdc, HDC_MAP_MODE iMode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int SetROP2(HDC hdc, R2_MODE rop2);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 SetTextAlign(HDC hdc, TEXT_ALIGN_OPTIONS align);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static COLORREF SetTextColor(HDC hdc, COLORREF color);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetViewportExtEx(HDC hdc, int x, int y, SIZE* lpsz);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetViewportOrgEx(HDC hdc, int x, int y, Point* lppt);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowExtEx(HDC hdc, int x, int y, SIZE* lpsz);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowOrgEx(HDC hdc, int x, int y, Point* lppt);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, Void* lpBits, BITMAPINFO& lpbmi, DIB_USAGE iUsage, ROP_CODE rop);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, Void* lpBits, BITMAPINFO* lpbmi, DIB_USAGE iUsage, ROP_CODE rop);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HIMC ImmAssociateContext(HWND param0, HIMC param1);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HIMC ImmCreateContext();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HIMC ImmGetContext(HWND param0);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ImmGetConversionStatus(HIMC param0, IME_CONVERSION_MODE* lpfdwConversion, IME_SENTENCE_MODE* lpfdwSentence);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ImmGetOpenStatus(HIMC param0);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ImmNotifyIME(HIMC param0, NOTIFY_IME_ACTION dwAction, NOTIFY_IME_INDEX dwIndex, UInt32 dwValue);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ImmReleaseContext(HWND param0, HIMC param1);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ImmSetConversionStatus(HIMC param0, IME_CONVERSION_MODE param1, IME_SENTENCE_MODE param2);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ImmSetOpenStatus(HIMC param0, BOOL param1);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL CloseHandle(HANDLE hObject);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ActivateActCtx(HANDLE hActCtx, UIntPtr& lpCookie);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL ActivateActCtx(HANDLE hActCtx, UIntPtr* lpCookie);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL FreeLibrary(HMODULE hLibModule);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HANDLE CreateActCtx(ACTCTXW& pActCtx);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HANDLE CreateActCtx(ACTCTXW* pActCtx);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HGLOBAL GlobalFree(HGLOBAL hMem);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL DeactivateActCtx(UInt32 dwFlags, UIntPtr ulCookie);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, HANDLE* lpTargetHandle, UInt32 dwDesiredAccess, BOOL bInheritHandle, DUPLICATE_HANDLE_OPTIONS dwOptions);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 FormatMessage(FORMAT_MESSAGE_OPTIONS dwFlags, Void* lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, PWSTR lpBuffer, UInt32 nSize, SByte** Arguments);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL GetCurrentActCtx(HANDLE* lphActCtx);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HANDLE GetCurrentProcess();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 GetCurrentProcessId();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HANDLE GetCurrentThread();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 GetCurrentThreadId();
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL GetExitCodeThread(HANDLE hThread, UInt32& lpExitCode);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL GetExitCodeThread(HANDLE hThread, UInt32* lpExitCode);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int GetLocaleInfoEx(string lpLocaleName, UInt32 LCType, PWSTR lpLCData, int cchData);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int GetLocaleInfoEx(PCWSTR lpLocaleName, UInt32 LCType, PWSTR lpLCData, int cchData);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 GetModuleFileName(HMODULE hModule, PWSTR lpFilename, UInt32 nSize);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HMODULE GetModuleHandle(string lpModuleName);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HMODULE GetModuleHandle(PCWSTR lpModuleName);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static FARPROC GetProcAddress(HMODULE hModule, string lpProcName);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static FARPROC GetProcAddress(HMODULE hModule, PCSTR lpProcName);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 GetShortPathName(string lpszLongPath, PWSTR lpszShortPath, UInt32 cchBuffer);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 GetShortPathName(PCWSTR lpszLongPath, PWSTR lpszShortPath, UInt32 cchBuffer);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static void GetStartupInfo(STARTUPINFOW& lpStartupInfo);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static void GetStartupInfo(STARTUPINFOW* lpStartupInfo);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL GetSystemPowerStatus(SYSTEM_POWER_STATUS& lpSystemPowerStatus);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL GetSystemPowerStatus(SYSTEM_POWER_STATUS* lpSystemPowerStatus);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetThreadLocale();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetTickCount();
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HGLOBAL GlobalAlloc(GLOBAL_ALLOC_FLAGS uFlags, UIntPtr dwBytes);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static Void* GlobalLock(HGLOBAL hMem);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HGLOBAL GlobalReAlloc(HGLOBAL hMem, UIntPtr dwBytes, UInt32 uFlags);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UIntPtr GlobalSize(HGLOBAL hMem);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL GlobalUnlock(HGLOBAL hMem);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HMODULE LoadLibraryEx(string lpLibFileName, LOAD_LIBRARY_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HMODULE LoadLibraryEx(PCWSTR lpLibFileName, HANDLE hFile, LOAD_LIBRARY_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int MultiByteToWideChar(UInt32 CodePage, MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, string lpMultiByteStr, int cbMultiByte, PWSTR lpWideCharStr, int cchWideChar);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int MultiByteToWideChar(UInt32 CodePage, MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, PCSTR lpMultiByteStr, int cbMultiByte, PWSTR lpWideCharStr, int cchWideChar);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int WideCharToMultiByte(UInt32 CodePage, UInt32 dwFlags, string lpWideCharStr, int cchWideChar, PSTR lpMultiByteStr, int cbMultiByte, string lpDefaultChar, BOOL* lpUsedDefaultChar);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int WideCharToMultiByte(UInt32 CodePage, UInt32 dwFlags, PCWSTR lpWideCharStr, int cchWideChar, PSTR lpMultiByteStr, int cbMultiByte, PCSTR lpDefaultChar, BOOL* lpUsedDefaultChar);
    internal static HRESULT CoCreateInstance(Guid& rclsid, IUnknown* pUnkOuter, CLSCTX dwClsContext, T*& ppv);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CoCreateInstance(Guid& rclsid, IUnknown* pUnkOuter, CLSCTX dwClsContext, Guid& riid, Void*& ppv);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CoCreateInstance(Guid* rclsid, IUnknown* pUnkOuter, CLSCTX dwClsContext, Guid* riid, Void** ppv);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CoGetClassObject(Guid& rclsid, CLSCTX dwClsContext, Void* pvReserved, Guid& riid, Void*& ppv);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CoGetClassObject(Guid* rclsid, CLSCTX dwClsContext, Void* pvReserved, Guid* riid, Void** ppv);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CoRegisterMessageFilter(IMessageFilter* lpMessageFilter, IMessageFilter** lplpMessageFilter);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, ILockBytes** pplkbyt);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CreateOleAdviseHolder(IOleAdviseHolder** ppOAHolder);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT DoDragDrop(IDataObject* pDataObj, IDropSource* pDropSource, DROPEFFECT dwOKEffects, DROPEFFECT& pdwEffect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT DoDragDrop(IDataObject* pDataObj, IDropSource* pDropSource, DROPEFFECT dwOKEffects, DROPEFFECT* pdwEffect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT GetHGlobalFromILockBytes(ILockBytes* plkbyt, HGLOBAL* phglobal);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, MSG& lpMsg, UInt16& lpwCmd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, MSG* lpMsg, UInt16* lpwCmd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HANDLE OleDuplicateData(HANDLE hSrc, CLIPBOARD_FORMAT cfFormat, GLOBAL_ALLOC_FLAGS uiFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleFlushClipboard();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleInitialize();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleInitialize(Void* pvReserved);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static void OleUninitialize();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT PropVariantClear(PROPVARIANT& pvar);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT PropVariantClear(PROPVARIANT* pvar);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT ReadClassStg(IStorage* pStg, Guid& pclsid);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT ReadClassStg(IStorage* pStg, Guid* pclsid);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT RegisterDragDrop(HWND hwnd, IDropTarget* pDropTarget);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static void ReleaseStgMedium(STGMEDIUM& param0);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static void ReleaseStgMedium(STGMEDIUM* param0);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT RevokeDragDrop(HWND hwnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT StgCreateDocfileOnILockBytes(ILockBytes* plkbyt, STGM grfMode, UInt32 reserved, IStorage** ppstgOpen);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT StgOpenStorageOnILockBytes(ILockBytes* plkbyt, IStorage* pstgPriority, STGM grfMode, UInt16** snbExclude, IStorage** ppstgOpen);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT StgOpenStorageOnILockBytes(ILockBytes* plkbyt, IStorage* pstgPriority, STGM grfMode, UInt16** snbExclude, UInt32 reserved, IStorage** ppstgOpen);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CreateStdAccessibleObject(HWND hwnd, int idObject, Guid& riid, Void*& ppvObject);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT CreateStdAccessibleObject(HWND hwnd, int idObject, Guid* riid, Void** ppvObject);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT LresultFromObject(Guid& riid, WPARAM wParam, IUnknown* punk);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT LresultFromObject(Guid* riid, WPARAM wParam, IUnknown* punk);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static void SysFreeString(BSTR bstrString);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT CreateStdDispatch(IUnknown* punkOuter, Void* pvThis, ITypeInfo* ptinfo, IUnknown** ppunkStdDisp);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT GetErrorInfo(UInt32 dwReserved, IErrorInfo** pperrinfo);
    internal static HRESULT LoadRegTypeLib(Guid& rguid, ushort wVerMajor, ushort wVerMinor, UInt32 lcid, ITypeLib** pptlib);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT LoadRegTypeLib(Guid* rguid, ushort wVerMajor, ushort wVerMinor, UInt32 lcid, ITypeLib** pptlib);
    internal static HRESULT LoadTypeLib(string szFile, ITypeLib** pptlib);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT LoadTypeLib(PCWSTR szFile, ITypeLib** pptlib);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreateFontIndirect(FONTDESC& lpFontDesc, Guid& riid, Void*& lplpvObj);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreateFontIndirect(FONTDESC* lpFontDesc, Guid* riid, Void** lplpvObj);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreatePictureIndirect(PICTDESC& lpPictDesc, Guid& riid, BOOL fOwn, Void*& lplpvObj);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreatePictureIndirect(PICTDESC* lpPictDesc, Guid* riid, BOOL fOwn, Void** lplpvObj);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreatePropertyFrame(HWND hwndOwner, UInt32 x, UInt32 y, string lpszCaption, UInt32 cObjects, IUnknown** ppUnk, UInt32 cPages, Guid& pPageClsID, UInt32 lcid);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreatePropertyFrame(HWND hwndOwner, UInt32 x, UInt32 y, PCWSTR lpszCaption, UInt32 cObjects, IUnknown** ppUnk, UInt32 cPages, Guid* pPageClsID, UInt32 lcid, UInt32 dwReserved, Void* pvReserved);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreatePropertyFrameIndirect(OCPFIPARAMS& lpParams);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT OleCreatePropertyFrameIndirect(OCPFIPARAMS* lpParams);
    internal static HRESULT SafeArrayGetRecordInfo(SAFEARRAY& psa, IRecordInfo** prinfo);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayGetRecordInfo(SAFEARRAY* psa, IRecordInfo** prinfo);
    internal static SAFEARRAY* SafeArrayCreate(VARENUM vt, UInt32 cDims, SAFEARRAYBOUND& rgsabound);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static SAFEARRAY* SafeArrayCreate(VARENUM vt, UInt32 cDims, SAFEARRAYBOUND* rgsabound);
    internal static SAFEARRAY* SafeArrayCreateEx(VARENUM vt, UInt32 cDims, SAFEARRAYBOUND& rgsabound, Void* pvExtra);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static SAFEARRAY* SafeArrayCreateEx(VARENUM vt, UInt32 cDims, SAFEARRAYBOUND* rgsabound, Void* pvExtra);
    internal static HRESULT SafeArrayDestroy(SAFEARRAY& psa);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayDestroy(SAFEARRAY* psa);
    internal static HRESULT SafeArrayGetElement(SAFEARRAY& psa, Int32& rgIndices, Void* pv);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayGetElement(SAFEARRAY* psa, Int32* rgIndices, Void* pv);
    internal static HRESULT SafeArrayGetVartype(SAFEARRAY& psa, VARENUM& pvt);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayGetVartype(SAFEARRAY* psa, VARENUM* pvt);
    internal static HRESULT SafeArrayLock(SAFEARRAY& psa);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayLock(SAFEARRAY* psa);
    internal static HRESULT SafeArrayPutElement(SAFEARRAY& psa, Int32& rgIndices, Void* pv);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayPutElement(SAFEARRAY* psa, Int32* rgIndices, Void* pv);
    internal static HRESULT SafeArrayUnlock(SAFEARRAY& psa);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT SafeArrayUnlock(SAFEARRAY* psa);
    internal static HRESULT VarFormat(VARIANT& pvarIn, PWSTR pstrFormat, VARFORMAT_FIRST_DAY iFirstDay, VARFORMAT_FIRST_WEEK iFirstWeek, UInt32 dwFlags, BSTR* pbstrOut);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT VarFormat(VARIANT* pvarIn, PWSTR pstrFormat, VARFORMAT_FIRST_DAY iFirstDay, VARFORMAT_FIRST_WEEK iFirstWeek, UInt32 dwFlags, BSTR* pbstrOut);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOLEAN SetSuspendState(BOOLEAN bHibernate, BOOLEAN bForce, BOOLEAN bWakeupEventsDisabled);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static void DragAcceptFiles(HWND hWnd, BOOL fAccept);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 DragQueryFile(HDROP hDrop, UInt32 iFile, PWSTR lpszFile, UInt32 cch);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT SHCreateItemFromParsingName(string pszPath, IBindCtx* pbc, Guid& riid, Void*& ppv);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT SHCreateItemFromParsingName(PCWSTR pszPath, IBindCtx* pbc, Guid* riid, Void** ppv);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static ITEMIDLIST* SHBrowseForFolder(BROWSEINFOW& lpbi);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static ITEMIDLIST* SHBrowseForFolder(BROWSEINFOW* lpbi);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HRESULT SHCreateShellItem(Nullable`1<ITEMIDLIST> pidlParent, IShellFolder* psfParent, ITEMIDLIST& pidl, IShellItem** ppsi);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HRESULT SHCreateShellItem(ITEMIDLIST* pidlParent, IShellFolder* psfParent, ITEMIDLIST* pidl, IShellItem** ppsi);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HINSTANCE ShellExecute(HWND hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, SHOW_WINDOW_CMD nShowCmd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HINSTANCE ShellExecute(HWND hwnd, PCWSTR lpOperation, PCWSTR lpFile, PCWSTR lpParameters, PCWSTR lpDirectory, SHOW_WINDOW_CMD nShowCmd);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT SHGetKnownFolderPath(Guid& rfid, KNOWN_FOLDER_FLAG dwFlags, HANDLE hToken, PWSTR& ppszPath);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT SHGetKnownFolderPath(Guid* rfid, KNOWN_FOLDER_FLAG dwFlags, HANDLE hToken, PWSTR* ppszPath);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL SHGetPathFromIDListEx(ITEMIDLIST& pidl, PWSTR pszPath, UInt32 cchPath, GPFIDL_FLAGS uOpts);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL SHGetPathFromIDListEx(ITEMIDLIST* pidl, PWSTR pszPath, UInt32 cchPath, GPFIDL_FLAGS uOpts);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT SHGetSpecialFolderLocation(int csidl, ITEMIDLIST*& ppidl);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT SHGetSpecialFolderLocation(HWND hwnd, int csidl, ITEMIDLIST** ppidl);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HRESULT SHParseDisplayName(string pszName, IBindCtx* pbc, ITEMIDLIST*& ppidl, UInt32 sfgaoIn, UInt32* psfgaoOut);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HRESULT SHParseDisplayName(PCWSTR pszName, IBindCtx* pbc, ITEMIDLIST** ppidl, UInt32 sfgaoIn, UInt32* psfgaoOut);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HRESULT SHAutoComplete(HWND hwndEdit, SHELL_AUTOCOMPLETE_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HKL ActivateKeyboardLayout(HKL hkl, ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL AdjustWindowRectEx(RECT& lpRect, WINDOW_STYLE dwStyle, BOOL bMenu, WINDOW_EX_STYLE dwExStyle);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL AdjustWindowRectEx(RECT* lpRect, WINDOW_STYLE dwStyle, BOOL bMenu, WINDOW_EX_STYLE dwExStyle);
    [SupportedOSPlatformAttribute("windows10.0.14393")]
internal static BOOL AdjustWindowRectExForDpi(RECT& lpRect, WINDOW_STYLE dwStyle, BOOL bMenu, WINDOW_EX_STYLE dwExStyle, UInt32 dpi);
    [SupportedOSPlatformAttribute("windows10.0.14393")]
internal static BOOL AdjustWindowRectExForDpi(RECT* lpRect, WINDOW_STYLE dwStyle, BOOL bMenu, WINDOW_EX_STYLE dwExStyle, UInt32 dpi);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static BOOL AreDpiAwarenessContextsEqual(DPI_AWARENESS_CONTEXT dpiContextA, DPI_AWARENESS_CONTEXT dpiContextB);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HDC BeginPaint(HWND hWnd, PAINTSTRUCT& lpPaint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC BeginPaint(HWND hWnd, PAINTSTRUCT* lpPaint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL BlockInput(BOOL fBlockIt);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL UnhookWindowsHookEx(HHOOK hhk);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT CallWindowProc(method lpPrevWndFunc, HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND ChildWindowFromPointEx(HWND hwnd, Point pt, CWP_FLAGS flags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ClientToScreen(HWND hWnd, Point& lpPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ClientToScreen(HWND hWnd, Point* lpPoint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ClipCursor(Nullable`1<RECT> lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ClipCursor(RECT* lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL CloseDesktop(HDESK hDesktop);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HANDLE CopyImage(HANDLE h, GDI_IMAGE_TYPE type, int cx, int cy, IMAGE_FLAGS flags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DestroyAcceleratorTable(HACCEL hAccel);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HACCEL CreateAcceleratorTable(Span`1<ACCEL> paccel);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HACCEL CreateAcceleratorTable(ACCEL* paccel, int cAccel);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DestroyMenu(HMENU hMenu);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HMENU CreateMenu();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND CreateWindowEx(WINDOW_EX_STYLE dwExStyle, string lpClassName, string lpWindowName, WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, Void* lpParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND CreateWindowEx(WINDOW_EX_STYLE dwExStyle, PCWSTR lpClassName, PCWSTR lpWindowName, WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, Void* lpParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT DefFrameProc(HWND hWnd, HWND hWndMDIClient, UInt32 uMsg, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT DefMDIChildProc(HWND hWnd, UInt32 uMsg, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT DefWindowProc(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DestroyIcon(HICON hIcon);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DestroyCursor(HCURSOR hCursor);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DestroyWindow(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT DispatchMessage(MSG& lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT DispatchMessage(MSG* lpMsg);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawEdge(HDC hdc, RECT& qrc, DRAWEDGE_FLAGS edge, DRAW_EDGE_FLAGS grfFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawEdge(HDC hdc, RECT* qrc, DRAWEDGE_FLAGS edge, DRAW_EDGE_FLAGS grfFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawFrameControl(HDC param0, RECT& param1, DFC_TYPE param2, DFCS_STATE param3);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawFrameControl(HDC param0, RECT* param1, DFC_TYPE param2, DFCS_STATE param3);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawIcon(HDC hDC, int X, int Y, HICON hIcon);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawIconEx(HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UInt32 istepIfAniCur, HBRUSH hbrFlickerFreeDraw, DI_FLAGS diFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL DrawMenuBar(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int DrawText(HDC hdc, PCWSTR lpchText, int cchText, RECT& lprc, DRAW_TEXT_FORMAT format);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int DrawText(HDC hdc, PCWSTR lpchText, int cchText, RECT* lprc, DRAW_TEXT_FORMAT format);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int DrawTextEx(HDC hdc, Span`1& lpchText, int cchText, RECT& lprc, DRAW_TEXT_FORMAT format, Nullable`1<DRAWTEXTPARAMS> lpdtp);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int DrawTextEx(HDC hdc, PWSTR lpchText, int cchText, RECT* lprc, DRAW_TEXT_FORMAT format, DRAWTEXTPARAMS* lpdtp);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnableMenuItem(HMENU hMenu, UInt32 uIDEnableItem, MENU_ITEM_FLAGS uEnable);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL EnableScrollBar(HWND hWnd, UInt32 wSBflags, ENABLE_SCROLL_BAR_ARROWS wArrows);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnableWindow(HWND hWnd, BOOL bEnable);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EndDialog(HWND hDlg, IntPtr nResult);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EndPaint(HWND hWnd, PAINTSTRUCT& lpPaint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EndPaint(HWND hWnd, PAINTSTRUCT* lpPaint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumChildWindows(HWND hWndParent, method lpEnumFunc, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumDisplayMonitors(HDC hdc, Nullable`1<RECT> lprcClip, method lpfnEnum, LPARAM dwData);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumDisplayMonitors(HDC hdc, RECT* lprcClip, method lpfnEnum, LPARAM dwData);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumDisplaySettings(string lpszDeviceName, ENUM_DISPLAY_SETTINGS_MODE iModeNum, DEVMODEW& lpDevMode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumDisplaySettings(PCWSTR lpszDeviceName, ENUM_DISPLAY_SETTINGS_MODE iModeNum, DEVMODEW* lpDevMode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumThreadWindows(UInt32 dwThreadId, method lpfn, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL EnumWindows(method lpEnumFunc, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int FillRect(HDC hDC, RECT& lprc, HBRUSH hbr);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int FillRect(HDC hDC, RECT* lprc, HBRUSH hbr);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND FindWindow(string lpClassName, string lpWindowName);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND FindWindow(PCWSTR lpClassName, PCWSTR lpWindowName);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetActiveWindow();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetAncestor(HWND hwnd, GET_ANCESTOR_FLAGS gaFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static short GetAsyncKeyState(int vKey);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetCapture();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetCaretBlinkTime();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetCaretPos(Point& lpPoint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetCaretPos(Point* lpPoint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetClassInfo(HINSTANCE hInstance, string lpClassName, WNDCLASSW& lpWndClass);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetClassInfo(HINSTANCE hInstance, PCWSTR lpClassName, WNDCLASSW* lpWndClass);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetClassName(HWND hWnd, PWSTR lpClassName, int nMaxCount);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetClientRect(HWND hWnd, RECT& lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetClientRect(HWND hWnd, RECT* lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetClipboardFormatName(UInt32 format, PWSTR lpszFormatName, int cchMaxCount);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetClipCursor(RECT& lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetClipCursor(RECT* lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HCURSOR GetCursor();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetCursorPos(Point& lpPoint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetCursorPos(Point* lpPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC GetDC(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HDC GetDCEx(HWND hWnd, HRGN hrgnClip, GET_DCX_FLAGS flags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetDesktopWindow();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetDlgItem(HWND hDlg, int nIDDlgItem);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetDlgItemInt(HWND hDlg, int nIDDlgItem, BOOL* lpTranslated, BOOL bSigned);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetDoubleClickTime();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static UInt32 GetDpiForSystem();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static UInt32 GetDpiForWindow(HWND hwnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetFocus();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetForegroundWindow();
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static UInt32 GetGuiResources(HANDLE hProcess, GET_GUI_RESOURCES_FLAGS uiFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetIconInfo(HICON hIcon, ICONINFO& piconinfo);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetIconInfo(HICON hIcon, ICONINFO* piconinfo);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static short GetKeyState(int nVirtKey);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetKeyboardState(Span`1<byte> lpKeyState);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetKeyboardState(Byte* lpKeyState);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HKL GetKeyboardLayout(UInt32 idThread);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetKeyboardLayoutList(Span`1<HKL> lpList);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetKeyboardLayoutList(int nBuff, HKL* lpList);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HMENU GetMenu(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetMenuItemCount(HMENU hMenu);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetMenuItemInfo(HMENU hmenu, UInt32 item, BOOL fByPosition, MENUITEMINFOW& lpmii);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetMenuItemInfo(HMENU hmenu, UInt32 item, BOOL fByPosition, MENUITEMINFOW* lpmii);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetMessage(MSG& lpMsg, HWND hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetMessage(MSG* lpMsg, HWND hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetMessagePos();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int GetMessageTime();
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetMonitorInfo(HMONITOR hMonitor, MONITORINFO& lpmi);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetMonitorInfo(HMONITOR hMonitor, MONITORINFO* lpmi);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetParent(HWND hWnd);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL GetPhysicalCursorPos(Point& lpPoint);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL GetPhysicalCursorPos(Point* lpPoint);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL CloseWindowStation(HWINSTA hWinSta);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWINSTA GetProcessWindowStation();
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL GetScrollInfo(HWND hwnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO& lpsi);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL GetScrollInfo(HWND hwnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO* lpsi);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetSysColor(SYS_COLOR_INDEX nIndex);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HBRUSH GetSysColorBrush(SYS_COLOR_INDEX nIndex);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HMENU GetSystemMenu(HWND hWnd, BOOL bRevert);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetSystemMetrics(SYSTEM_METRICS_INDEX nIndex);
    [SupportedOSPlatformAttribute("windows10.0.14393")]
internal static int GetSystemMetricsForDpi(SYSTEM_METRICS_INDEX nIndex, UInt32 dpi);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.17134")]
internal static DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetUpdateRect(HWND hWnd, RECT* lpRect, BOOL bErase);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static GDI_REGION_TYPE GetUpdateRgn(HWND hWnd, HRGN hRgn, BOOL bErase);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetUserObjectInformation(HANDLE hObj, USER_OBJECT_INFORMATION_INDEX nIndex, Void* pvInfo, UInt32 nLength, UInt32* lpnLengthNeeded);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND GetWindow(HWND hWnd, GET_WINDOW_CMD uCmd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext(HWND hwnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT& lpwndpl);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT* lpwndpl);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetWindowRect(HWND hWnd, RECT& lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL GetWindowRect(HWND hWnd, RECT* lpRect);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetWindowText(HWND hWnd, PWSTR lpString, int nMaxCount);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int GetWindowTextLength(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 GetWindowThreadProcessId(HWND hWnd, UInt32* lpdwProcessId);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL HideCaret(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL InvalidateRect(HWND hWnd, Nullable`1<RECT> lpRect, BOOL bErase);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL InvalidateRect(HWND hWnd, RECT* lpRect, BOOL bErase);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL InvalidateRgn(HWND hWnd, HRGN hRgn, BOOL bErase);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsChild(HWND hWndParent, HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsDialogMessage(HWND hDlg, MSG& lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsDialogMessage(HWND hDlg, MSG* lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL IsProcessDPIAware();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static BOOL IsValidDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsWindow(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsWindowEnabled(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsWindowUnicode(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsWindowVisible(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL IsZoomed(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL KillTimer(HWND hWnd, UIntPtr uIDEvent);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HCURSOR LoadCursor(HINSTANCE hInstance, string lpCursorName);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HCURSOR LoadCursor(HINSTANCE hInstance, PCWSTR lpCursorName);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HICON LoadIcon(HINSTANCE hInstance, string lpIconName);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HICON LoadIcon(HINSTANCE hInstance, PCWSTR lpIconName);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 MapVirtualKey(UInt32 uCode, MAP_VIRTUAL_KEY_TYPE uMapType);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static int MapWindowPoints(HWND hWndFrom, HWND hWndTo, Span`1<Point> lpPoints);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int MapWindowPoints(HWND hWndFrom, HWND hWndTo, Point* lpPoints, UInt32 cPoints);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL MessageBeep(MESSAGEBOX_STYLE uType);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static MESSAGEBOX_RESULT MessageBox(HWND hWnd, string lpText, string lpCaption, MESSAGEBOX_STYLE uType);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static MESSAGEBOX_RESULT MessageBox(HWND hWnd, PCWSTR lpText, PCWSTR lpCaption, MESSAGEBOX_STYLE uType);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HMONITOR MonitorFromPoint(Point pt, MONITOR_FROM_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HMONITOR MonitorFromRect(RECT& lprc, MONITOR_FROM_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HMONITOR MonitorFromRect(RECT* lprc, MONITOR_FROM_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HMONITOR MonitorFromWindow(HWND hwnd, MONITOR_FROM_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static WAIT_EVENT MsgWaitForMultipleObjectsEx(ReadOnlySpan`1<HANDLE> pHandles, UInt32 dwMilliseconds, QUEUE_STATUS_FLAGS dwWakeMask, MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static WAIT_EVENT MsgWaitForMultipleObjectsEx(UInt32 nCount, HANDLE* pHandles, UInt32 dwMilliseconds, QUEUE_STATUS_FLAGS dwWakeMask, MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static void NotifyWinEvent(UInt32 event, HWND hwnd, int idObject, int idChild);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 OemKeyScan(ushort wOemChar);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HDESK OpenInputDesktop(DESKTOP_CONTROL_FLAGS dwFlags, BOOL fInherit, DESKTOP_ACCESS_FLAGS dwDesiredAccess);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL PeekMessage(MSG& lpMsg, HWND hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax, PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL PeekMessage(MSG* lpMsg, HWND hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax, PEEK_MESSAGE_REMOVE_TYPE wRemoveMsg);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL PostMessage(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL PostThreadMessage(UInt32 idThread, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static void PostQuitMessage(int nExitCode);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL RedrawWindow(HWND hWnd, Nullable`1<RECT> lprcUpdate, HRGN hrgnUpdate, REDRAW_WINDOW_FLAGS flags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL RedrawWindow(HWND hWnd, RECT* lprcUpdate, HRGN hrgnUpdate, REDRAW_WINDOW_FLAGS flags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static ushort RegisterClass(WNDCLASSW& lpWndClass);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static ushort RegisterClass(WNDCLASSW* lpWndClass);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 RegisterClipboardFormat(string lpszFormat);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 RegisterClipboardFormat(PCWSTR lpszFormat);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 RegisterWindowMessage(string lpString);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 RegisterWindowMessage(PCWSTR lpString);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ReleaseCapture();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int ReleaseDC(HWND hWnd, HDC hDC);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ScrollWindow(HWND hWnd, int XAmount, int YAmount, Nullable`1<RECT> lpRect, Nullable`1<RECT> lpClipRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL ScrollWindow(HWND hWnd, int XAmount, int YAmount, RECT* lpRect, RECT* lpClipRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int ScrollWindowEx(HWND hWnd, int dx, int dy, Nullable`1<RECT> prcScroll, Nullable`1<RECT> prcClip, HRGN hrgnUpdate, RECT* prcUpdate, SCROLL_WINDOW_FLAGS flags);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int ScrollWindowEx(HWND hWnd, int dx, int dy, RECT* prcScroll, RECT* prcClip, HRGN hrgnUpdate, RECT* prcUpdate, SCROLL_WINDOW_FLAGS flags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ScreenToClient(HWND hWnd, Point& lpPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ScreenToClient(HWND hWnd, Point* lpPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT SendDlgItemMessage(HWND hDlg, int nIDDlgItem, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 SendInput(Span`1<INPUT> pInputs, int cbSize);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UInt32 SendInput(UInt32 cInputs, INPUT* pInputs, int cbSize);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT SendMessage(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static LRESULT SendMessageTimeout(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam, SEND_MESSAGE_TIMEOUT_FLAGS fuFlags, UInt32 uTimeout, UIntPtr* lpdwResult);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND SetActiveWindow(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND SetCapture(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HCURSOR SetCursor(HCURSOR hCursor);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetCursorPos(int X, int Y);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND SetFocus(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetForegroundWindow(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetKeyboardState(Span`1<byte> lpKeyState);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetKeyboardState(Byte* lpKeyState);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetLayeredWindowAttributes(HWND hwnd, COLORREF crKey, byte bAlpha, LAYERED_WINDOW_ATTRIBUTES_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetMenu(HWND hWnd, HMENU hMenu);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HWND SetParent(HWND hWndChild, HWND hWndNewParent);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL SetProcessDPIAware();
    [SupportedOSPlatformAttribute("windows10.0.15063")]
internal static BOOL SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int SetScrollInfo(HWND hwnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO& lpsi, BOOL redraw);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int SetScrollInfo(HWND hwnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO* lpsi, BOOL redraw);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static int SetScrollPos(HWND hWnd, SCROLLBAR_CONSTANTS nBar, int nPos, BOOL bRedraw);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.14393")]
internal static DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT dpiContext);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows10.0.17134")]
internal static DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior(DPI_HOSTING_BEHAVIOR value);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static UIntPtr SetTimer(HWND hWnd, UIntPtr nIDEvent, UInt32 uElapse, method lpTimerFunc);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowPlacement(HWND hWnd, WINDOWPLACEMENT& lpwndpl);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowPlacement(HWND hWnd, WINDOWPLACEMENT* lpwndpl);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, SET_WINDOW_POS_FLAGS uFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int SetWindowRgn(HWND hWnd, HRGN hRgn, BOOL bRedraw);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static HHOOK SetWindowsHookEx(WINDOWS_HOOK_ID idHook, method lpfn, HINSTANCE hmod, UInt32 dwThreadId);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowText(HWND hWnd, string lpString);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SetWindowText(HWND hWnd, PCWSTR lpString);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWINEVENTHOOK SetWinEventHook(UInt32 eventMin, UInt32 eventMax, HMODULE hmodWinEventProc, method pfnWinEventProc, UInt32 idProcess, UInt32 idThread, UInt32 dwFlags);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ShowCaret(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static int ShowCursor(BOOL bShow);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ShowWindow(HWND hWnd, SHOW_WINDOW_CMD nCmdShow);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL SystemParametersInfo(SYSTEM_PARAMETERS_INFO_ACTION uiAction, UInt32 uiParam, Void* pvParam, SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS fWinIni);
    [SupportedOSPlatformAttribute("windows10.0.14393")]
internal static BOOL SystemParametersInfoForDpi(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni, UInt32 dpi);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL TrackMouseEvent(TRACKMOUSEEVENT& lpEventTrack);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL TrackMouseEvent(TRACKMOUSEEVENT* lpEventTrack);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL TranslateMDISysAccel(HWND hWndClient, MSG& lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL TranslateMDISysAccel(HWND hWndClient, MSG* lpMsg);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL TranslateMessage(MSG& lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL TranslateMessage(MSG* lpMsg);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL UpdateWindow(HWND hWnd);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ValidateRect(HWND hWnd, Nullable`1<RECT> lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL ValidateRect(HWND hWnd, RECT* lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static short VkKeyScan(char ch);
    [SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL WaitMessage();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND WindowFromDC(HDC hDC);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static HWND WindowFromPoint(Point Point);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT CloseThemeData(HTHEME hTheme);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeBackground(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT& pRect, Nullable`1<RECT> pClipRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeBackground(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT* pRect, RECT* pClipRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeEdge(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT& pDestRect, DRAWEDGE_FLAGS uEdge, DRAW_EDGE_FLAGS uFlags, RECT* pContentRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeEdge(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT* pDestRect, DRAWEDGE_FLAGS uEdge, DRAW_EDGE_FLAGS uFlags, RECT* pContentRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeParentBackground(HWND hwnd, HDC hdc, Nullable`1<RECT> prc);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeParentBackground(HWND hwnd, HDC hdc, RECT* prc);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeText(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, string pszText, int cchText, DRAW_TEXT_FORMAT dwTextFlags, UInt32 dwTextFlags2, RECT& pRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT DrawThemeText(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, PCWSTR pszText, int cchText, DRAW_TEXT_FORMAT dwTextFlags, UInt32 dwTextFlags2, RECT* pRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetCurrentThemeName(PWSTR pszThemeFileName, int cchMaxNameChars, PWSTR pszColorBuff, int cchMaxColorChars, PWSTR pszSizeBuff, int cchMaxSizeChars);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static SET_THEME_APP_PROPERTIES_FLAGS GetThemeAppProperties();
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBackgroundContentRect(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT& pBoundingRect, RECT& pContentRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBackgroundContentRect(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT* pBoundingRect, RECT* pContentRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBackgroundExtent(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT& pContentRect, RECT& pExtentRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBackgroundExtent(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT* pContentRect, RECT* pExtentRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBackgroundRegion(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT& pRect, HRGN* pRegion);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBackgroundRegion(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT* pRect, HRGN* pRegion);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBool(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, BOOL& pfVal);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeBool(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, BOOL* pfVal);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeColor(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, COLORREF& pColor);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeColor(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, COLORREF* pColor);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeDocumentationProperty(string pszThemeName, string pszPropertyName, PWSTR pszValueBuff, int cchMaxValChars);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeDocumentationProperty(PCWSTR pszThemeName, PCWSTR pszPropertyName, PWSTR pszValueBuff, int cchMaxValChars);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeEnumValue(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Int32& piVal);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeEnumValue(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Int32* piVal);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeFilename(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, PWSTR pszThemeFileName, int cchMaxBuffChars);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeFont(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LOGFONTW& pFont);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeFont(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, LOGFONTW* pFont);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeInt(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Int32& piVal);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeInt(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Int32* piVal);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeMargins(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Nullable`1<RECT> prc, MARGINS& pMargins);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeMargins(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, RECT* prc, MARGINS* pMargins);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemePartSize(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, Nullable`1<RECT> prc, THEMESIZE eSize, SIZE& psz);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemePartSize(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, RECT* prc, THEMESIZE eSize, SIZE* psz);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemePosition(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Point& pPoint);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemePosition(HTHEME hTheme, int iPartId, int iStateId, THEME_PROPERTY_SYMBOL_ID iPropId, Point* pPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeString(HTHEME hTheme, int iPartId, int iStateId, int iPropId, PWSTR pszBuff, int cchMaxBuffChars);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL GetThemeSysBool(HTHEME hTheme, THEME_PROPERTY_SYMBOL_ID iBoolId);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeSysInt(HTHEME hTheme, THEME_PROPERTY_SYMBOL_ID iIntId, Int32& piValue);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeSysInt(HTHEME hTheme, THEME_PROPERTY_SYMBOL_ID iIntId, Int32* piValue);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeTextExtent(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, string pszText, int cchCharCount, DRAW_TEXT_FORMAT dwTextFlags, Nullable`1<RECT> pBoundingRect, RECT& pExtentRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeTextExtent(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, PCWSTR pszText, int cchCharCount, DRAW_TEXT_FORMAT dwTextFlags, RECT* pBoundingRect, RECT* pExtentRect);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeTextMetrics(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, TEXTMETRICW& ptm);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT GetThemeTextMetrics(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, TEXTMETRICW* ptm);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT HitTestThemeBackground(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, HIT_TEST_BACKGROUND_OPTIONS dwOptions, RECT& pRect, HRGN hrgn, Point ptTest, UInt16& pwHitTestCode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT HitTestThemeBackground(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, HIT_TEST_BACKGROUND_OPTIONS dwOptions, RECT* pRect, HRGN hrgn, Point ptTest, UInt16* pwHitTestCode);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL IsAppThemed();
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL IsThemeBackgroundPartiallyTransparent(HTHEME hTheme, int iPartId, int iStateId);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static BOOL IsThemePartDefined(HTHEME hTheme, int iPartId, int iStateId);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HTHEME OpenThemeData(HWND hwnd, string pszClassList);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HTHEME OpenThemeData(HWND hwnd, PCWSTR pszClassList);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static void SetThemeAppProperties(SET_THEME_APP_PROPERTIES_FLAGS dwFlags);
    [SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT SetWindowTheme(HWND hwnd, string pszSubAppName, string pszSubIdList);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
internal static HRESULT SetWindowTheme(HWND hwnd, PCWSTR pszSubAppName, PCWSTR pszSubIdList);
    [CompilerGeneratedAttribute]
internal static BOOL <BitBlt>g__LocalExternFunction|10536_0(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, ROP_CODE rop);
    [CompilerGeneratedAttribute]
internal static HBITMAP <CreateDIBSection>g__LocalExternFunction|10549_0(HDC hdc, BITMAPINFO* pbmi, DIB_USAGE usage, Void** ppvBits, HANDLE hSection, UInt32 offset);
    [CompilerGeneratedAttribute]
internal static int <GetBkMode>g__LocalExternFunction|10569_0(HDC hdc);
    [CompilerGeneratedAttribute]
internal static HGDIOBJ <GetCurrentObject>g__LocalExternFunction|10575_0(HDC hdc, UInt32 type);
    [CompilerGeneratedAttribute]
internal static int <GetDeviceCaps>g__LocalExternFunction|10576_0(HDC hdc, int index);
    [CompilerGeneratedAttribute]
internal static int <SetBkMode>g__LocalExternFunction|10621_0(HDC hdc, int mode);
    [CompilerGeneratedAttribute]
internal static BOOL <CloseHandle>g__LocalExternFunction|10641_0(HANDLE hObject);
    [CompilerGeneratedAttribute]
internal static BOOL <ActivateActCtx>g__LocalExternFunction|10643_0(HANDLE hActCtx, UIntPtr* lpCookie);
    [CompilerGeneratedAttribute]
internal static BOOL <FreeLibrary>g__LocalExternFunction|10644_0(HMODULE hLibModule);
    [CompilerGeneratedAttribute]
internal static HANDLE <CreateActCtx>g__LocalExternFunction|10646_0(ACTCTXW* pActCtx);
    [CompilerGeneratedAttribute]
internal static HGLOBAL <GlobalFree>g__LocalExternFunction|10647_0(HGLOBAL hMem);
    [CompilerGeneratedAttribute]
internal static BOOL <DeactivateActCtx>g__LocalExternFunction|10648_0(UInt32 dwFlags, UIntPtr ulCookie);
    [CompilerGeneratedAttribute]
internal static BOOL <DuplicateHandle>g__LocalExternFunction|10649_0(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, HANDLE* lpTargetHandle, UInt32 dwDesiredAccess, BOOL bInheritHandle, DUPLICATE_HANDLE_OPTIONS dwOptions);
    [CompilerGeneratedAttribute]
internal static UInt32 <FormatMessage>g__LocalExternFunction|10650_0(FORMAT_MESSAGE_OPTIONS dwFlags, Void* lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, PWSTR lpBuffer, UInt32 nSize, SByte** Arguments);
    [CompilerGeneratedAttribute]
internal static BOOL <GetCurrentActCtx>g__LocalExternFunction|10651_0(HANDLE* lphActCtx);
    [CompilerGeneratedAttribute]
internal static BOOL <GetExitCodeThread>g__LocalExternFunction|10657_0(HANDLE hThread, UInt32* lpExitCode);
    [CompilerGeneratedAttribute]
internal static int <GetLocaleInfoEx>g__LocalExternFunction|10659_0(PCWSTR lpLocaleName, UInt32 LCType, PWSTR lpLCData, int cchData);
    [CompilerGeneratedAttribute]
internal static UInt32 <GetModuleFileName>g__LocalExternFunction|10660_0(HMODULE hModule, PWSTR lpFilename, UInt32 nSize);
    [CompilerGeneratedAttribute]
internal static HMODULE <GetModuleHandle>g__LocalExternFunction|10662_0(PCWSTR lpModuleName);
    [CompilerGeneratedAttribute]
internal static FARPROC <GetProcAddress>g__LocalExternFunction|10664_0(HMODULE hModule, PCSTR lpProcName);
    [CompilerGeneratedAttribute]
internal static UInt32 <GetShortPathName>g__LocalExternFunction|10666_0(PCWSTR lpszLongPath, PWSTR lpszShortPath, UInt32 cchBuffer);
    [CompilerGeneratedAttribute]
internal static BOOL <GetSystemPowerStatus>g__LocalExternFunction|10670_0(SYSTEM_POWER_STATUS* lpSystemPowerStatus);
    [CompilerGeneratedAttribute]
internal static HGLOBAL <GlobalAlloc>g__LocalExternFunction|10673_0(GLOBAL_ALLOC_FLAGS uFlags, UIntPtr dwBytes);
    [CompilerGeneratedAttribute]
internal static Void* <GlobalLock>g__LocalExternFunction|10674_0(HGLOBAL hMem);
    [CompilerGeneratedAttribute]
internal static HGLOBAL <GlobalReAlloc>g__LocalExternFunction|10675_0(HGLOBAL hMem, UIntPtr dwBytes, UInt32 uFlags);
    [CompilerGeneratedAttribute]
internal static UIntPtr <GlobalSize>g__LocalExternFunction|10676_0(HGLOBAL hMem);
    [CompilerGeneratedAttribute]
internal static BOOL <GlobalUnlock>g__LocalExternFunction|10677_0(HGLOBAL hMem);
    [CompilerGeneratedAttribute]
internal static HMODULE <LoadLibraryEx>g__LocalExternFunction|10679_0(PCWSTR lpLibFileName, HANDLE hFile, LOAD_LIBRARY_FLAGS dwFlags);
    [CompilerGeneratedAttribute]
internal static int <MultiByteToWideChar>g__LocalExternFunction|10681_0(UInt32 CodePage, MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, PCSTR lpMultiByteStr, int cbMultiByte, PWSTR lpWideCharStr, int cchWideChar);
    [CompilerGeneratedAttribute]
internal static int <WideCharToMultiByte>g__LocalExternFunction|10683_0(UInt32 CodePage, UInt32 dwFlags, PCWSTR lpWideCharStr, int cchWideChar, PSTR lpMultiByteStr, int cbMultiByte, PCSTR lpDefaultChar, BOOL* lpUsedDefaultChar);
    [CompilerGeneratedAttribute]
internal static HRESULT <CoGetClassObject>g__LocalExternFunction|10688_0(Guid* rclsid, UInt32 dwClsContext, Void* pvReserved, Guid* riid, Void** ppv);
    [CompilerGeneratedAttribute]
internal static BOOLEAN <SetSuspendState>g__LocalExternFunction|10752_0(BOOLEAN bHibernate, BOOLEAN bForce, BOOLEAN bWakeupEventsDisabled);
    [CompilerGeneratedAttribute]
internal static HRESULT <SHGetKnownFolderPath>g__LocalExternFunction|10764_0(Guid* rfid, UInt32 dwFlags, HANDLE hToken, PWSTR* ppszPath);
    [CompilerGeneratedAttribute]
internal static HKL <ActivateKeyboardLayout>g__LocalExternFunction|10772_0(HKL hkl, ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags);
    [CompilerGeneratedAttribute]
internal static BOOL <AdjustWindowRectEx>g__LocalExternFunction|10774_0(RECT* lpRect, WINDOW_STYLE dwStyle, BOOL bMenu, WINDOW_EX_STYLE dwExStyle);
    [CompilerGeneratedAttribute]
internal static BOOL <AdjustWindowRectExForDpi>g__LocalExternFunction|10776_0(RECT* lpRect, WINDOW_STYLE dwStyle, BOOL bMenu, WINDOW_EX_STYLE dwExStyle, UInt32 dpi);
    [CompilerGeneratedAttribute]
internal static BOOL <BlockInput>g__LocalExternFunction|10780_0(BOOL fBlockIt);
    [CompilerGeneratedAttribute]
internal static BOOL <UnhookWindowsHookEx>g__LocalExternFunction|10781_0(HHOOK hhk);
    [CompilerGeneratedAttribute]
internal static BOOL <ClipCursor>g__LocalExternFunction|10788_0(RECT* lpRect);
    [CompilerGeneratedAttribute]
internal static BOOL <CloseDesktop>g__LocalExternFunction|10789_0(HDESK hDesktop);
    [CompilerGeneratedAttribute]
internal static HANDLE <CopyImage>g__LocalExternFunction|10790_0(HANDLE h, GDI_IMAGE_TYPE type, int cx, int cy, IMAGE_FLAGS flags);
    [CompilerGeneratedAttribute]
internal static HACCEL <CreateAcceleratorTable>g__LocalExternFunction|10793_0(ACCEL* paccel, int cAccel);
    [CompilerGeneratedAttribute]
internal static BOOL <DestroyMenu>g__LocalExternFunction|10794_0(HMENU hMenu);
    [CompilerGeneratedAttribute]
internal static HMENU <CreateMenu>g__LocalExternFunction|10795_0();
    [CompilerGeneratedAttribute]
internal static HWND <CreateWindowEx>g__LocalExternFunction|10797_0(WINDOW_EX_STYLE dwExStyle, PCWSTR lpClassName, PCWSTR lpWindowName, WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, Void* lpParam);
    [CompilerGeneratedAttribute]
internal static BOOL <DestroyIcon>g__LocalExternFunction|10801_0(HICON hIcon);
    [CompilerGeneratedAttribute]
internal static BOOL <DestroyCursor>g__LocalExternFunction|10802_0(HCURSOR hCursor);
    [CompilerGeneratedAttribute]
internal static BOOL <DestroyWindow>g__LocalExternFunction|10803_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <DrawIcon>g__LocalExternFunction|10810_0(HDC hDC, int X, int Y, HICON hIcon);
    [CompilerGeneratedAttribute]
internal static BOOL <DrawIconEx>g__LocalExternFunction|10811_0(HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UInt32 istepIfAniCur, HBRUSH hbrFlickerFreeDraw, DI_FLAGS diFlags);
    [CompilerGeneratedAttribute]
internal static BOOL <DrawMenuBar>g__LocalExternFunction|10812_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <EnableScrollBar>g__LocalExternFunction|10818_0(HWND hWnd, UInt32 wSBflags, ENABLE_SCROLL_BAR_ARROWS wArrows);
    [CompilerGeneratedAttribute]
internal static BOOL <EndDialog>g__LocalExternFunction|10820_0(HWND hDlg, IntPtr nResult);
    [CompilerGeneratedAttribute]
internal static BOOL <EnumWindows>g__LocalExternFunction|10829_0(method lpEnumFunc, LPARAM lParam);
    [CompilerGeneratedAttribute]
internal static HWND <FindWindow>g__LocalExternFunction|10833_0(PCWSTR lpClassName, PCWSTR lpWindowName);
    [CompilerGeneratedAttribute]
internal static UInt32 <GetCaretBlinkTime>g__LocalExternFunction|10839_0();
    [CompilerGeneratedAttribute]
internal static BOOL <GetCaretPos>g__LocalExternFunction|10841_0(Point* lpPoint);
    [CompilerGeneratedAttribute]
internal static BOOL <GetClassInfo>g__LocalExternFunction|10843_0(HINSTANCE hInstance, PCWSTR lpClassName, WNDCLASSW* lpWndClass);
    [CompilerGeneratedAttribute]
internal static int <GetClassName>g__LocalExternFunction|10844_0(HWND hWnd, PWSTR lpClassName, int nMaxCount);
    [CompilerGeneratedAttribute]
internal static BOOL <GetClientRect>g__LocalExternFunction|10846_0(HWND hWnd, RECT* lpRect);
    [CompilerGeneratedAttribute]
internal static int <GetClipboardFormatName>g__LocalExternFunction|10847_0(UInt32 format, PWSTR lpszFormatName, int cchMaxCount);
    [CompilerGeneratedAttribute]
internal static BOOL <GetClipCursor>g__LocalExternFunction|10849_0(RECT* lpRect);
    [CompilerGeneratedAttribute]
internal static BOOL <GetCursorPos>g__LocalExternFunction|10852_0(Point* lpPoint);
    [CompilerGeneratedAttribute]
internal static HWND <GetDlgItem>g__LocalExternFunction|10856_0(HWND hDlg, int nIDDlgItem);
    [CompilerGeneratedAttribute]
internal static UInt32 <GetDlgItemInt>g__LocalExternFunction|10857_0(HWND hDlg, int nIDDlgItem, BOOL* lpTranslated, BOOL bSigned);
    [CompilerGeneratedAttribute]
internal static UInt32 <GetGuiResources>g__LocalExternFunction|10863_0(HANDLE hProcess, GET_GUI_RESOURCES_FLAGS uiFlags);
    [CompilerGeneratedAttribute]
internal static BOOL <GetIconInfo>g__LocalExternFunction|10865_0(HICON hIcon, ICONINFO* piconinfo);
    [CompilerGeneratedAttribute]
internal static BOOL <GetKeyboardState>g__LocalExternFunction|10868_0(Byte* lpKeyState);
    [CompilerGeneratedAttribute]
internal static int <GetKeyboardLayoutList>g__LocalExternFunction|10871_0(int nBuff, HKL* lpList);
    [CompilerGeneratedAttribute]
internal static int <GetMenuItemCount>g__LocalExternFunction|10873_0(HMENU hMenu);
    [CompilerGeneratedAttribute]
internal static BOOL <GetMenuItemInfo>g__LocalExternFunction|10875_0(HMENU hmenu, UInt32 item, BOOL fByPosition, MENUITEMINFOW* lpmii);
    [CompilerGeneratedAttribute]
internal static BOOL <GetMessage>g__LocalExternFunction|10877_0(MSG* lpMsg, HWND hWnd, UInt32 wMsgFilterMin, UInt32 wMsgFilterMax);
    [CompilerGeneratedAttribute]
internal static HWND <GetParent>g__LocalExternFunction|10882_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <GetPhysicalCursorPos>g__LocalExternFunction|10884_0(Point* lpPoint);
    [CompilerGeneratedAttribute]
internal static BOOL <CloseWindowStation>g__LocalExternFunction|10885_0(HWINSTA hWinSta);
    [CompilerGeneratedAttribute]
internal static HWINSTA <GetProcessWindowStation>g__LocalExternFunction|10886_0();
    [CompilerGeneratedAttribute]
internal static BOOL <GetScrollInfo>g__LocalExternFunction|10888_0(HWND hwnd, SCROLLBAR_CONSTANTS nBar, SCROLLINFO* lpsi);
    [CompilerGeneratedAttribute]
internal static int <GetSystemMetrics>g__LocalExternFunction|10892_0(SYSTEM_METRICS_INDEX nIndex);
    [CompilerGeneratedAttribute]
internal static int <GetSystemMetricsForDpi>g__LocalExternFunction|10893_0(SYSTEM_METRICS_INDEX nIndex, UInt32 dpi);
    [CompilerGeneratedAttribute]
internal static BOOL <GetUserObjectInformation>g__LocalExternFunction|10898_0(HANDLE hObj, USER_OBJECT_INFORMATION_INDEX nIndex, Void* pvInfo, UInt32 nLength, UInt32* lpnLengthNeeded);
    [CompilerGeneratedAttribute]
internal static HWND <GetWindow>g__LocalExternFunction|10899_0(HWND hWnd, GET_WINDOW_CMD uCmd);
    [CompilerGeneratedAttribute]
internal static BOOL <GetWindowPlacement>g__LocalExternFunction|10902_0(HWND hWnd, WINDOWPLACEMENT* lpwndpl);
    [CompilerGeneratedAttribute]
internal static BOOL <GetWindowRect>g__LocalExternFunction|10904_0(HWND hWnd, RECT* lpRect);
    [CompilerGeneratedAttribute]
internal static int <GetWindowText>g__LocalExternFunction|10905_0(HWND hWnd, PWSTR lpString, int nMaxCount);
    [CompilerGeneratedAttribute]
internal static int <GetWindowTextLength>g__LocalExternFunction|10906_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <HideCaret>g__LocalExternFunction|10908_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <KillTimer>g__LocalExternFunction|10922_0(HWND hWnd, UIntPtr uIDEvent);
    [CompilerGeneratedAttribute]
internal static HCURSOR <LoadCursor>g__LocalExternFunction|10924_0(HINSTANCE hInstance, PCWSTR lpCursorName);
    [CompilerGeneratedAttribute]
internal static HICON <LoadIcon>g__LocalExternFunction|10926_0(HINSTANCE hInstance, PCWSTR lpIconName);
    [CompilerGeneratedAttribute]
internal static BOOL <MessageBeep>g__LocalExternFunction|10930_0(MESSAGEBOX_STYLE uType);
    [CompilerGeneratedAttribute]
internal static MESSAGEBOX_RESULT <MessageBox>g__LocalExternFunction|10932_0(HWND hWnd, PCWSTR lpText, PCWSTR lpCaption, MESSAGEBOX_STYLE uType);
    [CompilerGeneratedAttribute]
internal static WAIT_EVENT <MsgWaitForMultipleObjectsEx>g__LocalExternFunction|10938_0(UInt32 nCount, HANDLE* pHandles, UInt32 dwMilliseconds, QUEUE_STATUS_FLAGS dwWakeMask, MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags);
    [CompilerGeneratedAttribute]
internal static HDESK <OpenInputDesktop>g__LocalExternFunction|10941_0(DESKTOP_CONTROL_FLAGS dwFlags, BOOL fInherit, DESKTOP_ACCESS_FLAGS dwDesiredAccess);
    [CompilerGeneratedAttribute]
internal static BOOL <PostMessage>g__LocalExternFunction|10944_0(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [CompilerGeneratedAttribute]
internal static BOOL <PostThreadMessage>g__LocalExternFunction|10945_0(UInt32 idThread, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [CompilerGeneratedAttribute]
internal static ushort <RegisterClass>g__LocalExternFunction|10950_0(WNDCLASSW* lpWndClass);
    [CompilerGeneratedAttribute]
internal static UInt32 <RegisterClipboardFormat>g__LocalExternFunction|10952_0(PCWSTR lpszFormat);
    [CompilerGeneratedAttribute]
internal static UInt32 <RegisterWindowMessage>g__LocalExternFunction|10954_0(PCWSTR lpString);
    [CompilerGeneratedAttribute]
internal static BOOL <ReleaseCapture>g__LocalExternFunction|10955_0();
    [CompilerGeneratedAttribute]
internal static BOOL <ScrollWindow>g__LocalExternFunction|10958_0(HWND hWnd, int XAmount, int YAmount, RECT* lpRect, RECT* lpClipRect);
    [CompilerGeneratedAttribute]
internal static int <ScrollWindowEx>g__LocalExternFunction|10960_0(HWND hWnd, int dx, int dy, RECT* prcScroll, RECT* prcClip, HRGN hrgnUpdate, RECT* prcUpdate, SCROLL_WINDOW_FLAGS flags);
    [CompilerGeneratedAttribute]
internal static UInt32 <SendInput>g__LocalExternFunction|10965_0(UInt32 cInputs, INPUT* pInputs, int cbSize);
    [CompilerGeneratedAttribute]
internal static LRESULT <SendMessage>g__LocalExternFunction|10966_0(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [CompilerGeneratedAttribute]
internal static LRESULT <SendMessageTimeout>g__LocalExternFunction|10967_0(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam, SEND_MESSAGE_TIMEOUT_FLAGS fuFlags, UInt32 uTimeout, UIntPtr* lpdwResult);
    [CompilerGeneratedAttribute]
internal static HWND <SetActiveWindow>g__LocalExternFunction|10968_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <SetCursorPos>g__LocalExternFunction|10971_0(int X, int Y);
    [CompilerGeneratedAttribute]
internal static HWND <SetFocus>g__LocalExternFunction|10972_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <SetKeyboardState>g__LocalExternFunction|10975_0(Byte* lpKeyState);
    [CompilerGeneratedAttribute]
internal static BOOL <SetLayeredWindowAttributes>g__LocalExternFunction|10976_0(HWND hwnd, COLORREF crKey, byte bAlpha, LAYERED_WINDOW_ATTRIBUTES_FLAGS dwFlags);
    [CompilerGeneratedAttribute]
internal static BOOL <SetMenu>g__LocalExternFunction|10977_0(HWND hWnd, HMENU hMenu);
    [CompilerGeneratedAttribute]
internal static HWND <SetParent>g__LocalExternFunction|10978_0(HWND hWndChild, HWND hWndNewParent);
    [CompilerGeneratedAttribute]
internal static BOOL <SetProcessDpiAwarenessContext>g__LocalExternFunction|10980_0(DPI_AWARENESS_CONTEXT value);
    [CompilerGeneratedAttribute]
internal static int <SetScrollPos>g__LocalExternFunction|10983_0(HWND hWnd, SCROLLBAR_CONSTANTS nBar, int nPos, BOOL bRedraw);
    [CompilerGeneratedAttribute]
internal static UIntPtr <SetTimer>g__LocalExternFunction|10986_0(HWND hWnd, UIntPtr nIDEvent, UInt32 uElapse, method lpTimerFunc);
    [CompilerGeneratedAttribute]
internal static BOOL <SetWindowPlacement>g__LocalExternFunction|10988_0(HWND hWnd, WINDOWPLACEMENT* lpwndpl);
    [CompilerGeneratedAttribute]
internal static BOOL <SetWindowPos>g__LocalExternFunction|10989_0(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, SET_WINDOW_POS_FLAGS uFlags);
    [CompilerGeneratedAttribute]
internal static HHOOK <SetWindowsHookEx>g__LocalExternFunction|10991_0(WINDOWS_HOOK_ID idHook, method lpfn, HINSTANCE hmod, UInt32 dwThreadId);
    [CompilerGeneratedAttribute]
internal static BOOL <SetWindowText>g__LocalExternFunction|10993_0(HWND hWnd, PCWSTR lpString);
    [CompilerGeneratedAttribute]
internal static BOOL <ShowCaret>g__LocalExternFunction|10996_0(HWND hWnd);
    [CompilerGeneratedAttribute]
internal static BOOL <SystemParametersInfo>g__LocalExternFunction|10999_0(SYSTEM_PARAMETERS_INFO_ACTION uiAction, UInt32 uiParam, Void* pvParam, SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS fWinIni);
    [CompilerGeneratedAttribute]
internal static BOOL <SystemParametersInfoForDpi>g__LocalExternFunction|11000_0(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni, UInt32 dpi);
    [CompilerGeneratedAttribute]
internal static BOOL <TrackMouseEvent>g__LocalExternFunction|11002_0(TRACKMOUSEEVENT* lpEventTrack);
    [CompilerGeneratedAttribute]
internal static BOOL <WaitMessage>g__LocalExternFunction|11011_0();
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeBool>g__LocalExternFunction|11032_0(HTHEME hTheme, int iPartId, int iStateId, int iPropId, BOOL* pfVal);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeColor>g__LocalExternFunction|11034_0(HTHEME hTheme, int iPartId, int iStateId, int iPropId, COLORREF* pColor);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeEnumValue>g__LocalExternFunction|11038_0(HTHEME hTheme, int iPartId, int iStateId, int iPropId, Int32* piVal);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeFilename>g__LocalExternFunction|11039_0(HTHEME hTheme, int iPartId, int iStateId, int iPropId, PWSTR pszThemeFileName, int cchMaxBuffChars);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeInt>g__LocalExternFunction|11043_0(HTHEME hTheme, int iPartId, int iStateId, int iPropId, Int32* piVal);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeMargins>g__LocalExternFunction|11045_0(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, int iPropId, RECT* prc, MARGINS* pMargins);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemePosition>g__LocalExternFunction|11049_0(HTHEME hTheme, int iPartId, int iStateId, int iPropId, Point* pPoint);
    [CompilerGeneratedAttribute]
internal static BOOL <GetThemeSysBool>g__LocalExternFunction|11051_0(HTHEME hTheme, int iBoolId);
    [CompilerGeneratedAttribute]
internal static HRESULT <GetThemeSysInt>g__LocalExternFunction|11053_0(HTHEME hTheme, int iIntId, Int32* piValue);
}
internal static class Windows.Win32.RegisteredMessage : object {
    private static UInt32 s_wmMouseEnterMessage;
    private static UInt32 s_wmUnSubclass;
    public static MessageId WM_MOUSEENTER { get; }
    public static MessageId WM_UIUNSUBCLASS { get; }
    public static MessageId get_WM_MOUSEENTER();
    public static MessageId get_WM_UIUNSUBCLASS();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.Security.SECURITY_ATTRIBUTES : ValueType {
    internal UInt32 nLength;
    internal Void* lpSecurityDescriptor;
    internal BOOL bInheritHandle;
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IAdviseSink_Extensions : object {
    [ExtensionAttribute]
internal static void OnDataChange(Interface this, FORMATETC& pFormatetc, STGMEDIUM& pStgmed);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IBindCtx_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT SetBindOptions(Interface this, BIND_OPTS& pbindopts);
    [ExtensionAttribute]
internal static HRESULT GetBindOptions(Interface this, BIND_OPTS& pbindopts);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IBindHost_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT MonikerBindToStorage(Interface this, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid& riid, Void*& ppvObj);
    [ExtensionAttribute]
internal static HRESULT MonikerBindToObject(Interface this, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid& riid, Void*& ppvObj);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IBinding_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetPriority(Interface this, Int32& pnPriority);
    [ExtensionAttribute]
internal static HRESULT GetBindResult(Interface this, Guid& pclsidProtocol, UInt32& pdwResult, PWSTR& pszResult, UInt32& pdwReserved);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IBindStatusCallback_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetPriority(Interface this, Int32& pnPriority);
    [ExtensionAttribute]
internal static HRESULT OnProgress(Interface this, UInt32 ulProgress, UInt32 ulProgressMax, UInt32 ulStatusCode, string szStatusText);
    [ExtensionAttribute]
internal static HRESULT OnStopBinding(Interface this, HRESULT hresult, string szError);
    [ExtensionAttribute]
internal static HRESULT GetBindInfo(Interface this, UInt32& grfBINDF, BINDINFO& pbindinfo);
    [ExtensionAttribute]
internal static HRESULT OnDataAvailable(Interface this, UInt32 grfBSCF, UInt32 dwSize, FORMATETC& pformatetc, STGMEDIUM& pstgmed);
    [ExtensionAttribute]
internal static HRESULT OnObjectAvailable(Interface this, Guid& riid, IUnknown* punk);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IClassFactory_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT CreateInstance(Interface this, IUnknown* pUnkOuter, Guid& riid, Void*& ppvObject);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IConnectionPoint_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetConnectionInterface(Interface this, Guid& pIID);
    [ExtensionAttribute]
internal static HRESULT Advise(Interface this, IUnknown* pUnkSink, UInt32& pdwCookie);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IConnectionPointContainer_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT FindConnectionPoint(Interface this, Guid& riid, IConnectionPoint** ppCP);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IDataObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetData(Interface this, FORMATETC& pformatetcIn, STGMEDIUM& pmedium);
    [ExtensionAttribute]
internal static HRESULT GetDataHere(Interface this, FORMATETC& pformatetc, STGMEDIUM& pmedium);
    [ExtensionAttribute]
internal static HRESULT QueryGetData(Interface this, FORMATETC& pformatetc);
    [ExtensionAttribute]
internal static HRESULT GetCanonicalFormatEtc(Interface this, FORMATETC& pformatectIn, FORMATETC& pformatetcOut);
    [ExtensionAttribute]
internal static HRESULT SetData(Interface this, FORMATETC& pformatetc, STGMEDIUM& pmedium, BOOL fRelease);
    [ExtensionAttribute]
internal static HRESULT DAdvise(Interface this, FORMATETC& pformatetc, UInt32 advf, IAdviseSink* pAdvSink, UInt32& pdwConnection);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IEnumConnectionPoints_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, UInt32 cConnections, IConnectionPoint** ppCP, UInt32& pcFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IEnumConnections_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<CONNECTDATA> rgcd, UInt32& pcFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IEnumFORMATETC_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<FORMATETC> rgelt, UInt32* pceltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IEnumSTATDATA_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<STATDATA> rgelt, UInt32* pceltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IEnumString_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<PWSTR> rgelt, UInt32* pceltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IErrorInfo_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetGUID(Interface this, Guid& pGUID);
    [ExtensionAttribute]
internal static HRESULT GetHelpContext(Interface this, UInt32& pdwHelpContext);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IErrorLog_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT AddError(Interface this, string pszPropName, EXCEPINFO& pExcepInfo);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IGlobalInterfaceTable_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT RegisterInterfaceInGlobal(Interface this, IUnknown* pUnk, Guid& riid, UInt32& pdwCookie);
    [ExtensionAttribute]
internal static HRESULT GetInterfaceFromGlobal(Interface this, UInt32 dwCookie, Guid& riid, Void*& ppv);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IMoniker_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetClassID(Interface this, Guid& pClassID);
    [ExtensionAttribute]
internal static HRESULT GetSizeMax(Interface this, UInt64& pcbSize);
    [ExtensionAttribute]
internal static HRESULT BindToObject(Interface this, IBindCtx* pbc, IMoniker* pmkToLeft, Guid& riidResult, Void*& ppvResult);
    [ExtensionAttribute]
internal static HRESULT BindToStorage(Interface this, IBindCtx* pbc, IMoniker* pmkToLeft, Guid& riid, Void*& ppvObj);
    [ExtensionAttribute]
internal static HRESULT Hash(Interface this, UInt32& pdwHash);
    [ExtensionAttribute]
internal static HRESULT GetTimeOfLastChange(Interface this, IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME& pFileTime);
    [ExtensionAttribute]
internal static HRESULT GetDisplayName(Interface this, IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR& ppszDisplayName);
    [ExtensionAttribute]
internal static HRESULT ParseDisplayName(Interface this, IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR pszDisplayName, UInt32& pchEaten, IMoniker** ppmkOut);
    [ExtensionAttribute]
internal static HRESULT IsSystemMoniker(Interface this, UInt32& pdwMksys);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IPersist_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetClassID(Interface this, Guid& pClassID);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IPersistStream_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetClassID(Interface this, Guid& pClassID);
    [ExtensionAttribute]
internal static HRESULT GetSizeMax(Interface this, UInt64& pcbSize);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IPersistStreamInit_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetClassID(Interface this, Guid& pClassID);
    [ExtensionAttribute]
internal static HRESULT GetSizeMax(Interface this, UInt64& pCbSize);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IRunningObjectTable_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Register(Interface this, ROT_FLAGS grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, UInt32& pdwRegister);
    [ExtensionAttribute]
internal static HRESULT NoteChangeTime(Interface this, UInt32 dwRegister, FILETIME& pfiletime);
    [ExtensionAttribute]
internal static HRESULT GetTimeOfLastChange(Interface this, IMoniker* pmkObjectName, FILETIME& pfiletime);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IServiceProvider_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT QueryService(Interface this, Guid& guidService, Guid& riid, Void*& ppvObject);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_IStream_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Stat(Interface this, STATSTG& pstatstg, UInt32 grfStatFlag);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_ISupportErrorInfo_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT InterfaceSupportsErrorInfo(Interface this, Guid& riid);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_ITypeComp_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Bind(Interface this, PWSTR szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, DESCKIND& pDescKind, BINDPTR& pBindPtr);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_ITypeInfo_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetTypeAttr(Interface this, TYPEATTR*& ppTypeAttr);
    [ExtensionAttribute]
internal static HRESULT GetFuncDesc(Interface this, UInt32 index, FUNCDESC*& ppFuncDesc);
    [ExtensionAttribute]
internal static HRESULT GetVarDesc(Interface this, UInt32 index, VARDESC*& ppVarDesc);
    [ExtensionAttribute]
internal static HRESULT GetNames(Interface this, int memid, BSTR* rgBstrNames, UInt32 cMaxNames, UInt32& pcNames);
    [ExtensionAttribute]
internal static HRESULT GetRefTypeOfImplType(Interface this, UInt32 index, UInt32& pRefType);
    [ExtensionAttribute]
internal static HRESULT GetImplTypeFlags(Interface this, UInt32 index, IMPLTYPEFLAGS& pImplTypeFlags);
    [ExtensionAttribute]
internal static HRESULT GetIDsOfNames(Interface this, Span`1<PWSTR> rgszNames, Span`1<int> pMemId);
    [ExtensionAttribute]
internal static HRESULT Invoke(Interface this, Void* pvInstance, int memid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT& pVarResult, EXCEPINFO& pExcepInfo, UInt32& puArgErr);
    [ExtensionAttribute]
internal static HRESULT GetDocumentation(Interface this, int memid, BSTR* pBstrName, BSTR* pBstrDocString, UInt32& pdwHelpContext, BSTR* pBstrHelpFile);
    [ExtensionAttribute]
internal static HRESULT GetDllEntry(Interface this, int memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, UInt16& pwOrdinal);
    [ExtensionAttribute]
internal static HRESULT AddressOfMember(Interface this, int memid, INVOKEKIND invKind, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT CreateInstance(Interface this, IUnknown* pUnkOuter, Guid& riid, Void*& ppvObj);
    [ExtensionAttribute]
internal static HRESULT GetContainingTypeLib(Interface this, ITypeLib** ppTLib, UInt32& pIndex);
    [ExtensionAttribute]
internal static void ReleaseTypeAttr(Interface this, TYPEATTR& pTypeAttr);
    [ExtensionAttribute]
internal static void ReleaseFuncDesc(Interface this, FUNCDESC& pFuncDesc);
    [ExtensionAttribute]
internal static void ReleaseVarDesc(Interface this, VARDESC& pVarDesc);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_ITypeLib_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetTypeInfoType(Interface this, UInt32 index, TYPEKIND& pTKind);
    [ExtensionAttribute]
internal static HRESULT GetTypeInfoOfGuid(Interface this, Guid& guid, ITypeInfo** ppTinfo);
    [ExtensionAttribute]
internal static HRESULT GetLibAttr(Interface this, TLIBATTR*& ppTLibAttr);
    [ExtensionAttribute]
internal static HRESULT GetDocumentation(Interface this, int index, BSTR* pBstrName, BSTR* pBstrDocString, UInt32& pdwHelpContext, BSTR* pBstrHelpFile);
    [ExtensionAttribute]
internal static HRESULT IsName(Interface this, Span`1& szNameBuf, UInt32 lHashVal, BOOL& pfName);
    [ExtensionAttribute]
internal static HRESULT FindName(Interface this, Span`1& szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, UInt16& pcFound);
    [ExtensionAttribute]
internal static void ReleaseTLibAttr(Interface this, TLIBATTR& pTLibAttr);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_StructuredStorage_IEnumSTATSTG_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<STATSTG> rgelt, UInt32* pceltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_StructuredStorage_ILockBytes_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Stat(Interface this, STATSTG& pstatstg, UInt32 grfStatFlag);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_StructuredStorage_IPersistStorage_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetClassID(Interface this, Guid& pClassID);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_StructuredStorage_IPropertyBag_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Read(Interface this, string pszPropName, VARIANT& pVar, IErrorLog* pErrorLog);
    [ExtensionAttribute]
internal static HRESULT Write(Interface this, string pszPropName, VARIANT& pVar);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Com_StructuredStorage_IStorage_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT CreateStream(Interface this, string pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStream** ppstm);
    [ExtensionAttribute]
internal static HRESULT OpenStream(Interface this, string pwcsName, STGM grfMode, UInt32 reserved2, IStream** ppstm);
    [ExtensionAttribute]
internal static HRESULT CreateStorage(Interface this, string pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStorage** ppstg);
    [ExtensionAttribute]
internal static HRESULT OpenStorage(Interface this, string pwcsName, IStorage* pstgPriority, STGM grfMode, UInt16*& snbExclude, UInt32 reserved, IStorage** ppstg);
    [ExtensionAttribute]
internal static HRESULT CopyTo(Interface this, ReadOnlySpan`1<Guid> rgiidExclude, UInt16** snbExclude, IStorage* pstgDest);
    [ExtensionAttribute]
internal static HRESULT MoveElementTo(Interface this, string pwcsName, IStorage* pstgDest, string pwcsNewName, UInt32 grfFlags);
    [ExtensionAttribute]
internal static HRESULT EnumElements(Interface this, IEnumSTATSTG** ppenum);
    [ExtensionAttribute]
internal static HRESULT DestroyElement(Interface this, string pwcsName);
    [ExtensionAttribute]
internal static HRESULT RenameElement(Interface this, string pwcsOldName, string pwcsNewName);
    [ExtensionAttribute]
internal static HRESULT SetElementTimes(Interface this, string pwcsName, FILETIME& pctime, FILETIME& patime, FILETIME& pmtime);
    [ExtensionAttribute]
internal static HRESULT SetClass(Interface this, Guid& clsid);
    [ExtensionAttribute]
internal static HRESULT Stat(Interface this, STATSTG& pstatstg, UInt32 grfStatFlag);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IAdviseSinkEx_Extensions : object {
    [ExtensionAttribute]
internal static void OnDataChange(Interface this, FORMATETC& pFormatetc, STGMEDIUM& pStgmed);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IClassFactory2_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT CreateInstance(Interface this, IUnknown* pUnkOuter, Guid& riid, Void*& ppvObject);
    [ExtensionAttribute]
internal static HRESULT GetLicInfo(Interface this, LICINFO& pLicInfo);
    [ExtensionAttribute]
internal static HRESULT CreateInstanceLic(Interface this, IUnknown* pUnkOuter, Guid& riid, BSTR bstrKey, Void*& ppvObj);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IDispatchEx_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetDispID(Interface this, BSTR bstrName, UInt32 grfdex, Int32& pid);
    [ExtensionAttribute]
internal static HRESULT InvokeEx(Interface this, int id, UInt32 lcid, ushort wFlags, DISPPARAMS& pdp, VARIANT* pvarRes, EXCEPINFO* pei, IServiceProvider* pspCaller);
    [ExtensionAttribute]
internal static HRESULT GetMemberProperties(Interface this, int id, UInt32 grfdexFetch, FDEX_PROP_FLAGS& pgrfdex);
    [ExtensionAttribute]
internal static HRESULT GetNextDispID(Interface this, UInt32 grfdex, int id, Int32& pid);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IDropTarget_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT DragEnter(Interface this, IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT& pdwEffect);
    [ExtensionAttribute]
internal static HRESULT DragOver(Interface this, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT& pdwEffect);
    [ExtensionAttribute]
internal static HRESULT Drop(Interface this, IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT& pdwEffect);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IEnumOleUndoUnits_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, UInt32 cElt, IOleUndoUnit** rgElt, UInt32& pcEltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IEnumOLEVERB_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<OLEVERB> rgelt, UInt32* pceltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IEnumVARIANT_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Next(Interface this, Span`1<VARIANT> rgVar, UInt32& pCeltFetched);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IFont_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT QueryTextMetrics(Interface this, TEXTMETRICW& pTM);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IGetOleObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetOleObject(Interface this, Guid& riid, Void*& ppvObj);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IGetVBAObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetObject(Interface this, Guid& riid, Void*& ppvObj, UInt32 dwReserved);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleAdviseHolder_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Advise(Interface this, IAdviseSink* pAdvise, UInt32& pdwConnection);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleCommandTarget_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT QueryStatus(Interface this, Guid& pguidCmdGroup, UInt32 cCmds, OLECMD& prgCmds, OLECMDTEXT& pCmdText);
    [ExtensionAttribute]
internal static HRESULT Exec(Interface this, Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, VARIANT& pvaIn, VARIANT& pvaOut);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleContainer_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT ParseDisplayName(Interface this, IBindCtx* pbc, PWSTR pszDisplayName, UInt32& pchEaten, IMoniker** ppmkOut);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleControl_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetControlInfo(Interface this, CONTROLINFO& pCI);
    [ExtensionAttribute]
internal static HRESULT OnMnemonic(Interface this, MSG& pMsg);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleControlSite_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT TransformCoords(Interface this, POINTL& pPtlHimetric, PointF& pPtfContainer, UInt32 dwFlags);
    [ExtensionAttribute]
internal static HRESULT TranslateAccelerator(Interface this, MSG& pMsg, KEYMODIFIERS grfModifiers);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleInPlaceActiveObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
    [ExtensionAttribute]
internal static HRESULT TranslateAccelerator(Interface this, Nullable`1<MSG> lpmsg);
    [ExtensionAttribute]
internal static HRESULT ResizeBorder(Interface this, RECT& prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fFrameWindow);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleInPlaceFrame_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
    [ExtensionAttribute]
internal static HRESULT GetBorder(Interface this, RECT& lprectBorder);
    [ExtensionAttribute]
internal static HRESULT RequestBorderSpace(Interface this, RECT& pborderwidths);
    [ExtensionAttribute]
internal static HRESULT SetBorderSpace(Interface this, RECT& pborderwidths);
    [ExtensionAttribute]
internal static HRESULT SetActiveObject(Interface this, IOleInPlaceActiveObject* pActiveObject, string pszObjName);
    [ExtensionAttribute]
internal static HRESULT InsertMenus(Interface this, HMENU hmenuShared, OLEMENUGROUPWIDTHS& lpMenuWidths);
    [ExtensionAttribute]
internal static HRESULT SetStatusText(Interface this, string pszStatusText);
    [ExtensionAttribute]
internal static HRESULT TranslateAccelerator(Interface this, MSG& lpmsg, ushort wID);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleInPlaceObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
    [ExtensionAttribute]
internal static HRESULT SetObjectRects(Interface this, RECT& lprcPosRect, RECT& lprcClipRect);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleInPlaceObjectWindowless_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
    [ExtensionAttribute]
internal static HRESULT SetObjectRects(Interface this, RECT& lprcPosRect, RECT& lprcClipRect);
    [ExtensionAttribute]
internal static HRESULT OnWindowMessage(Interface this, UInt32 msg, WPARAM wParam, LPARAM lParam, LRESULT& plResult);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleInPlaceSite_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
    [ExtensionAttribute]
internal static HRESULT GetWindowContext(Interface this, IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, RECT& lprcPosRect, RECT& lprcClipRect, OLEINPLACEFRAMEINFO& lpFrameInfo);
    [ExtensionAttribute]
internal static HRESULT OnPosRectChange(Interface this, RECT& lprcPosRect);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleInPlaceUIWindow_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
    [ExtensionAttribute]
internal static HRESULT GetBorder(Interface this, RECT& lprectBorder);
    [ExtensionAttribute]
internal static HRESULT RequestBorderSpace(Interface this, RECT& pborderwidths);
    [ExtensionAttribute]
internal static HRESULT SetBorderSpace(Interface this, RECT& pborderwidths);
    [ExtensionAttribute]
internal static HRESULT SetActiveObject(Interface this, IOleInPlaceActiveObject* pActiveObject, string pszObjName);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT SetHostNames(Interface this, string szContainerApp, string szContainerObj);
    [ExtensionAttribute]
internal static HRESULT DoVerb(Interface this, int iVerb, MSG& lpmsg, IOleClientSite* pActiveSite, int lindex, HWND hwndParent, RECT& lprcPosRect);
    [ExtensionAttribute]
internal static HRESULT GetUserClassID(Interface this, Guid& pClsid);
    [ExtensionAttribute]
internal static HRESULT GetUserType(Interface this, UInt32 dwFormOfType, PWSTR& pszUserType);
    [ExtensionAttribute]
internal static HRESULT SetExtent(Interface this, DVASPECT dwDrawAspect, SIZE& psizel);
    [ExtensionAttribute]
internal static HRESULT GetExtent(Interface this, DVASPECT dwDrawAspect, SIZE& psizel);
    [ExtensionAttribute]
internal static HRESULT Advise(Interface this, IAdviseSink* pAdvSink, UInt32& pdwConnection);
    [ExtensionAttribute]
internal static HRESULT GetMiscStatus(Interface this, DVASPECT dwAspect, OLEMISC& pdwStatus);
    [ExtensionAttribute]
internal static HRESULT SetColorScheme(Interface this, LOGPALETTE& pLogpal);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleParentUndoUnit_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetUnitType(Interface this, Guid& pClsid, Int32& plID);
    [ExtensionAttribute]
internal static HRESULT GetParentState(Interface this, UInt32& pdwState);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleUndoManager_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetOpenParentState(Interface this, UInt32& pdwState);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleUndoUnit_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetUnitType(Interface this, Guid& pClsid, Int32& plID);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IOleWindow_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetWindow(Interface this, HWND& phwnd);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IParseDisplayName_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT ParseDisplayName(Interface this, IBindCtx* pbc, PWSTR pszDisplayName, UInt32& pchEaten, IMoniker** ppmkOut);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IPerPropertyBrowsing_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT MapPropertyToPage(Interface this, int dispID, Guid& pClsid);
    [ExtensionAttribute]
internal static HRESULT GetPredefinedStrings(Interface this, int dispID, CALPOLESTR& pCaStringsOut, CADWORD& pCaCookiesOut);
    [ExtensionAttribute]
internal static HRESULT GetPredefinedValue(Interface this, int dispID, UInt32 dwCookie, VARIANT& pVarOut);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IPersistPropertyBag_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetClassID(Interface this, Guid& pClassID);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IPicture_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT get_hPal(Interface this, OLE_HANDLE& phPal);
    [ExtensionAttribute]
internal static HRESULT Render(Interface this, HDC hDC, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, RECT& pRcWBounds);
    [ExtensionAttribute]
internal static HRESULT SelectPicture(Interface this, HDC hDCIn, HDC& phDCOut, OLE_HANDLE& phBmpOut);
    [ExtensionAttribute]
internal static HRESULT SaveAsFile(Interface this, IStream* pStream, BOOL fSaveMemCopy, Int32& pCbSize);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IProvideClassInfo2_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetGUID(Interface this, UInt32 dwGuidKind, Guid& pGUID);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IProvideMultipleClassInfo_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetGUID(Interface this, UInt32 dwGuidKind, Guid& pGUID);
    [ExtensionAttribute]
internal static HRESULT GetMultiTypeInfoCount(Interface this, UInt32& pcti);
    [ExtensionAttribute]
internal static HRESULT GetInfoOfIndex(Interface this, UInt32 iti, MULTICLASSINFO_FLAGS dwFlags, ITypeInfo** pptiCoClass, UInt32& pdwTIFlags, UInt32& pcdispidReserved, Guid& piidPrimary, Guid& piidSource);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IQuickActivate_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT QuickActivate(Interface this, QACONTAINER& pQaContainer, QACONTROL& pQaControl);
    [ExtensionAttribute]
internal static HRESULT SetContentExtent(Interface this, SIZE& pSizel);
    [ExtensionAttribute]
internal static HRESULT GetContentExtent(Interface this, SIZE& pSizel);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IRecordInfo_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetGuid(Interface this, Guid& pguid);
    [ExtensionAttribute]
internal static HRESULT GetSize(Interface this, UInt32& pcbSize);
    [ExtensionAttribute]
internal static HRESULT GetField(Interface this, Void* pvData, string szFieldName, VARIANT& pvarField);
    [ExtensionAttribute]
internal static HRESULT GetFieldNoCopy(Interface this, Void* pvData, string szFieldName, VARIANT& pvarField, Void*& ppvDataCArray);
    [ExtensionAttribute]
internal static HRESULT PutField(Interface this, UInt32 wFlags, Void* pvData, string szFieldName, VARIANT& pvarField);
    [ExtensionAttribute]
internal static HRESULT PutFieldNoCopy(Interface this, UInt32 wFlags, Void* pvData, string szFieldName, VARIANT& pvarField);
    [ExtensionAttribute]
internal static HRESULT GetFieldNames(Interface this, UInt32& pcNames, BSTR* rgBstrNames);
    [ExtensionAttribute]
internal static HRESULT RecordCreateCopy(Interface this, Void* pvSource, Void*& ppvDest);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_ISimpleFrameSite_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT PreMessageFilter(Interface this, HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT& plResult, UInt32& pdwCookie);
    [ExtensionAttribute]
internal static HRESULT PostMessageFilter(Interface this, HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT& plResult, UInt32 dwCookie);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_ISpecifyPropertyPages_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetPages(Interface this, CAUUID& pPages);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IVBFormat_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Format(Interface this, VARIANT& vData, BSTR bstrFormat, Void* lpBuffer, ushort cb, int lcid, short sFirstDayOfWeek, ushort sFirstWeekOfYear, UInt16& rcb);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IViewObject_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Draw(Interface this, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hdcTargetDev, HDC hdcDraw, Nullable`1<RECTL> lprcBounds, Nullable`1<RECTL> lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    [ExtensionAttribute]
internal static HRESULT GetColorSet(Interface this, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hicTargetDev, LOGPALETTE*& ppColorSet);
    [ExtensionAttribute]
internal static HRESULT Freeze(Interface this, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32& pdwFreeze);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.System_Ole_IViewObject2_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Draw(Interface this, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hdcTargetDev, HDC hdcDraw, Nullable`1<RECTL> lprcBounds, Nullable`1<RECTL> lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    [ExtensionAttribute]
internal static HRESULT GetColorSet(Interface this, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hicTargetDev, LOGPALETTE*& ppColorSet);
    [ExtensionAttribute]
internal static HRESULT Freeze(Interface this, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32& pdwFreeze);
    [ExtensionAttribute]
internal static HRESULT GetExtent(Interface this, DVASPECT dwDrawAspect, int lindex, DVTARGETDEVICE& ptd, SIZE& lpsizel);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.ApplicationInstallationAndServicing.ACTCTXW : ValueType {
    internal UInt32 cbSize;
    internal UInt32 dwFlags;
    internal PCWSTR lpSource;
    internal ushort wProcessorArchitecture;
    internal ushort wLangId;
    internal PCWSTR lpAssemblyDirectory;
    internal PCWSTR lpResourceName;
    internal PCWSTR lpApplicationName;
    internal HMODULE hModule;
}
internal class Windows.Win32.System.Com.__SAFEARRAYBOUND_1 : ValueType {
    private static int SpanLength;
    internal SAFEARRAYBOUND _0;
    internal int Length { get; }
    [IsReadOnlyAttribute]
internal int get_Length();
    [UnscopedRefAttribute]
internal Span`1<SAFEARRAYBOUND> AsSpan();
    [IsReadOnlyAttribute]
[UnscopedRefAttribute]
internal ReadOnlySpan`1<SAFEARRAYBOUND> AsReadOnlySpan();
    public static __SAFEARRAYBOUND_1 op_Implicit(ReadOnlySpan`1<SAFEARRAYBOUND> value);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.ADVANCED_FEATURE_FLAGS : Enum {
    public ushort value__;
    public static ADVANCED_FEATURE_FLAGS FADF_AUTO;
    public static ADVANCED_FEATURE_FLAGS FADF_STATIC;
    public static ADVANCED_FEATURE_FLAGS FADF_EMBEDDED;
    public static ADVANCED_FEATURE_FLAGS FADF_FIXEDSIZE;
    public static ADVANCED_FEATURE_FLAGS FADF_RECORD;
    public static ADVANCED_FEATURE_FLAGS FADF_HAVEIID;
    public static ADVANCED_FEATURE_FLAGS FADF_HAVEVARTYPE;
    public static ADVANCED_FEATURE_FLAGS FADF_BSTR;
    public static ADVANCED_FEATURE_FLAGS FADF_UNKNOWN;
    public static ADVANCED_FEATURE_FLAGS FADF_DISPATCH;
    public static ADVANCED_FEATURE_FLAGS FADF_VARIANT;
    public static ADVANCED_FEATURE_FLAGS FADF_RESERVED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.ADVF : Enum {
    public int value__;
    public static ADVF ADVF_NODATA;
    public static ADVF ADVF_PRIMEFIRST;
    public static ADVF ADVF_ONLYONCE;
    public static ADVF ADVF_DATAONSTOP;
    public static ADVF ADVFCACHE_NOHANDLER;
    public static ADVF ADVFCACHE_FORCEBUILTIN;
    public static ADVF ADVFCACHE_ONSAVE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.BIND_OPTS : ValueType {
    internal UInt32 cbStruct;
    internal UInt32 grfFlags;
    internal UInt32 grfMode;
    internal UInt32 dwTickCountDeadline;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.BINDINFO : ValueType {
    internal UInt32 cbSize;
    internal PWSTR szExtraInfo;
    internal STGMEDIUM stgmedData;
    internal UInt32 grfBindInfoF;
    internal UInt32 dwBindVerb;
    internal PWSTR szCustomVerb;
    internal UInt32 cbstgmedData;
    internal UInt32 dwOptions;
    internal UInt32 dwOptionsFlags;
    internal UInt32 dwCodePage;
    internal SECURITY_ATTRIBUTES securityAttributes;
    internal Guid iid;
    internal IUnknown* pUnk;
    internal UInt32 dwReserved;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.BINDPTR : ValueType {
    internal FUNCDESC* lpfuncdesc;
    internal VARDESC* lpvardesc;
    internal ITypeComp* lptcomp;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.BLOB : ValueType {
    internal UInt32 cbSize;
    internal Byte* pBlobData;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.CALLCONV : Enum {
    public int value__;
    public static CALLCONV CC_FASTCALL;
    public static CALLCONV CC_CDECL;
    public static CALLCONV CC_MSCPASCAL;
    public static CALLCONV CC_PASCAL;
    public static CALLCONV CC_MACPASCAL;
    public static CALLCONV CC_STDCALL;
    public static CALLCONV CC_FPFASTCALL;
    public static CALLCONV CC_SYSCALL;
    public static CALLCONV CC_MPWCDECL;
    public static CALLCONV CC_MPWPASCAL;
    public static CALLCONV CC_MAX;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.CLSCTX : Enum {
    public UInt32 value__;
    public static CLSCTX CLSCTX_INPROC_SERVER;
    public static CLSCTX CLSCTX_INPROC_HANDLER;
    public static CLSCTX CLSCTX_LOCAL_SERVER;
    public static CLSCTX CLSCTX_INPROC_SERVER16;
    public static CLSCTX CLSCTX_REMOTE_SERVER;
    public static CLSCTX CLSCTX_INPROC_HANDLER16;
    public static CLSCTX CLSCTX_RESERVED1;
    public static CLSCTX CLSCTX_RESERVED2;
    public static CLSCTX CLSCTX_RESERVED3;
    public static CLSCTX CLSCTX_RESERVED4;
    public static CLSCTX CLSCTX_NO_CODE_DOWNLOAD;
    public static CLSCTX CLSCTX_RESERVED5;
    public static CLSCTX CLSCTX_NO_CUSTOM_MARSHAL;
    public static CLSCTX CLSCTX_ENABLE_CODE_DOWNLOAD;
    public static CLSCTX CLSCTX_NO_FAILURE_LOG;
    public static CLSCTX CLSCTX_DISABLE_AAA;
    public static CLSCTX CLSCTX_ENABLE_AAA;
    public static CLSCTX CLSCTX_FROM_DEFAULT_CONTEXT;
    public static CLSCTX CLSCTX_ACTIVATE_X86_SERVER;
    public static CLSCTX CLSCTX_ACTIVATE_32_BIT_SERVER;
    public static CLSCTX CLSCTX_ACTIVATE_64_BIT_SERVER;
    public static CLSCTX CLSCTX_ENABLE_CLOAKING;
    public static CLSCTX CLSCTX_APPCONTAINER;
    public static CLSCTX CLSCTX_ACTIVATE_AAA_AS_IU;
    public static CLSCTX CLSCTX_RESERVED6;
    public static CLSCTX CLSCTX_ACTIVATE_ARM32_SERVER;
    public static CLSCTX CLSCTX_ALLOW_LOWER_TRUST_REGISTRATION;
    public static CLSCTX CLSCTX_PS_DLL;
    public static CLSCTX CLSCTX_ALL;
    public static CLSCTX CLSCTX_SERVER;
}
internal static class Windows.Win32.System.Com.CLSID : object {
    internal static Guid AutoComplete;
    internal static Guid DragDropHelper;
    internal static Guid FileSaveDialog;
    internal static Guid FileOpenDialog;
    internal static Guid StdGlobalInterfaceTable;
    private static CLSID();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.CONNECTDATA : ValueType {
    internal IUnknown* pUnk;
    internal UInt32 dwCookie;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.CY : ValueType {
    internal _Anonymous_e__Struct Anonymous;
    internal long int64;
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(CY other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(CY left, CY right);
    public static bool op_Inequality(CY left, CY right);
    public static decimal op_Explicit(CY value);
    public static CY op_Explicit(decimal value);
    public static float op_Explicit(CY value);
    public static CY op_Explicit(float value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.DESCKIND : Enum {
    public int value__;
    public static DESCKIND DESCKIND_NONE;
    public static DESCKIND DESCKIND_FUNCDESC;
    public static DESCKIND DESCKIND_VARDESC;
    public static DESCKIND DESCKIND_TYPECOMP;
    public static DESCKIND DESCKIND_IMPLICITAPPOBJ;
    public static DESCKIND DESCKIND_MAX;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.DISPATCH_FLAGS : Enum {
    public ushort value__;
    public static DISPATCH_FLAGS DISPATCH_METHOD;
    public static DISPATCH_FLAGS DISPATCH_PROPERTYGET;
    public static DISPATCH_FLAGS DISPATCH_PROPERTYPUT;
    public static DISPATCH_FLAGS DISPATCH_PROPERTYPUTREF;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.DISPPARAMS : ValueType {
    internal VARIANT* rgvarg;
    internal Int32* rgdispidNamedArgs;
    internal UInt32 cArgs;
    internal UInt32 cNamedArgs;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.DVASPECT : Enum {
    public UInt32 value__;
    public static DVASPECT DVASPECT_CONTENT;
    public static DVASPECT DVASPECT_THUMBNAIL;
    public static DVASPECT DVASPECT_ICON;
    public static DVASPECT DVASPECT_DOCPRINT;
    public static DVASPECT DVASPECT_OPAQUE;
    public static DVASPECT DVASPECT_TRANSPARENT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.DVTARGETDEVICE : ValueType {
    internal UInt32 tdSize;
    internal ushort tdDriverNameOffset;
    internal ushort tdDeviceNameOffset;
    internal ushort tdPortNameOffset;
    internal ushort tdExtDevmodeOffset;
    internal __byte_1 tdData;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.ELEMDESC : ValueType {
    internal TYPEDESC tdesc;
    internal _Anonymous_e__Union Anonymous;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.EXCEPINFO : ValueType {
    internal ushort wCode;
    internal ushort wReserved;
    internal BSTR bstrSource;
    internal BSTR bstrDescription;
    internal BSTR bstrHelpFile;
    internal UInt32 dwHelpContext;
    internal Void* pvReserved;
    internal method pfnDeferredFillIn;
    internal int scode;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.FORMATETC : ValueType {
    internal ushort cfFormat;
    internal DVTARGETDEVICE* ptd;
    internal UInt32 dwAspect;
    internal int lindex;
    internal UInt32 tymed;
    public static FORMATETC op_Implicit(FORMATETC formatetc);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.FUNCDESC : ValueType {
    internal int memid;
    internal Int32* lprgscode;
    internal ELEMDESC* lprgelemdescParam;
    internal FUNCKIND funckind;
    internal INVOKEKIND invkind;
    internal CALLCONV callconv;
    internal short cParams;
    internal short cParamsOpt;
    internal short oVft;
    internal short cScodes;
    internal ELEMDESC elemdescFunc;
    internal FUNCFLAGS wFuncFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.FUNCFLAGS : Enum {
    public ushort value__;
    public static FUNCFLAGS FUNCFLAG_FRESTRICTED;
    public static FUNCFLAGS FUNCFLAG_FSOURCE;
    public static FUNCFLAGS FUNCFLAG_FBINDABLE;
    public static FUNCFLAGS FUNCFLAG_FREQUESTEDIT;
    public static FUNCFLAGS FUNCFLAG_FDISPLAYBIND;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTBIND;
    public static FUNCFLAGS FUNCFLAG_FHIDDEN;
    public static FUNCFLAGS FUNCFLAG_FUSESGETLASTERROR;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTCOLLELEM;
    public static FUNCFLAGS FUNCFLAG_FUIDEFAULT;
    public static FUNCFLAGS FUNCFLAG_FNONBROWSABLE;
    public static FUNCFLAGS FUNCFLAG_FREPLACEABLE;
    public static FUNCFLAGS FUNCFLAG_FIMMEDIATEBIND;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.FUNCKIND : Enum {
    public int value__;
    public static FUNCKIND FUNC_VIRTUAL;
    public static FUNCKIND FUNC_PUREVIRTUAL;
    public static FUNCKIND FUNC_NONVIRTUAL;
    public static FUNCKIND FUNC_STATIC;
    public static FUNCKIND FUNC_DISPATCH;
}
[GuidAttribute("0000010F-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IAdviseSink : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IAdviseSink();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void OnDataChange(FORMATETC& pFormatetc, STGMEDIUM& pStgmed);
    [UnmanagedCallersOnlyAttribute]
private static void OnDataChange(IAdviseSink* pThis, FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
    public void OnDataChange(FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
    [UnmanagedCallersOnlyAttribute]
private static void OnViewChange(IAdviseSink* pThis, UInt32 dwAspect, int lindex);
    public void OnViewChange(UInt32 dwAspect, int lindex);
    [UnmanagedCallersOnlyAttribute]
private static void OnRename(IAdviseSink* pThis, IMoniker* pmk);
    public void OnRename(IMoniker* pmk);
    [UnmanagedCallersOnlyAttribute]
private static void OnSave(IAdviseSink* pThis);
    public void OnSave();
    [UnmanagedCallersOnlyAttribute]
private static void OnClose(IAdviseSink* pThis);
    public void OnClose();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000000E-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IBindCtx : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IBindCtx();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RegisterObjectBound(IBindCtx* pThis, IUnknown* punk);
    public void RegisterObjectBound(IUnknown* punk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RevokeObjectBound(IBindCtx* pThis, IUnknown* punk);
    public void RevokeObjectBound(IUnknown* punk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ReleaseBoundObjects(IBindCtx* pThis);
    public void ReleaseBoundObjects();
    internal void SetBindOptions(BIND_OPTS& pbindopts);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetBindOptions(IBindCtx* pThis, BIND_OPTS* pbindopts);
    public void SetBindOptions(BIND_OPTS* pbindopts);
    internal void GetBindOptions(BIND_OPTS& pbindopts);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetBindOptions(IBindCtx* pThis, BIND_OPTS* pbindopts);
    public void GetBindOptions(BIND_OPTS* pbindopts);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetRunningObjectTable(IBindCtx* pThis, IRunningObjectTable** pprot);
    public void GetRunningObjectTable(IRunningObjectTable** pprot);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RegisterObjectParam(IBindCtx* pThis, PWSTR pszKey, IUnknown* punk);
    public void RegisterObjectParam(PWSTR pszKey, IUnknown* punk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetObjectParam(IBindCtx* pThis, PWSTR pszKey, IUnknown** ppunk);
    public void GetObjectParam(PWSTR pszKey, IUnknown** ppunk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumObjectParam(IBindCtx* pThis, IEnumString** ppenum);
    public void EnumObjectParam(IEnumString** ppenum);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RevokeObjectParam(IBindCtx* pThis, PWSTR pszKey);
    public void RevokeObjectParam(PWSTR pszKey);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("FC4801A1-2BA9-11CF-A229-00AA003D7352")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IBindHost : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IBindHost();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateMoniker(IBindHost* pThis, PWSTR szName, IBindCtx* pBC, IMoniker** ppmk, UInt32 dwReserved);
    public void CreateMoniker(PWSTR szName, IBindCtx* pBC, IMoniker** ppmk, UInt32 dwReserved);
    internal void MonikerBindToStorage(IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid& riid, Void*& ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT MonikerBindToStorage(IBindHost* pThis, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid* riid, Void** ppvObj);
    public void MonikerBindToStorage(IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid* riid, Void** ppvObj);
    internal void MonikerBindToObject(IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid& riid, Void*& ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT MonikerBindToObject(IBindHost* pThis, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid* riid, Void** ppvObj);
    public void MonikerBindToObject(IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, Guid* riid, Void** ppvObj);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("79EAC9C0-BAF9-11CE-8C82-00AA004BA90B")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IBinding : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IBinding();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Abort(IBinding* pThis);
    public void Abort();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Suspend(IBinding* pThis);
    public void Suspend();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Resume(IBinding* pThis);
    public void Resume();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetPriority(IBinding* pThis, int nPriority);
    public void SetPriority(int nPriority);
    internal void GetPriority(Int32& pnPriority);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPriority(IBinding* pThis, Int32* pnPriority);
    public void GetPriority(Int32* pnPriority);
    internal void GetBindResult(Guid& pclsidProtocol, UInt32& pdwResult, PWSTR& pszResult, UInt32& pdwReserved);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetBindResult(IBinding* pThis, Guid* pclsidProtocol, UInt32* pdwResult, PWSTR* pszResult, UInt32* pdwReserved);
    public void GetBindResult(Guid* pclsidProtocol, UInt32* pdwResult, PWSTR* pszResult, UInt32* pdwReserved);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("79EAC9C1-BAF9-11CE-8C82-00AA004BA90B")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IBindStatusCallback : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IBindStatusCallback();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnStartBinding(IBindStatusCallback* pThis, UInt32 dwReserved, IBinding* pib);
    public void OnStartBinding(UInt32 dwReserved, IBinding* pib);
    internal void GetPriority(Int32& pnPriority);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPriority(IBindStatusCallback* pThis, Int32* pnPriority);
    public void GetPriority(Int32* pnPriority);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnLowResource(IBindStatusCallback* pThis, UInt32 reserved);
    public void OnLowResource(UInt32 reserved);
    internal void OnProgress(UInt32 ulProgress, UInt32 ulProgressMax, UInt32 ulStatusCode, string szStatusText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnProgress(IBindStatusCallback* pThis, UInt32 ulProgress, UInt32 ulProgressMax, UInt32 ulStatusCode, PCWSTR szStatusText);
    public void OnProgress(UInt32 ulProgress, UInt32 ulProgressMax, UInt32 ulStatusCode, PCWSTR szStatusText);
    internal void OnStopBinding(HRESULT hresult, string szError);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnStopBinding(IBindStatusCallback* pThis, HRESULT hresult, PCWSTR szError);
    public void OnStopBinding(HRESULT hresult, PCWSTR szError);
    internal void GetBindInfo(UInt32& grfBINDF, BINDINFO& pbindinfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetBindInfo(IBindStatusCallback* pThis, UInt32* grfBINDF, BINDINFO* pbindinfo);
    public void GetBindInfo(UInt32* grfBINDF, BINDINFO* pbindinfo);
    internal void OnDataAvailable(UInt32 grfBSCF, UInt32 dwSize, FORMATETC& pformatetc, STGMEDIUM& pstgmed);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnDataAvailable(IBindStatusCallback* pThis, UInt32 grfBSCF, UInt32 dwSize, FORMATETC* pformatetc, STGMEDIUM* pstgmed);
    public void OnDataAvailable(UInt32 grfBSCF, UInt32 dwSize, FORMATETC* pformatetc, STGMEDIUM* pstgmed);
    internal void OnObjectAvailable(Guid& riid, IUnknown* punk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnObjectAvailable(IBindStatusCallback* pThis, Guid* riid, IUnknown* punk);
    public void OnObjectAvailable(Guid* riid, IUnknown* punk);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000001-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IClassFactory : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IClassFactory();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT CreateInstance(IUnknown* pUnkOuter, Guid& riid, Void*& ppvObject);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateInstance(IClassFactory* pThis, IUnknown* pUnkOuter, Guid* riid, Void** ppvObject);
    public HRESULT CreateInstance(IUnknown* pUnkOuter, Guid* riid, Void** ppvObject);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT LockServer(IClassFactory* pThis, BOOL fLock);
    public HRESULT LockServer(BOOL fLock);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
internal class Windows.Win32.System.Com.IComCallableWrapper : ValueType {
    private Void** _vtbl;
    public static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IComCallableWrapper();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
    public HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    private static override void Windows.Win32.IVTable<Windows.Win32.System.Com.IComCallableWrapper,Windows.Win32.System.Com.IComCallableWrapper.Vtbl>.PopulateVTable(Vtbl* vtable);
}
[GuidAttribute("B196B286-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IConnectionPoint : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IConnectionPoint();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetConnectionInterface(Guid& pIID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetConnectionInterface(IConnectionPoint* pThis, Guid* pIID);
    public HRESULT GetConnectionInterface(Guid* pIID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetConnectionPointContainer(IConnectionPoint* pThis, IConnectionPointContainer** ppCPC);
    public HRESULT GetConnectionPointContainer(IConnectionPointContainer** ppCPC);
    internal HRESULT Advise(IUnknown* pUnkSink, UInt32& pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Advise(IConnectionPoint* pThis, IUnknown* pUnkSink, UInt32* pdwCookie);
    public HRESULT Advise(IUnknown* pUnkSink, UInt32* pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unadvise(IConnectionPoint* pThis, UInt32 dwCookie);
    public HRESULT Unadvise(UInt32 dwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumConnections(IConnectionPoint* pThis, IEnumConnections** ppEnum);
    public HRESULT EnumConnections(IEnumConnections** ppEnum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B284-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IConnectionPointContainer : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IConnectionPointContainer();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumConnectionPoints(IConnectionPointContainer* pThis, IEnumConnectionPoints** ppEnum);
    public HRESULT EnumConnectionPoints(IEnumConnectionPoints** ppEnum);
    internal HRESULT FindConnectionPoint(Guid& riid, IConnectionPoint** ppCP);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT FindConnectionPoint(IConnectionPointContainer* pThis, Guid* riid, IConnectionPoint** ppCP);
    public HRESULT FindConnectionPoint(Guid* riid, IConnectionPoint** ppCP);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000010E-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IDataObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IDataObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetData(FORMATETC& pformatetcIn, STGMEDIUM& pmedium);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetData(IDataObject* pThis, FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    public void GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    internal void GetDataHere(FORMATETC& pformatetc, STGMEDIUM& pmedium);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDataHere(IDataObject* pThis, FORMATETC* pformatetc, STGMEDIUM* pmedium);
    public void GetDataHere(FORMATETC* pformatetc, STGMEDIUM* pmedium);
    internal HRESULT QueryGetData(FORMATETC& pformatetc);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryGetData(IDataObject* pThis, FORMATETC* pformatetc);
    public HRESULT QueryGetData(FORMATETC* pformatetc);
    internal HRESULT GetCanonicalFormatEtc(FORMATETC& pformatectIn, FORMATETC& pformatetcOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCanonicalFormatEtc(IDataObject* pThis, FORMATETC* pformatectIn, FORMATETC* pformatetcOut);
    public HRESULT GetCanonicalFormatEtc(FORMATETC* pformatectIn, FORMATETC* pformatetcOut);
    internal void SetData(FORMATETC& pformatetc, STGMEDIUM& pmedium, BOOL fRelease);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetData(IDataObject* pThis, FORMATETC* pformatetc, STGMEDIUM* pmedium, BOOL fRelease);
    public void SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, BOOL fRelease);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumFormatEtc(IDataObject* pThis, UInt32 dwDirection, IEnumFORMATETC** ppenumFormatEtc);
    public void EnumFormatEtc(UInt32 dwDirection, IEnumFORMATETC** ppenumFormatEtc);
    internal void DAdvise(FORMATETC& pformatetc, UInt32 advf, IAdviseSink* pAdvSink, UInt32& pdwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DAdvise(IDataObject* pThis, FORMATETC* pformatetc, UInt32 advf, IAdviseSink* pAdvSink, UInt32* pdwConnection);
    public void DAdvise(FORMATETC* pformatetc, UInt32 advf, IAdviseSink* pAdvSink, UInt32* pdwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DUnadvise(IDataObject* pThis, UInt32 dwConnection);
    public void DUnadvise(UInt32 dwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumDAdvise(IDataObject* pThis, IEnumSTATDATA** ppenumAdvise);
    public void EnumDAdvise(IEnumSTATDATA** ppenumAdvise);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00020400-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IDispatch : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IDispatch();
    internal HRESULT TryGetProperty(UInt32 dispId, VARIANT* pVar, UInt32 lcid);
    internal HRESULT TryGetProperty(int dispId, VARIANT* pVar, UInt32 lcid);
    private static void ClearStrings(EXCEPINFO& exceptionInfo);
    internal VARIANT GetProperty(UInt32 dispId, UInt32 lcid);
    internal VARIANT GetProperty(int dispId, UInt32 lcid);
    [NullableContextAttribute("2")]
public HRESULT SetPropertyValue(int dispatchId, VARIANT value, String& errorText);
    private static override void Windows.Win32.IVTable<Windows.Win32.System.Com.IDispatch,Windows.Win32.System.Com.IDispatch.Vtbl>.PopulateVTable(Vtbl* vtable);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeInfoCount(IDispatch* this, UInt32* pctinfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeInfo(IDispatch* this, UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetIDsOfNames(IDispatch* this, Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Invoke(IDispatch* this, int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS dwFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* pArgErr);
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetTypeInfoCount(UInt32& pctinfo);
    public HRESULT GetTypeInfoCount(UInt32* pctinfo);
    public HRESULT GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    internal HRESULT GetIDsOfNames(Guid& riid, Span`1<PWSTR> rgszNames, UInt32 lcid, Span`1<int> rgDispId);
    public HRESULT GetIDsOfNames(Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    internal HRESULT Invoke(int dispIdMember, Guid& riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public HRESULT Invoke(int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IDLDESC : ValueType {
    internal UIntPtr dwReserved;
    internal IDLFLAGS wIDLFlags;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.IDLFLAGS : Enum {
    public ushort value__;
    public static IDLFLAGS IDLFLAG_NONE;
    public static IDLFLAGS IDLFLAG_FIN;
    public static IDLFLAGS IDLFLAG_FOUT;
    public static IDLFLAGS IDLFLAG_FLCID;
    public static IDLFLAGS IDLFLAG_FRETVAL;
}
[GuidAttribute("B196B285-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumConnectionPoints : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumConnectionPoints();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT Next(UInt32 cConnections, IConnectionPoint** ppCP, UInt32& pcFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumConnectionPoints* pThis, UInt32 cConnections, IConnectionPoint** ppCP, UInt32* pcFetched);
    public HRESULT Next(UInt32 cConnections, IConnectionPoint** ppCP, UInt32* pcFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumConnectionPoints* pThis, UInt32 cConnections);
    public void Skip(UInt32 cConnections);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumConnectionPoints* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumConnectionPoints* pThis, IEnumConnectionPoints** ppEnum);
    public void Clone(IEnumConnectionPoints** ppEnum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B287-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumConnections : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumConnections();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Next(Span`1<CONNECTDATA> rgcd, UInt32& pcFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumConnections* pThis, UInt32 cConnections, CONNECTDATA* rgcd, UInt32* pcFetched);
    public void Next(UInt32 cConnections, CONNECTDATA* rgcd, UInt32* pcFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumConnections* pThis, UInt32 cConnections);
    public void Skip(UInt32 cConnections);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumConnections* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumConnections* pThis, IEnumConnections** ppEnum);
    public void Clone(IEnumConnections** ppEnum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000103-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumFORMATETC : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumFORMATETC();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Next(Span`1<FORMATETC> rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumFORMATETC* pThis, UInt32 celt, FORMATETC* rgelt, UInt32* pceltFetched);
    public void Next(UInt32 celt, FORMATETC* rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumFORMATETC* pThis, UInt32 celt);
    public void Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumFORMATETC* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumFORMATETC* pThis, IEnumFORMATETC** ppenum);
    public void Clone(IEnumFORMATETC** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000102-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumMoniker : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumMoniker();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumMoniker* pThis, UInt32 celt, IMoniker** rgelt, UInt32* pceltFetched);
    public HRESULT Next(UInt32 celt, IMoniker** rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumMoniker* pThis, UInt32 celt);
    public HRESULT Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumMoniker* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumMoniker* pThis, IEnumMoniker** ppenum);
    public void Clone(IEnumMoniker** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000105-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumSTATDATA : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumSTATDATA();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Next(Span`1<STATDATA> rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumSTATDATA* pThis, UInt32 celt, STATDATA* rgelt, UInt32* pceltFetched);
    public void Next(UInt32 celt, STATDATA* rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumSTATDATA* pThis, UInt32 celt);
    public void Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumSTATDATA* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumSTATDATA* pThis, IEnumSTATDATA** ppenum);
    public void Clone(IEnumSTATDATA** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000101-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumString : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumString();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT Next(Span`1<PWSTR> rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumString* pThis, UInt32 celt, PWSTR* rgelt, UInt32* pceltFetched);
    public HRESULT Next(UInt32 celt, PWSTR* rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumString* pThis, UInt32 celt);
    public HRESULT Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumString* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumString* pThis, IEnumString** ppenum);
    public void Clone(IEnumString** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IEnumUnknown : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumUnknown();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumUnknown* pThis, UInt32 celt, IUnknown** rgelt, UInt32* pceltFetched);
    public void Next(UInt32 celt, IUnknown** rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumUnknown* pThis, UInt32 celt);
    public void Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumUnknown* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumUnknown* pThis, IEnumUnknown** ppenum);
    public void Clone(IEnumUnknown** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("1CF2B120-547D-101B-8E65-08002B2BD119")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IErrorInfo : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IErrorInfo();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetGUID(Guid& pGUID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetGUID(IErrorInfo* pThis, Guid* pGUID);
    public void GetGUID(Guid* pGUID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSource(IErrorInfo* pThis, BSTR* pBstrSource);
    public void GetSource(BSTR* pBstrSource);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDescription(IErrorInfo* pThis, BSTR* pBstrDescription);
    public HRESULT GetDescription(BSTR* pBstrDescription);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetHelpFile(IErrorInfo* pThis, BSTR* pBstrHelpFile);
    public void GetHelpFile(BSTR* pBstrHelpFile);
    internal void GetHelpContext(UInt32& pdwHelpContext);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetHelpContext(IErrorInfo* pThis, UInt32* pdwHelpContext);
    public void GetHelpContext(UInt32* pdwHelpContext);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("3127CA40-446E-11CE-8135-00AA004BB851")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IErrorLog : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IErrorLog();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void AddError(string pszPropName, EXCEPINFO& pExcepInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddError(IErrorLog* pThis, PCWSTR pszPropName, EXCEPINFO* pExcepInfo);
    public void AddError(PCWSTR pszPropName, EXCEPINFO* pExcepInfo);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000146-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IGlobalInterfaceTable : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IGlobalInterfaceTable();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT RegisterInterfaceInGlobal(IUnknown* pUnk, Guid& riid, UInt32& pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RegisterInterfaceInGlobal(IGlobalInterfaceTable* pThis, IUnknown* pUnk, Guid* riid, UInt32* pdwCookie);
    public HRESULT RegisterInterfaceInGlobal(IUnknown* pUnk, Guid* riid, UInt32* pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RevokeInterfaceFromGlobal(IGlobalInterfaceTable* pThis, UInt32 dwCookie);
    public HRESULT RevokeInterfaceFromGlobal(UInt32 dwCookie);
    internal HRESULT GetInterfaceFromGlobal(UInt32 dwCookie, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetInterfaceFromGlobal(IGlobalInterfaceTable* pThis, UInt32 dwCookie, Guid* riid, Void** ppv);
    public HRESULT GetInterfaceFromGlobal(UInt32 dwCookie, Guid* riid, Void** ppv);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
internal interface Windows.Win32.System.Com.IManagedWrapper {
    public abstract virtual ComInterfaceTable GetComInterfaceTable();
}
internal interface Windows.Win32.System.Com.IManagedWrapper`1 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; private set; }
    private static IManagedWrapper`1();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    [CompilerGeneratedAttribute]
private static void set_InterfaceTable(ComInterfaceTable value);
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[NullableContextAttribute("1")]
internal interface Windows.Win32.System.Com.IManagedWrapper`10 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; }
    private static IManagedWrapper`10();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[NullableContextAttribute("1")]
internal interface Windows.Win32.System.Com.IManagedWrapper`2 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; private set; }
    private static IManagedWrapper`2();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    [CompilerGeneratedAttribute]
private static void set_InterfaceTable(ComInterfaceTable value);
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[NullableContextAttribute("1")]
internal interface Windows.Win32.System.Com.IManagedWrapper`3 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; }
    private static IManagedWrapper`3();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[NullableContextAttribute("1")]
internal interface Windows.Win32.System.Com.IManagedWrapper`4 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; }
    private static IManagedWrapper`4();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[NullableContextAttribute("1")]
internal interface Windows.Win32.System.Com.IManagedWrapper`5 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; }
    private static IManagedWrapper`5();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[NullableContextAttribute("1")]
internal interface Windows.Win32.System.Com.IManagedWrapper`6 {
    [CompilerGeneratedAttribute]
private static ComInterfaceTable <InterfaceTable>k__BackingField;
    private static ComInterfaceTable InterfaceTable { get; }
    private static IManagedWrapper`6();
    [CompilerGeneratedAttribute]
private static ComInterfaceTable get_InterfaceTable();
    private sealed virtual override ComInterfaceTable Windows.Win32.System.Com.IManagedWrapper.GetComInterfaceTable();
}
[GuidAttribute("0000000F-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IMoniker : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IMoniker();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetClassID(Guid& pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassID(IMoniker* pThis, Guid* pClassID);
    public void GetClassID(Guid* pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsDirty(IMoniker* pThis);
    public HRESULT IsDirty();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Load(IMoniker* pThis, IStream* pStm);
    public void Load(IStream* pStm);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Save(IMoniker* pThis, IStream* pStm, BOOL fClearDirty);
    public void Save(IStream* pStm, BOOL fClearDirty);
    internal void GetSizeMax(UInt64& pcbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSizeMax(IMoniker* pThis, UInt64* pcbSize);
    public void GetSizeMax(UInt64* pcbSize);
    internal void BindToObject(IBindCtx* pbc, IMoniker* pmkToLeft, Guid& riidResult, Void*& ppvResult);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindToObject(IMoniker* pThis, IBindCtx* pbc, IMoniker* pmkToLeft, Guid* riidResult, Void** ppvResult);
    public void BindToObject(IBindCtx* pbc, IMoniker* pmkToLeft, Guid* riidResult, Void** ppvResult);
    internal void BindToStorage(IBindCtx* pbc, IMoniker* pmkToLeft, Guid& riid, Void*& ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindToStorage(IMoniker* pThis, IBindCtx* pbc, IMoniker* pmkToLeft, Guid* riid, Void** ppvObj);
    public void BindToStorage(IBindCtx* pbc, IMoniker* pmkToLeft, Guid* riid, Void** ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reduce(IMoniker* pThis, IBindCtx* pbc, UInt32 dwReduceHowFar, IMoniker** ppmkToLeft, IMoniker** ppmkReduced);
    public void Reduce(IBindCtx* pbc, UInt32 dwReduceHowFar, IMoniker** ppmkToLeft, IMoniker** ppmkReduced);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ComposeWith(IMoniker* pThis, IMoniker* pmkRight, BOOL fOnlyIfNotGeneric, IMoniker** ppmkComposite);
    public void ComposeWith(IMoniker* pmkRight, BOOL fOnlyIfNotGeneric, IMoniker** ppmkComposite);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Enum(IMoniker* pThis, BOOL fForward, IEnumMoniker** ppenumMoniker);
    public void Enum(BOOL fForward, IEnumMoniker** ppenumMoniker);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsEqual(IMoniker* pThis, IMoniker* pmkOtherMoniker);
    public void IsEqual(IMoniker* pmkOtherMoniker);
    internal void Hash(UInt32& pdwHash);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Hash(IMoniker* pThis, UInt32* pdwHash);
    public void Hash(UInt32* pdwHash);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsRunning(IMoniker* pThis, IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning);
    public void IsRunning(IBindCtx* pbc, IMoniker* pmkToLeft, IMoniker* pmkNewlyRunning);
    internal void GetTimeOfLastChange(IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME& pFileTime);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTimeOfLastChange(IMoniker* pThis, IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME* pFileTime);
    public void GetTimeOfLastChange(IBindCtx* pbc, IMoniker* pmkToLeft, FILETIME* pFileTime);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Inverse(IMoniker* pThis, IMoniker** ppmk);
    public void Inverse(IMoniker** ppmk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CommonPrefixWith(IMoniker* pThis, IMoniker* pmkOther, IMoniker** ppmkPrefix);
    public void CommonPrefixWith(IMoniker* pmkOther, IMoniker** ppmkPrefix);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RelativePathTo(IMoniker* pThis, IMoniker* pmkOther, IMoniker** ppmkRelPath);
    public void RelativePathTo(IMoniker* pmkOther, IMoniker** ppmkRelPath);
    internal void GetDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR& ppszDisplayName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDisplayName(IMoniker* pThis, IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR* ppszDisplayName);
    public void GetDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR* ppszDisplayName);
    internal void ParseDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR pszDisplayName, UInt32& pchEaten, IMoniker** ppmkOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ParseDisplayName(IMoniker* pThis, IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    public void ParseDisplayName(IBindCtx* pbc, IMoniker* pmkToLeft, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    internal void IsSystemMoniker(UInt32& pdwMksys);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsSystemMoniker(IMoniker* pThis, UInt32* pdwMksys);
    public void IsSystemMoniker(UInt32* pdwMksys);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.IMPLTYPEFLAGS : Enum {
    public int value__;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULT;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FSOURCE;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FRESTRICTED;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULTVTABLE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.INTERFACEINFO : ValueType {
    internal IUnknown* pUnk;
    internal Guid iid;
    internal ushort wMethod;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.INVOKEKIND : Enum {
    public int value__;
    public static INVOKEKIND INVOKE_FUNC;
    public static INVOKEKIND INVOKE_PROPERTYGET;
    public static INVOKEKIND INVOKE_PROPERTYPUT;
    public static INVOKEKIND INVOKE_PROPERTYPUTREF;
}
[GuidAttribute("0000010C-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IPersist : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPersist();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetClassID(Guid& pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassID(IPersist* pThis, Guid* pClassID);
    public void GetClassID(Guid* pClassID);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000109-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IPersistStream : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPersistStream();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetClassID(Guid& pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassID(IPersistStream* pThis, Guid* pClassID);
    public void GetClassID(Guid* pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsDirty(IPersistStream* pThis);
    public HRESULT IsDirty();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Load(IPersistStream* pThis, IStream* pStm);
    public void Load(IStream* pStm);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Save(IPersistStream* pThis, IStream* pStm, BOOL fClearDirty);
    public void Save(IStream* pStm, BOOL fClearDirty);
    internal void GetSizeMax(UInt64& pcbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSizeMax(IPersistStream* pThis, UInt64* pcbSize);
    public void GetSizeMax(UInt64* pcbSize);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("7FD52380-4E07-101B-AE2D-08002B2EC713")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IPersistStreamInit : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPersistStreamInit();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetClassID(Guid& pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassID(IPersistStreamInit* pThis, Guid* pClassID);
    public void GetClassID(Guid* pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsDirty(IPersistStreamInit* pThis);
    public HRESULT IsDirty();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Load(IPersistStreamInit* pThis, IStream* pStm);
    public void Load(IStream* pStm);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Save(IPersistStreamInit* pThis, IStream* pStm, BOOL fClearDirty);
    public void Save(IStream* pStm, BOOL fClearDirty);
    internal void GetSizeMax(UInt64& pCbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSizeMax(IPersistStreamInit* pThis, UInt64* pCbSize);
    public void GetSizeMax(UInt64* pCbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InitNew(IPersistStreamInit* pThis);
    public void InitNew();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000010-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IRunningObjectTable : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IRunningObjectTable();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Register(ROT_FLAGS grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, UInt32& pdwRegister);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Register(IRunningObjectTable* pThis, ROT_FLAGS grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, UInt32* pdwRegister);
    public void Register(ROT_FLAGS grfFlags, IUnknown* punkObject, IMoniker* pmkObjectName, UInt32* pdwRegister);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Revoke(IRunningObjectTable* pThis, UInt32 dwRegister);
    public void Revoke(UInt32 dwRegister);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsRunning(IRunningObjectTable* pThis, IMoniker* pmkObjectName);
    public void IsRunning(IMoniker* pmkObjectName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetObject(IRunningObjectTable* pThis, IMoniker* pmkObjectName, IUnknown** ppunkObject);
    public void GetObject(IMoniker* pmkObjectName, IUnknown** ppunkObject);
    internal void NoteChangeTime(UInt32 dwRegister, FILETIME& pfiletime);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT NoteChangeTime(IRunningObjectTable* pThis, UInt32 dwRegister, FILETIME* pfiletime);
    public void NoteChangeTime(UInt32 dwRegister, FILETIME* pfiletime);
    internal void GetTimeOfLastChange(IMoniker* pmkObjectName, FILETIME& pfiletime);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTimeOfLastChange(IRunningObjectTable* pThis, IMoniker* pmkObjectName, FILETIME* pfiletime);
    public void GetTimeOfLastChange(IMoniker* pmkObjectName, FILETIME* pfiletime);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumRunning(IRunningObjectTable* pThis, IEnumMoniker** ppenumMoniker);
    public void EnumRunning(IEnumMoniker** ppenumMoniker);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0C733A30-2A1C-11CE-ADE5-00AA0044773D")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.ISequentialStream : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ISequentialStream();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Read(ISequentialStream* pThis, Void* pv, UInt32 cb, UInt32* pcbRead);
    public HRESULT Read(Void* pv, UInt32 cb, UInt32* pcbRead);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Write(ISequentialStream* pThis, Void* pv, UInt32 cb, UInt32* pcbWritten);
    public HRESULT Write(Void* pv, UInt32 cb, UInt32* pcbWritten);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("6D5140C1-7436-11CE-8034-00AA006009FA")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IServiceProvider : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IServiceProvider();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT QueryService(Guid& guidService, Guid& riid, Void*& ppvObject);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryService(IServiceProvider* pThis, Guid* guidService, Guid* riid, Void** ppvObject);
    public HRESULT QueryService(Guid* guidService, Guid* riid, Void** ppvObject);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000000C-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IStream : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IStream();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Read(IStream* pThis, Void* pv, UInt32 cb, UInt32* pcbRead);
    public HRESULT Read(Void* pv, UInt32 cb, UInt32* pcbRead);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Write(IStream* pThis, Void* pv, UInt32 cb, UInt32* pcbWritten);
    public HRESULT Write(Void* pv, UInt32 cb, UInt32* pcbWritten);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Seek(IStream* pThis, long dlibMove, SeekOrigin dwOrigin, UInt64* plibNewPosition);
    public void Seek(long dlibMove, SeekOrigin dwOrigin, UInt64* plibNewPosition);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetSize(IStream* pThis, ulong libNewSize);
    public void SetSize(ulong libNewSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CopyTo(IStream* pThis, IStream* pstm, ulong cb, UInt64* pcbRead, UInt64* pcbWritten);
    public void CopyTo(IStream* pstm, ulong cb, UInt64* pcbRead, UInt64* pcbWritten);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Commit(IStream* pThis, UInt32 grfCommitFlags);
    public void Commit(UInt32 grfCommitFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Revert(IStream* pThis);
    public void Revert();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT LockRegion(IStream* pThis, ulong libOffset, ulong cb, UInt32 dwLockType);
    public void LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT UnlockRegion(IStream* pThis, ulong libOffset, ulong cb, UInt32 dwLockType);
    public void UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    internal void Stat(STATSTG& pstatstg, UInt32 grfStatFlag);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Stat(IStream* pThis, STATSTG* pstatstg, UInt32 grfStatFlag);
    public void Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IStream* pThis, IStream** ppstm);
    public void Clone(IStream** ppstm);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("DF0B3D60-548F-101B-8E65-08002B2BD119")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.ISupportErrorInfo : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ISupportErrorInfo();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT InterfaceSupportsErrorInfo(Guid& riid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InterfaceSupportsErrorInfo(ISupportErrorInfo* pThis, Guid* riid);
    public HRESULT InterfaceSupportsErrorInfo(Guid* riid);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00020403-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.ITypeComp : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ITypeComp();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Bind(PWSTR szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, DESCKIND& pDescKind, BINDPTR& pBindPtr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Bind(ITypeComp* pThis, PWSTR szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, DESCKIND* pDescKind, BINDPTR* pBindPtr);
    public void Bind(PWSTR szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, DESCKIND* pDescKind, BINDPTR* pBindPtr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindType(ITypeComp* pThis, PWSTR szName, UInt32 lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp);
    public void BindType(PWSTR szName, UInt32 lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00020401-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.ITypeInfo : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ITypeInfo();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetTypeAttr(TYPEATTR*& ppTypeAttr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeAttr(ITypeInfo* pThis, TYPEATTR** ppTypeAttr);
    public HRESULT GetTypeAttr(TYPEATTR** ppTypeAttr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeComp(ITypeInfo* pThis, ITypeComp** ppTComp);
    public HRESULT GetTypeComp(ITypeComp** ppTComp);
    internal HRESULT GetFuncDesc(UInt32 index, FUNCDESC*& ppFuncDesc);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFuncDesc(ITypeInfo* pThis, UInt32 index, FUNCDESC** ppFuncDesc);
    public HRESULT GetFuncDesc(UInt32 index, FUNCDESC** ppFuncDesc);
    internal HRESULT GetVarDesc(UInt32 index, VARDESC*& ppVarDesc);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetVarDesc(ITypeInfo* pThis, UInt32 index, VARDESC** ppVarDesc);
    public HRESULT GetVarDesc(UInt32 index, VARDESC** ppVarDesc);
    internal HRESULT GetNames(int memid, BSTR* rgBstrNames, UInt32 cMaxNames, UInt32& pcNames);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetNames(ITypeInfo* pThis, int memid, BSTR* rgBstrNames, UInt32 cMaxNames, UInt32* pcNames);
    public HRESULT GetNames(int memid, BSTR* rgBstrNames, UInt32 cMaxNames, UInt32* pcNames);
    internal void GetRefTypeOfImplType(UInt32 index, UInt32& pRefType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetRefTypeOfImplType(ITypeInfo* pThis, UInt32 index, UInt32* pRefType);
    public void GetRefTypeOfImplType(UInt32 index, UInt32* pRefType);
    internal void GetImplTypeFlags(UInt32 index, IMPLTYPEFLAGS& pImplTypeFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetImplTypeFlags(ITypeInfo* pThis, UInt32 index, IMPLTYPEFLAGS* pImplTypeFlags);
    public void GetImplTypeFlags(UInt32 index, IMPLTYPEFLAGS* pImplTypeFlags);
    internal void GetIDsOfNames(Span`1<PWSTR> rgszNames, Span`1<int> pMemId);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetIDsOfNames(ITypeInfo* pThis, PWSTR* rgszNames, UInt32 cNames, Int32* pMemId);
    public void GetIDsOfNames(PWSTR* rgszNames, UInt32 cNames, Int32* pMemId);
    internal void Invoke(Void* pvInstance, int memid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT& pVarResult, EXCEPINFO& pExcepInfo, UInt32& puArgErr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Invoke(ITypeInfo* pThis, Void* pvInstance, int memid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public void Invoke(Void* pvInstance, int memid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    internal HRESULT GetDocumentation(int memid, BSTR* pBstrName, BSTR* pBstrDocString, UInt32& pdwHelpContext, BSTR* pBstrHelpFile);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDocumentation(ITypeInfo* pThis, int memid, BSTR* pBstrName, BSTR* pBstrDocString, UInt32* pdwHelpContext, BSTR* pBstrHelpFile);
    public HRESULT GetDocumentation(int memid, BSTR* pBstrName, BSTR* pBstrDocString, UInt32* pdwHelpContext, BSTR* pBstrHelpFile);
    internal void GetDllEntry(int memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, UInt16& pwOrdinal);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDllEntry(ITypeInfo* pThis, int memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, UInt16* pwOrdinal);
    public void GetDllEntry(int memid, INVOKEKIND invKind, BSTR* pBstrDllName, BSTR* pBstrName, UInt16* pwOrdinal);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetRefTypeInfo(ITypeInfo* pThis, UInt32 hRefType, ITypeInfo** ppTInfo);
    public HRESULT GetRefTypeInfo(UInt32 hRefType, ITypeInfo** ppTInfo);
    internal void AddressOfMember(int memid, INVOKEKIND invKind, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddressOfMember(ITypeInfo* pThis, int memid, INVOKEKIND invKind, Void** ppv);
    public void AddressOfMember(int memid, INVOKEKIND invKind, Void** ppv);
    internal void CreateInstance(IUnknown* pUnkOuter, Guid& riid, Void*& ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateInstance(ITypeInfo* pThis, IUnknown* pUnkOuter, Guid* riid, Void** ppvObj);
    public void CreateInstance(IUnknown* pUnkOuter, Guid* riid, Void** ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMops(ITypeInfo* pThis, int memid, BSTR* pBstrMops);
    public void GetMops(int memid, BSTR* pBstrMops);
    internal void GetContainingTypeLib(ITypeLib** ppTLib, UInt32& pIndex);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetContainingTypeLib(ITypeInfo* pThis, ITypeLib** ppTLib, UInt32* pIndex);
    public void GetContainingTypeLib(ITypeLib** ppTLib, UInt32* pIndex);
    internal void ReleaseTypeAttr(TYPEATTR& pTypeAttr);
    [UnmanagedCallersOnlyAttribute]
private static void ReleaseTypeAttr(ITypeInfo* pThis, TYPEATTR* pTypeAttr);
    public void ReleaseTypeAttr(TYPEATTR* pTypeAttr);
    internal void ReleaseFuncDesc(FUNCDESC& pFuncDesc);
    [UnmanagedCallersOnlyAttribute]
private static void ReleaseFuncDesc(ITypeInfo* pThis, FUNCDESC* pFuncDesc);
    public void ReleaseFuncDesc(FUNCDESC* pFuncDesc);
    internal void ReleaseVarDesc(VARDESC& pVarDesc);
    [UnmanagedCallersOnlyAttribute]
private static void ReleaseVarDesc(ITypeInfo* pThis, VARDESC* pVarDesc);
    public void ReleaseVarDesc(VARDESC* pVarDesc);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00020402-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.ITypeLib : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ITypeLib();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static UInt32 GetTypeInfoCount(ITypeLib* pThis);
    public UInt32 GetTypeInfoCount();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeInfo(ITypeLib* pThis, UInt32 index, ITypeInfo** ppTInfo);
    public void GetTypeInfo(UInt32 index, ITypeInfo** ppTInfo);
    internal void GetTypeInfoType(UInt32 index, TYPEKIND& pTKind);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeInfoType(ITypeLib* pThis, UInt32 index, TYPEKIND* pTKind);
    public void GetTypeInfoType(UInt32 index, TYPEKIND* pTKind);
    internal HRESULT GetTypeInfoOfGuid(Guid& guid, ITypeInfo** ppTinfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeInfoOfGuid(ITypeLib* pThis, Guid* guid, ITypeInfo** ppTinfo);
    public HRESULT GetTypeInfoOfGuid(Guid* guid, ITypeInfo** ppTinfo);
    internal HRESULT GetLibAttr(TLIBATTR*& ppTLibAttr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetLibAttr(ITypeLib* pThis, TLIBATTR** ppTLibAttr);
    public HRESULT GetLibAttr(TLIBATTR** ppTLibAttr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeComp(ITypeLib* pThis, ITypeComp** ppTComp);
    public void GetTypeComp(ITypeComp** ppTComp);
    internal void GetDocumentation(int index, BSTR* pBstrName, BSTR* pBstrDocString, UInt32& pdwHelpContext, BSTR* pBstrHelpFile);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDocumentation(ITypeLib* pThis, int index, BSTR* pBstrName, BSTR* pBstrDocString, UInt32* pdwHelpContext, BSTR* pBstrHelpFile);
    public void GetDocumentation(int index, BSTR* pBstrName, BSTR* pBstrDocString, UInt32* pdwHelpContext, BSTR* pBstrHelpFile);
    internal void IsName(Span`1& szNameBuf, UInt32 lHashVal, BOOL& pfName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsName(ITypeLib* pThis, PWSTR szNameBuf, UInt32 lHashVal, BOOL* pfName);
    public void IsName(PWSTR szNameBuf, UInt32 lHashVal, BOOL* pfName);
    internal void FindName(Span`1& szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, UInt16& pcFound);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT FindName(ITypeLib* pThis, PWSTR szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, UInt16* pcFound);
    public void FindName(PWSTR szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, UInt16* pcFound);
    internal void ReleaseTLibAttr(TLIBATTR& pTLibAttr);
    [UnmanagedCallersOnlyAttribute]
private static void ReleaseTLibAttr(ITypeLib* pThis, TLIBATTR* pTLibAttr);
    public void ReleaseTLibAttr(TLIBATTR* pTLibAttr);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000000-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.IUnknown : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IUnknown();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
internal interface Windows.Win32.System.Com.IWrapperInitialize {
    public abstract virtual void OnInitialized(IUnknown* unknown);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.LOCKTYPE : Enum {
    public int value__;
    public static LOCKTYPE LOCK_WRITE;
    public static LOCKTYPE LOCK_EXCLUSIVE;
    public static LOCKTYPE LOCK_ONLYONCE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.ROT_FLAGS : Enum {
    public UInt32 value__;
    public static ROT_FLAGS ROTFLAGS_REGISTRATIONKEEPSALIVE;
    public static ROT_FLAGS ROTFLAGS_ALLOWANYCLIENT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.SAFEARRAY : ValueType {
    internal ushort cDims;
    internal ADVANCED_FEATURE_FLAGS fFeatures;
    internal UInt32 cbElements;
    internal UInt32 cLocks;
    internal Void* pvData;
    internal __SAFEARRAYBOUND_1 rgsabound;
    public ReadOnlySpan`1<SAFEARRAYBOUND> Bounds { get; }
    public VARENUM VarType { get; }
    public ReadOnlySpan`1<SAFEARRAYBOUND> get_Bounds();
    public VARENUM get_VarType();
    public T GetValue(Span`1<int> indices);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.SAFEARRAYBOUND : ValueType {
    internal UInt32 cElements;
    internal int lLbound;
}
internal abstract class Windows.Win32.System.Com.StandardDispatch : object {
    private Guid _typeLibrary;
    private ushort _majorVersion;
    private ushort _minorVersion;
    private Guid _interfaceId;
    [NullableAttribute("2")]
private AgileComPointer`1<IDispatch> _standardDispatch;
    private static Guid s_stdole;
    private ComScope`1<IDispatch> Dispatch { get; }
    public StandardDispatch(Guid typeLibrary, ushort majorVersion, ushort minorVersion, Guid interfaceId);
    private static StandardDispatch();
    private sealed virtual override void Windows.Win32.System.Com.IWrapperInitialize.OnInitialized(IUnknown* unknown);
    private ComScope`1<IDispatch> get_Dispatch();
    private sealed virtual override HRESULT Windows.Win32.System.Com.IDispatch.Interface.GetTypeInfoCount(UInt32* pctinfo);
    private sealed virtual override HRESULT Windows.Win32.System.Com.IDispatch.Interface.GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    private sealed virtual override HRESULT Windows.Win32.System.Com.IDispatch.Interface.GetIDsOfNames(Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    private sealed virtual override HRESULT Windows.Win32.System.Com.IDispatch.Interface.Invoke(int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* pArgErr);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.GetDispID(BSTR bstrName, UInt32 grfdex, Int32* pid);
    protected virtual HRESULT GetDispID(BSTR bstrName, UInt32 grfdex, Int32* pid);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.GetMemberName(int id, BSTR* pbstrName);
    protected virtual HRESULT GetMemberName(int id, BSTR* pbstrName);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.GetNextDispID(UInt32 grfdex, int id, Int32* pid);
    protected virtual HRESULT GetNextDispID(UInt32 grfdex, int id, Int32* pid);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.InvokeEx(int id, UInt32 lcid, ushort wFlags, DISPPARAMS* pdp, VARIANT* pvarRes, EXCEPINFO* pei, IServiceProvider* pspCaller);
    protected virtual HRESULT Invoke(int dispId, UInt32 lcid, DISPATCH_FLAGS flags, DISPPARAMS* parameters, VARIANT* result, EXCEPINFO* exceptionInfo, UInt32* argumentError);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.GetMemberProperties(int id, UInt32 grfdexFetch, FDEX_PROP_FLAGS* pgrfdex);
    protected virtual HRESULT GetMemberProperties(int dispId, FDEX_PROP_FLAGS& properties);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.DeleteMemberByName(BSTR bstrName, UInt32 grfdex);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.DeleteMemberByDispID(int id);
    private sealed virtual override HRESULT Windows.Win32.System.Ole.IDispatchEx.Interface.GetNameSpaceParent(IUnknown** ppunk);
    protected virtual void Dispose(bool disposing);
    private static HRESULT MapDotNetHRESULTs(HRESULT hr);
    public sealed virtual void Dispose();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.STATDATA : ValueType {
    internal FORMATETC formatetc;
    internal UInt32 advf;
    internal IAdviseSink* pAdvSink;
    internal UInt32 dwConnection;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.STATFLAG : Enum {
    public int value__;
    public static STATFLAG STATFLAG_DEFAULT;
    public static STATFLAG STATFLAG_NONAME;
    public static STATFLAG STATFLAG_NOOPEN;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.STATSTG : ValueType {
    internal PWSTR pwcsName;
    internal UInt32 type;
    internal ulong cbSize;
    internal FILETIME mtime;
    internal FILETIME ctime;
    internal FILETIME atime;
    internal STGM grfMode;
    private UInt32 _grfLocksSupported;
    internal Guid clsid;
    internal UInt32 grfStateBits;
    internal UInt32 reserved;
    internal LOCKTYPE grfLocksSupported { get; internal set; }
    internal LOCKTYPE get_grfLocksSupported();
    internal void set_grfLocksSupported(LOCKTYPE value);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.STGC : Enum {
    public int value__;
    public static STGC STGC_DEFAULT;
    public static STGC STGC_OVERWRITE;
    public static STGC STGC_ONLYIFCURRENT;
    public static STGC STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE;
    public static STGC STGC_CONSOLIDATE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.STGM : Enum {
    public UInt32 value__;
    public static STGM STGM_DIRECT;
    public static STGM STGM_TRANSACTED;
    public static STGM STGM_SIMPLE;
    public static STGM STGM_READ;
    public static STGM STGM_WRITE;
    public static STGM STGM_READWRITE;
    public static STGM STGM_SHARE_DENY_NONE;
    public static STGM STGM_SHARE_DENY_READ;
    public static STGM STGM_SHARE_DENY_WRITE;
    public static STGM STGM_SHARE_EXCLUSIVE;
    public static STGM STGM_PRIORITY;
    public static STGM STGM_DELETEONRELEASE;
    public static STGM STGM_NOSCRATCH;
    public static STGM STGM_CREATE;
    public static STGM STGM_CONVERT;
    public static STGM STGM_FAILIFTHERE;
    public static STGM STGM_NOSNAPSHOT;
    public static STGM STGM_DIRECT_SWMR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.STGMEDIUM : ValueType {
    private UInt32 _tymed;
    internal _u_e__Union u;
    internal IUnknown* pUnkForRelease;
    [UnscopedRefAttribute]
public HGLOBAL& hGlobal { get; }
    internal TYMED tymed { get; internal set; }
    public HGLOBAL& get_hGlobal();
    public static STGMEDIUM op_Explicit(STGMEDIUM comTypeStg);
    public static STGMEDIUM op_Explicit(STGMEDIUM stg);
    internal TYMED get_tymed();
    internal void set_tymed(TYMED value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.STGTY : Enum {
    public int value__;
    public static STGTY STGTY_STORAGE;
    public static STGTY STGTY_STREAM;
    public static STGTY STGTY_LOCKBYTES;
    public static STGTY STGTY_PROPERTY;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.BSTRBLOB : ValueType {
    internal UInt32 cbSize;
    internal Byte* pData;
}
internal class Windows.Win32.System.Com.StructuredStorage.CA : ValueType {
    public UInt32 cElems;
    public Void* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CABOOL : ValueType {
    internal UInt32 cElems;
    internal VARIANT_BOOL* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CABSTR : ValueType {
    internal UInt32 cElems;
    internal BSTR* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CABSTRBLOB : ValueType {
    internal UInt32 cElems;
    internal BSTRBLOB* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAC : ValueType {
    internal UInt32 cElems;
    internal PSTR pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CACLIPDATA : ValueType {
    internal UInt32 cElems;
    internal CLIPDATA* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CACLSID : ValueType {
    internal UInt32 cElems;
    internal Guid* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CACY : ValueType {
    internal UInt32 cElems;
    internal CY* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CADATE : ValueType {
    internal UInt32 cElems;
    internal Double* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CADBL : ValueType {
    internal UInt32 cElems;
    internal Double* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAFILETIME : ValueType {
    internal UInt32 cElems;
    internal FILETIME* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAFLT : ValueType {
    internal UInt32 cElems;
    internal Single* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAH : ValueType {
    internal UInt32 cElems;
    internal Int64* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAI : ValueType {
    internal UInt32 cElems;
    internal Int16* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAL : ValueType {
    internal UInt32 cElems;
    internal Int32* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CALPSTR : ValueType {
    internal UInt32 cElems;
    internal PSTR* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CALPWSTR : ValueType {
    internal UInt32 cElems;
    internal PWSTR* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAPROPVARIANT : ValueType {
    internal UInt32 cElems;
    internal PROPVARIANT* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CASCODE : ValueType {
    internal UInt32 cElems;
    internal Int32* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAUB : ValueType {
    internal UInt32 cElems;
    internal Byte* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAUH : ValueType {
    internal UInt32 cElems;
    internal UInt64* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAUI : ValueType {
    internal UInt32 cElems;
    internal UInt16* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CAUL : ValueType {
    internal UInt32 cElems;
    internal UInt32* pElems;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.CLIPDATA : ValueType {
    internal UInt32 cbSize;
    internal int ulClipFmt;
    internal Byte* pClipData;
}
[GuidAttribute("0000000D-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.IEnumSTATSTG : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumSTATSTG();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Next(Span`1<STATSTG> rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumSTATSTG* pThis, UInt32 celt, STATSTG* rgelt, UInt32* pceltFetched);
    public void Next(UInt32 celt, STATSTG* rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumSTATSTG* pThis, UInt32 celt);
    public void Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumSTATSTG* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumSTATSTG* pThis, IEnumSTATSTG** ppenum);
    public void Clone(IEnumSTATSTG** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000000A-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.ILockBytes : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ILockBytes();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ReadAt(ILockBytes* pThis, ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbRead);
    public void ReadAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbRead);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT WriteAt(ILockBytes* pThis, ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbWritten);
    public void WriteAt(ulong ulOffset, Void* pv, UInt32 cb, UInt32* pcbWritten);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Flush(ILockBytes* pThis);
    public void Flush();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetSize(ILockBytes* pThis, ulong cb);
    public void SetSize(ulong cb);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT LockRegion(ILockBytes* pThis, ulong libOffset, ulong cb, UInt32 dwLockType);
    public void LockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT UnlockRegion(ILockBytes* pThis, ulong libOffset, ulong cb, UInt32 dwLockType);
    public void UnlockRegion(ulong libOffset, ulong cb, UInt32 dwLockType);
    internal void Stat(STATSTG& pstatstg, UInt32 grfStatFlag);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Stat(ILockBytes* pThis, STATSTG* pstatstg, UInt32 grfStatFlag);
    public void Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000010A-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.IPersistStorage : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPersistStorage();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetClassID(Guid& pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassID(IPersistStorage* pThis, Guid* pClassID);
    public void GetClassID(Guid* pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsDirty(IPersistStorage* pThis);
    public HRESULT IsDirty();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InitNew(IPersistStorage* pThis, IStorage* pStg);
    public void InitNew(IStorage* pStg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Load(IPersistStorage* pThis, IStorage* pStg);
    public void Load(IStorage* pStg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Save(IPersistStorage* pThis, IStorage* pStgSave, BOOL fSameAsLoad);
    public void Save(IStorage* pStgSave, BOOL fSameAsLoad);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SaveCompleted(IPersistStorage* pThis, IStorage* pStgNew);
    public void SaveCompleted(IStorage* pStgNew);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT HandsOffStorage(IPersistStorage* pThis);
    public void HandsOffStorage();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("55272A00-42CB-11CE-8135-00AA004BB851")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.IPropertyBag : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPropertyBag();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT Read(string pszPropName, VARIANT& pVar, IErrorLog* pErrorLog);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Read(IPropertyBag* pThis, PCWSTR pszPropName, VARIANT* pVar, IErrorLog* pErrorLog);
    public HRESULT Read(PCWSTR pszPropName, VARIANT* pVar, IErrorLog* pErrorLog);
    internal void Write(string pszPropName, VARIANT& pVar);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Write(IPropertyBag* pThis, PCWSTR pszPropName, VARIANT* pVar);
    public void Write(PCWSTR pszPropName, VARIANT* pVar);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000000B-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.IStorage : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IStorage();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT CreateStream(string pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStream** ppstm);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateStream(IStorage* pThis, PCWSTR pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStream** ppstm);
    public HRESULT CreateStream(PCWSTR pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStream** ppstm);
    internal HRESULT OpenStream(string pwcsName, STGM grfMode, UInt32 reserved2, IStream** ppstm);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OpenStream(IStorage* pThis, PCWSTR pwcsName, Void* reserved1, STGM grfMode, UInt32 reserved2, IStream** ppstm);
    public HRESULT OpenStream(PCWSTR pwcsName, Void* reserved1, STGM grfMode, UInt32 reserved2, IStream** ppstm);
    internal void CreateStorage(string pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStorage** ppstg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateStorage(IStorage* pThis, PCWSTR pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStorage** ppstg);
    public void CreateStorage(PCWSTR pwcsName, STGM grfMode, UInt32 reserved1, UInt32 reserved2, IStorage** ppstg);
    internal void OpenStorage(string pwcsName, IStorage* pstgPriority, STGM grfMode, UInt16*& snbExclude, UInt32 reserved, IStorage** ppstg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OpenStorage(IStorage* pThis, PCWSTR pwcsName, IStorage* pstgPriority, STGM grfMode, UInt16** snbExclude, UInt32 reserved, IStorage** ppstg);
    public void OpenStorage(PCWSTR pwcsName, IStorage* pstgPriority, STGM grfMode, UInt16** snbExclude, UInt32 reserved, IStorage** ppstg);
    internal void CopyTo(ReadOnlySpan`1<Guid> rgiidExclude, UInt16** snbExclude, IStorage* pstgDest);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CopyTo(IStorage* pThis, UInt32 ciidExclude, Guid* rgiidExclude, UInt16** snbExclude, IStorage* pstgDest);
    public void CopyTo(UInt32 ciidExclude, Guid* rgiidExclude, UInt16** snbExclude, IStorage* pstgDest);
    internal void MoveElementTo(string pwcsName, IStorage* pstgDest, string pwcsNewName, UInt32 grfFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT MoveElementTo(IStorage* pThis, PCWSTR pwcsName, IStorage* pstgDest, PCWSTR pwcsNewName, UInt32 grfFlags);
    public void MoveElementTo(PCWSTR pwcsName, IStorage* pstgDest, PCWSTR pwcsNewName, UInt32 grfFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Commit(IStorage* pThis, UInt32 grfCommitFlags);
    public void Commit(UInt32 grfCommitFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Revert(IStorage* pThis);
    public void Revert();
    internal void EnumElements(IEnumSTATSTG** ppenum);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumElements(IStorage* pThis, UInt32 reserved1, Void* reserved2, UInt32 reserved3, IEnumSTATSTG** ppenum);
    public void EnumElements(UInt32 reserved1, Void* reserved2, UInt32 reserved3, IEnumSTATSTG** ppenum);
    internal void DestroyElement(string pwcsName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DestroyElement(IStorage* pThis, PCWSTR pwcsName);
    public void DestroyElement(PCWSTR pwcsName);
    internal void RenameElement(string pwcsOldName, string pwcsNewName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RenameElement(IStorage* pThis, PCWSTR pwcsOldName, PCWSTR pwcsNewName);
    public void RenameElement(PCWSTR pwcsOldName, PCWSTR pwcsNewName);
    internal void SetElementTimes(string pwcsName, FILETIME& pctime, FILETIME& patime, FILETIME& pmtime);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetElementTimes(IStorage* pThis, PCWSTR pwcsName, FILETIME* pctime, FILETIME* patime, FILETIME* pmtime);
    public void SetElementTimes(PCWSTR pwcsName, FILETIME* pctime, FILETIME* patime, FILETIME* pmtime);
    internal void SetClass(Guid& clsid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetClass(IStorage* pThis, Guid* clsid);
    public void SetClass(Guid* clsid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetStateBits(IStorage* pThis, UInt32 grfStateBits, UInt32 grfMask);
    public void SetStateBits(UInt32 grfStateBits, UInt32 grfMask);
    internal void Stat(STATSTG& pstatstg, UInt32 grfStatFlag);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Stat(IStorage* pThis, STATSTG* pstatstg, UInt32 grfStatFlag);
    public void Stat(STATSTG* pstatstg, UInt32 grfStatFlag);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[ExtensionAttribute]
internal static class Windows.Win32.System.Com.StructuredStorage.PropertyBagExtensions : object {
    [ExtensionAttribute]
internal static HRESULT Read(Interface this, string pszPropName, VARIANT* pVar, IErrorLog* pErrorLog);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static HRESULT Write(Interface this, string pszPropName, VARIANT* pVar);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.PROPVARIANT : ValueType {
    internal _Anonymous_e__Union Anonymous;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.StructuredStorage.VERSIONEDSTREAM : ValueType {
    internal Guid guidVersion;
    internal IStream* pStream;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.SYSKIND : Enum {
    public int value__;
    public static SYSKIND SYS_WIN16;
    public static SYSKIND SYS_WIN32;
    public static SYSKIND SYS_MAC;
    public static SYSKIND SYS_WIN64;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.TLIBATTR : ValueType {
    internal Guid guid;
    internal UInt32 lcid;
    internal SYSKIND syskind;
    internal ushort wMajorVerNum;
    internal ushort wMinorVerNum;
    internal ushort wLibFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.TYMED : Enum {
    public int value__;
    public static TYMED TYMED_HGLOBAL;
    public static TYMED TYMED_FILE;
    public static TYMED TYMED_ISTREAM;
    public static TYMED TYMED_ISTORAGE;
    public static TYMED TYMED_GDI;
    public static TYMED TYMED_MFPICT;
    public static TYMED TYMED_ENHMF;
    public static TYMED TYMED_NULL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.TYPEATTR : ValueType {
    internal Guid guid;
    internal UInt32 lcid;
    internal UInt32 dwReserved;
    internal int memidConstructor;
    internal int memidDestructor;
    internal PWSTR lpstrSchema;
    internal UInt32 cbSizeInstance;
    internal TYPEKIND typekind;
    internal ushort cFuncs;
    internal ushort cVars;
    internal ushort cImplTypes;
    internal ushort cbSizeVft;
    internal ushort cbAlignment;
    internal ushort wTypeFlags;
    internal ushort wMajorVerNum;
    internal ushort wMinorVerNum;
    internal TYPEDESC tdescAlias;
    internal IDLDESC idldescType;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.TYPEDESC : ValueType {
    internal _Anonymous_e__Union Anonymous;
    internal VARENUM vt;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.TYPEKIND : Enum {
    public int value__;
    public static TYPEKIND TKIND_ENUM;
    public static TYPEKIND TKIND_RECORD;
    public static TYPEKIND TKIND_MODULE;
    public static TYPEKIND TKIND_INTERFACE;
    public static TYPEKIND TKIND_DISPATCH;
    public static TYPEKIND TKIND_COCLASS;
    public static TYPEKIND TKIND_ALIAS;
    public static TYPEKIND TKIND_UNION;
    public static TYPEKIND TKIND_MAX;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Com.VARDESC : ValueType {
    internal int memid;
    internal PWSTR lpstrSchema;
    internal _Anonymous_e__Union Anonymous;
    internal ELEMDESC elemdescVar;
    internal VARFLAGS wVarFlags;
    internal VARKIND varkind;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.VARFLAGS : Enum {
    public ushort value__;
    public static VARFLAGS VARFLAG_FREADONLY;
    public static VARFLAGS VARFLAG_FSOURCE;
    public static VARFLAGS VARFLAG_FBINDABLE;
    public static VARFLAGS VARFLAG_FREQUESTEDIT;
    public static VARFLAGS VARFLAG_FDISPLAYBIND;
    public static VARFLAGS VARFLAG_FDEFAULTBIND;
    public static VARFLAGS VARFLAG_FHIDDEN;
    public static VARFLAGS VARFLAG_FRESTRICTED;
    public static VARFLAGS VARFLAG_FDEFAULTCOLLELEM;
    public static VARFLAGS VARFLAG_FUIDEFAULT;
    public static VARFLAGS VARFLAG_FNONBROWSABLE;
    public static VARFLAGS VARFLAG_FREPLACEABLE;
    public static VARFLAGS VARFLAG_FIMMEDIATEBIND;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Com.VARKIND : Enum {
    public int value__;
    public static VARKIND VAR_PERINSTANCE;
    public static VARKIND VAR_STATIC;
    public static VARKIND VAR_CONST;
    public static VARKIND VAR_DISPATCH;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.DataExchange.COPYDATASTRUCT : ValueType {
    internal UIntPtr dwData;
    internal UInt32 cbData;
    internal Void* lpData;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Diagnostics.Debug.FORMAT_MESSAGE_OPTIONS : Enum {
    public UInt32 value__;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_ALLOCATE_BUFFER;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_ARGUMENT_ARRAY;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_FROM_HMODULE;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_FROM_STRING;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_FROM_SYSTEM;
    public static FORMAT_MESSAGE_OPTIONS FORMAT_MESSAGE_IGNORE_INSERTS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.LibraryLoader.LOAD_LIBRARY_FLAGS : Enum {
    public UInt32 value__;
    public static LOAD_LIBRARY_FLAGS DONT_RESOLVE_DLL_REFERENCES;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_AS_DATAFILE;
    public static LOAD_LIBRARY_FLAGS LOAD_WITH_ALTERED_SEARCH_PATH;
    public static LOAD_LIBRARY_FLAGS LOAD_IGNORE_CODE_AUTHZ_LEVEL;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_AS_IMAGE_RESOURCE;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_REQUIRE_SIGNED_TARGET;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SEARCH_APPLICATION_DIR;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SEARCH_USER_DIRS;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SEARCH_SYSTEM32;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SEARCH_DEFAULT_DIRS;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SAFE_CURRENT_DIRS;
    public static LOAD_LIBRARY_FLAGS LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Memory.GLOBAL_ALLOC_FLAGS : Enum {
    public UInt32 value__;
    public static GLOBAL_ALLOC_FLAGS GHND;
    public static GLOBAL_ALLOC_FLAGS GMEM_FIXED;
    public static GLOBAL_ALLOC_FLAGS GMEM_MOVEABLE;
    public static GLOBAL_ALLOC_FLAGS GMEM_ZEROINIT;
    public static GLOBAL_ALLOC_FLAGS GPTR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.ARRAYDESC : ValueType {
    internal TYPEDESC tdescElem;
    internal ushort cDims;
    internal __SAFEARRAYBOUND_1 rgbounds;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.CADWORD : ValueType {
    internal UInt32 cElems;
    internal UInt32* pElems;
    [NullableContextAttribute("1")]
public UInt32[] ConvertAndFree();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.CALPOLESTR : ValueType {
    internal UInt32 cElems;
    internal PWSTR* pElems;
    public String[] ConvertAndFree();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.CAUUID : ValueType {
    internal UInt32 cElems;
    internal Guid* pElems;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.Win32.System.Ole.ClassPropertyDispatchAdapter : object {
    private static int StartingDispId;
    private int _nextDispId;
    private WeakReference`1<object> _instance;
    [DynamicallyAccessedMembersAttribute("512")]
private Type _type;
    private Dictionary`2<int, DispatchEntry> _members;
    private Dictionary`2<string, int> _reverseLookup;
    [NullableAttribute("2")]
private ClassPropertyDispatchAdapter _priorAdapter;
    public ClassPropertyDispatchAdapter(object instance, ClassPropertyDispatchAdapter priorAdapter);
    private bool NameInUse(string name);
    private bool IdInUse(int id);
    private int GetUnusedDispId(int desiredId);
    public bool TryGetDispID(string name, Int32& dispId);
    [NullableContextAttribute("2")]
public bool TryGetMemberName(int dispId, String& name);
    [NullableContextAttribute("0")]
[UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2080:RequiresUnreferencedCode")]
public HRESULT Invoke(int dispId, UInt32 lcid, DISPATCH_FLAGS flags, DISPPARAMS* parameters, VARIANT* result);
    public bool TryGetNextDispId(int dispId, Int32& nextDispId);
    public bool TryGetMemberProperties(int dispId, FDEX_PROP_FLAGS& flags);
    private static ValueTuple`3<string, int, FDEX_PROP_FLAGS> GetPropertyInfo(PropertyInfo info);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.CLIPBOARD_FORMAT : Enum {
    public ushort value__;
    public static CLIPBOARD_FORMAT CF_TEXT;
    public static CLIPBOARD_FORMAT CF_BITMAP;
    public static CLIPBOARD_FORMAT CF_METAFILEPICT;
    public static CLIPBOARD_FORMAT CF_SYLK;
    public static CLIPBOARD_FORMAT CF_DIF;
    public static CLIPBOARD_FORMAT CF_TIFF;
    public static CLIPBOARD_FORMAT CF_OEMTEXT;
    public static CLIPBOARD_FORMAT CF_DIB;
    public static CLIPBOARD_FORMAT CF_PALETTE;
    public static CLIPBOARD_FORMAT CF_PENDATA;
    public static CLIPBOARD_FORMAT CF_RIFF;
    public static CLIPBOARD_FORMAT CF_WAVE;
    public static CLIPBOARD_FORMAT CF_UNICODETEXT;
    public static CLIPBOARD_FORMAT CF_ENHMETAFILE;
    public static CLIPBOARD_FORMAT CF_HDROP;
    public static CLIPBOARD_FORMAT CF_LOCALE;
    public static CLIPBOARD_FORMAT CF_DIBV5;
    public static CLIPBOARD_FORMAT CF_MAX;
    public static CLIPBOARD_FORMAT CF_OWNERDISPLAY;
    public static CLIPBOARD_FORMAT CF_DSPTEXT;
    public static CLIPBOARD_FORMAT CF_DSPBITMAP;
    public static CLIPBOARD_FORMAT CF_DSPMETAFILEPICT;
    public static CLIPBOARD_FORMAT CF_DSPENHMETAFILE;
    public static CLIPBOARD_FORMAT CF_PRIVATEFIRST;
    public static CLIPBOARD_FORMAT CF_PRIVATELAST;
    public static CLIPBOARD_FORMAT CF_GDIOBJFIRST;
    public static CLIPBOARD_FORMAT CF_GDIOBJLAST;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.CONTROLINFO : ValueType {
    internal UInt32 cb;
    internal HACCEL hAccel;
    internal ushort cAccel;
    private UInt32 _dwFlags;
    internal CTRLINFO dwFlags { get; internal set; }
    internal CTRLINFO get_dwFlags();
    internal void set_dwFlags(CTRLINFO value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.CTRLINFO : Enum {
    public int value__;
    public static CTRLINFO CTRLINFO_EATS_RETURN;
    public static CTRLINFO CTRLINFO_EATS_ESCAPE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.DROPEFFECT : Enum {
    public UInt32 value__;
    public static DROPEFFECT DROPEFFECT_NONE;
    public static DROPEFFECT DROPEFFECT_COPY;
    public static DROPEFFECT DROPEFFECT_MOVE;
    public static DROPEFFECT DROPEFFECT_LINK;
    public static DROPEFFECT DROPEFFECT_SCROLL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.ENUM_CONTROLS_WHICH_FLAGS : Enum {
    public UInt32 value__;
    public static ENUM_CONTROLS_WHICH_FLAGS GCW_WCH_SIBLING;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_CONTAINER;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_CONTAINED;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_ALL;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_FREVERSEDIR;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_FONLYAFTER;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_FONLYBEFORE;
    public static ENUM_CONTROLS_WHICH_FLAGS GC_WCH_FSELECTED;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.FDEX_PROP_FLAGS : Enum {
    public UInt32 value__;
    public static FDEX_PROP_FLAGS fdexPropCanGet;
    public static FDEX_PROP_FLAGS fdexPropCannotGet;
    public static FDEX_PROP_FLAGS fdexPropCanPut;
    public static FDEX_PROP_FLAGS fdexPropCannotPut;
    public static FDEX_PROP_FLAGS fdexPropCanPutRef;
    public static FDEX_PROP_FLAGS fdexPropCannotPutRef;
    public static FDEX_PROP_FLAGS fdexPropNoSideEffects;
    public static FDEX_PROP_FLAGS fdexPropDynamicType;
    public static FDEX_PROP_FLAGS fdexPropCanCall;
    public static FDEX_PROP_FLAGS fdexPropCannotCall;
    public static FDEX_PROP_FLAGS fdexPropCanConstruct;
    public static FDEX_PROP_FLAGS fdexPropCannotConstruct;
    public static FDEX_PROP_FLAGS fdexPropCanSourceEvents;
    public static FDEX_PROP_FLAGS fdexPropCannotSourceEvents;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.FONTDESC : ValueType {
    internal UInt32 cbSizeofstruct;
    internal PWSTR lpstrName;
    internal CY cySize;
    internal short sWeight;
    internal short sCharset;
    internal BOOL fItalic;
    internal BOOL fUnderline;
    internal BOOL fStrikethrough;
}
[GuidAttribute("3AF24290-0C96-11CE-A0CF-00AA00600AB8")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IAdviseSinkEx : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IAdviseSinkEx();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void OnDataChange(FORMATETC& pFormatetc, STGMEDIUM& pStgmed);
    [UnmanagedCallersOnlyAttribute]
private static void OnDataChange(IAdviseSinkEx* pThis, FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
    public void OnDataChange(FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
    [UnmanagedCallersOnlyAttribute]
private static void OnViewChange(IAdviseSinkEx* pThis, UInt32 dwAspect, int lindex);
    public void OnViewChange(UInt32 dwAspect, int lindex);
    [UnmanagedCallersOnlyAttribute]
private static void OnRename(IAdviseSinkEx* pThis, IMoniker* pmk);
    public void OnRename(IMoniker* pmk);
    [UnmanagedCallersOnlyAttribute]
private static void OnSave(IAdviseSinkEx* pThis);
    public void OnSave();
    [UnmanagedCallersOnlyAttribute]
private static void OnClose(IAdviseSinkEx* pThis);
    public void OnClose();
    [UnmanagedCallersOnlyAttribute]
private static void OnViewStatusChange(IAdviseSinkEx* pThis, UInt32 dwViewStatus);
    public void OnViewStatusChange(UInt32 dwViewStatus);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B28F-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IClassFactory2 : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IClassFactory2();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT CreateInstance(IUnknown* pUnkOuter, Guid& riid, Void*& ppvObject);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateInstance(IClassFactory2* pThis, IUnknown* pUnkOuter, Guid* riid, Void** ppvObject);
    public HRESULT CreateInstance(IUnknown* pUnkOuter, Guid* riid, Void** ppvObject);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT LockServer(IClassFactory2* pThis, BOOL fLock);
    public HRESULT LockServer(BOOL fLock);
    internal HRESULT GetLicInfo(LICINFO& pLicInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetLicInfo(IClassFactory2* pThis, LICINFO* pLicInfo);
    public HRESULT GetLicInfo(LICINFO* pLicInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RequestLicKey(IClassFactory2* pThis, UInt32 dwReserved, BSTR* pBstrKey);
    public HRESULT RequestLicKey(UInt32 dwReserved, BSTR* pBstrKey);
    internal HRESULT CreateInstanceLic(IUnknown* pUnkOuter, Guid& riid, BSTR bstrKey, Void*& ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateInstanceLic(IClassFactory2* pThis, IUnknown* pUnkOuter, IUnknown* pUnkReserved, Guid* riid, BSTR bstrKey, Void** ppvObj);
    public HRESULT CreateInstanceLic(IUnknown* pUnkOuter, IUnknown* pUnkReserved, Guid* riid, BSTR bstrKey, Void** ppvObj);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("A6EF9860-C720-11D0-9337-00A0C90DCAA9")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IDispatchEx : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IDispatchEx();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetTypeInfoCount(UInt32& pctinfo);
    public HRESULT GetTypeInfoCount(UInt32* pctinfo);
    public HRESULT GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    internal HRESULT GetIDsOfNames(Guid& riid, Span`1<PWSTR> rgszNames, UInt32 lcid, Span`1<int> rgDispId);
    public HRESULT GetIDsOfNames(Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    internal HRESULT Invoke(int dispIdMember, Guid& riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public HRESULT Invoke(int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    internal HRESULT GetDispID(BSTR bstrName, UInt32 grfdex, Int32& pid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDispID(IDispatchEx* pThis, BSTR bstrName, UInt32 grfdex, Int32* pid);
    public HRESULT GetDispID(BSTR bstrName, UInt32 grfdex, Int32* pid);
    internal HRESULT InvokeEx(int id, UInt32 lcid, ushort wFlags, DISPPARAMS& pdp, VARIANT* pvarRes, EXCEPINFO* pei, IServiceProvider* pspCaller);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InvokeEx(IDispatchEx* pThis, int id, UInt32 lcid, ushort wFlags, DISPPARAMS* pdp, VARIANT* pvarRes, EXCEPINFO* pei, IServiceProvider* pspCaller);
    public HRESULT InvokeEx(int id, UInt32 lcid, ushort wFlags, DISPPARAMS* pdp, VARIANT* pvarRes, EXCEPINFO* pei, IServiceProvider* pspCaller);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DeleteMemberByName(IDispatchEx* pThis, BSTR bstrName, UInt32 grfdex);
    public void DeleteMemberByName(BSTR bstrName, UInt32 grfdex);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DeleteMemberByDispID(IDispatchEx* pThis, int id);
    public void DeleteMemberByDispID(int id);
    internal void GetMemberProperties(int id, UInt32 grfdexFetch, FDEX_PROP_FLAGS& pgrfdex);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMemberProperties(IDispatchEx* pThis, int id, UInt32 grfdexFetch, FDEX_PROP_FLAGS* pgrfdex);
    public void GetMemberProperties(int id, UInt32 grfdexFetch, FDEX_PROP_FLAGS* pgrfdex);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMemberName(IDispatchEx* pThis, int id, BSTR* pbstrName);
    public HRESULT GetMemberName(int id, BSTR* pbstrName);
    internal HRESULT GetNextDispID(UInt32 grfdex, int id, Int32& pid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetNextDispID(IDispatchEx* pThis, UInt32 grfdex, int id, Int32* pid);
    public HRESULT GetNextDispID(UInt32 grfdex, int id, Int32* pid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetNameSpaceParent(IDispatchEx* pThis, IUnknown** ppunk);
    public void GetNameSpaceParent(IUnknown** ppunk);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000121-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IDropSource : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IDropSource();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryContinueDrag(IDropSource* pThis, BOOL fEscapePressed, MODIFIERKEYS_FLAGS grfKeyState);
    public HRESULT QueryContinueDrag(BOOL fEscapePressed, MODIFIERKEYS_FLAGS grfKeyState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GiveFeedback(IDropSource* pThis, DROPEFFECT dwEffect);
    public HRESULT GiveFeedback(DROPEFFECT dwEffect);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000012B-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IDropSourceNotify : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IDropSourceNotify();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DragEnterTarget(IDropSourceNotify* pThis, HWND hwndTarget);
    public void DragEnterTarget(HWND hwndTarget);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DragLeaveTarget(IDropSourceNotify* pThis);
    public void DragLeaveTarget();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000122-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IDropTarget : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IDropTarget();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void DragEnter(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT& pdwEffect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DragEnter(IDropTarget* pThis, IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    public void DragEnter(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    internal void DragOver(MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT& pdwEffect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DragOver(IDropTarget* pThis, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    public void DragOver(MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DragLeave(IDropTarget* pThis);
    public void DragLeave();
    internal void Drop(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT& pdwEffect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Drop(IDropTarget* pThis, IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    public void Drop(IDataObject* pDataObj, MODIFIERKEYS_FLAGS grfKeyState, POINTL pt, DROPEFFECT* pdwEffect);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B3E7C340-EF97-11CE-9BC9-00AA00608E01")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IEnumOleUndoUnits : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumOleUndoUnits();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Next(UInt32 cElt, IOleUndoUnit** rgElt, UInt32& pcEltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumOleUndoUnits* pThis, UInt32 cElt, IOleUndoUnit** rgElt, UInt32* pcEltFetched);
    public void Next(UInt32 cElt, IOleUndoUnit** rgElt, UInt32* pcEltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumOleUndoUnits* pThis, UInt32 cElt);
    public void Skip(UInt32 cElt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumOleUndoUnits* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumOleUndoUnits* pThis, IEnumOleUndoUnits** ppEnum);
    public void Clone(IEnumOleUndoUnits** ppEnum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000104-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IEnumOLEVERB : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumOLEVERB();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT Next(Span`1<OLEVERB> rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumOLEVERB* pThis, UInt32 celt, OLEVERB* rgelt, UInt32* pceltFetched);
    public HRESULT Next(UInt32 celt, OLEVERB* rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumOLEVERB* pThis, UInt32 celt);
    public HRESULT Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumOLEVERB* pThis);
    public HRESULT Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumOLEVERB* pThis, IEnumOLEVERB** ppenum);
    public HRESULT Clone(IEnumOLEVERB** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00020404-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IEnumVARIANT : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumVARIANT();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT Next(Span`1<VARIANT> rgVar, UInt32& pCeltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumVARIANT* pThis, UInt32 celt, VARIANT* rgVar, UInt32* pCeltFetched);
    public HRESULT Next(UInt32 celt, VARIANT* rgVar, UInt32* pCeltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumVARIANT* pThis, UInt32 celt);
    public HRESULT Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumVARIANT* pThis);
    public HRESULT Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumVARIANT* pThis, IEnumVARIANT** ppEnum);
    public HRESULT Clone(IEnumVARIANT** ppEnum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("BEF6E002-A874-101A-8BBA-00AA00300CAB")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IFont : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    internal BSTR Name { get; internal set; }
    internal CY Size { get; internal set; }
    internal BOOL Bold { get; internal set; }
    internal BOOL Italic { get; internal set; }
    internal BOOL Underline { get; internal set; }
    internal BOOL Strikethrough { get; internal set; }
    internal short Weight { get; internal set; }
    internal short Charset { get; internal set; }
    internal HFONT hFont { get; }
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFont();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Name(IFont* pThis, BSTR* pName);
    internal BSTR get_Name();
    internal void set_Name(BSTR value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Name(IFont* pThis, BSTR name);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Size(IFont* pThis, CY* pSize);
    internal CY get_Size();
    internal void set_Size(CY value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Size(IFont* pThis, CY size);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Bold(IFont* pThis, BOOL* pBold);
    internal BOOL get_Bold();
    internal void set_Bold(BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Bold(IFont* pThis, BOOL bold);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Italic(IFont* pThis, BOOL* pItalic);
    internal BOOL get_Italic();
    internal void set_Italic(BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Italic(IFont* pThis, BOOL italic);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Underline(IFont* pThis, BOOL* pUnderline);
    internal BOOL get_Underline();
    internal void set_Underline(BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Underline(IFont* pThis, BOOL underline);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Strikethrough(IFont* pThis, BOOL* pStrikethrough);
    internal BOOL get_Strikethrough();
    internal void set_Strikethrough(BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Strikethrough(IFont* pThis, BOOL strikethrough);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Weight(IFont* pThis, Int16* pWeight);
    internal short get_Weight();
    internal void set_Weight(short value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Weight(IFont* pThis, short weight);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Charset(IFont* pThis, Int16* pCharset);
    internal short get_Charset();
    internal void set_Charset(short value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_Charset(IFont* pThis, short charset);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_hFont(IFont* pThis, HFONT* phFont);
    internal HFONT get_hFont();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IFont* pThis, IFont** ppFont);
    public void Clone(IFont** ppFont);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsEqual(IFont* pThis, IFont* pFontOther);
    public void IsEqual(IFont* pFontOther);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetRatio(IFont* pThis, int cyLogical, int cyHimetric);
    public void SetRatio(int cyLogical, int cyHimetric);
    internal void QueryTextMetrics(TEXTMETRICW& pTM);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryTextMetrics(IFont* pThis, TEXTMETRICW* pTM);
    public void QueryTextMetrics(TEXTMETRICW* pTM);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddRefHfont(IFont* pThis, HFONT hFont);
    public void AddRefHfont(HFONT hFont);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ReleaseHfont(IFont* pThis, HFONT hFont);
    public void ReleaseHfont(HFONT hFont);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetHdc(IFont* pThis, HDC hDC);
    public void SetHdc(HDC hDC);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("BEF6E003-A874-101A-8BBA-00AA00300CAB")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IFontDisp : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFontDisp();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetTypeInfoCount(UInt32& pctinfo);
    public void GetTypeInfoCount(UInt32* pctinfo);
    public void GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    internal void GetIDsOfNames(Guid& riid, Span`1<PWSTR> rgszNames, UInt32 lcid, Span`1<int> rgDispId);
    public void GetIDsOfNames(Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    internal void Invoke(int dispIdMember, Guid& riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public void Invoke(int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("8A701DA0-4FEB-101B-A82E-08002B2B2337")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IGetOleObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IGetOleObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetOleObject(Guid& riid, Void*& ppvObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetOleObject(IGetOleObject* pThis, Guid* riid, Void** ppvObj);
    public HRESULT GetOleObject(Guid* riid, Void** ppvObj);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("91733A60-3F4C-101B-A3F6-00AA0034E4E9")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IGetVBAObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IGetVBAObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetObject(Guid& riid, Void*& ppvObj, UInt32 dwReserved);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetObject(IGetVBAObject* pThis, Guid* riid, Void** ppvObj, UInt32 dwReserved);
    public void GetObject(Guid* riid, Void** ppvObj, UInt32 dwReserved);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000111-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleAdviseHolder : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleAdviseHolder();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT Advise(IAdviseSink* pAdvise, UInt32& pdwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Advise(IOleAdviseHolder* pThis, IAdviseSink* pAdvise, UInt32* pdwConnection);
    public HRESULT Advise(IAdviseSink* pAdvise, UInt32* pdwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unadvise(IOleAdviseHolder* pThis, UInt32 dwConnection);
    public HRESULT Unadvise(UInt32 dwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumAdvise(IOleAdviseHolder* pThis, IEnumSTATDATA** ppenumAdvise);
    public void EnumAdvise(IEnumSTATDATA** ppenumAdvise);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SendOnRename(IOleAdviseHolder* pThis, IMoniker* pmk);
    public void SendOnRename(IMoniker* pmk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SendOnSave(IOleAdviseHolder* pThis);
    public HRESULT SendOnSave();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SendOnClose(IOleAdviseHolder* pThis);
    public HRESULT SendOnClose();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000118-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleClientSite : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleClientSite();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SaveObject(IOleClientSite* pThis);
    public void SaveObject();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMoniker(IOleClientSite* pThis, UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker** ppmk);
    public void GetMoniker(UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker** ppmk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetContainer(IOleClientSite* pThis, IOleContainer** ppContainer);
    public void GetContainer(IOleContainer** ppContainer);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ShowObject(IOleClientSite* pThis);
    public void ShowObject();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnShowWindow(IOleClientSite* pThis, BOOL fShow);
    public void OnShowWindow(BOOL fShow);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RequestNewObjectLayout(IOleClientSite* pThis);
    public void RequestNewObjectLayout();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B722BCCB-4E68-101B-A2BC-00AA00404770")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleCommandTarget : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleCommandTarget();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD& prgCmds, OLECMDTEXT& pCmdText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryStatus(IOleCommandTarget* pThis, Guid* pguidCmdGroup, UInt32 cCmds, OLECMD* prgCmds, OLECMDTEXT* pCmdText);
    public HRESULT QueryStatus(Guid* pguidCmdGroup, UInt32 cCmds, OLECMD* prgCmds, OLECMDTEXT* pCmdText);
    internal HRESULT Exec(Guid& pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, VARIANT& pvaIn, VARIANT& pvaOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Exec(IOleCommandTarget* pThis, Guid* pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, VARIANT* pvaIn, VARIANT* pvaOut);
    public HRESULT Exec(Guid* pguidCmdGroup, UInt32 nCmdID, UInt32 nCmdexecopt, VARIANT* pvaIn, VARIANT* pvaOut);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000011B-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleContainer : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleContainer();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void ParseDisplayName(IBindCtx* pbc, PWSTR pszDisplayName, UInt32& pchEaten, IMoniker** ppmkOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ParseDisplayName(IOleContainer* pThis, IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    public void ParseDisplayName(IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumObjects(IOleContainer* pThis, UInt32 grfFlags, IEnumUnknown** ppenum);
    public void EnumObjects(UInt32 grfFlags, IEnumUnknown** ppenum);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT LockContainer(IOleContainer* pThis, BOOL fLock);
    public void LockContainer(BOOL fLock);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B288-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleControl : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleControl();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetControlInfo(CONTROLINFO& pCI);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetControlInfo(IOleControl* pThis, CONTROLINFO* pCI);
    public HRESULT GetControlInfo(CONTROLINFO* pCI);
    internal HRESULT OnMnemonic(MSG& pMsg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnMnemonic(IOleControl* pThis, MSG* pMsg);
    public HRESULT OnMnemonic(MSG* pMsg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnAmbientPropertyChange(IOleControl* pThis, int dispID);
    public HRESULT OnAmbientPropertyChange(int dispID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT FreezeEvents(IOleControl* pThis, BOOL bFreeze);
    public HRESULT FreezeEvents(BOOL bFreeze);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B289-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleControlSite : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleControlSite();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnControlInfoChanged(IOleControlSite* pThis);
    public HRESULT OnControlInfoChanged();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT LockInPlaceActive(IOleControlSite* pThis, BOOL fLock);
    public HRESULT LockInPlaceActive(BOOL fLock);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetExtendedControl(IOleControlSite* pThis, IDispatch** ppDisp);
    public HRESULT GetExtendedControl(IDispatch** ppDisp);
    internal HRESULT TransformCoords(POINTL& pPtlHimetric, PointF& pPtfContainer, UInt32 dwFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT TransformCoords(IOleControlSite* pThis, POINTL* pPtlHimetric, PointF* pPtfContainer, UInt32 dwFlags);
    public HRESULT TransformCoords(POINTL* pPtlHimetric, PointF* pPtfContainer, UInt32 dwFlags);
    internal HRESULT TranslateAccelerator(MSG& pMsg, KEYMODIFIERS grfModifiers);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT TranslateAccelerator(IOleControlSite* pThis, MSG* pMsg, KEYMODIFIERS grfModifiers);
    public HRESULT TranslateAccelerator(MSG* pMsg, KEYMODIFIERS grfModifiers);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnFocus(IOleControlSite* pThis, BOOL fGotFocus);
    public HRESULT OnFocus(BOOL fGotFocus);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ShowPropertyFrame(IOleControlSite* pThis);
    public HRESULT ShowPropertyFrame();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000117-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleInPlaceActiveObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleInPlaceActiveObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleInPlaceActiveObject* pThis, HWND* phwnd);
    public void GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleInPlaceActiveObject* pThis, BOOL fEnterMode);
    public void ContextSensitiveHelp(BOOL fEnterMode);
    internal HRESULT TranslateAccelerator(Nullable`1<MSG> lpmsg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT TranslateAccelerator(IOleInPlaceActiveObject* pThis, MSG* lpmsg);
    public HRESULT TranslateAccelerator(MSG* lpmsg);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnFrameWindowActivate(IOleInPlaceActiveObject* pThis, BOOL fActivate);
    public void OnFrameWindowActivate(BOOL fActivate);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnDocWindowActivate(IOleInPlaceActiveObject* pThis, BOOL fActivate);
    public void OnDocWindowActivate(BOOL fActivate);
    internal void ResizeBorder(RECT& prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fFrameWindow);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ResizeBorder(IOleInPlaceActiveObject* pThis, RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fFrameWindow);
    public void ResizeBorder(RECT* prcBorder, IOleInPlaceUIWindow* pUIWindow, BOOL fFrameWindow);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnableModeless(IOleInPlaceActiveObject* pThis, BOOL fEnable);
    public void EnableModeless(BOOL fEnable);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000116-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleInPlaceFrame : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleInPlaceFrame();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleInPlaceFrame* pThis, HWND* phwnd);
    public HRESULT GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleInPlaceFrame* pThis, BOOL fEnterMode);
    public HRESULT ContextSensitiveHelp(BOOL fEnterMode);
    internal HRESULT GetBorder(RECT& lprectBorder);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetBorder(IOleInPlaceFrame* pThis, RECT* lprectBorder);
    public HRESULT GetBorder(RECT* lprectBorder);
    internal HRESULT RequestBorderSpace(RECT& pborderwidths);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RequestBorderSpace(IOleInPlaceFrame* pThis, RECT* pborderwidths);
    public HRESULT RequestBorderSpace(RECT* pborderwidths);
    internal HRESULT SetBorderSpace(RECT& pborderwidths);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetBorderSpace(IOleInPlaceFrame* pThis, RECT* pborderwidths);
    public HRESULT SetBorderSpace(RECT* pborderwidths);
    internal HRESULT SetActiveObject(IOleInPlaceActiveObject* pActiveObject, string pszObjName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetActiveObject(IOleInPlaceFrame* pThis, IOleInPlaceActiveObject* pActiveObject, PCWSTR pszObjName);
    public HRESULT SetActiveObject(IOleInPlaceActiveObject* pActiveObject, PCWSTR pszObjName);
    internal HRESULT InsertMenus(HMENU hmenuShared, OLEMENUGROUPWIDTHS& lpMenuWidths);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InsertMenus(IOleInPlaceFrame* pThis, HMENU hmenuShared, OLEMENUGROUPWIDTHS* lpMenuWidths);
    public HRESULT InsertMenus(HMENU hmenuShared, OLEMENUGROUPWIDTHS* lpMenuWidths);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetMenu(IOleInPlaceFrame* pThis, HMENU hmenuShared, IntPtr holemenu, HWND hwndActiveObject);
    public HRESULT SetMenu(HMENU hmenuShared, IntPtr holemenu, HWND hwndActiveObject);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RemoveMenus(IOleInPlaceFrame* pThis, HMENU hmenuShared);
    public HRESULT RemoveMenus(HMENU hmenuShared);
    internal HRESULT SetStatusText(string pszStatusText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetStatusText(IOleInPlaceFrame* pThis, PCWSTR pszStatusText);
    public HRESULT SetStatusText(PCWSTR pszStatusText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnableModeless(IOleInPlaceFrame* pThis, BOOL fEnable);
    public HRESULT EnableModeless(BOOL fEnable);
    internal HRESULT TranslateAccelerator(MSG& lpmsg, ushort wID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT TranslateAccelerator(IOleInPlaceFrame* pThis, MSG* lpmsg, ushort wID);
    public HRESULT TranslateAccelerator(MSG* lpmsg, ushort wID);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000113-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleInPlaceObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleInPlaceObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleInPlaceObject* pThis, HWND* phwnd);
    public HRESULT GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleInPlaceObject* pThis, BOOL fEnterMode);
    public void ContextSensitiveHelp(BOOL fEnterMode);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InPlaceDeactivate(IOleInPlaceObject* pThis);
    public HRESULT InPlaceDeactivate();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT UIDeactivate(IOleInPlaceObject* pThis);
    public HRESULT UIDeactivate();
    internal HRESULT SetObjectRects(RECT& lprcPosRect, RECT& lprcClipRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetObjectRects(IOleInPlaceObject* pThis, RECT* lprcPosRect, RECT* lprcClipRect);
    public HRESULT SetObjectRects(RECT* lprcPosRect, RECT* lprcClipRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ReactivateAndUndo(IOleInPlaceObject* pThis);
    public void ReactivateAndUndo();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleInPlaceObjectWindowless : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleInPlaceObjectWindowless();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleInPlaceObjectWindowless* pThis, HWND* phwnd);
    public void GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleInPlaceObjectWindowless* pThis, BOOL fEnterMode);
    public void ContextSensitiveHelp(BOOL fEnterMode);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InPlaceDeactivate(IOleInPlaceObjectWindowless* pThis);
    public void InPlaceDeactivate();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT UIDeactivate(IOleInPlaceObjectWindowless* pThis);
    public void UIDeactivate();
    internal void SetObjectRects(RECT& lprcPosRect, RECT& lprcClipRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetObjectRects(IOleInPlaceObjectWindowless* pThis, RECT* lprcPosRect, RECT* lprcClipRect);
    public void SetObjectRects(RECT* lprcPosRect, RECT* lprcClipRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ReactivateAndUndo(IOleInPlaceObjectWindowless* pThis);
    public void ReactivateAndUndo();
    internal void OnWindowMessage(UInt32 msg, WPARAM wParam, LPARAM lParam, LRESULT& plResult);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnWindowMessage(IOleInPlaceObjectWindowless* pThis, UInt32 msg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    public void OnWindowMessage(UInt32 msg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDropTarget(IOleInPlaceObjectWindowless* pThis, IDropTarget** ppDropTarget);
    public void GetDropTarget(IDropTarget** ppDropTarget);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000119-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleInPlaceSite : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleInPlaceSite();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleInPlaceSite* pThis, HWND* phwnd);
    public HRESULT GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleInPlaceSite* pThis, BOOL fEnterMode);
    public HRESULT ContextSensitiveHelp(BOOL fEnterMode);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CanInPlaceActivate(IOleInPlaceSite* pThis);
    public HRESULT CanInPlaceActivate();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnInPlaceActivate(IOleInPlaceSite* pThis);
    public HRESULT OnInPlaceActivate();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnUIActivate(IOleInPlaceSite* pThis);
    public HRESULT OnUIActivate();
    internal HRESULT GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, RECT& lprcPosRect, RECT& lprcClipRect, OLEINPLACEFRAMEINFO& lpFrameInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindowContext(IOleInPlaceSite* pThis, IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, RECT* lprcPosRect, RECT* lprcClipRect, OLEINPLACEFRAMEINFO* lpFrameInfo);
    public HRESULT GetWindowContext(IOleInPlaceFrame** ppFrame, IOleInPlaceUIWindow** ppDoc, RECT* lprcPosRect, RECT* lprcClipRect, OLEINPLACEFRAMEINFO* lpFrameInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Scroll(IOleInPlaceSite* pThis, SIZE scrollExtant);
    public HRESULT Scroll(SIZE scrollExtant);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnUIDeactivate(IOleInPlaceSite* pThis, BOOL fUndoable);
    public void OnUIDeactivate(BOOL fUndoable);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnInPlaceDeactivate(IOleInPlaceSite* pThis);
    public void OnInPlaceDeactivate();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DiscardUndoState(IOleInPlaceSite* pThis);
    public void DiscardUndoState();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DeactivateAndUndo(IOleInPlaceSite* pThis);
    public void DeactivateAndUndo();
    internal HRESULT OnPosRectChange(RECT& lprcPosRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnPosRectChange(IOleInPlaceSite* pThis, RECT* lprcPosRect);
    public HRESULT OnPosRectChange(RECT* lprcPosRect);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000115-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleInPlaceUIWindow : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleInPlaceUIWindow();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleInPlaceUIWindow* pThis, HWND* phwnd);
    public HRESULT GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleInPlaceUIWindow* pThis, BOOL fEnterMode);
    public HRESULT ContextSensitiveHelp(BOOL fEnterMode);
    internal HRESULT GetBorder(RECT& lprectBorder);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetBorder(IOleInPlaceUIWindow* pThis, RECT* lprectBorder);
    public HRESULT GetBorder(RECT* lprectBorder);
    internal HRESULT RequestBorderSpace(RECT& pborderwidths);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RequestBorderSpace(IOleInPlaceUIWindow* pThis, RECT* pborderwidths);
    public HRESULT RequestBorderSpace(RECT* pborderwidths);
    internal HRESULT SetBorderSpace(RECT& pborderwidths);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetBorderSpace(IOleInPlaceUIWindow* pThis, RECT* pborderwidths);
    public HRESULT SetBorderSpace(RECT* pborderwidths);
    internal HRESULT SetActiveObject(IOleInPlaceActiveObject* pActiveObject, string pszObjName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetActiveObject(IOleInPlaceUIWindow* pThis, IOleInPlaceActiveObject* pActiveObject, PCWSTR pszObjName);
    public HRESULT SetActiveObject(IOleInPlaceActiveObject* pActiveObject, PCWSTR pszObjName);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000112-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetClientSite(IOleObject* pThis, IOleClientSite* pClientSite);
    public HRESULT SetClientSite(IOleClientSite* pClientSite);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClientSite(IOleObject* pThis, IOleClientSite** ppClientSite);
    public HRESULT GetClientSite(IOleClientSite** ppClientSite);
    internal void SetHostNames(string szContainerApp, string szContainerObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetHostNames(IOleObject* pThis, PCWSTR szContainerApp, PCWSTR szContainerObj);
    public void SetHostNames(PCWSTR szContainerApp, PCWSTR szContainerObj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Close(IOleObject* pThis, UInt32 dwSaveOption);
    public void Close(UInt32 dwSaveOption);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetMoniker(IOleObject* pThis, UInt32 dwWhichMoniker, IMoniker* pmk);
    public void SetMoniker(UInt32 dwWhichMoniker, IMoniker* pmk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMoniker(IOleObject* pThis, UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker** ppmk);
    public void GetMoniker(UInt32 dwAssign, UInt32 dwWhichMoniker, IMoniker** ppmk);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InitFromData(IOleObject* pThis, IDataObject* pDataObject, BOOL fCreation, UInt32 dwReserved);
    public void InitFromData(IDataObject* pDataObject, BOOL fCreation, UInt32 dwReserved);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClipboardData(IOleObject* pThis, UInt32 dwReserved, IDataObject** ppDataObject);
    public void GetClipboardData(UInt32 dwReserved, IDataObject** ppDataObject);
    internal HRESULT DoVerb(int iVerb, MSG& lpmsg, IOleClientSite* pActiveSite, int lindex, HWND hwndParent, RECT& lprcPosRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DoVerb(IOleObject* pThis, int iVerb, MSG* lpmsg, IOleClientSite* pActiveSite, int lindex, HWND hwndParent, RECT* lprcPosRect);
    public HRESULT DoVerb(int iVerb, MSG* lpmsg, IOleClientSite* pActiveSite, int lindex, HWND hwndParent, RECT* lprcPosRect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumVerbs(IOleObject* pThis, IEnumOLEVERB** ppEnumOleVerb);
    public void EnumVerbs(IEnumOLEVERB** ppEnumOleVerb);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Update(IOleObject* pThis);
    public void Update();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IsUpToDate(IOleObject* pThis);
    public void IsUpToDate();
    internal void GetUserClassID(Guid& pClsid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetUserClassID(IOleObject* pThis, Guid* pClsid);
    public void GetUserClassID(Guid* pClsid);
    internal void GetUserType(UInt32 dwFormOfType, PWSTR& pszUserType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetUserType(IOleObject* pThis, UInt32 dwFormOfType, PWSTR* pszUserType);
    public void GetUserType(UInt32 dwFormOfType, PWSTR* pszUserType);
    internal HRESULT SetExtent(DVASPECT dwDrawAspect, SIZE& psizel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetExtent(IOleObject* pThis, DVASPECT dwDrawAspect, SIZE* psizel);
    public HRESULT SetExtent(DVASPECT dwDrawAspect, SIZE* psizel);
    internal HRESULT GetExtent(DVASPECT dwDrawAspect, SIZE& psizel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetExtent(IOleObject* pThis, DVASPECT dwDrawAspect, SIZE* psizel);
    public HRESULT GetExtent(DVASPECT dwDrawAspect, SIZE* psizel);
    internal void Advise(IAdviseSink* pAdvSink, UInt32& pdwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Advise(IOleObject* pThis, IAdviseSink* pAdvSink, UInt32* pdwConnection);
    public void Advise(IAdviseSink* pAdvSink, UInt32* pdwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unadvise(IOleObject* pThis, UInt32 dwConnection);
    public void Unadvise(UInt32 dwConnection);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumAdvise(IOleObject* pThis, IEnumSTATDATA** ppenumAdvise);
    public void EnumAdvise(IEnumSTATDATA** ppenumAdvise);
    internal HRESULT GetMiscStatus(DVASPECT dwAspect, OLEMISC& pdwStatus);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMiscStatus(IOleObject* pThis, DVASPECT dwAspect, OLEMISC* pdwStatus);
    public HRESULT GetMiscStatus(DVASPECT dwAspect, OLEMISC* pdwStatus);
    internal void SetColorScheme(LOGPALETTE& pLogpal);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetColorScheme(IOleObject* pThis, LOGPALETTE* pLogpal);
    public void SetColorScheme(LOGPALETTE* pLogpal);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("A1FAF330-EF97-11CE-9BC9-00AA00608E01")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleParentUndoUnit : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleParentUndoUnit();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Do(IOleParentUndoUnit* pThis, IOleUndoManager* pUndoManager);
    public void Do(IOleUndoManager* pUndoManager);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDescription(IOleParentUndoUnit* pThis, BSTR* pBstr);
    public void GetDescription(BSTR* pBstr);
    internal void GetUnitType(Guid& pClsid, Int32& plID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetUnitType(IOleParentUndoUnit* pThis, Guid* pClsid, Int32* plID);
    public void GetUnitType(Guid* pClsid, Int32* plID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnNextAdd(IOleParentUndoUnit* pThis);
    public void OnNextAdd();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Open(IOleParentUndoUnit* pThis, IOleParentUndoUnit* pPUU);
    public void Open(IOleParentUndoUnit* pPUU);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Close(IOleParentUndoUnit* pThis, IOleParentUndoUnit* pPUU, BOOL fCommit);
    public void Close(IOleParentUndoUnit* pPUU, BOOL fCommit);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Add(IOleParentUndoUnit* pThis, IOleUndoUnit* pUU);
    public void Add(IOleUndoUnit* pUU);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT FindUnit(IOleParentUndoUnit* pThis, IOleUndoUnit* pUU);
    public void FindUnit(IOleUndoUnit* pUU);
    internal void GetParentState(UInt32& pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetParentState(IOleParentUndoUnit* pThis, UInt32* pdwState);
    public void GetParentState(UInt32* pdwState);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("D001F200-EF97-11CE-9BC9-00AA00608E01")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleUndoManager : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleUndoManager();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Open(IOleUndoManager* pThis, IOleParentUndoUnit* pPUU);
    public void Open(IOleParentUndoUnit* pPUU);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Close(IOleUndoManager* pThis, IOleParentUndoUnit* pPUU, BOOL fCommit);
    public void Close(IOleParentUndoUnit* pPUU, BOOL fCommit);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Add(IOleUndoManager* pThis, IOleUndoUnit* pUU);
    public void Add(IOleUndoUnit* pUU);
    internal void GetOpenParentState(UInt32& pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetOpenParentState(IOleUndoManager* pThis, UInt32* pdwState);
    public void GetOpenParentState(UInt32* pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DiscardFrom(IOleUndoManager* pThis, IOleUndoUnit* pUU);
    public void DiscardFrom(IOleUndoUnit* pUU);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT UndoTo(IOleUndoManager* pThis, IOleUndoUnit* pUU);
    public void UndoTo(IOleUndoUnit* pUU);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RedoTo(IOleUndoManager* pThis, IOleUndoUnit* pUU);
    public void RedoTo(IOleUndoUnit* pUU);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumUndoable(IOleUndoManager* pThis, IEnumOleUndoUnits** ppEnum);
    public void EnumUndoable(IEnumOleUndoUnits** ppEnum);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumRedoable(IOleUndoManager* pThis, IEnumOleUndoUnits** ppEnum);
    public void EnumRedoable(IEnumOleUndoUnits** ppEnum);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetLastUndoDescription(IOleUndoManager* pThis, BSTR* pBstr);
    public void GetLastUndoDescription(BSTR* pBstr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetLastRedoDescription(IOleUndoManager* pThis, BSTR* pBstr);
    public void GetLastRedoDescription(BSTR* pBstr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Enable(IOleUndoManager* pThis, BOOL fEnable);
    public void Enable(BOOL fEnable);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("894AD3B0-EF97-11CE-9BC9-00AA00608E01")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleUndoUnit : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleUndoUnit();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Do(IOleUndoUnit* pThis, IOleUndoManager* pUndoManager);
    public void Do(IOleUndoManager* pUndoManager);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDescription(IOleUndoUnit* pThis, BSTR* pBstr);
    public void GetDescription(BSTR* pBstr);
    internal void GetUnitType(Guid& pClsid, Int32& plID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetUnitType(IOleUndoUnit* pThis, Guid* pClsid, Int32* plID);
    public void GetUnitType(Guid* pClsid, Int32* plID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnNextAdd(IOleUndoUnit* pThis);
    public void OnNextAdd();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000114-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IOleWindow : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IOleWindow();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetWindow(HWND& phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetWindow(IOleWindow* pThis, HWND* phwnd);
    public HRESULT GetWindow(HWND* phwnd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IOleWindow* pThis, BOOL fEnterMode);
    public HRESULT ContextSensitiveHelp(BOOL fEnterMode);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000011A-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IParseDisplayName : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IParseDisplayName();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void ParseDisplayName(IBindCtx* pbc, PWSTR pszDisplayName, UInt32& pchEaten, IMoniker** ppmkOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ParseDisplayName(IParseDisplayName* pThis, IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    public void ParseDisplayName(IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, IMoniker** ppmkOut);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("376BD3AA-3845-101B-84ED-08002B2EC713")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IPerPropertyBrowsing : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPerPropertyBrowsing();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDisplayString(IPerPropertyBrowsing* pThis, int dispID, BSTR* pBstr);
    public HRESULT GetDisplayString(int dispID, BSTR* pBstr);
    internal HRESULT MapPropertyToPage(int dispID, Guid& pClsid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT MapPropertyToPage(IPerPropertyBrowsing* pThis, int dispID, Guid* pClsid);
    public HRESULT MapPropertyToPage(int dispID, Guid* pClsid);
    internal HRESULT GetPredefinedStrings(int dispID, CALPOLESTR& pCaStringsOut, CADWORD& pCaCookiesOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPredefinedStrings(IPerPropertyBrowsing* pThis, int dispID, CALPOLESTR* pCaStringsOut, CADWORD* pCaCookiesOut);
    public HRESULT GetPredefinedStrings(int dispID, CALPOLESTR* pCaStringsOut, CADWORD* pCaCookiesOut);
    internal HRESULT GetPredefinedValue(int dispID, UInt32 dwCookie, VARIANT& pVarOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPredefinedValue(IPerPropertyBrowsing* pThis, int dispID, UInt32 dwCookie, VARIANT* pVarOut);
    public HRESULT GetPredefinedValue(int dispID, UInt32 dwCookie, VARIANT* pVarOut);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("37D84F60-42CB-11CE-8135-00AA004BB851")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IPersistPropertyBag : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPersistPropertyBag();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetClassID(Guid& pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassID(IPersistPropertyBag* pThis, Guid* pClassID);
    public void GetClassID(Guid* pClassID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT InitNew(IPersistPropertyBag* pThis);
    public void InitNew();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Load(IPersistPropertyBag* pThis, IPropertyBag* pPropBag, IErrorLog* pErrorLog);
    public void Load(IPropertyBag* pPropBag, IErrorLog* pErrorLog);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Save(IPersistPropertyBag* pThis, IPropertyBag* pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);
    public void Save(IPropertyBag* pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("7BF80980-BF32-101A-8BBB-00AA00300CAB")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IPicture : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    internal OLE_HANDLE Handle { get; }
    internal OLE_HANDLE hPal { get; internal set; }
    internal PICTYPE Type { get; }
    internal int Width { get; }
    internal int Height { get; }
    internal HDC CurDC { get; }
    internal BOOL KeepOriginalFormat { get; internal set; }
    internal UInt32 Attributes { get; }
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPicture();
    [NullableContextAttribute("1")]
public static object CreateObjectFromImage(Image image);
    public static ComScope`1<IPicture> CreateFromImage(Image image);
    [NullableContextAttribute("1")]
public static object CreateObjectFromIcon(Icon icon, bool copy);
    public static ComScope`1<IPicture> CreateFromIcon(Icon icon, bool copy);
    [NullableContextAttribute("2")]
public Image ToImage();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Handle(IPicture* pThis, OLE_HANDLE* pHandle);
    internal OLE_HANDLE get_Handle();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_hPal(IPicture* pThis, OLE_HANDLE* phPal);
    internal OLE_HANDLE get_hPal();
    internal void set_hPal(OLE_HANDLE value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Type(IPicture* pThis, PICTYPE* pType);
    internal PICTYPE get_Type();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Width(IPicture* pThis, Int32* pWidth);
    internal int get_Width();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Height(IPicture* pThis, Int32* pHeight);
    internal int get_Height();
    internal void Render(HDC hDC, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, RECT& pRcWBounds);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Render(IPicture* pThis, HDC hDC, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, RECT* pRcWBounds);
    public void Render(HDC hDC, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, RECT* pRcWBounds);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT set_hPal(IPicture* pThis, OLE_HANDLE hPal);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_CurDC(IPicture* pThis, HDC* phDC);
    internal HDC get_CurDC();
    internal void SelectPicture(HDC hDCIn, HDC& phDCOut, OLE_HANDLE& phBmpOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SelectPicture(IPicture* pThis, HDC hDCIn, HDC* phDCOut, OLE_HANDLE* phBmpOut);
    public void SelectPicture(HDC hDCIn, HDC* phDCOut, OLE_HANDLE* phBmpOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_KeepOriginalFormat(IPicture* pThis, BOOL* pKeep);
    internal BOOL get_KeepOriginalFormat();
    internal void set_KeepOriginalFormat(BOOL value);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_KeepOriginalFormat(IPicture* pThis, BOOL keep);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PictureChanged(IPicture* pThis);
    public void PictureChanged();
    internal void SaveAsFile(IStream* pStream, BOOL fSaveMemCopy, Int32& pCbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SaveAsFile(IPicture* pThis, IStream* pStream, BOOL fSaveMemCopy, Int32* pCbSize);
    public void SaveAsFile(IStream* pStream, BOOL fSaveMemCopy, Int32* pCbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_Attributes(IPicture* pThis, UInt32* pDwAttr);
    internal UInt32 get_Attributes();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("7BF80981-BF32-101A-8BBB-00AA00300CAB")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IPictureDisp : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPictureDisp();
    [NullableContextAttribute("1")]
public static object CreateObjectFromImage(Image image);
    public static ComScope`1<IPictureDisp> CreateFromImage(Image image);
    [NullableContextAttribute("2")]
public Image ToImage();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetTypeInfoCount(UInt32& pctinfo);
    public void GetTypeInfoCount(UInt32* pctinfo);
    public void GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    internal void GetIDsOfNames(Guid& riid, Span`1<PWSTR> rgszNames, UInt32 lcid, Span`1<int> rgDispId);
    public void GetIDsOfNames(Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    internal void Invoke(int dispIdMember, Guid& riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public void Invoke(int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("9BFBBC02-EFF1-101A-84ED-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IPropertyNotifySink : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPropertyNotifySink();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnChanged(IPropertyNotifySink* pThis, int dispID);
    public HRESULT OnChanged(int dispID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnRequestEdit(IPropertyNotifySink* pThis, int dispID);
    public HRESULT OnRequestEdit(int dispID);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B283-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IProvideClassInfo : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IProvideClassInfo();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassInfo(IProvideClassInfo* pThis, ITypeInfo** ppTI);
    public HRESULT GetClassInfo(ITypeInfo** ppTI);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IProvideClassInfo2 : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IProvideClassInfo2();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassInfo(IProvideClassInfo2* pThis, ITypeInfo** ppTI);
    public void GetClassInfo(ITypeInfo** ppTI);
    internal void GetGUID(UInt32 dwGuidKind, Guid& pGUID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetGUID(IProvideClassInfo2* pThis, UInt32 dwGuidKind, Guid* pGUID);
    public void GetGUID(UInt32 dwGuidKind, Guid* pGUID);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("A7ABA9C1-8983-11CF-8F20-00805F2CD064")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IProvideMultipleClassInfo : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IProvideMultipleClassInfo();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClassInfo(IProvideMultipleClassInfo* pThis, ITypeInfo** ppTI);
    public void GetClassInfo(ITypeInfo** ppTI);
    internal void GetGUID(UInt32 dwGuidKind, Guid& pGUID);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetGUID(IProvideMultipleClassInfo* pThis, UInt32 dwGuidKind, Guid* pGUID);
    public void GetGUID(UInt32 dwGuidKind, Guid* pGUID);
    internal HRESULT GetMultiTypeInfoCount(UInt32& pcti);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetMultiTypeInfoCount(IProvideMultipleClassInfo* pThis, UInt32* pcti);
    public HRESULT GetMultiTypeInfoCount(UInt32* pcti);
    internal HRESULT GetInfoOfIndex(UInt32 iti, MULTICLASSINFO_FLAGS dwFlags, ITypeInfo** pptiCoClass, UInt32& pdwTIFlags, UInt32& pcdispidReserved, Guid& piidPrimary, Guid& piidSource);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetInfoOfIndex(IProvideMultipleClassInfo* pThis, UInt32 iti, MULTICLASSINFO_FLAGS dwFlags, ITypeInfo** pptiCoClass, UInt32* pdwTIFlags, UInt32* pcdispidReserved, Guid* piidPrimary, Guid* piidSource);
    public HRESULT GetInfoOfIndex(UInt32 iti, MULTICLASSINFO_FLAGS dwFlags, ITypeInfo** pptiCoClass, UInt32* pdwTIFlags, UInt32* pcdispidReserved, Guid* piidPrimary, Guid* piidSource);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("CF51ED10-62FE-11CF-BF86-00A0C9034836")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IQuickActivate : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IQuickActivate();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT QuickActivate(QACONTAINER& pQaContainer, QACONTROL& pQaControl);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QuickActivate(IQuickActivate* pThis, QACONTAINER* pQaContainer, QACONTROL* pQaControl);
    public HRESULT QuickActivate(QACONTAINER* pQaContainer, QACONTROL* pQaControl);
    internal HRESULT SetContentExtent(SIZE& pSizel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetContentExtent(IQuickActivate* pThis, SIZE* pSizel);
    public HRESULT SetContentExtent(SIZE* pSizel);
    internal HRESULT GetContentExtent(SIZE& pSizel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetContentExtent(IQuickActivate* pThis, SIZE* pSizel);
    public HRESULT GetContentExtent(SIZE* pSizel);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000002F-0000-0000-C000-000000000046")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IRecordInfo : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IRecordInfo();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RecordInit(IRecordInfo* pThis, Void* pvNew);
    public void RecordInit(Void* pvNew);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RecordClear(IRecordInfo* pThis, Void* pvExisting);
    public void RecordClear(Void* pvExisting);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RecordCopy(IRecordInfo* pThis, Void* pvExisting, Void* pvNew);
    public void RecordCopy(Void* pvExisting, Void* pvNew);
    internal void GetGuid(Guid& pguid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetGuid(IRecordInfo* pThis, Guid* pguid);
    public void GetGuid(Guid* pguid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetName(IRecordInfo* pThis, BSTR* pbstrName);
    public void GetName(BSTR* pbstrName);
    internal void GetSize(UInt32& pcbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSize(IRecordInfo* pThis, UInt32* pcbSize);
    public void GetSize(UInt32* pcbSize);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetTypeInfo(IRecordInfo* pThis, ITypeInfo** ppTypeInfo);
    public void GetTypeInfo(ITypeInfo** ppTypeInfo);
    internal void GetField(Void* pvData, string szFieldName, VARIANT& pvarField);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetField(IRecordInfo* pThis, Void* pvData, PCWSTR szFieldName, VARIANT* pvarField);
    public void GetField(Void* pvData, PCWSTR szFieldName, VARIANT* pvarField);
    internal void GetFieldNoCopy(Void* pvData, string szFieldName, VARIANT& pvarField, Void*& ppvDataCArray);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFieldNoCopy(IRecordInfo* pThis, Void* pvData, PCWSTR szFieldName, VARIANT* pvarField, Void** ppvDataCArray);
    public void GetFieldNoCopy(Void* pvData, PCWSTR szFieldName, VARIANT* pvarField, Void** ppvDataCArray);
    internal void PutField(UInt32 wFlags, Void* pvData, string szFieldName, VARIANT& pvarField);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PutField(IRecordInfo* pThis, UInt32 wFlags, Void* pvData, PCWSTR szFieldName, VARIANT* pvarField);
    public void PutField(UInt32 wFlags, Void* pvData, PCWSTR szFieldName, VARIANT* pvarField);
    internal void PutFieldNoCopy(UInt32 wFlags, Void* pvData, string szFieldName, VARIANT& pvarField);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PutFieldNoCopy(IRecordInfo* pThis, UInt32 wFlags, Void* pvData, PCWSTR szFieldName, VARIANT* pvarField);
    public void PutFieldNoCopy(UInt32 wFlags, Void* pvData, PCWSTR szFieldName, VARIANT* pvarField);
    internal void GetFieldNames(UInt32& pcNames, BSTR* rgBstrNames);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFieldNames(IRecordInfo* pThis, UInt32* pcNames, BSTR* rgBstrNames);
    public void GetFieldNames(UInt32* pcNames, BSTR* rgBstrNames);
    [UnmanagedCallersOnlyAttribute]
private static BOOL IsMatchingType(IRecordInfo* pThis, IRecordInfo* pRecordInfo);
    public BOOL IsMatchingType(IRecordInfo* pRecordInfo);
    [UnmanagedCallersOnlyAttribute]
private static Void* RecordCreate(IRecordInfo* pThis);
    public Void* RecordCreate();
    internal void RecordCreateCopy(Void* pvSource, Void*& ppvDest);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RecordCreateCopy(IRecordInfo* pThis, Void* pvSource, Void** ppvDest);
    public void RecordCreateCopy(Void* pvSource, Void** ppvDest);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RecordDestroy(IRecordInfo* pThis, Void* pvRecord);
    public void RecordDestroy(Void* pvRecord);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("742B0E01-14E6-101B-914E-00AA00300CAB")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.ISimpleFrameSite : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ISimpleFrameSite();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void PreMessageFilter(HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT& plResult, UInt32& pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PreMessageFilter(ISimpleFrameSite* pThis, HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT* plResult, UInt32* pdwCookie);
    public void PreMessageFilter(HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT* plResult, UInt32* pdwCookie);
    internal void PostMessageFilter(HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT& plResult, UInt32 dwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PostMessageFilter(ISimpleFrameSite* pThis, HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT* plResult, UInt32 dwCookie);
    public void PostMessageFilter(HWND hWnd, UInt32 msg, WPARAM wp, LPARAM lp, LRESULT* plResult, UInt32 dwCookie);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B196B28B-BAB4-101A-B69C-00AA00341D07")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.ISpecifyPropertyPages : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static ISpecifyPropertyPages();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal HRESULT GetPages(CAUUID& pPages);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPages(ISpecifyPropertyPages* pThis, CAUUID* pPages);
    public HRESULT GetPages(CAUUID* pPages);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("9849FD60-3768-101B-8D72-AE6164FFE3CF")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IVBFormat : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IVBFormat();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Format(VARIANT& vData, BSTR bstrFormat, Void* lpBuffer, ushort cb, int lcid, short sFirstDayOfWeek, ushort sFirstWeekOfYear, UInt16& rcb);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Format(IVBFormat* pThis, VARIANT* vData, BSTR bstrFormat, Void* lpBuffer, ushort cb, int lcid, short sFirstDayOfWeek, ushort sFirstWeekOfYear, UInt16* rcb);
    public void Format(VARIANT* vData, BSTR bstrFormat, Void* lpBuffer, ushort cb, int lcid, short sFirstDayOfWeek, ushort sFirstWeekOfYear, UInt16* rcb);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("40A050A0-3C31-101B-A82E-08002B2B2337")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IVBGetControl : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IVBGetControl();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumControls(IVBGetControl* pThis, UInt32 dwOleContF, ENUM_CONTROLS_WHICH_FLAGS dwWhich, IEnumUnknown** ppenumUnk);
    public void EnumControls(UInt32 dwOleContF, ENUM_CONTROLS_WHICH_FLAGS dwWhich, IEnumUnknown** ppenumUnk);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("0000010D-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IViewObject : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IViewObject();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Draw(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hdcTargetDev, HDC hdcDraw, Nullable`1<RECTL> lprcBounds, Nullable`1<RECTL> lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Draw(IViewObject* pThis, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, RECTL* lprcBounds, RECTL* lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    public void Draw(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, RECTL* lprcBounds, RECTL* lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    internal void GetColorSet(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hicTargetDev, LOGPALETTE*& ppColorSet);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetColorSet(IViewObject* pThis, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet);
    public void GetColorSet(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet);
    internal void Freeze(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32& pdwFreeze);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Freeze(IViewObject* pThis, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32* pdwFreeze);
    public void Freeze(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32* pdwFreeze);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unfreeze(IViewObject* pThis, UInt32 dwFreeze);
    public void Unfreeze(UInt32 dwFreeze);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetAdvise(IViewObject* pThis, DVASPECT aspects, UInt32 advf, IAdviseSink* pAdvSink);
    public void SetAdvise(DVASPECT aspects, UInt32 advf, IAdviseSink* pAdvSink);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAdvise(IViewObject* pThis, UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);
    public void GetAdvise(UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("00000127-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.IViewObject2 : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IViewObject2();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Draw(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hdcTargetDev, HDC hdcDraw, Nullable`1<RECTL> lprcBounds, Nullable`1<RECTL> lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Draw(IViewObject2* pThis, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, RECTL* lprcBounds, RECTL* lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    public void Draw(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, RECTL* lprcBounds, RECTL* lprcWBounds, IntPtr pfnContinue, UIntPtr dwContinue);
    internal void GetColorSet(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, Nullable`1<DVTARGETDEVICE> ptd, HDC hicTargetDev, LOGPALETTE*& ppColorSet);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetColorSet(IViewObject2* pThis, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet);
    public void GetColorSet(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, LOGPALETTE** ppColorSet);
    internal void Freeze(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32& pdwFreeze);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Freeze(IViewObject2* pThis, DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32* pdwFreeze);
    public void Freeze(DVASPECT dwDrawAspect, int lindex, Void* pvAspect, UInt32* pdwFreeze);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unfreeze(IViewObject2* pThis, UInt32 dwFreeze);
    public void Unfreeze(UInt32 dwFreeze);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetAdvise(IViewObject2* pThis, DVASPECT aspects, UInt32 advf, IAdviseSink* pAdvSink);
    public void SetAdvise(DVASPECT aspects, UInt32 advf, IAdviseSink* pAdvSink);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAdvise(IViewObject2* pThis, UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);
    public void GetAdvise(UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);
    internal void GetExtent(DVASPECT dwDrawAspect, int lindex, DVTARGETDEVICE& ptd, SIZE& lpsizel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetExtent(IViewObject2* pThis, DVASPECT dwDrawAspect, int lindex, DVTARGETDEVICE* ptd, SIZE* lpsizel);
    public void GetExtent(DVASPECT dwDrawAspect, int lindex, DVTARGETDEVICE* ptd, SIZE* lpsizel);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.KEYMODIFIERS : Enum {
    public UInt32 value__;
    public static KEYMODIFIERS KEYMOD_SHIFT;
    public static KEYMODIFIERS KEYMOD_CONTROL;
    public static KEYMODIFIERS KEYMOD_ALT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.LICINFO : ValueType {
    internal int cbLicInfo;
    internal BOOL fRuntimeKeyAvail;
    internal BOOL fLicVerified;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.MULTICLASSINFO_FLAGS : Enum {
    public UInt32 value__;
    public static MULTICLASSINFO_FLAGS MULTICLASSINFO_GETTYPEINFO;
    public static MULTICLASSINFO_FLAGS MULTICLASSINFO_GETNUMRESERVEDDISPIDS;
    public static MULTICLASSINFO_FLAGS MULTICLASSINFO_GETIIDPRIMARY;
    public static MULTICLASSINFO_FLAGS MULTICLASSINFO_GETIIDSOURCE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OCPFIPARAMS : ValueType {
    internal UInt32 cbStructSize;
    internal HWND hWndOwner;
    internal int x;
    internal int y;
    internal PCWSTR lpszCaption;
    internal UInt32 cObjects;
    internal IUnknown** lplpUnk;
    internal UInt32 cPages;
    internal Guid* lpPages;
    internal UInt32 lcid;
    internal int dispidInitialProperty;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OLE_HANDLE : ValueType {
    internal UInt32 Value;
    internal OLE_HANDLE(UInt32 value);
    public static HICON op_Explicit(OLE_HANDLE handle);
    public static HBITMAP op_Explicit(OLE_HANDLE handle);
    public static HPALETTE op_Explicit(OLE_HANDLE handle);
    public static HMETAFILE op_Explicit(OLE_HANDLE handle);
    public static HENHMETAFILE op_Explicit(OLE_HANDLE handle);
    [NullableContextAttribute("2")]
public static Image OleHandleToImage(OLE_HANDLE handle, PICTYPE type, OLE_HANDLE paletteHandle, int width, int height);
    public static UInt32 op_Implicit(OLE_HANDLE value);
    public static OLE_HANDLE op_Explicit(UInt32 value);
    public static bool op_Equality(OLE_HANDLE left, OLE_HANDLE right);
    public static bool op_Inequality(OLE_HANDLE left, OLE_HANDLE right);
    public sealed virtual bool Equals(OLE_HANDLE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLECLOSE : Enum {
    public int value__;
    public static OLECLOSE OLECLOSE_SAVEIFDIRTY;
    public static OLECLOSE OLECLOSE_NOSAVE;
    public static OLECLOSE OLECLOSE_PROMPTSAVE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OLECMD : ValueType {
    private UInt32 _cmdID;
    private UInt32 _cmdf;
    internal OLECMDID cmdID { get; internal set; }
    internal OLECMDF cmdf { get; internal set; }
    internal OLECMDID get_cmdID();
    internal void set_cmdID(OLECMDID value);
    internal OLECMDF get_cmdf();
    internal void set_cmdf(OLECMDF value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLECMDEXECOPT : Enum {
    public int value__;
    public static OLECMDEXECOPT OLECMDEXECOPT_DODEFAULT;
    public static OLECMDEXECOPT OLECMDEXECOPT_PROMPTUSER;
    public static OLECMDEXECOPT OLECMDEXECOPT_DONTPROMPTUSER;
    public static OLECMDEXECOPT OLECMDEXECOPT_SHOWHELP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLECMDF : Enum {
    public int value__;
    public static OLECMDF OLECMDF_SUPPORTED;
    public static OLECMDF OLECMDF_ENABLED;
    public static OLECMDF OLECMDF_LATCHED;
    public static OLECMDF OLECMDF_NINCHED;
    public static OLECMDF OLECMDF_INVISIBLE;
    public static OLECMDF OLECMDF_DEFHIDEONCTXTMENU;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLECMDID : Enum {
    public int value__;
    public static OLECMDID OLECMDID_OPEN;
    public static OLECMDID OLECMDID_NEW;
    public static OLECMDID OLECMDID_SAVE;
    public static OLECMDID OLECMDID_SAVEAS;
    public static OLECMDID OLECMDID_SAVECOPYAS;
    public static OLECMDID OLECMDID_PRINT;
    public static OLECMDID OLECMDID_PRINTPREVIEW;
    public static OLECMDID OLECMDID_PAGESETUP;
    public static OLECMDID OLECMDID_SPELL;
    public static OLECMDID OLECMDID_PROPERTIES;
    public static OLECMDID OLECMDID_CUT;
    public static OLECMDID OLECMDID_COPY;
    public static OLECMDID OLECMDID_PASTE;
    public static OLECMDID OLECMDID_PASTESPECIAL;
    public static OLECMDID OLECMDID_UNDO;
    public static OLECMDID OLECMDID_REDO;
    public static OLECMDID OLECMDID_SELECTALL;
    public static OLECMDID OLECMDID_CLEARSELECTION;
    public static OLECMDID OLECMDID_ZOOM;
    public static OLECMDID OLECMDID_GETZOOMRANGE;
    public static OLECMDID OLECMDID_UPDATECOMMANDS;
    public static OLECMDID OLECMDID_REFRESH;
    public static OLECMDID OLECMDID_STOP;
    public static OLECMDID OLECMDID_HIDETOOLBARS;
    public static OLECMDID OLECMDID_SETPROGRESSMAX;
    public static OLECMDID OLECMDID_SETPROGRESSPOS;
    public static OLECMDID OLECMDID_SETPROGRESSTEXT;
    public static OLECMDID OLECMDID_SETTITLE;
    public static OLECMDID OLECMDID_SETDOWNLOADSTATE;
    public static OLECMDID OLECMDID_STOPDOWNLOAD;
    public static OLECMDID OLECMDID_ONTOOLBARACTIVATED;
    public static OLECMDID OLECMDID_FIND;
    public static OLECMDID OLECMDID_DELETE;
    public static OLECMDID OLECMDID_HTTPEQUIV;
    public static OLECMDID OLECMDID_HTTPEQUIV_DONE;
    public static OLECMDID OLECMDID_ENABLE_INTERACTION;
    public static OLECMDID OLECMDID_ONUNLOAD;
    public static OLECMDID OLECMDID_PROPERTYBAG2;
    public static OLECMDID OLECMDID_PREREFRESH;
    public static OLECMDID OLECMDID_SHOWSCRIPTERROR;
    public static OLECMDID OLECMDID_SHOWMESSAGE;
    public static OLECMDID OLECMDID_SHOWFIND;
    public static OLECMDID OLECMDID_SHOWPAGESETUP;
    public static OLECMDID OLECMDID_SHOWPRINT;
    public static OLECMDID OLECMDID_CLOSE;
    public static OLECMDID OLECMDID_ALLOWUILESSSAVEAS;
    public static OLECMDID OLECMDID_DONTDOWNLOADCSS;
    public static OLECMDID OLECMDID_UPDATEPAGESTATUS;
    public static OLECMDID OLECMDID_PRINT2;
    public static OLECMDID OLECMDID_PRINTPREVIEW2;
    public static OLECMDID OLECMDID_SETPRINTTEMPLATE;
    public static OLECMDID OLECMDID_GETPRINTTEMPLATE;
    public static OLECMDID OLECMDID_PAGEACTIONBLOCKED;
    public static OLECMDID OLECMDID_PAGEACTIONUIQUERY;
    public static OLECMDID OLECMDID_FOCUSVIEWCONTROLS;
    public static OLECMDID OLECMDID_FOCUSVIEWCONTROLSQUERY;
    public static OLECMDID OLECMDID_SHOWPAGEACTIONMENU;
    public static OLECMDID OLECMDID_ADDTRAVELENTRY;
    public static OLECMDID OLECMDID_UPDATETRAVELENTRY;
    public static OLECMDID OLECMDID_UPDATEBACKFORWARDSTATE;
    public static OLECMDID OLECMDID_OPTICAL_ZOOM;
    public static OLECMDID OLECMDID_OPTICAL_GETZOOMRANGE;
    public static OLECMDID OLECMDID_WINDOWSTATECHANGED;
    public static OLECMDID OLECMDID_ACTIVEXINSTALLSCOPE;
    public static OLECMDID OLECMDID_UPDATETRAVELENTRY_DATARECOVERY;
    public static OLECMDID OLECMDID_SHOWTASKDLG;
    public static OLECMDID OLECMDID_POPSTATEEVENT;
    public static OLECMDID OLECMDID_VIEWPORT_MODE;
    public static OLECMDID OLECMDID_LAYOUT_VIEWPORT_WIDTH;
    public static OLECMDID OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM;
    public static OLECMDID OLECMDID_USER_OPTICAL_ZOOM;
    public static OLECMDID OLECMDID_PAGEAVAILABLE;
    public static OLECMDID OLECMDID_GETUSERSCALABLE;
    public static OLECMDID OLECMDID_UPDATE_CARET;
    public static OLECMDID OLECMDID_ENABLE_VISIBILITY;
    public static OLECMDID OLECMDID_MEDIA_PLAYBACK;
    public static OLECMDID OLECMDID_SETFAVICON;
    public static OLECMDID OLECMDID_SET_HOST_FULLSCREENMODE;
    public static OLECMDID OLECMDID_EXITFULLSCREEN;
    public static OLECMDID OLECMDID_SCROLLCOMPLETE;
    public static OLECMDID OLECMDID_ONBEFOREUNLOAD;
    public static OLECMDID OLECMDID_SHOWMESSAGE_BLOCKABLE;
    public static OLECMDID OLECMDID_SHOWTASKDLG_BLOCKABLE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OLECMDTEXT : ValueType {
    internal UInt32 cmdtextf;
    internal UInt32 cwActual;
    internal UInt32 cwBuf;
    internal __char_1 rgwz;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLECONTF : Enum {
    public int value__;
    public static OLECONTF OLECONTF_EMBEDDINGS;
    public static OLECONTF OLECONTF_LINKS;
    public static OLECONTF OLECONTF_OTHERS;
    public static OLECONTF OLECONTF_ONLYUSER;
    public static OLECONTF OLECONTF_ONLYIFRUNNING;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OLEINPLACEFRAMEINFO : ValueType {
    internal UInt32 cb;
    internal BOOL fMDIApp;
    internal HWND hwndFrame;
    internal HACCEL haccel;
    internal UInt32 cAccelEntries;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLEIVERB : Enum {
    public int value__;
    public static OLEIVERB OLEIVERB_PRIMARY;
    public static OLEIVERB OLEIVERB_SHOW;
    public static OLEIVERB OLEIVERB_OPEN;
    public static OLEIVERB OLEIVERB_HIDE;
    public static OLEIVERB OLEIVERB_UIACTIVATE;
    public static OLEIVERB OLEIVERB_INPLACEACTIVATE;
    public static OLEIVERB OLEIVERB_DISCARDUNDOSTATE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OLEMENUGROUPWIDTHS : ValueType {
    internal __int_6 width;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLEMISC : Enum {
    public int value__;
    public static OLEMISC OLEMISC_RECOMPOSEONRESIZE;
    public static OLEMISC OLEMISC_ONLYICONIC;
    public static OLEMISC OLEMISC_INSERTNOTREPLACE;
    public static OLEMISC OLEMISC_STATIC;
    public static OLEMISC OLEMISC_CANTLINKINSIDE;
    public static OLEMISC OLEMISC_CANLINKBYOLE1;
    public static OLEMISC OLEMISC_ISLINKOBJECT;
    public static OLEMISC OLEMISC_INSIDEOUT;
    public static OLEMISC OLEMISC_ACTIVATEWHENVISIBLE;
    public static OLEMISC OLEMISC_RENDERINGISDEVICEINDEPENDENT;
    public static OLEMISC OLEMISC_INVISIBLEATRUNTIME;
    public static OLEMISC OLEMISC_ALWAYSRUN;
    public static OLEMISC OLEMISC_ACTSLIKEBUTTON;
    public static OLEMISC OLEMISC_ACTSLIKELABEL;
    public static OLEMISC OLEMISC_NOUIACTIVATE;
    public static OLEMISC OLEMISC_ALIGNABLE;
    public static OLEMISC OLEMISC_SIMPLEFRAME;
    public static OLEMISC OLEMISC_SETCLIENTSITEFIRST;
    public static OLEMISC OLEMISC_IMEMODE;
    public static OLEMISC OLEMISC_IGNOREACTIVATEWHENVISIBLE;
    public static OLEMISC OLEMISC_WANTSTOMENUMERGE;
    public static OLEMISC OLEMISC_SUPPORTSMULTILEVELUNDO;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.OLEVERB : ValueType {
    internal OLEIVERB lVerb;
    internal PWSTR lpszVerbName;
    internal MENU_ITEM_FLAGS fuFlags;
    private UInt32 _grfAttribs;
    internal OLEVERBATTRIB grfAttribs { get; internal set; }
    internal OLEVERBATTRIB get_grfAttribs();
    internal void set_grfAttribs(OLEVERBATTRIB value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.OLEVERBATTRIB : Enum {
    public int value__;
    public static OLEVERBATTRIB OLEVERBATTRIB_NEVERDIRTIES;
    public static OLEVERBATTRIB OLEVERBATTRIB_ONCONTAINERMENU;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.PARAMDESC : ValueType {
    internal PARAMDESCEX* pparamdescex;
    internal PARAMFLAGS wParamFlags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.PARAMDESCEX : ValueType {
    internal UInt32 cBytes;
    internal VARIANT varDefaultValue;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.PARAMFLAGS : Enum {
    public ushort value__;
    public static PARAMFLAGS PARAMFLAG_NONE;
    public static PARAMFLAGS PARAMFLAG_FIN;
    public static PARAMFLAGS PARAMFLAG_FOUT;
    public static PARAMFLAGS PARAMFLAG_FLCID;
    public static PARAMFLAGS PARAMFLAG_FRETVAL;
    public static PARAMFLAGS PARAMFLAG_FOPT;
    public static PARAMFLAGS PARAMFLAG_FHASDEFAULT;
    public static PARAMFLAGS PARAMFLAG_FHASCUSTDATA;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.PICTDESC : ValueType {
    internal UInt32 cbSizeofstruct;
    private UInt32 _picType;
    internal _Anonymous_e__Union Anonymous;
    internal PICTYPE picType { get; internal set; }
    public static PICTDESC FromBitmap(Bitmap bitmap, HPALETTE paletteHandle);
    public static PICTDESC FromIcon(Icon icon, bool copy);
    public static PICTDESC FromMetafile(Metafile metafile);
    public static PICTDESC FromImage(Image image);
    internal PICTYPE get_picType();
    internal void set_picType(PICTYPE value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.PICTYPE : Enum {
    public short value__;
    public static PICTYPE PICTYPE_UNINITIALIZED;
    public static PICTYPE PICTYPE_NONE;
    public static PICTYPE PICTYPE_BITMAP;
    public static PICTYPE PICTYPE_METAFILE;
    public static PICTYPE PICTYPE_ICON;
    public static PICTYPE PICTYPE_ENHMETAFILE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.POINTERINACTIVE : Enum {
    public int value__;
    public static POINTERINACTIVE POINTERINACTIVE_ACTIVATEONENTRY;
    public static POINTERINACTIVE POINTERINACTIVE_DEACTIVATEONLEAVE;
    public static POINTERINACTIVE POINTERINACTIVE_ACTIVATEONDRAG;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.QACONTAINER : ValueType {
    internal UInt32 cbSize;
    internal IOleClientSite* pClientSite;
    internal IAdviseSinkEx* pAdviseSink;
    internal IPropertyNotifySink* pPropertyNotifySink;
    internal IUnknown* pUnkEventSink;
    private UInt32 _dwAmbientFlags;
    internal UInt32 colorFore;
    internal UInt32 colorBack;
    internal IFont* pFont;
    internal IOleUndoManager* pUndoMgr;
    internal UInt32 dwAppearance;
    internal int lcid;
    internal HPALETTE hpal;
    internal IBindHost* pBindHost;
    internal IOleControlSite* pOleControlSite;
    internal IServiceProvider* pServiceProvider;
    internal QACONTAINERFLAGS dwAmbientFlags { get; internal set; }
    internal QACONTAINERFLAGS get_dwAmbientFlags();
    internal void set_dwAmbientFlags(QACONTAINERFLAGS value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.QACONTAINERFLAGS : Enum {
    public int value__;
    public static QACONTAINERFLAGS QACONTAINER_SHOWHATCHING;
    public static QACONTAINERFLAGS QACONTAINER_SHOWGRABHANDLES;
    public static QACONTAINERFLAGS QACONTAINER_USERMODE;
    public static QACONTAINERFLAGS QACONTAINER_DISPLAYASDEFAULT;
    public static QACONTAINERFLAGS QACONTAINER_UIDEAD;
    public static QACONTAINERFLAGS QACONTAINER_AUTOCLIP;
    public static QACONTAINERFLAGS QACONTAINER_MESSAGEREFLECT;
    public static QACONTAINERFLAGS QACONTAINER_SUPPORTSMNEMONICS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Ole.QACONTROL : ValueType {
    internal UInt32 cbSize;
    private UInt32 _dwMiscStatus;
    private UInt32 _dwViewStatus;
    internal UInt32 dwEventCookie;
    internal UInt32 dwPropNotifyCookie;
    private UInt32 _dwPointerActivationPolicy;
    internal OLEMISC dwMiscStatus { get; internal set; }
    internal VIEWSTATUS dwViewStatus { get; internal set; }
    internal POINTERINACTIVE dwPointerActivationPolicy { get; internal set; }
    internal OLEMISC get_dwMiscStatus();
    internal void set_dwMiscStatus(OLEMISC value);
    internal VIEWSTATUS get_dwViewStatus();
    internal void set_dwViewStatus(VIEWSTATUS value);
    internal POINTERINACTIVE get_dwPointerActivationPolicy();
    internal void set_dwPointerActivationPolicy(POINTERINACTIVE value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.READYSTATE : Enum {
    public int value__;
    public static READYSTATE READYSTATE_UNINITIALIZED;
    public static READYSTATE READYSTATE_LOADING;
    public static READYSTATE READYSTATE_LOADED;
    public static READYSTATE READYSTATE_INTERACTIVE;
    public static READYSTATE READYSTATE_COMPLETE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.USERCLASSTYPE : Enum {
    public int value__;
    public static USERCLASSTYPE USERCLASSTYPE_FULL;
    public static USERCLASSTYPE USERCLASSTYPE_SHORT;
    public static USERCLASSTYPE USERCLASSTYPE_APPNAME;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.VARFORMAT_FIRST_DAY : Enum {
    public int value__;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_SYSTEMDEFAULT;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_MONDAY;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_TUESDAY;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_WEDNESDAY;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_THURSDAY;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_FRIDAY;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_SATURDAY;
    public static VARFORMAT_FIRST_DAY VARFORMAT_FIRST_DAY_SUNDAY;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.VARFORMAT_FIRST_WEEK : Enum {
    public int value__;
    public static VARFORMAT_FIRST_WEEK VARFORMAT_FIRST_WEEK_SYSTEMDEFAULT;
    public static VARFORMAT_FIRST_WEEK VARFORMAT_FIRST_WEEK_CONTAINS_JANUARY_FIRST;
    public static VARFORMAT_FIRST_WEEK VARFORMAT_FIRST_WEEK_LARGER_HALF_IN_CURRENT_YEAR;
    public static VARFORMAT_FIRST_WEEK VARFORMAT_FIRST_WEEK_HAS_SEVEN_DAYS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.VIEWSTATUS : Enum {
    public int value__;
    public static VIEWSTATUS VIEWSTATUS_OPAQUE;
    public static VIEWSTATUS VIEWSTATUS_SOLIDBKGND;
    public static VIEWSTATUS VIEWSTATUS_DVASPECTOPAQUE;
    public static VIEWSTATUS VIEWSTATUS_DVASPECTTRANSPARENT;
    public static VIEWSTATUS VIEWSTATUS_SURFACE;
    public static VIEWSTATUS VIEWSTATUS_3DSURFACE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Ole.XFORMCOORDS : Enum {
    public int value__;
    public static XFORMCOORDS XFORMCOORDS_POSITION;
    public static XFORMCOORDS XFORMCOORDS_SIZE;
    public static XFORMCOORDS XFORMCOORDS_HIMETRICTOCONTAINER;
    public static XFORMCOORDS XFORMCOORDS_CONTAINERTOHIMETRIC;
    public static XFORMCOORDS XFORMCOORDS_EVENTCOMPAT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Power.SYSTEM_POWER_STATUS : ValueType {
    internal byte ACLineStatus;
    internal byte BatteryFlag;
    internal byte BatteryLifePercent;
    internal byte SystemStatusFlag;
    internal UInt32 BatteryLifeTime;
    internal UInt32 BatteryFullLifeTime;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Registry.HKEY : ValueType {
    internal IntPtr Value;
    internal static HKEY Null { get; }
    internal bool IsNull { get; }
    internal HKEY(IntPtr value);
    internal static HKEY get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HKEY value);
    public static HKEY op_Explicit(IntPtr value);
    public static bool op_Equality(HKEY left, HKEY right);
    public static bool op_Inequality(HKEY left, HKEY right);
    public sealed virtual bool Equals(HKEY other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.StationsAndDesktops.DESKTOP_ACCESS_FLAGS : Enum {
    public UInt32 value__;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_DELETE;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_READ_CONTROL;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_WRITE_DAC;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_WRITE_OWNER;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_SYNCHRONIZE;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_READOBJECTS;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_CREATEWINDOW;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_CREATEMENU;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_HOOKCONTROL;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_JOURNALRECORD;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_JOURNALPLAYBACK;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_ENUMERATE;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_WRITEOBJECTS;
    public static DESKTOP_ACCESS_FLAGS DESKTOP_SWITCHDESKTOP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.StationsAndDesktops.DESKTOP_CONTROL_FLAGS : Enum {
    public UInt32 value__;
    public static DESKTOP_CONTROL_FLAGS DF_ALLOWOTHERACCOUNTHOOK;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.StationsAndDesktops.HDESK : ValueType {
    internal IntPtr Value;
    internal static HDESK Null { get; }
    internal bool IsNull { get; }
    internal HDESK(IntPtr value);
    internal static HDESK get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HDESK value);
    public static HDESK op_Explicit(IntPtr value);
    public static bool op_Equality(HDESK left, HDESK right);
    public static bool op_Inequality(HDESK left, HDESK right);
    public sealed virtual bool Equals(HDESK other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.StationsAndDesktops.HWINSTA : ValueType {
    internal IntPtr Value;
    internal static HWINSTA Null { get; }
    internal bool IsNull { get; }
    internal HWINSTA(IntPtr value);
    internal static HWINSTA get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HWINSTA value);
    public static HWINSTA op_Explicit(IntPtr value);
    public static bool op_Equality(HWINSTA left, HWINSTA right);
    public static bool op_Inequality(HWINSTA left, HWINSTA right);
    public sealed virtual bool Equals(HWINSTA other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.StationsAndDesktops.USER_OBJECT_INFORMATION_INDEX : Enum {
    public int value__;
    public static USER_OBJECT_INFORMATION_INDEX UOI_FLAGS;
    public static USER_OBJECT_INFORMATION_INDEX UOI_HEAPSIZE;
    public static USER_OBJECT_INFORMATION_INDEX UOI_IO;
    public static USER_OBJECT_INFORMATION_INDEX UOI_NAME;
    public static USER_OBJECT_INFORMATION_INDEX UOI_TYPE;
    public static USER_OBJECT_INFORMATION_INDEX UOI_USER_SID;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.StationsAndDesktops.USEROBJECTFLAGS : ValueType {
    internal BOOL fInherit;
    internal BOOL fReserved;
    internal UInt32 dwFlags;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.SystemServices.MODIFIERKEYS_FLAGS : Enum {
    public UInt32 value__;
    public static MODIFIERKEYS_FLAGS MK_LBUTTON;
    public static MODIFIERKEYS_FLAGS MK_RBUTTON;
    public static MODIFIERKEYS_FLAGS MK_SHIFT;
    public static MODIFIERKEYS_FLAGS MK_CONTROL;
    public static MODIFIERKEYS_FLAGS MK_MBUTTON;
    public static MODIFIERKEYS_FLAGS MK_XBUTTON1;
    public static MODIFIERKEYS_FLAGS MK_XBUTTON2;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.SystemServices.RECO_FLAGS : Enum {
    public UInt32 value__;
    public static RECO_FLAGS RECO_PASTE;
    public static RECO_FLAGS RECO_DROP;
    public static RECO_FLAGS RECO_COPY;
    public static RECO_FLAGS RECO_CUT;
    public static RECO_FLAGS RECO_DRAG;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.SystemServices.SFGAO_FLAGS : Enum {
    public UInt32 value__;
    public static SFGAO_FLAGS SFGAO_CANCOPY;
    public static SFGAO_FLAGS SFGAO_CANMOVE;
    public static SFGAO_FLAGS SFGAO_CANLINK;
    public static SFGAO_FLAGS SFGAO_STORAGE;
    public static SFGAO_FLAGS SFGAO_CANRENAME;
    public static SFGAO_FLAGS SFGAO_CANDELETE;
    public static SFGAO_FLAGS SFGAO_HASPROPSHEET;
    public static SFGAO_FLAGS SFGAO_DROPTARGET;
    public static SFGAO_FLAGS SFGAO_CAPABILITYMASK;
    public static SFGAO_FLAGS SFGAO_PLACEHOLDER;
    public static SFGAO_FLAGS SFGAO_SYSTEM;
    public static SFGAO_FLAGS SFGAO_ENCRYPTED;
    public static SFGAO_FLAGS SFGAO_ISSLOW;
    public static SFGAO_FLAGS SFGAO_GHOSTED;
    public static SFGAO_FLAGS SFGAO_LINK;
    public static SFGAO_FLAGS SFGAO_SHARE;
    public static SFGAO_FLAGS SFGAO_READONLY;
    public static SFGAO_FLAGS SFGAO_HIDDEN;
    public static SFGAO_FLAGS SFGAO_DISPLAYATTRMASK;
    public static SFGAO_FLAGS SFGAO_FILESYSANCESTOR;
    public static SFGAO_FLAGS SFGAO_FOLDER;
    public static SFGAO_FLAGS SFGAO_FILESYSTEM;
    public static SFGAO_FLAGS SFGAO_HASSUBFOLDER;
    public static SFGAO_FLAGS SFGAO_CONTENTSMASK;
    public static SFGAO_FLAGS SFGAO_VALIDATE;
    public static SFGAO_FLAGS SFGAO_REMOVABLE;
    public static SFGAO_FLAGS SFGAO_COMPRESSED;
    public static SFGAO_FLAGS SFGAO_BROWSABLE;
    public static SFGAO_FLAGS SFGAO_NONENUMERATED;
    public static SFGAO_FLAGS SFGAO_NEWCONTENT;
    public static SFGAO_FLAGS SFGAO_CANMONIKER;
    public static SFGAO_FLAGS SFGAO_HASSTORAGE;
    public static SFGAO_FLAGS SFGAO_STREAM;
    public static SFGAO_FLAGS SFGAO_STORAGEANCESTOR;
    public static SFGAO_FLAGS SFGAO_STORAGECAPMASK;
    public static SFGAO_FLAGS SFGAO_PKEYSFGAOMASK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.SystemServices.STATIC_STYLES : Enum {
    public UInt32 value__;
    public static STATIC_STYLES SS_LEFT;
    public static STATIC_STYLES SS_CENTER;
    public static STATIC_STYLES SS_RIGHT;
    public static STATIC_STYLES SS_ICON;
    public static STATIC_STYLES SS_BLACKRECT;
    public static STATIC_STYLES SS_GRAYRECT;
    public static STATIC_STYLES SS_WHITERECT;
    public static STATIC_STYLES SS_BLACKFRAME;
    public static STATIC_STYLES SS_GRAYFRAME;
    public static STATIC_STYLES SS_WHITEFRAME;
    public static STATIC_STYLES SS_USERITEM;
    public static STATIC_STYLES SS_SIMPLE;
    public static STATIC_STYLES SS_LEFTNOWORDWRAP;
    public static STATIC_STYLES SS_OWNERDRAW;
    public static STATIC_STYLES SS_BITMAP;
    public static STATIC_STYLES SS_ENHMETAFILE;
    public static STATIC_STYLES SS_ETCHEDHORZ;
    public static STATIC_STYLES SS_ETCHEDVERT;
    public static STATIC_STYLES SS_ETCHEDFRAME;
    public static STATIC_STYLES SS_TYPEMASK;
    public static STATIC_STYLES SS_REALSIZECONTROL;
    public static STATIC_STYLES SS_NOPREFIX;
    public static STATIC_STYLES SS_NOTIFY;
    public static STATIC_STYLES SS_CENTERIMAGE;
    public static STATIC_STYLES SS_RIGHTJUST;
    public static STATIC_STYLES SS_REALSIZEIMAGE;
    public static STATIC_STYLES SS_SUNKEN;
    public static STATIC_STYLES SS_EDITCONTROL;
    public static STATIC_STYLES SS_ENDELLIPSIS;
    public static STATIC_STYLES SS_PATHELLIPSIS;
    public static STATIC_STYLES SS_WORDELLIPSIS;
    public static STATIC_STYLES SS_ELLIPSISMASK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Threading.GET_GUI_RESOURCES_FLAGS : Enum {
    public UInt32 value__;
    public static GET_GUI_RESOURCES_FLAGS GR_GDIOBJECTS;
    public static GET_GUI_RESOURCES_FLAGS GR_GDIOBJECTS_PEAK;
    public static GET_GUI_RESOURCES_FLAGS GR_USEROBJECTS;
    public static GET_GUI_RESOURCES_FLAGS GR_USEROBJECTS_PEAK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Threading.STARTUPINFOW : ValueType {
    internal UInt32 cb;
    internal PWSTR lpReserved;
    internal PWSTR lpDesktop;
    internal PWSTR lpTitle;
    internal UInt32 dwX;
    internal UInt32 dwY;
    internal UInt32 dwXSize;
    internal UInt32 dwYSize;
    internal UInt32 dwXCountChars;
    internal UInt32 dwYCountChars;
    internal UInt32 dwFillAttribute;
    internal STARTUPINFOW_FLAGS dwFlags;
    internal ushort wShowWindow;
    internal ushort cbReserved2;
    internal Byte* lpReserved2;
    internal HANDLE hStdInput;
    internal HANDLE hStdOutput;
    internal HANDLE hStdError;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Threading.STARTUPINFOW_FLAGS : Enum {
    public UInt32 value__;
    public static STARTUPINFOW_FLAGS STARTF_FORCEONFEEDBACK;
    public static STARTUPINFOW_FLAGS STARTF_FORCEOFFFEEDBACK;
    public static STARTUPINFOW_FLAGS STARTF_PREVENTPINNING;
    public static STARTUPINFOW_FLAGS STARTF_RUNFULLSCREEN;
    public static STARTUPINFOW_FLAGS STARTF_TITLEISAPPID;
    public static STARTUPINFOW_FLAGS STARTF_TITLEISLINKNAME;
    public static STARTUPINFOW_FLAGS STARTF_UNTRUSTEDSOURCE;
    public static STARTUPINFOW_FLAGS STARTF_USECOUNTCHARS;
    public static STARTUPINFOW_FLAGS STARTF_USEFILLATTRIBUTE;
    public static STARTUPINFOW_FLAGS STARTF_USEHOTKEY;
    public static STARTUPINFOW_FLAGS STARTF_USEPOSITION;
    public static STARTUPINFOW_FLAGS STARTF_USESHOWWINDOW;
    public static STARTUPINFOW_FLAGS STARTF_USESIZE;
    public static STARTUPINFOW_FLAGS STARTF_USESTDHANDLES;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.System.Variant.VARENUM : Enum {
    public ushort value__;
    public static VARENUM VT_EMPTY;
    public static VARENUM VT_NULL;
    public static VARENUM VT_I2;
    public static VARENUM VT_I4;
    public static VARENUM VT_R4;
    public static VARENUM VT_R8;
    public static VARENUM VT_CY;
    public static VARENUM VT_DATE;
    public static VARENUM VT_BSTR;
    public static VARENUM VT_DISPATCH;
    public static VARENUM VT_ERROR;
    public static VARENUM VT_BOOL;
    public static VARENUM VT_VARIANT;
    public static VARENUM VT_UNKNOWN;
    public static VARENUM VT_DECIMAL;
    public static VARENUM VT_I1;
    public static VARENUM VT_UI1;
    public static VARENUM VT_UI2;
    public static VARENUM VT_UI4;
    public static VARENUM VT_I8;
    public static VARENUM VT_UI8;
    public static VARENUM VT_INT;
    public static VARENUM VT_UINT;
    public static VARENUM VT_VOID;
    public static VARENUM VT_HRESULT;
    public static VARENUM VT_PTR;
    public static VARENUM VT_SAFEARRAY;
    public static VARENUM VT_CARRAY;
    public static VARENUM VT_USERDEFINED;
    public static VARENUM VT_LPSTR;
    public static VARENUM VT_LPWSTR;
    public static VARENUM VT_RECORD;
    public static VARENUM VT_INT_PTR;
    public static VARENUM VT_UINT_PTR;
    public static VARENUM VT_FILETIME;
    public static VARENUM VT_BLOB;
    public static VARENUM VT_STREAM;
    public static VARENUM VT_STORAGE;
    public static VARENUM VT_STREAMED_OBJECT;
    public static VARENUM VT_STORED_OBJECT;
    public static VARENUM VT_BLOB_OBJECT;
    public static VARENUM VT_CF;
    public static VARENUM VT_CLSID;
    public static VARENUM VT_VERSIONED_STREAM;
    public static VARENUM VT_BSTR_BLOB;
    public static VARENUM VT_VECTOR;
    public static VARENUM VT_ARRAY;
    public static VARENUM VT_BYREF;
    public static VARENUM VT_RESERVED;
    public static VARENUM VT_ILLEGAL;
    public static VARENUM VT_ILLEGALMASKED;
    public static VARENUM VT_TYPEMASK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.System.Variant.VARIANT : ValueType {
    [CompilerGeneratedAttribute]
private static VARIANT <Empty>k__BackingField;
    internal _Anonymous_e__Union Anonymous;
    public static VARIANT Empty { get; }
    public bool IsEmpty { get; }
    public VARENUM Type { get; }
    public bool Byref { get; }
    [UnscopedRefAttribute]
public VARENUM& vt { get; }
    [UnscopedRefAttribute]
public _Anonymous_e__Union& data { get; }
    [CompilerGeneratedAttribute]
public static VARIANT get_Empty();
    public bool get_IsEmpty();
    public VARENUM get_Type();
    public bool get_Byref();
    public VARENUM& get_vt();
    public _Anonymous_e__Union& get_data();
    public void Clear();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public object ToObject();
    private static object ToObject(VARENUM type, bool byRef, Void* data);
    private static Type GetRecordElementType(IRecordInfo* record);
    private static object ToArray(SAFEARRAY* psa, VARENUM vt);
    private static void TransposeArray(SAFEARRAY* psa, Array array, VARENUM arrayType);
    private static void SetArrayValue(SAFEARRAY* psa, Array array, Span`1<int> indices, Span`1<int> lowerBounds, VARENUM arrayType);
    private static Array CreateArrayFromSafeArray(SAFEARRAY* psa, VARENUM vt);
    private static UInt32 GetElementSizeForVarType(VARENUM vt);
    [NullableContextAttribute("1")]
private static object ToVector(CA& ca, VARENUM vectorType);
    [NullableContextAttribute("1")]
private static Span`1<T> GetSpan(Array array);
    public static bool op_Explicit(VARIANT value);
    public static VARIANT op_Explicit(bool value);
    public static short op_Explicit(VARIANT value);
    public static VARIANT op_Explicit(short value);
    public static int op_Explicit(VARIANT value);
    public static VARIANT op_Explicit(int value);
    public static UInt32 op_Explicit(VARIANT value);
    public static VARIANT op_Explicit(UInt32 value);
    public static BSTR op_Explicit(VARIANT value);
    [NullableContextAttribute("1")]
public static VARIANT op_Explicit(string value);
    public static VARIANT op_Explicit(BSTR value);
    public static CY op_Explicit(VARIANT value);
    public static decimal op_Explicit(VARIANT value);
    public static VARIANT op_Explicit(IUnknown* value);
    public static IUnknown* op_Explicit(VARIANT value);
    [NullableContextAttribute("1")]
private static T ThrowInvalidCast();
    [NullableContextAttribute("2")]
public static VARIANT FromObject(object value);
    [CompilerGeneratedAttribute]
internal static void <TransposeArray>g__StackTransposeArray|19_0(SAFEARRAY* psa, Array array, VARENUM arrayType);
    [CompilerGeneratedAttribute]
internal static void <TransposeArray>g__HeapTransposeArray|19_1(SAFEARRAY* psa, Array array, VARENUM arrayType);
    [CompilerGeneratedAttribute]
internal static void <TransposeArray>g__InternalTransposeArray|19_2(SAFEARRAY* psa, Array array, VARENUM arrayType, Span`1<int> indices, Span`1<int> lower, Span`1<int> upper);
    [CompilerGeneratedAttribute]
internal static void <SetArrayValue>g__SetValue|20_0(Array array, T value, Span`1<int> indices, Span`1<int> lowerBounds);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
internal class Windows.Win32.System.Variant.VARIANTVector : ValueType {
    [NullableAttribute("1")]
public VARIANT[] Variants;
    public VARIANTVector(Object[] values);
    public void Dispose();
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Accessibility_IAccessible_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT get_accChildCount(Interface this, Int32& pcountChildren);
    [ExtensionAttribute]
internal static HRESULT get_accRole(Interface this, VARIANT varChild, VARIANT& pvarRole);
    [ExtensionAttribute]
internal static HRESULT get_accState(Interface this, VARIANT varChild, VARIANT& pvarState);
    [ExtensionAttribute]
internal static HRESULT get_accHelpTopic(Interface this, BSTR* pszHelpFile, VARIANT varChild, Int32& pidTopic);
    [ExtensionAttribute]
internal static HRESULT get_accFocus(Interface this, VARIANT& pvarChild);
    [ExtensionAttribute]
internal static HRESULT get_accSelection(Interface this, VARIANT& pvarChildren);
    [ExtensionAttribute]
internal static HRESULT accLocation(Interface this, Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, VARIANT varChild);
    [ExtensionAttribute]
internal static HRESULT accNavigate(Interface this, int navDir, VARIANT varStart, VARIANT& pvarEndUpAt);
    [ExtensionAttribute]
internal static HRESULT accHitTest(Interface this, int xLeft, int yTop, VARIANT& pvarChild);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Controls_RichEdit_IRichEditOleCallback_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetInPlaceContext(Interface this, IOleInPlaceFrame** lplpFrame, IOleInPlaceUIWindow** lplpDoc, OLEINPLACEFRAMEINFO& lpFrameInfo);
    [ExtensionAttribute]
internal static HRESULT QueryInsertObject(Interface this, Guid& lpclsid, IStorage* lpstg, int cp);
    [ExtensionAttribute]
internal static HRESULT QueryAcceptData(Interface this, IDataObject* lpdataobj, UInt16& lpcfFormat, RECO_FLAGS reco, BOOL fReally, HGLOBAL hMetaPict);
    [ExtensionAttribute]
internal static HRESULT GetClipboardData(Interface this, CHARRANGE& lpchrg, UInt32 reco, IDataObject** lplpdataobj);
    [ExtensionAttribute]
internal static HRESULT GetDragDropEffect(Interface this, BOOL fDrag, MODIFIERKEYS_FLAGS grfKeyState, DROPEFFECT& pdwEffect);
    [ExtensionAttribute]
internal static HRESULT GetContextMenu(Interface this, RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE seltype, IOleObject* lpoleobj, CHARRANGE& lpchrg, HMENU& lphmenu);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IAutoComplete_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Init(Interface this, HWND hwndEdit, IUnknown* punkACL, string pwszRegKeyPath, string pwszQuickComplete);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IAutoComplete2_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT Init(Interface this, HWND hwndEdit, IUnknown* punkACL, string pwszRegKeyPath, string pwszQuickComplete);
    [ExtensionAttribute]
internal static HRESULT GetOptions(Interface this, UInt32& pdwFlag);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IFileDialog_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT SetFileTypes(Interface this, ReadOnlySpan`1<COMDLG_FILTERSPEC> rgFilterSpec);
    [ExtensionAttribute]
internal static HRESULT GetFileTypeIndex(Interface this, UInt32& piFileType);
    [ExtensionAttribute]
internal static HRESULT Advise(Interface this, IFileDialogEvents* pfde, UInt32& pdwCookie);
    [ExtensionAttribute]
internal static HRESULT GetOptions(Interface this, FILEOPENDIALOGOPTIONS& pfos);
    [ExtensionAttribute]
internal static HRESULT SetFileName(Interface this, string pszName);
    [ExtensionAttribute]
internal static HRESULT GetFileName(Interface this, PWSTR& pszName);
    [ExtensionAttribute]
internal static HRESULT SetTitle(Interface this, string pszTitle);
    [ExtensionAttribute]
internal static HRESULT SetOkButtonLabel(Interface this, string pszText);
    [ExtensionAttribute]
internal static HRESULT SetFileNameLabel(Interface this, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT SetDefaultExtension(Interface this, string pszDefaultExtension);
    [ExtensionAttribute]
internal static HRESULT SetClientGuid(Interface this, Guid& guid);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IFileDialogCustomize_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT AddMenu(Interface this, UInt32 dwIDCtl, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT AddPushButton(Interface this, UInt32 dwIDCtl, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT AddCheckButton(Interface this, UInt32 dwIDCtl, string pszLabel, BOOL bChecked);
    [ExtensionAttribute]
internal static HRESULT AddEditBox(Interface this, UInt32 dwIDCtl, string pszText);
    [ExtensionAttribute]
internal static HRESULT AddText(Interface this, UInt32 dwIDCtl, string pszText);
    [ExtensionAttribute]
internal static HRESULT SetControlLabel(Interface this, UInt32 dwIDCtl, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT GetControlState(Interface this, UInt32 dwIDCtl, CDCONTROLSTATEF& pdwState);
    [ExtensionAttribute]
internal static HRESULT GetEditBoxText(Interface this, UInt32 dwIDCtl, UInt16*& ppszText);
    [ExtensionAttribute]
internal static HRESULT SetEditBoxText(Interface this, UInt32 dwIDCtl, string pszText);
    [ExtensionAttribute]
internal static HRESULT GetCheckButtonState(Interface this, UInt32 dwIDCtl, BOOL& pbChecked);
    [ExtensionAttribute]
internal static HRESULT AddControlItem(Interface this, UInt32 dwIDCtl, UInt32 dwIDItem, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT GetControlItemState(Interface this, UInt32 dwIDCtl, UInt32 dwIDItem, CDCONTROLSTATEF& pdwState);
    [ExtensionAttribute]
internal static HRESULT GetSelectedControlItem(Interface this, UInt32 dwIDCtl, UInt32& pdwIDItem);
    [ExtensionAttribute]
internal static HRESULT StartVisualGroup(Interface this, UInt32 dwIDCtl, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT SetControlItemText(Interface this, UInt32 dwIDCtl, UInt32 dwIDItem, string pszLabel);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IFileDialogEvents_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT OnShareViolation(Interface this, IFileDialog* pfd, IShellItem* psi, FDE_SHAREVIOLATION_RESPONSE& pResponse);
    [ExtensionAttribute]
internal static HRESULT OnOverwrite(Interface this, IFileDialog* pfd, IShellItem* psi, FDE_OVERWRITE_RESPONSE& pResponse);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IFileOpenDialog_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT SetFileTypes(Interface this, ReadOnlySpan`1<COMDLG_FILTERSPEC> rgFilterSpec);
    [ExtensionAttribute]
internal static HRESULT GetFileTypeIndex(Interface this, UInt32& piFileType);
    [ExtensionAttribute]
internal static HRESULT Advise(Interface this, IFileDialogEvents* pfde, UInt32& pdwCookie);
    [ExtensionAttribute]
internal static HRESULT GetOptions(Interface this, FILEOPENDIALOGOPTIONS& pfos);
    [ExtensionAttribute]
internal static HRESULT SetFileName(Interface this, string pszName);
    [ExtensionAttribute]
internal static HRESULT GetFileName(Interface this, PWSTR& pszName);
    [ExtensionAttribute]
internal static HRESULT SetTitle(Interface this, string pszTitle);
    [ExtensionAttribute]
internal static HRESULT SetOkButtonLabel(Interface this, string pszText);
    [ExtensionAttribute]
internal static HRESULT SetFileNameLabel(Interface this, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT SetDefaultExtension(Interface this, string pszDefaultExtension);
    [ExtensionAttribute]
internal static HRESULT SetClientGuid(Interface this, Guid& guid);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IFileOperationProgressSink_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT PreRenameItem(Interface this, UInt32 dwFlags, IShellItem* psiItem, string pszNewName);
    [ExtensionAttribute]
internal static HRESULT PostRenameItem(Interface this, UInt32 dwFlags, IShellItem* psiItem, string pszNewName, HRESULT hrRename, IShellItem* psiNewlyCreated);
    [ExtensionAttribute]
internal static HRESULT PreMoveItem(Interface this, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName);
    [ExtensionAttribute]
internal static HRESULT PostMoveItem(Interface this, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName, HRESULT hrMove, IShellItem* psiNewlyCreated);
    [ExtensionAttribute]
internal static HRESULT PreCopyItem(Interface this, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName);
    [ExtensionAttribute]
internal static HRESULT PostCopyItem(Interface this, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName, HRESULT hrCopy, IShellItem* psiNewlyCreated);
    [ExtensionAttribute]
internal static HRESULT PreNewItem(Interface this, UInt32 dwFlags, IShellItem* psiDestinationFolder, string pszNewName);
    [ExtensionAttribute]
internal static HRESULT PostNewItem(Interface this, UInt32 dwFlags, IShellItem* psiDestinationFolder, string pszNewName, string pszTemplateName, UInt32 dwFileAttributes, HRESULT hrNew, IShellItem* psiNewItem);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IFileSaveDialog_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT SetFileTypes(Interface this, ReadOnlySpan`1<COMDLG_FILTERSPEC> rgFilterSpec);
    [ExtensionAttribute]
internal static HRESULT GetFileTypeIndex(Interface this, UInt32& piFileType);
    [ExtensionAttribute]
internal static HRESULT Advise(Interface this, IFileDialogEvents* pfde, UInt32& pdwCookie);
    [ExtensionAttribute]
internal static HRESULT GetOptions(Interface this, FILEOPENDIALOGOPTIONS& pfos);
    [ExtensionAttribute]
internal static HRESULT SetFileName(Interface this, string pszName);
    [ExtensionAttribute]
internal static HRESULT GetFileName(Interface this, PWSTR& pszName);
    [ExtensionAttribute]
internal static HRESULT SetTitle(Interface this, string pszTitle);
    [ExtensionAttribute]
internal static HRESULT SetOkButtonLabel(Interface this, string pszText);
    [ExtensionAttribute]
internal static HRESULT SetFileNameLabel(Interface this, string pszLabel);
    [ExtensionAttribute]
internal static HRESULT SetDefaultExtension(Interface this, string pszDefaultExtension);
    [ExtensionAttribute]
internal static HRESULT SetClientGuid(Interface this, Guid& guid);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IShellFolder_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT ParseDisplayName(Interface this, HWND hwnd, IBindCtx* pbc, PWSTR pszDisplayName, ITEMIDLIST*& ppidl, UInt32& pdwAttributes);
    [ExtensionAttribute]
internal static HRESULT BindToObject(Interface this, ITEMIDLIST& pidl, IBindCtx* pbc, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT BindToStorage(Interface this, ITEMIDLIST& pidl, IBindCtx* pbc, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT CompareIDs(Interface this, LPARAM lParam, ITEMIDLIST& pidl1, ITEMIDLIST& pidl2);
    [ExtensionAttribute]
internal static HRESULT CreateViewObject(Interface this, HWND hwndOwner, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT GetAttributesOf(Interface this, UInt32 cidl, ITEMIDLIST** apidl, UInt32& rgfInOut);
    [ExtensionAttribute]
internal static HRESULT GetUIObjectOf(Interface this, HWND hwndOwner, UInt32 cidl, ITEMIDLIST** apidl, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT GetDisplayNameOf(Interface this, ITEMIDLIST& pidl, SHGDNF uFlags, STRRET& pName);
    [ExtensionAttribute]
internal static HRESULT SetNameOf(Interface this, HWND hwnd, ITEMIDLIST& pidl, string pszName, SHGDNF uFlags, ITEMIDLIST** ppidlOut);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IShellItem_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT BindToHandler(Interface this, IBindCtx* pbc, Guid& bhid, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT GetDisplayName(Interface this, SIGDN sigdnName, PWSTR& ppszName);
    [ExtensionAttribute]
internal static HRESULT GetAttributes(Interface this, SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS& psfgaoAttribs);
    [ExtensionAttribute]
internal static HRESULT Compare(Interface this, IShellItem* psi, UInt32 hint, Int32& piOrder);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IShellItemArray_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT BindToHandler(Interface this, IBindCtx* pbc, Guid& bhid, Guid& riid, Void*& ppvOut);
    [ExtensionAttribute]
internal static HRESULT GetPropertyStore(Interface this, GETPROPERTYSTOREFLAGS flags, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT GetPropertyDescriptionList(Interface this, PROPERTYKEY& keyType, Guid& riid, Void*& ppv);
    [ExtensionAttribute]
internal static HRESULT GetAttributes(Interface this, SIATTRIBFLAGS AttribFlags, SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS& psfgaoAttribs);
    [ExtensionAttribute]
internal static HRESULT GetCount(Interface this, UInt32& pdwNumItems);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_IShellItemFilter_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetEnumFlagsForItem(Interface this, IShellItem* psi, UInt32& pgrfFlags);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_PropertiesSystem_IPropertyDescriptionList_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetCount(Interface this, UInt32& pcElem);
    [ExtensionAttribute]
internal static HRESULT GetAt(Interface this, UInt32 iElem, Guid& riid, Void*& ppv);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal static class Windows.Win32.UI_Shell_PropertiesSystem_IPropertyStore_Extensions : object {
    [ExtensionAttribute]
internal static HRESULT GetCount(Interface this, UInt32& cProps);
    [ExtensionAttribute]
internal static HRESULT GetAt(Interface this, UInt32 iProp, PROPERTYKEY& pkey);
    [ExtensionAttribute]
internal static HRESULT GetValue(Interface this, PROPERTYKEY& key, PROPVARIANT& pv);
    [ExtensionAttribute]
internal static HRESULT SetValue(Interface this, PROPERTYKEY& key, PROPVARIANT& propvar);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Accessibility.HIGHCONTRASTW : ValueType {
    internal UInt32 cbSize;
    internal HIGHCONTRASTW_FLAGS dwFlags;
    internal PWSTR lpszDefaultScheme;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Accessibility.HIGHCONTRASTW_FLAGS : Enum {
    public UInt32 value__;
    public static HIGHCONTRASTW_FLAGS HCF_HIGHCONTRASTON;
    public static HIGHCONTRASTW_FLAGS HCF_AVAILABLE;
    public static HIGHCONTRASTW_FLAGS HCF_HOTKEYACTIVE;
    public static HIGHCONTRASTW_FLAGS HCF_CONFIRMHOTKEY;
    public static HIGHCONTRASTW_FLAGS HCF_HOTKEYSOUND;
    public static HIGHCONTRASTW_FLAGS HCF_INDICATOR;
    public static HIGHCONTRASTW_FLAGS HCF_HOTKEYAVAILABLE;
    public static HIGHCONTRASTW_FLAGS HCF_OPTION_NOTHEMECHANGE;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Accessibility.HWINEVENTHOOK : ValueType {
    internal IntPtr Value;
    internal static HWINEVENTHOOK Null { get; }
    internal bool IsNull { get; }
    internal HWINEVENTHOOK(IntPtr value);
    internal static HWINEVENTHOOK get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HWINEVENTHOOK value);
    public static HWINEVENTHOOK op_Explicit(IntPtr value);
    public static bool op_Equality(HWINEVENTHOOK left, HWINEVENTHOOK right);
    public static bool op_Inequality(HWINEVENTHOOK left, HWINEVENTHOOK right);
    public sealed virtual bool Equals(HWINEVENTHOOK other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GuidAttribute("618736E0-3C3D-11CF-810C-00AA00389B71")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Accessibility.IAccessible : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IAccessible();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetTypeInfoCount(UInt32& pctinfo);
    public void GetTypeInfoCount(UInt32* pctinfo);
    public void GetTypeInfo(UInt32 iTInfo, UInt32 lcid, ITypeInfo** ppTInfo);
    internal void GetIDsOfNames(Guid& riid, Span`1<PWSTR> rgszNames, UInt32 lcid, Span`1<int> rgDispId);
    public void GetIDsOfNames(Guid* riid, PWSTR* rgszNames, UInt32 cNames, UInt32 lcid, Int32* rgDispId);
    internal void Invoke(int dispIdMember, Guid& riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS& pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    public void Invoke(int dispIdMember, Guid* riid, UInt32 lcid, DISPATCH_FLAGS wFlags, DISPPARAMS* pDispParams, VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UInt32* puArgErr);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accParent(IAccessible* pThis, IDispatch** ppdispParent);
    public HRESULT get_accParent(IDispatch** ppdispParent);
    internal HRESULT get_accChildCount(Int32& pcountChildren);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accChildCount(IAccessible* pThis, Int32* pcountChildren);
    public HRESULT get_accChildCount(Int32* pcountChildren);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accChild(IAccessible* pThis, VARIANT varChild, IDispatch** ppdispChild);
    public HRESULT get_accChild(VARIANT varChild, IDispatch** ppdispChild);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accName(IAccessible* pThis, VARIANT varChild, BSTR* pszName);
    public HRESULT get_accName(VARIANT varChild, BSTR* pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accValue(IAccessible* pThis, VARIANT varChild, BSTR* pszValue);
    public HRESULT get_accValue(VARIANT varChild, BSTR* pszValue);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accDescription(IAccessible* pThis, VARIANT varChild, BSTR* pszDescription);
    public HRESULT get_accDescription(VARIANT varChild, BSTR* pszDescription);
    internal HRESULT get_accRole(VARIANT varChild, VARIANT& pvarRole);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accRole(IAccessible* pThis, VARIANT varChild, VARIANT* pvarRole);
    public HRESULT get_accRole(VARIANT varChild, VARIANT* pvarRole);
    internal HRESULT get_accState(VARIANT varChild, VARIANT& pvarState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accState(IAccessible* pThis, VARIANT varChild, VARIANT* pvarState);
    public HRESULT get_accState(VARIANT varChild, VARIANT* pvarState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accHelp(IAccessible* pThis, VARIANT varChild, BSTR* pszHelp);
    public HRESULT get_accHelp(VARIANT varChild, BSTR* pszHelp);
    internal HRESULT get_accHelpTopic(BSTR* pszHelpFile, VARIANT varChild, Int32& pidTopic);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accHelpTopic(IAccessible* pThis, BSTR* pszHelpFile, VARIANT varChild, Int32* pidTopic);
    public HRESULT get_accHelpTopic(BSTR* pszHelpFile, VARIANT varChild, Int32* pidTopic);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accKeyboardShortcut(IAccessible* pThis, VARIANT varChild, BSTR* pszKeyboardShortcut);
    public HRESULT get_accKeyboardShortcut(VARIANT varChild, BSTR* pszKeyboardShortcut);
    internal HRESULT get_accFocus(VARIANT& pvarChild);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accFocus(IAccessible* pThis, VARIANT* pvarChild);
    public HRESULT get_accFocus(VARIANT* pvarChild);
    internal HRESULT get_accSelection(VARIANT& pvarChildren);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accSelection(IAccessible* pThis, VARIANT* pvarChildren);
    public HRESULT get_accSelection(VARIANT* pvarChildren);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_accDefaultAction(IAccessible* pThis, VARIANT varChild, BSTR* pszDefaultAction);
    public HRESULT get_accDefaultAction(VARIANT varChild, BSTR* pszDefaultAction);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT accSelect(IAccessible* pThis, int flagsSelect, VARIANT varChild);
    public HRESULT accSelect(int flagsSelect, VARIANT varChild);
    internal HRESULT accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, VARIANT varChild);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT accLocation(IAccessible* pThis, Int32* pxLeft, Int32* pyTop, Int32* pcxWidth, Int32* pcyHeight, VARIANT varChild);
    public HRESULT accLocation(Int32* pxLeft, Int32* pyTop, Int32* pcxWidth, Int32* pcyHeight, VARIANT varChild);
    internal HRESULT accNavigate(int navDir, VARIANT varStart, VARIANT& pvarEndUpAt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT accNavigate(IAccessible* pThis, int navDir, VARIANT varStart, VARIANT* pvarEndUpAt);
    public HRESULT accNavigate(int navDir, VARIANT varStart, VARIANT* pvarEndUpAt);
    internal HRESULT accHitTest(int xLeft, int yTop, VARIANT& pvarChild);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT accHitTest(IAccessible* pThis, int xLeft, int yTop, VARIANT* pvarChild);
    public HRESULT accHitTest(int xLeft, int yTop, VARIANT* pvarChild);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT accDoDefaultAction(IAccessible* pThis, VARIANT varChild);
    public HRESULT accDoDefaultAction(VARIANT varChild);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_accName(IAccessible* pThis, VARIANT varChild, BSTR szName);
    public HRESULT put_accName(VARIANT varChild, BSTR szName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT put_accValue(IAccessible* pThis, VARIANT varChild, BSTR szValue);
    public HRESULT put_accValue(VARIANT varChild, BSTR szValue);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B38B8077-1FC3-42A5-8CAE-D40C2215055A")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Accessibility.IScrollProvider : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    internal double HorizontalScrollPercent { get; }
    internal double VerticalScrollPercent { get; }
    internal double HorizontalViewSize { get; }
    internal double VerticalViewSize { get; }
    internal BOOL HorizontallyScrollable { get; }
    internal BOOL VerticallyScrollable { get; }
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IScrollProvider();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Scroll(IScrollProvider* pThis, ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetScrollPercent(IScrollProvider* pThis, double horizontalPercent, double verticalPercent);
    public void SetScrollPercent(double horizontalPercent, double verticalPercent);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_HorizontalScrollPercent(IScrollProvider* pThis, Double* pRetVal);
    internal double get_HorizontalScrollPercent();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_VerticalScrollPercent(IScrollProvider* pThis, Double* pRetVal);
    internal double get_VerticalScrollPercent();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_HorizontalViewSize(IScrollProvider* pThis, Double* pRetVal);
    internal double get_HorizontalViewSize();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_VerticalViewSize(IScrollProvider* pThis, Double* pRetVal);
    internal double get_VerticalViewSize();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_HorizontallyScrollable(IScrollProvider* pThis, BOOL* pRetVal);
    internal BOOL get_HorizontallyScrollable();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT get_VerticallyScrollable(IScrollProvider* pThis, BOOL* pRetVal);
    internal BOOL get_VerticallyScrollable();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Accessibility.ScrollAmount : Enum {
    public int value__;
    public static ScrollAmount ScrollAmount_LargeDecrement;
    public static ScrollAmount ScrollAmount_SmallDecrement;
    public static ScrollAmount ScrollAmount_NoAmount;
    public static ScrollAmount ScrollAmount_LargeIncrement;
    public static ScrollAmount ScrollAmount_SmallIncrement;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.ColorSystem.ICM_MODE : Enum {
    public int value__;
    public static ICM_MODE ICM_OFF;
    public static ICM_MODE ICM_ON;
    public static ICM_MODE ICM_QUERY;
    public static ICM_MODE ICM_DONE_OUTSIDEDC;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.Dialogs.COMMON_DLG_ERRORS : Enum {
    public UInt32 value__;
    public static COMMON_DLG_ERRORS CDERR_DIALOGFAILURE;
    public static COMMON_DLG_ERRORS CDERR_GENERALCODES;
    public static COMMON_DLG_ERRORS CDERR_STRUCTSIZE;
    public static COMMON_DLG_ERRORS CDERR_INITIALIZATION;
    public static COMMON_DLG_ERRORS CDERR_NOTEMPLATE;
    public static COMMON_DLG_ERRORS CDERR_NOHINSTANCE;
    public static COMMON_DLG_ERRORS CDERR_LOADSTRFAILURE;
    public static COMMON_DLG_ERRORS CDERR_FINDRESFAILURE;
    public static COMMON_DLG_ERRORS CDERR_LOADRESFAILURE;
    public static COMMON_DLG_ERRORS CDERR_LOCKRESFAILURE;
    public static COMMON_DLG_ERRORS CDERR_MEMALLOCFAILURE;
    public static COMMON_DLG_ERRORS CDERR_MEMLOCKFAILURE;
    public static COMMON_DLG_ERRORS CDERR_NOHOOK;
    public static COMMON_DLG_ERRORS CDERR_REGISTERMSGFAIL;
    public static COMMON_DLG_ERRORS PDERR_PRINTERCODES;
    public static COMMON_DLG_ERRORS PDERR_SETUPFAILURE;
    public static COMMON_DLG_ERRORS PDERR_PARSEFAILURE;
    public static COMMON_DLG_ERRORS PDERR_RETDEFFAILURE;
    public static COMMON_DLG_ERRORS PDERR_LOADDRVFAILURE;
    public static COMMON_DLG_ERRORS PDERR_GETDEVMODEFAIL;
    public static COMMON_DLG_ERRORS PDERR_INITFAILURE;
    public static COMMON_DLG_ERRORS PDERR_NODEVICES;
    public static COMMON_DLG_ERRORS PDERR_NODEFAULTPRN;
    public static COMMON_DLG_ERRORS PDERR_DNDMMISMATCH;
    public static COMMON_DLG_ERRORS PDERR_CREATEICFAILURE;
    public static COMMON_DLG_ERRORS PDERR_PRINTERNOTFOUND;
    public static COMMON_DLG_ERRORS PDERR_DEFAULTDIFFERENT;
    public static COMMON_DLG_ERRORS CFERR_CHOOSEFONTCODES;
    public static COMMON_DLG_ERRORS CFERR_NOFONTS;
    public static COMMON_DLG_ERRORS CFERR_MAXLESSTHANMIN;
    public static COMMON_DLG_ERRORS FNERR_FILENAMECODES;
    public static COMMON_DLG_ERRORS FNERR_SUBCLASSFAILURE;
    public static COMMON_DLG_ERRORS FNERR_INVALIDFILENAME;
    public static COMMON_DLG_ERRORS FNERR_BUFFERTOOSMALL;
    public static COMMON_DLG_ERRORS FRERR_FINDREPLACECODES;
    public static COMMON_DLG_ERRORS FRERR_BUFFERLENGTHZERO;
    public static COMMON_DLG_ERRORS CCERR_CHOOSECOLORCODES;
}
internal class Windows.Win32.UI.Controls.Dialogs.OFNOTIFY : ValueType {
    public NMHDR hdr;
    public OPENFILENAME* lpOFN;
    public PWSTR pszFile;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS : Enum {
    public UInt32 value__;
    public static OPEN_FILENAME_FLAGS OFN_READONLY;
    public static OPEN_FILENAME_FLAGS OFN_OVERWRITEPROMPT;
    public static OPEN_FILENAME_FLAGS OFN_HIDEREADONLY;
    public static OPEN_FILENAME_FLAGS OFN_NOCHANGEDIR;
    public static OPEN_FILENAME_FLAGS OFN_SHOWHELP;
    public static OPEN_FILENAME_FLAGS OFN_ENABLEHOOK;
    public static OPEN_FILENAME_FLAGS OFN_ENABLETEMPLATE;
    public static OPEN_FILENAME_FLAGS OFN_ENABLETEMPLATEHANDLE;
    public static OPEN_FILENAME_FLAGS OFN_NOVALIDATE;
    public static OPEN_FILENAME_FLAGS OFN_ALLOWMULTISELECT;
    public static OPEN_FILENAME_FLAGS OFN_EXTENSIONDIFFERENT;
    public static OPEN_FILENAME_FLAGS OFN_PATHMUSTEXIST;
    public static OPEN_FILENAME_FLAGS OFN_FILEMUSTEXIST;
    public static OPEN_FILENAME_FLAGS OFN_CREATEPROMPT;
    public static OPEN_FILENAME_FLAGS OFN_SHAREAWARE;
    public static OPEN_FILENAME_FLAGS OFN_NOREADONLYRETURN;
    public static OPEN_FILENAME_FLAGS OFN_NOTESTFILECREATE;
    public static OPEN_FILENAME_FLAGS OFN_NONETWORKBUTTON;
    public static OPEN_FILENAME_FLAGS OFN_NOLONGNAMES;
    public static OPEN_FILENAME_FLAGS OFN_EXPLORER;
    public static OPEN_FILENAME_FLAGS OFN_NODEREFERENCELINKS;
    public static OPEN_FILENAME_FLAGS OFN_LONGNAMES;
    public static OPEN_FILENAME_FLAGS OFN_ENABLEINCLUDENOTIFY;
    public static OPEN_FILENAME_FLAGS OFN_ENABLESIZING;
    public static OPEN_FILENAME_FLAGS OFN_DONTADDTORECENT;
    public static OPEN_FILENAME_FLAGS OFN_FORCESHOWHIDDEN;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS_EX : Enum {
    public UInt32 value__;
    public static OPEN_FILENAME_FLAGS_EX OFN_EX_NONE;
    public static OPEN_FILENAME_FLAGS_EX OFN_EX_NOPLACESBAR;
}
internal class Windows.Win32.UI.Controls.Dialogs.OPENFILENAME : ValueType {
    public UInt32 lStructSize;
    public HWND hwndOwner;
    public HINSTANCE hInstance;
    public PWSTR lpstrFilter;
    public PWSTR lpstrCustomFilter;
    public UInt32 nMaxCustFilter;
    public UInt32 nFilterIndex;
    public PWSTR lpstrFile;
    public UInt32 nMaxFile;
    public PWSTR lpstrFileTitle;
    public UInt32 nMaxFileTitle;
    public PWSTR lpstrInitialDir;
    public PWSTR lpstrTitle;
    public OPEN_FILENAME_FLAGS Flags;
    public ushort nFileOffset;
    public ushort nFileExtension;
    public PWSTR lpstrDefExt;
    public LPARAM lCustData;
    public Void* lpfnHook;
    public PWSTR lpTemplateName;
    public Void* pvReserved;
    public UInt32 dwReserved;
    public OPEN_FILENAME_FLAGS_EX FlagsEx;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.DRAWITEMSTRUCT : ValueType {
    internal DRAWITEMSTRUCT_CTL_TYPE CtlType;
    internal UInt32 CtlID;
    internal UInt32 itemID;
    internal ODA_FLAGS itemAction;
    internal ODS_FLAGS itemState;
    internal HWND hwndItem;
    internal HDC hDC;
    internal RECT rcItem;
    internal UIntPtr itemData;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.DRAWITEMSTRUCT_CTL_TYPE : Enum {
    public UInt32 value__;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_BUTTON;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_COMBOBOX;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_LISTBOX;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_LISTVIEW;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_MENU;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_STATIC;
    public static DRAWITEMSTRUCT_CTL_TYPE ODT_TAB;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.ENABLE_SCROLL_BAR_ARROWS : Enum {
    public UInt32 value__;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_BOTH;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_DOWN;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_LEFT;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_LTUP;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_RIGHT;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_RTDN;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_DISABLE_UP;
    public static ENABLE_SCROLL_BAR_ARROWS ESB_ENABLE_BOTH;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.HDI_MASK : Enum {
    public UInt32 value__;
    public static HDI_MASK HDI_WIDTH;
    public static HDI_MASK HDI_HEIGHT;
    public static HDI_MASK HDI_TEXT;
    public static HDI_MASK HDI_FORMAT;
    public static HDI_MASK HDI_LPARAM;
    public static HDI_MASK HDI_BITMAP;
    public static HDI_MASK HDI_IMAGE;
    public static HDI_MASK HDI_DI_SETITEM;
    public static HDI_MASK HDI_ORDER;
    public static HDI_MASK HDI_FILTER;
    public static HDI_MASK HDI_STATE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.HDLAYOUT : ValueType {
    internal RECT* prc;
    internal WINDOWPOS* pwpos;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.HEADER_HITTEST_INFO_FLAGS : Enum {
    public UInt32 value__;
    public static HEADER_HITTEST_INFO_FLAGS HHT_NOWHERE;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONHEADER;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONDIVIDER;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONDIVOPEN;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONFILTER;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONFILTERBUTTON;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ABOVE;
    public static HEADER_HITTEST_INFO_FLAGS HHT_BELOW;
    public static HEADER_HITTEST_INFO_FLAGS HHT_TORIGHT;
    public static HEADER_HITTEST_INFO_FLAGS HHT_TOLEFT;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONITEMSTATEICON;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONDROPDOWN;
    public static HEADER_HITTEST_INFO_FLAGS HHT_ONOVERFLOW;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.HIMAGELIST : ValueType {
    internal IntPtr Value;
    internal static HIMAGELIST Null { get; }
    internal bool IsNull { get; }
    internal HIMAGELIST(IntPtr value);
    internal static HIMAGELIST get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HIMAGELIST value);
    public static HIMAGELIST op_Explicit(IntPtr value);
    public static bool op_Equality(HIMAGELIST left, HIMAGELIST right);
    public static bool op_Inequality(HIMAGELIST left, HIMAGELIST right);
    public sealed virtual bool Equals(HIMAGELIST other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.HIT_TEST_BACKGROUND_OPTIONS : Enum {
    public UInt32 value__;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_BACKGROUNDSEG;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_FIXEDBORDER;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_CAPTION;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_RESIZINGBORDER_LEFT;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_RESIZINGBORDER_TOP;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_RESIZINGBORDER_RIGHT;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_RESIZINGBORDER_BOTTOM;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_RESIZINGBORDER;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_SIZINGTEMPLATE;
    public static HIT_TEST_BACKGROUND_OPTIONS HTTB_SYSTEMSIZINGMARGINS;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.HTHEME : ValueType {
    internal IntPtr Value;
    internal static HTHEME Null { get; }
    internal bool IsNull { get; }
    internal HTHEME(IntPtr value);
    internal static HTHEME get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HTHEME value);
    public static HTHEME op_Explicit(IntPtr value);
    public static bool op_Equality(HTHEME left, HTHEME right);
    public static bool op_Inequality(HTHEME left, HTHEME right);
    public sealed virtual bool Equals(HTHEME other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.IMAGE_LIST_DRAW_STYLE : Enum {
    public UInt32 value__;
    public static IMAGE_LIST_DRAW_STYLE ILD_NORMAL;
    public static IMAGE_LIST_DRAW_STYLE ILD_TRANSPARENT;
    public static IMAGE_LIST_DRAW_STYLE ILD_BLEND25;
    public static IMAGE_LIST_DRAW_STYLE ILD_FOCUS;
    public static IMAGE_LIST_DRAW_STYLE ILD_BLEND50;
    public static IMAGE_LIST_DRAW_STYLE ILD_SELECTED;
    public static IMAGE_LIST_DRAW_STYLE ILD_BLEND;
    public static IMAGE_LIST_DRAW_STYLE ILD_MASK;
    public static IMAGE_LIST_DRAW_STYLE ILD_IMAGE;
    public static IMAGE_LIST_DRAW_STYLE ILD_ROP;
    public static IMAGE_LIST_DRAW_STYLE ILD_OVERLAYMASK;
    public static IMAGE_LIST_DRAW_STYLE ILD_PRESERVEALPHA;
    public static IMAGE_LIST_DRAW_STYLE ILD_SCALE;
    public static IMAGE_LIST_DRAW_STYLE ILD_DPISCALE;
    public static IMAGE_LIST_DRAW_STYLE ILD_ASYNC;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.IMAGE_LIST_WRITE_STREAM_FLAGS : Enum {
    public UInt32 value__;
    public static IMAGE_LIST_WRITE_STREAM_FLAGS ILP_NORMAL;
    public static IMAGE_LIST_WRITE_STREAM_FLAGS ILP_DOWNLEVEL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.IMAGEINFO : ValueType {
    internal HBITMAP hbmImage;
    internal HBITMAP hbmMask;
    internal int Unused1;
    internal int Unused2;
    internal RECT rcImage;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.IMAGELIST_CREATION_FLAGS : Enum {
    public UInt32 value__;
    public static IMAGELIST_CREATION_FLAGS ILC_MASK;
    public static IMAGELIST_CREATION_FLAGS ILC_COLOR;
    public static IMAGELIST_CREATION_FLAGS ILC_COLORDDB;
    public static IMAGELIST_CREATION_FLAGS ILC_COLOR4;
    public static IMAGELIST_CREATION_FLAGS ILC_COLOR8;
    public static IMAGELIST_CREATION_FLAGS ILC_COLOR16;
    public static IMAGELIST_CREATION_FLAGS ILC_COLOR24;
    public static IMAGELIST_CREATION_FLAGS ILC_COLOR32;
    public static IMAGELIST_CREATION_FLAGS ILC_PALETTE;
    public static IMAGELIST_CREATION_FLAGS ILC_MIRROR;
    public static IMAGELIST_CREATION_FLAGS ILC_PERITEMMIRROR;
    public static IMAGELIST_CREATION_FLAGS ILC_ORIGINALSIZE;
    public static IMAGELIST_CREATION_FLAGS ILC_HIGHQUALITYSCALE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.INITCOMMONCONTROLSEX : ValueType {
    internal UInt32 dwSize;
    internal INITCOMMONCONTROLSEX_ICC dwICC;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.INITCOMMONCONTROLSEX_ICC : Enum {
    public UInt32 value__;
    public static INITCOMMONCONTROLSEX_ICC ICC_ANIMATE_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_BAR_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_COOL_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_DATE_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_HOTKEY_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_INTERNET_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_LINK_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_LISTVIEW_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_NATIVEFNTCTL_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_PAGESCROLLER_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_PROGRESS_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_STANDARD_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_TAB_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_TREEVIEW_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_UPDOWN_CLASS;
    public static INITCOMMONCONTROLSEX_ICC ICC_USEREX_CLASSES;
    public static INITCOMMONCONTROLSEX_ICC ICC_WIN95_CLASSES;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_ITEM_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_ITEM_FLAGS LIF_ITEMINDEX;
    public static LIST_ITEM_FLAGS LIF_STATE;
    public static LIST_ITEM_FLAGS LIF_ITEMID;
    public static LIST_ITEM_FLAGS LIF_URL;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_ITEM_STATE_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_ITEM_STATE_FLAGS LIS_FOCUSED;
    public static LIST_ITEM_STATE_FLAGS LIS_ENABLED;
    public static LIST_ITEM_STATE_FLAGS LIS_VISITED;
    public static LIST_ITEM_STATE_FLAGS LIS_HOTTRACK;
    public static LIST_ITEM_STATE_FLAGS LIS_DEFAULTCOLORS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_VIEW_BACKGROUND_IMAGE_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_SOURCE_NONE;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_SOURCE_HBITMAP;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_SOURCE_URL;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_SOURCE_MASK;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_STYLE_NORMAL;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_STYLE_TILE;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_STYLE_MASK;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_FLAG_TILEOFFSET;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_TYPE_WATERMARK;
    public static LIST_VIEW_BACKGROUND_IMAGE_FLAGS LVBKIF_FLAG_ALPHABLEND;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_VIEW_GROUP_ALIGN_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_VIEW_GROUP_ALIGN_FLAGS LVGA_HEADER_LEFT;
    public static LIST_VIEW_GROUP_ALIGN_FLAGS LVGA_HEADER_CENTER;
    public static LIST_VIEW_GROUP_ALIGN_FLAGS LVGA_HEADER_RIGHT;
    public static LIST_VIEW_GROUP_ALIGN_FLAGS LVGA_FOOTER_LEFT;
    public static LIST_VIEW_GROUP_ALIGN_FLAGS LVGA_FOOTER_CENTER;
    public static LIST_VIEW_GROUP_ALIGN_FLAGS LVGA_FOOTER_RIGHT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_VIEW_GROUP_STATE_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_NORMAL;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_COLLAPSED;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_HIDDEN;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_NOHEADER;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_COLLAPSIBLE;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_FOCUSED;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_SELECTED;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_SUBSETED;
    public static LIST_VIEW_GROUP_STATE_FLAGS LVGS_SUBSETLINKFOCUSED;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_VIEW_ITEM_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_VIEW_ITEM_FLAGS LVIF_TEXT;
    public static LIST_VIEW_ITEM_FLAGS LVIF_IMAGE;
    public static LIST_VIEW_ITEM_FLAGS LVIF_PARAM;
    public static LIST_VIEW_ITEM_FLAGS LVIF_STATE;
    public static LIST_VIEW_ITEM_FLAGS LVIF_INDENT;
    public static LIST_VIEW_ITEM_FLAGS LVIF_NORECOMPUTE;
    public static LIST_VIEW_ITEM_FLAGS LVIF_GROUPID;
    public static LIST_VIEW_ITEM_FLAGS LVIF_COLUMNS;
    public static LIST_VIEW_ITEM_FLAGS LVIF_COLFMT;
    public static LIST_VIEW_ITEM_FLAGS LVIF_DI_SETITEM;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS : Enum {
    public UInt32 value__;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_FOCUSED;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_SELECTED;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_CUT;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_DROPHILITED;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_GLOW;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_ACTIVATING;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_OVERLAYMASK;
    public static LIST_VIEW_ITEM_STATE_FLAGS LVIS_STATEIMAGEMASK;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LVCOLUMNW_FORMAT : Enum {
    public int value__;
    public static LVCOLUMNW_FORMAT LVCFMT_LEFT;
    public static LVCOLUMNW_FORMAT LVCFMT_RIGHT;
    public static LVCOLUMNW_FORMAT LVCFMT_CENTER;
    public static LVCOLUMNW_FORMAT LVCFMT_JUSTIFYMASK;
    public static LVCOLUMNW_FORMAT LVCFMT_IMAGE;
    public static LVCOLUMNW_FORMAT LVCFMT_BITMAP_ON_RIGHT;
    public static LVCOLUMNW_FORMAT LVCFMT_COL_HAS_IMAGES;
    public static LVCOLUMNW_FORMAT LVCFMT_FIXED_WIDTH;
    public static LVCOLUMNW_FORMAT LVCFMT_NO_DPI_SCALE;
    public static LVCOLUMNW_FORMAT LVCFMT_FIXED_RATIO;
    public static LVCOLUMNW_FORMAT LVCFMT_SPLITBUTTON;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LVCOLUMNW_MASK : Enum {
    public UInt32 value__;
    public static LVCOLUMNW_MASK LVCF_FMT;
    public static LVCOLUMNW_MASK LVCF_WIDTH;
    public static LVCOLUMNW_MASK LVCF_TEXT;
    public static LVCOLUMNW_MASK LVCF_SUBITEM;
    public static LVCOLUMNW_MASK LVCF_IMAGE;
    public static LVCOLUMNW_MASK LVCF_ORDER;
    public static LVCOLUMNW_MASK LVCF_MINWIDTH;
    public static LVCOLUMNW_MASK LVCF_DEFAULTWIDTH;
    public static LVCOLUMNW_MASK LVCF_IDEALWIDTH;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LVFINDINFOW_FLAGS : Enum {
    public UInt32 value__;
    public static LVFINDINFOW_FLAGS LVFI_PARAM;
    public static LVFINDINFOW_FLAGS LVFI_PARTIAL;
    public static LVFINDINFOW_FLAGS LVFI_STRING;
    public static LVFINDINFOW_FLAGS LVFI_SUBSTRING;
    public static LVFINDINFOW_FLAGS LVFI_WRAP;
    public static LVFINDINFOW_FLAGS LVFI_NEARESTXY;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LVHITTESTINFO_FLAGS : Enum {
    public UInt32 value__;
    public static LVHITTESTINFO_FLAGS LVHT_ABOVE;
    public static LVHITTESTINFO_FLAGS LVHT_BELOW;
    public static LVHITTESTINFO_FLAGS LVHT_NOWHERE;
    public static LVHITTESTINFO_FLAGS LVHT_ONITEMICON;
    public static LVHITTESTINFO_FLAGS LVHT_ONITEMLABEL;
    public static LVHITTESTINFO_FLAGS LVHT_ONITEMSTATEICON;
    public static LVHITTESTINFO_FLAGS LVHT_TOLEFT;
    public static LVHITTESTINFO_FLAGS LVHT_TORIGHT;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP_HEADER;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP_FOOTER;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP_COLLAPSE;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP_BACKGROUND;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP_STATEICON;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP_SUBSETLINK;
    public static LVHITTESTINFO_FLAGS LVHT_EX_GROUP;
    public static LVHITTESTINFO_FLAGS LVHT_EX_ONCONTENTS;
    public static LVHITTESTINFO_FLAGS LVHT_EX_FOOTER;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LVTILEVIEWINFO_FLAGS : Enum {
    public UInt32 value__;
    public static LVTILEVIEWINFO_FLAGS LVTVIF_AUTOSIZE;
    public static LVTILEVIEWINFO_FLAGS LVTVIF_FIXEDWIDTH;
    public static LVTILEVIEWINFO_FLAGS LVTVIF_FIXEDHEIGHT;
    public static LVTILEVIEWINFO_FLAGS LVTVIF_FIXEDSIZE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.LVTILEVIEWINFO_MASK : Enum {
    public UInt32 value__;
    public static LVTILEVIEWINFO_MASK LVTVIM_TILESIZE;
    public static LVTILEVIEWINFO_MASK LVTVIM_COLUMNS;
    public static LVTILEVIEWINFO_MASK LVTVIM_LABELMARGIN;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.MARGINS : ValueType {
    internal int cxLeftWidth;
    internal int cxRightWidth;
    internal int cyTopHeight;
    internal int cyBottomHeight;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.MCGRIDINFO_FLAGS : Enum {
    public UInt32 value__;
    public static MCGRIDINFO_FLAGS MCGIF_DATE;
    public static MCGRIDINFO_FLAGS MCGIF_RECT;
    public static MCGRIDINFO_FLAGS MCGIF_NAME;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.MCGRIDINFO_PART : Enum {
    public UInt32 value__;
    public static MCGRIDINFO_PART MCGIP_CALENDARCONTROL;
    public static MCGRIDINFO_PART MCGIP_NEXT;
    public static MCGRIDINFO_PART MCGIP_PREV;
    public static MCGRIDINFO_PART MCGIP_FOOTER;
    public static MCGRIDINFO_PART MCGIP_CALENDAR;
    public static MCGRIDINFO_PART MCGIP_CALENDARHEADER;
    public static MCGRIDINFO_PART MCGIP_CALENDARBODY;
    public static MCGRIDINFO_PART MCGIP_CALENDARROW;
    public static MCGRIDINFO_PART MCGIP_CALENDARCELL;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.MCHITTESTINFO_HIT_FLAGS : Enum {
    public UInt32 value__;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TITLE;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDAR;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TODAYLINK;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARCONTROL;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_NEXT;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_PREV;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_NOWHERE;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TITLEBK;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TITLEMONTH;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TITLEYEAR;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TITLEBTNNEXT;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_TITLEBTNPREV;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARBK;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARDATE;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARDATENEXT;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARDATEPREV;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARDAY;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARWEEKNUM;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARDATEMIN;
    public static MCHITTESTINFO_HIT_FLAGS MCHT_CALENDARDATEMAX;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.MEASUREITEMSTRUCT : ValueType {
    internal DRAWITEMSTRUCT_CTL_TYPE CtlType;
    internal UInt32 CtlID;
    internal UInt32 itemID;
    internal UInt32 itemWidth;
    internal UInt32 itemHeight;
    internal UIntPtr itemData;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.MONTH_CALDENDAR_MESSAGES_VIEW : Enum {
    public UInt32 value__;
    public static MONTH_CALDENDAR_MESSAGES_VIEW MCMV_MONTH;
    public static MONTH_CALDENDAR_MESSAGES_VIEW MCMV_YEAR;
    public static MONTH_CALDENDAR_MESSAGES_VIEW MCMV_DECADE;
    public static MONTH_CALDENDAR_MESSAGES_VIEW MCMV_CENTURY;
    public static MONTH_CALDENDAR_MESSAGES_VIEW MCMV_MAX;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.NM_TREEVIEW_ACTION : Enum {
    public UInt32 value__;
    public static NM_TREEVIEW_ACTION TVE_COLLAPSE;
    public static NM_TREEVIEW_ACTION TVE_EXPAND;
    public static NM_TREEVIEW_ACTION TVE_TOGGLE;
    public static NM_TREEVIEW_ACTION TVE_EXPANDPARTIAL;
    public static NM_TREEVIEW_ACTION TVE_COLLAPSERESET;
    public static NM_TREEVIEW_ACTION TVC_UNKNOWN;
    public static NM_TREEVIEW_ACTION TVC_BYMOUSE;
    public static NM_TREEVIEW_ACTION TVC_BYKEYBOARD;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.NMCUSTOMDRAW : ValueType {
    internal NMHDR hdr;
    internal NMCUSTOMDRAW_DRAW_STAGE dwDrawStage;
    internal HDC hdc;
    internal RECT rc;
    internal UIntPtr dwItemSpec;
    internal NMCUSTOMDRAW_DRAW_STATE_FLAGS uItemState;
    internal LPARAM lItemlParam;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.NMCUSTOMDRAW_DRAW_STAGE : Enum {
    public UInt32 value__;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_POSTPAINT;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_PREERASE;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_PREPAINT;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_ITEMPOSTERASE;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_ITEMPOSTPAINT;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_ITEMPREERASE;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_ITEMPREPAINT;
    public static NMCUSTOMDRAW_DRAW_STAGE CDDS_SUBITEM;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.NMCUSTOMDRAW_DRAW_STATE_FLAGS : Enum {
    public UInt32 value__;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_SELECTED;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_GRAYED;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_DISABLED;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_CHECKED;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_FOCUS;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_DEFAULT;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_HOT;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_MARKED;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_INDETERMINATE;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_SHOWKEYBOARDCUES;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_NEARHOT;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_OTHERSIDEHOT;
    public static NMCUSTOMDRAW_DRAW_STATE_FLAGS CDIS_DROPHILITED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.NMDATETIMECHANGE_FLAGS : Enum {
    public UInt32 value__;
    public static NMDATETIMECHANGE_FLAGS GDT_NONE;
    public static NMDATETIMECHANGE_FLAGS GDT_VALID;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.NMHDR : ValueType {
    internal HWND hwndFrom;
    internal UIntPtr idFrom;
    internal UInt32 code;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.NMLVCUSTOMDRAW_ITEM_TYPE : Enum {
    public UInt32 value__;
    public static NMLVCUSTOMDRAW_ITEM_TYPE LVCDI_ITEM;
    public static NMLVCUSTOMDRAW_ITEM_TYPE LVCDI_GROUP;
    public static NMLVCUSTOMDRAW_ITEM_TYPE LVCDI_ITEMSLIST;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.NMLVGETINFOTIP_FLAGS : Enum {
    public UInt32 value__;
    public static NMLVGETINFOTIP_FLAGS LVGIT_UNFOLDED;
    public static NMLVGETINFOTIP_FLAGS LVGIT_ZERO;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.NMTVCUSTOMDRAW : ValueType {
    internal NMCUSTOMDRAW nmcd;
    internal COLORREF clrText;
    internal COLORREF clrTextBk;
    internal int iLevel;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.ODA_FLAGS : Enum {
    public UInt32 value__;
    public static ODA_FLAGS ODA_DRAWENTIRE;
    public static ODA_FLAGS ODA_SELECT;
    public static ODA_FLAGS ODA_FOCUS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.ODS_FLAGS : Enum {
    public UInt32 value__;
    public static ODS_FLAGS ODS_SELECTED;
    public static ODS_FLAGS ODS_GRAYED;
    public static ODS_FLAGS ODS_DISABLED;
    public static ODS_FLAGS ODS_CHECKED;
    public static ODS_FLAGS ODS_FOCUS;
    public static ODS_FLAGS ODS_DEFAULT;
    public static ODS_FLAGS ODS_COMBOBOXEDIT;
    public static ODS_FLAGS ODS_HOTLIGHT;
    public static ODS_FLAGS ODS_INACTIVE;
    public static ODS_FLAGS ODS_NOACCEL;
    public static ODS_FLAGS ODS_NOFOCUSRECT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.RichEdit.CHARRANGE : ValueType {
    internal int cpMin;
    internal int cpMax;
}
[GuidAttribute("00020D03-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Controls.RichEdit.IRichEditOleCallback : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IRichEditOleCallback();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetNewStorage(IRichEditOleCallback* pThis, IStorage** lplpstg);
    public HRESULT GetNewStorage(IStorage** lplpstg);
    internal HRESULT GetInPlaceContext(IOleInPlaceFrame** lplpFrame, IOleInPlaceUIWindow** lplpDoc, OLEINPLACEFRAMEINFO& lpFrameInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetInPlaceContext(IRichEditOleCallback* pThis, IOleInPlaceFrame** lplpFrame, IOleInPlaceUIWindow** lplpDoc, OLEINPLACEFRAMEINFO* lpFrameInfo);
    public HRESULT GetInPlaceContext(IOleInPlaceFrame** lplpFrame, IOleInPlaceUIWindow** lplpDoc, OLEINPLACEFRAMEINFO* lpFrameInfo);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ShowContainerUI(IRichEditOleCallback* pThis, BOOL fShow);
    public HRESULT ShowContainerUI(BOOL fShow);
    internal HRESULT QueryInsertObject(Guid& lpclsid, IStorage* lpstg, int cp);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryInsertObject(IRichEditOleCallback* pThis, Guid* lpclsid, IStorage* lpstg, int cp);
    public HRESULT QueryInsertObject(Guid* lpclsid, IStorage* lpstg, int cp);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT DeleteObject(IRichEditOleCallback* pThis, IOleObject* lpoleobj);
    public HRESULT DeleteObject(IOleObject* lpoleobj);
    internal HRESULT QueryAcceptData(IDataObject* lpdataobj, UInt16& lpcfFormat, RECO_FLAGS reco, BOOL fReally, HGLOBAL hMetaPict);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT QueryAcceptData(IRichEditOleCallback* pThis, IDataObject* lpdataobj, UInt16* lpcfFormat, RECO_FLAGS reco, BOOL fReally, HGLOBAL hMetaPict);
    public HRESULT QueryAcceptData(IDataObject* lpdataobj, UInt16* lpcfFormat, RECO_FLAGS reco, BOOL fReally, HGLOBAL hMetaPict);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ContextSensitiveHelp(IRichEditOleCallback* pThis, BOOL fEnterMode);
    public HRESULT ContextSensitiveHelp(BOOL fEnterMode);
    internal HRESULT GetClipboardData(CHARRANGE& lpchrg, UInt32 reco, IDataObject** lplpdataobj);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetClipboardData(IRichEditOleCallback* pThis, CHARRANGE* lpchrg, UInt32 reco, IDataObject** lplpdataobj);
    public HRESULT GetClipboardData(CHARRANGE* lpchrg, UInt32 reco, IDataObject** lplpdataobj);
    internal HRESULT GetDragDropEffect(BOOL fDrag, MODIFIERKEYS_FLAGS grfKeyState, DROPEFFECT& pdwEffect);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDragDropEffect(IRichEditOleCallback* pThis, BOOL fDrag, MODIFIERKEYS_FLAGS grfKeyState, DROPEFFECT* pdwEffect);
    public HRESULT GetDragDropEffect(BOOL fDrag, MODIFIERKEYS_FLAGS grfKeyState, DROPEFFECT* pdwEffect);
    internal HRESULT GetContextMenu(RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE seltype, IOleObject* lpoleobj, CHARRANGE& lpchrg, HMENU& lphmenu);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetContextMenu(IRichEditOleCallback* pThis, RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE seltype, IOleObject* lpoleobj, CHARRANGE* lpchrg, HMENU* lphmenu);
    public HRESULT GetContextMenu(RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE seltype, IOleObject* lpoleobj, CHARRANGE* lpchrg, HMENU* lphmenu);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.RichEdit.RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE : Enum {
    public ushort value__;
    public static RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE SEL_EMPTY;
    public static RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE SEL_TEXT;
    public static RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE SEL_OBJECT;
    public static RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE SEL_MULTICHAR;
    public static RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE SEL_MULTIOBJECT;
    public static RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE GCM_RIGHTMOUSEDROP;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.SET_THEME_APP_PROPERTIES_FLAGS : Enum {
    public UInt32 value__;
    public static SET_THEME_APP_PROPERTIES_FLAGS ALLOW_NONCLIENT;
    public static SET_THEME_APP_PROPERTIES_FLAGS ALLOW_CONTROLS;
    public static SET_THEME_APP_PROPERTIES_FLAGS ALLOW_WEBCONTENT;
    public static SET_THEME_APP_PROPERTIES_FLAGS VALIDBITS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.SYSBUTTONSTATES : Enum {
    public int value__;
    public static SYSBUTTONSTATES SBS_NORMAL;
    public static SYSBUTTONSTATES SBS_HOT;
    public static SYSBUTTONSTATES SBS_PUSHED;
    public static SYSBUTTONSTATES SBS_DISABLED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TAB_CONTROL_ITEM_STATE : Enum {
    public UInt32 value__;
    public static TAB_CONTROL_ITEM_STATE TCIS_BUTTONPRESSED;
    public static TAB_CONTROL_ITEM_STATE TCIS_HIGHLIGHTED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TASKDIALOG_ELEMENTS : Enum {
    public int value__;
    public static TASKDIALOG_ELEMENTS TDE_CONTENT;
    public static TASKDIALOG_ELEMENTS TDE_EXPANDED_INFORMATION;
    public static TASKDIALOG_ELEMENTS TDE_FOOTER;
    public static TASKDIALOG_ELEMENTS TDE_MAIN_INSTRUCTION;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TASKDIALOG_FLAGS : Enum {
    public int value__;
    public static TASKDIALOG_FLAGS TDF_ENABLE_HYPERLINKS;
    public static TASKDIALOG_FLAGS TDF_USE_HICON_MAIN;
    public static TASKDIALOG_FLAGS TDF_USE_HICON_FOOTER;
    public static TASKDIALOG_FLAGS TDF_ALLOW_DIALOG_CANCELLATION;
    public static TASKDIALOG_FLAGS TDF_USE_COMMAND_LINKS;
    public static TASKDIALOG_FLAGS TDF_USE_COMMAND_LINKS_NO_ICON;
    public static TASKDIALOG_FLAGS TDF_EXPAND_FOOTER_AREA;
    public static TASKDIALOG_FLAGS TDF_EXPANDED_BY_DEFAULT;
    public static TASKDIALOG_FLAGS TDF_VERIFICATION_FLAG_CHECKED;
    public static TASKDIALOG_FLAGS TDF_SHOW_PROGRESS_BAR;
    public static TASKDIALOG_FLAGS TDF_SHOW_MARQUEE_PROGRESS_BAR;
    public static TASKDIALOG_FLAGS TDF_CALLBACK_TIMER;
    public static TASKDIALOG_FLAGS TDF_POSITION_RELATIVE_TO_WINDOW;
    public static TASKDIALOG_FLAGS TDF_RTL_LAYOUT;
    public static TASKDIALOG_FLAGS TDF_NO_DEFAULT_RADIO_BUTTON;
    public static TASKDIALOG_FLAGS TDF_CAN_BE_MINIMIZED;
    public static TASKDIALOG_FLAGS TDF_NO_SET_FOREGROUND;
    public static TASKDIALOG_FLAGS TDF_SIZE_TO_CONTENT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TASKDIALOG_ICON_ELEMENTS : Enum {
    public int value__;
    public static TASKDIALOG_ICON_ELEMENTS TDIE_ICON_MAIN;
    public static TASKDIALOG_ICON_ELEMENTS TDIE_ICON_FOOTER;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TASKDIALOG_MESSAGES : Enum {
    public int value__;
    public static TASKDIALOG_MESSAGES TDM_NAVIGATE_PAGE;
    public static TASKDIALOG_MESSAGES TDM_CLICK_BUTTON;
    public static TASKDIALOG_MESSAGES TDM_SET_MARQUEE_PROGRESS_BAR;
    public static TASKDIALOG_MESSAGES TDM_SET_PROGRESS_BAR_STATE;
    public static TASKDIALOG_MESSAGES TDM_SET_PROGRESS_BAR_RANGE;
    public static TASKDIALOG_MESSAGES TDM_SET_PROGRESS_BAR_POS;
    public static TASKDIALOG_MESSAGES TDM_SET_PROGRESS_BAR_MARQUEE;
    public static TASKDIALOG_MESSAGES TDM_SET_ELEMENT_TEXT;
    public static TASKDIALOG_MESSAGES TDM_CLICK_RADIO_BUTTON;
    public static TASKDIALOG_MESSAGES TDM_ENABLE_BUTTON;
    public static TASKDIALOG_MESSAGES TDM_ENABLE_RADIO_BUTTON;
    public static TASKDIALOG_MESSAGES TDM_CLICK_VERIFICATION;
    public static TASKDIALOG_MESSAGES TDM_UPDATE_ELEMENT_TEXT;
    public static TASKDIALOG_MESSAGES TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE;
    public static TASKDIALOG_MESSAGES TDM_UPDATE_ICON;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TASKDIALOG_NOTIFICATIONS : Enum {
    public int value__;
    public static TASKDIALOG_NOTIFICATIONS TDN_CREATED;
    public static TASKDIALOG_NOTIFICATIONS TDN_NAVIGATED;
    public static TASKDIALOG_NOTIFICATIONS TDN_BUTTON_CLICKED;
    public static TASKDIALOG_NOTIFICATIONS TDN_HYPERLINK_CLICKED;
    public static TASKDIALOG_NOTIFICATIONS TDN_TIMER;
    public static TASKDIALOG_NOTIFICATIONS TDN_DESTROYED;
    public static TASKDIALOG_NOTIFICATIONS TDN_RADIO_BUTTON_CLICKED;
    public static TASKDIALOG_NOTIFICATIONS TDN_DIALOG_CONSTRUCTED;
    public static TASKDIALOG_NOTIFICATIONS TDN_VERIFICATION_CLICKED;
    public static TASKDIALOG_NOTIFICATIONS TDN_HELP;
    public static TASKDIALOG_NOTIFICATIONS TDN_EXPANDO_BUTTON_CLICKED;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TCITEMHEADERA_MASK : Enum {
    public UInt32 value__;
    public static TCITEMHEADERA_MASK TCIF_IMAGE;
    public static TCITEMHEADERA_MASK TCIF_RTLREADING;
    public static TCITEMHEADERA_MASK TCIF_TEXT;
    public static TCITEMHEADERA_MASK TCIF_PARAM;
    public static TCITEMHEADERA_MASK TCIF_STATE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID : Enum {
    public UInt32 value__;
    public static THEME_PROPERTY_SYMBOL_ID TMT_RESERVEDLOW;
    public static THEME_PROPERTY_SYMBOL_ID TMT_RESERVEDHIGH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DIBDATA;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHDIBDATA;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ENUM;
    public static THEME_PROPERTY_SYMBOL_ID TMT_STRING;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BOOL;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MARGINS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FILENAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_POSITION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_RECT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INTLIST;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HBITMAP;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DISKSTREAM;
    public static THEME_PROPERTY_SYMBOL_ID TMT_STREAM;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BITMAPREF;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FLOAT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FLOATLIST;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COLORSCHEMES;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SIZES;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CHARSET;
    public static THEME_PROPERTY_SYMBOL_ID TMT_NAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DISPLAYNAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOOLTIP;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COMPANY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_AUTHOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COPYRIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_URL;
    public static THEME_PROPERTY_SYMBOL_ID TMT_VERSION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DESCRIPTION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRST_RCSTRING_NAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LAST_RCSTRING_NAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CAPTIONFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SMALLCAPTIONFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENUFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_STATUSFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MSGBOXFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ICONTITLEFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HEADING1FONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HEADING2FONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BODYFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRSTFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FLATMENUS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRSTBOOL;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTBOOL;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SIZINGBORDERWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SCROLLBARWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SCROLLBARHEIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CAPTIONBARWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CAPTIONBARHEIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SMCAPTIONBARWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SMCAPTIONBARHEIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENUBARWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENUBARHEIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_PADDEDBORDERWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRSTSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINCOLORDEPTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRSTINT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTINT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CSSNAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_XMLNAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTUPDATED;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ALIAS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRSTSTRING;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTSTRING;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SCROLLBAR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BACKGROUND;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ACTIVECAPTION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INACTIVECAPTION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENU;
    public static THEME_PROPERTY_SYMBOL_ID TMT_WINDOW;
    public static THEME_PROPERTY_SYMBOL_ID TMT_WINDOWFRAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENUTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_WINDOWTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CAPTIONTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ACTIVEBORDER;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INACTIVEBORDER;
    public static THEME_PROPERTY_SYMBOL_ID TMT_APPWORKSPACE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HIGHLIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HIGHLIGHTTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BTNFACE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BTNSHADOW;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRAYTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BTNTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INACTIVECAPTIONTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BTNHIGHLIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DKSHADOW3D;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LIGHT3D;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INFOTEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INFOBK;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BUTTONALTERNATEFACE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HOTTRACKING;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTACTIVECAPTION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTINACTIVECAPTION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENUHILIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MENUBAR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FIRSTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LASTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMHUE1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMHUE2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMHUE3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMHUE4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMHUE5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOHUE1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOHUE2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOHUE3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOHUE4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOHUE5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMCOLOR1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMCOLOR2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMCOLOR3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMCOLOR4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FROMCOLOR5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOCOLOR1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOCOLOR2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOCOLOR3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOCOLOR4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TOCOLOR5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TRANSPARENT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_AUTOSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BORDERONLY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COMPOSITED;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BGFILL;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHTRANSPARENT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHONLY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ALWAYSSHOWSIZINGBAR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MIRRORIMAGE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_UNIFORMSIZING;
    public static THEME_PROPERTY_SYMBOL_ID TMT_INTEGRALSIZING;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SOURCEGROW;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SOURCESHRINK;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DRAWBORDERS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_NOETCHEDEFFECT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTAPPLYOVERLAY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTGLOW;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTITALIC;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COMPOSITEDOPAQUE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_LOCALIZEDMIRRORIMAGE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGECOUNT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ALPHALEVEL;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BORDERSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ROUNDCORNERWIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ROUNDCORNERHEIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTRATIO1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTRATIO2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTRATIO3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTRATIO4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTRATIO5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_PROGRESSCHUNKSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_PROGRESSSPACESIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SATURATION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTBORDERSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ALPHATHRESHOLD;
    public static THEME_PROPERTY_SYMBOL_ID TMT_WIDTH;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HEIGHT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHINDEX;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TRUESIZESTRETCHMARK;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTGLOWSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FRAMESPERSECOND;
    public static THEME_PROPERTY_SYMBOL_ID TMT_PIXELSPERFRAME;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ANIMATIONDELAY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLOWINTENSITY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_OPACITY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COLORIZATIONCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_COLORIZATIONOPACITY;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI6;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINDPI7;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHFONT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHIMAGEFILE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE6;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGEFILE7;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CLASSICVALUE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_OFFSET;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTSHADOWOFFSET;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_NORMALSIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE6;
    public static THEME_PROPERTY_SYMBOL_ID TMT_MINSIZE7;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SIZINGMARGINS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CONTENTMARGINS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CAPTIONMARGINS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BORDERCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FILLCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_EDGELIGHTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_EDGEHIGHLIGHTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_EDGESHADOWCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_EDGEDKSHADOWCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_EDGEFILLCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TRANSPARENTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTCOLOR1;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTCOLOR2;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTCOLOR3;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTCOLOR4;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GRADIENTCOLOR5;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SHADOWCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLOWCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTBORDERCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTSHADOWCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHTEXTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHTRANSPARENTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FILLCOLORHINT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BORDERCOLORHINT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ACCENTCOLORHINT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTCOLORHINT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HEADING1TEXTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HEADING2TEXTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BODYTEXTCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BGTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BORDERTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_FILLTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SIZINGTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_HALIGN;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CONTENTALIGNMENT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_VALIGN;
    public static THEME_PROPERTY_SYMBOL_ID TMT_OFFSETTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ICONEFFECT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TEXTSHADOWTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGELAYOUT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_IMAGESELECTTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_GLYPHFONTSIZINGTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TRUESIZESCALINGTYPE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_USERPICTURE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_DEFAULTPANESIZE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_BLENDCOLOR;
    public static THEME_PROPERTY_SYMBOL_ID TMT_CUSTOMSPLITRECT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ANIMATIONBUTTONRECT;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ANIMATIONDURATION;
    public static THEME_PROPERTY_SYMBOL_ID TMT_TRANSITIONDURATIONS;
    public static THEME_PROPERTY_SYMBOL_ID TMT_SCALEDBACKGROUND;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ATLASIMAGE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ATLASINPUTIMAGE;
    public static THEME_PROPERTY_SYMBOL_ID TMT_ATLASRECT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.THEMESIZE : Enum {
    public int value__;
    public static THEMESIZE TS_MIN;
    public static THEMESIZE TS_TRUE;
    public static THEMESIZE TS_DRAW;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TOOLTIP_FLAGS : Enum {
    public UInt32 value__;
    public static TOOLTIP_FLAGS TTF_IDISHWND;
    public static TOOLTIP_FLAGS TTF_CENTERTIP;
    public static TOOLTIP_FLAGS TTF_RTLREADING;
    public static TOOLTIP_FLAGS TTF_SUBCLASS;
    public static TOOLTIP_FLAGS TTF_TRACK;
    public static TOOLTIP_FLAGS TTF_ABSOLUTE;
    public static TOOLTIP_FLAGS TTF_TRANSPARENT;
    public static TOOLTIP_FLAGS TTF_PARSELINKS;
    public static TOOLTIP_FLAGS TTF_DI_SETITEM;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Controls.TVITEM_MASK : Enum {
    public UInt32 value__;
    public static TVITEM_MASK TVIF_CHILDREN;
    public static TVITEM_MASK TVIF_DI_SETITEM;
    public static TVITEM_MASK TVIF_HANDLE;
    public static TVITEM_MASK TVIF_IMAGE;
    public static TVITEM_MASK TVIF_PARAM;
    public static TVITEM_MASK TVIF_SELECTEDIMAGE;
    public static TVITEM_MASK TVIF_STATE;
    public static TVITEM_MASK TVIF_TEXT;
    public static TVITEM_MASK TVIF_EXPANDEDIMAGE;
    public static TVITEM_MASK TVIF_INTEGRAL;
    public static TVITEM_MASK TVIF_STATEEX;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.HiDpi.DPI_AWARENESS : Enum {
    public int value__;
    public static DPI_AWARENESS DPI_AWARENESS_INVALID;
    public static DPI_AWARENESS DPI_AWARENESS_UNAWARE;
    public static DPI_AWARENESS DPI_AWARENESS_SYSTEM_AWARE;
    public static DPI_AWARENESS DPI_AWARENESS_PER_MONITOR_AWARE;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT : ValueType {
    internal static DPI_AWARENESS_CONTEXT UNSPECIFIED_DPI_AWARENESS_CONTEXT;
    internal IntPtr Value;
    internal static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_UNAWARE;
    internal static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_SYSTEM_AWARE;
    internal static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE;
    internal static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2;
    internal static DPI_AWARENESS_CONTEXT DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED;
    internal DPI_AWARENESS_CONTEXT(IntPtr value);
    private static DPI_AWARENESS_CONTEXT();
    public static IntPtr op_Implicit(DPI_AWARENESS_CONTEXT value);
    public static DPI_AWARENESS_CONTEXT op_Explicit(IntPtr value);
    public static bool op_Equality(DPI_AWARENESS_CONTEXT left, DPI_AWARENESS_CONTEXT right);
    public static bool op_Inequality(DPI_AWARENESS_CONTEXT left, DPI_AWARENESS_CONTEXT right);
    public sealed virtual bool Equals(DPI_AWARENESS_CONTEXT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.HiDpi.DPI_HOSTING_BEHAVIOR : Enum {
    public int value__;
    public static DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR_INVALID;
    public static DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR_DEFAULT;
    public static DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR_MIXED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.HiDpi.PROCESS_DPI_AWARENESS : Enum {
    public int value__;
    public static PROCESS_DPI_AWARENESS PROCESS_DPI_UNAWARE;
    public static PROCESS_DPI_AWARENESS PROCESS_SYSTEM_DPI_AWARE;
    public static PROCESS_DPI_AWARENESS PROCESS_PER_MONITOR_DPI_AWARE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.Ime.IME_COMPOSITION_STRING : Enum {
    public UInt32 value__;
    public static IME_COMPOSITION_STRING GCS_COMPREADSTR;
    public static IME_COMPOSITION_STRING GCS_COMPREADATTR;
    public static IME_COMPOSITION_STRING GCS_COMPREADCLAUSE;
    public static IME_COMPOSITION_STRING GCS_COMPSTR;
    public static IME_COMPOSITION_STRING GCS_COMPATTR;
    public static IME_COMPOSITION_STRING GCS_COMPCLAUSE;
    public static IME_COMPOSITION_STRING GCS_CURSORPOS;
    public static IME_COMPOSITION_STRING GCS_DELTASTART;
    public static IME_COMPOSITION_STRING GCS_RESULTREADSTR;
    public static IME_COMPOSITION_STRING GCS_RESULTREADCLAUSE;
    public static IME_COMPOSITION_STRING GCS_RESULTSTR;
    public static IME_COMPOSITION_STRING GCS_RESULTCLAUSE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.Ime.IME_CONVERSION_MODE : Enum {
    public UInt32 value__;
    public static IME_CONVERSION_MODE IME_CMODE_ALPHANUMERIC;
    public static IME_CONVERSION_MODE IME_CMODE_NATIVE;
    public static IME_CONVERSION_MODE IME_CMODE_CHINESE;
    public static IME_CONVERSION_MODE IME_CMODE_HANGUL;
    public static IME_CONVERSION_MODE IME_CMODE_JAPANESE;
    public static IME_CONVERSION_MODE IME_CMODE_KATAKANA;
    public static IME_CONVERSION_MODE IME_CMODE_LANGUAGE;
    public static IME_CONVERSION_MODE IME_CMODE_FULLSHAPE;
    public static IME_CONVERSION_MODE IME_CMODE_ROMAN;
    public static IME_CONVERSION_MODE IME_CMODE_CHARCODE;
    public static IME_CONVERSION_MODE IME_CMODE_HANJACONVERT;
    public static IME_CONVERSION_MODE IME_CMODE_NATIVESYMBOL;
    public static IME_CONVERSION_MODE IME_CMODE_HANGEUL;
    public static IME_CONVERSION_MODE IME_CMODE_SOFTKBD;
    public static IME_CONVERSION_MODE IME_CMODE_NOCONVERSION;
    public static IME_CONVERSION_MODE IME_CMODE_EUDC;
    public static IME_CONVERSION_MODE IME_CMODE_SYMBOL;
    public static IME_CONVERSION_MODE IME_CMODE_FIXED;
    public static IME_CONVERSION_MODE IME_CMODE_RESERVED;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.Ime.IME_SENTENCE_MODE : Enum {
    public UInt32 value__;
    public static IME_SENTENCE_MODE IME_SMODE_NONE;
    public static IME_SENTENCE_MODE IME_SMODE_PLAURALCLAUSE;
    public static IME_SENTENCE_MODE IME_SMODE_SINGLECONVERT;
    public static IME_SENTENCE_MODE IME_SMODE_AUTOMATIC;
    public static IME_SENTENCE_MODE IME_SMODE_PHRASEPREDICT;
    public static IME_SENTENCE_MODE IME_SMODE_CONVERSATION;
    public static IME_SENTENCE_MODE IME_SMODE_RESERVED;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.Ime.NOTIFY_IME_ACTION : Enum {
    public UInt32 value__;
    public static NOTIFY_IME_ACTION NI_CHANGECANDIDATELIST;
    public static NOTIFY_IME_ACTION NI_CLOSECANDIDATE;
    public static NOTIFY_IME_ACTION NI_COMPOSITIONSTR;
    public static NOTIFY_IME_ACTION NI_IMEMENUSELECTED;
    public static NOTIFY_IME_ACTION NI_OPENCANDIDATE;
    public static NOTIFY_IME_ACTION NI_SELECTCANDIDATESTR;
    public static NOTIFY_IME_ACTION NI_SETCANDIDATE_PAGESIZE;
    public static NOTIFY_IME_ACTION NI_SETCANDIDATE_PAGESTART;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.Ime.NOTIFY_IME_INDEX : Enum {
    public UInt32 value__;
    public static NOTIFY_IME_INDEX CPS_CANCEL;
    public static NOTIFY_IME_INDEX CPS_COMPLETE;
    public static NOTIFY_IME_INDEX CPS_CONVERT;
    public static NOTIFY_IME_INDEX CPS_REVERT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS : Enum {
    public UInt32 value__;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_REORDER;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_RESET;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_SETFORPROCESS;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_SHIFTLOCK;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_ACTIVATE;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_NOTELLSHELL;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_REPLACELANG;
    public static ACTIVATE_KEYBOARD_LAYOUT_FLAGS KLF_SUBSTITUTE_OK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT : ValueType {
    internal UInt32 uMsg;
    internal ushort wParamL;
    internal ushort wParamH;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Input.KeyboardAndMouse.INPUT : ValueType {
    internal INPUT_TYPE type;
    internal _Anonymous_e__Union Anonymous;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.INPUT_TYPE : Enum {
    public UInt32 value__;
    public static INPUT_TYPE INPUT_MOUSE;
    public static INPUT_TYPE INPUT_KEYBOARD;
    public static INPUT_TYPE INPUT_HARDWARE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.KEYBD_EVENT_FLAGS : Enum {
    public UInt32 value__;
    public static KEYBD_EVENT_FLAGS KEYEVENTF_EXTENDEDKEY;
    public static KEYBD_EVENT_FLAGS KEYEVENTF_KEYUP;
    public static KEYBD_EVENT_FLAGS KEYEVENTF_SCANCODE;
    public static KEYBD_EVENT_FLAGS KEYEVENTF_UNICODE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT : ValueType {
    internal VIRTUAL_KEY wVk;
    internal ushort wScan;
    internal KEYBD_EVENT_FLAGS dwFlags;
    internal UInt32 time;
    internal UIntPtr dwExtraInfo;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.MAP_VIRTUAL_KEY_TYPE : Enum {
    public UInt32 value__;
    public static MAP_VIRTUAL_KEY_TYPE MAPVK_VK_TO_VSC;
    public static MAP_VIRTUAL_KEY_TYPE MAPVK_VSC_TO_VK;
    public static MAP_VIRTUAL_KEY_TYPE MAPVK_VK_TO_CHAR;
    public static MAP_VIRTUAL_KEY_TYPE MAPVK_VSC_TO_VK_EX;
    public static MAP_VIRTUAL_KEY_TYPE MAPVK_VK_TO_VSC_EX;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.MOUSE_EVENT_FLAGS : Enum {
    public UInt32 value__;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_ABSOLUTE;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_LEFTDOWN;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_LEFTUP;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_MIDDLEDOWN;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_MIDDLEUP;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_MOVE;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_RIGHTDOWN;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_RIGHTUP;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_WHEEL;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_XDOWN;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_XUP;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_HWHEEL;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_MOVE_NOCOALESCE;
    public static MOUSE_EVENT_FLAGS MOUSEEVENTF_VIRTUALDESK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT : ValueType {
    internal int dx;
    internal int dy;
    internal int mouseData;
    internal MOUSE_EVENT_FLAGS dwFlags;
    internal UInt32 time;
    internal UIntPtr dwExtraInfo;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT : ValueType {
    internal UInt32 cbSize;
    internal TRACKMOUSEEVENT_FLAGS dwFlags;
    internal HWND hwndTrack;
    internal UInt32 dwHoverTime;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT_FLAGS : Enum {
    public UInt32 value__;
    public static TRACKMOUSEEVENT_FLAGS TME_CANCEL;
    public static TRACKMOUSEEVENT_FLAGS TME_HOVER;
    public static TRACKMOUSEEVENT_FLAGS TME_LEAVE;
    public static TRACKMOUSEEVENT_FLAGS TME_NONCLIENT;
    public static TRACKMOUSEEVENT_FLAGS TME_QUERY;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.VIRTUAL_KEY : Enum {
    public ushort value__;
    public static VIRTUAL_KEY VK_0;
    public static VIRTUAL_KEY VK_1;
    public static VIRTUAL_KEY VK_2;
    public static VIRTUAL_KEY VK_3;
    public static VIRTUAL_KEY VK_4;
    public static VIRTUAL_KEY VK_5;
    public static VIRTUAL_KEY VK_6;
    public static VIRTUAL_KEY VK_7;
    public static VIRTUAL_KEY VK_8;
    public static VIRTUAL_KEY VK_9;
    public static VIRTUAL_KEY VK_A;
    public static VIRTUAL_KEY VK_B;
    public static VIRTUAL_KEY VK_C;
    public static VIRTUAL_KEY VK_D;
    public static VIRTUAL_KEY VK_E;
    public static VIRTUAL_KEY VK_F;
    public static VIRTUAL_KEY VK_G;
    public static VIRTUAL_KEY VK_H;
    public static VIRTUAL_KEY VK_I;
    public static VIRTUAL_KEY VK_J;
    public static VIRTUAL_KEY VK_K;
    public static VIRTUAL_KEY VK_L;
    public static VIRTUAL_KEY VK_M;
    public static VIRTUAL_KEY VK_N;
    public static VIRTUAL_KEY VK_O;
    public static VIRTUAL_KEY VK_P;
    public static VIRTUAL_KEY VK_Q;
    public static VIRTUAL_KEY VK_R;
    public static VIRTUAL_KEY VK_S;
    public static VIRTUAL_KEY VK_T;
    public static VIRTUAL_KEY VK_U;
    public static VIRTUAL_KEY VK_V;
    public static VIRTUAL_KEY VK_W;
    public static VIRTUAL_KEY VK_X;
    public static VIRTUAL_KEY VK_Y;
    public static VIRTUAL_KEY VK_Z;
    public static VIRTUAL_KEY VK_ABNT_C1;
    public static VIRTUAL_KEY VK_ABNT_C2;
    public static VIRTUAL_KEY VK_DBE_ALPHANUMERIC;
    public static VIRTUAL_KEY VK_DBE_CODEINPUT;
    public static VIRTUAL_KEY VK_DBE_DBCSCHAR;
    public static VIRTUAL_KEY VK_DBE_DETERMINESTRING;
    public static VIRTUAL_KEY VK_DBE_ENTERDLGCONVERSIONMODE;
    public static VIRTUAL_KEY VK_DBE_ENTERIMECONFIGMODE;
    public static VIRTUAL_KEY VK_DBE_ENTERWORDREGISTERMODE;
    public static VIRTUAL_KEY VK_DBE_FLUSHSTRING;
    public static VIRTUAL_KEY VK_DBE_HIRAGANA;
    public static VIRTUAL_KEY VK_DBE_KATAKANA;
    public static VIRTUAL_KEY VK_DBE_NOCODEINPUT;
    public static VIRTUAL_KEY VK_DBE_NOROMAN;
    public static VIRTUAL_KEY VK_DBE_ROMAN;
    public static VIRTUAL_KEY VK_DBE_SBCSCHAR;
    public static VIRTUAL_KEY VK__none_;
    public static VIRTUAL_KEY VK_LBUTTON;
    public static VIRTUAL_KEY VK_RBUTTON;
    public static VIRTUAL_KEY VK_CANCEL;
    public static VIRTUAL_KEY VK_MBUTTON;
    public static VIRTUAL_KEY VK_XBUTTON1;
    public static VIRTUAL_KEY VK_XBUTTON2;
    public static VIRTUAL_KEY VK_BACK;
    public static VIRTUAL_KEY VK_TAB;
    public static VIRTUAL_KEY VK_CLEAR;
    public static VIRTUAL_KEY VK_RETURN;
    public static VIRTUAL_KEY VK_SHIFT;
    public static VIRTUAL_KEY VK_CONTROL;
    public static VIRTUAL_KEY VK_MENU;
    public static VIRTUAL_KEY VK_PAUSE;
    public static VIRTUAL_KEY VK_CAPITAL;
    public static VIRTUAL_KEY VK_KANA;
    public static VIRTUAL_KEY VK_HANGEUL;
    public static VIRTUAL_KEY VK_HANGUL;
    public static VIRTUAL_KEY VK_IME_ON;
    public static VIRTUAL_KEY VK_JUNJA;
    public static VIRTUAL_KEY VK_FINAL;
    public static VIRTUAL_KEY VK_HANJA;
    public static VIRTUAL_KEY VK_KANJI;
    public static VIRTUAL_KEY VK_IME_OFF;
    public static VIRTUAL_KEY VK_ESCAPE;
    public static VIRTUAL_KEY VK_CONVERT;
    public static VIRTUAL_KEY VK_NONCONVERT;
    public static VIRTUAL_KEY VK_ACCEPT;
    public static VIRTUAL_KEY VK_MODECHANGE;
    public static VIRTUAL_KEY VK_SPACE;
    public static VIRTUAL_KEY VK_PRIOR;
    public static VIRTUAL_KEY VK_NEXT;
    public static VIRTUAL_KEY VK_END;
    public static VIRTUAL_KEY VK_HOME;
    public static VIRTUAL_KEY VK_LEFT;
    public static VIRTUAL_KEY VK_UP;
    public static VIRTUAL_KEY VK_RIGHT;
    public static VIRTUAL_KEY VK_DOWN;
    public static VIRTUAL_KEY VK_SELECT;
    public static VIRTUAL_KEY VK_PRINT;
    public static VIRTUAL_KEY VK_EXECUTE;
    public static VIRTUAL_KEY VK_SNAPSHOT;
    public static VIRTUAL_KEY VK_INSERT;
    public static VIRTUAL_KEY VK_DELETE;
    public static VIRTUAL_KEY VK_HELP;
    public static VIRTUAL_KEY VK_LWIN;
    public static VIRTUAL_KEY VK_RWIN;
    public static VIRTUAL_KEY VK_APPS;
    public static VIRTUAL_KEY VK_SLEEP;
    public static VIRTUAL_KEY VK_NUMPAD0;
    public static VIRTUAL_KEY VK_NUMPAD1;
    public static VIRTUAL_KEY VK_NUMPAD2;
    public static VIRTUAL_KEY VK_NUMPAD3;
    public static VIRTUAL_KEY VK_NUMPAD4;
    public static VIRTUAL_KEY VK_NUMPAD5;
    public static VIRTUAL_KEY VK_NUMPAD6;
    public static VIRTUAL_KEY VK_NUMPAD7;
    public static VIRTUAL_KEY VK_NUMPAD8;
    public static VIRTUAL_KEY VK_NUMPAD9;
    public static VIRTUAL_KEY VK_MULTIPLY;
    public static VIRTUAL_KEY VK_ADD;
    public static VIRTUAL_KEY VK_SEPARATOR;
    public static VIRTUAL_KEY VK_SUBTRACT;
    public static VIRTUAL_KEY VK_DECIMAL;
    public static VIRTUAL_KEY VK_DIVIDE;
    public static VIRTUAL_KEY VK_F1;
    public static VIRTUAL_KEY VK_F2;
    public static VIRTUAL_KEY VK_F3;
    public static VIRTUAL_KEY VK_F4;
    public static VIRTUAL_KEY VK_F5;
    public static VIRTUAL_KEY VK_F6;
    public static VIRTUAL_KEY VK_F7;
    public static VIRTUAL_KEY VK_F8;
    public static VIRTUAL_KEY VK_F9;
    public static VIRTUAL_KEY VK_F10;
    public static VIRTUAL_KEY VK_F11;
    public static VIRTUAL_KEY VK_F12;
    public static VIRTUAL_KEY VK_F13;
    public static VIRTUAL_KEY VK_F14;
    public static VIRTUAL_KEY VK_F15;
    public static VIRTUAL_KEY VK_F16;
    public static VIRTUAL_KEY VK_F17;
    public static VIRTUAL_KEY VK_F18;
    public static VIRTUAL_KEY VK_F19;
    public static VIRTUAL_KEY VK_F20;
    public static VIRTUAL_KEY VK_F21;
    public static VIRTUAL_KEY VK_F22;
    public static VIRTUAL_KEY VK_F23;
    public static VIRTUAL_KEY VK_F24;
    public static VIRTUAL_KEY VK_NAVIGATION_VIEW;
    public static VIRTUAL_KEY VK_NAVIGATION_MENU;
    public static VIRTUAL_KEY VK_NAVIGATION_UP;
    public static VIRTUAL_KEY VK_NAVIGATION_DOWN;
    public static VIRTUAL_KEY VK_NAVIGATION_LEFT;
    public static VIRTUAL_KEY VK_NAVIGATION_RIGHT;
    public static VIRTUAL_KEY VK_NAVIGATION_ACCEPT;
    public static VIRTUAL_KEY VK_NAVIGATION_CANCEL;
    public static VIRTUAL_KEY VK_NUMLOCK;
    public static VIRTUAL_KEY VK_SCROLL;
    public static VIRTUAL_KEY VK_OEM_NEC_EQUAL;
    public static VIRTUAL_KEY VK_OEM_FJ_JISHO;
    public static VIRTUAL_KEY VK_OEM_FJ_MASSHOU;
    public static VIRTUAL_KEY VK_OEM_FJ_TOUROKU;
    public static VIRTUAL_KEY VK_OEM_FJ_LOYA;
    public static VIRTUAL_KEY VK_OEM_FJ_ROYA;
    public static VIRTUAL_KEY VK_LSHIFT;
    public static VIRTUAL_KEY VK_RSHIFT;
    public static VIRTUAL_KEY VK_LCONTROL;
    public static VIRTUAL_KEY VK_RCONTROL;
    public static VIRTUAL_KEY VK_LMENU;
    public static VIRTUAL_KEY VK_RMENU;
    public static VIRTUAL_KEY VK_BROWSER_BACK;
    public static VIRTUAL_KEY VK_BROWSER_FORWARD;
    public static VIRTUAL_KEY VK_BROWSER_REFRESH;
    public static VIRTUAL_KEY VK_BROWSER_STOP;
    public static VIRTUAL_KEY VK_BROWSER_SEARCH;
    public static VIRTUAL_KEY VK_BROWSER_FAVORITES;
    public static VIRTUAL_KEY VK_BROWSER_HOME;
    public static VIRTUAL_KEY VK_VOLUME_MUTE;
    public static VIRTUAL_KEY VK_VOLUME_DOWN;
    public static VIRTUAL_KEY VK_VOLUME_UP;
    public static VIRTUAL_KEY VK_MEDIA_NEXT_TRACK;
    public static VIRTUAL_KEY VK_MEDIA_PREV_TRACK;
    public static VIRTUAL_KEY VK_MEDIA_STOP;
    public static VIRTUAL_KEY VK_MEDIA_PLAY_PAUSE;
    public static VIRTUAL_KEY VK_LAUNCH_MAIL;
    public static VIRTUAL_KEY VK_LAUNCH_MEDIA_SELECT;
    public static VIRTUAL_KEY VK_LAUNCH_APP1;
    public static VIRTUAL_KEY VK_LAUNCH_APP2;
    public static VIRTUAL_KEY VK_OEM_1;
    public static VIRTUAL_KEY VK_OEM_PLUS;
    public static VIRTUAL_KEY VK_OEM_COMMA;
    public static VIRTUAL_KEY VK_OEM_MINUS;
    public static VIRTUAL_KEY VK_OEM_PERIOD;
    public static VIRTUAL_KEY VK_OEM_2;
    public static VIRTUAL_KEY VK_OEM_3;
    public static VIRTUAL_KEY VK_GAMEPAD_A;
    public static VIRTUAL_KEY VK_GAMEPAD_B;
    public static VIRTUAL_KEY VK_GAMEPAD_X;
    public static VIRTUAL_KEY VK_GAMEPAD_Y;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_SHOULDER;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_SHOULDER;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_TRIGGER;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_TRIGGER;
    public static VIRTUAL_KEY VK_GAMEPAD_DPAD_UP;
    public static VIRTUAL_KEY VK_GAMEPAD_DPAD_DOWN;
    public static VIRTUAL_KEY VK_GAMEPAD_DPAD_LEFT;
    public static VIRTUAL_KEY VK_GAMEPAD_DPAD_RIGHT;
    public static VIRTUAL_KEY VK_GAMEPAD_MENU;
    public static VIRTUAL_KEY VK_GAMEPAD_VIEW;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_THUMBSTICK_UP;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_THUMBSTICK_DOWN;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT;
    public static VIRTUAL_KEY VK_GAMEPAD_LEFT_THUMBSTICK_LEFT;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_THUMBSTICK_UP;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT;
    public static VIRTUAL_KEY VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT;
    public static VIRTUAL_KEY VK_OEM_4;
    public static VIRTUAL_KEY VK_OEM_5;
    public static VIRTUAL_KEY VK_OEM_6;
    public static VIRTUAL_KEY VK_OEM_7;
    public static VIRTUAL_KEY VK_OEM_8;
    public static VIRTUAL_KEY VK_OEM_AX;
    public static VIRTUAL_KEY VK_OEM_102;
    public static VIRTUAL_KEY VK_ICO_HELP;
    public static VIRTUAL_KEY VK_ICO_00;
    public static VIRTUAL_KEY VK_PROCESSKEY;
    public static VIRTUAL_KEY VK_ICO_CLEAR;
    public static VIRTUAL_KEY VK_PACKET;
    public static VIRTUAL_KEY VK_OEM_RESET;
    public static VIRTUAL_KEY VK_OEM_JUMP;
    public static VIRTUAL_KEY VK_OEM_PA1;
    public static VIRTUAL_KEY VK_OEM_PA2;
    public static VIRTUAL_KEY VK_OEM_PA3;
    public static VIRTUAL_KEY VK_OEM_WSCTRL;
    public static VIRTUAL_KEY VK_OEM_CUSEL;
    public static VIRTUAL_KEY VK_OEM_ATTN;
    public static VIRTUAL_KEY VK_OEM_FINISH;
    public static VIRTUAL_KEY VK_OEM_COPY;
    public static VIRTUAL_KEY VK_OEM_AUTO;
    public static VIRTUAL_KEY VK_OEM_ENLW;
    public static VIRTUAL_KEY VK_OEM_BACKTAB;
    public static VIRTUAL_KEY VK_ATTN;
    public static VIRTUAL_KEY VK_CRSEL;
    public static VIRTUAL_KEY VK_EXSEL;
    public static VIRTUAL_KEY VK_EREOF;
    public static VIRTUAL_KEY VK_PLAY;
    public static VIRTUAL_KEY VK_ZOOM;
    public static VIRTUAL_KEY VK_NONAME;
    public static VIRTUAL_KEY VK_PA1;
    public static VIRTUAL_KEY VK_OEM_CLEAR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.AUTOCOMPLETEOPTIONS : Enum {
    public int value__;
    public static AUTOCOMPLETEOPTIONS ACO_NONE;
    public static AUTOCOMPLETEOPTIONS ACO_AUTOSUGGEST;
    public static AUTOCOMPLETEOPTIONS ACO_AUTOAPPEND;
    public static AUTOCOMPLETEOPTIONS ACO_SEARCH;
    public static AUTOCOMPLETEOPTIONS ACO_FILTERPREFIXES;
    public static AUTOCOMPLETEOPTIONS ACO_USETAB;
    public static AUTOCOMPLETEOPTIONS ACO_UPDOWNKEYDROPSLIST;
    public static AUTOCOMPLETEOPTIONS ACO_RTLREADING;
    public static AUTOCOMPLETEOPTIONS ACO_WORD_FILTER;
    public static AUTOCOMPLETEOPTIONS ACO_NOPREFIXFILTERING;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.BROWSEINFOW : ValueType {
    internal HWND hwndOwner;
    internal ITEMIDLIST* pidlRoot;
    internal PWSTR pszDisplayName;
    internal PCWSTR lpszTitle;
    internal UInt32 ulFlags;
    internal method lpfn;
    internal LPARAM lParam;
    internal int iImage;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.CDCONTROLSTATEF : Enum {
    public int value__;
    public static CDCONTROLSTATEF CDCS_INACTIVE;
    public static CDCONTROLSTATEF CDCS_ENABLED;
    public static CDCONTROLSTATEF CDCS_VISIBLE;
    public static CDCONTROLSTATEF CDCS_ENABLEDVISIBLE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC : ValueType {
    internal PCWSTR pszName;
    internal PCWSTR pszSpec;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.Common.ITEMIDLIST : ValueType {
    internal SHITEMID mkid;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.Common.SHITEMID : ValueType {
    internal ushort cb;
    internal __byte_1 abID;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.Common.STRRET : ValueType {
    internal UInt32 uType;
    internal _Anonymous_e__Union Anonymous;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.DROPDESCRIPTION : ValueType {
    internal DROPIMAGETYPE type;
    internal __char_260 szMessage;
    internal __char_260 szInsert;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.DROPFILES : ValueType {
    internal UInt32 pFiles;
    internal Point pt;
    internal BOOL fNC;
    internal BOOL fWide;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.DROPIMAGETYPE : Enum {
    public int value__;
    public static DROPIMAGETYPE DROPIMAGE_INVALID;
    public static DROPIMAGETYPE DROPIMAGE_NONE;
    public static DROPIMAGETYPE DROPIMAGE_COPY;
    public static DROPIMAGETYPE DROPIMAGE_MOVE;
    public static DROPIMAGETYPE DROPIMAGE_LINK;
    public static DROPIMAGETYPE DROPIMAGE_LABEL;
    public static DROPIMAGETYPE DROPIMAGE_WARNING;
    public static DROPIMAGETYPE DROPIMAGE_NOIMAGE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.FDAP : Enum {
    public int value__;
    public static FDAP FDAP_BOTTOM;
    public static FDAP FDAP_TOP;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.FDE_OVERWRITE_RESPONSE : Enum {
    public int value__;
    public static FDE_OVERWRITE_RESPONSE FDEOR_DEFAULT;
    public static FDE_OVERWRITE_RESPONSE FDEOR_ACCEPT;
    public static FDE_OVERWRITE_RESPONSE FDEOR_REFUSE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.FDE_SHAREVIOLATION_RESPONSE : Enum {
    public int value__;
    public static FDE_SHAREVIOLATION_RESPONSE FDESVR_DEFAULT;
    public static FDE_SHAREVIOLATION_RESPONSE FDESVR_ACCEPT;
    public static FDE_SHAREVIOLATION_RESPONSE FDESVR_REFUSE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.FILEOPENDIALOGOPTIONS : Enum {
    public UInt32 value__;
    public static FILEOPENDIALOGOPTIONS FOS_OVERWRITEPROMPT;
    public static FILEOPENDIALOGOPTIONS FOS_STRICTFILETYPES;
    public static FILEOPENDIALOGOPTIONS FOS_NOCHANGEDIR;
    public static FILEOPENDIALOGOPTIONS FOS_PICKFOLDERS;
    public static FILEOPENDIALOGOPTIONS FOS_FORCEFILESYSTEM;
    public static FILEOPENDIALOGOPTIONS FOS_ALLNONSTORAGEITEMS;
    public static FILEOPENDIALOGOPTIONS FOS_NOVALIDATE;
    public static FILEOPENDIALOGOPTIONS FOS_ALLOWMULTISELECT;
    public static FILEOPENDIALOGOPTIONS FOS_PATHMUSTEXIST;
    public static FILEOPENDIALOGOPTIONS FOS_FILEMUSTEXIST;
    public static FILEOPENDIALOGOPTIONS FOS_CREATEPROMPT;
    public static FILEOPENDIALOGOPTIONS FOS_SHAREAWARE;
    public static FILEOPENDIALOGOPTIONS FOS_NOREADONLYRETURN;
    public static FILEOPENDIALOGOPTIONS FOS_NOTESTFILECREATE;
    public static FILEOPENDIALOGOPTIONS FOS_HIDEMRUPLACES;
    public static FILEOPENDIALOGOPTIONS FOS_HIDEPINNEDPLACES;
    public static FILEOPENDIALOGOPTIONS FOS_NODEREFERENCELINKS;
    public static FILEOPENDIALOGOPTIONS FOS_OKBUTTONNEEDSINTERACTION;
    public static FILEOPENDIALOGOPTIONS FOS_DONTADDTORECENT;
    public static FILEOPENDIALOGOPTIONS FOS_FORCESHOWHIDDEN;
    public static FILEOPENDIALOGOPTIONS FOS_DEFAULTNOMINIMODE;
    public static FILEOPENDIALOGOPTIONS FOS_FORCEPREVIEWPANEON;
    public static FILEOPENDIALOGOPTIONS FOS_SUPPORTSTREAMABLEITEMS;
}
internal static class Windows.Win32.UI.Shell.FolderBrowserHelper : object {
    internal static string BrowseForFolder(string title, int rootFolderCsidl, UInt32 flags, HWND owner, method callback, LPARAM lParam);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.GPFIDL_FLAGS : Enum {
    public UInt32 value__;
    public static GPFIDL_FLAGS GPFIDL_DEFAULT;
    public static GPFIDL_FLAGS GPFIDL_ALTNAME;
    public static GPFIDL_FLAGS GPFIDL_UNCPRINTER;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.HDROP : ValueType {
    internal IntPtr Value;
    internal HDROP(IntPtr value);
    public static IntPtr op_Implicit(HDROP value);
    public static HDROP op_Explicit(IntPtr value);
    public static bool op_Equality(HDROP left, HDROP right);
    public static bool op_Inequality(HDROP left, HDROP right);
    public sealed virtual bool Equals(HDROP other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.HELP_INFO_TYPE : Enum {
    public int value__;
    public static HELP_INFO_TYPE HELPINFO_WINDOW;
    public static HELP_INFO_TYPE HELPINFO_MENUITEM;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.HELPINFO : ValueType {
    internal UInt32 cbSize;
    internal HELP_INFO_TYPE iContextType;
    internal int iCtrlId;
    internal HANDLE hItemHandle;
    internal UIntPtr dwContextId;
    internal Point MousePos;
}
[GuidAttribute("00BB2762-6A77-11D0-A535-00C04FD7D062")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IAutoComplete : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IAutoComplete();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Init(HWND hwndEdit, IUnknown* punkACL, string pwszRegKeyPath, string pwszQuickComplete);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Init(IAutoComplete* pThis, HWND hwndEdit, IUnknown* punkACL, PCWSTR pwszRegKeyPath, PCWSTR pwszQuickComplete);
    public void Init(HWND hwndEdit, IUnknown* punkACL, PCWSTR pwszRegKeyPath, PCWSTR pwszQuickComplete);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Enable(IAutoComplete* pThis, BOOL fEnable);
    public void Enable(BOOL fEnable);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("EAC04BC0-3791-11D2-BB95-0060977B464C")]
[SupportedOSPlatformAttribute("windows5.0")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IAutoComplete2 : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IAutoComplete2();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void Init(HWND hwndEdit, IUnknown* punkACL, string pwszRegKeyPath, string pwszQuickComplete);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Init(IAutoComplete2* pThis, HWND hwndEdit, IUnknown* punkACL, PCWSTR pwszRegKeyPath, PCWSTR pwszQuickComplete);
    public void Init(HWND hwndEdit, IUnknown* punkACL, PCWSTR pwszRegKeyPath, PCWSTR pwszQuickComplete);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Enable(IAutoComplete2* pThis, BOOL fEnable);
    public void Enable(BOOL fEnable);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOptions(IAutoComplete2* pThis, UInt32 dwFlag);
    public HRESULT SetOptions(UInt32 dwFlag);
    internal void GetOptions(UInt32& pdwFlag);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetOptions(IAutoComplete2* pThis, UInt32* pdwFlag);
    public void GetOptions(UInt32* pdwFlag);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("000214F2-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IEnumIDList : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumIDList();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumIDList* pThis, UInt32 celt, ITEMIDLIST** rgelt, UInt32* pceltFetched);
    public HRESULT Next(UInt32 celt, ITEMIDLIST** rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumIDList* pThis, UInt32 celt);
    public HRESULT Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumIDList* pThis);
    public HRESULT Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumIDList* pThis, IEnumIDList** ppenum);
    public HRESULT Clone(IEnumIDList** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("70629033-E363-4A28-A567-0DB78006E6D7")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IEnumShellItems : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IEnumShellItems();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Next(IEnumShellItems* pThis, UInt32 celt, IShellItem** rgelt, UInt32* pceltFetched);
    public void Next(UInt32 celt, IShellItem** rgelt, UInt32* pceltFetched);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Skip(IEnumShellItems* pThis, UInt32 celt);
    public void Skip(UInt32 celt);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Reset(IEnumShellItems* pThis);
    public void Reset();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Clone(IEnumShellItems* pThis, IEnumShellItems** ppenum);
    public void Clone(IEnumShellItems** ppenum);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("42F85136-DB7E-439C-85F1-E4075D135FC8")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IFileDialog : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFileDialog();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Show(IFileDialog* pThis, HWND hwndOwner);
    public HRESULT Show(HWND hwndOwner);
    internal void SetFileTypes(ReadOnlySpan`1<COMDLG_FILTERSPEC> rgFilterSpec);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileTypes(IFileDialog* pThis, UInt32 cFileTypes, COMDLG_FILTERSPEC* rgFilterSpec);
    public void SetFileTypes(UInt32 cFileTypes, COMDLG_FILTERSPEC* rgFilterSpec);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileTypeIndex(IFileDialog* pThis, UInt32 iFileType);
    public void SetFileTypeIndex(UInt32 iFileType);
    internal void GetFileTypeIndex(UInt32& piFileType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFileTypeIndex(IFileDialog* pThis, UInt32* piFileType);
    public void GetFileTypeIndex(UInt32* piFileType);
    internal void Advise(IFileDialogEvents* pfde, UInt32& pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Advise(IFileDialog* pThis, IFileDialogEvents* pfde, UInt32* pdwCookie);
    public void Advise(IFileDialogEvents* pfde, UInt32* pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unadvise(IFileDialog* pThis, UInt32 dwCookie);
    public void Unadvise(UInt32 dwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOptions(IFileDialog* pThis, FILEOPENDIALOGOPTIONS fos);
    public void SetOptions(FILEOPENDIALOGOPTIONS fos);
    internal void GetOptions(FILEOPENDIALOGOPTIONS& pfos);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetOptions(IFileDialog* pThis, FILEOPENDIALOGOPTIONS* pfos);
    public void GetOptions(FILEOPENDIALOGOPTIONS* pfos);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetDefaultFolder(IFileDialog* pThis, IShellItem* psi);
    public void SetDefaultFolder(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFolder(IFileDialog* pThis, IShellItem* psi);
    public void SetFolder(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFolder(IFileDialog* pThis, IShellItem** ppsi);
    public void GetFolder(IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCurrentSelection(IFileDialog* pThis, IShellItem** ppsi);
    public void GetCurrentSelection(IShellItem** ppsi);
    internal void SetFileName(string pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileName(IFileDialog* pThis, PCWSTR pszName);
    public void SetFileName(PCWSTR pszName);
    internal void GetFileName(PWSTR& pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFileName(IFileDialog* pThis, PWSTR* pszName);
    public void GetFileName(PWSTR* pszName);
    internal void SetTitle(string pszTitle);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetTitle(IFileDialog* pThis, PCWSTR pszTitle);
    public void SetTitle(PCWSTR pszTitle);
    internal void SetOkButtonLabel(string pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOkButtonLabel(IFileDialog* pThis, PCWSTR pszText);
    public void SetOkButtonLabel(PCWSTR pszText);
    internal void SetFileNameLabel(string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileNameLabel(IFileDialog* pThis, PCWSTR pszLabel);
    public void SetFileNameLabel(PCWSTR pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetResult(IFileDialog* pThis, IShellItem** ppsi);
    public HRESULT GetResult(IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddPlace(IFileDialog* pThis, IShellItem* psi, FDAP fdap);
    public void AddPlace(IShellItem* psi, FDAP fdap);
    internal void SetDefaultExtension(string pszDefaultExtension);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetDefaultExtension(IFileDialog* pThis, PCWSTR pszDefaultExtension);
    public void SetDefaultExtension(PCWSTR pszDefaultExtension);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Close(IFileDialog* pThis, HRESULT hr);
    public void Close(HRESULT hr);
    internal void SetClientGuid(Guid& guid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetClientGuid(IFileDialog* pThis, Guid* guid);
    public void SetClientGuid(Guid* guid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ClearClientData(IFileDialog* pThis);
    public void ClearClientData();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFilter(IFileDialog* pThis, IShellItemFilter* pFilter);
    public void SetFilter(IShellItemFilter* pFilter);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("E6FDD21A-163F-4975-9C8C-A69F1BA37034")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IFileDialogCustomize : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFileDialogCustomize();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnableOpenDropDown(IFileDialogCustomize* pThis, UInt32 dwIDCtl);
    public void EnableOpenDropDown(UInt32 dwIDCtl);
    internal void AddMenu(UInt32 dwIDCtl, string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddMenu(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszLabel);
    public void AddMenu(UInt32 dwIDCtl, PCWSTR pszLabel);
    internal void AddPushButton(UInt32 dwIDCtl, string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddPushButton(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszLabel);
    public void AddPushButton(UInt32 dwIDCtl, PCWSTR pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddComboBox(IFileDialogCustomize* pThis, UInt32 dwIDCtl);
    public void AddComboBox(UInt32 dwIDCtl);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddRadioButtonList(IFileDialogCustomize* pThis, UInt32 dwIDCtl);
    public void AddRadioButtonList(UInt32 dwIDCtl);
    internal void AddCheckButton(UInt32 dwIDCtl, string pszLabel, BOOL bChecked);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddCheckButton(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszLabel, BOOL bChecked);
    public void AddCheckButton(UInt32 dwIDCtl, PCWSTR pszLabel, BOOL bChecked);
    internal void AddEditBox(UInt32 dwIDCtl, string pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddEditBox(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszText);
    public void AddEditBox(UInt32 dwIDCtl, PCWSTR pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddSeparator(IFileDialogCustomize* pThis, UInt32 dwIDCtl);
    public void AddSeparator(UInt32 dwIDCtl);
    internal void AddText(UInt32 dwIDCtl, string pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddText(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszText);
    public void AddText(UInt32 dwIDCtl, PCWSTR pszText);
    internal void SetControlLabel(UInt32 dwIDCtl, string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetControlLabel(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszLabel);
    public void SetControlLabel(UInt32 dwIDCtl, PCWSTR pszLabel);
    internal void GetControlState(UInt32 dwIDCtl, CDCONTROLSTATEF& pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetControlState(IFileDialogCustomize* pThis, UInt32 dwIDCtl, CDCONTROLSTATEF* pdwState);
    public void GetControlState(UInt32 dwIDCtl, CDCONTROLSTATEF* pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetControlState(IFileDialogCustomize* pThis, UInt32 dwIDCtl, CDCONTROLSTATEF dwState);
    public void SetControlState(UInt32 dwIDCtl, CDCONTROLSTATEF dwState);
    internal void GetEditBoxText(UInt32 dwIDCtl, UInt16*& ppszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetEditBoxText(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt16** ppszText);
    public void GetEditBoxText(UInt32 dwIDCtl, UInt16** ppszText);
    internal void SetEditBoxText(UInt32 dwIDCtl, string pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetEditBoxText(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszText);
    public void SetEditBoxText(UInt32 dwIDCtl, PCWSTR pszText);
    internal void GetCheckButtonState(UInt32 dwIDCtl, BOOL& pbChecked);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCheckButtonState(IFileDialogCustomize* pThis, UInt32 dwIDCtl, BOOL* pbChecked);
    public void GetCheckButtonState(UInt32 dwIDCtl, BOOL* pbChecked);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetCheckButtonState(IFileDialogCustomize* pThis, UInt32 dwIDCtl, BOOL bChecked);
    public void SetCheckButtonState(UInt32 dwIDCtl, BOOL bChecked);
    internal void AddControlItem(UInt32 dwIDCtl, UInt32 dwIDItem, string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddControlItem(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32 dwIDItem, PCWSTR pszLabel);
    public void AddControlItem(UInt32 dwIDCtl, UInt32 dwIDItem, PCWSTR pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RemoveControlItem(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32 dwIDItem);
    public void RemoveControlItem(UInt32 dwIDCtl, UInt32 dwIDItem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT RemoveAllControlItems(IFileDialogCustomize* pThis, UInt32 dwIDCtl);
    public void RemoveAllControlItems(UInt32 dwIDCtl);
    internal void GetControlItemState(UInt32 dwIDCtl, UInt32 dwIDItem, CDCONTROLSTATEF& pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetControlItemState(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32 dwIDItem, CDCONTROLSTATEF* pdwState);
    public void GetControlItemState(UInt32 dwIDCtl, UInt32 dwIDItem, CDCONTROLSTATEF* pdwState);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetControlItemState(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32 dwIDItem, CDCONTROLSTATEF dwState);
    public void SetControlItemState(UInt32 dwIDCtl, UInt32 dwIDItem, CDCONTROLSTATEF dwState);
    internal void GetSelectedControlItem(UInt32 dwIDCtl, UInt32& pdwIDItem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSelectedControlItem(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32* pdwIDItem);
    public void GetSelectedControlItem(UInt32 dwIDCtl, UInt32* pdwIDItem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetSelectedControlItem(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32 dwIDItem);
    public void SetSelectedControlItem(UInt32 dwIDCtl, UInt32 dwIDItem);
    internal void StartVisualGroup(UInt32 dwIDCtl, string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT StartVisualGroup(IFileDialogCustomize* pThis, UInt32 dwIDCtl, PCWSTR pszLabel);
    public void StartVisualGroup(UInt32 dwIDCtl, PCWSTR pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EndVisualGroup(IFileDialogCustomize* pThis);
    public void EndVisualGroup();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT MakeProminent(IFileDialogCustomize* pThis, UInt32 dwIDCtl);
    public void MakeProminent(UInt32 dwIDCtl);
    internal void SetControlItemText(UInt32 dwIDCtl, UInt32 dwIDItem, string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetControlItemText(IFileDialogCustomize* pThis, UInt32 dwIDCtl, UInt32 dwIDItem, PCWSTR pszLabel);
    public void SetControlItemText(UInt32 dwIDCtl, UInt32 dwIDItem, PCWSTR pszLabel);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("973510DB-7D7F-452B-8975-74A85828D354")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IFileDialogEvents : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFileDialogEvents();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnFileOk(IFileDialogEvents* pThis, IFileDialog* pfd);
    public void OnFileOk(IFileDialog* pfd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnFolderChanging(IFileDialogEvents* pThis, IFileDialog* pfd, IShellItem* psiFolder);
    public void OnFolderChanging(IFileDialog* pfd, IShellItem* psiFolder);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnFolderChange(IFileDialogEvents* pThis, IFileDialog* pfd);
    public void OnFolderChange(IFileDialog* pfd);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnSelectionChange(IFileDialogEvents* pThis, IFileDialog* pfd);
    public void OnSelectionChange(IFileDialog* pfd);
    internal void OnShareViolation(IFileDialog* pfd, IShellItem* psi, FDE_SHAREVIOLATION_RESPONSE& pResponse);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnShareViolation(IFileDialogEvents* pThis, IFileDialog* pfd, IShellItem* psi, FDE_SHAREVIOLATION_RESPONSE* pResponse);
    public void OnShareViolation(IFileDialog* pfd, IShellItem* psi, FDE_SHAREVIOLATION_RESPONSE* pResponse);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnTypeChange(IFileDialogEvents* pThis, IFileDialog* pfd);
    public void OnTypeChange(IFileDialog* pfd);
    internal void OnOverwrite(IFileDialog* pfd, IShellItem* psi, FDE_OVERWRITE_RESPONSE& pResponse);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT OnOverwrite(IFileDialogEvents* pThis, IFileDialog* pfd, IShellItem* psi, FDE_OVERWRITE_RESPONSE* pResponse);
    public void OnOverwrite(IFileDialog* pfd, IShellItem* psi, FDE_OVERWRITE_RESPONSE* pResponse);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("D57C7288-D4AD-4768-BE02-9D969532D960")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IFileOpenDialog : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFileOpenDialog();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Show(IFileOpenDialog* pThis, HWND hwndOwner);
    public HRESULT Show(HWND hwndOwner);
    internal void SetFileTypes(ReadOnlySpan`1<COMDLG_FILTERSPEC> rgFilterSpec);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileTypes(IFileOpenDialog* pThis, UInt32 cFileTypes, COMDLG_FILTERSPEC* rgFilterSpec);
    public void SetFileTypes(UInt32 cFileTypes, COMDLG_FILTERSPEC* rgFilterSpec);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileTypeIndex(IFileOpenDialog* pThis, UInt32 iFileType);
    public void SetFileTypeIndex(UInt32 iFileType);
    internal void GetFileTypeIndex(UInt32& piFileType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFileTypeIndex(IFileOpenDialog* pThis, UInt32* piFileType);
    public void GetFileTypeIndex(UInt32* piFileType);
    internal void Advise(IFileDialogEvents* pfde, UInt32& pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Advise(IFileOpenDialog* pThis, IFileDialogEvents* pfde, UInt32* pdwCookie);
    public void Advise(IFileDialogEvents* pfde, UInt32* pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unadvise(IFileOpenDialog* pThis, UInt32 dwCookie);
    public void Unadvise(UInt32 dwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOptions(IFileOpenDialog* pThis, FILEOPENDIALOGOPTIONS fos);
    public void SetOptions(FILEOPENDIALOGOPTIONS fos);
    internal void GetOptions(FILEOPENDIALOGOPTIONS& pfos);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetOptions(IFileOpenDialog* pThis, FILEOPENDIALOGOPTIONS* pfos);
    public void GetOptions(FILEOPENDIALOGOPTIONS* pfos);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetDefaultFolder(IFileOpenDialog* pThis, IShellItem* psi);
    public void SetDefaultFolder(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFolder(IFileOpenDialog* pThis, IShellItem* psi);
    public void SetFolder(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFolder(IFileOpenDialog* pThis, IShellItem** ppsi);
    public void GetFolder(IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCurrentSelection(IFileOpenDialog* pThis, IShellItem** ppsi);
    public void GetCurrentSelection(IShellItem** ppsi);
    internal void SetFileName(string pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileName(IFileOpenDialog* pThis, PCWSTR pszName);
    public void SetFileName(PCWSTR pszName);
    internal void GetFileName(PWSTR& pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFileName(IFileOpenDialog* pThis, PWSTR* pszName);
    public void GetFileName(PWSTR* pszName);
    internal void SetTitle(string pszTitle);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetTitle(IFileOpenDialog* pThis, PCWSTR pszTitle);
    public void SetTitle(PCWSTR pszTitle);
    internal void SetOkButtonLabel(string pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOkButtonLabel(IFileOpenDialog* pThis, PCWSTR pszText);
    public void SetOkButtonLabel(PCWSTR pszText);
    internal void SetFileNameLabel(string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileNameLabel(IFileOpenDialog* pThis, PCWSTR pszLabel);
    public void SetFileNameLabel(PCWSTR pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetResult(IFileOpenDialog* pThis, IShellItem** ppsi);
    public void GetResult(IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddPlace(IFileOpenDialog* pThis, IShellItem* psi, FDAP fdap);
    public void AddPlace(IShellItem* psi, FDAP fdap);
    internal void SetDefaultExtension(string pszDefaultExtension);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetDefaultExtension(IFileOpenDialog* pThis, PCWSTR pszDefaultExtension);
    public void SetDefaultExtension(PCWSTR pszDefaultExtension);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Close(IFileOpenDialog* pThis, HRESULT hr);
    public void Close(HRESULT hr);
    internal void SetClientGuid(Guid& guid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetClientGuid(IFileOpenDialog* pThis, Guid* guid);
    public void SetClientGuid(Guid* guid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ClearClientData(IFileOpenDialog* pThis);
    public void ClearClientData();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFilter(IFileOpenDialog* pThis, IShellItemFilter* pFilter);
    public void SetFilter(IShellItemFilter* pFilter);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetResults(IFileOpenDialog* pThis, IShellItemArray** ppenum);
    public HRESULT GetResults(IShellItemArray** ppenum);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetSelectedItems(IFileOpenDialog* pThis, IShellItemArray** ppsai);
    public void GetSelectedItems(IShellItemArray** ppsai);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("04B0F1A7-9490-44BC-96E1-4296A31252E2")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IFileOperationProgressSink : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFileOperationProgressSink();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT StartOperations(IFileOperationProgressSink* pThis);
    public void StartOperations();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT FinishOperations(IFileOperationProgressSink* pThis, HRESULT hrResult);
    public void FinishOperations(HRESULT hrResult);
    internal void PreRenameItem(UInt32 dwFlags, IShellItem* psiItem, string pszNewName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PreRenameItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, PCWSTR pszNewName);
    public void PreRenameItem(UInt32 dwFlags, IShellItem* psiItem, PCWSTR pszNewName);
    internal void PostRenameItem(UInt32 dwFlags, IShellItem* psiItem, string pszNewName, HRESULT hrRename, IShellItem* psiNewlyCreated);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PostRenameItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, PCWSTR pszNewName, HRESULT hrRename, IShellItem* psiNewlyCreated);
    public void PostRenameItem(UInt32 dwFlags, IShellItem* psiItem, PCWSTR pszNewName, HRESULT hrRename, IShellItem* psiNewlyCreated);
    internal void PreMoveItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PreMoveItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName);
    public void PreMoveItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName);
    internal void PostMoveItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName, HRESULT hrMove, IShellItem* psiNewlyCreated);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PostMoveItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName, HRESULT hrMove, IShellItem* psiNewlyCreated);
    public void PostMoveItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName, HRESULT hrMove, IShellItem* psiNewlyCreated);
    internal void PreCopyItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PreCopyItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName);
    public void PreCopyItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName);
    internal void PostCopyItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, string pszNewName, HRESULT hrCopy, IShellItem* psiNewlyCreated);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PostCopyItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName, HRESULT hrCopy, IShellItem* psiNewlyCreated);
    public void PostCopyItem(UInt32 dwFlags, IShellItem* psiItem, IShellItem* psiDestinationFolder, PCWSTR pszNewName, HRESULT hrCopy, IShellItem* psiNewlyCreated);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PreDeleteItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem);
    public void PreDeleteItem(UInt32 dwFlags, IShellItem* psiItem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PostDeleteItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiItem, HRESULT hrDelete, IShellItem* psiNewlyCreated);
    public void PostDeleteItem(UInt32 dwFlags, IShellItem* psiItem, HRESULT hrDelete, IShellItem* psiNewlyCreated);
    internal void PreNewItem(UInt32 dwFlags, IShellItem* psiDestinationFolder, string pszNewName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PreNewItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiDestinationFolder, PCWSTR pszNewName);
    public void PreNewItem(UInt32 dwFlags, IShellItem* psiDestinationFolder, PCWSTR pszNewName);
    internal void PostNewItem(UInt32 dwFlags, IShellItem* psiDestinationFolder, string pszNewName, string pszTemplateName, UInt32 dwFileAttributes, HRESULT hrNew, IShellItem* psiNewItem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PostNewItem(IFileOperationProgressSink* pThis, UInt32 dwFlags, IShellItem* psiDestinationFolder, PCWSTR pszNewName, PCWSTR pszTemplateName, UInt32 dwFileAttributes, HRESULT hrNew, IShellItem* psiNewItem);
    public void PostNewItem(UInt32 dwFlags, IShellItem* psiDestinationFolder, PCWSTR pszNewName, PCWSTR pszTemplateName, UInt32 dwFileAttributes, HRESULT hrNew, IShellItem* psiNewItem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT UpdateProgress(IFileOperationProgressSink* pThis, UInt32 iWorkTotal, UInt32 iWorkSoFar);
    public void UpdateProgress(UInt32 iWorkTotal, UInt32 iWorkSoFar);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ResetTimer(IFileOperationProgressSink* pThis);
    public void ResetTimer();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT PauseTimer(IFileOperationProgressSink* pThis);
    public void PauseTimer();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ResumeTimer(IFileOperationProgressSink* pThis);
    public void ResumeTimer();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IFileSaveDialog : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IFileSaveDialog();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Show(IFileSaveDialog* pThis, HWND hwndOwner);
    public void Show(HWND hwndOwner);
    internal void SetFileTypes(ReadOnlySpan`1<COMDLG_FILTERSPEC> rgFilterSpec);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileTypes(IFileSaveDialog* pThis, UInt32 cFileTypes, COMDLG_FILTERSPEC* rgFilterSpec);
    public void SetFileTypes(UInt32 cFileTypes, COMDLG_FILTERSPEC* rgFilterSpec);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileTypeIndex(IFileSaveDialog* pThis, UInt32 iFileType);
    public void SetFileTypeIndex(UInt32 iFileType);
    internal void GetFileTypeIndex(UInt32& piFileType);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFileTypeIndex(IFileSaveDialog* pThis, UInt32* piFileType);
    public void GetFileTypeIndex(UInt32* piFileType);
    internal void Advise(IFileDialogEvents* pfde, UInt32& pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Advise(IFileSaveDialog* pThis, IFileDialogEvents* pfde, UInt32* pdwCookie);
    public void Advise(IFileDialogEvents* pfde, UInt32* pdwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Unadvise(IFileSaveDialog* pThis, UInt32 dwCookie);
    public void Unadvise(UInt32 dwCookie);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOptions(IFileSaveDialog* pThis, FILEOPENDIALOGOPTIONS fos);
    public void SetOptions(FILEOPENDIALOGOPTIONS fos);
    internal void GetOptions(FILEOPENDIALOGOPTIONS& pfos);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetOptions(IFileSaveDialog* pThis, FILEOPENDIALOGOPTIONS* pfos);
    public void GetOptions(FILEOPENDIALOGOPTIONS* pfos);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetDefaultFolder(IFileSaveDialog* pThis, IShellItem* psi);
    public void SetDefaultFolder(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFolder(IFileSaveDialog* pThis, IShellItem* psi);
    public void SetFolder(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFolder(IFileSaveDialog* pThis, IShellItem** ppsi);
    public void GetFolder(IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCurrentSelection(IFileSaveDialog* pThis, IShellItem** ppsi);
    public void GetCurrentSelection(IShellItem** ppsi);
    internal void SetFileName(string pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileName(IFileSaveDialog* pThis, PCWSTR pszName);
    public void SetFileName(PCWSTR pszName);
    internal void GetFileName(PWSTR& pszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetFileName(IFileSaveDialog* pThis, PWSTR* pszName);
    public void GetFileName(PWSTR* pszName);
    internal void SetTitle(string pszTitle);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetTitle(IFileSaveDialog* pThis, PCWSTR pszTitle);
    public void SetTitle(PCWSTR pszTitle);
    internal void SetOkButtonLabel(string pszText);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetOkButtonLabel(IFileSaveDialog* pThis, PCWSTR pszText);
    public void SetOkButtonLabel(PCWSTR pszText);
    internal void SetFileNameLabel(string pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFileNameLabel(IFileSaveDialog* pThis, PCWSTR pszLabel);
    public void SetFileNameLabel(PCWSTR pszLabel);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetResult(IFileSaveDialog* pThis, IShellItem** ppsi);
    public void GetResult(IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT AddPlace(IFileSaveDialog* pThis, IShellItem* psi, FDAP fdap);
    public void AddPlace(IShellItem* psi, FDAP fdap);
    internal void SetDefaultExtension(string pszDefaultExtension);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetDefaultExtension(IFileSaveDialog* pThis, PCWSTR pszDefaultExtension);
    public void SetDefaultExtension(PCWSTR pszDefaultExtension);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Close(IFileSaveDialog* pThis, HRESULT hr);
    public void Close(HRESULT hr);
    internal void SetClientGuid(Guid& guid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetClientGuid(IFileSaveDialog* pThis, Guid* guid);
    public void SetClientGuid(Guid* guid);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ClearClientData(IFileSaveDialog* pThis);
    public void ClearClientData();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetFilter(IFileSaveDialog* pThis, IShellItemFilter* pFilter);
    public void SetFilter(IShellItemFilter* pFilter);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetSaveAsItem(IFileSaveDialog* pThis, IShellItem* psi);
    public void SetSaveAsItem(IShellItem* psi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetProperties(IFileSaveDialog* pThis, IPropertyStore* pStore);
    public void SetProperties(IPropertyStore* pStore);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetCollectedProperties(IFileSaveDialog* pThis, IPropertyDescriptionList* pList, BOOL fAppendDefault);
    public void SetCollectedProperties(IPropertyDescriptionList* pList, BOOL fAppendDefault);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetProperties(IFileSaveDialog* pThis, IPropertyStore** ppStore);
    public void GetProperties(IPropertyStore** ppStore);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ApplyProperties(IFileSaveDialog* pThis, IShellItem* psi, IPropertyStore* pStore, HWND hwnd, IFileOperationProgressSink* pSink);
    public void ApplyProperties(IShellItem* psi, IPropertyStore* pStore, HWND hwnd, IFileOperationProgressSink* pSink);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B4DB1657-70D7-485E-8E3E-6FCB5A5C1802")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IModalWindow : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IModalWindow();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Show(IModalWindow* pThis, HWND hwndOwner);
    public void Show(HWND hwndOwner);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("000214E6-0000-0000-C000-000000000046")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IShellFolder : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IShellFolder();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void ParseDisplayName(HWND hwnd, IBindCtx* pbc, PWSTR pszDisplayName, ITEMIDLIST*& ppidl, UInt32& pdwAttributes);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT ParseDisplayName(IShellFolder* pThis, HWND hwnd, IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, ITEMIDLIST** ppidl, UInt32* pdwAttributes);
    public void ParseDisplayName(HWND hwnd, IBindCtx* pbc, PWSTR pszDisplayName, UInt32* pchEaten, ITEMIDLIST** ppidl, UInt32* pdwAttributes);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumObjects(IShellFolder* pThis, HWND hwnd, UInt32 grfFlags, IEnumIDList** ppenumIDList);
    public HRESULT EnumObjects(HWND hwnd, UInt32 grfFlags, IEnumIDList** ppenumIDList);
    internal void BindToObject(ITEMIDLIST& pidl, IBindCtx* pbc, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindToObject(IShellFolder* pThis, ITEMIDLIST* pidl, IBindCtx* pbc, Guid* riid, Void** ppv);
    public void BindToObject(ITEMIDLIST* pidl, IBindCtx* pbc, Guid* riid, Void** ppv);
    internal void BindToStorage(ITEMIDLIST& pidl, IBindCtx* pbc, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindToStorage(IShellFolder* pThis, ITEMIDLIST* pidl, IBindCtx* pbc, Guid* riid, Void** ppv);
    public void BindToStorage(ITEMIDLIST* pidl, IBindCtx* pbc, Guid* riid, Void** ppv);
    internal void CompareIDs(LPARAM lParam, ITEMIDLIST& pidl1, ITEMIDLIST& pidl2);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CompareIDs(IShellFolder* pThis, LPARAM lParam, ITEMIDLIST* pidl1, ITEMIDLIST* pidl2);
    public void CompareIDs(LPARAM lParam, ITEMIDLIST* pidl1, ITEMIDLIST* pidl2);
    internal void CreateViewObject(HWND hwndOwner, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT CreateViewObject(IShellFolder* pThis, HWND hwndOwner, Guid* riid, Void** ppv);
    public void CreateViewObject(HWND hwndOwner, Guid* riid, Void** ppv);
    internal void GetAttributesOf(UInt32 cidl, ITEMIDLIST** apidl, UInt32& rgfInOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAttributesOf(IShellFolder* pThis, UInt32 cidl, ITEMIDLIST** apidl, UInt32* rgfInOut);
    public void GetAttributesOf(UInt32 cidl, ITEMIDLIST** apidl, UInt32* rgfInOut);
    internal void GetUIObjectOf(HWND hwndOwner, UInt32 cidl, ITEMIDLIST** apidl, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetUIObjectOf(IShellFolder* pThis, HWND hwndOwner, UInt32 cidl, ITEMIDLIST** apidl, Guid* riid, UInt32* rgfReserved, Void** ppv);
    public void GetUIObjectOf(HWND hwndOwner, UInt32 cidl, ITEMIDLIST** apidl, Guid* riid, UInt32* rgfReserved, Void** ppv);
    internal void GetDisplayNameOf(ITEMIDLIST& pidl, SHGDNF uFlags, STRRET& pName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDisplayNameOf(IShellFolder* pThis, ITEMIDLIST* pidl, SHGDNF uFlags, STRRET* pName);
    public void GetDisplayNameOf(ITEMIDLIST* pidl, SHGDNF uFlags, STRRET* pName);
    internal void SetNameOf(HWND hwnd, ITEMIDLIST& pidl, string pszName, SHGDNF uFlags, ITEMIDLIST** ppidlOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetNameOf(IShellFolder* pThis, HWND hwnd, ITEMIDLIST* pidl, PCWSTR pszName, SHGDNF uFlags, ITEMIDLIST** ppidlOut);
    public void SetNameOf(HWND hwnd, ITEMIDLIST* pidl, PCWSTR pszName, SHGDNF uFlags, ITEMIDLIST** ppidlOut);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("43826D1E-E718-42EE-BC55-A1E261C37BFE")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IShellItem : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IShellItem();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void BindToHandler(IBindCtx* pbc, Guid& bhid, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindToHandler(IShellItem* pThis, IBindCtx* pbc, Guid* bhid, Guid* riid, Void** ppv);
    public void BindToHandler(IBindCtx* pbc, Guid* bhid, Guid* riid, Void** ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetParent(IShellItem* pThis, IShellItem** ppsi);
    public void GetParent(IShellItem** ppsi);
    internal void GetDisplayName(SIGDN sigdnName, PWSTR& ppszName);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetDisplayName(IShellItem* pThis, SIGDN sigdnName, PWSTR* ppszName);
    public void GetDisplayName(SIGDN sigdnName, PWSTR* ppszName);
    internal void GetAttributes(SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS& psfgaoAttribs);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAttributes(IShellItem* pThis, SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS* psfgaoAttribs);
    public void GetAttributes(SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS* psfgaoAttribs);
    internal void Compare(IShellItem* psi, UInt32 hint, Int32& piOrder);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Compare(IShellItem* pThis, IShellItem* psi, UInt32 hint, Int32* piOrder);
    public void Compare(IShellItem* psi, UInt32 hint, Int32* piOrder);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("B63EA76D-1F85-456F-A19C-48159EFA858B")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IShellItemArray : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IShellItemArray();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void BindToHandler(IBindCtx* pbc, Guid& bhid, Guid& riid, Void*& ppvOut);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT BindToHandler(IShellItemArray* pThis, IBindCtx* pbc, Guid* bhid, Guid* riid, Void** ppvOut);
    public void BindToHandler(IBindCtx* pbc, Guid* bhid, Guid* riid, Void** ppvOut);
    internal void GetPropertyStore(GETPROPERTYSTOREFLAGS flags, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPropertyStore(IShellItemArray* pThis, GETPROPERTYSTOREFLAGS flags, Guid* riid, Void** ppv);
    public void GetPropertyStore(GETPROPERTYSTOREFLAGS flags, Guid* riid, Void** ppv);
    internal void GetPropertyDescriptionList(PROPERTYKEY& keyType, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetPropertyDescriptionList(IShellItemArray* pThis, PROPERTYKEY* keyType, Guid* riid, Void** ppv);
    public void GetPropertyDescriptionList(PROPERTYKEY* keyType, Guid* riid, Void** ppv);
    internal void GetAttributes(SIATTRIBFLAGS AttribFlags, SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS& psfgaoAttribs);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAttributes(IShellItemArray* pThis, SIATTRIBFLAGS AttribFlags, SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS* psfgaoAttribs);
    public void GetAttributes(SIATTRIBFLAGS AttribFlags, SFGAO_FLAGS sfgaoMask, SFGAO_FLAGS* psfgaoAttribs);
    internal void GetCount(UInt32& pdwNumItems);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCount(IShellItemArray* pThis, UInt32* pdwNumItems);
    public void GetCount(UInt32* pdwNumItems);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetItemAt(IShellItemArray* pThis, UInt32 dwIndex, IShellItem** ppsi);
    public void GetItemAt(UInt32 dwIndex, IShellItem** ppsi);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT EnumItems(IShellItemArray* pThis, IEnumShellItems** ppenumShellItems);
    public void EnumItems(IEnumShellItems** ppenumShellItems);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("2659B475-EEB8-48B7-8F07-B378810F48CF")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.IShellItemFilter : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IShellItemFilter();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    [UnmanagedCallersOnlyAttribute]
private static HRESULT IncludeItem(IShellItemFilter* pThis, IShellItem* psi);
    public void IncludeItem(IShellItem* psi);
    internal void GetEnumFlagsForItem(IShellItem* psi, UInt32& pgrfFlags);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetEnumFlagsForItem(IShellItemFilter* pThis, IShellItem* psi, UInt32* pgrfFlags);
    public void GetEnumFlagsForItem(IShellItem* psi, UInt32* pgrfFlags);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG : Enum {
    public int value__;
    public static KNOWN_FOLDER_FLAG KF_FLAG_DEFAULT;
    public static KNOWN_FOLDER_FLAG KF_FLAG_FORCE_APP_DATA_REDIRECTION;
    public static KNOWN_FOLDER_FLAG KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET;
    public static KNOWN_FOLDER_FLAG KF_FLAG_FORCE_PACKAGE_REDIRECTION;
    public static KNOWN_FOLDER_FLAG KF_FLAG_NO_PACKAGE_REDIRECTION;
    public static KNOWN_FOLDER_FLAG KF_FLAG_FORCE_APPCONTAINER_REDIRECTION;
    public static KNOWN_FOLDER_FLAG KF_FLAG_NO_APPCONTAINER_REDIRECTION;
    public static KNOWN_FOLDER_FLAG KF_FLAG_CREATE;
    public static KNOWN_FOLDER_FLAG KF_FLAG_DONT_VERIFY;
    public static KNOWN_FOLDER_FLAG KF_FLAG_DONT_UNEXPAND;
    public static KNOWN_FOLDER_FLAG KF_FLAG_NO_ALIAS;
    public static KNOWN_FOLDER_FLAG KF_FLAG_INIT;
    public static KNOWN_FOLDER_FLAG KF_FLAG_DEFAULT_PATH;
    public static KNOWN_FOLDER_FLAG KF_FLAG_NOT_PARENT_RELATIVE;
    public static KNOWN_FOLDER_FLAG KF_FLAG_SIMPLE_IDLIST;
    public static KNOWN_FOLDER_FLAG KF_FLAG_ALIAS_ONLY;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS : Enum {
    public int value__;
    public static GETPROPERTYSTOREFLAGS GPS_DEFAULT;
    public static GETPROPERTYSTOREFLAGS GPS_HANDLERPROPERTIESONLY;
    public static GETPROPERTYSTOREFLAGS GPS_READWRITE;
    public static GETPROPERTYSTOREFLAGS GPS_TEMPORARY;
    public static GETPROPERTYSTOREFLAGS GPS_FASTPROPERTIESONLY;
    public static GETPROPERTYSTOREFLAGS GPS_OPENSLOWITEM;
    public static GETPROPERTYSTOREFLAGS GPS_DELAYCREATION;
    public static GETPROPERTYSTOREFLAGS GPS_BESTEFFORT;
    public static GETPROPERTYSTOREFLAGS GPS_NO_OPLOCK;
    public static GETPROPERTYSTOREFLAGS GPS_PREFERQUERYPROPERTIES;
    public static GETPROPERTYSTOREFLAGS GPS_EXTRINSICPROPERTIES;
    public static GETPROPERTYSTOREFLAGS GPS_EXTRINSICPROPERTIESONLY;
    public static GETPROPERTYSTOREFLAGS GPS_VOLATILEPROPERTIES;
    public static GETPROPERTYSTOREFLAGS GPS_VOLATILEPROPERTIESONLY;
    public static GETPROPERTYSTOREFLAGS GPS_MASK_VALID;
}
[GuidAttribute("1F9FC1D0-C39B-4B26-817F-011967D3440E")]
[SupportedOSPlatformAttribute("windows6.0.6000")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.PropertiesSystem.IPropertyDescriptionList : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPropertyDescriptionList();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetCount(UInt32& pcElem);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCount(IPropertyDescriptionList* pThis, UInt32* pcElem);
    public void GetCount(UInt32* pcElem);
    internal void GetAt(UInt32 iElem, Guid& riid, Void*& ppv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAt(IPropertyDescriptionList* pThis, UInt32 iElem, Guid* riid, Void** ppv);
    public void GetAt(UInt32 iElem, Guid* riid, Void** ppv);
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GuidAttribute("886D8EEB-8CF2-4446-8D02-CDBA1DBDCF99")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore : ValueType {
    private Void** lpVtbl;
    internal static Guid IID_Guid;
    [IsReadOnlyAttribute]
private static Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.Guid { get; }
    private static IPropertyStore();
    internal HRESULT QueryInterface(Guid& riid, Void*& ppvObject);
    public HRESULT QueryInterface(Guid* riid, Void** ppvObject);
    public UInt32 AddRef();
    public UInt32 Release();
    internal void GetCount(UInt32& cProps);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetCount(IPropertyStore* pThis, UInt32* cProps);
    public void GetCount(UInt32* cProps);
    internal void GetAt(UInt32 iProp, PROPERTYKEY& pkey);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetAt(IPropertyStore* pThis, UInt32 iProp, PROPERTYKEY* pkey);
    public void GetAt(UInt32 iProp, PROPERTYKEY* pkey);
    internal void GetValue(PROPERTYKEY& key, PROPVARIANT& pv);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT GetValue(IPropertyStore* pThis, PROPERTYKEY* key, PROPVARIANT* pv);
    public void GetValue(PROPERTYKEY* key, PROPVARIANT* pv);
    internal void SetValue(PROPERTYKEY& key, PROPVARIANT& propvar);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT SetValue(IPropertyStore* pThis, PROPERTYKEY* key, PROPVARIANT* propvar);
    public void SetValue(PROPERTYKEY* key, PROPVARIANT* propvar);
    [UnmanagedCallersOnlyAttribute]
private static HRESULT Commit(IPropertyStore* pThis);
    public void Commit();
    public static override void PopulateVTable(Vtbl* vtable);
    private static override Guid& modreq(System.Runtime.InteropServices.InAttribute) Windows.Win32.IComIID.get_Guid();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY : ValueType {
    internal Guid fmtid;
    internal UInt32 pid;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.Shell.SHDRAGIMAGE : ValueType {
    internal SIZE sizeDragImage;
    internal Point ptOffset;
    internal HBITMAP hbmpDragImage;
    internal COLORREF crColorKey;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.SHELL_AUTOCOMPLETE_FLAGS : Enum {
    public UInt32 value__;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_DEFAULT;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_FILESYSTEM;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_URLALL;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_URLHISTORY;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_URLMRU;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_USETAB;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_FILESYS_ONLY;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_FILESYS_DIRS;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_VIRTUAL_NAMESPACE;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_AUTOSUGGEST_FORCE_ON;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_AUTOSUGGEST_FORCE_OFF;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_AUTOAPPEND_FORCE_ON;
    public static SHELL_AUTOCOMPLETE_FLAGS SHACF_AUTOAPPEND_FORCE_OFF;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.SHGDNF : Enum {
    public UInt32 value__;
    public static SHGDNF SHGDN_NORMAL;
    public static SHGDNF SHGDN_INFOLDER;
    public static SHGDNF SHGDN_FOREDITING;
    public static SHGDNF SHGDN_FORADDRESSBAR;
    public static SHGDNF SHGDN_FORPARSING;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.SIATTRIBFLAGS : Enum {
    public int value__;
    public static SIATTRIBFLAGS SIATTRIBFLAGS_AND;
    public static SIATTRIBFLAGS SIATTRIBFLAGS_OR;
    public static SIATTRIBFLAGS SIATTRIBFLAGS_APPCOMPAT;
    public static SIATTRIBFLAGS SIATTRIBFLAGS_MASK;
    public static SIATTRIBFLAGS SIATTRIBFLAGS_ALLITEMS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.Shell.SIGDN : Enum {
    public int value__;
    public static SIGDN SIGDN_NORMALDISPLAY;
    public static SIGDN SIGDN_PARENTRELATIVEPARSING;
    public static SIGDN SIGDN_DESKTOPABSOLUTEPARSING;
    public static SIGDN SIGDN_PARENTRELATIVEEDITING;
    public static SIGDN SIGDN_DESKTOPABSOLUTEEDITING;
    public static SIGDN SIGDN_FILESYSPATH;
    public static SIGDN SIGDN_URL;
    public static SIGDN SIGDN_PARENTRELATIVEFORADDRESSBAR;
    public static SIGDN SIGDN_PARENTRELATIVE;
    public static SIGDN SIGDN_PARENTRELATIVEFORUI;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.TextServices.HKL : ValueType {
    internal IntPtr Value;
    internal HKL(IntPtr value);
    public static IntPtr op_Implicit(HKL value);
    public static HKL op_Explicit(IntPtr value);
    public static bool op_Equality(HKL left, HKL right);
    public static bool op_Inequality(HKL left, HKL right);
    public sealed virtual bool Equals(HKL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.ACCEL : ValueType {
    internal ACCEL_VIRT_FLAGS fVirt;
    internal ushort key;
    internal ushort cmd;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.ACCEL_VIRT_FLAGS : Enum {
    public byte value__;
    public static ACCEL_VIRT_FLAGS FVIRTKEY;
    public static ACCEL_VIRT_FLAGS FNOINVERT;
    public static ACCEL_VIRT_FLAGS FSHIFT;
    public static ACCEL_VIRT_FLAGS FCONTROL;
    public static ACCEL_VIRT_FLAGS FALT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.CLIENTCREATESTRUCT : ValueType {
    internal HANDLE hWindowMenu;
    internal UInt32 idFirstChild;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.CWP_FLAGS : Enum {
    public UInt32 value__;
    public static CWP_FLAGS CWP_ALL;
    public static CWP_FLAGS CWP_SKIPINVISIBLE;
    public static CWP_FLAGS CWP_SKIPDISABLED;
    public static CWP_FLAGS CWP_SKIPTRANSPARENT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.DI_FLAGS : Enum {
    public UInt32 value__;
    public static DI_FLAGS DI_MASK;
    public static DI_FLAGS DI_IMAGE;
    public static DI_FLAGS DI_NORMAL;
    public static DI_FLAGS DI_COMPAT;
    public static DI_FLAGS DI_DEFAULTSIZE;
    public static DI_FLAGS DI_NOMIRROR;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.EVENTMSG : ValueType {
    internal UInt32 message;
    internal UInt32 paramL;
    internal UInt32 paramH;
    internal UInt32 time;
    internal HWND hwnd;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.GDI_IMAGE_TYPE : Enum {
    public UInt32 value__;
    public static GDI_IMAGE_TYPE IMAGE_BITMAP;
    public static GDI_IMAGE_TYPE IMAGE_CURSOR;
    public static GDI_IMAGE_TYPE IMAGE_ICON;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.GET_ANCESTOR_FLAGS : Enum {
    public UInt32 value__;
    public static GET_ANCESTOR_FLAGS GA_PARENT;
    public static GET_ANCESTOR_FLAGS GA_ROOT;
    public static GET_ANCESTOR_FLAGS GA_ROOTOWNER;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.GET_CLASS_LONG_INDEX : Enum {
    public int value__;
    public static GET_CLASS_LONG_INDEX GCW_ATOM;
    public static GET_CLASS_LONG_INDEX GCL_CBCLSEXTRA;
    public static GET_CLASS_LONG_INDEX GCL_CBWNDEXTRA;
    public static GET_CLASS_LONG_INDEX GCL_HBRBACKGROUND;
    public static GET_CLASS_LONG_INDEX GCL_HCURSOR;
    public static GET_CLASS_LONG_INDEX GCL_HICON;
    public static GET_CLASS_LONG_INDEX GCL_HICONSM;
    public static GET_CLASS_LONG_INDEX GCL_HMODULE;
    public static GET_CLASS_LONG_INDEX GCL_MENUNAME;
    public static GET_CLASS_LONG_INDEX GCL_STYLE;
    public static GET_CLASS_LONG_INDEX GCL_WNDPROC;
    public static GET_CLASS_LONG_INDEX GCLP_HBRBACKGROUND;
    public static GET_CLASS_LONG_INDEX GCLP_HCURSOR;
    public static GET_CLASS_LONG_INDEX GCLP_HICON;
    public static GET_CLASS_LONG_INDEX GCLP_HICONSM;
    public static GET_CLASS_LONG_INDEX GCLP_HMODULE;
    public static GET_CLASS_LONG_INDEX GCLP_MENUNAME;
    public static GET_CLASS_LONG_INDEX GCLP_WNDPROC;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.GET_WINDOW_CMD : Enum {
    public UInt32 value__;
    public static GET_WINDOW_CMD GW_CHILD;
    public static GET_WINDOW_CMD GW_ENABLEDPOPUP;
    public static GET_WINDOW_CMD GW_HWNDFIRST;
    public static GET_WINDOW_CMD GW_HWNDLAST;
    public static GET_WINDOW_CMD GW_HWNDNEXT;
    public static GET_WINDOW_CMD GW_HWNDPREV;
    public static GET_WINDOW_CMD GW_OWNER;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.HACCEL : ValueType {
    internal IntPtr Value;
    internal static HACCEL Null { get; }
    internal bool IsNull { get; }
    internal HACCEL(IntPtr value);
    internal static HACCEL get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HACCEL value);
    public static HACCEL op_Explicit(IntPtr value);
    public static bool op_Equality(HACCEL left, HACCEL right);
    public static bool op_Inequality(HACCEL left, HACCEL right);
    public sealed virtual bool Equals(HACCEL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.HCURSOR : ValueType {
    internal IntPtr Value;
    internal static HCURSOR Null { get; }
    internal bool IsNull { get; }
    internal HCURSOR(IntPtr value);
    internal static HCURSOR get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HCURSOR value);
    public static HCURSOR op_Explicit(IntPtr value);
    public static bool op_Equality(HCURSOR left, HCURSOR right);
    public static bool op_Inequality(HCURSOR left, HCURSOR right);
    public sealed virtual bool Equals(HCURSOR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static HICON op_Implicit(HCURSOR value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.HHOOK : ValueType {
    internal IntPtr Value;
    internal static HHOOK Null { get; }
    internal bool IsNull { get; }
    internal HHOOK(IntPtr value);
    internal static HHOOK get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HHOOK value);
    public static HHOOK op_Explicit(IntPtr value);
    public static bool op_Equality(HHOOK left, HHOOK right);
    public static bool op_Inequality(HHOOK left, HHOOK right);
    public sealed virtual bool Equals(HHOOK other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.HICON : ValueType {
    internal IntPtr Value;
    private HICON IHandle<Windows.Win32.UI.WindowsAndMessaging.HICON>.Handle { get; }
    [NullableAttribute("2")]
private object IHandle<Windows.Win32.UI.WindowsAndMessaging.HICON>.Wrapper { get; }
    internal static HICON Null { get; }
    internal bool IsNull { get; }
    internal HICON(IntPtr value);
    private sealed virtual override HICON IHandle<Windows.Win32.UI.WindowsAndMessaging.HICON>.get_Handle();
    [NullableContextAttribute("2")]
private sealed virtual override object IHandle<Windows.Win32.UI.WindowsAndMessaging.HICON>.get_Wrapper();
    internal static HICON get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HICON value);
    public static HICON op_Explicit(IntPtr value);
    public static bool op_Equality(HICON left, HICON right);
    public static bool op_Inequality(HICON left, HICON right);
    public sealed virtual bool Equals(HICON other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.HMENU : ValueType {
    internal IntPtr Value;
    internal static HMENU Null { get; }
    internal bool IsNull { get; }
    internal HMENU(IntPtr value);
    internal static HMENU get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HMENU value);
    public static HMENU op_Explicit(IntPtr value);
    public static bool op_Equality(HMENU left, HMENU right);
    public static bool op_Inequality(HMENU left, HMENU right);
    public sealed virtual bool Equals(HMENU other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.ICONINFO : ValueType {
    internal BOOL fIcon;
    internal UInt32 xHotspot;
    internal UInt32 yHotspot;
    internal HBITMAP hbmMask;
    internal HBITMAP hbmColor;
    public sealed virtual void Dispose();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS : Enum {
    public UInt32 value__;
    public static IMAGE_FLAGS LR_CREATEDIBSECTION;
    public static IMAGE_FLAGS LR_DEFAULTCOLOR;
    public static IMAGE_FLAGS LR_DEFAULTSIZE;
    public static IMAGE_FLAGS LR_LOADFROMFILE;
    public static IMAGE_FLAGS LR_LOADMAP3DCOLORS;
    public static IMAGE_FLAGS LR_LOADTRANSPARENT;
    public static IMAGE_FLAGS LR_MONOCHROME;
    public static IMAGE_FLAGS LR_SHARED;
    public static IMAGE_FLAGS LR_VGACOLOR;
    public static IMAGE_FLAGS LR_COPYDELETEORG;
    public static IMAGE_FLAGS LR_COPYFROMRESOURCE;
    public static IMAGE_FLAGS LR_COPYRETURNORG;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.LAYERED_WINDOW_ATTRIBUTES_FLAGS : Enum {
    public UInt32 value__;
    public static LAYERED_WINDOW_ATTRIBUTES_FLAGS LWA_ALPHA;
    public static LAYERED_WINDOW_ATTRIBUTES_FLAGS LWA_COLORKEY;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS : Enum {
    public UInt32 value__;
    public static MENU_ITEM_FLAGS MF_BYCOMMAND;
    public static MENU_ITEM_FLAGS MF_BYPOSITION;
    public static MENU_ITEM_FLAGS MF_BITMAP;
    public static MENU_ITEM_FLAGS MF_CHECKED;
    public static MENU_ITEM_FLAGS MF_DISABLED;
    public static MENU_ITEM_FLAGS MF_ENABLED;
    public static MENU_ITEM_FLAGS MF_GRAYED;
    public static MENU_ITEM_FLAGS MF_MENUBARBREAK;
    public static MENU_ITEM_FLAGS MF_MENUBREAK;
    public static MENU_ITEM_FLAGS MF_OWNERDRAW;
    public static MENU_ITEM_FLAGS MF_POPUP;
    public static MENU_ITEM_FLAGS MF_SEPARATOR;
    public static MENU_ITEM_FLAGS MF_STRING;
    public static MENU_ITEM_FLAGS MF_UNCHECKED;
    public static MENU_ITEM_FLAGS MF_INSERT;
    public static MENU_ITEM_FLAGS MF_CHANGE;
    public static MENU_ITEM_FLAGS MF_APPEND;
    public static MENU_ITEM_FLAGS MF_DELETE;
    public static MENU_ITEM_FLAGS MF_REMOVE;
    public static MENU_ITEM_FLAGS MF_USECHECKBITMAPS;
    public static MENU_ITEM_FLAGS MF_UNHILITE;
    public static MENU_ITEM_FLAGS MF_HILITE;
    public static MENU_ITEM_FLAGS MF_DEFAULT;
    public static MENU_ITEM_FLAGS MF_SYSMENU;
    public static MENU_ITEM_FLAGS MF_HELP;
    public static MENU_ITEM_FLAGS MF_RIGHTJUSTIFY;
    public static MENU_ITEM_FLAGS MF_MOUSESELECT;
    public static MENU_ITEM_FLAGS MF_END;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_MASK : Enum {
    public UInt32 value__;
    public static MENU_ITEM_MASK MIIM_BITMAP;
    public static MENU_ITEM_MASK MIIM_CHECKMARKS;
    public static MENU_ITEM_MASK MIIM_DATA;
    public static MENU_ITEM_MASK MIIM_FTYPE;
    public static MENU_ITEM_MASK MIIM_ID;
    public static MENU_ITEM_MASK MIIM_STATE;
    public static MENU_ITEM_MASK MIIM_STRING;
    public static MENU_ITEM_MASK MIIM_SUBMENU;
    public static MENU_ITEM_MASK MIIM_TYPE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_STATE : Enum {
    public UInt32 value__;
    public static MENU_ITEM_STATE MFS_GRAYED;
    public static MENU_ITEM_STATE MFS_DISABLED;
    public static MENU_ITEM_STATE MFS_CHECKED;
    public static MENU_ITEM_STATE MFS_HILITE;
    public static MENU_ITEM_STATE MFS_ENABLED;
    public static MENU_ITEM_STATE MFS_UNCHECKED;
    public static MENU_ITEM_STATE MFS_UNHILITE;
    public static MENU_ITEM_STATE MFS_DEFAULT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_TYPE : Enum {
    public UInt32 value__;
    public static MENU_ITEM_TYPE MFT_BITMAP;
    public static MENU_ITEM_TYPE MFT_MENUBARBREAK;
    public static MENU_ITEM_TYPE MFT_MENUBREAK;
    public static MENU_ITEM_TYPE MFT_OWNERDRAW;
    public static MENU_ITEM_TYPE MFT_RADIOCHECK;
    public static MENU_ITEM_TYPE MFT_RIGHTJUSTIFY;
    public static MENU_ITEM_TYPE MFT_RIGHTORDER;
    public static MENU_ITEM_TYPE MFT_SEPARATOR;
    public static MENU_ITEM_TYPE MFT_STRING;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.MENUITEMINFOW : ValueType {
    internal UInt32 cbSize;
    internal MENU_ITEM_MASK fMask;
    internal MENU_ITEM_TYPE fType;
    internal MENU_ITEM_STATE fState;
    internal UInt32 wID;
    internal HMENU hSubMenu;
    internal HBITMAP hbmpChecked;
    internal HBITMAP hbmpUnchecked;
    internal UIntPtr dwItemData;
    internal PWSTR dwTypeData;
    internal UInt32 cch;
    internal HBITMAP hbmpItem;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MESSAGEBOX_RESULT : Enum {
    public int value__;
    public static MESSAGEBOX_RESULT IDOK;
    public static MESSAGEBOX_RESULT IDCANCEL;
    public static MESSAGEBOX_RESULT IDABORT;
    public static MESSAGEBOX_RESULT IDRETRY;
    public static MESSAGEBOX_RESULT IDIGNORE;
    public static MESSAGEBOX_RESULT IDYES;
    public static MESSAGEBOX_RESULT IDNO;
    public static MESSAGEBOX_RESULT IDCLOSE;
    public static MESSAGEBOX_RESULT IDHELP;
    public static MESSAGEBOX_RESULT IDTRYAGAIN;
    public static MESSAGEBOX_RESULT IDCONTINUE;
    public static MESSAGEBOX_RESULT IDASYNC;
    public static MESSAGEBOX_RESULT IDTIMEOUT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MESSAGEBOX_STYLE : Enum {
    public UInt32 value__;
    public static MESSAGEBOX_STYLE MB_ABORTRETRYIGNORE;
    public static MESSAGEBOX_STYLE MB_CANCELTRYCONTINUE;
    public static MESSAGEBOX_STYLE MB_HELP;
    public static MESSAGEBOX_STYLE MB_OK;
    public static MESSAGEBOX_STYLE MB_OKCANCEL;
    public static MESSAGEBOX_STYLE MB_RETRYCANCEL;
    public static MESSAGEBOX_STYLE MB_YESNO;
    public static MESSAGEBOX_STYLE MB_YESNOCANCEL;
    public static MESSAGEBOX_STYLE MB_ICONHAND;
    public static MESSAGEBOX_STYLE MB_ICONQUESTION;
    public static MESSAGEBOX_STYLE MB_ICONEXCLAMATION;
    public static MESSAGEBOX_STYLE MB_ICONASTERISK;
    public static MESSAGEBOX_STYLE MB_USERICON;
    public static MESSAGEBOX_STYLE MB_ICONWARNING;
    public static MESSAGEBOX_STYLE MB_ICONERROR;
    public static MESSAGEBOX_STYLE MB_ICONINFORMATION;
    public static MESSAGEBOX_STYLE MB_ICONSTOP;
    public static MESSAGEBOX_STYLE MB_DEFBUTTON1;
    public static MESSAGEBOX_STYLE MB_DEFBUTTON2;
    public static MESSAGEBOX_STYLE MB_DEFBUTTON3;
    public static MESSAGEBOX_STYLE MB_DEFBUTTON4;
    public static MESSAGEBOX_STYLE MB_APPLMODAL;
    public static MESSAGEBOX_STYLE MB_SYSTEMMODAL;
    public static MESSAGEBOX_STYLE MB_TASKMODAL;
    public static MESSAGEBOX_STYLE MB_NOFOCUS;
    public static MESSAGEBOX_STYLE MB_SETFOREGROUND;
    public static MESSAGEBOX_STYLE MB_DEFAULT_DESKTOP_ONLY;
    public static MESSAGEBOX_STYLE MB_TOPMOST;
    public static MESSAGEBOX_STYLE MB_RIGHT;
    public static MESSAGEBOX_STYLE MB_RTLREADING;
    public static MESSAGEBOX_STYLE MB_SERVICE_NOTIFICATION;
    public static MESSAGEBOX_STYLE MB_SERVICE_NOTIFICATION_NT3X;
    public static MESSAGEBOX_STYLE MB_TYPEMASK;
    public static MESSAGEBOX_STYLE MB_ICONMASK;
    public static MESSAGEBOX_STYLE MB_DEFMASK;
    public static MESSAGEBOX_STYLE MB_MODEMASK;
    public static MESSAGEBOX_STYLE MB_MISCMASK;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.MINIMIZEDMETRICS : ValueType {
    internal UInt32 cbSize;
    internal int iWidth;
    internal int iHorzGap;
    internal int iVertGap;
    internal MINIMIZEDMETRICS_ARRANGE iArrange;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MINIMIZEDMETRICS_ARRANGE : Enum {
    public int value__;
    public static MINIMIZEDMETRICS_ARRANGE ARW_BOTTOMLEFT;
    public static MINIMIZEDMETRICS_ARRANGE ARW_BOTTOMRIGHT;
    public static MINIMIZEDMETRICS_ARRANGE ARW_TOPLEFT;
    public static MINIMIZEDMETRICS_ARRANGE ARW_TOPRIGHT;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.MINMAXINFO : ValueType {
    internal Point ptReserved;
    internal Point ptMaxSize;
    internal Point ptMaxPosition;
    internal Point ptMinTrackSize;
    internal Point ptMaxTrackSize;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.MOUSEHOOKSTRUCT : ValueType {
    internal Point pt;
    internal HWND hwnd;
    internal UInt32 wHitTestCode;
    internal UIntPtr dwExtraInfo;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.MSG : ValueType {
    internal HWND hwnd;
    internal UInt32 message;
    internal WPARAM wParam;
    internal LPARAM lParam;
    internal UInt32 time;
    internal Point pt;
    public static Message op_Implicit(MSG msg);
    public static MSG op_Implicit(Message message);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS : Enum {
    public UInt32 value__;
    public static MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS MWMO_NONE;
    public static MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS MWMO_ALERTABLE;
    public static MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS MWMO_INPUTAVAILABLE;
    public static MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS MWMO_WAITALL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.NONCLIENTMETRICSW : ValueType {
    internal UInt32 cbSize;
    internal int iBorderWidth;
    internal int iScrollWidth;
    internal int iScrollHeight;
    internal int iCaptionWidth;
    internal int iCaptionHeight;
    internal LOGFONTW lfCaptionFont;
    internal int iSmCaptionWidth;
    internal int iSmCaptionHeight;
    internal LOGFONTW lfSmCaptionFont;
    internal int iMenuWidth;
    internal int iMenuHeight;
    internal LOGFONTW lfMenuFont;
    internal LOGFONTW lfStatusFont;
    internal LOGFONTW lfMessageFont;
    internal int iPaddedBorderWidth;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.OBJECT_IDENTIFIER : Enum {
    public int value__;
    public static OBJECT_IDENTIFIER OBJID_WINDOW;
    public static OBJECT_IDENTIFIER OBJID_SYSMENU;
    public static OBJECT_IDENTIFIER OBJID_TITLEBAR;
    public static OBJECT_IDENTIFIER OBJID_MENU;
    public static OBJECT_IDENTIFIER OBJID_CLIENT;
    public static OBJECT_IDENTIFIER OBJID_VSCROLL;
    public static OBJECT_IDENTIFIER OBJID_HSCROLL;
    public static OBJECT_IDENTIFIER OBJID_SIZEGRIP;
    public static OBJECT_IDENTIFIER OBJID_CARET;
    public static OBJECT_IDENTIFIER OBJID_CURSOR;
    public static OBJECT_IDENTIFIER OBJID_ALERT;
    public static OBJECT_IDENTIFIER OBJID_SOUND;
    public static OBJECT_IDENTIFIER OBJID_QUERYCLASSNAMEIDX;
    public static OBJECT_IDENTIFIER OBJID_NATIVEOM;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.PEEK_MESSAGE_REMOVE_TYPE : Enum {
    public UInt32 value__;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_NOREMOVE;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_REMOVE;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_NOYIELD;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_QS_INPUT;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_QS_POSTMESSAGE;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_QS_PAINT;
    public static PEEK_MESSAGE_REMOVE_TYPE PM_QS_SENDMESSAGE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.QUEUE_STATUS_FLAGS : Enum {
    public UInt32 value__;
    public static QUEUE_STATUS_FLAGS QS_ALLEVENTS;
    public static QUEUE_STATUS_FLAGS QS_ALLINPUT;
    public static QUEUE_STATUS_FLAGS QS_ALLPOSTMESSAGE;
    public static QUEUE_STATUS_FLAGS QS_HOTKEY;
    public static QUEUE_STATUS_FLAGS QS_INPUT;
    public static QUEUE_STATUS_FLAGS QS_KEY;
    public static QUEUE_STATUS_FLAGS QS_MOUSE;
    public static QUEUE_STATUS_FLAGS QS_MOUSEBUTTON;
    public static QUEUE_STATUS_FLAGS QS_MOUSEMOVE;
    public static QUEUE_STATUS_FLAGS QS_PAINT;
    public static QUEUE_STATUS_FLAGS QS_POSTMESSAGE;
    public static QUEUE_STATUS_FLAGS QS_RAWINPUT;
    public static QUEUE_STATUS_FLAGS QS_SENDMESSAGE;
    public static QUEUE_STATUS_FLAGS QS_TIMER;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SCROLL_WINDOW_FLAGS : Enum {
    public UInt32 value__;
    public static SCROLL_WINDOW_FLAGS SW_SCROLLCHILDREN;
    public static SCROLL_WINDOW_FLAGS SW_INVALIDATE;
    public static SCROLL_WINDOW_FLAGS SW_ERASE;
    public static SCROLL_WINDOW_FLAGS SW_SMOOTHSCROLL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_COMMAND : Enum {
    public int value__;
    public static SCROLLBAR_COMMAND SB_LINEUP;
    public static SCROLLBAR_COMMAND SB_LINELEFT;
    public static SCROLLBAR_COMMAND SB_LINEDOWN;
    public static SCROLLBAR_COMMAND SB_LINERIGHT;
    public static SCROLLBAR_COMMAND SB_PAGEUP;
    public static SCROLLBAR_COMMAND SB_PAGELEFT;
    public static SCROLLBAR_COMMAND SB_PAGEDOWN;
    public static SCROLLBAR_COMMAND SB_PAGERIGHT;
    public static SCROLLBAR_COMMAND SB_THUMBPOSITION;
    public static SCROLLBAR_COMMAND SB_THUMBTRACK;
    public static SCROLLBAR_COMMAND SB_TOP;
    public static SCROLLBAR_COMMAND SB_LEFT;
    public static SCROLLBAR_COMMAND SB_RIGHT;
    public static SCROLLBAR_COMMAND SB_BOTTOM;
    public static SCROLLBAR_COMMAND SB_ENDSCROLL;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS : Enum {
    public int value__;
    public static SCROLLBAR_CONSTANTS SB_CTL;
    public static SCROLLBAR_CONSTANTS SB_HORZ;
    public static SCROLLBAR_CONSTANTS SB_VERT;
    public static SCROLLBAR_CONSTANTS SB_BOTH;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.SCROLLINFO : ValueType {
    internal UInt32 cbSize;
    internal SCROLLINFO_MASK fMask;
    internal int nMin;
    internal int nMax;
    internal UInt32 nPage;
    internal int nPos;
    internal int nTrackPos;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SCROLLINFO_MASK : Enum {
    public UInt32 value__;
    public static SCROLLINFO_MASK SIF_ALL;
    public static SCROLLINFO_MASK SIF_DISABLENOSCROLL;
    public static SCROLLINFO_MASK SIF_PAGE;
    public static SCROLLINFO_MASK SIF_POS;
    public static SCROLLINFO_MASK SIF_RANGE;
    public static SCROLLINFO_MASK SIF_TRACKPOS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SEND_MESSAGE_TIMEOUT_FLAGS : Enum {
    public UInt32 value__;
    public static SEND_MESSAGE_TIMEOUT_FLAGS SMTO_ABORTIFHUNG;
    public static SEND_MESSAGE_TIMEOUT_FLAGS SMTO_BLOCK;
    public static SEND_MESSAGE_TIMEOUT_FLAGS SMTO_NORMAL;
    public static SEND_MESSAGE_TIMEOUT_FLAGS SMTO_NOTIMEOUTIFNOTHUNG;
    public static SEND_MESSAGE_TIMEOUT_FLAGS SMTO_ERRORONEXIT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS : Enum {
    public UInt32 value__;
    public static SET_WINDOW_POS_FLAGS SWP_ASYNCWINDOWPOS;
    public static SET_WINDOW_POS_FLAGS SWP_DEFERERASE;
    public static SET_WINDOW_POS_FLAGS SWP_DRAWFRAME;
    public static SET_WINDOW_POS_FLAGS SWP_FRAMECHANGED;
    public static SET_WINDOW_POS_FLAGS SWP_HIDEWINDOW;
    public static SET_WINDOW_POS_FLAGS SWP_NOACTIVATE;
    public static SET_WINDOW_POS_FLAGS SWP_NOCOPYBITS;
    public static SET_WINDOW_POS_FLAGS SWP_NOMOVE;
    public static SET_WINDOW_POS_FLAGS SWP_NOOWNERZORDER;
    public static SET_WINDOW_POS_FLAGS SWP_NOREDRAW;
    public static SET_WINDOW_POS_FLAGS SWP_NOREPOSITION;
    public static SET_WINDOW_POS_FLAGS SWP_NOSENDCHANGING;
    public static SET_WINDOW_POS_FLAGS SWP_NOSIZE;
    public static SET_WINDOW_POS_FLAGS SWP_NOZORDER;
    public static SET_WINDOW_POS_FLAGS SWP_SHOWWINDOW;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SHOW_WINDOW_CMD : Enum {
    public int value__;
    public static SHOW_WINDOW_CMD SW_HIDE;
    public static SHOW_WINDOW_CMD SW_SHOWNORMAL;
    public static SHOW_WINDOW_CMD SW_NORMAL;
    public static SHOW_WINDOW_CMD SW_SHOWMINIMIZED;
    public static SHOW_WINDOW_CMD SW_SHOWMAXIMIZED;
    public static SHOW_WINDOW_CMD SW_MAXIMIZE;
    public static SHOW_WINDOW_CMD SW_SHOWNOACTIVATE;
    public static SHOW_WINDOW_CMD SW_SHOW;
    public static SHOW_WINDOW_CMD SW_MINIMIZE;
    public static SHOW_WINDOW_CMD SW_SHOWMINNOACTIVE;
    public static SHOW_WINDOW_CMD SW_SHOWNA;
    public static SHOW_WINDOW_CMD SW_RESTORE;
    public static SHOW_WINDOW_CMD SW_SHOWDEFAULT;
    public static SHOW_WINDOW_CMD SW_FORCEMINIMIZE;
    public static SHOW_WINDOW_CMD SW_MAX;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX : Enum {
    public int value__;
    public static SYSTEM_METRICS_INDEX SM_ARRANGE;
    public static SYSTEM_METRICS_INDEX SM_CLEANBOOT;
    public static SYSTEM_METRICS_INDEX SM_CMONITORS;
    public static SYSTEM_METRICS_INDEX SM_CMOUSEBUTTONS;
    public static SYSTEM_METRICS_INDEX SM_CONVERTIBLESLATEMODE;
    public static SYSTEM_METRICS_INDEX SM_CXBORDER;
    public static SYSTEM_METRICS_INDEX SM_CXCURSOR;
    public static SYSTEM_METRICS_INDEX SM_CXDLGFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXDOUBLECLK;
    public static SYSTEM_METRICS_INDEX SM_CXDRAG;
    public static SYSTEM_METRICS_INDEX SM_CXEDGE;
    public static SYSTEM_METRICS_INDEX SM_CXFIXEDFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXFOCUSBORDER;
    public static SYSTEM_METRICS_INDEX SM_CXFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXFULLSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CXHSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CXHTHUMB;
    public static SYSTEM_METRICS_INDEX SM_CXICON;
    public static SYSTEM_METRICS_INDEX SM_CXICONSPACING;
    public static SYSTEM_METRICS_INDEX SM_CXMAXIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CXMAXTRACK;
    public static SYSTEM_METRICS_INDEX SM_CXMENUCHECK;
    public static SYSTEM_METRICS_INDEX SM_CXMENUSIZE;
    public static SYSTEM_METRICS_INDEX SM_CXMIN;
    public static SYSTEM_METRICS_INDEX SM_CXMINIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CXMINSPACING;
    public static SYSTEM_METRICS_INDEX SM_CXMINTRACK;
    public static SYSTEM_METRICS_INDEX SM_CXPADDEDBORDER;
    public static SYSTEM_METRICS_INDEX SM_CXSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CXSIZE;
    public static SYSTEM_METRICS_INDEX SM_CXSIZEFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXSMICON;
    public static SYSTEM_METRICS_INDEX SM_CXSMSIZE;
    public static SYSTEM_METRICS_INDEX SM_CXVIRTUALSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CXVSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CYBORDER;
    public static SYSTEM_METRICS_INDEX SM_CYCAPTION;
    public static SYSTEM_METRICS_INDEX SM_CYCURSOR;
    public static SYSTEM_METRICS_INDEX SM_CYDLGFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYDOUBLECLK;
    public static SYSTEM_METRICS_INDEX SM_CYDRAG;
    public static SYSTEM_METRICS_INDEX SM_CYEDGE;
    public static SYSTEM_METRICS_INDEX SM_CYFIXEDFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYFOCUSBORDER;
    public static SYSTEM_METRICS_INDEX SM_CYFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYFULLSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CYHSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CYICON;
    public static SYSTEM_METRICS_INDEX SM_CYICONSPACING;
    public static SYSTEM_METRICS_INDEX SM_CYKANJIWINDOW;
    public static SYSTEM_METRICS_INDEX SM_CYMAXIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CYMAXTRACK;
    public static SYSTEM_METRICS_INDEX SM_CYMENU;
    public static SYSTEM_METRICS_INDEX SM_CYMENUCHECK;
    public static SYSTEM_METRICS_INDEX SM_CYMENUSIZE;
    public static SYSTEM_METRICS_INDEX SM_CYMIN;
    public static SYSTEM_METRICS_INDEX SM_CYMINIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CYMINSPACING;
    public static SYSTEM_METRICS_INDEX SM_CYMINTRACK;
    public static SYSTEM_METRICS_INDEX SM_CYSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CYSIZE;
    public static SYSTEM_METRICS_INDEX SM_CYSIZEFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYSMCAPTION;
    public static SYSTEM_METRICS_INDEX SM_CYSMICON;
    public static SYSTEM_METRICS_INDEX SM_CYSMSIZE;
    public static SYSTEM_METRICS_INDEX SM_CYVIRTUALSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CYVSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CYVTHUMB;
    public static SYSTEM_METRICS_INDEX SM_DBCSENABLED;
    public static SYSTEM_METRICS_INDEX SM_DEBUG;
    public static SYSTEM_METRICS_INDEX SM_DIGITIZER;
    public static SYSTEM_METRICS_INDEX SM_IMMENABLED;
    public static SYSTEM_METRICS_INDEX SM_MAXIMUMTOUCHES;
    public static SYSTEM_METRICS_INDEX SM_MEDIACENTER;
    public static SYSTEM_METRICS_INDEX SM_MENUDROPALIGNMENT;
    public static SYSTEM_METRICS_INDEX SM_MIDEASTENABLED;
    public static SYSTEM_METRICS_INDEX SM_MOUSEPRESENT;
    public static SYSTEM_METRICS_INDEX SM_MOUSEHORIZONTALWHEELPRESENT;
    public static SYSTEM_METRICS_INDEX SM_MOUSEWHEELPRESENT;
    public static SYSTEM_METRICS_INDEX SM_NETWORK;
    public static SYSTEM_METRICS_INDEX SM_PENWINDOWS;
    public static SYSTEM_METRICS_INDEX SM_REMOTECONTROL;
    public static SYSTEM_METRICS_INDEX SM_REMOTESESSION;
    public static SYSTEM_METRICS_INDEX SM_SAMEDISPLAYFORMAT;
    public static SYSTEM_METRICS_INDEX SM_SECURE;
    public static SYSTEM_METRICS_INDEX SM_SERVERR2;
    public static SYSTEM_METRICS_INDEX SM_SHOWSOUNDS;
    public static SYSTEM_METRICS_INDEX SM_SHUTTINGDOWN;
    public static SYSTEM_METRICS_INDEX SM_SLOWMACHINE;
    public static SYSTEM_METRICS_INDEX SM_STARTER;
    public static SYSTEM_METRICS_INDEX SM_SWAPBUTTON;
    public static SYSTEM_METRICS_INDEX SM_SYSTEMDOCKED;
    public static SYSTEM_METRICS_INDEX SM_TABLETPC;
    public static SYSTEM_METRICS_INDEX SM_XVIRTUALSCREEN;
    public static SYSTEM_METRICS_INDEX SM_YVIRTUALSCREEN;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_ACTION : Enum {
    public UInt32 value__;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETBEEP;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETBEEP;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETBORDER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETBORDER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETKEYBOARDSPEED;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETKEYBOARDSPEED;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_LANGDRIVER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_ICONHORIZONTALSPACING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSCREENSAVETIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSCREENSAVETIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSCREENSAVEACTIVE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSCREENSAVEACTIVE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETGRIDGRANULARITY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETGRIDGRANULARITY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDESKWALLPAPER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDESKPATTERN;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETKEYBOARDDELAY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETKEYBOARDDELAY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_ICONVERTICALSPACING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETICONTITLEWRAP;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETICONTITLEWRAP;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMENUDROPALIGNMENT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMENUDROPALIGNMENT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDOUBLECLKWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDOUBLECLKHEIGHT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETICONTITLELOGFONT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDOUBLECLICKTIME;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEBUTTONSWAP;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETICONTITLELOGFONT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFASTTASKSWITCH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFASTTASKSWITCH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDRAGFULLWINDOWS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDRAGFULLWINDOWS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETNONCLIENTMETRICS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETNONCLIENTMETRICS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMINIMIZEDMETRICS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMINIMIZEDMETRICS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETICONMETRICS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETICONMETRICS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETWORKAREA;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWORKAREA;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPENWINDOWS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETHIGHCONTRAST;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETHIGHCONTRAST;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETKEYBOARDPREF;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETKEYBOARDPREF;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSCREENREADER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSCREENREADER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFONTSMOOTHING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFONTSMOOTHING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDRAGWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDRAGHEIGHT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETHANDHELD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETLOWPOWERTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPOWEROFFTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETLOWPOWERTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPOWEROFFTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETLOWPOWERACTIVE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPOWEROFFACTIVE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETLOWPOWERACTIVE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPOWEROFFACTIVE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCURSORS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETICONS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDEFAULTINPUTLANG;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDEFAULTINPUTLANG;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETLANGTOGGLE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWINDOWSEXTENSION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSETRAILS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSETRAILS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSCREENSAVERRUNNING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SCREENSAVERRUNNING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFILTERKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFILTERKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETTOGGLEKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETTOGGLEKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSHOWSOUNDS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSHOWSOUNDS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSTICKYKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSTICKYKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETACCESSTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETACCESSTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSERIALKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSERIALKEYS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSOUNDSENTRY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSOUNDSENTRY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSNAPTODEFBUTTON;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSNAPTODEFBUTTON;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEHOVERWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEHOVERWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEHOVERHEIGHT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEHOVERHEIGHT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEHOVERTIME;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEHOVERTIME;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWHEELSCROLLLINES;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETWHEELSCROLLLINES;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMENUSHOWDELAY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMENUSHOWDELAY;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWHEELSCROLLCHARS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETWHEELSCROLLCHARS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSHOWIMEUI;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSHOWIMEUI;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSESPEED;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSESPEED;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSCREENSAVERRUNNING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDESKWALLPAPER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETAUDIODESCRIPTION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETAUDIODESCRIPTION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSCREENSAVESECURE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSCREENSAVESECURE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETHUNGAPPTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETHUNGAPPTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWAITTOKILLTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETWAITTOKILLTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWAITTOKILLSERVICETIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETWAITTOKILLSERVICETIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEDOCKTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEDOCKTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPENDOCKTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPENDOCKTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETWINARRANGING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETWINARRANGING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEDRAGOUTTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEDRAGOUTTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPENDRAGOUTTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPENDRAGOUTTHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSESIDEMOVETHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSESIDEMOVETHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPENSIDEMOVETHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPENSIDEMOVETHRESHOLD;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDRAGFROMMAXIMIZE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDRAGFROMMAXIMIZE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSNAPSIZING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSNAPSIZING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDOCKMOVING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDOCKMOVING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETTOUCHPREDICTIONPARAMETERS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETTOUCHPREDICTIONPARAMETERS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETLOGICALDPIOVERRIDE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETLOGICALDPIOVERRIDE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMENURECT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMENURECT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETACTIVEWINDOWTRACKING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETACTIVEWINDOWTRACKING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMENUANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMENUANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCOMBOBOXANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCOMBOBOXANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETLISTBOXSMOOTHSCROLLING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETLISTBOXSMOOTHSCROLLING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETGRADIENTCAPTIONS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETGRADIENTCAPTIONS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETKEYBOARDCUES;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETKEYBOARDCUES;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMENUUNDERLINES;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMENUUNDERLINES;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETACTIVEWNDTRKZORDER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETACTIVEWNDTRKZORDER;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETHOTTRACKING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETHOTTRACKING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMENUFADE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMENUFADE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSELECTIONFADE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSELECTIONFADE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETTOOLTIPANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETTOOLTIPANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETTOOLTIPFADE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETTOOLTIPFADE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCURSORSHADOW;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCURSORSHADOW;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSESONAR;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSESONAR;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSECLICKLOCK;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSECLICKLOCK;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEVANISH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEVANISH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFLATMENU;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFLATMENU;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDROPSHADOW;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDROPSHADOW;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETBLOCKSENDINPUTRESETS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETBLOCKSENDINPUTRESETS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETUIEFFECTS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETUIEFFECTS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETDISABLEOVERLAPPEDCONTENT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETDISABLEOVERLAPPEDCONTENT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCLIENTAREAANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCLIENTAREAANIMATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCLEARTYPE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCLEARTYPE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSPEECHRECOGNITION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSPEECHRECOGNITION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCARETBROWSING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCARETBROWSING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETTHREADLOCALINPUTSETTINGS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETTHREADLOCALINPUTSETTINGS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETSYSTEMLANGUAGEBAR;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETSYSTEMLANGUAGEBAR;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFOREGROUNDLOCKTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFOREGROUNDLOCKTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETACTIVEWNDTRKTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETACTIVEWNDTRKTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFOREGROUNDFLASHCOUNT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFOREGROUNDFLASHCOUNT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCARETWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCARETWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSECLICKLOCKTIME;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSECLICKLOCKTIME;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFONTSMOOTHINGTYPE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFONTSMOOTHINGTYPE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFONTSMOOTHINGCONTRAST;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFONTSMOOTHINGCONTRAST;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFOCUSBORDERWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFOCUSBORDERWIDTH;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFOCUSBORDERHEIGHT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFOCUSBORDERHEIGHT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETFONTSMOOTHINGORIENTATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETFONTSMOOTHINGORIENTATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMINIMUMHITRADIUS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMINIMUMHITRADIUS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMESSAGEDURATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMESSAGEDURATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCONTACTVISUALIZATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCONTACTVISUALIZATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETGESTUREVISUALIZATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETGESTUREVISUALIZATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETMOUSEWHEELROUTING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETMOUSEWHEELROUTING;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPENVISUALIZATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPENVISUALIZATION;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETPENARBITRATIONTYPE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETPENARBITRATIONTYPE;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETCARETTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETCARETTIMEOUT;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_GETHANDEDNESS;
    public static SYSTEM_PARAMETERS_INFO_ACTION SPI_SETHANDEDNESS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS : Enum {
    public UInt32 value__;
    public static SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS SPIF_UPDATEINIFILE;
    public static SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS SPIF_SENDCHANGE;
    public static SYSTEM_PARAMETERS_INFO_UPDATE_FLAGS SPIF_SENDWININICHANGE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.TILE_WINDOWS_HOW : Enum {
    public UInt32 value__;
    public static TILE_WINDOWS_HOW MDITILE_HORIZONTAL;
    public static TILE_WINDOWS_HOW MDITILE_VERTICAL;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE : Enum {
    public UInt32 value__;
    public static WINDOW_EX_STYLE WS_EX_DLGMODALFRAME;
    public static WINDOW_EX_STYLE WS_EX_NOPARENTNOTIFY;
    public static WINDOW_EX_STYLE WS_EX_TOPMOST;
    public static WINDOW_EX_STYLE WS_EX_ACCEPTFILES;
    public static WINDOW_EX_STYLE WS_EX_TRANSPARENT;
    public static WINDOW_EX_STYLE WS_EX_MDICHILD;
    public static WINDOW_EX_STYLE WS_EX_TOOLWINDOW;
    public static WINDOW_EX_STYLE WS_EX_WINDOWEDGE;
    public static WINDOW_EX_STYLE WS_EX_CLIENTEDGE;
    public static WINDOW_EX_STYLE WS_EX_CONTEXTHELP;
    public static WINDOW_EX_STYLE WS_EX_RIGHT;
    public static WINDOW_EX_STYLE WS_EX_LEFT;
    public static WINDOW_EX_STYLE WS_EX_RTLREADING;
    public static WINDOW_EX_STYLE WS_EX_LTRREADING;
    public static WINDOW_EX_STYLE WS_EX_LEFTSCROLLBAR;
    public static WINDOW_EX_STYLE WS_EX_RIGHTSCROLLBAR;
    public static WINDOW_EX_STYLE WS_EX_CONTROLPARENT;
    public static WINDOW_EX_STYLE WS_EX_STATICEDGE;
    public static WINDOW_EX_STYLE WS_EX_APPWINDOW;
    public static WINDOW_EX_STYLE WS_EX_OVERLAPPEDWINDOW;
    public static WINDOW_EX_STYLE WS_EX_PALETTEWINDOW;
    public static WINDOW_EX_STYLE WS_EX_LAYERED;
    public static WINDOW_EX_STYLE WS_EX_NOINHERITLAYOUT;
    public static WINDOW_EX_STYLE WS_EX_NOREDIRECTIONBITMAP;
    public static WINDOW_EX_STYLE WS_EX_LAYOUTRTL;
    public static WINDOW_EX_STYLE WS_EX_COMPOSITED;
    public static WINDOW_EX_STYLE WS_EX_NOACTIVATE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX : Enum {
    public int value__;
    public static WINDOW_LONG_PTR_INDEX GWL_EXSTYLE;
    public static WINDOW_LONG_PTR_INDEX GWLP_HINSTANCE;
    public static WINDOW_LONG_PTR_INDEX GWLP_HWNDPARENT;
    public static WINDOW_LONG_PTR_INDEX GWLP_ID;
    public static WINDOW_LONG_PTR_INDEX GWL_STYLE;
    public static WINDOW_LONG_PTR_INDEX GWLP_USERDATA;
    public static WINDOW_LONG_PTR_INDEX GWLP_WNDPROC;
    public static WINDOW_LONG_PTR_INDEX GWL_HINSTANCE;
    public static WINDOW_LONG_PTR_INDEX GWL_ID;
    public static WINDOW_LONG_PTR_INDEX GWL_USERDATA;
    public static WINDOW_LONG_PTR_INDEX GWL_WNDPROC;
    public static WINDOW_LONG_PTR_INDEX GWL_HWNDPARENT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOW_STYLE : Enum {
    public UInt32 value__;
    public static WINDOW_STYLE WS_OVERLAPPED;
    public static WINDOW_STYLE WS_POPUP;
    public static WINDOW_STYLE WS_CHILD;
    public static WINDOW_STYLE WS_MINIMIZE;
    public static WINDOW_STYLE WS_VISIBLE;
    public static WINDOW_STYLE WS_DISABLED;
    public static WINDOW_STYLE WS_CLIPSIBLINGS;
    public static WINDOW_STYLE WS_CLIPCHILDREN;
    public static WINDOW_STYLE WS_MAXIMIZE;
    public static WINDOW_STYLE WS_CAPTION;
    public static WINDOW_STYLE WS_BORDER;
    public static WINDOW_STYLE WS_DLGFRAME;
    public static WINDOW_STYLE WS_VSCROLL;
    public static WINDOW_STYLE WS_HSCROLL;
    public static WINDOW_STYLE WS_SYSMENU;
    public static WINDOW_STYLE WS_THICKFRAME;
    public static WINDOW_STYLE WS_GROUP;
    public static WINDOW_STYLE WS_TABSTOP;
    public static WINDOW_STYLE WS_MINIMIZEBOX;
    public static WINDOW_STYLE WS_MAXIMIZEBOX;
    public static WINDOW_STYLE WS_TILED;
    public static WINDOW_STYLE WS_ICONIC;
    public static WINDOW_STYLE WS_SIZEBOX;
    public static WINDOW_STYLE WS_TILEDWINDOW;
    public static WINDOW_STYLE WS_OVERLAPPEDWINDOW;
    public static WINDOW_STYLE WS_POPUPWINDOW;
    public static WINDOW_STYLE WS_CHILDWINDOW;
    public static WINDOW_STYLE WS_ACTIVECAPTION;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.WINDOWPLACEMENT : ValueType {
    internal UInt32 length;
    internal WINDOWPLACEMENT_FLAGS flags;
    private UInt32 _showCmd;
    internal Point ptMinPosition;
    internal Point ptMaxPosition;
    internal RECT rcNormalPosition;
    internal SHOW_WINDOW_CMD showCmd { get; internal set; }
    internal SHOW_WINDOW_CMD get_showCmd();
    internal void set_showCmd(SHOW_WINDOW_CMD value);
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOWPLACEMENT_FLAGS : Enum {
    public UInt32 value__;
    public static WINDOWPLACEMENT_FLAGS WPF_ASYNCWINDOWPLACEMENT;
    public static WINDOWPLACEMENT_FLAGS WPF_RESTORETOMAXIMIZED;
    public static WINDOWPLACEMENT_FLAGS WPF_SETMINPOSITION;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.WINDOWPOS : ValueType {
    internal HWND hwnd;
    internal HWND hwndInsertAfter;
    internal int x;
    internal int y;
    internal int cx;
    internal int cy;
    internal SET_WINDOW_POS_FLAGS flags;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOWS_HOOK_ID : Enum {
    public int value__;
    public static WINDOWS_HOOK_ID WH_CALLWNDPROC;
    public static WINDOWS_HOOK_ID WH_CALLWNDPROCRET;
    public static WINDOWS_HOOK_ID WH_CBT;
    public static WINDOWS_HOOK_ID WH_DEBUG;
    public static WINDOWS_HOOK_ID WH_FOREGROUNDIDLE;
    public static WINDOWS_HOOK_ID WH_GETMESSAGE;
    public static WINDOWS_HOOK_ID WH_JOURNALPLAYBACK;
    public static WINDOWS_HOOK_ID WH_JOURNALRECORD;
    public static WINDOWS_HOOK_ID WH_KEYBOARD;
    public static WINDOWS_HOOK_ID WH_KEYBOARD_LL;
    public static WINDOWS_HOOK_ID WH_MOUSE;
    public static WINDOWS_HOOK_ID WH_MOUSE_LL;
    public static WINDOWS_HOOK_ID WH_MSGFILTER;
    public static WINDOWS_HOOK_ID WH_SHELL;
    public static WINDOWS_HOOK_ID WH_SYSMSGFILTER;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WNDCLASS_STYLES : Enum {
    public UInt32 value__;
    public static WNDCLASS_STYLES CS_VREDRAW;
    public static WNDCLASS_STYLES CS_HREDRAW;
    public static WNDCLASS_STYLES CS_DBLCLKS;
    public static WNDCLASS_STYLES CS_OWNDC;
    public static WNDCLASS_STYLES CS_CLASSDC;
    public static WNDCLASS_STYLES CS_PARENTDC;
    public static WNDCLASS_STYLES CS_NOCLOSE;
    public static WNDCLASS_STYLES CS_SAVEBITS;
    public static WNDCLASS_STYLES CS_BYTEALIGNCLIENT;
    public static WNDCLASS_STYLES CS_BYTEALIGNWINDOW;
    public static WNDCLASS_STYLES CS_GLOBALCLASS;
    public static WNDCLASS_STYLES CS_IME;
    public static WNDCLASS_STYLES CS_DROPSHADOW;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.3.36-beta+6a5076f50a")]
internal class Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW : ValueType {
    internal WNDCLASS_STYLES style;
    internal method lpfnWndProc;
    internal int cbClsExtra;
    internal int cbWndExtra;
    internal HINSTANCE hInstance;
    internal HICON hIcon;
    internal HCURSOR hCursor;
    internal HBRUSH hbrBackground;
    internal PCWSTR lpszMenuName;
    internal PCWSTR lpszClassName;
}
internal class Windows.Win32.UI.WindowsAndMessaging.WNDPROC : MulticastDelegate {
    public WNDPROC(object object, IntPtr method);
    public virtual LRESULT Invoke(HWND hWnd, MessageId msg, WPARAM wParam, LPARAM lParam);
    public virtual IAsyncResult BeginInvoke(HWND hWnd, MessageId msg, WPARAM wParam, LPARAM lParam, AsyncCallback callback, object object);
    public virtual LRESULT EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class WMExtensions : object {
    [ExtensionAttribute]
public static bool IsMouseMessage(Message& message);
    [ExtensionAttribute]
public static bool IsMouseMessage(MSG& message);
    [ExtensionAttribute]
public static bool IsKeyMessage(Message& message);
    [ExtensionAttribute]
public static bool IsKeyMessage(MSG& message);
    [ExtensionAttribute]
public static bool IsBetween(Message& message, MessageId firstMessage, MessageId secondMessage);
    [ExtensionAttribute]
public static bool IsBetween(MSG& message, MessageId firstMessage, MessageId secondMessage);
}
