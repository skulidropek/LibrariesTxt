internal static class FxResources.WindowsFormsIntegration.SR : object {
}
internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
    internal static string ApiSetWinRT;
    internal static string ApiSetWinRTString;
}
internal static class MS.Internal.WinFormsIntegration.NativeMethodsSetLastError : object {
    private static string PresentationNativeDll;
    public static bool EnableWindow(IntPtr hWnd, bool enable);
}
internal class MS.Win32.DCSafeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal static class MS.Win32.ExternDll : object {
    public static string Gdi32;
    public static string User32;
}
internal static class MS.Win32.NativeMethods : object {
    public static IntPtr HWND_TOP;
    public static int LOGPIXELSX;
    public static int LOGPIXELSY;
    public static int SWP_NOSIZE;
    public static int SWP_NOMOVE;
    public static int UIS_SET;
    public static int UIS_INITIALIZE;
    public static int UISF_HIDEFOCUS;
    public static int UISF_HIDEACCEL;
    public static int WM_CREATE;
    public static int WM_MOVE;
    public static int WM_SIZE;
    public static int WM_SETFOCUS;
    public static int WM_KILLFOCUS;
    public static int WM_SETREDRAW;
    public static int WM_WINDOWPOSCHANGING;
    public static int WM_WINDOWPOSCHANGED;
    public static int WM_ACTIVATEAPP;
    public static int WM_MOUSEACTIVATE;
    public static int WM_CHILDACTIVATE;
    public static int WM_GETOBJECT;
    public static int WM_KEYDOWN;
    public static int WM_KEYUP;
    public static int WM_CHAR;
    public static int WM_DEADCHAR;
    public static int WM_SYSKEYDOWN;
    public static int WM_SYSKEYUP;
    public static int WM_SYSCHAR;
    public static int WM_SYSDEADCHAR;
    public static int WM_UPDATEUISTATE;
    public static int WM_PARENTNOTIFY;
    public static int WM_USER;
    public static int WM_REFLECT;
    public static int WM_INPUTLANGCHANGE;
    public static int WM_IME_NOTIFY;
    public static int IMN_SETCONVERSIONMODE;
    public static int IMN_SETOPENSTATUS;
    private static NativeMethods();
}
internal static class MS.Win32.SafeNativeMethods : object {
    internal static int GetMessageTime();
    internal static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int flags);
}
internal static class MS.Win32.UnsafeNativeMethods : object {
    public static bool IsChild(IntPtr hWndParent, IntPtr hwnd);
    public static IntPtr GetFocus();
    internal static IntPtr SetParent(IntPtr hWnd, IntPtr hWndParent);
    public static bool TranslateMessage(MSG& msg);
    public static IntPtr DispatchMessage(MSG& msg);
    internal static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static int GetDeviceCaps(DCSafeHandle hDC, int nIndex);
    private static DCSafeHandle IntCreateDC(string lpszDriver, string lpszDeviceName, string lpszOutput, IntPtr devMode);
    public static DCSafeHandle CreateDC(string lpszDriver);
    public static bool DeleteDC(IntPtr hDC);
}
public class System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer : FrameworkElementAutomationPeer {
    protected internal bool IsHwndHost { get; }
    public WindowsFormsHostAutomationPeer(WindowsFormsHost owner);
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected internal virtual bool get_IsHwndHost();
    protected virtual HostedWindowWrapper GetHostRawElementProviderCore();
    internal IRawElementProviderSimple GetProvider();
}
internal static class System.Windows.Forms.Integration.ApplicationInterop : object {
    [ThreadStaticAttribute]
private static WindowsFormsHostList _threadWindowsFormsHostList;
    [ThreadStaticAttribute]
private static bool _messageFilterInstalledOnThread;
    internal static WindowsFormsHostList ThreadWindowsFormsHostList { get; }
    internal static WindowsFormsHostList get_ThreadWindowsFormsHostList();
    public static void EnableModelessKeyboardInterop(Window window);
    public static void EnableWindowsFormsInterop();
    internal static void ThreadMessageFilter(MSG& msg, Boolean& outHandled);
}
internal class System.Windows.Forms.Integration.AvalonAdapter : DockPanel {
    private ElementHost _hostControl;
    public static DependencyProperty ForceInvalidateProperty;
    [CompilerGeneratedAttribute]
private bool <ProcessingTabKeyFromElementHost>k__BackingField;
    public bool ForceInvalidate { get; public set; }
    public IKeyboardInputSink Sink { get; }
    internal bool ProcessingTabKeyFromElementHost { get; internal set; }
    private static AvalonAdapter();
    public AvalonAdapter(ElementHost hostControl);
    public sealed virtual void Dispose();
    private static object OnGetForceInvalidate(DependencyObject d);
    public bool get_ForceInvalidate();
    public void set_ForceInvalidate(bool value);
    private static Color FindSolidColorParent(Control whichControl);
    public sealed virtual bool OnNoMoreTabStops(TraversalRequest request, Boolean& shouldCycle);
    public sealed virtual void Unregister();
    public sealed virtual bool OnNoMoreTabStops(TraversalRequest request);
    private bool ShouldSearchWrapForParentControl(Control control);
    public sealed virtual IKeyboardInputSink get_Sink();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [CompilerGeneratedAttribute]
internal bool get_ProcessingTabKeyFromElementHost();
    [CompilerGeneratedAttribute]
internal void set_ProcessingTabKeyFromElementHost(bool value);
}
public class System.Windows.Forms.Integration.ChildChangedEventArgs : EventArgs {
    private object _previousChild;
    public object PreviousChild { get; }
    public ChildChangedEventArgs(object previousChild);
    public object get_PreviousChild();
}
internal static class System.Windows.Forms.Integration.Convert : object {
    internal static float systemDrawingPixelsPerInch;
    internal static float systemWindowsPixelsPerInch;
    private static Dictionary`2<Cursor, Cursor> _toSystemWindowsInputCursorDictionary;
    private static Dictionary`2<Cursor, Cursor> _toSystemWindowsFormsCursorDictionary;
    private static Dictionary`2<Cursor, Cursor> ToSystemWindowsInputCursorDictionary { get; }
    private static Dictionary`2<Cursor, Cursor> ToSystemWindowsFormsCursorDictionary { get; }
    private static Dictionary`2<Cursor, Cursor> get_ToSystemWindowsInputCursorDictionary();
    private static Dictionary`2<Cursor, Cursor> get_ToSystemWindowsFormsCursorDictionary();
    internal static Cursor ToSystemWindowsInputCursor(Cursor swfCursor);
    internal static Cursor ToSystemWindowsFormsCursor(Cursor swiCursor);
    internal static BitmapImage ToSystemWindowsMediaImagingBitmapImage(Image fromImage);
    internal static MSG ToSystemWindowsInteropMSG(Message msg);
    internal static ModifierKeys ToSystemWindowsInputModifierKeys(Keys keyData);
    internal static double SystemDrawingFontToSystemWindowsFontSize(Font font);
    internal static double FontSizeToSystemDrawing(double initialSize);
    internal static FontFamily ToSystemWindowsFontFamily(FontFamily sdFamily);
    internal static FontWeight ToSystemWindowsFontWeight(Font sdFont);
    internal static FontStyle ToSystemWindowsFontStyle(Font sdFont);
    internal static Size ToSystemWindowsSize(Size size, Vector scale);
    internal static Size ToSystemWindowsSize(Size size, Vector scale, double dpiScaleX, double dpiScaleY);
    internal static Size ToSystemDrawingSize(Size size, Vector scale);
    internal static Size ToSystemDrawingSize(Size size, Vector scale, double dpiScaleX, double dpiScaleY);
    private static double ScaleFactor(double value, Orientation orientation);
    private static double ScaleFactor(double value, Orientation orientation, double dpiScale);
    internal static Size ConstraintToSystemDrawingSize(Size size, Vector scale, double dpiScaleX, double dpiScaleY);
    internal static Padding ToSystemWindowsFormsPadding(Thickness thickness);
    internal static int ToBoundedInt(double value);
    internal static Color ToSystemDrawingColor(Color color);
    internal static Message ToSystemWindowsFormsMessage(MSG msg);
}
[DesignerCategoryAttribute("code")]
[ContentPropertyAttribute("Child")]
[DefaultEventAttribute("ChildChanged")]
[DesignerAttribute("WindowsFormsIntegration.Design.ElementHostDesigner, WindowsFormsIntegration.Design, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerSerializerAttribute("WindowsFormsIntegration.Design.ElementHostCodeDomSerializer, WindowsFormsIntegration.Design, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.Integration.ElementHost : Control {
    private HwndSource _hwndSource;
    private AdornerDecorator _decorator;
    private AvalonAdapter _hostContainerInternal;
    private bool _backColorTransparent;
    private UIElement _child;
    private bool _processingWmInputLangChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChildChangedEventArgs> ChildChanged;
    private ElementHostPropertyMap _propertyMap;
    private static TraceSwitch _traceLayout;
    protected Size DefaultSize { get; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Panel HostContainer { get; }
    internal HwndSource HwndSource { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public UIElement Child { get; public set; }
    protected bool CanEnableIme { get; }
    public bool Focused { get; }
    protected ImeMode ImeModeBase { get; protected set; }
    internal AvalonAdapter HostContainerInternal { get; }
    [DefaultValueAttribute("False")]
public bool BackColorTransparent { get; public set; }
    [BrowsableAttribute("False")]
public PropertyMap PropertyMap { get; }
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual Size get_DefaultSize();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public Panel get_HostContainer();
    internal HwndSource get_HwndSource();
    [CompilerGeneratedAttribute]
public void add_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    public UIElement get_Child();
    public void set_Child(UIElement value);
    protected virtual bool get_CanEnableIme();
    public virtual bool get_Focused();
    protected virtual ImeMode get_ImeModeBase();
    protected virtual void set_ImeModeBase(ImeMode value);
    protected virtual void OnEnabledChanged(EventArgs e);
    private void OnChildChanged(UIElement oldChild);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    private void InitializeChildProperties();
    protected virtual void OnVisibleChanged(EventArgs e);
    private void CallUpdateBackground(object sender, EventArgs e);
    private void UpdateBackground();
    private void childFrameworkElement_SizeChanged(object sender, SizeChangedEventArgs e);
    internal AvalonAdapter get_HostContainerInternal();
    public bool get_BackColorTransparent();
    public void set_BackColorTransparent(bool value);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected virtual void OnPaint(PaintEventArgs e);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected virtual void OnPaintBackground(PaintEventArgs pevent);
    internal void InvokePaintBackgroundAndPaint(Control control, PaintEventArgs args);
    protected virtual void OnPrint(PaintEventArgs e);
    protected virtual void Select(bool directed, bool forward);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual bool ProcessMnemonic(char charCode);
    protected virtual bool IsInputChar(char charCode);
    private void InputManager_PostProcessInput(object sender, ProcessInputEventArgs e);
    public static void EnableModelessKeyboardInterop(Window window);
    protected virtual void OnHandleCreated(EventArgs e);
    private IntPtr HwndSourceHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void SetHWndSourceWindowPos();
    internal bool SyncHwndSrcImeStatus();
    private static void SetChildElementsIsImeEnabled(DependencyObject element, bool isEnabled);
    private void OnHwndSrcWmInputLangChange(int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void OnHwndSrcWmImeNotify(int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void OnHwndSourceMsgNotifyElementHost(int msg, IntPtr wParam, IntPtr lParam);
    protected virtual void WndProc(Message& m);
    protected virtual void ScaleCore(float dx, float dy);
    protected virtual void Dispose(bool disposing);
    private void DisposeHWndSource();
    private void StartPropertyMapping();
    private void OnPropertyChangedBackColor(object sender, EventArgs e);
    private void OnPropertyChangedBackgroundImage(object sender, EventArgs e);
    private void OnPropertyChangedBackgroundImageLayout(object sender, EventArgs e);
    private void OnPropertyChangedCursor(object sender, EventArgs e);
    private void OnPropertyChangedEnabled(object sender, EventArgs e);
    private void OnPropertyChangedFont(object sender, EventArgs e);
    private void OnPropertyChangedForeColor(object sender, EventArgs e);
    private void OnPropertyChangedRightToLeft(object sender, EventArgs e);
    private void OnPropertyChangedTabStop(object sender, EventArgs e);
    private void OnPropertyChangedVisible(object sender, EventArgs e);
    private void OnPropertyChangedAutoSize(object sender, EventArgs e);
    private void OnPropertyChangedPadding(object sender, EventArgs e);
    private void OnPropertyChangedBindingContext(object sender, EventArgs e);
    private void OnPropertyChangedCausesValidation(object sender, EventArgs e);
    private void OnPropertyChangedContextMenuStrip(object sender, EventArgs e);
    private void OnPropertyChangedDock(object sender, EventArgs e);
    private void OnPropertyChangedLocation(object sender, EventArgs e);
    private void OnPropertyChangedMargin(object sender, EventArgs e);
    private void OnPropertyChangedParent(object sender, EventArgs e);
    private void OnPropertyChangedRegion(object sender, EventArgs e);
    private void OnPropertyChangedSize(object sender, EventArgs e);
    private void OnPropertyChangedTabIndex(object sender, EventArgs e);
    private void OnPropertyChangedText(object sender, EventArgs e);
    private void OnPropertyChangedImeMode(object sender, EventArgs e);
    public virtual void OnPropertyChanged(string propertyName, object value);
    public PropertyMap get_PropertyMap();
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_ClientSizeChanged(EventHandler value);
    public void remove_ClientSizeChanged(EventHandler value);
    public void add_ControlAdded(ControlEventHandler value);
    public void remove_ControlAdded(ControlEventHandler value);
    public void add_ControlRemoved(ControlEventHandler value);
    public void remove_ControlRemoved(ControlEventHandler value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_GotFocus(EventHandler value);
    public void remove_GotFocus(EventHandler value);
    public void add_Invalidated(InvalidateEventHandler value);
    public void remove_Invalidated(InvalidateEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_LostFocus(EventHandler value);
    public void remove_LostFocus(EventHandler value);
    public void add_MouseCaptureChanged(EventHandler value);
    public void remove_MouseCaptureChanged(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_PreviewKeyDown(PreviewKeyDownEventHandler value);
    public void remove_PreviewKeyDown(PreviewKeyDownEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_Resize(EventHandler value);
    public void remove_Resize(EventHandler value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_SizeChanged(EventHandler value);
    public void remove_SizeChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void <OnHandleCreated>b__54_0();
}
internal class System.Windows.Forms.Integration.ElementHostAutomationPeer : FrameworkElementAutomationPeer {
    private AvalonAdapter _owner;
    public ElementHostAutomationPeer(AvalonAdapter owner);
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual string GetNameCore();
}
internal class System.Windows.Forms.Integration.ElementHostPropertyMap : PropertyMap {
    private ElementHost _host;
    public ElementHostPropertyMap(ElementHost host);
    private void InitializeDefaultTranslators();
    private static void BackgroundPropertyTranslator(object host, string propertyName, object value);
    private static void UpdateBackgroundImage(ElementHost host);
    private static void CursorPropertyTranslator(object host, string propertyName, object value);
    private static void EnabledPropertyTranslator(object host, string propertyName, object value);
    private static void FontPropertyTranslator(object host, string propertyName, object value);
    private static void ImeModePropertyTranslator(object host, string propertyName, object value);
    private static void RightToLeftPropertyTranslator(object host, string propertyName, object value);
    private static void VisiblePropertyTranslator(object host, string propertyName, object value);
}
internal static class System.Windows.Forms.Integration.HostUtils : object {
    private static string DISPLAY;
    private static int defaultPixelsPerInch;
    private static TraceSwitch imeModeTraceSwitch;
    public static TraceSwitch ImeMode { get; }
    public static TraceSwitch get_ImeMode();
    public static Size ConvertZeroToUnbounded(Size size);
    public static Size ConvertZeroOrOneToUnbounded(Size size);
    public static Size ConvertUnboundedToZero(Size size);
    public static Size UnionSizes(Size size1, Size size2);
    public static Size IntersectSizes(Size size1, Size size2);
    internal static Visual GetRootVisual(Visual descendant);
    internal static Point TransformToRootPoint(Visual element, Point pointElement);
    internal static Point TransformToParentPoint(Visual element, Visual ancestor, Point pointElement);
    internal static bool BrushIsSolidOpaque(Brush c);
    internal static void SetBackgroundImage(WinFormsAdapter adapter, Control child, Bitmap image);
    internal static Bitmap GetBitmapForWindowsFormsHost(WindowsFormsHost host, Brush brush);
    internal static Bitmap GetBitmapOfControl(Control control, ElementHost host);
    internal static Bitmap GetCoveredPortionOfBitmap(Control parentControl, ElementHost childElementHost);
    private static FrameworkElement GetFrameworkElementAncestor(DependencyObject descendant);
    internal static Bitmap GetBitmapForTransparentWindowsFormsHost(WindowsFormsHost host);
    internal static RenderTargetBitmap GetBitmapForFrameworkElement(FrameworkElement element);
    internal static Bitmap GetBitmapFromRenderTargetBitmap(Control control, RenderTargetBitmap bmp, Point offset);
    internal static RenderTargetBitmap GetRenderTargetBitmapForVisual(int width, int height, Visual visualToRender);
    internal static Bitmap GetBitmapForOpaqueWindowsFormsHost(WindowsFormsHost host, Brush brush);
    internal static Vector GetScale(Visual visual);
    internal static Vector GetScale(Visual visual, Boolean& skewed);
    internal static bool IsRotated(Visual visual);
    internal static int PixelsPerInch(Orientation orientation);
    internal static bool IsZero(double value);
    internal static int LOWORD(IntPtr ptr);
    public static bool FontWeightIsBold(FontWeight fontWeight);
    public static FrameworkElement GetCursorSource(DependencyObject currentObject, bool forceCursorMapped);
}
public class System.Windows.Forms.Integration.IntegrationExceptionEventArgs : EventArgs {
    private bool _throwException;
    private Exception _exception;
    public bool ThrowException { get; public set; }
    public Exception Exception { get; }
    public IntegrationExceptionEventArgs(bool throwException, Exception exception);
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
    public Exception get_Exception();
}
public class System.Windows.Forms.Integration.LayoutExceptionEventArgs : IntegrationExceptionEventArgs {
    public LayoutExceptionEventArgs(Exception exception);
}
internal class System.Windows.Forms.Integration.ModelessWindowFilter : object {
    private Window _window;
    private bool _inPreFilterMessage;
    public Window Window { get; }
    public ModelessWindowFilter(Window window);
    public Window get_Window();
    public sealed virtual bool PreFilterMessage(Message& msg);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Integration.PropertyMap : object {
    private object _sourceObject;
    private Dictionary`2<string, PropertyTranslator> _defaultTranslators;
    private Dictionary`2<string, PropertyTranslator> _wrappedDictionary;
    [CompilerGeneratedAttribute]
private EventHandler`1<PropertyMappingExceptionEventArgs> _propertyMappingError;
    protected object SourceObject { get; }
    public PropertyTranslator Item { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    protected Dictionary`2<string, PropertyTranslator> DefaultTranslators { get; }
    public PropertyMap(object source);
    protected object get_SourceObject();
    public PropertyTranslator get_Item(string propertyName);
    public void set_Item(string propertyName, PropertyTranslator value);
    public ICollection get_Keys();
    public ICollection get_Values();
    public void Add(string propertyName, PropertyTranslator translator);
    private void ThrowIfPropertyDoesntExistOnSource(string propertyName);
    public void Apply(string propertyName);
    public void ApplyAll();
    private PropertyInfo GetProperty(string propertyName);
    public void Clear();
    public bool Contains(string propertyName);
    public void Remove(string propertyName);
    protected Dictionary`2<string, PropertyTranslator> get_DefaultTranslators();
    internal bool PropertyMappedToEmptyTranslator(string propertyName);
    internal void EmptyPropertyTranslator(object host, string propertyName, object value);
    public void Reset(string propertyName);
    public void ResetAll();
    private void AddDefaultPropertyTranslators();
    internal void OnPropertyChanged(object host, string propertyName, object value);
    internal void RunTranslator(PropertyTranslator translator, object host, string propertyName, object value);
    [CompilerGeneratedAttribute]
private void add__propertyMappingError(EventHandler`1<PropertyMappingExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__propertyMappingError(EventHandler`1<PropertyMappingExceptionEventArgs> value);
    public void add_PropertyMappingError(EventHandler`1<PropertyMappingExceptionEventArgs> value);
    public void remove_PropertyMappingError(EventHandler`1<PropertyMappingExceptionEventArgs> value);
}
public class System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs : IntegrationExceptionEventArgs {
    private string _propertyName;
    private object _propertyValue;
    public string PropertyName { get; }
    public object PropertyValue { get; }
    public PropertyMappingExceptionEventArgs(Exception exception, string propertyName, object propertyValue);
    public string get_PropertyName();
    public object get_PropertyValue();
}
public class System.Windows.Forms.Integration.PropertyTranslator : MulticastDelegate {
    public PropertyTranslator(object object, IntPtr method);
    public virtual void Invoke(object host, string propertyName, object value);
    public virtual IAsyncResult BeginInvoke(object host, string propertyName, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.Integration.WeakReferenceList`1 : object {
    private List`1<WeakReference> _internalList;
    private object _syncRoot;
    public List`1<T> SnapshotListOfTargets { get; }
    protected void RemoveDeadReferencesFromList();
    public List`1<T> get_SnapshotListOfTargets();
    public void Add(T obj);
    internal int IndexOf(T obj);
    public bool Remove(T obj);
}
internal class System.Windows.Forms.Integration.WindowFilterList : WeakReferenceList`1<ModelessWindowFilter> {
    private static WindowFilterList _filterList;
    public static WindowFilterList FilterList { get; }
    private static WindowFilterList();
    public static WindowFilterList get_FilterList();
    private static ModelessWindowFilter FindFilter(Window window);
    public static void ModelessWindowClosed(object sender, EventArgs e);
}
[DesignerCategoryAttribute("code")]
[ContentPropertyAttribute("Child")]
[DefaultEventAttribute("ChildChanged")]
public class System.Windows.Forms.Integration.WindowsFormsHost : HwndHost {
    private Brush _cachedBackbrush;
    private HandleRef _hwndParent;
    private WinFormsAdapter _hostContainerInternal;
    private Vector _currentScale;
    [CompilerGeneratedAttribute]
private EventHandler`1<LayoutExceptionEventArgs> _layoutError;
    private Size _priorConstraint;
    [CompilerGeneratedAttribute]
private EventHandler`1<ChildChangedEventArgs> ChildChanged;
    private static Brush defaultBrush;
    private DummyNativeWindow _dummyNativeWindow;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TabIndexProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty BackgroundProperty;
    private PropertyMap _propertyMap;
    internal static TraceSwitch _traceHandle;
    internal static TraceSwitch _traceLayout;
    public Control Child { get; public set; }
    internal WinFormsAdapter HostContainerInternal { get; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public Thickness Padding { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Behavior")]
public int TabIndex { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    public Brush Background { get; public set; }
    public PropertyMap PropertyMap { get; }
    private static WindowsFormsHost();
    private void NotifyFocusWithinHost();
    private void OnChildGotFocus(object sender, EventArgs e);
    private void SyncChildImeEnabledContext();
    protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr OnWmGetObject(IntPtr wparam, IntPtr lparam);
    private static DependencyObject GetFocusScopeForElement(DependencyObject element);
    protected virtual Vector ScaleChild(Vector newScale);
    private void ScaleChild();
    [CompilerGeneratedAttribute]
private void add__layoutError(EventHandler`1<LayoutExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__layoutError(EventHandler`1<LayoutExceptionEventArgs> value);
    public void add_LayoutError(EventHandler`1<LayoutExceptionEventArgs> value);
    public void remove_LayoutError(EventHandler`1<LayoutExceptionEventArgs> value);
    private void OnLayoutError();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    [CompilerGeneratedAttribute]
public void add_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    public Control get_Child();
    public void set_Child(Control value);
    private void OnChildChanged(Control oldChild);
    internal WinFormsAdapter get_HostContainerInternal();
    private static Brush FindBackgroundParent(DependencyObject dependencyObject);
    internal void PaintBackground();
    public static void EnableWindowsFormsInterop();
    public virtual bool TabInto(TraversalRequest request);
    protected virtual HandleRef BuildWindowCore(HandleRef hwndParent);
    protected virtual void DestroyWindowCore(HandleRef hwnd);
    private void ApplyAllProperties(object sender, RoutedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public Brush get_Background();
    public void set_Background(Brush value);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    public PropertyMap get_PropertyMap();
}
internal class System.Windows.Forms.Integration.WindowsFormsHostList : WeakReferenceList`1<WindowsFormsHost> {
    [IteratorStateMachineAttribute("System.Windows.Forms.Integration.WindowsFormsHostList/<ActiveWindowList>d__0")]
public IEnumerable`1<WindowsFormsHost> ActiveWindowList();
    private static Visual FindRootVisual(Visual x);
}
internal class System.Windows.Forms.Integration.WindowsFormsHostPropertyMap : PropertyMap {
    private WindowsFormsHost Host { get; }
    private float CurrentFontSize { get; }
    private FontStyle CurrentFontStyle { get; }
    private string CurrentFontFamily { get; }
    public WindowsFormsHostPropertyMap(WindowsFormsHost host);
    private void InitializeDefaultTranslators();
    private void BackgroundPropertyTranslator(object host, string propertyName, object value);
    private void FlowDirectionPropertyTranslator(object host, string propertyName, object value);
    private void FontFamilyPropertyTranslator(object host, string propertyName, object value);
    private void FontStylePropertyTranslator(object host, string propertyName, object value);
    private void FontWeightPropertyTranslator(object host, string propertyName, object value);
    private void FontSizePropertyTranslator(object host, string propertyName, object value);
    private void ForegroundPropertyTranslator(object host, string propertyName, object value);
    private void IsEnabledPropertyTranslator(object host, string propertyName, object value);
    private void PaddingPropertyTranslator(object host, string propertyName, object value);
    private void VisibilityPropertyTranslator(object host, string propertyName, object value);
    private WindowsFormsHost get_Host();
    private Control GetChildControl(object host, PropertyTranslator translator, object value);
    internal static WinFormsAdapter GetAdapter(object host);
    private float get_CurrentFontSize();
    private FontStyle get_CurrentFontStyle();
    private string get_CurrentFontFamily();
    private static Color TranslateSolidOrGradientBrush(Brush brush, Boolean& defined);
}
[DesignerCategoryAttribute("code")]
internal class System.Windows.Forms.Integration.WinFormsAdapter : ContainerControl {
    private WindowsFormsHost _host;
    private FocusTargetControl _focusTarget;
    private IntPtr _prevFocusHwnd;
    private Control _child;
    private RightToLeft _rightToLeft;
    public Control Child { get; public set; }
    public Cursor Cursor { get; public set; }
    internal IKeyboardInputSite HostKeyboardInputSite { get; }
    public RightToLeft RightToLeft { get; public set; }
    public WinFormsAdapter(WindowsFormsHost host);
    public Control get_Child();
    public void set_Child(Control value);
    public void HandleChildActivate();
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    protected virtual void Dispose(bool disposing);
    internal bool FocusNext(TraversalRequest request);
    internal IKeyboardInputSite get_HostKeyboardInputSite();
    protected virtual bool ProcessDialogKey(Keys keyData);
    internal bool PreProcessMessage(Message& msg, bool hasFocus);
    private void WinFormsAdapter_HandleCreated(object sender, EventArgs e);
    internal void UpdateUIState(int uiAction);
    private void InputManager_PostProcessInput(object sender, ProcessInputEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    private void CallOnParentRightToLeftChanged(Control control);
}
internal static class System.Windows.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Host_CannotRotateWindowsFormsHost { get; }
    internal static string Host_ChildCantBeTopLevelForm { get; }
    internal static string WFI_ArgumentNullOrEmpty { get; }
    internal static string WFI_NullArgument { get; }
    internal static string WFI_PropertyDoesntExist { get; }
    internal static string WFI_PropertyMapError { get; }
    internal static string WFI_PropertyMappingExists { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Host_CannotRotateWindowsFormsHost();
    internal static string get_Host_ChildCantBeTopLevelForm();
    internal static string get_WFI_ArgumentNullOrEmpty();
    internal static string get_WFI_NullArgument();
    internal static string get_WFI_PropertyDoesntExist();
    internal static string get_WFI_PropertyMapError();
    internal static string get_WFI_PropertyMappingExists();
}
