public class Microsoft.WSMan.Management.AuthenticatingWSManCommand : PSCmdlet {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbprint { get; public set; }
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public virtual string get_CertificateThumbprint();
    public virtual void set_CertificateThumbprint(string value);
}
public enum Microsoft.WSMan.Management.AuthenticationMechanism : Enum {
    public int value__;
    public static AuthenticationMechanism None;
    public static AuthenticationMechanism Default;
    public static AuthenticationMechanism Digest;
    public static AuthenticationMechanism Negotiate;
    public static AuthenticationMechanism Basic;
    public static AuthenticationMechanism Kerberos;
    public static AuthenticationMechanism ClientCertificate;
    public static AuthenticationMechanism Credssp;
}
[CmdletAttribute("Connect", "WSMan")]
public class Microsoft.WSMan.Management.ConnectWSManCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    protected virtual void BeginProcessing();
}
internal class Microsoft.WSMan.Management.CurrentConfigurations : object {
    public static string DefaultNameSpacePrefix;
    public IWSManSession ServerSession { get; }
    public XmlDocument RootDocument { get; }
    public CurrentConfigurations(IWSManSession serverSession);
    public IWSManSession get_ServerSession();
    public XmlDocument get_RootDocument();
    public bool RefreshCurrentConfiguration(string responseOfGet);
    public void PutConfigurationOnServer(string resourceUri);
    public void RemoveOneConfiguration(string pathToNodeFromRoot);
    public void UpdateOneConfiguration(string pathToNodeFromRoot, string configurationName, string configurationValue);
    public string GetOneConfiguration(string pathFromRoot);
}
[CmdletAttribute("Disable", "WSManCredSSP")]
public class Microsoft.WSMan.Management.DisableWSManCredSSPCommand : WSManCredSSPCommandBase {
    protected virtual void BeginProcessing();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Disconnect", "WSMan")]
public class Microsoft.WSMan.Management.DisconnectWSManCommand : PSCmdlet {
    [ParameterAttribute]
public string ComputerName { get; public set; }
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public sealed virtual void Dispose();
    public void Dispose(object session);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Enable", "WSManCredSSP")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.EnableWSManCredSSPCommand : WSManCredSSPCommandBase {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] DelegateComputer { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_DelegateComputer();
    public void set_DelegateComputer(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Get", "WSManCredSSP")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.GetWSManCredSSPCommand : PSCmdlet {
    protected virtual void BeginProcessing();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Get", "WSManInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.GetWSManInstanceCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[ParameterAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter BasePropertiesOnly { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
public Uri Dialect { get; public set; }
    [ParameterAttribute]
public SwitchParameter Enumerate { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Fragment { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public int Port { get; public set; }
    [ParameterAttribute]
public SwitchParameter Associations { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ReturnType { get; public set; }
    [ParameterAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter Shallow { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter UseSSL { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public SwitchParameter get_BasePropertiesOnly();
    public void set_BasePropertiesOnly(SwitchParameter value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Uri get_Dialect();
    public void set_Dialect(Uri value);
    public SwitchParameter get_Enumerate();
    public void set_Enumerate(SwitchParameter value);
    public string get_Filter();
    public void set_Filter(string value);
    public string get_Fragment();
    public void set_Fragment(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_Associations();
    public void set_Associations(SwitchParameter value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public string get_ReturnType();
    public void set_ReturnType(string value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_Shallow();
    public void set_Shallow(SwitchParameter value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[GuidAttribute("EA502722-A23D-11d1-A7D3-0000F87571E3")]
[ClassInterfaceAttribute("0")]
public class Microsoft.WSMan.Management.GPClass : object {
}
public class Microsoft.WSMan.Management.GpoNativeApi : object {
}
[GuidAttribute("EA502723-A23D-11d1-A7D3-0000F87571E3")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WSMan.Management.IGroupPolicyObject {
    public abstract virtual void New(string pszDomainName, string pszDisplayName, UInt32 dwFlags);
    public abstract virtual void OpenDSGPO(string pszPath, UInt32 dwFlags);
    public abstract virtual void OpenLocalMachineGPO(UInt32 dwFlags);
    public abstract virtual void OpenRemoteMachineGPO(string pszComputerName, UInt32 dwFlags);
    public abstract virtual void Save(bool bMachine, bool bAdd, Guid pGuidExtension, Guid pGuid);
    public abstract virtual void Delete();
    public abstract virtual void GetName(StringBuilder pszName, int cchMaxLength);
    public abstract virtual void GetDisplayName(StringBuilder pszName, int cchMaxLength);
    public abstract virtual void SetDisplayName(string pszName);
    public abstract virtual void GetPath(StringBuilder pszPath, int cchMaxPath);
    public abstract virtual void GetDSPath(UInt32 dwSection, StringBuilder pszPath, int cchMaxPath);
    public abstract virtual void GetFileSysPath(UInt32 dwSection, StringBuilder pszPath, int cchMaxPath);
    public abstract virtual IntPtr GetRegistryKey(UInt32 dwSection);
    public abstract virtual UInt32 GetOptions();
    public abstract virtual void SetOptions(UInt32 dwOptions, UInt32 dwMask);
    public abstract virtual void GetMachineName(StringBuilder pszName, int cchMaxLength);
    public abstract virtual UInt32 GetPropertySheetPages(IntPtr& hPages);
}
[CmdletAttribute("Invoke", "WSManAction")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.InvokeWSManActionCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Action { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable ValueSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ResourceURI { get; public set; }
    public string get_Action();
    public void set_Action(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Hashtable get_ValueSet();
    public void set_ValueSet(Hashtable value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[GuidAttribute("190D8637-5CD3-496D-AD24-69636BB5A3B5")]
[TypeLibTypeAttribute("4304")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSMan {
    public string CommandLine { get; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual object CreateSession(string connection, int flags, object connectionOptions);
    [DispIdAttribute("2")]
public abstract virtual object CreateConnectionOptions();
    [DispIdAttribute("3")]
public abstract virtual string get_CommandLine();
    [DispIdAttribute("4")]
public abstract virtual string get_Error();
}
[GuidAttribute("F704E861-9E52-464F-B786-DA5EB2320FDD")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManConnectionOptions {
    public string UserName { get; public set; }
    unknown string Password {public set; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string get_UserName();
    [DispIdAttribute("1")]
public abstract virtual void set_UserName(string value);
    [DispIdAttribute("2")]
public abstract virtual void set_Password(string value);
}
[GuidAttribute("EF43EDF7-2A48-4d93-9526-8BD6AB6D4A6B")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManConnectionOptionsEx {
    public string CertificateThumbprint { get; public set; }
    [DispIdAttribute("3")]
public abstract virtual string get_CertificateThumbprint();
    [DispIdAttribute("1")]
public abstract virtual void set_CertificateThumbprint(string value);
}
[GuidAttribute("F500C9EC-24EE-48ab-B38D-FC9A164C658E")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManConnectionOptionsEx2 {
    [DispIdAttribute("4")]
public abstract virtual void SetProxy(int accessType, int authenticationMechanism, string userName, string password);
    [DispIdAttribute("5")]
public abstract virtual int ProxyIEConfig();
    [DispIdAttribute("6")]
public abstract virtual int ProxyWinHttpConfig();
    [DispIdAttribute("7")]
public abstract virtual int ProxyAutoDetect();
    [DispIdAttribute("8")]
public abstract virtual int ProxyNoProxyServer();
    [DispIdAttribute("9")]
public abstract virtual int ProxyAuthenticationUseNegotiate();
    [DispIdAttribute("10")]
public abstract virtual int ProxyAuthenticationUseBasic();
    [DispIdAttribute("11")]
public abstract virtual int ProxyAuthenticationUseDigest();
}
[GuidAttribute("F3457CA9-ABB9-4FA5-B850-90E8CA300E7F")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManEnumerator {
    public bool AtEndOfStream { get; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string ReadItem();
    [DispIdAttribute("2")]
public abstract virtual bool get_AtEndOfStream();
    [DispIdAttribute("8")]
public abstract virtual string get_Error();
}
[GuidAttribute("2D53BDAA-798E-49E6-A1AA-74D01256F411")]
[TypeLibTypeAttribute("4304")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManEx {
    public string CommandLine { get; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual object CreateSession(string connection, int flags, object connectionOptions);
    [DispIdAttribute("2")]
public abstract virtual object CreateConnectionOptions();
    [DispIdAttribute("3")]
public abstract virtual string get_CommandLine();
    [DispIdAttribute("4")]
public abstract virtual string get_Error();
    [DispIdAttribute("5")]
public abstract virtual object CreateResourceLocator(string strResourceLocator);
    [DispIdAttribute("6")]
public abstract virtual int SessionFlagUTF8();
    [DispIdAttribute("7")]
public abstract virtual int SessionFlagCredUsernamePassword();
    [DispIdAttribute("8")]
public abstract virtual int SessionFlagSkipCACheck();
    [DispIdAttribute("9")]
public abstract virtual int SessionFlagSkipCNCheck();
    [DispIdAttribute("10")]
public abstract virtual int SessionFlagUseDigest();
    [DispIdAttribute("11")]
public abstract virtual int SessionFlagUseNegotiate();
    [DispIdAttribute("12")]
public abstract virtual int SessionFlagUseBasic();
    [DispIdAttribute("13")]
public abstract virtual int SessionFlagUseKerberos();
    [DispIdAttribute("14")]
public abstract virtual int SessionFlagNoEncryption();
    [DispIdAttribute("15")]
public abstract virtual int SessionFlagEnableSPNServerPort();
    [DispIdAttribute("16")]
public abstract virtual int SessionFlagUseNoAuthentication();
    [DispIdAttribute("17")]
public abstract virtual int EnumerationFlagNonXmlText();
    [DispIdAttribute("18")]
public abstract virtual int EnumerationFlagReturnEPR();
    [DispIdAttribute("19")]
public abstract virtual int EnumerationFlagReturnObjectAndEPR();
    [DispIdAttribute("20")]
public abstract virtual string GetErrorMessage(UInt32 errorNumber);
    [DispIdAttribute("21")]
public abstract virtual int EnumerationFlagHierarchyDeep();
    [DispIdAttribute("22")]
public abstract virtual int EnumerationFlagHierarchyShallow();
    [DispIdAttribute("23")]
public abstract virtual int EnumerationFlagHierarchyDeepBasePropsOnly();
    [DispIdAttribute("24")]
public abstract virtual int EnumerationFlagReturnObject();
    [DispIdAttribute("28")]
public abstract virtual int EnumerationFlagAssociationInstance();
    [DispIdAttribute("29")]
public abstract virtual int EnumerationFlagAssociatedInstance();
}
[GuidAttribute("A7A1BA28-DE41-466A-AD0A-C4059EAD7428")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManResourceLocator {
    public string ResourceUri { get; public set; }
    public string FragmentPath { get; public set; }
    public string FragmentDialect { get; public set; }
    public int MustUnderstandOptions { get; public set; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string get_ResourceUri();
    [DispIdAttribute("1")]
public abstract virtual void set_ResourceUri(string value);
    [DispIdAttribute("2")]
public abstract virtual void AddSelector(string resourceSelName, object selValue);
    [DispIdAttribute("3")]
public abstract virtual void ClearSelectors();
    [DispIdAttribute("4")]
public abstract virtual string get_FragmentPath();
    [DispIdAttribute("4")]
public abstract virtual void set_FragmentPath(string value);
    [DispIdAttribute("5")]
public abstract virtual string get_FragmentDialect();
    [DispIdAttribute("5")]
public abstract virtual void set_FragmentDialect(string value);
    [DispIdAttribute("6")]
public abstract virtual void AddOption(string OptionName, object OptionValue, int mustComply);
    [DispIdAttribute("7")]
public abstract virtual int get_MustUnderstandOptions();
    [DispIdAttribute("7")]
public abstract virtual void set_MustUnderstandOptions(int value);
    [DispIdAttribute("8")]
public abstract virtual void ClearOptions();
    [DispIdAttribute("9")]
public abstract virtual string get_Error();
}
[GuidAttribute("EFFAEAD7-7EC8-4716-B9BE-F2E7E9FB4ADB")]
[TypeLibTypeAttribute("400")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManResourceLocatorInternal {
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
}
[GuidAttribute("FC84FC58-1286-40C4-9DA0-C8EF6EC241E0")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManSession {
    public string Error { get; }
    public int BatchItems { get; public set; }
    public int Timeout { get; public set; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string Get(object resourceUri, int flags);
    [DispIdAttribute("2")]
public abstract virtual string Put(object resourceUri, string resource, int flags);
    [DispIdAttribute("3")]
public abstract virtual string Create(object resourceUri, string resource, int flags);
    [DispIdAttribute("4")]
public abstract virtual void Delete(object resourceUri, int flags);
    [DispIdAttribute("5")]
public abstract virtual string Invoke(string actionURI, object resourceUri, string parameters, int flags);
    [DispIdAttribute("6")]
public abstract virtual object Enumerate(object resourceUri, string filter, string dialect, int flags);
    [DispIdAttribute("7")]
public abstract virtual string Identify(int flags);
    [DispIdAttribute("8")]
public abstract virtual string get_Error();
    [DispIdAttribute("9")]
public abstract virtual int get_BatchItems();
    [DispIdAttribute("9")]
public abstract virtual void set_BatchItems(int value);
    [DispIdAttribute("10")]
public abstract virtual int get_Timeout();
    [DispIdAttribute("10")]
public abstract virtual void set_Timeout(int value);
}
[CmdletAttribute("New", "WSManInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.NewWSManInstanceCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
public Hashtable ValueSet { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Hashtable get_ValueSet();
    public void set_ValueSet(Hashtable value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[CmdletAttribute("New", "WSManSessionOption")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.NewWSManSessionOptionCommand : PSCmdlet {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProxyAccessType ProxyAccessType { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProxyAuthentication ProxyAuthentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential ProxyCredential { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCACheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCNCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipRevocationCheck { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SPNPort { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int OperationTimeout { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoEncryption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseUTF16 { get; public set; }
    public ProxyAccessType get_ProxyAccessType();
    public void set_ProxyAccessType(ProxyAccessType value);
    public ProxyAuthentication get_ProxyAuthentication();
    public void set_ProxyAuthentication(ProxyAuthentication value);
    public PSCredential get_ProxyCredential();
    public void set_ProxyCredential(PSCredential value);
    public SwitchParameter get_SkipCACheck();
    public void set_SkipCACheck(SwitchParameter value);
    public SwitchParameter get_SkipCNCheck();
    public void set_SkipCNCheck(SwitchParameter value);
    public SwitchParameter get_SkipRevocationCheck();
    public void set_SkipRevocationCheck(SwitchParameter value);
    public int get_SPNPort();
    public void set_SPNPort(int value);
    public int get_OperationTimeout();
    public void set_OperationTimeout(int value);
    public SwitchParameter get_NoEncryption();
    public void set_NoEncryption(SwitchParameter value);
    public SwitchParameter get_UseUTF16();
    public void set_UseUTF16(SwitchParameter value);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Remove", "WSManInstance")]
public class Microsoft.WSMan.Management.RemoveWSManInstanceCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter UseSSL { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Set", "WSManInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.SetWSManInstanceCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri Dialect { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Fragment { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable ValueSet { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Uri get_Dialect();
    public void set_Dialect(Uri value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_Fragment();
    public void set_Fragment(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Hashtable get_ValueSet();
    public void set_ValueSet(Hashtable value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[CmdletAttribute("Set", "WSManQuickConfig")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.SetWSManQuickConfigCommand : PSCmdlet {
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipNetworkProfileCheck { get; public set; }
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_SkipNetworkProfileCheck();
    public void set_SkipNetworkProfileCheck(SwitchParameter value);
    protected virtual void BeginProcessing();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Test", "WSMan")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.TestWSManCommand : AuthenticatingWSManCommand {
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[GuidAttribute("BCED617B-EC03-420b-8508-977DC7A686BD")]
[ClassInterfaceAttribute("0")]
public class Microsoft.WSMan.Management.WSManClass : object {
}
public class Microsoft.WSMan.Management.WSManConfigContainerElement : WSManConfigElement {
    public String[] Keys { get; public set; }
    public String[] get_Keys();
    public void set_Keys(String[] value);
}
public class Microsoft.WSMan.Management.WSManConfigElement : object {
    public string Name { get; public set; }
    public string TypeNameOfElement { get; public set; }
    public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_TypeNameOfElement();
    public void set_TypeNameOfElement(string value);
    public string get_Type();
    public void set_Type(string value);
}
public class Microsoft.WSMan.Management.WSManConfigLeafElement : WSManConfigElement {
    public object SourceOfValue { get; public set; }
    public object Value { get; public set; }
    public object get_SourceOfValue();
    public void set_SourceOfValue(object value);
    public object get_Value();
    public void set_Value(object value);
}
[CmdletProviderAttribute]
public class Microsoft.WSMan.Management.WSManConfigProvider : NavigationCmdletProvider {
    private sealed virtual override string System.Management.Automation.Provider.ICmdletProviderSupportsHelp.GetHelpMaml(string helpItemName, string path);
    protected virtual PSDriveInfo NewDrive(PSDriveInfo drive);
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual PSDriveInfo RemoveDrive(PSDriveInfo drive);
    protected virtual string GetChildName(string path);
    protected virtual string MakePath(string parent, string child);
    protected virtual bool IsValidPath(string path);
    protected virtual bool ItemExists(string path);
    protected virtual bool HasChildItems(string path);
    protected virtual void GetItem(string path);
    protected virtual void SetItem(string path, object value);
    protected virtual void ClearItem(string path);
    protected virtual object SetItemDynamicParameters(string path, object value);
    protected virtual void GetChildItems(string path, bool recurse);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual bool IsItemContainer(string path);
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual void NewItem(string path, string itemTypeName, object newItemValue);
    protected virtual object NewItemDynamicParameters(string path, string itemTypeName, object newItemValue);
}
public class Microsoft.WSMan.Management.WSManCredSSPCommandBase : PSCmdlet {
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Role { get; public set; }
    public string get_Role();
    public void set_Role(string value);
}
[TypeLibTypeAttribute("0")]
public enum Microsoft.WSMan.Management.WSManEnumFlags : Enum {
    public int value__;
    public static WSManEnumFlags WSManFlagNonXmlText;
    public static WSManEnumFlags WSManFlagReturnObject;
    public static WSManEnumFlags WSManFlagReturnEPR;
    public static WSManEnumFlags WSManFlagReturnObjectAndEPR;
    public static WSManEnumFlags WSManFlagHierarchyDeep;
    public static WSManEnumFlags WSManFlagHierarchyShallow;
    public static WSManEnumFlags WSManFlagHierarchyDeepBasePropsOnly;
    public static WSManEnumFlags WSManFlagAssociationInstance;
}
internal class Microsoft.WSMan.Management.WSManHelper : object {
}
public class Microsoft.WSMan.Management.WSManProviderClientCertificateParameters : object {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Issuer { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Subject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri URI { get; public set; }
    [ParameterAttribute]
public bool Enabled { get; public set; }
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public Uri get_URI();
    public void set_URI(Uri value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public class Microsoft.WSMan.Management.WSManProviderInitializeParameters : object {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ParamName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ParamValue { get; public set; }
    public string get_ParamName();
    public void set_ParamName(string value);
    public string get_ParamValue();
    public void set_ParamValue(string value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemComputerParameters : object {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public AuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbprint { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public AuthenticationMechanism get_Authentication();
    public void set_Authentication(AuthenticationMechanism value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemPluginParameters : object {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Plugin { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string FileName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string SDKVersion { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri Resource { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Capability { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string XMLRenderingType { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string File { get; public set; }
    [ValidateNotNullAttribute]
[ParameterAttribute]
public PSCredential RunAsCredential { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSharedProcess { get; public set; }
    [ParameterAttribute]
public SwitchParameter AutoRestart { get; public set; }
    [ParameterAttribute]
public Nullable`1<UInt32> ProcessIdleTimeoutSec { get; public set; }
    public string get_Plugin();
    public void set_Plugin(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_SDKVersion();
    public void set_SDKVersion(string value);
    public Uri get_Resource();
    public void set_Resource(Uri value);
    public Object[] get_Capability();
    public void set_Capability(Object[] value);
    public string get_XMLRenderingType();
    public void set_XMLRenderingType(string value);
    public string get_File();
    public void set_File(string value);
    public PSCredential get_RunAsCredential();
    public void set_RunAsCredential(PSCredential value);
    public SwitchParameter get_UseSharedProcess();
    public void set_UseSharedProcess(SwitchParameter value);
    public SwitchParameter get_AutoRestart();
    public void set_AutoRestart(SwitchParameter value);
    public Nullable`1<UInt32> get_ProcessIdleTimeoutSec();
    public void set_ProcessIdleTimeoutSec(Nullable`1<UInt32> value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemResourceParameters : object {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ResourceUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Capability { get; public set; }
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public Object[] get_Capability();
    public void set_Capability(Object[] value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemSecurityParameters : object {
    [ParameterAttribute]
public string Sddl { get; public set; }
    public string get_Sddl();
    public void set_Sddl(string value);
}
public class Microsoft.WSMan.Management.WSManProviderSetItemDynamicParameters : object {
    [ParameterAttribute]
public SwitchParameter Concatenate { get; public set; }
    public SwitchParameter get_Concatenate();
    public void set_Concatenate(SwitchParameter value);
}
public class Microsoft.WSMan.Management.WSManProvidersListenerParameters : object {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Address { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Transport { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string HostName { get; public set; }
    [ParameterAttribute]
public bool Enabled { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string URLPrefix { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbPrint { get; public set; }
    public bool IsPortSpecified { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public string get_Transport();
    public void set_Transport(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_HostName();
    public void set_HostName(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_URLPrefix();
    public void set_URLPrefix(string value);
    public string get_CertificateThumbPrint();
    public void set_CertificateThumbPrint(string value);
    public bool get_IsPortSpecified();
    public void set_IsPortSpecified(bool value);
}
internal static class Microsoft.WSMan.Management.WSManResourceLoader : object {
}
[TypeLibTypeAttribute("0")]
public enum Microsoft.WSMan.Management.WSManSessionFlags : Enum {
    public int value__;
    public static WSManSessionFlags WSManNone;
    public static WSManSessionFlags WSManFlagUtf8;
    public static WSManSessionFlags WSManFlagCredUserNamePassword;
    public static WSManSessionFlags WSManFlagSkipCACheck;
    public static WSManSessionFlags WSManFlagSkipCNCheck;
    public static WSManSessionFlags WSManFlagUseNoAuthentication;
    public static WSManSessionFlags WSManFlagUseDigest;
    public static WSManSessionFlags WSManFlagUseNegotiate;
    public static WSManSessionFlags WSManFlagUseBasic;
    public static WSManSessionFlags WSManFlagUseKerberos;
    public static WSManSessionFlags WSManFlagNoEncryption;
    public static WSManSessionFlags WSManFlagEnableSpnServerPort;
    public static WSManSessionFlags WSManFlagUtf16;
    public static WSManSessionFlags WSManFlagUseCredSsp;
    public static WSManSessionFlags WSManFlagUseClientCertificate;
    public static WSManSessionFlags WSManFlagSkipRevocationCheck;
    public static WSManSessionFlags WSManFlagAllowNegotiateImplicitCredentials;
    public static WSManSessionFlags WSManFlagUseSsl;
}
internal static class Microsoft.WSMan.Management.WSManStringLiterals : object {
    public static string StartWinrmServiceSBFormat;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class WsManResources : object {
}
