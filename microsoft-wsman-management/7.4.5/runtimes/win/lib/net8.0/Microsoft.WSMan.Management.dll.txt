public class Microsoft.WSMan.Management.AuthenticatingWSManCommand : PSCmdlet {
    private PSCredential credential;
    private AuthenticationMechanism authentication;
    private string thumbPrint;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbprint { get; public set; }
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public virtual string get_CertificateThumbprint();
    public virtual void set_CertificateThumbprint(string value);
    internal void ValidateSpecifiedAuthentication();
}
public enum Microsoft.WSMan.Management.AuthenticationMechanism : Enum {
    public int value__;
    public static AuthenticationMechanism None;
    public static AuthenticationMechanism Default;
    public static AuthenticationMechanism Digest;
    public static AuthenticationMechanism Negotiate;
    public static AuthenticationMechanism Basic;
    public static AuthenticationMechanism Kerberos;
    public static AuthenticationMechanism ClientCertificate;
    public static AuthenticationMechanism Credssp;
}
[CmdletAttribute("Connect", "WSMan")]
public class Microsoft.WSMan.Management.ConnectWSManCommand : AuthenticatingWSManCommand {
    private string applicationname;
    private string computername;
    private Uri connectionuri;
    private Hashtable optionset;
    private int port;
    private SessionOption sessionoption;
    private SwitchParameter usessl;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    protected virtual void BeginProcessing();
}
internal class Microsoft.WSMan.Management.CurrentConfigurations : object {
    public static string DefaultNameSpacePrefix;
    private XmlDocument rootDocument;
    private XmlElement documentElement;
    private XmlNamespaceManager nameSpaceManger;
    private IWSManSession serverSession;
    public IWSManSession ServerSession { get; }
    public XmlDocument RootDocument { get; }
    public CurrentConfigurations(IWSManSession serverSession);
    public IWSManSession get_ServerSession();
    public XmlDocument get_RootDocument();
    public bool RefreshCurrentConfiguration(string responseOfGet);
    public void PutConfigurationOnServer(string resourceUri);
    public void RemoveOneConfiguration(string pathToNodeFromRoot);
    public void UpdateOneConfiguration(string pathToNodeFromRoot, string configurationName, string configurationValue);
    public string GetOneConfiguration(string pathFromRoot);
    private static void RemoveAttribute(XmlAttribute attributeToRemove);
}
[CmdletAttribute("Disable", "WSManCredSSP")]
public class Microsoft.WSMan.Management.DisableWSManCredSSPCommand : WSManCredSSPCommandBase {
    private static string applicationname;
    private void DisableClientSideSettings();
    private void DisableServerSideSettings();
    private void DeleteUserDelegateSettings();
    private void DeleteDelegateSettings(string applicationname, RegistryKey rootKey, string Registry_Path, IGroupPolicyObject GPO);
    protected virtual void BeginProcessing();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Disconnect", "WSMan")]
public class Microsoft.WSMan.Management.DisconnectWSManCommand : PSCmdlet {
    private string computername;
    [ParameterAttribute]
public string ComputerName { get; public set; }
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public sealed virtual void Dispose();
    public void Dispose(object session);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Enable", "WSManCredSSP")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.EnableWSManCredSSPCommand : WSManCredSSPCommandBase {
    private String[] delegatecomputer;
    private bool force;
    private WSManHelper helper;
    private static string applicationname;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] DelegateComputer { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_DelegateComputer();
    public void set_DelegateComputer(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    private void EnableClientSideSettings();
    private void EnableServerSideSettings();
    private void UpdateCurrentUserRegistrySettings();
    private void UpdateGPORegistrySettings(string applicationname, String[] delegatestring, RegistryKey rootKey, string Registry_Path);
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Get", "WSManCredSSP")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.GetWSManCredSSPCommand : PSCmdlet {
    private WSManHelper helper;
    private string GetDelegateSettings(string applicationname);
    protected virtual void BeginProcessing();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Get", "WSManInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.GetWSManInstanceCommand : AuthenticatingWSManCommand {
    private string applicationname;
    private SwitchParameter basepropertiesonly;
    private string computername;
    private Uri connectionuri;
    private Uri dialect;
    private SwitchParameter enumerate;
    private string filter;
    private string fragment;
    private Hashtable optionset;
    private int port;
    private SwitchParameter associations;
    private Uri resourceuri;
    private string returntype;
    private Hashtable selectorset;
    private SessionOption sessionoption;
    private SwitchParameter shallow;
    private SwitchParameter usessl;
    private WSManHelper helper;
    [ParameterAttribute]
[ParameterAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter BasePropertiesOnly { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
public Uri Dialect { get; public set; }
    [ParameterAttribute]
public SwitchParameter Enumerate { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Fragment { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public int Port { get; public set; }
    [ParameterAttribute]
public SwitchParameter Associations { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ReturnType { get; public set; }
    [ParameterAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter Shallow { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter UseSSL { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public SwitchParameter get_BasePropertiesOnly();
    public void set_BasePropertiesOnly(SwitchParameter value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Uri get_Dialect();
    public void set_Dialect(Uri value);
    public SwitchParameter get_Enumerate();
    public void set_Enumerate(SwitchParameter value);
    public string get_Filter();
    public void set_Filter(string value);
    public string get_Fragment();
    public void set_Fragment(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_Associations();
    public void set_Associations(SwitchParameter value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public string get_ReturnType();
    public void set_ReturnType(string value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_Shallow();
    public void set_Shallow(SwitchParameter value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    private string GetFilter();
    private void ReturnEnumeration(IWSManEx wsmanObject, IWSManResourceLocator wsmanResourceLocator, IWSManSession wsmanSession);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[GuidAttribute("EA502722-A23D-11d1-A7D3-0000F87571E3")]
[ClassInterfaceAttribute("0")]
public class Microsoft.WSMan.Management.GPClass : object {
}
public class Microsoft.WSMan.Management.GpoNativeApi : object {
    internal static IntPtr EnterCriticalPolicySection(bool bMachine);
    internal static bool LeaveCriticalPolicySection(IntPtr hSection);
}
[GuidAttribute("EA502723-A23D-11d1-A7D3-0000F87571E3")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WSMan.Management.IGroupPolicyObject {
    public abstract virtual void New(string pszDomainName, string pszDisplayName, UInt32 dwFlags);
    public abstract virtual void OpenDSGPO(string pszPath, UInt32 dwFlags);
    public abstract virtual void OpenLocalMachineGPO(UInt32 dwFlags);
    public abstract virtual void OpenRemoteMachineGPO(string pszComputerName, UInt32 dwFlags);
    public abstract virtual void Save(bool bMachine, bool bAdd, Guid pGuidExtension, Guid pGuid);
    public abstract virtual void Delete();
    public abstract virtual void GetName(StringBuilder pszName, int cchMaxLength);
    public abstract virtual void GetDisplayName(StringBuilder pszName, int cchMaxLength);
    public abstract virtual void SetDisplayName(string pszName);
    public abstract virtual void GetPath(StringBuilder pszPath, int cchMaxPath);
    public abstract virtual void GetDSPath(UInt32 dwSection, StringBuilder pszPath, int cchMaxPath);
    public abstract virtual void GetFileSysPath(UInt32 dwSection, StringBuilder pszPath, int cchMaxPath);
    public abstract virtual IntPtr GetRegistryKey(UInt32 dwSection);
    public abstract virtual UInt32 GetOptions();
    public abstract virtual void SetOptions(UInt32 dwOptions, UInt32 dwMask);
    public abstract virtual void GetMachineName(StringBuilder pszName, int cchMaxLength);
    public abstract virtual UInt32 GetPropertySheetPages(IntPtr& hPages);
}
[CmdletAttribute("Invoke", "WSManAction")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.InvokeWSManActionCommand : AuthenticatingWSManCommand {
    private string action;
    private string applicationname;
    private string computername;
    private Uri connectionuri;
    private string filepath;
    private Hashtable optionset;
    private int port;
    private Hashtable selectorset;
    private SessionOption sessionoption;
    private SwitchParameter usessl;
    private Hashtable valueset;
    private Uri resourceuri;
    private WSManHelper helper;
    private IWSManEx m_wsmanObject;
    private IWSManSession m_session;
    private string connectionStr;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Action { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable ValueSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ResourceURI { get; public set; }
    public string get_Action();
    public void set_Action(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Hashtable get_ValueSet();
    public void set_ValueSet(Hashtable value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[GuidAttribute("190D8637-5CD3-496D-AD24-69636BB5A3B5")]
[TypeLibTypeAttribute("4304")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSMan {
    public string CommandLine { get; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual object CreateSession(string connection, int flags, object connectionOptions);
    [DispIdAttribute("2")]
public abstract virtual object CreateConnectionOptions();
    [DispIdAttribute("3")]
public abstract virtual string get_CommandLine();
    [DispIdAttribute("4")]
public abstract virtual string get_Error();
}
[GuidAttribute("F704E861-9E52-464F-B786-DA5EB2320FDD")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManConnectionOptions {
    public string UserName { get; public set; }
    unknown string Password {public set; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string get_UserName();
    [DispIdAttribute("1")]
public abstract virtual void set_UserName(string value);
    [DispIdAttribute("2")]
public abstract virtual void set_Password(string value);
}
[GuidAttribute("EF43EDF7-2A48-4d93-9526-8BD6AB6D4A6B")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManConnectionOptionsEx {
    public string CertificateThumbprint { get; public set; }
    [DispIdAttribute("3")]
public abstract virtual string get_CertificateThumbprint();
    [DispIdAttribute("1")]
public abstract virtual void set_CertificateThumbprint(string value);
}
[GuidAttribute("F500C9EC-24EE-48ab-B38D-FC9A164C658E")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManConnectionOptionsEx2 {
    [DispIdAttribute("4")]
public abstract virtual void SetProxy(int accessType, int authenticationMechanism, string userName, string password);
    [DispIdAttribute("5")]
public abstract virtual int ProxyIEConfig();
    [DispIdAttribute("6")]
public abstract virtual int ProxyWinHttpConfig();
    [DispIdAttribute("7")]
public abstract virtual int ProxyAutoDetect();
    [DispIdAttribute("8")]
public abstract virtual int ProxyNoProxyServer();
    [DispIdAttribute("9")]
public abstract virtual int ProxyAuthenticationUseNegotiate();
    [DispIdAttribute("10")]
public abstract virtual int ProxyAuthenticationUseBasic();
    [DispIdAttribute("11")]
public abstract virtual int ProxyAuthenticationUseDigest();
}
[GuidAttribute("F3457CA9-ABB9-4FA5-B850-90E8CA300E7F")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManEnumerator {
    public bool AtEndOfStream { get; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string ReadItem();
    [DispIdAttribute("2")]
public abstract virtual bool get_AtEndOfStream();
    [DispIdAttribute("8")]
public abstract virtual string get_Error();
}
[GuidAttribute("2D53BDAA-798E-49E6-A1AA-74D01256F411")]
[TypeLibTypeAttribute("4304")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManEx {
    public string CommandLine { get; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual object CreateSession(string connection, int flags, object connectionOptions);
    [DispIdAttribute("2")]
public abstract virtual object CreateConnectionOptions();
    [DispIdAttribute("3")]
public abstract virtual string get_CommandLine();
    [DispIdAttribute("4")]
public abstract virtual string get_Error();
    [DispIdAttribute("5")]
public abstract virtual object CreateResourceLocator(string strResourceLocator);
    [DispIdAttribute("6")]
public abstract virtual int SessionFlagUTF8();
    [DispIdAttribute("7")]
public abstract virtual int SessionFlagCredUsernamePassword();
    [DispIdAttribute("8")]
public abstract virtual int SessionFlagSkipCACheck();
    [DispIdAttribute("9")]
public abstract virtual int SessionFlagSkipCNCheck();
    [DispIdAttribute("10")]
public abstract virtual int SessionFlagUseDigest();
    [DispIdAttribute("11")]
public abstract virtual int SessionFlagUseNegotiate();
    [DispIdAttribute("12")]
public abstract virtual int SessionFlagUseBasic();
    [DispIdAttribute("13")]
public abstract virtual int SessionFlagUseKerberos();
    [DispIdAttribute("14")]
public abstract virtual int SessionFlagNoEncryption();
    [DispIdAttribute("15")]
public abstract virtual int SessionFlagEnableSPNServerPort();
    [DispIdAttribute("16")]
public abstract virtual int SessionFlagUseNoAuthentication();
    [DispIdAttribute("17")]
public abstract virtual int EnumerationFlagNonXmlText();
    [DispIdAttribute("18")]
public abstract virtual int EnumerationFlagReturnEPR();
    [DispIdAttribute("19")]
public abstract virtual int EnumerationFlagReturnObjectAndEPR();
    [DispIdAttribute("20")]
public abstract virtual string GetErrorMessage(UInt32 errorNumber);
    [DispIdAttribute("21")]
public abstract virtual int EnumerationFlagHierarchyDeep();
    [DispIdAttribute("22")]
public abstract virtual int EnumerationFlagHierarchyShallow();
    [DispIdAttribute("23")]
public abstract virtual int EnumerationFlagHierarchyDeepBasePropsOnly();
    [DispIdAttribute("24")]
public abstract virtual int EnumerationFlagReturnObject();
    [DispIdAttribute("28")]
public abstract virtual int EnumerationFlagAssociationInstance();
    [DispIdAttribute("29")]
public abstract virtual int EnumerationFlagAssociatedInstance();
}
[GuidAttribute("A7A1BA28-DE41-466A-AD0A-C4059EAD7428")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManResourceLocator {
    public string ResourceUri { get; public set; }
    public string FragmentPath { get; public set; }
    public string FragmentDialect { get; public set; }
    public int MustUnderstandOptions { get; public set; }
    public string Error { get; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string get_ResourceUri();
    [DispIdAttribute("1")]
public abstract virtual void set_ResourceUri(string value);
    [DispIdAttribute("2")]
public abstract virtual void AddSelector(string resourceSelName, object selValue);
    [DispIdAttribute("3")]
public abstract virtual void ClearSelectors();
    [DispIdAttribute("4")]
public abstract virtual string get_FragmentPath();
    [DispIdAttribute("4")]
public abstract virtual void set_FragmentPath(string value);
    [DispIdAttribute("5")]
public abstract virtual string get_FragmentDialect();
    [DispIdAttribute("5")]
public abstract virtual void set_FragmentDialect(string value);
    [DispIdAttribute("6")]
public abstract virtual void AddOption(string OptionName, object OptionValue, int mustComply);
    [DispIdAttribute("7")]
public abstract virtual int get_MustUnderstandOptions();
    [DispIdAttribute("7")]
public abstract virtual void set_MustUnderstandOptions(int value);
    [DispIdAttribute("8")]
public abstract virtual void ClearOptions();
    [DispIdAttribute("9")]
public abstract virtual string get_Error();
}
[GuidAttribute("EFFAEAD7-7EC8-4716-B9BE-F2E7E9FB4ADB")]
[TypeLibTypeAttribute("400")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManResourceLocatorInternal {
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
}
[GuidAttribute("FC84FC58-1286-40C4-9DA0-C8EF6EC241E0")]
[TypeLibTypeAttribute("4288")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.WSMan.Management.IWSManSession {
    public string Error { get; }
    public int BatchItems { get; public set; }
    public int Timeout { get; public set; }
    public abstract virtual object GetTypeInfoCount();
    public abstract virtual object GetTypeInfo();
    public abstract virtual object GetIDsOfNames();
    public abstract virtual object Invoke();
    [DispIdAttribute("1")]
public abstract virtual string Get(object resourceUri, int flags);
    [DispIdAttribute("2")]
public abstract virtual string Put(object resourceUri, string resource, int flags);
    [DispIdAttribute("3")]
public abstract virtual string Create(object resourceUri, string resource, int flags);
    [DispIdAttribute("4")]
public abstract virtual void Delete(object resourceUri, int flags);
    [DispIdAttribute("5")]
public abstract virtual string Invoke(string actionURI, object resourceUri, string parameters, int flags);
    [DispIdAttribute("6")]
public abstract virtual object Enumerate(object resourceUri, string filter, string dialect, int flags);
    [DispIdAttribute("7")]
public abstract virtual string Identify(int flags);
    [DispIdAttribute("8")]
public abstract virtual string get_Error();
    [DispIdAttribute("9")]
public abstract virtual int get_BatchItems();
    [DispIdAttribute("9")]
public abstract virtual void set_BatchItems(int value);
    [DispIdAttribute("10")]
public abstract virtual int get_Timeout();
    [DispIdAttribute("10")]
public abstract virtual void set_Timeout(int value);
}
[CmdletAttribute("New", "WSManInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.NewWSManInstanceCommand : AuthenticatingWSManCommand {
    private string applicationname;
    private string computername;
    private Uri connectionuri;
    private string filepath;
    private Hashtable optionset;
    private int port;
    private Uri resourceuri;
    private Hashtable selectorset;
    private SessionOption sessionoption;
    private SwitchParameter usessl;
    private Hashtable valueset;
    private WSManHelper helper;
    private IWSManEx m_wsmanObject;
    private IWSManSession m_session;
    private string connectionStr;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
public Hashtable ValueSet { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Hashtable get_ValueSet();
    public void set_ValueSet(Hashtable value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[CmdletAttribute("New", "WSManSessionOption")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.NewWSManSessionOptionCommand : PSCmdlet {
    private ProxyAccessType _proxyaccesstype;
    private ProxyAuthentication proxyauthentication;
    private PSCredential _proxycredential;
    private bool skipcacheck;
    private bool skipcncheck;
    private bool skiprevocationcheck;
    private int spnport;
    private int operationtimeout;
    private bool noencryption;
    private bool useutf16;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProxyAccessType ProxyAccessType { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProxyAuthentication ProxyAuthentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential ProxyCredential { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCACheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCNCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipRevocationCheck { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SPNPort { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int OperationTimeout { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoEncryption { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseUTF16 { get; public set; }
    public ProxyAccessType get_ProxyAccessType();
    public void set_ProxyAccessType(ProxyAccessType value);
    public ProxyAuthentication get_ProxyAuthentication();
    public void set_ProxyAuthentication(ProxyAuthentication value);
    public PSCredential get_ProxyCredential();
    public void set_ProxyCredential(PSCredential value);
    public SwitchParameter get_SkipCACheck();
    public void set_SkipCACheck(SwitchParameter value);
    public SwitchParameter get_SkipCNCheck();
    public void set_SkipCNCheck(SwitchParameter value);
    public SwitchParameter get_SkipRevocationCheck();
    public void set_SkipRevocationCheck(SwitchParameter value);
    public int get_SPNPort();
    public void set_SPNPort(int value);
    public int get_OperationTimeout();
    public void set_OperationTimeout(int value);
    public SwitchParameter get_NoEncryption();
    public void set_NoEncryption(SwitchParameter value);
    public SwitchParameter get_UseUTF16();
    public void set_UseUTF16(SwitchParameter value);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Remove", "WSManInstance")]
public class Microsoft.WSMan.Management.RemoveWSManInstanceCommand : AuthenticatingWSManCommand {
    private string applicationname;
    private string computername;
    private Uri connectionuri;
    private Hashtable optionset;
    private int port;
    private Uri resourceuri;
    private Hashtable selectorset;
    private SessionOption sessionoption;
    private SwitchParameter usessl;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter UseSSL { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Set", "WSManInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.SetWSManInstanceCommand : AuthenticatingWSManCommand {
    private string applicationname;
    private string computername;
    private Uri connectionuri;
    private Uri dialect;
    private string filepath;
    private string fragment;
    private Hashtable optionset;
    private int port;
    private Uri resourceuri;
    private Hashtable selectorset;
    private SessionOption sessionoption;
    private SwitchParameter usessl;
    private Hashtable valueset;
    private WSManHelper helper;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri Dialect { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string FilePath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Fragment { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public Uri ResourceURI { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable SelectorSet { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Hashtable ValueSet { get; public set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
    public Uri get_Dialect();
    public void set_Dialect(Uri value);
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_Fragment();
    public void set_Fragment(string value);
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public int get_Port();
    public void set_Port(int value);
    public Uri get_ResourceURI();
    public void set_ResourceURI(Uri value);
    public Hashtable get_SelectorSet();
    public void set_SelectorSet(Hashtable value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Hashtable get_ValueSet();
    public void set_ValueSet(Hashtable value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
    protected virtual void EndProcessing();
}
[CmdletAttribute("Set", "WSManQuickConfig")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.SetWSManQuickConfigCommand : PSCmdlet {
    private SwitchParameter usessl;
    private WSManHelper helper;
    private bool force;
    private bool skipNetworkProfileCheck;
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipNetworkProfileCheck { get; public set; }
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_SkipNetworkProfileCheck();
    public void set_SkipNetworkProfileCheck(SwitchParameter value);
    protected virtual void BeginProcessing();
    private void QuickConfigRemoting(bool serviceonly);
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[CmdletAttribute("Test", "WSMan")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.WSMan.Management.TestWSManCommand : AuthenticatingWSManCommand {
    private string computername;
    private AuthenticationMechanism authentication;
    private int port;
    private SwitchParameter usessl;
    private string applicationname;
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    protected virtual void ProcessRecord();
    public sealed virtual void Dispose();
    public void Dispose(IWSManSession sessionObject);
}
[GuidAttribute("BCED617B-EC03-420b-8508-977DC7A686BD")]
[ClassInterfaceAttribute("0")]
public class Microsoft.WSMan.Management.WSManClass : object {
}
public class Microsoft.WSMan.Management.WSManConfigContainerElement : WSManConfigElement {
    private String[] _keys;
    public String[] Keys { get; public set; }
    internal WSManConfigContainerElement(string Name, string TypeNameOfElement, String[] keys);
    public String[] get_Keys();
    public void set_Keys(String[] value);
}
public class Microsoft.WSMan.Management.WSManConfigElement : object {
    private string _name;
    private string _typenameofelement;
    public string Name { get; public set; }
    public string TypeNameOfElement { get; public set; }
    public string Type { get; public set; }
    internal WSManConfigElement(string name, string typenameofelement);
    public string get_Name();
    public void set_Name(string value);
    public string get_TypeNameOfElement();
    public void set_TypeNameOfElement(string value);
    public string get_Type();
    public void set_Type(string value);
}
public class Microsoft.WSMan.Management.WSManConfigLeafElement : WSManConfigElement {
    private object _SourceOfValue;
    private object _value;
    public object SourceOfValue { get; public set; }
    public object Value { get; public set; }
    internal WSManConfigLeafElement(string Name, object Value, string TypeNameOfElement, object SourceOfValue);
    public object get_SourceOfValue();
    public void set_SourceOfValue(object value);
    public object get_Value();
    public void set_Value(object value);
}
[CmdletProviderAttribute]
public class Microsoft.WSMan.Management.WSManConfigProvider : NavigationCmdletProvider {
    private PSObject objPluginNames;
    private ServiceController winrmServiceController;
    private bool clearItemIsCalled;
    private WSManHelper helper;
    private Dictionary`2<string, XmlDocument> enumerateMapping;
    private Dictionary`2<string, string> getMapping;
    private static String[] WinrmRootName;
    private static String[] WinRmRootConfigs;
    private static String[] PKeyListener;
    private static String[] PKeyPlugin;
    private static String[] PKeyCertMapping;
    private static List`1<string> ppqWarningConfigurations;
    private static List`1<string> globalWarningConfigurations;
    private static List`1<string> globalWarningUris;
    private static WSManConfigProvider();
    private sealed virtual override string System.Management.Automation.Provider.ICmdletProviderSupportsHelp.GetHelpMaml(string helpItemName, string path);
    protected virtual PSDriveInfo NewDrive(PSDriveInfo drive);
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual PSDriveInfo RemoveDrive(PSDriveInfo drive);
    protected virtual string GetChildName(string path);
    protected virtual string MakePath(string parent, string child);
    protected virtual bool IsValidPath(string path);
    protected virtual bool ItemExists(string path);
    protected virtual bool HasChildItems(string path);
    protected virtual void GetItem(string path);
    protected virtual void SetItem(string path, object value);
    protected virtual void ClearItem(string path);
    protected virtual object SetItemDynamicParameters(string path, object value);
    protected virtual void GetChildItems(string path, bool recurse);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual bool IsItemContainer(string path);
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual void NewItem(string path, string itemTypeName, object newItemValue);
    protected virtual object NewItemDynamicParameters(string path, string itemTypeName, object newItemValue);
    private void NewItemCreateComputerConnection(string Name);
    private void NewItemContainerListenerOrCertMapping(object sessionobj, string path, string uri, string host, Hashtable InputParams, string ContainerListenerOrCertMapping, string ShouldContinueQuery, string ShouldContinueCaption);
    private void NewItemPluginOrPluginChild(object sessionobj, string path, string host, string uri);
    private static PSObject GetItemPSObjectWithTypeName(string Name, string TypeNameOfElement, object Value, String[] keys, string ExtendedTypeName, WsManElementObjectTypes WSManElementObjectType, PSObject input);
    private void SetItemListenerOrClientCertificate(object sessionObj, string ResourceURI, String[] PrimaryKeys, string childName, object value, string path, string parent, string host);
    private static string GetInputStringForCreate(string ResourceURI, Hashtable value, string host);
    private string ReadFile(string path);
    private string GetHostName(string path);
    private static string GetRootNodeName(string ResourceURI);
    private static string EscapeValuesForXML(string value);
    private static bool IsItemContainer(XmlNodeList nodes);
    private XmlNodeList SearchXml(XmlDocument resourcexmldocument, string searchitem, string ResourceURI, string path, string host);
    private void PutResourceValue(object sessionobj, string ResourceURI, Hashtable value, string host);
    private string GetResourceValueInXml(object sessionobj, string ResourceURI, Hashtable cmdlinevalues);
    private XmlDocument GetResourceValue(object sessionobj, string ResourceURI, Hashtable cmdlinevalues);
    private XmlDocument EnumerateResourceValue(object sessionobj, string ResourceURI);
    private void DeleteResourceValue(object sessionobj, string ResourceURI, Hashtable cmdlinevalues, bool recurse);
    private void CreateResourceValue(object sessionobj, string ResourceURI, string resource, Hashtable cmdlinevalues);
    private XmlDocument FindResourceValue(object sessionobj, string ResourceURI, Hashtable cmdlinevalues);
    private bool ContainResourceValue(object sessionobj, string ResourceURI, string childname, string path, string host);
    private static string GetURIWithFilter(string uri, Hashtable cmdlinevalues);
    private static string GetFilterString(Hashtable cmdlinevalues, String[] pkey);
    private static bool IsPKey(string value, string ResourceURI);
    private static bool CheckPkeysArray(Hashtable values, string value, String[] pkeys);
    private void WritePSObjectPropertyNames(PSObject psobject, string path);
    private void WritePSObjectPropertiesAsWSManElementObjects(PSObject psobject, string path, String[] keys, string ExtendedTypeName, WsManElementObjectTypes WSManElementObjectType, bool recurse);
    private string SplitAndUpdateStringUsingDelimiter(object sessionobj, string uri, string childname, string value, string Delimiter);
    private PSObject BuildHostLevelPSObjectArrayList(object objSessionObject, string uri, bool IsWsManLevel);
    private static PSObject ConvertToPSObject(XmlNode xmlnode);
    private static string SetXPathString(string uri);
    private static string SetSchemaPath(string uri);
    private static string NormalizePath(string path, string host);
    private PSObject GetItemValue(string path);
    private string GetCorrectCaseOfPath(string path);
    private string GetCorrectCaseOfName(string ChildName, string hostname, string path);
    private static ArrayList RemoveItemfromResourceArray(ArrayList resourceArray, string ChildName, string type, string property);
    private void GetChildItemOrNamesForListenerOrCertMapping(XmlDocument xmlResource, string ListenerOrCerMapping, string path, string host, ProviderMethods methodname, bool recurse);
    private void GetItemListenerOrCertMapping(string path, XmlDocument xmlResource, string ContainerListenerOrClientCert, string childname, string host);
    private void RemoveListenerOrCertMapping(object sessionobj, string WsManUri, string childname, String[] primarykeys, bool IsListener);
    private bool CheckValidContainerOrPath(string path);
    private bool ItemExistListenerOrClientCertificate(object sessionobj, string ResourceURI, string path, string parentListenerOrCert, string host);
    private void GetChildItemsRecurse(string path, string childname, ProviderMethods methodname, bool recurse);
    private void GetChildItemsOrNames(string path, ProviderMethods methodname, bool recurse);
    private static int GetPluginNames(XmlDocument xmlPlugins, PSObject& PluginNames, String& CurrentPluginName, string path);
    private void AssertError(string ErrorMessage, bool IsWSManError);
    private bool IsWSManServiceRunning();
    private void StartWSManService(bool force);
    private static bool IsPathLocalMachine(string host);
    private static void GenerateObjectNameAndKeys(Hashtable InputAttributes, string ResourceURI, string ContainerItem, String& ItemName, String[]& keys);
    private static void ProcessCertMappingObjects(XmlDocument xmlCerts, Hashtable& Certcache, Hashtable& Keyscache);
    private static void ProcessListenerObjects(XmlDocument xmlListeners, Hashtable& listenercache, Hashtable& Keyscache);
    private static PSObject ProcessPluginConfigurationLevel(XmlDocument xmldoc, bool setRunasPasswordAsSecureString);
    private static ArrayList ProcessPluginResourceLevel(XmlDocument xmldoc, ArrayList& arrSecurity);
    private static ArrayList ProcessPluginInitParamLevel(XmlDocument xmldoc);
    private static ArrayList ProcessPluginSecurityLevel(ArrayList arrSecurity, XmlDocument xmlSecurity, string UniqueResourceID, string ParentResourceUri);
    private static string ConstructPluginXml(PSObject objinputparam, string ResourceURI, string host, string Operation, ArrayList resources, ArrayList securities, ArrayList initParams);
    private object ValidateAndGetUserObject(string configurationName, object value);
    private static string GetStringFromSecureString(object propertyValue);
    private static string ConstructResourceXml(PSObject objinputparams, ArrayList resources, ArrayList securities);
    private static string ConstructSecurityXml(PSObject objinputparams, ArrayList securities, string strResourceIdentity);
    private static void AddSecurityProperties(PSMemberInfoCollection`1<PSPropertyInfo> properties, StringBuilder sbValues);
    private static string ConstructInitParamsXml(PSObject objinputparams, ArrayList initparams);
    private static string ConstructCapabilityXml(Object[] capabilities);
    private static bool IsValueOfParamList(string name, String[] paramcontainer);
}
public class Microsoft.WSMan.Management.WSManCredSSPCommandBase : PSCmdlet {
    internal static string Server;
    internal static string Client;
    private string role;
    [ParameterAttribute]
[ValidateSetAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Role { get; public set; }
    public string get_Role();
    public void set_Role(string value);
    internal IWSManSession CreateWSManSession();
}
[TypeLibTypeAttribute("0")]
public enum Microsoft.WSMan.Management.WSManEnumFlags : Enum {
    public int value__;
    public static WSManEnumFlags WSManFlagNonXmlText;
    public static WSManEnumFlags WSManFlagReturnObject;
    public static WSManEnumFlags WSManFlagReturnEPR;
    public static WSManEnumFlags WSManFlagReturnObjectAndEPR;
    public static WSManEnumFlags WSManFlagHierarchyDeep;
    public static WSManEnumFlags WSManFlagHierarchyShallow;
    public static WSManEnumFlags WSManFlagHierarchyDeepBasePropsOnly;
    public static WSManEnumFlags WSManFlagAssociationInstance;
}
internal class Microsoft.WSMan.Management.WSManHelper : object {
    private static string PTRN_URI_LAST;
    private static string PTRN_OPT;
    private static string PTRN_HASH_TOK;
    private static string URI_IPMI;
    private static string URI_WMI;
    private static string NS_IPMI;
    private static string NS_CIMBASE;
    private static string NS_WSMANL;
    private static string NS_XSI;
    private static string ATTR_NIL;
    private static string ATTR_NIL_NAME;
    private static string NS_XSI_URI;
    private static string ALIAS_XPATH;
    private static string URI_XPATH_DIALECT;
    internal string CredSSP_RUri;
    internal string CredSSP_XMLNmsp;
    internal string CredSSP_SNode;
    internal string Client_uri;
    internal string urlprefix_node;
    internal string Client_XMLNmsp;
    internal string Service_Uri;
    internal string Service_UrlPrefix_Node;
    internal string Service_XMLNmsp;
    internal string Service_CredSSP_Uri;
    internal string Service_CredSSP_XMLNmsp;
    internal string Registry_Path_Credentials_Delegation;
    internal string Key_Allow_Fresh_Credentials;
    internal string Key_Concatenate_Defaults_AllowFresh;
    internal string Delegate;
    internal string keyAllowcredssp;
    private static string NODE_ATTRIBUTE;
    private static int NODE_TEXT;
    internal string ALIAS_WQL;
    internal string ALIAS_ASSOCIATION;
    internal string ALIAS_SELECTOR;
    internal string URI_WQL_DIALECT;
    internal string URI_SELECTOR_DIALECT;
    internal string URI_ASSOCIATION_DIALECT;
    internal string WSManOp;
    private PSCmdlet cmdletname;
    private NavigationCmdletProvider _provider;
    private FileStream _fs;
    private StreamReader _sr;
    private static ResourceManager _resourceMgr;
    internal static Sessions AutoSession;
    internal WSManHelper(PSCmdlet cmdlet);
    internal WSManHelper(NavigationCmdletProvider provider);
    private static WSManHelper();
    internal static void ReleaseSessions();
    internal static void ThrowIfNotAdministrator();
    internal string GetResourceMsgFromResourcetext(string rscname);
    internal static string FormatResourceMsgFromResourcetextS(string rscname, Object[] args);
    internal string FormatResourceMsgFromResourcetext(string resourceName, Object[] args);
    private static string FormatResourceMsgFromResourcetextS(ResourceManager resourceManager, string resourceName, Object[] args);
    internal void AddtoDictionary(string key, object value);
    internal object RemoveFromDictionary(string computer);
    internal static Dictionary`2<string, object> GetSessionObjCache();
    internal string GetRootNodeName(string operation, string resourceUri, string actionStr);
    internal string StripParams(string uri);
    internal string ReadFile(string path);
    internal string ProcessInput(IWSManEx wsman, string filepath, string operation, string root, Hashtable valueset, IWSManResourceLocator resourceUri, IWSManSession sessionObj);
    internal string GetXmlNs(string resUri);
    internal XmlNode GetXmlNode(string xmlString, string xpathpattern, string xmlnamespace);
    internal string CreateConnectionString(Uri ConnUri, int port, string computername, string applicationname);
    internal IWSManResourceLocator InitializeResourceLocator(Hashtable optionset, Hashtable selectorset, string fragment, Uri dialect, IWSManEx wsmanObj, Uri resourceuri);
    internal static void ValidateSpecifiedAuthentication(AuthenticationMechanism authentication, PSCredential credential, string certificateThumbprint);
    internal IWSManSession CreateSessionObject(IWSManEx wsmanObject, AuthenticationMechanism authentication, SessionOption sessionoption, PSCredential credential, string connectionString, string certificateThumbprint, bool usessl);
    internal void CleanUp();
    internal string GetFilterString(Hashtable seletorset);
    internal void AssertError(string ErrorMessage, bool IsWSManError, object targetobject);
    internal string GetURIWithFilter(string uri, string filter, Hashtable selectorset, string operation);
    internal void CreateWsManConnection(string ParameterSetName, Uri connectionuri, int port, string computername, string applicationname, bool usessl, AuthenticationMechanism authentication, SessionOption sessionoption, PSCredential credential, string certificateThumbprint);
    internal bool ValidateCreadSSPRegistryRetry(bool AllowFreshCredentialsValueShouldBePresent, String[] DelegateComputer, string applicationname);
    internal bool ValidateCredSSPRegistry(bool AllowFreshCredentialsValueShouldBePresent, String[] DelegateComputer, string applicationname);
}
public class Microsoft.WSMan.Management.WSManProviderClientCertificateParameters : object {
    private string _issuer;
    private string _subject;
    private Uri _uri;
    private bool _enabled;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Issuer { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Subject { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri URI { get; public set; }
    [ParameterAttribute]
public bool Enabled { get; public set; }
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public Uri get_URI();
    public void set_URI(Uri value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public class Microsoft.WSMan.Management.WSManProviderInitializeParameters : object {
    private string _paramname;
    private string _paramvalue;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ParamName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ParamValue { get; public set; }
    public string get_ParamName();
    public void set_ParamName(string value);
    public string get_ParamValue();
    public void set_ParamValue(string value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemComputerParameters : object {
    private Hashtable optionset;
    private AuthenticationMechanism authentication;
    private string thumbPrint;
    private SessionOption sessionoption;
    private string applicationname;
    private int port;
    private SwitchParameter usessl;
    private Uri connectionuri;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Hashtable OptionSet { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public AuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbprint { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SessionOption SessionOption { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string ApplicationName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Port { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSSL { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ConnectionURI { get; public set; }
    public Hashtable get_OptionSet();
    public void set_OptionSet(Hashtable value);
    public AuthenticationMechanism get_Authentication();
    public void set_Authentication(AuthenticationMechanism value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public SessionOption get_SessionOption();
    public void set_SessionOption(SessionOption value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public Uri get_ConnectionURI();
    public void set_ConnectionURI(Uri value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemPluginParameters : object {
    private string _plugin;
    private string _filename;
    private string _sdkversion;
    private Uri _resourceuri;
    private Object[] _capability;
    private string _xmlRenderingtype;
    private string _file;
    private PSCredential runAsCredentials;
    private bool sharedHost;
    private bool autoRestart;
    private Nullable`1<UInt32> processIdleTimeoutSeconds;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Plugin { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string FileName { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string SDKVersion { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri Resource { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Capability { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string XMLRenderingType { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string File { get; public set; }
    [ValidateNotNullAttribute]
[ParameterAttribute]
public PSCredential RunAsCredential { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSharedProcess { get; public set; }
    [ParameterAttribute]
public SwitchParameter AutoRestart { get; public set; }
    [ParameterAttribute]
public Nullable`1<UInt32> ProcessIdleTimeoutSec { get; public set; }
    public string get_Plugin();
    public void set_Plugin(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_SDKVersion();
    public void set_SDKVersion(string value);
    public Uri get_Resource();
    public void set_Resource(Uri value);
    public Object[] get_Capability();
    public void set_Capability(Object[] value);
    public string get_XMLRenderingType();
    public void set_XMLRenderingType(string value);
    public string get_File();
    public void set_File(string value);
    public PSCredential get_RunAsCredential();
    public void set_RunAsCredential(PSCredential value);
    public SwitchParameter get_UseSharedProcess();
    public void set_UseSharedProcess(SwitchParameter value);
    public SwitchParameter get_AutoRestart();
    public void set_AutoRestart(SwitchParameter value);
    public Nullable`1<UInt32> get_ProcessIdleTimeoutSec();
    public void set_ProcessIdleTimeoutSec(Nullable`1<UInt32> value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemResourceParameters : object {
    private Uri _resourceuri;
    private Object[] _capability;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Uri ResourceUri { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public Object[] Capability { get; public set; }
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public Object[] get_Capability();
    public void set_Capability(Object[] value);
}
public class Microsoft.WSMan.Management.WSManProviderNewItemSecurityParameters : object {
    private string _sddl;
    [ParameterAttribute]
public string Sddl { get; public set; }
    public string get_Sddl();
    public void set_Sddl(string value);
}
public class Microsoft.WSMan.Management.WSManProviderSetItemDynamicParameters : object {
    private SwitchParameter _concatenate;
    [ParameterAttribute]
public SwitchParameter Concatenate { get; public set; }
    public SwitchParameter get_Concatenate();
    public void set_Concatenate(SwitchParameter value);
}
public class Microsoft.WSMan.Management.WSManProvidersListenerParameters : object {
    private string _address;
    private string _transport;
    private int _port;
    private string _hostName;
    private bool _enabled;
    private string _urlprefix;
    private string _certificatethumbprint;
    private bool _IsPortSpecified;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Address { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Transport { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public int Port { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string HostName { get; public set; }
    [ParameterAttribute]
public bool Enabled { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string URLPrefix { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string CertificateThumbPrint { get; public set; }
    public bool IsPortSpecified { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public string get_Transport();
    public void set_Transport(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_HostName();
    public void set_HostName(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_URLPrefix();
    public void set_URLPrefix(string value);
    public string get_CertificateThumbPrint();
    public void set_CertificateThumbPrint(string value);
    public bool get_IsPortSpecified();
    public void set_IsPortSpecified(bool value);
}
internal static class Microsoft.WSMan.Management.WSManResourceLoader : object {
    private static Dictionary`2<string, string> ResourceValueCache;
    private static WSManResourceLoader();
    internal static void LoadResourceData();
    internal static string GetResourceString(string Key);
}
[TypeLibTypeAttribute("0")]
public enum Microsoft.WSMan.Management.WSManSessionFlags : Enum {
    public int value__;
    public static WSManSessionFlags WSManNone;
    public static WSManSessionFlags WSManFlagUtf8;
    public static WSManSessionFlags WSManFlagCredUserNamePassword;
    public static WSManSessionFlags WSManFlagSkipCACheck;
    public static WSManSessionFlags WSManFlagSkipCNCheck;
    public static WSManSessionFlags WSManFlagUseNoAuthentication;
    public static WSManSessionFlags WSManFlagUseDigest;
    public static WSManSessionFlags WSManFlagUseNegotiate;
    public static WSManSessionFlags WSManFlagUseBasic;
    public static WSManSessionFlags WSManFlagUseKerberos;
    public static WSManSessionFlags WSManFlagNoEncryption;
    public static WSManSessionFlags WSManFlagEnableSpnServerPort;
    public static WSManSessionFlags WSManFlagUtf16;
    public static WSManSessionFlags WSManFlagUseCredSsp;
    public static WSManSessionFlags WSManFlagUseClientCertificate;
    public static WSManSessionFlags WSManFlagSkipRevocationCheck;
    public static WSManSessionFlags WSManFlagAllowNegotiateImplicitCredentials;
    public static WSManSessionFlags WSManFlagUseSsl;
}
internal static class Microsoft.WSMan.Management.WSManStringLiterals : object {
    internal static char DefaultPathSeparator;
    internal static char AlternatePathSeparator;
    internal static char EnclosingDoubleQuotes;
    internal static char Equalto;
    internal static char GreaterThan;
    internal static string XmlClosingTag;
    internal static char SingleWhiteSpace;
    internal static string ProviderName;
    internal static string WsMan_Schema;
    internal static string NS_XSI;
    internal static string ATTR_NIL;
    internal static string ATTR_NIL_NAME;
    internal static char WinrmPathSeparator;
    internal static string rootpath;
    internal static string ContainerChildValue;
    internal static string containerPlugin;
    internal static string containerClient;
    internal static string containerShell;
    internal static string containerClientCertificate;
    internal static string containerListener;
    internal static string containerService;
    internal static string containerAuth;
    internal static string containerDefaultPorts;
    internal static string containerTrustedHosts;
    internal static string containerSecurity;
    internal static string containerResources;
    internal static string containerSingleResource;
    internal static string containerInitParameters;
    internal static string containerQuotasParameters;
    internal static string containerWinrs;
    internal static string containerCertMapping;
    internal static String[] NewItemPluginConfigParams;
    internal static String[] NewItemResourceParams;
    internal static String[] NewItemInitParamsParams;
    internal static String[] NewItemSecurityParams;
    internal static string ConfigRunAsPasswordName;
    internal static string ConfigRunAsUserName;
    internal static string ConfigUseSharedProcess;
    internal static string ConfigAutoRestart;
    internal static string ConfigProcessIdleTimeoutSec;
    internal static string ConfigResourceUriName;
    internal static string ConfigInitializeParameterTag;
    internal static string ConfigInitializeParameterName;
    internal static string ConfigInitializeParameterValue;
    internal static string ConfigSecurityUri;
    internal static string HiddenSuffixForSourceOfValue;
    public static string StartWinrmServiceSBFormat;
    private static WSManStringLiterals();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class WsManResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidFileName { get; }
    internal static string NewItemShouldContinueClientCertCaption { get; }
    internal static string NotProperURI { get; }
    internal static string CredSSPContinueQuery { get; }
    internal static string NewItemShouldContinueListenerCaption { get; }
    internal static string ShouldContinueSecurityQuery { get; }
    internal static string SetItemWhatIfAndConfirmText { get; }
    internal static string EnableCredSSPPolicyValidateError { get; }
    internal static string NewItemShouldContinueListenerQuery { get; }
    internal static string ErrorElevationNeeded { get; }
    internal static string DriveRootError { get; }
    internal static string WSManServiceStartCaption { get; }
    internal static string CredSSPServerContinueQuery { get; }
    internal static string QuickConfigContinueCaption { get; }
    internal static string Vendor { get; }
    internal static string NoChangeValue { get; }
    internal static string CredSSPContinueCaption { get; }
    internal static string SetItemShouldContinueCaption { get; }
    internal static string TrustedHostValueTypeError { get; }
    internal static string CredSSPServiceNotConfigured { get; }
    internal static string DisconnectFailure { get; }
    internal static string CmdletNotAvailable { get; }
    internal static string NoAttributeMatch { get; }
    internal static string AmbiguousAuthentication { get; }
    internal static string InvalidComputerName { get; }
    internal static string CredSSPClientAndDelegateMustBeSpecified { get; }
    internal static string value { get; }
    internal static string ItemDoesNotExist { get; }
    internal static string ShouldContinueSecurityCaption { get; }
    internal static string SetItemNotSupported { get; }
    internal static string NoDelegateFreshCred { get; }
    internal static string SetItemServiceRestartWarning { get; }
    internal static string QuickConfigContinueQuery { get; }
    internal static string SetItemOnRunAsPasswordNoRunAsUser { get; }
    internal static string SetItemWarningForGlobalQuota { get; }
    internal static string SetItemShouldContinueQuery { get; }
    internal static string DelegateFreshCred { get; }
    internal static string ConfigStorage { get; }
    internal static string WinRMServiceError { get; }
    internal static string InvalidPath { get; }
    internal static string RemoveItemNotSupported { get; }
    internal static string SetItemTrustedHostsWarningQuery { get; }
    internal static string SetItemRootSDDLWarningQuery { get; }
    internal static string NewWSManSessionOptionCred { get; }
    internal static string SetItemWarnigForPPQ { get; }
    internal static string DisableCredSSPPolicyValidateError { get; }
    internal static string ResourceURIMissingInResourceDir { get; }
    internal static string NewWSManSessionOptionAuth { get; }
    internal static string SetItemGeneralSecurityCaption { get; }
    internal static string NewItemNotSupported { get; }
    internal static string WinrmNotConfigured { get; }
    internal static string InvalidValueType { get; }
    internal static string WSManServiceStartQuery { get; }
    internal static string NoResourceMatch { get; }
    internal static string CredSSPServiceConfigured { get; }
    internal static string CredSSPRoleAndDelegateCannotBeSpecified { get; }
    internal static string SetItemServiceRestartWarningRemote { get; }
    internal static string ConnectFailure { get; }
    internal static string Description { get; }
    internal static string LocalHost { get; }
    internal static string NewItemShouldContinueClientCertQuery { get; }
    internal static string ClearItemOnRunAsPassword { get; }
    internal static string NewDriveRootDoesNotExist { get; }
    internal static string MultipleResourceMatch { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidFileName();
    internal static string get_NewItemShouldContinueClientCertCaption();
    internal static string get_NotProperURI();
    internal static string get_CredSSPContinueQuery();
    internal static string get_NewItemShouldContinueListenerCaption();
    internal static string get_ShouldContinueSecurityQuery();
    internal static string get_SetItemWhatIfAndConfirmText();
    internal static string get_EnableCredSSPPolicyValidateError();
    internal static string get_NewItemShouldContinueListenerQuery();
    internal static string get_ErrorElevationNeeded();
    internal static string get_DriveRootError();
    internal static string get_WSManServiceStartCaption();
    internal static string get_CredSSPServerContinueQuery();
    internal static string get_QuickConfigContinueCaption();
    internal static string get_Vendor();
    internal static string get_NoChangeValue();
    internal static string get_CredSSPContinueCaption();
    internal static string get_SetItemShouldContinueCaption();
    internal static string get_TrustedHostValueTypeError();
    internal static string get_CredSSPServiceNotConfigured();
    internal static string get_DisconnectFailure();
    internal static string get_CmdletNotAvailable();
    internal static string get_NoAttributeMatch();
    internal static string get_AmbiguousAuthentication();
    internal static string get_InvalidComputerName();
    internal static string get_CredSSPClientAndDelegateMustBeSpecified();
    internal static string get_value();
    internal static string get_ItemDoesNotExist();
    internal static string get_ShouldContinueSecurityCaption();
    internal static string get_SetItemNotSupported();
    internal static string get_NoDelegateFreshCred();
    internal static string get_SetItemServiceRestartWarning();
    internal static string get_QuickConfigContinueQuery();
    internal static string get_SetItemOnRunAsPasswordNoRunAsUser();
    internal static string get_SetItemWarningForGlobalQuota();
    internal static string get_SetItemShouldContinueQuery();
    internal static string get_DelegateFreshCred();
    internal static string get_ConfigStorage();
    internal static string get_WinRMServiceError();
    internal static string get_InvalidPath();
    internal static string get_RemoveItemNotSupported();
    internal static string get_SetItemTrustedHostsWarningQuery();
    internal static string get_SetItemRootSDDLWarningQuery();
    internal static string get_NewWSManSessionOptionCred();
    internal static string get_SetItemWarnigForPPQ();
    internal static string get_DisableCredSSPPolicyValidateError();
    internal static string get_ResourceURIMissingInResourceDir();
    internal static string get_NewWSManSessionOptionAuth();
    internal static string get_SetItemGeneralSecurityCaption();
    internal static string get_NewItemNotSupported();
    internal static string get_WinrmNotConfigured();
    internal static string get_InvalidValueType();
    internal static string get_WSManServiceStartQuery();
    internal static string get_NoResourceMatch();
    internal static string get_CredSSPServiceConfigured();
    internal static string get_CredSSPRoleAndDelegateCannotBeSpecified();
    internal static string get_SetItemServiceRestartWarningRemote();
    internal static string get_ConnectFailure();
    internal static string get_Description();
    internal static string get_LocalHost();
    internal static string get_NewItemShouldContinueClientCertQuery();
    internal static string get_ClearItemOnRunAsPassword();
    internal static string get_NewDriveRootDoesNotExist();
    internal static string get_MultipleResourceMatch();
}
