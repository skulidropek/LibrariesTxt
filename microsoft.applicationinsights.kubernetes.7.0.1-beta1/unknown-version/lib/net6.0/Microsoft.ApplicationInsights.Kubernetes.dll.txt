internal class Microsoft.ApplicationInsights.Kubernetes.ClusterEnvironmentCheck : object {
    public bool IsInCluster { get; }
    public sealed virtual bool get_IsInCluster();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.CGroupContainerIdProvider : FileBasedContainerIdProvider {
    private static string CGroupPath;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    public CGroupContainerIdProvider(CGroupV1Matcher lineMatcher);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.CGroupV1Matcher : object {
    private static string LogCategory;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private static string MatchPattern;
    private static Regex MatchRegex;
    private static CGroupV1Matcher();
    public sealed virtual bool TryParseContainerId(string line, String& containerId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerDMountInfoContainerIdProvider : FileBasedContainerIdProvider {
    private static string InfoFilePath;
    public ContainerDMountInfoContainerIdProvider(ContainerDMountInfoMatcher matcher);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerDMountInfoMatcher : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private static string MatchPattern;
    private static Regex MatchRegex;
    private static string LogCategory;
    private static ContainerDMountInfoMatcher();
    public sealed virtual bool TryParseContainerId(string line, String& containerId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerIdHolder : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private IServiceScopeFactory _serviceScopeFactory;
    [NullableAttribute("2")]
private string _containerId;
    [NullableAttribute("2")]
public string ContainerId { get; }
    public ContainerIdHolder(IServiceScopeFactory serviceScopeFactory);
    [NullableContextAttribute("2")]
public sealed virtual string get_ContainerId();
    public sealed virtual bool TryBackFillContainerId(V1Pod pod, V1ContainerStatus& containerStatus);
    [NullableContextAttribute("2")]
private bool TryGetContainerId(String& containerId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerIdNormalizer : object {
    private static string ContainerIdIdentifierPattern;
    private Regex _matcher;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    public sealed virtual bool TryNormalize(string input, String& normalized);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerStatusManager : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private IPodInfoManager _podInfoManager;
    private IContainerIdHolder _containerIdHolder;
    public ContainerStatusManager(IPodInfoManager podInfoManager, IContainerIdHolder containerIdHolder);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerStatusManager/<IsContainerReadyAsync>d__4")]
public sealed virtual Task`1<bool> IsContainerReadyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerStatusManager/<GetMyContainerStatusAsync>d__5")]
public sealed virtual Task`1<V1ContainerStatus> GetMyContainerStatusAsync(CancellationToken cancellationToken);
    private bool IsContainerStatusReady(V1ContainerStatus containerStatus);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.Containers.ContainerStatusManager/<WaitContainerReadyAsync>d__7")]
public sealed virtual Task`1<V1ContainerStatus> WaitContainerReadyAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.DockerEngineMountInfoContainerIdProvider : FileBasedContainerIdProvider {
    private static string InfoFilePath;
    public DockerEngineMountInfoContainerIdProvider(DockerEngineMountInfoMatcher matcher);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.DockerEngineMountInfoMatcher : object {
    private static string LogCategory;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private static string MatchPattern;
    private static Regex MatchRegex;
    private static DockerEngineMountInfoMatcher();
    public sealed virtual bool TryParseContainerId(string line, String& containerId);
}
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.EmptyContainerIdProvider : object {
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetMyContainerId(String& containerId);
}
internal class Microsoft.ApplicationInsights.Kubernetes.Containers.EnvironmentVariableContainerIdProvider : object {
    [NullableAttribute("1")]
private ApplicationInsightsKubernetesDiagnosticSource _logger;
    [NullableAttribute("1")]
private static string EnvironmentVariableName;
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetMyContainerId(String& containerId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.ApplicationInsights.Kubernetes.Containers.FileBasedContainerIdProvider : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private IContainerIdMatcher _lineMatcher;
    private string _providerName;
    private string _targetFile;
    public FileBasedContainerIdProvider(IContainerIdMatcher lineMatcher, string filePath, string providerName);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetMyContainerId(String& containerId);
    private string FetchContainerId(string filePath);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.Containers.IContainerIdMatcher {
    public abstract virtual bool TryParseContainerId(string value, String& containerId);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.Containers.IContainerIdNormalizer {
    public abstract virtual bool TryNormalize(string input, String& normalized);
}
[NullableContextAttribute("2")]
internal interface Microsoft.ApplicationInsights.Kubernetes.Containers.IContainerIdProvider {
    public abstract virtual bool TryGetMyContainerId(String& containerId);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.Containers.IContainerStatusManager {
    public abstract virtual Task`1<V1ContainerStatus> GetMyContainerStatusAsync(CancellationToken cancellationToken);
    [ObsoleteAttribute("Stop waiting for container ready. Use GetMyContainerStatusAsync instead.", "True")]
public abstract virtual Task`1<bool> IsContainerReadyAsync(CancellationToken cancellationToken);
    [ObsoleteAttribute("Stop waiting for container ready. Use GetMyContainerStatusAsync instead.", "True")]
public abstract virtual Task`1<V1ContainerStatus> WaitContainerReadyAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.ApplicationInsights.Kubernetes.Debugging.ApplicationInsightsKubernetesDiagnosticObserver : object {
    private DiagnosticLogLevel _minimumLevel;
    public ApplicationInsightsKubernetesDiagnosticObserver(Nullable`1<DiagnosticLogLevel> minimumLevel);
    [DiagnosticNameAttribute("Critical")]
public void OnLogCritical(string content);
    [DiagnosticNameAttribute("Error")]
public void OnLogError(string content);
    [DiagnosticNameAttribute("Warning")]
public void OnLogWarning(string content);
    [DiagnosticNameAttribute("Information")]
public void OnLogInfo(string content);
    [DiagnosticNameAttribute("Debug")]
public void OnLogDebug(string content);
    [DiagnosticNameAttribute("Trace")]
public void OnLogTrace(string content);
    private void WriteLine(DiagnosticLogLevel level, string content);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.ApplicationInsights.Kubernetes.Debugging.ApplicationInsightsKubernetesDiagnosticSource : object {
    private DiagnosticSource _innerSource;
    public static string DiagnosticSourceName;
    [CompilerGeneratedAttribute]
private static ApplicationInsightsKubernetesDiagnosticSource <Instance>k__BackingField;
    public DiagnosticListener Observable { get; }
    public static ApplicationInsightsKubernetesDiagnosticSource Instance { get; }
    private static ApplicationInsightsKubernetesDiagnosticSource();
    public DiagnosticListener get_Observable();
    [CompilerGeneratedAttribute]
public static ApplicationInsightsKubernetesDiagnosticSource get_Instance();
    public void LogCritical(string message, Object[] args);
    public void LogError(string message, Object[] args);
    public void LogWarning(string message, Object[] args);
    public void LogInformation(string message, Object[] args);
    public void LogDebug(string message, Object[] args);
    public void LogTrace(string message, Object[] args);
    private void Write(DiagnosticLogLevel level, string message, Object[] args);
}
public enum Microsoft.ApplicationInsights.Kubernetes.Debugging.DiagnosticLogLevel : Enum {
    public int value__;
    public static DiagnosticLogLevel Critical;
    public static DiagnosticLogLevel Error;
    public static DiagnosticLogLevel Warning;
    public static DiagnosticLogLevel Information;
    public static DiagnosticLogLevel Debug;
    public static DiagnosticLogLevel Trace;
}
public interface Microsoft.ApplicationInsights.Kubernetes.IClusterEnvironmentCheck {
    public bool IsInCluster { get; }
    public abstract virtual bool get_IsInCluster();
}
[NullableContextAttribute("2")]
internal interface Microsoft.ApplicationInsights.Kubernetes.IContainerIdHolder {
    public string ContainerId { get; }
    public abstract virtual string get_ContainerId();
    [NullableContextAttribute("1")]
public abstract virtual bool TryBackFillContainerId(V1Pod pod, V1ContainerStatus& containerStatus);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.IK8sClientService {
    public abstract virtual Task`1<IEnumerable`1<V1Pod>> GetPodsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<V1Pod> GetPodByNameAsync(string podName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<V1ReplicaSet>> GetReplicaSetsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<V1Deployment>> GetDeploymentsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<V1Node>> GetNodesAsync(bool ignoreForbiddenException, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.ApplicationInsights.Kubernetes.IK8sEnvironment {
    public string ContainerID { get; }
    public string ContainerName { get; }
    public string ImageName { get; }
    public string DeploymentUid { get; }
    public string DeploymentName { get; }
    public string NodeName { get; }
    public string NodeUid { get; }
    [NullableAttribute("1")]
public string PodID { get; }
    public string PodLabels { get; }
    public string PodNamespace { get; }
    [NullableAttribute("1")]
public string PodName { get; }
    public string ReplicaSetUid { get; }
    public string ReplicaSetName { get; }
    public abstract virtual string get_ContainerID();
    public abstract virtual string get_ContainerName();
    public abstract virtual string get_ImageName();
    public abstract virtual string get_DeploymentUid();
    public abstract virtual string get_DeploymentName();
    public abstract virtual string get_NodeName();
    public abstract virtual string get_NodeUid();
    [NullableContextAttribute("1")]
public abstract virtual string get_PodID();
    public abstract virtual string get_PodLabels();
    public abstract virtual string get_PodNamespace();
    [NullableContextAttribute("1")]
public abstract virtual string get_PodName();
    public abstract virtual string get_ReplicaSetUid();
    public abstract virtual string get_ReplicaSetName();
}
internal interface Microsoft.ApplicationInsights.Kubernetes.IK8sEnvironmentFactory {
    public abstract virtual Task`1<IK8sEnvironment> CreateAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.IK8sEnvironmentFetcher {
    public abstract virtual Task UpdateK8sEnvironmentAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
internal interface Microsoft.ApplicationInsights.Kubernetes.IK8sEnvironmentHolder {
    public IK8sEnvironment K8sEnvironment { get; internal set; }
    public abstract virtual IK8sEnvironment get_K8sEnvironment();
    internal abstract virtual void set_K8sEnvironment(IK8sEnvironment value);
}
[NullableContextAttribute("1")]
public interface Microsoft.ApplicationInsights.Kubernetes.IK8sInfoBootstrap {
    public abstract virtual void Run(CancellationToken cancellationToken);
    public abstract virtual Task ExecuteAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.ApplicationInsights.Kubernetes.IK8sInfoService {
    public abstract virtual bool TryGetK8sInfo(IK8sEnvironment& k8sInfo);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.ITelemetryKeyCache {
    public abstract virtual string GetProcessedKey(string originalKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sClientService : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private bool _isDisposeCalled;
    private string _namespace;
    private KubernetesClientConfiguration _configuration;
    private IKubernetes _kubernetesClient;
    [CompilerGeneratedAttribute]
private static K8sClientService <Instance>k__BackingField;
    public static K8sClientService Instance { get; }
    private static K8sClientService();
    [CompilerGeneratedAttribute]
public static K8sClientService get_Instance();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sClientService/<GetPodsAsync>d__10")]
public sealed virtual Task`1<IEnumerable`1<V1Pod>> GetPodsAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<V1Pod> GetPodByNameAsync(string podName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sClientService/<GetReplicaSetsAsync>d__12")]
public sealed virtual Task`1<IEnumerable`1<V1ReplicaSet>> GetReplicaSetsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sClientService/<GetDeploymentsAsync>d__13")]
public sealed virtual Task`1<IEnumerable`1<V1Deployment>> GetDeploymentsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sClientService/<GetNodesAsync>d__14")]
public sealed virtual Task`1<IEnumerable`1<V1Node>> GetNodesAsync(bool ignoreForbiddenException, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sEnvironment : object {
    [CompilerGeneratedAttribute]
private string <ContainerID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <PodName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <PodID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PodLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PodNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicaSetUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicaSetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeUid>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ContainerID { get; }
    public string ContainerName { get; }
    public string ImageName { get; }
    [NullableAttribute("1")]
public string PodName { get; }
    [NullableAttribute("1")]
public string PodID { get; }
    public string PodLabels { get; }
    public string PodNamespace { get; }
    public string ReplicaSetUid { get; }
    public string ReplicaSetName { get; }
    public string DeploymentUid { get; }
    public string DeploymentName { get; }
    public string NodeName { get; }
    public string NodeUid { get; }
    public K8sEnvironment(V1ContainerStatus containerStatus, V1Pod pod, V1ReplicaSet replicaSet, V1Deployment deployment, V1Node node);
    [CompilerGeneratedAttribute]
protected K8sEnvironment(K8sEnvironment original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContainerID();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContainerName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ImageName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_PodName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_PodID();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PodLabels();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PodNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplicaSetUid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReplicaSetName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DeploymentUid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DeploymentName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_NodeName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_NodeUid();
    [NullableContextAttribute("1")]
private static string JoinKeyValuePairs(IDictionary`2<string, string> dictionary);
    [NullableContextAttribute("1")]
private static string CreateLabels(V1Pod pod);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(K8sEnvironment left, K8sEnvironment right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(K8sEnvironment left, K8sEnvironment right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(K8sEnvironment other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual K8sEnvironment <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sEnvironmentFactory : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private IContainerIdHolder _containerIdHolder;
    private IPodInfoManager _podInfoManager;
    private IContainerStatusManager _containerStatusManager;
    private IK8sClientService _k8sClient;
    public K8sEnvironmentFactory(IContainerIdHolder containerIdHolder, IPodInfoManager podInfoManager, IContainerStatusManager containerStatusManager, IK8sClientService k8sClient);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sEnvironmentFactory/<CreateAsync>d__6")]
public sealed virtual Task`1<IK8sEnvironment> CreateAsync(CancellationToken cancellationToken);
    private void HandleUnauthorizedAccess(HttpOperationException exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sEnvironmentFetcher : object {
    private IK8sEnvironmentHolder _k8sEnvironmentHolder;
    private IK8sEnvironmentFactory _k8SEnvironmentFactory;
    private ILogger _logger;
    private AppInsightsForKubernetesOptions _options;
    public K8sEnvironmentFetcher(IK8sEnvironmentHolder environmentHolder, IK8sEnvironmentFactory k8SEnvironmentFactory, IOptions`1<AppInsightsForKubernetesOptions> options, ILogger`1<K8sEnvironmentFetcher> logger);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sEnvironmentFetcher/<UpdateK8sEnvironmentAsync>d__5")]
public sealed virtual Task UpdateK8sEnvironmentAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sEnvironmentHolder : object {
    private IK8sEnvironment modreq(System.Runtime.CompilerServices.IsVolatile) _k8SEnvironment;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static K8sEnvironmentHolder <Instance>k__BackingField;
    [NullableAttribute("1")]
public static K8sEnvironmentHolder Instance { get; }
    public IK8sEnvironment K8sEnvironment { get; public set; }
    private static K8sEnvironmentHolder();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static K8sEnvironmentHolder get_Instance();
    public sealed virtual IK8sEnvironment get_K8sEnvironment();
    public sealed virtual void set_K8sEnvironment(IK8sEnvironment value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sInfoBackgroundService : BackgroundService {
    private IK8sInfoBootstrap _k8SInfoBootstrap;
    public K8sInfoBackgroundService(IK8sInfoBootstrap k8SInfoBootstrap);
    protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.K8sInfoBootstrap : object {
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    private AppInsightsForKubernetesOptions _options;
    private object _locker;
    private IServiceScopeFactory _serviceScopeFactory;
    private bool _hasExecuted;
    private ExponentialDelaySource _exponentialDelaySource;
    public K8sInfoBootstrap(IServiceScopeFactory serviceScopeFactory, IOptions`1<AppInsightsForKubernetesOptions> options);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.K8sInfoBootstrap/<ExecuteAsync>d__7")]
public sealed virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual void Run(CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Kubernetes.K8sInfoService : object {
    [NullableAttribute("1")]
private IK8sEnvironmentHolder _k8SEnvironmentHolder;
    [NullableContextAttribute("1")]
public K8sInfoService(IK8sEnvironmentHolder k8SEnvironmentHolder);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetK8sInfo(IK8sEnvironment& k8sInfo);
}
internal class Microsoft.ApplicationInsights.Kubernetes.K8sInfoServiceStub : object {
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetK8sInfo(IK8sEnvironment& k8sInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.KubernetesTelemetryInitializer : object {
    private static ApplicationInsightsKubernetesDiagnosticSource _logger;
    private SDKVersionUtils _sdkVersionUtils;
    [CompilerGeneratedAttribute]
private IK8sEnvironmentHolder <K8SEnvironmentHolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryKeyCache <TelemetryKeyCache>k__BackingField;
    internal IK8sEnvironmentHolder K8SEnvironmentHolder { get; }
    internal ITelemetryKeyCache TelemetryKeyCache { get; }
    public KubernetesTelemetryInitializer(IK8sEnvironmentHolder k8sEnvironmentHolder, SDKVersionUtils sdkVersionUtils, ITelemetryKeyCache telemetryKeyCache);
    private static KubernetesTelemetryInitializer();
    [CompilerGeneratedAttribute]
internal IK8sEnvironmentHolder get_K8SEnvironmentHolder();
    [CompilerGeneratedAttribute]
internal ITelemetryKeyCache get_TelemetryKeyCache();
    public sealed virtual void Initialize(ITelemetry telemetry);
    private void InitializeTelemetry(ITelemetry telemetry, IK8sEnvironment k8sEnv);
    private void SetCustomDimensions(ISupportProperties telemetry, IK8sEnvironment k8sEnvironment);
    private void SetCustomDimension(ISupportProperties telemetry, string key, string value, bool isValueOptional);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Kubernetes.PodExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static V1ReplicaSet GetMyReplicaSet(V1Pod self, IEnumerable`1<V1ReplicaSet> scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.ApplicationInsights.Kubernetes.Pods.EnvironmentVariablePodNameProviderBase : object {
    private string _environmentVariableName;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    public EnvironmentVariablePodNameProviderBase(string environmentVariableName);
    public sealed virtual bool TryGetPodName(String& podName);
}
internal class Microsoft.ApplicationInsights.Kubernetes.Pods.HostNamePodNameProvider : EnvironmentVariablePodNameProviderBase {
    [NullableAttribute("1")]
internal static string VariableName;
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.Pods.IPodInfoManager {
    public abstract virtual Task`1<V1Pod> WaitUntilMyPodReadyAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<V1Pod> GetMyPodAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<V1Pod> GetPodByNameAsync(string podName, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetContainerStatus(V1Pod pod, string containerId, V1ContainerStatus& containerStatus);
}
[NullableContextAttribute("1")]
internal interface Microsoft.ApplicationInsights.Kubernetes.Pods.IPodNameProvider {
    public abstract virtual bool TryGetPodName(String& podName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Pods.PodInfoManager : object {
    private IK8sClientService _k8SClient;
    private IContainerIdHolder _containerIdHolder;
    private IEnumerable`1<IPodNameProvider> _podNameProviders;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    public PodInfoManager(IK8sClientService k8sClient, IContainerIdHolder containerIdHolder, IEnumerable`1<IPodNameProvider> podNameProviders);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.Pods.PodInfoManager/<GetMyPodAsync>d__5")]
public sealed virtual Task`1<V1Pod> GetMyPodAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<V1Pod> GetPodByNameAsync(string podName, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetContainerStatus(V1Pod pod, string containerId, V1ContainerStatus& containerStatus);
    [AsyncStateMachineAttribute("Microsoft.ApplicationInsights.Kubernetes.Pods.PodInfoManager/<WaitUntilMyPodReadyAsync>d__8")]
public sealed virtual Task`1<V1Pod> WaitUntilMyPodReadyAsync(CancellationToken cancellationToken);
}
internal class Microsoft.ApplicationInsights.Kubernetes.Pods.UserSetPodNameProvider : EnvironmentVariablePodNameProviderBase {
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Kubernetes.ReplicaSetExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static V1Deployment GetMyDeployment(V1ReplicaSet self, IEnumerable`1<V1Deployment> scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Kubernetes.StringUtils : object {
    public static string Invariant(FormattableString formattable);
    [ExtensionAttribute]
public static string GetReadableSize(long numInBytes);
    [ExtensionAttribute]
public static string EscapeForLoggingMessage(string original);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.TelemetryKeyCache : object {
    private AppInsightsForKubernetesOptions _options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, string> _telemetryKeyCache;
    private static ApplicationInsightsKubernetesDiagnosticSource _logger;
    public TelemetryKeyCache(IOptions`1<AppInsightsForKubernetesOptions> options);
    private static TelemetryKeyCache();
    public sealed virtual string GetProcessedKey(string originalKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.ApplicationInsights.Kubernetes.TelemetryProperty : object {
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Kubernetes.Utilities.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> NullAsEmpty(IEnumerable`1<T> target);
}
internal class Microsoft.ApplicationInsights.Kubernetes.Utilities.ExponentialDelaySource : object {
    private TimeSpan _initial;
    private int _emitCount;
    private TimeSpan _maximum;
    public ExponentialDelaySource(TimeSpan initial, TimeSpan maximum);
    public TimeSpan GetNext();
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Kubernetes.Utilities.K8sItemsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> AsEnumerable(IItems`1<T> itemsHolder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.ApplicationInsights.Kubernetes.Utilities.SDKVersionUtils : object {
    [CompilerGeneratedAttribute]
private static SDKVersionUtils <Instance>k__BackingField;
    private static string SdkName;
    private string _sdkVersion;
    public static SDKVersionUtils Instance { get; }
    public string CurrentSDKVersion { get; }
    private static SDKVersionUtils();
    [CompilerGeneratedAttribute]
public static SDKVersionUtils get_Instance();
    public string get_CurrentSDKVersion();
    private static string GetSDKVersion();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.DependencyInjection.AppInsightsForKubernetesOptions : object {
    [NullableAttribute("1")]
public static string SectionName;
    [CompilerGeneratedAttribute]
private TimeSpan <InitializationTimeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <TelemetryKeyProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExponentIntervalBase>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClusterInfoRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IClusterEnvironmentCheck <ClusterCheckAction>k__BackingField;
    public TimeSpan InitializationTimeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> TelemetryKeyProcessor { get; public set; }
    public TimeSpan ExponentIntervalBase { get; public set; }
    public TimeSpan ClusterInfoRefreshInterval { get; public set; }
    public IClusterEnvironmentCheck ClusterCheckAction { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_InitializationTimeout();
    [CompilerGeneratedAttribute]
public void set_InitializationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_TelemetryKeyProcessor();
    [CompilerGeneratedAttribute]
public void set_TelemetryKeyProcessor(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExponentIntervalBase();
    [CompilerGeneratedAttribute]
public void set_ExponentIntervalBase(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClusterInfoRefreshInterval();
    [CompilerGeneratedAttribute]
public void set_ClusterInfoRefreshInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public IClusterEnvironmentCheck get_ClusterCheckAction();
    [CompilerGeneratedAttribute]
public void set_ClusterCheckAction(IClusterEnvironmentCheck value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ApplicationInsightsExtensions : object {
    private static ApplicationInsightsKubernetesDiagnosticSource _logger;
    private static ApplicationInsightsExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddApplicationInsightsKubernetesEnricher(IServiceCollection services, Nullable`1<LogLevel> diagnosticLogLevel, bool disableBackgroundService, Action`1<AppInsightsForKubernetesOptions> applyOptions, IClusterEnvironmentCheck clusterCheck);
    [ExtensionAttribute]
public static void StartApplicationInsightsKubernetesEnricher(IServiceProvider serviceProvider);
    private static bool KubernetesTelemetryInitializerExists(IServiceCollection serviceCollection);
    [ExtensionAttribute]
internal static void ConfigureKubernetesTelemetryInitializer(IServiceCollection services, Action`1<AppInsightsForKubernetesOptions> overwriteOptions, IClusterEnvironmentCheck clusterCheck, bool skipRegisterBackendService);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Extensions.DependencyInjection.IKubernetesServiceCollectionBuilder {
    public abstract virtual IServiceCollection RegisterServices(IServiceCollection serviceCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.KubernetesServiceCollectionBuilder : object {
    private IClusterEnvironmentCheck _clusterCheck;
    private bool _skipRegisterBackendService;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<AppInsightsForKubernetesOptions> _customizeOptions;
    private ApplicationInsightsKubernetesDiagnosticSource _logger;
    [NullableContextAttribute("2")]
public KubernetesServiceCollectionBuilder(Action`1<AppInsightsForKubernetesOptions> customizeOptions, IClusterEnvironmentCheck clusterCheck, bool skipRegisterBackendService);
    public sealed virtual IServiceCollection RegisterServices(IServiceCollection serviceCollection);
    private void ConfigureOptions(IServiceCollection serviceCollection);
    private static void RegisterCommonServices(IServiceCollection serviceCollection);
    protected virtual void RegisterSettingsProvider(IServiceCollection serviceCollection);
    protected virtual void RegisterK8sEnvironmentFactory(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
private void <ConfigureOptions>b__6_0(AppInsightsForKubernetesOptions opt, IConfiguration configuration);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
