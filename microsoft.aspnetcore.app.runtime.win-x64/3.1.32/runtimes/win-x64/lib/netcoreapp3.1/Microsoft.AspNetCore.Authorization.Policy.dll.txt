public class Microsoft.AspNetCore.Authorization.AuthorizationMiddleware : object {
    private static string AuthorizationMiddlewareInvokedWithEndpointKey;
    private static object AuthorizationMiddlewareWithEndpointInvokedValue;
    private RequestDelegate _next;
    private IAuthorizationPolicyProvider _policyProvider;
    public AuthorizationMiddleware(RequestDelegate next, IAuthorizationPolicyProvider policyProvider);
    private static AuthorizationMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AuthorizationMiddleware/<Invoke>d__5")]
public Task Invoke(HttpContext context);
}
internal class Microsoft.AspNetCore.Authorization.Policy.AuthorizationPolicyMarkerService : object {
}
public interface Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator {
    public abstract virtual Task`1<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
    public abstract virtual Task`1<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object resource);
}
public class Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult : object {
    [CompilerGeneratedAttribute]
private bool <Challenged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forbidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    public bool Challenged { get; private set; }
    public bool Forbidden { get; private set; }
    public bool Succeeded { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Challenged();
    [CompilerGeneratedAttribute]
private void set_Challenged(bool value);
    [CompilerGeneratedAttribute]
public bool get_Forbidden();
    [CompilerGeneratedAttribute]
private void set_Forbidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    public static PolicyAuthorizationResult Challenge();
    public static PolicyAuthorizationResult Forbid();
    public static PolicyAuthorizationResult Success();
}
public class Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator : object {
    private IAuthorizationService _authorization;
    public PolicyEvaluator(IAuthorizationService authorization);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator/<AuthenticateAsync>d__2")]
public virtual Task`1<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator/<AuthorizeAsync>d__3")]
public virtual Task`1<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object resource);
}
internal static class Microsoft.AspNetCore.Authorization.Policy.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Exception_UnableToFindServices { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Exception_UnableToFindServices();
    internal static string FormatException_UnableToFindServices(object p0, object p1, object p2);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseAuthorization(IApplicationBuilder app);
    private static void VerifyServicesRegistered(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder);
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder, String[] policyNames);
    [ExtensionAttribute]
public static TBuilder RequireAuthorization(TBuilder builder, IAuthorizeData[] authorizeData);
    private static void RequireAuthorizationCore(TBuilder builder, IEnumerable`1<IAuthorizeData> authorizeData);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddAuthorizationPolicyEvaluator(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorization(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAuthorization(IServiceCollection services, Action`1<AuthorizationOptions> configure);
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
