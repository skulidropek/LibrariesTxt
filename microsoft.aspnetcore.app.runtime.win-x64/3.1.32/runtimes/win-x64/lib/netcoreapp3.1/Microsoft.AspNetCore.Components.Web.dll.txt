[AttributeUsageAttribute("4")]
public class Microsoft.AspNetCore.Components.BindInputElementAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInvariantCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Type { get; }
    public string Suffix { get; }
    public string ValueAttribute { get; }
    public string ChangeAttribute { get; }
    public bool IsInvariantCulture { get; }
    public string Format { get; }
    public BindInputElementAttribute(string type, string suffix, string valueAttribute, string changeAttribute, bool isInvariantCulture, string format);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public string get_ValueAttribute();
    [CompilerGeneratedAttribute]
public string get_ChangeAttribute();
    [CompilerGeneratedAttribute]
public bool get_IsInvariantCulture();
    [CompilerGeneratedAttribute]
public string get_Format();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.Forms.EditContextFieldClassExtensions : object {
    [ExtensionAttribute]
public static string FieldCssClass(EditContext editContext, Expression`1<Func`1<TField>> accessor);
    [ExtensionAttribute]
public static string FieldCssClass(EditContext editContext, FieldIdentifier& fieldIdentifier);
}
public class Microsoft.AspNetCore.Components.Forms.EditForm : ComponentBase {
    private Func`1<Task> _handleSubmitDelegate;
    private EditContext _fixedEditContext;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <AdditionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<EditContext> <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<EditContext> <OnSubmit>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<EditContext> <OnValidSubmit>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<EditContext> <OnInvalidSubmit>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> AdditionalAttributes { get; public set; }
    [ParameterAttribute]
public EditContext EditContext { get; public set; }
    [ParameterAttribute]
public object Model { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<EditContext> ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<EditContext> OnSubmit { get; public set; }
    [ParameterAttribute]
public EventCallback`1<EditContext> OnValidSubmit { get; public set; }
    [ParameterAttribute]
public EventCallback`1<EditContext> OnInvalidSubmit { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_AdditionalAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public EditContext get_EditContext();
    [CompilerGeneratedAttribute]
public void set_EditContext(EditContext value);
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(object value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<EditContext> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<EditContext> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<EditContext> get_OnSubmit();
    [CompilerGeneratedAttribute]
public void set_OnSubmit(EventCallback`1<EditContext> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<EditContext> get_OnValidSubmit();
    [CompilerGeneratedAttribute]
public void set_OnValidSubmit(EventCallback`1<EditContext> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<EditContext> get_OnInvalidSubmit();
    [CompilerGeneratedAttribute]
public void set_OnInvalidSubmit(EventCallback`1<EditContext> value);
    protected virtual void OnParametersSet();
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Components.Forms.EditForm/<HandleSubmitAsync>d__33")]
private Task HandleSubmitAsync();
}
public abstract class Microsoft.AspNetCore.Components.Forms.InputBase`1 : ComponentBase {
    private EventHandler`1<ValidationStateChangedEventArgs> _validationStateChangedHandler;
    private bool _previousParsingAttemptFailed;
    private ValidationMessageStore _parsingValidationMessages;
    private Type _nullableUnderlyingType;
    [CompilerGeneratedAttribute]
private EditContext <CascadedEditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <AdditionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<TValue> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`1<TValue>> <ValueExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldIdentifier <FieldIdentifier>k__BackingField;
    [CascadingParameterAttribute]
private EditContext CascadedEditContext { get; private set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> AdditionalAttributes { get; public set; }
    [ParameterAttribute]
public TValue Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<TValue> ValueChanged { get; public set; }
    [ParameterAttribute]
public Expression`1<Func`1<TValue>> ValueExpression { get; public set; }
    protected EditContext EditContext { get; protected set; }
    protected FieldIdentifier FieldIdentifier { get; protected set; }
    protected TValue CurrentValue { get; protected set; }
    protected string CurrentValueAsString { get; protected set; }
    private string FieldClass { get; }
    protected string CssClass { get; }
    [CompilerGeneratedAttribute]
private EditContext get_CascadedEditContext();
    [CompilerGeneratedAttribute]
private void set_CascadedEditContext(EditContext value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_AdditionalAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(TValue value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TValue> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<TValue> value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<TValue>> get_ValueExpression();
    [CompilerGeneratedAttribute]
public void set_ValueExpression(Expression`1<Func`1<TValue>> value);
    [CompilerGeneratedAttribute]
protected EditContext get_EditContext();
    [CompilerGeneratedAttribute]
protected void set_EditContext(EditContext value);
    [CompilerGeneratedAttribute]
protected FieldIdentifier get_FieldIdentifier();
    [CompilerGeneratedAttribute]
protected void set_FieldIdentifier(FieldIdentifier value);
    protected TValue get_CurrentValue();
    protected void set_CurrentValue(TValue value);
    protected string get_CurrentValueAsString();
    protected void set_CurrentValueAsString(string value);
    protected virtual string FormatValueAsString(TValue value);
    protected abstract virtual bool TryParseValueFromString(string value, TValue& result, String& validationErrorMessage);
    private string get_FieldClass();
    protected string get_CssClass();
    public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__38_0(object sender, ValidationStateChangedEventArgs eventArgs);
}
public class Microsoft.AspNetCore.Components.Forms.InputCheckbox : InputBase`1<bool> {
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual bool TryParseValueFromString(string value, Boolean& result, String& validationErrorMessage);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(bool __value);
}
public class Microsoft.AspNetCore.Components.Forms.InputDate`1 : InputBase`1<TValue> {
    private static string DateFormat;
    [CompilerGeneratedAttribute]
private string <ParsingErrorMessage>k__BackingField;
    [ParameterAttribute]
public string ParsingErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParsingErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ParsingErrorMessage(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual string FormatValueAsString(TValue value);
    protected virtual bool TryParseValueFromString(string value, TValue& result, String& validationErrorMessage);
    private static bool TryParseDateTime(string value, TValue& result);
    private static bool TryParseDateTimeOffset(string value, TValue& result);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__5_0(string __value);
}
public class Microsoft.AspNetCore.Components.Forms.InputNumber`1 : InputBase`1<TValue> {
    private static string _stepAttributeValue;
    [CompilerGeneratedAttribute]
private string <ParsingErrorMessage>k__BackingField;
    [ParameterAttribute]
public string ParsingErrorMessage { get; public set; }
    private static InputNumber`1();
    [CompilerGeneratedAttribute]
public string get_ParsingErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ParsingErrorMessage(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual bool TryParseValueFromString(string value, TValue& result, String& validationErrorMessage);
    protected virtual string FormatValueAsString(TValue value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__6_0(string __value);
}
public class Microsoft.AspNetCore.Components.Forms.InputSelect`1 : InputBase`1<TValue> {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual bool TryParseValueFromString(string value, TValue& result, String& validationErrorMessage);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__4_0(string __value);
}
public class Microsoft.AspNetCore.Components.Forms.InputText : InputBase`1<string> {
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual bool TryParseValueFromString(string value, String& result, String& validationErrorMessage);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(string __value);
}
public class Microsoft.AspNetCore.Components.Forms.InputTextArea : InputBase`1<string> {
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    protected virtual bool TryParseValueFromString(string value, String& result, String& validationErrorMessage);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(string __value);
}
public class Microsoft.AspNetCore.Components.Forms.ValidationMessage`1 : ComponentBase {
    private EditContext _previousEditContext;
    private Expression`1<Func`1<TValue>> _previousFieldAccessor;
    private EventHandler`1<ValidationStateChangedEventArgs> _validationStateChangedHandler;
    private FieldIdentifier _fieldIdentifier;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <AdditionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <CurrentEditContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`1<TValue>> <For>k__BackingField;
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> AdditionalAttributes { get; public set; }
    [CascadingParameterAttribute]
private EditContext CurrentEditContext { get; private set; }
    [ParameterAttribute]
public Expression`1<Func`1<TValue>> For { get; public set; }
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_AdditionalAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
private EditContext get_CurrentEditContext();
    [CompilerGeneratedAttribute]
private void set_CurrentEditContext(EditContext value);
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<TValue>> get_For();
    [CompilerGeneratedAttribute]
public void set_For(Expression`1<Func`1<TValue>> value);
    protected virtual void OnParametersSet();
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    private void HandleValidationStateChanged(object sender, ValidationStateChangedEventArgs eventArgs);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    private void DetachValidationStateChangedListener();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0(object sender, ValidationStateChangedEventArgs eventArgs);
}
public class Microsoft.AspNetCore.Components.Forms.ValidationSummary : ComponentBase {
    private EditContext _previousEditContext;
    private EventHandler`1<ValidationStateChangedEventArgs> _validationStateChangedHandler;
    [CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <AdditionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private EditContext <CurrentEditContext>k__BackingField;
    [ParameterAttribute]
public object Model { get; public set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> AdditionalAttributes { get; public set; }
    [CascadingParameterAttribute]
private EditContext CurrentEditContext { get; private set; }
    [CompilerGeneratedAttribute]
public object get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(object value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_AdditionalAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
private EditContext get_CurrentEditContext();
    [CompilerGeneratedAttribute]
private void set_CurrentEditContext(EditContext value);
    protected virtual void OnParametersSet();
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    private void HandleValidationStateChanged(object sender, ValidationStateChangedEventArgs eventArgs);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    private void DetachValidationStateChangedListener();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(object sender, ValidationStateChangedEventArgs eventArgs);
}
public class Microsoft.AspNetCore.Components.RenderTree.WebEventDescriptor : object {
    [CompilerGeneratedAttribute]
private int <BrowserRendererId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EventHandlerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventArgsType>k__BackingField;
    [CompilerGeneratedAttribute]
private EventFieldInfo <EventFieldInfo>k__BackingField;
    public int BrowserRendererId { get; public set; }
    public ulong EventHandlerId { get; public set; }
    public string EventArgsType { get; public set; }
    public EventFieldInfo EventFieldInfo { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BrowserRendererId();
    [CompilerGeneratedAttribute]
public void set_BrowserRendererId(int value);
    [CompilerGeneratedAttribute]
public ulong get_EventHandlerId();
    [CompilerGeneratedAttribute]
public void set_EventHandlerId(ulong value);
    [CompilerGeneratedAttribute]
public string get_EventArgsType();
    [CompilerGeneratedAttribute]
public void set_EventArgsType(string value);
    [CompilerGeneratedAttribute]
public EventFieldInfo get_EventFieldInfo();
    [CompilerGeneratedAttribute]
public void set_EventFieldInfo(EventFieldInfo value);
}
public class Microsoft.AspNetCore.Components.Routing.NavLink : ComponentBase {
    private static string DefaultActiveClass;
    private bool _isActive;
    private string _hrefAbsolute;
    private string _class;
    [CompilerGeneratedAttribute]
private string <ActiveClass>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <AdditionalAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManger>k__BackingField;
    [ParameterAttribute]
public string ActiveClass { get; public set; }
    [ParameterAttribute]
public IReadOnlyDictionary`2<string, object> AdditionalAttributes { get; public set; }
    protected string CssClass { get; protected set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public NavLinkMatch Match { get; public set; }
    [InjectAttribute]
private NavigationManager NavigationManger { get; private set; }
    [CompilerGeneratedAttribute]
public string get_ActiveClass();
    [CompilerGeneratedAttribute]
public void set_ActiveClass(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_AdditionalAttributes();
    [CompilerGeneratedAttribute]
public void set_AdditionalAttributes(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
protected string get_CssClass();
    [CompilerGeneratedAttribute]
protected void set_CssClass(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManger();
    [CompilerGeneratedAttribute]
private void set_NavigationManger(NavigationManager value);
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    public sealed virtual void Dispose();
    private void UpdateCssClass();
    private void OnLocationChanged(object sender, LocationChangedEventArgs args);
    private bool ShouldMatch(string currentUriAbsolute);
    private bool EqualsHrefExactlyOrIfTrailingSlashAdded(string currentUriAbsolute);
    protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    private string CombineWithSpace(string str1, string str2);
    private static bool IsStrictlyPrefixWithSeparator(string value, string prefix);
}
public enum Microsoft.AspNetCore.Components.Routing.NavLinkMatch : Enum {
    public int value__;
    public static NavLinkMatch Prefix;
    public static NavLinkMatch All;
}
[BindInputElementAttribute("", "value", "value", "onchange", "False", "")]
[BindInputElementAttribute("", "", "value", "onchange", "False", "")]
[BindInputElementAttribute("checkbox", "", "checked", "onchange", "False", "")]
[BindInputElementAttribute("text", "", "value", "onchange", "False", "")]
[BindInputElementAttribute("number", "", "value", "onchange", "True", "")]
[BindInputElementAttribute("number", "value", "value", "onchange", "True", "")]
[BindInputElementAttribute("date", "", "value", "onchange", "True", "yyyy-MM-dd")]
[BindInputElementAttribute("date", "value", "value", "onchange", "True", "yyyy-MM-dd")]
[BindInputElementAttribute("datetime-local", "", "value", "onchange", "True", "yyyy-MM-ddTHH:mm:ss")]
[BindInputElementAttribute("datetime-local", "value", "value", "onchange", "True", "yyyy-MM-ddTHH:mm:ss")]
[BindInputElementAttribute("month", "", "value", "onchange", "True", "yyyy-MM")]
[BindInputElementAttribute("month", "value", "value", "onchange", "True", "yyyy-MM")]
[BindInputElementAttribute("time", "", "value", "onchange", "True", "HH:mm:ss")]
[BindInputElementAttribute("time", "value", "value", "onchange", "True", "HH:mm:ss")]
[BindElementAttribute("select", "", "value", "onchange")]
[BindElementAttribute("textarea", "", "value", "onchange")]
public static class Microsoft.AspNetCore.Components.Web.BindAttributes : object {
}
public class Microsoft.AspNetCore.Components.Web.ClipboardEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.DataTransfer : object {
    [CompilerGeneratedAttribute]
private string <DropEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EffectAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTransferItem[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Types>k__BackingField;
    public string DropEffect { get; public set; }
    public string EffectAllowed { get; public set; }
    public String[] Files { get; public set; }
    public DataTransferItem[] Items { get; public set; }
    public String[] Types { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DropEffect();
    [CompilerGeneratedAttribute]
public void set_DropEffect(string value);
    [CompilerGeneratedAttribute]
public string get_EffectAllowed();
    [CompilerGeneratedAttribute]
public void set_EffectAllowed(string value);
    [CompilerGeneratedAttribute]
public String[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(String[] value);
    [CompilerGeneratedAttribute]
public DataTransferItem[] get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(DataTransferItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(String[] value);
}
public class Microsoft.AspNetCore.Components.Web.DataTransferItem : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Kind { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.DragEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private DataTransfer <DataTransfer>k__BackingField;
    public DataTransfer DataTransfer { get; public set; }
    [CompilerGeneratedAttribute]
public DataTransfer get_DataTransfer();
    [CompilerGeneratedAttribute]
public void set_DataTransfer(DataTransfer value);
}
public class Microsoft.AspNetCore.Components.Web.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lineno>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Colno>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Message { get; public set; }
    public string Filename { get; public set; }
    public int Lineno { get; public set; }
    public int Colno { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public int get_Lineno();
    [CompilerGeneratedAttribute]
public void set_Lineno(int value);
    [CompilerGeneratedAttribute]
public int get_Colno();
    [CompilerGeneratedAttribute]
public void set_Colno(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[EventHandlerAttribute("onload", "Microsoft.AspNetCore.Components.Web.ProgressEventArgs", "True", "True")]
[EventHandlerAttribute("onblur", "Microsoft.AspNetCore.Components.Web.FocusEventArgs", "True", "True")]
[EventHandlerAttribute("onfocusin", "Microsoft.AspNetCore.Components.Web.FocusEventArgs", "True", "True")]
[EventHandlerAttribute("onfocusout", "Microsoft.AspNetCore.Components.Web.FocusEventArgs", "True", "True")]
[EventHandlerAttribute("onmouseover", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("onmouseout", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("onmousemove", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("onmousedown", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("onmouseup", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("onclick", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("ondblclick", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("onwheel", "Microsoft.AspNetCore.Components.Web.WheelEventArgs", "True", "True")]
[EventHandlerAttribute("onmousewheel", "Microsoft.AspNetCore.Components.Web.WheelEventArgs", "True", "True")]
[EventHandlerAttribute("oncontextmenu", "Microsoft.AspNetCore.Components.Web.MouseEventArgs", "True", "True")]
[EventHandlerAttribute("ondrag", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("ondragend", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("ondragenter", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("ondragleave", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("ondragover", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("ondragstart", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("ondrop", "Microsoft.AspNetCore.Components.Web.DragEventArgs", "True", "True")]
[EventHandlerAttribute("onkeydown", "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", "True", "True")]
[EventHandlerAttribute("onkeyup", "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", "True", "True")]
[EventHandlerAttribute("onkeypress", "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", "True", "True")]
[EventHandlerAttribute("onchange", "Microsoft.AspNetCore.Components.ChangeEventArgs", "True", "True")]
[EventHandlerAttribute("oninput", "Microsoft.AspNetCore.Components.ChangeEventArgs", "True", "True")]
[EventHandlerAttribute("oninvalid", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onreset", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onselect", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onselectstart", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onselectionchange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onsubmit", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onbeforecopy", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onbeforecut", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onbeforepaste", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("oncopy", "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs", "True", "True")]
[EventHandlerAttribute("oncut", "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs", "True", "True")]
[EventHandlerAttribute("onpaste", "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs", "True", "True")]
[EventHandlerAttribute("ontouchcancel", "Microsoft.AspNetCore.Components.Web.TouchEventArgs", "True", "True")]
[EventHandlerAttribute("ontouchend", "Microsoft.AspNetCore.Components.Web.TouchEventArgs", "True", "True")]
[EventHandlerAttribute("ontouchmove", "Microsoft.AspNetCore.Components.Web.TouchEventArgs", "True", "True")]
[EventHandlerAttribute("ontouchstart", "Microsoft.AspNetCore.Components.Web.TouchEventArgs", "True", "True")]
[EventHandlerAttribute("ontouchenter", "Microsoft.AspNetCore.Components.Web.TouchEventArgs", "True", "True")]
[EventHandlerAttribute("ontouchleave", "Microsoft.AspNetCore.Components.Web.TouchEventArgs", "True", "True")]
[EventHandlerAttribute("ongotpointercapture", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onlostpointercapture", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointercancel", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointerdown", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointerenter", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointerleave", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointermove", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointerout", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointerover", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("onpointerup", "Microsoft.AspNetCore.Components.Web.PointerEventArgs", "True", "True")]
[EventHandlerAttribute("oncanplay", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("oncanplaythrough", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("oncuechange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("ondurationchange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onemptied", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onpause", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onplay", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onplaying", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onratechange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onseeked", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onseeking", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onstalled", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onstop", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onsuspend", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("ontimeupdate", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onvolumechange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onwaiting", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onloadstart", "Microsoft.AspNetCore.Components.Web.ProgressEventArgs", "True", "True")]
[EventHandlerAttribute("ontimeout", "Microsoft.AspNetCore.Components.Web.ProgressEventArgs", "True", "True")]
[EventHandlerAttribute("onabort", "Microsoft.AspNetCore.Components.Web.ProgressEventArgs", "True", "True")]
[EventHandlerAttribute("onfocus", "Microsoft.AspNetCore.Components.Web.FocusEventArgs", "True", "True")]
[EventHandlerAttribute("onloadend", "Microsoft.AspNetCore.Components.Web.ProgressEventArgs", "True", "True")]
[EventHandlerAttribute("onprogress", "Microsoft.AspNetCore.Components.Web.ProgressEventArgs", "True", "True")]
[EventHandlerAttribute("onerror", "Microsoft.AspNetCore.Components.Web.ErrorEventArgs", "True", "True")]
[EventHandlerAttribute("onactivate", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onbeforeactivate", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onbeforedeactivate", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("ondeactivate", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onended", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onfullscreenchange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onfullscreenerror", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onloadeddata", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onloadedmetadata", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onpointerlockchange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onpointerlockerror", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onreadystatechange", "System.EventArgs", "True", "True")]
[EventHandlerAttribute("onscroll", "System.EventArgs", "True", "True")]
public static class Microsoft.AspNetCore.Components.Web.EventHandlers : object {
}
public class Microsoft.AspNetCore.Components.Web.FocusEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.KeyboardEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Repeat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CtrlKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShiftKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AltKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetaKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Key { get; public set; }
    public string Code { get; public set; }
    public float Location { get; public set; }
    public bool Repeat { get; public set; }
    public bool CtrlKey { get; public set; }
    public bool ShiftKey { get; public set; }
    public bool AltKey { get; public set; }
    public bool MetaKey { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public float get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(float value);
    [CompilerGeneratedAttribute]
public bool get_Repeat();
    [CompilerGeneratedAttribute]
public void set_Repeat(bool value);
    [CompilerGeneratedAttribute]
public bool get_CtrlKey();
    [CompilerGeneratedAttribute]
public void set_CtrlKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShiftKey();
    [CompilerGeneratedAttribute]
public void set_ShiftKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_AltKey();
    [CompilerGeneratedAttribute]
public void set_AltKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_MetaKey();
    [CompilerGeneratedAttribute]
public void set_MetaKey(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.MouseEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private long <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScreenX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScreenY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClientX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClientY>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CtrlKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShiftKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AltKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetaKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public long Detail { get; public set; }
    public double ScreenX { get; public set; }
    public double ScreenY { get; public set; }
    public double ClientX { get; public set; }
    public double ClientY { get; public set; }
    public long Button { get; public set; }
    public long Buttons { get; public set; }
    public bool CtrlKey { get; public set; }
    public bool ShiftKey { get; public set; }
    public bool AltKey { get; public set; }
    public bool MetaKey { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(long value);
    [CompilerGeneratedAttribute]
public double get_ScreenX();
    [CompilerGeneratedAttribute]
public void set_ScreenX(double value);
    [CompilerGeneratedAttribute]
public double get_ScreenY();
    [CompilerGeneratedAttribute]
public void set_ScreenY(double value);
    [CompilerGeneratedAttribute]
public double get_ClientX();
    [CompilerGeneratedAttribute]
public void set_ClientX(double value);
    [CompilerGeneratedAttribute]
public double get_ClientY();
    [CompilerGeneratedAttribute]
public void set_ClientY(double value);
    [CompilerGeneratedAttribute]
public long get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(long value);
    [CompilerGeneratedAttribute]
public long get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(long value);
    [CompilerGeneratedAttribute]
public bool get_CtrlKey();
    [CompilerGeneratedAttribute]
public void set_CtrlKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShiftKey();
    [CompilerGeneratedAttribute]
public void set_ShiftKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_AltKey();
    [CompilerGeneratedAttribute]
public void set_AltKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_MetaKey();
    [CompilerGeneratedAttribute]
public void set_MetaKey(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.PointerEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private long <PointerId>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Pressure>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TiltX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TiltY>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PointerType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimary>k__BackingField;
    public long PointerId { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float Pressure { get; public set; }
    public float TiltX { get; public set; }
    public float TiltY { get; public set; }
    public string PointerType { get; public set; }
    public bool IsPrimary { get; public set; }
    [CompilerGeneratedAttribute]
public long get_PointerId();
    [CompilerGeneratedAttribute]
public void set_PointerId(long value);
    [CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    [CompilerGeneratedAttribute]
public float get_Pressure();
    [CompilerGeneratedAttribute]
public void set_Pressure(float value);
    [CompilerGeneratedAttribute]
public float get_TiltX();
    [CompilerGeneratedAttribute]
public void set_TiltX(float value);
    [CompilerGeneratedAttribute]
public float get_TiltY();
    [CompilerGeneratedAttribute]
public void set_TiltY(float value);
    [CompilerGeneratedAttribute]
public string get_PointerType();
    [CompilerGeneratedAttribute]
public void set_PointerType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimary();
    [CompilerGeneratedAttribute]
public void set_IsPrimary(bool value);
}
public class Microsoft.AspNetCore.Components.Web.ProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <LengthComputable>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Loaded>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public bool LengthComputable { get; public set; }
    public long Loaded { get; public set; }
    public long Total { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_LengthComputable();
    [CompilerGeneratedAttribute]
public void set_LengthComputable(bool value);
    [CompilerGeneratedAttribute]
public long get_Loaded();
    [CompilerGeneratedAttribute]
public void set_Loaded(long value);
    [CompilerGeneratedAttribute]
public long get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(long value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.TouchEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private long <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private TouchPoint[] <Touches>k__BackingField;
    [CompilerGeneratedAttribute]
private TouchPoint[] <TargetTouches>k__BackingField;
    [CompilerGeneratedAttribute]
private TouchPoint[] <ChangedTouches>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CtrlKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShiftKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AltKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetaKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public long Detail { get; public set; }
    public TouchPoint[] Touches { get; public set; }
    public TouchPoint[] TargetTouches { get; public set; }
    public TouchPoint[] ChangedTouches { get; public set; }
    public bool CtrlKey { get; public set; }
    public bool ShiftKey { get; public set; }
    public bool AltKey { get; public set; }
    public bool MetaKey { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Detail();
    [CompilerGeneratedAttribute]
public void set_Detail(long value);
    [CompilerGeneratedAttribute]
public TouchPoint[] get_Touches();
    [CompilerGeneratedAttribute]
public void set_Touches(TouchPoint[] value);
    [CompilerGeneratedAttribute]
public TouchPoint[] get_TargetTouches();
    [CompilerGeneratedAttribute]
public void set_TargetTouches(TouchPoint[] value);
    [CompilerGeneratedAttribute]
public TouchPoint[] get_ChangedTouches();
    [CompilerGeneratedAttribute]
public void set_ChangedTouches(TouchPoint[] value);
    [CompilerGeneratedAttribute]
public bool get_CtrlKey();
    [CompilerGeneratedAttribute]
public void set_CtrlKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShiftKey();
    [CompilerGeneratedAttribute]
public void set_ShiftKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_AltKey();
    [CompilerGeneratedAttribute]
public void set_AltKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_MetaKey();
    [CompilerGeneratedAttribute]
public void set_MetaKey(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Microsoft.AspNetCore.Components.Web.TouchPoint : object {
    [CompilerGeneratedAttribute]
private long <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScreenX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScreenY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClientX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ClientY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PageX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PageY>k__BackingField;
    public long Identifier { get; public set; }
    public double ScreenX { get; public set; }
    public double ScreenY { get; public set; }
    public double ClientX { get; public set; }
    public double ClientY { get; public set; }
    public double PageX { get; public set; }
    public double PageY { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(long value);
    [CompilerGeneratedAttribute]
public double get_ScreenX();
    [CompilerGeneratedAttribute]
public void set_ScreenX(double value);
    [CompilerGeneratedAttribute]
public double get_ScreenY();
    [CompilerGeneratedAttribute]
public void set_ScreenY(double value);
    [CompilerGeneratedAttribute]
public double get_ClientX();
    [CompilerGeneratedAttribute]
public void set_ClientX(double value);
    [CompilerGeneratedAttribute]
public double get_ClientY();
    [CompilerGeneratedAttribute]
public void set_ClientY(double value);
    [CompilerGeneratedAttribute]
public double get_PageX();
    [CompilerGeneratedAttribute]
public void set_PageX(double value);
    [CompilerGeneratedAttribute]
public double get_PageY();
    [CompilerGeneratedAttribute]
public void set_PageY(double value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.Web.WebEventCallbackFactoryEventArgsExtensions : object {
    [ExtensionAttribute]
public static EventCallback`1<ClipboardEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<ClipboardEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<ClipboardEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<ClipboardEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<DragEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<DragEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<DragEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<DragEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<ErrorEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<ErrorEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<ErrorEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<ErrorEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<FocusEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<FocusEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<FocusEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<FocusEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<KeyboardEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<KeyboardEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<KeyboardEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<KeyboardEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<MouseEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<MouseEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<MouseEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<MouseEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<PointerEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<PointerEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<PointerEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<PointerEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<ProgressEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<ProgressEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<ProgressEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<ProgressEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<TouchEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<TouchEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<TouchEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<TouchEventArgs, Task> callback);
    [ExtensionAttribute]
public static EventCallback`1<WheelEventArgs> Create(EventCallbackFactory factory, object receiver, Action`1<WheelEventArgs> callback);
    [ExtensionAttribute]
public static EventCallback`1<WheelEventArgs> Create(EventCallbackFactory factory, object receiver, Func`2<WheelEventArgs, Task> callback);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Components.Web.WebRenderTreeBuilderExtensions : object {
    [ExtensionAttribute]
public static void AddEventPreventDefaultAttribute(RenderTreeBuilder builder, int sequence, string eventName, bool value);
    [ExtensionAttribute]
public static void AddEventStopPropagationAttribute(RenderTreeBuilder builder, int sequence, string eventName, bool value);
}
public class Microsoft.AspNetCore.Components.Web.WheelEventArgs : MouseEventArgs {
    [CompilerGeneratedAttribute]
private double <DeltaX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DeltaZ>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DeltaMode>k__BackingField;
    public double DeltaX { get; public set; }
    public double DeltaY { get; public set; }
    public double DeltaZ { get; public set; }
    public long DeltaMode { get; public set; }
    [CompilerGeneratedAttribute]
public double get_DeltaX();
    [CompilerGeneratedAttribute]
public void set_DeltaX(double value);
    [CompilerGeneratedAttribute]
public double get_DeltaY();
    [CompilerGeneratedAttribute]
public void set_DeltaY(double value);
    [CompilerGeneratedAttribute]
public double get_DeltaZ();
    [CompilerGeneratedAttribute]
public void set_DeltaZ(double value);
    [CompilerGeneratedAttribute]
public long get_DeltaMode();
    [CompilerGeneratedAttribute]
public void set_DeltaMode(long value);
}
