public class Microsoft.AspNetCore.Connections.AddressInUseException : InvalidOperationException {
    public AddressInUseException(string message);
    public AddressInUseException(string message, Exception inner);
}
public class Microsoft.AspNetCore.Connections.ConnectionAbortedException : OperationCanceledException {
    public ConnectionAbortedException(string message);
    public ConnectionAbortedException(string message, Exception inner);
}
public class Microsoft.AspNetCore.Connections.ConnectionBuilder : object {
    private IList`1<Func`2<ConnectionDelegate, ConnectionDelegate>> _components;
    [CompilerGeneratedAttribute]
private IServiceProvider <ApplicationServices>k__BackingField;
    public IServiceProvider ApplicationServices { get; }
    public ConnectionBuilder(IServiceProvider applicationServices);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ApplicationServices();
    public sealed virtual IConnectionBuilder Use(Func`2<ConnectionDelegate, ConnectionDelegate> middleware);
    public sealed virtual ConnectionDelegate Build();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Connections.ConnectionBuilderExtensions : object {
    [ExtensionAttribute]
public static IConnectionBuilder UseConnectionHandler(IConnectionBuilder connectionBuilder);
    [ExtensionAttribute]
public static IConnectionBuilder Use(IConnectionBuilder connectionBuilder, Func`3<ConnectionContext, Func`1<Task>, Task> middleware);
    [ExtensionAttribute]
public static IConnectionBuilder Run(IConnectionBuilder connectionBuilder, Func`2<ConnectionContext, Task> middleware);
}
public abstract class Microsoft.AspNetCore.Connections.ConnectionContext : object {
    [CompilerGeneratedAttribute]
private CancellationToken <ConnectionClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndPoint>k__BackingField;
    public string ConnectionId { get; public set; }
    public IFeatureCollection Features { get; }
    public IDictionary`2<object, object> Items { get; public set; }
    public IDuplexPipe Transport { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    public abstract virtual string get_ConnectionId();
    public abstract virtual void set_ConnectionId(string value);
    public abstract virtual IFeatureCollection get_Features();
    public abstract virtual IDictionary`2<object, object> get_Items();
    public abstract virtual void set_Items(IDictionary`2<object, object> value);
    public abstract virtual IDuplexPipe get_Transport();
    public abstract virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    public virtual void Abort(ConnectionAbortedException abortReason);
    public virtual void Abort();
    public virtual ValueTask DisposeAsync();
}
public class Microsoft.AspNetCore.Connections.ConnectionDelegate : MulticastDelegate {
    public ConnectionDelegate(object object, IntPtr method);
    public virtual Task Invoke(ConnectionContext connection);
    public virtual IAsyncResult BeginInvoke(ConnectionContext connection, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.AspNetCore.Connections.ConnectionHandler : object {
    public abstract virtual Task OnConnectedAsync(ConnectionContext connection);
}
public class Microsoft.AspNetCore.Connections.ConnectionItems : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Items>k__BackingField;
    public IDictionary`2<object, object> Items { get; }
    private object System.Collections.Generic.IDictionary<System.Object,System.Object>.Item { get; private set; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly { get; }
    public ConnectionItems(IDictionary`2<object, object> items);
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Items();
    private sealed virtual override object System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Item(object key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Object,System.Object>.set_Item(object key, object value);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(object key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(object key);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(object key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(object key, Object& value);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.Object,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(KeyValuePair`2<object, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(KeyValuePair`2<object, object> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<object, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.AspNetCore.Connections.ConnectionResetException : IOException {
    public ConnectionResetException(string message);
    public ConnectionResetException(string message, Exception inner);
}
public class Microsoft.AspNetCore.Connections.DefaultConnectionContext : ConnectionContext {
    private CancellationTokenSource _connectionClosedTokenSource;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <ConnectionClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndPoint>k__BackingField;
    public string ConnectionId { get; public set; }
    public IFeatureCollection Features { get; }
    public ClaimsPrincipal User { get; public set; }
    public IDictionary`2<object, object> Items { get; public set; }
    public IDuplexPipe Application { get; public set; }
    public IDuplexPipe Transport { get; public set; }
    public CancellationToken ConnectionClosed { get; public set; }
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    public DefaultConnectionContext(string id);
    public DefaultConnectionContext(string id, IDuplexPipe transport, IDuplexPipe application);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public virtual IFeatureCollection get_Features();
    [CompilerGeneratedAttribute]
public sealed virtual ClaimsPrincipal get_User();
    [CompilerGeneratedAttribute]
public sealed virtual void set_User(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<object, object> get_Items();
    [CompilerGeneratedAttribute]
public virtual void set_Items(IDictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionClosed(CancellationToken value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_LocalEndPoint(EndPoint value);
    [CompilerGeneratedAttribute]
public virtual EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public virtual void set_RemoteEndPoint(EndPoint value);
    public virtual void Abort(ConnectionAbortedException abortReason);
    public virtual ValueTask DisposeAsync();
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionCompleteFeature {
    public abstract virtual void OnCompleted(Func`2<object, Task> callback, object state);
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionEndPointFeature {
    public EndPoint LocalEndPoint { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    public abstract virtual EndPoint get_LocalEndPoint();
    public abstract virtual void set_LocalEndPoint(EndPoint value);
    public abstract virtual EndPoint get_RemoteEndPoint();
    public abstract virtual void set_RemoteEndPoint(EndPoint value);
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionHeartbeatFeature {
    public abstract virtual void OnHeartbeat(Action`1<object> action, object state);
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionIdFeature {
    public string ConnectionId { get; public set; }
    public abstract virtual string get_ConnectionId();
    public abstract virtual void set_ConnectionId(string value);
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionInherentKeepAliveFeature {
    public bool HasInherentKeepAlive { get; }
    public abstract virtual bool get_HasInherentKeepAlive();
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature {
    public IDictionary`2<object, object> Items { get; public set; }
    public abstract virtual IDictionary`2<object, object> get_Items();
    public abstract virtual void set_Items(IDictionary`2<object, object> value);
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature {
    public CancellationToken ConnectionClosed { get; public set; }
    public abstract virtual CancellationToken get_ConnectionClosed();
    public abstract virtual void set_ConnectionClosed(CancellationToken value);
    public abstract virtual void Abort();
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeNotificationFeature {
    public CancellationToken ConnectionClosedRequested { get; public set; }
    public abstract virtual CancellationToken get_ConnectionClosedRequested();
    public abstract virtual void set_ConnectionClosedRequested(CancellationToken value);
    public abstract virtual void RequestClose();
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature {
    public IDuplexPipe Transport { get; public set; }
    public abstract virtual IDuplexPipe get_Transport();
    public abstract virtual void set_Transport(IDuplexPipe value);
}
public interface Microsoft.AspNetCore.Connections.Features.IConnectionUserFeature {
    public ClaimsPrincipal User { get; public set; }
    public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual void set_User(ClaimsPrincipal value);
}
public interface Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature {
    public MemoryPool`1<byte> MemoryPool { get; }
    public abstract virtual MemoryPool`1<byte> get_MemoryPool();
}
public interface Microsoft.AspNetCore.Connections.Features.ITlsHandshakeFeature {
    public SslProtocols Protocol { get; }
    public CipherAlgorithmType CipherAlgorithm { get; }
    public int CipherStrength { get; }
    public HashAlgorithmType HashAlgorithm { get; }
    public int HashStrength { get; }
    public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
    public int KeyExchangeStrength { get; }
    public abstract virtual SslProtocols get_Protocol();
    public abstract virtual CipherAlgorithmType get_CipherAlgorithm();
    public abstract virtual int get_CipherStrength();
    public abstract virtual HashAlgorithmType get_HashAlgorithm();
    public abstract virtual int get_HashStrength();
    public abstract virtual ExchangeAlgorithmType get_KeyExchangeAlgorithm();
    public abstract virtual int get_KeyExchangeStrength();
}
public interface Microsoft.AspNetCore.Connections.Features.ITransferFormatFeature {
    public TransferFormat SupportedFormats { get; }
    public TransferFormat ActiveFormat { get; public set; }
    public abstract virtual TransferFormat get_SupportedFormats();
    public abstract virtual TransferFormat get_ActiveFormat();
    public abstract virtual void set_ActiveFormat(TransferFormat value);
}
public class Microsoft.AspNetCore.Connections.FileHandleEndPoint : EndPoint {
    [CompilerGeneratedAttribute]
private ulong <FileHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private FileHandleType <FileHandleType>k__BackingField;
    public ulong FileHandle { get; }
    public FileHandleType FileHandleType { get; }
    public FileHandleEndPoint(ulong fileHandle, FileHandleType fileHandleType);
    [CompilerGeneratedAttribute]
public ulong get_FileHandle();
    [CompilerGeneratedAttribute]
public FileHandleType get_FileHandleType();
}
public enum Microsoft.AspNetCore.Connections.FileHandleType : Enum {
    public int value__;
    public static FileHandleType Auto;
    public static FileHandleType Tcp;
    public static FileHandleType Pipe;
}
public interface Microsoft.AspNetCore.Connections.IConnectionBuilder {
    public IServiceProvider ApplicationServices { get; }
    public abstract virtual IServiceProvider get_ApplicationServices();
    public abstract virtual IConnectionBuilder Use(Func`2<ConnectionDelegate, ConnectionDelegate> middleware);
    public abstract virtual ConnectionDelegate Build();
}
public interface Microsoft.AspNetCore.Connections.IConnectionFactory {
    public abstract virtual ValueTask`1<ConnectionContext> ConnectAsync(EndPoint endpoint, CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Connections.IConnectionListener {
    public EndPoint EndPoint { get; }
    public abstract virtual EndPoint get_EndPoint();
    public abstract virtual ValueTask`1<ConnectionContext> AcceptAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask UnbindAsync(CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Connections.IConnectionListenerFactory {
    public abstract virtual ValueTask`1<IConnectionListener> BindAsync(EndPoint endpoint, CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Connections.TransferFormat : Enum {
    public int value__;
    public static TransferFormat Binary;
    public static TransferFormat Text;
}
public class Microsoft.AspNetCore.Connections.UriEndPoint : EndPoint {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public Uri Uri { get; }
    public UriEndPoint(Uri uri);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
}
internal static class Microsoft.Extensions.Internal.ActivatorUtilities : object {
    private static MethodInfo GetServiceInfo;
    private static ActivatorUtilities();
    public static object CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters);
    public static ObjectFactory CreateFactory(Type instanceType, Type[] argumentTypes);
    public static T CreateInstance(IServiceProvider provider, Object[] parameters);
    public static T GetServiceOrCreateInstance(IServiceProvider provider);
    public static object GetServiceOrCreateInstance(IServiceProvider provider, Type type);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    private static object GetService(IServiceProvider sp, Type type, Type requiredBy, bool isDefaultParameterRequired);
    private static Expression BuildFactoryExpression(ConstructorInfo constructor, Nullable`1[] parameterMap, Expression serviceProvider, Expression factoryArgumentArray);
    private static void FindApplicableConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindMatchingConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindPreferredConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryCreateParameterMap(ParameterInfo[] constructorParameters, Type[] argumentTypes, Nullable`1[]& parameterMap);
    private static void ThrowMultipleCtorsMarkedWithAttributeException();
    private static void ThrowMarkedCtorDoesNotTakeAllProvidedArguments();
}
internal class Microsoft.Extensions.Internal.ActivatorUtilitiesConstructorAttribute : Attribute {
}
internal class Microsoft.Extensions.Internal.ObjectFactory : MulticastDelegate {
    public ObjectFactory(object object, IntPtr method);
    public virtual object Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    private static Type _nullable;
    private static ParameterDefaultValue();
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
}
