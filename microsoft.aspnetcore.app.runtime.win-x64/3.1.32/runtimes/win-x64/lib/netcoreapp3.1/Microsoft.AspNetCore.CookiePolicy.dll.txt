[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseCookiePolicy(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseCookiePolicy(IApplicationBuilder app, CookiePolicyOptions options);
}
public class Microsoft.AspNetCore.Builder.CookiePolicyOptions : object {
    internal static bool SuppressSameSiteNone;
    [CompilerGeneratedAttribute]
private SameSiteMode <MinimumSameSitePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpOnlyPolicy <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieSecurePolicy <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieBuilder <ConsentCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpContext, bool> <CheckConsentNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<AppendCookieContext> <OnAppendCookie>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DeleteCookieContext> <OnDeleteCookie>k__BackingField;
    public SameSiteMode MinimumSameSitePolicy { get; public set; }
    public HttpOnlyPolicy HttpOnly { get; public set; }
    public CookieSecurePolicy Secure { get; public set; }
    public CookieBuilder ConsentCookie { get; public set; }
    public Func`2<HttpContext, bool> CheckConsentNeeded { get; public set; }
    public Action`1<AppendCookieContext> OnAppendCookie { get; public set; }
    public Action`1<DeleteCookieContext> OnDeleteCookie { get; public set; }
    private static CookiePolicyOptions();
    [CompilerGeneratedAttribute]
public SameSiteMode get_MinimumSameSitePolicy();
    [CompilerGeneratedAttribute]
public void set_MinimumSameSitePolicy(SameSiteMode value);
    [CompilerGeneratedAttribute]
public HttpOnlyPolicy get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(HttpOnlyPolicy value);
    [CompilerGeneratedAttribute]
public CookieSecurePolicy get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(CookieSecurePolicy value);
    [CompilerGeneratedAttribute]
public CookieBuilder get_ConsentCookie();
    [CompilerGeneratedAttribute]
public void set_ConsentCookie(CookieBuilder value);
    [CompilerGeneratedAttribute]
public Func`2<HttpContext, bool> get_CheckConsentNeeded();
    [CompilerGeneratedAttribute]
public void set_CheckConsentNeeded(Func`2<HttpContext, bool> value);
    [CompilerGeneratedAttribute]
public Action`1<AppendCookieContext> get_OnAppendCookie();
    [CompilerGeneratedAttribute]
public void set_OnAppendCookie(Action`1<AppendCookieContext> value);
    [CompilerGeneratedAttribute]
public Action`1<DeleteCookieContext> get_OnDeleteCookie();
    [CompilerGeneratedAttribute]
public void set_OnDeleteCookie(Action`1<DeleteCookieContext> value);
}
public class Microsoft.AspNetCore.CookiePolicy.AppendCookieContext : object {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieOptions <CookieOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CookieName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CookieValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConsentNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IssueCookie>k__BackingField;
    public HttpContext Context { get; }
    public CookieOptions CookieOptions { get; }
    public string CookieName { get; public set; }
    public string CookieValue { get; public set; }
    public bool IsConsentNeeded { get; internal set; }
    public bool HasConsent { get; internal set; }
    public bool IssueCookie { get; public set; }
    public AppendCookieContext(HttpContext context, CookieOptions options, string name, string value);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
public CookieOptions get_CookieOptions();
    [CompilerGeneratedAttribute]
public string get_CookieName();
    [CompilerGeneratedAttribute]
public void set_CookieName(string value);
    [CompilerGeneratedAttribute]
public string get_CookieValue();
    [CompilerGeneratedAttribute]
public void set_CookieValue(string value);
    [CompilerGeneratedAttribute]
public bool get_IsConsentNeeded();
    [CompilerGeneratedAttribute]
internal void set_IsConsentNeeded(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasConsent();
    [CompilerGeneratedAttribute]
internal void set_HasConsent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IssueCookie();
    [CompilerGeneratedAttribute]
public void set_IssueCookie(bool value);
}
public class Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware : object {
    private RequestDelegate _next;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private CookiePolicyOptions <Options>k__BackingField;
    public CookiePolicyOptions Options { get; public set; }
    public CookiePolicyMiddleware(RequestDelegate next, IOptions`1<CookiePolicyOptions> options, ILoggerFactory factory);
    public CookiePolicyMiddleware(RequestDelegate next, IOptions`1<CookiePolicyOptions> options);
    [CompilerGeneratedAttribute]
public CookiePolicyOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(CookiePolicyOptions value);
    public Task Invoke(HttpContext context);
}
public class Microsoft.AspNetCore.CookiePolicy.DeleteCookieContext : object {
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieOptions <CookieOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CookieName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConsentNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IssueCookie>k__BackingField;
    public HttpContext Context { get; }
    public CookieOptions CookieOptions { get; }
    public string CookieName { get; public set; }
    public bool IsConsentNeeded { get; internal set; }
    public bool HasConsent { get; internal set; }
    public bool IssueCookie { get; public set; }
    public DeleteCookieContext(HttpContext context, CookieOptions options, string name);
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
public CookieOptions get_CookieOptions();
    [CompilerGeneratedAttribute]
public string get_CookieName();
    [CompilerGeneratedAttribute]
public void set_CookieName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsConsentNeeded();
    [CompilerGeneratedAttribute]
internal void set_IsConsentNeeded(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasConsent();
    [CompilerGeneratedAttribute]
internal void set_HasConsent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IssueCookie();
    [CompilerGeneratedAttribute]
public void set_IssueCookie(bool value);
}
public enum Microsoft.AspNetCore.CookiePolicy.HttpOnlyPolicy : Enum {
    public int value__;
    public static HttpOnlyPolicy None;
    public static HttpOnlyPolicy Always;
}
internal class Microsoft.AspNetCore.CookiePolicy.ResponseCookiesWrapper : object {
    private static string ConsentValue;
    private ILogger _logger;
    private Nullable`1<bool> _isConsentNeeded;
    private Nullable`1<bool> _hasConsent;
    [CompilerGeneratedAttribute]
private HttpContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IResponseCookiesFeature <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private CookiePolicyOptions <Options>k__BackingField;
    private HttpContext Context { get; }
    private IResponseCookiesFeature Feature { get; }
    private IResponseCookies Cookies { get; }
    private CookiePolicyOptions Options { get; }
    public bool IsConsentNeeded { get; }
    public bool HasConsent { get; }
    public bool CanTrack { get; }
    public ResponseCookiesWrapper(HttpContext context, CookiePolicyOptions options, IResponseCookiesFeature feature, ILogger logger);
    [CompilerGeneratedAttribute]
private HttpContext get_Context();
    [CompilerGeneratedAttribute]
private IResponseCookiesFeature get_Feature();
    private IResponseCookies get_Cookies();
    [CompilerGeneratedAttribute]
private CookiePolicyOptions get_Options();
    public sealed virtual bool get_IsConsentNeeded();
    public sealed virtual bool get_HasConsent();
    public sealed virtual bool get_CanTrack();
    public sealed virtual void GrantConsent();
    public sealed virtual void WithdrawConsent();
    public sealed virtual string CreateConsentCookie();
    private bool CheckPolicyRequired();
    public sealed virtual void Append(string key, string value);
    public sealed virtual void Append(string key, string value, CookieOptions options);
    private bool ApplyAppendPolicy(String& key, String& value, CookieOptions options);
    public sealed virtual void Delete(string key);
    public sealed virtual void Delete(string key, CookieOptions options);
    private void ApplyPolicy(string key, CookieOptions options);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.LoggingExtensions : object {
    private static Action`3<ILogger, bool, Exception> _needsConsent;
    private static Action`3<ILogger, bool, Exception> _hasConsent;
    private static Action`2<ILogger, Exception> _consentGranted;
    private static Action`2<ILogger, Exception> _consentWithdrawn;
    private static Action`3<ILogger, string, Exception> _cookieSuppressed;
    private static Action`3<ILogger, string, Exception> _deleteCookieSuppressed;
    private static Action`3<ILogger, string, Exception> _upgradedToSecure;
    private static Action`4<ILogger, string, string, Exception> _upgradedSameSite;
    private static Action`3<ILogger, string, Exception> _upgradedToHttpOnly;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static void NeedsConsent(ILogger logger, bool needsConsent);
    [ExtensionAttribute]
public static void HasConsent(ILogger logger, bool hasConsent);
    [ExtensionAttribute]
public static void ConsentGranted(ILogger logger);
    [ExtensionAttribute]
public static void ConsentWithdrawn(ILogger logger);
    [ExtensionAttribute]
public static void CookieSuppressed(ILogger logger, string key);
    [ExtensionAttribute]
public static void DeleteCookieSuppressed(ILogger logger, string key);
    [ExtensionAttribute]
public static void CookieUpgradedToSecure(ILogger logger, string key);
    [ExtensionAttribute]
public static void CookieSameSiteUpgraded(ILogger logger, string key, string mode);
    [ExtensionAttribute]
public static void CookieUpgradedToHttpOnly(ILogger logger, string key);
}
