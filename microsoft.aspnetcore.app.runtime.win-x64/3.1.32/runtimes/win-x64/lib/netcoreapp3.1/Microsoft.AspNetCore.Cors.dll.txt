[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CorsEndpointConventionBuilderExtensions : object {
    [ExtensionAttribute]
public static TBuilder RequireCors(TBuilder builder, string policyName);
    [ExtensionAttribute]
public static TBuilder RequireCors(TBuilder builder, Action`1<CorsPolicyBuilder> configurePolicy);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseCors(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseCors(IApplicationBuilder app, string policyName);
    [ExtensionAttribute]
public static IApplicationBuilder UseCors(IApplicationBuilder app, Action`1<CorsPolicyBuilder> configurePolicy);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Cors.CORSLoggerExtensions : object {
    private static Action`2<ILogger, Exception> _isPreflightRequest;
    private static Action`3<ILogger, string, Exception> _requestHasOriginHeader;
    private static Action`2<ILogger, Exception> _requestDoesNotHaveOriginHeader;
    private static Action`2<ILogger, Exception> _policySuccess;
    private static Action`2<ILogger, Exception> _policyFailure;
    private static Action`3<ILogger, string, Exception> _originNotAllowed;
    private static Action`3<ILogger, string, Exception> _accessControlMethodNotAllowed;
    private static Action`3<ILogger, string, Exception> _requestHeaderNotAllowed;
    private static Action`2<ILogger, Exception> _failedToSetCorsHeaders;
    private static Action`2<ILogger, Exception> _noCorsPolicyFound;
    private static Action`2<ILogger, Exception> _isNotPreflightRequest;
    private static CORSLoggerExtensions();
    [ExtensionAttribute]
public static void IsPreflightRequest(ILogger logger);
    [ExtensionAttribute]
public static void RequestHasOriginHeader(ILogger logger, string origin);
    [ExtensionAttribute]
public static void RequestDoesNotHaveOriginHeader(ILogger logger);
    [ExtensionAttribute]
public static void PolicySuccess(ILogger logger);
    [ExtensionAttribute]
public static void PolicyFailure(ILogger logger);
    [ExtensionAttribute]
public static void OriginNotAllowed(ILogger logger, string origin);
    [ExtensionAttribute]
public static void AccessControlMethodNotAllowed(ILogger logger, string accessControlMethod);
    [ExtensionAttribute]
public static void RequestHeaderNotAllowed(ILogger logger, string requestHeader);
    [ExtensionAttribute]
public static void FailedToSetCorsHeaders(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void NoCorsPolicyFound(ILogger logger);
    [ExtensionAttribute]
public static void IsNotPreflightRequest(ILogger logger);
}
public class Microsoft.AspNetCore.Cors.CorsPolicyMetadata : object {
    [CompilerGeneratedAttribute]
private CorsPolicy <Policy>k__BackingField;
    public CorsPolicy Policy { get; }
    public CorsPolicyMetadata(CorsPolicy policy);
    [CompilerGeneratedAttribute]
public sealed virtual CorsPolicy get_Policy();
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Cors.DisableCorsAttribute : Attribute {
}
[AttributeUsageAttribute("68")]
public class Microsoft.AspNetCore.Cors.EnableCorsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    public string PolicyName { get; public set; }
    public EnableCorsAttribute(string policyName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PolicyName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PolicyName(string value);
}
public static class Microsoft.AspNetCore.Cors.Infrastructure.CorsConstants : object {
    public static string PreflightHttpMethod;
    public static string Origin;
    public static string AnyOrigin;
    public static string AccessControlRequestMethod;
    public static string AccessControlRequestHeaders;
    public static string AccessControlAllowOrigin;
    public static string AccessControlAllowHeaders;
    public static string AccessControlExposeHeaders;
    public static string AccessControlAllowMethods;
    public static string AccessControlAllowCredentials;
    public static string AccessControlMaxAge;
    private static CorsConstants();
}
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware : object {
    private static string CorsMiddlewareWithEndpointInvokedKey;
    private static object CorsMiddlewareWithEndpointInvokedValue;
    private Func`2<object, Task> OnResponseStartingDelegate;
    private RequestDelegate _next;
    private CorsPolicy _policy;
    private string _corsPolicyName;
    [CompilerGeneratedAttribute]
private ICorsService <CorsService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private ICorsService CorsService { get; }
    private ILogger Logger { get; }
    public CorsMiddleware(RequestDelegate next, ICorsService corsService, ILoggerFactory loggerFactory);
    public CorsMiddleware(RequestDelegate next, ICorsService corsService, ILoggerFactory loggerFactory, string policyName);
    public CorsMiddleware(RequestDelegate next, ICorsService corsService, CorsPolicy policy, ILoggerFactory loggerFactory);
    private static CorsMiddleware();
    [CompilerGeneratedAttribute]
private ICorsService get_CorsService();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    public Task Invoke(HttpContext context, ICorsPolicyProvider corsPolicyProvider);
    private Task EvaluateAndApplyPolicy(HttpContext context, CorsPolicy corsPolicy);
    private static Task OnResponseStarting(object state);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware/<<Invoke>g__InvokeCoreAwaited|15_0>d")]
private Task <Invoke>g__InvokeCoreAwaited|15_0(HttpContext context, Task`1<CorsPolicy> policyTask);
}
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions : object {
    private string _defaultPolicyName;
    [CompilerGeneratedAttribute]
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, ValueTuple`2<CorsPolicy, Task`1<CorsPolicy>>> <PolicyMap>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IDictionary`2<string, ValueTuple`2<CorsPolicy, Task`1<CorsPolicy>>> PolicyMap { get; }
    public string DefaultPolicyName { get; public set; }
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, ValueTuple`2<CorsPolicy, Task`1<CorsPolicy>>> get_PolicyMap();
    public string get_DefaultPolicyName();
    public void set_DefaultPolicyName(string value);
    public void AddDefaultPolicy(CorsPolicy policy);
    public void AddDefaultPolicy(Action`1<CorsPolicyBuilder> configurePolicy);
    public void AddPolicy(string name, CorsPolicy policy);
    public void AddPolicy(string name, Action`1<CorsPolicyBuilder> configurePolicy);
    public CorsPolicy GetPolicy(string name);
}
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicy : object {
    private Nullable`1<TimeSpan> _preflightMaxAge;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <IsOriginAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExposedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Origins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsCredentials>k__BackingField;
    public bool AllowAnyHeader { get; }
    public bool AllowAnyMethod { get; }
    public bool AllowAnyOrigin { get; }
    public Func`2<string, bool> IsOriginAllowed { get; public set; }
    public IList`1<string> ExposedHeaders { get; }
    public IList`1<string> Headers { get; }
    public IList`1<string> Methods { get; }
    public IList`1<string> Origins { get; }
    public Nullable`1<TimeSpan> PreflightMaxAge { get; public set; }
    public bool SupportsCredentials { get; public set; }
    public bool get_AllowAnyHeader();
    public bool get_AllowAnyMethod();
    public bool get_AllowAnyOrigin();
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_IsOriginAllowed();
    [CompilerGeneratedAttribute]
public void set_IsOriginAllowed(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ExposedHeaders();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Headers();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Methods();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Origins();
    public Nullable`1<TimeSpan> get_PreflightMaxAge();
    public void set_PreflightMaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCredentials();
    [CompilerGeneratedAttribute]
public void set_SupportsCredentials(bool value);
    public virtual string ToString();
    private bool DefaultIsOriginAllowed(string origin);
}
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder : object {
    private CorsPolicy _policy;
    public CorsPolicyBuilder(String[] origins);
    public CorsPolicyBuilder(CorsPolicy policy);
    public CorsPolicyBuilder WithOrigins(String[] origins);
    internal static string GetNormalizedOrigin(string origin);
    public CorsPolicyBuilder WithHeaders(String[] headers);
    public CorsPolicyBuilder WithExposedHeaders(String[] exposedHeaders);
    public CorsPolicyBuilder WithMethods(String[] methods);
    public CorsPolicyBuilder AllowCredentials();
    public CorsPolicyBuilder DisallowCredentials();
    public CorsPolicyBuilder AllowAnyOrigin();
    public CorsPolicyBuilder AllowAnyMethod();
    public CorsPolicyBuilder AllowAnyHeader();
    public CorsPolicyBuilder SetPreflightMaxAge(TimeSpan preflightMaxAge);
    public CorsPolicyBuilder SetIsOriginAllowed(Func`2<string, bool> isOriginAllowed);
    public CorsPolicyBuilder SetIsOriginAllowedToAllowWildcardSubdomains();
    public CorsPolicy Build();
    private CorsPolicyBuilder Combine(CorsPolicy policy);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyExtensions : object {
    private static string _WildcardSubdomain;
    [ExtensionAttribute]
public static bool IsOriginAnAllowedSubdomain(CorsPolicy policy, string origin);
    private static Uri CreateDomainUri(string origin);
}
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsResult : object {
    private Nullable`1<TimeSpan> _preflightMaxAge;
    [CompilerGeneratedAttribute]
private bool <IsPreflightRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowedOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOriginAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedExposedHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VaryByOrigin>k__BackingField;
    public bool IsPreflightRequest { get; public set; }
    public string AllowedOrigin { get; public set; }
    public bool IsOriginAllowed { get; public set; }
    public bool SupportsCredentials { get; public set; }
    public IList`1<string> AllowedMethods { get; }
    public IList`1<string> AllowedHeaders { get; }
    public IList`1<string> AllowedExposedHeaders { get; }
    public bool VaryByOrigin { get; public set; }
    public Nullable`1<TimeSpan> PreflightMaxAge { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsPreflightRequest();
    [CompilerGeneratedAttribute]
public void set_IsPreflightRequest(bool value);
    [CompilerGeneratedAttribute]
public string get_AllowedOrigin();
    [CompilerGeneratedAttribute]
public void set_AllowedOrigin(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOriginAllowed();
    [CompilerGeneratedAttribute]
public void set_IsOriginAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCredentials();
    [CompilerGeneratedAttribute]
public void set_SupportsCredentials(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedMethods();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedHeaders();
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedExposedHeaders();
    [CompilerGeneratedAttribute]
public bool get_VaryByOrigin();
    [CompilerGeneratedAttribute]
public void set_VaryByOrigin(bool value);
    public Nullable`1<TimeSpan> get_PreflightMaxAge();
    public void set_PreflightMaxAge(Nullable`1<TimeSpan> value);
    public virtual string ToString();
}
public class Microsoft.AspNetCore.Cors.Infrastructure.CorsService : object {
    private CorsOptions _options;
    private ILogger _logger;
    public CorsService(IOptions`1<CorsOptions> options, ILoggerFactory loggerFactory);
    public CorsResult EvaluatePolicy(HttpContext context, string policyName);
    public sealed virtual CorsResult EvaluatePolicy(HttpContext context, CorsPolicy policy);
    private static void PopulateResult(HttpContext context, CorsPolicy policy, CorsResult result);
    public virtual void EvaluateRequest(HttpContext context, CorsPolicy policy, CorsResult result);
    public virtual void EvaluatePreflightRequest(HttpContext context, CorsPolicy policy, CorsResult result);
    public virtual void ApplyResult(CorsResult result, HttpResponse response);
    private static void AddHeaderValues(IList`1<string> target, IList`1<string> headerValues);
    private bool IsOriginAllowed(CorsPolicy policy, StringValues origin);
}
public class Microsoft.AspNetCore.Cors.Infrastructure.DefaultCorsPolicyProvider : object {
    private static Task`1<CorsPolicy> NullResult;
    private CorsOptions _options;
    public DefaultCorsPolicyProvider(IOptions`1<CorsOptions> options);
    private static DefaultCorsPolicyProvider();
    public sealed virtual Task`1<CorsPolicy> GetPolicyAsync(HttpContext context, string policyName);
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyMetadata {
    public CorsPolicy Policy { get; }
    public abstract virtual CorsPolicy get_Policy();
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsPolicyProvider {
    public abstract virtual Task`1<CorsPolicy> GetPolicyAsync(HttpContext context, string policyName);
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.ICorsService {
    public abstract virtual CorsResult EvaluatePolicy(HttpContext context, CorsPolicy policy);
    public abstract virtual void ApplyResult(CorsResult result, HttpResponse response);
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.IDisableCorsAttribute {
}
public interface Microsoft.AspNetCore.Cors.Infrastructure.IEnableCorsAttribute {
    public string PolicyName { get; public set; }
    public abstract virtual string get_PolicyName();
    public abstract virtual void set_PolicyName(string value);
}
internal static class Microsoft.AspNetCore.Cors.Infrastructure.UriHelpers : object {
    public static bool IsSubdomainOf(Uri subdomain, Uri domain);
}
internal static class Microsoft.AspNetCore.Cors.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string InsecureConfiguration { get; }
    internal static string PreflightMaxAgeOutOfRange { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_InsecureConfiguration();
    internal static string get_PreflightMaxAgeOutOfRange();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddCors(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddCors(IServiceCollection services, Action`1<CorsOptions> setupAction);
}
